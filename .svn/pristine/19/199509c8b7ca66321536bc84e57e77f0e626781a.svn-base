
HUB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011b50  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a70  08011ce0  08011ce0  00021ce0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012750  08012750  000301e4  2**0
                  CONTENTS
  4 .ARM          00000008  08012750  08012750  00022750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012758  08012758  000301e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012758  08012758  00022758  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801275c  0801275c  0002275c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08012760  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008244  200001e4  08012944  000301e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20008428  08012944  00038428  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025f79  00000000  00000000  00030214  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005299  00000000  00000000  0005618d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001ca0  00000000  00000000  0005b428  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001a68  00000000  00000000  0005d0c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000282c0  00000000  00000000  0005eb30  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001afae  00000000  00000000  00086df0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e0636  00000000  00000000  000a1d9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001823d4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000860c  00000000  00000000  00182450  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08011cc8 	.word	0x08011cc8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	08011cc8 	.word	0x08011cc8

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b972 	b.w	8000fa4 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9e08      	ldr	r6, [sp, #32]
 8000cde:	4604      	mov	r4, r0
 8000ce0:	4688      	mov	r8, r1
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d14b      	bne.n	8000d7e <__udivmoddi4+0xa6>
 8000ce6:	428a      	cmp	r2, r1
 8000ce8:	4615      	mov	r5, r2
 8000cea:	d967      	bls.n	8000dbc <__udivmoddi4+0xe4>
 8000cec:	fab2 f282 	clz	r2, r2
 8000cf0:	b14a      	cbz	r2, 8000d06 <__udivmoddi4+0x2e>
 8000cf2:	f1c2 0720 	rsb	r7, r2, #32
 8000cf6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cfa:	fa20 f707 	lsr.w	r7, r0, r7
 8000cfe:	4095      	lsls	r5, r2
 8000d00:	ea47 0803 	orr.w	r8, r7, r3
 8000d04:	4094      	lsls	r4, r2
 8000d06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d0a:	0c23      	lsrs	r3, r4, #16
 8000d0c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d10:	fa1f fc85 	uxth.w	ip, r5
 8000d14:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d18:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d1c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d20:	4299      	cmp	r1, r3
 8000d22:	d909      	bls.n	8000d38 <__udivmoddi4+0x60>
 8000d24:	18eb      	adds	r3, r5, r3
 8000d26:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d2a:	f080 811b 	bcs.w	8000f64 <__udivmoddi4+0x28c>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 8118 	bls.w	8000f64 <__udivmoddi4+0x28c>
 8000d34:	3f02      	subs	r7, #2
 8000d36:	442b      	add	r3, r5
 8000d38:	1a5b      	subs	r3, r3, r1
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d48:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d4c:	45a4      	cmp	ip, r4
 8000d4e:	d909      	bls.n	8000d64 <__udivmoddi4+0x8c>
 8000d50:	192c      	adds	r4, r5, r4
 8000d52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d56:	f080 8107 	bcs.w	8000f68 <__udivmoddi4+0x290>
 8000d5a:	45a4      	cmp	ip, r4
 8000d5c:	f240 8104 	bls.w	8000f68 <__udivmoddi4+0x290>
 8000d60:	3802      	subs	r0, #2
 8000d62:	442c      	add	r4, r5
 8000d64:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d68:	eba4 040c 	sub.w	r4, r4, ip
 8000d6c:	2700      	movs	r7, #0
 8000d6e:	b11e      	cbz	r6, 8000d78 <__udivmoddi4+0xa0>
 8000d70:	40d4      	lsrs	r4, r2
 8000d72:	2300      	movs	r3, #0
 8000d74:	e9c6 4300 	strd	r4, r3, [r6]
 8000d78:	4639      	mov	r1, r7
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0xbe>
 8000d82:	2e00      	cmp	r6, #0
 8000d84:	f000 80eb 	beq.w	8000f5e <__udivmoddi4+0x286>
 8000d88:	2700      	movs	r7, #0
 8000d8a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d8e:	4638      	mov	r0, r7
 8000d90:	4639      	mov	r1, r7
 8000d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d96:	fab3 f783 	clz	r7, r3
 8000d9a:	2f00      	cmp	r7, #0
 8000d9c:	d147      	bne.n	8000e2e <__udivmoddi4+0x156>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d302      	bcc.n	8000da8 <__udivmoddi4+0xd0>
 8000da2:	4282      	cmp	r2, r0
 8000da4:	f200 80fa 	bhi.w	8000f9c <__udivmoddi4+0x2c4>
 8000da8:	1a84      	subs	r4, r0, r2
 8000daa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dae:	2001      	movs	r0, #1
 8000db0:	4698      	mov	r8, r3
 8000db2:	2e00      	cmp	r6, #0
 8000db4:	d0e0      	beq.n	8000d78 <__udivmoddi4+0xa0>
 8000db6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dba:	e7dd      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000dbc:	b902      	cbnz	r2, 8000dc0 <__udivmoddi4+0xe8>
 8000dbe:	deff      	udf	#255	; 0xff
 8000dc0:	fab2 f282 	clz	r2, r2
 8000dc4:	2a00      	cmp	r2, #0
 8000dc6:	f040 808f 	bne.w	8000ee8 <__udivmoddi4+0x210>
 8000dca:	1b49      	subs	r1, r1, r5
 8000dcc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dd0:	fa1f f885 	uxth.w	r8, r5
 8000dd4:	2701      	movs	r7, #1
 8000dd6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dda:	0c23      	lsrs	r3, r4, #16
 8000ddc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000de0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000de4:	fb08 f10c 	mul.w	r1, r8, ip
 8000de8:	4299      	cmp	r1, r3
 8000dea:	d907      	bls.n	8000dfc <__udivmoddi4+0x124>
 8000dec:	18eb      	adds	r3, r5, r3
 8000dee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000df2:	d202      	bcs.n	8000dfa <__udivmoddi4+0x122>
 8000df4:	4299      	cmp	r1, r3
 8000df6:	f200 80cd 	bhi.w	8000f94 <__udivmoddi4+0x2bc>
 8000dfa:	4684      	mov	ip, r0
 8000dfc:	1a59      	subs	r1, r3, r1
 8000dfe:	b2a3      	uxth	r3, r4
 8000e00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e04:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e08:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e0c:	fb08 f800 	mul.w	r8, r8, r0
 8000e10:	45a0      	cmp	r8, r4
 8000e12:	d907      	bls.n	8000e24 <__udivmoddi4+0x14c>
 8000e14:	192c      	adds	r4, r5, r4
 8000e16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e1a:	d202      	bcs.n	8000e22 <__udivmoddi4+0x14a>
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	f200 80b6 	bhi.w	8000f8e <__udivmoddi4+0x2b6>
 8000e22:	4618      	mov	r0, r3
 8000e24:	eba4 0408 	sub.w	r4, r4, r8
 8000e28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e2c:	e79f      	b.n	8000d6e <__udivmoddi4+0x96>
 8000e2e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e32:	40bb      	lsls	r3, r7
 8000e34:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e38:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e3c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e40:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e44:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e48:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e4c:	4325      	orrs	r5, r4
 8000e4e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e52:	0c2c      	lsrs	r4, r5, #16
 8000e54:	fb08 3319 	mls	r3, r8, r9, r3
 8000e58:	fa1f fa8e 	uxth.w	sl, lr
 8000e5c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e60:	fb09 f40a 	mul.w	r4, r9, sl
 8000e64:	429c      	cmp	r4, r3
 8000e66:	fa02 f207 	lsl.w	r2, r2, r7
 8000e6a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e6e:	d90b      	bls.n	8000e88 <__udivmoddi4+0x1b0>
 8000e70:	eb1e 0303 	adds.w	r3, lr, r3
 8000e74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e78:	f080 8087 	bcs.w	8000f8a <__udivmoddi4+0x2b2>
 8000e7c:	429c      	cmp	r4, r3
 8000e7e:	f240 8084 	bls.w	8000f8a <__udivmoddi4+0x2b2>
 8000e82:	f1a9 0902 	sub.w	r9, r9, #2
 8000e86:	4473      	add	r3, lr
 8000e88:	1b1b      	subs	r3, r3, r4
 8000e8a:	b2ad      	uxth	r5, r5
 8000e8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e90:	fb08 3310 	mls	r3, r8, r0, r3
 8000e94:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e98:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e9c:	45a2      	cmp	sl, r4
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x1da>
 8000ea0:	eb1e 0404 	adds.w	r4, lr, r4
 8000ea4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ea8:	d26b      	bcs.n	8000f82 <__udivmoddi4+0x2aa>
 8000eaa:	45a2      	cmp	sl, r4
 8000eac:	d969      	bls.n	8000f82 <__udivmoddi4+0x2aa>
 8000eae:	3802      	subs	r0, #2
 8000eb0:	4474      	add	r4, lr
 8000eb2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eb6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eba:	eba4 040a 	sub.w	r4, r4, sl
 8000ebe:	454c      	cmp	r4, r9
 8000ec0:	46c2      	mov	sl, r8
 8000ec2:	464b      	mov	r3, r9
 8000ec4:	d354      	bcc.n	8000f70 <__udivmoddi4+0x298>
 8000ec6:	d051      	beq.n	8000f6c <__udivmoddi4+0x294>
 8000ec8:	2e00      	cmp	r6, #0
 8000eca:	d069      	beq.n	8000fa0 <__udivmoddi4+0x2c8>
 8000ecc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ed0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ed4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ed8:	40fd      	lsrs	r5, r7
 8000eda:	40fc      	lsrs	r4, r7
 8000edc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ee0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ee4:	2700      	movs	r7, #0
 8000ee6:	e747      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000ee8:	f1c2 0320 	rsb	r3, r2, #32
 8000eec:	fa20 f703 	lsr.w	r7, r0, r3
 8000ef0:	4095      	lsls	r5, r2
 8000ef2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ef6:	fa21 f303 	lsr.w	r3, r1, r3
 8000efa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000efe:	4338      	orrs	r0, r7
 8000f00:	0c01      	lsrs	r1, r0, #16
 8000f02:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f06:	fa1f f885 	uxth.w	r8, r5
 8000f0a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f12:	fb07 f308 	mul.w	r3, r7, r8
 8000f16:	428b      	cmp	r3, r1
 8000f18:	fa04 f402 	lsl.w	r4, r4, r2
 8000f1c:	d907      	bls.n	8000f2e <__udivmoddi4+0x256>
 8000f1e:	1869      	adds	r1, r5, r1
 8000f20:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f24:	d22f      	bcs.n	8000f86 <__udivmoddi4+0x2ae>
 8000f26:	428b      	cmp	r3, r1
 8000f28:	d92d      	bls.n	8000f86 <__udivmoddi4+0x2ae>
 8000f2a:	3f02      	subs	r7, #2
 8000f2c:	4429      	add	r1, r5
 8000f2e:	1acb      	subs	r3, r1, r3
 8000f30:	b281      	uxth	r1, r0
 8000f32:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f36:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f3e:	fb00 f308 	mul.w	r3, r0, r8
 8000f42:	428b      	cmp	r3, r1
 8000f44:	d907      	bls.n	8000f56 <__udivmoddi4+0x27e>
 8000f46:	1869      	adds	r1, r5, r1
 8000f48:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f4c:	d217      	bcs.n	8000f7e <__udivmoddi4+0x2a6>
 8000f4e:	428b      	cmp	r3, r1
 8000f50:	d915      	bls.n	8000f7e <__udivmoddi4+0x2a6>
 8000f52:	3802      	subs	r0, #2
 8000f54:	4429      	add	r1, r5
 8000f56:	1ac9      	subs	r1, r1, r3
 8000f58:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f5c:	e73b      	b.n	8000dd6 <__udivmoddi4+0xfe>
 8000f5e:	4637      	mov	r7, r6
 8000f60:	4630      	mov	r0, r6
 8000f62:	e709      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000f64:	4607      	mov	r7, r0
 8000f66:	e6e7      	b.n	8000d38 <__udivmoddi4+0x60>
 8000f68:	4618      	mov	r0, r3
 8000f6a:	e6fb      	b.n	8000d64 <__udivmoddi4+0x8c>
 8000f6c:	4541      	cmp	r1, r8
 8000f6e:	d2ab      	bcs.n	8000ec8 <__udivmoddi4+0x1f0>
 8000f70:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f74:	eb69 020e 	sbc.w	r2, r9, lr
 8000f78:	3801      	subs	r0, #1
 8000f7a:	4613      	mov	r3, r2
 8000f7c:	e7a4      	b.n	8000ec8 <__udivmoddi4+0x1f0>
 8000f7e:	4660      	mov	r0, ip
 8000f80:	e7e9      	b.n	8000f56 <__udivmoddi4+0x27e>
 8000f82:	4618      	mov	r0, r3
 8000f84:	e795      	b.n	8000eb2 <__udivmoddi4+0x1da>
 8000f86:	4667      	mov	r7, ip
 8000f88:	e7d1      	b.n	8000f2e <__udivmoddi4+0x256>
 8000f8a:	4681      	mov	r9, r0
 8000f8c:	e77c      	b.n	8000e88 <__udivmoddi4+0x1b0>
 8000f8e:	3802      	subs	r0, #2
 8000f90:	442c      	add	r4, r5
 8000f92:	e747      	b.n	8000e24 <__udivmoddi4+0x14c>
 8000f94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f98:	442b      	add	r3, r5
 8000f9a:	e72f      	b.n	8000dfc <__udivmoddi4+0x124>
 8000f9c:	4638      	mov	r0, r7
 8000f9e:	e708      	b.n	8000db2 <__udivmoddi4+0xda>
 8000fa0:	4637      	mov	r7, r6
 8000fa2:	e6e9      	b.n	8000d78 <__udivmoddi4+0xa0>

08000fa4 <__aeabi_idiv0>:
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop

08000fa8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fac:	4b0e      	ldr	r3, [pc, #56]	; (8000fe8 <HAL_Init+0x40>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a0d      	ldr	r2, [pc, #52]	; (8000fe8 <HAL_Init+0x40>)
 8000fb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fb6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fb8:	4b0b      	ldr	r3, [pc, #44]	; (8000fe8 <HAL_Init+0x40>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a0a      	ldr	r2, [pc, #40]	; (8000fe8 <HAL_Init+0x40>)
 8000fbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fc2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fc4:	4b08      	ldr	r3, [pc, #32]	; (8000fe8 <HAL_Init+0x40>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a07      	ldr	r2, [pc, #28]	; (8000fe8 <HAL_Init+0x40>)
 8000fca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fd0:	2003      	movs	r0, #3
 8000fd2:	f000 f9d4 	bl	800137e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fd6:	2000      	movs	r0, #0
 8000fd8:	f00d f91c 	bl	800e214 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fdc:	f00c fe9e 	bl	800dd1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fe0:	2300      	movs	r3, #0
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40023c00 	.word	0x40023c00

08000fec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ff0:	4b06      	ldr	r3, [pc, #24]	; (800100c <HAL_IncTick+0x20>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	4b06      	ldr	r3, [pc, #24]	; (8001010 <HAL_IncTick+0x24>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	4a04      	ldr	r2, [pc, #16]	; (8001010 <HAL_IncTick+0x24>)
 8000ffe:	6013      	str	r3, [r2, #0]
}
 8001000:	bf00      	nop
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	20000000 	.word	0x20000000
 8001010:	20006758 	.word	0x20006758

08001014 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  return uwTick;
 8001018:	4b03      	ldr	r3, [pc, #12]	; (8001028 <HAL_GetTick+0x14>)
 800101a:	681b      	ldr	r3, [r3, #0]
}
 800101c:	4618      	mov	r0, r3
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	20006758 	.word	0x20006758

0800102c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d101      	bne.n	800103e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800103a:	2301      	movs	r3, #1
 800103c:	e0ed      	b.n	800121a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001044:	b2db      	uxtb	r3, r3
 8001046:	2b00      	cmp	r3, #0
 8001048:	d102      	bne.n	8001050 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f00c fe92 	bl	800dd74 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f022 0202 	bic.w	r2, r2, #2
 800105e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001060:	f7ff ffd8 	bl	8001014 <HAL_GetTick>
 8001064:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001066:	e012      	b.n	800108e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001068:	f7ff ffd4 	bl	8001014 <HAL_GetTick>
 800106c:	4602      	mov	r2, r0
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	1ad3      	subs	r3, r2, r3
 8001072:	2b0a      	cmp	r3, #10
 8001074:	d90b      	bls.n	800108e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800107a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2205      	movs	r2, #5
 8001086:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800108a:	2301      	movs	r3, #1
 800108c:	e0c5      	b.n	800121a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f003 0302 	and.w	r3, r3, #2
 8001098:	2b00      	cmp	r3, #0
 800109a:	d1e5      	bne.n	8001068 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f042 0201 	orr.w	r2, r2, #1
 80010aa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010ac:	f7ff ffb2 	bl	8001014 <HAL_GetTick>
 80010b0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80010b2:	e012      	b.n	80010da <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80010b4:	f7ff ffae 	bl	8001014 <HAL_GetTick>
 80010b8:	4602      	mov	r2, r0
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	1ad3      	subs	r3, r2, r3
 80010be:	2b0a      	cmp	r3, #10
 80010c0:	d90b      	bls.n	80010da <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010c6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2205      	movs	r2, #5
 80010d2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	e09f      	b.n	800121a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f003 0301 	and.w	r3, r3, #1
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d0e5      	beq.n	80010b4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	7e1b      	ldrb	r3, [r3, #24]
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	d108      	bne.n	8001102 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	e007      	b.n	8001112 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001110:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	7e5b      	ldrb	r3, [r3, #25]
 8001116:	2b01      	cmp	r3, #1
 8001118:	d108      	bne.n	800112c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001128:	601a      	str	r2, [r3, #0]
 800112a:	e007      	b.n	800113c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800113a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	7e9b      	ldrb	r3, [r3, #26]
 8001140:	2b01      	cmp	r3, #1
 8001142:	d108      	bne.n	8001156 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f042 0220 	orr.w	r2, r2, #32
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	e007      	b.n	8001166 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f022 0220 	bic.w	r2, r2, #32
 8001164:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	7edb      	ldrb	r3, [r3, #27]
 800116a:	2b01      	cmp	r3, #1
 800116c:	d108      	bne.n	8001180 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f022 0210 	bic.w	r2, r2, #16
 800117c:	601a      	str	r2, [r3, #0]
 800117e:	e007      	b.n	8001190 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f042 0210 	orr.w	r2, r2, #16
 800118e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	7f1b      	ldrb	r3, [r3, #28]
 8001194:	2b01      	cmp	r3, #1
 8001196:	d108      	bne.n	80011aa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f042 0208 	orr.w	r2, r2, #8
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	e007      	b.n	80011ba <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f022 0208 	bic.w	r2, r2, #8
 80011b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	7f5b      	ldrb	r3, [r3, #29]
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d108      	bne.n	80011d4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f042 0204 	orr.w	r2, r2, #4
 80011d0:	601a      	str	r2, [r3, #0]
 80011d2:	e007      	b.n	80011e4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f022 0204 	bic.w	r2, r2, #4
 80011e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	689a      	ldr	r2, [r3, #8]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	68db      	ldr	r3, [r3, #12]
 80011ec:	431a      	orrs	r2, r3
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	691b      	ldr	r3, [r3, #16]
 80011f2:	431a      	orrs	r2, r3
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	695b      	ldr	r3, [r3, #20]
 80011f8:	ea42 0103 	orr.w	r1, r2, r3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	1e5a      	subs	r2, r3, #1
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	430a      	orrs	r2, r1
 8001208:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2200      	movs	r2, #0
 800120e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2201      	movs	r2, #1
 8001214:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001218:	2300      	movs	r3, #0
}
 800121a:	4618      	mov	r0, r3
 800121c:	3710      	adds	r7, #16
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
	...

08001224 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001224:	b480      	push	{r7}
 8001226:	b085      	sub	sp, #20
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	f003 0307 	and.w	r3, r3, #7
 8001232:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001234:	4b0c      	ldr	r3, [pc, #48]	; (8001268 <__NVIC_SetPriorityGrouping+0x44>)
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800123a:	68ba      	ldr	r2, [r7, #8]
 800123c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001240:	4013      	ands	r3, r2
 8001242:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800124c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001250:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001254:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001256:	4a04      	ldr	r2, [pc, #16]	; (8001268 <__NVIC_SetPriorityGrouping+0x44>)
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	60d3      	str	r3, [r2, #12]
}
 800125c:	bf00      	nop
 800125e:	3714      	adds	r7, #20
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr
 8001268:	e000ed00 	.word	0xe000ed00

0800126c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001270:	4b04      	ldr	r3, [pc, #16]	; (8001284 <__NVIC_GetPriorityGrouping+0x18>)
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	0a1b      	lsrs	r3, r3, #8
 8001276:	f003 0307 	and.w	r3, r3, #7
}
 800127a:	4618      	mov	r0, r3
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr
 8001284:	e000ed00 	.word	0xe000ed00

08001288 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	4603      	mov	r3, r0
 8001290:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001296:	2b00      	cmp	r3, #0
 8001298:	db0b      	blt.n	80012b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800129a:	79fb      	ldrb	r3, [r7, #7]
 800129c:	f003 021f 	and.w	r2, r3, #31
 80012a0:	4907      	ldr	r1, [pc, #28]	; (80012c0 <__NVIC_EnableIRQ+0x38>)
 80012a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a6:	095b      	lsrs	r3, r3, #5
 80012a8:	2001      	movs	r0, #1
 80012aa:	fa00 f202 	lsl.w	r2, r0, r2
 80012ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012b2:	bf00      	nop
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	e000e100 	.word	0xe000e100

080012c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	6039      	str	r1, [r7, #0]
 80012ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	db0a      	blt.n	80012ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	b2da      	uxtb	r2, r3
 80012dc:	490c      	ldr	r1, [pc, #48]	; (8001310 <__NVIC_SetPriority+0x4c>)
 80012de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e2:	0112      	lsls	r2, r2, #4
 80012e4:	b2d2      	uxtb	r2, r2
 80012e6:	440b      	add	r3, r1
 80012e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012ec:	e00a      	b.n	8001304 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	b2da      	uxtb	r2, r3
 80012f2:	4908      	ldr	r1, [pc, #32]	; (8001314 <__NVIC_SetPriority+0x50>)
 80012f4:	79fb      	ldrb	r3, [r7, #7]
 80012f6:	f003 030f 	and.w	r3, r3, #15
 80012fa:	3b04      	subs	r3, #4
 80012fc:	0112      	lsls	r2, r2, #4
 80012fe:	b2d2      	uxtb	r2, r2
 8001300:	440b      	add	r3, r1
 8001302:	761a      	strb	r2, [r3, #24]
}
 8001304:	bf00      	nop
 8001306:	370c      	adds	r7, #12
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr
 8001310:	e000e100 	.word	0xe000e100
 8001314:	e000ed00 	.word	0xe000ed00

08001318 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001318:	b480      	push	{r7}
 800131a:	b089      	sub	sp, #36	; 0x24
 800131c:	af00      	add	r7, sp, #0
 800131e:	60f8      	str	r0, [r7, #12]
 8001320:	60b9      	str	r1, [r7, #8]
 8001322:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	f003 0307 	and.w	r3, r3, #7
 800132a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	f1c3 0307 	rsb	r3, r3, #7
 8001332:	2b04      	cmp	r3, #4
 8001334:	bf28      	it	cs
 8001336:	2304      	movcs	r3, #4
 8001338:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	3304      	adds	r3, #4
 800133e:	2b06      	cmp	r3, #6
 8001340:	d902      	bls.n	8001348 <NVIC_EncodePriority+0x30>
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	3b03      	subs	r3, #3
 8001346:	e000      	b.n	800134a <NVIC_EncodePriority+0x32>
 8001348:	2300      	movs	r3, #0
 800134a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800134c:	f04f 32ff 	mov.w	r2, #4294967295
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	fa02 f303 	lsl.w	r3, r2, r3
 8001356:	43da      	mvns	r2, r3
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	401a      	ands	r2, r3
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001360:	f04f 31ff 	mov.w	r1, #4294967295
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	fa01 f303 	lsl.w	r3, r1, r3
 800136a:	43d9      	mvns	r1, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001370:	4313      	orrs	r3, r2
         );
}
 8001372:	4618      	mov	r0, r3
 8001374:	3724      	adds	r7, #36	; 0x24
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr

0800137e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800137e:	b580      	push	{r7, lr}
 8001380:	b082      	sub	sp, #8
 8001382:	af00      	add	r7, sp, #0
 8001384:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	f7ff ff4c 	bl	8001224 <__NVIC_SetPriorityGrouping>
}
 800138c:	bf00      	nop
 800138e:	3708      	adds	r7, #8
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}

08001394 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001394:	b580      	push	{r7, lr}
 8001396:	b086      	sub	sp, #24
 8001398:	af00      	add	r7, sp, #0
 800139a:	4603      	mov	r3, r0
 800139c:	60b9      	str	r1, [r7, #8]
 800139e:	607a      	str	r2, [r7, #4]
 80013a0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013a2:	2300      	movs	r3, #0
 80013a4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013a6:	f7ff ff61 	bl	800126c <__NVIC_GetPriorityGrouping>
 80013aa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013ac:	687a      	ldr	r2, [r7, #4]
 80013ae:	68b9      	ldr	r1, [r7, #8]
 80013b0:	6978      	ldr	r0, [r7, #20]
 80013b2:	f7ff ffb1 	bl	8001318 <NVIC_EncodePriority>
 80013b6:	4602      	mov	r2, r0
 80013b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013bc:	4611      	mov	r1, r2
 80013be:	4618      	mov	r0, r3
 80013c0:	f7ff ff80 	bl	80012c4 <__NVIC_SetPriority>
}
 80013c4:	bf00      	nop
 80013c6:	3718      	adds	r7, #24
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}

080013cc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	4603      	mov	r3, r0
 80013d4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013da:	4618      	mov	r0, r3
 80013dc:	f7ff ff54 	bl	8001288 <__NVIC_EnableIRQ>
}
 80013e0:	bf00      	nop
 80013e2:	3708      	adds	r7, #8
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}

080013e8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b086      	sub	sp, #24
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80013f0:	2300      	movs	r3, #0
 80013f2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80013f4:	f7ff fe0e 	bl	8001014 <HAL_GetTick>
 80013f8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d101      	bne.n	8001404 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001400:	2301      	movs	r3, #1
 8001402:	e099      	b.n	8001538 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2200      	movs	r2, #0
 8001408:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2202      	movs	r2, #2
 8001410:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f022 0201 	bic.w	r2, r2, #1
 8001422:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001424:	e00f      	b.n	8001446 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001426:	f7ff fdf5 	bl	8001014 <HAL_GetTick>
 800142a:	4602      	mov	r2, r0
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	1ad3      	subs	r3, r2, r3
 8001430:	2b05      	cmp	r3, #5
 8001432:	d908      	bls.n	8001446 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2220      	movs	r2, #32
 8001438:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2203      	movs	r2, #3
 800143e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001442:	2303      	movs	r3, #3
 8001444:	e078      	b.n	8001538 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f003 0301 	and.w	r3, r3, #1
 8001450:	2b00      	cmp	r3, #0
 8001452:	d1e8      	bne.n	8001426 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800145c:	697a      	ldr	r2, [r7, #20]
 800145e:	4b38      	ldr	r3, [pc, #224]	; (8001540 <HAL_DMA_Init+0x158>)
 8001460:	4013      	ands	r3, r2
 8001462:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	685a      	ldr	r2, [r3, #4]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001472:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	691b      	ldr	r3, [r3, #16]
 8001478:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800147e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	699b      	ldr	r3, [r3, #24]
 8001484:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800148a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6a1b      	ldr	r3, [r3, #32]
 8001490:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001492:	697a      	ldr	r2, [r7, #20]
 8001494:	4313      	orrs	r3, r2
 8001496:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800149c:	2b04      	cmp	r3, #4
 800149e:	d107      	bne.n	80014b0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a8:	4313      	orrs	r3, r2
 80014aa:	697a      	ldr	r2, [r7, #20]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	697a      	ldr	r2, [r7, #20]
 80014b6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	695b      	ldr	r3, [r3, #20]
 80014be:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	f023 0307 	bic.w	r3, r3, #7
 80014c6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014cc:	697a      	ldr	r2, [r7, #20]
 80014ce:	4313      	orrs	r3, r2
 80014d0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d6:	2b04      	cmp	r3, #4
 80014d8:	d117      	bne.n	800150a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014de:	697a      	ldr	r2, [r7, #20]
 80014e0:	4313      	orrs	r3, r2
 80014e2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d00e      	beq.n	800150a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	f000 fa99 	bl	8001a24 <DMA_CheckFifoParam>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d008      	beq.n	800150a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2240      	movs	r2, #64	; 0x40
 80014fc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2201      	movs	r2, #1
 8001502:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001506:	2301      	movs	r3, #1
 8001508:	e016      	b.n	8001538 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	697a      	ldr	r2, [r7, #20]
 8001510:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	f000 fa50 	bl	80019b8 <DMA_CalcBaseAndBitshift>
 8001518:	4603      	mov	r3, r0
 800151a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001520:	223f      	movs	r2, #63	; 0x3f
 8001522:	409a      	lsls	r2, r3
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2200      	movs	r2, #0
 800152c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2201      	movs	r2, #1
 8001532:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001536:	2300      	movs	r3, #0
}
 8001538:	4618      	mov	r0, r3
 800153a:	3718      	adds	r7, #24
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	f010803f 	.word	0xf010803f

08001544 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b086      	sub	sp, #24
 8001548:	af00      	add	r7, sp, #0
 800154a:	60f8      	str	r0, [r7, #12]
 800154c:	60b9      	str	r1, [r7, #8]
 800154e:	607a      	str	r2, [r7, #4]
 8001550:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001552:	2300      	movs	r3, #0
 8001554:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800155a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001562:	2b01      	cmp	r3, #1
 8001564:	d101      	bne.n	800156a <HAL_DMA_Start_IT+0x26>
 8001566:	2302      	movs	r3, #2
 8001568:	e048      	b.n	80015fc <HAL_DMA_Start_IT+0xb8>
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	2201      	movs	r2, #1
 800156e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001578:	b2db      	uxtb	r3, r3
 800157a:	2b01      	cmp	r3, #1
 800157c:	d137      	bne.n	80015ee <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	2202      	movs	r2, #2
 8001582:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	2200      	movs	r2, #0
 800158a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	687a      	ldr	r2, [r7, #4]
 8001590:	68b9      	ldr	r1, [r7, #8]
 8001592:	68f8      	ldr	r0, [r7, #12]
 8001594:	f000 f9e2 	bl	800195c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800159c:	223f      	movs	r2, #63	; 0x3f
 800159e:	409a      	lsls	r2, r3
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f042 0216 	orr.w	r2, r2, #22
 80015b2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	695a      	ldr	r2, [r3, #20]
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80015c2:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d007      	beq.n	80015dc <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f042 0208 	orr.w	r2, r2, #8
 80015da:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f042 0201 	orr.w	r2, r2, #1
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	e005      	b.n	80015fa <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	2200      	movs	r2, #0
 80015f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80015f6:	2302      	movs	r3, #2
 80015f8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80015fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3718      	adds	r7, #24
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}

08001604 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001612:	b2db      	uxtb	r3, r3
 8001614:	2b02      	cmp	r3, #2
 8001616:	d004      	beq.n	8001622 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2280      	movs	r2, #128	; 0x80
 800161c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e00c      	b.n	800163c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2205      	movs	r2, #5
 8001626:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f022 0201 	bic.w	r2, r2, #1
 8001638:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800163a:	2300      	movs	r3, #0
}
 800163c:	4618      	mov	r0, r3
 800163e:	370c      	adds	r7, #12
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr

08001648 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b086      	sub	sp, #24
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001650:	2300      	movs	r3, #0
 8001652:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001654:	4b92      	ldr	r3, [pc, #584]	; (80018a0 <HAL_DMA_IRQHandler+0x258>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a92      	ldr	r2, [pc, #584]	; (80018a4 <HAL_DMA_IRQHandler+0x25c>)
 800165a:	fba2 2303 	umull	r2, r3, r2, r3
 800165e:	0a9b      	lsrs	r3, r3, #10
 8001660:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001666:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001672:	2208      	movs	r2, #8
 8001674:	409a      	lsls	r2, r3
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	4013      	ands	r3, r2
 800167a:	2b00      	cmp	r3, #0
 800167c:	d01a      	beq.n	80016b4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 0304 	and.w	r3, r3, #4
 8001688:	2b00      	cmp	r3, #0
 800168a:	d013      	beq.n	80016b4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f022 0204 	bic.w	r2, r2, #4
 800169a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016a0:	2208      	movs	r2, #8
 80016a2:	409a      	lsls	r2, r3
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016ac:	f043 0201 	orr.w	r2, r3, #1
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016b8:	2201      	movs	r2, #1
 80016ba:	409a      	lsls	r2, r3
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	4013      	ands	r3, r2
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d012      	beq.n	80016ea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	695b      	ldr	r3, [r3, #20]
 80016ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d00b      	beq.n	80016ea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016d6:	2201      	movs	r2, #1
 80016d8:	409a      	lsls	r2, r3
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016e2:	f043 0202 	orr.w	r2, r3, #2
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016ee:	2204      	movs	r2, #4
 80016f0:	409a      	lsls	r2, r3
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	4013      	ands	r3, r2
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d012      	beq.n	8001720 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 0302 	and.w	r3, r3, #2
 8001704:	2b00      	cmp	r3, #0
 8001706:	d00b      	beq.n	8001720 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800170c:	2204      	movs	r2, #4
 800170e:	409a      	lsls	r2, r3
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001718:	f043 0204 	orr.w	r2, r3, #4
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001724:	2210      	movs	r2, #16
 8001726:	409a      	lsls	r2, r3
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	4013      	ands	r3, r2
 800172c:	2b00      	cmp	r3, #0
 800172e:	d043      	beq.n	80017b8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 0308 	and.w	r3, r3, #8
 800173a:	2b00      	cmp	r3, #0
 800173c:	d03c      	beq.n	80017b8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001742:	2210      	movs	r2, #16
 8001744:	409a      	lsls	r2, r3
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001754:	2b00      	cmp	r3, #0
 8001756:	d018      	beq.n	800178a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001762:	2b00      	cmp	r3, #0
 8001764:	d108      	bne.n	8001778 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176a:	2b00      	cmp	r3, #0
 800176c:	d024      	beq.n	80017b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	4798      	blx	r3
 8001776:	e01f      	b.n	80017b8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800177c:	2b00      	cmp	r3, #0
 800177e:	d01b      	beq.n	80017b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	4798      	blx	r3
 8001788:	e016      	b.n	80017b8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001794:	2b00      	cmp	r3, #0
 8001796:	d107      	bne.n	80017a8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f022 0208 	bic.w	r2, r2, #8
 80017a6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d003      	beq.n	80017b8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017bc:	2220      	movs	r2, #32
 80017be:	409a      	lsls	r2, r3
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	4013      	ands	r3, r2
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	f000 808e 	beq.w	80018e6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 0310 	and.w	r3, r3, #16
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	f000 8086 	beq.w	80018e6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017de:	2220      	movs	r2, #32
 80017e0:	409a      	lsls	r2, r3
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	2b05      	cmp	r3, #5
 80017f0:	d136      	bne.n	8001860 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f022 0216 	bic.w	r2, r2, #22
 8001800:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	695a      	ldr	r2, [r3, #20]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001810:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001816:	2b00      	cmp	r3, #0
 8001818:	d103      	bne.n	8001822 <HAL_DMA_IRQHandler+0x1da>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800181e:	2b00      	cmp	r3, #0
 8001820:	d007      	beq.n	8001832 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f022 0208 	bic.w	r2, r2, #8
 8001830:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001836:	223f      	movs	r2, #63	; 0x3f
 8001838:	409a      	lsls	r2, r3
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2200      	movs	r2, #0
 8001842:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2201      	movs	r2, #1
 800184a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001852:	2b00      	cmp	r3, #0
 8001854:	d07d      	beq.n	8001952 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	4798      	blx	r3
        }
        return;
 800185e:	e078      	b.n	8001952 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d01c      	beq.n	80018a8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001878:	2b00      	cmp	r3, #0
 800187a:	d108      	bne.n	800188e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001880:	2b00      	cmp	r3, #0
 8001882:	d030      	beq.n	80018e6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	4798      	blx	r3
 800188c:	e02b      	b.n	80018e6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001892:	2b00      	cmp	r3, #0
 8001894:	d027      	beq.n	80018e6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	4798      	blx	r3
 800189e:	e022      	b.n	80018e6 <HAL_DMA_IRQHandler+0x29e>
 80018a0:	2000000c 	.word	0x2000000c
 80018a4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d10f      	bne.n	80018d6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f022 0210 	bic.w	r2, r2, #16
 80018c4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2200      	movs	r2, #0
 80018ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2201      	movs	r2, #1
 80018d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d003      	beq.n	80018e6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d032      	beq.n	8001954 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018f2:	f003 0301 	and.w	r3, r3, #1
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d022      	beq.n	8001940 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2205      	movs	r2, #5
 80018fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f022 0201 	bic.w	r2, r2, #1
 8001910:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	3301      	adds	r3, #1
 8001916:	60bb      	str	r3, [r7, #8]
 8001918:	697a      	ldr	r2, [r7, #20]
 800191a:	429a      	cmp	r2, r3
 800191c:	d307      	bcc.n	800192e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 0301 	and.w	r3, r3, #1
 8001928:	2b00      	cmp	r3, #0
 800192a:	d1f2      	bne.n	8001912 <HAL_DMA_IRQHandler+0x2ca>
 800192c:	e000      	b.n	8001930 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800192e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2200      	movs	r2, #0
 8001934:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2201      	movs	r2, #1
 800193c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001944:	2b00      	cmp	r3, #0
 8001946:	d005      	beq.n	8001954 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	4798      	blx	r3
 8001950:	e000      	b.n	8001954 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001952:	bf00      	nop
    }
  }
}
 8001954:	3718      	adds	r7, #24
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop

0800195c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800195c:	b480      	push	{r7}
 800195e:	b085      	sub	sp, #20
 8001960:	af00      	add	r7, sp, #0
 8001962:	60f8      	str	r0, [r7, #12]
 8001964:	60b9      	str	r1, [r7, #8]
 8001966:	607a      	str	r2, [r7, #4]
 8001968:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001978:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	683a      	ldr	r2, [r7, #0]
 8001980:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	2b40      	cmp	r3, #64	; 0x40
 8001988:	d108      	bne.n	800199c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	68ba      	ldr	r2, [r7, #8]
 8001998:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800199a:	e007      	b.n	80019ac <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	68ba      	ldr	r2, [r7, #8]
 80019a2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	687a      	ldr	r2, [r7, #4]
 80019aa:	60da      	str	r2, [r3, #12]
}
 80019ac:	bf00      	nop
 80019ae:	3714      	adds	r7, #20
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b085      	sub	sp, #20
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	3b10      	subs	r3, #16
 80019c8:	4a14      	ldr	r2, [pc, #80]	; (8001a1c <DMA_CalcBaseAndBitshift+0x64>)
 80019ca:	fba2 2303 	umull	r2, r3, r2, r3
 80019ce:	091b      	lsrs	r3, r3, #4
 80019d0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80019d2:	4a13      	ldr	r2, [pc, #76]	; (8001a20 <DMA_CalcBaseAndBitshift+0x68>)
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	4413      	add	r3, r2
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	461a      	mov	r2, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	2b03      	cmp	r3, #3
 80019e4:	d909      	bls.n	80019fa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80019ee:	f023 0303 	bic.w	r3, r3, #3
 80019f2:	1d1a      	adds	r2, r3, #4
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	659a      	str	r2, [r3, #88]	; 0x58
 80019f8:	e007      	b.n	8001a0a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001a02:	f023 0303 	bic.w	r3, r3, #3
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3714      	adds	r7, #20
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	aaaaaaab 	.word	0xaaaaaaab
 8001a20:	08012424 	.word	0x08012424

08001a24 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b085      	sub	sp, #20
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a34:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	699b      	ldr	r3, [r3, #24]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d11f      	bne.n	8001a7e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	2b03      	cmp	r3, #3
 8001a42:	d855      	bhi.n	8001af0 <DMA_CheckFifoParam+0xcc>
 8001a44:	a201      	add	r2, pc, #4	; (adr r2, 8001a4c <DMA_CheckFifoParam+0x28>)
 8001a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a4a:	bf00      	nop
 8001a4c:	08001a5d 	.word	0x08001a5d
 8001a50:	08001a6f 	.word	0x08001a6f
 8001a54:	08001a5d 	.word	0x08001a5d
 8001a58:	08001af1 	.word	0x08001af1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d045      	beq.n	8001af4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a6c:	e042      	b.n	8001af4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a72:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001a76:	d13f      	bne.n	8001af8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a7c:	e03c      	b.n	8001af8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	699b      	ldr	r3, [r3, #24]
 8001a82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a86:	d121      	bne.n	8001acc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	2b03      	cmp	r3, #3
 8001a8c:	d836      	bhi.n	8001afc <DMA_CheckFifoParam+0xd8>
 8001a8e:	a201      	add	r2, pc, #4	; (adr r2, 8001a94 <DMA_CheckFifoParam+0x70>)
 8001a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a94:	08001aa5 	.word	0x08001aa5
 8001a98:	08001aab 	.word	0x08001aab
 8001a9c:	08001aa5 	.word	0x08001aa5
 8001aa0:	08001abd 	.word	0x08001abd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	73fb      	strb	r3, [r7, #15]
      break;
 8001aa8:	e02f      	b.n	8001b0a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d024      	beq.n	8001b00 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001aba:	e021      	b.n	8001b00 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001ac4:	d11e      	bne.n	8001b04 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001aca:	e01b      	b.n	8001b04 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d902      	bls.n	8001ad8 <DMA_CheckFifoParam+0xb4>
 8001ad2:	2b03      	cmp	r3, #3
 8001ad4:	d003      	beq.n	8001ade <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001ad6:	e018      	b.n	8001b0a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	73fb      	strb	r3, [r7, #15]
      break;
 8001adc:	e015      	b.n	8001b0a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d00e      	beq.n	8001b08 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	73fb      	strb	r3, [r7, #15]
      break;
 8001aee:	e00b      	b.n	8001b08 <DMA_CheckFifoParam+0xe4>
      break;
 8001af0:	bf00      	nop
 8001af2:	e00a      	b.n	8001b0a <DMA_CheckFifoParam+0xe6>
      break;
 8001af4:	bf00      	nop
 8001af6:	e008      	b.n	8001b0a <DMA_CheckFifoParam+0xe6>
      break;
 8001af8:	bf00      	nop
 8001afa:	e006      	b.n	8001b0a <DMA_CheckFifoParam+0xe6>
      break;
 8001afc:	bf00      	nop
 8001afe:	e004      	b.n	8001b0a <DMA_CheckFifoParam+0xe6>
      break;
 8001b00:	bf00      	nop
 8001b02:	e002      	b.n	8001b0a <DMA_CheckFifoParam+0xe6>
      break;   
 8001b04:	bf00      	nop
 8001b06:	e000      	b.n	8001b0a <DMA_CheckFifoParam+0xe6>
      break;
 8001b08:	bf00      	nop
    }
  } 
  
  return status; 
 8001b0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3714      	adds	r7, #20
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b086      	sub	sp, #24
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	60f8      	str	r0, [r7, #12]
 8001b20:	60b9      	str	r1, [r7, #8]
 8001b22:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001b2a:	4b23      	ldr	r3, [pc, #140]	; (8001bb8 <HAL_FLASH_Program+0xa0>)
 8001b2c:	7e1b      	ldrb	r3, [r3, #24]
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d101      	bne.n	8001b36 <HAL_FLASH_Program+0x1e>
 8001b32:	2302      	movs	r3, #2
 8001b34:	e03b      	b.n	8001bae <HAL_FLASH_Program+0x96>
 8001b36:	4b20      	ldr	r3, [pc, #128]	; (8001bb8 <HAL_FLASH_Program+0xa0>)
 8001b38:	2201      	movs	r2, #1
 8001b3a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001b3c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001b40:	f000 f860 	bl	8001c04 <FLASH_WaitForLastOperation>
 8001b44:	4603      	mov	r3, r0
 8001b46:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8001b48:	7dfb      	ldrb	r3, [r7, #23]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d12b      	bne.n	8001ba6 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d105      	bne.n	8001b60 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001b54:	783b      	ldrb	r3, [r7, #0]
 8001b56:	4619      	mov	r1, r3
 8001b58:	68b8      	ldr	r0, [r7, #8]
 8001b5a:	f000 f907 	bl	8001d6c <FLASH_Program_Byte>
 8001b5e:	e016      	b.n	8001b8e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d105      	bne.n	8001b72 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001b66:	883b      	ldrh	r3, [r7, #0]
 8001b68:	4619      	mov	r1, r3
 8001b6a:	68b8      	ldr	r0, [r7, #8]
 8001b6c:	f000 f8da 	bl	8001d24 <FLASH_Program_HalfWord>
 8001b70:	e00d      	b.n	8001b8e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d105      	bne.n	8001b84 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	68b8      	ldr	r0, [r7, #8]
 8001b7e:	f000 f8af 	bl	8001ce0 <FLASH_Program_Word>
 8001b82:	e004      	b.n	8001b8e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001b84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001b88:	68b8      	ldr	r0, [r7, #8]
 8001b8a:	f000 f87b 	bl	8001c84 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001b8e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001b92:	f000 f837 	bl	8001c04 <FLASH_WaitForLastOperation>
 8001b96:	4603      	mov	r3, r0
 8001b98:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8001b9a:	4b08      	ldr	r3, [pc, #32]	; (8001bbc <HAL_FLASH_Program+0xa4>)
 8001b9c:	691b      	ldr	r3, [r3, #16]
 8001b9e:	4a07      	ldr	r2, [pc, #28]	; (8001bbc <HAL_FLASH_Program+0xa4>)
 8001ba0:	f023 0301 	bic.w	r3, r3, #1
 8001ba4:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001ba6:	4b04      	ldr	r3, [pc, #16]	; (8001bb8 <HAL_FLASH_Program+0xa0>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	761a      	strb	r2, [r3, #24]
  
  return status;
 8001bac:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3718      	adds	r7, #24
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	2000675c 	.word	0x2000675c
 8001bbc:	40023c00 	.word	0x40023c00

08001bc0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001bca:	4b0b      	ldr	r3, [pc, #44]	; (8001bf8 <HAL_FLASH_Unlock+0x38>)
 8001bcc:	691b      	ldr	r3, [r3, #16]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	da0b      	bge.n	8001bea <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001bd2:	4b09      	ldr	r3, [pc, #36]	; (8001bf8 <HAL_FLASH_Unlock+0x38>)
 8001bd4:	4a09      	ldr	r2, [pc, #36]	; (8001bfc <HAL_FLASH_Unlock+0x3c>)
 8001bd6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001bd8:	4b07      	ldr	r3, [pc, #28]	; (8001bf8 <HAL_FLASH_Unlock+0x38>)
 8001bda:	4a09      	ldr	r2, [pc, #36]	; (8001c00 <HAL_FLASH_Unlock+0x40>)
 8001bdc:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001bde:	4b06      	ldr	r3, [pc, #24]	; (8001bf8 <HAL_FLASH_Unlock+0x38>)
 8001be0:	691b      	ldr	r3, [r3, #16]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	da01      	bge.n	8001bea <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001bea:	79fb      	ldrb	r3, [r7, #7]
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	370c      	adds	r7, #12
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr
 8001bf8:	40023c00 	.word	0x40023c00
 8001bfc:	45670123 	.word	0x45670123
 8001c00:	cdef89ab 	.word	0xcdef89ab

08001c04 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b084      	sub	sp, #16
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001c10:	4b1a      	ldr	r3, [pc, #104]	; (8001c7c <FLASH_WaitForLastOperation+0x78>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001c16:	f7ff f9fd 	bl	8001014 <HAL_GetTick>
 8001c1a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001c1c:	e010      	b.n	8001c40 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c24:	d00c      	beq.n	8001c40 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d007      	beq.n	8001c3c <FLASH_WaitForLastOperation+0x38>
 8001c2c:	f7ff f9f2 	bl	8001014 <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d201      	bcs.n	8001c40 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	e019      	b.n	8001c74 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001c40:	4b0f      	ldr	r3, [pc, #60]	; (8001c80 <FLASH_WaitForLastOperation+0x7c>)
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d1e8      	bne.n	8001c1e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001c4c:	4b0c      	ldr	r3, [pc, #48]	; (8001c80 <FLASH_WaitForLastOperation+0x7c>)
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	f003 0301 	and.w	r3, r3, #1
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d002      	beq.n	8001c5e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001c58:	4b09      	ldr	r3, [pc, #36]	; (8001c80 <FLASH_WaitForLastOperation+0x7c>)
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001c5e:	4b08      	ldr	r3, [pc, #32]	; (8001c80 <FLASH_WaitForLastOperation+0x7c>)
 8001c60:	68db      	ldr	r3, [r3, #12]
 8001c62:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d003      	beq.n	8001c72 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001c6a:	f000 f8a1 	bl	8001db0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e000      	b.n	8001c74 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8001c72:	2300      	movs	r3, #0
  
}  
 8001c74:	4618      	mov	r0, r3
 8001c76:	3710      	adds	r7, #16
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	2000675c 	.word	0x2000675c
 8001c80:	40023c00 	.word	0x40023c00

08001c84 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001c84:	b490      	push	{r4, r7}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	60f8      	str	r0, [r7, #12]
 8001c8c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001c90:	4b12      	ldr	r3, [pc, #72]	; (8001cdc <FLASH_Program_DoubleWord+0x58>)
 8001c92:	691b      	ldr	r3, [r3, #16]
 8001c94:	4a11      	ldr	r2, [pc, #68]	; (8001cdc <FLASH_Program_DoubleWord+0x58>)
 8001c96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c9a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001c9c:	4b0f      	ldr	r3, [pc, #60]	; (8001cdc <FLASH_Program_DoubleWord+0x58>)
 8001c9e:	691b      	ldr	r3, [r3, #16]
 8001ca0:	4a0e      	ldr	r2, [pc, #56]	; (8001cdc <FLASH_Program_DoubleWord+0x58>)
 8001ca2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001ca6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001ca8:	4b0c      	ldr	r3, [pc, #48]	; (8001cdc <FLASH_Program_DoubleWord+0x58>)
 8001caa:	691b      	ldr	r3, [r3, #16]
 8001cac:	4a0b      	ldr	r2, [pc, #44]	; (8001cdc <FLASH_Program_DoubleWord+0x58>)
 8001cae:	f043 0301 	orr.w	r3, r3, #1
 8001cb2:	6113      	str	r3, [r2, #16]

  /* Program the double-word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	683a      	ldr	r2, [r7, #0]
 8001cb8:	601a      	str	r2, [r3, #0]
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8001cba:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001cbe:	f04f 0300 	mov.w	r3, #0
 8001cc2:	f04f 0400 	mov.w	r4, #0
 8001cc6:	0013      	movs	r3, r2
 8001cc8:	2400      	movs	r4, #0
 8001cca:	68fa      	ldr	r2, [r7, #12]
 8001ccc:	3204      	adds	r2, #4
 8001cce:	6013      	str	r3, [r2, #0]
}
 8001cd0:	bf00      	nop
 8001cd2:	3710      	adds	r7, #16
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bc90      	pop	{r4, r7}
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	40023c00 	.word	0x40023c00

08001ce0 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001cea:	4b0d      	ldr	r3, [pc, #52]	; (8001d20 <FLASH_Program_Word+0x40>)
 8001cec:	691b      	ldr	r3, [r3, #16]
 8001cee:	4a0c      	ldr	r2, [pc, #48]	; (8001d20 <FLASH_Program_Word+0x40>)
 8001cf0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001cf4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001cf6:	4b0a      	ldr	r3, [pc, #40]	; (8001d20 <FLASH_Program_Word+0x40>)
 8001cf8:	691b      	ldr	r3, [r3, #16]
 8001cfa:	4a09      	ldr	r2, [pc, #36]	; (8001d20 <FLASH_Program_Word+0x40>)
 8001cfc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d00:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001d02:	4b07      	ldr	r3, [pc, #28]	; (8001d20 <FLASH_Program_Word+0x40>)
 8001d04:	691b      	ldr	r3, [r3, #16]
 8001d06:	4a06      	ldr	r2, [pc, #24]	; (8001d20 <FLASH_Program_Word+0x40>)
 8001d08:	f043 0301 	orr.w	r3, r3, #1
 8001d0c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	683a      	ldr	r2, [r7, #0]
 8001d12:	601a      	str	r2, [r3, #0]
}
 8001d14:	bf00      	nop
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr
 8001d20:	40023c00 	.word	0x40023c00

08001d24 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001d30:	4b0d      	ldr	r3, [pc, #52]	; (8001d68 <FLASH_Program_HalfWord+0x44>)
 8001d32:	691b      	ldr	r3, [r3, #16]
 8001d34:	4a0c      	ldr	r2, [pc, #48]	; (8001d68 <FLASH_Program_HalfWord+0x44>)
 8001d36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d3a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001d3c:	4b0a      	ldr	r3, [pc, #40]	; (8001d68 <FLASH_Program_HalfWord+0x44>)
 8001d3e:	691b      	ldr	r3, [r3, #16]
 8001d40:	4a09      	ldr	r2, [pc, #36]	; (8001d68 <FLASH_Program_HalfWord+0x44>)
 8001d42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d46:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001d48:	4b07      	ldr	r3, [pc, #28]	; (8001d68 <FLASH_Program_HalfWord+0x44>)
 8001d4a:	691b      	ldr	r3, [r3, #16]
 8001d4c:	4a06      	ldr	r2, [pc, #24]	; (8001d68 <FLASH_Program_HalfWord+0x44>)
 8001d4e:	f043 0301 	orr.w	r3, r3, #1
 8001d52:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	887a      	ldrh	r2, [r7, #2]
 8001d58:	801a      	strh	r2, [r3, #0]
}
 8001d5a:	bf00      	nop
 8001d5c:	370c      	adds	r7, #12
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	40023c00 	.word	0x40023c00

08001d6c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	460b      	mov	r3, r1
 8001d76:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001d78:	4b0c      	ldr	r3, [pc, #48]	; (8001dac <FLASH_Program_Byte+0x40>)
 8001d7a:	691b      	ldr	r3, [r3, #16]
 8001d7c:	4a0b      	ldr	r2, [pc, #44]	; (8001dac <FLASH_Program_Byte+0x40>)
 8001d7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d82:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001d84:	4b09      	ldr	r3, [pc, #36]	; (8001dac <FLASH_Program_Byte+0x40>)
 8001d86:	4a09      	ldr	r2, [pc, #36]	; (8001dac <FLASH_Program_Byte+0x40>)
 8001d88:	691b      	ldr	r3, [r3, #16]
 8001d8a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001d8c:	4b07      	ldr	r3, [pc, #28]	; (8001dac <FLASH_Program_Byte+0x40>)
 8001d8e:	691b      	ldr	r3, [r3, #16]
 8001d90:	4a06      	ldr	r2, [pc, #24]	; (8001dac <FLASH_Program_Byte+0x40>)
 8001d92:	f043 0301 	orr.w	r3, r3, #1
 8001d96:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	78fa      	ldrb	r2, [r7, #3]
 8001d9c:	701a      	strb	r2, [r3, #0]
}
 8001d9e:	bf00      	nop
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	40023c00 	.word	0x40023c00

08001db0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001db4:	4b27      	ldr	r3, [pc, #156]	; (8001e54 <FLASH_SetErrorCode+0xa4>)
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	f003 0310 	and.w	r3, r3, #16
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d008      	beq.n	8001dd2 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001dc0:	4b25      	ldr	r3, [pc, #148]	; (8001e58 <FLASH_SetErrorCode+0xa8>)
 8001dc2:	69db      	ldr	r3, [r3, #28]
 8001dc4:	f043 0310 	orr.w	r3, r3, #16
 8001dc8:	4a23      	ldr	r2, [pc, #140]	; (8001e58 <FLASH_SetErrorCode+0xa8>)
 8001dca:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001dcc:	4b21      	ldr	r3, [pc, #132]	; (8001e54 <FLASH_SetErrorCode+0xa4>)
 8001dce:	2210      	movs	r2, #16
 8001dd0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001dd2:	4b20      	ldr	r3, [pc, #128]	; (8001e54 <FLASH_SetErrorCode+0xa4>)
 8001dd4:	68db      	ldr	r3, [r3, #12]
 8001dd6:	f003 0320 	and.w	r3, r3, #32
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d008      	beq.n	8001df0 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001dde:	4b1e      	ldr	r3, [pc, #120]	; (8001e58 <FLASH_SetErrorCode+0xa8>)
 8001de0:	69db      	ldr	r3, [r3, #28]
 8001de2:	f043 0308 	orr.w	r3, r3, #8
 8001de6:	4a1c      	ldr	r2, [pc, #112]	; (8001e58 <FLASH_SetErrorCode+0xa8>)
 8001de8:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8001dea:	4b1a      	ldr	r3, [pc, #104]	; (8001e54 <FLASH_SetErrorCode+0xa4>)
 8001dec:	2220      	movs	r2, #32
 8001dee:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001df0:	4b18      	ldr	r3, [pc, #96]	; (8001e54 <FLASH_SetErrorCode+0xa4>)
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d008      	beq.n	8001e0e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001dfc:	4b16      	ldr	r3, [pc, #88]	; (8001e58 <FLASH_SetErrorCode+0xa8>)
 8001dfe:	69db      	ldr	r3, [r3, #28]
 8001e00:	f043 0304 	orr.w	r3, r3, #4
 8001e04:	4a14      	ldr	r2, [pc, #80]	; (8001e58 <FLASH_SetErrorCode+0xa8>)
 8001e06:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001e08:	4b12      	ldr	r3, [pc, #72]	; (8001e54 <FLASH_SetErrorCode+0xa4>)
 8001e0a:	2240      	movs	r2, #64	; 0x40
 8001e0c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8001e0e:	4b11      	ldr	r3, [pc, #68]	; (8001e54 <FLASH_SetErrorCode+0xa4>)
 8001e10:	68db      	ldr	r3, [r3, #12]
 8001e12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d008      	beq.n	8001e2c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8001e1a:	4b0f      	ldr	r3, [pc, #60]	; (8001e58 <FLASH_SetErrorCode+0xa8>)
 8001e1c:	69db      	ldr	r3, [r3, #28]
 8001e1e:	f043 0302 	orr.w	r3, r3, #2
 8001e22:	4a0d      	ldr	r2, [pc, #52]	; (8001e58 <FLASH_SetErrorCode+0xa8>)
 8001e24:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001e26:	4b0b      	ldr	r3, [pc, #44]	; (8001e54 <FLASH_SetErrorCode+0xa4>)
 8001e28:	2280      	movs	r2, #128	; 0x80
 8001e2a:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001e2c:	4b09      	ldr	r3, [pc, #36]	; (8001e54 <FLASH_SetErrorCode+0xa4>)
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	f003 0302 	and.w	r3, r3, #2
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d008      	beq.n	8001e4a <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001e38:	4b07      	ldr	r3, [pc, #28]	; (8001e58 <FLASH_SetErrorCode+0xa8>)
 8001e3a:	69db      	ldr	r3, [r3, #28]
 8001e3c:	f043 0320 	orr.w	r3, r3, #32
 8001e40:	4a05      	ldr	r2, [pc, #20]	; (8001e58 <FLASH_SetErrorCode+0xa8>)
 8001e42:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001e44:	4b03      	ldr	r3, [pc, #12]	; (8001e54 <FLASH_SetErrorCode+0xa4>)
 8001e46:	2202      	movs	r2, #2
 8001e48:	60da      	str	r2, [r3, #12]
  }
}
 8001e4a:	bf00      	nop
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr
 8001e54:	40023c00 	.word	0x40023c00
 8001e58:	2000675c 	.word	0x2000675c

08001e5c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b084      	sub	sp, #16
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001e6e:	4b31      	ldr	r3, [pc, #196]	; (8001f34 <HAL_FLASHEx_Erase+0xd8>)
 8001e70:	7e1b      	ldrb	r3, [r3, #24]
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d101      	bne.n	8001e7a <HAL_FLASHEx_Erase+0x1e>
 8001e76:	2302      	movs	r3, #2
 8001e78:	e058      	b.n	8001f2c <HAL_FLASHEx_Erase+0xd0>
 8001e7a:	4b2e      	ldr	r3, [pc, #184]	; (8001f34 <HAL_FLASHEx_Erase+0xd8>)
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001e80:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001e84:	f7ff febe 	bl	8001c04 <FLASH_WaitForLastOperation>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8001e8c:	7bfb      	ldrb	r3, [r7, #15]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d148      	bne.n	8001f24 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	f04f 32ff 	mov.w	r2, #4294967295
 8001e98:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d115      	bne.n	8001ece <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	691b      	ldr	r3, [r3, #16]
 8001ea6:	b2da      	uxtb	r2, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	4619      	mov	r1, r3
 8001eae:	4610      	mov	r0, r2
 8001eb0:	f000 f844 	bl	8001f3c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001eb4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001eb8:	f7ff fea4 	bl	8001c04 <FLASH_WaitForLastOperation>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8001ec0:	4b1d      	ldr	r3, [pc, #116]	; (8001f38 <HAL_FLASHEx_Erase+0xdc>)
 8001ec2:	691b      	ldr	r3, [r3, #16]
 8001ec4:	4a1c      	ldr	r2, [pc, #112]	; (8001f38 <HAL_FLASHEx_Erase+0xdc>)
 8001ec6:	f023 0304 	bic.w	r3, r3, #4
 8001eca:	6113      	str	r3, [r2, #16]
 8001ecc:	e028      	b.n	8001f20 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	60bb      	str	r3, [r7, #8]
 8001ed4:	e01c      	b.n	8001f10 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	691b      	ldr	r3, [r3, #16]
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	4619      	mov	r1, r3
 8001ede:	68b8      	ldr	r0, [r7, #8]
 8001ee0:	f000 f850 	bl	8001f84 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001ee4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001ee8:	f7ff fe8c 	bl	8001c04 <FLASH_WaitForLastOperation>
 8001eec:	4603      	mov	r3, r0
 8001eee:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8001ef0:	4b11      	ldr	r3, [pc, #68]	; (8001f38 <HAL_FLASHEx_Erase+0xdc>)
 8001ef2:	691b      	ldr	r3, [r3, #16]
 8001ef4:	4a10      	ldr	r2, [pc, #64]	; (8001f38 <HAL_FLASHEx_Erase+0xdc>)
 8001ef6:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8001efa:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8001efc:	7bfb      	ldrb	r3, [r7, #15]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d003      	beq.n	8001f0a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	68ba      	ldr	r2, [r7, #8]
 8001f06:	601a      	str	r2, [r3, #0]
          break;
 8001f08:	e00a      	b.n	8001f20 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	3301      	adds	r3, #1
 8001f0e:	60bb      	str	r3, [r7, #8]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	68da      	ldr	r2, [r3, #12]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	4413      	add	r3, r2
 8001f1a:	68ba      	ldr	r2, [r7, #8]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d3da      	bcc.n	8001ed6 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8001f20:	f000 f878 	bl	8002014 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001f24:	4b03      	ldr	r3, [pc, #12]	; (8001f34 <HAL_FLASHEx_Erase+0xd8>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	761a      	strb	r2, [r3, #24]

  return status;
 8001f2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3710      	adds	r7, #16
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	2000675c 	.word	0x2000675c
 8001f38:	40023c00 	.word	0x40023c00

08001f3c <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	4603      	mov	r3, r0
 8001f44:	6039      	str	r1, [r7, #0]
 8001f46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001f48:	4b0d      	ldr	r3, [pc, #52]	; (8001f80 <FLASH_MassErase+0x44>)
 8001f4a:	691b      	ldr	r3, [r3, #16]
 8001f4c:	4a0c      	ldr	r2, [pc, #48]	; (8001f80 <FLASH_MassErase+0x44>)
 8001f4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f52:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8001f54:	4b0a      	ldr	r3, [pc, #40]	; (8001f80 <FLASH_MassErase+0x44>)
 8001f56:	691b      	ldr	r3, [r3, #16]
 8001f58:	4a09      	ldr	r2, [pc, #36]	; (8001f80 <FLASH_MassErase+0x44>)
 8001f5a:	f043 0304 	orr.w	r3, r3, #4
 8001f5e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8001f60:	4b07      	ldr	r3, [pc, #28]	; (8001f80 <FLASH_MassErase+0x44>)
 8001f62:	691a      	ldr	r2, [r3, #16]
 8001f64:	79fb      	ldrb	r3, [r7, #7]
 8001f66:	021b      	lsls	r3, r3, #8
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	4a05      	ldr	r2, [pc, #20]	; (8001f80 <FLASH_MassErase+0x44>)
 8001f6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f70:	6113      	str	r3, [r2, #16]
}
 8001f72:	bf00      	nop
 8001f74:	370c      	adds	r7, #12
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	40023c00 	.word	0x40023c00

08001f84 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b085      	sub	sp, #20
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	460b      	mov	r3, r1
 8001f8e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8001f90:	2300      	movs	r3, #0
 8001f92:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001f94:	78fb      	ldrb	r3, [r7, #3]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d102      	bne.n	8001fa0 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	60fb      	str	r3, [r7, #12]
 8001f9e:	e010      	b.n	8001fc2 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001fa0:	78fb      	ldrb	r3, [r7, #3]
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d103      	bne.n	8001fae <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8001fa6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001faa:	60fb      	str	r3, [r7, #12]
 8001fac:	e009      	b.n	8001fc2 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8001fae:	78fb      	ldrb	r3, [r7, #3]
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d103      	bne.n	8001fbc <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001fb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fb8:	60fb      	str	r3, [r7, #12]
 8001fba:	e002      	b.n	8001fc2 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001fbc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001fc0:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001fc2:	4b13      	ldr	r3, [pc, #76]	; (8002010 <FLASH_Erase_Sector+0x8c>)
 8001fc4:	691b      	ldr	r3, [r3, #16]
 8001fc6:	4a12      	ldr	r2, [pc, #72]	; (8002010 <FLASH_Erase_Sector+0x8c>)
 8001fc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fcc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8001fce:	4b10      	ldr	r3, [pc, #64]	; (8002010 <FLASH_Erase_Sector+0x8c>)
 8001fd0:	691a      	ldr	r2, [r3, #16]
 8001fd2:	490f      	ldr	r1, [pc, #60]	; (8002010 <FLASH_Erase_Sector+0x8c>)
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8001fda:	4b0d      	ldr	r3, [pc, #52]	; (8002010 <FLASH_Erase_Sector+0x8c>)
 8001fdc:	691b      	ldr	r3, [r3, #16]
 8001fde:	4a0c      	ldr	r2, [pc, #48]	; (8002010 <FLASH_Erase_Sector+0x8c>)
 8001fe0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001fe4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8001fe6:	4b0a      	ldr	r3, [pc, #40]	; (8002010 <FLASH_Erase_Sector+0x8c>)
 8001fe8:	691a      	ldr	r2, [r3, #16]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	00db      	lsls	r3, r3, #3
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	4a07      	ldr	r2, [pc, #28]	; (8002010 <FLASH_Erase_Sector+0x8c>)
 8001ff2:	f043 0302 	orr.w	r3, r3, #2
 8001ff6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001ff8:	4b05      	ldr	r3, [pc, #20]	; (8002010 <FLASH_Erase_Sector+0x8c>)
 8001ffa:	691b      	ldr	r3, [r3, #16]
 8001ffc:	4a04      	ldr	r2, [pc, #16]	; (8002010 <FLASH_Erase_Sector+0x8c>)
 8001ffe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002002:	6113      	str	r3, [r2, #16]
}
 8002004:	bf00      	nop
 8002006:	3714      	adds	r7, #20
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr
 8002010:	40023c00 	.word	0x40023c00

08002014 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8002018:	4b20      	ldr	r3, [pc, #128]	; (800209c <FLASH_FlushCaches+0x88>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002020:	2b00      	cmp	r3, #0
 8002022:	d017      	beq.n	8002054 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002024:	4b1d      	ldr	r3, [pc, #116]	; (800209c <FLASH_FlushCaches+0x88>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a1c      	ldr	r2, [pc, #112]	; (800209c <FLASH_FlushCaches+0x88>)
 800202a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800202e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002030:	4b1a      	ldr	r3, [pc, #104]	; (800209c <FLASH_FlushCaches+0x88>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a19      	ldr	r2, [pc, #100]	; (800209c <FLASH_FlushCaches+0x88>)
 8002036:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800203a:	6013      	str	r3, [r2, #0]
 800203c:	4b17      	ldr	r3, [pc, #92]	; (800209c <FLASH_FlushCaches+0x88>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a16      	ldr	r2, [pc, #88]	; (800209c <FLASH_FlushCaches+0x88>)
 8002042:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002046:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002048:	4b14      	ldr	r3, [pc, #80]	; (800209c <FLASH_FlushCaches+0x88>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a13      	ldr	r2, [pc, #76]	; (800209c <FLASH_FlushCaches+0x88>)
 800204e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002052:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8002054:	4b11      	ldr	r3, [pc, #68]	; (800209c <FLASH_FlushCaches+0x88>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800205c:	2b00      	cmp	r3, #0
 800205e:	d017      	beq.n	8002090 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8002060:	4b0e      	ldr	r3, [pc, #56]	; (800209c <FLASH_FlushCaches+0x88>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a0d      	ldr	r2, [pc, #52]	; (800209c <FLASH_FlushCaches+0x88>)
 8002066:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800206a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800206c:	4b0b      	ldr	r3, [pc, #44]	; (800209c <FLASH_FlushCaches+0x88>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a0a      	ldr	r2, [pc, #40]	; (800209c <FLASH_FlushCaches+0x88>)
 8002072:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002076:	6013      	str	r3, [r2, #0]
 8002078:	4b08      	ldr	r3, [pc, #32]	; (800209c <FLASH_FlushCaches+0x88>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a07      	ldr	r2, [pc, #28]	; (800209c <FLASH_FlushCaches+0x88>)
 800207e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002082:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002084:	4b05      	ldr	r3, [pc, #20]	; (800209c <FLASH_FlushCaches+0x88>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a04      	ldr	r2, [pc, #16]	; (800209c <FLASH_FlushCaches+0x88>)
 800208a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800208e:	6013      	str	r3, [r2, #0]
  }
}
 8002090:	bf00      	nop
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	40023c00 	.word	0x40023c00

080020a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b089      	sub	sp, #36	; 0x24
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020aa:	2300      	movs	r3, #0
 80020ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020ae:	2300      	movs	r3, #0
 80020b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020b2:	2300      	movs	r3, #0
 80020b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020b6:	2300      	movs	r3, #0
 80020b8:	61fb      	str	r3, [r7, #28]
 80020ba:	e16b      	b.n	8002394 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020bc:	2201      	movs	r2, #1
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	fa02 f303 	lsl.w	r3, r2, r3
 80020c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	697a      	ldr	r2, [r7, #20]
 80020cc:	4013      	ands	r3, r2
 80020ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020d0:	693a      	ldr	r2, [r7, #16]
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	429a      	cmp	r2, r3
 80020d6:	f040 815a 	bne.w	800238e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d003      	beq.n	80020ea <HAL_GPIO_Init+0x4a>
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	2b12      	cmp	r3, #18
 80020e8:	d123      	bne.n	8002132 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	08da      	lsrs	r2, r3, #3
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	3208      	adds	r2, #8
 80020f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	f003 0307 	and.w	r3, r3, #7
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	220f      	movs	r2, #15
 8002102:	fa02 f303 	lsl.w	r3, r2, r3
 8002106:	43db      	mvns	r3, r3
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	4013      	ands	r3, r2
 800210c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	691a      	ldr	r2, [r3, #16]
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	f003 0307 	and.w	r3, r3, #7
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	fa02 f303 	lsl.w	r3, r2, r3
 800211e:	69ba      	ldr	r2, [r7, #24]
 8002120:	4313      	orrs	r3, r2
 8002122:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	08da      	lsrs	r2, r3, #3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	3208      	adds	r2, #8
 800212c:	69b9      	ldr	r1, [r7, #24]
 800212e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	005b      	lsls	r3, r3, #1
 800213c:	2203      	movs	r2, #3
 800213e:	fa02 f303 	lsl.w	r3, r2, r3
 8002142:	43db      	mvns	r3, r3
 8002144:	69ba      	ldr	r2, [r7, #24]
 8002146:	4013      	ands	r3, r2
 8002148:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f003 0203 	and.w	r2, r3, #3
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	005b      	lsls	r3, r3, #1
 8002156:	fa02 f303 	lsl.w	r3, r2, r3
 800215a:	69ba      	ldr	r2, [r7, #24]
 800215c:	4313      	orrs	r3, r2
 800215e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	69ba      	ldr	r2, [r7, #24]
 8002164:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	2b01      	cmp	r3, #1
 800216c:	d00b      	beq.n	8002186 <HAL_GPIO_Init+0xe6>
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	2b02      	cmp	r3, #2
 8002174:	d007      	beq.n	8002186 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800217a:	2b11      	cmp	r3, #17
 800217c:	d003      	beq.n	8002186 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	2b12      	cmp	r3, #18
 8002184:	d130      	bne.n	80021e8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	005b      	lsls	r3, r3, #1
 8002190:	2203      	movs	r2, #3
 8002192:	fa02 f303 	lsl.w	r3, r2, r3
 8002196:	43db      	mvns	r3, r3
 8002198:	69ba      	ldr	r2, [r7, #24]
 800219a:	4013      	ands	r3, r2
 800219c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	68da      	ldr	r2, [r3, #12]
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	005b      	lsls	r3, r3, #1
 80021a6:	fa02 f303 	lsl.w	r3, r2, r3
 80021aa:	69ba      	ldr	r2, [r7, #24]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	69ba      	ldr	r2, [r7, #24]
 80021b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021bc:	2201      	movs	r2, #1
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	fa02 f303 	lsl.w	r3, r2, r3
 80021c4:	43db      	mvns	r3, r3
 80021c6:	69ba      	ldr	r2, [r7, #24]
 80021c8:	4013      	ands	r3, r2
 80021ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	091b      	lsrs	r3, r3, #4
 80021d2:	f003 0201 	and.w	r2, r3, #1
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	fa02 f303 	lsl.w	r3, r2, r3
 80021dc:	69ba      	ldr	r2, [r7, #24]
 80021de:	4313      	orrs	r3, r2
 80021e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	69ba      	ldr	r2, [r7, #24]
 80021e6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	005b      	lsls	r3, r3, #1
 80021f2:	2203      	movs	r2, #3
 80021f4:	fa02 f303 	lsl.w	r3, r2, r3
 80021f8:	43db      	mvns	r3, r3
 80021fa:	69ba      	ldr	r2, [r7, #24]
 80021fc:	4013      	ands	r3, r2
 80021fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	689a      	ldr	r2, [r3, #8]
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	005b      	lsls	r3, r3, #1
 8002208:	fa02 f303 	lsl.w	r3, r2, r3
 800220c:	69ba      	ldr	r2, [r7, #24]
 800220e:	4313      	orrs	r3, r2
 8002210:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002220:	2b00      	cmp	r3, #0
 8002222:	f000 80b4 	beq.w	800238e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002226:	2300      	movs	r3, #0
 8002228:	60fb      	str	r3, [r7, #12]
 800222a:	4b5f      	ldr	r3, [pc, #380]	; (80023a8 <HAL_GPIO_Init+0x308>)
 800222c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800222e:	4a5e      	ldr	r2, [pc, #376]	; (80023a8 <HAL_GPIO_Init+0x308>)
 8002230:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002234:	6453      	str	r3, [r2, #68]	; 0x44
 8002236:	4b5c      	ldr	r3, [pc, #368]	; (80023a8 <HAL_GPIO_Init+0x308>)
 8002238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800223a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800223e:	60fb      	str	r3, [r7, #12]
 8002240:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002242:	4a5a      	ldr	r2, [pc, #360]	; (80023ac <HAL_GPIO_Init+0x30c>)
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	089b      	lsrs	r3, r3, #2
 8002248:	3302      	adds	r3, #2
 800224a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800224e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	f003 0303 	and.w	r3, r3, #3
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	220f      	movs	r2, #15
 800225a:	fa02 f303 	lsl.w	r3, r2, r3
 800225e:	43db      	mvns	r3, r3
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	4013      	ands	r3, r2
 8002264:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a51      	ldr	r2, [pc, #324]	; (80023b0 <HAL_GPIO_Init+0x310>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d02b      	beq.n	80022c6 <HAL_GPIO_Init+0x226>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a50      	ldr	r2, [pc, #320]	; (80023b4 <HAL_GPIO_Init+0x314>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d025      	beq.n	80022c2 <HAL_GPIO_Init+0x222>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a4f      	ldr	r2, [pc, #316]	; (80023b8 <HAL_GPIO_Init+0x318>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d01f      	beq.n	80022be <HAL_GPIO_Init+0x21e>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a4e      	ldr	r2, [pc, #312]	; (80023bc <HAL_GPIO_Init+0x31c>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d019      	beq.n	80022ba <HAL_GPIO_Init+0x21a>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a4d      	ldr	r2, [pc, #308]	; (80023c0 <HAL_GPIO_Init+0x320>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d013      	beq.n	80022b6 <HAL_GPIO_Init+0x216>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4a4c      	ldr	r2, [pc, #304]	; (80023c4 <HAL_GPIO_Init+0x324>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d00d      	beq.n	80022b2 <HAL_GPIO_Init+0x212>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4a4b      	ldr	r2, [pc, #300]	; (80023c8 <HAL_GPIO_Init+0x328>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d007      	beq.n	80022ae <HAL_GPIO_Init+0x20e>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a4a      	ldr	r2, [pc, #296]	; (80023cc <HAL_GPIO_Init+0x32c>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d101      	bne.n	80022aa <HAL_GPIO_Init+0x20a>
 80022a6:	2307      	movs	r3, #7
 80022a8:	e00e      	b.n	80022c8 <HAL_GPIO_Init+0x228>
 80022aa:	2308      	movs	r3, #8
 80022ac:	e00c      	b.n	80022c8 <HAL_GPIO_Init+0x228>
 80022ae:	2306      	movs	r3, #6
 80022b0:	e00a      	b.n	80022c8 <HAL_GPIO_Init+0x228>
 80022b2:	2305      	movs	r3, #5
 80022b4:	e008      	b.n	80022c8 <HAL_GPIO_Init+0x228>
 80022b6:	2304      	movs	r3, #4
 80022b8:	e006      	b.n	80022c8 <HAL_GPIO_Init+0x228>
 80022ba:	2303      	movs	r3, #3
 80022bc:	e004      	b.n	80022c8 <HAL_GPIO_Init+0x228>
 80022be:	2302      	movs	r3, #2
 80022c0:	e002      	b.n	80022c8 <HAL_GPIO_Init+0x228>
 80022c2:	2301      	movs	r3, #1
 80022c4:	e000      	b.n	80022c8 <HAL_GPIO_Init+0x228>
 80022c6:	2300      	movs	r3, #0
 80022c8:	69fa      	ldr	r2, [r7, #28]
 80022ca:	f002 0203 	and.w	r2, r2, #3
 80022ce:	0092      	lsls	r2, r2, #2
 80022d0:	4093      	lsls	r3, r2
 80022d2:	69ba      	ldr	r2, [r7, #24]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022d8:	4934      	ldr	r1, [pc, #208]	; (80023ac <HAL_GPIO_Init+0x30c>)
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	089b      	lsrs	r3, r3, #2
 80022de:	3302      	adds	r3, #2
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022e6:	4b3a      	ldr	r3, [pc, #232]	; (80023d0 <HAL_GPIO_Init+0x330>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	43db      	mvns	r3, r3
 80022f0:	69ba      	ldr	r2, [r7, #24]
 80022f2:	4013      	ands	r3, r2
 80022f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d003      	beq.n	800230a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002302:	69ba      	ldr	r2, [r7, #24]
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	4313      	orrs	r3, r2
 8002308:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800230a:	4a31      	ldr	r2, [pc, #196]	; (80023d0 <HAL_GPIO_Init+0x330>)
 800230c:	69bb      	ldr	r3, [r7, #24]
 800230e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002310:	4b2f      	ldr	r3, [pc, #188]	; (80023d0 <HAL_GPIO_Init+0x330>)
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	43db      	mvns	r3, r3
 800231a:	69ba      	ldr	r2, [r7, #24]
 800231c:	4013      	ands	r3, r2
 800231e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002328:	2b00      	cmp	r3, #0
 800232a:	d003      	beq.n	8002334 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800232c:	69ba      	ldr	r2, [r7, #24]
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	4313      	orrs	r3, r2
 8002332:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002334:	4a26      	ldr	r2, [pc, #152]	; (80023d0 <HAL_GPIO_Init+0x330>)
 8002336:	69bb      	ldr	r3, [r7, #24]
 8002338:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800233a:	4b25      	ldr	r3, [pc, #148]	; (80023d0 <HAL_GPIO_Init+0x330>)
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	43db      	mvns	r3, r3
 8002344:	69ba      	ldr	r2, [r7, #24]
 8002346:	4013      	ands	r3, r2
 8002348:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d003      	beq.n	800235e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002356:	69ba      	ldr	r2, [r7, #24]
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	4313      	orrs	r3, r2
 800235c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800235e:	4a1c      	ldr	r2, [pc, #112]	; (80023d0 <HAL_GPIO_Init+0x330>)
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002364:	4b1a      	ldr	r3, [pc, #104]	; (80023d0 <HAL_GPIO_Init+0x330>)
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	43db      	mvns	r3, r3
 800236e:	69ba      	ldr	r2, [r7, #24]
 8002370:	4013      	ands	r3, r2
 8002372:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800237c:	2b00      	cmp	r3, #0
 800237e:	d003      	beq.n	8002388 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002380:	69ba      	ldr	r2, [r7, #24]
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	4313      	orrs	r3, r2
 8002386:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002388:	4a11      	ldr	r2, [pc, #68]	; (80023d0 <HAL_GPIO_Init+0x330>)
 800238a:	69bb      	ldr	r3, [r7, #24]
 800238c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	3301      	adds	r3, #1
 8002392:	61fb      	str	r3, [r7, #28]
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	2b0f      	cmp	r3, #15
 8002398:	f67f ae90 	bls.w	80020bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800239c:	bf00      	nop
 800239e:	3724      	adds	r7, #36	; 0x24
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr
 80023a8:	40023800 	.word	0x40023800
 80023ac:	40013800 	.word	0x40013800
 80023b0:	40020000 	.word	0x40020000
 80023b4:	40020400 	.word	0x40020400
 80023b8:	40020800 	.word	0x40020800
 80023bc:	40020c00 	.word	0x40020c00
 80023c0:	40021000 	.word	0x40021000
 80023c4:	40021400 	.word	0x40021400
 80023c8:	40021800 	.word	0x40021800
 80023cc:	40021c00 	.word	0x40021c00
 80023d0:	40013c00 	.word	0x40013c00

080023d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b085      	sub	sp, #20
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	460b      	mov	r3, r1
 80023de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	691a      	ldr	r2, [r3, #16]
 80023e4:	887b      	ldrh	r3, [r7, #2]
 80023e6:	4013      	ands	r3, r2
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d002      	beq.n	80023f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80023ec:	2301      	movs	r3, #1
 80023ee:	73fb      	strb	r3, [r7, #15]
 80023f0:	e001      	b.n	80023f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80023f2:	2300      	movs	r3, #0
 80023f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80023f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3714      	adds	r7, #20
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr

08002404 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	460b      	mov	r3, r1
 800240e:	807b      	strh	r3, [r7, #2]
 8002410:	4613      	mov	r3, r2
 8002412:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002414:	787b      	ldrb	r3, [r7, #1]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d003      	beq.n	8002422 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800241a:	887a      	ldrh	r2, [r7, #2]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002420:	e003      	b.n	800242a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002422:	887b      	ldrh	r3, [r7, #2]
 8002424:	041a      	lsls	r2, r3, #16
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	619a      	str	r2, [r3, #24]
}
 800242a:	bf00      	nop
 800242c:	370c      	adds	r7, #12
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr

08002436 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002436:	b480      	push	{r7}
 8002438:	b083      	sub	sp, #12
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
 800243e:	460b      	mov	r3, r1
 8002440:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	695a      	ldr	r2, [r3, #20]
 8002446:	887b      	ldrh	r3, [r7, #2]
 8002448:	401a      	ands	r2, r3
 800244a:	887b      	ldrh	r3, [r7, #2]
 800244c:	429a      	cmp	r2, r3
 800244e:	d104      	bne.n	800245a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002450:	887b      	ldrh	r3, [r7, #2]
 8002452:	041a      	lsls	r2, r3, #16
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002458:	e002      	b.n	8002460 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800245a:	887a      	ldrh	r2, [r7, #2]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	619a      	str	r2, [r3, #24]
}
 8002460:	bf00      	nop
 8002462:	370c      	adds	r7, #12
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b084      	sub	sp, #16
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d101      	bne.n	800247e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e10f      	b.n	800269e <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002484:	b2db      	uxtb	r3, r3
 8002486:	2b00      	cmp	r3, #0
 8002488:	d106      	bne.n	8002498 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f00b fcb6 	bl	800de04 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2224      	movs	r2, #36	; 0x24
 800249c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f022 0201 	bic.w	r2, r2, #1
 80024ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80024b0:	f001 fc5c 	bl	8003d6c <HAL_RCC_GetPCLK1Freq>
 80024b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	4a7b      	ldr	r2, [pc, #492]	; (80026a8 <HAL_I2C_Init+0x23c>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d807      	bhi.n	80024d0 <HAL_I2C_Init+0x64>
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	4a7a      	ldr	r2, [pc, #488]	; (80026ac <HAL_I2C_Init+0x240>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	bf94      	ite	ls
 80024c8:	2301      	movls	r3, #1
 80024ca:	2300      	movhi	r3, #0
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	e006      	b.n	80024de <HAL_I2C_Init+0x72>
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	4a77      	ldr	r2, [pc, #476]	; (80026b0 <HAL_I2C_Init+0x244>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	bf94      	ite	ls
 80024d8:	2301      	movls	r3, #1
 80024da:	2300      	movhi	r3, #0
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d001      	beq.n	80024e6 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e0db      	b.n	800269e <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	4a72      	ldr	r2, [pc, #456]	; (80026b4 <HAL_I2C_Init+0x248>)
 80024ea:	fba2 2303 	umull	r2, r3, r2, r3
 80024ee:	0c9b      	lsrs	r3, r3, #18
 80024f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	68ba      	ldr	r2, [r7, #8]
 8002502:	430a      	orrs	r2, r1
 8002504:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	6a1b      	ldr	r3, [r3, #32]
 800250c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	4a64      	ldr	r2, [pc, #400]	; (80026a8 <HAL_I2C_Init+0x23c>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d802      	bhi.n	8002520 <HAL_I2C_Init+0xb4>
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	3301      	adds	r3, #1
 800251e:	e009      	b.n	8002534 <HAL_I2C_Init+0xc8>
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002526:	fb02 f303 	mul.w	r3, r2, r3
 800252a:	4a63      	ldr	r2, [pc, #396]	; (80026b8 <HAL_I2C_Init+0x24c>)
 800252c:	fba2 2303 	umull	r2, r3, r2, r3
 8002530:	099b      	lsrs	r3, r3, #6
 8002532:	3301      	adds	r3, #1
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	6812      	ldr	r2, [r2, #0]
 8002538:	430b      	orrs	r3, r1
 800253a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	69db      	ldr	r3, [r3, #28]
 8002542:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002546:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	4956      	ldr	r1, [pc, #344]	; (80026a8 <HAL_I2C_Init+0x23c>)
 8002550:	428b      	cmp	r3, r1
 8002552:	d80d      	bhi.n	8002570 <HAL_I2C_Init+0x104>
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	1e59      	subs	r1, r3, #1
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	005b      	lsls	r3, r3, #1
 800255e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002562:	3301      	adds	r3, #1
 8002564:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002568:	2b04      	cmp	r3, #4
 800256a:	bf38      	it	cc
 800256c:	2304      	movcc	r3, #4
 800256e:	e04f      	b.n	8002610 <HAL_I2C_Init+0x1a4>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d111      	bne.n	800259c <HAL_I2C_Init+0x130>
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	1e58      	subs	r0, r3, #1
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6859      	ldr	r1, [r3, #4]
 8002580:	460b      	mov	r3, r1
 8002582:	005b      	lsls	r3, r3, #1
 8002584:	440b      	add	r3, r1
 8002586:	fbb0 f3f3 	udiv	r3, r0, r3
 800258a:	3301      	adds	r3, #1
 800258c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002590:	2b00      	cmp	r3, #0
 8002592:	bf0c      	ite	eq
 8002594:	2301      	moveq	r3, #1
 8002596:	2300      	movne	r3, #0
 8002598:	b2db      	uxtb	r3, r3
 800259a:	e012      	b.n	80025c2 <HAL_I2C_Init+0x156>
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	1e58      	subs	r0, r3, #1
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6859      	ldr	r1, [r3, #4]
 80025a4:	460b      	mov	r3, r1
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	440b      	add	r3, r1
 80025aa:	0099      	lsls	r1, r3, #2
 80025ac:	440b      	add	r3, r1
 80025ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80025b2:	3301      	adds	r3, #1
 80025b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	bf0c      	ite	eq
 80025bc:	2301      	moveq	r3, #1
 80025be:	2300      	movne	r3, #0
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d001      	beq.n	80025ca <HAL_I2C_Init+0x15e>
 80025c6:	2301      	movs	r3, #1
 80025c8:	e022      	b.n	8002610 <HAL_I2C_Init+0x1a4>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d10e      	bne.n	80025f0 <HAL_I2C_Init+0x184>
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	1e58      	subs	r0, r3, #1
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6859      	ldr	r1, [r3, #4]
 80025da:	460b      	mov	r3, r1
 80025dc:	005b      	lsls	r3, r3, #1
 80025de:	440b      	add	r3, r1
 80025e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80025e4:	3301      	adds	r3, #1
 80025e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025ee:	e00f      	b.n	8002610 <HAL_I2C_Init+0x1a4>
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	1e58      	subs	r0, r3, #1
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6859      	ldr	r1, [r3, #4]
 80025f8:	460b      	mov	r3, r1
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	440b      	add	r3, r1
 80025fe:	0099      	lsls	r1, r3, #2
 8002600:	440b      	add	r3, r1
 8002602:	fbb0 f3f3 	udiv	r3, r0, r3
 8002606:	3301      	adds	r3, #1
 8002608:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800260c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002610:	6879      	ldr	r1, [r7, #4]
 8002612:	6809      	ldr	r1, [r1, #0]
 8002614:	4313      	orrs	r3, r2
 8002616:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	69da      	ldr	r2, [r3, #28]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6a1b      	ldr	r3, [r3, #32]
 800262a:	431a      	orrs	r2, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	430a      	orrs	r2, r1
 8002632:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800263e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	6911      	ldr	r1, [r2, #16]
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	68d2      	ldr	r2, [r2, #12]
 800264a:	4311      	orrs	r1, r2
 800264c:	687a      	ldr	r2, [r7, #4]
 800264e:	6812      	ldr	r2, [r2, #0]
 8002650:	430b      	orrs	r3, r1
 8002652:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	695a      	ldr	r2, [r3, #20]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	699b      	ldr	r3, [r3, #24]
 8002666:	431a      	orrs	r2, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	430a      	orrs	r2, r1
 800266e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f042 0201 	orr.w	r2, r2, #1
 800267e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2200      	movs	r2, #0
 8002684:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2220      	movs	r2, #32
 800268a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2200      	movs	r2, #0
 8002692:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2200      	movs	r2, #0
 8002698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800269c:	2300      	movs	r3, #0
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3710      	adds	r7, #16
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	000186a0 	.word	0x000186a0
 80026ac:	001e847f 	.word	0x001e847f
 80026b0:	003d08ff 	.word	0x003d08ff
 80026b4:	431bde83 	.word	0x431bde83
 80026b8:	10624dd3 	.word	0x10624dd3

080026bc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b088      	sub	sp, #32
 80026c0:	af02      	add	r7, sp, #8
 80026c2:	60f8      	str	r0, [r7, #12]
 80026c4:	607a      	str	r2, [r7, #4]
 80026c6:	461a      	mov	r2, r3
 80026c8:	460b      	mov	r3, r1
 80026ca:	817b      	strh	r3, [r7, #10]
 80026cc:	4613      	mov	r3, r2
 80026ce:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80026d0:	f7fe fca0 	bl	8001014 <HAL_GetTick>
 80026d4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	2b20      	cmp	r3, #32
 80026e0:	f040 80e0 	bne.w	80028a4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	9300      	str	r3, [sp, #0]
 80026e8:	2319      	movs	r3, #25
 80026ea:	2201      	movs	r2, #1
 80026ec:	4970      	ldr	r1, [pc, #448]	; (80028b0 <HAL_I2C_Master_Transmit+0x1f4>)
 80026ee:	68f8      	ldr	r0, [r7, #12]
 80026f0:	f000 fd56 	bl	80031a0 <I2C_WaitOnFlagUntilTimeout>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d001      	beq.n	80026fe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80026fa:	2302      	movs	r3, #2
 80026fc:	e0d3      	b.n	80028a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002704:	2b01      	cmp	r3, #1
 8002706:	d101      	bne.n	800270c <HAL_I2C_Master_Transmit+0x50>
 8002708:	2302      	movs	r3, #2
 800270a:	e0cc      	b.n	80028a6 <HAL_I2C_Master_Transmit+0x1ea>
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2201      	movs	r2, #1
 8002710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0301 	and.w	r3, r3, #1
 800271e:	2b01      	cmp	r3, #1
 8002720:	d007      	beq.n	8002732 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f042 0201 	orr.w	r2, r2, #1
 8002730:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002740:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2221      	movs	r2, #33	; 0x21
 8002746:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2210      	movs	r2, #16
 800274e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2200      	movs	r2, #0
 8002756:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	893a      	ldrh	r2, [r7, #8]
 8002762:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002768:	b29a      	uxth	r2, r3
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	4a50      	ldr	r2, [pc, #320]	; (80028b4 <HAL_I2C_Master_Transmit+0x1f8>)
 8002772:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002774:	8979      	ldrh	r1, [r7, #10]
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	6a3a      	ldr	r2, [r7, #32]
 800277a:	68f8      	ldr	r0, [r7, #12]
 800277c:	f000 fbe4 	bl	8002f48 <I2C_MasterRequestWrite>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d001      	beq.n	800278a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e08d      	b.n	80028a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800278a:	2300      	movs	r3, #0
 800278c:	613b      	str	r3, [r7, #16]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	695b      	ldr	r3, [r3, #20]
 8002794:	613b      	str	r3, [r7, #16]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	699b      	ldr	r3, [r3, #24]
 800279c:	613b      	str	r3, [r7, #16]
 800279e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80027a0:	e066      	b.n	8002870 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027a2:	697a      	ldr	r2, [r7, #20]
 80027a4:	6a39      	ldr	r1, [r7, #32]
 80027a6:	68f8      	ldr	r0, [r7, #12]
 80027a8:	f000 fdd0 	bl	800334c <I2C_WaitOnTXEFlagUntilTimeout>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d00d      	beq.n	80027ce <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b6:	2b04      	cmp	r3, #4
 80027b8:	d107      	bne.n	80027ca <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027c8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e06b      	b.n	80028a6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d2:	781a      	ldrb	r2, [r3, #0]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027de:	1c5a      	adds	r2, r3, #1
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	3b01      	subs	r3, #1
 80027ec:	b29a      	uxth	r2, r3
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027f6:	3b01      	subs	r3, #1
 80027f8:	b29a      	uxth	r2, r3
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	695b      	ldr	r3, [r3, #20]
 8002804:	f003 0304 	and.w	r3, r3, #4
 8002808:	2b04      	cmp	r3, #4
 800280a:	d11b      	bne.n	8002844 <HAL_I2C_Master_Transmit+0x188>
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002810:	2b00      	cmp	r3, #0
 8002812:	d017      	beq.n	8002844 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002818:	781a      	ldrb	r2, [r3, #0]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002824:	1c5a      	adds	r2, r3, #1
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800282e:	b29b      	uxth	r3, r3
 8002830:	3b01      	subs	r3, #1
 8002832:	b29a      	uxth	r2, r3
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800283c:	3b01      	subs	r3, #1
 800283e:	b29a      	uxth	r2, r3
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002844:	697a      	ldr	r2, [r7, #20]
 8002846:	6a39      	ldr	r1, [r7, #32]
 8002848:	68f8      	ldr	r0, [r7, #12]
 800284a:	f000 fdc0 	bl	80033ce <I2C_WaitOnBTFFlagUntilTimeout>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d00d      	beq.n	8002870 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002858:	2b04      	cmp	r3, #4
 800285a:	d107      	bne.n	800286c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800286a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e01a      	b.n	80028a6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002874:	2b00      	cmp	r3, #0
 8002876:	d194      	bne.n	80027a2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002886:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2220      	movs	r2, #32
 800288c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2200      	movs	r2, #0
 8002894:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2200      	movs	r2, #0
 800289c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80028a0:	2300      	movs	r3, #0
 80028a2:	e000      	b.n	80028a6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80028a4:	2302      	movs	r3, #2
  }
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3718      	adds	r7, #24
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	00100002 	.word	0x00100002
 80028b4:	ffff0000 	.word	0xffff0000

080028b8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b08c      	sub	sp, #48	; 0x30
 80028bc:	af02      	add	r7, sp, #8
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	607a      	str	r2, [r7, #4]
 80028c2:	461a      	mov	r2, r3
 80028c4:	460b      	mov	r3, r1
 80028c6:	817b      	strh	r3, [r7, #10]
 80028c8:	4613      	mov	r3, r2
 80028ca:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80028cc:	f7fe fba2 	bl	8001014 <HAL_GetTick>
 80028d0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	2b20      	cmp	r3, #32
 80028dc:	f040 820b 	bne.w	8002cf6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80028e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e2:	9300      	str	r3, [sp, #0]
 80028e4:	2319      	movs	r3, #25
 80028e6:	2201      	movs	r2, #1
 80028e8:	497c      	ldr	r1, [pc, #496]	; (8002adc <HAL_I2C_Master_Receive+0x224>)
 80028ea:	68f8      	ldr	r0, [r7, #12]
 80028ec:	f000 fc58 	bl	80031a0 <I2C_WaitOnFlagUntilTimeout>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d001      	beq.n	80028fa <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80028f6:	2302      	movs	r3, #2
 80028f8:	e1fe      	b.n	8002cf8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002900:	2b01      	cmp	r3, #1
 8002902:	d101      	bne.n	8002908 <HAL_I2C_Master_Receive+0x50>
 8002904:	2302      	movs	r3, #2
 8002906:	e1f7      	b.n	8002cf8 <HAL_I2C_Master_Receive+0x440>
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0301 	and.w	r3, r3, #1
 800291a:	2b01      	cmp	r3, #1
 800291c:	d007      	beq.n	800292e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f042 0201 	orr.w	r2, r2, #1
 800292c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800293c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2222      	movs	r2, #34	; 0x22
 8002942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2210      	movs	r2, #16
 800294a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2200      	movs	r2, #0
 8002952:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	893a      	ldrh	r2, [r7, #8]
 800295e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002964:	b29a      	uxth	r2, r3
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	4a5c      	ldr	r2, [pc, #368]	; (8002ae0 <HAL_I2C_Master_Receive+0x228>)
 800296e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002970:	8979      	ldrh	r1, [r7, #10]
 8002972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002974:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002976:	68f8      	ldr	r0, [r7, #12]
 8002978:	f000 fb5c 	bl	8003034 <I2C_MasterRequestRead>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d001      	beq.n	8002986 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e1b8      	b.n	8002cf8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800298a:	2b00      	cmp	r3, #0
 800298c:	d113      	bne.n	80029b6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800298e:	2300      	movs	r3, #0
 8002990:	623b      	str	r3, [r7, #32]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	695b      	ldr	r3, [r3, #20]
 8002998:	623b      	str	r3, [r7, #32]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	699b      	ldr	r3, [r3, #24]
 80029a0:	623b      	str	r3, [r7, #32]
 80029a2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029b2:	601a      	str	r2, [r3, #0]
 80029b4:	e18c      	b.n	8002cd0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d11b      	bne.n	80029f6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029cc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029ce:	2300      	movs	r3, #0
 80029d0:	61fb      	str	r3, [r7, #28]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	695b      	ldr	r3, [r3, #20]
 80029d8:	61fb      	str	r3, [r7, #28]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	699b      	ldr	r3, [r3, #24]
 80029e0:	61fb      	str	r3, [r7, #28]
 80029e2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029f2:	601a      	str	r2, [r3, #0]
 80029f4:	e16c      	b.n	8002cd0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d11b      	bne.n	8002a36 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a0c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a1c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a1e:	2300      	movs	r3, #0
 8002a20:	61bb      	str	r3, [r7, #24]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	695b      	ldr	r3, [r3, #20]
 8002a28:	61bb      	str	r3, [r7, #24]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	699b      	ldr	r3, [r3, #24]
 8002a30:	61bb      	str	r3, [r7, #24]
 8002a32:	69bb      	ldr	r3, [r7, #24]
 8002a34:	e14c      	b.n	8002cd0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002a44:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a46:	2300      	movs	r3, #0
 8002a48:	617b      	str	r3, [r7, #20]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	695b      	ldr	r3, [r3, #20]
 8002a50:	617b      	str	r3, [r7, #20]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	699b      	ldr	r3, [r3, #24]
 8002a58:	617b      	str	r3, [r7, #20]
 8002a5a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002a5c:	e138      	b.n	8002cd0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a62:	2b03      	cmp	r3, #3
 8002a64:	f200 80f1 	bhi.w	8002c4a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d123      	bne.n	8002ab8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a72:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002a74:	68f8      	ldr	r0, [r7, #12]
 8002a76:	f000 fceb 	bl	8003450 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d001      	beq.n	8002a84 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e139      	b.n	8002cf8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	691a      	ldr	r2, [r3, #16]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8e:	b2d2      	uxtb	r2, r2
 8002a90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a96:	1c5a      	adds	r2, r3, #1
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aa0:	3b01      	subs	r3, #1
 8002aa2:	b29a      	uxth	r2, r3
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aac:	b29b      	uxth	r3, r3
 8002aae:	3b01      	subs	r3, #1
 8002ab0:	b29a      	uxth	r2, r3
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002ab6:	e10b      	b.n	8002cd0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002abc:	2b02      	cmp	r3, #2
 8002abe:	d14e      	bne.n	8002b5e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac2:	9300      	str	r3, [sp, #0]
 8002ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	4906      	ldr	r1, [pc, #24]	; (8002ae4 <HAL_I2C_Master_Receive+0x22c>)
 8002aca:	68f8      	ldr	r0, [r7, #12]
 8002acc:	f000 fb68 	bl	80031a0 <I2C_WaitOnFlagUntilTimeout>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d008      	beq.n	8002ae8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e10e      	b.n	8002cf8 <HAL_I2C_Master_Receive+0x440>
 8002ada:	bf00      	nop
 8002adc:	00100002 	.word	0x00100002
 8002ae0:	ffff0000 	.word	0xffff0000
 8002ae4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002af6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	691a      	ldr	r2, [r3, #16]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b02:	b2d2      	uxtb	r2, r2
 8002b04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0a:	1c5a      	adds	r2, r3, #1
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b14:	3b01      	subs	r3, #1
 8002b16:	b29a      	uxth	r2, r3
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	3b01      	subs	r3, #1
 8002b24:	b29a      	uxth	r2, r3
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	691a      	ldr	r2, [r3, #16]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b34:	b2d2      	uxtb	r2, r2
 8002b36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3c:	1c5a      	adds	r2, r3, #1
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b46:	3b01      	subs	r3, #1
 8002b48:	b29a      	uxth	r2, r3
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	3b01      	subs	r3, #1
 8002b56:	b29a      	uxth	r2, r3
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b5c:	e0b8      	b.n	8002cd0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b60:	9300      	str	r3, [sp, #0]
 8002b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b64:	2200      	movs	r2, #0
 8002b66:	4966      	ldr	r1, [pc, #408]	; (8002d00 <HAL_I2C_Master_Receive+0x448>)
 8002b68:	68f8      	ldr	r0, [r7, #12]
 8002b6a:	f000 fb19 	bl	80031a0 <I2C_WaitOnFlagUntilTimeout>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d001      	beq.n	8002b78 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e0bf      	b.n	8002cf8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b86:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	691a      	ldr	r2, [r3, #16]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b92:	b2d2      	uxtb	r2, r2
 8002b94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b9a:	1c5a      	adds	r2, r3, #1
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ba4:	3b01      	subs	r3, #1
 8002ba6:	b29a      	uxth	r2, r3
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	3b01      	subs	r3, #1
 8002bb4:	b29a      	uxth	r2, r3
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bbc:	9300      	str	r3, [sp, #0]
 8002bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	494f      	ldr	r1, [pc, #316]	; (8002d00 <HAL_I2C_Master_Receive+0x448>)
 8002bc4:	68f8      	ldr	r0, [r7, #12]
 8002bc6:	f000 faeb 	bl	80031a0 <I2C_WaitOnFlagUntilTimeout>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d001      	beq.n	8002bd4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e091      	b.n	8002cf8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002be2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	691a      	ldr	r2, [r3, #16]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bee:	b2d2      	uxtb	r2, r2
 8002bf0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf6:	1c5a      	adds	r2, r3, #1
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c00:	3b01      	subs	r3, #1
 8002c02:	b29a      	uxth	r2, r3
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	3b01      	subs	r3, #1
 8002c10:	b29a      	uxth	r2, r3
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	691a      	ldr	r2, [r3, #16]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c20:	b2d2      	uxtb	r2, r2
 8002c22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c28:	1c5a      	adds	r2, r3, #1
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c32:	3b01      	subs	r3, #1
 8002c34:	b29a      	uxth	r2, r3
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	3b01      	subs	r3, #1
 8002c42:	b29a      	uxth	r2, r3
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c48:	e042      	b.n	8002cd0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c4c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002c4e:	68f8      	ldr	r0, [r7, #12]
 8002c50:	f000 fbfe 	bl	8003450 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d001      	beq.n	8002c5e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e04c      	b.n	8002cf8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	691a      	ldr	r2, [r3, #16]
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c68:	b2d2      	uxtb	r2, r2
 8002c6a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c70:	1c5a      	adds	r2, r3, #1
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c7a:	3b01      	subs	r3, #1
 8002c7c:	b29a      	uxth	r2, r3
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	3b01      	subs	r3, #1
 8002c8a:	b29a      	uxth	r2, r3
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	695b      	ldr	r3, [r3, #20]
 8002c96:	f003 0304 	and.w	r3, r3, #4
 8002c9a:	2b04      	cmp	r3, #4
 8002c9c:	d118      	bne.n	8002cd0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	691a      	ldr	r2, [r3, #16]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca8:	b2d2      	uxtb	r2, r2
 8002caa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb0:	1c5a      	adds	r2, r3, #1
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cba:	3b01      	subs	r3, #1
 8002cbc:	b29a      	uxth	r2, r3
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	3b01      	subs	r3, #1
 8002cca:	b29a      	uxth	r2, r3
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	f47f aec2 	bne.w	8002a5e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2220      	movs	r2, #32
 8002cde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2200      	movs	r2, #0
 8002cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	e000      	b.n	8002cf8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002cf6:	2302      	movs	r3, #2
  }
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3728      	adds	r7, #40	; 0x28
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	00010004 	.word	0x00010004

08002d04 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b08a      	sub	sp, #40	; 0x28
 8002d08:	af02      	add	r7, sp, #8
 8002d0a:	60f8      	str	r0, [r7, #12]
 8002d0c:	607a      	str	r2, [r7, #4]
 8002d0e:	603b      	str	r3, [r7, #0]
 8002d10:	460b      	mov	r3, r1
 8002d12:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002d14:	f7fe f97e 	bl	8001014 <HAL_GetTick>
 8002d18:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	2b20      	cmp	r3, #32
 8002d28:	f040 8105 	bne.w	8002f36 <HAL_I2C_IsDeviceReady+0x232>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	9300      	str	r3, [sp, #0]
 8002d30:	2319      	movs	r3, #25
 8002d32:	2201      	movs	r2, #1
 8002d34:	4982      	ldr	r1, [pc, #520]	; (8002f40 <HAL_I2C_IsDeviceReady+0x23c>)
 8002d36:	68f8      	ldr	r0, [r7, #12]
 8002d38:	f000 fa32 	bl	80031a0 <I2C_WaitOnFlagUntilTimeout>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d001      	beq.n	8002d46 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002d42:	2302      	movs	r3, #2
 8002d44:	e0f8      	b.n	8002f38 <HAL_I2C_IsDeviceReady+0x234>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d101      	bne.n	8002d54 <HAL_I2C_IsDeviceReady+0x50>
 8002d50:	2302      	movs	r3, #2
 8002d52:	e0f1      	b.n	8002f38 <HAL_I2C_IsDeviceReady+0x234>
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2201      	movs	r2, #1
 8002d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0301 	and.w	r3, r3, #1
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d007      	beq.n	8002d7a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f042 0201 	orr.w	r2, r2, #1
 8002d78:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d88:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2224      	movs	r2, #36	; 0x24
 8002d8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2200      	movs	r2, #0
 8002d96:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	4a6a      	ldr	r2, [pc, #424]	; (8002f44 <HAL_I2C_IsDeviceReady+0x240>)
 8002d9c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002dac:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	9300      	str	r3, [sp, #0]
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002dba:	68f8      	ldr	r0, [r7, #12]
 8002dbc:	f000 f9f0 	bl	80031a0 <I2C_WaitOnFlagUntilTimeout>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d001      	beq.n	8002dca <HAL_I2C_IsDeviceReady+0xc6>
      {
        return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e0b6      	b.n	8002f38 <HAL_I2C_IsDeviceReady+0x234>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002dca:	897b      	ldrh	r3, [r7, #10]
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	461a      	mov	r2, r3
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002dd8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002dda:	f7fe f91b 	bl	8001014 <HAL_GetTick>
 8002dde:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	695b      	ldr	r3, [r3, #20]
 8002de6:	f003 0302 	and.w	r3, r3, #2
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	bf0c      	ite	eq
 8002dee:	2301      	moveq	r3, #1
 8002df0:	2300      	movne	r3, #0
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	695b      	ldr	r3, [r3, #20]
 8002dfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e04:	bf0c      	ite	eq
 8002e06:	2301      	moveq	r3, #1
 8002e08:	2300      	movne	r3, #0
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002e0e:	e025      	b.n	8002e5c <HAL_I2C_IsDeviceReady+0x158>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002e10:	f7fe f900 	bl	8001014 <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	683a      	ldr	r2, [r7, #0]
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d302      	bcc.n	8002e26 <HAL_I2C_IsDeviceReady+0x122>
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d103      	bne.n	8002e2e <HAL_I2C_IsDeviceReady+0x12a>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	22a0      	movs	r2, #160	; 0xa0
 8002e2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	695b      	ldr	r3, [r3, #20]
 8002e34:	f003 0302 	and.w	r3, r3, #2
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	bf0c      	ite	eq
 8002e3c:	2301      	moveq	r3, #1
 8002e3e:	2300      	movne	r3, #0
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	695b      	ldr	r3, [r3, #20]
 8002e4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e52:	bf0c      	ite	eq
 8002e54:	2301      	moveq	r3, #1
 8002e56:	2300      	movne	r3, #0
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	2ba0      	cmp	r3, #160	; 0xa0
 8002e66:	d005      	beq.n	8002e74 <HAL_I2C_IsDeviceReady+0x170>
 8002e68:	7dfb      	ldrb	r3, [r7, #23]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d102      	bne.n	8002e74 <HAL_I2C_IsDeviceReady+0x170>
 8002e6e:	7dbb      	ldrb	r3, [r7, #22]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d0cd      	beq.n	8002e10 <HAL_I2C_IsDeviceReady+0x10c>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2220      	movs	r2, #32
 8002e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	695b      	ldr	r3, [r3, #20]
 8002e82:	f003 0302 	and.w	r3, r3, #2
 8002e86:	2b02      	cmp	r3, #2
 8002e88:	d129      	bne.n	8002ede <HAL_I2C_IsDeviceReady+0x1da>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e98:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	613b      	str	r3, [r7, #16]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	695b      	ldr	r3, [r3, #20]
 8002ea4:	613b      	str	r3, [r7, #16]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	699b      	ldr	r3, [r3, #24]
 8002eac:	613b      	str	r3, [r7, #16]
 8002eae:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	9300      	str	r3, [sp, #0]
 8002eb4:	2319      	movs	r3, #25
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	4921      	ldr	r1, [pc, #132]	; (8002f40 <HAL_I2C_IsDeviceReady+0x23c>)
 8002eba:	68f8      	ldr	r0, [r7, #12]
 8002ebc:	f000 f970 	bl	80031a0 <I2C_WaitOnFlagUntilTimeout>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d001      	beq.n	8002eca <HAL_I2C_IsDeviceReady+0x1c6>
        {
          return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e036      	b.n	8002f38 <HAL_I2C_IsDeviceReady+0x234>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2220      	movs	r2, #32
 8002ece:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002eda:	2300      	movs	r3, #0
 8002edc:	e02c      	b.n	8002f38 <HAL_I2C_IsDeviceReady+0x234>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002eec:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ef6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	9300      	str	r3, [sp, #0]
 8002efc:	2319      	movs	r3, #25
 8002efe:	2201      	movs	r2, #1
 8002f00:	490f      	ldr	r1, [pc, #60]	; (8002f40 <HAL_I2C_IsDeviceReady+0x23c>)
 8002f02:	68f8      	ldr	r0, [r7, #12]
 8002f04:	f000 f94c 	bl	80031a0 <I2C_WaitOnFlagUntilTimeout>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d001      	beq.n	8002f12 <HAL_I2C_IsDeviceReady+0x20e>
        {
          return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e012      	b.n	8002f38 <HAL_I2C_IsDeviceReady+0x234>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	3301      	adds	r3, #1
 8002f16:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002f18:	69ba      	ldr	r2, [r7, #24]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	f4ff af3e 	bcc.w	8002d9e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2220      	movs	r2, #32
 8002f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e000      	b.n	8002f38 <HAL_I2C_IsDeviceReady+0x234>
  }
  else
  {
    return HAL_BUSY;
 8002f36:	2302      	movs	r3, #2
  }
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3720      	adds	r7, #32
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	00100002 	.word	0x00100002
 8002f44:	ffff0000 	.word	0xffff0000

08002f48 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b088      	sub	sp, #32
 8002f4c:	af02      	add	r7, sp, #8
 8002f4e:	60f8      	str	r0, [r7, #12]
 8002f50:	607a      	str	r2, [r7, #4]
 8002f52:	603b      	str	r3, [r7, #0]
 8002f54:	460b      	mov	r3, r1
 8002f56:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f5c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	2b08      	cmp	r3, #8
 8002f62:	d006      	beq.n	8002f72 <I2C_MasterRequestWrite+0x2a>
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d003      	beq.n	8002f72 <I2C_MasterRequestWrite+0x2a>
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002f70:	d108      	bne.n	8002f84 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f80:	601a      	str	r2, [r3, #0]
 8002f82:	e00b      	b.n	8002f9c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f88:	2b12      	cmp	r3, #18
 8002f8a:	d107      	bne.n	8002f9c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f9a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	9300      	str	r3, [sp, #0]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002fa8:	68f8      	ldr	r0, [r7, #12]
 8002faa:	f000 f8f9 	bl	80031a0 <I2C_WaitOnFlagUntilTimeout>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d001      	beq.n	8002fb8 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e035      	b.n	8003024 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	691b      	ldr	r3, [r3, #16]
 8002fbc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002fc0:	d108      	bne.n	8002fd4 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002fc2:	897b      	ldrh	r3, [r7, #10]
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002fd0:	611a      	str	r2, [r3, #16]
 8002fd2:	e01b      	b.n	800300c <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002fd4:	897b      	ldrh	r3, [r7, #10]
 8002fd6:	11db      	asrs	r3, r3, #7
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	f003 0306 	and.w	r3, r3, #6
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	f063 030f 	orn	r3, r3, #15
 8002fe4:	b2da      	uxtb	r2, r3
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	490e      	ldr	r1, [pc, #56]	; (800302c <I2C_MasterRequestWrite+0xe4>)
 8002ff2:	68f8      	ldr	r0, [r7, #12]
 8002ff4:	f000 f92b 	bl	800324e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d001      	beq.n	8003002 <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e010      	b.n	8003024 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003002:	897b      	ldrh	r3, [r7, #10]
 8003004:	b2da      	uxtb	r2, r3
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	4907      	ldr	r1, [pc, #28]	; (8003030 <I2C_MasterRequestWrite+0xe8>)
 8003012:	68f8      	ldr	r0, [r7, #12]
 8003014:	f000 f91b 	bl	800324e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d001      	beq.n	8003022 <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e000      	b.n	8003024 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 8003022:	2300      	movs	r3, #0
}
 8003024:	4618      	mov	r0, r3
 8003026:	3718      	adds	r7, #24
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}
 800302c:	00010008 	.word	0x00010008
 8003030:	00010002 	.word	0x00010002

08003034 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b088      	sub	sp, #32
 8003038:	af02      	add	r7, sp, #8
 800303a:	60f8      	str	r0, [r7, #12]
 800303c:	607a      	str	r2, [r7, #4]
 800303e:	603b      	str	r3, [r7, #0]
 8003040:	460b      	mov	r3, r1
 8003042:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003048:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003058:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	2b08      	cmp	r3, #8
 800305e:	d006      	beq.n	800306e <I2C_MasterRequestRead+0x3a>
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	2b01      	cmp	r3, #1
 8003064:	d003      	beq.n	800306e <I2C_MasterRequestRead+0x3a>
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800306c:	d108      	bne.n	8003080 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800307c:	601a      	str	r2, [r3, #0]
 800307e:	e00b      	b.n	8003098 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003084:	2b11      	cmp	r3, #17
 8003086:	d107      	bne.n	8003098 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003096:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	9300      	str	r3, [sp, #0]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2200      	movs	r2, #0
 80030a0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80030a4:	68f8      	ldr	r0, [r7, #12]
 80030a6:	f000 f87b 	bl	80031a0 <I2C_WaitOnFlagUntilTimeout>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d001      	beq.n	80030b4 <I2C_MasterRequestRead+0x80>
  {
    return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e06d      	b.n	8003190 <I2C_MasterRequestRead+0x15c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	691b      	ldr	r3, [r3, #16]
 80030b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030bc:	d108      	bne.n	80030d0 <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80030be:	897b      	ldrh	r3, [r7, #10]
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	f043 0301 	orr.w	r3, r3, #1
 80030c6:	b2da      	uxtb	r2, r3
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	611a      	str	r2, [r3, #16]
 80030ce:	e053      	b.n	8003178 <I2C_MasterRequestRead+0x144>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80030d0:	897b      	ldrh	r3, [r7, #10]
 80030d2:	11db      	asrs	r3, r3, #7
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	f003 0306 	and.w	r3, r3, #6
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	f063 030f 	orn	r3, r3, #15
 80030e0:	b2da      	uxtb	r2, r3
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	492a      	ldr	r1, [pc, #168]	; (8003198 <I2C_MasterRequestRead+0x164>)
 80030ee:	68f8      	ldr	r0, [r7, #12]
 80030f0:	f000 f8ad 	bl	800324e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d001      	beq.n	80030fe <I2C_MasterRequestRead+0xca>
    {
      return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e048      	b.n	8003190 <I2C_MasterRequestRead+0x15c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80030fe:	897b      	ldrh	r3, [r7, #10]
 8003100:	b2da      	uxtb	r2, r3
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	4923      	ldr	r1, [pc, #140]	; (800319c <I2C_MasterRequestRead+0x168>)
 800310e:	68f8      	ldr	r0, [r7, #12]
 8003110:	f000 f89d 	bl	800324e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003114:	4603      	mov	r3, r0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d001      	beq.n	800311e <I2C_MasterRequestRead+0xea>
    {
      return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e038      	b.n	8003190 <I2C_MasterRequestRead+0x15c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800311e:	2300      	movs	r3, #0
 8003120:	613b      	str	r3, [r7, #16]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	695b      	ldr	r3, [r3, #20]
 8003128:	613b      	str	r3, [r7, #16]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	699b      	ldr	r3, [r3, #24]
 8003130:	613b      	str	r3, [r7, #16]
 8003132:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003142:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	9300      	str	r3, [sp, #0]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003150:	68f8      	ldr	r0, [r7, #12]
 8003152:	f000 f825 	bl	80031a0 <I2C_WaitOnFlagUntilTimeout>
 8003156:	4603      	mov	r3, r0
 8003158:	2b00      	cmp	r3, #0
 800315a:	d001      	beq.n	8003160 <I2C_MasterRequestRead+0x12c>
    {
      return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e017      	b.n	8003190 <I2C_MasterRequestRead+0x15c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003160:	897b      	ldrh	r3, [r7, #10]
 8003162:	11db      	asrs	r3, r3, #7
 8003164:	b2db      	uxtb	r3, r3
 8003166:	f003 0306 	and.w	r3, r3, #6
 800316a:	b2db      	uxtb	r3, r3
 800316c:	f063 030e 	orn	r3, r3, #14
 8003170:	b2da      	uxtb	r2, r3
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	4907      	ldr	r1, [pc, #28]	; (800319c <I2C_MasterRequestRead+0x168>)
 800317e:	68f8      	ldr	r0, [r7, #12]
 8003180:	f000 f865 	bl	800324e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d001      	beq.n	800318e <I2C_MasterRequestRead+0x15a>
  {
    return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e000      	b.n	8003190 <I2C_MasterRequestRead+0x15c>
  }

  return HAL_OK;
 800318e:	2300      	movs	r3, #0
}
 8003190:	4618      	mov	r0, r3
 8003192:	3718      	adds	r7, #24
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}
 8003198:	00010008 	.word	0x00010008
 800319c:	00010002 	.word	0x00010002

080031a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b084      	sub	sp, #16
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	60f8      	str	r0, [r7, #12]
 80031a8:	60b9      	str	r1, [r7, #8]
 80031aa:	603b      	str	r3, [r7, #0]
 80031ac:	4613      	mov	r3, r2
 80031ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031b0:	e025      	b.n	80031fe <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031b8:	d021      	beq.n	80031fe <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031ba:	f7fd ff2b 	bl	8001014 <HAL_GetTick>
 80031be:	4602      	mov	r2, r0
 80031c0:	69bb      	ldr	r3, [r7, #24]
 80031c2:	1ad3      	subs	r3, r2, r3
 80031c4:	683a      	ldr	r2, [r7, #0]
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d302      	bcc.n	80031d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d116      	bne.n	80031fe <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2200      	movs	r2, #0
 80031d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2220      	movs	r2, #32
 80031da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ea:	f043 0220 	orr.w	r2, r3, #32
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2200      	movs	r2, #0
 80031f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e023      	b.n	8003246 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	0c1b      	lsrs	r3, r3, #16
 8003202:	b2db      	uxtb	r3, r3
 8003204:	2b01      	cmp	r3, #1
 8003206:	d10d      	bne.n	8003224 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	695b      	ldr	r3, [r3, #20]
 800320e:	43da      	mvns	r2, r3
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	4013      	ands	r3, r2
 8003214:	b29b      	uxth	r3, r3
 8003216:	2b00      	cmp	r3, #0
 8003218:	bf0c      	ite	eq
 800321a:	2301      	moveq	r3, #1
 800321c:	2300      	movne	r3, #0
 800321e:	b2db      	uxtb	r3, r3
 8003220:	461a      	mov	r2, r3
 8003222:	e00c      	b.n	800323e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	699b      	ldr	r3, [r3, #24]
 800322a:	43da      	mvns	r2, r3
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	4013      	ands	r3, r2
 8003230:	b29b      	uxth	r3, r3
 8003232:	2b00      	cmp	r3, #0
 8003234:	bf0c      	ite	eq
 8003236:	2301      	moveq	r3, #1
 8003238:	2300      	movne	r3, #0
 800323a:	b2db      	uxtb	r3, r3
 800323c:	461a      	mov	r2, r3
 800323e:	79fb      	ldrb	r3, [r7, #7]
 8003240:	429a      	cmp	r2, r3
 8003242:	d0b6      	beq.n	80031b2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003244:	2300      	movs	r3, #0
}
 8003246:	4618      	mov	r0, r3
 8003248:	3710      	adds	r7, #16
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}

0800324e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800324e:	b580      	push	{r7, lr}
 8003250:	b084      	sub	sp, #16
 8003252:	af00      	add	r7, sp, #0
 8003254:	60f8      	str	r0, [r7, #12]
 8003256:	60b9      	str	r1, [r7, #8]
 8003258:	607a      	str	r2, [r7, #4]
 800325a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800325c:	e051      	b.n	8003302 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	695b      	ldr	r3, [r3, #20]
 8003264:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003268:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800326c:	d123      	bne.n	80032b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800327c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003286:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2200      	movs	r2, #0
 800328c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2220      	movs	r2, #32
 8003292:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2200      	movs	r2, #0
 800329a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a2:	f043 0204 	orr.w	r2, r3, #4
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2200      	movs	r2, #0
 80032ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e046      	b.n	8003344 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032bc:	d021      	beq.n	8003302 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032be:	f7fd fea9 	bl	8001014 <HAL_GetTick>
 80032c2:	4602      	mov	r2, r0
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d302      	bcc.n	80032d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d116      	bne.n	8003302 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2200      	movs	r2, #0
 80032d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2220      	movs	r2, #32
 80032de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2200      	movs	r2, #0
 80032e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ee:	f043 0220 	orr.w	r2, r3, #32
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2200      	movs	r2, #0
 80032fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e020      	b.n	8003344 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	0c1b      	lsrs	r3, r3, #16
 8003306:	b2db      	uxtb	r3, r3
 8003308:	2b01      	cmp	r3, #1
 800330a:	d10c      	bne.n	8003326 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	695b      	ldr	r3, [r3, #20]
 8003312:	43da      	mvns	r2, r3
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	4013      	ands	r3, r2
 8003318:	b29b      	uxth	r3, r3
 800331a:	2b00      	cmp	r3, #0
 800331c:	bf14      	ite	ne
 800331e:	2301      	movne	r3, #1
 8003320:	2300      	moveq	r3, #0
 8003322:	b2db      	uxtb	r3, r3
 8003324:	e00b      	b.n	800333e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	699b      	ldr	r3, [r3, #24]
 800332c:	43da      	mvns	r2, r3
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	4013      	ands	r3, r2
 8003332:	b29b      	uxth	r3, r3
 8003334:	2b00      	cmp	r3, #0
 8003336:	bf14      	ite	ne
 8003338:	2301      	movne	r3, #1
 800333a:	2300      	moveq	r3, #0
 800333c:	b2db      	uxtb	r3, r3
 800333e:	2b00      	cmp	r3, #0
 8003340:	d18d      	bne.n	800325e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003342:	2300      	movs	r3, #0
}
 8003344:	4618      	mov	r0, r3
 8003346:	3710      	adds	r7, #16
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}

0800334c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
 8003352:	60f8      	str	r0, [r7, #12]
 8003354:	60b9      	str	r1, [r7, #8]
 8003356:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003358:	e02d      	b.n	80033b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800335a:	68f8      	ldr	r0, [r7, #12]
 800335c:	f000 f8ce 	bl	80034fc <I2C_IsAcknowledgeFailed>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d001      	beq.n	800336a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e02d      	b.n	80033c6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003370:	d021      	beq.n	80033b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003372:	f7fd fe4f 	bl	8001014 <HAL_GetTick>
 8003376:	4602      	mov	r2, r0
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	68ba      	ldr	r2, [r7, #8]
 800337e:	429a      	cmp	r2, r3
 8003380:	d302      	bcc.n	8003388 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d116      	bne.n	80033b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2200      	movs	r2, #0
 800338c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2220      	movs	r2, #32
 8003392:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2200      	movs	r2, #0
 800339a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a2:	f043 0220 	orr.w	r2, r3, #32
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2200      	movs	r2, #0
 80033ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e007      	b.n	80033c6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	695b      	ldr	r3, [r3, #20]
 80033bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033c0:	2b80      	cmp	r3, #128	; 0x80
 80033c2:	d1ca      	bne.n	800335a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80033c4:	2300      	movs	r3, #0
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3710      	adds	r7, #16
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}

080033ce <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033ce:	b580      	push	{r7, lr}
 80033d0:	b084      	sub	sp, #16
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	60f8      	str	r0, [r7, #12]
 80033d6:	60b9      	str	r1, [r7, #8]
 80033d8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80033da:	e02d      	b.n	8003438 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80033dc:	68f8      	ldr	r0, [r7, #12]
 80033de:	f000 f88d 	bl	80034fc <I2C_IsAcknowledgeFailed>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d001      	beq.n	80033ec <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e02d      	b.n	8003448 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033f2:	d021      	beq.n	8003438 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033f4:	f7fd fe0e 	bl	8001014 <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	68ba      	ldr	r2, [r7, #8]
 8003400:	429a      	cmp	r2, r3
 8003402:	d302      	bcc.n	800340a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d116      	bne.n	8003438 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2200      	movs	r2, #0
 800340e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2220      	movs	r2, #32
 8003414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2200      	movs	r2, #0
 800341c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003424:	f043 0220 	orr.w	r2, r3, #32
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2200      	movs	r2, #0
 8003430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e007      	b.n	8003448 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	695b      	ldr	r3, [r3, #20]
 800343e:	f003 0304 	and.w	r3, r3, #4
 8003442:	2b04      	cmp	r3, #4
 8003444:	d1ca      	bne.n	80033dc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003446:	2300      	movs	r3, #0
}
 8003448:	4618      	mov	r0, r3
 800344a:	3710      	adds	r7, #16
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}

08003450 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b084      	sub	sp, #16
 8003454:	af00      	add	r7, sp, #0
 8003456:	60f8      	str	r0, [r7, #12]
 8003458:	60b9      	str	r1, [r7, #8]
 800345a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800345c:	e042      	b.n	80034e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	695b      	ldr	r3, [r3, #20]
 8003464:	f003 0310 	and.w	r3, r3, #16
 8003468:	2b10      	cmp	r3, #16
 800346a:	d119      	bne.n	80034a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f06f 0210 	mvn.w	r2, #16
 8003474:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2200      	movs	r2, #0
 800347a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2220      	movs	r2, #32
 8003480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2200      	movs	r2, #0
 8003488:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2200      	movs	r2, #0
 8003498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e029      	b.n	80034f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034a0:	f7fd fdb8 	bl	8001014 <HAL_GetTick>
 80034a4:	4602      	mov	r2, r0
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	68ba      	ldr	r2, [r7, #8]
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d302      	bcc.n	80034b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d116      	bne.n	80034e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2200      	movs	r2, #0
 80034ba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2220      	movs	r2, #32
 80034c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2200      	movs	r2, #0
 80034c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d0:	f043 0220 	orr.w	r2, r3, #32
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2200      	movs	r2, #0
 80034dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e007      	b.n	80034f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	695b      	ldr	r3, [r3, #20]
 80034ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ee:	2b40      	cmp	r3, #64	; 0x40
 80034f0:	d1b5      	bne.n	800345e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80034f2:	2300      	movs	r3, #0
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3710      	adds	r7, #16
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}

080034fc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	695b      	ldr	r3, [r3, #20]
 800350a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800350e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003512:	d11b      	bne.n	800354c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800351c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2220      	movs	r2, #32
 8003528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003538:	f043 0204 	orr.w	r2, r3, #4
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e000      	b.n	800354e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800354c:	2300      	movs	r3, #0
}
 800354e:	4618      	mov	r0, r3
 8003550:	370c      	adds	r7, #12
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr
	...

0800355c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b086      	sub	sp, #24
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d101      	bne.n	800356e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e22d      	b.n	80039ca <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 0301 	and.w	r3, r3, #1
 8003576:	2b00      	cmp	r3, #0
 8003578:	d075      	beq.n	8003666 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800357a:	4ba3      	ldr	r3, [pc, #652]	; (8003808 <HAL_RCC_OscConfig+0x2ac>)
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	f003 030c 	and.w	r3, r3, #12
 8003582:	2b04      	cmp	r3, #4
 8003584:	d00c      	beq.n	80035a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003586:	4ba0      	ldr	r3, [pc, #640]	; (8003808 <HAL_RCC_OscConfig+0x2ac>)
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800358e:	2b08      	cmp	r3, #8
 8003590:	d112      	bne.n	80035b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003592:	4b9d      	ldr	r3, [pc, #628]	; (8003808 <HAL_RCC_OscConfig+0x2ac>)
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800359a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800359e:	d10b      	bne.n	80035b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035a0:	4b99      	ldr	r3, [pc, #612]	; (8003808 <HAL_RCC_OscConfig+0x2ac>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d05b      	beq.n	8003664 <HAL_RCC_OscConfig+0x108>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d157      	bne.n	8003664 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e208      	b.n	80039ca <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035c0:	d106      	bne.n	80035d0 <HAL_RCC_OscConfig+0x74>
 80035c2:	4b91      	ldr	r3, [pc, #580]	; (8003808 <HAL_RCC_OscConfig+0x2ac>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a90      	ldr	r2, [pc, #576]	; (8003808 <HAL_RCC_OscConfig+0x2ac>)
 80035c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035cc:	6013      	str	r3, [r2, #0]
 80035ce:	e01d      	b.n	800360c <HAL_RCC_OscConfig+0xb0>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035d8:	d10c      	bne.n	80035f4 <HAL_RCC_OscConfig+0x98>
 80035da:	4b8b      	ldr	r3, [pc, #556]	; (8003808 <HAL_RCC_OscConfig+0x2ac>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a8a      	ldr	r2, [pc, #552]	; (8003808 <HAL_RCC_OscConfig+0x2ac>)
 80035e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035e4:	6013      	str	r3, [r2, #0]
 80035e6:	4b88      	ldr	r3, [pc, #544]	; (8003808 <HAL_RCC_OscConfig+0x2ac>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a87      	ldr	r2, [pc, #540]	; (8003808 <HAL_RCC_OscConfig+0x2ac>)
 80035ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035f0:	6013      	str	r3, [r2, #0]
 80035f2:	e00b      	b.n	800360c <HAL_RCC_OscConfig+0xb0>
 80035f4:	4b84      	ldr	r3, [pc, #528]	; (8003808 <HAL_RCC_OscConfig+0x2ac>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a83      	ldr	r2, [pc, #524]	; (8003808 <HAL_RCC_OscConfig+0x2ac>)
 80035fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035fe:	6013      	str	r3, [r2, #0]
 8003600:	4b81      	ldr	r3, [pc, #516]	; (8003808 <HAL_RCC_OscConfig+0x2ac>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a80      	ldr	r2, [pc, #512]	; (8003808 <HAL_RCC_OscConfig+0x2ac>)
 8003606:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800360a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d013      	beq.n	800363c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003614:	f7fd fcfe 	bl	8001014 <HAL_GetTick>
 8003618:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800361a:	e008      	b.n	800362e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800361c:	f7fd fcfa 	bl	8001014 <HAL_GetTick>
 8003620:	4602      	mov	r2, r0
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	2b64      	cmp	r3, #100	; 0x64
 8003628:	d901      	bls.n	800362e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	e1cd      	b.n	80039ca <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800362e:	4b76      	ldr	r3, [pc, #472]	; (8003808 <HAL_RCC_OscConfig+0x2ac>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d0f0      	beq.n	800361c <HAL_RCC_OscConfig+0xc0>
 800363a:	e014      	b.n	8003666 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800363c:	f7fd fcea 	bl	8001014 <HAL_GetTick>
 8003640:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003642:	e008      	b.n	8003656 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003644:	f7fd fce6 	bl	8001014 <HAL_GetTick>
 8003648:	4602      	mov	r2, r0
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	2b64      	cmp	r3, #100	; 0x64
 8003650:	d901      	bls.n	8003656 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e1b9      	b.n	80039ca <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003656:	4b6c      	ldr	r3, [pc, #432]	; (8003808 <HAL_RCC_OscConfig+0x2ac>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d1f0      	bne.n	8003644 <HAL_RCC_OscConfig+0xe8>
 8003662:	e000      	b.n	8003666 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003664:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0302 	and.w	r3, r3, #2
 800366e:	2b00      	cmp	r3, #0
 8003670:	d063      	beq.n	800373a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003672:	4b65      	ldr	r3, [pc, #404]	; (8003808 <HAL_RCC_OscConfig+0x2ac>)
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	f003 030c 	and.w	r3, r3, #12
 800367a:	2b00      	cmp	r3, #0
 800367c:	d00b      	beq.n	8003696 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800367e:	4b62      	ldr	r3, [pc, #392]	; (8003808 <HAL_RCC_OscConfig+0x2ac>)
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003686:	2b08      	cmp	r3, #8
 8003688:	d11c      	bne.n	80036c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800368a:	4b5f      	ldr	r3, [pc, #380]	; (8003808 <HAL_RCC_OscConfig+0x2ac>)
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d116      	bne.n	80036c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003696:	4b5c      	ldr	r3, [pc, #368]	; (8003808 <HAL_RCC_OscConfig+0x2ac>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 0302 	and.w	r3, r3, #2
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d005      	beq.n	80036ae <HAL_RCC_OscConfig+0x152>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	68db      	ldr	r3, [r3, #12]
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d001      	beq.n	80036ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e18d      	b.n	80039ca <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036ae:	4b56      	ldr	r3, [pc, #344]	; (8003808 <HAL_RCC_OscConfig+0x2ac>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	691b      	ldr	r3, [r3, #16]
 80036ba:	00db      	lsls	r3, r3, #3
 80036bc:	4952      	ldr	r1, [pc, #328]	; (8003808 <HAL_RCC_OscConfig+0x2ac>)
 80036be:	4313      	orrs	r3, r2
 80036c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036c2:	e03a      	b.n	800373a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d020      	beq.n	800370e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036cc:	4b4f      	ldr	r3, [pc, #316]	; (800380c <HAL_RCC_OscConfig+0x2b0>)
 80036ce:	2201      	movs	r2, #1
 80036d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036d2:	f7fd fc9f 	bl	8001014 <HAL_GetTick>
 80036d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036d8:	e008      	b.n	80036ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036da:	f7fd fc9b 	bl	8001014 <HAL_GetTick>
 80036de:	4602      	mov	r2, r0
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	2b02      	cmp	r3, #2
 80036e6:	d901      	bls.n	80036ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80036e8:	2303      	movs	r3, #3
 80036ea:	e16e      	b.n	80039ca <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036ec:	4b46      	ldr	r3, [pc, #280]	; (8003808 <HAL_RCC_OscConfig+0x2ac>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0302 	and.w	r3, r3, #2
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d0f0      	beq.n	80036da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036f8:	4b43      	ldr	r3, [pc, #268]	; (8003808 <HAL_RCC_OscConfig+0x2ac>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	691b      	ldr	r3, [r3, #16]
 8003704:	00db      	lsls	r3, r3, #3
 8003706:	4940      	ldr	r1, [pc, #256]	; (8003808 <HAL_RCC_OscConfig+0x2ac>)
 8003708:	4313      	orrs	r3, r2
 800370a:	600b      	str	r3, [r1, #0]
 800370c:	e015      	b.n	800373a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800370e:	4b3f      	ldr	r3, [pc, #252]	; (800380c <HAL_RCC_OscConfig+0x2b0>)
 8003710:	2200      	movs	r2, #0
 8003712:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003714:	f7fd fc7e 	bl	8001014 <HAL_GetTick>
 8003718:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800371a:	e008      	b.n	800372e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800371c:	f7fd fc7a 	bl	8001014 <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	2b02      	cmp	r3, #2
 8003728:	d901      	bls.n	800372e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e14d      	b.n	80039ca <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800372e:	4b36      	ldr	r3, [pc, #216]	; (8003808 <HAL_RCC_OscConfig+0x2ac>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0302 	and.w	r3, r3, #2
 8003736:	2b00      	cmp	r3, #0
 8003738:	d1f0      	bne.n	800371c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0308 	and.w	r3, r3, #8
 8003742:	2b00      	cmp	r3, #0
 8003744:	d030      	beq.n	80037a8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	695b      	ldr	r3, [r3, #20]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d016      	beq.n	800377c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800374e:	4b30      	ldr	r3, [pc, #192]	; (8003810 <HAL_RCC_OscConfig+0x2b4>)
 8003750:	2201      	movs	r2, #1
 8003752:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003754:	f7fd fc5e 	bl	8001014 <HAL_GetTick>
 8003758:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800375a:	e008      	b.n	800376e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800375c:	f7fd fc5a 	bl	8001014 <HAL_GetTick>
 8003760:	4602      	mov	r2, r0
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	2b02      	cmp	r3, #2
 8003768:	d901      	bls.n	800376e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e12d      	b.n	80039ca <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800376e:	4b26      	ldr	r3, [pc, #152]	; (8003808 <HAL_RCC_OscConfig+0x2ac>)
 8003770:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003772:	f003 0302 	and.w	r3, r3, #2
 8003776:	2b00      	cmp	r3, #0
 8003778:	d0f0      	beq.n	800375c <HAL_RCC_OscConfig+0x200>
 800377a:	e015      	b.n	80037a8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800377c:	4b24      	ldr	r3, [pc, #144]	; (8003810 <HAL_RCC_OscConfig+0x2b4>)
 800377e:	2200      	movs	r2, #0
 8003780:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003782:	f7fd fc47 	bl	8001014 <HAL_GetTick>
 8003786:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003788:	e008      	b.n	800379c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800378a:	f7fd fc43 	bl	8001014 <HAL_GetTick>
 800378e:	4602      	mov	r2, r0
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	1ad3      	subs	r3, r2, r3
 8003794:	2b02      	cmp	r3, #2
 8003796:	d901      	bls.n	800379c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003798:	2303      	movs	r3, #3
 800379a:	e116      	b.n	80039ca <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800379c:	4b1a      	ldr	r3, [pc, #104]	; (8003808 <HAL_RCC_OscConfig+0x2ac>)
 800379e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037a0:	f003 0302 	and.w	r3, r3, #2
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d1f0      	bne.n	800378a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 0304 	and.w	r3, r3, #4
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	f000 80a0 	beq.w	80038f6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037b6:	2300      	movs	r3, #0
 80037b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037ba:	4b13      	ldr	r3, [pc, #76]	; (8003808 <HAL_RCC_OscConfig+0x2ac>)
 80037bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d10f      	bne.n	80037e6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037c6:	2300      	movs	r3, #0
 80037c8:	60fb      	str	r3, [r7, #12]
 80037ca:	4b0f      	ldr	r3, [pc, #60]	; (8003808 <HAL_RCC_OscConfig+0x2ac>)
 80037cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ce:	4a0e      	ldr	r2, [pc, #56]	; (8003808 <HAL_RCC_OscConfig+0x2ac>)
 80037d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037d4:	6413      	str	r3, [r2, #64]	; 0x40
 80037d6:	4b0c      	ldr	r3, [pc, #48]	; (8003808 <HAL_RCC_OscConfig+0x2ac>)
 80037d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037de:	60fb      	str	r3, [r7, #12]
 80037e0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80037e2:	2301      	movs	r3, #1
 80037e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037e6:	4b0b      	ldr	r3, [pc, #44]	; (8003814 <HAL_RCC_OscConfig+0x2b8>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d121      	bne.n	8003836 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037f2:	4b08      	ldr	r3, [pc, #32]	; (8003814 <HAL_RCC_OscConfig+0x2b8>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a07      	ldr	r2, [pc, #28]	; (8003814 <HAL_RCC_OscConfig+0x2b8>)
 80037f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037fe:	f7fd fc09 	bl	8001014 <HAL_GetTick>
 8003802:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003804:	e011      	b.n	800382a <HAL_RCC_OscConfig+0x2ce>
 8003806:	bf00      	nop
 8003808:	40023800 	.word	0x40023800
 800380c:	42470000 	.word	0x42470000
 8003810:	42470e80 	.word	0x42470e80
 8003814:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003818:	f7fd fbfc 	bl	8001014 <HAL_GetTick>
 800381c:	4602      	mov	r2, r0
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	2b02      	cmp	r3, #2
 8003824:	d901      	bls.n	800382a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003826:	2303      	movs	r3, #3
 8003828:	e0cf      	b.n	80039ca <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800382a:	4b6a      	ldr	r3, [pc, #424]	; (80039d4 <HAL_RCC_OscConfig+0x478>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003832:	2b00      	cmp	r3, #0
 8003834:	d0f0      	beq.n	8003818 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	2b01      	cmp	r3, #1
 800383c:	d106      	bne.n	800384c <HAL_RCC_OscConfig+0x2f0>
 800383e:	4b66      	ldr	r3, [pc, #408]	; (80039d8 <HAL_RCC_OscConfig+0x47c>)
 8003840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003842:	4a65      	ldr	r2, [pc, #404]	; (80039d8 <HAL_RCC_OscConfig+0x47c>)
 8003844:	f043 0301 	orr.w	r3, r3, #1
 8003848:	6713      	str	r3, [r2, #112]	; 0x70
 800384a:	e01c      	b.n	8003886 <HAL_RCC_OscConfig+0x32a>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	2b05      	cmp	r3, #5
 8003852:	d10c      	bne.n	800386e <HAL_RCC_OscConfig+0x312>
 8003854:	4b60      	ldr	r3, [pc, #384]	; (80039d8 <HAL_RCC_OscConfig+0x47c>)
 8003856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003858:	4a5f      	ldr	r2, [pc, #380]	; (80039d8 <HAL_RCC_OscConfig+0x47c>)
 800385a:	f043 0304 	orr.w	r3, r3, #4
 800385e:	6713      	str	r3, [r2, #112]	; 0x70
 8003860:	4b5d      	ldr	r3, [pc, #372]	; (80039d8 <HAL_RCC_OscConfig+0x47c>)
 8003862:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003864:	4a5c      	ldr	r2, [pc, #368]	; (80039d8 <HAL_RCC_OscConfig+0x47c>)
 8003866:	f043 0301 	orr.w	r3, r3, #1
 800386a:	6713      	str	r3, [r2, #112]	; 0x70
 800386c:	e00b      	b.n	8003886 <HAL_RCC_OscConfig+0x32a>
 800386e:	4b5a      	ldr	r3, [pc, #360]	; (80039d8 <HAL_RCC_OscConfig+0x47c>)
 8003870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003872:	4a59      	ldr	r2, [pc, #356]	; (80039d8 <HAL_RCC_OscConfig+0x47c>)
 8003874:	f023 0301 	bic.w	r3, r3, #1
 8003878:	6713      	str	r3, [r2, #112]	; 0x70
 800387a:	4b57      	ldr	r3, [pc, #348]	; (80039d8 <HAL_RCC_OscConfig+0x47c>)
 800387c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800387e:	4a56      	ldr	r2, [pc, #344]	; (80039d8 <HAL_RCC_OscConfig+0x47c>)
 8003880:	f023 0304 	bic.w	r3, r3, #4
 8003884:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d015      	beq.n	80038ba <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800388e:	f7fd fbc1 	bl	8001014 <HAL_GetTick>
 8003892:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003894:	e00a      	b.n	80038ac <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003896:	f7fd fbbd 	bl	8001014 <HAL_GetTick>
 800389a:	4602      	mov	r2, r0
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	1ad3      	subs	r3, r2, r3
 80038a0:	f643 2298 	movw	r2, #15000	; 0x3a98
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d901      	bls.n	80038ac <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80038a8:	2303      	movs	r3, #3
 80038aa:	e08e      	b.n	80039ca <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038ac:	4b4a      	ldr	r3, [pc, #296]	; (80039d8 <HAL_RCC_OscConfig+0x47c>)
 80038ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038b0:	f003 0302 	and.w	r3, r3, #2
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d0ee      	beq.n	8003896 <HAL_RCC_OscConfig+0x33a>
 80038b8:	e014      	b.n	80038e4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038ba:	f7fd fbab 	bl	8001014 <HAL_GetTick>
 80038be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038c0:	e00a      	b.n	80038d8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038c2:	f7fd fba7 	bl	8001014 <HAL_GetTick>
 80038c6:	4602      	mov	r2, r0
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	1ad3      	subs	r3, r2, r3
 80038cc:	f643 2298 	movw	r2, #15000	; 0x3a98
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d901      	bls.n	80038d8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80038d4:	2303      	movs	r3, #3
 80038d6:	e078      	b.n	80039ca <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038d8:	4b3f      	ldr	r3, [pc, #252]	; (80039d8 <HAL_RCC_OscConfig+0x47c>)
 80038da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038dc:	f003 0302 	and.w	r3, r3, #2
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d1ee      	bne.n	80038c2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038e4:	7dfb      	ldrb	r3, [r7, #23]
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d105      	bne.n	80038f6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038ea:	4b3b      	ldr	r3, [pc, #236]	; (80039d8 <HAL_RCC_OscConfig+0x47c>)
 80038ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ee:	4a3a      	ldr	r2, [pc, #232]	; (80039d8 <HAL_RCC_OscConfig+0x47c>)
 80038f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038f4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	699b      	ldr	r3, [r3, #24]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d064      	beq.n	80039c8 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038fe:	4b36      	ldr	r3, [pc, #216]	; (80039d8 <HAL_RCC_OscConfig+0x47c>)
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	f003 030c 	and.w	r3, r3, #12
 8003906:	2b08      	cmp	r3, #8
 8003908:	d05c      	beq.n	80039c4 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	699b      	ldr	r3, [r3, #24]
 800390e:	2b02      	cmp	r3, #2
 8003910:	d141      	bne.n	8003996 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003912:	4b32      	ldr	r3, [pc, #200]	; (80039dc <HAL_RCC_OscConfig+0x480>)
 8003914:	2200      	movs	r2, #0
 8003916:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003918:	f7fd fb7c 	bl	8001014 <HAL_GetTick>
 800391c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800391e:	e008      	b.n	8003932 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003920:	f7fd fb78 	bl	8001014 <HAL_GetTick>
 8003924:	4602      	mov	r2, r0
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	2b02      	cmp	r3, #2
 800392c:	d901      	bls.n	8003932 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e04b      	b.n	80039ca <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003932:	4b29      	ldr	r3, [pc, #164]	; (80039d8 <HAL_RCC_OscConfig+0x47c>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d1f0      	bne.n	8003920 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	69da      	ldr	r2, [r3, #28]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6a1b      	ldr	r3, [r3, #32]
 8003946:	431a      	orrs	r2, r3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394c:	019b      	lsls	r3, r3, #6
 800394e:	431a      	orrs	r2, r3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003954:	085b      	lsrs	r3, r3, #1
 8003956:	3b01      	subs	r3, #1
 8003958:	041b      	lsls	r3, r3, #16
 800395a:	431a      	orrs	r2, r3
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003960:	061b      	lsls	r3, r3, #24
 8003962:	491d      	ldr	r1, [pc, #116]	; (80039d8 <HAL_RCC_OscConfig+0x47c>)
 8003964:	4313      	orrs	r3, r2
 8003966:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003968:	4b1c      	ldr	r3, [pc, #112]	; (80039dc <HAL_RCC_OscConfig+0x480>)
 800396a:	2201      	movs	r2, #1
 800396c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800396e:	f7fd fb51 	bl	8001014 <HAL_GetTick>
 8003972:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003974:	e008      	b.n	8003988 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003976:	f7fd fb4d 	bl	8001014 <HAL_GetTick>
 800397a:	4602      	mov	r2, r0
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	1ad3      	subs	r3, r2, r3
 8003980:	2b02      	cmp	r3, #2
 8003982:	d901      	bls.n	8003988 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8003984:	2303      	movs	r3, #3
 8003986:	e020      	b.n	80039ca <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003988:	4b13      	ldr	r3, [pc, #76]	; (80039d8 <HAL_RCC_OscConfig+0x47c>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003990:	2b00      	cmp	r3, #0
 8003992:	d0f0      	beq.n	8003976 <HAL_RCC_OscConfig+0x41a>
 8003994:	e018      	b.n	80039c8 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003996:	4b11      	ldr	r3, [pc, #68]	; (80039dc <HAL_RCC_OscConfig+0x480>)
 8003998:	2200      	movs	r2, #0
 800399a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800399c:	f7fd fb3a 	bl	8001014 <HAL_GetTick>
 80039a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039a2:	e008      	b.n	80039b6 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039a4:	f7fd fb36 	bl	8001014 <HAL_GetTick>
 80039a8:	4602      	mov	r2, r0
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	2b02      	cmp	r3, #2
 80039b0:	d901      	bls.n	80039b6 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 80039b2:	2303      	movs	r3, #3
 80039b4:	e009      	b.n	80039ca <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039b6:	4b08      	ldr	r3, [pc, #32]	; (80039d8 <HAL_RCC_OscConfig+0x47c>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d1f0      	bne.n	80039a4 <HAL_RCC_OscConfig+0x448>
 80039c2:	e001      	b.n	80039c8 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e000      	b.n	80039ca <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 80039c8:	2300      	movs	r3, #0
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3718      	adds	r7, #24
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	40007000 	.word	0x40007000
 80039d8:	40023800 	.word	0x40023800
 80039dc:	42470060 	.word	0x42470060

080039e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b084      	sub	sp, #16
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d101      	bne.n	80039f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e0ca      	b.n	8003b8a <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039f4:	4b67      	ldr	r3, [pc, #412]	; (8003b94 <HAL_RCC_ClockConfig+0x1b4>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 030f 	and.w	r3, r3, #15
 80039fc:	683a      	ldr	r2, [r7, #0]
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d90c      	bls.n	8003a1c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a02:	4b64      	ldr	r3, [pc, #400]	; (8003b94 <HAL_RCC_ClockConfig+0x1b4>)
 8003a04:	683a      	ldr	r2, [r7, #0]
 8003a06:	b2d2      	uxtb	r2, r2
 8003a08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a0a:	4b62      	ldr	r3, [pc, #392]	; (8003b94 <HAL_RCC_ClockConfig+0x1b4>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 030f 	and.w	r3, r3, #15
 8003a12:	683a      	ldr	r2, [r7, #0]
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d001      	beq.n	8003a1c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e0b6      	b.n	8003b8a <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0302 	and.w	r3, r3, #2
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d020      	beq.n	8003a6a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0304 	and.w	r3, r3, #4
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d005      	beq.n	8003a40 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a34:	4b58      	ldr	r3, [pc, #352]	; (8003b98 <HAL_RCC_ClockConfig+0x1b8>)
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	4a57      	ldr	r2, [pc, #348]	; (8003b98 <HAL_RCC_ClockConfig+0x1b8>)
 8003a3a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a3e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 0308 	and.w	r3, r3, #8
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d005      	beq.n	8003a58 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a4c:	4b52      	ldr	r3, [pc, #328]	; (8003b98 <HAL_RCC_ClockConfig+0x1b8>)
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	4a51      	ldr	r2, [pc, #324]	; (8003b98 <HAL_RCC_ClockConfig+0x1b8>)
 8003a52:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a56:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a58:	4b4f      	ldr	r3, [pc, #316]	; (8003b98 <HAL_RCC_ClockConfig+0x1b8>)
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	494c      	ldr	r1, [pc, #304]	; (8003b98 <HAL_RCC_ClockConfig+0x1b8>)
 8003a66:	4313      	orrs	r3, r2
 8003a68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 0301 	and.w	r3, r3, #1
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d044      	beq.n	8003b00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d107      	bne.n	8003a8e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a7e:	4b46      	ldr	r3, [pc, #280]	; (8003b98 <HAL_RCC_ClockConfig+0x1b8>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d119      	bne.n	8003abe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e07d      	b.n	8003b8a <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d003      	beq.n	8003a9e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a9a:	2b03      	cmp	r3, #3
 8003a9c:	d107      	bne.n	8003aae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a9e:	4b3e      	ldr	r3, [pc, #248]	; (8003b98 <HAL_RCC_ClockConfig+0x1b8>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d109      	bne.n	8003abe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e06d      	b.n	8003b8a <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aae:	4b3a      	ldr	r3, [pc, #232]	; (8003b98 <HAL_RCC_ClockConfig+0x1b8>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 0302 	and.w	r3, r3, #2
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d101      	bne.n	8003abe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e065      	b.n	8003b8a <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003abe:	4b36      	ldr	r3, [pc, #216]	; (8003b98 <HAL_RCC_ClockConfig+0x1b8>)
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	f023 0203 	bic.w	r2, r3, #3
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	4933      	ldr	r1, [pc, #204]	; (8003b98 <HAL_RCC_ClockConfig+0x1b8>)
 8003acc:	4313      	orrs	r3, r2
 8003ace:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ad0:	f7fd faa0 	bl	8001014 <HAL_GetTick>
 8003ad4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ad6:	e00a      	b.n	8003aee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ad8:	f7fd fa9c 	bl	8001014 <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d901      	bls.n	8003aee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003aea:	2303      	movs	r3, #3
 8003aec:	e04d      	b.n	8003b8a <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aee:	4b2a      	ldr	r3, [pc, #168]	; (8003b98 <HAL_RCC_ClockConfig+0x1b8>)
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	f003 020c 	and.w	r2, r3, #12
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d1eb      	bne.n	8003ad8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b00:	4b24      	ldr	r3, [pc, #144]	; (8003b94 <HAL_RCC_ClockConfig+0x1b4>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 030f 	and.w	r3, r3, #15
 8003b08:	683a      	ldr	r2, [r7, #0]
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d20c      	bcs.n	8003b28 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b0e:	4b21      	ldr	r3, [pc, #132]	; (8003b94 <HAL_RCC_ClockConfig+0x1b4>)
 8003b10:	683a      	ldr	r2, [r7, #0]
 8003b12:	b2d2      	uxtb	r2, r2
 8003b14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b16:	4b1f      	ldr	r3, [pc, #124]	; (8003b94 <HAL_RCC_ClockConfig+0x1b4>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 030f 	and.w	r3, r3, #15
 8003b1e:	683a      	ldr	r2, [r7, #0]
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d001      	beq.n	8003b28 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e030      	b.n	8003b8a <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 0304 	and.w	r3, r3, #4
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d008      	beq.n	8003b46 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b34:	4b18      	ldr	r3, [pc, #96]	; (8003b98 <HAL_RCC_ClockConfig+0x1b8>)
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	4915      	ldr	r1, [pc, #84]	; (8003b98 <HAL_RCC_ClockConfig+0x1b8>)
 8003b42:	4313      	orrs	r3, r2
 8003b44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0308 	and.w	r3, r3, #8
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d009      	beq.n	8003b66 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b52:	4b11      	ldr	r3, [pc, #68]	; (8003b98 <HAL_RCC_ClockConfig+0x1b8>)
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	691b      	ldr	r3, [r3, #16]
 8003b5e:	00db      	lsls	r3, r3, #3
 8003b60:	490d      	ldr	r1, [pc, #52]	; (8003b98 <HAL_RCC_ClockConfig+0x1b8>)
 8003b62:	4313      	orrs	r3, r2
 8003b64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b66:	f000 f81d 	bl	8003ba4 <HAL_RCC_GetSysClockFreq>
 8003b6a:	4601      	mov	r1, r0
 8003b6c:	4b0a      	ldr	r3, [pc, #40]	; (8003b98 <HAL_RCC_ClockConfig+0x1b8>)
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	091b      	lsrs	r3, r3, #4
 8003b72:	f003 030f 	and.w	r3, r3, #15
 8003b76:	4a09      	ldr	r2, [pc, #36]	; (8003b9c <HAL_RCC_ClockConfig+0x1bc>)
 8003b78:	5cd3      	ldrb	r3, [r2, r3]
 8003b7a:	fa21 f303 	lsr.w	r3, r1, r3
 8003b7e:	4a08      	ldr	r2, [pc, #32]	; (8003ba0 <HAL_RCC_ClockConfig+0x1c0>)
 8003b80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8003b82:	2000      	movs	r0, #0
 8003b84:	f00a fb46 	bl	800e214 <HAL_InitTick>

  return HAL_OK;
 8003b88:	2300      	movs	r3, #0
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3710      	adds	r7, #16
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	40023c00 	.word	0x40023c00
 8003b98:	40023800 	.word	0x40023800
 8003b9c:	0801242c 	.word	0x0801242c
 8003ba0:	2000000c 	.word	0x2000000c

08003ba4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ba6:	b085      	sub	sp, #20
 8003ba8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003baa:	2300      	movs	r3, #0
 8003bac:	607b      	str	r3, [r7, #4]
 8003bae:	2300      	movs	r3, #0
 8003bb0:	60fb      	str	r3, [r7, #12]
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bba:	4b63      	ldr	r3, [pc, #396]	; (8003d48 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	f003 030c 	and.w	r3, r3, #12
 8003bc2:	2b04      	cmp	r3, #4
 8003bc4:	d007      	beq.n	8003bd6 <HAL_RCC_GetSysClockFreq+0x32>
 8003bc6:	2b08      	cmp	r3, #8
 8003bc8:	d008      	beq.n	8003bdc <HAL_RCC_GetSysClockFreq+0x38>
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	f040 80b4 	bne.w	8003d38 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003bd0:	4b5e      	ldr	r3, [pc, #376]	; (8003d4c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003bd2:	60bb      	str	r3, [r7, #8]
       break;
 8003bd4:	e0b3      	b.n	8003d3e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003bd6:	4b5e      	ldr	r3, [pc, #376]	; (8003d50 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003bd8:	60bb      	str	r3, [r7, #8]
      break;
 8003bda:	e0b0      	b.n	8003d3e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003bdc:	4b5a      	ldr	r3, [pc, #360]	; (8003d48 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003be4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003be6:	4b58      	ldr	r3, [pc, #352]	; (8003d48 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d04a      	beq.n	8003c88 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bf2:	4b55      	ldr	r3, [pc, #340]	; (8003d48 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	099b      	lsrs	r3, r3, #6
 8003bf8:	f04f 0400 	mov.w	r4, #0
 8003bfc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003c00:	f04f 0200 	mov.w	r2, #0
 8003c04:	ea03 0501 	and.w	r5, r3, r1
 8003c08:	ea04 0602 	and.w	r6, r4, r2
 8003c0c:	4629      	mov	r1, r5
 8003c0e:	4632      	mov	r2, r6
 8003c10:	f04f 0300 	mov.w	r3, #0
 8003c14:	f04f 0400 	mov.w	r4, #0
 8003c18:	0154      	lsls	r4, r2, #5
 8003c1a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003c1e:	014b      	lsls	r3, r1, #5
 8003c20:	4619      	mov	r1, r3
 8003c22:	4622      	mov	r2, r4
 8003c24:	1b49      	subs	r1, r1, r5
 8003c26:	eb62 0206 	sbc.w	r2, r2, r6
 8003c2a:	f04f 0300 	mov.w	r3, #0
 8003c2e:	f04f 0400 	mov.w	r4, #0
 8003c32:	0194      	lsls	r4, r2, #6
 8003c34:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003c38:	018b      	lsls	r3, r1, #6
 8003c3a:	1a5b      	subs	r3, r3, r1
 8003c3c:	eb64 0402 	sbc.w	r4, r4, r2
 8003c40:	f04f 0100 	mov.w	r1, #0
 8003c44:	f04f 0200 	mov.w	r2, #0
 8003c48:	00e2      	lsls	r2, r4, #3
 8003c4a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003c4e:	00d9      	lsls	r1, r3, #3
 8003c50:	460b      	mov	r3, r1
 8003c52:	4614      	mov	r4, r2
 8003c54:	195b      	adds	r3, r3, r5
 8003c56:	eb44 0406 	adc.w	r4, r4, r6
 8003c5a:	f04f 0100 	mov.w	r1, #0
 8003c5e:	f04f 0200 	mov.w	r2, #0
 8003c62:	0262      	lsls	r2, r4, #9
 8003c64:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003c68:	0259      	lsls	r1, r3, #9
 8003c6a:	460b      	mov	r3, r1
 8003c6c:	4614      	mov	r4, r2
 8003c6e:	4618      	mov	r0, r3
 8003c70:	4621      	mov	r1, r4
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f04f 0400 	mov.w	r4, #0
 8003c78:	461a      	mov	r2, r3
 8003c7a:	4623      	mov	r3, r4
 8003c7c:	f7fd f814 	bl	8000ca8 <__aeabi_uldivmod>
 8003c80:	4603      	mov	r3, r0
 8003c82:	460c      	mov	r4, r1
 8003c84:	60fb      	str	r3, [r7, #12]
 8003c86:	e049      	b.n	8003d1c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c88:	4b2f      	ldr	r3, [pc, #188]	; (8003d48 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	099b      	lsrs	r3, r3, #6
 8003c8e:	f04f 0400 	mov.w	r4, #0
 8003c92:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003c96:	f04f 0200 	mov.w	r2, #0
 8003c9a:	ea03 0501 	and.w	r5, r3, r1
 8003c9e:	ea04 0602 	and.w	r6, r4, r2
 8003ca2:	4629      	mov	r1, r5
 8003ca4:	4632      	mov	r2, r6
 8003ca6:	f04f 0300 	mov.w	r3, #0
 8003caa:	f04f 0400 	mov.w	r4, #0
 8003cae:	0154      	lsls	r4, r2, #5
 8003cb0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003cb4:	014b      	lsls	r3, r1, #5
 8003cb6:	4619      	mov	r1, r3
 8003cb8:	4622      	mov	r2, r4
 8003cba:	1b49      	subs	r1, r1, r5
 8003cbc:	eb62 0206 	sbc.w	r2, r2, r6
 8003cc0:	f04f 0300 	mov.w	r3, #0
 8003cc4:	f04f 0400 	mov.w	r4, #0
 8003cc8:	0194      	lsls	r4, r2, #6
 8003cca:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003cce:	018b      	lsls	r3, r1, #6
 8003cd0:	1a5b      	subs	r3, r3, r1
 8003cd2:	eb64 0402 	sbc.w	r4, r4, r2
 8003cd6:	f04f 0100 	mov.w	r1, #0
 8003cda:	f04f 0200 	mov.w	r2, #0
 8003cde:	00e2      	lsls	r2, r4, #3
 8003ce0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003ce4:	00d9      	lsls	r1, r3, #3
 8003ce6:	460b      	mov	r3, r1
 8003ce8:	4614      	mov	r4, r2
 8003cea:	195b      	adds	r3, r3, r5
 8003cec:	eb44 0406 	adc.w	r4, r4, r6
 8003cf0:	f04f 0100 	mov.w	r1, #0
 8003cf4:	f04f 0200 	mov.w	r2, #0
 8003cf8:	02a2      	lsls	r2, r4, #10
 8003cfa:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003cfe:	0299      	lsls	r1, r3, #10
 8003d00:	460b      	mov	r3, r1
 8003d02:	4614      	mov	r4, r2
 8003d04:	4618      	mov	r0, r3
 8003d06:	4621      	mov	r1, r4
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	f04f 0400 	mov.w	r4, #0
 8003d0e:	461a      	mov	r2, r3
 8003d10:	4623      	mov	r3, r4
 8003d12:	f7fc ffc9 	bl	8000ca8 <__aeabi_uldivmod>
 8003d16:	4603      	mov	r3, r0
 8003d18:	460c      	mov	r4, r1
 8003d1a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d1c:	4b0a      	ldr	r3, [pc, #40]	; (8003d48 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	0c1b      	lsrs	r3, r3, #16
 8003d22:	f003 0303 	and.w	r3, r3, #3
 8003d26:	3301      	adds	r3, #1
 8003d28:	005b      	lsls	r3, r3, #1
 8003d2a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003d2c:	68fa      	ldr	r2, [r7, #12]
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d34:	60bb      	str	r3, [r7, #8]
      break;
 8003d36:	e002      	b.n	8003d3e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d38:	4b04      	ldr	r3, [pc, #16]	; (8003d4c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003d3a:	60bb      	str	r3, [r7, #8]
      break;
 8003d3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d3e:	68bb      	ldr	r3, [r7, #8]
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3714      	adds	r7, #20
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d48:	40023800 	.word	0x40023800
 8003d4c:	00f42400 	.word	0x00f42400
 8003d50:	007a1200 	.word	0x007a1200

08003d54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d54:	b480      	push	{r7}
 8003d56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d58:	4b03      	ldr	r3, [pc, #12]	; (8003d68 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr
 8003d66:	bf00      	nop
 8003d68:	2000000c 	.word	0x2000000c

08003d6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003d70:	f7ff fff0 	bl	8003d54 <HAL_RCC_GetHCLKFreq>
 8003d74:	4601      	mov	r1, r0
 8003d76:	4b05      	ldr	r3, [pc, #20]	; (8003d8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	0a9b      	lsrs	r3, r3, #10
 8003d7c:	f003 0307 	and.w	r3, r3, #7
 8003d80:	4a03      	ldr	r2, [pc, #12]	; (8003d90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d82:	5cd3      	ldrb	r3, [r2, r3]
 8003d84:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	bd80      	pop	{r7, pc}
 8003d8c:	40023800 	.word	0x40023800
 8003d90:	0801243c 	.word	0x0801243c

08003d94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003d98:	f7ff ffdc 	bl	8003d54 <HAL_RCC_GetHCLKFreq>
 8003d9c:	4601      	mov	r1, r0
 8003d9e:	4b05      	ldr	r3, [pc, #20]	; (8003db4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	0b5b      	lsrs	r3, r3, #13
 8003da4:	f003 0307 	and.w	r3, r3, #7
 8003da8:	4a03      	ldr	r2, [pc, #12]	; (8003db8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003daa:	5cd3      	ldrb	r3, [r2, r3]
 8003dac:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	40023800 	.word	0x40023800
 8003db8:	0801243c 	.word	0x0801243c

08003dbc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b083      	sub	sp, #12
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	220f      	movs	r2, #15
 8003dca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003dcc:	4b12      	ldr	r3, [pc, #72]	; (8003e18 <HAL_RCC_GetClockConfig+0x5c>)
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	f003 0203 	and.w	r2, r3, #3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003dd8:	4b0f      	ldr	r3, [pc, #60]	; (8003e18 <HAL_RCC_GetClockConfig+0x5c>)
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003de4:	4b0c      	ldr	r3, [pc, #48]	; (8003e18 <HAL_RCC_GetClockConfig+0x5c>)
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003df0:	4b09      	ldr	r3, [pc, #36]	; (8003e18 <HAL_RCC_GetClockConfig+0x5c>)
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	08db      	lsrs	r3, r3, #3
 8003df6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003dfe:	4b07      	ldr	r3, [pc, #28]	; (8003e1c <HAL_RCC_GetClockConfig+0x60>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 020f 	and.w	r2, r3, #15
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	601a      	str	r2, [r3, #0]
}
 8003e0a:	bf00      	nop
 8003e0c:	370c      	adds	r7, #12
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr
 8003e16:	bf00      	nop
 8003e18:	40023800 	.word	0x40023800
 8003e1c:	40023c00 	.word	0x40023c00

08003e20 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b086      	sub	sp, #24
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0301 	and.w	r3, r3, #1
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d105      	bne.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d035      	beq.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003e48:	4b62      	ldr	r3, [pc, #392]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003e4e:	f7fd f8e1 	bl	8001014 <HAL_GetTick>
 8003e52:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e54:	e008      	b.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003e56:	f7fd f8dd 	bl	8001014 <HAL_GetTick>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	1ad3      	subs	r3, r2, r3
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	d901      	bls.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e64:	2303      	movs	r3, #3
 8003e66:	e0b0      	b.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e68:	4b5b      	ldr	r3, [pc, #364]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d1f0      	bne.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	019a      	lsls	r2, r3, #6
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	071b      	lsls	r3, r3, #28
 8003e80:	4955      	ldr	r1, [pc, #340]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e82:	4313      	orrs	r3, r2
 8003e84:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003e88:	4b52      	ldr	r3, [pc, #328]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003e8e:	f7fd f8c1 	bl	8001014 <HAL_GetTick>
 8003e92:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e94:	e008      	b.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003e96:	f7fd f8bd 	bl	8001014 <HAL_GetTick>
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	1ad3      	subs	r3, r2, r3
 8003ea0:	2b02      	cmp	r3, #2
 8003ea2:	d901      	bls.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ea4:	2303      	movs	r3, #3
 8003ea6:	e090      	b.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ea8:	4b4b      	ldr	r3, [pc, #300]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d0f0      	beq.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 0302 	and.w	r3, r3, #2
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	f000 8083 	beq.w	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	60fb      	str	r3, [r7, #12]
 8003ec6:	4b44      	ldr	r3, [pc, #272]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eca:	4a43      	ldr	r2, [pc, #268]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ecc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ed0:	6413      	str	r3, [r2, #64]	; 0x40
 8003ed2:	4b41      	ldr	r3, [pc, #260]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eda:	60fb      	str	r3, [r7, #12]
 8003edc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003ede:	4b3f      	ldr	r3, [pc, #252]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a3e      	ldr	r2, [pc, #248]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003ee4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ee8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003eea:	f7fd f893 	bl	8001014 <HAL_GetTick>
 8003eee:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003ef0:	e008      	b.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003ef2:	f7fd f88f 	bl	8001014 <HAL_GetTick>
 8003ef6:	4602      	mov	r2, r0
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	1ad3      	subs	r3, r2, r3
 8003efc:	2b02      	cmp	r3, #2
 8003efe:	d901      	bls.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003f00:	2303      	movs	r3, #3
 8003f02:	e062      	b.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003f04:	4b35      	ldr	r3, [pc, #212]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d0f0      	beq.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f10:	4b31      	ldr	r3, [pc, #196]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f18:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d02f      	beq.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f28:	693a      	ldr	r2, [r7, #16]
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d028      	beq.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f2e:	4b2a      	ldr	r3, [pc, #168]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f36:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f38:	4b29      	ldr	r3, [pc, #164]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f3e:	4b28      	ldr	r3, [pc, #160]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003f40:	2200      	movs	r2, #0
 8003f42:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003f44:	4a24      	ldr	r2, [pc, #144]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003f4a:	4b23      	ldr	r3, [pc, #140]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f4e:	f003 0301 	and.w	r3, r3, #1
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d114      	bne.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003f56:	f7fd f85d 	bl	8001014 <HAL_GetTick>
 8003f5a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f5c:	e00a      	b.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f5e:	f7fd f859 	bl	8001014 <HAL_GetTick>
 8003f62:	4602      	mov	r2, r0
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	1ad3      	subs	r3, r2, r3
 8003f68:	f643 2298 	movw	r2, #15000	; 0x3a98
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d901      	bls.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003f70:	2303      	movs	r3, #3
 8003f72:	e02a      	b.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f74:	4b18      	ldr	r3, [pc, #96]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f78:	f003 0302 	and.w	r3, r3, #2
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d0ee      	beq.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f88:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f8c:	d10d      	bne.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003f8e:	4b12      	ldr	r3, [pc, #72]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	68db      	ldr	r3, [r3, #12]
 8003f9a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003f9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fa2:	490d      	ldr	r1, [pc, #52]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	608b      	str	r3, [r1, #8]
 8003fa8:	e005      	b.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003faa:	4b0b      	ldr	r3, [pc, #44]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	4a0a      	ldr	r2, [pc, #40]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003fb0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003fb4:	6093      	str	r3, [r2, #8]
 8003fb6:	4b08      	ldr	r3, [pc, #32]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003fb8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	68db      	ldr	r3, [r3, #12]
 8003fbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fc2:	4905      	ldr	r1, [pc, #20]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003fc8:	2300      	movs	r3, #0
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3718      	adds	r7, #24
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	bf00      	nop
 8003fd4:	42470068 	.word	0x42470068
 8003fd8:	40023800 	.word	0x40023800
 8003fdc:	40007000 	.word	0x40007000
 8003fe0:	42470e40 	.word	0x42470e40

08003fe4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b082      	sub	sp, #8
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d101      	bne.n	8003ff6 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e083      	b.n	80040fe <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	7f5b      	ldrb	r3, [r3, #29]
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d105      	bne.n	800400c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2200      	movs	r2, #0
 8004004:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f009 ff66 	bl	800ded8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2202      	movs	r2, #2
 8004010:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	22ca      	movs	r2, #202	; 0xca
 8004018:	625a      	str	r2, [r3, #36]	; 0x24
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	2253      	movs	r2, #83	; 0x53
 8004020:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f000 faa8 	bl	8004578 <RTC_EnterInitMode>
 8004028:	4603      	mov	r3, r0
 800402a:	2b00      	cmp	r3, #0
 800402c:	d008      	beq.n	8004040 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	22ff      	movs	r2, #255	; 0xff
 8004034:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2204      	movs	r2, #4
 800403a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	e05e      	b.n	80040fe <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	6812      	ldr	r2, [r2, #0]
 800404a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800404e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004052:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	6899      	ldr	r1, [r3, #8]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	685a      	ldr	r2, [r3, #4]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	691b      	ldr	r3, [r3, #16]
 8004062:	431a      	orrs	r2, r3
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	695b      	ldr	r3, [r3, #20]
 8004068:	431a      	orrs	r2, r3
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	430a      	orrs	r2, r1
 8004070:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	687a      	ldr	r2, [r7, #4]
 8004078:	68d2      	ldr	r2, [r2, #12]
 800407a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	6919      	ldr	r1, [r3, #16]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	041a      	lsls	r2, r3, #16
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	430a      	orrs	r2, r1
 800408e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	68da      	ldr	r2, [r3, #12]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800409e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	f003 0320 	and.w	r3, r3, #32
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d10e      	bne.n	80040cc <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f000 fa3a 	bl	8004528 <HAL_RTC_WaitForSynchro>
 80040b4:	4603      	mov	r3, r0
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d008      	beq.n	80040cc <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	22ff      	movs	r2, #255	; 0xff
 80040c0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2204      	movs	r2, #4
 80040c6:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	e018      	b.n	80040fe <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80040da:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	699a      	ldr	r2, [r3, #24]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	430a      	orrs	r2, r1
 80040ec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	22ff      	movs	r2, #255	; 0xff
 80040f4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2201      	movs	r2, #1
 80040fa:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80040fc:	2300      	movs	r3, #0
  }
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3708      	adds	r7, #8
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}

08004106 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004106:	b590      	push	{r4, r7, lr}
 8004108:	b087      	sub	sp, #28
 800410a:	af00      	add	r7, sp, #0
 800410c:	60f8      	str	r0, [r7, #12]
 800410e:	60b9      	str	r1, [r7, #8]
 8004110:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004112:	2300      	movs	r3, #0
 8004114:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	7f1b      	ldrb	r3, [r3, #28]
 800411a:	2b01      	cmp	r3, #1
 800411c:	d101      	bne.n	8004122 <HAL_RTC_SetTime+0x1c>
 800411e:	2302      	movs	r3, #2
 8004120:	e0aa      	b.n	8004278 <HAL_RTC_SetTime+0x172>
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2201      	movs	r2, #1
 8004126:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2202      	movs	r2, #2
 800412c:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d126      	bne.n	8004182 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800413e:	2b00      	cmp	r3, #0
 8004140:	d102      	bne.n	8004148 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	2200      	movs	r2, #0
 8004146:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	781b      	ldrb	r3, [r3, #0]
 800414c:	4618      	mov	r0, r3
 800414e:	f000 fa3f 	bl	80045d0 <RTC_ByteToBcd2>
 8004152:	4603      	mov	r3, r0
 8004154:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	785b      	ldrb	r3, [r3, #1]
 800415a:	4618      	mov	r0, r3
 800415c:	f000 fa38 	bl	80045d0 <RTC_ByteToBcd2>
 8004160:	4603      	mov	r3, r0
 8004162:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004164:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	789b      	ldrb	r3, [r3, #2]
 800416a:	4618      	mov	r0, r3
 800416c:	f000 fa30 	bl	80045d0 <RTC_ByteToBcd2>
 8004170:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004172:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	78db      	ldrb	r3, [r3, #3]
 800417a:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800417c:	4313      	orrs	r3, r2
 800417e:	617b      	str	r3, [r7, #20]
 8004180:	e018      	b.n	80041b4 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800418c:	2b00      	cmp	r3, #0
 800418e:	d102      	bne.n	8004196 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	2200      	movs	r2, #0
 8004194:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	781b      	ldrb	r3, [r3, #0]
 800419a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	785b      	ldrb	r3, [r3, #1]
 80041a0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80041a2:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80041a4:	68ba      	ldr	r2, [r7, #8]
 80041a6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80041a8:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	78db      	ldrb	r3, [r3, #3]
 80041ae:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80041b0:	4313      	orrs	r3, r2
 80041b2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	22ca      	movs	r2, #202	; 0xca
 80041ba:	625a      	str	r2, [r3, #36]	; 0x24
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	2253      	movs	r2, #83	; 0x53
 80041c2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80041c4:	68f8      	ldr	r0, [r7, #12]
 80041c6:	f000 f9d7 	bl	8004578 <RTC_EnterInitMode>
 80041ca:	4603      	mov	r3, r0
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d00b      	beq.n	80041e8 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	22ff      	movs	r2, #255	; 0xff
 80041d6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2204      	movs	r2, #4
 80041dc:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2200      	movs	r2, #0
 80041e2:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	e047      	b.n	8004278 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80041f2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80041f6:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	689a      	ldr	r2, [r3, #8]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004206:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	6899      	ldr	r1, [r3, #8]
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	68da      	ldr	r2, [r3, #12]
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	691b      	ldr	r3, [r3, #16]
 8004216:	431a      	orrs	r2, r3
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	430a      	orrs	r2, r1
 800421e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	68da      	ldr	r2, [r3, #12]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800422e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	f003 0320 	and.w	r3, r3, #32
 800423a:	2b00      	cmp	r3, #0
 800423c:	d111      	bne.n	8004262 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800423e:	68f8      	ldr	r0, [r7, #12]
 8004240:	f000 f972 	bl	8004528 <HAL_RTC_WaitForSynchro>
 8004244:	4603      	mov	r3, r0
 8004246:	2b00      	cmp	r3, #0
 8004248:	d00b      	beq.n	8004262 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	22ff      	movs	r2, #255	; 0xff
 8004250:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2204      	movs	r2, #4
 8004256:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2200      	movs	r2, #0
 800425c:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e00a      	b.n	8004278 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	22ff      	movs	r2, #255	; 0xff
 8004268:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2201      	movs	r2, #1
 800426e:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2200      	movs	r2, #0
 8004274:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8004276:	2300      	movs	r3, #0
  }
}
 8004278:	4618      	mov	r0, r3
 800427a:	371c      	adds	r7, #28
 800427c:	46bd      	mov	sp, r7
 800427e:	bd90      	pop	{r4, r7, pc}

08004280 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b086      	sub	sp, #24
 8004284:	af00      	add	r7, sp, #0
 8004286:	60f8      	str	r0, [r7, #12]
 8004288:	60b9      	str	r1, [r7, #8]
 800428a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800428c:	2300      	movs	r3, #0
 800428e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	691b      	ldr	r3, [r3, #16]
 80042a0:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80042b2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80042b6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	0c1b      	lsrs	r3, r3, #16
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042c2:	b2da      	uxtb	r2, r3
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	0a1b      	lsrs	r3, r3, #8
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042d2:	b2da      	uxtb	r2, r3
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042e0:	b2da      	uxtb	r2, r3
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	0c1b      	lsrs	r3, r3, #16
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042f0:	b2da      	uxtb	r2, r3
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d11a      	bne.n	8004332 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	781b      	ldrb	r3, [r3, #0]
 8004300:	4618      	mov	r0, r3
 8004302:	f000 f983 	bl	800460c <RTC_Bcd2ToByte>
 8004306:	4603      	mov	r3, r0
 8004308:	461a      	mov	r2, r3
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	785b      	ldrb	r3, [r3, #1]
 8004312:	4618      	mov	r0, r3
 8004314:	f000 f97a 	bl	800460c <RTC_Bcd2ToByte>
 8004318:	4603      	mov	r3, r0
 800431a:	461a      	mov	r2, r3
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	789b      	ldrb	r3, [r3, #2]
 8004324:	4618      	mov	r0, r3
 8004326:	f000 f971 	bl	800460c <RTC_Bcd2ToByte>
 800432a:	4603      	mov	r3, r0
 800432c:	461a      	mov	r2, r3
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004332:	2300      	movs	r3, #0
}
 8004334:	4618      	mov	r0, r3
 8004336:	3718      	adds	r7, #24
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}

0800433c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800433c:	b590      	push	{r4, r7, lr}
 800433e:	b087      	sub	sp, #28
 8004340:	af00      	add	r7, sp, #0
 8004342:	60f8      	str	r0, [r7, #12]
 8004344:	60b9      	str	r1, [r7, #8]
 8004346:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004348:	2300      	movs	r3, #0
 800434a:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	7f1b      	ldrb	r3, [r3, #28]
 8004350:	2b01      	cmp	r3, #1
 8004352:	d101      	bne.n	8004358 <HAL_RTC_SetDate+0x1c>
 8004354:	2302      	movs	r3, #2
 8004356:	e094      	b.n	8004482 <HAL_RTC_SetDate+0x146>
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2201      	movs	r2, #1
 800435c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2202      	movs	r2, #2
 8004362:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d10e      	bne.n	8004388 <HAL_RTC_SetDate+0x4c>
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	785b      	ldrb	r3, [r3, #1]
 800436e:	f003 0310 	and.w	r3, r3, #16
 8004372:	2b00      	cmp	r3, #0
 8004374:	d008      	beq.n	8004388 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	785b      	ldrb	r3, [r3, #1]
 800437a:	f023 0310 	bic.w	r3, r3, #16
 800437e:	b2db      	uxtb	r3, r3
 8004380:	330a      	adds	r3, #10
 8004382:	b2da      	uxtb	r2, r3
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d11c      	bne.n	80043c8 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	78db      	ldrb	r3, [r3, #3]
 8004392:	4618      	mov	r0, r3
 8004394:	f000 f91c 	bl	80045d0 <RTC_ByteToBcd2>
 8004398:	4603      	mov	r3, r0
 800439a:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	785b      	ldrb	r3, [r3, #1]
 80043a0:	4618      	mov	r0, r3
 80043a2:	f000 f915 	bl	80045d0 <RTC_ByteToBcd2>
 80043a6:	4603      	mov	r3, r0
 80043a8:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80043aa:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	789b      	ldrb	r3, [r3, #2]
 80043b0:	4618      	mov	r0, r3
 80043b2:	f000 f90d 	bl	80045d0 <RTC_ByteToBcd2>
 80043b6:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80043b8:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	781b      	ldrb	r3, [r3, #0]
 80043c0:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80043c2:	4313      	orrs	r3, r2
 80043c4:	617b      	str	r3, [r7, #20]
 80043c6:	e00e      	b.n	80043e6 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	78db      	ldrb	r3, [r3, #3]
 80043cc:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	785b      	ldrb	r3, [r3, #1]
 80043d2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80043d4:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80043d6:	68ba      	ldr	r2, [r7, #8]
 80043d8:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80043da:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	781b      	ldrb	r3, [r3, #0]
 80043e0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80043e2:	4313      	orrs	r3, r2
 80043e4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	22ca      	movs	r2, #202	; 0xca
 80043ec:	625a      	str	r2, [r3, #36]	; 0x24
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	2253      	movs	r2, #83	; 0x53
 80043f4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80043f6:	68f8      	ldr	r0, [r7, #12]
 80043f8:	f000 f8be 	bl	8004578 <RTC_EnterInitMode>
 80043fc:	4603      	mov	r3, r0
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d00b      	beq.n	800441a <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	22ff      	movs	r2, #255	; 0xff
 8004408:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2204      	movs	r2, #4
 800440e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2200      	movs	r2, #0
 8004414:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e033      	b.n	8004482 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004424:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004428:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	68da      	ldr	r2, [r3, #12]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004438:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	f003 0320 	and.w	r3, r3, #32
 8004444:	2b00      	cmp	r3, #0
 8004446:	d111      	bne.n	800446c <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004448:	68f8      	ldr	r0, [r7, #12]
 800444a:	f000 f86d 	bl	8004528 <HAL_RTC_WaitForSynchro>
 800444e:	4603      	mov	r3, r0
 8004450:	2b00      	cmp	r3, #0
 8004452:	d00b      	beq.n	800446c <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	22ff      	movs	r2, #255	; 0xff
 800445a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2204      	movs	r2, #4
 8004460:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2200      	movs	r2, #0
 8004466:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	e00a      	b.n	8004482 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	22ff      	movs	r2, #255	; 0xff
 8004472:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2201      	movs	r2, #1
 8004478:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2200      	movs	r2, #0
 800447e:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8004480:	2300      	movs	r3, #0
  }
}
 8004482:	4618      	mov	r0, r3
 8004484:	371c      	adds	r7, #28
 8004486:	46bd      	mov	sp, r7
 8004488:	bd90      	pop	{r4, r7, pc}

0800448a <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800448a:	b580      	push	{r7, lr}
 800448c:	b086      	sub	sp, #24
 800448e:	af00      	add	r7, sp, #0
 8004490:	60f8      	str	r0, [r7, #12]
 8004492:	60b9      	str	r1, [r7, #8]
 8004494:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004496:	2300      	movs	r3, #0
 8004498:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80044a4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80044a8:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	0c1b      	lsrs	r3, r3, #16
 80044ae:	b2da      	uxtb	r2, r3
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	0a1b      	lsrs	r3, r3, #8
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	f003 031f 	and.w	r3, r3, #31
 80044be:	b2da      	uxtb	r2, r3
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	b2db      	uxtb	r3, r3
 80044c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044cc:	b2da      	uxtb	r2, r3
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	0b5b      	lsrs	r3, r3, #13
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	f003 0307 	and.w	r3, r3, #7
 80044dc:	b2da      	uxtb	r2, r3
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d11a      	bne.n	800451e <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	78db      	ldrb	r3, [r3, #3]
 80044ec:	4618      	mov	r0, r3
 80044ee:	f000 f88d 	bl	800460c <RTC_Bcd2ToByte>
 80044f2:	4603      	mov	r3, r0
 80044f4:	461a      	mov	r2, r3
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	785b      	ldrb	r3, [r3, #1]
 80044fe:	4618      	mov	r0, r3
 8004500:	f000 f884 	bl	800460c <RTC_Bcd2ToByte>
 8004504:	4603      	mov	r3, r0
 8004506:	461a      	mov	r2, r3
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	789b      	ldrb	r3, [r3, #2]
 8004510:	4618      	mov	r0, r3
 8004512:	f000 f87b 	bl	800460c <RTC_Bcd2ToByte>
 8004516:	4603      	mov	r3, r0
 8004518:	461a      	mov	r2, r3
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800451e:	2300      	movs	r3, #0
}
 8004520:	4618      	mov	r0, r3
 8004522:	3718      	adds	r7, #24
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}

08004528 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004530:	2300      	movs	r3, #0
 8004532:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	68da      	ldr	r2, [r3, #12]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004542:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004544:	f7fc fd66 	bl	8001014 <HAL_GetTick>
 8004548:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800454a:	e009      	b.n	8004560 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800454c:	f7fc fd62 	bl	8001014 <HAL_GetTick>
 8004550:	4602      	mov	r2, r0
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800455a:	d901      	bls.n	8004560 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800455c:	2303      	movs	r3, #3
 800455e:	e007      	b.n	8004570 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	68db      	ldr	r3, [r3, #12]
 8004566:	f003 0320 	and.w	r3, r3, #32
 800456a:	2b00      	cmp	r3, #0
 800456c:	d0ee      	beq.n	800454c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800456e:	2300      	movs	r3, #0
}
 8004570:	4618      	mov	r0, r3
 8004572:	3710      	adds	r7, #16
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}

08004578 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b084      	sub	sp, #16
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004580:	2300      	movs	r3, #0
 8004582:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	68db      	ldr	r3, [r3, #12]
 800458a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800458e:	2b00      	cmp	r3, #0
 8004590:	d119      	bne.n	80045c6 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f04f 32ff 	mov.w	r2, #4294967295
 800459a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800459c:	f7fc fd3a 	bl	8001014 <HAL_GetTick>
 80045a0:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80045a2:	e009      	b.n	80045b8 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80045a4:	f7fc fd36 	bl	8001014 <HAL_GetTick>
 80045a8:	4602      	mov	r2, r0
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80045b2:	d901      	bls.n	80045b8 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80045b4:	2303      	movs	r3, #3
 80045b6:	e007      	b.n	80045c8 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d0ee      	beq.n	80045a4 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80045c6:	2300      	movs	r3, #0
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3710      	adds	r7, #16
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}

080045d0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b085      	sub	sp, #20
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	4603      	mov	r3, r0
 80045d8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80045da:	2300      	movs	r3, #0
 80045dc:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 80045de:	e005      	b.n	80045ec <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	3301      	adds	r3, #1
 80045e4:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80045e6:	79fb      	ldrb	r3, [r7, #7]
 80045e8:	3b0a      	subs	r3, #10
 80045ea:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 80045ec:	79fb      	ldrb	r3, [r7, #7]
 80045ee:	2b09      	cmp	r3, #9
 80045f0:	d8f6      	bhi.n	80045e0 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	011b      	lsls	r3, r3, #4
 80045f8:	b2da      	uxtb	r2, r3
 80045fa:	79fb      	ldrb	r3, [r7, #7]
 80045fc:	4313      	orrs	r3, r2
 80045fe:	b2db      	uxtb	r3, r3
}
 8004600:	4618      	mov	r0, r3
 8004602:	3714      	adds	r7, #20
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr

0800460c <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800460c:	b480      	push	{r7}
 800460e:	b085      	sub	sp, #20
 8004610:	af00      	add	r7, sp, #0
 8004612:	4603      	mov	r3, r0
 8004614:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8004616:	2300      	movs	r3, #0
 8004618:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800461a:	79fb      	ldrb	r3, [r7, #7]
 800461c:	091b      	lsrs	r3, r3, #4
 800461e:	b2db      	uxtb	r3, r3
 8004620:	461a      	mov	r2, r3
 8004622:	4613      	mov	r3, r2
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	4413      	add	r3, r2
 8004628:	005b      	lsls	r3, r3, #1
 800462a:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800462c:	79fb      	ldrb	r3, [r7, #7]
 800462e:	f003 030f 	and.w	r3, r3, #15
 8004632:	b2da      	uxtb	r2, r3
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	b2db      	uxtb	r3, r3
 8004638:	4413      	add	r3, r2
 800463a:	b2db      	uxtb	r3, r3
}
 800463c:	4618      	mov	r0, r3
 800463e:	3714      	adds	r7, #20
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr

08004648 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b082      	sub	sp, #8
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d101      	bne.n	800465a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	e01d      	b.n	8004696 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004660:	b2db      	uxtb	r3, r3
 8004662:	2b00      	cmp	r3, #0
 8004664:	d106      	bne.n	8004674 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2200      	movs	r2, #0
 800466a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f000 f815 	bl	800469e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2202      	movs	r2, #2
 8004678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	3304      	adds	r3, #4
 8004684:	4619      	mov	r1, r3
 8004686:	4610      	mov	r0, r2
 8004688:	f000 f968 	bl	800495c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2201      	movs	r2, #1
 8004690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004694:	2300      	movs	r3, #0
}
 8004696:	4618      	mov	r0, r3
 8004698:	3708      	adds	r7, #8
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}

0800469e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800469e:	b480      	push	{r7}
 80046a0:	b083      	sub	sp, #12
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80046a6:	bf00      	nop
 80046a8:	370c      	adds	r7, #12
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr

080046b2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80046b2:	b480      	push	{r7}
 80046b4:	b085      	sub	sp, #20
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	68da      	ldr	r2, [r3, #12]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f042 0201 	orr.w	r2, r2, #1
 80046c8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	f003 0307 	and.w	r3, r3, #7
 80046d4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2b06      	cmp	r3, #6
 80046da:	d007      	beq.n	80046ec <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f042 0201 	orr.w	r2, r2, #1
 80046ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80046ec:	2300      	movs	r3, #0
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3714      	adds	r7, #20
 80046f2:	46bd      	mov	sp, r7
 80046f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f8:	4770      	bx	lr

080046fa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80046fa:	b580      	push	{r7, lr}
 80046fc:	b082      	sub	sp, #8
 80046fe:	af00      	add	r7, sp, #0
 8004700:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	691b      	ldr	r3, [r3, #16]
 8004708:	f003 0302 	and.w	r3, r3, #2
 800470c:	2b02      	cmp	r3, #2
 800470e:	d122      	bne.n	8004756 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	68db      	ldr	r3, [r3, #12]
 8004716:	f003 0302 	and.w	r3, r3, #2
 800471a:	2b02      	cmp	r3, #2
 800471c:	d11b      	bne.n	8004756 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f06f 0202 	mvn.w	r2, #2
 8004726:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2201      	movs	r2, #1
 800472c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	699b      	ldr	r3, [r3, #24]
 8004734:	f003 0303 	and.w	r3, r3, #3
 8004738:	2b00      	cmp	r3, #0
 800473a:	d003      	beq.n	8004744 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	f000 f8ee 	bl	800491e <HAL_TIM_IC_CaptureCallback>
 8004742:	e005      	b.n	8004750 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f000 f8e0 	bl	800490a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f000 f8f1 	bl	8004932 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	691b      	ldr	r3, [r3, #16]
 800475c:	f003 0304 	and.w	r3, r3, #4
 8004760:	2b04      	cmp	r3, #4
 8004762:	d122      	bne.n	80047aa <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	68db      	ldr	r3, [r3, #12]
 800476a:	f003 0304 	and.w	r3, r3, #4
 800476e:	2b04      	cmp	r3, #4
 8004770:	d11b      	bne.n	80047aa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f06f 0204 	mvn.w	r2, #4
 800477a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2202      	movs	r2, #2
 8004780:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	699b      	ldr	r3, [r3, #24]
 8004788:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800478c:	2b00      	cmp	r3, #0
 800478e:	d003      	beq.n	8004798 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f000 f8c4 	bl	800491e <HAL_TIM_IC_CaptureCallback>
 8004796:	e005      	b.n	80047a4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f000 f8b6 	bl	800490a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f000 f8c7 	bl	8004932 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2200      	movs	r2, #0
 80047a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	691b      	ldr	r3, [r3, #16]
 80047b0:	f003 0308 	and.w	r3, r3, #8
 80047b4:	2b08      	cmp	r3, #8
 80047b6:	d122      	bne.n	80047fe <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	f003 0308 	and.w	r3, r3, #8
 80047c2:	2b08      	cmp	r3, #8
 80047c4:	d11b      	bne.n	80047fe <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f06f 0208 	mvn.w	r2, #8
 80047ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2204      	movs	r2, #4
 80047d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	69db      	ldr	r3, [r3, #28]
 80047dc:	f003 0303 	and.w	r3, r3, #3
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d003      	beq.n	80047ec <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f000 f89a 	bl	800491e <HAL_TIM_IC_CaptureCallback>
 80047ea:	e005      	b.n	80047f8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f000 f88c 	bl	800490a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f000 f89d 	bl	8004932 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2200      	movs	r2, #0
 80047fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	691b      	ldr	r3, [r3, #16]
 8004804:	f003 0310 	and.w	r3, r3, #16
 8004808:	2b10      	cmp	r3, #16
 800480a:	d122      	bne.n	8004852 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	68db      	ldr	r3, [r3, #12]
 8004812:	f003 0310 	and.w	r3, r3, #16
 8004816:	2b10      	cmp	r3, #16
 8004818:	d11b      	bne.n	8004852 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f06f 0210 	mvn.w	r2, #16
 8004822:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2208      	movs	r2, #8
 8004828:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	69db      	ldr	r3, [r3, #28]
 8004830:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004834:	2b00      	cmp	r3, #0
 8004836:	d003      	beq.n	8004840 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	f000 f870 	bl	800491e <HAL_TIM_IC_CaptureCallback>
 800483e:	e005      	b.n	800484c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	f000 f862 	bl	800490a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f000 f873 	bl	8004932 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2200      	movs	r2, #0
 8004850:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	691b      	ldr	r3, [r3, #16]
 8004858:	f003 0301 	and.w	r3, r3, #1
 800485c:	2b01      	cmp	r3, #1
 800485e:	d10e      	bne.n	800487e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	68db      	ldr	r3, [r3, #12]
 8004866:	f003 0301 	and.w	r3, r3, #1
 800486a:	2b01      	cmp	r3, #1
 800486c:	d107      	bne.n	800487e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f06f 0201 	mvn.w	r2, #1
 8004876:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004878:	6878      	ldr	r0, [r7, #4]
 800487a:	f009 fa33 	bl	800dce4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	691b      	ldr	r3, [r3, #16]
 8004884:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004888:	2b80      	cmp	r3, #128	; 0x80
 800488a:	d10e      	bne.n	80048aa <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	68db      	ldr	r3, [r3, #12]
 8004892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004896:	2b80      	cmp	r3, #128	; 0x80
 8004898:	d107      	bne.n	80048aa <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80048a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	f000 f903 	bl	8004ab0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	691b      	ldr	r3, [r3, #16]
 80048b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048b4:	2b40      	cmp	r3, #64	; 0x40
 80048b6:	d10e      	bne.n	80048d6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	68db      	ldr	r3, [r3, #12]
 80048be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048c2:	2b40      	cmp	r3, #64	; 0x40
 80048c4:	d107      	bne.n	80048d6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80048ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f000 f838 	bl	8004946 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	691b      	ldr	r3, [r3, #16]
 80048dc:	f003 0320 	and.w	r3, r3, #32
 80048e0:	2b20      	cmp	r3, #32
 80048e2:	d10e      	bne.n	8004902 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	68db      	ldr	r3, [r3, #12]
 80048ea:	f003 0320 	and.w	r3, r3, #32
 80048ee:	2b20      	cmp	r3, #32
 80048f0:	d107      	bne.n	8004902 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f06f 0220 	mvn.w	r2, #32
 80048fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f000 f8cd 	bl	8004a9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004902:	bf00      	nop
 8004904:	3708      	adds	r7, #8
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}

0800490a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800490a:	b480      	push	{r7}
 800490c:	b083      	sub	sp, #12
 800490e:	af00      	add	r7, sp, #0
 8004910:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004912:	bf00      	nop
 8004914:	370c      	adds	r7, #12
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr

0800491e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800491e:	b480      	push	{r7}
 8004920:	b083      	sub	sp, #12
 8004922:	af00      	add	r7, sp, #0
 8004924:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004926:	bf00      	nop
 8004928:	370c      	adds	r7, #12
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr

08004932 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004932:	b480      	push	{r7}
 8004934:	b083      	sub	sp, #12
 8004936:	af00      	add	r7, sp, #0
 8004938:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800493a:	bf00      	nop
 800493c:	370c      	adds	r7, #12
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr

08004946 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004946:	b480      	push	{r7}
 8004948:	b083      	sub	sp, #12
 800494a:	af00      	add	r7, sp, #0
 800494c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800494e:	bf00      	nop
 8004950:	370c      	adds	r7, #12
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr
	...

0800495c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800495c:	b480      	push	{r7}
 800495e:	b085      	sub	sp, #20
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
 8004964:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	4a40      	ldr	r2, [pc, #256]	; (8004a70 <TIM_Base_SetConfig+0x114>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d013      	beq.n	800499c <TIM_Base_SetConfig+0x40>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800497a:	d00f      	beq.n	800499c <TIM_Base_SetConfig+0x40>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	4a3d      	ldr	r2, [pc, #244]	; (8004a74 <TIM_Base_SetConfig+0x118>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d00b      	beq.n	800499c <TIM_Base_SetConfig+0x40>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	4a3c      	ldr	r2, [pc, #240]	; (8004a78 <TIM_Base_SetConfig+0x11c>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d007      	beq.n	800499c <TIM_Base_SetConfig+0x40>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	4a3b      	ldr	r2, [pc, #236]	; (8004a7c <TIM_Base_SetConfig+0x120>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d003      	beq.n	800499c <TIM_Base_SetConfig+0x40>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	4a3a      	ldr	r2, [pc, #232]	; (8004a80 <TIM_Base_SetConfig+0x124>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d108      	bne.n	80049ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	68fa      	ldr	r2, [r7, #12]
 80049aa:	4313      	orrs	r3, r2
 80049ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	4a2f      	ldr	r2, [pc, #188]	; (8004a70 <TIM_Base_SetConfig+0x114>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d02b      	beq.n	8004a0e <TIM_Base_SetConfig+0xb2>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049bc:	d027      	beq.n	8004a0e <TIM_Base_SetConfig+0xb2>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	4a2c      	ldr	r2, [pc, #176]	; (8004a74 <TIM_Base_SetConfig+0x118>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d023      	beq.n	8004a0e <TIM_Base_SetConfig+0xb2>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	4a2b      	ldr	r2, [pc, #172]	; (8004a78 <TIM_Base_SetConfig+0x11c>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d01f      	beq.n	8004a0e <TIM_Base_SetConfig+0xb2>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	4a2a      	ldr	r2, [pc, #168]	; (8004a7c <TIM_Base_SetConfig+0x120>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d01b      	beq.n	8004a0e <TIM_Base_SetConfig+0xb2>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	4a29      	ldr	r2, [pc, #164]	; (8004a80 <TIM_Base_SetConfig+0x124>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d017      	beq.n	8004a0e <TIM_Base_SetConfig+0xb2>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4a28      	ldr	r2, [pc, #160]	; (8004a84 <TIM_Base_SetConfig+0x128>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d013      	beq.n	8004a0e <TIM_Base_SetConfig+0xb2>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	4a27      	ldr	r2, [pc, #156]	; (8004a88 <TIM_Base_SetConfig+0x12c>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d00f      	beq.n	8004a0e <TIM_Base_SetConfig+0xb2>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	4a26      	ldr	r2, [pc, #152]	; (8004a8c <TIM_Base_SetConfig+0x130>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d00b      	beq.n	8004a0e <TIM_Base_SetConfig+0xb2>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	4a25      	ldr	r2, [pc, #148]	; (8004a90 <TIM_Base_SetConfig+0x134>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d007      	beq.n	8004a0e <TIM_Base_SetConfig+0xb2>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4a24      	ldr	r2, [pc, #144]	; (8004a94 <TIM_Base_SetConfig+0x138>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d003      	beq.n	8004a0e <TIM_Base_SetConfig+0xb2>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4a23      	ldr	r2, [pc, #140]	; (8004a98 <TIM_Base_SetConfig+0x13c>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d108      	bne.n	8004a20 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	68fa      	ldr	r2, [r7, #12]
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	695b      	ldr	r3, [r3, #20]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	68fa      	ldr	r2, [r7, #12]
 8004a32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	689a      	ldr	r2, [r3, #8]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	4a0a      	ldr	r2, [pc, #40]	; (8004a70 <TIM_Base_SetConfig+0x114>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d003      	beq.n	8004a54 <TIM_Base_SetConfig+0xf8>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	4a0c      	ldr	r2, [pc, #48]	; (8004a80 <TIM_Base_SetConfig+0x124>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d103      	bne.n	8004a5c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	691a      	ldr	r2, [r3, #16]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	615a      	str	r2, [r3, #20]
}
 8004a62:	bf00      	nop
 8004a64:	3714      	adds	r7, #20
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr
 8004a6e:	bf00      	nop
 8004a70:	40010000 	.word	0x40010000
 8004a74:	40000400 	.word	0x40000400
 8004a78:	40000800 	.word	0x40000800
 8004a7c:	40000c00 	.word	0x40000c00
 8004a80:	40010400 	.word	0x40010400
 8004a84:	40014000 	.word	0x40014000
 8004a88:	40014400 	.word	0x40014400
 8004a8c:	40014800 	.word	0x40014800
 8004a90:	40001800 	.word	0x40001800
 8004a94:	40001c00 	.word	0x40001c00
 8004a98:	40002000 	.word	0x40002000

08004a9c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b083      	sub	sp, #12
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004aa4:	bf00      	nop
 8004aa6:	370c      	adds	r7, #12
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr

08004ab0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b083      	sub	sp, #12
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ab8:	bf00      	nop
 8004aba:	370c      	adds	r7, #12
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr

08004ac4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b082      	sub	sp, #8
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d101      	bne.n	8004ad6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e03f      	b.n	8004b56 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d106      	bne.n	8004af0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f009 fa0a 	bl	800df04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2224      	movs	r2, #36	; 0x24
 8004af4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	68da      	ldr	r2, [r3, #12]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b06:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f000 fc73 	bl	80053f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	691a      	ldr	r2, [r3, #16]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b1c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	695a      	ldr	r2, [r3, #20]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b2c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	68da      	ldr	r2, [r3, #12]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b3c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2200      	movs	r2, #0
 8004b42:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2220      	movs	r2, #32
 8004b48:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2220      	movs	r2, #32
 8004b50:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004b54:	2300      	movs	r3, #0
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3708      	adds	r7, #8
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}

08004b5e <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b5e:	b580      	push	{r7, lr}
 8004b60:	b088      	sub	sp, #32
 8004b62:	af02      	add	r7, sp, #8
 8004b64:	60f8      	str	r0, [r7, #12]
 8004b66:	60b9      	str	r1, [r7, #8]
 8004b68:	603b      	str	r3, [r7, #0]
 8004b6a:	4613      	mov	r3, r2
 8004b6c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004b78:	b2db      	uxtb	r3, r3
 8004b7a:	2b20      	cmp	r3, #32
 8004b7c:	f040 8083 	bne.w	8004c86 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d002      	beq.n	8004b8c <HAL_UART_Transmit+0x2e>
 8004b86:	88fb      	ldrh	r3, [r7, #6]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d101      	bne.n	8004b90 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	e07b      	b.n	8004c88 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d101      	bne.n	8004b9e <HAL_UART_Transmit+0x40>
 8004b9a:	2302      	movs	r3, #2
 8004b9c:	e074      	b.n	8004c88 <HAL_UART_Transmit+0x12a>
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2221      	movs	r2, #33	; 0x21
 8004bb0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004bb4:	f7fc fa2e 	bl	8001014 <HAL_GetTick>
 8004bb8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	88fa      	ldrh	r2, [r7, #6]
 8004bbe:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	88fa      	ldrh	r2, [r7, #6]
 8004bc4:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004bc6:	e042      	b.n	8004c4e <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004bcc:	b29b      	uxth	r3, r3
 8004bce:	3b01      	subs	r3, #1
 8004bd0:	b29a      	uxth	r2, r3
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bde:	d122      	bne.n	8004c26 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	9300      	str	r3, [sp, #0]
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	2200      	movs	r2, #0
 8004be8:	2180      	movs	r1, #128	; 0x80
 8004bea:	68f8      	ldr	r0, [r7, #12]
 8004bec:	f000 fa80 	bl	80050f0 <UART_WaitOnFlagUntilTimeout>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d001      	beq.n	8004bfa <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8004bf6:	2303      	movs	r3, #3
 8004bf8:	e046      	b.n	8004c88 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	881b      	ldrh	r3, [r3, #0]
 8004c02:	461a      	mov	r2, r3
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c0c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	691b      	ldr	r3, [r3, #16]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d103      	bne.n	8004c1e <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	3302      	adds	r3, #2
 8004c1a:	60bb      	str	r3, [r7, #8]
 8004c1c:	e017      	b.n	8004c4e <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	3301      	adds	r3, #1
 8004c22:	60bb      	str	r3, [r7, #8]
 8004c24:	e013      	b.n	8004c4e <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	9300      	str	r3, [sp, #0]
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	2180      	movs	r1, #128	; 0x80
 8004c30:	68f8      	ldr	r0, [r7, #12]
 8004c32:	f000 fa5d 	bl	80050f0 <UART_WaitOnFlagUntilTimeout>
 8004c36:	4603      	mov	r3, r0
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d001      	beq.n	8004c40 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8004c3c:	2303      	movs	r3, #3
 8004c3e:	e023      	b.n	8004c88 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	1c5a      	adds	r2, r3, #1
 8004c44:	60ba      	str	r2, [r7, #8]
 8004c46:	781a      	ldrb	r2, [r3, #0]
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c52:	b29b      	uxth	r3, r3
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d1b7      	bne.n	8004bc8 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	9300      	str	r3, [sp, #0]
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	2140      	movs	r1, #64	; 0x40
 8004c62:	68f8      	ldr	r0, [r7, #12]
 8004c64:	f000 fa44 	bl	80050f0 <UART_WaitOnFlagUntilTimeout>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d001      	beq.n	8004c72 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004c6e:	2303      	movs	r3, #3
 8004c70:	e00a      	b.n	8004c88 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2220      	movs	r2, #32
 8004c76:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8004c82:	2300      	movs	r3, #0
 8004c84:	e000      	b.n	8004c88 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004c86:	2302      	movs	r3, #2
  }
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3718      	adds	r7, #24
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}

08004c90 <HAL_UART_Receive_DMA>:
  * @param  Size Amount of data to be received
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b086      	sub	sp, #24
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	60f8      	str	r0, [r7, #12]
 8004c98:	60b9      	str	r1, [r7, #8]
 8004c9a:	4613      	mov	r3, r2
 8004c9c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	2b20      	cmp	r3, #32
 8004ca8:	d166      	bne.n	8004d78 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d002      	beq.n	8004cb6 <HAL_UART_Receive_DMA+0x26>
 8004cb0:	88fb      	ldrh	r3, [r7, #6]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d101      	bne.n	8004cba <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e05f      	b.n	8004d7a <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d101      	bne.n	8004cc8 <HAL_UART_Receive_DMA+0x38>
 8004cc4:	2302      	movs	r3, #2
 8004cc6:	e058      	b.n	8004d7a <HAL_UART_Receive_DMA+0xea>
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8004cd0:	68ba      	ldr	r2, [r7, #8]
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	88fa      	ldrh	r2, [r7, #6]
 8004cda:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2222      	movs	r2, #34	; 0x22
 8004ce6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cee:	4a25      	ldr	r2, [pc, #148]	; (8004d84 <HAL_UART_Receive_DMA+0xf4>)
 8004cf0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cf6:	4a24      	ldr	r2, [pc, #144]	; (8004d88 <HAL_UART_Receive_DMA+0xf8>)
 8004cf8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cfe:	4a23      	ldr	r2, [pc, #140]	; (8004d8c <HAL_UART_Receive_DMA+0xfc>)
 8004d00:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d06:	2200      	movs	r2, #0
 8004d08:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8004d0a:	f107 0308 	add.w	r3, r7, #8
 8004d0e:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	3304      	adds	r3, #4
 8004d1a:	4619      	mov	r1, r3
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	88fb      	ldrh	r3, [r7, #6]
 8004d22:	f7fc fc0f 	bl	8001544 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8004d26:	2300      	movs	r3, #0
 8004d28:	613b      	str	r3, [r7, #16]
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	613b      	str	r3, [r7, #16]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	613b      	str	r3, [r7, #16]
 8004d3a:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	68da      	ldr	r2, [r3, #12]
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d52:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	695a      	ldr	r2, [r3, #20]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f042 0201 	orr.w	r2, r2, #1
 8004d62:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	695a      	ldr	r2, [r3, #20]
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d72:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8004d74:	2300      	movs	r3, #0
 8004d76:	e000      	b.n	8004d7a <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8004d78:	2302      	movs	r3, #2
  }
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3718      	adds	r7, #24
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}
 8004d82:	bf00      	nop
 8004d84:	08004fd9 	.word	0x08004fd9
 8004d88:	08005041 	.word	0x08005041
 8004d8c:	0800505d 	.word	0x0800505d

08004d90 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b088      	sub	sp, #32
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	68db      	ldr	r3, [r3, #12]
 8004da6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	695b      	ldr	r3, [r3, #20]
 8004dae:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004db0:	2300      	movs	r3, #0
 8004db2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004db4:	2300      	movs	r3, #0
 8004db6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004db8:	69fb      	ldr	r3, [r7, #28]
 8004dba:	f003 030f 	and.w	r3, r3, #15
 8004dbe:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d10d      	bne.n	8004de2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004dc6:	69fb      	ldr	r3, [r7, #28]
 8004dc8:	f003 0320 	and.w	r3, r3, #32
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d008      	beq.n	8004de2 <HAL_UART_IRQHandler+0x52>
 8004dd0:	69bb      	ldr	r3, [r7, #24]
 8004dd2:	f003 0320 	and.w	r3, r3, #32
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d003      	beq.n	8004de2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f000 fa88 	bl	80052f0 <UART_Receive_IT>
      return;
 8004de0:	e0cc      	b.n	8004f7c <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	f000 80ab 	beq.w	8004f40 <HAL_UART_IRQHandler+0x1b0>
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	f003 0301 	and.w	r3, r3, #1
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d105      	bne.n	8004e00 <HAL_UART_IRQHandler+0x70>
 8004df4:	69bb      	ldr	r3, [r7, #24]
 8004df6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	f000 80a0 	beq.w	8004f40 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004e00:	69fb      	ldr	r3, [r7, #28]
 8004e02:	f003 0301 	and.w	r3, r3, #1
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d00a      	beq.n	8004e20 <HAL_UART_IRQHandler+0x90>
 8004e0a:	69bb      	ldr	r3, [r7, #24]
 8004e0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d005      	beq.n	8004e20 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e18:	f043 0201 	orr.w	r2, r3, #1
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e20:	69fb      	ldr	r3, [r7, #28]
 8004e22:	f003 0304 	and.w	r3, r3, #4
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d00a      	beq.n	8004e40 <HAL_UART_IRQHandler+0xb0>
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	f003 0301 	and.w	r3, r3, #1
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d005      	beq.n	8004e40 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e38:	f043 0202 	orr.w	r2, r3, #2
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e40:	69fb      	ldr	r3, [r7, #28]
 8004e42:	f003 0302 	and.w	r3, r3, #2
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d00a      	beq.n	8004e60 <HAL_UART_IRQHandler+0xd0>
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	f003 0301 	and.w	r3, r3, #1
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d005      	beq.n	8004e60 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e58:	f043 0204 	orr.w	r2, r3, #4
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e60:	69fb      	ldr	r3, [r7, #28]
 8004e62:	f003 0308 	and.w	r3, r3, #8
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d00a      	beq.n	8004e80 <HAL_UART_IRQHandler+0xf0>
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	f003 0301 	and.w	r3, r3, #1
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d005      	beq.n	8004e80 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e78:	f043 0208 	orr.w	r2, r3, #8
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d078      	beq.n	8004f7a <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004e88:	69fb      	ldr	r3, [r7, #28]
 8004e8a:	f003 0320 	and.w	r3, r3, #32
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d007      	beq.n	8004ea2 <HAL_UART_IRQHandler+0x112>
 8004e92:	69bb      	ldr	r3, [r7, #24]
 8004e94:	f003 0320 	and.w	r3, r3, #32
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d002      	beq.n	8004ea2 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8004e9c:	6878      	ldr	r0, [r7, #4]
 8004e9e:	f000 fa27 	bl	80052f0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	695b      	ldr	r3, [r3, #20]
 8004ea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eac:	2b40      	cmp	r3, #64	; 0x40
 8004eae:	bf0c      	ite	eq
 8004eb0:	2301      	moveq	r3, #1
 8004eb2:	2300      	movne	r3, #0
 8004eb4:	b2db      	uxtb	r3, r3
 8004eb6:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ebc:	f003 0308 	and.w	r3, r3, #8
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d102      	bne.n	8004eca <HAL_UART_IRQHandler+0x13a>
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d031      	beq.n	8004f2e <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f000 f970 	bl	80051b0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	695b      	ldr	r3, [r3, #20]
 8004ed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eda:	2b40      	cmp	r3, #64	; 0x40
 8004edc:	d123      	bne.n	8004f26 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	695a      	ldr	r2, [r3, #20]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004eec:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d013      	beq.n	8004f1e <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004efa:	4a22      	ldr	r2, [pc, #136]	; (8004f84 <HAL_UART_IRQHandler+0x1f4>)
 8004efc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f02:	4618      	mov	r0, r3
 8004f04:	f7fc fb7e 	bl	8001604 <HAL_DMA_Abort_IT>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d016      	beq.n	8004f3c <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f14:	687a      	ldr	r2, [r7, #4]
 8004f16:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004f18:	4610      	mov	r0, r2
 8004f1a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f1c:	e00e      	b.n	8004f3c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f000 f850 	bl	8004fc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f24:	e00a      	b.n	8004f3c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f000 f84c 	bl	8004fc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f2c:	e006      	b.n	8004f3c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f000 f848 	bl	8004fc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2200      	movs	r2, #0
 8004f38:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004f3a:	e01e      	b.n	8004f7a <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f3c:	bf00      	nop
    return;
 8004f3e:	e01c      	b.n	8004f7a <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004f40:	69fb      	ldr	r3, [r7, #28]
 8004f42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d008      	beq.n	8004f5c <HAL_UART_IRQHandler+0x1cc>
 8004f4a:	69bb      	ldr	r3, [r7, #24]
 8004f4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d003      	beq.n	8004f5c <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	f000 f95d 	bl	8005214 <UART_Transmit_IT>
    return;
 8004f5a:	e00f      	b.n	8004f7c <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004f5c:	69fb      	ldr	r3, [r7, #28]
 8004f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d00a      	beq.n	8004f7c <HAL_UART_IRQHandler+0x1ec>
 8004f66:	69bb      	ldr	r3, [r7, #24]
 8004f68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d005      	beq.n	8004f7c <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	f000 f9a5 	bl	80052c0 <UART_EndTransmit_IT>
    return;
 8004f76:	bf00      	nop
 8004f78:	e000      	b.n	8004f7c <HAL_UART_IRQHandler+0x1ec>
    return;
 8004f7a:	bf00      	nop
  }
}
 8004f7c:	3720      	adds	r7, #32
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}
 8004f82:	bf00      	nop
 8004f84:	080051ed 	.word	0x080051ed

08004f88 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b083      	sub	sp, #12
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004f90:	bf00      	nop
 8004f92:	370c      	adds	r7, #12
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr

08004f9c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b083      	sub	sp, #12
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004fa4:	bf00      	nop
 8004fa6:	370c      	adds	r7, #12
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fae:	4770      	bx	lr

08004fb0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b083      	sub	sp, #12
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004fb8:	bf00      	nop
 8004fba:	370c      	adds	r7, #12
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr

08004fc4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b083      	sub	sp, #12
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004fcc:	bf00      	nop
 8004fce:	370c      	adds	r7, #12
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd6:	4770      	bx	lr

08004fd8 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b084      	sub	sp, #16
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fe4:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d11e      	bne.n	8005032 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	68da      	ldr	r2, [r3, #12]
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005008:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	695a      	ldr	r2, [r3, #20]
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f022 0201 	bic.w	r2, r2, #1
 8005018:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	695a      	ldr	r2, [r3, #20]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005028:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2220      	movs	r2, #32
 800502e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8005032:	68f8      	ldr	r0, [r7, #12]
 8005034:	f7ff ffb2 	bl	8004f9c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005038:	bf00      	nop
 800503a:	3710      	adds	r7, #16
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}

08005040 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b084      	sub	sp, #16
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800504c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800504e:	68f8      	ldr	r0, [r7, #12]
 8005050:	f7ff ffae 	bl	8004fb0 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005054:	bf00      	nop
 8005056:	3710      	adds	r7, #16
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}

0800505c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b084      	sub	sp, #16
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005064:	2300      	movs	r3, #0
 8005066:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800506c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	695b      	ldr	r3, [r3, #20]
 8005074:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005078:	2b80      	cmp	r3, #128	; 0x80
 800507a:	bf0c      	ite	eq
 800507c:	2301      	moveq	r3, #1
 800507e:	2300      	movne	r3, #0
 8005080:	b2db      	uxtb	r3, r3
 8005082:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800508a:	b2db      	uxtb	r3, r3
 800508c:	2b21      	cmp	r3, #33	; 0x21
 800508e:	d108      	bne.n	80050a2 <UART_DMAError+0x46>
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d005      	beq.n	80050a2 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	2200      	movs	r2, #0
 800509a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800509c:	68b8      	ldr	r0, [r7, #8]
 800509e:	f000 f871 	bl	8005184 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	695b      	ldr	r3, [r3, #20]
 80050a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050ac:	2b40      	cmp	r3, #64	; 0x40
 80050ae:	bf0c      	ite	eq
 80050b0:	2301      	moveq	r3, #1
 80050b2:	2300      	movne	r3, #0
 80050b4:	b2db      	uxtb	r3, r3
 80050b6:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80050be:	b2db      	uxtb	r3, r3
 80050c0:	2b22      	cmp	r3, #34	; 0x22
 80050c2:	d108      	bne.n	80050d6 <UART_DMAError+0x7a>
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d005      	beq.n	80050d6 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	2200      	movs	r2, #0
 80050ce:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80050d0:	68b8      	ldr	r0, [r7, #8]
 80050d2:	f000 f86d 	bl	80051b0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050da:	f043 0210 	orr.w	r2, r3, #16
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80050e2:	68b8      	ldr	r0, [r7, #8]
 80050e4:	f7ff ff6e 	bl	8004fc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80050e8:	bf00      	nop
 80050ea:	3710      	adds	r7, #16
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}

080050f0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b084      	sub	sp, #16
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	60f8      	str	r0, [r7, #12]
 80050f8:	60b9      	str	r1, [r7, #8]
 80050fa:	603b      	str	r3, [r7, #0]
 80050fc:	4613      	mov	r3, r2
 80050fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005100:	e02c      	b.n	800515c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005102:	69bb      	ldr	r3, [r7, #24]
 8005104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005108:	d028      	beq.n	800515c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800510a:	69bb      	ldr	r3, [r7, #24]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d007      	beq.n	8005120 <UART_WaitOnFlagUntilTimeout+0x30>
 8005110:	f7fb ff80 	bl	8001014 <HAL_GetTick>
 8005114:	4602      	mov	r2, r0
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	1ad3      	subs	r3, r2, r3
 800511a:	69ba      	ldr	r2, [r7, #24]
 800511c:	429a      	cmp	r2, r3
 800511e:	d21d      	bcs.n	800515c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	68da      	ldr	r2, [r3, #12]
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800512e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	695a      	ldr	r2, [r3, #20]
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f022 0201 	bic.w	r2, r2, #1
 800513e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2220      	movs	r2, #32
 8005144:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2220      	movs	r2, #32
 800514c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2200      	movs	r2, #0
 8005154:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005158:	2303      	movs	r3, #3
 800515a:	e00f      	b.n	800517c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	4013      	ands	r3, r2
 8005166:	68ba      	ldr	r2, [r7, #8]
 8005168:	429a      	cmp	r2, r3
 800516a:	bf0c      	ite	eq
 800516c:	2301      	moveq	r3, #1
 800516e:	2300      	movne	r3, #0
 8005170:	b2db      	uxtb	r3, r3
 8005172:	461a      	mov	r2, r3
 8005174:	79fb      	ldrb	r3, [r7, #7]
 8005176:	429a      	cmp	r2, r3
 8005178:	d0c3      	beq.n	8005102 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800517a:	2300      	movs	r3, #0
}
 800517c:	4618      	mov	r0, r3
 800517e:	3710      	adds	r7, #16
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}

08005184 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005184:	b480      	push	{r7}
 8005186:	b083      	sub	sp, #12
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	68da      	ldr	r2, [r3, #12]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800519a:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2220      	movs	r2, #32
 80051a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80051a4:	bf00      	nop
 80051a6:	370c      	adds	r7, #12
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr

080051b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b083      	sub	sp, #12
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	68da      	ldr	r2, [r3, #12]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80051c6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	695a      	ldr	r2, [r3, #20]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f022 0201 	bic.w	r2, r2, #1
 80051d6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2220      	movs	r2, #32
 80051dc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80051e0:	bf00      	nop
 80051e2:	370c      	adds	r7, #12
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr

080051ec <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b084      	sub	sp, #16
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051f8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2200      	movs	r2, #0
 80051fe:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2200      	movs	r2, #0
 8005204:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005206:	68f8      	ldr	r0, [r7, #12]
 8005208:	f7ff fedc 	bl	8004fc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800520c:	bf00      	nop
 800520e:	3710      	adds	r7, #16
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}

08005214 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005214:	b480      	push	{r7}
 8005216:	b085      	sub	sp, #20
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005222:	b2db      	uxtb	r3, r3
 8005224:	2b21      	cmp	r3, #33	; 0x21
 8005226:	d144      	bne.n	80052b2 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005230:	d11a      	bne.n	8005268 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6a1b      	ldr	r3, [r3, #32]
 8005236:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	881b      	ldrh	r3, [r3, #0]
 800523c:	461a      	mov	r2, r3
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005246:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	691b      	ldr	r3, [r3, #16]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d105      	bne.n	800525c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6a1b      	ldr	r3, [r3, #32]
 8005254:	1c9a      	adds	r2, r3, #2
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	621a      	str	r2, [r3, #32]
 800525a:	e00e      	b.n	800527a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6a1b      	ldr	r3, [r3, #32]
 8005260:	1c5a      	adds	r2, r3, #1
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	621a      	str	r2, [r3, #32]
 8005266:	e008      	b.n	800527a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6a1b      	ldr	r3, [r3, #32]
 800526c:	1c59      	adds	r1, r3, #1
 800526e:	687a      	ldr	r2, [r7, #4]
 8005270:	6211      	str	r1, [r2, #32]
 8005272:	781a      	ldrb	r2, [r3, #0]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800527e:	b29b      	uxth	r3, r3
 8005280:	3b01      	subs	r3, #1
 8005282:	b29b      	uxth	r3, r3
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	4619      	mov	r1, r3
 8005288:	84d1      	strh	r1, [r2, #38]	; 0x26
 800528a:	2b00      	cmp	r3, #0
 800528c:	d10f      	bne.n	80052ae <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	68da      	ldr	r2, [r3, #12]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800529c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	68da      	ldr	r2, [r3, #12]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80052ac:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80052ae:	2300      	movs	r3, #0
 80052b0:	e000      	b.n	80052b4 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80052b2:	2302      	movs	r3, #2
  }
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3714      	adds	r7, #20
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr

080052c0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b082      	sub	sp, #8
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	68da      	ldr	r2, [r3, #12]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052d6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2220      	movs	r2, #32
 80052dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f7ff fe51 	bl	8004f88 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80052e6:	2300      	movs	r3, #0
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3708      	adds	r7, #8
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}

080052f0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b084      	sub	sp, #16
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	2b22      	cmp	r3, #34	; 0x22
 8005302:	d171      	bne.n	80053e8 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	689b      	ldr	r3, [r3, #8]
 8005308:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800530c:	d123      	bne.n	8005356 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005312:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	691b      	ldr	r3, [r3, #16]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d10e      	bne.n	800533a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	b29b      	uxth	r3, r3
 8005324:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005328:	b29a      	uxth	r2, r3
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005332:	1c9a      	adds	r2, r3, #2
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	629a      	str	r2, [r3, #40]	; 0x28
 8005338:	e029      	b.n	800538e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	b29b      	uxth	r3, r3
 8005342:	b2db      	uxtb	r3, r3
 8005344:	b29a      	uxth	r2, r3
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800534e:	1c5a      	adds	r2, r3, #1
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	629a      	str	r2, [r3, #40]	; 0x28
 8005354:	e01b      	b.n	800538e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	691b      	ldr	r3, [r3, #16]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d10a      	bne.n	8005374 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	6858      	ldr	r0, [r3, #4]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005368:	1c59      	adds	r1, r3, #1
 800536a:	687a      	ldr	r2, [r7, #4]
 800536c:	6291      	str	r1, [r2, #40]	; 0x28
 800536e:	b2c2      	uxtb	r2, r0
 8005370:	701a      	strb	r2, [r3, #0]
 8005372:	e00c      	b.n	800538e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	b2da      	uxtb	r2, r3
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005380:	1c58      	adds	r0, r3, #1
 8005382:	6879      	ldr	r1, [r7, #4]
 8005384:	6288      	str	r0, [r1, #40]	; 0x28
 8005386:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800538a:	b2d2      	uxtb	r2, r2
 800538c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005392:	b29b      	uxth	r3, r3
 8005394:	3b01      	subs	r3, #1
 8005396:	b29b      	uxth	r3, r3
 8005398:	687a      	ldr	r2, [r7, #4]
 800539a:	4619      	mov	r1, r3
 800539c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d120      	bne.n	80053e4 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	68da      	ldr	r2, [r3, #12]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f022 0220 	bic.w	r2, r2, #32
 80053b0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	68da      	ldr	r2, [r3, #12]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80053c0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	695a      	ldr	r2, [r3, #20]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f022 0201 	bic.w	r2, r2, #1
 80053d0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2220      	movs	r2, #32
 80053d6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f7ff fdde 	bl	8004f9c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80053e0:	2300      	movs	r3, #0
 80053e2:	e002      	b.n	80053ea <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80053e4:	2300      	movs	r3, #0
 80053e6:	e000      	b.n	80053ea <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80053e8:	2302      	movs	r3, #2
  }
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	3710      	adds	r7, #16
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}
	...

080053f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053f4:	b5b0      	push	{r4, r5, r7, lr}
 80053f6:	b084      	sub	sp, #16
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	691b      	ldr	r3, [r3, #16]
 8005402:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	68da      	ldr	r2, [r3, #12]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	430a      	orrs	r2, r1
 8005410:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	689a      	ldr	r2, [r3, #8]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	691b      	ldr	r3, [r3, #16]
 800541a:	431a      	orrs	r2, r3
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	695b      	ldr	r3, [r3, #20]
 8005420:	431a      	orrs	r2, r3
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	69db      	ldr	r3, [r3, #28]
 8005426:	4313      	orrs	r3, r2
 8005428:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	68db      	ldr	r3, [r3, #12]
 8005430:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005434:	f023 030c 	bic.w	r3, r3, #12
 8005438:	687a      	ldr	r2, [r7, #4]
 800543a:	6812      	ldr	r2, [r2, #0]
 800543c:	68f9      	ldr	r1, [r7, #12]
 800543e:	430b      	orrs	r3, r1
 8005440:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	695b      	ldr	r3, [r3, #20]
 8005448:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	699a      	ldr	r2, [r3, #24]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	430a      	orrs	r2, r1
 8005456:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	69db      	ldr	r3, [r3, #28]
 800545c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005460:	f040 80e4 	bne.w	800562c <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4aab      	ldr	r2, [pc, #684]	; (8005718 <UART_SetConfig+0x324>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d004      	beq.n	8005478 <UART_SetConfig+0x84>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4aaa      	ldr	r2, [pc, #680]	; (800571c <UART_SetConfig+0x328>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d16c      	bne.n	8005552 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8005478:	f7fe fc8c 	bl	8003d94 <HAL_RCC_GetPCLK2Freq>
 800547c:	4602      	mov	r2, r0
 800547e:	4613      	mov	r3, r2
 8005480:	009b      	lsls	r3, r3, #2
 8005482:	4413      	add	r3, r2
 8005484:	009a      	lsls	r2, r3, #2
 8005486:	441a      	add	r2, r3
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	005b      	lsls	r3, r3, #1
 800548e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005492:	4aa3      	ldr	r2, [pc, #652]	; (8005720 <UART_SetConfig+0x32c>)
 8005494:	fba2 2303 	umull	r2, r3, r2, r3
 8005498:	095b      	lsrs	r3, r3, #5
 800549a:	011c      	lsls	r4, r3, #4
 800549c:	f7fe fc7a 	bl	8003d94 <HAL_RCC_GetPCLK2Freq>
 80054a0:	4602      	mov	r2, r0
 80054a2:	4613      	mov	r3, r2
 80054a4:	009b      	lsls	r3, r3, #2
 80054a6:	4413      	add	r3, r2
 80054a8:	009a      	lsls	r2, r3, #2
 80054aa:	441a      	add	r2, r3
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	005b      	lsls	r3, r3, #1
 80054b2:	fbb2 f5f3 	udiv	r5, r2, r3
 80054b6:	f7fe fc6d 	bl	8003d94 <HAL_RCC_GetPCLK2Freq>
 80054ba:	4602      	mov	r2, r0
 80054bc:	4613      	mov	r3, r2
 80054be:	009b      	lsls	r3, r3, #2
 80054c0:	4413      	add	r3, r2
 80054c2:	009a      	lsls	r2, r3, #2
 80054c4:	441a      	add	r2, r3
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	005b      	lsls	r3, r3, #1
 80054cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80054d0:	4a93      	ldr	r2, [pc, #588]	; (8005720 <UART_SetConfig+0x32c>)
 80054d2:	fba2 2303 	umull	r2, r3, r2, r3
 80054d6:	095b      	lsrs	r3, r3, #5
 80054d8:	2264      	movs	r2, #100	; 0x64
 80054da:	fb02 f303 	mul.w	r3, r2, r3
 80054de:	1aeb      	subs	r3, r5, r3
 80054e0:	00db      	lsls	r3, r3, #3
 80054e2:	3332      	adds	r3, #50	; 0x32
 80054e4:	4a8e      	ldr	r2, [pc, #568]	; (8005720 <UART_SetConfig+0x32c>)
 80054e6:	fba2 2303 	umull	r2, r3, r2, r3
 80054ea:	095b      	lsrs	r3, r3, #5
 80054ec:	005b      	lsls	r3, r3, #1
 80054ee:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80054f2:	441c      	add	r4, r3
 80054f4:	f7fe fc4e 	bl	8003d94 <HAL_RCC_GetPCLK2Freq>
 80054f8:	4602      	mov	r2, r0
 80054fa:	4613      	mov	r3, r2
 80054fc:	009b      	lsls	r3, r3, #2
 80054fe:	4413      	add	r3, r2
 8005500:	009a      	lsls	r2, r3, #2
 8005502:	441a      	add	r2, r3
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	005b      	lsls	r3, r3, #1
 800550a:	fbb2 f5f3 	udiv	r5, r2, r3
 800550e:	f7fe fc41 	bl	8003d94 <HAL_RCC_GetPCLK2Freq>
 8005512:	4602      	mov	r2, r0
 8005514:	4613      	mov	r3, r2
 8005516:	009b      	lsls	r3, r3, #2
 8005518:	4413      	add	r3, r2
 800551a:	009a      	lsls	r2, r3, #2
 800551c:	441a      	add	r2, r3
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	005b      	lsls	r3, r3, #1
 8005524:	fbb2 f3f3 	udiv	r3, r2, r3
 8005528:	4a7d      	ldr	r2, [pc, #500]	; (8005720 <UART_SetConfig+0x32c>)
 800552a:	fba2 2303 	umull	r2, r3, r2, r3
 800552e:	095b      	lsrs	r3, r3, #5
 8005530:	2264      	movs	r2, #100	; 0x64
 8005532:	fb02 f303 	mul.w	r3, r2, r3
 8005536:	1aeb      	subs	r3, r5, r3
 8005538:	00db      	lsls	r3, r3, #3
 800553a:	3332      	adds	r3, #50	; 0x32
 800553c:	4a78      	ldr	r2, [pc, #480]	; (8005720 <UART_SetConfig+0x32c>)
 800553e:	fba2 2303 	umull	r2, r3, r2, r3
 8005542:	095b      	lsrs	r3, r3, #5
 8005544:	f003 0207 	and.w	r2, r3, #7
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4422      	add	r2, r4
 800554e:	609a      	str	r2, [r3, #8]
 8005550:	e154      	b.n	80057fc <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8005552:	f7fe fc0b 	bl	8003d6c <HAL_RCC_GetPCLK1Freq>
 8005556:	4602      	mov	r2, r0
 8005558:	4613      	mov	r3, r2
 800555a:	009b      	lsls	r3, r3, #2
 800555c:	4413      	add	r3, r2
 800555e:	009a      	lsls	r2, r3, #2
 8005560:	441a      	add	r2, r3
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	005b      	lsls	r3, r3, #1
 8005568:	fbb2 f3f3 	udiv	r3, r2, r3
 800556c:	4a6c      	ldr	r2, [pc, #432]	; (8005720 <UART_SetConfig+0x32c>)
 800556e:	fba2 2303 	umull	r2, r3, r2, r3
 8005572:	095b      	lsrs	r3, r3, #5
 8005574:	011c      	lsls	r4, r3, #4
 8005576:	f7fe fbf9 	bl	8003d6c <HAL_RCC_GetPCLK1Freq>
 800557a:	4602      	mov	r2, r0
 800557c:	4613      	mov	r3, r2
 800557e:	009b      	lsls	r3, r3, #2
 8005580:	4413      	add	r3, r2
 8005582:	009a      	lsls	r2, r3, #2
 8005584:	441a      	add	r2, r3
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	005b      	lsls	r3, r3, #1
 800558c:	fbb2 f5f3 	udiv	r5, r2, r3
 8005590:	f7fe fbec 	bl	8003d6c <HAL_RCC_GetPCLK1Freq>
 8005594:	4602      	mov	r2, r0
 8005596:	4613      	mov	r3, r2
 8005598:	009b      	lsls	r3, r3, #2
 800559a:	4413      	add	r3, r2
 800559c:	009a      	lsls	r2, r3, #2
 800559e:	441a      	add	r2, r3
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	005b      	lsls	r3, r3, #1
 80055a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80055aa:	4a5d      	ldr	r2, [pc, #372]	; (8005720 <UART_SetConfig+0x32c>)
 80055ac:	fba2 2303 	umull	r2, r3, r2, r3
 80055b0:	095b      	lsrs	r3, r3, #5
 80055b2:	2264      	movs	r2, #100	; 0x64
 80055b4:	fb02 f303 	mul.w	r3, r2, r3
 80055b8:	1aeb      	subs	r3, r5, r3
 80055ba:	00db      	lsls	r3, r3, #3
 80055bc:	3332      	adds	r3, #50	; 0x32
 80055be:	4a58      	ldr	r2, [pc, #352]	; (8005720 <UART_SetConfig+0x32c>)
 80055c0:	fba2 2303 	umull	r2, r3, r2, r3
 80055c4:	095b      	lsrs	r3, r3, #5
 80055c6:	005b      	lsls	r3, r3, #1
 80055c8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80055cc:	441c      	add	r4, r3
 80055ce:	f7fe fbcd 	bl	8003d6c <HAL_RCC_GetPCLK1Freq>
 80055d2:	4602      	mov	r2, r0
 80055d4:	4613      	mov	r3, r2
 80055d6:	009b      	lsls	r3, r3, #2
 80055d8:	4413      	add	r3, r2
 80055da:	009a      	lsls	r2, r3, #2
 80055dc:	441a      	add	r2, r3
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	005b      	lsls	r3, r3, #1
 80055e4:	fbb2 f5f3 	udiv	r5, r2, r3
 80055e8:	f7fe fbc0 	bl	8003d6c <HAL_RCC_GetPCLK1Freq>
 80055ec:	4602      	mov	r2, r0
 80055ee:	4613      	mov	r3, r2
 80055f0:	009b      	lsls	r3, r3, #2
 80055f2:	4413      	add	r3, r2
 80055f4:	009a      	lsls	r2, r3, #2
 80055f6:	441a      	add	r2, r3
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	005b      	lsls	r3, r3, #1
 80055fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005602:	4a47      	ldr	r2, [pc, #284]	; (8005720 <UART_SetConfig+0x32c>)
 8005604:	fba2 2303 	umull	r2, r3, r2, r3
 8005608:	095b      	lsrs	r3, r3, #5
 800560a:	2264      	movs	r2, #100	; 0x64
 800560c:	fb02 f303 	mul.w	r3, r2, r3
 8005610:	1aeb      	subs	r3, r5, r3
 8005612:	00db      	lsls	r3, r3, #3
 8005614:	3332      	adds	r3, #50	; 0x32
 8005616:	4a42      	ldr	r2, [pc, #264]	; (8005720 <UART_SetConfig+0x32c>)
 8005618:	fba2 2303 	umull	r2, r3, r2, r3
 800561c:	095b      	lsrs	r3, r3, #5
 800561e:	f003 0207 	and.w	r2, r3, #7
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4422      	add	r2, r4
 8005628:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 800562a:	e0e7      	b.n	80057fc <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a39      	ldr	r2, [pc, #228]	; (8005718 <UART_SetConfig+0x324>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d004      	beq.n	8005640 <UART_SetConfig+0x24c>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a38      	ldr	r2, [pc, #224]	; (800571c <UART_SetConfig+0x328>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d171      	bne.n	8005724 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8005640:	f7fe fba8 	bl	8003d94 <HAL_RCC_GetPCLK2Freq>
 8005644:	4602      	mov	r2, r0
 8005646:	4613      	mov	r3, r2
 8005648:	009b      	lsls	r3, r3, #2
 800564a:	4413      	add	r3, r2
 800564c:	009a      	lsls	r2, r3, #2
 800564e:	441a      	add	r2, r3
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	009b      	lsls	r3, r3, #2
 8005656:	fbb2 f3f3 	udiv	r3, r2, r3
 800565a:	4a31      	ldr	r2, [pc, #196]	; (8005720 <UART_SetConfig+0x32c>)
 800565c:	fba2 2303 	umull	r2, r3, r2, r3
 8005660:	095b      	lsrs	r3, r3, #5
 8005662:	011c      	lsls	r4, r3, #4
 8005664:	f7fe fb96 	bl	8003d94 <HAL_RCC_GetPCLK2Freq>
 8005668:	4602      	mov	r2, r0
 800566a:	4613      	mov	r3, r2
 800566c:	009b      	lsls	r3, r3, #2
 800566e:	4413      	add	r3, r2
 8005670:	009a      	lsls	r2, r3, #2
 8005672:	441a      	add	r2, r3
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	009b      	lsls	r3, r3, #2
 800567a:	fbb2 f5f3 	udiv	r5, r2, r3
 800567e:	f7fe fb89 	bl	8003d94 <HAL_RCC_GetPCLK2Freq>
 8005682:	4602      	mov	r2, r0
 8005684:	4613      	mov	r3, r2
 8005686:	009b      	lsls	r3, r3, #2
 8005688:	4413      	add	r3, r2
 800568a:	009a      	lsls	r2, r3, #2
 800568c:	441a      	add	r2, r3
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	009b      	lsls	r3, r3, #2
 8005694:	fbb2 f3f3 	udiv	r3, r2, r3
 8005698:	4a21      	ldr	r2, [pc, #132]	; (8005720 <UART_SetConfig+0x32c>)
 800569a:	fba2 2303 	umull	r2, r3, r2, r3
 800569e:	095b      	lsrs	r3, r3, #5
 80056a0:	2264      	movs	r2, #100	; 0x64
 80056a2:	fb02 f303 	mul.w	r3, r2, r3
 80056a6:	1aeb      	subs	r3, r5, r3
 80056a8:	011b      	lsls	r3, r3, #4
 80056aa:	3332      	adds	r3, #50	; 0x32
 80056ac:	4a1c      	ldr	r2, [pc, #112]	; (8005720 <UART_SetConfig+0x32c>)
 80056ae:	fba2 2303 	umull	r2, r3, r2, r3
 80056b2:	095b      	lsrs	r3, r3, #5
 80056b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80056b8:	441c      	add	r4, r3
 80056ba:	f7fe fb6b 	bl	8003d94 <HAL_RCC_GetPCLK2Freq>
 80056be:	4602      	mov	r2, r0
 80056c0:	4613      	mov	r3, r2
 80056c2:	009b      	lsls	r3, r3, #2
 80056c4:	4413      	add	r3, r2
 80056c6:	009a      	lsls	r2, r3, #2
 80056c8:	441a      	add	r2, r3
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	009b      	lsls	r3, r3, #2
 80056d0:	fbb2 f5f3 	udiv	r5, r2, r3
 80056d4:	f7fe fb5e 	bl	8003d94 <HAL_RCC_GetPCLK2Freq>
 80056d8:	4602      	mov	r2, r0
 80056da:	4613      	mov	r3, r2
 80056dc:	009b      	lsls	r3, r3, #2
 80056de:	4413      	add	r3, r2
 80056e0:	009a      	lsls	r2, r3, #2
 80056e2:	441a      	add	r2, r3
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	009b      	lsls	r3, r3, #2
 80056ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80056ee:	4a0c      	ldr	r2, [pc, #48]	; (8005720 <UART_SetConfig+0x32c>)
 80056f0:	fba2 2303 	umull	r2, r3, r2, r3
 80056f4:	095b      	lsrs	r3, r3, #5
 80056f6:	2264      	movs	r2, #100	; 0x64
 80056f8:	fb02 f303 	mul.w	r3, r2, r3
 80056fc:	1aeb      	subs	r3, r5, r3
 80056fe:	011b      	lsls	r3, r3, #4
 8005700:	3332      	adds	r3, #50	; 0x32
 8005702:	4a07      	ldr	r2, [pc, #28]	; (8005720 <UART_SetConfig+0x32c>)
 8005704:	fba2 2303 	umull	r2, r3, r2, r3
 8005708:	095b      	lsrs	r3, r3, #5
 800570a:	f003 020f 	and.w	r2, r3, #15
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4422      	add	r2, r4
 8005714:	609a      	str	r2, [r3, #8]
 8005716:	e071      	b.n	80057fc <UART_SetConfig+0x408>
 8005718:	40011000 	.word	0x40011000
 800571c:	40011400 	.word	0x40011400
 8005720:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8005724:	f7fe fb22 	bl	8003d6c <HAL_RCC_GetPCLK1Freq>
 8005728:	4602      	mov	r2, r0
 800572a:	4613      	mov	r3, r2
 800572c:	009b      	lsls	r3, r3, #2
 800572e:	4413      	add	r3, r2
 8005730:	009a      	lsls	r2, r3, #2
 8005732:	441a      	add	r2, r3
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	009b      	lsls	r3, r3, #2
 800573a:	fbb2 f3f3 	udiv	r3, r2, r3
 800573e:	4a31      	ldr	r2, [pc, #196]	; (8005804 <UART_SetConfig+0x410>)
 8005740:	fba2 2303 	umull	r2, r3, r2, r3
 8005744:	095b      	lsrs	r3, r3, #5
 8005746:	011c      	lsls	r4, r3, #4
 8005748:	f7fe fb10 	bl	8003d6c <HAL_RCC_GetPCLK1Freq>
 800574c:	4602      	mov	r2, r0
 800574e:	4613      	mov	r3, r2
 8005750:	009b      	lsls	r3, r3, #2
 8005752:	4413      	add	r3, r2
 8005754:	009a      	lsls	r2, r3, #2
 8005756:	441a      	add	r2, r3
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	009b      	lsls	r3, r3, #2
 800575e:	fbb2 f5f3 	udiv	r5, r2, r3
 8005762:	f7fe fb03 	bl	8003d6c <HAL_RCC_GetPCLK1Freq>
 8005766:	4602      	mov	r2, r0
 8005768:	4613      	mov	r3, r2
 800576a:	009b      	lsls	r3, r3, #2
 800576c:	4413      	add	r3, r2
 800576e:	009a      	lsls	r2, r3, #2
 8005770:	441a      	add	r2, r3
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	009b      	lsls	r3, r3, #2
 8005778:	fbb2 f3f3 	udiv	r3, r2, r3
 800577c:	4a21      	ldr	r2, [pc, #132]	; (8005804 <UART_SetConfig+0x410>)
 800577e:	fba2 2303 	umull	r2, r3, r2, r3
 8005782:	095b      	lsrs	r3, r3, #5
 8005784:	2264      	movs	r2, #100	; 0x64
 8005786:	fb02 f303 	mul.w	r3, r2, r3
 800578a:	1aeb      	subs	r3, r5, r3
 800578c:	011b      	lsls	r3, r3, #4
 800578e:	3332      	adds	r3, #50	; 0x32
 8005790:	4a1c      	ldr	r2, [pc, #112]	; (8005804 <UART_SetConfig+0x410>)
 8005792:	fba2 2303 	umull	r2, r3, r2, r3
 8005796:	095b      	lsrs	r3, r3, #5
 8005798:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800579c:	441c      	add	r4, r3
 800579e:	f7fe fae5 	bl	8003d6c <HAL_RCC_GetPCLK1Freq>
 80057a2:	4602      	mov	r2, r0
 80057a4:	4613      	mov	r3, r2
 80057a6:	009b      	lsls	r3, r3, #2
 80057a8:	4413      	add	r3, r2
 80057aa:	009a      	lsls	r2, r3, #2
 80057ac:	441a      	add	r2, r3
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	009b      	lsls	r3, r3, #2
 80057b4:	fbb2 f5f3 	udiv	r5, r2, r3
 80057b8:	f7fe fad8 	bl	8003d6c <HAL_RCC_GetPCLK1Freq>
 80057bc:	4602      	mov	r2, r0
 80057be:	4613      	mov	r3, r2
 80057c0:	009b      	lsls	r3, r3, #2
 80057c2:	4413      	add	r3, r2
 80057c4:	009a      	lsls	r2, r3, #2
 80057c6:	441a      	add	r2, r3
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	009b      	lsls	r3, r3, #2
 80057ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80057d2:	4a0c      	ldr	r2, [pc, #48]	; (8005804 <UART_SetConfig+0x410>)
 80057d4:	fba2 2303 	umull	r2, r3, r2, r3
 80057d8:	095b      	lsrs	r3, r3, #5
 80057da:	2264      	movs	r2, #100	; 0x64
 80057dc:	fb02 f303 	mul.w	r3, r2, r3
 80057e0:	1aeb      	subs	r3, r5, r3
 80057e2:	011b      	lsls	r3, r3, #4
 80057e4:	3332      	adds	r3, #50	; 0x32
 80057e6:	4a07      	ldr	r2, [pc, #28]	; (8005804 <UART_SetConfig+0x410>)
 80057e8:	fba2 2303 	umull	r2, r3, r2, r3
 80057ec:	095b      	lsrs	r3, r3, #5
 80057ee:	f003 020f 	and.w	r2, r3, #15
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4422      	add	r2, r4
 80057f8:	609a      	str	r2, [r3, #8]
}
 80057fa:	e7ff      	b.n	80057fc <UART_SetConfig+0x408>
 80057fc:	bf00      	nop
 80057fe:	3710      	adds	r7, #16
 8005800:	46bd      	mov	sp, r7
 8005802:	bdb0      	pop	{r4, r5, r7, pc}
 8005804:	51eb851f 	.word	0x51eb851f

08005808 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005808:	b480      	push	{r7}
 800580a:	b085      	sub	sp, #20
 800580c:	af00      	add	r7, sp, #0
 800580e:	4603      	mov	r3, r0
 8005810:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005812:	2300      	movs	r3, #0
 8005814:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005816:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800581a:	2b84      	cmp	r3, #132	; 0x84
 800581c:	d005      	beq.n	800582a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800581e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	4413      	add	r3, r2
 8005826:	3303      	adds	r3, #3
 8005828:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800582a:	68fb      	ldr	r3, [r7, #12]
}
 800582c:	4618      	mov	r0, r3
 800582e:	3714      	adds	r7, #20
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr

08005838 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8005838:	b480      	push	{r7}
 800583a:	b083      	sub	sp, #12
 800583c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800583e:	f3ef 8305 	mrs	r3, IPSR
 8005842:	607b      	str	r3, [r7, #4]
  return(result);
 8005844:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8005846:	2b00      	cmp	r3, #0
 8005848:	bf14      	ite	ne
 800584a:	2301      	movne	r3, #1
 800584c:	2300      	moveq	r3, #0
 800584e:	b2db      	uxtb	r3, r3
}
 8005850:	4618      	mov	r0, r3
 8005852:	370c      	adds	r7, #12
 8005854:	46bd      	mov	sp, r7
 8005856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585a:	4770      	bx	lr

0800585c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005860:	f001 fd52 	bl	8007308 <vTaskStartScheduler>
  
  return osOK;
 8005864:	2300      	movs	r3, #0
}
 8005866:	4618      	mov	r0, r3
 8005868:	bd80      	pop	{r7, pc}

0800586a <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800586a:	b580      	push	{r7, lr}
 800586c:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800586e:	f7ff ffe3 	bl	8005838 <inHandlerMode>
 8005872:	4603      	mov	r3, r0
 8005874:	2b00      	cmp	r3, #0
 8005876:	d003      	beq.n	8005880 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8005878:	f001 fe5e 	bl	8007538 <xTaskGetTickCountFromISR>
 800587c:	4603      	mov	r3, r0
 800587e:	e002      	b.n	8005886 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8005880:	f001 fe4a 	bl	8007518 <xTaskGetTickCount>
 8005884:	4603      	mov	r3, r0
  }
}
 8005886:	4618      	mov	r0, r3
 8005888:	bd80      	pop	{r7, pc}

0800588a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800588a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800588c:	b089      	sub	sp, #36	; 0x24
 800588e:	af04      	add	r7, sp, #16
 8005890:	6078      	str	r0, [r7, #4]
 8005892:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	695b      	ldr	r3, [r3, #20]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d020      	beq.n	80058de <osThreadCreate+0x54>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	699b      	ldr	r3, [r3, #24]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d01c      	beq.n	80058de <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	685c      	ldr	r4, [r3, #4]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681d      	ldr	r5, [r3, #0]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	691e      	ldr	r6, [r3, #16]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80058b6:	4618      	mov	r0, r3
 80058b8:	f7ff ffa6 	bl	8005808 <makeFreeRtosPriority>
 80058bc:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	695b      	ldr	r3, [r3, #20]
 80058c2:	687a      	ldr	r2, [r7, #4]
 80058c4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80058c6:	9202      	str	r2, [sp, #8]
 80058c8:	9301      	str	r3, [sp, #4]
 80058ca:	9100      	str	r1, [sp, #0]
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	4632      	mov	r2, r6
 80058d0:	4629      	mov	r1, r5
 80058d2:	4620      	mov	r0, r4
 80058d4:	f001 fad7 	bl	8006e86 <xTaskCreateStatic>
 80058d8:	4603      	mov	r3, r0
 80058da:	60fb      	str	r3, [r7, #12]
 80058dc:	e01c      	b.n	8005918 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	685c      	ldr	r4, [r3, #4]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80058ea:	b29e      	uxth	r6, r3
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80058f2:	4618      	mov	r0, r3
 80058f4:	f7ff ff88 	bl	8005808 <makeFreeRtosPriority>
 80058f8:	4602      	mov	r2, r0
 80058fa:	f107 030c 	add.w	r3, r7, #12
 80058fe:	9301      	str	r3, [sp, #4]
 8005900:	9200      	str	r2, [sp, #0]
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	4632      	mov	r2, r6
 8005906:	4629      	mov	r1, r5
 8005908:	4620      	mov	r0, r4
 800590a:	f001 fb15 	bl	8006f38 <xTaskCreate>
 800590e:	4603      	mov	r3, r0
 8005910:	2b01      	cmp	r3, #1
 8005912:	d001      	beq.n	8005918 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005914:	2300      	movs	r3, #0
 8005916:	e000      	b.n	800591a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005918:	68fb      	ldr	r3, [r7, #12]
}
 800591a:	4618      	mov	r0, r3
 800591c:	3714      	adds	r7, #20
 800591e:	46bd      	mov	sp, r7
 8005920:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005922 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005922:	b580      	push	{r7, lr}
 8005924:	b084      	sub	sp, #16
 8005926:	af00      	add	r7, sp, #0
 8005928:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d001      	beq.n	8005938 <osDelay+0x16>
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	e000      	b.n	800593a <osDelay+0x18>
 8005938:	2301      	movs	r3, #1
 800593a:	4618      	mov	r0, r3
 800593c:	f001 fcb0 	bl	80072a0 <vTaskDelay>
  
  return osOK;
 8005940:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005942:	4618      	mov	r0, r3
 8005944:	3710      	adds	r7, #16
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}

0800594a <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800594a:	b580      	push	{r7, lr}
 800594c:	b082      	sub	sp, #8
 800594e:	af00      	add	r7, sp, #0
 8005950:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d007      	beq.n	800596a <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	4619      	mov	r1, r3
 8005960:	2001      	movs	r0, #1
 8005962:	f000 fc6b 	bl	800623c <xQueueCreateMutexStatic>
 8005966:	4603      	mov	r3, r0
 8005968:	e003      	b.n	8005972 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800596a:	2001      	movs	r0, #1
 800596c:	f000 fc4e 	bl	800620c <xQueueCreateMutex>
 8005970:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8005972:	4618      	mov	r0, r3
 8005974:	3708      	adds	r7, #8
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}
	...

0800597c <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b084      	sub	sp, #16
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
 8005984:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8005986:	2300      	movs	r3, #0
 8005988:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d101      	bne.n	8005994 <osMutexWait+0x18>
    return osErrorParameter;
 8005990:	2380      	movs	r3, #128	; 0x80
 8005992:	e03a      	b.n	8005a0a <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8005994:	2300      	movs	r3, #0
 8005996:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800599e:	d103      	bne.n	80059a8 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 80059a0:	f04f 33ff 	mov.w	r3, #4294967295
 80059a4:	60fb      	str	r3, [r7, #12]
 80059a6:	e009      	b.n	80059bc <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d006      	beq.n	80059bc <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d101      	bne.n	80059bc <osMutexWait+0x40>
      ticks = 1;
 80059b8:	2301      	movs	r3, #1
 80059ba:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80059bc:	f7ff ff3c 	bl	8005838 <inHandlerMode>
 80059c0:	4603      	mov	r3, r0
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d017      	beq.n	80059f6 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80059c6:	f107 0308 	add.w	r3, r7, #8
 80059ca:	461a      	mov	r2, r3
 80059cc:	2100      	movs	r1, #0
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f001 f8b4 	bl	8006b3c <xQueueReceiveFromISR>
 80059d4:	4603      	mov	r3, r0
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	d001      	beq.n	80059de <osMutexWait+0x62>
      return osErrorOS;
 80059da:	23ff      	movs	r3, #255	; 0xff
 80059dc:	e015      	b.n	8005a0a <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d011      	beq.n	8005a08 <osMutexWait+0x8c>
 80059e4:	4b0b      	ldr	r3, [pc, #44]	; (8005a14 <osMutexWait+0x98>)
 80059e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059ea:	601a      	str	r2, [r3, #0]
 80059ec:	f3bf 8f4f 	dsb	sy
 80059f0:	f3bf 8f6f 	isb	sy
 80059f4:	e008      	b.n	8005a08 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80059f6:	68f9      	ldr	r1, [r7, #12]
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f000 ff97 	bl	800692c <xQueueSemaphoreTake>
 80059fe:	4603      	mov	r3, r0
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	d001      	beq.n	8005a08 <osMutexWait+0x8c>
    return osErrorOS;
 8005a04:	23ff      	movs	r3, #255	; 0xff
 8005a06:	e000      	b.n	8005a0a <osMutexWait+0x8e>
  }
  
  return osOK;
 8005a08:	2300      	movs	r3, #0
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3710      	adds	r7, #16
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}
 8005a12:	bf00      	nop
 8005a14:	e000ed04 	.word	0xe000ed04

08005a18 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b084      	sub	sp, #16
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8005a20:	2300      	movs	r3, #0
 8005a22:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8005a24:	2300      	movs	r3, #0
 8005a26:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8005a28:	f7ff ff06 	bl	8005838 <inHandlerMode>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d016      	beq.n	8005a60 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8005a32:	f107 0308 	add.w	r3, r7, #8
 8005a36:	4619      	mov	r1, r3
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f000 fe11 	bl	8006660 <xQueueGiveFromISR>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	d001      	beq.n	8005a48 <osMutexRelease+0x30>
      return osErrorOS;
 8005a44:	23ff      	movs	r3, #255	; 0xff
 8005a46:	e017      	b.n	8005a78 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d013      	beq.n	8005a76 <osMutexRelease+0x5e>
 8005a4e:	4b0c      	ldr	r3, [pc, #48]	; (8005a80 <osMutexRelease+0x68>)
 8005a50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a54:	601a      	str	r2, [r3, #0]
 8005a56:	f3bf 8f4f 	dsb	sy
 8005a5a:	f3bf 8f6f 	isb	sy
 8005a5e:	e00a      	b.n	8005a76 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8005a60:	2300      	movs	r3, #0
 8005a62:	2200      	movs	r2, #0
 8005a64:	2100      	movs	r1, #0
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f000 fc6c 	bl	8006344 <xQueueGenericSend>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d001      	beq.n	8005a76 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8005a72:	23ff      	movs	r3, #255	; 0xff
 8005a74:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8005a76:	68fb      	ldr	r3, [r7, #12]
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	3710      	adds	r7, #16
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}
 8005a80:	e000ed04 	.word	0xe000ed04

08005a84 <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b086      	sub	sp, #24
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	3303      	adds	r3, #3
 8005a92:	f023 0303 	bic.w	r3, r3, #3
 8005a96:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 8005a98:	2014      	movs	r0, #20
 8005a9a:	f002 fe51 	bl	8008740 <pvPortMalloc>
 8005a9e:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d046      	beq.n	8005b34 <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681a      	ldr	r2, [r3, #0]
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 8005aae:	68fa      	ldr	r2, [r7, #12]
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f002 fe3e 	bl	8008740 <pvPortMalloc>
 8005ac4:	4602      	mov	r2, r0
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d02b      	beq.n	8005b2a <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	68fa      	ldr	r2, [r7, #12]
 8005ad8:	fb02 f303 	mul.w	r3, r2, r3
 8005adc:	4618      	mov	r0, r3
 8005ade:	f002 fe2f 	bl	8008740 <pvPortMalloc>
 8005ae2:	4602      	mov	r2, r0
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d011      	beq.n	8005b14 <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 8005af0:	2300      	movs	r3, #0
 8005af2:	613b      	str	r3, [r7, #16]
 8005af4:	e008      	b.n	8005b08 <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	685a      	ldr	r2, [r3, #4]
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	4413      	add	r3, r2
 8005afe:	2200      	movs	r2, #0
 8005b00:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	3301      	adds	r3, #1
 8005b06:	613b      	str	r3, [r7, #16]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	693a      	ldr	r2, [r7, #16]
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	d3f1      	bcc.n	8005af6 <osPoolCreate+0x72>
 8005b12:	e00f      	b.n	8005b34 <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	4618      	mov	r0, r3
 8005b1a:	f002 fed7 	bl	80088cc <vPortFree>
        vPortFree(thePool);
 8005b1e:	6978      	ldr	r0, [r7, #20]
 8005b20:	f002 fed4 	bl	80088cc <vPortFree>
        thePool = NULL;
 8005b24:	2300      	movs	r3, #0
 8005b26:	617b      	str	r3, [r7, #20]
 8005b28:	e004      	b.n	8005b34 <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 8005b2a:	6978      	ldr	r0, [r7, #20]
 8005b2c:	f002 fece 	bl	80088cc <vPortFree>
      thePool = NULL;
 8005b30:	2300      	movs	r3, #0
 8005b32:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 8005b34:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	3718      	adds	r7, #24
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}

08005b3e <osMailCreate>:
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 8005b3e:	b590      	push	{r4, r7, lr}
 8005b40:	b087      	sub	sp, #28
 8005b42:	af00      	add	r7, sp, #0
 8005b44:	6078      	str	r0, [r7, #4]
 8005b46:	6039      	str	r1, [r7, #0]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	60fb      	str	r3, [r7, #12]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	613b      	str	r3, [r7, #16]
 8005b54:	2300      	movs	r3, #0
 8005b56:	617b      	str	r3, [r7, #20]
  
  /* Create a mail queue control block */

  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	689c      	ldr	r4, [r3, #8]
 8005b5c:	200c      	movs	r0, #12
 8005b5e:	f002 fdef 	bl	8008740 <pvPortMalloc>
 8005b62:	4603      	mov	r3, r0
 8005b64:	6023      	str	r3, [r4, #0]

  if (*(queue_def->cb) == NULL) {
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d101      	bne.n	8005b74 <osMailCreate+0x36>
    return NULL;
 8005b70:	2300      	movs	r3, #0
 8005b72:	e038      	b.n	8005be6 <osMailCreate+0xa8>
  }
  (*(queue_def->cb))->queue_def = queue_def;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	687a      	ldr	r2, [r7, #4]
 8005b7c:	601a      	str	r2, [r3, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6818      	ldr	r0, [r3, #0]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	681c      	ldr	r4, [r3, #0]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	2104      	movs	r1, #4
 8005b8c:	f000 fac8 	bl	8006120 <xQueueGenericCreate>
 8005b90:	4603      	mov	r3, r0
 8005b92:	6063      	str	r3, [r4, #4]


  if ((*(queue_def->cb))->handle == NULL) {
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d107      	bne.n	8005bb0 <osMailCreate+0x72>
    vPortFree(*(queue_def->cb));
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f002 fe90 	bl	80088cc <vPortFree>
    return NULL;
 8005bac:	2300      	movs	r3, #0
 8005bae:	e01a      	b.n	8005be6 <osMailCreate+0xa8>
  }
  
  /* Create a mail pool */
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	681c      	ldr	r4, [r3, #0]
 8005bb6:	f107 030c 	add.w	r3, r7, #12
 8005bba:	4618      	mov	r0, r3
 8005bbc:	f7ff ff62 	bl	8005a84 <osPoolCreate>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	60a3      	str	r3, [r4, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	689b      	ldr	r3, [r3, #8]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d107      	bne.n	8005be0 <osMailCreate+0xa2>
    //TODO: Delete queue. How to do it in FreeRTOS?
    vPortFree(*(queue_def->cb));
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f002 fe78 	bl	80088cc <vPortFree>
    return NULL;
 8005bdc:	2300      	movs	r3, #0
 8005bde:	e002      	b.n	8005be6 <osMailCreate+0xa8>
  }
  
  return *(queue_def->cb);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	689b      	ldr	r3, [r3, #8]
 8005be4:	681b      	ldr	r3, [r3, #0]
#else
  return NULL;
#endif
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	371c      	adds	r7, #28
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd90      	pop	{r4, r7, pc}
	...

08005bf0 <osMailPut>:
* @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAlloc.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailPut (osMailQId queue_id, void *mail)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b084      	sub	sp, #16
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	6039      	str	r1, [r7, #0]
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d101      	bne.n	8005c04 <osMailPut+0x14>
    return osErrorParameter;
 8005c00:	2380      	movs	r3, #128	; 0x80
 8005c02:	e02c      	b.n	8005c5e <osMailPut+0x6e>
  }
  
  taskWoken = pdFALSE;
 8005c04:	2300      	movs	r3, #0
 8005c06:	60fb      	str	r3, [r7, #12]
  
  if (inHandlerMode()) {
 8005c08:	f7ff fe16 	bl	8005838 <inHandlerMode>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d018      	beq.n	8005c44 <osMailPut+0x54>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6858      	ldr	r0, [r3, #4]
 8005c16:	f107 020c 	add.w	r2, r7, #12
 8005c1a:	4639      	mov	r1, r7
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	f000 fc8b 	bl	8006538 <xQueueGenericSendFromISR>
 8005c22:	4603      	mov	r3, r0
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	d001      	beq.n	8005c2c <osMailPut+0x3c>
      return osErrorOS;
 8005c28:	23ff      	movs	r3, #255	; 0xff
 8005c2a:	e018      	b.n	8005c5e <osMailPut+0x6e>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d014      	beq.n	8005c5c <osMailPut+0x6c>
 8005c32:	4b0d      	ldr	r3, [pc, #52]	; (8005c68 <osMailPut+0x78>)
 8005c34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c38:	601a      	str	r2, [r3, #0]
 8005c3a:	f3bf 8f4f 	dsb	sy
 8005c3e:	f3bf 8f6f 	isb	sy
 8005c42:	e00b      	b.n	8005c5c <osMailPut+0x6c>
  }
  else {
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6858      	ldr	r0, [r3, #4]
 8005c48:	4639      	mov	r1, r7
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	f000 fb79 	bl	8006344 <xQueueGenericSend>
 8005c52:	4603      	mov	r3, r0
 8005c54:	2b01      	cmp	r3, #1
 8005c56:	d001      	beq.n	8005c5c <osMailPut+0x6c>
      return osErrorOS;
 8005c58:	23ff      	movs	r3, #255	; 0xff
 8005c5a:	e000      	b.n	8005c5e <osMailPut+0x6e>
    }
  }
  
  return osOK;
 8005c5c:	2300      	movs	r3, #0
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	3710      	adds	r7, #16
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}
 8005c66:	bf00      	nop
 8005c68:	e000ed04 	.word	0xe000ed04

08005c6c <osMailGet>:
* @param millisec    timeout value or 0 in case of no time-out
* @retval event that contains mail information or error code.
* @note   MUST REMAIN UNCHANGED: \b osMailGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMailGet (osMailQId queue_id, uint32_t millisec)
{
 8005c6c:	b590      	push	{r4, r7, lr}
 8005c6e:	b08b      	sub	sp, #44	; 0x2c
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	60f8      	str	r0, [r7, #12]
 8005c74:	60b9      	str	r1, [r7, #8]
 8005c76:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.mail_id = queue_id;
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	61fb      	str	r3, [r7, #28]
  
  if (queue_id == NULL) {
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d10a      	bne.n	8005c98 <osMailGet+0x2c>
    event.status = osErrorParameter;
 8005c82:	2380      	movs	r3, #128	; 0x80
 8005c84:	617b      	str	r3, [r7, #20]
    return event;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	461c      	mov	r4, r3
 8005c8a:	f107 0314 	add.w	r3, r7, #20
 8005c8e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005c92:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005c96:	e056      	b.n	8005d46 <osMailGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ca6:	d103      	bne.n	8005cb0 <osMailGet+0x44>
    ticks = portMAX_DELAY;
 8005ca8:	f04f 33ff 	mov.w	r3, #4294967295
 8005cac:	627b      	str	r3, [r7, #36]	; 0x24
 8005cae:	e009      	b.n	8005cc4 <osMailGet+0x58>
  }
  else if (millisec != 0) {
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d006      	beq.n	8005cc4 <osMailGet+0x58>
    ticks = millisec / portTICK_PERIOD_MS;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8005cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d101      	bne.n	8005cc4 <osMailGet+0x58>
      ticks = 1;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8005cc4:	f7ff fdb8 	bl	8005838 <inHandlerMode>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d01d      	beq.n	8005d0a <osMailGet+0x9e>
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	6858      	ldr	r0, [r3, #4]
 8005cd2:	f107 0220 	add.w	r2, r7, #32
 8005cd6:	f107 0314 	add.w	r3, r7, #20
 8005cda:	3304      	adds	r3, #4
 8005cdc:	4619      	mov	r1, r3
 8005cde:	f000 ff2d 	bl	8006b3c <xQueueReceiveFromISR>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d102      	bne.n	8005cee <osMailGet+0x82>
      /* We have mail */
      event.status = osEventMail;
 8005ce8:	2320      	movs	r3, #32
 8005cea:	617b      	str	r3, [r7, #20]
 8005cec:	e001      	b.n	8005cf2 <osMailGet+0x86>
    }
    else {
      event.status = osOK;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005cf2:	6a3b      	ldr	r3, [r7, #32]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d01e      	beq.n	8005d36 <osMailGet+0xca>
 8005cf8:	4b15      	ldr	r3, [pc, #84]	; (8005d50 <osMailGet+0xe4>)
 8005cfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cfe:	601a      	str	r2, [r3, #0]
 8005d00:	f3bf 8f4f 	dsb	sy
 8005d04:	f3bf 8f6f 	isb	sy
 8005d08:	e015      	b.n	8005d36 <osMailGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	6858      	ldr	r0, [r3, #4]
 8005d0e:	f107 0314 	add.w	r3, r7, #20
 8005d12:	3304      	adds	r3, #4
 8005d14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d16:	4619      	mov	r1, r3
 8005d18:	f000 fd2c 	bl	8006774 <xQueueReceive>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	2b01      	cmp	r3, #1
 8005d20:	d102      	bne.n	8005d28 <osMailGet+0xbc>
      /* We have mail */
      event.status = osEventMail;
 8005d22:	2320      	movs	r3, #32
 8005d24:	617b      	str	r3, [r7, #20]
 8005d26:	e006      	b.n	8005d36 <osMailGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8005d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d101      	bne.n	8005d32 <osMailGet+0xc6>
 8005d2e:	2300      	movs	r3, #0
 8005d30:	e000      	b.n	8005d34 <osMailGet+0xc8>
 8005d32:	2340      	movs	r3, #64	; 0x40
 8005d34:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	461c      	mov	r4, r3
 8005d3a:	f107 0314 	add.w	r3, r7, #20
 8005d3e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005d42:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8005d46:	68f8      	ldr	r0, [r7, #12]
 8005d48:	372c      	adds	r7, #44	; 0x2c
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd90      	pop	{r4, r7, pc}
 8005d4e:	bf00      	nop
 8005d50:	e000ed04 	.word	0xe000ed04

08005d54 <osRecursiveMutexCreate>:
* @brief  Create and Initialize a Recursive Mutex
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error..
*/
osMutexId osRecursiveMutexCreate (const osMutexDef_t *mutex_def)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b082      	sub	sp, #8
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
#if (configUSE_RECURSIVE_MUTEXES == 1)
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL){
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d007      	beq.n	8005d74 <osRecursiveMutexCreate+0x20>
    return xSemaphoreCreateRecursiveMutexStatic( mutex_def->controlblock );
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	4619      	mov	r1, r3
 8005d6a:	2004      	movs	r0, #4
 8005d6c:	f000 fa66 	bl	800623c <xQueueCreateMutexStatic>
 8005d70:	4603      	mov	r3, r0
 8005d72:	e003      	b.n	8005d7c <osRecursiveMutexCreate+0x28>
  }
  else {
    return xSemaphoreCreateRecursiveMutex();
 8005d74:	2004      	movs	r0, #4
 8005d76:	f000 fa49 	bl	800620c <xQueueCreateMutex>
 8005d7a:	4603      	mov	r3, r0
  return xSemaphoreCreateRecursiveMutex();
#endif
#else
  return NULL;
#endif	
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3708      	adds	r7, #8
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}

08005d84 <osRecursiveMutexRelease>:
* @brief  Release a Recursive Mutex
* @param   mutex_id      mutex ID obtained by \ref osRecursiveMutexCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osRecursiveMutexRelease (osMutexId mutex_id)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b084      	sub	sp, #16
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
#if (configUSE_RECURSIVE_MUTEXES == 1)
  osStatus result = osOK;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	60fb      	str	r3, [r7, #12]
 
  if (xSemaphoreGiveRecursive(mutex_id) != pdTRUE) 
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	f000 fa6e 	bl	8006272 <xQueueGiveMutexRecursive>
 8005d96:	4603      	mov	r3, r0
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	d001      	beq.n	8005da0 <osRecursiveMutexRelease+0x1c>
  {
    result = osErrorOS;
 8005d9c:	23ff      	movs	r3, #255	; 0xff
 8005d9e:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8005da0:	68fb      	ldr	r3, [r7, #12]
#else
	return osErrorResource;
#endif
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3710      	adds	r7, #16
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}

08005daa <osRecursiveMutexWait>:
* @param   mutex_id    mutex ID obtained by \ref osRecursiveMutexCreate.
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osRecursiveMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8005daa:	b580      	push	{r7, lr}
 8005dac:	b084      	sub	sp, #16
 8005dae:	af00      	add	r7, sp, #0
 8005db0:	6078      	str	r0, [r7, #4]
 8005db2:	6039      	str	r1, [r7, #0]
#if (configUSE_RECURSIVE_MUTEXES == 1)
  TickType_t ticks;
  
  if (mutex_id == NULL)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d101      	bne.n	8005dbe <osRecursiveMutexWait+0x14>
  {
    return osErrorParameter;
 8005dba:	2380      	movs	r3, #128	; 0x80
 8005dbc:	e01d      	b.n	8005dfa <osRecursiveMutexWait+0x50>
  }
  
  ticks = 0;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) 
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dc8:	d103      	bne.n	8005dd2 <osRecursiveMutexWait+0x28>
  {
    ticks = portMAX_DELAY;
 8005dca:	f04f 33ff 	mov.w	r3, #4294967295
 8005dce:	60fb      	str	r3, [r7, #12]
 8005dd0:	e009      	b.n	8005de6 <osRecursiveMutexWait+0x3c>
  }
  else if (millisec != 0) 
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d006      	beq.n	8005de6 <osRecursiveMutexWait+0x3c>
  {
    ticks = millisec / portTICK_PERIOD_MS;
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) 
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d101      	bne.n	8005de6 <osRecursiveMutexWait+0x3c>
    {
      ticks = 1;
 8005de2:	2301      	movs	r3, #1
 8005de4:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (xSemaphoreTakeRecursive(mutex_id, ticks) != pdTRUE) 
 8005de6:	68f9      	ldr	r1, [r7, #12]
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f000 fa75 	bl	80062d8 <xQueueTakeMutexRecursive>
 8005dee:	4603      	mov	r3, r0
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	d001      	beq.n	8005df8 <osRecursiveMutexWait+0x4e>
  {
    return osErrorOS;
 8005df4:	23ff      	movs	r3, #255	; 0xff
 8005df6:	e000      	b.n	8005dfa <osRecursiveMutexWait+0x50>
  }
  return osOK;
 8005df8:	2300      	movs	r3, #0
#else
	return osErrorResource;
#endif
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3710      	adds	r7, #16
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}

08005e02 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005e02:	b480      	push	{r7}
 8005e04:	b083      	sub	sp, #12
 8005e06:	af00      	add	r7, sp, #0
 8005e08:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f103 0208 	add.w	r2, r3, #8
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f04f 32ff 	mov.w	r2, #4294967295
 8005e1a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f103 0208 	add.w	r2, r3, #8
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f103 0208 	add.w	r2, r3, #8
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2200      	movs	r2, #0
 8005e34:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005e36:	bf00      	nop
 8005e38:	370c      	adds	r7, #12
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e40:	4770      	bx	lr

08005e42 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005e42:	b480      	push	{r7}
 8005e44:	b083      	sub	sp, #12
 8005e46:	af00      	add	r7, sp, #0
 8005e48:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005e50:	bf00      	nop
 8005e52:	370c      	adds	r7, #12
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr

08005e5c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b085      	sub	sp, #20
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
 8005e64:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	68fa      	ldr	r2, [r7, #12]
 8005e70:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	689a      	ldr	r2, [r3, #8]
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	689b      	ldr	r3, [r3, #8]
 8005e7e:	683a      	ldr	r2, [r7, #0]
 8005e80:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	683a      	ldr	r2, [r7, #0]
 8005e86:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	687a      	ldr	r2, [r7, #4]
 8005e8c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	1c5a      	adds	r2, r3, #1
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	601a      	str	r2, [r3, #0]
}
 8005e98:	bf00      	nop
 8005e9a:	3714      	adds	r7, #20
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea2:	4770      	bx	lr

08005ea4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b085      	sub	sp, #20
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
 8005eac:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eba:	d103      	bne.n	8005ec4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	691b      	ldr	r3, [r3, #16]
 8005ec0:	60fb      	str	r3, [r7, #12]
 8005ec2:	e00c      	b.n	8005ede <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	3308      	adds	r3, #8
 8005ec8:	60fb      	str	r3, [r7, #12]
 8005eca:	e002      	b.n	8005ed2 <vListInsert+0x2e>
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	60fb      	str	r3, [r7, #12]
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	68ba      	ldr	r2, [r7, #8]
 8005eda:	429a      	cmp	r2, r3
 8005edc:	d2f6      	bcs.n	8005ecc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	685a      	ldr	r2, [r3, #4]
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	683a      	ldr	r2, [r7, #0]
 8005eec:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	68fa      	ldr	r2, [r7, #12]
 8005ef2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	683a      	ldr	r2, [r7, #0]
 8005ef8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	687a      	ldr	r2, [r7, #4]
 8005efe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	1c5a      	adds	r2, r3, #1
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	601a      	str	r2, [r3, #0]
}
 8005f0a:	bf00      	nop
 8005f0c:	3714      	adds	r7, #20
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f14:	4770      	bx	lr

08005f16 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005f16:	b480      	push	{r7}
 8005f18:	b085      	sub	sp, #20
 8005f1a:	af00      	add	r7, sp, #0
 8005f1c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	691b      	ldr	r3, [r3, #16]
 8005f22:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	687a      	ldr	r2, [r7, #4]
 8005f2a:	6892      	ldr	r2, [r2, #8]
 8005f2c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	689b      	ldr	r3, [r3, #8]
 8005f32:	687a      	ldr	r2, [r7, #4]
 8005f34:	6852      	ldr	r2, [r2, #4]
 8005f36:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	687a      	ldr	r2, [r7, #4]
 8005f3e:	429a      	cmp	r2, r3
 8005f40:	d103      	bne.n	8005f4a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	689a      	ldr	r2, [r3, #8]
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	1e5a      	subs	r2, r3, #1
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3714      	adds	r7, #20
 8005f62:	46bd      	mov	sp, r7
 8005f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f68:	4770      	bx	lr
	...

08005f6c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b084      	sub	sp, #16
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
 8005f74:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d109      	bne.n	8005f94 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f84:	f383 8811 	msr	BASEPRI, r3
 8005f88:	f3bf 8f6f 	isb	sy
 8005f8c:	f3bf 8f4f 	dsb	sy
 8005f90:	60bb      	str	r3, [r7, #8]
 8005f92:	e7fe      	b.n	8005f92 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8005f94:	f002 faba 	bl	800850c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681a      	ldr	r2, [r3, #0]
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fa0:	68f9      	ldr	r1, [r7, #12]
 8005fa2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005fa4:	fb01 f303 	mul.w	r3, r1, r3
 8005fa8:	441a      	add	r2, r3
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681a      	ldr	r2, [r3, #0]
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681a      	ldr	r2, [r3, #0]
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fc4:	3b01      	subs	r3, #1
 8005fc6:	68f9      	ldr	r1, [r7, #12]
 8005fc8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005fca:	fb01 f303 	mul.w	r3, r1, r3
 8005fce:	441a      	add	r2, r3
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	22ff      	movs	r2, #255	; 0xff
 8005fd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	22ff      	movs	r2, #255	; 0xff
 8005fe0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d114      	bne.n	8006014 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	691b      	ldr	r3, [r3, #16]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d01a      	beq.n	8006028 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	3310      	adds	r3, #16
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f001 fc10 	bl	800781c <xTaskRemoveFromEventList>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d012      	beq.n	8006028 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006002:	4b0d      	ldr	r3, [pc, #52]	; (8006038 <xQueueGenericReset+0xcc>)
 8006004:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006008:	601a      	str	r2, [r3, #0]
 800600a:	f3bf 8f4f 	dsb	sy
 800600e:	f3bf 8f6f 	isb	sy
 8006012:	e009      	b.n	8006028 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	3310      	adds	r3, #16
 8006018:	4618      	mov	r0, r3
 800601a:	f7ff fef2 	bl	8005e02 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	3324      	adds	r3, #36	; 0x24
 8006022:	4618      	mov	r0, r3
 8006024:	f7ff feed 	bl	8005e02 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006028:	f002 fa9e 	bl	8008568 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800602c:	2301      	movs	r3, #1
}
 800602e:	4618      	mov	r0, r3
 8006030:	3710      	adds	r7, #16
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}
 8006036:	bf00      	nop
 8006038:	e000ed04 	.word	0xe000ed04

0800603c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800603c:	b580      	push	{r7, lr}
 800603e:	b08e      	sub	sp, #56	; 0x38
 8006040:	af02      	add	r7, sp, #8
 8006042:	60f8      	str	r0, [r7, #12]
 8006044:	60b9      	str	r1, [r7, #8]
 8006046:	607a      	str	r2, [r7, #4]
 8006048:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d109      	bne.n	8006064 <xQueueGenericCreateStatic+0x28>
 8006050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006054:	f383 8811 	msr	BASEPRI, r3
 8006058:	f3bf 8f6f 	isb	sy
 800605c:	f3bf 8f4f 	dsb	sy
 8006060:	62bb      	str	r3, [r7, #40]	; 0x28
 8006062:	e7fe      	b.n	8006062 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d109      	bne.n	800607e <xQueueGenericCreateStatic+0x42>
 800606a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800606e:	f383 8811 	msr	BASEPRI, r3
 8006072:	f3bf 8f6f 	isb	sy
 8006076:	f3bf 8f4f 	dsb	sy
 800607a:	627b      	str	r3, [r7, #36]	; 0x24
 800607c:	e7fe      	b.n	800607c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d002      	beq.n	800608a <xQueueGenericCreateStatic+0x4e>
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d001      	beq.n	800608e <xQueueGenericCreateStatic+0x52>
 800608a:	2301      	movs	r3, #1
 800608c:	e000      	b.n	8006090 <xQueueGenericCreateStatic+0x54>
 800608e:	2300      	movs	r3, #0
 8006090:	2b00      	cmp	r3, #0
 8006092:	d109      	bne.n	80060a8 <xQueueGenericCreateStatic+0x6c>
 8006094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006098:	f383 8811 	msr	BASEPRI, r3
 800609c:	f3bf 8f6f 	isb	sy
 80060a0:	f3bf 8f4f 	dsb	sy
 80060a4:	623b      	str	r3, [r7, #32]
 80060a6:	e7fe      	b.n	80060a6 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d102      	bne.n	80060b4 <xQueueGenericCreateStatic+0x78>
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d101      	bne.n	80060b8 <xQueueGenericCreateStatic+0x7c>
 80060b4:	2301      	movs	r3, #1
 80060b6:	e000      	b.n	80060ba <xQueueGenericCreateStatic+0x7e>
 80060b8:	2300      	movs	r3, #0
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d109      	bne.n	80060d2 <xQueueGenericCreateStatic+0x96>
 80060be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c2:	f383 8811 	msr	BASEPRI, r3
 80060c6:	f3bf 8f6f 	isb	sy
 80060ca:	f3bf 8f4f 	dsb	sy
 80060ce:	61fb      	str	r3, [r7, #28]
 80060d0:	e7fe      	b.n	80060d0 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80060d2:	2348      	movs	r3, #72	; 0x48
 80060d4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	2b48      	cmp	r3, #72	; 0x48
 80060da:	d009      	beq.n	80060f0 <xQueueGenericCreateStatic+0xb4>
 80060dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060e0:	f383 8811 	msr	BASEPRI, r3
 80060e4:	f3bf 8f6f 	isb	sy
 80060e8:	f3bf 8f4f 	dsb	sy
 80060ec:	61bb      	str	r3, [r7, #24]
 80060ee:	e7fe      	b.n	80060ee <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80060f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d00d      	beq.n	8006116 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80060fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060fc:	2201      	movs	r2, #1
 80060fe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006102:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006108:	9300      	str	r3, [sp, #0]
 800610a:	4613      	mov	r3, r2
 800610c:	687a      	ldr	r2, [r7, #4]
 800610e:	68b9      	ldr	r1, [r7, #8]
 8006110:	68f8      	ldr	r0, [r7, #12]
 8006112:	f000 f842 	bl	800619a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006118:	4618      	mov	r0, r3
 800611a:	3730      	adds	r7, #48	; 0x30
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}

08006120 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006120:	b580      	push	{r7, lr}
 8006122:	b08a      	sub	sp, #40	; 0x28
 8006124:	af02      	add	r7, sp, #8
 8006126:	60f8      	str	r0, [r7, #12]
 8006128:	60b9      	str	r1, [r7, #8]
 800612a:	4613      	mov	r3, r2
 800612c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d109      	bne.n	8006148 <xQueueGenericCreate+0x28>
 8006134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006138:	f383 8811 	msr	BASEPRI, r3
 800613c:	f3bf 8f6f 	isb	sy
 8006140:	f3bf 8f4f 	dsb	sy
 8006144:	613b      	str	r3, [r7, #16]
 8006146:	e7fe      	b.n	8006146 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d102      	bne.n	8006154 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800614e:	2300      	movs	r3, #0
 8006150:	61fb      	str	r3, [r7, #28]
 8006152:	e004      	b.n	800615e <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	68ba      	ldr	r2, [r7, #8]
 8006158:	fb02 f303 	mul.w	r3, r2, r3
 800615c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800615e:	69fb      	ldr	r3, [r7, #28]
 8006160:	3348      	adds	r3, #72	; 0x48
 8006162:	4618      	mov	r0, r3
 8006164:	f002 faec 	bl	8008740 <pvPortMalloc>
 8006168:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800616a:	69bb      	ldr	r3, [r7, #24]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d00f      	beq.n	8006190 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8006170:	69bb      	ldr	r3, [r7, #24]
 8006172:	3348      	adds	r3, #72	; 0x48
 8006174:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006176:	69bb      	ldr	r3, [r7, #24]
 8006178:	2200      	movs	r2, #0
 800617a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800617e:	79fa      	ldrb	r2, [r7, #7]
 8006180:	69bb      	ldr	r3, [r7, #24]
 8006182:	9300      	str	r3, [sp, #0]
 8006184:	4613      	mov	r3, r2
 8006186:	697a      	ldr	r2, [r7, #20]
 8006188:	68b9      	ldr	r1, [r7, #8]
 800618a:	68f8      	ldr	r0, [r7, #12]
 800618c:	f000 f805 	bl	800619a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006190:	69bb      	ldr	r3, [r7, #24]
	}
 8006192:	4618      	mov	r0, r3
 8006194:	3720      	adds	r7, #32
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}

0800619a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800619a:	b580      	push	{r7, lr}
 800619c:	b084      	sub	sp, #16
 800619e:	af00      	add	r7, sp, #0
 80061a0:	60f8      	str	r0, [r7, #12]
 80061a2:	60b9      	str	r1, [r7, #8]
 80061a4:	607a      	str	r2, [r7, #4]
 80061a6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d103      	bne.n	80061b6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80061ae:	69bb      	ldr	r3, [r7, #24]
 80061b0:	69ba      	ldr	r2, [r7, #24]
 80061b2:	601a      	str	r2, [r3, #0]
 80061b4:	e002      	b.n	80061bc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80061b6:	69bb      	ldr	r3, [r7, #24]
 80061b8:	687a      	ldr	r2, [r7, #4]
 80061ba:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80061bc:	69bb      	ldr	r3, [r7, #24]
 80061be:	68fa      	ldr	r2, [r7, #12]
 80061c0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80061c2:	69bb      	ldr	r3, [r7, #24]
 80061c4:	68ba      	ldr	r2, [r7, #8]
 80061c6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80061c8:	2101      	movs	r1, #1
 80061ca:	69b8      	ldr	r0, [r7, #24]
 80061cc:	f7ff fece 	bl	8005f6c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80061d0:	bf00      	nop
 80061d2:	3710      	adds	r7, #16
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}

080061d8 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b082      	sub	sp, #8
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d00e      	beq.n	8006204 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2200      	movs	r2, #0
 80061ea:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2200      	movs	r2, #0
 80061f0:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2200      	movs	r2, #0
 80061f6:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80061f8:	2300      	movs	r3, #0
 80061fa:	2200      	movs	r2, #0
 80061fc:	2100      	movs	r1, #0
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f000 f8a0 	bl	8006344 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006204:	bf00      	nop
 8006206:	3708      	adds	r7, #8
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}

0800620c <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800620c:	b580      	push	{r7, lr}
 800620e:	b086      	sub	sp, #24
 8006210:	af00      	add	r7, sp, #0
 8006212:	4603      	mov	r3, r0
 8006214:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006216:	2301      	movs	r3, #1
 8006218:	617b      	str	r3, [r7, #20]
 800621a:	2300      	movs	r3, #0
 800621c:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800621e:	79fb      	ldrb	r3, [r7, #7]
 8006220:	461a      	mov	r2, r3
 8006222:	6939      	ldr	r1, [r7, #16]
 8006224:	6978      	ldr	r0, [r7, #20]
 8006226:	f7ff ff7b 	bl	8006120 <xQueueGenericCreate>
 800622a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800622c:	68f8      	ldr	r0, [r7, #12]
 800622e:	f7ff ffd3 	bl	80061d8 <prvInitialiseMutex>

		return pxNewQueue;
 8006232:	68fb      	ldr	r3, [r7, #12]
	}
 8006234:	4618      	mov	r0, r3
 8006236:	3718      	adds	r7, #24
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}

0800623c <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800623c:	b580      	push	{r7, lr}
 800623e:	b088      	sub	sp, #32
 8006240:	af02      	add	r7, sp, #8
 8006242:	4603      	mov	r3, r0
 8006244:	6039      	str	r1, [r7, #0]
 8006246:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006248:	2301      	movs	r3, #1
 800624a:	617b      	str	r3, [r7, #20]
 800624c:	2300      	movs	r3, #0
 800624e:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006250:	79fb      	ldrb	r3, [r7, #7]
 8006252:	9300      	str	r3, [sp, #0]
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	2200      	movs	r2, #0
 8006258:	6939      	ldr	r1, [r7, #16]
 800625a:	6978      	ldr	r0, [r7, #20]
 800625c:	f7ff feee 	bl	800603c <xQueueGenericCreateStatic>
 8006260:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8006262:	68f8      	ldr	r0, [r7, #12]
 8006264:	f7ff ffb8 	bl	80061d8 <prvInitialiseMutex>

		return pxNewQueue;
 8006268:	68fb      	ldr	r3, [r7, #12]
	}
 800626a:	4618      	mov	r0, r3
 800626c:	3718      	adds	r7, #24
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}

08006272 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8006272:	b590      	push	{r4, r7, lr}
 8006274:	b087      	sub	sp, #28
 8006276:	af00      	add	r7, sp, #0
 8006278:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d109      	bne.n	8006298 <xQueueGiveMutexRecursive+0x26>
 8006284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006288:	f383 8811 	msr	BASEPRI, r3
 800628c:	f3bf 8f6f 	isb	sy
 8006290:	f3bf 8f4f 	dsb	sy
 8006294:	60fb      	str	r3, [r7, #12]
 8006296:	e7fe      	b.n	8006296 <xQueueGiveMutexRecursive+0x24>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	685c      	ldr	r4, [r3, #4]
 800629c:	f001 fc7c 	bl	8007b98 <xTaskGetCurrentTaskHandle>
 80062a0:	4603      	mov	r3, r0
 80062a2:	429c      	cmp	r4, r3
 80062a4:	d111      	bne.n	80062ca <xQueueGiveMutexRecursive+0x58>
			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.uxRecursiveCallCount )--;
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	68db      	ldr	r3, [r3, #12]
 80062aa:	1e5a      	subs	r2, r3, #1
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	68db      	ldr	r3, [r3, #12]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d105      	bne.n	80062c4 <xQueueGiveMutexRecursive+0x52>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80062b8:	2300      	movs	r3, #0
 80062ba:	2200      	movs	r2, #0
 80062bc:	2100      	movs	r1, #0
 80062be:	6938      	ldr	r0, [r7, #16]
 80062c0:	f000 f840 	bl	8006344 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80062c4:	2301      	movs	r3, #1
 80062c6:	617b      	str	r3, [r7, #20]
 80062c8:	e001      	b.n	80062ce <xQueueGiveMutexRecursive+0x5c>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80062ca:	2300      	movs	r3, #0
 80062cc:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80062ce:	697b      	ldr	r3, [r7, #20]
	}
 80062d0:	4618      	mov	r0, r3
 80062d2:	371c      	adds	r7, #28
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd90      	pop	{r4, r7, pc}

080062d8 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80062d8:	b590      	push	{r4, r7, lr}
 80062da:	b087      	sub	sp, #28
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
 80062e0:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d109      	bne.n	8006300 <xQueueTakeMutexRecursive+0x28>
 80062ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062f0:	f383 8811 	msr	BASEPRI, r3
 80062f4:	f3bf 8f6f 	isb	sy
 80062f8:	f3bf 8f4f 	dsb	sy
 80062fc:	60fb      	str	r3, [r7, #12]
 80062fe:	e7fe      	b.n	80062fe <xQueueTakeMutexRecursive+0x26>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	685c      	ldr	r4, [r3, #4]
 8006304:	f001 fc48 	bl	8007b98 <xTaskGetCurrentTaskHandle>
 8006308:	4603      	mov	r3, r0
 800630a:	429c      	cmp	r4, r3
 800630c:	d107      	bne.n	800631e <xQueueTakeMutexRecursive+0x46>
		{
			( pxMutex->u.uxRecursiveCallCount )++;
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	68db      	ldr	r3, [r3, #12]
 8006312:	1c5a      	adds	r2, r3, #1
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8006318:	2301      	movs	r3, #1
 800631a:	617b      	str	r3, [r7, #20]
 800631c:	e00c      	b.n	8006338 <xQueueTakeMutexRecursive+0x60>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800631e:	6839      	ldr	r1, [r7, #0]
 8006320:	6938      	ldr	r0, [r7, #16]
 8006322:	f000 fb03 	bl	800692c <xQueueSemaphoreTake>
 8006326:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d004      	beq.n	8006338 <xQueueTakeMutexRecursive+0x60>
			{
				( pxMutex->u.uxRecursiveCallCount )++;
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	68db      	ldr	r3, [r3, #12]
 8006332:	1c5a      	adds	r2, r3, #1
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8006338:	697b      	ldr	r3, [r7, #20]
	}
 800633a:	4618      	mov	r0, r3
 800633c:	371c      	adds	r7, #28
 800633e:	46bd      	mov	sp, r7
 8006340:	bd90      	pop	{r4, r7, pc}
	...

08006344 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b08e      	sub	sp, #56	; 0x38
 8006348:	af00      	add	r7, sp, #0
 800634a:	60f8      	str	r0, [r7, #12]
 800634c:	60b9      	str	r1, [r7, #8]
 800634e:	607a      	str	r2, [r7, #4]
 8006350:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006352:	2300      	movs	r3, #0
 8006354:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800635a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800635c:	2b00      	cmp	r3, #0
 800635e:	d109      	bne.n	8006374 <xQueueGenericSend+0x30>
 8006360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006364:	f383 8811 	msr	BASEPRI, r3
 8006368:	f3bf 8f6f 	isb	sy
 800636c:	f3bf 8f4f 	dsb	sy
 8006370:	62bb      	str	r3, [r7, #40]	; 0x28
 8006372:	e7fe      	b.n	8006372 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d103      	bne.n	8006382 <xQueueGenericSend+0x3e>
 800637a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800637c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800637e:	2b00      	cmp	r3, #0
 8006380:	d101      	bne.n	8006386 <xQueueGenericSend+0x42>
 8006382:	2301      	movs	r3, #1
 8006384:	e000      	b.n	8006388 <xQueueGenericSend+0x44>
 8006386:	2300      	movs	r3, #0
 8006388:	2b00      	cmp	r3, #0
 800638a:	d109      	bne.n	80063a0 <xQueueGenericSend+0x5c>
 800638c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006390:	f383 8811 	msr	BASEPRI, r3
 8006394:	f3bf 8f6f 	isb	sy
 8006398:	f3bf 8f4f 	dsb	sy
 800639c:	627b      	str	r3, [r7, #36]	; 0x24
 800639e:	e7fe      	b.n	800639e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	2b02      	cmp	r3, #2
 80063a4:	d103      	bne.n	80063ae <xQueueGenericSend+0x6a>
 80063a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063aa:	2b01      	cmp	r3, #1
 80063ac:	d101      	bne.n	80063b2 <xQueueGenericSend+0x6e>
 80063ae:	2301      	movs	r3, #1
 80063b0:	e000      	b.n	80063b4 <xQueueGenericSend+0x70>
 80063b2:	2300      	movs	r3, #0
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d109      	bne.n	80063cc <xQueueGenericSend+0x88>
 80063b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063bc:	f383 8811 	msr	BASEPRI, r3
 80063c0:	f3bf 8f6f 	isb	sy
 80063c4:	f3bf 8f4f 	dsb	sy
 80063c8:	623b      	str	r3, [r7, #32]
 80063ca:	e7fe      	b.n	80063ca <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80063cc:	f001 fbf4 	bl	8007bb8 <xTaskGetSchedulerState>
 80063d0:	4603      	mov	r3, r0
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d102      	bne.n	80063dc <xQueueGenericSend+0x98>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d101      	bne.n	80063e0 <xQueueGenericSend+0x9c>
 80063dc:	2301      	movs	r3, #1
 80063de:	e000      	b.n	80063e2 <xQueueGenericSend+0x9e>
 80063e0:	2300      	movs	r3, #0
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d109      	bne.n	80063fa <xQueueGenericSend+0xb6>
 80063e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ea:	f383 8811 	msr	BASEPRI, r3
 80063ee:	f3bf 8f6f 	isb	sy
 80063f2:	f3bf 8f4f 	dsb	sy
 80063f6:	61fb      	str	r3, [r7, #28]
 80063f8:	e7fe      	b.n	80063f8 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80063fa:	f002 f887 	bl	800850c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80063fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006400:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006404:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006406:	429a      	cmp	r2, r3
 8006408:	d302      	bcc.n	8006410 <xQueueGenericSend+0xcc>
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	2b02      	cmp	r3, #2
 800640e:	d129      	bne.n	8006464 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006410:	683a      	ldr	r2, [r7, #0]
 8006412:	68b9      	ldr	r1, [r7, #8]
 8006414:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006416:	f000 fc26 	bl	8006c66 <prvCopyDataToQueue>
 800641a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800641c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800641e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006420:	2b00      	cmp	r3, #0
 8006422:	d010      	beq.n	8006446 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006426:	3324      	adds	r3, #36	; 0x24
 8006428:	4618      	mov	r0, r3
 800642a:	f001 f9f7 	bl	800781c <xTaskRemoveFromEventList>
 800642e:	4603      	mov	r3, r0
 8006430:	2b00      	cmp	r3, #0
 8006432:	d013      	beq.n	800645c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006434:	4b3f      	ldr	r3, [pc, #252]	; (8006534 <xQueueGenericSend+0x1f0>)
 8006436:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800643a:	601a      	str	r2, [r3, #0]
 800643c:	f3bf 8f4f 	dsb	sy
 8006440:	f3bf 8f6f 	isb	sy
 8006444:	e00a      	b.n	800645c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006448:	2b00      	cmp	r3, #0
 800644a:	d007      	beq.n	800645c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800644c:	4b39      	ldr	r3, [pc, #228]	; (8006534 <xQueueGenericSend+0x1f0>)
 800644e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006452:	601a      	str	r2, [r3, #0]
 8006454:	f3bf 8f4f 	dsb	sy
 8006458:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800645c:	f002 f884 	bl	8008568 <vPortExitCritical>
				return pdPASS;
 8006460:	2301      	movs	r3, #1
 8006462:	e063      	b.n	800652c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d103      	bne.n	8006472 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800646a:	f002 f87d 	bl	8008568 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800646e:	2300      	movs	r3, #0
 8006470:	e05c      	b.n	800652c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006474:	2b00      	cmp	r3, #0
 8006476:	d106      	bne.n	8006486 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006478:	f107 0314 	add.w	r3, r7, #20
 800647c:	4618      	mov	r0, r3
 800647e:	f001 fa2f 	bl	80078e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006482:	2301      	movs	r3, #1
 8006484:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006486:	f002 f86f 	bl	8008568 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800648a:	f000 ff9b 	bl	80073c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800648e:	f002 f83d 	bl	800850c <vPortEnterCritical>
 8006492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006494:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006498:	b25b      	sxtb	r3, r3
 800649a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800649e:	d103      	bne.n	80064a8 <xQueueGenericSend+0x164>
 80064a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a2:	2200      	movs	r2, #0
 80064a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80064ae:	b25b      	sxtb	r3, r3
 80064b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064b4:	d103      	bne.n	80064be <xQueueGenericSend+0x17a>
 80064b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064b8:	2200      	movs	r2, #0
 80064ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80064be:	f002 f853 	bl	8008568 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80064c2:	1d3a      	adds	r2, r7, #4
 80064c4:	f107 0314 	add.w	r3, r7, #20
 80064c8:	4611      	mov	r1, r2
 80064ca:	4618      	mov	r0, r3
 80064cc:	f001 fa1e 	bl	800790c <xTaskCheckForTimeOut>
 80064d0:	4603      	mov	r3, r0
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d124      	bne.n	8006520 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80064d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80064d8:	f000 fcbd 	bl	8006e56 <prvIsQueueFull>
 80064dc:	4603      	mov	r3, r0
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d018      	beq.n	8006514 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80064e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064e4:	3310      	adds	r3, #16
 80064e6:	687a      	ldr	r2, [r7, #4]
 80064e8:	4611      	mov	r1, r2
 80064ea:	4618      	mov	r0, r3
 80064ec:	f001 f972 	bl	80077d4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80064f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80064f2:	f000 fc48 	bl	8006d86 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80064f6:	f000 ff73 	bl	80073e0 <xTaskResumeAll>
 80064fa:	4603      	mov	r3, r0
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	f47f af7c 	bne.w	80063fa <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8006502:	4b0c      	ldr	r3, [pc, #48]	; (8006534 <xQueueGenericSend+0x1f0>)
 8006504:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006508:	601a      	str	r2, [r3, #0]
 800650a:	f3bf 8f4f 	dsb	sy
 800650e:	f3bf 8f6f 	isb	sy
 8006512:	e772      	b.n	80063fa <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006514:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006516:	f000 fc36 	bl	8006d86 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800651a:	f000 ff61 	bl	80073e0 <xTaskResumeAll>
 800651e:	e76c      	b.n	80063fa <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006520:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006522:	f000 fc30 	bl	8006d86 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006526:	f000 ff5b 	bl	80073e0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800652a:	2300      	movs	r3, #0
		}
	}
}
 800652c:	4618      	mov	r0, r3
 800652e:	3738      	adds	r7, #56	; 0x38
 8006530:	46bd      	mov	sp, r7
 8006532:	bd80      	pop	{r7, pc}
 8006534:	e000ed04 	.word	0xe000ed04

08006538 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b08e      	sub	sp, #56	; 0x38
 800653c:	af00      	add	r7, sp, #0
 800653e:	60f8      	str	r0, [r7, #12]
 8006540:	60b9      	str	r1, [r7, #8]
 8006542:	607a      	str	r2, [r7, #4]
 8006544:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800654a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800654c:	2b00      	cmp	r3, #0
 800654e:	d109      	bne.n	8006564 <xQueueGenericSendFromISR+0x2c>
 8006550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006554:	f383 8811 	msr	BASEPRI, r3
 8006558:	f3bf 8f6f 	isb	sy
 800655c:	f3bf 8f4f 	dsb	sy
 8006560:	627b      	str	r3, [r7, #36]	; 0x24
 8006562:	e7fe      	b.n	8006562 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d103      	bne.n	8006572 <xQueueGenericSendFromISR+0x3a>
 800656a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800656c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800656e:	2b00      	cmp	r3, #0
 8006570:	d101      	bne.n	8006576 <xQueueGenericSendFromISR+0x3e>
 8006572:	2301      	movs	r3, #1
 8006574:	e000      	b.n	8006578 <xQueueGenericSendFromISR+0x40>
 8006576:	2300      	movs	r3, #0
 8006578:	2b00      	cmp	r3, #0
 800657a:	d109      	bne.n	8006590 <xQueueGenericSendFromISR+0x58>
 800657c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006580:	f383 8811 	msr	BASEPRI, r3
 8006584:	f3bf 8f6f 	isb	sy
 8006588:	f3bf 8f4f 	dsb	sy
 800658c:	623b      	str	r3, [r7, #32]
 800658e:	e7fe      	b.n	800658e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	2b02      	cmp	r3, #2
 8006594:	d103      	bne.n	800659e <xQueueGenericSendFromISR+0x66>
 8006596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006598:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800659a:	2b01      	cmp	r3, #1
 800659c:	d101      	bne.n	80065a2 <xQueueGenericSendFromISR+0x6a>
 800659e:	2301      	movs	r3, #1
 80065a0:	e000      	b.n	80065a4 <xQueueGenericSendFromISR+0x6c>
 80065a2:	2300      	movs	r3, #0
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d109      	bne.n	80065bc <xQueueGenericSendFromISR+0x84>
 80065a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ac:	f383 8811 	msr	BASEPRI, r3
 80065b0:	f3bf 8f6f 	isb	sy
 80065b4:	f3bf 8f4f 	dsb	sy
 80065b8:	61fb      	str	r3, [r7, #28]
 80065ba:	e7fe      	b.n	80065ba <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80065bc:	f002 f882 	bl	80086c4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80065c0:	f3ef 8211 	mrs	r2, BASEPRI
 80065c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065c8:	f383 8811 	msr	BASEPRI, r3
 80065cc:	f3bf 8f6f 	isb	sy
 80065d0:	f3bf 8f4f 	dsb	sy
 80065d4:	61ba      	str	r2, [r7, #24]
 80065d6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80065d8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80065da:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80065dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065e4:	429a      	cmp	r2, r3
 80065e6:	d302      	bcc.n	80065ee <xQueueGenericSendFromISR+0xb6>
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	2b02      	cmp	r3, #2
 80065ec:	d12c      	bne.n	8006648 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80065ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80065f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80065f8:	683a      	ldr	r2, [r7, #0]
 80065fa:	68b9      	ldr	r1, [r7, #8]
 80065fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80065fe:	f000 fb32 	bl	8006c66 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006602:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800660a:	d112      	bne.n	8006632 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800660c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800660e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006610:	2b00      	cmp	r3, #0
 8006612:	d016      	beq.n	8006642 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006616:	3324      	adds	r3, #36	; 0x24
 8006618:	4618      	mov	r0, r3
 800661a:	f001 f8ff 	bl	800781c <xTaskRemoveFromEventList>
 800661e:	4603      	mov	r3, r0
 8006620:	2b00      	cmp	r3, #0
 8006622:	d00e      	beq.n	8006642 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d00b      	beq.n	8006642 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2201      	movs	r2, #1
 800662e:	601a      	str	r2, [r3, #0]
 8006630:	e007      	b.n	8006642 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006632:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006636:	3301      	adds	r3, #1
 8006638:	b2db      	uxtb	r3, r3
 800663a:	b25a      	sxtb	r2, r3
 800663c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800663e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006642:	2301      	movs	r3, #1
 8006644:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006646:	e001      	b.n	800664c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006648:	2300      	movs	r3, #0
 800664a:	637b      	str	r3, [r7, #52]	; 0x34
 800664c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800664e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006658:	4618      	mov	r0, r3
 800665a:	3738      	adds	r7, #56	; 0x38
 800665c:	46bd      	mov	sp, r7
 800665e:	bd80      	pop	{r7, pc}

08006660 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b08e      	sub	sp, #56	; 0x38
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
 8006668:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800666e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006670:	2b00      	cmp	r3, #0
 8006672:	d109      	bne.n	8006688 <xQueueGiveFromISR+0x28>
	__asm volatile
 8006674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006678:	f383 8811 	msr	BASEPRI, r3
 800667c:	f3bf 8f6f 	isb	sy
 8006680:	f3bf 8f4f 	dsb	sy
 8006684:	623b      	str	r3, [r7, #32]
 8006686:	e7fe      	b.n	8006686 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800668a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800668c:	2b00      	cmp	r3, #0
 800668e:	d009      	beq.n	80066a4 <xQueueGiveFromISR+0x44>
 8006690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006694:	f383 8811 	msr	BASEPRI, r3
 8006698:	f3bf 8f6f 	isb	sy
 800669c:	f3bf 8f4f 	dsb	sy
 80066a0:	61fb      	str	r3, [r7, #28]
 80066a2:	e7fe      	b.n	80066a2 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80066a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d103      	bne.n	80066b4 <xQueueGiveFromISR+0x54>
 80066ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d101      	bne.n	80066b8 <xQueueGiveFromISR+0x58>
 80066b4:	2301      	movs	r3, #1
 80066b6:	e000      	b.n	80066ba <xQueueGiveFromISR+0x5a>
 80066b8:	2300      	movs	r3, #0
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d109      	bne.n	80066d2 <xQueueGiveFromISR+0x72>
 80066be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066c2:	f383 8811 	msr	BASEPRI, r3
 80066c6:	f3bf 8f6f 	isb	sy
 80066ca:	f3bf 8f4f 	dsb	sy
 80066ce:	61bb      	str	r3, [r7, #24]
 80066d0:	e7fe      	b.n	80066d0 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80066d2:	f001 fff7 	bl	80086c4 <vPortValidateInterruptPriority>
	__asm volatile
 80066d6:	f3ef 8211 	mrs	r2, BASEPRI
 80066da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066de:	f383 8811 	msr	BASEPRI, r3
 80066e2:	f3bf 8f6f 	isb	sy
 80066e6:	f3bf 8f4f 	dsb	sy
 80066ea:	617a      	str	r2, [r7, #20]
 80066ec:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80066ee:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80066f0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80066f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066f6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80066f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066fe:	429a      	cmp	r2, r3
 8006700:	d22b      	bcs.n	800675a <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006704:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006708:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800670c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800670e:	1c5a      	adds	r2, r3, #1
 8006710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006712:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006714:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800671c:	d112      	bne.n	8006744 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800671e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006722:	2b00      	cmp	r3, #0
 8006724:	d016      	beq.n	8006754 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006728:	3324      	adds	r3, #36	; 0x24
 800672a:	4618      	mov	r0, r3
 800672c:	f001 f876 	bl	800781c <xTaskRemoveFromEventList>
 8006730:	4603      	mov	r3, r0
 8006732:	2b00      	cmp	r3, #0
 8006734:	d00e      	beq.n	8006754 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d00b      	beq.n	8006754 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	2201      	movs	r2, #1
 8006740:	601a      	str	r2, [r3, #0]
 8006742:	e007      	b.n	8006754 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006744:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006748:	3301      	adds	r3, #1
 800674a:	b2db      	uxtb	r3, r3
 800674c:	b25a      	sxtb	r2, r3
 800674e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006750:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006754:	2301      	movs	r3, #1
 8006756:	637b      	str	r3, [r7, #52]	; 0x34
 8006758:	e001      	b.n	800675e <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800675a:	2300      	movs	r3, #0
 800675c:	637b      	str	r3, [r7, #52]	; 0x34
 800675e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006760:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800676a:	4618      	mov	r0, r3
 800676c:	3738      	adds	r7, #56	; 0x38
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}
	...

08006774 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b08c      	sub	sp, #48	; 0x30
 8006778:	af00      	add	r7, sp, #0
 800677a:	60f8      	str	r0, [r7, #12]
 800677c:	60b9      	str	r1, [r7, #8]
 800677e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006780:	2300      	movs	r3, #0
 8006782:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800678a:	2b00      	cmp	r3, #0
 800678c:	d109      	bne.n	80067a2 <xQueueReceive+0x2e>
	__asm volatile
 800678e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006792:	f383 8811 	msr	BASEPRI, r3
 8006796:	f3bf 8f6f 	isb	sy
 800679a:	f3bf 8f4f 	dsb	sy
 800679e:	623b      	str	r3, [r7, #32]
 80067a0:	e7fe      	b.n	80067a0 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d103      	bne.n	80067b0 <xQueueReceive+0x3c>
 80067a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d101      	bne.n	80067b4 <xQueueReceive+0x40>
 80067b0:	2301      	movs	r3, #1
 80067b2:	e000      	b.n	80067b6 <xQueueReceive+0x42>
 80067b4:	2300      	movs	r3, #0
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d109      	bne.n	80067ce <xQueueReceive+0x5a>
 80067ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067be:	f383 8811 	msr	BASEPRI, r3
 80067c2:	f3bf 8f6f 	isb	sy
 80067c6:	f3bf 8f4f 	dsb	sy
 80067ca:	61fb      	str	r3, [r7, #28]
 80067cc:	e7fe      	b.n	80067cc <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80067ce:	f001 f9f3 	bl	8007bb8 <xTaskGetSchedulerState>
 80067d2:	4603      	mov	r3, r0
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d102      	bne.n	80067de <xQueueReceive+0x6a>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d101      	bne.n	80067e2 <xQueueReceive+0x6e>
 80067de:	2301      	movs	r3, #1
 80067e0:	e000      	b.n	80067e4 <xQueueReceive+0x70>
 80067e2:	2300      	movs	r3, #0
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d109      	bne.n	80067fc <xQueueReceive+0x88>
 80067e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ec:	f383 8811 	msr	BASEPRI, r3
 80067f0:	f3bf 8f6f 	isb	sy
 80067f4:	f3bf 8f4f 	dsb	sy
 80067f8:	61bb      	str	r3, [r7, #24]
 80067fa:	e7fe      	b.n	80067fa <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80067fc:	f001 fe86 	bl	800850c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006804:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006808:	2b00      	cmp	r3, #0
 800680a:	d01f      	beq.n	800684c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800680c:	68b9      	ldr	r1, [r7, #8]
 800680e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006810:	f000 fa93 	bl	8006d3a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006816:	1e5a      	subs	r2, r3, #1
 8006818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800681a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800681c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800681e:	691b      	ldr	r3, [r3, #16]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d00f      	beq.n	8006844 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006826:	3310      	adds	r3, #16
 8006828:	4618      	mov	r0, r3
 800682a:	f000 fff7 	bl	800781c <xTaskRemoveFromEventList>
 800682e:	4603      	mov	r3, r0
 8006830:	2b00      	cmp	r3, #0
 8006832:	d007      	beq.n	8006844 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006834:	4b3c      	ldr	r3, [pc, #240]	; (8006928 <xQueueReceive+0x1b4>)
 8006836:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800683a:	601a      	str	r2, [r3, #0]
 800683c:	f3bf 8f4f 	dsb	sy
 8006840:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006844:	f001 fe90 	bl	8008568 <vPortExitCritical>
				return pdPASS;
 8006848:	2301      	movs	r3, #1
 800684a:	e069      	b.n	8006920 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d103      	bne.n	800685a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006852:	f001 fe89 	bl	8008568 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006856:	2300      	movs	r3, #0
 8006858:	e062      	b.n	8006920 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800685a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800685c:	2b00      	cmp	r3, #0
 800685e:	d106      	bne.n	800686e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006860:	f107 0310 	add.w	r3, r7, #16
 8006864:	4618      	mov	r0, r3
 8006866:	f001 f83b 	bl	80078e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800686a:	2301      	movs	r3, #1
 800686c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800686e:	f001 fe7b 	bl	8008568 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006872:	f000 fda7 	bl	80073c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006876:	f001 fe49 	bl	800850c <vPortEnterCritical>
 800687a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800687c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006880:	b25b      	sxtb	r3, r3
 8006882:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006886:	d103      	bne.n	8006890 <xQueueReceive+0x11c>
 8006888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800688a:	2200      	movs	r2, #0
 800688c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006892:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006896:	b25b      	sxtb	r3, r3
 8006898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800689c:	d103      	bne.n	80068a6 <xQueueReceive+0x132>
 800689e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068a0:	2200      	movs	r2, #0
 80068a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80068a6:	f001 fe5f 	bl	8008568 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80068aa:	1d3a      	adds	r2, r7, #4
 80068ac:	f107 0310 	add.w	r3, r7, #16
 80068b0:	4611      	mov	r1, r2
 80068b2:	4618      	mov	r0, r3
 80068b4:	f001 f82a 	bl	800790c <xTaskCheckForTimeOut>
 80068b8:	4603      	mov	r3, r0
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d123      	bne.n	8006906 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80068be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80068c0:	f000 fab3 	bl	8006e2a <prvIsQueueEmpty>
 80068c4:	4603      	mov	r3, r0
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d017      	beq.n	80068fa <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80068ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068cc:	3324      	adds	r3, #36	; 0x24
 80068ce:	687a      	ldr	r2, [r7, #4]
 80068d0:	4611      	mov	r1, r2
 80068d2:	4618      	mov	r0, r3
 80068d4:	f000 ff7e 	bl	80077d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80068d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80068da:	f000 fa54 	bl	8006d86 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80068de:	f000 fd7f 	bl	80073e0 <xTaskResumeAll>
 80068e2:	4603      	mov	r3, r0
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d189      	bne.n	80067fc <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80068e8:	4b0f      	ldr	r3, [pc, #60]	; (8006928 <xQueueReceive+0x1b4>)
 80068ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068ee:	601a      	str	r2, [r3, #0]
 80068f0:	f3bf 8f4f 	dsb	sy
 80068f4:	f3bf 8f6f 	isb	sy
 80068f8:	e780      	b.n	80067fc <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80068fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80068fc:	f000 fa43 	bl	8006d86 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006900:	f000 fd6e 	bl	80073e0 <xTaskResumeAll>
 8006904:	e77a      	b.n	80067fc <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006906:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006908:	f000 fa3d 	bl	8006d86 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800690c:	f000 fd68 	bl	80073e0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006910:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006912:	f000 fa8a 	bl	8006e2a <prvIsQueueEmpty>
 8006916:	4603      	mov	r3, r0
 8006918:	2b00      	cmp	r3, #0
 800691a:	f43f af6f 	beq.w	80067fc <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800691e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8006920:	4618      	mov	r0, r3
 8006922:	3730      	adds	r7, #48	; 0x30
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}
 8006928:	e000ed04 	.word	0xe000ed04

0800692c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b08e      	sub	sp, #56	; 0x38
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
 8006934:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006936:	2300      	movs	r3, #0
 8006938:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800693e:	2300      	movs	r3, #0
 8006940:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006944:	2b00      	cmp	r3, #0
 8006946:	d109      	bne.n	800695c <xQueueSemaphoreTake+0x30>
 8006948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800694c:	f383 8811 	msr	BASEPRI, r3
 8006950:	f3bf 8f6f 	isb	sy
 8006954:	f3bf 8f4f 	dsb	sy
 8006958:	623b      	str	r3, [r7, #32]
 800695a:	e7fe      	b.n	800695a <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800695c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800695e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006960:	2b00      	cmp	r3, #0
 8006962:	d009      	beq.n	8006978 <xQueueSemaphoreTake+0x4c>
 8006964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006968:	f383 8811 	msr	BASEPRI, r3
 800696c:	f3bf 8f6f 	isb	sy
 8006970:	f3bf 8f4f 	dsb	sy
 8006974:	61fb      	str	r3, [r7, #28]
 8006976:	e7fe      	b.n	8006976 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006978:	f001 f91e 	bl	8007bb8 <xTaskGetSchedulerState>
 800697c:	4603      	mov	r3, r0
 800697e:	2b00      	cmp	r3, #0
 8006980:	d102      	bne.n	8006988 <xQueueSemaphoreTake+0x5c>
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d101      	bne.n	800698c <xQueueSemaphoreTake+0x60>
 8006988:	2301      	movs	r3, #1
 800698a:	e000      	b.n	800698e <xQueueSemaphoreTake+0x62>
 800698c:	2300      	movs	r3, #0
 800698e:	2b00      	cmp	r3, #0
 8006990:	d109      	bne.n	80069a6 <xQueueSemaphoreTake+0x7a>
 8006992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006996:	f383 8811 	msr	BASEPRI, r3
 800699a:	f3bf 8f6f 	isb	sy
 800699e:	f3bf 8f4f 	dsb	sy
 80069a2:	61bb      	str	r3, [r7, #24]
 80069a4:	e7fe      	b.n	80069a4 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80069a6:	f001 fdb1 	bl	800850c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80069aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ae:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80069b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d024      	beq.n	8006a00 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80069b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069b8:	1e5a      	subs	r2, r3, #1
 80069ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069bc:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80069be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d104      	bne.n	80069d0 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80069c6:	f001 fabd 	bl	8007f44 <pvTaskIncrementMutexHeldCount>
 80069ca:	4602      	mov	r2, r0
 80069cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069ce:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80069d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069d2:	691b      	ldr	r3, [r3, #16]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d00f      	beq.n	80069f8 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80069d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069da:	3310      	adds	r3, #16
 80069dc:	4618      	mov	r0, r3
 80069de:	f000 ff1d 	bl	800781c <xTaskRemoveFromEventList>
 80069e2:	4603      	mov	r3, r0
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d007      	beq.n	80069f8 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80069e8:	4b53      	ldr	r3, [pc, #332]	; (8006b38 <xQueueSemaphoreTake+0x20c>)
 80069ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069ee:	601a      	str	r2, [r3, #0]
 80069f0:	f3bf 8f4f 	dsb	sy
 80069f4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80069f8:	f001 fdb6 	bl	8008568 <vPortExitCritical>
				return pdPASS;
 80069fc:	2301      	movs	r3, #1
 80069fe:	e096      	b.n	8006b2e <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d110      	bne.n	8006a28 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d009      	beq.n	8006a20 <xQueueSemaphoreTake+0xf4>
 8006a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a10:	f383 8811 	msr	BASEPRI, r3
 8006a14:	f3bf 8f6f 	isb	sy
 8006a18:	f3bf 8f4f 	dsb	sy
 8006a1c:	617b      	str	r3, [r7, #20]
 8006a1e:	e7fe      	b.n	8006a1e <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006a20:	f001 fda2 	bl	8008568 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006a24:	2300      	movs	r3, #0
 8006a26:	e082      	b.n	8006b2e <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006a28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d106      	bne.n	8006a3c <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006a2e:	f107 030c 	add.w	r3, r7, #12
 8006a32:	4618      	mov	r0, r3
 8006a34:	f000 ff54 	bl	80078e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006a38:	2301      	movs	r3, #1
 8006a3a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006a3c:	f001 fd94 	bl	8008568 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006a40:	f000 fcc0 	bl	80073c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006a44:	f001 fd62 	bl	800850c <vPortEnterCritical>
 8006a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a4a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006a4e:	b25b      	sxtb	r3, r3
 8006a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a54:	d103      	bne.n	8006a5e <xQueueSemaphoreTake+0x132>
 8006a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a58:	2200      	movs	r2, #0
 8006a5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a64:	b25b      	sxtb	r3, r3
 8006a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a6a:	d103      	bne.n	8006a74 <xQueueSemaphoreTake+0x148>
 8006a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a6e:	2200      	movs	r2, #0
 8006a70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006a74:	f001 fd78 	bl	8008568 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006a78:	463a      	mov	r2, r7
 8006a7a:	f107 030c 	add.w	r3, r7, #12
 8006a7e:	4611      	mov	r1, r2
 8006a80:	4618      	mov	r0, r3
 8006a82:	f000 ff43 	bl	800790c <xTaskCheckForTimeOut>
 8006a86:	4603      	mov	r3, r0
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d132      	bne.n	8006af2 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006a8c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006a8e:	f000 f9cc 	bl	8006e2a <prvIsQueueEmpty>
 8006a92:	4603      	mov	r3, r0
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d026      	beq.n	8006ae6 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d109      	bne.n	8006ab4 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8006aa0:	f001 fd34 	bl	800850c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8006aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	f001 f8a3 	bl	8007bf4 <xTaskPriorityInherit>
 8006aae:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006ab0:	f001 fd5a 	bl	8008568 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ab6:	3324      	adds	r3, #36	; 0x24
 8006ab8:	683a      	ldr	r2, [r7, #0]
 8006aba:	4611      	mov	r1, r2
 8006abc:	4618      	mov	r0, r3
 8006abe:	f000 fe89 	bl	80077d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006ac2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006ac4:	f000 f95f 	bl	8006d86 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006ac8:	f000 fc8a 	bl	80073e0 <xTaskResumeAll>
 8006acc:	4603      	mov	r3, r0
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	f47f af69 	bne.w	80069a6 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8006ad4:	4b18      	ldr	r3, [pc, #96]	; (8006b38 <xQueueSemaphoreTake+0x20c>)
 8006ad6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ada:	601a      	str	r2, [r3, #0]
 8006adc:	f3bf 8f4f 	dsb	sy
 8006ae0:	f3bf 8f6f 	isb	sy
 8006ae4:	e75f      	b.n	80069a6 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006ae6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006ae8:	f000 f94d 	bl	8006d86 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006aec:	f000 fc78 	bl	80073e0 <xTaskResumeAll>
 8006af0:	e759      	b.n	80069a6 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006af2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006af4:	f000 f947 	bl	8006d86 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006af8:	f000 fc72 	bl	80073e0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006afc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006afe:	f000 f994 	bl	8006e2a <prvIsQueueEmpty>
 8006b02:	4603      	mov	r3, r0
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	f43f af4e 	beq.w	80069a6 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d00d      	beq.n	8006b2c <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8006b10:	f001 fcfc 	bl	800850c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006b14:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006b16:	f000 f88e 	bl	8006c36 <prvGetDisinheritPriorityAfterTimeout>
 8006b1a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8006b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006b22:	4618      	mov	r0, r3
 8006b24:	f001 f970 	bl	8007e08 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006b28:	f001 fd1e 	bl	8008568 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006b2c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	3738      	adds	r7, #56	; 0x38
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}
 8006b36:	bf00      	nop
 8006b38:	e000ed04 	.word	0xe000ed04

08006b3c <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b08e      	sub	sp, #56	; 0x38
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	60f8      	str	r0, [r7, #12]
 8006b44:	60b9      	str	r1, [r7, #8]
 8006b46:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d109      	bne.n	8006b66 <xQueueReceiveFromISR+0x2a>
 8006b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b56:	f383 8811 	msr	BASEPRI, r3
 8006b5a:	f3bf 8f6f 	isb	sy
 8006b5e:	f3bf 8f4f 	dsb	sy
 8006b62:	623b      	str	r3, [r7, #32]
 8006b64:	e7fe      	b.n	8006b64 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d103      	bne.n	8006b74 <xQueueReceiveFromISR+0x38>
 8006b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d101      	bne.n	8006b78 <xQueueReceiveFromISR+0x3c>
 8006b74:	2301      	movs	r3, #1
 8006b76:	e000      	b.n	8006b7a <xQueueReceiveFromISR+0x3e>
 8006b78:	2300      	movs	r3, #0
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d109      	bne.n	8006b92 <xQueueReceiveFromISR+0x56>
 8006b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b82:	f383 8811 	msr	BASEPRI, r3
 8006b86:	f3bf 8f6f 	isb	sy
 8006b8a:	f3bf 8f4f 	dsb	sy
 8006b8e:	61fb      	str	r3, [r7, #28]
 8006b90:	e7fe      	b.n	8006b90 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006b92:	f001 fd97 	bl	80086c4 <vPortValidateInterruptPriority>
	__asm volatile
 8006b96:	f3ef 8211 	mrs	r2, BASEPRI
 8006b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b9e:	f383 8811 	msr	BASEPRI, r3
 8006ba2:	f3bf 8f6f 	isb	sy
 8006ba6:	f3bf 8f4f 	dsb	sy
 8006baa:	61ba      	str	r2, [r7, #24]
 8006bac:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006bae:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bb6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d02f      	beq.n	8006c1e <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bc0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006bc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006bc8:	68b9      	ldr	r1, [r7, #8]
 8006bca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006bcc:	f000 f8b5 	bl	8006d3a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bd2:	1e5a      	subs	r2, r3, #1
 8006bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bd6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006bd8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006be0:	d112      	bne.n	8006c08 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006be4:	691b      	ldr	r3, [r3, #16]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d016      	beq.n	8006c18 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bec:	3310      	adds	r3, #16
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f000 fe14 	bl	800781c <xTaskRemoveFromEventList>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d00e      	beq.n	8006c18 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d00b      	beq.n	8006c18 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2201      	movs	r2, #1
 8006c04:	601a      	str	r2, [r3, #0]
 8006c06:	e007      	b.n	8006c18 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006c08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c0c:	3301      	adds	r3, #1
 8006c0e:	b2db      	uxtb	r3, r3
 8006c10:	b25a      	sxtb	r2, r3
 8006c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006c18:	2301      	movs	r3, #1
 8006c1a:	637b      	str	r3, [r7, #52]	; 0x34
 8006c1c:	e001      	b.n	8006c22 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8006c1e:	2300      	movs	r3, #0
 8006c20:	637b      	str	r3, [r7, #52]	; 0x34
 8006c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c24:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006c2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	3738      	adds	r7, #56	; 0x38
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}

08006c36 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006c36:	b480      	push	{r7}
 8006c38:	b085      	sub	sp, #20
 8006c3a:	af00      	add	r7, sp, #0
 8006c3c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d006      	beq.n	8006c54 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f1c3 0307 	rsb	r3, r3, #7
 8006c50:	60fb      	str	r3, [r7, #12]
 8006c52:	e001      	b.n	8006c58 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006c54:	2300      	movs	r3, #0
 8006c56:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006c58:	68fb      	ldr	r3, [r7, #12]
	}
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	3714      	adds	r7, #20
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c64:	4770      	bx	lr

08006c66 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006c66:	b580      	push	{r7, lr}
 8006c68:	b086      	sub	sp, #24
 8006c6a:	af00      	add	r7, sp, #0
 8006c6c:	60f8      	str	r0, [r7, #12]
 8006c6e:	60b9      	str	r1, [r7, #8]
 8006c70:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006c72:	2300      	movs	r3, #0
 8006c74:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c7a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d10d      	bne.n	8006ca0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d14d      	bne.n	8006d28 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	685b      	ldr	r3, [r3, #4]
 8006c90:	4618      	mov	r0, r3
 8006c92:	f001 f835 	bl	8007d00 <xTaskPriorityDisinherit>
 8006c96:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	605a      	str	r2, [r3, #4]
 8006c9e:	e043      	b.n	8006d28 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d119      	bne.n	8006cda <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	6898      	ldr	r0, [r3, #8]
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cae:	461a      	mov	r2, r3
 8006cb0:	68b9      	ldr	r1, [r7, #8]
 8006cb2:	f007 fc4b 	bl	800e54c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	689a      	ldr	r2, [r3, #8]
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cbe:	441a      	add	r2, r3
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	689a      	ldr	r2, [r3, #8]
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	685b      	ldr	r3, [r3, #4]
 8006ccc:	429a      	cmp	r2, r3
 8006cce:	d32b      	bcc.n	8006d28 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681a      	ldr	r2, [r3, #0]
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	609a      	str	r2, [r3, #8]
 8006cd8:	e026      	b.n	8006d28 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	68d8      	ldr	r0, [r3, #12]
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ce2:	461a      	mov	r2, r3
 8006ce4:	68b9      	ldr	r1, [r7, #8]
 8006ce6:	f007 fc31 	bl	800e54c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	68da      	ldr	r2, [r3, #12]
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cf2:	425b      	negs	r3, r3
 8006cf4:	441a      	add	r2, r3
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	68da      	ldr	r2, [r3, #12]
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	429a      	cmp	r2, r3
 8006d04:	d207      	bcs.n	8006d16 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	685a      	ldr	r2, [r3, #4]
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d0e:	425b      	negs	r3, r3
 8006d10:	441a      	add	r2, r3
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2b02      	cmp	r3, #2
 8006d1a:	d105      	bne.n	8006d28 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006d1c:	693b      	ldr	r3, [r7, #16]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d002      	beq.n	8006d28 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006d22:	693b      	ldr	r3, [r7, #16]
 8006d24:	3b01      	subs	r3, #1
 8006d26:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006d28:	693b      	ldr	r3, [r7, #16]
 8006d2a:	1c5a      	adds	r2, r3, #1
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006d30:	697b      	ldr	r3, [r7, #20]
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	3718      	adds	r7, #24
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}

08006d3a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006d3a:	b580      	push	{r7, lr}
 8006d3c:	b082      	sub	sp, #8
 8006d3e:	af00      	add	r7, sp, #0
 8006d40:	6078      	str	r0, [r7, #4]
 8006d42:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d018      	beq.n	8006d7e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	68da      	ldr	r2, [r3, #12]
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d54:	441a      	add	r2, r3
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	68da      	ldr	r2, [r3, #12]
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	685b      	ldr	r3, [r3, #4]
 8006d62:	429a      	cmp	r2, r3
 8006d64:	d303      	bcc.n	8006d6e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681a      	ldr	r2, [r3, #0]
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	68d9      	ldr	r1, [r3, #12]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d76:	461a      	mov	r2, r3
 8006d78:	6838      	ldr	r0, [r7, #0]
 8006d7a:	f007 fbe7 	bl	800e54c <memcpy>
	}
}
 8006d7e:	bf00      	nop
 8006d80:	3708      	adds	r7, #8
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}

08006d86 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006d86:	b580      	push	{r7, lr}
 8006d88:	b084      	sub	sp, #16
 8006d8a:	af00      	add	r7, sp, #0
 8006d8c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006d8e:	f001 fbbd 	bl	800850c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006d98:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006d9a:	e011      	b.n	8006dc0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d012      	beq.n	8006dca <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	3324      	adds	r3, #36	; 0x24
 8006da8:	4618      	mov	r0, r3
 8006daa:	f000 fd37 	bl	800781c <xTaskRemoveFromEventList>
 8006dae:	4603      	mov	r3, r0
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d001      	beq.n	8006db8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006db4:	f000 fe1a 	bl	80079ec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006db8:	7bfb      	ldrb	r3, [r7, #15]
 8006dba:	3b01      	subs	r3, #1
 8006dbc:	b2db      	uxtb	r3, r3
 8006dbe:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006dc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	dce9      	bgt.n	8006d9c <prvUnlockQueue+0x16>
 8006dc8:	e000      	b.n	8006dcc <prvUnlockQueue+0x46>
					break;
 8006dca:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	22ff      	movs	r2, #255	; 0xff
 8006dd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006dd4:	f001 fbc8 	bl	8008568 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006dd8:	f001 fb98 	bl	800850c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006de2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006de4:	e011      	b.n	8006e0a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	691b      	ldr	r3, [r3, #16]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d012      	beq.n	8006e14 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	3310      	adds	r3, #16
 8006df2:	4618      	mov	r0, r3
 8006df4:	f000 fd12 	bl	800781c <xTaskRemoveFromEventList>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d001      	beq.n	8006e02 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006dfe:	f000 fdf5 	bl	80079ec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006e02:	7bbb      	ldrb	r3, [r7, #14]
 8006e04:	3b01      	subs	r3, #1
 8006e06:	b2db      	uxtb	r3, r3
 8006e08:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006e0a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	dce9      	bgt.n	8006de6 <prvUnlockQueue+0x60>
 8006e12:	e000      	b.n	8006e16 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006e14:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	22ff      	movs	r2, #255	; 0xff
 8006e1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006e1e:	f001 fba3 	bl	8008568 <vPortExitCritical>
}
 8006e22:	bf00      	nop
 8006e24:	3710      	adds	r7, #16
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}

08006e2a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006e2a:	b580      	push	{r7, lr}
 8006e2c:	b084      	sub	sp, #16
 8006e2e:	af00      	add	r7, sp, #0
 8006e30:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006e32:	f001 fb6b 	bl	800850c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d102      	bne.n	8006e44 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006e3e:	2301      	movs	r3, #1
 8006e40:	60fb      	str	r3, [r7, #12]
 8006e42:	e001      	b.n	8006e48 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006e44:	2300      	movs	r3, #0
 8006e46:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006e48:	f001 fb8e 	bl	8008568 <vPortExitCritical>

	return xReturn;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
}
 8006e4e:	4618      	mov	r0, r3
 8006e50:	3710      	adds	r7, #16
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd80      	pop	{r7, pc}

08006e56 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006e56:	b580      	push	{r7, lr}
 8006e58:	b084      	sub	sp, #16
 8006e5a:	af00      	add	r7, sp, #0
 8006e5c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006e5e:	f001 fb55 	bl	800850c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e6a:	429a      	cmp	r2, r3
 8006e6c:	d102      	bne.n	8006e74 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006e6e:	2301      	movs	r3, #1
 8006e70:	60fb      	str	r3, [r7, #12]
 8006e72:	e001      	b.n	8006e78 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006e74:	2300      	movs	r3, #0
 8006e76:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006e78:	f001 fb76 	bl	8008568 <vPortExitCritical>

	return xReturn;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	3710      	adds	r7, #16
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}

08006e86 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006e86:	b580      	push	{r7, lr}
 8006e88:	b08e      	sub	sp, #56	; 0x38
 8006e8a:	af04      	add	r7, sp, #16
 8006e8c:	60f8      	str	r0, [r7, #12]
 8006e8e:	60b9      	str	r1, [r7, #8]
 8006e90:	607a      	str	r2, [r7, #4]
 8006e92:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006e94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d109      	bne.n	8006eae <xTaskCreateStatic+0x28>
	__asm volatile
 8006e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e9e:	f383 8811 	msr	BASEPRI, r3
 8006ea2:	f3bf 8f6f 	isb	sy
 8006ea6:	f3bf 8f4f 	dsb	sy
 8006eaa:	623b      	str	r3, [r7, #32]
 8006eac:	e7fe      	b.n	8006eac <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8006eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d109      	bne.n	8006ec8 <xTaskCreateStatic+0x42>
 8006eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eb8:	f383 8811 	msr	BASEPRI, r3
 8006ebc:	f3bf 8f6f 	isb	sy
 8006ec0:	f3bf 8f4f 	dsb	sy
 8006ec4:	61fb      	str	r3, [r7, #28]
 8006ec6:	e7fe      	b.n	8006ec6 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006ec8:	2354      	movs	r3, #84	; 0x54
 8006eca:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006ecc:	693b      	ldr	r3, [r7, #16]
 8006ece:	2b54      	cmp	r3, #84	; 0x54
 8006ed0:	d009      	beq.n	8006ee6 <xTaskCreateStatic+0x60>
 8006ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ed6:	f383 8811 	msr	BASEPRI, r3
 8006eda:	f3bf 8f6f 	isb	sy
 8006ede:	f3bf 8f4f 	dsb	sy
 8006ee2:	61bb      	str	r3, [r7, #24]
 8006ee4:	e7fe      	b.n	8006ee4 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d01e      	beq.n	8006f2a <xTaskCreateStatic+0xa4>
 8006eec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d01b      	beq.n	8006f2a <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ef4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006efa:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006efe:	2202      	movs	r2, #2
 8006f00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006f04:	2300      	movs	r3, #0
 8006f06:	9303      	str	r3, [sp, #12]
 8006f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f0a:	9302      	str	r3, [sp, #8]
 8006f0c:	f107 0314 	add.w	r3, r7, #20
 8006f10:	9301      	str	r3, [sp, #4]
 8006f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f14:	9300      	str	r3, [sp, #0]
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	687a      	ldr	r2, [r7, #4]
 8006f1a:	68b9      	ldr	r1, [r7, #8]
 8006f1c:	68f8      	ldr	r0, [r7, #12]
 8006f1e:	f000 f850 	bl	8006fc2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006f22:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006f24:	f000 f8d8 	bl	80070d8 <prvAddNewTaskToReadyList>
 8006f28:	e001      	b.n	8006f2e <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006f2e:	697b      	ldr	r3, [r7, #20]
	}
 8006f30:	4618      	mov	r0, r3
 8006f32:	3728      	adds	r7, #40	; 0x28
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd80      	pop	{r7, pc}

08006f38 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b08c      	sub	sp, #48	; 0x30
 8006f3c:	af04      	add	r7, sp, #16
 8006f3e:	60f8      	str	r0, [r7, #12]
 8006f40:	60b9      	str	r1, [r7, #8]
 8006f42:	603b      	str	r3, [r7, #0]
 8006f44:	4613      	mov	r3, r2
 8006f46:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f48:	88fb      	ldrh	r3, [r7, #6]
 8006f4a:	009b      	lsls	r3, r3, #2
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	f001 fbf7 	bl	8008740 <pvPortMalloc>
 8006f52:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d00e      	beq.n	8006f78 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8006f5a:	2054      	movs	r0, #84	; 0x54
 8006f5c:	f001 fbf0 	bl	8008740 <pvPortMalloc>
 8006f60:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006f62:	69fb      	ldr	r3, [r7, #28]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d003      	beq.n	8006f70 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006f68:	69fb      	ldr	r3, [r7, #28]
 8006f6a:	697a      	ldr	r2, [r7, #20]
 8006f6c:	631a      	str	r2, [r3, #48]	; 0x30
 8006f6e:	e005      	b.n	8006f7c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006f70:	6978      	ldr	r0, [r7, #20]
 8006f72:	f001 fcab 	bl	80088cc <vPortFree>
 8006f76:	e001      	b.n	8006f7c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006f78:	2300      	movs	r3, #0
 8006f7a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006f7c:	69fb      	ldr	r3, [r7, #28]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d017      	beq.n	8006fb2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006f82:	69fb      	ldr	r3, [r7, #28]
 8006f84:	2200      	movs	r2, #0
 8006f86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006f8a:	88fa      	ldrh	r2, [r7, #6]
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	9303      	str	r3, [sp, #12]
 8006f90:	69fb      	ldr	r3, [r7, #28]
 8006f92:	9302      	str	r3, [sp, #8]
 8006f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f96:	9301      	str	r3, [sp, #4]
 8006f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f9a:	9300      	str	r3, [sp, #0]
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	68b9      	ldr	r1, [r7, #8]
 8006fa0:	68f8      	ldr	r0, [r7, #12]
 8006fa2:	f000 f80e 	bl	8006fc2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006fa6:	69f8      	ldr	r0, [r7, #28]
 8006fa8:	f000 f896 	bl	80070d8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006fac:	2301      	movs	r3, #1
 8006fae:	61bb      	str	r3, [r7, #24]
 8006fb0:	e002      	b.n	8006fb8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006fb2:	f04f 33ff 	mov.w	r3, #4294967295
 8006fb6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006fb8:	69bb      	ldr	r3, [r7, #24]
	}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	3720      	adds	r7, #32
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}

08006fc2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006fc2:	b580      	push	{r7, lr}
 8006fc4:	b088      	sub	sp, #32
 8006fc6:	af00      	add	r7, sp, #0
 8006fc8:	60f8      	str	r0, [r7, #12]
 8006fca:	60b9      	str	r1, [r7, #8]
 8006fcc:	607a      	str	r2, [r7, #4]
 8006fce:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fd2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	009b      	lsls	r3, r3, #2
 8006fd8:	461a      	mov	r2, r3
 8006fda:	21a5      	movs	r1, #165	; 0xa5
 8006fdc:	f007 fac1 	bl	800e562 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fe2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006fea:	3b01      	subs	r3, #1
 8006fec:	009b      	lsls	r3, r3, #2
 8006fee:	4413      	add	r3, r2
 8006ff0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006ff2:	69bb      	ldr	r3, [r7, #24]
 8006ff4:	f023 0307 	bic.w	r3, r3, #7
 8006ff8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006ffa:	69bb      	ldr	r3, [r7, #24]
 8006ffc:	f003 0307 	and.w	r3, r3, #7
 8007000:	2b00      	cmp	r3, #0
 8007002:	d009      	beq.n	8007018 <prvInitialiseNewTask+0x56>
 8007004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007008:	f383 8811 	msr	BASEPRI, r3
 800700c:	f3bf 8f6f 	isb	sy
 8007010:	f3bf 8f4f 	dsb	sy
 8007014:	617b      	str	r3, [r7, #20]
 8007016:	e7fe      	b.n	8007016 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007018:	2300      	movs	r3, #0
 800701a:	61fb      	str	r3, [r7, #28]
 800701c:	e012      	b.n	8007044 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800701e:	68ba      	ldr	r2, [r7, #8]
 8007020:	69fb      	ldr	r3, [r7, #28]
 8007022:	4413      	add	r3, r2
 8007024:	7819      	ldrb	r1, [r3, #0]
 8007026:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007028:	69fb      	ldr	r3, [r7, #28]
 800702a:	4413      	add	r3, r2
 800702c:	3334      	adds	r3, #52	; 0x34
 800702e:	460a      	mov	r2, r1
 8007030:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8007032:	68ba      	ldr	r2, [r7, #8]
 8007034:	69fb      	ldr	r3, [r7, #28]
 8007036:	4413      	add	r3, r2
 8007038:	781b      	ldrb	r3, [r3, #0]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d006      	beq.n	800704c <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800703e:	69fb      	ldr	r3, [r7, #28]
 8007040:	3301      	adds	r3, #1
 8007042:	61fb      	str	r3, [r7, #28]
 8007044:	69fb      	ldr	r3, [r7, #28]
 8007046:	2b0f      	cmp	r3, #15
 8007048:	d9e9      	bls.n	800701e <prvInitialiseNewTask+0x5c>
 800704a:	e000      	b.n	800704e <prvInitialiseNewTask+0x8c>
		{
			break;
 800704c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800704e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007050:	2200      	movs	r2, #0
 8007052:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007058:	2b06      	cmp	r3, #6
 800705a:	d901      	bls.n	8007060 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800705c:	2306      	movs	r3, #6
 800705e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007062:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007064:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007068:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800706a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800706c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800706e:	2200      	movs	r2, #0
 8007070:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007074:	3304      	adds	r3, #4
 8007076:	4618      	mov	r0, r3
 8007078:	f7fe fee3 	bl	8005e42 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800707c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800707e:	3318      	adds	r3, #24
 8007080:	4618      	mov	r0, r3
 8007082:	f7fe fede 	bl	8005e42 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007088:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800708a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800708c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800708e:	f1c3 0207 	rsb	r2, r3, #7
 8007092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007094:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007098:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800709a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800709c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800709e:	2200      	movs	r2, #0
 80070a0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80070a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070a4:	2200      	movs	r2, #0
 80070a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	}
	#endif

	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		pxNewTCB->ucDelayAborted = pdFALSE;
 80070aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ac:	2200      	movs	r2, #0
 80070ae:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80070b2:	683a      	ldr	r2, [r7, #0]
 80070b4:	68f9      	ldr	r1, [r7, #12]
 80070b6:	69b8      	ldr	r0, [r7, #24]
 80070b8:	f001 f904 	bl	80082c4 <pxPortInitialiseStack>
 80070bc:	4602      	mov	r2, r0
 80070be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070c0:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80070c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d002      	beq.n	80070ce <prvInitialiseNewTask+0x10c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80070c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070cc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80070ce:	bf00      	nop
 80070d0:	3720      	adds	r7, #32
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}
	...

080070d8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b082      	sub	sp, #8
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80070e0:	f001 fa14 	bl	800850c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80070e4:	4b2a      	ldr	r3, [pc, #168]	; (8007190 <prvAddNewTaskToReadyList+0xb8>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	3301      	adds	r3, #1
 80070ea:	4a29      	ldr	r2, [pc, #164]	; (8007190 <prvAddNewTaskToReadyList+0xb8>)
 80070ec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80070ee:	4b29      	ldr	r3, [pc, #164]	; (8007194 <prvAddNewTaskToReadyList+0xbc>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d109      	bne.n	800710a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80070f6:	4a27      	ldr	r2, [pc, #156]	; (8007194 <prvAddNewTaskToReadyList+0xbc>)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80070fc:	4b24      	ldr	r3, [pc, #144]	; (8007190 <prvAddNewTaskToReadyList+0xb8>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	2b01      	cmp	r3, #1
 8007102:	d110      	bne.n	8007126 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007104:	f000 fc88 	bl	8007a18 <prvInitialiseTaskLists>
 8007108:	e00d      	b.n	8007126 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800710a:	4b23      	ldr	r3, [pc, #140]	; (8007198 <prvAddNewTaskToReadyList+0xc0>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d109      	bne.n	8007126 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007112:	4b20      	ldr	r3, [pc, #128]	; (8007194 <prvAddNewTaskToReadyList+0xbc>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800711c:	429a      	cmp	r2, r3
 800711e:	d802      	bhi.n	8007126 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007120:	4a1c      	ldr	r2, [pc, #112]	; (8007194 <prvAddNewTaskToReadyList+0xbc>)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007126:	4b1d      	ldr	r3, [pc, #116]	; (800719c <prvAddNewTaskToReadyList+0xc4>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	3301      	adds	r3, #1
 800712c:	4a1b      	ldr	r2, [pc, #108]	; (800719c <prvAddNewTaskToReadyList+0xc4>)
 800712e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007134:	2201      	movs	r2, #1
 8007136:	409a      	lsls	r2, r3
 8007138:	4b19      	ldr	r3, [pc, #100]	; (80071a0 <prvAddNewTaskToReadyList+0xc8>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4313      	orrs	r3, r2
 800713e:	4a18      	ldr	r2, [pc, #96]	; (80071a0 <prvAddNewTaskToReadyList+0xc8>)
 8007140:	6013      	str	r3, [r2, #0]
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007146:	4613      	mov	r3, r2
 8007148:	009b      	lsls	r3, r3, #2
 800714a:	4413      	add	r3, r2
 800714c:	009b      	lsls	r3, r3, #2
 800714e:	4a15      	ldr	r2, [pc, #84]	; (80071a4 <prvAddNewTaskToReadyList+0xcc>)
 8007150:	441a      	add	r2, r3
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	3304      	adds	r3, #4
 8007156:	4619      	mov	r1, r3
 8007158:	4610      	mov	r0, r2
 800715a:	f7fe fe7f 	bl	8005e5c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800715e:	f001 fa03 	bl	8008568 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007162:	4b0d      	ldr	r3, [pc, #52]	; (8007198 <prvAddNewTaskToReadyList+0xc0>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d00e      	beq.n	8007188 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800716a:	4b0a      	ldr	r3, [pc, #40]	; (8007194 <prvAddNewTaskToReadyList+0xbc>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007174:	429a      	cmp	r2, r3
 8007176:	d207      	bcs.n	8007188 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007178:	4b0b      	ldr	r3, [pc, #44]	; (80071a8 <prvAddNewTaskToReadyList+0xd0>)
 800717a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800717e:	601a      	str	r2, [r3, #0]
 8007180:	f3bf 8f4f 	dsb	sy
 8007184:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007188:	bf00      	nop
 800718a:	3708      	adds	r7, #8
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}
 8007190:	20000300 	.word	0x20000300
 8007194:	20000200 	.word	0x20000200
 8007198:	2000030c 	.word	0x2000030c
 800719c:	2000031c 	.word	0x2000031c
 80071a0:	20000308 	.word	0x20000308
 80071a4:	20000204 	.word	0x20000204
 80071a8:	e000ed04 	.word	0xe000ed04

080071ac <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b08a      	sub	sp, #40	; 0x28
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
 80071b4:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80071b6:	2300      	movs	r3, #0
 80071b8:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d109      	bne.n	80071d4 <vTaskDelayUntil+0x28>
 80071c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071c4:	f383 8811 	msr	BASEPRI, r3
 80071c8:	f3bf 8f6f 	isb	sy
 80071cc:	f3bf 8f4f 	dsb	sy
 80071d0:	617b      	str	r3, [r7, #20]
 80071d2:	e7fe      	b.n	80071d2 <vTaskDelayUntil+0x26>
		configASSERT( ( xTimeIncrement > 0U ) );
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d109      	bne.n	80071ee <vTaskDelayUntil+0x42>
 80071da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071de:	f383 8811 	msr	BASEPRI, r3
 80071e2:	f3bf 8f6f 	isb	sy
 80071e6:	f3bf 8f4f 	dsb	sy
 80071ea:	613b      	str	r3, [r7, #16]
 80071ec:	e7fe      	b.n	80071ec <vTaskDelayUntil+0x40>
		configASSERT( uxSchedulerSuspended == 0 );
 80071ee:	4b29      	ldr	r3, [pc, #164]	; (8007294 <vTaskDelayUntil+0xe8>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d009      	beq.n	800720a <vTaskDelayUntil+0x5e>
 80071f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071fa:	f383 8811 	msr	BASEPRI, r3
 80071fe:	f3bf 8f6f 	isb	sy
 8007202:	f3bf 8f4f 	dsb	sy
 8007206:	60fb      	str	r3, [r7, #12]
 8007208:	e7fe      	b.n	8007208 <vTaskDelayUntil+0x5c>

		vTaskSuspendAll();
 800720a:	f000 f8db 	bl	80073c4 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800720e:	4b22      	ldr	r3, [pc, #136]	; (8007298 <vTaskDelayUntil+0xec>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	683a      	ldr	r2, [r7, #0]
 800721a:	4413      	add	r3, r2
 800721c:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	6a3a      	ldr	r2, [r7, #32]
 8007224:	429a      	cmp	r2, r3
 8007226:	d20b      	bcs.n	8007240 <vTaskDelayUntil+0x94>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	69fa      	ldr	r2, [r7, #28]
 800722e:	429a      	cmp	r2, r3
 8007230:	d211      	bcs.n	8007256 <vTaskDelayUntil+0xaa>
 8007232:	69fa      	ldr	r2, [r7, #28]
 8007234:	6a3b      	ldr	r3, [r7, #32]
 8007236:	429a      	cmp	r2, r3
 8007238:	d90d      	bls.n	8007256 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 800723a:	2301      	movs	r3, #1
 800723c:	627b      	str	r3, [r7, #36]	; 0x24
 800723e:	e00a      	b.n	8007256 <vTaskDelayUntil+0xaa>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	69fa      	ldr	r2, [r7, #28]
 8007246:	429a      	cmp	r2, r3
 8007248:	d303      	bcc.n	8007252 <vTaskDelayUntil+0xa6>
 800724a:	69fa      	ldr	r2, [r7, #28]
 800724c:	6a3b      	ldr	r3, [r7, #32]
 800724e:	429a      	cmp	r2, r3
 8007250:	d901      	bls.n	8007256 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 8007252:	2301      	movs	r3, #1
 8007254:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	69fa      	ldr	r2, [r7, #28]
 800725a:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800725c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800725e:	2b00      	cmp	r3, #0
 8007260:	d006      	beq.n	8007270 <vTaskDelayUntil+0xc4>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8007262:	69fa      	ldr	r2, [r7, #28]
 8007264:	6a3b      	ldr	r3, [r7, #32]
 8007266:	1ad3      	subs	r3, r2, r3
 8007268:	2100      	movs	r1, #0
 800726a:	4618      	mov	r0, r3
 800726c:	f000 ffc0 	bl	80081f0 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8007270:	f000 f8b6 	bl	80073e0 <xTaskResumeAll>
 8007274:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007276:	69bb      	ldr	r3, [r7, #24]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d107      	bne.n	800728c <vTaskDelayUntil+0xe0>
		{
			portYIELD_WITHIN_API();
 800727c:	4b07      	ldr	r3, [pc, #28]	; (800729c <vTaskDelayUntil+0xf0>)
 800727e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007282:	601a      	str	r2, [r3, #0]
 8007284:	f3bf 8f4f 	dsb	sy
 8007288:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800728c:	bf00      	nop
 800728e:	3728      	adds	r7, #40	; 0x28
 8007290:	46bd      	mov	sp, r7
 8007292:	bd80      	pop	{r7, pc}
 8007294:	20000328 	.word	0x20000328
 8007298:	20000304 	.word	0x20000304
 800729c:	e000ed04 	.word	0xe000ed04

080072a0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b084      	sub	sp, #16
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80072a8:	2300      	movs	r3, #0
 80072aa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d016      	beq.n	80072e0 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80072b2:	4b13      	ldr	r3, [pc, #76]	; (8007300 <vTaskDelay+0x60>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d009      	beq.n	80072ce <vTaskDelay+0x2e>
 80072ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072be:	f383 8811 	msr	BASEPRI, r3
 80072c2:	f3bf 8f6f 	isb	sy
 80072c6:	f3bf 8f4f 	dsb	sy
 80072ca:	60bb      	str	r3, [r7, #8]
 80072cc:	e7fe      	b.n	80072cc <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80072ce:	f000 f879 	bl	80073c4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80072d2:	2100      	movs	r1, #0
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	f000 ff8b 	bl	80081f0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80072da:	f000 f881 	bl	80073e0 <xTaskResumeAll>
 80072de:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d107      	bne.n	80072f6 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80072e6:	4b07      	ldr	r3, [pc, #28]	; (8007304 <vTaskDelay+0x64>)
 80072e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072ec:	601a      	str	r2, [r3, #0]
 80072ee:	f3bf 8f4f 	dsb	sy
 80072f2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80072f6:	bf00      	nop
 80072f8:	3710      	adds	r7, #16
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}
 80072fe:	bf00      	nop
 8007300:	20000328 	.word	0x20000328
 8007304:	e000ed04 	.word	0xe000ed04

08007308 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b08a      	sub	sp, #40	; 0x28
 800730c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800730e:	2300      	movs	r3, #0
 8007310:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007312:	2300      	movs	r3, #0
 8007314:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007316:	463a      	mov	r2, r7
 8007318:	1d39      	adds	r1, r7, #4
 800731a:	f107 0308 	add.w	r3, r7, #8
 800731e:	4618      	mov	r0, r3
 8007320:	f005 fdec 	bl	800cefc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007324:	6839      	ldr	r1, [r7, #0]
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	68ba      	ldr	r2, [r7, #8]
 800732a:	9202      	str	r2, [sp, #8]
 800732c:	9301      	str	r3, [sp, #4]
 800732e:	2300      	movs	r3, #0
 8007330:	9300      	str	r3, [sp, #0]
 8007332:	2300      	movs	r3, #0
 8007334:	460a      	mov	r2, r1
 8007336:	491d      	ldr	r1, [pc, #116]	; (80073ac <vTaskStartScheduler+0xa4>)
 8007338:	481d      	ldr	r0, [pc, #116]	; (80073b0 <vTaskStartScheduler+0xa8>)
 800733a:	f7ff fda4 	bl	8006e86 <xTaskCreateStatic>
 800733e:	4602      	mov	r2, r0
 8007340:	4b1c      	ldr	r3, [pc, #112]	; (80073b4 <vTaskStartScheduler+0xac>)
 8007342:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007344:	4b1b      	ldr	r3, [pc, #108]	; (80073b4 <vTaskStartScheduler+0xac>)
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d002      	beq.n	8007352 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800734c:	2301      	movs	r3, #1
 800734e:	617b      	str	r3, [r7, #20]
 8007350:	e001      	b.n	8007356 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007352:	2300      	movs	r3, #0
 8007354:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	2b01      	cmp	r3, #1
 800735a:	d115      	bne.n	8007388 <vTaskStartScheduler+0x80>
 800735c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007360:	f383 8811 	msr	BASEPRI, r3
 8007364:	f3bf 8f6f 	isb	sy
 8007368:	f3bf 8f4f 	dsb	sy
 800736c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800736e:	4b12      	ldr	r3, [pc, #72]	; (80073b8 <vTaskStartScheduler+0xb0>)
 8007370:	f04f 32ff 	mov.w	r2, #4294967295
 8007374:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007376:	4b11      	ldr	r3, [pc, #68]	; (80073bc <vTaskStartScheduler+0xb4>)
 8007378:	2201      	movs	r2, #1
 800737a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800737c:	4b10      	ldr	r3, [pc, #64]	; (80073c0 <vTaskStartScheduler+0xb8>)
 800737e:	2200      	movs	r2, #0
 8007380:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007382:	f001 f825 	bl	80083d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007386:	e00d      	b.n	80073a4 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007388:	697b      	ldr	r3, [r7, #20]
 800738a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800738e:	d109      	bne.n	80073a4 <vTaskStartScheduler+0x9c>
 8007390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007394:	f383 8811 	msr	BASEPRI, r3
 8007398:	f3bf 8f6f 	isb	sy
 800739c:	f3bf 8f4f 	dsb	sy
 80073a0:	60fb      	str	r3, [r7, #12]
 80073a2:	e7fe      	b.n	80073a2 <vTaskStartScheduler+0x9a>
}
 80073a4:	bf00      	nop
 80073a6:	3718      	adds	r7, #24
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}
 80073ac:	08011ce0 	.word	0x08011ce0
 80073b0:	08007a05 	.word	0x08007a05
 80073b4:	20000324 	.word	0x20000324
 80073b8:	20000320 	.word	0x20000320
 80073bc:	2000030c 	.word	0x2000030c
 80073c0:	20000304 	.word	0x20000304

080073c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80073c4:	b480      	push	{r7}
 80073c6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80073c8:	4b04      	ldr	r3, [pc, #16]	; (80073dc <vTaskSuspendAll+0x18>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	3301      	adds	r3, #1
 80073ce:	4a03      	ldr	r2, [pc, #12]	; (80073dc <vTaskSuspendAll+0x18>)
 80073d0:	6013      	str	r3, [r2, #0]
}
 80073d2:	bf00      	nop
 80073d4:	46bd      	mov	sp, r7
 80073d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073da:	4770      	bx	lr
 80073dc:	20000328 	.word	0x20000328

080073e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b084      	sub	sp, #16
 80073e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80073e6:	2300      	movs	r3, #0
 80073e8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80073ea:	2300      	movs	r3, #0
 80073ec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80073ee:	4b41      	ldr	r3, [pc, #260]	; (80074f4 <xTaskResumeAll+0x114>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d109      	bne.n	800740a <xTaskResumeAll+0x2a>
 80073f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073fa:	f383 8811 	msr	BASEPRI, r3
 80073fe:	f3bf 8f6f 	isb	sy
 8007402:	f3bf 8f4f 	dsb	sy
 8007406:	603b      	str	r3, [r7, #0]
 8007408:	e7fe      	b.n	8007408 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800740a:	f001 f87f 	bl	800850c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800740e:	4b39      	ldr	r3, [pc, #228]	; (80074f4 <xTaskResumeAll+0x114>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	3b01      	subs	r3, #1
 8007414:	4a37      	ldr	r2, [pc, #220]	; (80074f4 <xTaskResumeAll+0x114>)
 8007416:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007418:	4b36      	ldr	r3, [pc, #216]	; (80074f4 <xTaskResumeAll+0x114>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d161      	bne.n	80074e4 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007420:	4b35      	ldr	r3, [pc, #212]	; (80074f8 <xTaskResumeAll+0x118>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d05d      	beq.n	80074e4 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007428:	e02e      	b.n	8007488 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800742a:	4b34      	ldr	r3, [pc, #208]	; (80074fc <xTaskResumeAll+0x11c>)
 800742c:	68db      	ldr	r3, [r3, #12]
 800742e:	68db      	ldr	r3, [r3, #12]
 8007430:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	3318      	adds	r3, #24
 8007436:	4618      	mov	r0, r3
 8007438:	f7fe fd6d 	bl	8005f16 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	3304      	adds	r3, #4
 8007440:	4618      	mov	r0, r3
 8007442:	f7fe fd68 	bl	8005f16 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800744a:	2201      	movs	r2, #1
 800744c:	409a      	lsls	r2, r3
 800744e:	4b2c      	ldr	r3, [pc, #176]	; (8007500 <xTaskResumeAll+0x120>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	4313      	orrs	r3, r2
 8007454:	4a2a      	ldr	r2, [pc, #168]	; (8007500 <xTaskResumeAll+0x120>)
 8007456:	6013      	str	r3, [r2, #0]
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800745c:	4613      	mov	r3, r2
 800745e:	009b      	lsls	r3, r3, #2
 8007460:	4413      	add	r3, r2
 8007462:	009b      	lsls	r3, r3, #2
 8007464:	4a27      	ldr	r2, [pc, #156]	; (8007504 <xTaskResumeAll+0x124>)
 8007466:	441a      	add	r2, r3
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	3304      	adds	r3, #4
 800746c:	4619      	mov	r1, r3
 800746e:	4610      	mov	r0, r2
 8007470:	f7fe fcf4 	bl	8005e5c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007478:	4b23      	ldr	r3, [pc, #140]	; (8007508 <xTaskResumeAll+0x128>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800747e:	429a      	cmp	r2, r3
 8007480:	d302      	bcc.n	8007488 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8007482:	4b22      	ldr	r3, [pc, #136]	; (800750c <xTaskResumeAll+0x12c>)
 8007484:	2201      	movs	r2, #1
 8007486:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007488:	4b1c      	ldr	r3, [pc, #112]	; (80074fc <xTaskResumeAll+0x11c>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d1cc      	bne.n	800742a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d001      	beq.n	800749a <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007496:	f000 fb59 	bl	8007b4c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800749a:	4b1d      	ldr	r3, [pc, #116]	; (8007510 <xTaskResumeAll+0x130>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d010      	beq.n	80074c8 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80074a6:	f000 f859 	bl	800755c <xTaskIncrementTick>
 80074aa:	4603      	mov	r3, r0
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d002      	beq.n	80074b6 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80074b0:	4b16      	ldr	r3, [pc, #88]	; (800750c <xTaskResumeAll+0x12c>)
 80074b2:	2201      	movs	r2, #1
 80074b4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	3b01      	subs	r3, #1
 80074ba:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d1f1      	bne.n	80074a6 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80074c2:	4b13      	ldr	r3, [pc, #76]	; (8007510 <xTaskResumeAll+0x130>)
 80074c4:	2200      	movs	r2, #0
 80074c6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80074c8:	4b10      	ldr	r3, [pc, #64]	; (800750c <xTaskResumeAll+0x12c>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d009      	beq.n	80074e4 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80074d0:	2301      	movs	r3, #1
 80074d2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80074d4:	4b0f      	ldr	r3, [pc, #60]	; (8007514 <xTaskResumeAll+0x134>)
 80074d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074da:	601a      	str	r2, [r3, #0]
 80074dc:	f3bf 8f4f 	dsb	sy
 80074e0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80074e4:	f001 f840 	bl	8008568 <vPortExitCritical>

	return xAlreadyYielded;
 80074e8:	68bb      	ldr	r3, [r7, #8]
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3710      	adds	r7, #16
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}
 80074f2:	bf00      	nop
 80074f4:	20000328 	.word	0x20000328
 80074f8:	20000300 	.word	0x20000300
 80074fc:	200002c0 	.word	0x200002c0
 8007500:	20000308 	.word	0x20000308
 8007504:	20000204 	.word	0x20000204
 8007508:	20000200 	.word	0x20000200
 800750c:	20000314 	.word	0x20000314
 8007510:	20000310 	.word	0x20000310
 8007514:	e000ed04 	.word	0xe000ed04

08007518 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007518:	b480      	push	{r7}
 800751a:	b083      	sub	sp, #12
 800751c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800751e:	4b05      	ldr	r3, [pc, #20]	; (8007534 <xTaskGetTickCount+0x1c>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007524:	687b      	ldr	r3, [r7, #4]
}
 8007526:	4618      	mov	r0, r3
 8007528:	370c      	adds	r7, #12
 800752a:	46bd      	mov	sp, r7
 800752c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007530:	4770      	bx	lr
 8007532:	bf00      	nop
 8007534:	20000304 	.word	0x20000304

08007538 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b082      	sub	sp, #8
 800753c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800753e:	f001 f8c1 	bl	80086c4 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8007542:	2300      	movs	r3, #0
 8007544:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8007546:	4b04      	ldr	r3, [pc, #16]	; (8007558 <xTaskGetTickCountFromISR+0x20>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800754c:	683b      	ldr	r3, [r7, #0]
}
 800754e:	4618      	mov	r0, r3
 8007550:	3708      	adds	r7, #8
 8007552:	46bd      	mov	sp, r7
 8007554:	bd80      	pop	{r7, pc}
 8007556:	bf00      	nop
 8007558:	20000304 	.word	0x20000304

0800755c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b086      	sub	sp, #24
 8007560:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007562:	2300      	movs	r3, #0
 8007564:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007566:	4b50      	ldr	r3, [pc, #320]	; (80076a8 <xTaskIncrementTick+0x14c>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	2b00      	cmp	r3, #0
 800756c:	f040 808c 	bne.w	8007688 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007570:	4b4e      	ldr	r3, [pc, #312]	; (80076ac <xTaskIncrementTick+0x150>)
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	3301      	adds	r3, #1
 8007576:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007578:	4a4c      	ldr	r2, [pc, #304]	; (80076ac <xTaskIncrementTick+0x150>)
 800757a:	693b      	ldr	r3, [r7, #16]
 800757c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800757e:	693b      	ldr	r3, [r7, #16]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d11f      	bne.n	80075c4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8007584:	4b4a      	ldr	r3, [pc, #296]	; (80076b0 <xTaskIncrementTick+0x154>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d009      	beq.n	80075a2 <xTaskIncrementTick+0x46>
 800758e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007592:	f383 8811 	msr	BASEPRI, r3
 8007596:	f3bf 8f6f 	isb	sy
 800759a:	f3bf 8f4f 	dsb	sy
 800759e:	603b      	str	r3, [r7, #0]
 80075a0:	e7fe      	b.n	80075a0 <xTaskIncrementTick+0x44>
 80075a2:	4b43      	ldr	r3, [pc, #268]	; (80076b0 <xTaskIncrementTick+0x154>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	60fb      	str	r3, [r7, #12]
 80075a8:	4b42      	ldr	r3, [pc, #264]	; (80076b4 <xTaskIncrementTick+0x158>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4a40      	ldr	r2, [pc, #256]	; (80076b0 <xTaskIncrementTick+0x154>)
 80075ae:	6013      	str	r3, [r2, #0]
 80075b0:	4a40      	ldr	r2, [pc, #256]	; (80076b4 <xTaskIncrementTick+0x158>)
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	6013      	str	r3, [r2, #0]
 80075b6:	4b40      	ldr	r3, [pc, #256]	; (80076b8 <xTaskIncrementTick+0x15c>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	3301      	adds	r3, #1
 80075bc:	4a3e      	ldr	r2, [pc, #248]	; (80076b8 <xTaskIncrementTick+0x15c>)
 80075be:	6013      	str	r3, [r2, #0]
 80075c0:	f000 fac4 	bl	8007b4c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80075c4:	4b3d      	ldr	r3, [pc, #244]	; (80076bc <xTaskIncrementTick+0x160>)
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	693a      	ldr	r2, [r7, #16]
 80075ca:	429a      	cmp	r2, r3
 80075cc:	d34d      	bcc.n	800766a <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80075ce:	4b38      	ldr	r3, [pc, #224]	; (80076b0 <xTaskIncrementTick+0x154>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d101      	bne.n	80075dc <xTaskIncrementTick+0x80>
 80075d8:	2301      	movs	r3, #1
 80075da:	e000      	b.n	80075de <xTaskIncrementTick+0x82>
 80075dc:	2300      	movs	r3, #0
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d004      	beq.n	80075ec <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075e2:	4b36      	ldr	r3, [pc, #216]	; (80076bc <xTaskIncrementTick+0x160>)
 80075e4:	f04f 32ff 	mov.w	r2, #4294967295
 80075e8:	601a      	str	r2, [r3, #0]
					break;
 80075ea:	e03e      	b.n	800766a <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80075ec:	4b30      	ldr	r3, [pc, #192]	; (80076b0 <xTaskIncrementTick+0x154>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	68db      	ldr	r3, [r3, #12]
 80075f2:	68db      	ldr	r3, [r3, #12]
 80075f4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	685b      	ldr	r3, [r3, #4]
 80075fa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80075fc:	693a      	ldr	r2, [r7, #16]
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	429a      	cmp	r2, r3
 8007602:	d203      	bcs.n	800760c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007604:	4a2d      	ldr	r2, [pc, #180]	; (80076bc <xTaskIncrementTick+0x160>)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6013      	str	r3, [r2, #0]
						break;
 800760a:	e02e      	b.n	800766a <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	3304      	adds	r3, #4
 8007610:	4618      	mov	r0, r3
 8007612:	f7fe fc80 	bl	8005f16 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800761a:	2b00      	cmp	r3, #0
 800761c:	d004      	beq.n	8007628 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	3318      	adds	r3, #24
 8007622:	4618      	mov	r0, r3
 8007624:	f7fe fc77 	bl	8005f16 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800762c:	2201      	movs	r2, #1
 800762e:	409a      	lsls	r2, r3
 8007630:	4b23      	ldr	r3, [pc, #140]	; (80076c0 <xTaskIncrementTick+0x164>)
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4313      	orrs	r3, r2
 8007636:	4a22      	ldr	r2, [pc, #136]	; (80076c0 <xTaskIncrementTick+0x164>)
 8007638:	6013      	str	r3, [r2, #0]
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800763e:	4613      	mov	r3, r2
 8007640:	009b      	lsls	r3, r3, #2
 8007642:	4413      	add	r3, r2
 8007644:	009b      	lsls	r3, r3, #2
 8007646:	4a1f      	ldr	r2, [pc, #124]	; (80076c4 <xTaskIncrementTick+0x168>)
 8007648:	441a      	add	r2, r3
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	3304      	adds	r3, #4
 800764e:	4619      	mov	r1, r3
 8007650:	4610      	mov	r0, r2
 8007652:	f7fe fc03 	bl	8005e5c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800765a:	4b1b      	ldr	r3, [pc, #108]	; (80076c8 <xTaskIncrementTick+0x16c>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007660:	429a      	cmp	r2, r3
 8007662:	d3b4      	bcc.n	80075ce <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8007664:	2301      	movs	r3, #1
 8007666:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007668:	e7b1      	b.n	80075ce <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800766a:	4b17      	ldr	r3, [pc, #92]	; (80076c8 <xTaskIncrementTick+0x16c>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007670:	4914      	ldr	r1, [pc, #80]	; (80076c4 <xTaskIncrementTick+0x168>)
 8007672:	4613      	mov	r3, r2
 8007674:	009b      	lsls	r3, r3, #2
 8007676:	4413      	add	r3, r2
 8007678:	009b      	lsls	r3, r3, #2
 800767a:	440b      	add	r3, r1
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	2b01      	cmp	r3, #1
 8007680:	d907      	bls.n	8007692 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8007682:	2301      	movs	r3, #1
 8007684:	617b      	str	r3, [r7, #20]
 8007686:	e004      	b.n	8007692 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007688:	4b10      	ldr	r3, [pc, #64]	; (80076cc <xTaskIncrementTick+0x170>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	3301      	adds	r3, #1
 800768e:	4a0f      	ldr	r2, [pc, #60]	; (80076cc <xTaskIncrementTick+0x170>)
 8007690:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007692:	4b0f      	ldr	r3, [pc, #60]	; (80076d0 <xTaskIncrementTick+0x174>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d001      	beq.n	800769e <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800769a:	2301      	movs	r3, #1
 800769c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800769e:	697b      	ldr	r3, [r7, #20]
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	3718      	adds	r7, #24
 80076a4:	46bd      	mov	sp, r7
 80076a6:	bd80      	pop	{r7, pc}
 80076a8:	20000328 	.word	0x20000328
 80076ac:	20000304 	.word	0x20000304
 80076b0:	200002b8 	.word	0x200002b8
 80076b4:	200002bc 	.word	0x200002bc
 80076b8:	20000318 	.word	0x20000318
 80076bc:	20000320 	.word	0x20000320
 80076c0:	20000308 	.word	0x20000308
 80076c4:	20000204 	.word	0x20000204
 80076c8:	20000200 	.word	0x20000200
 80076cc:	20000310 	.word	0x20000310
 80076d0:	20000314 	.word	0x20000314

080076d4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b088      	sub	sp, #32
 80076d8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80076da:	4b39      	ldr	r3, [pc, #228]	; (80077c0 <vTaskSwitchContext+0xec>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d003      	beq.n	80076ea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80076e2:	4b38      	ldr	r3, [pc, #224]	; (80077c4 <vTaskSwitchContext+0xf0>)
 80076e4:	2201      	movs	r2, #1
 80076e6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80076e8:	e065      	b.n	80077b6 <vTaskSwitchContext+0xe2>
		xYieldPending = pdFALSE;
 80076ea:	4b36      	ldr	r3, [pc, #216]	; (80077c4 <vTaskSwitchContext+0xf0>)
 80076ec:	2200      	movs	r2, #0
 80076ee:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80076f0:	4b35      	ldr	r3, [pc, #212]	; (80077c8 <vTaskSwitchContext+0xf4>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076f6:	61fb      	str	r3, [r7, #28]
 80076f8:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 80076fc:	61bb      	str	r3, [r7, #24]
 80076fe:	69fb      	ldr	r3, [r7, #28]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	69ba      	ldr	r2, [r7, #24]
 8007704:	429a      	cmp	r2, r3
 8007706:	d111      	bne.n	800772c <vTaskSwitchContext+0x58>
 8007708:	69fb      	ldr	r3, [r7, #28]
 800770a:	3304      	adds	r3, #4
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	69ba      	ldr	r2, [r7, #24]
 8007710:	429a      	cmp	r2, r3
 8007712:	d10b      	bne.n	800772c <vTaskSwitchContext+0x58>
 8007714:	69fb      	ldr	r3, [r7, #28]
 8007716:	3308      	adds	r3, #8
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	69ba      	ldr	r2, [r7, #24]
 800771c:	429a      	cmp	r2, r3
 800771e:	d105      	bne.n	800772c <vTaskSwitchContext+0x58>
 8007720:	69fb      	ldr	r3, [r7, #28]
 8007722:	330c      	adds	r3, #12
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	69ba      	ldr	r2, [r7, #24]
 8007728:	429a      	cmp	r2, r3
 800772a:	d008      	beq.n	800773e <vTaskSwitchContext+0x6a>
 800772c:	4b26      	ldr	r3, [pc, #152]	; (80077c8 <vTaskSwitchContext+0xf4>)
 800772e:	681a      	ldr	r2, [r3, #0]
 8007730:	4b25      	ldr	r3, [pc, #148]	; (80077c8 <vTaskSwitchContext+0xf4>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	3334      	adds	r3, #52	; 0x34
 8007736:	4619      	mov	r1, r3
 8007738:	4610      	mov	r0, r2
 800773a:	f005 fbcd 	bl	800ced8 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800773e:	4b23      	ldr	r3, [pc, #140]	; (80077cc <vTaskSwitchContext+0xf8>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	fab3 f383 	clz	r3, r3
 800774a:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800774c:	7afb      	ldrb	r3, [r7, #11]
 800774e:	f1c3 031f 	rsb	r3, r3, #31
 8007752:	617b      	str	r3, [r7, #20]
 8007754:	491e      	ldr	r1, [pc, #120]	; (80077d0 <vTaskSwitchContext+0xfc>)
 8007756:	697a      	ldr	r2, [r7, #20]
 8007758:	4613      	mov	r3, r2
 800775a:	009b      	lsls	r3, r3, #2
 800775c:	4413      	add	r3, r2
 800775e:	009b      	lsls	r3, r3, #2
 8007760:	440b      	add	r3, r1
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d109      	bne.n	800777c <vTaskSwitchContext+0xa8>
	__asm volatile
 8007768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800776c:	f383 8811 	msr	BASEPRI, r3
 8007770:	f3bf 8f6f 	isb	sy
 8007774:	f3bf 8f4f 	dsb	sy
 8007778:	607b      	str	r3, [r7, #4]
 800777a:	e7fe      	b.n	800777a <vTaskSwitchContext+0xa6>
 800777c:	697a      	ldr	r2, [r7, #20]
 800777e:	4613      	mov	r3, r2
 8007780:	009b      	lsls	r3, r3, #2
 8007782:	4413      	add	r3, r2
 8007784:	009b      	lsls	r3, r3, #2
 8007786:	4a12      	ldr	r2, [pc, #72]	; (80077d0 <vTaskSwitchContext+0xfc>)
 8007788:	4413      	add	r3, r2
 800778a:	613b      	str	r3, [r7, #16]
 800778c:	693b      	ldr	r3, [r7, #16]
 800778e:	685b      	ldr	r3, [r3, #4]
 8007790:	685a      	ldr	r2, [r3, #4]
 8007792:	693b      	ldr	r3, [r7, #16]
 8007794:	605a      	str	r2, [r3, #4]
 8007796:	693b      	ldr	r3, [r7, #16]
 8007798:	685a      	ldr	r2, [r3, #4]
 800779a:	693b      	ldr	r3, [r7, #16]
 800779c:	3308      	adds	r3, #8
 800779e:	429a      	cmp	r2, r3
 80077a0:	d104      	bne.n	80077ac <vTaskSwitchContext+0xd8>
 80077a2:	693b      	ldr	r3, [r7, #16]
 80077a4:	685b      	ldr	r3, [r3, #4]
 80077a6:	685a      	ldr	r2, [r3, #4]
 80077a8:	693b      	ldr	r3, [r7, #16]
 80077aa:	605a      	str	r2, [r3, #4]
 80077ac:	693b      	ldr	r3, [r7, #16]
 80077ae:	685b      	ldr	r3, [r3, #4]
 80077b0:	68db      	ldr	r3, [r3, #12]
 80077b2:	4a05      	ldr	r2, [pc, #20]	; (80077c8 <vTaskSwitchContext+0xf4>)
 80077b4:	6013      	str	r3, [r2, #0]
}
 80077b6:	bf00      	nop
 80077b8:	3720      	adds	r7, #32
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}
 80077be:	bf00      	nop
 80077c0:	20000328 	.word	0x20000328
 80077c4:	20000314 	.word	0x20000314
 80077c8:	20000200 	.word	0x20000200
 80077cc:	20000308 	.word	0x20000308
 80077d0:	20000204 	.word	0x20000204

080077d4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b084      	sub	sp, #16
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
 80077dc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d109      	bne.n	80077f8 <vTaskPlaceOnEventList+0x24>
 80077e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077e8:	f383 8811 	msr	BASEPRI, r3
 80077ec:	f3bf 8f6f 	isb	sy
 80077f0:	f3bf 8f4f 	dsb	sy
 80077f4:	60fb      	str	r3, [r7, #12]
 80077f6:	e7fe      	b.n	80077f6 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80077f8:	4b07      	ldr	r3, [pc, #28]	; (8007818 <vTaskPlaceOnEventList+0x44>)
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	3318      	adds	r3, #24
 80077fe:	4619      	mov	r1, r3
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f7fe fb4f 	bl	8005ea4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007806:	2101      	movs	r1, #1
 8007808:	6838      	ldr	r0, [r7, #0]
 800780a:	f000 fcf1 	bl	80081f0 <prvAddCurrentTaskToDelayedList>
}
 800780e:	bf00      	nop
 8007810:	3710      	adds	r7, #16
 8007812:	46bd      	mov	sp, r7
 8007814:	bd80      	pop	{r7, pc}
 8007816:	bf00      	nop
 8007818:	20000200 	.word	0x20000200

0800781c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b086      	sub	sp, #24
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	68db      	ldr	r3, [r3, #12]
 8007828:	68db      	ldr	r3, [r3, #12]
 800782a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800782c:	693b      	ldr	r3, [r7, #16]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d109      	bne.n	8007846 <xTaskRemoveFromEventList+0x2a>
 8007832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007836:	f383 8811 	msr	BASEPRI, r3
 800783a:	f3bf 8f6f 	isb	sy
 800783e:	f3bf 8f4f 	dsb	sy
 8007842:	60fb      	str	r3, [r7, #12]
 8007844:	e7fe      	b.n	8007844 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007846:	693b      	ldr	r3, [r7, #16]
 8007848:	3318      	adds	r3, #24
 800784a:	4618      	mov	r0, r3
 800784c:	f7fe fb63 	bl	8005f16 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007850:	4b1d      	ldr	r3, [pc, #116]	; (80078c8 <xTaskRemoveFromEventList+0xac>)
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d11c      	bne.n	8007892 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007858:	693b      	ldr	r3, [r7, #16]
 800785a:	3304      	adds	r3, #4
 800785c:	4618      	mov	r0, r3
 800785e:	f7fe fb5a 	bl	8005f16 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007862:	693b      	ldr	r3, [r7, #16]
 8007864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007866:	2201      	movs	r2, #1
 8007868:	409a      	lsls	r2, r3
 800786a:	4b18      	ldr	r3, [pc, #96]	; (80078cc <xTaskRemoveFromEventList+0xb0>)
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	4313      	orrs	r3, r2
 8007870:	4a16      	ldr	r2, [pc, #88]	; (80078cc <xTaskRemoveFromEventList+0xb0>)
 8007872:	6013      	str	r3, [r2, #0]
 8007874:	693b      	ldr	r3, [r7, #16]
 8007876:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007878:	4613      	mov	r3, r2
 800787a:	009b      	lsls	r3, r3, #2
 800787c:	4413      	add	r3, r2
 800787e:	009b      	lsls	r3, r3, #2
 8007880:	4a13      	ldr	r2, [pc, #76]	; (80078d0 <xTaskRemoveFromEventList+0xb4>)
 8007882:	441a      	add	r2, r3
 8007884:	693b      	ldr	r3, [r7, #16]
 8007886:	3304      	adds	r3, #4
 8007888:	4619      	mov	r1, r3
 800788a:	4610      	mov	r0, r2
 800788c:	f7fe fae6 	bl	8005e5c <vListInsertEnd>
 8007890:	e005      	b.n	800789e <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007892:	693b      	ldr	r3, [r7, #16]
 8007894:	3318      	adds	r3, #24
 8007896:	4619      	mov	r1, r3
 8007898:	480e      	ldr	r0, [pc, #56]	; (80078d4 <xTaskRemoveFromEventList+0xb8>)
 800789a:	f7fe fadf 	bl	8005e5c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800789e:	693b      	ldr	r3, [r7, #16]
 80078a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078a2:	4b0d      	ldr	r3, [pc, #52]	; (80078d8 <xTaskRemoveFromEventList+0xbc>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078a8:	429a      	cmp	r2, r3
 80078aa:	d905      	bls.n	80078b8 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80078ac:	2301      	movs	r3, #1
 80078ae:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80078b0:	4b0a      	ldr	r3, [pc, #40]	; (80078dc <xTaskRemoveFromEventList+0xc0>)
 80078b2:	2201      	movs	r2, #1
 80078b4:	601a      	str	r2, [r3, #0]
 80078b6:	e001      	b.n	80078bc <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 80078b8:	2300      	movs	r3, #0
 80078ba:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80078bc:	697b      	ldr	r3, [r7, #20]
}
 80078be:	4618      	mov	r0, r3
 80078c0:	3718      	adds	r7, #24
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}
 80078c6:	bf00      	nop
 80078c8:	20000328 	.word	0x20000328
 80078cc:	20000308 	.word	0x20000308
 80078d0:	20000204 	.word	0x20000204
 80078d4:	200002c0 	.word	0x200002c0
 80078d8:	20000200 	.word	0x20000200
 80078dc:	20000314 	.word	0x20000314

080078e0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80078e0:	b480      	push	{r7}
 80078e2:	b083      	sub	sp, #12
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80078e8:	4b06      	ldr	r3, [pc, #24]	; (8007904 <vTaskInternalSetTimeOutState+0x24>)
 80078ea:	681a      	ldr	r2, [r3, #0]
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80078f0:	4b05      	ldr	r3, [pc, #20]	; (8007908 <vTaskInternalSetTimeOutState+0x28>)
 80078f2:	681a      	ldr	r2, [r3, #0]
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	605a      	str	r2, [r3, #4]
}
 80078f8:	bf00      	nop
 80078fa:	370c      	adds	r7, #12
 80078fc:	46bd      	mov	sp, r7
 80078fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007902:	4770      	bx	lr
 8007904:	20000318 	.word	0x20000318
 8007908:	20000304 	.word	0x20000304

0800790c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b088      	sub	sp, #32
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
 8007914:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d109      	bne.n	8007930 <xTaskCheckForTimeOut+0x24>
 800791c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007920:	f383 8811 	msr	BASEPRI, r3
 8007924:	f3bf 8f6f 	isb	sy
 8007928:	f3bf 8f4f 	dsb	sy
 800792c:	613b      	str	r3, [r7, #16]
 800792e:	e7fe      	b.n	800792e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d109      	bne.n	800794a <xTaskCheckForTimeOut+0x3e>
 8007936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800793a:	f383 8811 	msr	BASEPRI, r3
 800793e:	f3bf 8f6f 	isb	sy
 8007942:	f3bf 8f4f 	dsb	sy
 8007946:	60fb      	str	r3, [r7, #12]
 8007948:	e7fe      	b.n	8007948 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800794a:	f000 fddf 	bl	800850c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800794e:	4b24      	ldr	r3, [pc, #144]	; (80079e0 <xTaskCheckForTimeOut+0xd4>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	685b      	ldr	r3, [r3, #4]
 8007958:	69ba      	ldr	r2, [r7, #24]
 800795a:	1ad3      	subs	r3, r2, r3
 800795c:	617b      	str	r3, [r7, #20]

		#if( INCLUDE_xTaskAbortDelay == 1 )
			if( pxCurrentTCB->ucDelayAborted != pdFALSE )
 800795e:	4b21      	ldr	r3, [pc, #132]	; (80079e4 <xTaskCheckForTimeOut+0xd8>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8007966:	2b00      	cmp	r3, #0
 8007968:	d007      	beq.n	800797a <xTaskCheckForTimeOut+0x6e>
			{
				/* The delay was aborted, which is not the same as a time out,
				but has the same result. */
				pxCurrentTCB->ucDelayAborted = pdFALSE;
 800796a:	4b1e      	ldr	r3, [pc, #120]	; (80079e4 <xTaskCheckForTimeOut+0xd8>)
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	2200      	movs	r2, #0
 8007970:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
				xReturn = pdTRUE;
 8007974:	2301      	movs	r3, #1
 8007976:	61fb      	str	r3, [r7, #28]
 8007978:	e02b      	b.n	80079d2 <xTaskCheckForTimeOut+0xc6>
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007982:	d102      	bne.n	800798a <xTaskCheckForTimeOut+0x7e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007984:	2300      	movs	r3, #0
 8007986:	61fb      	str	r3, [r7, #28]
 8007988:	e023      	b.n	80079d2 <xTaskCheckForTimeOut+0xc6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681a      	ldr	r2, [r3, #0]
 800798e:	4b16      	ldr	r3, [pc, #88]	; (80079e8 <xTaskCheckForTimeOut+0xdc>)
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	429a      	cmp	r2, r3
 8007994:	d007      	beq.n	80079a6 <xTaskCheckForTimeOut+0x9a>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	685b      	ldr	r3, [r3, #4]
 800799a:	69ba      	ldr	r2, [r7, #24]
 800799c:	429a      	cmp	r2, r3
 800799e:	d302      	bcc.n	80079a6 <xTaskCheckForTimeOut+0x9a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80079a0:	2301      	movs	r3, #1
 80079a2:	61fb      	str	r3, [r7, #28]
 80079a4:	e015      	b.n	80079d2 <xTaskCheckForTimeOut+0xc6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	697a      	ldr	r2, [r7, #20]
 80079ac:	429a      	cmp	r2, r3
 80079ae:	d20b      	bcs.n	80079c8 <xTaskCheckForTimeOut+0xbc>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	681a      	ldr	r2, [r3, #0]
 80079b4:	697b      	ldr	r3, [r7, #20]
 80079b6:	1ad2      	subs	r2, r2, r3
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f7ff ff8f 	bl	80078e0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80079c2:	2300      	movs	r3, #0
 80079c4:	61fb      	str	r3, [r7, #28]
 80079c6:	e004      	b.n	80079d2 <xTaskCheckForTimeOut+0xc6>
		}
		else
		{
			*pxTicksToWait = 0;
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	2200      	movs	r2, #0
 80079cc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80079ce:	2301      	movs	r3, #1
 80079d0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80079d2:	f000 fdc9 	bl	8008568 <vPortExitCritical>

	return xReturn;
 80079d6:	69fb      	ldr	r3, [r7, #28]
}
 80079d8:	4618      	mov	r0, r3
 80079da:	3720      	adds	r7, #32
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}
 80079e0:	20000304 	.word	0x20000304
 80079e4:	20000200 	.word	0x20000200
 80079e8:	20000318 	.word	0x20000318

080079ec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80079ec:	b480      	push	{r7}
 80079ee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80079f0:	4b03      	ldr	r3, [pc, #12]	; (8007a00 <vTaskMissedYield+0x14>)
 80079f2:	2201      	movs	r2, #1
 80079f4:	601a      	str	r2, [r3, #0]
}
 80079f6:	bf00      	nop
 80079f8:	46bd      	mov	sp, r7
 80079fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fe:	4770      	bx	lr
 8007a00:	20000314 	.word	0x20000314

08007a04 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b082      	sub	sp, #8
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007a0c:	f000 f844 	bl	8007a98 <prvCheckTasksWaitingTermination>
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8007a10:	f005 fee2 	bl	800d7d8 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8007a14:	e7fa      	b.n	8007a0c <prvIdleTask+0x8>
	...

08007a18 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b082      	sub	sp, #8
 8007a1c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007a1e:	2300      	movs	r3, #0
 8007a20:	607b      	str	r3, [r7, #4]
 8007a22:	e00c      	b.n	8007a3e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007a24:	687a      	ldr	r2, [r7, #4]
 8007a26:	4613      	mov	r3, r2
 8007a28:	009b      	lsls	r3, r3, #2
 8007a2a:	4413      	add	r3, r2
 8007a2c:	009b      	lsls	r3, r3, #2
 8007a2e:	4a12      	ldr	r2, [pc, #72]	; (8007a78 <prvInitialiseTaskLists+0x60>)
 8007a30:	4413      	add	r3, r2
 8007a32:	4618      	mov	r0, r3
 8007a34:	f7fe f9e5 	bl	8005e02 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	3301      	adds	r3, #1
 8007a3c:	607b      	str	r3, [r7, #4]
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2b06      	cmp	r3, #6
 8007a42:	d9ef      	bls.n	8007a24 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007a44:	480d      	ldr	r0, [pc, #52]	; (8007a7c <prvInitialiseTaskLists+0x64>)
 8007a46:	f7fe f9dc 	bl	8005e02 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007a4a:	480d      	ldr	r0, [pc, #52]	; (8007a80 <prvInitialiseTaskLists+0x68>)
 8007a4c:	f7fe f9d9 	bl	8005e02 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007a50:	480c      	ldr	r0, [pc, #48]	; (8007a84 <prvInitialiseTaskLists+0x6c>)
 8007a52:	f7fe f9d6 	bl	8005e02 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007a56:	480c      	ldr	r0, [pc, #48]	; (8007a88 <prvInitialiseTaskLists+0x70>)
 8007a58:	f7fe f9d3 	bl	8005e02 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007a5c:	480b      	ldr	r0, [pc, #44]	; (8007a8c <prvInitialiseTaskLists+0x74>)
 8007a5e:	f7fe f9d0 	bl	8005e02 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007a62:	4b0b      	ldr	r3, [pc, #44]	; (8007a90 <prvInitialiseTaskLists+0x78>)
 8007a64:	4a05      	ldr	r2, [pc, #20]	; (8007a7c <prvInitialiseTaskLists+0x64>)
 8007a66:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007a68:	4b0a      	ldr	r3, [pc, #40]	; (8007a94 <prvInitialiseTaskLists+0x7c>)
 8007a6a:	4a05      	ldr	r2, [pc, #20]	; (8007a80 <prvInitialiseTaskLists+0x68>)
 8007a6c:	601a      	str	r2, [r3, #0]
}
 8007a6e:	bf00      	nop
 8007a70:	3708      	adds	r7, #8
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}
 8007a76:	bf00      	nop
 8007a78:	20000204 	.word	0x20000204
 8007a7c:	20000290 	.word	0x20000290
 8007a80:	200002a4 	.word	0x200002a4
 8007a84:	200002c0 	.word	0x200002c0
 8007a88:	200002d4 	.word	0x200002d4
 8007a8c:	200002ec 	.word	0x200002ec
 8007a90:	200002b8 	.word	0x200002b8
 8007a94:	200002bc 	.word	0x200002bc

08007a98 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b082      	sub	sp, #8
 8007a9c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007a9e:	e019      	b.n	8007ad4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007aa0:	f000 fd34 	bl	800850c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007aa4:	4b0f      	ldr	r3, [pc, #60]	; (8007ae4 <prvCheckTasksWaitingTermination+0x4c>)
 8007aa6:	68db      	ldr	r3, [r3, #12]
 8007aa8:	68db      	ldr	r3, [r3, #12]
 8007aaa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	3304      	adds	r3, #4
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	f7fe fa30 	bl	8005f16 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007ab6:	4b0c      	ldr	r3, [pc, #48]	; (8007ae8 <prvCheckTasksWaitingTermination+0x50>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	3b01      	subs	r3, #1
 8007abc:	4a0a      	ldr	r2, [pc, #40]	; (8007ae8 <prvCheckTasksWaitingTermination+0x50>)
 8007abe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007ac0:	4b0a      	ldr	r3, [pc, #40]	; (8007aec <prvCheckTasksWaitingTermination+0x54>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	3b01      	subs	r3, #1
 8007ac6:	4a09      	ldr	r2, [pc, #36]	; (8007aec <prvCheckTasksWaitingTermination+0x54>)
 8007ac8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007aca:	f000 fd4d 	bl	8008568 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f000 f80e 	bl	8007af0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007ad4:	4b05      	ldr	r3, [pc, #20]	; (8007aec <prvCheckTasksWaitingTermination+0x54>)
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d1e1      	bne.n	8007aa0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007adc:	bf00      	nop
 8007ade:	3708      	adds	r7, #8
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}
 8007ae4:	200002d4 	.word	0x200002d4
 8007ae8:	20000300 	.word	0x20000300
 8007aec:	200002e8 	.word	0x200002e8

08007af0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b084      	sub	sp, #16
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d108      	bne.n	8007b14 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b06:	4618      	mov	r0, r3
 8007b08:	f000 fee0 	bl	80088cc <vPortFree>
				vPortFree( pxTCB );
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	f000 fedd 	bl	80088cc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007b12:	e017      	b.n	8007b44 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007b1a:	2b01      	cmp	r3, #1
 8007b1c:	d103      	bne.n	8007b26 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f000 fed4 	bl	80088cc <vPortFree>
	}
 8007b24:	e00e      	b.n	8007b44 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007b2c:	2b02      	cmp	r3, #2
 8007b2e:	d009      	beq.n	8007b44 <prvDeleteTCB+0x54>
 8007b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b34:	f383 8811 	msr	BASEPRI, r3
 8007b38:	f3bf 8f6f 	isb	sy
 8007b3c:	f3bf 8f4f 	dsb	sy
 8007b40:	60fb      	str	r3, [r7, #12]
 8007b42:	e7fe      	b.n	8007b42 <prvDeleteTCB+0x52>
	}
 8007b44:	bf00      	nop
 8007b46:	3710      	adds	r7, #16
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	bd80      	pop	{r7, pc}

08007b4c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b083      	sub	sp, #12
 8007b50:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b52:	4b0f      	ldr	r3, [pc, #60]	; (8007b90 <prvResetNextTaskUnblockTime+0x44>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d101      	bne.n	8007b60 <prvResetNextTaskUnblockTime+0x14>
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	e000      	b.n	8007b62 <prvResetNextTaskUnblockTime+0x16>
 8007b60:	2300      	movs	r3, #0
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d004      	beq.n	8007b70 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007b66:	4b0b      	ldr	r3, [pc, #44]	; (8007b94 <prvResetNextTaskUnblockTime+0x48>)
 8007b68:	f04f 32ff 	mov.w	r2, #4294967295
 8007b6c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007b6e:	e008      	b.n	8007b82 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007b70:	4b07      	ldr	r3, [pc, #28]	; (8007b90 <prvResetNextTaskUnblockTime+0x44>)
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	68db      	ldr	r3, [r3, #12]
 8007b76:	68db      	ldr	r3, [r3, #12]
 8007b78:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	685b      	ldr	r3, [r3, #4]
 8007b7e:	4a05      	ldr	r2, [pc, #20]	; (8007b94 <prvResetNextTaskUnblockTime+0x48>)
 8007b80:	6013      	str	r3, [r2, #0]
}
 8007b82:	bf00      	nop
 8007b84:	370c      	adds	r7, #12
 8007b86:	46bd      	mov	sp, r7
 8007b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8c:	4770      	bx	lr
 8007b8e:	bf00      	nop
 8007b90:	200002b8 	.word	0x200002b8
 8007b94:	20000320 	.word	0x20000320

08007b98 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8007b98:	b480      	push	{r7}
 8007b9a:	b083      	sub	sp, #12
 8007b9c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8007b9e:	4b05      	ldr	r3, [pc, #20]	; (8007bb4 <xTaskGetCurrentTaskHandle+0x1c>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	607b      	str	r3, [r7, #4]

		return xReturn;
 8007ba4:	687b      	ldr	r3, [r7, #4]
	}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	370c      	adds	r7, #12
 8007baa:	46bd      	mov	sp, r7
 8007bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb0:	4770      	bx	lr
 8007bb2:	bf00      	nop
 8007bb4:	20000200 	.word	0x20000200

08007bb8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007bb8:	b480      	push	{r7}
 8007bba:	b083      	sub	sp, #12
 8007bbc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007bbe:	4b0b      	ldr	r3, [pc, #44]	; (8007bec <xTaskGetSchedulerState+0x34>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d102      	bne.n	8007bcc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	607b      	str	r3, [r7, #4]
 8007bca:	e008      	b.n	8007bde <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007bcc:	4b08      	ldr	r3, [pc, #32]	; (8007bf0 <xTaskGetSchedulerState+0x38>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d102      	bne.n	8007bda <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007bd4:	2302      	movs	r3, #2
 8007bd6:	607b      	str	r3, [r7, #4]
 8007bd8:	e001      	b.n	8007bde <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007bda:	2300      	movs	r3, #0
 8007bdc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007bde:	687b      	ldr	r3, [r7, #4]
	}
 8007be0:	4618      	mov	r0, r3
 8007be2:	370c      	adds	r7, #12
 8007be4:	46bd      	mov	sp, r7
 8007be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bea:	4770      	bx	lr
 8007bec:	2000030c 	.word	0x2000030c
 8007bf0:	20000328 	.word	0x20000328

08007bf4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b084      	sub	sp, #16
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007c00:	2300      	movs	r3, #0
 8007c02:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d06e      	beq.n	8007ce8 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c0e:	4b39      	ldr	r3, [pc, #228]	; (8007cf4 <xTaskPriorityInherit+0x100>)
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c14:	429a      	cmp	r2, r3
 8007c16:	d25e      	bcs.n	8007cd6 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	699b      	ldr	r3, [r3, #24]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	db06      	blt.n	8007c2e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c20:	4b34      	ldr	r3, [pc, #208]	; (8007cf4 <xTaskPriorityInherit+0x100>)
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c26:	f1c3 0207 	rsb	r2, r3, #7
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	6959      	ldr	r1, [r3, #20]
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c36:	4613      	mov	r3, r2
 8007c38:	009b      	lsls	r3, r3, #2
 8007c3a:	4413      	add	r3, r2
 8007c3c:	009b      	lsls	r3, r3, #2
 8007c3e:	4a2e      	ldr	r2, [pc, #184]	; (8007cf8 <xTaskPriorityInherit+0x104>)
 8007c40:	4413      	add	r3, r2
 8007c42:	4299      	cmp	r1, r3
 8007c44:	d101      	bne.n	8007c4a <xTaskPriorityInherit+0x56>
 8007c46:	2301      	movs	r3, #1
 8007c48:	e000      	b.n	8007c4c <xTaskPriorityInherit+0x58>
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d03a      	beq.n	8007cc6 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	3304      	adds	r3, #4
 8007c54:	4618      	mov	r0, r3
 8007c56:	f7fe f95e 	bl	8005f16 <uxListRemove>
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d115      	bne.n	8007c8c <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c64:	4924      	ldr	r1, [pc, #144]	; (8007cf8 <xTaskPriorityInherit+0x104>)
 8007c66:	4613      	mov	r3, r2
 8007c68:	009b      	lsls	r3, r3, #2
 8007c6a:	4413      	add	r3, r2
 8007c6c:	009b      	lsls	r3, r3, #2
 8007c6e:	440b      	add	r3, r1
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d10a      	bne.n	8007c8c <xTaskPriorityInherit+0x98>
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c7a:	2201      	movs	r2, #1
 8007c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8007c80:	43da      	mvns	r2, r3
 8007c82:	4b1e      	ldr	r3, [pc, #120]	; (8007cfc <xTaskPriorityInherit+0x108>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	4013      	ands	r3, r2
 8007c88:	4a1c      	ldr	r2, [pc, #112]	; (8007cfc <xTaskPriorityInherit+0x108>)
 8007c8a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007c8c:	4b19      	ldr	r3, [pc, #100]	; (8007cf4 <xTaskPriorityInherit+0x100>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c9a:	2201      	movs	r2, #1
 8007c9c:	409a      	lsls	r2, r3
 8007c9e:	4b17      	ldr	r3, [pc, #92]	; (8007cfc <xTaskPriorityInherit+0x108>)
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	4313      	orrs	r3, r2
 8007ca4:	4a15      	ldr	r2, [pc, #84]	; (8007cfc <xTaskPriorityInherit+0x108>)
 8007ca6:	6013      	str	r3, [r2, #0]
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cac:	4613      	mov	r3, r2
 8007cae:	009b      	lsls	r3, r3, #2
 8007cb0:	4413      	add	r3, r2
 8007cb2:	009b      	lsls	r3, r3, #2
 8007cb4:	4a10      	ldr	r2, [pc, #64]	; (8007cf8 <xTaskPriorityInherit+0x104>)
 8007cb6:	441a      	add	r2, r3
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	3304      	adds	r3, #4
 8007cbc:	4619      	mov	r1, r3
 8007cbe:	4610      	mov	r0, r2
 8007cc0:	f7fe f8cc 	bl	8005e5c <vListInsertEnd>
 8007cc4:	e004      	b.n	8007cd0 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007cc6:	4b0b      	ldr	r3, [pc, #44]	; (8007cf4 <xTaskPriorityInherit+0x100>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007cd0:	2301      	movs	r3, #1
 8007cd2:	60fb      	str	r3, [r7, #12]
 8007cd4:	e008      	b.n	8007ce8 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007cda:	4b06      	ldr	r3, [pc, #24]	; (8007cf4 <xTaskPriorityInherit+0x100>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ce0:	429a      	cmp	r2, r3
 8007ce2:	d201      	bcs.n	8007ce8 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
	}
 8007cea:	4618      	mov	r0, r3
 8007cec:	3710      	adds	r7, #16
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bd80      	pop	{r7, pc}
 8007cf2:	bf00      	nop
 8007cf4:	20000200 	.word	0x20000200
 8007cf8:	20000204 	.word	0x20000204
 8007cfc:	20000308 	.word	0x20000308

08007d00 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b086      	sub	sp, #24
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d06c      	beq.n	8007df0 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007d16:	4b39      	ldr	r3, [pc, #228]	; (8007dfc <xTaskPriorityDisinherit+0xfc>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	693a      	ldr	r2, [r7, #16]
 8007d1c:	429a      	cmp	r2, r3
 8007d1e:	d009      	beq.n	8007d34 <xTaskPriorityDisinherit+0x34>
 8007d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d24:	f383 8811 	msr	BASEPRI, r3
 8007d28:	f3bf 8f6f 	isb	sy
 8007d2c:	f3bf 8f4f 	dsb	sy
 8007d30:	60fb      	str	r3, [r7, #12]
 8007d32:	e7fe      	b.n	8007d32 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8007d34:	693b      	ldr	r3, [r7, #16]
 8007d36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d109      	bne.n	8007d50 <xTaskPriorityDisinherit+0x50>
 8007d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d40:	f383 8811 	msr	BASEPRI, r3
 8007d44:	f3bf 8f6f 	isb	sy
 8007d48:	f3bf 8f4f 	dsb	sy
 8007d4c:	60bb      	str	r3, [r7, #8]
 8007d4e:	e7fe      	b.n	8007d4e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8007d50:	693b      	ldr	r3, [r7, #16]
 8007d52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d54:	1e5a      	subs	r2, r3, #1
 8007d56:	693b      	ldr	r3, [r7, #16]
 8007d58:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007d5a:	693b      	ldr	r3, [r7, #16]
 8007d5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d5e:	693b      	ldr	r3, [r7, #16]
 8007d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d62:	429a      	cmp	r2, r3
 8007d64:	d044      	beq.n	8007df0 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d140      	bne.n	8007df0 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007d6e:	693b      	ldr	r3, [r7, #16]
 8007d70:	3304      	adds	r3, #4
 8007d72:	4618      	mov	r0, r3
 8007d74:	f7fe f8cf 	bl	8005f16 <uxListRemove>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d115      	bne.n	8007daa <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007d7e:	693b      	ldr	r3, [r7, #16]
 8007d80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d82:	491f      	ldr	r1, [pc, #124]	; (8007e00 <xTaskPriorityDisinherit+0x100>)
 8007d84:	4613      	mov	r3, r2
 8007d86:	009b      	lsls	r3, r3, #2
 8007d88:	4413      	add	r3, r2
 8007d8a:	009b      	lsls	r3, r3, #2
 8007d8c:	440b      	add	r3, r1
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d10a      	bne.n	8007daa <xTaskPriorityDisinherit+0xaa>
 8007d94:	693b      	ldr	r3, [r7, #16]
 8007d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d98:	2201      	movs	r2, #1
 8007d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8007d9e:	43da      	mvns	r2, r3
 8007da0:	4b18      	ldr	r3, [pc, #96]	; (8007e04 <xTaskPriorityDisinherit+0x104>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	4013      	ands	r3, r2
 8007da6:	4a17      	ldr	r2, [pc, #92]	; (8007e04 <xTaskPriorityDisinherit+0x104>)
 8007da8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007daa:	693b      	ldr	r3, [r7, #16]
 8007dac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007dae:	693b      	ldr	r3, [r7, #16]
 8007db0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007db2:	693b      	ldr	r3, [r7, #16]
 8007db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007db6:	f1c3 0207 	rsb	r2, r3, #7
 8007dba:	693b      	ldr	r3, [r7, #16]
 8007dbc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007dbe:	693b      	ldr	r3, [r7, #16]
 8007dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dc2:	2201      	movs	r2, #1
 8007dc4:	409a      	lsls	r2, r3
 8007dc6:	4b0f      	ldr	r3, [pc, #60]	; (8007e04 <xTaskPriorityDisinherit+0x104>)
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	4313      	orrs	r3, r2
 8007dcc:	4a0d      	ldr	r2, [pc, #52]	; (8007e04 <xTaskPriorityDisinherit+0x104>)
 8007dce:	6013      	str	r3, [r2, #0]
 8007dd0:	693b      	ldr	r3, [r7, #16]
 8007dd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dd4:	4613      	mov	r3, r2
 8007dd6:	009b      	lsls	r3, r3, #2
 8007dd8:	4413      	add	r3, r2
 8007dda:	009b      	lsls	r3, r3, #2
 8007ddc:	4a08      	ldr	r2, [pc, #32]	; (8007e00 <xTaskPriorityDisinherit+0x100>)
 8007dde:	441a      	add	r2, r3
 8007de0:	693b      	ldr	r3, [r7, #16]
 8007de2:	3304      	adds	r3, #4
 8007de4:	4619      	mov	r1, r3
 8007de6:	4610      	mov	r0, r2
 8007de8:	f7fe f838 	bl	8005e5c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007dec:	2301      	movs	r3, #1
 8007dee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007df0:	697b      	ldr	r3, [r7, #20]
	}
 8007df2:	4618      	mov	r0, r3
 8007df4:	3718      	adds	r7, #24
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd80      	pop	{r7, pc}
 8007dfa:	bf00      	nop
 8007dfc:	20000200 	.word	0x20000200
 8007e00:	20000204 	.word	0x20000204
 8007e04:	20000308 	.word	0x20000308

08007e08 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b088      	sub	sp, #32
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
 8007e10:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007e16:	2301      	movs	r3, #1
 8007e18:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	f000 8086 	beq.w	8007f2e <vTaskPriorityDisinheritAfterTimeout+0x126>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007e22:	69bb      	ldr	r3, [r7, #24]
 8007e24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d109      	bne.n	8007e3e <vTaskPriorityDisinheritAfterTimeout+0x36>
 8007e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e2e:	f383 8811 	msr	BASEPRI, r3
 8007e32:	f3bf 8f6f 	isb	sy
 8007e36:	f3bf 8f4f 	dsb	sy
 8007e3a:	60fb      	str	r3, [r7, #12]
 8007e3c:	e7fe      	b.n	8007e3c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007e3e:	69bb      	ldr	r3, [r7, #24]
 8007e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e42:	683a      	ldr	r2, [r7, #0]
 8007e44:	429a      	cmp	r2, r3
 8007e46:	d902      	bls.n	8007e4e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	61fb      	str	r3, [r7, #28]
 8007e4c:	e002      	b.n	8007e54 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007e4e:	69bb      	ldr	r3, [r7, #24]
 8007e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e52:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007e54:	69bb      	ldr	r3, [r7, #24]
 8007e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e58:	69fa      	ldr	r2, [r7, #28]
 8007e5a:	429a      	cmp	r2, r3
 8007e5c:	d067      	beq.n	8007f2e <vTaskPriorityDisinheritAfterTimeout+0x126>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007e5e:	69bb      	ldr	r3, [r7, #24]
 8007e60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e62:	697a      	ldr	r2, [r7, #20]
 8007e64:	429a      	cmp	r2, r3
 8007e66:	d162      	bne.n	8007f2e <vTaskPriorityDisinheritAfterTimeout+0x126>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007e68:	4b33      	ldr	r3, [pc, #204]	; (8007f38 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	69ba      	ldr	r2, [r7, #24]
 8007e6e:	429a      	cmp	r2, r3
 8007e70:	d109      	bne.n	8007e86 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 8007e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e76:	f383 8811 	msr	BASEPRI, r3
 8007e7a:	f3bf 8f6f 	isb	sy
 8007e7e:	f3bf 8f4f 	dsb	sy
 8007e82:	60bb      	str	r3, [r7, #8]
 8007e84:	e7fe      	b.n	8007e84 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007e86:	69bb      	ldr	r3, [r7, #24]
 8007e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e8a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007e8c:	69bb      	ldr	r3, [r7, #24]
 8007e8e:	69fa      	ldr	r2, [r7, #28]
 8007e90:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007e92:	69bb      	ldr	r3, [r7, #24]
 8007e94:	699b      	ldr	r3, [r3, #24]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	db04      	blt.n	8007ea4 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e9a:	69fb      	ldr	r3, [r7, #28]
 8007e9c:	f1c3 0207 	rsb	r2, r3, #7
 8007ea0:	69bb      	ldr	r3, [r7, #24]
 8007ea2:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007ea4:	69bb      	ldr	r3, [r7, #24]
 8007ea6:	6959      	ldr	r1, [r3, #20]
 8007ea8:	693a      	ldr	r2, [r7, #16]
 8007eaa:	4613      	mov	r3, r2
 8007eac:	009b      	lsls	r3, r3, #2
 8007eae:	4413      	add	r3, r2
 8007eb0:	009b      	lsls	r3, r3, #2
 8007eb2:	4a22      	ldr	r2, [pc, #136]	; (8007f3c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8007eb4:	4413      	add	r3, r2
 8007eb6:	4299      	cmp	r1, r3
 8007eb8:	d101      	bne.n	8007ebe <vTaskPriorityDisinheritAfterTimeout+0xb6>
 8007eba:	2301      	movs	r3, #1
 8007ebc:	e000      	b.n	8007ec0 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d034      	beq.n	8007f2e <vTaskPriorityDisinheritAfterTimeout+0x126>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007ec4:	69bb      	ldr	r3, [r7, #24]
 8007ec6:	3304      	adds	r3, #4
 8007ec8:	4618      	mov	r0, r3
 8007eca:	f7fe f824 	bl	8005f16 <uxListRemove>
 8007ece:	4603      	mov	r3, r0
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d115      	bne.n	8007f00 <vTaskPriorityDisinheritAfterTimeout+0xf8>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007ed4:	69bb      	ldr	r3, [r7, #24]
 8007ed6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ed8:	4918      	ldr	r1, [pc, #96]	; (8007f3c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8007eda:	4613      	mov	r3, r2
 8007edc:	009b      	lsls	r3, r3, #2
 8007ede:	4413      	add	r3, r2
 8007ee0:	009b      	lsls	r3, r3, #2
 8007ee2:	440b      	add	r3, r1
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d10a      	bne.n	8007f00 <vTaskPriorityDisinheritAfterTimeout+0xf8>
 8007eea:	69bb      	ldr	r3, [r7, #24]
 8007eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eee:	2201      	movs	r2, #1
 8007ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8007ef4:	43da      	mvns	r2, r3
 8007ef6:	4b12      	ldr	r3, [pc, #72]	; (8007f40 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	4013      	ands	r3, r2
 8007efc:	4a10      	ldr	r2, [pc, #64]	; (8007f40 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8007efe:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007f00:	69bb      	ldr	r3, [r7, #24]
 8007f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f04:	2201      	movs	r2, #1
 8007f06:	409a      	lsls	r2, r3
 8007f08:	4b0d      	ldr	r3, [pc, #52]	; (8007f40 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	4313      	orrs	r3, r2
 8007f0e:	4a0c      	ldr	r2, [pc, #48]	; (8007f40 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8007f10:	6013      	str	r3, [r2, #0]
 8007f12:	69bb      	ldr	r3, [r7, #24]
 8007f14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f16:	4613      	mov	r3, r2
 8007f18:	009b      	lsls	r3, r3, #2
 8007f1a:	4413      	add	r3, r2
 8007f1c:	009b      	lsls	r3, r3, #2
 8007f1e:	4a07      	ldr	r2, [pc, #28]	; (8007f3c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8007f20:	441a      	add	r2, r3
 8007f22:	69bb      	ldr	r3, [r7, #24]
 8007f24:	3304      	adds	r3, #4
 8007f26:	4619      	mov	r1, r3
 8007f28:	4610      	mov	r0, r2
 8007f2a:	f7fd ff97 	bl	8005e5c <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007f2e:	bf00      	nop
 8007f30:	3720      	adds	r7, #32
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bd80      	pop	{r7, pc}
 8007f36:	bf00      	nop
 8007f38:	20000200 	.word	0x20000200
 8007f3c:	20000204 	.word	0x20000204
 8007f40:	20000308 	.word	0x20000308

08007f44 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8007f44:	b480      	push	{r7}
 8007f46:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007f48:	4b07      	ldr	r3, [pc, #28]	; (8007f68 <pvTaskIncrementMutexHeldCount+0x24>)
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d004      	beq.n	8007f5a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007f50:	4b05      	ldr	r3, [pc, #20]	; (8007f68 <pvTaskIncrementMutexHeldCount+0x24>)
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007f56:	3201      	adds	r2, #1
 8007f58:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8007f5a:	4b03      	ldr	r3, [pc, #12]	; (8007f68 <pvTaskIncrementMutexHeldCount+0x24>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
	}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	46bd      	mov	sp, r7
 8007f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f66:	4770      	bx	lr
 8007f68:	20000200 	.word	0x20000200

08007f6c <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b084      	sub	sp, #16
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
 8007f74:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8007f76:	f000 fac9 	bl	800850c <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8007f7a:	4b1e      	ldr	r3, [pc, #120]	; (8007ff4 <ulTaskNotifyTake+0x88>)
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d113      	bne.n	8007fac <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8007f84:	4b1b      	ldr	r3, [pc, #108]	; (8007ff4 <ulTaskNotifyTake+0x88>)
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	2201      	movs	r2, #1
 8007f8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d00b      	beq.n	8007fac <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007f94:	2101      	movs	r1, #1
 8007f96:	6838      	ldr	r0, [r7, #0]
 8007f98:	f000 f92a 	bl	80081f0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8007f9c:	4b16      	ldr	r3, [pc, #88]	; (8007ff8 <ulTaskNotifyTake+0x8c>)
 8007f9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fa2:	601a      	str	r2, [r3, #0]
 8007fa4:	f3bf 8f4f 	dsb	sy
 8007fa8:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8007fac:	f000 fadc 	bl	8008568 <vPortExitCritical>

		taskENTER_CRITICAL();
 8007fb0:	f000 faac 	bl	800850c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8007fb4:	4b0f      	ldr	r3, [pc, #60]	; (8007ff4 <ulTaskNotifyTake+0x88>)
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fba:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d00c      	beq.n	8007fdc <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d004      	beq.n	8007fd2 <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8007fc8:	4b0a      	ldr	r3, [pc, #40]	; (8007ff4 <ulTaskNotifyTake+0x88>)
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	64da      	str	r2, [r3, #76]	; 0x4c
 8007fd0:	e004      	b.n	8007fdc <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8007fd2:	4b08      	ldr	r3, [pc, #32]	; (8007ff4 <ulTaskNotifyTake+0x88>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	68fa      	ldr	r2, [r7, #12]
 8007fd8:	3a01      	subs	r2, #1
 8007fda:	64da      	str	r2, [r3, #76]	; 0x4c
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007fdc:	4b05      	ldr	r3, [pc, #20]	; (8007ff4 <ulTaskNotifyTake+0x88>)
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 8007fe6:	f000 fabf 	bl	8008568 <vPortExitCritical>

		return ulReturn;
 8007fea:	68fb      	ldr	r3, [r7, #12]
	}
 8007fec:	4618      	mov	r0, r3
 8007fee:	3710      	adds	r7, #16
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bd80      	pop	{r7, pc}
 8007ff4:	20000200 	.word	0x20000200
 8007ff8:	e000ed04 	.word	0xe000ed04

08007ffc <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b086      	sub	sp, #24
 8008000:	af00      	add	r7, sp, #0
 8008002:	60f8      	str	r0, [r7, #12]
 8008004:	60b9      	str	r1, [r7, #8]
 8008006:	607a      	str	r2, [r7, #4]
 8008008:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800800a:	f000 fa7f 	bl	800850c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800800e:	4b26      	ldr	r3, [pc, #152]	; (80080a8 <xTaskNotifyWait+0xac>)
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008016:	b2db      	uxtb	r3, r3
 8008018:	2b02      	cmp	r3, #2
 800801a:	d01a      	beq.n	8008052 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800801c:	4b22      	ldr	r3, [pc, #136]	; (80080a8 <xTaskNotifyWait+0xac>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008022:	68fa      	ldr	r2, [r7, #12]
 8008024:	43d2      	mvns	r2, r2
 8008026:	400a      	ands	r2, r1
 8008028:	64da      	str	r2, [r3, #76]	; 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800802a:	4b1f      	ldr	r3, [pc, #124]	; (80080a8 <xTaskNotifyWait+0xac>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	2201      	movs	r2, #1
 8008030:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d00b      	beq.n	8008052 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800803a:	2101      	movs	r1, #1
 800803c:	6838      	ldr	r0, [r7, #0]
 800803e:	f000 f8d7 	bl	80081f0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8008042:	4b1a      	ldr	r3, [pc, #104]	; (80080ac <xTaskNotifyWait+0xb0>)
 8008044:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008048:	601a      	str	r2, [r3, #0]
 800804a:	f3bf 8f4f 	dsb	sy
 800804e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8008052:	f000 fa89 	bl	8008568 <vPortExitCritical>

		taskENTER_CRITICAL();
 8008056:	f000 fa59 	bl	800850c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d004      	beq.n	800806a <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8008060:	4b11      	ldr	r3, [pc, #68]	; (80080a8 <xTaskNotifyWait+0xac>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800806a:	4b0f      	ldr	r3, [pc, #60]	; (80080a8 <xTaskNotifyWait+0xac>)
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008072:	b2db      	uxtb	r3, r3
 8008074:	2b02      	cmp	r3, #2
 8008076:	d002      	beq.n	800807e <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8008078:	2300      	movs	r3, #0
 800807a:	617b      	str	r3, [r7, #20]
 800807c:	e008      	b.n	8008090 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800807e:	4b0a      	ldr	r3, [pc, #40]	; (80080a8 <xTaskNotifyWait+0xac>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008084:	68ba      	ldr	r2, [r7, #8]
 8008086:	43d2      	mvns	r2, r2
 8008088:	400a      	ands	r2, r1
 800808a:	64da      	str	r2, [r3, #76]	; 0x4c
				xReturn = pdTRUE;
 800808c:	2301      	movs	r3, #1
 800808e:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008090:	4b05      	ldr	r3, [pc, #20]	; (80080a8 <xTaskNotifyWait+0xac>)
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	2200      	movs	r2, #0
 8008096:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 800809a:	f000 fa65 	bl	8008568 <vPortExitCritical>

		return xReturn;
 800809e:	697b      	ldr	r3, [r7, #20]
	}
 80080a0:	4618      	mov	r0, r3
 80080a2:	3718      	adds	r7, #24
 80080a4:	46bd      	mov	sp, r7
 80080a6:	bd80      	pop	{r7, pc}
 80080a8:	20000200 	.word	0x20000200
 80080ac:	e000ed04 	.word	0xe000ed04

080080b0 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b08a      	sub	sp, #40	; 0x28
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	60f8      	str	r0, [r7, #12]
 80080b8:	60b9      	str	r1, [r7, #8]
 80080ba:	603b      	str	r3, [r7, #0]
 80080bc:	4613      	mov	r3, r2
 80080be:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80080c0:	2301      	movs	r3, #1
 80080c2:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d109      	bne.n	80080de <xTaskGenericNotify+0x2e>
 80080ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ce:	f383 8811 	msr	BASEPRI, r3
 80080d2:	f3bf 8f6f 	isb	sy
 80080d6:	f3bf 8f4f 	dsb	sy
 80080da:	61bb      	str	r3, [r7, #24]
 80080dc:	e7fe      	b.n	80080dc <xTaskGenericNotify+0x2c>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 80080e2:	f000 fa13 	bl	800850c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d003      	beq.n	80080f4 <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80080ec:	6a3b      	ldr	r3, [r7, #32]
 80080ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80080f4:	6a3b      	ldr	r3, [r7, #32]
 80080f6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80080fa:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80080fc:	6a3b      	ldr	r3, [r7, #32]
 80080fe:	2202      	movs	r2, #2
 8008100:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 8008104:	79fb      	ldrb	r3, [r7, #7]
 8008106:	2b04      	cmp	r3, #4
 8008108:	d827      	bhi.n	800815a <xTaskGenericNotify+0xaa>
 800810a:	a201      	add	r2, pc, #4	; (adr r2, 8008110 <xTaskGenericNotify+0x60>)
 800810c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008110:	0800815b 	.word	0x0800815b
 8008114:	08008125 	.word	0x08008125
 8008118:	08008133 	.word	0x08008133
 800811c:	0800813f 	.word	0x0800813f
 8008120:	08008147 	.word	0x08008147
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8008124:	6a3b      	ldr	r3, [r7, #32]
 8008126:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	431a      	orrs	r2, r3
 800812c:	6a3b      	ldr	r3, [r7, #32]
 800812e:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8008130:	e013      	b.n	800815a <xTaskGenericNotify+0xaa>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8008132:	6a3b      	ldr	r3, [r7, #32]
 8008134:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008136:	1c5a      	adds	r2, r3, #1
 8008138:	6a3b      	ldr	r3, [r7, #32]
 800813a:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 800813c:	e00d      	b.n	800815a <xTaskGenericNotify+0xaa>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800813e:	6a3b      	ldr	r3, [r7, #32]
 8008140:	68ba      	ldr	r2, [r7, #8]
 8008142:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8008144:	e009      	b.n	800815a <xTaskGenericNotify+0xaa>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8008146:	7ffb      	ldrb	r3, [r7, #31]
 8008148:	2b02      	cmp	r3, #2
 800814a:	d003      	beq.n	8008154 <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800814c:	6a3b      	ldr	r3, [r7, #32]
 800814e:	68ba      	ldr	r2, [r7, #8]
 8008150:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8008152:	e001      	b.n	8008158 <xTaskGenericNotify+0xa8>
						xReturn = pdFAIL;
 8008154:	2300      	movs	r3, #0
 8008156:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8008158:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800815a:	7ffb      	ldrb	r3, [r7, #31]
 800815c:	2b01      	cmp	r3, #1
 800815e:	d138      	bne.n	80081d2 <xTaskGenericNotify+0x122>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008160:	6a3b      	ldr	r3, [r7, #32]
 8008162:	3304      	adds	r3, #4
 8008164:	4618      	mov	r0, r3
 8008166:	f7fd fed6 	bl	8005f16 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800816a:	6a3b      	ldr	r3, [r7, #32]
 800816c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800816e:	2201      	movs	r2, #1
 8008170:	409a      	lsls	r2, r3
 8008172:	4b1b      	ldr	r3, [pc, #108]	; (80081e0 <xTaskGenericNotify+0x130>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	4313      	orrs	r3, r2
 8008178:	4a19      	ldr	r2, [pc, #100]	; (80081e0 <xTaskGenericNotify+0x130>)
 800817a:	6013      	str	r3, [r2, #0]
 800817c:	6a3b      	ldr	r3, [r7, #32]
 800817e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008180:	4613      	mov	r3, r2
 8008182:	009b      	lsls	r3, r3, #2
 8008184:	4413      	add	r3, r2
 8008186:	009b      	lsls	r3, r3, #2
 8008188:	4a16      	ldr	r2, [pc, #88]	; (80081e4 <xTaskGenericNotify+0x134>)
 800818a:	441a      	add	r2, r3
 800818c:	6a3b      	ldr	r3, [r7, #32]
 800818e:	3304      	adds	r3, #4
 8008190:	4619      	mov	r1, r3
 8008192:	4610      	mov	r0, r2
 8008194:	f7fd fe62 	bl	8005e5c <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8008198:	6a3b      	ldr	r3, [r7, #32]
 800819a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800819c:	2b00      	cmp	r3, #0
 800819e:	d009      	beq.n	80081b4 <xTaskGenericNotify+0x104>
 80081a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081a4:	f383 8811 	msr	BASEPRI, r3
 80081a8:	f3bf 8f6f 	isb	sy
 80081ac:	f3bf 8f4f 	dsb	sy
 80081b0:	617b      	str	r3, [r7, #20]
 80081b2:	e7fe      	b.n	80081b2 <xTaskGenericNotify+0x102>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80081b4:	6a3b      	ldr	r3, [r7, #32]
 80081b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081b8:	4b0b      	ldr	r3, [pc, #44]	; (80081e8 <xTaskGenericNotify+0x138>)
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081be:	429a      	cmp	r2, r3
 80081c0:	d907      	bls.n	80081d2 <xTaskGenericNotify+0x122>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 80081c2:	4b0a      	ldr	r3, [pc, #40]	; (80081ec <xTaskGenericNotify+0x13c>)
 80081c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081c8:	601a      	str	r2, [r3, #0]
 80081ca:	f3bf 8f4f 	dsb	sy
 80081ce:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80081d2:	f000 f9c9 	bl	8008568 <vPortExitCritical>

		return xReturn;
 80081d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80081d8:	4618      	mov	r0, r3
 80081da:	3728      	adds	r7, #40	; 0x28
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}
 80081e0:	20000308 	.word	0x20000308
 80081e4:	20000204 	.word	0x20000204
 80081e8:	20000200 	.word	0x20000200
 80081ec:	e000ed04 	.word	0xe000ed04

080081f0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b084      	sub	sp, #16
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
 80081f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80081fa:	4b2b      	ldr	r3, [pc, #172]	; (80082a8 <prvAddCurrentTaskToDelayedList+0xb8>)
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	60fb      	str	r3, [r7, #12]
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 8008200:	4b2a      	ldr	r3, [pc, #168]	; (80082ac <prvAddCurrentTaskToDelayedList+0xbc>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	2200      	movs	r2, #0
 8008206:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800820a:	4b28      	ldr	r3, [pc, #160]	; (80082ac <prvAddCurrentTaskToDelayedList+0xbc>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	3304      	adds	r3, #4
 8008210:	4618      	mov	r0, r3
 8008212:	f7fd fe80 	bl	8005f16 <uxListRemove>
 8008216:	4603      	mov	r3, r0
 8008218:	2b00      	cmp	r3, #0
 800821a:	d10b      	bne.n	8008234 <prvAddCurrentTaskToDelayedList+0x44>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800821c:	4b23      	ldr	r3, [pc, #140]	; (80082ac <prvAddCurrentTaskToDelayedList+0xbc>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008222:	2201      	movs	r2, #1
 8008224:	fa02 f303 	lsl.w	r3, r2, r3
 8008228:	43da      	mvns	r2, r3
 800822a:	4b21      	ldr	r3, [pc, #132]	; (80082b0 <prvAddCurrentTaskToDelayedList+0xc0>)
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	4013      	ands	r3, r2
 8008230:	4a1f      	ldr	r2, [pc, #124]	; (80082b0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008232:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f1b3 3fff 	cmp.w	r3, #4294967295
 800823a:	d10a      	bne.n	8008252 <prvAddCurrentTaskToDelayedList+0x62>
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d007      	beq.n	8008252 <prvAddCurrentTaskToDelayedList+0x62>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008242:	4b1a      	ldr	r3, [pc, #104]	; (80082ac <prvAddCurrentTaskToDelayedList+0xbc>)
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	3304      	adds	r3, #4
 8008248:	4619      	mov	r1, r3
 800824a:	481a      	ldr	r0, [pc, #104]	; (80082b4 <prvAddCurrentTaskToDelayedList+0xc4>)
 800824c:	f7fd fe06 	bl	8005e5c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008250:	e026      	b.n	80082a0 <prvAddCurrentTaskToDelayedList+0xb0>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008252:	68fa      	ldr	r2, [r7, #12]
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	4413      	add	r3, r2
 8008258:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800825a:	4b14      	ldr	r3, [pc, #80]	; (80082ac <prvAddCurrentTaskToDelayedList+0xbc>)
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	68ba      	ldr	r2, [r7, #8]
 8008260:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008262:	68ba      	ldr	r2, [r7, #8]
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	429a      	cmp	r2, r3
 8008268:	d209      	bcs.n	800827e <prvAddCurrentTaskToDelayedList+0x8e>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800826a:	4b13      	ldr	r3, [pc, #76]	; (80082b8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800826c:	681a      	ldr	r2, [r3, #0]
 800826e:	4b0f      	ldr	r3, [pc, #60]	; (80082ac <prvAddCurrentTaskToDelayedList+0xbc>)
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	3304      	adds	r3, #4
 8008274:	4619      	mov	r1, r3
 8008276:	4610      	mov	r0, r2
 8008278:	f7fd fe14 	bl	8005ea4 <vListInsert>
}
 800827c:	e010      	b.n	80082a0 <prvAddCurrentTaskToDelayedList+0xb0>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800827e:	4b0f      	ldr	r3, [pc, #60]	; (80082bc <prvAddCurrentTaskToDelayedList+0xcc>)
 8008280:	681a      	ldr	r2, [r3, #0]
 8008282:	4b0a      	ldr	r3, [pc, #40]	; (80082ac <prvAddCurrentTaskToDelayedList+0xbc>)
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	3304      	adds	r3, #4
 8008288:	4619      	mov	r1, r3
 800828a:	4610      	mov	r0, r2
 800828c:	f7fd fe0a 	bl	8005ea4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008290:	4b0b      	ldr	r3, [pc, #44]	; (80082c0 <prvAddCurrentTaskToDelayedList+0xd0>)
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	68ba      	ldr	r2, [r7, #8]
 8008296:	429a      	cmp	r2, r3
 8008298:	d202      	bcs.n	80082a0 <prvAddCurrentTaskToDelayedList+0xb0>
					xNextTaskUnblockTime = xTimeToWake;
 800829a:	4a09      	ldr	r2, [pc, #36]	; (80082c0 <prvAddCurrentTaskToDelayedList+0xd0>)
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	6013      	str	r3, [r2, #0]
}
 80082a0:	bf00      	nop
 80082a2:	3710      	adds	r7, #16
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd80      	pop	{r7, pc}
 80082a8:	20000304 	.word	0x20000304
 80082ac:	20000200 	.word	0x20000200
 80082b0:	20000308 	.word	0x20000308
 80082b4:	200002ec 	.word	0x200002ec
 80082b8:	200002bc 	.word	0x200002bc
 80082bc:	200002b8 	.word	0x200002b8
 80082c0:	20000320 	.word	0x20000320

080082c4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80082c4:	b480      	push	{r7}
 80082c6:	b085      	sub	sp, #20
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	60f8      	str	r0, [r7, #12]
 80082cc:	60b9      	str	r1, [r7, #8]
 80082ce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	3b04      	subs	r3, #4
 80082d4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80082dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	3b04      	subs	r3, #4
 80082e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	f023 0201 	bic.w	r2, r3, #1
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	3b04      	subs	r3, #4
 80082f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80082f4:	4a0c      	ldr	r2, [pc, #48]	; (8008328 <pxPortInitialiseStack+0x64>)
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	3b14      	subs	r3, #20
 80082fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008300:	687a      	ldr	r2, [r7, #4]
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	3b04      	subs	r3, #4
 800830a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	f06f 0202 	mvn.w	r2, #2
 8008312:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	3b20      	subs	r3, #32
 8008318:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800831a:	68fb      	ldr	r3, [r7, #12]
}
 800831c:	4618      	mov	r0, r3
 800831e:	3714      	adds	r7, #20
 8008320:	46bd      	mov	sp, r7
 8008322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008326:	4770      	bx	lr
 8008328:	0800832d 	.word	0x0800832d

0800832c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800832c:	b480      	push	{r7}
 800832e:	b085      	sub	sp, #20
 8008330:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008332:	2300      	movs	r3, #0
 8008334:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008336:	4b11      	ldr	r3, [pc, #68]	; (800837c <prvTaskExitError+0x50>)
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800833e:	d009      	beq.n	8008354 <prvTaskExitError+0x28>
 8008340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008344:	f383 8811 	msr	BASEPRI, r3
 8008348:	f3bf 8f6f 	isb	sy
 800834c:	f3bf 8f4f 	dsb	sy
 8008350:	60fb      	str	r3, [r7, #12]
 8008352:	e7fe      	b.n	8008352 <prvTaskExitError+0x26>
 8008354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008358:	f383 8811 	msr	BASEPRI, r3
 800835c:	f3bf 8f6f 	isb	sy
 8008360:	f3bf 8f4f 	dsb	sy
 8008364:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008366:	bf00      	nop
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d0fc      	beq.n	8008368 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800836e:	bf00      	nop
 8008370:	3714      	adds	r7, #20
 8008372:	46bd      	mov	sp, r7
 8008374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008378:	4770      	bx	lr
 800837a:	bf00      	nop
 800837c:	20000004 	.word	0x20000004

08008380 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008380:	4b07      	ldr	r3, [pc, #28]	; (80083a0 <pxCurrentTCBConst2>)
 8008382:	6819      	ldr	r1, [r3, #0]
 8008384:	6808      	ldr	r0, [r1, #0]
 8008386:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800838a:	f380 8809 	msr	PSP, r0
 800838e:	f3bf 8f6f 	isb	sy
 8008392:	f04f 0000 	mov.w	r0, #0
 8008396:	f380 8811 	msr	BASEPRI, r0
 800839a:	4770      	bx	lr
 800839c:	f3af 8000 	nop.w

080083a0 <pxCurrentTCBConst2>:
 80083a0:	20000200 	.word	0x20000200
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80083a4:	bf00      	nop
 80083a6:	bf00      	nop

080083a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80083a8:	4808      	ldr	r0, [pc, #32]	; (80083cc <prvPortStartFirstTask+0x24>)
 80083aa:	6800      	ldr	r0, [r0, #0]
 80083ac:	6800      	ldr	r0, [r0, #0]
 80083ae:	f380 8808 	msr	MSP, r0
 80083b2:	f04f 0000 	mov.w	r0, #0
 80083b6:	f380 8814 	msr	CONTROL, r0
 80083ba:	b662      	cpsie	i
 80083bc:	b661      	cpsie	f
 80083be:	f3bf 8f4f 	dsb	sy
 80083c2:	f3bf 8f6f 	isb	sy
 80083c6:	df00      	svc	0
 80083c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80083ca:	bf00      	nop
 80083cc:	e000ed08 	.word	0xe000ed08

080083d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b086      	sub	sp, #24
 80083d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80083d6:	4b44      	ldr	r3, [pc, #272]	; (80084e8 <xPortStartScheduler+0x118>)
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	4a44      	ldr	r2, [pc, #272]	; (80084ec <xPortStartScheduler+0x11c>)
 80083dc:	4293      	cmp	r3, r2
 80083de:	d109      	bne.n	80083f4 <xPortStartScheduler+0x24>
 80083e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083e4:	f383 8811 	msr	BASEPRI, r3
 80083e8:	f3bf 8f6f 	isb	sy
 80083ec:	f3bf 8f4f 	dsb	sy
 80083f0:	613b      	str	r3, [r7, #16]
 80083f2:	e7fe      	b.n	80083f2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80083f4:	4b3c      	ldr	r3, [pc, #240]	; (80084e8 <xPortStartScheduler+0x118>)
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	4a3d      	ldr	r2, [pc, #244]	; (80084f0 <xPortStartScheduler+0x120>)
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d109      	bne.n	8008412 <xPortStartScheduler+0x42>
 80083fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008402:	f383 8811 	msr	BASEPRI, r3
 8008406:	f3bf 8f6f 	isb	sy
 800840a:	f3bf 8f4f 	dsb	sy
 800840e:	60fb      	str	r3, [r7, #12]
 8008410:	e7fe      	b.n	8008410 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008412:	4b38      	ldr	r3, [pc, #224]	; (80084f4 <xPortStartScheduler+0x124>)
 8008414:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008416:	697b      	ldr	r3, [r7, #20]
 8008418:	781b      	ldrb	r3, [r3, #0]
 800841a:	b2db      	uxtb	r3, r3
 800841c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800841e:	697b      	ldr	r3, [r7, #20]
 8008420:	22ff      	movs	r2, #255	; 0xff
 8008422:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008424:	697b      	ldr	r3, [r7, #20]
 8008426:	781b      	ldrb	r3, [r3, #0]
 8008428:	b2db      	uxtb	r3, r3
 800842a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800842c:	78fb      	ldrb	r3, [r7, #3]
 800842e:	b2db      	uxtb	r3, r3
 8008430:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008434:	b2da      	uxtb	r2, r3
 8008436:	4b30      	ldr	r3, [pc, #192]	; (80084f8 <xPortStartScheduler+0x128>)
 8008438:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800843a:	4b30      	ldr	r3, [pc, #192]	; (80084fc <xPortStartScheduler+0x12c>)
 800843c:	2207      	movs	r2, #7
 800843e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008440:	e009      	b.n	8008456 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8008442:	4b2e      	ldr	r3, [pc, #184]	; (80084fc <xPortStartScheduler+0x12c>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	3b01      	subs	r3, #1
 8008448:	4a2c      	ldr	r2, [pc, #176]	; (80084fc <xPortStartScheduler+0x12c>)
 800844a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800844c:	78fb      	ldrb	r3, [r7, #3]
 800844e:	b2db      	uxtb	r3, r3
 8008450:	005b      	lsls	r3, r3, #1
 8008452:	b2db      	uxtb	r3, r3
 8008454:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008456:	78fb      	ldrb	r3, [r7, #3]
 8008458:	b2db      	uxtb	r3, r3
 800845a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800845e:	2b80      	cmp	r3, #128	; 0x80
 8008460:	d0ef      	beq.n	8008442 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008462:	4b26      	ldr	r3, [pc, #152]	; (80084fc <xPortStartScheduler+0x12c>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f1c3 0307 	rsb	r3, r3, #7
 800846a:	2b04      	cmp	r3, #4
 800846c:	d009      	beq.n	8008482 <xPortStartScheduler+0xb2>
 800846e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008472:	f383 8811 	msr	BASEPRI, r3
 8008476:	f3bf 8f6f 	isb	sy
 800847a:	f3bf 8f4f 	dsb	sy
 800847e:	60bb      	str	r3, [r7, #8]
 8008480:	e7fe      	b.n	8008480 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008482:	4b1e      	ldr	r3, [pc, #120]	; (80084fc <xPortStartScheduler+0x12c>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	021b      	lsls	r3, r3, #8
 8008488:	4a1c      	ldr	r2, [pc, #112]	; (80084fc <xPortStartScheduler+0x12c>)
 800848a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800848c:	4b1b      	ldr	r3, [pc, #108]	; (80084fc <xPortStartScheduler+0x12c>)
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008494:	4a19      	ldr	r2, [pc, #100]	; (80084fc <xPortStartScheduler+0x12c>)
 8008496:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	b2da      	uxtb	r2, r3
 800849c:	697b      	ldr	r3, [r7, #20]
 800849e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80084a0:	4b17      	ldr	r3, [pc, #92]	; (8008500 <xPortStartScheduler+0x130>)
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	4a16      	ldr	r2, [pc, #88]	; (8008500 <xPortStartScheduler+0x130>)
 80084a6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80084aa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80084ac:	4b14      	ldr	r3, [pc, #80]	; (8008500 <xPortStartScheduler+0x130>)
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	4a13      	ldr	r2, [pc, #76]	; (8008500 <xPortStartScheduler+0x130>)
 80084b2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80084b6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80084b8:	f000 f8d6 	bl	8008668 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80084bc:	4b11      	ldr	r3, [pc, #68]	; (8008504 <xPortStartScheduler+0x134>)
 80084be:	2200      	movs	r2, #0
 80084c0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80084c2:	f000 f8f5 	bl	80086b0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80084c6:	4b10      	ldr	r3, [pc, #64]	; (8008508 <xPortStartScheduler+0x138>)
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	4a0f      	ldr	r2, [pc, #60]	; (8008508 <xPortStartScheduler+0x138>)
 80084cc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80084d0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80084d2:	f7ff ff69 	bl	80083a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80084d6:	f7ff f8fd 	bl	80076d4 <vTaskSwitchContext>
	prvTaskExitError();
 80084da:	f7ff ff27 	bl	800832c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80084de:	2300      	movs	r3, #0
}
 80084e0:	4618      	mov	r0, r3
 80084e2:	3718      	adds	r7, #24
 80084e4:	46bd      	mov	sp, r7
 80084e6:	bd80      	pop	{r7, pc}
 80084e8:	e000ed00 	.word	0xe000ed00
 80084ec:	410fc271 	.word	0x410fc271
 80084f0:	410fc270 	.word	0x410fc270
 80084f4:	e000e400 	.word	0xe000e400
 80084f8:	2000032c 	.word	0x2000032c
 80084fc:	20000330 	.word	0x20000330
 8008500:	e000ed20 	.word	0xe000ed20
 8008504:	20000004 	.word	0x20000004
 8008508:	e000ef34 	.word	0xe000ef34

0800850c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800850c:	b480      	push	{r7}
 800850e:	b083      	sub	sp, #12
 8008510:	af00      	add	r7, sp, #0
 8008512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008516:	f383 8811 	msr	BASEPRI, r3
 800851a:	f3bf 8f6f 	isb	sy
 800851e:	f3bf 8f4f 	dsb	sy
 8008522:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008524:	4b0e      	ldr	r3, [pc, #56]	; (8008560 <vPortEnterCritical+0x54>)
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	3301      	adds	r3, #1
 800852a:	4a0d      	ldr	r2, [pc, #52]	; (8008560 <vPortEnterCritical+0x54>)
 800852c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800852e:	4b0c      	ldr	r3, [pc, #48]	; (8008560 <vPortEnterCritical+0x54>)
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	2b01      	cmp	r3, #1
 8008534:	d10e      	bne.n	8008554 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008536:	4b0b      	ldr	r3, [pc, #44]	; (8008564 <vPortEnterCritical+0x58>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	b2db      	uxtb	r3, r3
 800853c:	2b00      	cmp	r3, #0
 800853e:	d009      	beq.n	8008554 <vPortEnterCritical+0x48>
 8008540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008544:	f383 8811 	msr	BASEPRI, r3
 8008548:	f3bf 8f6f 	isb	sy
 800854c:	f3bf 8f4f 	dsb	sy
 8008550:	603b      	str	r3, [r7, #0]
 8008552:	e7fe      	b.n	8008552 <vPortEnterCritical+0x46>
	}
}
 8008554:	bf00      	nop
 8008556:	370c      	adds	r7, #12
 8008558:	46bd      	mov	sp, r7
 800855a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855e:	4770      	bx	lr
 8008560:	20000004 	.word	0x20000004
 8008564:	e000ed04 	.word	0xe000ed04

08008568 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008568:	b480      	push	{r7}
 800856a:	b083      	sub	sp, #12
 800856c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800856e:	4b11      	ldr	r3, [pc, #68]	; (80085b4 <vPortExitCritical+0x4c>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d109      	bne.n	800858a <vPortExitCritical+0x22>
 8008576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800857a:	f383 8811 	msr	BASEPRI, r3
 800857e:	f3bf 8f6f 	isb	sy
 8008582:	f3bf 8f4f 	dsb	sy
 8008586:	607b      	str	r3, [r7, #4]
 8008588:	e7fe      	b.n	8008588 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800858a:	4b0a      	ldr	r3, [pc, #40]	; (80085b4 <vPortExitCritical+0x4c>)
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	3b01      	subs	r3, #1
 8008590:	4a08      	ldr	r2, [pc, #32]	; (80085b4 <vPortExitCritical+0x4c>)
 8008592:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008594:	4b07      	ldr	r3, [pc, #28]	; (80085b4 <vPortExitCritical+0x4c>)
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d104      	bne.n	80085a6 <vPortExitCritical+0x3e>
 800859c:	2300      	movs	r3, #0
 800859e:	603b      	str	r3, [r7, #0]
	__asm volatile
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80085a6:	bf00      	nop
 80085a8:	370c      	adds	r7, #12
 80085aa:	46bd      	mov	sp, r7
 80085ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b0:	4770      	bx	lr
 80085b2:	bf00      	nop
 80085b4:	20000004 	.word	0x20000004
	...

080085c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80085c0:	f3ef 8009 	mrs	r0, PSP
 80085c4:	f3bf 8f6f 	isb	sy
 80085c8:	4b15      	ldr	r3, [pc, #84]	; (8008620 <pxCurrentTCBConst>)
 80085ca:	681a      	ldr	r2, [r3, #0]
 80085cc:	f01e 0f10 	tst.w	lr, #16
 80085d0:	bf08      	it	eq
 80085d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80085d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085da:	6010      	str	r0, [r2, #0]
 80085dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80085e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80085e4:	f380 8811 	msr	BASEPRI, r0
 80085e8:	f3bf 8f4f 	dsb	sy
 80085ec:	f3bf 8f6f 	isb	sy
 80085f0:	f7ff f870 	bl	80076d4 <vTaskSwitchContext>
 80085f4:	f04f 0000 	mov.w	r0, #0
 80085f8:	f380 8811 	msr	BASEPRI, r0
 80085fc:	bc09      	pop	{r0, r3}
 80085fe:	6819      	ldr	r1, [r3, #0]
 8008600:	6808      	ldr	r0, [r1, #0]
 8008602:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008606:	f01e 0f10 	tst.w	lr, #16
 800860a:	bf08      	it	eq
 800860c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008610:	f380 8809 	msr	PSP, r0
 8008614:	f3bf 8f6f 	isb	sy
 8008618:	4770      	bx	lr
 800861a:	bf00      	nop
 800861c:	f3af 8000 	nop.w

08008620 <pxCurrentTCBConst>:
 8008620:	20000200 	.word	0x20000200
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008624:	bf00      	nop
 8008626:	bf00      	nop

08008628 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b082      	sub	sp, #8
 800862c:	af00      	add	r7, sp, #0
	__asm volatile
 800862e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008632:	f383 8811 	msr	BASEPRI, r3
 8008636:	f3bf 8f6f 	isb	sy
 800863a:	f3bf 8f4f 	dsb	sy
 800863e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008640:	f7fe ff8c 	bl	800755c <xTaskIncrementTick>
 8008644:	4603      	mov	r3, r0
 8008646:	2b00      	cmp	r3, #0
 8008648:	d003      	beq.n	8008652 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800864a:	4b06      	ldr	r3, [pc, #24]	; (8008664 <SysTick_Handler+0x3c>)
 800864c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008650:	601a      	str	r2, [r3, #0]
 8008652:	2300      	movs	r3, #0
 8008654:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800865c:	bf00      	nop
 800865e:	3708      	adds	r7, #8
 8008660:	46bd      	mov	sp, r7
 8008662:	bd80      	pop	{r7, pc}
 8008664:	e000ed04 	.word	0xe000ed04

08008668 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008668:	b480      	push	{r7}
 800866a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800866c:	4b0b      	ldr	r3, [pc, #44]	; (800869c <vPortSetupTimerInterrupt+0x34>)
 800866e:	2200      	movs	r2, #0
 8008670:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008672:	4b0b      	ldr	r3, [pc, #44]	; (80086a0 <vPortSetupTimerInterrupt+0x38>)
 8008674:	2200      	movs	r2, #0
 8008676:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008678:	4b0a      	ldr	r3, [pc, #40]	; (80086a4 <vPortSetupTimerInterrupt+0x3c>)
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	4a0a      	ldr	r2, [pc, #40]	; (80086a8 <vPortSetupTimerInterrupt+0x40>)
 800867e:	fba2 2303 	umull	r2, r3, r2, r3
 8008682:	099b      	lsrs	r3, r3, #6
 8008684:	4a09      	ldr	r2, [pc, #36]	; (80086ac <vPortSetupTimerInterrupt+0x44>)
 8008686:	3b01      	subs	r3, #1
 8008688:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800868a:	4b04      	ldr	r3, [pc, #16]	; (800869c <vPortSetupTimerInterrupt+0x34>)
 800868c:	2207      	movs	r2, #7
 800868e:	601a      	str	r2, [r3, #0]
}
 8008690:	bf00      	nop
 8008692:	46bd      	mov	sp, r7
 8008694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008698:	4770      	bx	lr
 800869a:	bf00      	nop
 800869c:	e000e010 	.word	0xe000e010
 80086a0:	e000e018 	.word	0xe000e018
 80086a4:	2000000c 	.word	0x2000000c
 80086a8:	10624dd3 	.word	0x10624dd3
 80086ac:	e000e014 	.word	0xe000e014

080086b0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80086b0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80086c0 <vPortEnableVFP+0x10>
 80086b4:	6801      	ldr	r1, [r0, #0]
 80086b6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80086ba:	6001      	str	r1, [r0, #0]
 80086bc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80086be:	bf00      	nop
 80086c0:	e000ed88 	.word	0xe000ed88

080086c4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80086c4:	b480      	push	{r7}
 80086c6:	b085      	sub	sp, #20
 80086c8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80086ca:	f3ef 8305 	mrs	r3, IPSR
 80086ce:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	2b0f      	cmp	r3, #15
 80086d4:	d913      	bls.n	80086fe <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80086d6:	4a16      	ldr	r2, [pc, #88]	; (8008730 <vPortValidateInterruptPriority+0x6c>)
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	4413      	add	r3, r2
 80086dc:	781b      	ldrb	r3, [r3, #0]
 80086de:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80086e0:	4b14      	ldr	r3, [pc, #80]	; (8008734 <vPortValidateInterruptPriority+0x70>)
 80086e2:	781b      	ldrb	r3, [r3, #0]
 80086e4:	7afa      	ldrb	r2, [r7, #11]
 80086e6:	429a      	cmp	r2, r3
 80086e8:	d209      	bcs.n	80086fe <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80086ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ee:	f383 8811 	msr	BASEPRI, r3
 80086f2:	f3bf 8f6f 	isb	sy
 80086f6:	f3bf 8f4f 	dsb	sy
 80086fa:	607b      	str	r3, [r7, #4]
 80086fc:	e7fe      	b.n	80086fc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80086fe:	4b0e      	ldr	r3, [pc, #56]	; (8008738 <vPortValidateInterruptPriority+0x74>)
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008706:	4b0d      	ldr	r3, [pc, #52]	; (800873c <vPortValidateInterruptPriority+0x78>)
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	429a      	cmp	r2, r3
 800870c:	d909      	bls.n	8008722 <vPortValidateInterruptPriority+0x5e>
 800870e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008712:	f383 8811 	msr	BASEPRI, r3
 8008716:	f3bf 8f6f 	isb	sy
 800871a:	f3bf 8f4f 	dsb	sy
 800871e:	603b      	str	r3, [r7, #0]
 8008720:	e7fe      	b.n	8008720 <vPortValidateInterruptPriority+0x5c>
	}
 8008722:	bf00      	nop
 8008724:	3714      	adds	r7, #20
 8008726:	46bd      	mov	sp, r7
 8008728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872c:	4770      	bx	lr
 800872e:	bf00      	nop
 8008730:	e000e3f0 	.word	0xe000e3f0
 8008734:	2000032c 	.word	0x2000032c
 8008738:	e000ed0c 	.word	0xe000ed0c
 800873c:	20000330 	.word	0x20000330

08008740 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b08a      	sub	sp, #40	; 0x28
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008748:	2300      	movs	r3, #0
 800874a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800874c:	f7fe fe3a 	bl	80073c4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008750:	4b59      	ldr	r3, [pc, #356]	; (80088b8 <pvPortMalloc+0x178>)
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d101      	bne.n	800875c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008758:	f000 f910 	bl	800897c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800875c:	4b57      	ldr	r3, [pc, #348]	; (80088bc <pvPortMalloc+0x17c>)
 800875e:	681a      	ldr	r2, [r3, #0]
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	4013      	ands	r3, r2
 8008764:	2b00      	cmp	r3, #0
 8008766:	f040 808c 	bne.w	8008882 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d01c      	beq.n	80087aa <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8008770:	2208      	movs	r2, #8
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	4413      	add	r3, r2
 8008776:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	f003 0307 	and.w	r3, r3, #7
 800877e:	2b00      	cmp	r3, #0
 8008780:	d013      	beq.n	80087aa <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	f023 0307 	bic.w	r3, r3, #7
 8008788:	3308      	adds	r3, #8
 800878a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	f003 0307 	and.w	r3, r3, #7
 8008792:	2b00      	cmp	r3, #0
 8008794:	d009      	beq.n	80087aa <pvPortMalloc+0x6a>
 8008796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800879a:	f383 8811 	msr	BASEPRI, r3
 800879e:	f3bf 8f6f 	isb	sy
 80087a2:	f3bf 8f4f 	dsb	sy
 80087a6:	617b      	str	r3, [r7, #20]
 80087a8:	e7fe      	b.n	80087a8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d068      	beq.n	8008882 <pvPortMalloc+0x142>
 80087b0:	4b43      	ldr	r3, [pc, #268]	; (80088c0 <pvPortMalloc+0x180>)
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	687a      	ldr	r2, [r7, #4]
 80087b6:	429a      	cmp	r2, r3
 80087b8:	d863      	bhi.n	8008882 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80087ba:	4b42      	ldr	r3, [pc, #264]	; (80088c4 <pvPortMalloc+0x184>)
 80087bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80087be:	4b41      	ldr	r3, [pc, #260]	; (80088c4 <pvPortMalloc+0x184>)
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80087c4:	e004      	b.n	80087d0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80087c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80087ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80087d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087d2:	685b      	ldr	r3, [r3, #4]
 80087d4:	687a      	ldr	r2, [r7, #4]
 80087d6:	429a      	cmp	r2, r3
 80087d8:	d903      	bls.n	80087e2 <pvPortMalloc+0xa2>
 80087da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d1f1      	bne.n	80087c6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80087e2:	4b35      	ldr	r3, [pc, #212]	; (80088b8 <pvPortMalloc+0x178>)
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087e8:	429a      	cmp	r2, r3
 80087ea:	d04a      	beq.n	8008882 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80087ec:	6a3b      	ldr	r3, [r7, #32]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	2208      	movs	r2, #8
 80087f2:	4413      	add	r3, r2
 80087f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80087f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087f8:	681a      	ldr	r2, [r3, #0]
 80087fa:	6a3b      	ldr	r3, [r7, #32]
 80087fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80087fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008800:	685a      	ldr	r2, [r3, #4]
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	1ad2      	subs	r2, r2, r3
 8008806:	2308      	movs	r3, #8
 8008808:	005b      	lsls	r3, r3, #1
 800880a:	429a      	cmp	r2, r3
 800880c:	d91e      	bls.n	800884c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800880e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	4413      	add	r3, r2
 8008814:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008816:	69bb      	ldr	r3, [r7, #24]
 8008818:	f003 0307 	and.w	r3, r3, #7
 800881c:	2b00      	cmp	r3, #0
 800881e:	d009      	beq.n	8008834 <pvPortMalloc+0xf4>
 8008820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008824:	f383 8811 	msr	BASEPRI, r3
 8008828:	f3bf 8f6f 	isb	sy
 800882c:	f3bf 8f4f 	dsb	sy
 8008830:	613b      	str	r3, [r7, #16]
 8008832:	e7fe      	b.n	8008832 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008836:	685a      	ldr	r2, [r3, #4]
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	1ad2      	subs	r2, r2, r3
 800883c:	69bb      	ldr	r3, [r7, #24]
 800883e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008842:	687a      	ldr	r2, [r7, #4]
 8008844:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008846:	69b8      	ldr	r0, [r7, #24]
 8008848:	f000 f8fa 	bl	8008a40 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800884c:	4b1c      	ldr	r3, [pc, #112]	; (80088c0 <pvPortMalloc+0x180>)
 800884e:	681a      	ldr	r2, [r3, #0]
 8008850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008852:	685b      	ldr	r3, [r3, #4]
 8008854:	1ad3      	subs	r3, r2, r3
 8008856:	4a1a      	ldr	r2, [pc, #104]	; (80088c0 <pvPortMalloc+0x180>)
 8008858:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800885a:	4b19      	ldr	r3, [pc, #100]	; (80088c0 <pvPortMalloc+0x180>)
 800885c:	681a      	ldr	r2, [r3, #0]
 800885e:	4b1a      	ldr	r3, [pc, #104]	; (80088c8 <pvPortMalloc+0x188>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	429a      	cmp	r2, r3
 8008864:	d203      	bcs.n	800886e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008866:	4b16      	ldr	r3, [pc, #88]	; (80088c0 <pvPortMalloc+0x180>)
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	4a17      	ldr	r2, [pc, #92]	; (80088c8 <pvPortMalloc+0x188>)
 800886c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800886e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008870:	685a      	ldr	r2, [r3, #4]
 8008872:	4b12      	ldr	r3, [pc, #72]	; (80088bc <pvPortMalloc+0x17c>)
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	431a      	orrs	r2, r3
 8008878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800887a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800887c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800887e:	2200      	movs	r2, #0
 8008880:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008882:	f7fe fdad 	bl	80073e0 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8008886:	69fb      	ldr	r3, [r7, #28]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d101      	bne.n	8008890 <pvPortMalloc+0x150>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800888c:	f004 fb2f 	bl	800ceee <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008890:	69fb      	ldr	r3, [r7, #28]
 8008892:	f003 0307 	and.w	r3, r3, #7
 8008896:	2b00      	cmp	r3, #0
 8008898:	d009      	beq.n	80088ae <pvPortMalloc+0x16e>
 800889a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800889e:	f383 8811 	msr	BASEPRI, r3
 80088a2:	f3bf 8f6f 	isb	sy
 80088a6:	f3bf 8f4f 	dsb	sy
 80088aa:	60fb      	str	r3, [r7, #12]
 80088ac:	e7fe      	b.n	80088ac <pvPortMalloc+0x16c>
	return pvReturn;
 80088ae:	69fb      	ldr	r3, [r7, #28]
}
 80088b0:	4618      	mov	r0, r3
 80088b2:	3728      	adds	r7, #40	; 0x28
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bd80      	pop	{r7, pc}
 80088b8:	200064e4 	.word	0x200064e4
 80088bc:	200064f0 	.word	0x200064f0
 80088c0:	200064e8 	.word	0x200064e8
 80088c4:	200064dc 	.word	0x200064dc
 80088c8:	200064ec 	.word	0x200064ec

080088cc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b086      	sub	sp, #24
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d046      	beq.n	800896c <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80088de:	2308      	movs	r3, #8
 80088e0:	425b      	negs	r3, r3
 80088e2:	697a      	ldr	r2, [r7, #20]
 80088e4:	4413      	add	r3, r2
 80088e6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80088e8:	697b      	ldr	r3, [r7, #20]
 80088ea:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80088ec:	693b      	ldr	r3, [r7, #16]
 80088ee:	685a      	ldr	r2, [r3, #4]
 80088f0:	4b20      	ldr	r3, [pc, #128]	; (8008974 <vPortFree+0xa8>)
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	4013      	ands	r3, r2
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d109      	bne.n	800890e <vPortFree+0x42>
 80088fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088fe:	f383 8811 	msr	BASEPRI, r3
 8008902:	f3bf 8f6f 	isb	sy
 8008906:	f3bf 8f4f 	dsb	sy
 800890a:	60fb      	str	r3, [r7, #12]
 800890c:	e7fe      	b.n	800890c <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800890e:	693b      	ldr	r3, [r7, #16]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d009      	beq.n	800892a <vPortFree+0x5e>
 8008916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800891a:	f383 8811 	msr	BASEPRI, r3
 800891e:	f3bf 8f6f 	isb	sy
 8008922:	f3bf 8f4f 	dsb	sy
 8008926:	60bb      	str	r3, [r7, #8]
 8008928:	e7fe      	b.n	8008928 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800892a:	693b      	ldr	r3, [r7, #16]
 800892c:	685a      	ldr	r2, [r3, #4]
 800892e:	4b11      	ldr	r3, [pc, #68]	; (8008974 <vPortFree+0xa8>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	4013      	ands	r3, r2
 8008934:	2b00      	cmp	r3, #0
 8008936:	d019      	beq.n	800896c <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008938:	693b      	ldr	r3, [r7, #16]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d115      	bne.n	800896c <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008940:	693b      	ldr	r3, [r7, #16]
 8008942:	685a      	ldr	r2, [r3, #4]
 8008944:	4b0b      	ldr	r3, [pc, #44]	; (8008974 <vPortFree+0xa8>)
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	43db      	mvns	r3, r3
 800894a:	401a      	ands	r2, r3
 800894c:	693b      	ldr	r3, [r7, #16]
 800894e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008950:	f7fe fd38 	bl	80073c4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008954:	693b      	ldr	r3, [r7, #16]
 8008956:	685a      	ldr	r2, [r3, #4]
 8008958:	4b07      	ldr	r3, [pc, #28]	; (8008978 <vPortFree+0xac>)
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	4413      	add	r3, r2
 800895e:	4a06      	ldr	r2, [pc, #24]	; (8008978 <vPortFree+0xac>)
 8008960:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008962:	6938      	ldr	r0, [r7, #16]
 8008964:	f000 f86c 	bl	8008a40 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008968:	f7fe fd3a 	bl	80073e0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800896c:	bf00      	nop
 800896e:	3718      	adds	r7, #24
 8008970:	46bd      	mov	sp, r7
 8008972:	bd80      	pop	{r7, pc}
 8008974:	200064f0 	.word	0x200064f0
 8008978:	200064e8 	.word	0x200064e8

0800897c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800897c:	b480      	push	{r7}
 800897e:	b085      	sub	sp, #20
 8008980:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008982:	f246 13a8 	movw	r3, #25000	; 0x61a8
 8008986:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008988:	4b27      	ldr	r3, [pc, #156]	; (8008a28 <prvHeapInit+0xac>)
 800898a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	f003 0307 	and.w	r3, r3, #7
 8008992:	2b00      	cmp	r3, #0
 8008994:	d00c      	beq.n	80089b0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	3307      	adds	r3, #7
 800899a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	f023 0307 	bic.w	r3, r3, #7
 80089a2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80089a4:	68ba      	ldr	r2, [r7, #8]
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	1ad3      	subs	r3, r2, r3
 80089aa:	4a1f      	ldr	r2, [pc, #124]	; (8008a28 <prvHeapInit+0xac>)
 80089ac:	4413      	add	r3, r2
 80089ae:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80089b4:	4a1d      	ldr	r2, [pc, #116]	; (8008a2c <prvHeapInit+0xb0>)
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80089ba:	4b1c      	ldr	r3, [pc, #112]	; (8008a2c <prvHeapInit+0xb0>)
 80089bc:	2200      	movs	r2, #0
 80089be:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	68ba      	ldr	r2, [r7, #8]
 80089c4:	4413      	add	r3, r2
 80089c6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80089c8:	2208      	movs	r2, #8
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	1a9b      	subs	r3, r3, r2
 80089ce:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	f023 0307 	bic.w	r3, r3, #7
 80089d6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	4a15      	ldr	r2, [pc, #84]	; (8008a30 <prvHeapInit+0xb4>)
 80089dc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80089de:	4b14      	ldr	r3, [pc, #80]	; (8008a30 <prvHeapInit+0xb4>)
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	2200      	movs	r2, #0
 80089e4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80089e6:	4b12      	ldr	r3, [pc, #72]	; (8008a30 <prvHeapInit+0xb4>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	2200      	movs	r2, #0
 80089ec:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	68fa      	ldr	r2, [r7, #12]
 80089f6:	1ad2      	subs	r2, r2, r3
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80089fc:	4b0c      	ldr	r3, [pc, #48]	; (8008a30 <prvHeapInit+0xb4>)
 80089fe:	681a      	ldr	r2, [r3, #0]
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	685b      	ldr	r3, [r3, #4]
 8008a08:	4a0a      	ldr	r2, [pc, #40]	; (8008a34 <prvHeapInit+0xb8>)
 8008a0a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	685b      	ldr	r3, [r3, #4]
 8008a10:	4a09      	ldr	r2, [pc, #36]	; (8008a38 <prvHeapInit+0xbc>)
 8008a12:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008a14:	4b09      	ldr	r3, [pc, #36]	; (8008a3c <prvHeapInit+0xc0>)
 8008a16:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008a1a:	601a      	str	r2, [r3, #0]
}
 8008a1c:	bf00      	nop
 8008a1e:	3714      	adds	r7, #20
 8008a20:	46bd      	mov	sp, r7
 8008a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a26:	4770      	bx	lr
 8008a28:	20000334 	.word	0x20000334
 8008a2c:	200064dc 	.word	0x200064dc
 8008a30:	200064e4 	.word	0x200064e4
 8008a34:	200064ec 	.word	0x200064ec
 8008a38:	200064e8 	.word	0x200064e8
 8008a3c:	200064f0 	.word	0x200064f0

08008a40 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008a40:	b480      	push	{r7}
 8008a42:	b085      	sub	sp, #20
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008a48:	4b28      	ldr	r3, [pc, #160]	; (8008aec <prvInsertBlockIntoFreeList+0xac>)
 8008a4a:	60fb      	str	r3, [r7, #12]
 8008a4c:	e002      	b.n	8008a54 <prvInsertBlockIntoFreeList+0x14>
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	60fb      	str	r3, [r7, #12]
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	687a      	ldr	r2, [r7, #4]
 8008a5a:	429a      	cmp	r2, r3
 8008a5c:	d8f7      	bhi.n	8008a4e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	685b      	ldr	r3, [r3, #4]
 8008a66:	68ba      	ldr	r2, [r7, #8]
 8008a68:	4413      	add	r3, r2
 8008a6a:	687a      	ldr	r2, [r7, #4]
 8008a6c:	429a      	cmp	r2, r3
 8008a6e:	d108      	bne.n	8008a82 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	685a      	ldr	r2, [r3, #4]
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	685b      	ldr	r3, [r3, #4]
 8008a78:	441a      	add	r2, r3
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	685b      	ldr	r3, [r3, #4]
 8008a8a:	68ba      	ldr	r2, [r7, #8]
 8008a8c:	441a      	add	r2, r3
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	429a      	cmp	r2, r3
 8008a94:	d118      	bne.n	8008ac8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	681a      	ldr	r2, [r3, #0]
 8008a9a:	4b15      	ldr	r3, [pc, #84]	; (8008af0 <prvInsertBlockIntoFreeList+0xb0>)
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	429a      	cmp	r2, r3
 8008aa0:	d00d      	beq.n	8008abe <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	685a      	ldr	r2, [r3, #4]
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	685b      	ldr	r3, [r3, #4]
 8008aac:	441a      	add	r2, r3
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	681a      	ldr	r2, [r3, #0]
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	601a      	str	r2, [r3, #0]
 8008abc:	e008      	b.n	8008ad0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008abe:	4b0c      	ldr	r3, [pc, #48]	; (8008af0 <prvInsertBlockIntoFreeList+0xb0>)
 8008ac0:	681a      	ldr	r2, [r3, #0]
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	601a      	str	r2, [r3, #0]
 8008ac6:	e003      	b.n	8008ad0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	681a      	ldr	r2, [r3, #0]
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008ad0:	68fa      	ldr	r2, [r7, #12]
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	429a      	cmp	r2, r3
 8008ad6:	d002      	beq.n	8008ade <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	687a      	ldr	r2, [r7, #4]
 8008adc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008ade:	bf00      	nop
 8008ae0:	3714      	adds	r7, #20
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae8:	4770      	bx	lr
 8008aea:	bf00      	nop
 8008aec:	200064dc 	.word	0x200064dc
 8008af0:	200064e4 	.word	0x200064e4

08008af4 <FINGER_USART_IrqHandler>:
char FINGER_UART_RX_Buffer[FINGER_UART_RX_BUFFER_SIZE];
size_t finger_write, finger_len, finger_tocopy;
uint8_t *finger_ptr;

void FINGER_USART_IrqHandler(UART_HandleTypeDef *huart, DMA_HandleTypeDef *hdma)
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b084      	sub	sp, #16
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
 8008afc:	6039      	str	r1, [r7, #0]
	if (huart->Instance->SR & UART_FLAG_IDLE) /* if Idle flag is set */
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	f003 0310 	and.w	r3, r3, #16
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d016      	beq.n	8008b3a <FINGER_USART_IrqHandler+0x46>
	{
		__HAL_UART_CLEAR_IDLEFLAG(huart);	 /* Clear idle flag */
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	60fb      	str	r3, [r7, #12]
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	60fb      	str	r3, [r7, #12]
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	685b      	ldr	r3, [r3, #4]
 8008b1e:	60fb      	str	r3, [r7, #12]
 8008b20:	68fb      	ldr	r3, [r7, #12]
		__HAL_DMA_DISABLE(hdma);			 /* Disabling DMA will force transfer complete interrupt if enabled */
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	681a      	ldr	r2, [r3, #0]
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f022 0201 	bic.w	r2, r2, #1
 8008b30:	601a      	str	r2, [r3, #0]
		FINGER_DMA_IrqHandler(hdma, huart);
 8008b32:	6879      	ldr	r1, [r7, #4]
 8008b34:	6838      	ldr	r0, [r7, #0]
 8008b36:	f000 f805 	bl	8008b44 <FINGER_DMA_IrqHandler>
	}
}
 8008b3a:	bf00      	nop
 8008b3c:	3710      	adds	r7, #16
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bd80      	pop	{r7, pc}
	...

08008b44 <FINGER_DMA_IrqHandler>:

void FINGER_DMA_IrqHandler(DMA_HandleTypeDef *hdma, UART_HandleTypeDef *huart)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b082      	sub	sp, #8
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
 8008b4c:	6039      	str	r1, [r7, #0]
	if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET) // if the source is TC
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	f003 0310 	and.w	r3, r3, #16
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	f000 8211 	beq.w	8008f80 <FINGER_DMA_IrqHandler+0x43c>
	{
		/* Clear the transfer complete flag */
		__HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	461a      	mov	r2, r3
 8008b64:	4b99      	ldr	r3, [pc, #612]	; (8008dcc <FINGER_DMA_IrqHandler+0x288>)
 8008b66:	429a      	cmp	r2, r3
 8008b68:	d960      	bls.n	8008c2c <FINGER_DMA_IrqHandler+0xe8>
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	4a98      	ldr	r2, [pc, #608]	; (8008dd0 <FINGER_DMA_IrqHandler+0x28c>)
 8008b70:	4293      	cmp	r3, r2
 8008b72:	d057      	beq.n	8008c24 <FINGER_DMA_IrqHandler+0xe0>
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	4a96      	ldr	r2, [pc, #600]	; (8008dd4 <FINGER_DMA_IrqHandler+0x290>)
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	d050      	beq.n	8008c20 <FINGER_DMA_IrqHandler+0xdc>
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	4a95      	ldr	r2, [pc, #596]	; (8008dd8 <FINGER_DMA_IrqHandler+0x294>)
 8008b84:	4293      	cmp	r3, r2
 8008b86:	d049      	beq.n	8008c1c <FINGER_DMA_IrqHandler+0xd8>
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	4a93      	ldr	r2, [pc, #588]	; (8008ddc <FINGER_DMA_IrqHandler+0x298>)
 8008b8e:	4293      	cmp	r3, r2
 8008b90:	d042      	beq.n	8008c18 <FINGER_DMA_IrqHandler+0xd4>
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	4a92      	ldr	r2, [pc, #584]	; (8008de0 <FINGER_DMA_IrqHandler+0x29c>)
 8008b98:	4293      	cmp	r3, r2
 8008b9a:	d03a      	beq.n	8008c12 <FINGER_DMA_IrqHandler+0xce>
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	4a90      	ldr	r2, [pc, #576]	; (8008de4 <FINGER_DMA_IrqHandler+0x2a0>)
 8008ba2:	4293      	cmp	r3, r2
 8008ba4:	d032      	beq.n	8008c0c <FINGER_DMA_IrqHandler+0xc8>
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	4a8f      	ldr	r2, [pc, #572]	; (8008de8 <FINGER_DMA_IrqHandler+0x2a4>)
 8008bac:	4293      	cmp	r3, r2
 8008bae:	d02a      	beq.n	8008c06 <FINGER_DMA_IrqHandler+0xc2>
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	4a8d      	ldr	r2, [pc, #564]	; (8008dec <FINGER_DMA_IrqHandler+0x2a8>)
 8008bb6:	4293      	cmp	r3, r2
 8008bb8:	d022      	beq.n	8008c00 <FINGER_DMA_IrqHandler+0xbc>
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	4a8c      	ldr	r2, [pc, #560]	; (8008df0 <FINGER_DMA_IrqHandler+0x2ac>)
 8008bc0:	4293      	cmp	r3, r2
 8008bc2:	d01a      	beq.n	8008bfa <FINGER_DMA_IrqHandler+0xb6>
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	4a8a      	ldr	r2, [pc, #552]	; (8008df4 <FINGER_DMA_IrqHandler+0x2b0>)
 8008bca:	4293      	cmp	r3, r2
 8008bcc:	d012      	beq.n	8008bf4 <FINGER_DMA_IrqHandler+0xb0>
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	4a89      	ldr	r2, [pc, #548]	; (8008df8 <FINGER_DMA_IrqHandler+0x2b4>)
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	d00a      	beq.n	8008bee <FINGER_DMA_IrqHandler+0xaa>
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	4a87      	ldr	r2, [pc, #540]	; (8008dfc <FINGER_DMA_IrqHandler+0x2b8>)
 8008bde:	4293      	cmp	r3, r2
 8008be0:	d102      	bne.n	8008be8 <FINGER_DMA_IrqHandler+0xa4>
 8008be2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008be6:	e01e      	b.n	8008c26 <FINGER_DMA_IrqHandler+0xe2>
 8008be8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008bec:	e01b      	b.n	8008c26 <FINGER_DMA_IrqHandler+0xe2>
 8008bee:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008bf2:	e018      	b.n	8008c26 <FINGER_DMA_IrqHandler+0xe2>
 8008bf4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008bf8:	e015      	b.n	8008c26 <FINGER_DMA_IrqHandler+0xe2>
 8008bfa:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008bfe:	e012      	b.n	8008c26 <FINGER_DMA_IrqHandler+0xe2>
 8008c00:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008c04:	e00f      	b.n	8008c26 <FINGER_DMA_IrqHandler+0xe2>
 8008c06:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008c0a:	e00c      	b.n	8008c26 <FINGER_DMA_IrqHandler+0xe2>
 8008c0c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008c10:	e009      	b.n	8008c26 <FINGER_DMA_IrqHandler+0xe2>
 8008c12:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008c16:	e006      	b.n	8008c26 <FINGER_DMA_IrqHandler+0xe2>
 8008c18:	2320      	movs	r3, #32
 8008c1a:	e004      	b.n	8008c26 <FINGER_DMA_IrqHandler+0xe2>
 8008c1c:	2320      	movs	r3, #32
 8008c1e:	e002      	b.n	8008c26 <FINGER_DMA_IrqHandler+0xe2>
 8008c20:	2320      	movs	r3, #32
 8008c22:	e000      	b.n	8008c26 <FINGER_DMA_IrqHandler+0xe2>
 8008c24:	2320      	movs	r3, #32
 8008c26:	4a76      	ldr	r2, [pc, #472]	; (8008e00 <FINGER_DMA_IrqHandler+0x2bc>)
 8008c28:	60d3      	str	r3, [r2, #12]
 8008c2a:	e151      	b.n	8008ed0 <FINGER_DMA_IrqHandler+0x38c>
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	461a      	mov	r2, r3
 8008c32:	4b74      	ldr	r3, [pc, #464]	; (8008e04 <FINGER_DMA_IrqHandler+0x2c0>)
 8008c34:	429a      	cmp	r2, r3
 8008c36:	d960      	bls.n	8008cfa <FINGER_DMA_IrqHandler+0x1b6>
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	4a64      	ldr	r2, [pc, #400]	; (8008dd0 <FINGER_DMA_IrqHandler+0x28c>)
 8008c3e:	4293      	cmp	r3, r2
 8008c40:	d057      	beq.n	8008cf2 <FINGER_DMA_IrqHandler+0x1ae>
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	4a63      	ldr	r2, [pc, #396]	; (8008dd4 <FINGER_DMA_IrqHandler+0x290>)
 8008c48:	4293      	cmp	r3, r2
 8008c4a:	d050      	beq.n	8008cee <FINGER_DMA_IrqHandler+0x1aa>
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	4a61      	ldr	r2, [pc, #388]	; (8008dd8 <FINGER_DMA_IrqHandler+0x294>)
 8008c52:	4293      	cmp	r3, r2
 8008c54:	d049      	beq.n	8008cea <FINGER_DMA_IrqHandler+0x1a6>
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	4a60      	ldr	r2, [pc, #384]	; (8008ddc <FINGER_DMA_IrqHandler+0x298>)
 8008c5c:	4293      	cmp	r3, r2
 8008c5e:	d042      	beq.n	8008ce6 <FINGER_DMA_IrqHandler+0x1a2>
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	4a5e      	ldr	r2, [pc, #376]	; (8008de0 <FINGER_DMA_IrqHandler+0x29c>)
 8008c66:	4293      	cmp	r3, r2
 8008c68:	d03a      	beq.n	8008ce0 <FINGER_DMA_IrqHandler+0x19c>
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	4a5d      	ldr	r2, [pc, #372]	; (8008de4 <FINGER_DMA_IrqHandler+0x2a0>)
 8008c70:	4293      	cmp	r3, r2
 8008c72:	d032      	beq.n	8008cda <FINGER_DMA_IrqHandler+0x196>
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	4a5b      	ldr	r2, [pc, #364]	; (8008de8 <FINGER_DMA_IrqHandler+0x2a4>)
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	d02a      	beq.n	8008cd4 <FINGER_DMA_IrqHandler+0x190>
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	4a5a      	ldr	r2, [pc, #360]	; (8008dec <FINGER_DMA_IrqHandler+0x2a8>)
 8008c84:	4293      	cmp	r3, r2
 8008c86:	d022      	beq.n	8008cce <FINGER_DMA_IrqHandler+0x18a>
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	4a58      	ldr	r2, [pc, #352]	; (8008df0 <FINGER_DMA_IrqHandler+0x2ac>)
 8008c8e:	4293      	cmp	r3, r2
 8008c90:	d01a      	beq.n	8008cc8 <FINGER_DMA_IrqHandler+0x184>
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	4a57      	ldr	r2, [pc, #348]	; (8008df4 <FINGER_DMA_IrqHandler+0x2b0>)
 8008c98:	4293      	cmp	r3, r2
 8008c9a:	d012      	beq.n	8008cc2 <FINGER_DMA_IrqHandler+0x17e>
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	4a55      	ldr	r2, [pc, #340]	; (8008df8 <FINGER_DMA_IrqHandler+0x2b4>)
 8008ca2:	4293      	cmp	r3, r2
 8008ca4:	d00a      	beq.n	8008cbc <FINGER_DMA_IrqHandler+0x178>
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	4a54      	ldr	r2, [pc, #336]	; (8008dfc <FINGER_DMA_IrqHandler+0x2b8>)
 8008cac:	4293      	cmp	r3, r2
 8008cae:	d102      	bne.n	8008cb6 <FINGER_DMA_IrqHandler+0x172>
 8008cb0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008cb4:	e01e      	b.n	8008cf4 <FINGER_DMA_IrqHandler+0x1b0>
 8008cb6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008cba:	e01b      	b.n	8008cf4 <FINGER_DMA_IrqHandler+0x1b0>
 8008cbc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008cc0:	e018      	b.n	8008cf4 <FINGER_DMA_IrqHandler+0x1b0>
 8008cc2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008cc6:	e015      	b.n	8008cf4 <FINGER_DMA_IrqHandler+0x1b0>
 8008cc8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008ccc:	e012      	b.n	8008cf4 <FINGER_DMA_IrqHandler+0x1b0>
 8008cce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008cd2:	e00f      	b.n	8008cf4 <FINGER_DMA_IrqHandler+0x1b0>
 8008cd4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008cd8:	e00c      	b.n	8008cf4 <FINGER_DMA_IrqHandler+0x1b0>
 8008cda:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008cde:	e009      	b.n	8008cf4 <FINGER_DMA_IrqHandler+0x1b0>
 8008ce0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008ce4:	e006      	b.n	8008cf4 <FINGER_DMA_IrqHandler+0x1b0>
 8008ce6:	2320      	movs	r3, #32
 8008ce8:	e004      	b.n	8008cf4 <FINGER_DMA_IrqHandler+0x1b0>
 8008cea:	2320      	movs	r3, #32
 8008cec:	e002      	b.n	8008cf4 <FINGER_DMA_IrqHandler+0x1b0>
 8008cee:	2320      	movs	r3, #32
 8008cf0:	e000      	b.n	8008cf4 <FINGER_DMA_IrqHandler+0x1b0>
 8008cf2:	2320      	movs	r3, #32
 8008cf4:	4a42      	ldr	r2, [pc, #264]	; (8008e00 <FINGER_DMA_IrqHandler+0x2bc>)
 8008cf6:	6093      	str	r3, [r2, #8]
 8008cf8:	e0ea      	b.n	8008ed0 <FINGER_DMA_IrqHandler+0x38c>
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	461a      	mov	r2, r3
 8008d00:	4b41      	ldr	r3, [pc, #260]	; (8008e08 <FINGER_DMA_IrqHandler+0x2c4>)
 8008d02:	429a      	cmp	r2, r3
 8008d04:	f240 8084 	bls.w	8008e10 <FINGER_DMA_IrqHandler+0x2cc>
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	4a30      	ldr	r2, [pc, #192]	; (8008dd0 <FINGER_DMA_IrqHandler+0x28c>)
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	d057      	beq.n	8008dc2 <FINGER_DMA_IrqHandler+0x27e>
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	4a2f      	ldr	r2, [pc, #188]	; (8008dd4 <FINGER_DMA_IrqHandler+0x290>)
 8008d18:	4293      	cmp	r3, r2
 8008d1a:	d050      	beq.n	8008dbe <FINGER_DMA_IrqHandler+0x27a>
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	4a2d      	ldr	r2, [pc, #180]	; (8008dd8 <FINGER_DMA_IrqHandler+0x294>)
 8008d22:	4293      	cmp	r3, r2
 8008d24:	d049      	beq.n	8008dba <FINGER_DMA_IrqHandler+0x276>
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	4a2c      	ldr	r2, [pc, #176]	; (8008ddc <FINGER_DMA_IrqHandler+0x298>)
 8008d2c:	4293      	cmp	r3, r2
 8008d2e:	d042      	beq.n	8008db6 <FINGER_DMA_IrqHandler+0x272>
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	4a2a      	ldr	r2, [pc, #168]	; (8008de0 <FINGER_DMA_IrqHandler+0x29c>)
 8008d36:	4293      	cmp	r3, r2
 8008d38:	d03a      	beq.n	8008db0 <FINGER_DMA_IrqHandler+0x26c>
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	4a29      	ldr	r2, [pc, #164]	; (8008de4 <FINGER_DMA_IrqHandler+0x2a0>)
 8008d40:	4293      	cmp	r3, r2
 8008d42:	d032      	beq.n	8008daa <FINGER_DMA_IrqHandler+0x266>
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	4a27      	ldr	r2, [pc, #156]	; (8008de8 <FINGER_DMA_IrqHandler+0x2a4>)
 8008d4a:	4293      	cmp	r3, r2
 8008d4c:	d02a      	beq.n	8008da4 <FINGER_DMA_IrqHandler+0x260>
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	4a26      	ldr	r2, [pc, #152]	; (8008dec <FINGER_DMA_IrqHandler+0x2a8>)
 8008d54:	4293      	cmp	r3, r2
 8008d56:	d022      	beq.n	8008d9e <FINGER_DMA_IrqHandler+0x25a>
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	4a24      	ldr	r2, [pc, #144]	; (8008df0 <FINGER_DMA_IrqHandler+0x2ac>)
 8008d5e:	4293      	cmp	r3, r2
 8008d60:	d01a      	beq.n	8008d98 <FINGER_DMA_IrqHandler+0x254>
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	4a23      	ldr	r2, [pc, #140]	; (8008df4 <FINGER_DMA_IrqHandler+0x2b0>)
 8008d68:	4293      	cmp	r3, r2
 8008d6a:	d012      	beq.n	8008d92 <FINGER_DMA_IrqHandler+0x24e>
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	4a21      	ldr	r2, [pc, #132]	; (8008df8 <FINGER_DMA_IrqHandler+0x2b4>)
 8008d72:	4293      	cmp	r3, r2
 8008d74:	d00a      	beq.n	8008d8c <FINGER_DMA_IrqHandler+0x248>
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	4a20      	ldr	r2, [pc, #128]	; (8008dfc <FINGER_DMA_IrqHandler+0x2b8>)
 8008d7c:	4293      	cmp	r3, r2
 8008d7e:	d102      	bne.n	8008d86 <FINGER_DMA_IrqHandler+0x242>
 8008d80:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008d84:	e01e      	b.n	8008dc4 <FINGER_DMA_IrqHandler+0x280>
 8008d86:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008d8a:	e01b      	b.n	8008dc4 <FINGER_DMA_IrqHandler+0x280>
 8008d8c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008d90:	e018      	b.n	8008dc4 <FINGER_DMA_IrqHandler+0x280>
 8008d92:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008d96:	e015      	b.n	8008dc4 <FINGER_DMA_IrqHandler+0x280>
 8008d98:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008d9c:	e012      	b.n	8008dc4 <FINGER_DMA_IrqHandler+0x280>
 8008d9e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008da2:	e00f      	b.n	8008dc4 <FINGER_DMA_IrqHandler+0x280>
 8008da4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008da8:	e00c      	b.n	8008dc4 <FINGER_DMA_IrqHandler+0x280>
 8008daa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008dae:	e009      	b.n	8008dc4 <FINGER_DMA_IrqHandler+0x280>
 8008db0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008db4:	e006      	b.n	8008dc4 <FINGER_DMA_IrqHandler+0x280>
 8008db6:	2320      	movs	r3, #32
 8008db8:	e004      	b.n	8008dc4 <FINGER_DMA_IrqHandler+0x280>
 8008dba:	2320      	movs	r3, #32
 8008dbc:	e002      	b.n	8008dc4 <FINGER_DMA_IrqHandler+0x280>
 8008dbe:	2320      	movs	r3, #32
 8008dc0:	e000      	b.n	8008dc4 <FINGER_DMA_IrqHandler+0x280>
 8008dc2:	2320      	movs	r3, #32
 8008dc4:	4a11      	ldr	r2, [pc, #68]	; (8008e0c <FINGER_DMA_IrqHandler+0x2c8>)
 8008dc6:	60d3      	str	r3, [r2, #12]
 8008dc8:	e082      	b.n	8008ed0 <FINGER_DMA_IrqHandler+0x38c>
 8008dca:	bf00      	nop
 8008dcc:	40026458 	.word	0x40026458
 8008dd0:	40026010 	.word	0x40026010
 8008dd4:	40026410 	.word	0x40026410
 8008dd8:	40026070 	.word	0x40026070
 8008ddc:	40026470 	.word	0x40026470
 8008de0:	40026028 	.word	0x40026028
 8008de4:	40026428 	.word	0x40026428
 8008de8:	40026088 	.word	0x40026088
 8008dec:	40026488 	.word	0x40026488
 8008df0:	40026040 	.word	0x40026040
 8008df4:	40026440 	.word	0x40026440
 8008df8:	400260a0 	.word	0x400260a0
 8008dfc:	400264a0 	.word	0x400264a0
 8008e00:	40026400 	.word	0x40026400
 8008e04:	400260b8 	.word	0x400260b8
 8008e08:	40026058 	.word	0x40026058
 8008e0c:	40026000 	.word	0x40026000
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	4a5c      	ldr	r2, [pc, #368]	; (8008f88 <FINGER_DMA_IrqHandler+0x444>)
 8008e16:	4293      	cmp	r3, r2
 8008e18:	d057      	beq.n	8008eca <FINGER_DMA_IrqHandler+0x386>
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	4a5b      	ldr	r2, [pc, #364]	; (8008f8c <FINGER_DMA_IrqHandler+0x448>)
 8008e20:	4293      	cmp	r3, r2
 8008e22:	d050      	beq.n	8008ec6 <FINGER_DMA_IrqHandler+0x382>
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	4a59      	ldr	r2, [pc, #356]	; (8008f90 <FINGER_DMA_IrqHandler+0x44c>)
 8008e2a:	4293      	cmp	r3, r2
 8008e2c:	d049      	beq.n	8008ec2 <FINGER_DMA_IrqHandler+0x37e>
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	4a58      	ldr	r2, [pc, #352]	; (8008f94 <FINGER_DMA_IrqHandler+0x450>)
 8008e34:	4293      	cmp	r3, r2
 8008e36:	d042      	beq.n	8008ebe <FINGER_DMA_IrqHandler+0x37a>
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	4a56      	ldr	r2, [pc, #344]	; (8008f98 <FINGER_DMA_IrqHandler+0x454>)
 8008e3e:	4293      	cmp	r3, r2
 8008e40:	d03a      	beq.n	8008eb8 <FINGER_DMA_IrqHandler+0x374>
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	4a55      	ldr	r2, [pc, #340]	; (8008f9c <FINGER_DMA_IrqHandler+0x458>)
 8008e48:	4293      	cmp	r3, r2
 8008e4a:	d032      	beq.n	8008eb2 <FINGER_DMA_IrqHandler+0x36e>
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	4a53      	ldr	r2, [pc, #332]	; (8008fa0 <FINGER_DMA_IrqHandler+0x45c>)
 8008e52:	4293      	cmp	r3, r2
 8008e54:	d02a      	beq.n	8008eac <FINGER_DMA_IrqHandler+0x368>
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	4a52      	ldr	r2, [pc, #328]	; (8008fa4 <FINGER_DMA_IrqHandler+0x460>)
 8008e5c:	4293      	cmp	r3, r2
 8008e5e:	d022      	beq.n	8008ea6 <FINGER_DMA_IrqHandler+0x362>
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	4a50      	ldr	r2, [pc, #320]	; (8008fa8 <FINGER_DMA_IrqHandler+0x464>)
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d01a      	beq.n	8008ea0 <FINGER_DMA_IrqHandler+0x35c>
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	4a4f      	ldr	r2, [pc, #316]	; (8008fac <FINGER_DMA_IrqHandler+0x468>)
 8008e70:	4293      	cmp	r3, r2
 8008e72:	d012      	beq.n	8008e9a <FINGER_DMA_IrqHandler+0x356>
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	4a4d      	ldr	r2, [pc, #308]	; (8008fb0 <FINGER_DMA_IrqHandler+0x46c>)
 8008e7a:	4293      	cmp	r3, r2
 8008e7c:	d00a      	beq.n	8008e94 <FINGER_DMA_IrqHandler+0x350>
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	4a4c      	ldr	r2, [pc, #304]	; (8008fb4 <FINGER_DMA_IrqHandler+0x470>)
 8008e84:	4293      	cmp	r3, r2
 8008e86:	d102      	bne.n	8008e8e <FINGER_DMA_IrqHandler+0x34a>
 8008e88:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008e8c:	e01e      	b.n	8008ecc <FINGER_DMA_IrqHandler+0x388>
 8008e8e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008e92:	e01b      	b.n	8008ecc <FINGER_DMA_IrqHandler+0x388>
 8008e94:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008e98:	e018      	b.n	8008ecc <FINGER_DMA_IrqHandler+0x388>
 8008e9a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008e9e:	e015      	b.n	8008ecc <FINGER_DMA_IrqHandler+0x388>
 8008ea0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008ea4:	e012      	b.n	8008ecc <FINGER_DMA_IrqHandler+0x388>
 8008ea6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008eaa:	e00f      	b.n	8008ecc <FINGER_DMA_IrqHandler+0x388>
 8008eac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008eb0:	e00c      	b.n	8008ecc <FINGER_DMA_IrqHandler+0x388>
 8008eb2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008eb6:	e009      	b.n	8008ecc <FINGER_DMA_IrqHandler+0x388>
 8008eb8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008ebc:	e006      	b.n	8008ecc <FINGER_DMA_IrqHandler+0x388>
 8008ebe:	2320      	movs	r3, #32
 8008ec0:	e004      	b.n	8008ecc <FINGER_DMA_IrqHandler+0x388>
 8008ec2:	2320      	movs	r3, #32
 8008ec4:	e002      	b.n	8008ecc <FINGER_DMA_IrqHandler+0x388>
 8008ec6:	2320      	movs	r3, #32
 8008ec8:	e000      	b.n	8008ecc <FINGER_DMA_IrqHandler+0x388>
 8008eca:	2320      	movs	r3, #32
 8008ecc:	4a3a      	ldr	r2, [pc, #232]	; (8008fb8 <FINGER_DMA_IrqHandler+0x474>)
 8008ece:	6093      	str	r3, [r2, #8]

		/* Get the finger_length of the data */
		finger_len = FINGER_DMA_RX_BUFFER_SIZE - hdma->Instance->NDTR;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	685b      	ldr	r3, [r3, #4]
 8008ed6:	f1c3 0332 	rsb	r3, r3, #50	; 0x32
 8008eda:	4a38      	ldr	r2, [pc, #224]	; (8008fbc <FINGER_DMA_IrqHandler+0x478>)
 8008edc:	6013      	str	r3, [r2, #0]
		/* Only process if DMA is not empty */
		if(finger_len > 0) {
 8008ede:	4b37      	ldr	r3, [pc, #220]	; (8008fbc <FINGER_DMA_IrqHandler+0x478>)
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d044      	beq.n	8008f70 <FINGER_DMA_IrqHandler+0x42c>
			/* Reset the buffer */
			FINGER_Reset_Buffer();
 8008ee6:	f000 f89d 	bl	8009024 <FINGER_Reset_Buffer>
			/* Get number of bytes we can copy to the end of buffer */
			finger_tocopy = FINGER_UART_RX_BUFFER_SIZE - finger_write;
 8008eea:	4b35      	ldr	r3, [pc, #212]	; (8008fc0 <FINGER_DMA_IrqHandler+0x47c>)
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f1c3 0332 	rsb	r3, r3, #50	; 0x32
 8008ef2:	4a34      	ldr	r2, [pc, #208]	; (8008fc4 <FINGER_DMA_IrqHandler+0x480>)
 8008ef4:	6013      	str	r3, [r2, #0]
			/* finger_write received data for UART main buffer for manipulation later */
			finger_ptr = (uint8_t *) FINGER_DMA_RX_Buffer;
 8008ef6:	4b34      	ldr	r3, [pc, #208]	; (8008fc8 <FINGER_DMA_IrqHandler+0x484>)
 8008ef8:	4a34      	ldr	r2, [pc, #208]	; (8008fcc <FINGER_DMA_IrqHandler+0x488>)
 8008efa:	601a      	str	r2, [r3, #0]
			/* Check how many bytes to copy */
			if (finger_tocopy > finger_len)
 8008efc:	4b31      	ldr	r3, [pc, #196]	; (8008fc4 <FINGER_DMA_IrqHandler+0x480>)
 8008efe:	681a      	ldr	r2, [r3, #0]
 8008f00:	4b2e      	ldr	r3, [pc, #184]	; (8008fbc <FINGER_DMA_IrqHandler+0x478>)
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	429a      	cmp	r2, r3
 8008f06:	d903      	bls.n	8008f10 <FINGER_DMA_IrqHandler+0x3cc>
			{
				finger_tocopy = finger_len;
 8008f08:	4b2c      	ldr	r3, [pc, #176]	; (8008fbc <FINGER_DMA_IrqHandler+0x478>)
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	4a2d      	ldr	r2, [pc, #180]	; (8008fc4 <FINGER_DMA_IrqHandler+0x480>)
 8008f0e:	6013      	str	r3, [r2, #0]
			}
			/* Copy first part */
			memcpy(&FINGER_UART_RX_Buffer[finger_write], finger_ptr, finger_tocopy);
 8008f10:	4b2b      	ldr	r3, [pc, #172]	; (8008fc0 <FINGER_DMA_IrqHandler+0x47c>)
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	4a2e      	ldr	r2, [pc, #184]	; (8008fd0 <FINGER_DMA_IrqHandler+0x48c>)
 8008f16:	1898      	adds	r0, r3, r2
 8008f18:	4b2b      	ldr	r3, [pc, #172]	; (8008fc8 <FINGER_DMA_IrqHandler+0x484>)
 8008f1a:	6819      	ldr	r1, [r3, #0]
 8008f1c:	4b29      	ldr	r3, [pc, #164]	; (8008fc4 <FINGER_DMA_IrqHandler+0x480>)
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	461a      	mov	r2, r3
 8008f22:	f005 fb13 	bl	800e54c <memcpy>
			/* Correct values for remaining data */
			finger_write += finger_tocopy;
 8008f26:	4b26      	ldr	r3, [pc, #152]	; (8008fc0 <FINGER_DMA_IrqHandler+0x47c>)
 8008f28:	681a      	ldr	r2, [r3, #0]
 8008f2a:	4b26      	ldr	r3, [pc, #152]	; (8008fc4 <FINGER_DMA_IrqHandler+0x480>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	4413      	add	r3, r2
 8008f30:	4a23      	ldr	r2, [pc, #140]	; (8008fc0 <FINGER_DMA_IrqHandler+0x47c>)
 8008f32:	6013      	str	r3, [r2, #0]
			finger_len -= finger_tocopy;
 8008f34:	4b21      	ldr	r3, [pc, #132]	; (8008fbc <FINGER_DMA_IrqHandler+0x478>)
 8008f36:	681a      	ldr	r2, [r3, #0]
 8008f38:	4b22      	ldr	r3, [pc, #136]	; (8008fc4 <FINGER_DMA_IrqHandler+0x480>)
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	1ad3      	subs	r3, r2, r3
 8008f3e:	4a1f      	ldr	r2, [pc, #124]	; (8008fbc <FINGER_DMA_IrqHandler+0x478>)
 8008f40:	6013      	str	r3, [r2, #0]
			finger_ptr += finger_tocopy;
 8008f42:	4b21      	ldr	r3, [pc, #132]	; (8008fc8 <FINGER_DMA_IrqHandler+0x484>)
 8008f44:	681a      	ldr	r2, [r3, #0]
 8008f46:	4b1f      	ldr	r3, [pc, #124]	; (8008fc4 <FINGER_DMA_IrqHandler+0x480>)
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	4413      	add	r3, r2
 8008f4c:	4a1e      	ldr	r2, [pc, #120]	; (8008fc8 <FINGER_DMA_IrqHandler+0x484>)
 8008f4e:	6013      	str	r3, [r2, #0]

			/* If still data to finger_write for beginning of buffer */
			if (finger_len)
 8008f50:	4b1a      	ldr	r3, [pc, #104]	; (8008fbc <FINGER_DMA_IrqHandler+0x478>)
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d00b      	beq.n	8008f70 <FINGER_DMA_IrqHandler+0x42c>
			{
				/* Don't care if we override Read pointer now */
				memcpy(&FINGER_UART_RX_Buffer[0], finger_ptr, finger_len);
 8008f58:	4b1b      	ldr	r3, [pc, #108]	; (8008fc8 <FINGER_DMA_IrqHandler+0x484>)
 8008f5a:	6819      	ldr	r1, [r3, #0]
 8008f5c:	4b17      	ldr	r3, [pc, #92]	; (8008fbc <FINGER_DMA_IrqHandler+0x478>)
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	461a      	mov	r2, r3
 8008f62:	481b      	ldr	r0, [pc, #108]	; (8008fd0 <FINGER_DMA_IrqHandler+0x48c>)
 8008f64:	f005 faf2 	bl	800e54c <memcpy>
				finger_write = finger_len;
 8008f68:	4b14      	ldr	r3, [pc, #80]	; (8008fbc <FINGER_DMA_IrqHandler+0x478>)
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	4a14      	ldr	r2, [pc, #80]	; (8008fc0 <FINGER_DMA_IrqHandler+0x47c>)
 8008f6e:	6013      	str	r3, [r2, #0]
			// set null at the end
			//			FINGER_UART_RX_Buffer[finger_write] = '\0';
		}

		/* Start DMA transfer again */
		hdma->Instance->CR |= DMA_SxCR_EN;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	681a      	ldr	r2, [r3, #0]
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	f042 0201 	orr.w	r2, r2, #1
 8008f7e:	601a      	str	r2, [r3, #0]
	}
}
 8008f80:	bf00      	nop
 8008f82:	3708      	adds	r7, #8
 8008f84:	46bd      	mov	sp, r7
 8008f86:	bd80      	pop	{r7, pc}
 8008f88:	40026010 	.word	0x40026010
 8008f8c:	40026410 	.word	0x40026410
 8008f90:	40026070 	.word	0x40026070
 8008f94:	40026470 	.word	0x40026470
 8008f98:	40026028 	.word	0x40026028
 8008f9c:	40026428 	.word	0x40026428
 8008fa0:	40026088 	.word	0x40026088
 8008fa4:	40026488 	.word	0x40026488
 8008fa8:	40026040 	.word	0x40026040
 8008fac:	40026440 	.word	0x40026440
 8008fb0:	400260a0 	.word	0x400260a0
 8008fb4:	400264a0 	.word	0x400264a0
 8008fb8:	40026000 	.word	0x40026000
 8008fbc:	200067b4 	.word	0x200067b4
 8008fc0:	200067f0 	.word	0x200067f0
 8008fc4:	200067b8 	.word	0x200067b8
 8008fc8:	2000677c 	.word	0x2000677c
 8008fcc:	200067bc 	.word	0x200067bc
 8008fd0:	20006780 	.word	0x20006780

08008fd4 <FINGER_DMA_Init>:

void FINGER_DMA_Init(void){
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	af00      	add	r7, sp, #0
	__HAL_UART_ENABLE_IT(&huart4, UART_IT_IDLE);      // enable idle line interrupt
 8008fd8:	4b0f      	ldr	r3, [pc, #60]	; (8009018 <FINGER_DMA_Init+0x44>)
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	68da      	ldr	r2, [r3, #12]
 8008fde:	4b0e      	ldr	r3, [pc, #56]	; (8009018 <FINGER_DMA_Init+0x44>)
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f042 0210 	orr.w	r2, r2, #16
 8008fe6:	60da      	str	r2, [r3, #12]
	__HAL_DMA_ENABLE_IT(&hdma_uart4_rx, DMA_IT_TC);  // enable DMA Tx cplt interrupt
 8008fe8:	4b0c      	ldr	r3, [pc, #48]	; (800901c <FINGER_DMA_Init+0x48>)
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	681a      	ldr	r2, [r3, #0]
 8008fee:	4b0b      	ldr	r3, [pc, #44]	; (800901c <FINGER_DMA_Init+0x48>)
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	f042 0210 	orr.w	r2, r2, #16
 8008ff6:	601a      	str	r2, [r3, #0]
	__HAL_DMA_DISABLE_IT(&hdma_uart4_rx, DMA_IT_HT); // disable half complete interrupt
 8008ff8:	4b08      	ldr	r3, [pc, #32]	; (800901c <FINGER_DMA_Init+0x48>)
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	681a      	ldr	r2, [r3, #0]
 8008ffe:	4b07      	ldr	r3, [pc, #28]	; (800901c <FINGER_DMA_Init+0x48>)
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	f022 0208 	bic.w	r2, r2, #8
 8009006:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(&huart4, (uint8_t *) FINGER_DMA_RX_Buffer, FINGER_DMA_RX_BUFFER_SIZE);
 8009008:	2232      	movs	r2, #50	; 0x32
 800900a:	4905      	ldr	r1, [pc, #20]	; (8009020 <FINGER_DMA_Init+0x4c>)
 800900c:	4802      	ldr	r0, [pc, #8]	; (8009018 <FINGER_DMA_Init+0x44>)
 800900e:	f7fb fe3f 	bl	8004c90 <HAL_UART_Receive_DMA>
}
 8009012:	bf00      	nop
 8009014:	bd80      	pop	{r7, pc}
 8009016:	bf00      	nop
 8009018:	20008330 	.word	0x20008330
 800901c:	20008144 	.word	0x20008144
 8009020:	200067bc 	.word	0x200067bc

08009024 <FINGER_Reset_Buffer>:

void FINGER_Reset_Buffer(void){
 8009024:	b580      	push	{r7, lr}
 8009026:	af00      	add	r7, sp, #0
	// clear rx buffer
	memset(FINGER_UART_RX_Buffer, 0, sizeof(FINGER_UART_RX_Buffer));
 8009028:	2232      	movs	r2, #50	; 0x32
 800902a:	2100      	movs	r1, #0
 800902c:	4803      	ldr	r0, [pc, #12]	; (800903c <FINGER_Reset_Buffer+0x18>)
 800902e:	f005 fa98 	bl	800e562 <memset>
	// set index back to first
	finger_write = 0;
 8009032:	4b03      	ldr	r3, [pc, #12]	; (8009040 <FINGER_Reset_Buffer+0x1c>)
 8009034:	2200      	movs	r2, #0
 8009036:	601a      	str	r2, [r3, #0]
}
 8009038:	bf00      	nop
 800903a:	bd80      	pop	{r7, pc}
 800903c:	20006780 	.word	0x20006780
 8009040:	200067f0 	.word	0x200067f0

08009044 <SIMCOM_USART_IrqHandler>:
char SIMCOM_UART_RX_Buffer[SIMCOM_UART_RX_BUFFER_SIZE];
size_t simcom_write, simcom_len, simcom_tocopy;
uint8_t *simcom_ptr;

void SIMCOM_USART_IrqHandler(UART_HandleTypeDef *huart, DMA_HandleTypeDef *hdma)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b084      	sub	sp, #16
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
 800904c:	6039      	str	r1, [r7, #0]
	if (huart->Instance->SR & UART_FLAG_IDLE) /* if Idle flag is set */
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	f003 0310 	and.w	r3, r3, #16
 8009058:	2b00      	cmp	r3, #0
 800905a:	d016      	beq.n	800908a <SIMCOM_USART_IrqHandler+0x46>
	{
		__HAL_UART_CLEAR_IDLEFLAG (huart);	 /* Clear idle flag */
 800905c:	2300      	movs	r3, #0
 800905e:	60fb      	str	r3, [r7, #12]
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	60fb      	str	r3, [r7, #12]
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	685b      	ldr	r3, [r3, #4]
 800906e:	60fb      	str	r3, [r7, #12]
 8009070:	68fb      	ldr	r3, [r7, #12]
		__HAL_DMA_DISABLE(hdma);						 /* Disabling DMA will force transfer complete interrupt if enabled */
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	681a      	ldr	r2, [r3, #0]
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f022 0201 	bic.w	r2, r2, #1
 8009080:	601a      	str	r2, [r3, #0]
		SIMCOM_DMA_IrqHandler(hdma, huart);
 8009082:	6879      	ldr	r1, [r7, #4]
 8009084:	6838      	ldr	r0, [r7, #0]
 8009086:	f000 f805 	bl	8009094 <SIMCOM_DMA_IrqHandler>
	}
}
 800908a:	bf00      	nop
 800908c:	3710      	adds	r7, #16
 800908e:	46bd      	mov	sp, r7
 8009090:	bd80      	pop	{r7, pc}
	...

08009094 <SIMCOM_DMA_IrqHandler>:

void SIMCOM_DMA_IrqHandler(DMA_HandleTypeDef *hdma, UART_HandleTypeDef *huart)
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b082      	sub	sp, #8
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
 800909c:	6039      	str	r1, [r7, #0]
	if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET) // if the source is TC
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f003 0310 	and.w	r3, r3, #16
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	f000 8210 	beq.w	80094ce <SIMCOM_DMA_IrqHandler+0x43a>
	{
		/* Clear the transfer complete flag */
		__HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	461a      	mov	r2, r3
 80090b4:	4b99      	ldr	r3, [pc, #612]	; (800931c <SIMCOM_DMA_IrqHandler+0x288>)
 80090b6:	429a      	cmp	r2, r3
 80090b8:	d960      	bls.n	800917c <SIMCOM_DMA_IrqHandler+0xe8>
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	4a98      	ldr	r2, [pc, #608]	; (8009320 <SIMCOM_DMA_IrqHandler+0x28c>)
 80090c0:	4293      	cmp	r3, r2
 80090c2:	d057      	beq.n	8009174 <SIMCOM_DMA_IrqHandler+0xe0>
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	4a96      	ldr	r2, [pc, #600]	; (8009324 <SIMCOM_DMA_IrqHandler+0x290>)
 80090ca:	4293      	cmp	r3, r2
 80090cc:	d050      	beq.n	8009170 <SIMCOM_DMA_IrqHandler+0xdc>
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	4a95      	ldr	r2, [pc, #596]	; (8009328 <SIMCOM_DMA_IrqHandler+0x294>)
 80090d4:	4293      	cmp	r3, r2
 80090d6:	d049      	beq.n	800916c <SIMCOM_DMA_IrqHandler+0xd8>
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	4a93      	ldr	r2, [pc, #588]	; (800932c <SIMCOM_DMA_IrqHandler+0x298>)
 80090de:	4293      	cmp	r3, r2
 80090e0:	d042      	beq.n	8009168 <SIMCOM_DMA_IrqHandler+0xd4>
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	4a92      	ldr	r2, [pc, #584]	; (8009330 <SIMCOM_DMA_IrqHandler+0x29c>)
 80090e8:	4293      	cmp	r3, r2
 80090ea:	d03a      	beq.n	8009162 <SIMCOM_DMA_IrqHandler+0xce>
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	4a90      	ldr	r2, [pc, #576]	; (8009334 <SIMCOM_DMA_IrqHandler+0x2a0>)
 80090f2:	4293      	cmp	r3, r2
 80090f4:	d032      	beq.n	800915c <SIMCOM_DMA_IrqHandler+0xc8>
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	4a8f      	ldr	r2, [pc, #572]	; (8009338 <SIMCOM_DMA_IrqHandler+0x2a4>)
 80090fc:	4293      	cmp	r3, r2
 80090fe:	d02a      	beq.n	8009156 <SIMCOM_DMA_IrqHandler+0xc2>
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	4a8d      	ldr	r2, [pc, #564]	; (800933c <SIMCOM_DMA_IrqHandler+0x2a8>)
 8009106:	4293      	cmp	r3, r2
 8009108:	d022      	beq.n	8009150 <SIMCOM_DMA_IrqHandler+0xbc>
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	4a8c      	ldr	r2, [pc, #560]	; (8009340 <SIMCOM_DMA_IrqHandler+0x2ac>)
 8009110:	4293      	cmp	r3, r2
 8009112:	d01a      	beq.n	800914a <SIMCOM_DMA_IrqHandler+0xb6>
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	4a8a      	ldr	r2, [pc, #552]	; (8009344 <SIMCOM_DMA_IrqHandler+0x2b0>)
 800911a:	4293      	cmp	r3, r2
 800911c:	d012      	beq.n	8009144 <SIMCOM_DMA_IrqHandler+0xb0>
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	4a89      	ldr	r2, [pc, #548]	; (8009348 <SIMCOM_DMA_IrqHandler+0x2b4>)
 8009124:	4293      	cmp	r3, r2
 8009126:	d00a      	beq.n	800913e <SIMCOM_DMA_IrqHandler+0xaa>
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	4a87      	ldr	r2, [pc, #540]	; (800934c <SIMCOM_DMA_IrqHandler+0x2b8>)
 800912e:	4293      	cmp	r3, r2
 8009130:	d102      	bne.n	8009138 <SIMCOM_DMA_IrqHandler+0xa4>
 8009132:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009136:	e01e      	b.n	8009176 <SIMCOM_DMA_IrqHandler+0xe2>
 8009138:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800913c:	e01b      	b.n	8009176 <SIMCOM_DMA_IrqHandler+0xe2>
 800913e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009142:	e018      	b.n	8009176 <SIMCOM_DMA_IrqHandler+0xe2>
 8009144:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009148:	e015      	b.n	8009176 <SIMCOM_DMA_IrqHandler+0xe2>
 800914a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800914e:	e012      	b.n	8009176 <SIMCOM_DMA_IrqHandler+0xe2>
 8009150:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009154:	e00f      	b.n	8009176 <SIMCOM_DMA_IrqHandler+0xe2>
 8009156:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800915a:	e00c      	b.n	8009176 <SIMCOM_DMA_IrqHandler+0xe2>
 800915c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009160:	e009      	b.n	8009176 <SIMCOM_DMA_IrqHandler+0xe2>
 8009162:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009166:	e006      	b.n	8009176 <SIMCOM_DMA_IrqHandler+0xe2>
 8009168:	2320      	movs	r3, #32
 800916a:	e004      	b.n	8009176 <SIMCOM_DMA_IrqHandler+0xe2>
 800916c:	2320      	movs	r3, #32
 800916e:	e002      	b.n	8009176 <SIMCOM_DMA_IrqHandler+0xe2>
 8009170:	2320      	movs	r3, #32
 8009172:	e000      	b.n	8009176 <SIMCOM_DMA_IrqHandler+0xe2>
 8009174:	2320      	movs	r3, #32
 8009176:	4a76      	ldr	r2, [pc, #472]	; (8009350 <SIMCOM_DMA_IrqHandler+0x2bc>)
 8009178:	60d3      	str	r3, [r2, #12]
 800917a:	e151      	b.n	8009420 <SIMCOM_DMA_IrqHandler+0x38c>
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	461a      	mov	r2, r3
 8009182:	4b74      	ldr	r3, [pc, #464]	; (8009354 <SIMCOM_DMA_IrqHandler+0x2c0>)
 8009184:	429a      	cmp	r2, r3
 8009186:	d960      	bls.n	800924a <SIMCOM_DMA_IrqHandler+0x1b6>
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	4a64      	ldr	r2, [pc, #400]	; (8009320 <SIMCOM_DMA_IrqHandler+0x28c>)
 800918e:	4293      	cmp	r3, r2
 8009190:	d057      	beq.n	8009242 <SIMCOM_DMA_IrqHandler+0x1ae>
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	4a63      	ldr	r2, [pc, #396]	; (8009324 <SIMCOM_DMA_IrqHandler+0x290>)
 8009198:	4293      	cmp	r3, r2
 800919a:	d050      	beq.n	800923e <SIMCOM_DMA_IrqHandler+0x1aa>
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	4a61      	ldr	r2, [pc, #388]	; (8009328 <SIMCOM_DMA_IrqHandler+0x294>)
 80091a2:	4293      	cmp	r3, r2
 80091a4:	d049      	beq.n	800923a <SIMCOM_DMA_IrqHandler+0x1a6>
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	4a60      	ldr	r2, [pc, #384]	; (800932c <SIMCOM_DMA_IrqHandler+0x298>)
 80091ac:	4293      	cmp	r3, r2
 80091ae:	d042      	beq.n	8009236 <SIMCOM_DMA_IrqHandler+0x1a2>
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	4a5e      	ldr	r2, [pc, #376]	; (8009330 <SIMCOM_DMA_IrqHandler+0x29c>)
 80091b6:	4293      	cmp	r3, r2
 80091b8:	d03a      	beq.n	8009230 <SIMCOM_DMA_IrqHandler+0x19c>
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	4a5d      	ldr	r2, [pc, #372]	; (8009334 <SIMCOM_DMA_IrqHandler+0x2a0>)
 80091c0:	4293      	cmp	r3, r2
 80091c2:	d032      	beq.n	800922a <SIMCOM_DMA_IrqHandler+0x196>
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	4a5b      	ldr	r2, [pc, #364]	; (8009338 <SIMCOM_DMA_IrqHandler+0x2a4>)
 80091ca:	4293      	cmp	r3, r2
 80091cc:	d02a      	beq.n	8009224 <SIMCOM_DMA_IrqHandler+0x190>
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	4a5a      	ldr	r2, [pc, #360]	; (800933c <SIMCOM_DMA_IrqHandler+0x2a8>)
 80091d4:	4293      	cmp	r3, r2
 80091d6:	d022      	beq.n	800921e <SIMCOM_DMA_IrqHandler+0x18a>
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	4a58      	ldr	r2, [pc, #352]	; (8009340 <SIMCOM_DMA_IrqHandler+0x2ac>)
 80091de:	4293      	cmp	r3, r2
 80091e0:	d01a      	beq.n	8009218 <SIMCOM_DMA_IrqHandler+0x184>
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	4a57      	ldr	r2, [pc, #348]	; (8009344 <SIMCOM_DMA_IrqHandler+0x2b0>)
 80091e8:	4293      	cmp	r3, r2
 80091ea:	d012      	beq.n	8009212 <SIMCOM_DMA_IrqHandler+0x17e>
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	4a55      	ldr	r2, [pc, #340]	; (8009348 <SIMCOM_DMA_IrqHandler+0x2b4>)
 80091f2:	4293      	cmp	r3, r2
 80091f4:	d00a      	beq.n	800920c <SIMCOM_DMA_IrqHandler+0x178>
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	4a54      	ldr	r2, [pc, #336]	; (800934c <SIMCOM_DMA_IrqHandler+0x2b8>)
 80091fc:	4293      	cmp	r3, r2
 80091fe:	d102      	bne.n	8009206 <SIMCOM_DMA_IrqHandler+0x172>
 8009200:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009204:	e01e      	b.n	8009244 <SIMCOM_DMA_IrqHandler+0x1b0>
 8009206:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800920a:	e01b      	b.n	8009244 <SIMCOM_DMA_IrqHandler+0x1b0>
 800920c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009210:	e018      	b.n	8009244 <SIMCOM_DMA_IrqHandler+0x1b0>
 8009212:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009216:	e015      	b.n	8009244 <SIMCOM_DMA_IrqHandler+0x1b0>
 8009218:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800921c:	e012      	b.n	8009244 <SIMCOM_DMA_IrqHandler+0x1b0>
 800921e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009222:	e00f      	b.n	8009244 <SIMCOM_DMA_IrqHandler+0x1b0>
 8009224:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009228:	e00c      	b.n	8009244 <SIMCOM_DMA_IrqHandler+0x1b0>
 800922a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800922e:	e009      	b.n	8009244 <SIMCOM_DMA_IrqHandler+0x1b0>
 8009230:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009234:	e006      	b.n	8009244 <SIMCOM_DMA_IrqHandler+0x1b0>
 8009236:	2320      	movs	r3, #32
 8009238:	e004      	b.n	8009244 <SIMCOM_DMA_IrqHandler+0x1b0>
 800923a:	2320      	movs	r3, #32
 800923c:	e002      	b.n	8009244 <SIMCOM_DMA_IrqHandler+0x1b0>
 800923e:	2320      	movs	r3, #32
 8009240:	e000      	b.n	8009244 <SIMCOM_DMA_IrqHandler+0x1b0>
 8009242:	2320      	movs	r3, #32
 8009244:	4a42      	ldr	r2, [pc, #264]	; (8009350 <SIMCOM_DMA_IrqHandler+0x2bc>)
 8009246:	6093      	str	r3, [r2, #8]
 8009248:	e0ea      	b.n	8009420 <SIMCOM_DMA_IrqHandler+0x38c>
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	461a      	mov	r2, r3
 8009250:	4b41      	ldr	r3, [pc, #260]	; (8009358 <SIMCOM_DMA_IrqHandler+0x2c4>)
 8009252:	429a      	cmp	r2, r3
 8009254:	f240 8084 	bls.w	8009360 <SIMCOM_DMA_IrqHandler+0x2cc>
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	4a30      	ldr	r2, [pc, #192]	; (8009320 <SIMCOM_DMA_IrqHandler+0x28c>)
 800925e:	4293      	cmp	r3, r2
 8009260:	d057      	beq.n	8009312 <SIMCOM_DMA_IrqHandler+0x27e>
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	4a2f      	ldr	r2, [pc, #188]	; (8009324 <SIMCOM_DMA_IrqHandler+0x290>)
 8009268:	4293      	cmp	r3, r2
 800926a:	d050      	beq.n	800930e <SIMCOM_DMA_IrqHandler+0x27a>
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	4a2d      	ldr	r2, [pc, #180]	; (8009328 <SIMCOM_DMA_IrqHandler+0x294>)
 8009272:	4293      	cmp	r3, r2
 8009274:	d049      	beq.n	800930a <SIMCOM_DMA_IrqHandler+0x276>
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	4a2c      	ldr	r2, [pc, #176]	; (800932c <SIMCOM_DMA_IrqHandler+0x298>)
 800927c:	4293      	cmp	r3, r2
 800927e:	d042      	beq.n	8009306 <SIMCOM_DMA_IrqHandler+0x272>
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	4a2a      	ldr	r2, [pc, #168]	; (8009330 <SIMCOM_DMA_IrqHandler+0x29c>)
 8009286:	4293      	cmp	r3, r2
 8009288:	d03a      	beq.n	8009300 <SIMCOM_DMA_IrqHandler+0x26c>
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	4a29      	ldr	r2, [pc, #164]	; (8009334 <SIMCOM_DMA_IrqHandler+0x2a0>)
 8009290:	4293      	cmp	r3, r2
 8009292:	d032      	beq.n	80092fa <SIMCOM_DMA_IrqHandler+0x266>
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	4a27      	ldr	r2, [pc, #156]	; (8009338 <SIMCOM_DMA_IrqHandler+0x2a4>)
 800929a:	4293      	cmp	r3, r2
 800929c:	d02a      	beq.n	80092f4 <SIMCOM_DMA_IrqHandler+0x260>
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	4a26      	ldr	r2, [pc, #152]	; (800933c <SIMCOM_DMA_IrqHandler+0x2a8>)
 80092a4:	4293      	cmp	r3, r2
 80092a6:	d022      	beq.n	80092ee <SIMCOM_DMA_IrqHandler+0x25a>
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	4a24      	ldr	r2, [pc, #144]	; (8009340 <SIMCOM_DMA_IrqHandler+0x2ac>)
 80092ae:	4293      	cmp	r3, r2
 80092b0:	d01a      	beq.n	80092e8 <SIMCOM_DMA_IrqHandler+0x254>
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	4a23      	ldr	r2, [pc, #140]	; (8009344 <SIMCOM_DMA_IrqHandler+0x2b0>)
 80092b8:	4293      	cmp	r3, r2
 80092ba:	d012      	beq.n	80092e2 <SIMCOM_DMA_IrqHandler+0x24e>
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	4a21      	ldr	r2, [pc, #132]	; (8009348 <SIMCOM_DMA_IrqHandler+0x2b4>)
 80092c2:	4293      	cmp	r3, r2
 80092c4:	d00a      	beq.n	80092dc <SIMCOM_DMA_IrqHandler+0x248>
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	4a20      	ldr	r2, [pc, #128]	; (800934c <SIMCOM_DMA_IrqHandler+0x2b8>)
 80092cc:	4293      	cmp	r3, r2
 80092ce:	d102      	bne.n	80092d6 <SIMCOM_DMA_IrqHandler+0x242>
 80092d0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80092d4:	e01e      	b.n	8009314 <SIMCOM_DMA_IrqHandler+0x280>
 80092d6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80092da:	e01b      	b.n	8009314 <SIMCOM_DMA_IrqHandler+0x280>
 80092dc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80092e0:	e018      	b.n	8009314 <SIMCOM_DMA_IrqHandler+0x280>
 80092e2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80092e6:	e015      	b.n	8009314 <SIMCOM_DMA_IrqHandler+0x280>
 80092e8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80092ec:	e012      	b.n	8009314 <SIMCOM_DMA_IrqHandler+0x280>
 80092ee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80092f2:	e00f      	b.n	8009314 <SIMCOM_DMA_IrqHandler+0x280>
 80092f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80092f8:	e00c      	b.n	8009314 <SIMCOM_DMA_IrqHandler+0x280>
 80092fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80092fe:	e009      	b.n	8009314 <SIMCOM_DMA_IrqHandler+0x280>
 8009300:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009304:	e006      	b.n	8009314 <SIMCOM_DMA_IrqHandler+0x280>
 8009306:	2320      	movs	r3, #32
 8009308:	e004      	b.n	8009314 <SIMCOM_DMA_IrqHandler+0x280>
 800930a:	2320      	movs	r3, #32
 800930c:	e002      	b.n	8009314 <SIMCOM_DMA_IrqHandler+0x280>
 800930e:	2320      	movs	r3, #32
 8009310:	e000      	b.n	8009314 <SIMCOM_DMA_IrqHandler+0x280>
 8009312:	2320      	movs	r3, #32
 8009314:	4a11      	ldr	r2, [pc, #68]	; (800935c <SIMCOM_DMA_IrqHandler+0x2c8>)
 8009316:	60d3      	str	r3, [r2, #12]
 8009318:	e082      	b.n	8009420 <SIMCOM_DMA_IrqHandler+0x38c>
 800931a:	bf00      	nop
 800931c:	40026458 	.word	0x40026458
 8009320:	40026010 	.word	0x40026010
 8009324:	40026410 	.word	0x40026410
 8009328:	40026070 	.word	0x40026070
 800932c:	40026470 	.word	0x40026470
 8009330:	40026028 	.word	0x40026028
 8009334:	40026428 	.word	0x40026428
 8009338:	40026088 	.word	0x40026088
 800933c:	40026488 	.word	0x40026488
 8009340:	40026040 	.word	0x40026040
 8009344:	40026440 	.word	0x40026440
 8009348:	400260a0 	.word	0x400260a0
 800934c:	400264a0 	.word	0x400264a0
 8009350:	40026400 	.word	0x40026400
 8009354:	400260b8 	.word	0x400260b8
 8009358:	40026058 	.word	0x40026058
 800935c:	40026000 	.word	0x40026000
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	4a5c      	ldr	r2, [pc, #368]	; (80094d8 <SIMCOM_DMA_IrqHandler+0x444>)
 8009366:	4293      	cmp	r3, r2
 8009368:	d057      	beq.n	800941a <SIMCOM_DMA_IrqHandler+0x386>
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	4a5b      	ldr	r2, [pc, #364]	; (80094dc <SIMCOM_DMA_IrqHandler+0x448>)
 8009370:	4293      	cmp	r3, r2
 8009372:	d050      	beq.n	8009416 <SIMCOM_DMA_IrqHandler+0x382>
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	4a59      	ldr	r2, [pc, #356]	; (80094e0 <SIMCOM_DMA_IrqHandler+0x44c>)
 800937a:	4293      	cmp	r3, r2
 800937c:	d049      	beq.n	8009412 <SIMCOM_DMA_IrqHandler+0x37e>
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	4a58      	ldr	r2, [pc, #352]	; (80094e4 <SIMCOM_DMA_IrqHandler+0x450>)
 8009384:	4293      	cmp	r3, r2
 8009386:	d042      	beq.n	800940e <SIMCOM_DMA_IrqHandler+0x37a>
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	4a56      	ldr	r2, [pc, #344]	; (80094e8 <SIMCOM_DMA_IrqHandler+0x454>)
 800938e:	4293      	cmp	r3, r2
 8009390:	d03a      	beq.n	8009408 <SIMCOM_DMA_IrqHandler+0x374>
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	4a55      	ldr	r2, [pc, #340]	; (80094ec <SIMCOM_DMA_IrqHandler+0x458>)
 8009398:	4293      	cmp	r3, r2
 800939a:	d032      	beq.n	8009402 <SIMCOM_DMA_IrqHandler+0x36e>
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	4a53      	ldr	r2, [pc, #332]	; (80094f0 <SIMCOM_DMA_IrqHandler+0x45c>)
 80093a2:	4293      	cmp	r3, r2
 80093a4:	d02a      	beq.n	80093fc <SIMCOM_DMA_IrqHandler+0x368>
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	4a52      	ldr	r2, [pc, #328]	; (80094f4 <SIMCOM_DMA_IrqHandler+0x460>)
 80093ac:	4293      	cmp	r3, r2
 80093ae:	d022      	beq.n	80093f6 <SIMCOM_DMA_IrqHandler+0x362>
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	4a50      	ldr	r2, [pc, #320]	; (80094f8 <SIMCOM_DMA_IrqHandler+0x464>)
 80093b6:	4293      	cmp	r3, r2
 80093b8:	d01a      	beq.n	80093f0 <SIMCOM_DMA_IrqHandler+0x35c>
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	4a4f      	ldr	r2, [pc, #316]	; (80094fc <SIMCOM_DMA_IrqHandler+0x468>)
 80093c0:	4293      	cmp	r3, r2
 80093c2:	d012      	beq.n	80093ea <SIMCOM_DMA_IrqHandler+0x356>
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	4a4d      	ldr	r2, [pc, #308]	; (8009500 <SIMCOM_DMA_IrqHandler+0x46c>)
 80093ca:	4293      	cmp	r3, r2
 80093cc:	d00a      	beq.n	80093e4 <SIMCOM_DMA_IrqHandler+0x350>
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	4a4c      	ldr	r2, [pc, #304]	; (8009504 <SIMCOM_DMA_IrqHandler+0x470>)
 80093d4:	4293      	cmp	r3, r2
 80093d6:	d102      	bne.n	80093de <SIMCOM_DMA_IrqHandler+0x34a>
 80093d8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80093dc:	e01e      	b.n	800941c <SIMCOM_DMA_IrqHandler+0x388>
 80093de:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80093e2:	e01b      	b.n	800941c <SIMCOM_DMA_IrqHandler+0x388>
 80093e4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80093e8:	e018      	b.n	800941c <SIMCOM_DMA_IrqHandler+0x388>
 80093ea:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80093ee:	e015      	b.n	800941c <SIMCOM_DMA_IrqHandler+0x388>
 80093f0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80093f4:	e012      	b.n	800941c <SIMCOM_DMA_IrqHandler+0x388>
 80093f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80093fa:	e00f      	b.n	800941c <SIMCOM_DMA_IrqHandler+0x388>
 80093fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009400:	e00c      	b.n	800941c <SIMCOM_DMA_IrqHandler+0x388>
 8009402:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009406:	e009      	b.n	800941c <SIMCOM_DMA_IrqHandler+0x388>
 8009408:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800940c:	e006      	b.n	800941c <SIMCOM_DMA_IrqHandler+0x388>
 800940e:	2320      	movs	r3, #32
 8009410:	e004      	b.n	800941c <SIMCOM_DMA_IrqHandler+0x388>
 8009412:	2320      	movs	r3, #32
 8009414:	e002      	b.n	800941c <SIMCOM_DMA_IrqHandler+0x388>
 8009416:	2320      	movs	r3, #32
 8009418:	e000      	b.n	800941c <SIMCOM_DMA_IrqHandler+0x388>
 800941a:	2320      	movs	r3, #32
 800941c:	4a3a      	ldr	r2, [pc, #232]	; (8009508 <SIMCOM_DMA_IrqHandler+0x474>)
 800941e:	6093      	str	r3, [r2, #8]

		/* simcom_write received data for UART main buffer for manipulation later */
		simcom_ptr = (uint8_t *) SIMCOM_DMA_RX_Buffer;
 8009420:	4b3a      	ldr	r3, [pc, #232]	; (800950c <SIMCOM_DMA_IrqHandler+0x478>)
 8009422:	4a3b      	ldr	r2, [pc, #236]	; (8009510 <SIMCOM_DMA_IrqHandler+0x47c>)
 8009424:	601a      	str	r2, [r3, #0]

		/* Get the simcom_length of the data */
		simcom_len = SIMCOM_DMA_RX_BUFFER_SIZE - hdma->Instance->NDTR;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	685b      	ldr	r3, [r3, #4]
 800942c:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8009430:	4a38      	ldr	r2, [pc, #224]	; (8009514 <SIMCOM_DMA_IrqHandler+0x480>)
 8009432:	6013      	str	r3, [r2, #0]

		/* Get number of bytes we can copy to the end of buffer */
		simcom_tocopy = SIMCOM_UART_RX_BUFFER_SIZE - simcom_write;
 8009434:	4b38      	ldr	r3, [pc, #224]	; (8009518 <SIMCOM_DMA_IrqHandler+0x484>)
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 800943c:	4a37      	ldr	r2, [pc, #220]	; (800951c <SIMCOM_DMA_IrqHandler+0x488>)
 800943e:	6013      	str	r3, [r2, #0]

		/* Check how many bytes to copy */
		if (simcom_tocopy > simcom_len)
 8009440:	4b36      	ldr	r3, [pc, #216]	; (800951c <SIMCOM_DMA_IrqHandler+0x488>)
 8009442:	681a      	ldr	r2, [r3, #0]
 8009444:	4b33      	ldr	r3, [pc, #204]	; (8009514 <SIMCOM_DMA_IrqHandler+0x480>)
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	429a      	cmp	r2, r3
 800944a:	d903      	bls.n	8009454 <SIMCOM_DMA_IrqHandler+0x3c0>
		{
			simcom_tocopy = simcom_len;
 800944c:	4b31      	ldr	r3, [pc, #196]	; (8009514 <SIMCOM_DMA_IrqHandler+0x480>)
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	4a32      	ldr	r2, [pc, #200]	; (800951c <SIMCOM_DMA_IrqHandler+0x488>)
 8009452:	6013      	str	r3, [r2, #0]
		}

		/* Copy first part */
		memcpy(&SIMCOM_UART_RX_Buffer[simcom_write], simcom_ptr, simcom_tocopy);
 8009454:	4b30      	ldr	r3, [pc, #192]	; (8009518 <SIMCOM_DMA_IrqHandler+0x484>)
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	4a31      	ldr	r2, [pc, #196]	; (8009520 <SIMCOM_DMA_IrqHandler+0x48c>)
 800945a:	1898      	adds	r0, r3, r2
 800945c:	4b2b      	ldr	r3, [pc, #172]	; (800950c <SIMCOM_DMA_IrqHandler+0x478>)
 800945e:	6819      	ldr	r1, [r3, #0]
 8009460:	4b2e      	ldr	r3, [pc, #184]	; (800951c <SIMCOM_DMA_IrqHandler+0x488>)
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	461a      	mov	r2, r3
 8009466:	f005 f871 	bl	800e54c <memcpy>

		/* Correct values for remaining data */
		simcom_write += simcom_tocopy;
 800946a:	4b2b      	ldr	r3, [pc, #172]	; (8009518 <SIMCOM_DMA_IrqHandler+0x484>)
 800946c:	681a      	ldr	r2, [r3, #0]
 800946e:	4b2b      	ldr	r3, [pc, #172]	; (800951c <SIMCOM_DMA_IrqHandler+0x488>)
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	4413      	add	r3, r2
 8009474:	4a28      	ldr	r2, [pc, #160]	; (8009518 <SIMCOM_DMA_IrqHandler+0x484>)
 8009476:	6013      	str	r3, [r2, #0]
		simcom_len -= simcom_tocopy;
 8009478:	4b26      	ldr	r3, [pc, #152]	; (8009514 <SIMCOM_DMA_IrqHandler+0x480>)
 800947a:	681a      	ldr	r2, [r3, #0]
 800947c:	4b27      	ldr	r3, [pc, #156]	; (800951c <SIMCOM_DMA_IrqHandler+0x488>)
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	1ad3      	subs	r3, r2, r3
 8009482:	4a24      	ldr	r2, [pc, #144]	; (8009514 <SIMCOM_DMA_IrqHandler+0x480>)
 8009484:	6013      	str	r3, [r2, #0]
		simcom_ptr += simcom_tocopy;
 8009486:	4b21      	ldr	r3, [pc, #132]	; (800950c <SIMCOM_DMA_IrqHandler+0x478>)
 8009488:	681a      	ldr	r2, [r3, #0]
 800948a:	4b24      	ldr	r3, [pc, #144]	; (800951c <SIMCOM_DMA_IrqHandler+0x488>)
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	4413      	add	r3, r2
 8009490:	4a1e      	ldr	r2, [pc, #120]	; (800950c <SIMCOM_DMA_IrqHandler+0x478>)
 8009492:	6013      	str	r3, [r2, #0]

		/* If still data to simcom_write for beginning of buffer */
		if (simcom_len)
 8009494:	4b1f      	ldr	r3, [pc, #124]	; (8009514 <SIMCOM_DMA_IrqHandler+0x480>)
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d00b      	beq.n	80094b4 <SIMCOM_DMA_IrqHandler+0x420>
		{
			/* Don't care if we override Read pointer now */
			memcpy(&SIMCOM_UART_RX_Buffer[0], simcom_ptr, simcom_len);
 800949c:	4b1b      	ldr	r3, [pc, #108]	; (800950c <SIMCOM_DMA_IrqHandler+0x478>)
 800949e:	6819      	ldr	r1, [r3, #0]
 80094a0:	4b1c      	ldr	r3, [pc, #112]	; (8009514 <SIMCOM_DMA_IrqHandler+0x480>)
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	461a      	mov	r2, r3
 80094a6:	481e      	ldr	r0, [pc, #120]	; (8009520 <SIMCOM_DMA_IrqHandler+0x48c>)
 80094a8:	f005 f850 	bl	800e54c <memcpy>
			simcom_write = simcom_len;
 80094ac:	4b19      	ldr	r3, [pc, #100]	; (8009514 <SIMCOM_DMA_IrqHandler+0x480>)
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	4a19      	ldr	r2, [pc, #100]	; (8009518 <SIMCOM_DMA_IrqHandler+0x484>)
 80094b2:	6013      	str	r3, [r2, #0]
		}

		// set null at the end
		SIMCOM_UART_RX_Buffer[simcom_write] = '\0';
 80094b4:	4b18      	ldr	r3, [pc, #96]	; (8009518 <SIMCOM_DMA_IrqHandler+0x484>)
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	4a19      	ldr	r2, [pc, #100]	; (8009520 <SIMCOM_DMA_IrqHandler+0x48c>)
 80094ba:	2100      	movs	r1, #0
 80094bc:	54d1      	strb	r1, [r2, r3]

		/* Start DMA transfer again */
		hdma->Instance->CR |= DMA_SxCR_EN;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	681a      	ldr	r2, [r3, #0]
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	f042 0201 	orr.w	r2, r2, #1
 80094cc:	601a      	str	r2, [r3, #0]
	}
}
 80094ce:	bf00      	nop
 80094d0:	3708      	adds	r7, #8
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bd80      	pop	{r7, pc}
 80094d6:	bf00      	nop
 80094d8:	40026010 	.word	0x40026010
 80094dc:	40026410 	.word	0x40026410
 80094e0:	40026070 	.word	0x40026070
 80094e4:	40026470 	.word	0x40026470
 80094e8:	40026028 	.word	0x40026028
 80094ec:	40026428 	.word	0x40026428
 80094f0:	40026088 	.word	0x40026088
 80094f4:	40026488 	.word	0x40026488
 80094f8:	40026040 	.word	0x40026040
 80094fc:	40026440 	.word	0x40026440
 8009500:	400260a0 	.word	0x400260a0
 8009504:	400264a0 	.word	0x400264a0
 8009508:	40026000 	.word	0x40026000
 800950c:	20006c00 	.word	0x20006c00
 8009510:	20006c04 	.word	0x20006c04
 8009514:	20006bfc 	.word	0x20006bfc
 8009518:	200067f4 	.word	0x200067f4
 800951c:	20006bf8 	.word	0x20006bf8
 8009520:	200067f8 	.word	0x200067f8

08009524 <SIMCOM_DMA_Init>:

void SIMCOM_DMA_Init(void){
 8009524:	b580      	push	{r7, lr}
 8009526:	af00      	add	r7, sp, #0
	__HAL_UART_ENABLE_IT(&huart3, UART_IT_IDLE);      // enable idle line interrupt
 8009528:	4b0f      	ldr	r3, [pc, #60]	; (8009568 <SIMCOM_DMA_Init+0x44>)
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	68da      	ldr	r2, [r3, #12]
 800952e:	4b0e      	ldr	r3, [pc, #56]	; (8009568 <SIMCOM_DMA_Init+0x44>)
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	f042 0210 	orr.w	r2, r2, #16
 8009536:	60da      	str	r2, [r3, #12]
	__HAL_DMA_ENABLE_IT(&hdma_usart3_rx, DMA_IT_TC);  // enable DMA Tx cplt interrupt
 8009538:	4b0c      	ldr	r3, [pc, #48]	; (800956c <SIMCOM_DMA_Init+0x48>)
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	681a      	ldr	r2, [r3, #0]
 800953e:	4b0b      	ldr	r3, [pc, #44]	; (800956c <SIMCOM_DMA_Init+0x48>)
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	f042 0210 	orr.w	r2, r2, #16
 8009546:	601a      	str	r2, [r3, #0]
	__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT); // disable half complete interrupt
 8009548:	4b08      	ldr	r3, [pc, #32]	; (800956c <SIMCOM_DMA_Init+0x48>)
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	681a      	ldr	r2, [r3, #0]
 800954e:	4b07      	ldr	r3, [pc, #28]	; (800956c <SIMCOM_DMA_Init+0x48>)
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	f022 0208 	bic.w	r2, r2, #8
 8009556:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(&huart3, (uint8_t *) SIMCOM_DMA_RX_Buffer, SIMCOM_DMA_RX_BUFFER_SIZE);
 8009558:	2280      	movs	r2, #128	; 0x80
 800955a:	4905      	ldr	r1, [pc, #20]	; (8009570 <SIMCOM_DMA_Init+0x4c>)
 800955c:	4802      	ldr	r0, [pc, #8]	; (8009568 <SIMCOM_DMA_Init+0x44>)
 800955e:	f7fb fb97 	bl	8004c90 <HAL_UART_Receive_DMA>
}
 8009562:	bf00      	nop
 8009564:	bd80      	pop	{r7, pc}
 8009566:	bf00      	nop
 8009568:	200082bc 	.word	0x200082bc
 800956c:	2000825c 	.word	0x2000825c
 8009570:	20006c04 	.word	0x20006c04

08009574 <SIMCOM_Reset_Buffer>:

void SIMCOM_Reset_Buffer(void){
 8009574:	b580      	push	{r7, lr}
 8009576:	af00      	add	r7, sp, #0
	// clear rx buffer
	memset(SIMCOM_UART_RX_Buffer, 0, sizeof(SIMCOM_UART_RX_Buffer));
 8009578:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800957c:	2100      	movs	r1, #0
 800957e:	4805      	ldr	r0, [pc, #20]	; (8009594 <SIMCOM_Reset_Buffer+0x20>)
 8009580:	f004 ffef 	bl	800e562 <memset>
	// wail until clear is done
	osDelay(50);
 8009584:	2032      	movs	r0, #50	; 0x32
 8009586:	f7fc f9cc 	bl	8005922 <osDelay>
	// set index back to first
	simcom_write = 0;
 800958a:	4b03      	ldr	r3, [pc, #12]	; (8009598 <SIMCOM_Reset_Buffer+0x24>)
 800958c:	2200      	movs	r2, #0
 800958e:	601a      	str	r2, [r3, #0]
	// set null at the end
	//	SIMCOM_UART_RX_Buffer[simcom_write] = '\0';
}
 8009590:	bf00      	nop
 8009592:	bd80      	pop	{r7, pc}
 8009594:	200067f8 	.word	0x200067f8
 8009598:	200067f4 	.word	0x200067f4

0800959c <SIMCOM_Transmit>:

void SIMCOM_Transmit(char *pData, uint16_t Size){
 800959c:	b580      	push	{r7, lr}
 800959e:	b082      	sub	sp, #8
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
 80095a4:	460b      	mov	r3, r1
 80095a6:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart3, (uint8_t *) pData, Size, HAL_MAX_DELAY);
 80095a8:	887a      	ldrh	r2, [r7, #2]
 80095aa:	f04f 33ff 	mov.w	r3, #4294967295
 80095ae:	6879      	ldr	r1, [r7, #4]
 80095b0:	4803      	ldr	r0, [pc, #12]	; (80095c0 <SIMCOM_Transmit+0x24>)
 80095b2:	f7fb fad4 	bl	8004b5e <HAL_UART_Transmit>
}
 80095b6:	bf00      	nop
 80095b8:	3708      	adds	r7, #8
 80095ba:	46bd      	mov	sp, r7
 80095bc:	bd80      	pop	{r7, pc}
 80095be:	bf00      	nop
 80095c0:	200082bc 	.word	0x200082bc

080095c4 <UBLOX_USART_IrqHandler>:
char UBLOX_UART_RX_Buffer[UBLOX_UART_RX_BUFFER_SIZE];
size_t ublox_write, ublox_len, ublox_tocopy;
uint8_t *ublox_ptr;

void UBLOX_USART_IrqHandler(UART_HandleTypeDef *huart, DMA_HandleTypeDef *hdma)
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b084      	sub	sp, #16
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
 80095cc:	6039      	str	r1, [r7, #0]
	if (huart->Instance->SR & UART_FLAG_IDLE) /* if Idle flag is set */
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	f003 0310 	and.w	r3, r3, #16
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d016      	beq.n	800960a <UBLOX_USART_IrqHandler+0x46>
	{
		__HAL_UART_CLEAR_IDLEFLAG(huart);	 /* Clear idle flag */
 80095dc:	2300      	movs	r3, #0
 80095de:	60fb      	str	r3, [r7, #12]
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	60fb      	str	r3, [r7, #12]
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	685b      	ldr	r3, [r3, #4]
 80095ee:	60fb      	str	r3, [r7, #12]
 80095f0:	68fb      	ldr	r3, [r7, #12]
		__HAL_DMA_DISABLE(hdma);			 /* Disabling DMA will force transfer complete interrupt if enabled */
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	681a      	ldr	r2, [r3, #0]
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	f022 0201 	bic.w	r2, r2, #1
 8009600:	601a      	str	r2, [r3, #0]
		UBLOX_DMA_IrqHandler(hdma, huart);
 8009602:	6879      	ldr	r1, [r7, #4]
 8009604:	6838      	ldr	r0, [r7, #0]
 8009606:	f000 f805 	bl	8009614 <UBLOX_DMA_IrqHandler>
	}
}
 800960a:	bf00      	nop
 800960c:	3710      	adds	r7, #16
 800960e:	46bd      	mov	sp, r7
 8009610:	bd80      	pop	{r7, pc}
	...

08009614 <UBLOX_DMA_IrqHandler>:

void UBLOX_DMA_IrqHandler(DMA_HandleTypeDef *hdma, UART_HandleTypeDef *huart)
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b082      	sub	sp, #8
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
 800961c:	6039      	str	r1, [r7, #0]
	if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET) // if the source is TC
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	f003 0310 	and.w	r3, r3, #16
 8009628:	2b00      	cmp	r3, #0
 800962a:	f000 8216 	beq.w	8009a5a <UBLOX_DMA_IrqHandler+0x446>
	{
		/* Clear the transfer complete flag */
		__HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	461a      	mov	r2, r3
 8009634:	4b99      	ldr	r3, [pc, #612]	; (800989c <UBLOX_DMA_IrqHandler+0x288>)
 8009636:	429a      	cmp	r2, r3
 8009638:	d960      	bls.n	80096fc <UBLOX_DMA_IrqHandler+0xe8>
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	4a98      	ldr	r2, [pc, #608]	; (80098a0 <UBLOX_DMA_IrqHandler+0x28c>)
 8009640:	4293      	cmp	r3, r2
 8009642:	d057      	beq.n	80096f4 <UBLOX_DMA_IrqHandler+0xe0>
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	4a96      	ldr	r2, [pc, #600]	; (80098a4 <UBLOX_DMA_IrqHandler+0x290>)
 800964a:	4293      	cmp	r3, r2
 800964c:	d050      	beq.n	80096f0 <UBLOX_DMA_IrqHandler+0xdc>
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	4a95      	ldr	r2, [pc, #596]	; (80098a8 <UBLOX_DMA_IrqHandler+0x294>)
 8009654:	4293      	cmp	r3, r2
 8009656:	d049      	beq.n	80096ec <UBLOX_DMA_IrqHandler+0xd8>
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	4a93      	ldr	r2, [pc, #588]	; (80098ac <UBLOX_DMA_IrqHandler+0x298>)
 800965e:	4293      	cmp	r3, r2
 8009660:	d042      	beq.n	80096e8 <UBLOX_DMA_IrqHandler+0xd4>
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	4a92      	ldr	r2, [pc, #584]	; (80098b0 <UBLOX_DMA_IrqHandler+0x29c>)
 8009668:	4293      	cmp	r3, r2
 800966a:	d03a      	beq.n	80096e2 <UBLOX_DMA_IrqHandler+0xce>
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	4a90      	ldr	r2, [pc, #576]	; (80098b4 <UBLOX_DMA_IrqHandler+0x2a0>)
 8009672:	4293      	cmp	r3, r2
 8009674:	d032      	beq.n	80096dc <UBLOX_DMA_IrqHandler+0xc8>
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	4a8f      	ldr	r2, [pc, #572]	; (80098b8 <UBLOX_DMA_IrqHandler+0x2a4>)
 800967c:	4293      	cmp	r3, r2
 800967e:	d02a      	beq.n	80096d6 <UBLOX_DMA_IrqHandler+0xc2>
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	4a8d      	ldr	r2, [pc, #564]	; (80098bc <UBLOX_DMA_IrqHandler+0x2a8>)
 8009686:	4293      	cmp	r3, r2
 8009688:	d022      	beq.n	80096d0 <UBLOX_DMA_IrqHandler+0xbc>
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	4a8c      	ldr	r2, [pc, #560]	; (80098c0 <UBLOX_DMA_IrqHandler+0x2ac>)
 8009690:	4293      	cmp	r3, r2
 8009692:	d01a      	beq.n	80096ca <UBLOX_DMA_IrqHandler+0xb6>
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	4a8a      	ldr	r2, [pc, #552]	; (80098c4 <UBLOX_DMA_IrqHandler+0x2b0>)
 800969a:	4293      	cmp	r3, r2
 800969c:	d012      	beq.n	80096c4 <UBLOX_DMA_IrqHandler+0xb0>
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	4a89      	ldr	r2, [pc, #548]	; (80098c8 <UBLOX_DMA_IrqHandler+0x2b4>)
 80096a4:	4293      	cmp	r3, r2
 80096a6:	d00a      	beq.n	80096be <UBLOX_DMA_IrqHandler+0xaa>
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	4a87      	ldr	r2, [pc, #540]	; (80098cc <UBLOX_DMA_IrqHandler+0x2b8>)
 80096ae:	4293      	cmp	r3, r2
 80096b0:	d102      	bne.n	80096b8 <UBLOX_DMA_IrqHandler+0xa4>
 80096b2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80096b6:	e01e      	b.n	80096f6 <UBLOX_DMA_IrqHandler+0xe2>
 80096b8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80096bc:	e01b      	b.n	80096f6 <UBLOX_DMA_IrqHandler+0xe2>
 80096be:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80096c2:	e018      	b.n	80096f6 <UBLOX_DMA_IrqHandler+0xe2>
 80096c4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80096c8:	e015      	b.n	80096f6 <UBLOX_DMA_IrqHandler+0xe2>
 80096ca:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80096ce:	e012      	b.n	80096f6 <UBLOX_DMA_IrqHandler+0xe2>
 80096d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80096d4:	e00f      	b.n	80096f6 <UBLOX_DMA_IrqHandler+0xe2>
 80096d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80096da:	e00c      	b.n	80096f6 <UBLOX_DMA_IrqHandler+0xe2>
 80096dc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80096e0:	e009      	b.n	80096f6 <UBLOX_DMA_IrqHandler+0xe2>
 80096e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80096e6:	e006      	b.n	80096f6 <UBLOX_DMA_IrqHandler+0xe2>
 80096e8:	2320      	movs	r3, #32
 80096ea:	e004      	b.n	80096f6 <UBLOX_DMA_IrqHandler+0xe2>
 80096ec:	2320      	movs	r3, #32
 80096ee:	e002      	b.n	80096f6 <UBLOX_DMA_IrqHandler+0xe2>
 80096f0:	2320      	movs	r3, #32
 80096f2:	e000      	b.n	80096f6 <UBLOX_DMA_IrqHandler+0xe2>
 80096f4:	2320      	movs	r3, #32
 80096f6:	4a76      	ldr	r2, [pc, #472]	; (80098d0 <UBLOX_DMA_IrqHandler+0x2bc>)
 80096f8:	60d3      	str	r3, [r2, #12]
 80096fa:	e151      	b.n	80099a0 <UBLOX_DMA_IrqHandler+0x38c>
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	461a      	mov	r2, r3
 8009702:	4b74      	ldr	r3, [pc, #464]	; (80098d4 <UBLOX_DMA_IrqHandler+0x2c0>)
 8009704:	429a      	cmp	r2, r3
 8009706:	d960      	bls.n	80097ca <UBLOX_DMA_IrqHandler+0x1b6>
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	4a64      	ldr	r2, [pc, #400]	; (80098a0 <UBLOX_DMA_IrqHandler+0x28c>)
 800970e:	4293      	cmp	r3, r2
 8009710:	d057      	beq.n	80097c2 <UBLOX_DMA_IrqHandler+0x1ae>
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	4a63      	ldr	r2, [pc, #396]	; (80098a4 <UBLOX_DMA_IrqHandler+0x290>)
 8009718:	4293      	cmp	r3, r2
 800971a:	d050      	beq.n	80097be <UBLOX_DMA_IrqHandler+0x1aa>
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	4a61      	ldr	r2, [pc, #388]	; (80098a8 <UBLOX_DMA_IrqHandler+0x294>)
 8009722:	4293      	cmp	r3, r2
 8009724:	d049      	beq.n	80097ba <UBLOX_DMA_IrqHandler+0x1a6>
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	4a60      	ldr	r2, [pc, #384]	; (80098ac <UBLOX_DMA_IrqHandler+0x298>)
 800972c:	4293      	cmp	r3, r2
 800972e:	d042      	beq.n	80097b6 <UBLOX_DMA_IrqHandler+0x1a2>
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	4a5e      	ldr	r2, [pc, #376]	; (80098b0 <UBLOX_DMA_IrqHandler+0x29c>)
 8009736:	4293      	cmp	r3, r2
 8009738:	d03a      	beq.n	80097b0 <UBLOX_DMA_IrqHandler+0x19c>
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	4a5d      	ldr	r2, [pc, #372]	; (80098b4 <UBLOX_DMA_IrqHandler+0x2a0>)
 8009740:	4293      	cmp	r3, r2
 8009742:	d032      	beq.n	80097aa <UBLOX_DMA_IrqHandler+0x196>
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	4a5b      	ldr	r2, [pc, #364]	; (80098b8 <UBLOX_DMA_IrqHandler+0x2a4>)
 800974a:	4293      	cmp	r3, r2
 800974c:	d02a      	beq.n	80097a4 <UBLOX_DMA_IrqHandler+0x190>
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	4a5a      	ldr	r2, [pc, #360]	; (80098bc <UBLOX_DMA_IrqHandler+0x2a8>)
 8009754:	4293      	cmp	r3, r2
 8009756:	d022      	beq.n	800979e <UBLOX_DMA_IrqHandler+0x18a>
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	4a58      	ldr	r2, [pc, #352]	; (80098c0 <UBLOX_DMA_IrqHandler+0x2ac>)
 800975e:	4293      	cmp	r3, r2
 8009760:	d01a      	beq.n	8009798 <UBLOX_DMA_IrqHandler+0x184>
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	4a57      	ldr	r2, [pc, #348]	; (80098c4 <UBLOX_DMA_IrqHandler+0x2b0>)
 8009768:	4293      	cmp	r3, r2
 800976a:	d012      	beq.n	8009792 <UBLOX_DMA_IrqHandler+0x17e>
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	4a55      	ldr	r2, [pc, #340]	; (80098c8 <UBLOX_DMA_IrqHandler+0x2b4>)
 8009772:	4293      	cmp	r3, r2
 8009774:	d00a      	beq.n	800978c <UBLOX_DMA_IrqHandler+0x178>
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	4a54      	ldr	r2, [pc, #336]	; (80098cc <UBLOX_DMA_IrqHandler+0x2b8>)
 800977c:	4293      	cmp	r3, r2
 800977e:	d102      	bne.n	8009786 <UBLOX_DMA_IrqHandler+0x172>
 8009780:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009784:	e01e      	b.n	80097c4 <UBLOX_DMA_IrqHandler+0x1b0>
 8009786:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800978a:	e01b      	b.n	80097c4 <UBLOX_DMA_IrqHandler+0x1b0>
 800978c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009790:	e018      	b.n	80097c4 <UBLOX_DMA_IrqHandler+0x1b0>
 8009792:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009796:	e015      	b.n	80097c4 <UBLOX_DMA_IrqHandler+0x1b0>
 8009798:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800979c:	e012      	b.n	80097c4 <UBLOX_DMA_IrqHandler+0x1b0>
 800979e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80097a2:	e00f      	b.n	80097c4 <UBLOX_DMA_IrqHandler+0x1b0>
 80097a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80097a8:	e00c      	b.n	80097c4 <UBLOX_DMA_IrqHandler+0x1b0>
 80097aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80097ae:	e009      	b.n	80097c4 <UBLOX_DMA_IrqHandler+0x1b0>
 80097b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80097b4:	e006      	b.n	80097c4 <UBLOX_DMA_IrqHandler+0x1b0>
 80097b6:	2320      	movs	r3, #32
 80097b8:	e004      	b.n	80097c4 <UBLOX_DMA_IrqHandler+0x1b0>
 80097ba:	2320      	movs	r3, #32
 80097bc:	e002      	b.n	80097c4 <UBLOX_DMA_IrqHandler+0x1b0>
 80097be:	2320      	movs	r3, #32
 80097c0:	e000      	b.n	80097c4 <UBLOX_DMA_IrqHandler+0x1b0>
 80097c2:	2320      	movs	r3, #32
 80097c4:	4a42      	ldr	r2, [pc, #264]	; (80098d0 <UBLOX_DMA_IrqHandler+0x2bc>)
 80097c6:	6093      	str	r3, [r2, #8]
 80097c8:	e0ea      	b.n	80099a0 <UBLOX_DMA_IrqHandler+0x38c>
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	461a      	mov	r2, r3
 80097d0:	4b41      	ldr	r3, [pc, #260]	; (80098d8 <UBLOX_DMA_IrqHandler+0x2c4>)
 80097d2:	429a      	cmp	r2, r3
 80097d4:	f240 8084 	bls.w	80098e0 <UBLOX_DMA_IrqHandler+0x2cc>
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	4a30      	ldr	r2, [pc, #192]	; (80098a0 <UBLOX_DMA_IrqHandler+0x28c>)
 80097de:	4293      	cmp	r3, r2
 80097e0:	d057      	beq.n	8009892 <UBLOX_DMA_IrqHandler+0x27e>
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	4a2f      	ldr	r2, [pc, #188]	; (80098a4 <UBLOX_DMA_IrqHandler+0x290>)
 80097e8:	4293      	cmp	r3, r2
 80097ea:	d050      	beq.n	800988e <UBLOX_DMA_IrqHandler+0x27a>
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	4a2d      	ldr	r2, [pc, #180]	; (80098a8 <UBLOX_DMA_IrqHandler+0x294>)
 80097f2:	4293      	cmp	r3, r2
 80097f4:	d049      	beq.n	800988a <UBLOX_DMA_IrqHandler+0x276>
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	4a2c      	ldr	r2, [pc, #176]	; (80098ac <UBLOX_DMA_IrqHandler+0x298>)
 80097fc:	4293      	cmp	r3, r2
 80097fe:	d042      	beq.n	8009886 <UBLOX_DMA_IrqHandler+0x272>
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	4a2a      	ldr	r2, [pc, #168]	; (80098b0 <UBLOX_DMA_IrqHandler+0x29c>)
 8009806:	4293      	cmp	r3, r2
 8009808:	d03a      	beq.n	8009880 <UBLOX_DMA_IrqHandler+0x26c>
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	4a29      	ldr	r2, [pc, #164]	; (80098b4 <UBLOX_DMA_IrqHandler+0x2a0>)
 8009810:	4293      	cmp	r3, r2
 8009812:	d032      	beq.n	800987a <UBLOX_DMA_IrqHandler+0x266>
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	4a27      	ldr	r2, [pc, #156]	; (80098b8 <UBLOX_DMA_IrqHandler+0x2a4>)
 800981a:	4293      	cmp	r3, r2
 800981c:	d02a      	beq.n	8009874 <UBLOX_DMA_IrqHandler+0x260>
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	4a26      	ldr	r2, [pc, #152]	; (80098bc <UBLOX_DMA_IrqHandler+0x2a8>)
 8009824:	4293      	cmp	r3, r2
 8009826:	d022      	beq.n	800986e <UBLOX_DMA_IrqHandler+0x25a>
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	4a24      	ldr	r2, [pc, #144]	; (80098c0 <UBLOX_DMA_IrqHandler+0x2ac>)
 800982e:	4293      	cmp	r3, r2
 8009830:	d01a      	beq.n	8009868 <UBLOX_DMA_IrqHandler+0x254>
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	4a23      	ldr	r2, [pc, #140]	; (80098c4 <UBLOX_DMA_IrqHandler+0x2b0>)
 8009838:	4293      	cmp	r3, r2
 800983a:	d012      	beq.n	8009862 <UBLOX_DMA_IrqHandler+0x24e>
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	4a21      	ldr	r2, [pc, #132]	; (80098c8 <UBLOX_DMA_IrqHandler+0x2b4>)
 8009842:	4293      	cmp	r3, r2
 8009844:	d00a      	beq.n	800985c <UBLOX_DMA_IrqHandler+0x248>
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	4a20      	ldr	r2, [pc, #128]	; (80098cc <UBLOX_DMA_IrqHandler+0x2b8>)
 800984c:	4293      	cmp	r3, r2
 800984e:	d102      	bne.n	8009856 <UBLOX_DMA_IrqHandler+0x242>
 8009850:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009854:	e01e      	b.n	8009894 <UBLOX_DMA_IrqHandler+0x280>
 8009856:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800985a:	e01b      	b.n	8009894 <UBLOX_DMA_IrqHandler+0x280>
 800985c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009860:	e018      	b.n	8009894 <UBLOX_DMA_IrqHandler+0x280>
 8009862:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009866:	e015      	b.n	8009894 <UBLOX_DMA_IrqHandler+0x280>
 8009868:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800986c:	e012      	b.n	8009894 <UBLOX_DMA_IrqHandler+0x280>
 800986e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009872:	e00f      	b.n	8009894 <UBLOX_DMA_IrqHandler+0x280>
 8009874:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009878:	e00c      	b.n	8009894 <UBLOX_DMA_IrqHandler+0x280>
 800987a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800987e:	e009      	b.n	8009894 <UBLOX_DMA_IrqHandler+0x280>
 8009880:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009884:	e006      	b.n	8009894 <UBLOX_DMA_IrqHandler+0x280>
 8009886:	2320      	movs	r3, #32
 8009888:	e004      	b.n	8009894 <UBLOX_DMA_IrqHandler+0x280>
 800988a:	2320      	movs	r3, #32
 800988c:	e002      	b.n	8009894 <UBLOX_DMA_IrqHandler+0x280>
 800988e:	2320      	movs	r3, #32
 8009890:	e000      	b.n	8009894 <UBLOX_DMA_IrqHandler+0x280>
 8009892:	2320      	movs	r3, #32
 8009894:	4a11      	ldr	r2, [pc, #68]	; (80098dc <UBLOX_DMA_IrqHandler+0x2c8>)
 8009896:	60d3      	str	r3, [r2, #12]
 8009898:	e082      	b.n	80099a0 <UBLOX_DMA_IrqHandler+0x38c>
 800989a:	bf00      	nop
 800989c:	40026458 	.word	0x40026458
 80098a0:	40026010 	.word	0x40026010
 80098a4:	40026410 	.word	0x40026410
 80098a8:	40026070 	.word	0x40026070
 80098ac:	40026470 	.word	0x40026470
 80098b0:	40026028 	.word	0x40026028
 80098b4:	40026428 	.word	0x40026428
 80098b8:	40026088 	.word	0x40026088
 80098bc:	40026488 	.word	0x40026488
 80098c0:	40026040 	.word	0x40026040
 80098c4:	40026440 	.word	0x40026440
 80098c8:	400260a0 	.word	0x400260a0
 80098cc:	400264a0 	.word	0x400264a0
 80098d0:	40026400 	.word	0x40026400
 80098d4:	400260b8 	.word	0x400260b8
 80098d8:	40026058 	.word	0x40026058
 80098dc:	40026000 	.word	0x40026000
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	4a5f      	ldr	r2, [pc, #380]	; (8009a64 <UBLOX_DMA_IrqHandler+0x450>)
 80098e6:	4293      	cmp	r3, r2
 80098e8:	d057      	beq.n	800999a <UBLOX_DMA_IrqHandler+0x386>
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	4a5e      	ldr	r2, [pc, #376]	; (8009a68 <UBLOX_DMA_IrqHandler+0x454>)
 80098f0:	4293      	cmp	r3, r2
 80098f2:	d050      	beq.n	8009996 <UBLOX_DMA_IrqHandler+0x382>
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	4a5c      	ldr	r2, [pc, #368]	; (8009a6c <UBLOX_DMA_IrqHandler+0x458>)
 80098fa:	4293      	cmp	r3, r2
 80098fc:	d049      	beq.n	8009992 <UBLOX_DMA_IrqHandler+0x37e>
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	4a5b      	ldr	r2, [pc, #364]	; (8009a70 <UBLOX_DMA_IrqHandler+0x45c>)
 8009904:	4293      	cmp	r3, r2
 8009906:	d042      	beq.n	800998e <UBLOX_DMA_IrqHandler+0x37a>
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	4a59      	ldr	r2, [pc, #356]	; (8009a74 <UBLOX_DMA_IrqHandler+0x460>)
 800990e:	4293      	cmp	r3, r2
 8009910:	d03a      	beq.n	8009988 <UBLOX_DMA_IrqHandler+0x374>
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	4a58      	ldr	r2, [pc, #352]	; (8009a78 <UBLOX_DMA_IrqHandler+0x464>)
 8009918:	4293      	cmp	r3, r2
 800991a:	d032      	beq.n	8009982 <UBLOX_DMA_IrqHandler+0x36e>
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	4a56      	ldr	r2, [pc, #344]	; (8009a7c <UBLOX_DMA_IrqHandler+0x468>)
 8009922:	4293      	cmp	r3, r2
 8009924:	d02a      	beq.n	800997c <UBLOX_DMA_IrqHandler+0x368>
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	4a55      	ldr	r2, [pc, #340]	; (8009a80 <UBLOX_DMA_IrqHandler+0x46c>)
 800992c:	4293      	cmp	r3, r2
 800992e:	d022      	beq.n	8009976 <UBLOX_DMA_IrqHandler+0x362>
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	4a53      	ldr	r2, [pc, #332]	; (8009a84 <UBLOX_DMA_IrqHandler+0x470>)
 8009936:	4293      	cmp	r3, r2
 8009938:	d01a      	beq.n	8009970 <UBLOX_DMA_IrqHandler+0x35c>
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	4a52      	ldr	r2, [pc, #328]	; (8009a88 <UBLOX_DMA_IrqHandler+0x474>)
 8009940:	4293      	cmp	r3, r2
 8009942:	d012      	beq.n	800996a <UBLOX_DMA_IrqHandler+0x356>
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	4a50      	ldr	r2, [pc, #320]	; (8009a8c <UBLOX_DMA_IrqHandler+0x478>)
 800994a:	4293      	cmp	r3, r2
 800994c:	d00a      	beq.n	8009964 <UBLOX_DMA_IrqHandler+0x350>
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	4a4f      	ldr	r2, [pc, #316]	; (8009a90 <UBLOX_DMA_IrqHandler+0x47c>)
 8009954:	4293      	cmp	r3, r2
 8009956:	d102      	bne.n	800995e <UBLOX_DMA_IrqHandler+0x34a>
 8009958:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800995c:	e01e      	b.n	800999c <UBLOX_DMA_IrqHandler+0x388>
 800995e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009962:	e01b      	b.n	800999c <UBLOX_DMA_IrqHandler+0x388>
 8009964:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009968:	e018      	b.n	800999c <UBLOX_DMA_IrqHandler+0x388>
 800996a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800996e:	e015      	b.n	800999c <UBLOX_DMA_IrqHandler+0x388>
 8009970:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009974:	e012      	b.n	800999c <UBLOX_DMA_IrqHandler+0x388>
 8009976:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800997a:	e00f      	b.n	800999c <UBLOX_DMA_IrqHandler+0x388>
 800997c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009980:	e00c      	b.n	800999c <UBLOX_DMA_IrqHandler+0x388>
 8009982:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009986:	e009      	b.n	800999c <UBLOX_DMA_IrqHandler+0x388>
 8009988:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800998c:	e006      	b.n	800999c <UBLOX_DMA_IrqHandler+0x388>
 800998e:	2320      	movs	r3, #32
 8009990:	e004      	b.n	800999c <UBLOX_DMA_IrqHandler+0x388>
 8009992:	2320      	movs	r3, #32
 8009994:	e002      	b.n	800999c <UBLOX_DMA_IrqHandler+0x388>
 8009996:	2320      	movs	r3, #32
 8009998:	e000      	b.n	800999c <UBLOX_DMA_IrqHandler+0x388>
 800999a:	2320      	movs	r3, #32
 800999c:	4a3d      	ldr	r2, [pc, #244]	; (8009a94 <UBLOX_DMA_IrqHandler+0x480>)
 800999e:	6093      	str	r3, [r2, #8]

		/* Get the ublox_length of the data */
		ublox_len = UBLOX_DMA_RX_BUFFER_SIZE - hdma->Instance->NDTR;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	685b      	ldr	r3, [r3, #4]
 80099a6:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 80099aa:	4a3b      	ldr	r2, [pc, #236]	; (8009a98 <UBLOX_DMA_IrqHandler+0x484>)
 80099ac:	6013      	str	r3, [r2, #0]
		/* Only process if DMA is not empty */
		if(ublox_len > 0) {
 80099ae:	4b3a      	ldr	r3, [pc, #232]	; (8009a98 <UBLOX_DMA_IrqHandler+0x484>)
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d049      	beq.n	8009a4a <UBLOX_DMA_IrqHandler+0x436>
			/* Reset the buffer */
			UBLOX_Reset_Buffer();
 80099b6:	f000 f8a3 	bl	8009b00 <UBLOX_Reset_Buffer>
			/* Get number of bytes we can copy to the end of buffer */
			ublox_tocopy = UBLOX_UART_RX_BUFFER_SIZE - ublox_write;
 80099ba:	4b38      	ldr	r3, [pc, #224]	; (8009a9c <UBLOX_DMA_IrqHandler+0x488>)
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 80099c2:	4a37      	ldr	r2, [pc, #220]	; (8009aa0 <UBLOX_DMA_IrqHandler+0x48c>)
 80099c4:	6013      	str	r3, [r2, #0]
			/* ublox_write received data for UART main buffer for manipulation later */
			ublox_ptr = (uint8_t *) UBLOX_DMA_RX_Buffer;
 80099c6:	4b37      	ldr	r3, [pc, #220]	; (8009aa4 <UBLOX_DMA_IrqHandler+0x490>)
 80099c8:	4a37      	ldr	r2, [pc, #220]	; (8009aa8 <UBLOX_DMA_IrqHandler+0x494>)
 80099ca:	601a      	str	r2, [r3, #0]
			/* Check how many bytes to copy */
			if (ublox_tocopy > ublox_len)
 80099cc:	4b34      	ldr	r3, [pc, #208]	; (8009aa0 <UBLOX_DMA_IrqHandler+0x48c>)
 80099ce:	681a      	ldr	r2, [r3, #0]
 80099d0:	4b31      	ldr	r3, [pc, #196]	; (8009a98 <UBLOX_DMA_IrqHandler+0x484>)
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	429a      	cmp	r2, r3
 80099d6:	d903      	bls.n	80099e0 <UBLOX_DMA_IrqHandler+0x3cc>
			{
				ublox_tocopy = ublox_len;
 80099d8:	4b2f      	ldr	r3, [pc, #188]	; (8009a98 <UBLOX_DMA_IrqHandler+0x484>)
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	4a30      	ldr	r2, [pc, #192]	; (8009aa0 <UBLOX_DMA_IrqHandler+0x48c>)
 80099de:	6013      	str	r3, [r2, #0]
			}
			/* Copy first part */
			memcpy(&UBLOX_UART_RX_Buffer[ublox_write], ublox_ptr, ublox_tocopy);
 80099e0:	4b2e      	ldr	r3, [pc, #184]	; (8009a9c <UBLOX_DMA_IrqHandler+0x488>)
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	4a31      	ldr	r2, [pc, #196]	; (8009aac <UBLOX_DMA_IrqHandler+0x498>)
 80099e6:	1898      	adds	r0, r3, r2
 80099e8:	4b2e      	ldr	r3, [pc, #184]	; (8009aa4 <UBLOX_DMA_IrqHandler+0x490>)
 80099ea:	6819      	ldr	r1, [r3, #0]
 80099ec:	4b2c      	ldr	r3, [pc, #176]	; (8009aa0 <UBLOX_DMA_IrqHandler+0x48c>)
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	461a      	mov	r2, r3
 80099f2:	f004 fdab 	bl	800e54c <memcpy>
			/* Correct values for remaining data */
			ublox_write += ublox_tocopy;
 80099f6:	4b29      	ldr	r3, [pc, #164]	; (8009a9c <UBLOX_DMA_IrqHandler+0x488>)
 80099f8:	681a      	ldr	r2, [r3, #0]
 80099fa:	4b29      	ldr	r3, [pc, #164]	; (8009aa0 <UBLOX_DMA_IrqHandler+0x48c>)
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	4413      	add	r3, r2
 8009a00:	4a26      	ldr	r2, [pc, #152]	; (8009a9c <UBLOX_DMA_IrqHandler+0x488>)
 8009a02:	6013      	str	r3, [r2, #0]
			ublox_len -= ublox_tocopy;
 8009a04:	4b24      	ldr	r3, [pc, #144]	; (8009a98 <UBLOX_DMA_IrqHandler+0x484>)
 8009a06:	681a      	ldr	r2, [r3, #0]
 8009a08:	4b25      	ldr	r3, [pc, #148]	; (8009aa0 <UBLOX_DMA_IrqHandler+0x48c>)
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	1ad3      	subs	r3, r2, r3
 8009a0e:	4a22      	ldr	r2, [pc, #136]	; (8009a98 <UBLOX_DMA_IrqHandler+0x484>)
 8009a10:	6013      	str	r3, [r2, #0]
			ublox_ptr += ublox_tocopy;
 8009a12:	4b24      	ldr	r3, [pc, #144]	; (8009aa4 <UBLOX_DMA_IrqHandler+0x490>)
 8009a14:	681a      	ldr	r2, [r3, #0]
 8009a16:	4b22      	ldr	r3, [pc, #136]	; (8009aa0 <UBLOX_DMA_IrqHandler+0x48c>)
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	4413      	add	r3, r2
 8009a1c:	4a21      	ldr	r2, [pc, #132]	; (8009aa4 <UBLOX_DMA_IrqHandler+0x490>)
 8009a1e:	6013      	str	r3, [r2, #0]

			/* If still data to ublox_write for beginning of buffer */
			if (ublox_len)
 8009a20:	4b1d      	ldr	r3, [pc, #116]	; (8009a98 <UBLOX_DMA_IrqHandler+0x484>)
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d00b      	beq.n	8009a40 <UBLOX_DMA_IrqHandler+0x42c>
			{
				/* Don't care if we override Read pointer now */
				memcpy(&UBLOX_UART_RX_Buffer[0], ublox_ptr, ublox_len);
 8009a28:	4b1e      	ldr	r3, [pc, #120]	; (8009aa4 <UBLOX_DMA_IrqHandler+0x490>)
 8009a2a:	6819      	ldr	r1, [r3, #0]
 8009a2c:	4b1a      	ldr	r3, [pc, #104]	; (8009a98 <UBLOX_DMA_IrqHandler+0x484>)
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	461a      	mov	r2, r3
 8009a32:	481e      	ldr	r0, [pc, #120]	; (8009aac <UBLOX_DMA_IrqHandler+0x498>)
 8009a34:	f004 fd8a 	bl	800e54c <memcpy>
				ublox_write = ublox_len;
 8009a38:	4b17      	ldr	r3, [pc, #92]	; (8009a98 <UBLOX_DMA_IrqHandler+0x484>)
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	4a17      	ldr	r2, [pc, #92]	; (8009a9c <UBLOX_DMA_IrqHandler+0x488>)
 8009a3e:	6013      	str	r3, [r2, #0]
			}
			// set null at the end
			UBLOX_UART_RX_Buffer[ublox_write] = '\0';
 8009a40:	4b16      	ldr	r3, [pc, #88]	; (8009a9c <UBLOX_DMA_IrqHandler+0x488>)
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	4a19      	ldr	r2, [pc, #100]	; (8009aac <UBLOX_DMA_IrqHandler+0x498>)
 8009a46:	2100      	movs	r1, #0
 8009a48:	54d1      	strb	r1, [r2, r3]
		}

		/* Start DMA transfer again */
		hdma->Instance->CR |= DMA_SxCR_EN;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	681a      	ldr	r2, [r3, #0]
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	f042 0201 	orr.w	r2, r2, #1
 8009a58:	601a      	str	r2, [r3, #0]
	}
}
 8009a5a:	bf00      	nop
 8009a5c:	3708      	adds	r7, #8
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	bd80      	pop	{r7, pc}
 8009a62:	bf00      	nop
 8009a64:	40026010 	.word	0x40026010
 8009a68:	40026410 	.word	0x40026410
 8009a6c:	40026070 	.word	0x40026070
 8009a70:	40026470 	.word	0x40026470
 8009a74:	40026028 	.word	0x40026028
 8009a78:	40026428 	.word	0x40026428
 8009a7c:	40026088 	.word	0x40026088
 8009a80:	40026488 	.word	0x40026488
 8009a84:	40026040 	.word	0x40026040
 8009a88:	40026440 	.word	0x40026440
 8009a8c:	400260a0 	.word	0x400260a0
 8009a90:	400264a0 	.word	0x400264a0
 8009a94:	40026000 	.word	0x40026000
 8009a98:	20006c88 	.word	0x20006c88
 8009a9c:	20006c8c 	.word	0x20006c8c
 8009aa0:	20006c90 	.word	0x20006c90
 8009aa4:	20006c84 	.word	0x20006c84
 8009aa8:	20006c94 	.word	0x20006c94
 8009aac:	20007094 	.word	0x20007094

08009ab0 <UBLOX_DMA_Init>:

void UBLOX_DMA_Init(void){
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	af00      	add	r7, sp, #0
	__HAL_UART_ENABLE_IT(&huart2, UART_IT_IDLE);      // enable idle line interrupt
 8009ab4:	4b0f      	ldr	r3, [pc, #60]	; (8009af4 <UBLOX_DMA_Init+0x44>)
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	68da      	ldr	r2, [r3, #12]
 8009aba:	4b0e      	ldr	r3, [pc, #56]	; (8009af4 <UBLOX_DMA_Init+0x44>)
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	f042 0210 	orr.w	r2, r2, #16
 8009ac2:	60da      	str	r2, [r3, #12]
	__HAL_DMA_ENABLE_IT(&hdma_usart2_rx, DMA_IT_TC);  // enable DMA Tx cplt interrupt
 8009ac4:	4b0c      	ldr	r3, [pc, #48]	; (8009af8 <UBLOX_DMA_Init+0x48>)
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	681a      	ldr	r2, [r3, #0]
 8009aca:	4b0b      	ldr	r3, [pc, #44]	; (8009af8 <UBLOX_DMA_Init+0x48>)
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	f042 0210 	orr.w	r2, r2, #16
 8009ad2:	601a      	str	r2, [r3, #0]
	__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT); // disable half complete interrupt
 8009ad4:	4b08      	ldr	r3, [pc, #32]	; (8009af8 <UBLOX_DMA_Init+0x48>)
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	681a      	ldr	r2, [r3, #0]
 8009ada:	4b07      	ldr	r3, [pc, #28]	; (8009af8 <UBLOX_DMA_Init+0x48>)
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	f022 0208 	bic.w	r2, r2, #8
 8009ae2:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(&huart2, (uint8_t *) UBLOX_DMA_RX_Buffer, UBLOX_DMA_RX_BUFFER_SIZE);
 8009ae4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009ae8:	4904      	ldr	r1, [pc, #16]	; (8009afc <UBLOX_DMA_Init+0x4c>)
 8009aea:	4802      	ldr	r0, [pc, #8]	; (8009af4 <UBLOX_DMA_Init+0x44>)
 8009aec:	f7fb f8d0 	bl	8004c90 <HAL_UART_Receive_DMA>
}
 8009af0:	bf00      	nop
 8009af2:	bd80      	pop	{r7, pc}
 8009af4:	20008374 	.word	0x20008374
 8009af8:	200081a4 	.word	0x200081a4
 8009afc:	20006c94 	.word	0x20006c94

08009b00 <UBLOX_Reset_Buffer>:

void UBLOX_Reset_Buffer(void){
 8009b00:	b480      	push	{r7}
 8009b02:	af00      	add	r7, sp, #0
	// clear rx buffer
	//	memset(UBLOX_UART_RX_Buffer, 0, sizeof(UBLOX_UART_RX_Buffer));
	// set index back to first
	ublox_write = 0;
 8009b04:	4b06      	ldr	r3, [pc, #24]	; (8009b20 <UBLOX_Reset_Buffer+0x20>)
 8009b06:	2200      	movs	r2, #0
 8009b08:	601a      	str	r2, [r3, #0]
	//	 set null at the end
	UBLOX_UART_RX_Buffer[ublox_write] = '\0';
 8009b0a:	4b05      	ldr	r3, [pc, #20]	; (8009b20 <UBLOX_Reset_Buffer+0x20>)
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	4a05      	ldr	r2, [pc, #20]	; (8009b24 <UBLOX_Reset_Buffer+0x24>)
 8009b10:	2100      	movs	r1, #0
 8009b12:	54d1      	strb	r1, [r2, r3]
}
 8009b14:	bf00      	nop
 8009b16:	46bd      	mov	sp, r7
 8009b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1c:	4770      	bx	lr
 8009b1e:	bf00      	nop
 8009b20:	20006c8c 	.word	0x20006c8c
 8009b24:	20007094 	.word	0x20007094

08009b28 <ITM_Out>:

extern osMutexId SwvMutexHandle;
extern RTC_HandleTypeDef hrtc;

void ITM_Out(uint32_t ch)
{
 8009b28:	b480      	push	{r7}
 8009b2a:	b085      	sub	sp, #20
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
#if (DEBUG_HUB == 1)
	int port = 0;
 8009b30:	2300      	movs	r3, #0
 8009b32:	60fb      	str	r3, [r7, #12]

	while (ITM->PORT[port].u32 == 0);
 8009b34:	bf00      	nop
 8009b36:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d0f8      	beq.n	8009b36 <ITM_Out+0xe>
	ITM->PORT[port].u8 = (uint8_t) ch;
 8009b44:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	b2d9      	uxtb	r1, r3
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
#endif
}
 8009b52:	bf00      	nop
 8009b54:	3714      	adds	r7, #20
 8009b56:	46bd      	mov	sp, r7
 8009b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5c:	4770      	bx	lr
	...

08009b60 <swvPrint>:

void swvPrint(char* ptr)
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b082      	sub	sp, #8
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
	osMutexWait(SwvMutexHandle, osWaitForever);
 8009b68:	4b0d      	ldr	r3, [pc, #52]	; (8009ba0 <swvPrint+0x40>)
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	f04f 31ff 	mov.w	r1, #4294967295
 8009b70:	4618      	mov	r0, r3
 8009b72:	f7fb ff03 	bl	800597c <osMutexWait>

	while(*ptr != '\0'){
 8009b76:	e006      	b.n	8009b86 <swvPrint+0x26>
		ITM_Out((uint32_t) *(ptr++));
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	1c5a      	adds	r2, r3, #1
 8009b7c:	607a      	str	r2, [r7, #4]
 8009b7e:	781b      	ldrb	r3, [r3, #0]
 8009b80:	4618      	mov	r0, r3
 8009b82:	f7ff ffd1 	bl	8009b28 <ITM_Out>
	while(*ptr != '\0'){
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	781b      	ldrb	r3, [r3, #0]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d1f4      	bne.n	8009b78 <swvPrint+0x18>
	}

	osMutexRelease(SwvMutexHandle);
 8009b8e:	4b04      	ldr	r3, [pc, #16]	; (8009ba0 <swvPrint+0x40>)
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	4618      	mov	r0, r3
 8009b94:	f7fb ff40 	bl	8005a18 <osMutexRelease>
}
 8009b98:	bf00      	nop
 8009b9a:	3708      	adds	r7, #8
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	bd80      	pop	{r7, pc}
 8009ba0:	20008324 	.word	0x20008324

08009ba4 <swvPrintLn>:

void swvPrintLn(char* ptr)
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b082      	sub	sp, #8
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
	osMutexWait(SwvMutexHandle, osWaitForever);
 8009bac:	4b0f      	ldr	r3, [pc, #60]	; (8009bec <swvPrintLn+0x48>)
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	f04f 31ff 	mov.w	r1, #4294967295
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	f7fb fee1 	bl	800597c <osMutexWait>

	while(*ptr != '\0'){
 8009bba:	e006      	b.n	8009bca <swvPrintLn+0x26>
		ITM_Out((uint32_t) *(ptr++));
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	1c5a      	adds	r2, r3, #1
 8009bc0:	607a      	str	r2, [r7, #4]
 8009bc2:	781b      	ldrb	r3, [r3, #0]
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	f7ff ffaf 	bl	8009b28 <ITM_Out>
	while(*ptr != '\0'){
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	781b      	ldrb	r3, [r3, #0]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d1f4      	bne.n	8009bbc <swvPrintLn+0x18>
	}
	ITM_Out((uint32_t) '\n');
 8009bd2:	200a      	movs	r0, #10
 8009bd4:	f7ff ffa8 	bl	8009b28 <ITM_Out>

	osMutexRelease(SwvMutexHandle);
 8009bd8:	4b04      	ldr	r3, [pc, #16]	; (8009bec <swvPrintLn+0x48>)
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	4618      	mov	r0, r3
 8009bde:	f7fb ff1b 	bl	8005a18 <osMutexRelease>
}
 8009be2:	bf00      	nop
 8009be4:	3708      	adds	r7, #8
 8009be6:	46bd      	mov	sp, r7
 8009be8:	bd80      	pop	{r7, pc}
 8009bea:	bf00      	nop
 8009bec:	20008324 	.word	0x20008324

08009bf0 <ftoa>:
	swvPrint("\n===============================\n");
}

// Converts a floating point number to string.
void ftoa(float f, char *str, char size)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b0a0      	sub	sp, #128	; 0x80
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	ed87 0a03 	vstr	s0, [r7, #12]
 8009bfa:	60b8      	str	r0, [r7, #8]
 8009bfc:	460b      	mov	r3, r1
 8009bfe:	71fb      	strb	r3, [r7, #7]
	uint8_t pos;  // position in string
	char len;  // length of decimal part of result
	char curr[100];  // temp holder for next digit
	int value;  // decimal digit(s) to convert
	pos = 0;  // initialize pos, just to be sure
 8009c00:	2300      	movs	r3, #0
 8009c02:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

	value = (int)f;  // truncate the floating point number
 8009c06:	edd7 7a03 	vldr	s15, [r7, #12]
 8009c0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009c0e:	ee17 3a90 	vmov	r3, s15
 8009c12:	67bb      	str	r3, [r7, #120]	; 0x78
	itoa(value,str, 10);  // this is kinda dangerous depending on the length of str
 8009c14:	220a      	movs	r2, #10
 8009c16:	68b9      	ldr	r1, [r7, #8]
 8009c18:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8009c1a:	f004 fc95 	bl	800e548 <itoa>
	// now str array has the digits before the decimal

	if (f < 0 )  // handle negative numbers
 8009c1e:	edd7 7a03 	vldr	s15, [r7, #12]
 8009c22:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009c26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c2a:	d508      	bpl.n	8009c3e <ftoa+0x4e>
	{
		f *= -1;
 8009c2c:	edd7 7a03 	vldr	s15, [r7, #12]
 8009c30:	eef1 7a67 	vneg.f32	s15, s15
 8009c34:	edc7 7a03 	vstr	s15, [r7, #12]
		value *= -1;
 8009c38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c3a:	425b      	negs	r3, r3
 8009c3c:	67bb      	str	r3, [r7, #120]	; 0x78
	}

	len = strlen(str);  // find out how big the integer part was
 8009c3e:	68b8      	ldr	r0, [r7, #8]
 8009c40:	f7f6 fad0 	bl	80001e4 <strlen>
 8009c44:	4603      	mov	r3, r0
 8009c46:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	pos = len;  // position the pointer to the end of the integer part
 8009c4a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8009c4e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	str[pos++] = '.';  // add decimal point to string
 8009c52:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8009c56:	1c5a      	adds	r2, r3, #1
 8009c58:	f887 207f 	strb.w	r2, [r7, #127]	; 0x7f
 8009c5c:	461a      	mov	r2, r3
 8009c5e:	68bb      	ldr	r3, [r7, #8]
 8009c60:	4413      	add	r3, r2
 8009c62:	222e      	movs	r2, #46	; 0x2e
 8009c64:	701a      	strb	r2, [r3, #0]

	while(pos < (size + len + 1) )  // process remaining digits
 8009c66:	e02a      	b.n	8009cbe <ftoa+0xce>
	{
		f = f - (float)value;  // hack off the whole part of the number
 8009c68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c6a:	ee07 3a90 	vmov	s15, r3
 8009c6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009c72:	ed97 7a03 	vldr	s14, [r7, #12]
 8009c76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009c7a:	edc7 7a03 	vstr	s15, [r7, #12]
		f *= 10;  // move next digit over
 8009c7e:	edd7 7a03 	vldr	s15, [r7, #12]
 8009c82:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8009c86:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009c8a:	edc7 7a03 	vstr	s15, [r7, #12]
		value = (int)f;  // get next digit
 8009c8e:	edd7 7a03 	vldr	s15, [r7, #12]
 8009c92:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009c96:	ee17 3a90 	vmov	r3, s15
 8009c9a:	67bb      	str	r3, [r7, #120]	; 0x78
		itoa(value, curr, 10); // convert digit to string
 8009c9c:	f107 0310 	add.w	r3, r7, #16
 8009ca0:	220a      	movs	r2, #10
 8009ca2:	4619      	mov	r1, r3
 8009ca4:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8009ca6:	f004 fc4f 	bl	800e548 <itoa>
		str[pos++] = *curr; // add digit to result string and increment pointer
 8009caa:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8009cae:	1c5a      	adds	r2, r3, #1
 8009cb0:	f887 207f 	strb.w	r2, [r7, #127]	; 0x7f
 8009cb4:	461a      	mov	r2, r3
 8009cb6:	68bb      	ldr	r3, [r7, #8]
 8009cb8:	4413      	add	r3, r2
 8009cba:	7c3a      	ldrb	r2, [r7, #16]
 8009cbc:	701a      	strb	r2, [r3, #0]
	while(pos < (size + len + 1) )  // process remaining digits
 8009cbe:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 8009cc2:	79f9      	ldrb	r1, [r7, #7]
 8009cc4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8009cc8:	440b      	add	r3, r1
 8009cca:	3301      	adds	r3, #1
 8009ccc:	429a      	cmp	r2, r3
 8009cce:	dbcb      	blt.n	8009c68 <ftoa+0x78>
	}
}
 8009cd0:	bf00      	nop
 8009cd2:	3780      	adds	r7, #128	; 0x80
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	bd80      	pop	{r7, pc}

08009cd8 <convertHourTo>:

uint8_t convertHourTo(uint8_t hour, int offset){
 8009cd8:	b480      	push	{r7}
 8009cda:	b083      	sub	sp, #12
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	4603      	mov	r3, r0
 8009ce0:	6039      	str	r1, [r7, #0]
 8009ce2:	71fb      	strb	r3, [r7, #7]
	return (hour + offset) > 23 ? ((hour + offset)-24) : (hour + offset);
 8009ce4:	79fa      	ldrb	r2, [r7, #7]
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	4413      	add	r3, r2
 8009cea:	2b17      	cmp	r3, #23
 8009cec:	dd07      	ble.n	8009cfe <convertHourTo+0x26>
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	b2da      	uxtb	r2, r3
 8009cf2:	79fb      	ldrb	r3, [r7, #7]
 8009cf4:	4413      	add	r3, r2
 8009cf6:	b2db      	uxtb	r3, r3
 8009cf8:	3b18      	subs	r3, #24
 8009cfa:	b2db      	uxtb	r3, r3
 8009cfc:	e004      	b.n	8009d08 <convertHourTo+0x30>
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	b2da      	uxtb	r2, r3
 8009d02:	79fb      	ldrb	r3, [r7, #7]
 8009d04:	4413      	add	r3, r2
 8009d06:	b2db      	uxtb	r3, r3
}
 8009d08:	4618      	mov	r0, r3
 8009d0a:	370c      	adds	r7, #12
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d12:	4770      	bx	lr

08009d14 <BSP_Led_Write>:

void BSP_Led_Write(uint8_t state){
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b082      	sub	sp, #8
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	4603      	mov	r3, r0
 8009d1c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, state);
 8009d1e:	79fb      	ldrb	r3, [r7, #7]
 8009d20:	461a      	mov	r2, r3
 8009d22:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009d26:	480e      	ldr	r0, [pc, #56]	; (8009d60 <BSP_Led_Write+0x4c>)
 8009d28:	f7f8 fb6c 	bl	8002404 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, state);
 8009d2c:	79fb      	ldrb	r3, [r7, #7]
 8009d2e:	461a      	mov	r2, r3
 8009d30:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009d34:	480a      	ldr	r0, [pc, #40]	; (8009d60 <BSP_Led_Write+0x4c>)
 8009d36:	f7f8 fb65 	bl	8002404 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, state);
 8009d3a:	79fb      	ldrb	r3, [r7, #7]
 8009d3c:	461a      	mov	r2, r3
 8009d3e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009d42:	4807      	ldr	r0, [pc, #28]	; (8009d60 <BSP_Led_Write+0x4c>)
 8009d44:	f7f8 fb5e 	bl	8002404 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, state);
 8009d48:	79fb      	ldrb	r3, [r7, #7]
 8009d4a:	461a      	mov	r2, r3
 8009d4c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009d50:	4803      	ldr	r0, [pc, #12]	; (8009d60 <BSP_Led_Write+0x4c>)
 8009d52:	f7f8 fb57 	bl	8002404 <HAL_GPIO_WritePin>
}
 8009d56:	bf00      	nop
 8009d58:	3708      	adds	r7, #8
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	bd80      	pop	{r7, pc}
 8009d5e:	bf00      	nop
 8009d60:	40020c00 	.word	0x40020c00

08009d64 <BSP_Led_Toggle>:

void BSP_Led_Toggle(void){
 8009d64:	b580      	push	{r7, lr}
 8009d66:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LD6_GPIO_Port, LD6_Pin);
 8009d68:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009d6c:	4809      	ldr	r0, [pc, #36]	; (8009d94 <BSP_Led_Toggle+0x30>)
 8009d6e:	f7f8 fb62 	bl	8002436 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LD5_GPIO_Port, LD5_Pin);
 8009d72:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009d76:	4807      	ldr	r0, [pc, #28]	; (8009d94 <BSP_Led_Toggle+0x30>)
 8009d78:	f7f8 fb5d 	bl	8002436 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8009d7c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009d80:	4804      	ldr	r0, [pc, #16]	; (8009d94 <BSP_Led_Toggle+0x30>)
 8009d82:	f7f8 fb58 	bl	8002436 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8009d86:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009d8a:	4802      	ldr	r0, [pc, #8]	; (8009d94 <BSP_Led_Toggle+0x30>)
 8009d8c:	f7f8 fb53 	bl	8002436 <HAL_GPIO_TogglePin>
}
 8009d90:	bf00      	nop
 8009d92:	bd80      	pop	{r7, pc}
 8009d94:	40020c00 	.word	0x40020c00

08009d98 <Get_RTC>:

void Get_RTC(char *dateTime){
 8009d98:	b5b0      	push	{r4, r5, r7, lr}
 8009d9a:	b08c      	sub	sp, #48	; 0x30
 8009d9c:	af04      	add	r7, sp, #16
 8009d9e:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef currentTime;
	RTC_DateTypeDef currentDate;

	// get the RTC
	HAL_RTC_GetTime(&hrtc, &currentTime, RTC_FORMAT_BIN);
 8009da0:	f107 030c 	add.w	r3, r7, #12
 8009da4:	2200      	movs	r2, #0
 8009da6:	4619      	mov	r1, r3
 8009da8:	480f      	ldr	r0, [pc, #60]	; (8009de8 <Get_RTC+0x50>)
 8009daa:	f7fa fa69 	bl	8004280 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &currentDate, RTC_FORMAT_BIN);
 8009dae:	f107 0308 	add.w	r3, r7, #8
 8009db2:	2200      	movs	r2, #0
 8009db4:	4619      	mov	r1, r3
 8009db6:	480c      	ldr	r0, [pc, #48]	; (8009de8 <Get_RTC+0x50>)
 8009db8:	f7fa fb67 	bl	800448a <HAL_RTC_GetDate>

	// combine RTC datetime
	sprintf(dateTime, "20%02d%02d%02d%02d%02d%02d",
			currentDate.Year, currentDate.Month, currentDate.Date,
 8009dbc:	7afb      	ldrb	r3, [r7, #11]
	sprintf(dateTime, "20%02d%02d%02d%02d%02d%02d",
 8009dbe:	461c      	mov	r4, r3
			currentDate.Year, currentDate.Month, currentDate.Date,
 8009dc0:	7a7b      	ldrb	r3, [r7, #9]
	sprintf(dateTime, "20%02d%02d%02d%02d%02d%02d",
 8009dc2:	461d      	mov	r5, r3
			currentDate.Year, currentDate.Month, currentDate.Date,
 8009dc4:	7abb      	ldrb	r3, [r7, #10]
			currentTime.Hours, currentTime.Minutes, currentTime.Seconds
 8009dc6:	7b3a      	ldrb	r2, [r7, #12]
 8009dc8:	7b79      	ldrb	r1, [r7, #13]
 8009dca:	7bb8      	ldrb	r0, [r7, #14]
	sprintf(dateTime, "20%02d%02d%02d%02d%02d%02d",
 8009dcc:	9003      	str	r0, [sp, #12]
 8009dce:	9102      	str	r1, [sp, #8]
 8009dd0:	9201      	str	r2, [sp, #4]
 8009dd2:	9300      	str	r3, [sp, #0]
 8009dd4:	462b      	mov	r3, r5
 8009dd6:	4622      	mov	r2, r4
 8009dd8:	4904      	ldr	r1, [pc, #16]	; (8009dec <Get_RTC+0x54>)
 8009dda:	6878      	ldr	r0, [r7, #4]
 8009ddc:	f004 fbca 	bl	800e574 <siprintf>
	);
}
 8009de0:	bf00      	nop
 8009de2:	3720      	adds	r7, #32
 8009de4:	46bd      	mov	sp, r7
 8009de6:	bdb0      	pop	{r4, r5, r7, pc}
 8009de8:	20008304 	.word	0x20008304
 8009dec:	08011d14 	.word	0x08011d14

08009df0 <Set_RTC>:

void Set_RTC(char *dateTime){
 8009df0:	b580      	push	{r7, lr}
 8009df2:	b08e      	sub	sp, #56	; 0x38
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
	char Y[2], M[2], D[2], H[2], I[2], S[2];
	RTC_TimeTypeDef currentTime;
	RTC_DateTypeDef currentDate;

	// parsing
	strncpy(Y, dateTime + 2, 2);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	1c99      	adds	r1, r3, #2
 8009dfc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009e00:	2202      	movs	r2, #2
 8009e02:	4618      	mov	r0, r3
 8009e04:	f004 fbfd 	bl	800e602 <strncpy>
	strncpy(M, dateTime + 4, 2);
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	1d19      	adds	r1, r3, #4
 8009e0c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009e10:	2202      	movs	r2, #2
 8009e12:	4618      	mov	r0, r3
 8009e14:	f004 fbf5 	bl	800e602 <strncpy>
	strncpy(D, dateTime + 6, 2);
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	1d99      	adds	r1, r3, #6
 8009e1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009e20:	2202      	movs	r2, #2
 8009e22:	4618      	mov	r0, r3
 8009e24:	f004 fbed 	bl	800e602 <strncpy>
	strncpy(H, dateTime + 8, 2);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	f103 0108 	add.w	r1, r3, #8
 8009e2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009e32:	2202      	movs	r2, #2
 8009e34:	4618      	mov	r0, r3
 8009e36:	f004 fbe4 	bl	800e602 <strncpy>
	strncpy(I, dateTime + 10, 2);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	f103 010a 	add.w	r1, r3, #10
 8009e40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009e44:	2202      	movs	r2, #2
 8009e46:	4618      	mov	r0, r3
 8009e48:	f004 fbdb 	bl	800e602 <strncpy>
	strncpy(S, dateTime + 12, 2);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	f103 010c 	add.w	r1, r3, #12
 8009e52:	f107 0320 	add.w	r3, r7, #32
 8009e56:	2202      	movs	r2, #2
 8009e58:	4618      	mov	r0, r3
 8009e5a:	f004 fbd2 	bl	800e602 <strncpy>

	// assing to object
	currentDate.WeekDay = RTC_WEEKDAY_SUNDAY; // day is ignored
 8009e5e:	2307      	movs	r3, #7
 8009e60:	723b      	strb	r3, [r7, #8]
	currentDate.Year = atoi(Y);
 8009e62:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009e66:	4618      	mov	r0, r3
 8009e68:	f004 fb27 	bl	800e4ba <atoi>
 8009e6c:	4603      	mov	r3, r0
 8009e6e:	b2db      	uxtb	r3, r3
 8009e70:	72fb      	strb	r3, [r7, #11]
	currentDate.Month = atoi(M);
 8009e72:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009e76:	4618      	mov	r0, r3
 8009e78:	f004 fb1f 	bl	800e4ba <atoi>
 8009e7c:	4603      	mov	r3, r0
 8009e7e:	b2db      	uxtb	r3, r3
 8009e80:	727b      	strb	r3, [r7, #9]
	currentDate.Date = atoi(D);
 8009e82:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009e86:	4618      	mov	r0, r3
 8009e88:	f004 fb17 	bl	800e4ba <atoi>
 8009e8c:	4603      	mov	r3, r0
 8009e8e:	b2db      	uxtb	r3, r3
 8009e90:	72bb      	strb	r3, [r7, #10]
	currentTime.Hours = atoi(H);
 8009e92:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009e96:	4618      	mov	r0, r3
 8009e98:	f004 fb0f 	bl	800e4ba <atoi>
 8009e9c:	4603      	mov	r3, r0
 8009e9e:	b2db      	uxtb	r3, r3
 8009ea0:	733b      	strb	r3, [r7, #12]
	currentTime.Minutes = atoi(I);
 8009ea2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	f004 fb07 	bl	800e4ba <atoi>
 8009eac:	4603      	mov	r3, r0
 8009eae:	b2db      	uxtb	r3, r3
 8009eb0:	737b      	strb	r3, [r7, #13]
	currentTime.SecondFraction = atoi(S);
 8009eb2:	f107 0320 	add.w	r3, r7, #32
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	f004 faff 	bl	800e4ba <atoi>
 8009ebc:	4603      	mov	r3, r0
 8009ebe:	617b      	str	r3, [r7, #20]

	// set the RTC
	HAL_RTC_SetTime(&hrtc, &currentTime, RTC_FORMAT_BIN);
 8009ec0:	f107 030c 	add.w	r3, r7, #12
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	4619      	mov	r1, r3
 8009ec8:	4806      	ldr	r0, [pc, #24]	; (8009ee4 <Set_RTC+0xf4>)
 8009eca:	f7fa f91c 	bl	8004106 <HAL_RTC_SetTime>
	HAL_RTC_SetDate(&hrtc, &currentDate, RTC_FORMAT_BIN);
 8009ece:	f107 0308 	add.w	r3, r7, #8
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	4619      	mov	r1, r3
 8009ed6:	4803      	ldr	r0, [pc, #12]	; (8009ee4 <Set_RTC+0xf4>)
 8009ed8:	f7fa fa30 	bl	800433c <HAL_RTC_SetDate>
}
 8009edc:	bf00      	nop
 8009ede:	3738      	adds	r7, #56	; 0x38
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	bd80      	pop	{r7, pc}
 8009ee4:	20008304 	.word	0x20008304

08009ee8 <Flash_Save_Odometer>:

void Flash_Save_Odometer(uint32_t odometer){
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b082      	sub	sp, #8
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
	EE_WriteVariable(VADDR_ODOMETER_L,  (uint16_t) odometer);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	b29b      	uxth	r3, r3
 8009ef4:	4619      	mov	r1, r3
 8009ef6:	2000      	movs	r0, #0
 8009ef8:	f000 fa78 	bl	800a3ec <EE_WriteVariable>
	EE_WriteVariable(VADDR_ODOMETER_H,  (uint16_t) odometer >> 16);
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	b29b      	uxth	r3, r3
 8009f00:	141b      	asrs	r3, r3, #16
 8009f02:	b29b      	uxth	r3, r3
 8009f04:	4619      	mov	r1, r3
 8009f06:	2001      	movs	r0, #1
 8009f08:	f000 fa70 	bl	800a3ec <EE_WriteVariable>
}
 8009f0c:	bf00      	nop
 8009f0e:	3708      	adds	r7, #8
 8009f10:	46bd      	mov	sp, r7
 8009f12:	bd80      	pop	{r7, pc}

08009f14 <Flash_Get_Odometer>:

uint32_t Flash_Get_Odometer(void){
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b082      	sub	sp, #8
 8009f18:	af00      	add	r7, sp, #0
	uint16_t odom_L, odom_H;
	//	uint32_t odom;

	if( EE_ReadVariable(VADDR_ODOMETER_L,  &odom_L) == HAL_OK){
 8009f1a:	1dbb      	adds	r3, r7, #6
 8009f1c:	4619      	mov	r1, r3
 8009f1e:	2000      	movs	r0, #0
 8009f20:	f000 fa1a 	bl	800a358 <EE_ReadVariable>
 8009f24:	4603      	mov	r3, r0
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d10c      	bne.n	8009f44 <Flash_Get_Odometer+0x30>
		if( EE_ReadVariable(VADDR_ODOMETER_H,  &odom_H) == HAL_OK){
 8009f2a:	1d3b      	adds	r3, r7, #4
 8009f2c:	4619      	mov	r1, r3
 8009f2e:	2001      	movs	r0, #1
 8009f30:	f000 fa12 	bl	800a358 <EE_ReadVariable>
 8009f34:	4603      	mov	r3, r0
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d104      	bne.n	8009f44 <Flash_Get_Odometer+0x30>
			return (odom_H << 16) | odom_L;
 8009f3a:	88bb      	ldrh	r3, [r7, #4]
 8009f3c:	041b      	lsls	r3, r3, #16
 8009f3e:	88fa      	ldrh	r2, [r7, #6]
 8009f40:	4313      	orrs	r3, r2
 8009f42:	e000      	b.n	8009f46 <Flash_Get_Odometer+0x32>
		}
	}
	return 0;
 8009f44:	2300      	movs	r3, #0
}
 8009f46:	4618      	mov	r0, r3
 8009f48:	3708      	adds	r7, #8
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	bd80      	pop	{r7, pc}
	...

08009f50 <EE_Init>:
  * @param  None.
  * @retval - Flash error code: on write Flash error
  *         - FLASH_COMPLETE: on success
  */
uint16_t EE_Init(void)
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b08a      	sub	sp, #40	; 0x28
 8009f54:	af00      	add	r7, sp, #0
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 8009f56:	2306      	movs	r3, #6
 8009f58:	847b      	strh	r3, [r7, #34]	; 0x22
 8009f5a:	2306      	movs	r3, #6
 8009f5c:	843b      	strh	r3, [r7, #32]
  uint16_t VarIdx = 0;
 8009f5e:	2300      	movs	r3, #0
 8009f60:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t EepromStatus = 0, ReadStatus = 0;
 8009f62:	2300      	movs	r3, #0
 8009f64:	83fb      	strh	r3, [r7, #30]
 8009f66:	2300      	movs	r3, #0
 8009f68:	83bb      	strh	r3, [r7, #28]
  int16_t x = -1;
 8009f6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009f6e:	84bb      	strh	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef  FlashStatus;
  uint32_t SectorError = 0;
 8009f70:	2300      	movs	r3, #0
 8009f72:	617b      	str	r3, [r7, #20]
  FLASH_EraseInitTypeDef pEraseInit;

	/* Unlock the Flash Program Erase controller */
	HAL_FLASH_Unlock();
 8009f74:	f7f7 fe24 	bl	8001bc0 <HAL_FLASH_Unlock>

  /* Get Page0 status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8009f78:	4b9f      	ldr	r3, [pc, #636]	; (800a1f8 <EE_Init+0x2a8>)
 8009f7a:	881b      	ldrh	r3, [r3, #0]
 8009f7c:	847b      	strh	r3, [r7, #34]	; 0x22
  /* Get Page1 status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8009f7e:	4b9f      	ldr	r3, [pc, #636]	; (800a1fc <EE_Init+0x2ac>)
 8009f80:	881b      	ldrh	r3, [r3, #0]
 8009f82:	843b      	strh	r3, [r7, #32]

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 8009f84:	2300      	movs	r3, #0
 8009f86:	603b      	str	r3, [r7, #0]
  pEraseInit.Sector = PAGE0_ID;
 8009f88:	230a      	movs	r3, #10
 8009f8a:	60bb      	str	r3, [r7, #8]
  pEraseInit.NbSectors = 1;
 8009f8c:	2301      	movs	r3, #1
 8009f8e:	60fb      	str	r3, [r7, #12]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8009f90:	2302      	movs	r3, #2
 8009f92:	613b      	str	r3, [r7, #16]

  /* Check for invalid header states and repair if necessary */
  switch (PageStatus0)
 8009f94:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009f96:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8009f9a:	4293      	cmp	r3, r2
 8009f9c:	d057      	beq.n	800a04e <EE_Init+0xfe>
 8009f9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009fa2:	4293      	cmp	r3, r2
 8009fa4:	d003      	beq.n	8009fae <EE_Init+0x5e>
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	f000 80f4 	beq.w	800a194 <EE_Init+0x244>
 8009fac:	e18d      	b.n	800a2ca <EE_Init+0x37a>
  {
    case ERASED:
      if (PageStatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 8009fae:	8c3b      	ldrh	r3, [r7, #32]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d116      	bne.n	8009fe2 <EE_Init+0x92>
      {
          /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8009fb4:	4890      	ldr	r0, [pc, #576]	; (800a1f8 <EE_Init+0x2a8>)
 8009fb6:	f000 f9a9 	bl	800a30c <EE_VerifyPageFullyErased>
 8009fba:	4603      	mov	r3, r0
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	f040 818e 	bne.w	800a2de <EE_Init+0x38e>
        {
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8009fc2:	f107 0214 	add.w	r2, r7, #20
 8009fc6:	463b      	mov	r3, r7
 8009fc8:	4611      	mov	r1, r2
 8009fca:	4618      	mov	r0, r3
 8009fcc:	f7f7 ff46 	bl	8001e5c <HAL_FLASHEx_Erase>
 8009fd0:	4603      	mov	r3, r0
 8009fd2:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8009fd4:	7efb      	ldrb	r3, [r7, #27]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	f000 8181 	beq.w	800a2de <EE_Init+0x38e>
          {
            return FlashStatus;
 8009fdc:	7efb      	ldrb	r3, [r7, #27]
 8009fde:	b29b      	uxth	r3, r3
 8009fe0:	e185      	b.n	800a2ee <EE_Init+0x39e>
          }
        }
      }
      else if (PageStatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 8009fe2:	8c3b      	ldrh	r3, [r7, #32]
 8009fe4:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8009fe8:	4293      	cmp	r3, r2
 8009fea:	d125      	bne.n	800a038 <EE_Init+0xe8>
      {
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8009fec:	4882      	ldr	r0, [pc, #520]	; (800a1f8 <EE_Init+0x2a8>)
 8009fee:	f000 f98d 	bl	800a30c <EE_VerifyPageFullyErased>
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d10e      	bne.n	800a016 <EE_Init+0xc6>
        {
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8009ff8:	f107 0214 	add.w	r2, r7, #20
 8009ffc:	463b      	mov	r3, r7
 8009ffe:	4611      	mov	r1, r2
 800a000:	4618      	mov	r0, r3
 800a002:	f7f7 ff2b 	bl	8001e5c <HAL_FLASHEx_Erase>
 800a006:	4603      	mov	r3, r0
 800a008:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 800a00a:	7efb      	ldrb	r3, [r7, #27]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d002      	beq.n	800a016 <EE_Init+0xc6>
          {
            return FlashStatus;
 800a010:	7efb      	ldrb	r3, [r7, #27]
 800a012:	b29b      	uxth	r3, r3
 800a014:	e16b      	b.n	800a2ee <EE_Init+0x39e>
          }
        }
        /* Mark Page1 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);
 800a016:	f04f 0200 	mov.w	r2, #0
 800a01a:	f04f 0300 	mov.w	r3, #0
 800a01e:	4977      	ldr	r1, [pc, #476]	; (800a1fc <EE_Init+0x2ac>)
 800a020:	2001      	movs	r0, #1
 800a022:	f7f7 fd79 	bl	8001b18 <HAL_FLASH_Program>
 800a026:	4603      	mov	r3, r0
 800a028:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 800a02a:	7efb      	ldrb	r3, [r7, #27]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	f000 8156 	beq.w	800a2de <EE_Init+0x38e>
        {
          return FlashStatus;
 800a032:	7efb      	ldrb	r3, [r7, #27]
 800a034:	b29b      	uxth	r3, r3
 800a036:	e15a      	b.n	800a2ee <EE_Init+0x39e>
        }
      }
      else /* First EEPROM access (Page0&1 are erased) or invalid state -> format EEPROM */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 800a038:	f000 f9fa 	bl	800a430 <EE_Format>
 800a03c:	4603      	mov	r3, r0
 800a03e:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 800a040:	7efb      	ldrb	r3, [r7, #27]
 800a042:	2b00      	cmp	r3, #0
 800a044:	f000 814b 	beq.w	800a2de <EE_Init+0x38e>
        {
          return FlashStatus;
 800a048:	7efb      	ldrb	r3, [r7, #27]
 800a04a:	b29b      	uxth	r3, r3
 800a04c:	e14f      	b.n	800a2ee <EE_Init+0x39e>
        }
      }
      break;

    case RECEIVE_DATA:
      if (PageStatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 800a04e:	8c3b      	ldrh	r3, [r7, #32]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d163      	bne.n	800a11c <EE_Init+0x1cc>
      {
        /* Transfer data from Page1 to Page0 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 800a054:	2300      	movs	r3, #0
 800a056:	84fb      	strh	r3, [r7, #38]	; 0x26
 800a058:	e030      	b.n	800a0bc <EE_Init+0x16c>
        {
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 800a05a:	4b69      	ldr	r3, [pc, #420]	; (800a200 <EE_Init+0x2b0>)
 800a05c:	881b      	ldrh	r3, [r3, #0]
 800a05e:	b29a      	uxth	r2, r3
 800a060:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a062:	4968      	ldr	r1, [pc, #416]	; (800a204 <EE_Init+0x2b4>)
 800a064:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800a068:	429a      	cmp	r2, r3
 800a06a:	d101      	bne.n	800a070 <EE_Init+0x120>
          {
            x = VarIdx;
 800a06c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a06e:	84bb      	strh	r3, [r7, #36]	; 0x24
          }
          if (VarIdx != x)
 800a070:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a072:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800a076:	429a      	cmp	r2, r3
 800a078:	d01d      	beq.n	800a0b6 <EE_Init+0x166>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 800a07a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a07c:	4a61      	ldr	r2, [pc, #388]	; (800a204 <EE_Init+0x2b4>)
 800a07e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a082:	4961      	ldr	r1, [pc, #388]	; (800a208 <EE_Init+0x2b8>)
 800a084:	4618      	mov	r0, r3
 800a086:	f000 f967 	bl	800a358 <EE_ReadVariable>
 800a08a:	4603      	mov	r3, r0
 800a08c:	83bb      	strh	r3, [r7, #28]
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 800a08e:	8bbb      	ldrh	r3, [r7, #28]
 800a090:	2b01      	cmp	r3, #1
 800a092:	d010      	beq.n	800a0b6 <EE_Init+0x166>
            {
              /* Transfer the variable to the Page0 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 800a094:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a096:	4a5b      	ldr	r2, [pc, #364]	; (800a204 <EE_Init+0x2b4>)
 800a098:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800a09c:	4b5a      	ldr	r3, [pc, #360]	; (800a208 <EE_Init+0x2b8>)
 800a09e:	881b      	ldrh	r3, [r3, #0]
 800a0a0:	4619      	mov	r1, r3
 800a0a2:	4610      	mov	r0, r2
 800a0a4:	f000 fa5c 	bl	800a560 <EE_VerifyPageFullWriteVariable>
 800a0a8:	4603      	mov	r3, r0
 800a0aa:	83fb      	strh	r3, [r7, #30]
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 800a0ac:	8bfb      	ldrh	r3, [r7, #30]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d001      	beq.n	800a0b6 <EE_Init+0x166>
              {
                return EepromStatus;
 800a0b2:	8bfb      	ldrh	r3, [r7, #30]
 800a0b4:	e11b      	b.n	800a2ee <EE_Init+0x39e>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 800a0b6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a0b8:	3301      	adds	r3, #1
 800a0ba:	84fb      	strh	r3, [r7, #38]	; 0x26
 800a0bc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a0be:	2b01      	cmp	r3, #1
 800a0c0:	d9cb      	bls.n	800a05a <EE_Init+0x10a>
              }
            }
          }
        }
        /* Mark Page0 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 800a0c2:	f04f 0200 	mov.w	r2, #0
 800a0c6:	f04f 0300 	mov.w	r3, #0
 800a0ca:	494b      	ldr	r1, [pc, #300]	; (800a1f8 <EE_Init+0x2a8>)
 800a0cc:	2001      	movs	r0, #1
 800a0ce:	f7f7 fd23 	bl	8001b18 <HAL_FLASH_Program>
 800a0d2:	4603      	mov	r3, r0
 800a0d4:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 800a0d6:	7efb      	ldrb	r3, [r7, #27]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d002      	beq.n	800a0e2 <EE_Init+0x192>
        {
          return FlashStatus;
 800a0dc:	7efb      	ldrb	r3, [r7, #27]
 800a0de:	b29b      	uxth	r3, r3
 800a0e0:	e105      	b.n	800a2ee <EE_Init+0x39e>
        }
        pEraseInit.Sector = PAGE1_ID;
 800a0e2:	230b      	movs	r3, #11
 800a0e4:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 800a0e6:	2301      	movs	r3, #1
 800a0e8:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800a0ea:	2302      	movs	r3, #2
 800a0ec:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 800a0ee:	4843      	ldr	r0, [pc, #268]	; (800a1fc <EE_Init+0x2ac>)
 800a0f0:	f000 f90c 	bl	800a30c <EE_VerifyPageFullyErased>
 800a0f4:	4603      	mov	r3, r0
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	f040 80f3 	bne.w	800a2e2 <EE_Init+0x392>
        {
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800a0fc:	f107 0214 	add.w	r2, r7, #20
 800a100:	463b      	mov	r3, r7
 800a102:	4611      	mov	r1, r2
 800a104:	4618      	mov	r0, r3
 800a106:	f7f7 fea9 	bl	8001e5c <HAL_FLASHEx_Erase>
 800a10a:	4603      	mov	r3, r0
 800a10c:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 800a10e:	7efb      	ldrb	r3, [r7, #27]
 800a110:	2b00      	cmp	r3, #0
 800a112:	f000 80e6 	beq.w	800a2e2 <EE_Init+0x392>
          {
            return FlashStatus;
 800a116:	7efb      	ldrb	r3, [r7, #27]
 800a118:	b29b      	uxth	r3, r3
 800a11a:	e0e8      	b.n	800a2ee <EE_Init+0x39e>
          }
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 receive, Page1 erased */
 800a11c:	8c3b      	ldrh	r3, [r7, #32]
 800a11e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a122:	4293      	cmp	r3, r2
 800a124:	d12b      	bne.n	800a17e <EE_Init+0x22e>
      {
        pEraseInit.Sector = PAGE1_ID;
 800a126:	230b      	movs	r3, #11
 800a128:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 800a12a:	2301      	movs	r3, #1
 800a12c:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800a12e:	2302      	movs	r3, #2
 800a130:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 800a132:	4832      	ldr	r0, [pc, #200]	; (800a1fc <EE_Init+0x2ac>)
 800a134:	f000 f8ea 	bl	800a30c <EE_VerifyPageFullyErased>
 800a138:	4603      	mov	r3, r0
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d10e      	bne.n	800a15c <EE_Init+0x20c>
        {
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800a13e:	f107 0214 	add.w	r2, r7, #20
 800a142:	463b      	mov	r3, r7
 800a144:	4611      	mov	r1, r2
 800a146:	4618      	mov	r0, r3
 800a148:	f7f7 fe88 	bl	8001e5c <HAL_FLASHEx_Erase>
 800a14c:	4603      	mov	r3, r0
 800a14e:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 800a150:	7efb      	ldrb	r3, [r7, #27]
 800a152:	2b00      	cmp	r3, #0
 800a154:	d002      	beq.n	800a15c <EE_Init+0x20c>
          {
            return FlashStatus;
 800a156:	7efb      	ldrb	r3, [r7, #27]
 800a158:	b29b      	uxth	r3, r3
 800a15a:	e0c8      	b.n	800a2ee <EE_Init+0x39e>
          }
        }
        /* Mark Page0 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 800a15c:	f04f 0200 	mov.w	r2, #0
 800a160:	f04f 0300 	mov.w	r3, #0
 800a164:	4924      	ldr	r1, [pc, #144]	; (800a1f8 <EE_Init+0x2a8>)
 800a166:	2001      	movs	r0, #1
 800a168:	f7f7 fcd6 	bl	8001b18 <HAL_FLASH_Program>
 800a16c:	4603      	mov	r3, r0
 800a16e:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 800a170:	7efb      	ldrb	r3, [r7, #27]
 800a172:	2b00      	cmp	r3, #0
 800a174:	f000 80b5 	beq.w	800a2e2 <EE_Init+0x392>
        {
          return FlashStatus;
 800a178:	7efb      	ldrb	r3, [r7, #27]
 800a17a:	b29b      	uxth	r3, r3
 800a17c:	e0b7      	b.n	800a2ee <EE_Init+0x39e>
        }
      }
      else /* Invalid state -> format eeprom */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 800a17e:	f000 f957 	bl	800a430 <EE_Format>
 800a182:	4603      	mov	r3, r0
 800a184:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 800a186:	7efb      	ldrb	r3, [r7, #27]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	f000 80aa 	beq.w	800a2e2 <EE_Init+0x392>
        {
          return FlashStatus;
 800a18e:	7efb      	ldrb	r3, [r7, #27]
 800a190:	b29b      	uxth	r3, r3
 800a192:	e0ac      	b.n	800a2ee <EE_Init+0x39e>
        }
      }
      break;

    case VALID_PAGE:
      if (PageStatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 800a194:	8c3b      	ldrh	r3, [r7, #32]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d10a      	bne.n	800a1b0 <EE_Init+0x260>
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 800a19a:	f000 f949 	bl	800a430 <EE_Format>
 800a19e:	4603      	mov	r3, r0
 800a1a0:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 800a1a2:	7efb      	ldrb	r3, [r7, #27]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	f000 809e 	beq.w	800a2e6 <EE_Init+0x396>
        {
          return FlashStatus;
 800a1aa:	7efb      	ldrb	r3, [r7, #27]
 800a1ac:	b29b      	uxth	r3, r3
 800a1ae:	e09e      	b.n	800a2ee <EE_Init+0x39e>
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 valid, Page1 erased */
 800a1b0:	8c3b      	ldrh	r3, [r7, #32]
 800a1b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a1b6:	4293      	cmp	r3, r2
 800a1b8:	d11b      	bne.n	800a1f2 <EE_Init+0x2a2>
      {
        pEraseInit.Sector = PAGE1_ID;
 800a1ba:	230b      	movs	r3, #11
 800a1bc:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 800a1be:	2301      	movs	r3, #1
 800a1c0:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800a1c2:	2302      	movs	r3, #2
 800a1c4:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 800a1c6:	480d      	ldr	r0, [pc, #52]	; (800a1fc <EE_Init+0x2ac>)
 800a1c8:	f000 f8a0 	bl	800a30c <EE_VerifyPageFullyErased>
 800a1cc:	4603      	mov	r3, r0
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	f040 8089 	bne.w	800a2e6 <EE_Init+0x396>
        {
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800a1d4:	f107 0214 	add.w	r2, r7, #20
 800a1d8:	463b      	mov	r3, r7
 800a1da:	4611      	mov	r1, r2
 800a1dc:	4618      	mov	r0, r3
 800a1de:	f7f7 fe3d 	bl	8001e5c <HAL_FLASHEx_Erase>
 800a1e2:	4603      	mov	r3, r0
 800a1e4:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 800a1e6:	7efb      	ldrb	r3, [r7, #27]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d07c      	beq.n	800a2e6 <EE_Init+0x396>
          {
            return FlashStatus;
 800a1ec:	7efb      	ldrb	r3, [r7, #27]
 800a1ee:	b29b      	uxth	r3, r3
 800a1f0:	e07d      	b.n	800a2ee <EE_Init+0x39e>
        }
      }
      else /* Page0 valid, Page1 receive */
      {
        /* Transfer data from Page0 to Page1 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	84fb      	strh	r3, [r7, #38]	; 0x26
 800a1f6:	e03a      	b.n	800a26e <EE_Init+0x31e>
 800a1f8:	080d0000 	.word	0x080d0000
 800a1fc:	080f0000 	.word	0x080f0000
 800a200:	080d0006 	.word	0x080d0006
 800a204:	20000008 	.word	0x20000008
 800a208:	200064f4 	.word	0x200064f4
        {
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 800a20c:	4b3a      	ldr	r3, [pc, #232]	; (800a2f8 <EE_Init+0x3a8>)
 800a20e:	881b      	ldrh	r3, [r3, #0]
 800a210:	b29a      	uxth	r2, r3
 800a212:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a214:	4939      	ldr	r1, [pc, #228]	; (800a2fc <EE_Init+0x3ac>)
 800a216:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800a21a:	429a      	cmp	r2, r3
 800a21c:	d101      	bne.n	800a222 <EE_Init+0x2d2>
          {
            x = VarIdx;
 800a21e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a220:	84bb      	strh	r3, [r7, #36]	; 0x24
          }
          if (VarIdx != x)
 800a222:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a224:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800a228:	429a      	cmp	r2, r3
 800a22a:	d01d      	beq.n	800a268 <EE_Init+0x318>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 800a22c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a22e:	4a33      	ldr	r2, [pc, #204]	; (800a2fc <EE_Init+0x3ac>)
 800a230:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a234:	4932      	ldr	r1, [pc, #200]	; (800a300 <EE_Init+0x3b0>)
 800a236:	4618      	mov	r0, r3
 800a238:	f000 f88e 	bl	800a358 <EE_ReadVariable>
 800a23c:	4603      	mov	r3, r0
 800a23e:	83bb      	strh	r3, [r7, #28]
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 800a240:	8bbb      	ldrh	r3, [r7, #28]
 800a242:	2b01      	cmp	r3, #1
 800a244:	d010      	beq.n	800a268 <EE_Init+0x318>
            {
              /* Transfer the variable to the Page1 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 800a246:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a248:	4a2c      	ldr	r2, [pc, #176]	; (800a2fc <EE_Init+0x3ac>)
 800a24a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800a24e:	4b2c      	ldr	r3, [pc, #176]	; (800a300 <EE_Init+0x3b0>)
 800a250:	881b      	ldrh	r3, [r3, #0]
 800a252:	4619      	mov	r1, r3
 800a254:	4610      	mov	r0, r2
 800a256:	f000 f983 	bl	800a560 <EE_VerifyPageFullWriteVariable>
 800a25a:	4603      	mov	r3, r0
 800a25c:	83fb      	strh	r3, [r7, #30]
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 800a25e:	8bfb      	ldrh	r3, [r7, #30]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d001      	beq.n	800a268 <EE_Init+0x318>
              {
                return EepromStatus;
 800a264:	8bfb      	ldrh	r3, [r7, #30]
 800a266:	e042      	b.n	800a2ee <EE_Init+0x39e>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 800a268:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a26a:	3301      	adds	r3, #1
 800a26c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800a26e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a270:	2b01      	cmp	r3, #1
 800a272:	d9cb      	bls.n	800a20c <EE_Init+0x2bc>
              }
            }
          }
        }
        /* Mark Page1 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);
 800a274:	f04f 0200 	mov.w	r2, #0
 800a278:	f04f 0300 	mov.w	r3, #0
 800a27c:	4921      	ldr	r1, [pc, #132]	; (800a304 <EE_Init+0x3b4>)
 800a27e:	2001      	movs	r0, #1
 800a280:	f7f7 fc4a 	bl	8001b18 <HAL_FLASH_Program>
 800a284:	4603      	mov	r3, r0
 800a286:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 800a288:	7efb      	ldrb	r3, [r7, #27]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d002      	beq.n	800a294 <EE_Init+0x344>
        {
          return FlashStatus;
 800a28e:	7efb      	ldrb	r3, [r7, #27]
 800a290:	b29b      	uxth	r3, r3
 800a292:	e02c      	b.n	800a2ee <EE_Init+0x39e>
        }
        pEraseInit.Sector = PAGE0_ID;
 800a294:	230a      	movs	r3, #10
 800a296:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 800a298:	2301      	movs	r3, #1
 800a29a:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800a29c:	2302      	movs	r3, #2
 800a29e:	613b      	str	r3, [r7, #16]
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 800a2a0:	4819      	ldr	r0, [pc, #100]	; (800a308 <EE_Init+0x3b8>)
 800a2a2:	f000 f833 	bl	800a30c <EE_VerifyPageFullyErased>
 800a2a6:	4603      	mov	r3, r0
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d11c      	bne.n	800a2e6 <EE_Init+0x396>
        {
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800a2ac:	f107 0214 	add.w	r2, r7, #20
 800a2b0:	463b      	mov	r3, r7
 800a2b2:	4611      	mov	r1, r2
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	f7f7 fdd1 	bl	8001e5c <HAL_FLASHEx_Erase>
 800a2ba:	4603      	mov	r3, r0
 800a2bc:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 800a2be:	7efb      	ldrb	r3, [r7, #27]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d010      	beq.n	800a2e6 <EE_Init+0x396>
          {
            return FlashStatus;
 800a2c4:	7efb      	ldrb	r3, [r7, #27]
 800a2c6:	b29b      	uxth	r3, r3
 800a2c8:	e011      	b.n	800a2ee <EE_Init+0x39e>
      }
      break;

    default:  /* Any other state -> format eeprom */
      /* Erase both Page0 and Page1 and set Page0 as valid page */
      FlashStatus = EE_Format();
 800a2ca:	f000 f8b1 	bl	800a430 <EE_Format>
 800a2ce:	4603      	mov	r3, r0
 800a2d0:	76fb      	strb	r3, [r7, #27]
      /* If erase/program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 800a2d2:	7efb      	ldrb	r3, [r7, #27]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d008      	beq.n	800a2ea <EE_Init+0x39a>
      {
        return FlashStatus;
 800a2d8:	7efb      	ldrb	r3, [r7, #27]
 800a2da:	b29b      	uxth	r3, r3
 800a2dc:	e007      	b.n	800a2ee <EE_Init+0x39e>
      break;
 800a2de:	bf00      	nop
 800a2e0:	e004      	b.n	800a2ec <EE_Init+0x39c>
      break;
 800a2e2:	bf00      	nop
 800a2e4:	e002      	b.n	800a2ec <EE_Init+0x39c>
      break;
 800a2e6:	bf00      	nop
 800a2e8:	e000      	b.n	800a2ec <EE_Init+0x39c>
      }
      break;
 800a2ea:	bf00      	nop
  }

  return HAL_OK;
 800a2ec:	2300      	movs	r3, #0
}
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	3728      	adds	r7, #40	; 0x28
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	bd80      	pop	{r7, pc}
 800a2f6:	bf00      	nop
 800a2f8:	080f0006 	.word	0x080f0006
 800a2fc:	20000008 	.word	0x20000008
 800a300:	200064f4 	.word	0x200064f4
 800a304:	080f0000 	.word	0x080f0000
 800a308:	080d0000 	.word	0x080d0000

0800a30c <EE_VerifyPageFullyErased>:
  * @retval page fully erased status:
  *           - 0: if Page not erased
  *           - 1: if Page erased
  */
uint16_t EE_VerifyPageFullyErased(uint32_t Address)
{
 800a30c:	b480      	push	{r7}
 800a30e:	b085      	sub	sp, #20
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
  uint32_t ReadStatus = 1;
 800a314:	2301      	movs	r3, #1
 800a316:	60fb      	str	r3, [r7, #12]
  uint16_t AddressValue = 0x5555;
 800a318:	f245 5355 	movw	r3, #21845	; 0x5555
 800a31c:	817b      	strh	r3, [r7, #10]

  /* Check each active page address starting from end */
  while (Address <= PAGE0_END_ADDRESS)
 800a31e:	e00d      	b.n	800a33c <EE_VerifyPageFullyErased+0x30>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	881b      	ldrh	r3, [r3, #0]
 800a324:	817b      	strh	r3, [r7, #10]

    /* Compare the read address with the virtual address */
    if (AddressValue != ERASED)
 800a326:	897b      	ldrh	r3, [r7, #10]
 800a328:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a32c:	4293      	cmp	r3, r2
 800a32e:	d002      	beq.n	800a336 <EE_VerifyPageFullyErased+0x2a>
    {

      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 800a330:	2300      	movs	r3, #0
 800a332:	60fb      	str	r3, [r7, #12]

      break;
 800a334:	e006      	b.n	800a344 <EE_VerifyPageFullyErased+0x38>
    }
    /* Next address location */
    Address = Address + 4;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	3304      	adds	r3, #4
 800a33a:	607b      	str	r3, [r7, #4]
  while (Address <= PAGE0_END_ADDRESS)
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	4a05      	ldr	r2, [pc, #20]	; (800a354 <EE_VerifyPageFullyErased+0x48>)
 800a340:	4293      	cmp	r3, r2
 800a342:	d9ed      	bls.n	800a320 <EE_VerifyPageFullyErased+0x14>
  }

  /* Return ReadStatus value: (0: Page not erased, 1: Sector erased) */
  return ReadStatus;
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	b29b      	uxth	r3, r3
}
 800a348:	4618      	mov	r0, r3
 800a34a:	3714      	adds	r7, #20
 800a34c:	46bd      	mov	sp, r7
 800a34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a352:	4770      	bx	lr
 800a354:	080effff 	.word	0x080effff

0800a358 <EE_ReadVariable>:
  *           - 0: if variable was found
  *           - 1: if the variable was not found
  *           - NO_VALID_PAGE: if no valid page was found.
  */
uint16_t EE_ReadVariable(uint16_t VirtAddress, uint16_t* Data)
{
 800a358:	b580      	push	{r7, lr}
 800a35a:	b086      	sub	sp, #24
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	4603      	mov	r3, r0
 800a360:	6039      	str	r1, [r7, #0]
 800a362:	80fb      	strh	r3, [r7, #6]
  uint16_t ValidPage = PAGE0;
 800a364:	2300      	movs	r3, #0
 800a366:	81fb      	strh	r3, [r7, #14]
  uint16_t AddressValue = 0x5555, ReadStatus = 1;
 800a368:	f245 5355 	movw	r3, #21845	; 0x5555
 800a36c:	81bb      	strh	r3, [r7, #12]
 800a36e:	2301      	movs	r3, #1
 800a370:	82fb      	strh	r3, [r7, #22]
  uint32_t Address = EEPROM_START_ADDRESS, PageStartAddress = EEPROM_START_ADDRESS;
 800a372:	4b1c      	ldr	r3, [pc, #112]	; (800a3e4 <EE_ReadVariable+0x8c>)
 800a374:	613b      	str	r3, [r7, #16]
 800a376:	4b1b      	ldr	r3, [pc, #108]	; (800a3e4 <EE_ReadVariable+0x8c>)
 800a378:	60bb      	str	r3, [r7, #8]

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 800a37a:	2000      	movs	r0, #0
 800a37c:	f000 f8aa 	bl	800a4d4 <EE_FindValidPage>
 800a380:	4603      	mov	r3, r0
 800a382:	81fb      	strh	r3, [r7, #14]

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 800a384:	89fb      	ldrh	r3, [r7, #14]
 800a386:	2bab      	cmp	r3, #171	; 0xab
 800a388:	d101      	bne.n	800a38e <EE_ReadVariable+0x36>
  {
    return  NO_VALID_PAGE;
 800a38a:	23ab      	movs	r3, #171	; 0xab
 800a38c:	e026      	b.n	800a3dc <EE_ReadVariable+0x84>
  }

  /* Get the valid Page start Address */
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 800a38e:	89fb      	ldrh	r3, [r7, #14]
 800a390:	045b      	lsls	r3, r3, #17
 800a392:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800a396:	f503 2350 	add.w	r3, r3, #851968	; 0xd0000
 800a39a:	60bb      	str	r3, [r7, #8]

  /* Get the valid Page end Address */
  Address = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 800a39c:	89fb      	ldrh	r3, [r7, #14]
 800a39e:	3301      	adds	r3, #1
 800a3a0:	045a      	lsls	r2, r3, #17
 800a3a2:	4b11      	ldr	r3, [pc, #68]	; (800a3e8 <EE_ReadVariable+0x90>)
 800a3a4:	4413      	add	r3, r2
 800a3a6:	613b      	str	r3, [r7, #16]

  /* Check each active page address starting from end */
  while (Address > (PageStartAddress + 2))
 800a3a8:	e012      	b.n	800a3d0 <EE_ReadVariable+0x78>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 800a3aa:	693b      	ldr	r3, [r7, #16]
 800a3ac:	881b      	ldrh	r3, [r3, #0]
 800a3ae:	81bb      	strh	r3, [r7, #12]

    /* Compare the read address with the virtual address */
    if (AddressValue == VirtAddress)
 800a3b0:	89ba      	ldrh	r2, [r7, #12]
 800a3b2:	88fb      	ldrh	r3, [r7, #6]
 800a3b4:	429a      	cmp	r2, r3
 800a3b6:	d108      	bne.n	800a3ca <EE_ReadVariable+0x72>
    {
      /* Get content of Address-2 which is variable value */
      *Data = (*(__IO uint16_t*)(Address - 2));
 800a3b8:	693b      	ldr	r3, [r7, #16]
 800a3ba:	3b02      	subs	r3, #2
 800a3bc:	881b      	ldrh	r3, [r3, #0]
 800a3be:	b29a      	uxth	r2, r3
 800a3c0:	683b      	ldr	r3, [r7, #0]
 800a3c2:	801a      	strh	r2, [r3, #0]

      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	82fb      	strh	r3, [r7, #22]

      break;
 800a3c8:	e007      	b.n	800a3da <EE_ReadVariable+0x82>
    }
    else
    {
      /* Next address location */
      Address = Address - 4;
 800a3ca:	693b      	ldr	r3, [r7, #16]
 800a3cc:	3b04      	subs	r3, #4
 800a3ce:	613b      	str	r3, [r7, #16]
  while (Address > (PageStartAddress + 2))
 800a3d0:	68bb      	ldr	r3, [r7, #8]
 800a3d2:	3302      	adds	r3, #2
 800a3d4:	693a      	ldr	r2, [r7, #16]
 800a3d6:	429a      	cmp	r2, r3
 800a3d8:	d8e7      	bhi.n	800a3aa <EE_ReadVariable+0x52>
    }
  }

  /* Return ReadStatus value: (0: variable exist, 1: variable doesn't exist) */
  return ReadStatus;
 800a3da:	8afb      	ldrh	r3, [r7, #22]
}
 800a3dc:	4618      	mov	r0, r3
 800a3de:	3718      	adds	r7, #24
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	bd80      	pop	{r7, pc}
 800a3e4:	080d0000 	.word	0x080d0000
 800a3e8:	080cfffe 	.word	0x080cfffe

0800a3ec <EE_WriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
uint16_t EE_WriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	b084      	sub	sp, #16
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	4603      	mov	r3, r0
 800a3f4:	460a      	mov	r2, r1
 800a3f6:	80fb      	strh	r3, [r7, #6]
 800a3f8:	4613      	mov	r3, r2
 800a3fa:	80bb      	strh	r3, [r7, #4]
  uint16_t Status = 0;
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	81fb      	strh	r3, [r7, #14]

  /* Write the variable virtual address and value in the EEPROM */
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 800a400:	88ba      	ldrh	r2, [r7, #4]
 800a402:	88fb      	ldrh	r3, [r7, #6]
 800a404:	4611      	mov	r1, r2
 800a406:	4618      	mov	r0, r3
 800a408:	f000 f8aa 	bl	800a560 <EE_VerifyPageFullWriteVariable>
 800a40c:	4603      	mov	r3, r0
 800a40e:	81fb      	strh	r3, [r7, #14]

  /* In case the EEPROM active page is full */
  if (Status == PAGE_FULL)
 800a410:	89fb      	ldrh	r3, [r7, #14]
 800a412:	2b80      	cmp	r3, #128	; 0x80
 800a414:	d107      	bne.n	800a426 <EE_WriteVariable+0x3a>
  {
    /* Perform Page transfer */
    Status = EE_PageTransfer(VirtAddress, Data);
 800a416:	88ba      	ldrh	r2, [r7, #4]
 800a418:	88fb      	ldrh	r3, [r7, #6]
 800a41a:	4611      	mov	r1, r2
 800a41c:	4618      	mov	r0, r3
 800a41e:	f000 f8ff 	bl	800a620 <EE_PageTransfer>
 800a422:	4603      	mov	r3, r0
 800a424:	81fb      	strh	r3, [r7, #14]
  }

  /* Return last operation status */
  return Status;
 800a426:	89fb      	ldrh	r3, [r7, #14]
}
 800a428:	4618      	mov	r0, r3
 800a42a:	3710      	adds	r7, #16
 800a42c:	46bd      	mov	sp, r7
 800a42e:	bd80      	pop	{r7, pc}

0800a430 <EE_Format>:
  * @param  None
  * @retval Status of the last operation (Flash write or erase) done during
  *         EEPROM formating
  */
static HAL_StatusTypeDef EE_Format(void)
{
 800a430:	b580      	push	{r7, lr}
 800a432:	b088      	sub	sp, #32
 800a434:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 800a436:	2300      	movs	r3, #0
 800a438:	77fb      	strb	r3, [r7, #31]
  uint32_t SectorError = 0;
 800a43a:	2300      	movs	r3, #0
 800a43c:	61bb      	str	r3, [r7, #24]
  FLASH_EraseInitTypeDef pEraseInit;

  pEraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;
 800a43e:	2300      	movs	r3, #0
 800a440:	607b      	str	r3, [r7, #4]
  pEraseInit.Sector = PAGE0_ID;
 800a442:	230a      	movs	r3, #10
 800a444:	60fb      	str	r3, [r7, #12]
  pEraseInit.NbSectors = 1;
 800a446:	2301      	movs	r3, #1
 800a448:	613b      	str	r3, [r7, #16]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800a44a:	2302      	movs	r3, #2
 800a44c:	617b      	str	r3, [r7, #20]
  /* Erase Page0 */
  if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 800a44e:	481f      	ldr	r0, [pc, #124]	; (800a4cc <EE_Format+0x9c>)
 800a450:	f7ff ff5c 	bl	800a30c <EE_VerifyPageFullyErased>
 800a454:	4603      	mov	r3, r0
 800a456:	2b00      	cmp	r3, #0
 800a458:	d10d      	bne.n	800a476 <EE_Format+0x46>
  {
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800a45a:	f107 0218 	add.w	r2, r7, #24
 800a45e:	1d3b      	adds	r3, r7, #4
 800a460:	4611      	mov	r1, r2
 800a462:	4618      	mov	r0, r3
 800a464:	f7f7 fcfa 	bl	8001e5c <HAL_FLASHEx_Erase>
 800a468:	4603      	mov	r3, r0
 800a46a:	77fb      	strb	r3, [r7, #31]
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 800a46c:	7ffb      	ldrb	r3, [r7, #31]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d001      	beq.n	800a476 <EE_Format+0x46>
    {
      return FlashStatus;
 800a472:	7ffb      	ldrb	r3, [r7, #31]
 800a474:	e025      	b.n	800a4c2 <EE_Format+0x92>
    }
  }
  /* Set Page0 as valid page: Write VALID_PAGE at Page0 base address */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 800a476:	f04f 0200 	mov.w	r2, #0
 800a47a:	f04f 0300 	mov.w	r3, #0
 800a47e:	4913      	ldr	r1, [pc, #76]	; (800a4cc <EE_Format+0x9c>)
 800a480:	2001      	movs	r0, #1
 800a482:	f7f7 fb49 	bl	8001b18 <HAL_FLASH_Program>
 800a486:	4603      	mov	r3, r0
 800a488:	77fb      	strb	r3, [r7, #31]
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 800a48a:	7ffb      	ldrb	r3, [r7, #31]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d001      	beq.n	800a494 <EE_Format+0x64>
  {
    return FlashStatus;
 800a490:	7ffb      	ldrb	r3, [r7, #31]
 800a492:	e016      	b.n	800a4c2 <EE_Format+0x92>
  }

  pEraseInit.Sector = PAGE1_ID;
 800a494:	230b      	movs	r3, #11
 800a496:	60fb      	str	r3, [r7, #12]
  /* Erase Page1 */
  if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 800a498:	480d      	ldr	r0, [pc, #52]	; (800a4d0 <EE_Format+0xa0>)
 800a49a:	f7ff ff37 	bl	800a30c <EE_VerifyPageFullyErased>
 800a49e:	4603      	mov	r3, r0
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d10d      	bne.n	800a4c0 <EE_Format+0x90>
  {
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800a4a4:	f107 0218 	add.w	r2, r7, #24
 800a4a8:	1d3b      	adds	r3, r7, #4
 800a4aa:	4611      	mov	r1, r2
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	f7f7 fcd5 	bl	8001e5c <HAL_FLASHEx_Erase>
 800a4b2:	4603      	mov	r3, r0
 800a4b4:	77fb      	strb	r3, [r7, #31]
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 800a4b6:	7ffb      	ldrb	r3, [r7, #31]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d001      	beq.n	800a4c0 <EE_Format+0x90>
    {
      return FlashStatus;
 800a4bc:	7ffb      	ldrb	r3, [r7, #31]
 800a4be:	e000      	b.n	800a4c2 <EE_Format+0x92>
    }
  }

  return HAL_OK;
 800a4c0:	2300      	movs	r3, #0
}
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	3720      	adds	r7, #32
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	bd80      	pop	{r7, pc}
 800a4ca:	bf00      	nop
 800a4cc:	080d0000 	.word	0x080d0000
 800a4d0:	080f0000 	.word	0x080f0000

0800a4d4 <EE_FindValidPage>:
  *     @arg WRITE_IN_VALID_PAGE: write operation from valid page
  * @retval Valid page number (PAGE or PAGE1) or NO_VALID_PAGE in case
  *   of no valid page was found
  */
static uint16_t EE_FindValidPage(uint8_t Operation)
{
 800a4d4:	b480      	push	{r7}
 800a4d6:	b085      	sub	sp, #20
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	4603      	mov	r3, r0
 800a4dc:	71fb      	strb	r3, [r7, #7]
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 800a4de:	2306      	movs	r3, #6
 800a4e0:	81fb      	strh	r3, [r7, #14]
 800a4e2:	2306      	movs	r3, #6
 800a4e4:	81bb      	strh	r3, [r7, #12]

  /* Get Page0 actual status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 800a4e6:	4b1c      	ldr	r3, [pc, #112]	; (800a558 <EE_FindValidPage+0x84>)
 800a4e8:	881b      	ldrh	r3, [r3, #0]
 800a4ea:	81fb      	strh	r3, [r7, #14]

  /* Get Page1 actual status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 800a4ec:	4b1b      	ldr	r3, [pc, #108]	; (800a55c <EE_FindValidPage+0x88>)
 800a4ee:	881b      	ldrh	r3, [r3, #0]
 800a4f0:	81bb      	strh	r3, [r7, #12]

  /* Write or read operation */
  switch (Operation)
 800a4f2:	79fb      	ldrb	r3, [r7, #7]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d01b      	beq.n	800a530 <EE_FindValidPage+0x5c>
 800a4f8:	2b01      	cmp	r3, #1
 800a4fa:	d125      	bne.n	800a548 <EE_FindValidPage+0x74>
  {
    case WRITE_IN_VALID_PAGE:   /* ---- Write operation ---- */
      if (PageStatus1 == VALID_PAGE)
 800a4fc:	89bb      	ldrh	r3, [r7, #12]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d108      	bne.n	800a514 <EE_FindValidPage+0x40>
      {
        /* Page0 receiving data */
        if (PageStatus0 == RECEIVE_DATA)
 800a502:	89fb      	ldrh	r3, [r7, #14]
 800a504:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 800a508:	4293      	cmp	r3, r2
 800a50a:	d101      	bne.n	800a510 <EE_FindValidPage+0x3c>
        {
          return PAGE0;         /* Page0 valid */
 800a50c:	2300      	movs	r3, #0
 800a50e:	e01c      	b.n	800a54a <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE1;         /* Page1 valid */
 800a510:	2301      	movs	r3, #1
 800a512:	e01a      	b.n	800a54a <EE_FindValidPage+0x76>
        }
      }
      else if (PageStatus0 == VALID_PAGE)
 800a514:	89fb      	ldrh	r3, [r7, #14]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d108      	bne.n	800a52c <EE_FindValidPage+0x58>
      {
        /* Page1 receiving data */
        if (PageStatus1 == RECEIVE_DATA)
 800a51a:	89bb      	ldrh	r3, [r7, #12]
 800a51c:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 800a520:	4293      	cmp	r3, r2
 800a522:	d101      	bne.n	800a528 <EE_FindValidPage+0x54>
        {
          return PAGE1;         /* Page1 valid */
 800a524:	2301      	movs	r3, #1
 800a526:	e010      	b.n	800a54a <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE0;         /* Page0 valid */
 800a528:	2300      	movs	r3, #0
 800a52a:	e00e      	b.n	800a54a <EE_FindValidPage+0x76>
        }
      }
      else
      {
        return NO_VALID_PAGE;   /* No valid Page */
 800a52c:	23ab      	movs	r3, #171	; 0xab
 800a52e:	e00c      	b.n	800a54a <EE_FindValidPage+0x76>
      }

    case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
      if (PageStatus0 == VALID_PAGE)
 800a530:	89fb      	ldrh	r3, [r7, #14]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d101      	bne.n	800a53a <EE_FindValidPage+0x66>
      {
        return PAGE0;           /* Page0 valid */
 800a536:	2300      	movs	r3, #0
 800a538:	e007      	b.n	800a54a <EE_FindValidPage+0x76>
      }
      else if (PageStatus1 == VALID_PAGE)
 800a53a:	89bb      	ldrh	r3, [r7, #12]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d101      	bne.n	800a544 <EE_FindValidPage+0x70>
      {
        return PAGE1;           /* Page1 valid */
 800a540:	2301      	movs	r3, #1
 800a542:	e002      	b.n	800a54a <EE_FindValidPage+0x76>
      }
      else
      {
        return NO_VALID_PAGE ;  /* No valid Page */
 800a544:	23ab      	movs	r3, #171	; 0xab
 800a546:	e000      	b.n	800a54a <EE_FindValidPage+0x76>
      }

    default:
      return PAGE0;             /* Page0 valid */
 800a548:	2300      	movs	r3, #0
  }
}
 800a54a:	4618      	mov	r0, r3
 800a54c:	3714      	adds	r7, #20
 800a54e:	46bd      	mov	sp, r7
 800a550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a554:	4770      	bx	lr
 800a556:	bf00      	nop
 800a558:	080d0000 	.word	0x080d0000
 800a55c:	080f0000 	.word	0x080f0000

0800a560 <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 800a560:	b590      	push	{r4, r7, lr}
 800a562:	b087      	sub	sp, #28
 800a564:	af00      	add	r7, sp, #0
 800a566:	4603      	mov	r3, r0
 800a568:	460a      	mov	r2, r1
 800a56a:	80fb      	strh	r3, [r7, #6]
 800a56c:	4613      	mov	r3, r2
 800a56e:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 800a570:	2300      	movs	r3, #0
 800a572:	74fb      	strb	r3, [r7, #19]
  uint16_t ValidPage = PAGE0;
 800a574:	2300      	movs	r3, #0
 800a576:	823b      	strh	r3, [r7, #16]
  uint32_t Address = EEPROM_START_ADDRESS, PageEndAddress = EEPROM_START_ADDRESS+PAGE_SIZE;
 800a578:	4b26      	ldr	r3, [pc, #152]	; (800a614 <EE_VerifyPageFullWriteVariable+0xb4>)
 800a57a:	617b      	str	r3, [r7, #20]
 800a57c:	4b26      	ldr	r3, [pc, #152]	; (800a618 <EE_VerifyPageFullWriteVariable+0xb8>)
 800a57e:	60fb      	str	r3, [r7, #12]

  /* Get valid Page for write operation */
  ValidPage = EE_FindValidPage(WRITE_IN_VALID_PAGE);
 800a580:	2001      	movs	r0, #1
 800a582:	f7ff ffa7 	bl	800a4d4 <EE_FindValidPage>
 800a586:	4603      	mov	r3, r0
 800a588:	823b      	strh	r3, [r7, #16]

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 800a58a:	8a3b      	ldrh	r3, [r7, #16]
 800a58c:	2bab      	cmp	r3, #171	; 0xab
 800a58e:	d101      	bne.n	800a594 <EE_VerifyPageFullWriteVariable+0x34>
  {
    return  NO_VALID_PAGE;
 800a590:	23ab      	movs	r3, #171	; 0xab
 800a592:	e03a      	b.n	800a60a <EE_VerifyPageFullWriteVariable+0xaa>
  }

  /* Get the valid Page start Address */
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 800a594:	8a3b      	ldrh	r3, [r7, #16]
 800a596:	045b      	lsls	r3, r3, #17
 800a598:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800a59c:	f503 2350 	add.w	r3, r3, #851968	; 0xd0000
 800a5a0:	617b      	str	r3, [r7, #20]

  /* Get the valid Page end Address */
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 1) + (uint32_t)((ValidPage + 1) * PAGE_SIZE));
 800a5a2:	8a3b      	ldrh	r3, [r7, #16]
 800a5a4:	3301      	adds	r3, #1
 800a5a6:	045a      	lsls	r2, r3, #17
 800a5a8:	4b1c      	ldr	r3, [pc, #112]	; (800a61c <EE_VerifyPageFullWriteVariable+0xbc>)
 800a5aa:	4413      	add	r3, r2
 800a5ac:	60fb      	str	r3, [r7, #12]

  /* Check each active page address starting from begining */
  while (Address < PageEndAddress)
 800a5ae:	e027      	b.n	800a600 <EE_VerifyPageFullWriteVariable+0xa0>
  {
    /* Verify if Address and Address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 800a5b0:	697b      	ldr	r3, [r7, #20]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5b8:	d11f      	bne.n	800a5fa <EE_VerifyPageFullWriteVariable+0x9a>
    {
      /* Set variable data */
      FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Address, Data);
 800a5ba:	88bb      	ldrh	r3, [r7, #4]
 800a5bc:	f04f 0400 	mov.w	r4, #0
 800a5c0:	461a      	mov	r2, r3
 800a5c2:	4623      	mov	r3, r4
 800a5c4:	6979      	ldr	r1, [r7, #20]
 800a5c6:	2001      	movs	r0, #1
 800a5c8:	f7f7 faa6 	bl	8001b18 <HAL_FLASH_Program>
 800a5cc:	4603      	mov	r3, r0
 800a5ce:	74fb      	strb	r3, [r7, #19]
      /* If program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 800a5d0:	7cfb      	ldrb	r3, [r7, #19]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d002      	beq.n	800a5dc <EE_VerifyPageFullWriteVariable+0x7c>
      {
        return FlashStatus;
 800a5d6:	7cfb      	ldrb	r3, [r7, #19]
 800a5d8:	b29b      	uxth	r3, r3
 800a5da:	e016      	b.n	800a60a <EE_VerifyPageFullWriteVariable+0xaa>
      }
      /* Set variable virtual address */
      FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Address + 2, VirtAddress);
 800a5dc:	697b      	ldr	r3, [r7, #20]
 800a5de:	1c99      	adds	r1, r3, #2
 800a5e0:	88fb      	ldrh	r3, [r7, #6]
 800a5e2:	f04f 0400 	mov.w	r4, #0
 800a5e6:	461a      	mov	r2, r3
 800a5e8:	4623      	mov	r3, r4
 800a5ea:	2001      	movs	r0, #1
 800a5ec:	f7f7 fa94 	bl	8001b18 <HAL_FLASH_Program>
 800a5f0:	4603      	mov	r3, r0
 800a5f2:	74fb      	strb	r3, [r7, #19]
      /* Return program operation status */
      return FlashStatus;
 800a5f4:	7cfb      	ldrb	r3, [r7, #19]
 800a5f6:	b29b      	uxth	r3, r3
 800a5f8:	e007      	b.n	800a60a <EE_VerifyPageFullWriteVariable+0xaa>
    }
    else
    {
      /* Next address location */
      Address = Address + 4;
 800a5fa:	697b      	ldr	r3, [r7, #20]
 800a5fc:	3304      	adds	r3, #4
 800a5fe:	617b      	str	r3, [r7, #20]
  while (Address < PageEndAddress)
 800a600:	697a      	ldr	r2, [r7, #20]
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	429a      	cmp	r2, r3
 800a606:	d3d3      	bcc.n	800a5b0 <EE_VerifyPageFullWriteVariable+0x50>
    }
  }

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 800a608:	2380      	movs	r3, #128	; 0x80
}
 800a60a:	4618      	mov	r0, r3
 800a60c:	371c      	adds	r7, #28
 800a60e:	46bd      	mov	sp, r7
 800a610:	bd90      	pop	{r4, r7, pc}
 800a612:	bf00      	nop
 800a614:	080d0000 	.word	0x080d0000
 800a618:	080f0000 	.word	0x080f0000
 800a61c:	080cffff 	.word	0x080cffff

0800a620 <EE_PageTransfer>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_PageTransfer(uint16_t VirtAddress, uint16_t Data)
{
 800a620:	b580      	push	{r7, lr}
 800a622:	b08c      	sub	sp, #48	; 0x30
 800a624:	af00      	add	r7, sp, #0
 800a626:	4603      	mov	r3, r0
 800a628:	460a      	mov	r2, r1
 800a62a:	80fb      	strh	r3, [r7, #6]
 800a62c:	4613      	mov	r3, r2
 800a62e:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 800a630:	2300      	movs	r3, #0
 800a632:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t NewPageAddress = EEPROM_START_ADDRESS;
 800a636:	4b54      	ldr	r3, [pc, #336]	; (800a788 <EE_PageTransfer+0x168>)
 800a638:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint16_t OldPageId=0;
 800a63a:	2300      	movs	r3, #0
 800a63c:	857b      	strh	r3, [r7, #42]	; 0x2a
  uint16_t ValidPage = PAGE0, VarIdx = 0;
 800a63e:	2300      	movs	r3, #0
 800a640:	84bb      	strh	r3, [r7, #36]	; 0x24
 800a642:	2300      	movs	r3, #0
 800a644:	853b      	strh	r3, [r7, #40]	; 0x28
  uint16_t EepromStatus = 0, ReadStatus = 0;
 800a646:	2300      	movs	r3, #0
 800a648:	847b      	strh	r3, [r7, #34]	; 0x22
 800a64a:	2300      	movs	r3, #0
 800a64c:	843b      	strh	r3, [r7, #32]
  uint32_t SectorError = 0;
 800a64e:	2300      	movs	r3, #0
 800a650:	61fb      	str	r3, [r7, #28]
  FLASH_EraseInitTypeDef pEraseInit;

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 800a652:	2000      	movs	r0, #0
 800a654:	f7ff ff3e 	bl	800a4d4 <EE_FindValidPage>
 800a658:	4603      	mov	r3, r0
 800a65a:	84bb      	strh	r3, [r7, #36]	; 0x24

  if (ValidPage == PAGE1)       /* Page1 valid */
 800a65c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a65e:	2b01      	cmp	r3, #1
 800a660:	d104      	bne.n	800a66c <EE_PageTransfer+0x4c>
  {
    /* New page address where variable will be moved to */
    NewPageAddress = PAGE0_BASE_ADDRESS;
 800a662:	4b49      	ldr	r3, [pc, #292]	; (800a788 <EE_PageTransfer+0x168>)
 800a664:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE1_ID;
 800a666:	230b      	movs	r3, #11
 800a668:	857b      	strh	r3, [r7, #42]	; 0x2a
 800a66a:	e009      	b.n	800a680 <EE_PageTransfer+0x60>
  }
  else if (ValidPage == PAGE0)  /* Page0 valid */
 800a66c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d104      	bne.n	800a67c <EE_PageTransfer+0x5c>
  {
    /* New page address  where variable will be moved to */
    NewPageAddress = PAGE1_BASE_ADDRESS;
 800a672:	4b46      	ldr	r3, [pc, #280]	; (800a78c <EE_PageTransfer+0x16c>)
 800a674:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE0_ID;
 800a676:	230a      	movs	r3, #10
 800a678:	857b      	strh	r3, [r7, #42]	; 0x2a
 800a67a:	e001      	b.n	800a680 <EE_PageTransfer+0x60>
  }
  else
  {
    return NO_VALID_PAGE;       /* No valid Page */
 800a67c:	23ab      	movs	r3, #171	; 0xab
 800a67e:	e07e      	b.n	800a77e <EE_PageTransfer+0x15e>
  }

  /* Set the new Page status to RECEIVE_DATA status */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, NewPageAddress, RECEIVE_DATA);
 800a680:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 800a684:	f04f 0300 	mov.w	r3, #0
 800a688:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a68a:	2001      	movs	r0, #1
 800a68c:	f7f7 fa44 	bl	8001b18 <HAL_FLASH_Program>
 800a690:	4603      	mov	r3, r0
 800a692:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 800a696:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d003      	beq.n	800a6a6 <EE_PageTransfer+0x86>
  {
    return FlashStatus;
 800a69e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a6a2:	b29b      	uxth	r3, r3
 800a6a4:	e06b      	b.n	800a77e <EE_PageTransfer+0x15e>
  }

  /* Write the variable passed as parameter in the new active page */
  EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 800a6a6:	88ba      	ldrh	r2, [r7, #4]
 800a6a8:	88fb      	ldrh	r3, [r7, #6]
 800a6aa:	4611      	mov	r1, r2
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	f7ff ff57 	bl	800a560 <EE_VerifyPageFullWriteVariable>
 800a6b2:	4603      	mov	r3, r0
 800a6b4:	847b      	strh	r3, [r7, #34]	; 0x22
  /* If program operation was failed, a Flash error code is returned */
  if (EepromStatus != HAL_OK)
 800a6b6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d001      	beq.n	800a6c0 <EE_PageTransfer+0xa0>
  {
    return EepromStatus;
 800a6bc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a6be:	e05e      	b.n	800a77e <EE_PageTransfer+0x15e>
  }

  /* Transfer process: transfer variables from old to the new active page */
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	853b      	strh	r3, [r7, #40]	; 0x28
 800a6c4:	e027      	b.n	800a716 <EE_PageTransfer+0xf6>
  {
    if (VirtAddVarTab[VarIdx] != VirtAddress)  /* Check each variable except the one passed as parameter */
 800a6c6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a6c8:	4a31      	ldr	r2, [pc, #196]	; (800a790 <EE_PageTransfer+0x170>)
 800a6ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a6ce:	88fa      	ldrh	r2, [r7, #6]
 800a6d0:	429a      	cmp	r2, r3
 800a6d2:	d01d      	beq.n	800a710 <EE_PageTransfer+0xf0>
    {
      /* Read the other last variable updates */
      ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 800a6d4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a6d6:	4a2e      	ldr	r2, [pc, #184]	; (800a790 <EE_PageTransfer+0x170>)
 800a6d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a6dc:	492d      	ldr	r1, [pc, #180]	; (800a794 <EE_PageTransfer+0x174>)
 800a6de:	4618      	mov	r0, r3
 800a6e0:	f7ff fe3a 	bl	800a358 <EE_ReadVariable>
 800a6e4:	4603      	mov	r3, r0
 800a6e6:	843b      	strh	r3, [r7, #32]
      /* In case variable corresponding to the virtual address was found */
      if (ReadStatus != 0x1)
 800a6e8:	8c3b      	ldrh	r3, [r7, #32]
 800a6ea:	2b01      	cmp	r3, #1
 800a6ec:	d010      	beq.n	800a710 <EE_PageTransfer+0xf0>
      {
        /* Transfer the variable to the new active page */
        EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 800a6ee:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a6f0:	4a27      	ldr	r2, [pc, #156]	; (800a790 <EE_PageTransfer+0x170>)
 800a6f2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800a6f6:	4b27      	ldr	r3, [pc, #156]	; (800a794 <EE_PageTransfer+0x174>)
 800a6f8:	881b      	ldrh	r3, [r3, #0]
 800a6fa:	4619      	mov	r1, r3
 800a6fc:	4610      	mov	r0, r2
 800a6fe:	f7ff ff2f 	bl	800a560 <EE_VerifyPageFullWriteVariable>
 800a702:	4603      	mov	r3, r0
 800a704:	847b      	strh	r3, [r7, #34]	; 0x22
        /* If program operation was failed, a Flash error code is returned */
        if (EepromStatus != HAL_OK)
 800a706:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d001      	beq.n	800a710 <EE_PageTransfer+0xf0>
        {
          return EepromStatus;
 800a70c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a70e:	e036      	b.n	800a77e <EE_PageTransfer+0x15e>
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 800a710:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a712:	3301      	adds	r3, #1
 800a714:	853b      	strh	r3, [r7, #40]	; 0x28
 800a716:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a718:	2b01      	cmp	r3, #1
 800a71a:	d9d4      	bls.n	800a6c6 <EE_PageTransfer+0xa6>
        }
      }
    }
  }

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 800a71c:	2300      	movs	r3, #0
 800a71e:	60bb      	str	r3, [r7, #8]
  pEraseInit.Sector = OldPageId;
 800a720:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a722:	613b      	str	r3, [r7, #16]
  pEraseInit.NbSectors = 1;
 800a724:	2301      	movs	r3, #1
 800a726:	617b      	str	r3, [r7, #20]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800a728:	2302      	movs	r3, #2
 800a72a:	61bb      	str	r3, [r7, #24]

  /* Erase the old Page: Set old Page status to ERASED status */
  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800a72c:	f107 021c 	add.w	r2, r7, #28
 800a730:	f107 0308 	add.w	r3, r7, #8
 800a734:	4611      	mov	r1, r2
 800a736:	4618      	mov	r0, r3
 800a738:	f7f7 fb90 	bl	8001e5c <HAL_FLASHEx_Erase>
 800a73c:	4603      	mov	r3, r0
 800a73e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* If erase operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 800a742:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a746:	2b00      	cmp	r3, #0
 800a748:	d003      	beq.n	800a752 <EE_PageTransfer+0x132>
  {
    return FlashStatus;
 800a74a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a74e:	b29b      	uxth	r3, r3
 800a750:	e015      	b.n	800a77e <EE_PageTransfer+0x15e>
  }

  /* Set new Page status to VALID_PAGE status */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, NewPageAddress, VALID_PAGE);
 800a752:	f04f 0200 	mov.w	r2, #0
 800a756:	f04f 0300 	mov.w	r3, #0
 800a75a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a75c:	2001      	movs	r0, #1
 800a75e:	f7f7 f9db 	bl	8001b18 <HAL_FLASH_Program>
 800a762:	4603      	mov	r3, r0
 800a764:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 800a768:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d003      	beq.n	800a778 <EE_PageTransfer+0x158>
  {
    return FlashStatus;
 800a770:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a774:	b29b      	uxth	r3, r3
 800a776:	e002      	b.n	800a77e <EE_PageTransfer+0x15e>
  }

  /* Return last operation flash status */
  return FlashStatus;
 800a778:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a77c:	b29b      	uxth	r3, r3
}
 800a77e:	4618      	mov	r0, r3
 800a780:	3730      	adds	r7, #48	; 0x30
 800a782:	46bd      	mov	sp, r7
 800a784:	bd80      	pop	{r7, pc}
 800a786:	bf00      	nop
 800a788:	080d0000 	.word	0x080d0000
 800a78c:	080f0000 	.word	0x080f0000
 800a790:	20000008 	.word	0x20000008
 800a794:	200064f4 	.word	0x200064f4

0800a798 <Finger_On>:
extern uint16_t fingerID;
extern uint16_t fingerConfidence;
/* Private variable ---------------------------------------------------------*/
char str[50];

void Finger_On(void){
 800a798:	b580      	push	{r7, lr}
 800a79a:	af00      	add	r7, sp, #0
	FZ3387_SET_POWER(0);
 800a79c:	2000      	movs	r0, #0
 800a79e:	f000 fac3 	bl	800ad28 <FZ3387_SET_POWER>
}
 800a7a2:	bf00      	nop
 800a7a4:	bd80      	pop	{r7, pc}

0800a7a6 <Finger_Off>:

void Finger_Off(void){
 800a7a6:	b580      	push	{r7, lr}
 800a7a8:	af00      	add	r7, sp, #0
	FZ3387_SET_POWER(1);
 800a7aa:	2001      	movs	r0, #1
 800a7ac:	f000 fabc 	bl	800ad28 <FZ3387_SET_POWER>
	osDelay(50);
 800a7b0:	2032      	movs	r0, #50	; 0x32
 800a7b2:	f7fb f8b6 	bl	8005922 <osDelay>
}
 800a7b6:	bf00      	nop
 800a7b8:	bd80      	pop	{r7, pc}
	...

0800a7bc <Finger_Init>:

void Finger_Init(void){
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	af00      	add	r7, sp, #0
	Finger_On();
 800a7c0:	f7ff ffea 	bl	800a798 <Finger_On>
	//	 verify password and check hardware
	if(!FZ3387_verifyPassword()){
 800a7c4:	f000 fb12 	bl	800adec <FZ3387_verifyPassword>
 800a7c8:	4603      	mov	r3, r0
 800a7ca:	f083 0301 	eor.w	r3, r3, #1
 800a7ce:	b2db      	uxtb	r3, r3
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d002      	beq.n	800a7da <Finger_Init+0x1e>
		swvPrintLn("FZ3387_verifyPassword error.");
 800a7d4:	4803      	ldr	r0, [pc, #12]	; (800a7e4 <Finger_Init+0x28>)
 800a7d6:	f7ff f9e5 	bl	8009ba4 <swvPrintLn>
	}
	Finger_Off();
 800a7da:	f7ff ffe4 	bl	800a7a6 <Finger_Off>
}
 800a7de:	bf00      	nop
 800a7e0:	bd80      	pop	{r7, pc}
 800a7e2:	bf00      	nop
 800a7e4:	08011d30 	.word	0x08011d30

0800a7e8 <Finger_Enroll>:

uint8_t Finger_Enroll(uint8_t id) {
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	b086      	sub	sp, #24
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	4603      	mov	r3, r0
 800a7f0:	71fb      	strb	r3, [r7, #7]
	uint32_t tick, timeout_tick;
	int p = -1;
 800a7f2:	f04f 33ff 	mov.w	r3, #4294967295
 800a7f6:	617b      	str	r3, [r7, #20]

	// convert time to tick
	timeout_tick = osKernelSysTickMicroSec(FINGER_SCAN_TIMEOUT*1000*1000);
 800a7f8:	f644 6320 	movw	r3, #20000	; 0x4e20
 800a7fc:	613b      	str	r3, [r7, #16]
	//	Take Image
	sprintf(str, "Waiting for valid finger to enroll as # %d", id);
 800a7fe:	79fb      	ldrb	r3, [r7, #7]
 800a800:	461a      	mov	r2, r3
 800a802:	49b0      	ldr	r1, [pc, #704]	; (800aac4 <Finger_Enroll+0x2dc>)
 800a804:	48b0      	ldr	r0, [pc, #704]	; (800aac8 <Finger_Enroll+0x2e0>)
 800a806:	f003 feb5 	bl	800e574 <siprintf>
	swvPrintLn(str);
 800a80a:	48af      	ldr	r0, [pc, #700]	; (800aac8 <Finger_Enroll+0x2e0>)
 800a80c:	f7ff f9ca 	bl	8009ba4 <swvPrintLn>

	// set timeout guard
	tick = osKernelSysTick();
 800a810:	f7fb f82b 	bl	800586a <osKernelSysTick>
 800a814:	60f8      	str	r0, [r7, #12]
	while (p != FINGERPRINT_OK) {
 800a816:	e032      	b.n	800a87e <Finger_Enroll+0x96>
		BSP_Led_Toggle();
 800a818:	f7ff faa4 	bl	8009d64 <BSP_Led_Toggle>
		p = FZ3387_getImage();
 800a81c:	f000 fb12 	bl	800ae44 <FZ3387_getImage>
 800a820:	4603      	mov	r3, r0
 800a822:	617b      	str	r3, [r7, #20]
		switch (p) {
 800a824:	697b      	ldr	r3, [r7, #20]
 800a826:	2b03      	cmp	r3, #3
 800a828:	d825      	bhi.n	800a876 <Finger_Enroll+0x8e>
 800a82a:	a201      	add	r2, pc, #4	; (adr r2, 800a830 <Finger_Enroll+0x48>)
 800a82c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a830:	0800a841 	.word	0x0800a841
 800a834:	0800a867 	.word	0x0800a867
 800a838:	0800a849 	.word	0x0800a849
 800a83c:	0800a86f 	.word	0x0800a86f
		case FINGERPRINT_OK:
			swvPrintLn("Image taken");
 800a840:	48a2      	ldr	r0, [pc, #648]	; (800aacc <Finger_Enroll+0x2e4>)
 800a842:	f7ff f9af 	bl	8009ba4 <swvPrintLn>
			break;
 800a846:	e01a      	b.n	800a87e <Finger_Enroll+0x96>
		case FINGERPRINT_NOFINGER:
			if((osKernelSysTick() - tick) > timeout_tick){
 800a848:	f7fb f80f 	bl	800586a <osKernelSysTick>
 800a84c:	4602      	mov	r2, r0
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	1ad3      	subs	r3, r2, r3
 800a852:	693a      	ldr	r2, [r7, #16]
 800a854:	429a      	cmp	r2, r3
 800a856:	d202      	bcs.n	800a85e <Finger_Enroll+0x76>
				return p;
 800a858:	697b      	ldr	r3, [r7, #20]
 800a85a:	b2db      	uxtb	r3, r3
 800a85c:	e1b8      	b.n	800abd0 <Finger_Enroll+0x3e8>
			}
			swvPrintLn(".");
 800a85e:	489c      	ldr	r0, [pc, #624]	; (800aad0 <Finger_Enroll+0x2e8>)
 800a860:	f7ff f9a0 	bl	8009ba4 <swvPrintLn>
			break;
 800a864:	e00b      	b.n	800a87e <Finger_Enroll+0x96>
		case FINGERPRINT_PACKETRECIEVEERR:
			swvPrintLn("Communication error");
 800a866:	489b      	ldr	r0, [pc, #620]	; (800aad4 <Finger_Enroll+0x2ec>)
 800a868:	f7ff f99c 	bl	8009ba4 <swvPrintLn>
			break;
 800a86c:	e007      	b.n	800a87e <Finger_Enroll+0x96>
		case FINGERPRINT_IMAGEFAIL:
			swvPrintLn("Imaging error");
 800a86e:	489a      	ldr	r0, [pc, #616]	; (800aad8 <Finger_Enroll+0x2f0>)
 800a870:	f7ff f998 	bl	8009ba4 <swvPrintLn>
			break;
 800a874:	e003      	b.n	800a87e <Finger_Enroll+0x96>
		default:
			swvPrintLn("Unknown error");
 800a876:	4899      	ldr	r0, [pc, #612]	; (800aadc <Finger_Enroll+0x2f4>)
 800a878:	f7ff f994 	bl	8009ba4 <swvPrintLn>
			break;
 800a87c:	bf00      	nop
	while (p != FINGERPRINT_OK) {
 800a87e:	697b      	ldr	r3, [r7, #20]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d1c9      	bne.n	800a818 <Finger_Enroll+0x30>
		}
	}

	//	put image to buffer 1
	p = FZ3387_image2Tz(1);
 800a884:	2001      	movs	r0, #1
 800a886:	f000 faec 	bl	800ae62 <FZ3387_image2Tz>
 800a88a:	4603      	mov	r3, r0
 800a88c:	617b      	str	r3, [r7, #20]
	switch (p) {
 800a88e:	697b      	ldr	r3, [r7, #20]
 800a890:	2b15      	cmp	r3, #21
 800a892:	d858      	bhi.n	800a946 <Finger_Enroll+0x15e>
 800a894:	a201      	add	r2, pc, #4	; (adr r2, 800a89c <Finger_Enroll+0xb4>)
 800a896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a89a:	bf00      	nop
 800a89c:	0800a8f5 	.word	0x0800a8f5
 800a8a0:	0800a923 	.word	0x0800a923
 800a8a4:	0800a947 	.word	0x0800a947
 800a8a8:	0800a947 	.word	0x0800a947
 800a8ac:	0800a947 	.word	0x0800a947
 800a8b0:	0800a947 	.word	0x0800a947
 800a8b4:	0800a917 	.word	0x0800a917
 800a8b8:	0800a92f 	.word	0x0800a92f
 800a8bc:	0800a947 	.word	0x0800a947
 800a8c0:	0800a947 	.word	0x0800a947
 800a8c4:	0800a947 	.word	0x0800a947
 800a8c8:	0800a947 	.word	0x0800a947
 800a8cc:	0800a947 	.word	0x0800a947
 800a8d0:	0800a947 	.word	0x0800a947
 800a8d4:	0800a947 	.word	0x0800a947
 800a8d8:	0800a947 	.word	0x0800a947
 800a8dc:	0800a947 	.word	0x0800a947
 800a8e0:	0800a947 	.word	0x0800a947
 800a8e4:	0800a947 	.word	0x0800a947
 800a8e8:	0800a947 	.word	0x0800a947
 800a8ec:	0800a947 	.word	0x0800a947
 800a8f0:	0800a93b 	.word	0x0800a93b
	case FINGERPRINT_OK:
		swvPrintLn("Image converted");
 800a8f4:	487a      	ldr	r0, [pc, #488]	; (800aae0 <Finger_Enroll+0x2f8>)
 800a8f6:	f7ff f955 	bl	8009ba4 <swvPrintLn>
		break;
 800a8fa:	bf00      	nop
		swvPrintLn("Unknown error");
		return p;
	}

	//	 Wait for put your finger up
	BSP_Led_Write(0);
 800a8fc:	2000      	movs	r0, #0
 800a8fe:	f7ff fa09 	bl	8009d14 <BSP_Led_Write>
	swvPrintLn("Remove finger");
 800a902:	4878      	ldr	r0, [pc, #480]	; (800aae4 <Finger_Enroll+0x2fc>)
 800a904:	f7ff f94e 	bl	8009ba4 <swvPrintLn>
	osDelay(2000);
 800a908:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a90c:	f7fb f809 	bl	8005922 <osDelay>

	p = 0;
 800a910:	2300      	movs	r3, #0
 800a912:	617b      	str	r3, [r7, #20]
	while (p != FINGERPRINT_NOFINGER) {
 800a914:	e021      	b.n	800a95a <Finger_Enroll+0x172>
		swvPrintLn("Image too messy");
 800a916:	4874      	ldr	r0, [pc, #464]	; (800aae8 <Finger_Enroll+0x300>)
 800a918:	f7ff f944 	bl	8009ba4 <swvPrintLn>
		return p;
 800a91c:	697b      	ldr	r3, [r7, #20]
 800a91e:	b2db      	uxtb	r3, r3
 800a920:	e156      	b.n	800abd0 <Finger_Enroll+0x3e8>
		swvPrintLn("Communication error");
 800a922:	486c      	ldr	r0, [pc, #432]	; (800aad4 <Finger_Enroll+0x2ec>)
 800a924:	f7ff f93e 	bl	8009ba4 <swvPrintLn>
		return p;
 800a928:	697b      	ldr	r3, [r7, #20]
 800a92a:	b2db      	uxtb	r3, r3
 800a92c:	e150      	b.n	800abd0 <Finger_Enroll+0x3e8>
		swvPrintLn("Could not find fingerprint features");
 800a92e:	486f      	ldr	r0, [pc, #444]	; (800aaec <Finger_Enroll+0x304>)
 800a930:	f7ff f938 	bl	8009ba4 <swvPrintLn>
		return p;
 800a934:	697b      	ldr	r3, [r7, #20]
 800a936:	b2db      	uxtb	r3, r3
 800a938:	e14a      	b.n	800abd0 <Finger_Enroll+0x3e8>
		swvPrintLn("Could not find fingerprint features");
 800a93a:	486c      	ldr	r0, [pc, #432]	; (800aaec <Finger_Enroll+0x304>)
 800a93c:	f7ff f932 	bl	8009ba4 <swvPrintLn>
		return p;
 800a940:	697b      	ldr	r3, [r7, #20]
 800a942:	b2db      	uxtb	r3, r3
 800a944:	e144      	b.n	800abd0 <Finger_Enroll+0x3e8>
		swvPrintLn("Unknown error");
 800a946:	4865      	ldr	r0, [pc, #404]	; (800aadc <Finger_Enroll+0x2f4>)
 800a948:	f7ff f92c 	bl	8009ba4 <swvPrintLn>
		return p;
 800a94c:	697b      	ldr	r3, [r7, #20]
 800a94e:	b2db      	uxtb	r3, r3
 800a950:	e13e      	b.n	800abd0 <Finger_Enroll+0x3e8>
		p = FZ3387_getImage();
 800a952:	f000 fa77 	bl	800ae44 <FZ3387_getImage>
 800a956:	4603      	mov	r3, r0
 800a958:	617b      	str	r3, [r7, #20]
	while (p != FINGERPRINT_NOFINGER) {
 800a95a:	697b      	ldr	r3, [r7, #20]
 800a95c:	2b02      	cmp	r3, #2
 800a95e:	d1f8      	bne.n	800a952 <Finger_Enroll+0x16a>
	}

	//	Take Image again
	sprintf(str, "ID %d", id);
 800a960:	79fb      	ldrb	r3, [r7, #7]
 800a962:	461a      	mov	r2, r3
 800a964:	4962      	ldr	r1, [pc, #392]	; (800aaf0 <Finger_Enroll+0x308>)
 800a966:	4858      	ldr	r0, [pc, #352]	; (800aac8 <Finger_Enroll+0x2e0>)
 800a968:	f003 fe04 	bl	800e574 <siprintf>
	swvPrintLn(str);
 800a96c:	4856      	ldr	r0, [pc, #344]	; (800aac8 <Finger_Enroll+0x2e0>)
 800a96e:	f7ff f919 	bl	8009ba4 <swvPrintLn>

	p = -1;
 800a972:	f04f 33ff 	mov.w	r3, #4294967295
 800a976:	617b      	str	r3, [r7, #20]
	swvPrintLn("Place same finger again");
 800a978:	485e      	ldr	r0, [pc, #376]	; (800aaf4 <Finger_Enroll+0x30c>)
 800a97a:	f7ff f913 	bl	8009ba4 <swvPrintLn>
	// set timeout guard
	tick = osKernelSysTick();
 800a97e:	f7fa ff74 	bl	800586a <osKernelSysTick>
 800a982:	60f8      	str	r0, [r7, #12]
	while (p != FINGERPRINT_OK) {
 800a984:	e033      	b.n	800a9ee <Finger_Enroll+0x206>
		BSP_Led_Toggle();
 800a986:	f7ff f9ed 	bl	8009d64 <BSP_Led_Toggle>
		p = FZ3387_getImage();
 800a98a:	f000 fa5b 	bl	800ae44 <FZ3387_getImage>
 800a98e:	4603      	mov	r3, r0
 800a990:	617b      	str	r3, [r7, #20]
		switch (p) {
 800a992:	697b      	ldr	r3, [r7, #20]
 800a994:	2b03      	cmp	r3, #3
 800a996:	d826      	bhi.n	800a9e6 <Finger_Enroll+0x1fe>
 800a998:	a201      	add	r2, pc, #4	; (adr r2, 800a9a0 <Finger_Enroll+0x1b8>)
 800a99a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a99e:	bf00      	nop
 800a9a0:	0800a9b1 	.word	0x0800a9b1
 800a9a4:	0800a9d7 	.word	0x0800a9d7
 800a9a8:	0800a9b9 	.word	0x0800a9b9
 800a9ac:	0800a9df 	.word	0x0800a9df
		case FINGERPRINT_OK:
			swvPrintLn("Image taken");
 800a9b0:	4846      	ldr	r0, [pc, #280]	; (800aacc <Finger_Enroll+0x2e4>)
 800a9b2:	f7ff f8f7 	bl	8009ba4 <swvPrintLn>
			break;
 800a9b6:	e01a      	b.n	800a9ee <Finger_Enroll+0x206>
		case FINGERPRINT_NOFINGER:
			if((osKernelSysTick() - tick) > timeout_tick){
 800a9b8:	f7fa ff57 	bl	800586a <osKernelSysTick>
 800a9bc:	4602      	mov	r2, r0
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	1ad3      	subs	r3, r2, r3
 800a9c2:	693a      	ldr	r2, [r7, #16]
 800a9c4:	429a      	cmp	r2, r3
 800a9c6:	d202      	bcs.n	800a9ce <Finger_Enroll+0x1e6>
				return p;
 800a9c8:	697b      	ldr	r3, [r7, #20]
 800a9ca:	b2db      	uxtb	r3, r3
 800a9cc:	e100      	b.n	800abd0 <Finger_Enroll+0x3e8>
			}
			swvPrint(".");
 800a9ce:	4840      	ldr	r0, [pc, #256]	; (800aad0 <Finger_Enroll+0x2e8>)
 800a9d0:	f7ff f8c6 	bl	8009b60 <swvPrint>
			break;
 800a9d4:	e00b      	b.n	800a9ee <Finger_Enroll+0x206>
		case FINGERPRINT_PACKETRECIEVEERR:
			swvPrintLn("Communication error");
 800a9d6:	483f      	ldr	r0, [pc, #252]	; (800aad4 <Finger_Enroll+0x2ec>)
 800a9d8:	f7ff f8e4 	bl	8009ba4 <swvPrintLn>
			break;
 800a9dc:	e007      	b.n	800a9ee <Finger_Enroll+0x206>
		case FINGERPRINT_IMAGEFAIL:
			swvPrintLn("Imaging error");
 800a9de:	483e      	ldr	r0, [pc, #248]	; (800aad8 <Finger_Enroll+0x2f0>)
 800a9e0:	f7ff f8e0 	bl	8009ba4 <swvPrintLn>
			break;
 800a9e4:	e003      	b.n	800a9ee <Finger_Enroll+0x206>
		default:
			swvPrintLn("Unknown error");
 800a9e6:	483d      	ldr	r0, [pc, #244]	; (800aadc <Finger_Enroll+0x2f4>)
 800a9e8:	f7ff f8dc 	bl	8009ba4 <swvPrintLn>
			break;
 800a9ec:	bf00      	nop
	while (p != FINGERPRINT_OK) {
 800a9ee:	697b      	ldr	r3, [r7, #20]
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d1c8      	bne.n	800a986 <Finger_Enroll+0x19e>
		}
	}

	//	put image to buffer 2
	p = FZ3387_image2Tz(2);
 800a9f4:	2002      	movs	r0, #2
 800a9f6:	f000 fa34 	bl	800ae62 <FZ3387_image2Tz>
 800a9fa:	4603      	mov	r3, r0
 800a9fc:	617b      	str	r3, [r7, #20]
	switch (p) {
 800a9fe:	697b      	ldr	r3, [r7, #20]
 800aa00:	2b15      	cmp	r3, #21
 800aa02:	d858      	bhi.n	800aab6 <Finger_Enroll+0x2ce>
 800aa04:	a201      	add	r2, pc, #4	; (adr r2, 800aa0c <Finger_Enroll+0x224>)
 800aa06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa0a:	bf00      	nop
 800aa0c:	0800aa65 	.word	0x0800aa65
 800aa10:	0800aa93 	.word	0x0800aa93
 800aa14:	0800aab7 	.word	0x0800aab7
 800aa18:	0800aab7 	.word	0x0800aab7
 800aa1c:	0800aab7 	.word	0x0800aab7
 800aa20:	0800aab7 	.word	0x0800aab7
 800aa24:	0800aa87 	.word	0x0800aa87
 800aa28:	0800aa9f 	.word	0x0800aa9f
 800aa2c:	0800aab7 	.word	0x0800aab7
 800aa30:	0800aab7 	.word	0x0800aab7
 800aa34:	0800aab7 	.word	0x0800aab7
 800aa38:	0800aab7 	.word	0x0800aab7
 800aa3c:	0800aab7 	.word	0x0800aab7
 800aa40:	0800aab7 	.word	0x0800aab7
 800aa44:	0800aab7 	.word	0x0800aab7
 800aa48:	0800aab7 	.word	0x0800aab7
 800aa4c:	0800aab7 	.word	0x0800aab7
 800aa50:	0800aab7 	.word	0x0800aab7
 800aa54:	0800aab7 	.word	0x0800aab7
 800aa58:	0800aab7 	.word	0x0800aab7
 800aa5c:	0800aab7 	.word	0x0800aab7
 800aa60:	0800aaab 	.word	0x0800aaab
	case FINGERPRINT_OK:
		swvPrintLn("Image converted");
 800aa64:	481e      	ldr	r0, [pc, #120]	; (800aae0 <Finger_Enroll+0x2f8>)
 800aa66:	f7ff f89d 	bl	8009ba4 <swvPrintLn>
		break;
 800aa6a:	bf00      	nop
		swvPrintLn("Unknown error");
		return p;
	}

	//	 Wait for put your finger up
	BSP_Led_Write(0);
 800aa6c:	2000      	movs	r0, #0
 800aa6e:	f7ff f951 	bl	8009d14 <BSP_Led_Write>
	swvPrintLn("Remove finger");
 800aa72:	481c      	ldr	r0, [pc, #112]	; (800aae4 <Finger_Enroll+0x2fc>)
 800aa74:	f7ff f896 	bl	8009ba4 <swvPrintLn>
	osDelay(2000);
 800aa78:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800aa7c:	f7fa ff51 	bl	8005922 <osDelay>

	p = 0;
 800aa80:	2300      	movs	r3, #0
 800aa82:	617b      	str	r3, [r7, #20]
	while (p != FINGERPRINT_NOFINGER) {
 800aa84:	e03c      	b.n	800ab00 <Finger_Enroll+0x318>
		swvPrintLn("Image too messy");
 800aa86:	4818      	ldr	r0, [pc, #96]	; (800aae8 <Finger_Enroll+0x300>)
 800aa88:	f7ff f88c 	bl	8009ba4 <swvPrintLn>
		return p;
 800aa8c:	697b      	ldr	r3, [r7, #20]
 800aa8e:	b2db      	uxtb	r3, r3
 800aa90:	e09e      	b.n	800abd0 <Finger_Enroll+0x3e8>
		swvPrintLn("Communication error");
 800aa92:	4810      	ldr	r0, [pc, #64]	; (800aad4 <Finger_Enroll+0x2ec>)
 800aa94:	f7ff f886 	bl	8009ba4 <swvPrintLn>
		return p;
 800aa98:	697b      	ldr	r3, [r7, #20]
 800aa9a:	b2db      	uxtb	r3, r3
 800aa9c:	e098      	b.n	800abd0 <Finger_Enroll+0x3e8>
		swvPrintLn("Could not find fingerprint features");
 800aa9e:	4813      	ldr	r0, [pc, #76]	; (800aaec <Finger_Enroll+0x304>)
 800aaa0:	f7ff f880 	bl	8009ba4 <swvPrintLn>
		return p;
 800aaa4:	697b      	ldr	r3, [r7, #20]
 800aaa6:	b2db      	uxtb	r3, r3
 800aaa8:	e092      	b.n	800abd0 <Finger_Enroll+0x3e8>
		swvPrintLn("Could not find fingerprint features");
 800aaaa:	4810      	ldr	r0, [pc, #64]	; (800aaec <Finger_Enroll+0x304>)
 800aaac:	f7ff f87a 	bl	8009ba4 <swvPrintLn>
		return p;
 800aab0:	697b      	ldr	r3, [r7, #20]
 800aab2:	b2db      	uxtb	r3, r3
 800aab4:	e08c      	b.n	800abd0 <Finger_Enroll+0x3e8>
		swvPrintLn("Unknown error");
 800aab6:	4809      	ldr	r0, [pc, #36]	; (800aadc <Finger_Enroll+0x2f4>)
 800aab8:	f7ff f874 	bl	8009ba4 <swvPrintLn>
		return p;
 800aabc:	697b      	ldr	r3, [r7, #20]
 800aabe:	b2db      	uxtb	r3, r3
 800aac0:	e086      	b.n	800abd0 <Finger_Enroll+0x3e8>
 800aac2:	bf00      	nop
 800aac4:	08011d50 	.word	0x08011d50
 800aac8:	20007a8c 	.word	0x20007a8c
 800aacc:	08011d7c 	.word	0x08011d7c
 800aad0:	08011d88 	.word	0x08011d88
 800aad4:	08011d8c 	.word	0x08011d8c
 800aad8:	08011da0 	.word	0x08011da0
 800aadc:	08011db0 	.word	0x08011db0
 800aae0:	08011dc0 	.word	0x08011dc0
 800aae4:	08011e04 	.word	0x08011e04
 800aae8:	08011dd0 	.word	0x08011dd0
 800aaec:	08011de0 	.word	0x08011de0
 800aaf0:	08011e14 	.word	0x08011e14
 800aaf4:	08011e1c 	.word	0x08011e1c
		p = FZ3387_getImage();
 800aaf8:	f000 f9a4 	bl	800ae44 <FZ3387_getImage>
 800aafc:	4603      	mov	r3, r0
 800aafe:	617b      	str	r3, [r7, #20]
	while (p != FINGERPRINT_NOFINGER) {
 800ab00:	697b      	ldr	r3, [r7, #20]
 800ab02:	2b02      	cmp	r3, #2
 800ab04:	d1f8      	bne.n	800aaf8 <Finger_Enroll+0x310>
	}

	//	Create Register model
	sprintf(str, "Creating model for #%d", id);
 800ab06:	79fb      	ldrb	r3, [r7, #7]
 800ab08:	461a      	mov	r2, r3
 800ab0a:	4933      	ldr	r1, [pc, #204]	; (800abd8 <Finger_Enroll+0x3f0>)
 800ab0c:	4833      	ldr	r0, [pc, #204]	; (800abdc <Finger_Enroll+0x3f4>)
 800ab0e:	f003 fd31 	bl	800e574 <siprintf>
	swvPrintLn(str);
 800ab12:	4832      	ldr	r0, [pc, #200]	; (800abdc <Finger_Enroll+0x3f4>)
 800ab14:	f7ff f846 	bl	8009ba4 <swvPrintLn>
	p = FZ3387_createModel();
 800ab18:	f000 f9b7 	bl	800ae8a <FZ3387_createModel>
 800ab1c:	4603      	mov	r3, r0
 800ab1e:	617b      	str	r3, [r7, #20]
	if (p == FINGERPRINT_OK) {
 800ab20:	697b      	ldr	r3, [r7, #20]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d116      	bne.n	800ab54 <Finger_Enroll+0x36c>
		swvPrintLn("Prints matched!");
 800ab26:	482e      	ldr	r0, [pc, #184]	; (800abe0 <Finger_Enroll+0x3f8>)
 800ab28:	f7ff f83c 	bl	8009ba4 <swvPrintLn>
		swvPrintLn("Unknown error");
		return p;
	}

	//	Store in memory
	sprintf(str, "ID %d", id);
 800ab2c:	79fb      	ldrb	r3, [r7, #7]
 800ab2e:	461a      	mov	r2, r3
 800ab30:	492c      	ldr	r1, [pc, #176]	; (800abe4 <Finger_Enroll+0x3fc>)
 800ab32:	482a      	ldr	r0, [pc, #168]	; (800abdc <Finger_Enroll+0x3f4>)
 800ab34:	f003 fd1e 	bl	800e574 <siprintf>
	swvPrintLn(str);
 800ab38:	4828      	ldr	r0, [pc, #160]	; (800abdc <Finger_Enroll+0x3f4>)
 800ab3a:	f7ff f833 	bl	8009ba4 <swvPrintLn>

	p = FZ3387_storeModel(id);
 800ab3e:	79fb      	ldrb	r3, [r7, #7]
 800ab40:	b29b      	uxth	r3, r3
 800ab42:	4618      	mov	r0, r3
 800ab44:	f000 f9b0 	bl	800aea8 <FZ3387_storeModel>
 800ab48:	4603      	mov	r3, r0
 800ab4a:	617b      	str	r3, [r7, #20]
	if (p == FINGERPRINT_OK) {
 800ab4c:	697b      	ldr	r3, [r7, #20]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d11e      	bne.n	800ab90 <Finger_Enroll+0x3a8>
 800ab52:	e017      	b.n	800ab84 <Finger_Enroll+0x39c>
	} else if (p == FINGERPRINT_PACKETRECIEVEERR) {
 800ab54:	697b      	ldr	r3, [r7, #20]
 800ab56:	2b01      	cmp	r3, #1
 800ab58:	d105      	bne.n	800ab66 <Finger_Enroll+0x37e>
		swvPrintLn("Communication error");
 800ab5a:	4823      	ldr	r0, [pc, #140]	; (800abe8 <Finger_Enroll+0x400>)
 800ab5c:	f7ff f822 	bl	8009ba4 <swvPrintLn>
		return p;
 800ab60:	697b      	ldr	r3, [r7, #20]
 800ab62:	b2db      	uxtb	r3, r3
 800ab64:	e034      	b.n	800abd0 <Finger_Enroll+0x3e8>
	} else if (p == FINGERPRINT_ENROLLMISMATCH) {
 800ab66:	697b      	ldr	r3, [r7, #20]
 800ab68:	2b0a      	cmp	r3, #10
 800ab6a:	d105      	bne.n	800ab78 <Finger_Enroll+0x390>
		swvPrintLn("Fingerprints did not match");
 800ab6c:	481f      	ldr	r0, [pc, #124]	; (800abec <Finger_Enroll+0x404>)
 800ab6e:	f7ff f819 	bl	8009ba4 <swvPrintLn>
		return p;
 800ab72:	697b      	ldr	r3, [r7, #20]
 800ab74:	b2db      	uxtb	r3, r3
 800ab76:	e02b      	b.n	800abd0 <Finger_Enroll+0x3e8>
		swvPrintLn("Unknown error");
 800ab78:	481d      	ldr	r0, [pc, #116]	; (800abf0 <Finger_Enroll+0x408>)
 800ab7a:	f7ff f813 	bl	8009ba4 <swvPrintLn>
		return p;
 800ab7e:	697b      	ldr	r3, [r7, #20]
 800ab80:	b2db      	uxtb	r3, r3
 800ab82:	e025      	b.n	800abd0 <Finger_Enroll+0x3e8>
		swvPrintLn("Stored!");
 800ab84:	481b      	ldr	r0, [pc, #108]	; (800abf4 <Finger_Enroll+0x40c>)
 800ab86:	f7ff f80d 	bl	8009ba4 <swvPrintLn>
		return p;
	} else {
		swvPrintLn("Unknown error");
		return p;
	}
	return p;
 800ab8a:	697b      	ldr	r3, [r7, #20]
 800ab8c:	b2db      	uxtb	r3, r3
 800ab8e:	e01f      	b.n	800abd0 <Finger_Enroll+0x3e8>
	} else if (p == FINGERPRINT_PACKETRECIEVEERR) {
 800ab90:	697b      	ldr	r3, [r7, #20]
 800ab92:	2b01      	cmp	r3, #1
 800ab94:	d105      	bne.n	800aba2 <Finger_Enroll+0x3ba>
		swvPrintLn("Communication error");
 800ab96:	4814      	ldr	r0, [pc, #80]	; (800abe8 <Finger_Enroll+0x400>)
 800ab98:	f7ff f804 	bl	8009ba4 <swvPrintLn>
		return p;
 800ab9c:	697b      	ldr	r3, [r7, #20]
 800ab9e:	b2db      	uxtb	r3, r3
 800aba0:	e016      	b.n	800abd0 <Finger_Enroll+0x3e8>
	} else if (p == FINGERPRINT_BADLOCATION) {
 800aba2:	697b      	ldr	r3, [r7, #20]
 800aba4:	2b0b      	cmp	r3, #11
 800aba6:	d105      	bne.n	800abb4 <Finger_Enroll+0x3cc>
		swvPrintLn("Could not store in that location");
 800aba8:	4813      	ldr	r0, [pc, #76]	; (800abf8 <Finger_Enroll+0x410>)
 800abaa:	f7fe fffb 	bl	8009ba4 <swvPrintLn>
		return p;
 800abae:	697b      	ldr	r3, [r7, #20]
 800abb0:	b2db      	uxtb	r3, r3
 800abb2:	e00d      	b.n	800abd0 <Finger_Enroll+0x3e8>
	} else if (p == FINGERPRINT_FLASHERR) {
 800abb4:	697b      	ldr	r3, [r7, #20]
 800abb6:	2b18      	cmp	r3, #24
 800abb8:	d105      	bne.n	800abc6 <Finger_Enroll+0x3de>
		swvPrintLn("Error writing to flash");
 800abba:	4810      	ldr	r0, [pc, #64]	; (800abfc <Finger_Enroll+0x414>)
 800abbc:	f7fe fff2 	bl	8009ba4 <swvPrintLn>
		return p;
 800abc0:	697b      	ldr	r3, [r7, #20]
 800abc2:	b2db      	uxtb	r3, r3
 800abc4:	e004      	b.n	800abd0 <Finger_Enroll+0x3e8>
		swvPrintLn("Unknown error");
 800abc6:	480a      	ldr	r0, [pc, #40]	; (800abf0 <Finger_Enroll+0x408>)
 800abc8:	f7fe ffec 	bl	8009ba4 <swvPrintLn>
		return p;
 800abcc:	697b      	ldr	r3, [r7, #20]
 800abce:	b2db      	uxtb	r3, r3
}
 800abd0:	4618      	mov	r0, r3
 800abd2:	3718      	adds	r7, #24
 800abd4:	46bd      	mov	sp, r7
 800abd6:	bd80      	pop	{r7, pc}
 800abd8:	08011e34 	.word	0x08011e34
 800abdc:	20007a8c 	.word	0x20007a8c
 800abe0:	08011e4c 	.word	0x08011e4c
 800abe4:	08011e14 	.word	0x08011e14
 800abe8:	08011d8c 	.word	0x08011d8c
 800abec:	08011e5c 	.word	0x08011e5c
 800abf0:	08011db0 	.word	0x08011db0
 800abf4:	08011e78 	.word	0x08011e78
 800abf8:	08011e80 	.word	0x08011e80
 800abfc:	08011ea4 	.word	0x08011ea4

0800ac00 <Finger_Delete_ID>:

uint8_t Finger_Delete_ID(uint8_t id) {
 800ac00:	b580      	push	{r7, lr}
 800ac02:	b084      	sub	sp, #16
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	4603      	mov	r3, r0
 800ac08:	71fb      	strb	r3, [r7, #7]
	uint8_t p = -1;
 800ac0a:	23ff      	movs	r3, #255	; 0xff
 800ac0c:	73fb      	strb	r3, [r7, #15]

	p = FZ3387_deleteModel(id);
 800ac0e:	79fb      	ldrb	r3, [r7, #7]
 800ac10:	b29b      	uxth	r3, r3
 800ac12:	4618      	mov	r0, r3
 800ac14:	f000 f964 	bl	800aee0 <FZ3387_deleteModel>
 800ac18:	4603      	mov	r3, r0
 800ac1a:	73fb      	strb	r3, [r7, #15]

	if (p == FINGERPRINT_OK) {
 800ac1c:	7bfb      	ldrb	r3, [r7, #15]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d104      	bne.n	800ac2c <Finger_Delete_ID+0x2c>
		swvPrintLn("Deleted!");
 800ac22:	4815      	ldr	r0, [pc, #84]	; (800ac78 <Finger_Delete_ID+0x78>)
 800ac24:	f7fe ffbe 	bl	8009ba4 <swvPrintLn>
	} else {
		sprintf(str, "Unknown error: 0x%02x", p);
		swvPrintLn(str);
		return p;
	}
	return p;
 800ac28:	7bfb      	ldrb	r3, [r7, #15]
 800ac2a:	e021      	b.n	800ac70 <Finger_Delete_ID+0x70>
	} else if (p == FINGERPRINT_PACKETRECIEVEERR) {
 800ac2c:	7bfb      	ldrb	r3, [r7, #15]
 800ac2e:	2b01      	cmp	r3, #1
 800ac30:	d104      	bne.n	800ac3c <Finger_Delete_ID+0x3c>
		swvPrintLn("Communication error");
 800ac32:	4812      	ldr	r0, [pc, #72]	; (800ac7c <Finger_Delete_ID+0x7c>)
 800ac34:	f7fe ffb6 	bl	8009ba4 <swvPrintLn>
		return p;
 800ac38:	7bfb      	ldrb	r3, [r7, #15]
 800ac3a:	e019      	b.n	800ac70 <Finger_Delete_ID+0x70>
	} else if (p == FINGERPRINT_BADLOCATION) {
 800ac3c:	7bfb      	ldrb	r3, [r7, #15]
 800ac3e:	2b0b      	cmp	r3, #11
 800ac40:	d104      	bne.n	800ac4c <Finger_Delete_ID+0x4c>
		swvPrintLn("Could not delete in that location");
 800ac42:	480f      	ldr	r0, [pc, #60]	; (800ac80 <Finger_Delete_ID+0x80>)
 800ac44:	f7fe ffae 	bl	8009ba4 <swvPrintLn>
		return p;
 800ac48:	7bfb      	ldrb	r3, [r7, #15]
 800ac4a:	e011      	b.n	800ac70 <Finger_Delete_ID+0x70>
	} else if (p == FINGERPRINT_FLASHERR) {
 800ac4c:	7bfb      	ldrb	r3, [r7, #15]
 800ac4e:	2b18      	cmp	r3, #24
 800ac50:	d104      	bne.n	800ac5c <Finger_Delete_ID+0x5c>
		swvPrintLn("Error writing to flash");
 800ac52:	480c      	ldr	r0, [pc, #48]	; (800ac84 <Finger_Delete_ID+0x84>)
 800ac54:	f7fe ffa6 	bl	8009ba4 <swvPrintLn>
		return p;
 800ac58:	7bfb      	ldrb	r3, [r7, #15]
 800ac5a:	e009      	b.n	800ac70 <Finger_Delete_ID+0x70>
		sprintf(str, "Unknown error: 0x%02x", p);
 800ac5c:	7bfb      	ldrb	r3, [r7, #15]
 800ac5e:	461a      	mov	r2, r3
 800ac60:	4909      	ldr	r1, [pc, #36]	; (800ac88 <Finger_Delete_ID+0x88>)
 800ac62:	480a      	ldr	r0, [pc, #40]	; (800ac8c <Finger_Delete_ID+0x8c>)
 800ac64:	f003 fc86 	bl	800e574 <siprintf>
		swvPrintLn(str);
 800ac68:	4808      	ldr	r0, [pc, #32]	; (800ac8c <Finger_Delete_ID+0x8c>)
 800ac6a:	f7fe ff9b 	bl	8009ba4 <swvPrintLn>
		return p;
 800ac6e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac70:	4618      	mov	r0, r3
 800ac72:	3710      	adds	r7, #16
 800ac74:	46bd      	mov	sp, r7
 800ac76:	bd80      	pop	{r7, pc}
 800ac78:	08011ebc 	.word	0x08011ebc
 800ac7c:	08011d8c 	.word	0x08011d8c
 800ac80:	08011ec8 	.word	0x08011ec8
 800ac84:	08011ea4 	.word	0x08011ea4
 800ac88:	08011eec 	.word	0x08011eec
 800ac8c:	20007a8c 	.word	0x20007a8c

0800ac90 <Finger_Empty_Database>:

uint8_t Finger_Empty_Database(void) {
 800ac90:	b580      	push	{r7, lr}
 800ac92:	af00      	add	r7, sp, #0
	return FZ3387_emptyDatabase();
 800ac94:	f000 f942 	bl	800af1c <FZ3387_emptyDatabase>
 800ac98:	4603      	mov	r3, r0
}
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	bd80      	pop	{r7, pc}
	...

0800aca0 <Finger_Auth_Fast>:
		return -1;
	}
	return fingerID;
}

int8_t Finger_Auth_Fast(void) {
 800aca0:	b580      	push	{r7, lr}
 800aca2:	b082      	sub	sp, #8
 800aca4:	af00      	add	r7, sp, #0
	uint8_t p = FZ3387_getImage();
 800aca6:	f000 f8cd 	bl	800ae44 <FZ3387_getImage>
 800acaa:	4603      	mov	r3, r0
 800acac:	71fb      	strb	r3, [r7, #7]
	if (p != FINGERPRINT_OK)  return -1;
 800acae:	79fb      	ldrb	r3, [r7, #7]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d002      	beq.n	800acba <Finger_Auth_Fast+0x1a>
 800acb4:	f04f 33ff 	mov.w	r3, #4294967295
 800acb8:	e02a      	b.n	800ad10 <Finger_Auth_Fast+0x70>

	p = FZ3387_image2Tz(1);
 800acba:	2001      	movs	r0, #1
 800acbc:	f000 f8d1 	bl	800ae62 <FZ3387_image2Tz>
 800acc0:	4603      	mov	r3, r0
 800acc2:	71fb      	strb	r3, [r7, #7]
	if (p != FINGERPRINT_OK)  return -1;
 800acc4:	79fb      	ldrb	r3, [r7, #7]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d002      	beq.n	800acd0 <Finger_Auth_Fast+0x30>
 800acca:	f04f 33ff 	mov.w	r3, #4294967295
 800acce:	e01f      	b.n	800ad10 <Finger_Auth_Fast+0x70>

	p = FZ3387_fingerFastSearch();
 800acd0:	f000 f934 	bl	800af3c <FZ3387_fingerFastSearch>
 800acd4:	4603      	mov	r3, r0
 800acd6:	71fb      	strb	r3, [r7, #7]
	if (p != FINGERPRINT_OK)  return -1;
 800acd8:	79fb      	ldrb	r3, [r7, #7]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d002      	beq.n	800ace4 <Finger_Auth_Fast+0x44>
 800acde:	f04f 33ff 	mov.w	r3, #4294967295
 800ace2:	e015      	b.n	800ad10 <Finger_Auth_Fast+0x70>

	// found a match!
	sprintf(str, "Found ID #%d  with confidence of %d", fingerID, fingerConfidence);
 800ace4:	4b0c      	ldr	r3, [pc, #48]	; (800ad18 <Finger_Auth_Fast+0x78>)
 800ace6:	881b      	ldrh	r3, [r3, #0]
 800ace8:	461a      	mov	r2, r3
 800acea:	4b0c      	ldr	r3, [pc, #48]	; (800ad1c <Finger_Auth_Fast+0x7c>)
 800acec:	881b      	ldrh	r3, [r3, #0]
 800acee:	490c      	ldr	r1, [pc, #48]	; (800ad20 <Finger_Auth_Fast+0x80>)
 800acf0:	480c      	ldr	r0, [pc, #48]	; (800ad24 <Finger_Auth_Fast+0x84>)
 800acf2:	f003 fc3f 	bl	800e574 <siprintf>
	swvPrintLn(str);
 800acf6:	480b      	ldr	r0, [pc, #44]	; (800ad24 <Finger_Auth_Fast+0x84>)
 800acf8:	f7fe ff54 	bl	8009ba4 <swvPrintLn>

	if(fingerConfidence < FINGER_CONFIDENCE_MIN){
 800acfc:	4b07      	ldr	r3, [pc, #28]	; (800ad1c <Finger_Auth_Fast+0x7c>)
 800acfe:	881b      	ldrh	r3, [r3, #0]
 800ad00:	2b09      	cmp	r3, #9
 800ad02:	d802      	bhi.n	800ad0a <Finger_Auth_Fast+0x6a>
		return -1;
 800ad04:	f04f 33ff 	mov.w	r3, #4294967295
 800ad08:	e002      	b.n	800ad10 <Finger_Auth_Fast+0x70>
	}
	return fingerID;
 800ad0a:	4b03      	ldr	r3, [pc, #12]	; (800ad18 <Finger_Auth_Fast+0x78>)
 800ad0c:	881b      	ldrh	r3, [r3, #0]
 800ad0e:	b25b      	sxtb	r3, r3
}
 800ad10:	4618      	mov	r0, r3
 800ad12:	3708      	adds	r7, #8
 800ad14:	46bd      	mov	sp, r7
 800ad16:	bd80      	pop	{r7, pc}
 800ad18:	20007494 	.word	0x20007494
 800ad1c:	200074e4 	.word	0x200074e4
 800ad20:	08011f48 	.word	0x08011f48
 800ad24:	20007a8c 	.word	0x20007a8c

0800ad28 <FZ3387_SET_POWER>:
uint16_t fingerTemplateCount;

/***************************************************************************
 FUNCTIONS
 ***************************************************************************/
void FZ3387_SET_POWER(uint8_t state){
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b082      	sub	sp, #8
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	4603      	mov	r3, r0
 800ad30:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(FINGER_PWR_GPIO_Port, FINGER_PWR_Pin, state);
 800ad32:	79fb      	ldrb	r3, [r7, #7]
 800ad34:	461a      	mov	r2, r3
 800ad36:	2104      	movs	r1, #4
 800ad38:	4805      	ldr	r0, [pc, #20]	; (800ad50 <FZ3387_SET_POWER+0x28>)
 800ad3a:	f7f7 fb63 	bl	8002404 <HAL_GPIO_WritePin>
	osDelay(500);
 800ad3e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800ad42:	f7fa fdee 	bl	8005922 <osDelay>
}
 800ad46:	bf00      	nop
 800ad48:	3708      	adds	r7, #8
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	bd80      	pop	{r7, pc}
 800ad4e:	bf00      	nop
 800ad50:	40020800 	.word	0x40020800

0800ad54 <FZ3387_SERIAL_WRITE>:

void FZ3387_SERIAL_WRITE(uint8_t c){
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b082      	sub	sp, #8
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	4603      	mov	r3, r0
 800ad5c:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart4, &c, 1, HAL_MAX_DELAY);
 800ad5e:	1df9      	adds	r1, r7, #7
 800ad60:	f04f 33ff 	mov.w	r3, #4294967295
 800ad64:	2201      	movs	r2, #1
 800ad66:	4803      	ldr	r0, [pc, #12]	; (800ad74 <FZ3387_SERIAL_WRITE+0x20>)
 800ad68:	f7f9 fef9 	bl	8004b5e <HAL_UART_Transmit>
}
 800ad6c:	bf00      	nop
 800ad6e:	3708      	adds	r7, #8
 800ad70:	46bd      	mov	sp, r7
 800ad72:	bd80      	pop	{r7, pc}
 800ad74:	20008330 	.word	0x20008330

0800ad78 <FZ3387_SERIAL_WRITE_U16>:

void FZ3387_SERIAL_WRITE_U16(uint16_t cc){
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b082      	sub	sp, #8
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	4603      	mov	r3, r0
 800ad80:	80fb      	strh	r3, [r7, #6]
	FZ3387_SERIAL_WRITE((uint8_t)(cc>>8)); FZ3387_SERIAL_WRITE((uint8_t)(cc & 0xFF));
 800ad82:	88fb      	ldrh	r3, [r7, #6]
 800ad84:	0a1b      	lsrs	r3, r3, #8
 800ad86:	b29b      	uxth	r3, r3
 800ad88:	b2db      	uxtb	r3, r3
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	f7ff ffe2 	bl	800ad54 <FZ3387_SERIAL_WRITE>
 800ad90:	88fb      	ldrh	r3, [r7, #6]
 800ad92:	b2db      	uxtb	r3, r3
 800ad94:	4618      	mov	r0, r3
 800ad96:	f7ff ffdd 	bl	800ad54 <FZ3387_SERIAL_WRITE>
}
 800ad9a:	bf00      	nop
 800ad9c:	3708      	adds	r7, #8
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	bd80      	pop	{r7, pc}
	...

0800ada4 <FZ3387_SEND_CMD_PACKET>:

uint8_t FZ3387_SEND_CMD_PACKET(uint8_t *data, uint8_t size){
 800ada4:	b580      	push	{r7, lr}
 800ada6:	b082      	sub	sp, #8
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	6078      	str	r0, [r7, #4]
 800adac:	460b      	mov	r3, r1
 800adae:	70fb      	strb	r3, [r7, #3]
	FZ3387_setPacket(FINGERPRINT_COMMANDPACKET, size, data);
 800adb0:	78fb      	ldrb	r3, [r7, #3]
 800adb2:	b29b      	uxth	r3, r3
 800adb4:	687a      	ldr	r2, [r7, #4]
 800adb6:	4619      	mov	r1, r3
 800adb8:	2001      	movs	r0, #1
 800adba:	f000 f90d 	bl	800afd8 <FZ3387_setPacket>
	FZ3387_writeStructuredPacket();
 800adbe:	f000 f951 	bl	800b064 <FZ3387_writeStructuredPacket>

	if (FZ3387_getStructuredPacket() != FINGERPRINT_OK) {
 800adc2:	f000 f9ad 	bl	800b120 <FZ3387_getStructuredPacket>
 800adc6:	4603      	mov	r3, r0
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d001      	beq.n	800add0 <FZ3387_SEND_CMD_PACKET+0x2c>
		return FINGERPRINT_PACKETRECIEVEERR;
 800adcc:	2301      	movs	r3, #1
 800adce:	e007      	b.n	800ade0 <FZ3387_SEND_CMD_PACKET+0x3c>
	}
	if (packet.type != FINGERPRINT_ACKPACKET) {
 800add0:	4b05      	ldr	r3, [pc, #20]	; (800ade8 <FZ3387_SEND_CMD_PACKET+0x44>)
 800add2:	799b      	ldrb	r3, [r3, #6]
 800add4:	2b07      	cmp	r3, #7
 800add6:	d001      	beq.n	800addc <FZ3387_SEND_CMD_PACKET+0x38>
		return FINGERPRINT_PACKETRECIEVEERR;
 800add8:	2301      	movs	r3, #1
 800adda:	e001      	b.n	800ade0 <FZ3387_SEND_CMD_PACKET+0x3c>
	}
	return packet.data[0];
 800addc:	4b02      	ldr	r3, [pc, #8]	; (800ade8 <FZ3387_SEND_CMD_PACKET+0x44>)
 800adde:	7a9b      	ldrb	r3, [r3, #10]
}
 800ade0:	4618      	mov	r0, r3
 800ade2:	3708      	adds	r7, #8
 800ade4:	46bd      	mov	sp, r7
 800ade6:	bd80      	pop	{r7, pc}
 800ade8:	20007498 	.word	0x20007498

0800adec <FZ3387_verifyPassword>:
/*!
    @brief  Verifies the sensors' access password (default password is 0x0000000). A good way to also check if the sensors is active and responding
    @returns True if password is correct
 */
/**************************************************************************/
bool FZ3387_verifyPassword(void) {
 800adec:	b580      	push	{r7, lr}
 800adee:	af00      	add	r7, sp, #0
	return FZ3387_checkPassword() == FINGERPRINT_OK;
 800adf0:	f000 f808 	bl	800ae04 <FZ3387_checkPassword>
 800adf4:	4603      	mov	r3, r0
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	bf0c      	ite	eq
 800adfa:	2301      	moveq	r3, #1
 800adfc:	2300      	movne	r3, #0
 800adfe:	b2db      	uxtb	r3, r3
}
 800ae00:	4618      	mov	r0, r3
 800ae02:	bd80      	pop	{r7, pc}

0800ae04 <FZ3387_checkPassword>:

uint8_t FZ3387_checkPassword(void) {
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b082      	sub	sp, #8
 800ae08:	af00      	add	r7, sp, #0
	uint8_t data[] = {
 800ae0a:	2313      	movs	r3, #19
 800ae0c:	703b      	strb	r3, [r7, #0]
 800ae0e:	2300      	movs	r3, #0
 800ae10:	707b      	strb	r3, [r7, #1]
 800ae12:	2300      	movs	r3, #0
 800ae14:	70bb      	strb	r3, [r7, #2]
 800ae16:	2300      	movs	r3, #0
 800ae18:	70fb      	strb	r3, [r7, #3]
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	713b      	strb	r3, [r7, #4]
			(uint8_t)(FINGERPRINT_PASSWORD >> 16),
			(uint8_t)(FINGERPRINT_PASSWORD >> 8),
			(uint8_t)(FINGERPRINT_PASSWORD & 0xFF)
	};

	FZ3387_SEND_CMD_PACKET(data, sizeof(data));
 800ae1e:	463b      	mov	r3, r7
 800ae20:	2105      	movs	r1, #5
 800ae22:	4618      	mov	r0, r3
 800ae24:	f7ff ffbe 	bl	800ada4 <FZ3387_SEND_CMD_PACKET>
	if (packet.data[0] == FINGERPRINT_OK)
 800ae28:	4b05      	ldr	r3, [pc, #20]	; (800ae40 <FZ3387_checkPassword+0x3c>)
 800ae2a:	7a9b      	ldrb	r3, [r3, #10]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d101      	bne.n	800ae34 <FZ3387_checkPassword+0x30>
		return FINGERPRINT_OK;
 800ae30:	2300      	movs	r3, #0
 800ae32:	e000      	b.n	800ae36 <FZ3387_checkPassword+0x32>
	else
		return FINGERPRINT_PACKETRECIEVEERR;
 800ae34:	2301      	movs	r3, #1
}
 800ae36:	4618      	mov	r0, r3
 800ae38:	3708      	adds	r7, #8
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	bd80      	pop	{r7, pc}
 800ae3e:	bf00      	nop
 800ae40:	20007498 	.word	0x20007498

0800ae44 <FZ3387_getImage>:
    @returns <code>FINGERPRINT_NOFINGER</code> if no finger detected
    @returns <code>FINGERPRINT_PACKETRECIEVEERR</code> on communication error
    @returns <code>FINGERPRINT_IMAGEFAIL</code> on imaging error
 */
/**************************************************************************/
uint8_t FZ3387_getImage(void) {
 800ae44:	b580      	push	{r7, lr}
 800ae46:	b082      	sub	sp, #8
 800ae48:	af00      	add	r7, sp, #0
	uint8_t data[] = {
 800ae4a:	2301      	movs	r3, #1
 800ae4c:	713b      	strb	r3, [r7, #4]
			FINGERPRINT_GETIMAGE
	};
	return FZ3387_SEND_CMD_PACKET(data, sizeof(data));
 800ae4e:	1d3b      	adds	r3, r7, #4
 800ae50:	2101      	movs	r1, #1
 800ae52:	4618      	mov	r0, r3
 800ae54:	f7ff ffa6 	bl	800ada4 <FZ3387_SEND_CMD_PACKET>
 800ae58:	4603      	mov	r3, r0
}
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	3708      	adds	r7, #8
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	bd80      	pop	{r7, pc}

0800ae62 <FZ3387_image2Tz>:
    @returns <code>FINGERPRINT_IMAGEMESS</code> if image is too messy
    @returns <code>FINGERPRINT_PACKETRECIEVEERR</code> on communication error
    @returns <code>FINGERPRINT_FEATUREFAIL</code> on failure to identify fingerprint features
    @returns <code>FINGERPRINT_INVALIDIMAGE</code> on failure to identify fingerprint features
 */
uint8_t FZ3387_image2Tz(uint8_t slot) {
 800ae62:	b580      	push	{r7, lr}
 800ae64:	b084      	sub	sp, #16
 800ae66:	af00      	add	r7, sp, #0
 800ae68:	4603      	mov	r3, r0
 800ae6a:	71fb      	strb	r3, [r7, #7]
	uint8_t data[] = {
 800ae6c:	2302      	movs	r3, #2
 800ae6e:	733b      	strb	r3, [r7, #12]
 800ae70:	79fb      	ldrb	r3, [r7, #7]
 800ae72:	737b      	strb	r3, [r7, #13]
			FINGERPRINT_IMAGE2TZ,
			slot
	};
	return FZ3387_SEND_CMD_PACKET(data, sizeof(data));
 800ae74:	f107 030c 	add.w	r3, r7, #12
 800ae78:	2102      	movs	r1, #2
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	f7ff ff92 	bl	800ada4 <FZ3387_SEND_CMD_PACKET>
 800ae80:	4603      	mov	r3, r0
}
 800ae82:	4618      	mov	r0, r3
 800ae84:	3710      	adds	r7, #16
 800ae86:	46bd      	mov	sp, r7
 800ae88:	bd80      	pop	{r7, pc}

0800ae8a <FZ3387_createModel>:
    @brief   Ask the sensor to take two print feature template and create a model
    @returns <code>FINGERPRINT_OK</code> on success
    @returns <code>FINGERPRINT_PACKETRECIEVEERR</code> on communication error
    @returns <code>FINGERPRINT_ENROLLMISMATCH</code> on mismatch of fingerprints
 */
uint8_t FZ3387_createModel(void) {
 800ae8a:	b580      	push	{r7, lr}
 800ae8c:	b082      	sub	sp, #8
 800ae8e:	af00      	add	r7, sp, #0
	uint8_t data[] = {
 800ae90:	2305      	movs	r3, #5
 800ae92:	713b      	strb	r3, [r7, #4]
			FINGERPRINT_REGMODEL
	};
	return FZ3387_SEND_CMD_PACKET(data, sizeof(data));
 800ae94:	1d3b      	adds	r3, r7, #4
 800ae96:	2101      	movs	r1, #1
 800ae98:	4618      	mov	r0, r3
 800ae9a:	f7ff ff83 	bl	800ada4 <FZ3387_SEND_CMD_PACKET>
 800ae9e:	4603      	mov	r3, r0
}
 800aea0:	4618      	mov	r0, r3
 800aea2:	3708      	adds	r7, #8
 800aea4:	46bd      	mov	sp, r7
 800aea6:	bd80      	pop	{r7, pc}

0800aea8 <FZ3387_storeModel>:
    @returns <code>FINGERPRINT_OK</code> on success
    @returns <code>FINGERPRINT_BADLOCATION</code> if the location is invalid
    @returns <code>FINGERPRINT_FLASHERR</code> if the model couldn't be written to flash memory
    @returns <code>FINGERPRINT_PACKETRECIEVEERR</code> on communication error
 */
uint8_t FZ3387_storeModel(uint16_t location) {
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b084      	sub	sp, #16
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	4603      	mov	r3, r0
 800aeb0:	80fb      	strh	r3, [r7, #6]
	uint8_t data[] = {
 800aeb2:	2306      	movs	r3, #6
 800aeb4:	733b      	strb	r3, [r7, #12]
 800aeb6:	2301      	movs	r3, #1
 800aeb8:	737b      	strb	r3, [r7, #13]
			FINGERPRINT_STORE,
			0x01,
			(uint8_t)(location >> 8),
 800aeba:	88fb      	ldrh	r3, [r7, #6]
 800aebc:	0a1b      	lsrs	r3, r3, #8
 800aebe:	b29b      	uxth	r3, r3
 800aec0:	b2db      	uxtb	r3, r3
	uint8_t data[] = {
 800aec2:	73bb      	strb	r3, [r7, #14]
			(uint8_t)(location & 0xFF)
 800aec4:	88fb      	ldrh	r3, [r7, #6]
 800aec6:	b2db      	uxtb	r3, r3
	uint8_t data[] = {
 800aec8:	73fb      	strb	r3, [r7, #15]
	};
	return FZ3387_SEND_CMD_PACKET(data, sizeof(data));
 800aeca:	f107 030c 	add.w	r3, r7, #12
 800aece:	2104      	movs	r1, #4
 800aed0:	4618      	mov	r0, r3
 800aed2:	f7ff ff67 	bl	800ada4 <FZ3387_SEND_CMD_PACKET>
 800aed6:	4603      	mov	r3, r0
}
 800aed8:	4618      	mov	r0, r3
 800aeda:	3710      	adds	r7, #16
 800aedc:	46bd      	mov	sp, r7
 800aede:	bd80      	pop	{r7, pc}

0800aee0 <FZ3387_deleteModel>:
    @returns <code>FINGERPRINT_OK</code> on success
    @returns <code>FINGERPRINT_BADLOCATION</code> if the location is invalid
    @returns <code>FINGERPRINT_FLASHERR</code> if the model couldn't be written to flash memory
    @returns <code>FINGERPRINT_PACKETRECIEVEERR</code> on communication error
 */
uint8_t FZ3387_deleteModel(uint16_t location) {
 800aee0:	b580      	push	{r7, lr}
 800aee2:	b084      	sub	sp, #16
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	4603      	mov	r3, r0
 800aee8:	80fb      	strh	r3, [r7, #6]
	uint8_t data[] = {
 800aeea:	230c      	movs	r3, #12
 800aeec:	723b      	strb	r3, [r7, #8]
			FINGERPRINT_DELETE,
			(uint8_t)(location >> 8),
 800aeee:	88fb      	ldrh	r3, [r7, #6]
 800aef0:	0a1b      	lsrs	r3, r3, #8
 800aef2:	b29b      	uxth	r3, r3
 800aef4:	b2db      	uxtb	r3, r3
	uint8_t data[] = {
 800aef6:	727b      	strb	r3, [r7, #9]
			(uint8_t)(location & 0xFF),
 800aef8:	88fb      	ldrh	r3, [r7, #6]
 800aefa:	b2db      	uxtb	r3, r3
	uint8_t data[] = {
 800aefc:	72bb      	strb	r3, [r7, #10]
 800aefe:	2300      	movs	r3, #0
 800af00:	72fb      	strb	r3, [r7, #11]
 800af02:	2301      	movs	r3, #1
 800af04:	733b      	strb	r3, [r7, #12]
			0x00,
			0x01
	};
	return FZ3387_SEND_CMD_PACKET(data, sizeof(data));
 800af06:	f107 0308 	add.w	r3, r7, #8
 800af0a:	2105      	movs	r1, #5
 800af0c:	4618      	mov	r0, r3
 800af0e:	f7ff ff49 	bl	800ada4 <FZ3387_SEND_CMD_PACKET>
 800af12:	4603      	mov	r3, r0
}
 800af14:	4618      	mov	r0, r3
 800af16:	3710      	adds	r7, #16
 800af18:	46bd      	mov	sp, r7
 800af1a:	bd80      	pop	{r7, pc}

0800af1c <FZ3387_emptyDatabase>:
    @returns <code>FINGERPRINT_OK</code> on success
    @returns <code>FINGERPRINT_BADLOCATION</code> if the location is invalid
    @returns <code>FINGERPRINT_FLASHERR</code> if the model couldn't be written to flash memory
    @returns <code>FINGERPRINT_PACKETRECIEVEERR</code> on communication error
 */
uint8_t FZ3387_emptyDatabase(void) {
 800af1c:	b580      	push	{r7, lr}
 800af1e:	b082      	sub	sp, #8
 800af20:	af00      	add	r7, sp, #0
	uint8_t data[] = {
 800af22:	230d      	movs	r3, #13
 800af24:	713b      	strb	r3, [r7, #4]
			FINGERPRINT_EMPTY
	};
	return FZ3387_SEND_CMD_PACKET(data, sizeof(data));
 800af26:	1d3b      	adds	r3, r7, #4
 800af28:	2101      	movs	r1, #1
 800af2a:	4618      	mov	r0, r3
 800af2c:	f7ff ff3a 	bl	800ada4 <FZ3387_SEND_CMD_PACKET>
 800af30:	4603      	mov	r3, r0
}
 800af32:	4618      	mov	r0, r3
 800af34:	3708      	adds	r7, #8
 800af36:	46bd      	mov	sp, r7
 800af38:	bd80      	pop	{r7, pc}
	...

0800af3c <FZ3387_fingerFastSearch>:
    @returns <code>FINGERPRINT_OK</code> on fingerprint match success
    @returns <code>FINGERPRINT_NOTFOUND</code> no match made
    @returns <code>FINGERPRINT_PACKETRECIEVEERR</code> on communication error
 */
/**************************************************************************/
uint8_t FZ3387_fingerFastSearch(void) {
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b082      	sub	sp, #8
 800af40:	af00      	add	r7, sp, #0
	uint8_t data[] = {
 800af42:	4a21      	ldr	r2, [pc, #132]	; (800afc8 <FZ3387_fingerFastSearch+0x8c>)
 800af44:	463b      	mov	r3, r7
 800af46:	e892 0003 	ldmia.w	r2, {r0, r1}
 800af4a:	6018      	str	r0, [r3, #0]
 800af4c:	3304      	adds	r3, #4
 800af4e:	8019      	strh	r1, [r3, #0]
			0x00,
			0x00,
			0xA3
	};
	// high speed search of slot #1 starting at page 0x0000 and page #0x00A3
	FZ3387_SEND_CMD_PACKET(data, sizeof(data));
 800af50:	463b      	mov	r3, r7
 800af52:	2106      	movs	r1, #6
 800af54:	4618      	mov	r0, r3
 800af56:	f7ff ff25 	bl	800ada4 <FZ3387_SEND_CMD_PACKET>
	fingerID = 0xFFFF;
 800af5a:	4b1c      	ldr	r3, [pc, #112]	; (800afcc <FZ3387_fingerFastSearch+0x90>)
 800af5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800af60:	801a      	strh	r2, [r3, #0]
	fingerConfidence = 0xFFFF;
 800af62:	4b1b      	ldr	r3, [pc, #108]	; (800afd0 <FZ3387_fingerFastSearch+0x94>)
 800af64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800af68:	801a      	strh	r2, [r3, #0]

	fingerID = packet.data[1];
 800af6a:	4b1a      	ldr	r3, [pc, #104]	; (800afd4 <FZ3387_fingerFastSearch+0x98>)
 800af6c:	7adb      	ldrb	r3, [r3, #11]
 800af6e:	b29a      	uxth	r2, r3
 800af70:	4b16      	ldr	r3, [pc, #88]	; (800afcc <FZ3387_fingerFastSearch+0x90>)
 800af72:	801a      	strh	r2, [r3, #0]
	fingerID <<= 8;
 800af74:	4b15      	ldr	r3, [pc, #84]	; (800afcc <FZ3387_fingerFastSearch+0x90>)
 800af76:	881b      	ldrh	r3, [r3, #0]
 800af78:	021b      	lsls	r3, r3, #8
 800af7a:	b29a      	uxth	r2, r3
 800af7c:	4b13      	ldr	r3, [pc, #76]	; (800afcc <FZ3387_fingerFastSearch+0x90>)
 800af7e:	801a      	strh	r2, [r3, #0]
	fingerID |= packet.data[2];
 800af80:	4b14      	ldr	r3, [pc, #80]	; (800afd4 <FZ3387_fingerFastSearch+0x98>)
 800af82:	7b1b      	ldrb	r3, [r3, #12]
 800af84:	b29a      	uxth	r2, r3
 800af86:	4b11      	ldr	r3, [pc, #68]	; (800afcc <FZ3387_fingerFastSearch+0x90>)
 800af88:	881b      	ldrh	r3, [r3, #0]
 800af8a:	4313      	orrs	r3, r2
 800af8c:	b29a      	uxth	r2, r3
 800af8e:	4b0f      	ldr	r3, [pc, #60]	; (800afcc <FZ3387_fingerFastSearch+0x90>)
 800af90:	801a      	strh	r2, [r3, #0]

	fingerConfidence = packet.data[3];
 800af92:	4b10      	ldr	r3, [pc, #64]	; (800afd4 <FZ3387_fingerFastSearch+0x98>)
 800af94:	7b5b      	ldrb	r3, [r3, #13]
 800af96:	b29a      	uxth	r2, r3
 800af98:	4b0d      	ldr	r3, [pc, #52]	; (800afd0 <FZ3387_fingerFastSearch+0x94>)
 800af9a:	801a      	strh	r2, [r3, #0]
	fingerConfidence <<= 8;
 800af9c:	4b0c      	ldr	r3, [pc, #48]	; (800afd0 <FZ3387_fingerFastSearch+0x94>)
 800af9e:	881b      	ldrh	r3, [r3, #0]
 800afa0:	021b      	lsls	r3, r3, #8
 800afa2:	b29a      	uxth	r2, r3
 800afa4:	4b0a      	ldr	r3, [pc, #40]	; (800afd0 <FZ3387_fingerFastSearch+0x94>)
 800afa6:	801a      	strh	r2, [r3, #0]
	fingerConfidence |= packet.data[4];
 800afa8:	4b0a      	ldr	r3, [pc, #40]	; (800afd4 <FZ3387_fingerFastSearch+0x98>)
 800afaa:	7b9b      	ldrb	r3, [r3, #14]
 800afac:	b29a      	uxth	r2, r3
 800afae:	4b08      	ldr	r3, [pc, #32]	; (800afd0 <FZ3387_fingerFastSearch+0x94>)
 800afb0:	881b      	ldrh	r3, [r3, #0]
 800afb2:	4313      	orrs	r3, r2
 800afb4:	b29a      	uxth	r2, r3
 800afb6:	4b06      	ldr	r3, [pc, #24]	; (800afd0 <FZ3387_fingerFastSearch+0x94>)
 800afb8:	801a      	strh	r2, [r3, #0]

	return packet.data[0];
 800afba:	4b06      	ldr	r3, [pc, #24]	; (800afd4 <FZ3387_fingerFastSearch+0x98>)
 800afbc:	7a9b      	ldrb	r3, [r3, #10]
}
 800afbe:	4618      	mov	r0, r3
 800afc0:	3708      	adds	r7, #8
 800afc2:	46bd      	mov	sp, r7
 800afc4:	bd80      	pop	{r7, pc}
 800afc6:	bf00      	nop
 800afc8:	08011f70 	.word	0x08011f70
 800afcc:	20007494 	.word	0x20007494
 800afd0:	200074e4 	.word	0x200074e4
 800afd4:	20007498 	.word	0x20007498

0800afd8 <FZ3387_setPacket>:
/*!
    @brief Packet conversion
 */
/**************************************************************************/

void FZ3387_setPacket(uint8_t type, uint16_t length, uint8_t * data) {
 800afd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800afda:	b083      	sub	sp, #12
 800afdc:	af00      	add	r7, sp, #0
 800afde:	4603      	mov	r3, r0
 800afe0:	603a      	str	r2, [r7, #0]
 800afe2:	71fb      	strb	r3, [r7, #7]
 800afe4:	460b      	mov	r3, r1
 800afe6:	80bb      	strh	r3, [r7, #4]
	packet.start_code = FINGERPRINT_STARTCODE;
 800afe8:	4b1c      	ldr	r3, [pc, #112]	; (800b05c <FZ3387_setPacket+0x84>)
 800afea:	f64e 7201 	movw	r2, #61185	; 0xef01
 800afee:	801a      	strh	r2, [r3, #0]
	packet.type = type;
 800aff0:	4a1a      	ldr	r2, [pc, #104]	; (800b05c <FZ3387_setPacket+0x84>)
 800aff2:	79fb      	ldrb	r3, [r7, #7]
 800aff4:	7193      	strb	r3, [r2, #6]
	packet.length = length;
 800aff6:	4a19      	ldr	r2, [pc, #100]	; (800b05c <FZ3387_setPacket+0x84>)
 800aff8:	88bb      	ldrh	r3, [r7, #4]
 800affa:	8113      	strh	r3, [r2, #8]
	packet.address[0] = (uint8_t)(FINGERPRINT_ADDRESS >> 24);
 800affc:	4b17      	ldr	r3, [pc, #92]	; (800b05c <FZ3387_setPacket+0x84>)
 800affe:	22ff      	movs	r2, #255	; 0xff
 800b000:	709a      	strb	r2, [r3, #2]
	packet.address[1] = (uint8_t)(FINGERPRINT_ADDRESS >> 16);
 800b002:	4b16      	ldr	r3, [pc, #88]	; (800b05c <FZ3387_setPacket+0x84>)
 800b004:	22ff      	movs	r2, #255	; 0xff
 800b006:	70da      	strb	r2, [r3, #3]
	packet.address[2] = (uint8_t)(FINGERPRINT_ADDRESS >> 8);
 800b008:	4b14      	ldr	r3, [pc, #80]	; (800b05c <FZ3387_setPacket+0x84>)
 800b00a:	22ff      	movs	r2, #255	; 0xff
 800b00c:	711a      	strb	r2, [r3, #4]
	packet.address[3] = (uint8_t)(FINGERPRINT_ADDRESS & 0xFF);
 800b00e:	4b13      	ldr	r3, [pc, #76]	; (800b05c <FZ3387_setPacket+0x84>)
 800b010:	22ff      	movs	r2, #255	; 0xff
 800b012:	715a      	strb	r2, [r3, #5]

	if(length<64)
 800b014:	88bb      	ldrh	r3, [r7, #4]
 800b016:	2b3f      	cmp	r3, #63	; 0x3f
 800b018:	d806      	bhi.n	800b028 <FZ3387_setPacket+0x50>
		memcpy(packet.data, data, length);
 800b01a:	88bb      	ldrh	r3, [r7, #4]
 800b01c:	461a      	mov	r2, r3
 800b01e:	6839      	ldr	r1, [r7, #0]
 800b020:	480f      	ldr	r0, [pc, #60]	; (800b060 <FZ3387_setPacket+0x88>)
 800b022:	f003 fa93 	bl	800e54c <memcpy>
	else
		memcpy(packet.data, data, 64);
}
 800b026:	e015      	b.n	800b054 <FZ3387_setPacket+0x7c>
		memcpy(packet.data, data, 64);
 800b028:	4a0c      	ldr	r2, [pc, #48]	; (800b05c <FZ3387_setPacket+0x84>)
 800b02a:	683b      	ldr	r3, [r7, #0]
 800b02c:	f102 000a 	add.w	r0, r2, #10
 800b030:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800b034:	4602      	mov	r2, r0
 800b036:	4619      	mov	r1, r3
 800b038:	f8d1 c000 	ldr.w	ip, [r1]
 800b03c:	684e      	ldr	r6, [r1, #4]
 800b03e:	688d      	ldr	r5, [r1, #8]
 800b040:	68c9      	ldr	r1, [r1, #12]
 800b042:	f8c2 c000 	str.w	ip, [r2]
 800b046:	6056      	str	r6, [r2, #4]
 800b048:	6095      	str	r5, [r2, #8]
 800b04a:	60d1      	str	r1, [r2, #12]
 800b04c:	3310      	adds	r3, #16
 800b04e:	3010      	adds	r0, #16
 800b050:	42a3      	cmp	r3, r4
 800b052:	d1ef      	bne.n	800b034 <FZ3387_setPacket+0x5c>
}
 800b054:	bf00      	nop
 800b056:	370c      	adds	r7, #12
 800b058:	46bd      	mov	sp, r7
 800b05a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b05c:	20007498 	.word	0x20007498
 800b060:	200074a2 	.word	0x200074a2

0800b064 <FZ3387_writeStructuredPacket>:
    @brief   Helper function to process a packet and send it over UART to the sensor
    @param   packet A structure containing the bytes to transmit
 */
/**************************************************************************/

void FZ3387_writeStructuredPacket(void) {
 800b064:	b580      	push	{r7, lr}
 800b066:	b082      	sub	sp, #8
 800b068:	af00      	add	r7, sp, #0
	FZ3387_SERIAL_WRITE_U16(packet.start_code);
 800b06a:	4b2c      	ldr	r3, [pc, #176]	; (800b11c <FZ3387_writeStructuredPacket+0xb8>)
 800b06c:	881b      	ldrh	r3, [r3, #0]
 800b06e:	4618      	mov	r0, r3
 800b070:	f7ff fe82 	bl	800ad78 <FZ3387_SERIAL_WRITE_U16>
	FZ3387_SERIAL_WRITE(packet.address[0]);
 800b074:	4b29      	ldr	r3, [pc, #164]	; (800b11c <FZ3387_writeStructuredPacket+0xb8>)
 800b076:	789b      	ldrb	r3, [r3, #2]
 800b078:	4618      	mov	r0, r3
 800b07a:	f7ff fe6b 	bl	800ad54 <FZ3387_SERIAL_WRITE>
	FZ3387_SERIAL_WRITE(packet.address[1]);
 800b07e:	4b27      	ldr	r3, [pc, #156]	; (800b11c <FZ3387_writeStructuredPacket+0xb8>)
 800b080:	78db      	ldrb	r3, [r3, #3]
 800b082:	4618      	mov	r0, r3
 800b084:	f7ff fe66 	bl	800ad54 <FZ3387_SERIAL_WRITE>
	FZ3387_SERIAL_WRITE(packet.address[2]);
 800b088:	4b24      	ldr	r3, [pc, #144]	; (800b11c <FZ3387_writeStructuredPacket+0xb8>)
 800b08a:	791b      	ldrb	r3, [r3, #4]
 800b08c:	4618      	mov	r0, r3
 800b08e:	f7ff fe61 	bl	800ad54 <FZ3387_SERIAL_WRITE>
	FZ3387_SERIAL_WRITE(packet.address[3]);
 800b092:	4b22      	ldr	r3, [pc, #136]	; (800b11c <FZ3387_writeStructuredPacket+0xb8>)
 800b094:	795b      	ldrb	r3, [r3, #5]
 800b096:	4618      	mov	r0, r3
 800b098:	f7ff fe5c 	bl	800ad54 <FZ3387_SERIAL_WRITE>
	FZ3387_SERIAL_WRITE(packet.type);
 800b09c:	4b1f      	ldr	r3, [pc, #124]	; (800b11c <FZ3387_writeStructuredPacket+0xb8>)
 800b09e:	799b      	ldrb	r3, [r3, #6]
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	f7ff fe57 	bl	800ad54 <FZ3387_SERIAL_WRITE>

	uint16_t wire_length = packet.length + 2;
 800b0a6:	4b1d      	ldr	r3, [pc, #116]	; (800b11c <FZ3387_writeStructuredPacket+0xb8>)
 800b0a8:	891b      	ldrh	r3, [r3, #8]
 800b0aa:	3302      	adds	r3, #2
 800b0ac:	807b      	strh	r3, [r7, #2]
	FZ3387_SERIAL_WRITE_U16(wire_length);
 800b0ae:	887b      	ldrh	r3, [r7, #2]
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	f7ff fe61 	bl	800ad78 <FZ3387_SERIAL_WRITE_U16>

	uint16_t sum = ((wire_length)>>8) + ((wire_length)&0xFF) + packet.type;
 800b0b6:	887b      	ldrh	r3, [r7, #2]
 800b0b8:	0a1b      	lsrs	r3, r3, #8
 800b0ba:	b29a      	uxth	r2, r3
 800b0bc:	887b      	ldrh	r3, [r7, #2]
 800b0be:	b2db      	uxtb	r3, r3
 800b0c0:	b29b      	uxth	r3, r3
 800b0c2:	4413      	add	r3, r2
 800b0c4:	b29a      	uxth	r2, r3
 800b0c6:	4b15      	ldr	r3, [pc, #84]	; (800b11c <FZ3387_writeStructuredPacket+0xb8>)
 800b0c8:	799b      	ldrb	r3, [r3, #6]
 800b0ca:	b29b      	uxth	r3, r3
 800b0cc:	4413      	add	r3, r2
 800b0ce:	80fb      	strh	r3, [r7, #6]
	for (uint8_t i=0; i< packet.length; i++) {
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	717b      	strb	r3, [r7, #5]
 800b0d4:	e011      	b.n	800b0fa <FZ3387_writeStructuredPacket+0x96>
		FZ3387_SERIAL_WRITE(packet.data[i]);
 800b0d6:	797b      	ldrb	r3, [r7, #5]
 800b0d8:	4a10      	ldr	r2, [pc, #64]	; (800b11c <FZ3387_writeStructuredPacket+0xb8>)
 800b0da:	4413      	add	r3, r2
 800b0dc:	7a9b      	ldrb	r3, [r3, #10]
 800b0de:	4618      	mov	r0, r3
 800b0e0:	f7ff fe38 	bl	800ad54 <FZ3387_SERIAL_WRITE>
		sum += packet.data[i];
 800b0e4:	797b      	ldrb	r3, [r7, #5]
 800b0e6:	4a0d      	ldr	r2, [pc, #52]	; (800b11c <FZ3387_writeStructuredPacket+0xb8>)
 800b0e8:	4413      	add	r3, r2
 800b0ea:	7a9b      	ldrb	r3, [r3, #10]
 800b0ec:	b29a      	uxth	r2, r3
 800b0ee:	88fb      	ldrh	r3, [r7, #6]
 800b0f0:	4413      	add	r3, r2
 800b0f2:	80fb      	strh	r3, [r7, #6]
	for (uint8_t i=0; i< packet.length; i++) {
 800b0f4:	797b      	ldrb	r3, [r7, #5]
 800b0f6:	3301      	adds	r3, #1
 800b0f8:	717b      	strb	r3, [r7, #5]
 800b0fa:	797b      	ldrb	r3, [r7, #5]
 800b0fc:	b29a      	uxth	r2, r3
 800b0fe:	4b07      	ldr	r3, [pc, #28]	; (800b11c <FZ3387_writeStructuredPacket+0xb8>)
 800b100:	891b      	ldrh	r3, [r3, #8]
 800b102:	429a      	cmp	r2, r3
 800b104:	d3e7      	bcc.n	800b0d6 <FZ3387_writeStructuredPacket+0x72>
	}

	FZ3387_SERIAL_WRITE_U16(sum);
 800b106:	88fb      	ldrh	r3, [r7, #6]
 800b108:	4618      	mov	r0, r3
 800b10a:	f7ff fe35 	bl	800ad78 <FZ3387_SERIAL_WRITE_U16>

	osDelay(250);
 800b10e:	20fa      	movs	r0, #250	; 0xfa
 800b110:	f7fa fc07 	bl	8005922 <osDelay>
}
 800b114:	bf00      	nop
 800b116:	3708      	adds	r7, #8
 800b118:	46bd      	mov	sp, r7
 800b11a:	bd80      	pop	{r7, pc}
 800b11c:	20007498 	.word	0x20007498

0800b120 <FZ3387_getStructuredPacket>:
    @param   timeout how many milliseconds we're willing to wait
    @returns <code>FINGERPRINT_OK</code> on success
    @returns <code>FINGERPRINT_TIMEOUT</code> or <code>FINGERPRINT_BADPACKET</code> on failure
 */
/**************************************************************************/
uint8_t FZ3387_getStructuredPacket(void) {
 800b120:	b480      	push	{r7}
 800b122:	b083      	sub	sp, #12
 800b124:	af00      	add	r7, sp, #0
	uint8_t byte;
	uint16_t idx=0;
 800b126:	2300      	movs	r3, #0
 800b128:	80fb      	strh	r3, [r7, #6]

	while(1){
		byte = FINGER_UART_RX_Buffer[idx];
 800b12a:	88fb      	ldrh	r3, [r7, #6]
 800b12c:	4a36      	ldr	r2, [pc, #216]	; (800b208 <FZ3387_getStructuredPacket+0xe8>)
 800b12e:	5cd3      	ldrb	r3, [r2, r3]
 800b130:	717b      	strb	r3, [r7, #5]

		switch (idx) {
 800b132:	88fb      	ldrh	r3, [r7, #6]
 800b134:	2b08      	cmp	r3, #8
 800b136:	d84c      	bhi.n	800b1d2 <FZ3387_getStructuredPacket+0xb2>
 800b138:	a201      	add	r2, pc, #4	; (adr r2, 800b140 <FZ3387_getStructuredPacket+0x20>)
 800b13a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b13e:	bf00      	nop
 800b140:	0800b165 	.word	0x0800b165
 800b144:	0800b17d 	.word	0x0800b17d
 800b148:	0800b19d 	.word	0x0800b19d
 800b14c:	0800b19d 	.word	0x0800b19d
 800b150:	0800b19d 	.word	0x0800b19d
 800b154:	0800b19d 	.word	0x0800b19d
 800b158:	0800b1ab 	.word	0x0800b1ab
 800b15c:	0800b1b3 	.word	0x0800b1b3
 800b160:	0800b1c1 	.word	0x0800b1c1
		case 0:
			if (byte != (FINGERPRINT_STARTCODE >> 8)){
 800b164:	797b      	ldrb	r3, [r7, #5]
 800b166:	2bef      	cmp	r3, #239	; 0xef
 800b168:	d001      	beq.n	800b16e <FZ3387_getStructuredPacket+0x4e>
				// continue;
				return FINGERPRINT_BADPACKET;
 800b16a:	23fe      	movs	r3, #254	; 0xfe
 800b16c:	e046      	b.n	800b1fc <FZ3387_getStructuredPacket+0xdc>
			}
			packet.start_code = (uint16_t)byte << 8;
 800b16e:	797b      	ldrb	r3, [r7, #5]
 800b170:	b29b      	uxth	r3, r3
 800b172:	021b      	lsls	r3, r3, #8
 800b174:	b29a      	uxth	r2, r3
 800b176:	4b25      	ldr	r3, [pc, #148]	; (800b20c <FZ3387_getStructuredPacket+0xec>)
 800b178:	801a      	strh	r2, [r3, #0]
			break;
 800b17a:	e03b      	b.n	800b1f4 <FZ3387_getStructuredPacket+0xd4>
		case 1:
			packet.start_code |= byte;
 800b17c:	4b23      	ldr	r3, [pc, #140]	; (800b20c <FZ3387_getStructuredPacket+0xec>)
 800b17e:	881a      	ldrh	r2, [r3, #0]
 800b180:	797b      	ldrb	r3, [r7, #5]
 800b182:	b29b      	uxth	r3, r3
 800b184:	4313      	orrs	r3, r2
 800b186:	b29a      	uxth	r2, r3
 800b188:	4b20      	ldr	r3, [pc, #128]	; (800b20c <FZ3387_getStructuredPacket+0xec>)
 800b18a:	801a      	strh	r2, [r3, #0]
			if (packet.start_code != FINGERPRINT_STARTCODE){
 800b18c:	4b1f      	ldr	r3, [pc, #124]	; (800b20c <FZ3387_getStructuredPacket+0xec>)
 800b18e:	881b      	ldrh	r3, [r3, #0]
 800b190:	f64e 7201 	movw	r2, #61185	; 0xef01
 800b194:	4293      	cmp	r3, r2
 800b196:	d02a      	beq.n	800b1ee <FZ3387_getStructuredPacket+0xce>
				return FINGERPRINT_BADPACKET;
 800b198:	23fe      	movs	r3, #254	; 0xfe
 800b19a:	e02f      	b.n	800b1fc <FZ3387_getStructuredPacket+0xdc>
			break;
		case 2:
		case 3:
		case 4:
		case 5:
			packet.address[idx-2] = byte;
 800b19c:	88fb      	ldrh	r3, [r7, #6]
 800b19e:	3b02      	subs	r3, #2
 800b1a0:	4a1a      	ldr	r2, [pc, #104]	; (800b20c <FZ3387_getStructuredPacket+0xec>)
 800b1a2:	4413      	add	r3, r2
 800b1a4:	797a      	ldrb	r2, [r7, #5]
 800b1a6:	709a      	strb	r2, [r3, #2]
			break;
 800b1a8:	e024      	b.n	800b1f4 <FZ3387_getStructuredPacket+0xd4>
		case 6:
			packet.type = byte;
 800b1aa:	4a18      	ldr	r2, [pc, #96]	; (800b20c <FZ3387_getStructuredPacket+0xec>)
 800b1ac:	797b      	ldrb	r3, [r7, #5]
 800b1ae:	7193      	strb	r3, [r2, #6]
			break;
 800b1b0:	e020      	b.n	800b1f4 <FZ3387_getStructuredPacket+0xd4>
		case 7:
			packet.length = (uint16_t)byte << 8;
 800b1b2:	797b      	ldrb	r3, [r7, #5]
 800b1b4:	b29b      	uxth	r3, r3
 800b1b6:	021b      	lsls	r3, r3, #8
 800b1b8:	b29a      	uxth	r2, r3
 800b1ba:	4b14      	ldr	r3, [pc, #80]	; (800b20c <FZ3387_getStructuredPacket+0xec>)
 800b1bc:	811a      	strh	r2, [r3, #8]
			break;
 800b1be:	e019      	b.n	800b1f4 <FZ3387_getStructuredPacket+0xd4>
		case 8:
			packet.length |= byte;
 800b1c0:	4b12      	ldr	r3, [pc, #72]	; (800b20c <FZ3387_getStructuredPacket+0xec>)
 800b1c2:	891a      	ldrh	r2, [r3, #8]
 800b1c4:	797b      	ldrb	r3, [r7, #5]
 800b1c6:	b29b      	uxth	r3, r3
 800b1c8:	4313      	orrs	r3, r2
 800b1ca:	b29a      	uxth	r2, r3
 800b1cc:	4b0f      	ldr	r3, [pc, #60]	; (800b20c <FZ3387_getStructuredPacket+0xec>)
 800b1ce:	811a      	strh	r2, [r3, #8]
			break;
 800b1d0:	e010      	b.n	800b1f4 <FZ3387_getStructuredPacket+0xd4>
		default:
			packet.data[idx-9] = byte;
 800b1d2:	88fb      	ldrh	r3, [r7, #6]
 800b1d4:	3b09      	subs	r3, #9
 800b1d6:	4a0d      	ldr	r2, [pc, #52]	; (800b20c <FZ3387_getStructuredPacket+0xec>)
 800b1d8:	4413      	add	r3, r2
 800b1da:	797a      	ldrb	r2, [r7, #5]
 800b1dc:	729a      	strb	r2, [r3, #10]
			if((idx-8) == packet.length){
 800b1de:	88fb      	ldrh	r3, [r7, #6]
 800b1e0:	3b08      	subs	r3, #8
 800b1e2:	4a0a      	ldr	r2, [pc, #40]	; (800b20c <FZ3387_getStructuredPacket+0xec>)
 800b1e4:	8912      	ldrh	r2, [r2, #8]
 800b1e6:	4293      	cmp	r3, r2
 800b1e8:	d103      	bne.n	800b1f2 <FZ3387_getStructuredPacket+0xd2>
				return FINGERPRINT_OK;
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	e006      	b.n	800b1fc <FZ3387_getStructuredPacket+0xdc>
			break;
 800b1ee:	bf00      	nop
 800b1f0:	e000      	b.n	800b1f4 <FZ3387_getStructuredPacket+0xd4>
			}
			break;
 800b1f2:	bf00      	nop
		}
		idx++;
 800b1f4:	88fb      	ldrh	r3, [r7, #6]
 800b1f6:	3301      	adds	r3, #1
 800b1f8:	80fb      	strh	r3, [r7, #6]
		byte = FINGER_UART_RX_Buffer[idx];
 800b1fa:	e796      	b.n	800b12a <FZ3387_getStructuredPacket+0xa>
	}

	// Shouldn't get here so...
	return FINGERPRINT_BADPACKET;
}
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	370c      	adds	r7, #12
 800b200:	46bd      	mov	sp, r7
 800b202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b206:	4770      	bx	lr
 800b208:	20006780 	.word	0x20006780
 800b20c:	20007498 	.word	0x20007498

0800b210 <MEMS_Init>:
 *  Created on: Aug 23, 2019
 *      Author: Puja
 */
#include <_mems.h>

void MEMS_Init(I2C_HandleTypeDef* i2c, SD_MPU6050* mpu){
 800b210:	b580      	push	{r7, lr}
 800b212:	b086      	sub	sp, #24
 800b214:	af02      	add	r7, sp, #8
 800b216:	6078      	str	r0, [r7, #4]
 800b218:	6039      	str	r1, [r7, #0]
	SD_MPU6050_Result result;

	do {
		// turn off module
		HAL_GPIO_WritePin(MEMS_PWR_GPIO_Port, MEMS_PWR_Pin, GPIO_PIN_RESET);
 800b21a:	2200      	movs	r2, #0
 800b21c:	2140      	movs	r1, #64	; 0x40
 800b21e:	4811      	ldr	r0, [pc, #68]	; (800b264 <MEMS_Init+0x54>)
 800b220:	f7f7 f8f0 	bl	8002404 <HAL_GPIO_WritePin>
		osDelay(50);
 800b224:	2032      	movs	r0, #50	; 0x32
 800b226:	f7fa fb7c 	bl	8005922 <osDelay>
		// turn on module
		HAL_GPIO_WritePin(MEMS_PWR_GPIO_Port, MEMS_PWR_Pin, GPIO_PIN_SET);
 800b22a:	2201      	movs	r2, #1
 800b22c:	2140      	movs	r1, #64	; 0x40
 800b22e:	480d      	ldr	r0, [pc, #52]	; (800b264 <MEMS_Init+0x54>)
 800b230:	f7f7 f8e8 	bl	8002404 <HAL_GPIO_WritePin>
		osDelay(50);
 800b234:	2032      	movs	r0, #50	; 0x32
 800b236:	f7fa fb74 	bl	8005922 <osDelay>
		// module initialization
		result = SD_MPU6050_Init(i2c, mpu,
 800b23a:	2300      	movs	r3, #0
 800b23c:	9300      	str	r3, [sp, #0]
 800b23e:	2303      	movs	r3, #3
 800b240:	2200      	movs	r2, #0
 800b242:	6839      	ldr	r1, [r7, #0]
 800b244:	6878      	ldr	r0, [r7, #4]
 800b246:	f000 f933 	bl	800b4b0 <SD_MPU6050_Init>
 800b24a:	4603      	mov	r3, r0
 800b24c:	73fb      	strb	r3, [r7, #15]
				SD_MPU6050_Device_0, SD_MPU6050_Accelerometer_16G, SD_MPU6050_Gyroscope_250s
		);
		osDelay(1000);
 800b24e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b252:	f7fa fb66 	bl	8005922 <osDelay>
	} while(result != SD_MPU6050_Result_Ok);
 800b256:	7bfb      	ldrb	r3, [r7, #15]
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d1de      	bne.n	800b21a <MEMS_Init+0xa>
}
 800b25c:	bf00      	nop
 800b25e:	3710      	adds	r7, #16
 800b260:	46bd      	mov	sp, r7
 800b262:	bd80      	pop	{r7, pc}
 800b264:	40020800 	.word	0x40020800

0800b268 <MEMS_Average>:

mems_t MEMS_Average(I2C_HandleTypeDef* i2c, SD_MPU6050* mpu, mems_t* calibrator, uint16_t sample) {
 800b268:	b5b0      	push	{r4, r5, r7, lr}
 800b26a:	b08c      	sub	sp, #48	; 0x30
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	60f8      	str	r0, [r7, #12]
 800b270:	60b9      	str	r1, [r7, #8]
 800b272:	607a      	str	r2, [r7, #4]
 800b274:	603b      	str	r3, [r7, #0]
	uint16_t i;
	mems_t mems;
	// reset value
	mems.accelerometer.x = 0;
 800b276:	2300      	movs	r3, #0
 800b278:	617b      	str	r3, [r7, #20]
	mems.accelerometer.y = 0;
 800b27a:	2300      	movs	r3, #0
 800b27c:	61bb      	str	r3, [r7, #24]
	mems.accelerometer.z = 0;
 800b27e:	2300      	movs	r3, #0
 800b280:	61fb      	str	r3, [r7, #28]
	mems.gyroscope.x = 0;
 800b282:	2300      	movs	r3, #0
 800b284:	623b      	str	r3, [r7, #32]
	mems.gyroscope.y = 0;
 800b286:	2300      	movs	r3, #0
 800b288:	627b      	str	r3, [r7, #36]	; 0x24
	mems.gyroscope.z = 0;
 800b28a:	2300      	movs	r3, #0
 800b28c:	62bb      	str	r3, [r7, #40]	; 0x28
	// sampling
	for(i=0; i<sample; i++){
 800b28e:	2300      	movs	r3, #0
 800b290:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800b292:	e02a      	b.n	800b2ea <MEMS_Average+0x82>
		// read sensor
		SD_MPU6050_ReadAll(i2c, mpu);
 800b294:	6879      	ldr	r1, [r7, #4]
 800b296:	68b8      	ldr	r0, [r7, #8]
 800b298:	f000 fa88 	bl	800b7ac <SD_MPU6050_ReadAll>
		// sum all value
		mems.accelerometer.x += mpu->Gyroscope_X;
 800b29c:	697b      	ldr	r3, [r7, #20]
 800b29e:	687a      	ldr	r2, [r7, #4]
 800b2a0:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 800b2a4:	4413      	add	r3, r2
 800b2a6:	617b      	str	r3, [r7, #20]
		mems.accelerometer.y += mpu->Gyroscope_Y;
 800b2a8:	69bb      	ldr	r3, [r7, #24]
 800b2aa:	687a      	ldr	r2, [r7, #4]
 800b2ac:	f9b2 2014 	ldrsh.w	r2, [r2, #20]
 800b2b0:	4413      	add	r3, r2
 800b2b2:	61bb      	str	r3, [r7, #24]
		mems.accelerometer.z += mpu->Gyroscope_Z;
 800b2b4:	69fb      	ldr	r3, [r7, #28]
 800b2b6:	687a      	ldr	r2, [r7, #4]
 800b2b8:	f9b2 2016 	ldrsh.w	r2, [r2, #22]
 800b2bc:	4413      	add	r3, r2
 800b2be:	61fb      	str	r3, [r7, #28]
		mems.gyroscope.x += mpu->Accelerometer_X;
 800b2c0:	6a3b      	ldr	r3, [r7, #32]
 800b2c2:	687a      	ldr	r2, [r7, #4]
 800b2c4:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 800b2c8:	4413      	add	r3, r2
 800b2ca:	623b      	str	r3, [r7, #32]
		mems.gyroscope.y += mpu->Accelerometer_Y;
 800b2cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2ce:	687a      	ldr	r2, [r7, #4]
 800b2d0:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 800b2d4:	4413      	add	r3, r2
 800b2d6:	627b      	str	r3, [r7, #36]	; 0x24
		mems.gyroscope.z += mpu->Accelerometer_Z;
 800b2d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2da:	687a      	ldr	r2, [r7, #4]
 800b2dc:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 800b2e0:	4413      	add	r3, r2
 800b2e2:	62bb      	str	r3, [r7, #40]	; 0x28
	for(i=0; i<sample; i++){
 800b2e4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b2e6:	3301      	adds	r3, #1
 800b2e8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800b2ea:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b2ec:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b2f0:	429a      	cmp	r2, r3
 800b2f2:	d3cf      	bcc.n	800b294 <MEMS_Average+0x2c>
	}
	// calculate the average
	mems.accelerometer.x = mems.accelerometer.x / sample;
 800b2f4:	697a      	ldr	r2, [r7, #20]
 800b2f6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b2fa:	fb92 f3f3 	sdiv	r3, r2, r3
 800b2fe:	617b      	str	r3, [r7, #20]
	mems.accelerometer.y = mems.accelerometer.y / sample;
 800b300:	69ba      	ldr	r2, [r7, #24]
 800b302:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b306:	fb92 f3f3 	sdiv	r3, r2, r3
 800b30a:	61bb      	str	r3, [r7, #24]
	mems.accelerometer.z = mems.accelerometer.z / sample;
 800b30c:	69fa      	ldr	r2, [r7, #28]
 800b30e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b312:	fb92 f3f3 	sdiv	r3, r2, r3
 800b316:	61fb      	str	r3, [r7, #28]
	mems.gyroscope.x = mems.gyroscope.x / sample;
 800b318:	6a3a      	ldr	r2, [r7, #32]
 800b31a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b31e:	fb92 f3f3 	sdiv	r3, r2, r3
 800b322:	623b      	str	r3, [r7, #32]
	mems.gyroscope.y = mems.gyroscope.y / sample;
 800b324:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b326:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b32a:	fb92 f3f3 	sdiv	r3, r2, r3
 800b32e:	627b      	str	r3, [r7, #36]	; 0x24
	mems.gyroscope.z = mems.gyroscope.z / sample;
 800b330:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b332:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b336:	fb92 f3f3 	sdiv	r3, r2, r3
 800b33a:	62bb      	str	r3, [r7, #40]	; 0x28
	// set for calibration
	if(calibrator != NULL){
 800b33c:	683b      	ldr	r3, [r7, #0]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d01d      	beq.n	800b37e <MEMS_Average+0x116>
		mems.accelerometer.x -= calibrator->accelerometer.x;
 800b342:	697a      	ldr	r2, [r7, #20]
 800b344:	683b      	ldr	r3, [r7, #0]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	1ad3      	subs	r3, r2, r3
 800b34a:	617b      	str	r3, [r7, #20]
		mems.accelerometer.y -= calibrator->accelerometer.y;
 800b34c:	69ba      	ldr	r2, [r7, #24]
 800b34e:	683b      	ldr	r3, [r7, #0]
 800b350:	685b      	ldr	r3, [r3, #4]
 800b352:	1ad3      	subs	r3, r2, r3
 800b354:	61bb      	str	r3, [r7, #24]
		mems.accelerometer.z -= calibrator->accelerometer.z;
 800b356:	69fa      	ldr	r2, [r7, #28]
 800b358:	683b      	ldr	r3, [r7, #0]
 800b35a:	689b      	ldr	r3, [r3, #8]
 800b35c:	1ad3      	subs	r3, r2, r3
 800b35e:	61fb      	str	r3, [r7, #28]
		mems.gyroscope.x -= calibrator->gyroscope.x;
 800b360:	6a3a      	ldr	r2, [r7, #32]
 800b362:	683b      	ldr	r3, [r7, #0]
 800b364:	68db      	ldr	r3, [r3, #12]
 800b366:	1ad3      	subs	r3, r2, r3
 800b368:	623b      	str	r3, [r7, #32]
		mems.gyroscope.y -= calibrator->gyroscope.y;
 800b36a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b36c:	683b      	ldr	r3, [r7, #0]
 800b36e:	691b      	ldr	r3, [r3, #16]
 800b370:	1ad3      	subs	r3, r2, r3
 800b372:	627b      	str	r3, [r7, #36]	; 0x24
		mems.gyroscope.z -= calibrator->gyroscope.z;
 800b374:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b376:	683b      	ldr	r3, [r7, #0]
 800b378:	695b      	ldr	r3, [r3, #20]
 800b37a:	1ad3      	subs	r3, r2, r3
 800b37c:	62bb      	str	r3, [r7, #40]	; 0x28
	}

	return mems;
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	461d      	mov	r5, r3
 800b382:	f107 0414 	add.w	r4, r7, #20
 800b386:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b388:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b38a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800b38e:	e885 0003 	stmia.w	r5, {r0, r1}
}
 800b392:	68f8      	ldr	r0, [r7, #12]
 800b394:	3730      	adds	r7, #48	; 0x30
 800b396:	46bd      	mov	sp, r7
 800b398:	bdb0      	pop	{r4, r5, r7, pc}
 800b39a:	0000      	movs	r0, r0
 800b39c:	0000      	movs	r0, r0
	...

0800b3a0 <MEMS_Decision>:

mems_decision_t MEMS_Decision(I2C_HandleTypeDef* i2c, SD_MPU6050* mpu, mems_t* calibrator, uint16_t sample){
 800b3a0:	b5b0      	push	{r4, r5, r7, lr}
 800b3a2:	b092      	sub	sp, #72	; 0x48
 800b3a4:	af02      	add	r7, sp, #8
 800b3a6:	60f8      	str	r0, [r7, #12]
 800b3a8:	60b9      	str	r1, [r7, #8]
 800b3aa:	607a      	str	r2, [r7, #4]
 800b3ac:	807b      	strh	r3, [r7, #2]
	int32_t g_force, accel_limit=46000, gyro_limit=10000;
 800b3ae:	f24b 33b0 	movw	r3, #46000	; 0xb3b0
 800b3b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b3b4:	f242 7310 	movw	r3, #10000	; 0x2710
 800b3b8:	63bb      	str	r3, [r7, #56]	; 0x38
	mems_decision_t mems_decision;
	mems_t mems;
	//	char str[200];

	// get mems data
	mems = MEMS_Average(i2c, mpu, calibrator, sample);
 800b3ba:	f107 0014 	add.w	r0, r7, #20
 800b3be:	887b      	ldrh	r3, [r7, #2]
 800b3c0:	9300      	str	r3, [sp, #0]
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	68ba      	ldr	r2, [r7, #8]
 800b3c6:	68f9      	ldr	r1, [r7, #12]
 800b3c8:	f7ff ff4e 	bl	800b268 <MEMS_Average>
	// calculate g-force
	g_force = sqrt(pow(mems.accelerometer.x, 2) + pow(mems.accelerometer.y, 2) + pow(mems.accelerometer.z, 2) );
 800b3cc:	697b      	ldr	r3, [r7, #20]
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	f7f5 f8b8 	bl	8000544 <__aeabi_i2d>
 800b3d4:	4603      	mov	r3, r0
 800b3d6:	460c      	mov	r4, r1
 800b3d8:	ed9f 1b33 	vldr	d1, [pc, #204]	; 800b4a8 <MEMS_Decision+0x108>
 800b3dc:	ec44 3b10 	vmov	d0, r3, r4
 800b3e0:	f005 fbb4 	bl	8010b4c <pow>
 800b3e4:	ec55 4b10 	vmov	r4, r5, d0
 800b3e8:	69bb      	ldr	r3, [r7, #24]
 800b3ea:	4618      	mov	r0, r3
 800b3ec:	f7f5 f8aa 	bl	8000544 <__aeabi_i2d>
 800b3f0:	4602      	mov	r2, r0
 800b3f2:	460b      	mov	r3, r1
 800b3f4:	ed9f 1b2c 	vldr	d1, [pc, #176]	; 800b4a8 <MEMS_Decision+0x108>
 800b3f8:	ec43 2b10 	vmov	d0, r2, r3
 800b3fc:	f005 fba6 	bl	8010b4c <pow>
 800b400:	ec53 2b10 	vmov	r2, r3, d0
 800b404:	4620      	mov	r0, r4
 800b406:	4629      	mov	r1, r5
 800b408:	f7f4 ff50 	bl	80002ac <__adddf3>
 800b40c:	4603      	mov	r3, r0
 800b40e:	460c      	mov	r4, r1
 800b410:	4625      	mov	r5, r4
 800b412:	461c      	mov	r4, r3
 800b414:	69fb      	ldr	r3, [r7, #28]
 800b416:	4618      	mov	r0, r3
 800b418:	f7f5 f894 	bl	8000544 <__aeabi_i2d>
 800b41c:	4602      	mov	r2, r0
 800b41e:	460b      	mov	r3, r1
 800b420:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800b4a8 <MEMS_Decision+0x108>
 800b424:	ec43 2b10 	vmov	d0, r2, r3
 800b428:	f005 fb90 	bl	8010b4c <pow>
 800b42c:	ec53 2b10 	vmov	r2, r3, d0
 800b430:	4620      	mov	r0, r4
 800b432:	4629      	mov	r1, r5
 800b434:	f7f4 ff3a 	bl	80002ac <__adddf3>
 800b438:	4603      	mov	r3, r0
 800b43a:	460c      	mov	r4, r1
 800b43c:	ec44 3b17 	vmov	d7, r3, r4
 800b440:	eeb0 0a47 	vmov.f32	s0, s14
 800b444:	eef0 0a67 	vmov.f32	s1, s15
 800b448:	f005 fcf0 	bl	8010e2c <sqrt>
 800b44c:	ec54 3b10 	vmov	r3, r4, d0
 800b450:	4618      	mov	r0, r3
 800b452:	4621      	mov	r1, r4
 800b454:	f7f5 fb90 	bl	8000b78 <__aeabi_d2iz>
 800b458:	4603      	mov	r3, r0
 800b45a:	637b      	str	r3, [r7, #52]	; 0x34
	mems_decision.crash = (g_force > accel_limit);
 800b45c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b45e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b460:	429a      	cmp	r2, r3
 800b462:	bfcc      	ite	gt
 800b464:	2301      	movgt	r3, #1
 800b466:	2300      	movle	r3, #0
 800b468:	b2db      	uxtb	r3, r3
 800b46a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	// calculate movement change
	mems_decision.fall = (abs(mems.gyroscope.z) > gyro_limit);
 800b46e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b470:	2b00      	cmp	r3, #0
 800b472:	bfb8      	it	lt
 800b474:	425b      	neglt	r3, r3
 800b476:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b478:	429a      	cmp	r2, r3
 800b47a:	bfb4      	ite	lt
 800b47c:	2301      	movlt	r3, #1
 800b47e:	2300      	movge	r3, #0
 800b480:	b2db      	uxtb	r3, r3
 800b482:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	//			mems.accelerometer.x, mems.accelerometer.y, mems.accelerometer.z,
	//			mems.gyroscope.x, mems.gyroscope.y, mems.gyroscope.z
	//	);
	//	swvPrint(str);

	return mems_decision;
 800b486:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b488:	863b      	strh	r3, [r7, #48]	; 0x30
 800b48a:	2300      	movs	r3, #0
 800b48c:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800b490:	f362 0307 	bfi	r3, r2, #0, #8
 800b494:	f897 2031 	ldrb.w	r2, [r7, #49]	; 0x31
 800b498:	f362 230f 	bfi	r3, r2, #8, #8
}
 800b49c:	4618      	mov	r0, r3
 800b49e:	3740      	adds	r7, #64	; 0x40
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	bdb0      	pop	{r4, r5, r7, pc}
 800b4a4:	f3af 8000 	nop.w
 800b4a8:	00000000 	.word	0x00000000
 800b4ac:	40000000 	.word	0x40000000

0800b4b0 <SD_MPU6050_Init>:
#define MPU6050_ACCE_SENS_4			((float) 8192)
#define MPU6050_ACCE_SENS_8			((float) 4096)
#define MPU6050_ACCE_SENS_16		((float) 2048)

SD_MPU6050_Result SD_MPU6050_Init(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct, SD_MPU6050_Device DeviceNumber, SD_MPU6050_Accelerometer AccelerometerSensitivity, SD_MPU6050_Gyroscope GyroscopeSensitivity)
{
 800b4b0:	b580      	push	{r7, lr}
 800b4b2:	b08a      	sub	sp, #40	; 0x28
 800b4b4:	af02      	add	r7, sp, #8
 800b4b6:	60f8      	str	r0, [r7, #12]
 800b4b8:	60b9      	str	r1, [r7, #8]
 800b4ba:	4611      	mov	r1, r2
 800b4bc:	461a      	mov	r2, r3
 800b4be:	460b      	mov	r3, r1
 800b4c0:	71fb      	strb	r3, [r7, #7]
 800b4c2:	4613      	mov	r3, r2
 800b4c4:	71bb      	strb	r3, [r7, #6]
	uint8_t WHO_AM_I = (uint8_t)MPU6050_WHO_AM_I;
 800b4c6:	2375      	movs	r3, #117	; 0x75
 800b4c8:	76bb      	strb	r3, [r7, #26]
	uint8_t temp;
	I2C_HandleTypeDef* Handle = I2Cx;
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	61fb      	str	r3, [r7, #28]
	uint8_t d[2];


	/* Format I2C address */
	DataStruct->Address = MPU6050_I2C_ADDR | (uint8_t)DeviceNumber;
 800b4ce:	79fb      	ldrb	r3, [r7, #7]
 800b4d0:	f063 032f 	orn	r3, r3, #47	; 0x2f
 800b4d4:	b2da      	uxtb	r2, r3
 800b4d6:	68bb      	ldr	r3, [r7, #8]
 800b4d8:	701a      	strb	r2, [r3, #0]
	uint8_t address = DataStruct->Address;
 800b4da:	68bb      	ldr	r3, [r7, #8]
 800b4dc:	781b      	ldrb	r3, [r3, #0]
 800b4de:	76fb      	strb	r3, [r7, #27]

	/* Check if device is connected */
	if(HAL_I2C_IsDeviceReady(Handle,address,2,5)!=HAL_OK)
 800b4e0:	7efb      	ldrb	r3, [r7, #27]
 800b4e2:	b299      	uxth	r1, r3
 800b4e4:	2305      	movs	r3, #5
 800b4e6:	2202      	movs	r2, #2
 800b4e8:	69f8      	ldr	r0, [r7, #28]
 800b4ea:	f7f7 fc0b 	bl	8002d04 <HAL_I2C_IsDeviceReady>
 800b4ee:	4603      	mov	r3, r0
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d001      	beq.n	800b4f8 <SD_MPU6050_Init+0x48>
	{
				return SD_MPU6050_Result_Error;
 800b4f4:	2301      	movs	r3, #1
 800b4f6:	e04c      	b.n	800b592 <SD_MPU6050_Init+0xe2>
	}
	/* Check who am I */
	//------------------
		/* Send address */
		if(HAL_I2C_Master_Transmit(Handle, address, &WHO_AM_I, 1, 1000) != HAL_OK)
 800b4f8:	7efb      	ldrb	r3, [r7, #27]
 800b4fa:	b299      	uxth	r1, r3
 800b4fc:	f107 021a 	add.w	r2, r7, #26
 800b500:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b504:	9300      	str	r3, [sp, #0]
 800b506:	2301      	movs	r3, #1
 800b508:	69f8      	ldr	r0, [r7, #28]
 800b50a:	f7f7 f8d7 	bl	80026bc <HAL_I2C_Master_Transmit>
 800b50e:	4603      	mov	r3, r0
 800b510:	2b00      	cmp	r3, #0
 800b512:	d001      	beq.n	800b518 <SD_MPU6050_Init+0x68>
		{
			return SD_MPU6050_Result_Error;
 800b514:	2301      	movs	r3, #1
 800b516:	e03c      	b.n	800b592 <SD_MPU6050_Init+0xe2>
		}

		/* Receive multiple byte */
		if(HAL_I2C_Master_Receive(Handle, address, &temp, 1, 1000) != HAL_OK)
 800b518:	7efb      	ldrb	r3, [r7, #27]
 800b51a:	b299      	uxth	r1, r3
 800b51c:	f107 0219 	add.w	r2, r7, #25
 800b520:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b524:	9300      	str	r3, [sp, #0]
 800b526:	2301      	movs	r3, #1
 800b528:	69f8      	ldr	r0, [r7, #28]
 800b52a:	f7f7 f9c5 	bl	80028b8 <HAL_I2C_Master_Receive>
 800b52e:	4603      	mov	r3, r0
 800b530:	2b00      	cmp	r3, #0
 800b532:	d003      	beq.n	800b53c <SD_MPU6050_Init+0x8c>
		{
			return SD_MPU6050_Result_Error;
 800b534:	2301      	movs	r3, #1
 800b536:	e02c      	b.n	800b592 <SD_MPU6050_Init+0xe2>

		/* Checking */
		while(temp != MPU6050_I_AM)
		{
				/* Return error */
				return SD_MPU6050_Result_DeviceInvalid;
 800b538:	2303      	movs	r3, #3
 800b53a:	e02a      	b.n	800b592 <SD_MPU6050_Init+0xe2>
		while(temp != MPU6050_I_AM)
 800b53c:	bf00      	nop
 800b53e:	7e7b      	ldrb	r3, [r7, #25]
 800b540:	2b72      	cmp	r3, #114	; 0x72
 800b542:	d1f9      	bne.n	800b538 <SD_MPU6050_Init+0x88>
	//------------------

	/* Wakeup MPU6050 */
	//------------------
		/* Format array to send */
		d[0] = MPU6050_PWR_MGMT_1;
 800b544:	236b      	movs	r3, #107	; 0x6b
 800b546:	753b      	strb	r3, [r7, #20]
		d[1] = 0x00;
 800b548:	2300      	movs	r3, #0
 800b54a:	757b      	strb	r3, [r7, #21]

		/* Try to transmit via I2C */
		if(HAL_I2C_Master_Transmit(Handle,(uint16_t)address , (uint8_t *)d, 2, 1000) != HAL_OK)
 800b54c:	7efb      	ldrb	r3, [r7, #27]
 800b54e:	b299      	uxth	r1, r3
 800b550:	f107 0214 	add.w	r2, r7, #20
 800b554:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b558:	9300      	str	r3, [sp, #0]
 800b55a:	2302      	movs	r3, #2
 800b55c:	69f8      	ldr	r0, [r7, #28]
 800b55e:	f7f7 f8ad 	bl	80026bc <HAL_I2C_Master_Transmit>
 800b562:	4603      	mov	r3, r0
 800b564:	2b00      	cmp	r3, #0
 800b566:	d001      	beq.n	800b56c <SD_MPU6050_Init+0xbc>
		{
					return SD_MPU6050_Result_Error;
 800b568:	2301      	movs	r3, #1
 800b56a:	e012      	b.n	800b592 <SD_MPU6050_Init+0xe2>
		}
	//------------------

	/* Set sample rate to 1kHz */
	SD_MPU6050_SetDataRate(I2Cx,DataStruct, SD_MPU6050_DataRate_8KHz);
 800b56c:	2200      	movs	r2, #0
 800b56e:	68b9      	ldr	r1, [r7, #8]
 800b570:	68f8      	ldr	r0, [r7, #12]
 800b572:	f000 f812 	bl	800b59a <SD_MPU6050_SetDataRate>

	/* Config accelerometer */
	SD_MPU6050_SetAccelerometer(I2Cx,DataStruct, AccelerometerSensitivity);
 800b576:	79bb      	ldrb	r3, [r7, #6]
 800b578:	461a      	mov	r2, r3
 800b57a:	68b9      	ldr	r1, [r7, #8]
 800b57c:	68f8      	ldr	r0, [r7, #12]
 800b57e:	f000 f831 	bl	800b5e4 <SD_MPU6050_SetAccelerometer>

	/* Config Gyroscope */
	SD_MPU6050_SetGyroscope(I2Cx,DataStruct, GyroscopeSensitivity);
 800b582:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b586:	461a      	mov	r2, r3
 800b588:	68b9      	ldr	r1, [r7, #8]
 800b58a:	68f8      	ldr	r0, [r7, #12]
 800b58c:	f000 f89a 	bl	800b6c4 <SD_MPU6050_SetGyroscope>

	/* Return OK */
	return SD_MPU6050_Result_Ok;
 800b590:	2300      	movs	r3, #0
}
 800b592:	4618      	mov	r0, r3
 800b594:	3720      	adds	r7, #32
 800b596:	46bd      	mov	sp, r7
 800b598:	bd80      	pop	{r7, pc}

0800b59a <SD_MPU6050_SetDataRate>:

SD_MPU6050_Result SD_MPU6050_SetDataRate(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct, uint8_t rate)
{
 800b59a:	b580      	push	{r7, lr}
 800b59c:	b088      	sub	sp, #32
 800b59e:	af02      	add	r7, sp, #8
 800b5a0:	60f8      	str	r0, [r7, #12]
 800b5a2:	60b9      	str	r1, [r7, #8]
 800b5a4:	4613      	mov	r3, r2
 800b5a6:	71fb      	strb	r3, [r7, #7]
	uint8_t d[2];
	I2C_HandleTypeDef* Handle = I2Cx;
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	617b      	str	r3, [r7, #20]
	uint8_t address = DataStruct->Address;
 800b5ac:	68bb      	ldr	r3, [r7, #8]
 800b5ae:	781b      	ldrb	r3, [r3, #0]
 800b5b0:	74fb      	strb	r3, [r7, #19]
	/* Format array to send */
	d[0] = MPU6050_SMPLRT_DIV;
 800b5b2:	2319      	movs	r3, #25
 800b5b4:	743b      	strb	r3, [r7, #16]
	d[1] = rate;
 800b5b6:	79fb      	ldrb	r3, [r7, #7]
 800b5b8:	747b      	strb	r3, [r7, #17]

	/* Set data sample rate */
	while(HAL_I2C_Master_Transmit(Handle,(uint16_t)address,(uint8_t *)d,2,1000)!=HAL_OK);
 800b5ba:	bf00      	nop
 800b5bc:	7cfb      	ldrb	r3, [r7, #19]
 800b5be:	b299      	uxth	r1, r3
 800b5c0:	f107 0210 	add.w	r2, r7, #16
 800b5c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b5c8:	9300      	str	r3, [sp, #0]
 800b5ca:	2302      	movs	r3, #2
 800b5cc:	6978      	ldr	r0, [r7, #20]
 800b5ce:	f7f7 f875 	bl	80026bc <HAL_I2C_Master_Transmit>
 800b5d2:	4603      	mov	r3, r0
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d1f1      	bne.n	800b5bc <SD_MPU6050_SetDataRate+0x22>
	/*{
				return SD_MPU6050_Result_Error;
	}*/

	/* Return OK */
	return SD_MPU6050_Result_Ok;
 800b5d8:	2300      	movs	r3, #0
}
 800b5da:	4618      	mov	r0, r3
 800b5dc:	3718      	adds	r7, #24
 800b5de:	46bd      	mov	sp, r7
 800b5e0:	bd80      	pop	{r7, pc}
	...

0800b5e4 <SD_MPU6050_SetAccelerometer>:

SD_MPU6050_Result SD_MPU6050_SetAccelerometer(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct, SD_MPU6050_Accelerometer AccelerometerSensitivity)
{
 800b5e4:	b580      	push	{r7, lr}
 800b5e6:	b088      	sub	sp, #32
 800b5e8:	af02      	add	r7, sp, #8
 800b5ea:	60f8      	str	r0, [r7, #12]
 800b5ec:	60b9      	str	r1, [r7, #8]
 800b5ee:	4613      	mov	r3, r2
 800b5f0:	71fb      	strb	r3, [r7, #7]
	uint8_t temp;
	I2C_HandleTypeDef* Handle = I2Cx;
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	617b      	str	r3, [r7, #20]
	uint8_t address = DataStruct->Address;
 800b5f6:	68bb      	ldr	r3, [r7, #8]
 800b5f8:	781b      	ldrb	r3, [r3, #0]
 800b5fa:	74fb      	strb	r3, [r7, #19]
	uint8_t regAdd =(uint8_t )MPU6050_ACCEL_CONFIG;
 800b5fc:	231c      	movs	r3, #28
 800b5fe:	747b      	strb	r3, [r7, #17]

	/* Config accelerometer */
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&regAdd, 1, 1000) != HAL_OK);
 800b600:	bf00      	nop
 800b602:	7cfb      	ldrb	r3, [r7, #19]
 800b604:	b299      	uxth	r1, r3
 800b606:	f107 0211 	add.w	r2, r7, #17
 800b60a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b60e:	9300      	str	r3, [sp, #0]
 800b610:	2301      	movs	r3, #1
 800b612:	6978      	ldr	r0, [r7, #20]
 800b614:	f7f7 f852 	bl	80026bc <HAL_I2C_Master_Transmit>
 800b618:	4603      	mov	r3, r0
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d1f1      	bne.n	800b602 <SD_MPU6050_SetAccelerometer+0x1e>
	/*{
				return SD_MPU6050_Result_Error;
	}*/
	while(HAL_I2C_Master_Receive(Handle, (uint16_t)address, &temp, 1, 1000) != HAL_OK);
 800b61e:	bf00      	nop
 800b620:	7cfb      	ldrb	r3, [r7, #19]
 800b622:	b299      	uxth	r1, r3
 800b624:	f107 0212 	add.w	r2, r7, #18
 800b628:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b62c:	9300      	str	r3, [sp, #0]
 800b62e:	2301      	movs	r3, #1
 800b630:	6978      	ldr	r0, [r7, #20]
 800b632:	f7f7 f941 	bl	80028b8 <HAL_I2C_Master_Receive>
 800b636:	4603      	mov	r3, r0
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d1f1      	bne.n	800b620 <SD_MPU6050_SetAccelerometer+0x3c>
	/*{
				return SD_MPU6050_Result_Error;
	}*/
	temp = (temp & 0xE7) | (uint8_t)AccelerometerSensitivity << 3;
 800b63c:	7cbb      	ldrb	r3, [r7, #18]
 800b63e:	b25b      	sxtb	r3, r3
 800b640:	f023 0318 	bic.w	r3, r3, #24
 800b644:	b25a      	sxtb	r2, r3
 800b646:	79fb      	ldrb	r3, [r7, #7]
 800b648:	00db      	lsls	r3, r3, #3
 800b64a:	b25b      	sxtb	r3, r3
 800b64c:	4313      	orrs	r3, r2
 800b64e:	b25b      	sxtb	r3, r3
 800b650:	b2db      	uxtb	r3, r3
 800b652:	74bb      	strb	r3, [r7, #18]
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&temp, 1, 1000) != HAL_OK);
 800b654:	bf00      	nop
 800b656:	7cfb      	ldrb	r3, [r7, #19]
 800b658:	b299      	uxth	r1, r3
 800b65a:	f107 0212 	add.w	r2, r7, #18
 800b65e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b662:	9300      	str	r3, [sp, #0]
 800b664:	2301      	movs	r3, #1
 800b666:	6978      	ldr	r0, [r7, #20]
 800b668:	f7f7 f828 	bl	80026bc <HAL_I2C_Master_Transmit>
 800b66c:	4603      	mov	r3, r0
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d1f1      	bne.n	800b656 <SD_MPU6050_SetAccelerometer+0x72>
	/*{
				return SD_MPU6050_Result_Error;
	}*/

	/* Set sensitivities for multiplying gyro and accelerometer data */
	switch (AccelerometerSensitivity) {
 800b672:	79fb      	ldrb	r3, [r7, #7]
 800b674:	2b03      	cmp	r3, #3
 800b676:	d81f      	bhi.n	800b6b8 <SD_MPU6050_SetAccelerometer+0xd4>
 800b678:	a201      	add	r2, pc, #4	; (adr r2, 800b680 <SD_MPU6050_SetAccelerometer+0x9c>)
 800b67a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b67e:	bf00      	nop
 800b680:	0800b691 	.word	0x0800b691
 800b684:	0800b69b 	.word	0x0800b69b
 800b688:	0800b6a5 	.word	0x0800b6a5
 800b68c:	0800b6af 	.word	0x0800b6af
		case SD_MPU6050_Accelerometer_2G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_2;
 800b690:	68bb      	ldr	r3, [r7, #8]
 800b692:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 800b696:	609a      	str	r2, [r3, #8]
			break;
 800b698:	e00f      	b.n	800b6ba <SD_MPU6050_SetAccelerometer+0xd6>
		case SD_MPU6050_Accelerometer_4G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_4;
 800b69a:	68bb      	ldr	r3, [r7, #8]
 800b69c:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 800b6a0:	609a      	str	r2, [r3, #8]
			break;
 800b6a2:	e00a      	b.n	800b6ba <SD_MPU6050_SetAccelerometer+0xd6>
		case SD_MPU6050_Accelerometer_8G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_8;
 800b6a4:	68bb      	ldr	r3, [r7, #8]
 800b6a6:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 800b6aa:	609a      	str	r2, [r3, #8]
			break;
 800b6ac:	e005      	b.n	800b6ba <SD_MPU6050_SetAccelerometer+0xd6>
		case SD_MPU6050_Accelerometer_16G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_16;
 800b6ae:	68bb      	ldr	r3, [r7, #8]
 800b6b0:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 800b6b4:	609a      	str	r2, [r3, #8]
			break;
 800b6b6:	e000      	b.n	800b6ba <SD_MPU6050_SetAccelerometer+0xd6>
		default:
			break;
 800b6b8:	bf00      	nop
		}

	/* Return OK */
	return SD_MPU6050_Result_Ok;
 800b6ba:	2300      	movs	r3, #0
}
 800b6bc:	4618      	mov	r0, r3
 800b6be:	3718      	adds	r7, #24
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	bd80      	pop	{r7, pc}

0800b6c4 <SD_MPU6050_SetGyroscope>:

SD_MPU6050_Result SD_MPU6050_SetGyroscope(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct, SD_MPU6050_Gyroscope GyroscopeSensitivity)
{
 800b6c4:	b580      	push	{r7, lr}
 800b6c6:	b088      	sub	sp, #32
 800b6c8:	af02      	add	r7, sp, #8
 800b6ca:	60f8      	str	r0, [r7, #12]
 800b6cc:	60b9      	str	r1, [r7, #8]
 800b6ce:	4613      	mov	r3, r2
 800b6d0:	71fb      	strb	r3, [r7, #7]
	uint8_t temp;
	I2C_HandleTypeDef* Handle = I2Cx;
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	617b      	str	r3, [r7, #20]
	uint8_t address = DataStruct->Address;
 800b6d6:	68bb      	ldr	r3, [r7, #8]
 800b6d8:	781b      	ldrb	r3, [r3, #0]
 800b6da:	74fb      	strb	r3, [r7, #19]
	uint8_t regAdd =(uint8_t )MPU6050_GYRO_CONFIG;
 800b6dc:	231b      	movs	r3, #27
 800b6de:	747b      	strb	r3, [r7, #17]

	/* Config gyroscope */
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&regAdd, 1, 1000) != HAL_OK);
 800b6e0:	bf00      	nop
 800b6e2:	7cfb      	ldrb	r3, [r7, #19]
 800b6e4:	b299      	uxth	r1, r3
 800b6e6:	f107 0211 	add.w	r2, r7, #17
 800b6ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b6ee:	9300      	str	r3, [sp, #0]
 800b6f0:	2301      	movs	r3, #1
 800b6f2:	6978      	ldr	r0, [r7, #20]
 800b6f4:	f7f6 ffe2 	bl	80026bc <HAL_I2C_Master_Transmit>
 800b6f8:	4603      	mov	r3, r0
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d1f1      	bne.n	800b6e2 <SD_MPU6050_SetGyroscope+0x1e>
	/*{
				return SD_MPU6050_Result_Error;
	}*/
	while(HAL_I2C_Master_Receive(Handle, (uint16_t)address, &temp, 1, 1000) != HAL_OK);
 800b6fe:	bf00      	nop
 800b700:	7cfb      	ldrb	r3, [r7, #19]
 800b702:	b299      	uxth	r1, r3
 800b704:	f107 0212 	add.w	r2, r7, #18
 800b708:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b70c:	9300      	str	r3, [sp, #0]
 800b70e:	2301      	movs	r3, #1
 800b710:	6978      	ldr	r0, [r7, #20]
 800b712:	f7f7 f8d1 	bl	80028b8 <HAL_I2C_Master_Receive>
 800b716:	4603      	mov	r3, r0
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d1f1      	bne.n	800b700 <SD_MPU6050_SetGyroscope+0x3c>
	/*{
				return SD_MPU6050_Result_Error;
	}*/
	temp = (temp & 0xE7) | (uint8_t)GyroscopeSensitivity << 3;
 800b71c:	7cbb      	ldrb	r3, [r7, #18]
 800b71e:	b25b      	sxtb	r3, r3
 800b720:	f023 0318 	bic.w	r3, r3, #24
 800b724:	b25a      	sxtb	r2, r3
 800b726:	79fb      	ldrb	r3, [r7, #7]
 800b728:	00db      	lsls	r3, r3, #3
 800b72a:	b25b      	sxtb	r3, r3
 800b72c:	4313      	orrs	r3, r2
 800b72e:	b25b      	sxtb	r3, r3
 800b730:	b2db      	uxtb	r3, r3
 800b732:	74bb      	strb	r3, [r7, #18]
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&temp, 1, 1000) != HAL_OK);
 800b734:	bf00      	nop
 800b736:	7cfb      	ldrb	r3, [r7, #19]
 800b738:	b299      	uxth	r1, r3
 800b73a:	f107 0212 	add.w	r2, r7, #18
 800b73e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b742:	9300      	str	r3, [sp, #0]
 800b744:	2301      	movs	r3, #1
 800b746:	6978      	ldr	r0, [r7, #20]
 800b748:	f7f6 ffb8 	bl	80026bc <HAL_I2C_Master_Transmit>
 800b74c:	4603      	mov	r3, r0
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d1f1      	bne.n	800b736 <SD_MPU6050_SetGyroscope+0x72>
	/*{
				return SD_MPU6050_Result_Error;
	}*/

	switch (GyroscopeSensitivity) {
 800b752:	79fb      	ldrb	r3, [r7, #7]
 800b754:	2b03      	cmp	r3, #3
 800b756:	d81b      	bhi.n	800b790 <SD_MPU6050_SetGyroscope+0xcc>
 800b758:	a201      	add	r2, pc, #4	; (adr r2, 800b760 <SD_MPU6050_SetGyroscope+0x9c>)
 800b75a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b75e:	bf00      	nop
 800b760:	0800b771 	.word	0x0800b771
 800b764:	0800b779 	.word	0x0800b779
 800b768:	0800b781 	.word	0x0800b781
 800b76c:	0800b789 	.word	0x0800b789
			case SD_MPU6050_Gyroscope_250s:
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_250;
 800b770:	68bb      	ldr	r3, [r7, #8]
 800b772:	4a0a      	ldr	r2, [pc, #40]	; (800b79c <SD_MPU6050_SetGyroscope+0xd8>)
 800b774:	605a      	str	r2, [r3, #4]
				break;
 800b776:	e00c      	b.n	800b792 <SD_MPU6050_SetGyroscope+0xce>
			case SD_MPU6050_Gyroscope_500s:
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_500;
 800b778:	68bb      	ldr	r3, [r7, #8]
 800b77a:	4a09      	ldr	r2, [pc, #36]	; (800b7a0 <SD_MPU6050_SetGyroscope+0xdc>)
 800b77c:	605a      	str	r2, [r3, #4]
				break;
 800b77e:	e008      	b.n	800b792 <SD_MPU6050_SetGyroscope+0xce>
			case SD_MPU6050_Gyroscope_1000s:
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_1000;
 800b780:	68bb      	ldr	r3, [r7, #8]
 800b782:	4a08      	ldr	r2, [pc, #32]	; (800b7a4 <SD_MPU6050_SetGyroscope+0xe0>)
 800b784:	605a      	str	r2, [r3, #4]
				break;
 800b786:	e004      	b.n	800b792 <SD_MPU6050_SetGyroscope+0xce>
			case SD_MPU6050_Gyroscope_2000s:
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_2000;
 800b788:	68bb      	ldr	r3, [r7, #8]
 800b78a:	4a07      	ldr	r2, [pc, #28]	; (800b7a8 <SD_MPU6050_SetGyroscope+0xe4>)
 800b78c:	605a      	str	r2, [r3, #4]
				break;
 800b78e:	e000      	b.n	800b792 <SD_MPU6050_SetGyroscope+0xce>
			default:
				break;
 800b790:	bf00      	nop
		}
	/* Return OK */
	return SD_MPU6050_Result_Ok;
 800b792:	2300      	movs	r3, #0
}
 800b794:	4618      	mov	r0, r3
 800b796:	3718      	adds	r7, #24
 800b798:	46bd      	mov	sp, r7
 800b79a:	bd80      	pop	{r7, pc}
 800b79c:	3bfa232d 	.word	0x3bfa232d
 800b7a0:	3c7a232d 	.word	0x3c7a232d
 800b7a4:	3cf9c190 	.word	0x3cf9c190
 800b7a8:	3d79c190 	.word	0x3d79c190

0800b7ac <SD_MPU6050_ReadAll>:

	/* Return OK */
	return SD_MPU6050_Result_Ok;
}
SD_MPU6050_Result SD_MPU6050_ReadAll(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct)
{
 800b7ac:	b580      	push	{r7, lr}
 800b7ae:	b08c      	sub	sp, #48	; 0x30
 800b7b0:	af02      	add	r7, sp, #8
 800b7b2:	6078      	str	r0, [r7, #4]
 800b7b4:	6039      	str	r1, [r7, #0]
	uint8_t data[14];
	int16_t temp;
	uint8_t reg = MPU6050_ACCEL_XOUT_H;
 800b7b6:	233b      	movs	r3, #59	; 0x3b
 800b7b8:	73fb      	strb	r3, [r7, #15]
	I2C_HandleTypeDef* Handle = I2Cx;
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t address = DataStruct->Address;
 800b7be:	683b      	ldr	r3, [r7, #0]
 800b7c0:	781b      	ldrb	r3, [r3, #0]
 800b7c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	/* Read full raw data, 14bytes */
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address, &reg, 1, 1000) != HAL_OK);
 800b7c6:	bf00      	nop
 800b7c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b7cc:	b299      	uxth	r1, r3
 800b7ce:	f107 020f 	add.w	r2, r7, #15
 800b7d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b7d6:	9300      	str	r3, [sp, #0]
 800b7d8:	2301      	movs	r3, #1
 800b7da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b7dc:	f7f6 ff6e 	bl	80026bc <HAL_I2C_Master_Transmit>
 800b7e0:	4603      	mov	r3, r0
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d1f0      	bne.n	800b7c8 <SD_MPU6050_ReadAll+0x1c>

	while(HAL_I2C_Master_Receive(Handle, (uint16_t)address, data, 14, 1000) != HAL_OK);
 800b7e6:	bf00      	nop
 800b7e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b7ec:	b299      	uxth	r1, r3
 800b7ee:	f107 0210 	add.w	r2, r7, #16
 800b7f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b7f6:	9300      	str	r3, [sp, #0]
 800b7f8:	230e      	movs	r3, #14
 800b7fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b7fc:	f7f7 f85c 	bl	80028b8 <HAL_I2C_Master_Receive>
 800b800:	4603      	mov	r3, r0
 800b802:	2b00      	cmp	r3, #0
 800b804:	d1f0      	bne.n	800b7e8 <SD_MPU6050_ReadAll+0x3c>

	/* Format accelerometer data */
	DataStruct->Accelerometer_X = (int16_t)(data[0] << 8 | data[1]);
 800b806:	7c3b      	ldrb	r3, [r7, #16]
 800b808:	021b      	lsls	r3, r3, #8
 800b80a:	b21a      	sxth	r2, r3
 800b80c:	7c7b      	ldrb	r3, [r7, #17]
 800b80e:	b21b      	sxth	r3, r3
 800b810:	4313      	orrs	r3, r2
 800b812:	b21a      	sxth	r2, r3
 800b814:	683b      	ldr	r3, [r7, #0]
 800b816:	819a      	strh	r2, [r3, #12]
	DataStruct->Accelerometer_Y = (int16_t)(data[2] << 8 | data[3]);
 800b818:	7cbb      	ldrb	r3, [r7, #18]
 800b81a:	021b      	lsls	r3, r3, #8
 800b81c:	b21a      	sxth	r2, r3
 800b81e:	7cfb      	ldrb	r3, [r7, #19]
 800b820:	b21b      	sxth	r3, r3
 800b822:	4313      	orrs	r3, r2
 800b824:	b21a      	sxth	r2, r3
 800b826:	683b      	ldr	r3, [r7, #0]
 800b828:	81da      	strh	r2, [r3, #14]
	DataStruct->Accelerometer_Z = (int16_t)(data[4] << 8 | data[5]);
 800b82a:	7d3b      	ldrb	r3, [r7, #20]
 800b82c:	021b      	lsls	r3, r3, #8
 800b82e:	b21a      	sxth	r2, r3
 800b830:	7d7b      	ldrb	r3, [r7, #21]
 800b832:	b21b      	sxth	r3, r3
 800b834:	4313      	orrs	r3, r2
 800b836:	b21a      	sxth	r2, r3
 800b838:	683b      	ldr	r3, [r7, #0]
 800b83a:	821a      	strh	r2, [r3, #16]

	/* Format temperature */
	temp = (data[6] << 8 | data[7]);
 800b83c:	7dbb      	ldrb	r3, [r7, #22]
 800b83e:	021b      	lsls	r3, r3, #8
 800b840:	b21a      	sxth	r2, r3
 800b842:	7dfb      	ldrb	r3, [r7, #23]
 800b844:	b21b      	sxth	r3, r3
 800b846:	4313      	orrs	r3, r2
 800b848:	843b      	strh	r3, [r7, #32]
	DataStruct->Temperature = (float)((float)((int16_t)temp) / (float)340.0 + (float)36.53);
 800b84a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800b84e:	ee07 3a90 	vmov	s15, r3
 800b852:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b856:	eddf 6a15 	vldr	s13, [pc, #84]	; 800b8ac <SD_MPU6050_ReadAll+0x100>
 800b85a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b85e:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800b8b0 <SD_MPU6050_ReadAll+0x104>
 800b862:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b866:	683b      	ldr	r3, [r7, #0]
 800b868:	edc3 7a06 	vstr	s15, [r3, #24]

	/* Format gyroscope data */
	DataStruct->Gyroscope_X = (int16_t)(data[8] << 8 | data[9]);
 800b86c:	7e3b      	ldrb	r3, [r7, #24]
 800b86e:	021b      	lsls	r3, r3, #8
 800b870:	b21a      	sxth	r2, r3
 800b872:	7e7b      	ldrb	r3, [r7, #25]
 800b874:	b21b      	sxth	r3, r3
 800b876:	4313      	orrs	r3, r2
 800b878:	b21a      	sxth	r2, r3
 800b87a:	683b      	ldr	r3, [r7, #0]
 800b87c:	825a      	strh	r2, [r3, #18]
	DataStruct->Gyroscope_Y = (int16_t)(data[10] << 8 | data[11]);
 800b87e:	7ebb      	ldrb	r3, [r7, #26]
 800b880:	021b      	lsls	r3, r3, #8
 800b882:	b21a      	sxth	r2, r3
 800b884:	7efb      	ldrb	r3, [r7, #27]
 800b886:	b21b      	sxth	r3, r3
 800b888:	4313      	orrs	r3, r2
 800b88a:	b21a      	sxth	r2, r3
 800b88c:	683b      	ldr	r3, [r7, #0]
 800b88e:	829a      	strh	r2, [r3, #20]
	DataStruct->Gyroscope_Z = (int16_t)(data[12] << 8 | data[13]);
 800b890:	7f3b      	ldrb	r3, [r7, #28]
 800b892:	021b      	lsls	r3, r3, #8
 800b894:	b21a      	sxth	r2, r3
 800b896:	7f7b      	ldrb	r3, [r7, #29]
 800b898:	b21b      	sxth	r3, r3
 800b89a:	4313      	orrs	r3, r2
 800b89c:	b21a      	sxth	r2, r3
 800b89e:	683b      	ldr	r3, [r7, #0]
 800b8a0:	82da      	strh	r2, [r3, #22]

	/* Return OK */
	return SD_MPU6050_Result_Ok;
 800b8a2:	2300      	movs	r3, #0
}
 800b8a4:	4618      	mov	r0, r3
 800b8a6:	3728      	adds	r7, #40	; 0x28
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	bd80      	pop	{r7, pc}
 800b8ac:	43aa0000 	.word	0x43aa0000
 800b8b0:	42121eb8 	.word	0x42121eb8

0800b8b4 <parse_number>:
 * \param[in]       gh: GPS handle
 * \param[in]       t: Text to parse. Set to `NULL` to parse current GPS term
 * \return          Parsed integer
 */
static int32_t
parse_number(gps_t* gh, const char* t) {
 800b8b4:	b480      	push	{r7}
 800b8b6:	b085      	sub	sp, #20
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	6078      	str	r0, [r7, #4]
 800b8bc:	6039      	str	r1, [r7, #0]
	int32_t res = 0;
 800b8be:	2300      	movs	r3, #0
 800b8c0:	60fb      	str	r3, [r7, #12]
	uint8_t minus;

	if (t == NULL) {
 800b8c2:	683b      	ldr	r3, [r7, #0]
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d106      	bne.n	800b8d6 <parse_number+0x22>
		t = gh->p.term_str;
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	3345      	adds	r3, #69	; 0x45
 800b8cc:	603b      	str	r3, [r7, #0]
	}
	for (; t != NULL && *t == ' '; t++) {}      /* Strip leading spaces */
 800b8ce:	e002      	b.n	800b8d6 <parse_number+0x22>
 800b8d0:	683b      	ldr	r3, [r7, #0]
 800b8d2:	3301      	adds	r3, #1
 800b8d4:	603b      	str	r3, [r7, #0]
 800b8d6:	683b      	ldr	r3, [r7, #0]
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d003      	beq.n	800b8e4 <parse_number+0x30>
 800b8dc:	683b      	ldr	r3, [r7, #0]
 800b8de:	781b      	ldrb	r3, [r3, #0]
 800b8e0:	2b20      	cmp	r3, #32
 800b8e2:	d0f5      	beq.n	800b8d0 <parse_number+0x1c>

	minus = (*t == '-' ? (t++, 1) : 0);
 800b8e4:	683b      	ldr	r3, [r7, #0]
 800b8e6:	781b      	ldrb	r3, [r3, #0]
 800b8e8:	2b2d      	cmp	r3, #45	; 0x2d
 800b8ea:	d104      	bne.n	800b8f6 <parse_number+0x42>
 800b8ec:	683b      	ldr	r3, [r7, #0]
 800b8ee:	3301      	adds	r3, #1
 800b8f0:	603b      	str	r3, [r7, #0]
 800b8f2:	2301      	movs	r3, #1
 800b8f4:	e000      	b.n	800b8f8 <parse_number+0x44>
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	72fb      	strb	r3, [r7, #11]
	for (; t != NULL && CIN(*t); t++) {
 800b8fa:	e00d      	b.n	800b918 <parse_number+0x64>
		res = 10 * res + CTN(*t);
 800b8fc:	68fa      	ldr	r2, [r7, #12]
 800b8fe:	4613      	mov	r3, r2
 800b900:	009b      	lsls	r3, r3, #2
 800b902:	4413      	add	r3, r2
 800b904:	005b      	lsls	r3, r3, #1
 800b906:	461a      	mov	r2, r3
 800b908:	683b      	ldr	r3, [r7, #0]
 800b90a:	781b      	ldrb	r3, [r3, #0]
 800b90c:	3b30      	subs	r3, #48	; 0x30
 800b90e:	4413      	add	r3, r2
 800b910:	60fb      	str	r3, [r7, #12]
	for (; t != NULL && CIN(*t); t++) {
 800b912:	683b      	ldr	r3, [r7, #0]
 800b914:	3301      	adds	r3, #1
 800b916:	603b      	str	r3, [r7, #0]
 800b918:	683b      	ldr	r3, [r7, #0]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d007      	beq.n	800b92e <parse_number+0x7a>
 800b91e:	683b      	ldr	r3, [r7, #0]
 800b920:	781b      	ldrb	r3, [r3, #0]
 800b922:	2b2f      	cmp	r3, #47	; 0x2f
 800b924:	d903      	bls.n	800b92e <parse_number+0x7a>
 800b926:	683b      	ldr	r3, [r7, #0]
 800b928:	781b      	ldrb	r3, [r3, #0]
 800b92a:	2b39      	cmp	r3, #57	; 0x39
 800b92c:	d9e6      	bls.n	800b8fc <parse_number+0x48>
	}
	return minus ? -res : res;
 800b92e:	7afb      	ldrb	r3, [r7, #11]
 800b930:	2b00      	cmp	r3, #0
 800b932:	d002      	beq.n	800b93a <parse_number+0x86>
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	425b      	negs	r3, r3
 800b938:	e000      	b.n	800b93c <parse_number+0x88>
 800b93a:	68fb      	ldr	r3, [r7, #12]
}
 800b93c:	4618      	mov	r0, r3
 800b93e:	3714      	adds	r7, #20
 800b940:	46bd      	mov	sp, r7
 800b942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b946:	4770      	bx	lr

0800b948 <parse_float_number>:
 * \param[in]       gh: GPS handle
 * \param[in]       t: Text to parse. Set to `NULL` to parse current GPS term
 * \return          Parsed double in \ref gps_float_t format
 */
static gps_float_t
parse_float_number(gps_t* gh, const char* t) {
 800b948:	b580      	push	{r7, lr}
 800b94a:	b084      	sub	sp, #16
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	6078      	str	r0, [r7, #4]
 800b950:	6039      	str	r1, [r7, #0]
	gps_float_t res;

	if (t == NULL) {
 800b952:	683b      	ldr	r3, [r7, #0]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d106      	bne.n	800b966 <parse_float_number+0x1e>
		t = gh->p.term_str;
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	3345      	adds	r3, #69	; 0x45
 800b95c:	603b      	str	r3, [r7, #0]
	}
	for (; t != NULL && *t == ' '; t++) {}      /* Strip leading spaces */
 800b95e:	e002      	b.n	800b966 <parse_float_number+0x1e>
 800b960:	683b      	ldr	r3, [r7, #0]
 800b962:	3301      	adds	r3, #1
 800b964:	603b      	str	r3, [r7, #0]
 800b966:	683b      	ldr	r3, [r7, #0]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d003      	beq.n	800b974 <parse_float_number+0x2c>
 800b96c:	683b      	ldr	r3, [r7, #0]
 800b96e:	781b      	ldrb	r3, [r3, #0]
 800b970:	2b20      	cmp	r3, #32
 800b972:	d0f5      	beq.n	800b960 <parse_float_number+0x18>

#if GPS_CFG_DOUBLE
	res = strtod(t, NULL);                      /* Parse string to double */
#else /* GPS_CFG_DOUBLE */
	res = strtof(t, NULL);                      /* Parse string to float */
 800b974:	2100      	movs	r1, #0
 800b976:	6838      	ldr	r0, [r7, #0]
 800b978:	f003 fc82 	bl	800f280 <strtof>
 800b97c:	ed87 0a03 	vstr	s0, [r7, #12]
#endif /* !GPS_CFG_DOUBLE */

	return FLT(res);                            /* Return casted value, based on float size */
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	ee07 3a90 	vmov	s15, r3
}
 800b986:	eeb0 0a67 	vmov.f32	s0, s15
 800b98a:	3710      	adds	r7, #16
 800b98c:	46bd      	mov	sp, r7
 800b98e:	bd80      	pop	{r7, pc}

0800b990 <parse_lat_long>:
 *                  NMEA output for latitude is ddmm.sss and longitude is dddmm.sss
 * \param[in]       gh: GPS handle
 * \return          Latitude/Longitude value in degrees
 */
static gps_float_t
parse_lat_long(gps_t* gh) {
 800b990:	b580      	push	{r7, lr}
 800b992:	b086      	sub	sp, #24
 800b994:	af00      	add	r7, sp, #0
 800b996:	6078      	str	r0, [r7, #4]
	gps_float_t ll, deg, min;

	ll = parse_float_number(gh, NULL);          /* Parse value as double */
 800b998:	2100      	movs	r1, #0
 800b99a:	6878      	ldr	r0, [r7, #4]
 800b99c:	f7ff ffd4 	bl	800b948 <parse_float_number>
 800b9a0:	ed87 0a05 	vstr	s0, [r7, #20]
	deg = FLT((int)((int)ll / 100));            /* Get absolute degrees value, interested in integer part only */
 800b9a4:	edd7 7a05 	vldr	s15, [r7, #20]
 800b9a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b9ac:	ee17 1a90 	vmov	r1, s15
 800b9b0:	4b15      	ldr	r3, [pc, #84]	; (800ba08 <parse_lat_long+0x78>)
 800b9b2:	fb83 2301 	smull	r2, r3, r3, r1
 800b9b6:	115a      	asrs	r2, r3, #5
 800b9b8:	17cb      	asrs	r3, r1, #31
 800b9ba:	1ad3      	subs	r3, r2, r3
 800b9bc:	ee07 3a90 	vmov	s15, r3
 800b9c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b9c4:	edc7 7a04 	vstr	s15, [r7, #16]
	min = ll - (deg * FLT(100));                /* Get remaining part from full number, minutes */
 800b9c8:	edd7 7a04 	vldr	s15, [r7, #16]
 800b9cc:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800ba0c <parse_lat_long+0x7c>
 800b9d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b9d4:	ed97 7a05 	vldr	s14, [r7, #20]
 800b9d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b9dc:	edc7 7a03 	vstr	s15, [r7, #12]
	ll = deg + (min / FLT(60));               /* Calculate latitude/longitude */
 800b9e0:	ed97 7a03 	vldr	s14, [r7, #12]
 800b9e4:	eddf 6a0a 	vldr	s13, [pc, #40]	; 800ba10 <parse_lat_long+0x80>
 800b9e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b9ec:	ed97 7a04 	vldr	s14, [r7, #16]
 800b9f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b9f4:	edc7 7a05 	vstr	s15, [r7, #20]

	return ll;
 800b9f8:	697b      	ldr	r3, [r7, #20]
 800b9fa:	ee07 3a90 	vmov	s15, r3
}
 800b9fe:	eeb0 0a67 	vmov.f32	s0, s15
 800ba02:	3718      	adds	r7, #24
 800ba04:	46bd      	mov	sp, r7
 800ba06:	bd80      	pop	{r7, pc}
 800ba08:	51eb851f 	.word	0x51eb851f
 800ba0c:	42c80000 	.word	0x42c80000
 800ba10:	42700000 	.word	0x42700000

0800ba14 <parse_term>:
 * \brief           Parse received term
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
parse_term(gps_t* gh) {
 800ba14:	b580      	push	{r7, lr}
 800ba16:	b082      	sub	sp, #8
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	6078      	str	r0, [r7, #4]
	if (gh->p.term_num == 0) {                  /* Check string type */
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d169      	bne.n	800bafa <parse_term+0xe6>
		if (0) {
#if GPS_CFG_STATEMENT_GPGGA
		} else if (!strncmp(gh->p.term_str, "$GPGGA", 6) || !strncmp(gh->p.term_str, "$GNGGA", 6)) {
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	3345      	adds	r3, #69	; 0x45
 800ba2a:	2206      	movs	r2, #6
 800ba2c:	49c4      	ldr	r1, [pc, #784]	; (800bd40 <parse_term+0x32c>)
 800ba2e:	4618      	mov	r0, r3
 800ba30:	f002 fdd5 	bl	800e5de <strncmp>
 800ba34:	4603      	mov	r3, r0
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d009      	beq.n	800ba4e <parse_term+0x3a>
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	3345      	adds	r3, #69	; 0x45
 800ba3e:	2206      	movs	r2, #6
 800ba40:	49c0      	ldr	r1, [pc, #768]	; (800bd44 <parse_term+0x330>)
 800ba42:	4618      	mov	r0, r3
 800ba44:	f002 fdcb 	bl	800e5de <strncmp>
 800ba48:	4603      	mov	r3, r0
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d104      	bne.n	800ba58 <parse_term+0x44>
			gh->p.stat = STAT_GGA;
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	2201      	movs	r2, #1
 800ba52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ba56:	e04e      	b.n	800baf6 <parse_term+0xe2>
#endif /* GPS_CFG_STATEMENT_GPGGA */
#if GPS_CFG_STATEMENT_GPGSA
		} else if (!strncmp(gh->p.term_str, "$GPGSA", 6) || !strncmp(gh->p.term_str, "$GNGSA", 6)) {
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	3345      	adds	r3, #69	; 0x45
 800ba5c:	2206      	movs	r2, #6
 800ba5e:	49ba      	ldr	r1, [pc, #744]	; (800bd48 <parse_term+0x334>)
 800ba60:	4618      	mov	r0, r3
 800ba62:	f002 fdbc 	bl	800e5de <strncmp>
 800ba66:	4603      	mov	r3, r0
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d009      	beq.n	800ba80 <parse_term+0x6c>
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	3345      	adds	r3, #69	; 0x45
 800ba70:	2206      	movs	r2, #6
 800ba72:	49b6      	ldr	r1, [pc, #728]	; (800bd4c <parse_term+0x338>)
 800ba74:	4618      	mov	r0, r3
 800ba76:	f002 fdb2 	bl	800e5de <strncmp>
 800ba7a:	4603      	mov	r3, r0
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d104      	bne.n	800ba8a <parse_term+0x76>
			gh->p.stat = STAT_GSA;
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	2202      	movs	r2, #2
 800ba84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ba88:	e035      	b.n	800baf6 <parse_term+0xe2>
#endif /* GPS_CFG_STATEMENT_GPGSA */
#if GPS_CFG_STATEMENT_GPGSV
		} else if (!strncmp(gh->p.term_str, "$GPGSV", 6) || !strncmp(gh->p.term_str, "$GNGSV", 6)) {
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	3345      	adds	r3, #69	; 0x45
 800ba8e:	2206      	movs	r2, #6
 800ba90:	49af      	ldr	r1, [pc, #700]	; (800bd50 <parse_term+0x33c>)
 800ba92:	4618      	mov	r0, r3
 800ba94:	f002 fda3 	bl	800e5de <strncmp>
 800ba98:	4603      	mov	r3, r0
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d009      	beq.n	800bab2 <parse_term+0x9e>
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	3345      	adds	r3, #69	; 0x45
 800baa2:	2206      	movs	r2, #6
 800baa4:	49ab      	ldr	r1, [pc, #684]	; (800bd54 <parse_term+0x340>)
 800baa6:	4618      	mov	r0, r3
 800baa8:	f002 fd99 	bl	800e5de <strncmp>
 800baac:	4603      	mov	r3, r0
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d104      	bne.n	800babc <parse_term+0xa8>
			gh->p.stat = STAT_GSV;
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	2203      	movs	r2, #3
 800bab6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800baba:	e01c      	b.n	800baf6 <parse_term+0xe2>
#endif /* GPS_CFG_STATEMENT_GPGSV */
#if GPS_CFG_STATEMENT_GPRMC
		} else if (!strncmp(gh->p.term_str, "$GPRMC", 6) || !strncmp(gh->p.term_str, "$GNRMC", 6)) {
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	3345      	adds	r3, #69	; 0x45
 800bac0:	2206      	movs	r2, #6
 800bac2:	49a5      	ldr	r1, [pc, #660]	; (800bd58 <parse_term+0x344>)
 800bac4:	4618      	mov	r0, r3
 800bac6:	f002 fd8a 	bl	800e5de <strncmp>
 800baca:	4603      	mov	r3, r0
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d009      	beq.n	800bae4 <parse_term+0xd0>
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	3345      	adds	r3, #69	; 0x45
 800bad4:	2206      	movs	r2, #6
 800bad6:	49a1      	ldr	r1, [pc, #644]	; (800bd5c <parse_term+0x348>)
 800bad8:	4618      	mov	r0, r3
 800bada:	f002 fd80 	bl	800e5de <strncmp>
 800bade:	4603      	mov	r3, r0
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d104      	bne.n	800baee <parse_term+0xda>
			gh->p.stat = STAT_RMC;
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	2204      	movs	r2, #4
 800bae8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800baec:	e003      	b.n	800baf6 <parse_term+0xe2>
#endif /* GPS_CFG_STATEMENT_GPRMC */
		} else {
			gh->p.stat = STAT_UNKNOWN;          /* Invalid statement for library */
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	2200      	movs	r2, #0
 800baf2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		}
		return 1;
 800baf6:	2301      	movs	r3, #1
 800baf8:	e21d      	b.n	800bf36 <parse_term+0x522>
	}

	/* Start parsing terms */
	if (gh->p.stat == STAT_UNKNOWN) {
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	f000 8217 	beq.w	800bf34 <parse_term+0x520>
#if GPS_CFG_STATEMENT_GPGGA
	} else if (gh->p.stat == STAT_GGA) {        /* Process GPGGA statement */
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bb0c:	2b01      	cmp	r3, #1
 800bb0e:	f040 80c0 	bne.w	800bc92 <parse_term+0x27e>
		switch (gh->p.term_num) {
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800bb18:	3b01      	subs	r3, #1
 800bb1a:	2b0a      	cmp	r3, #10
 800bb1c:	f200 81fd 	bhi.w	800bf1a <parse_term+0x506>
 800bb20:	a201      	add	r2, pc, #4	; (adr r2, 800bb28 <parse_term+0x114>)
 800bb22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb26:	bf00      	nop
 800bb28:	0800bb55 	.word	0x0800bb55
 800bb2c:	0800bbcf 	.word	0x0800bbcf
 800bb30:	0800bbe1 	.word	0x0800bbe1
 800bb34:	0800bc09 	.word	0x0800bc09
 800bb38:	0800bc1b 	.word	0x0800bc1b
 800bb3c:	0800bc43 	.word	0x0800bc43
 800bb40:	0800bc57 	.word	0x0800bc57
 800bb44:	0800bf1b 	.word	0x0800bf1b
 800bb48:	0800bc6b 	.word	0x0800bc6b
 800bb4c:	0800bf1b 	.word	0x0800bf1b
 800bb50:	0800bc7f 	.word	0x0800bc7f
		case 1:                             /* Process UTC time */
			gh->p.data.gga.hours = 10 * CTN(gh->p.term_str[0]) + CTN(gh->p.term_str[1]);
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bb5a:	3b30      	subs	r3, #48	; 0x30
 800bb5c:	b2db      	uxtb	r3, r3
 800bb5e:	461a      	mov	r2, r3
 800bb60:	0092      	lsls	r2, r2, #2
 800bb62:	4413      	add	r3, r2
 800bb64:	005b      	lsls	r3, r3, #1
 800bb66:	b2da      	uxtb	r2, r3
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800bb6e:	4413      	add	r3, r2
 800bb70:	b2db      	uxtb	r3, r3
 800bb72:	3b30      	subs	r3, #48	; 0x30
 800bb74:	b2da      	uxtb	r2, r3
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
			gh->p.data.gga.minutes = 10 * CTN(gh->p.term_str[2]) + CTN(gh->p.term_str[3]);
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800bb82:	3b30      	subs	r3, #48	; 0x30
 800bb84:	b2db      	uxtb	r3, r3
 800bb86:	461a      	mov	r2, r3
 800bb88:	0092      	lsls	r2, r2, #2
 800bb8a:	4413      	add	r3, r2
 800bb8c:	005b      	lsls	r3, r3, #1
 800bb8e:	b2da      	uxtb	r2, r3
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800bb96:	4413      	add	r3, r2
 800bb98:	b2db      	uxtb	r3, r3
 800bb9a:	3b30      	subs	r3, #48	; 0x30
 800bb9c:	b2da      	uxtb	r2, r3
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
			gh->p.data.gga.seconds = 10 * CTN(gh->p.term_str[4]) + CTN(gh->p.term_str[5]);
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800bbaa:	3b30      	subs	r3, #48	; 0x30
 800bbac:	b2db      	uxtb	r3, r3
 800bbae:	461a      	mov	r2, r3
 800bbb0:	0092      	lsls	r2, r2, #2
 800bbb2:	4413      	add	r3, r2
 800bbb4:	005b      	lsls	r3, r3, #1
 800bbb6:	b2da      	uxtb	r2, r3
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800bbbe:	4413      	add	r3, r2
 800bbc0:	b2db      	uxtb	r3, r3
 800bbc2:	3b30      	subs	r3, #48	; 0x30
 800bbc4:	b2da      	uxtb	r2, r3
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
			break;
 800bbcc:	e1b2      	b.n	800bf34 <parse_term+0x520>
		case 2:                             /* Latitude */
			gh->p.data.gga.latitude = parse_lat_long(gh);   /* Parse latitude */
 800bbce:	6878      	ldr	r0, [r7, #4]
 800bbd0:	f7ff fede 	bl	800b990 <parse_lat_long>
 800bbd4:	eef0 7a40 	vmov.f32	s15, s0
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
			break;
 800bbde:	e1a9      	b.n	800bf34 <parse_term+0x520>
		case 3:                             /* Latitude north/south information */
			if (gh->p.term_str[0] == 'S' || gh->p.term_str[0] == 's') {
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bbe6:	2b53      	cmp	r3, #83	; 0x53
 800bbe8:	d005      	beq.n	800bbf6 <parse_term+0x1e2>
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bbf0:	2b73      	cmp	r3, #115	; 0x73
 800bbf2:	f040 8194 	bne.w	800bf1e <parse_term+0x50a>
				gh->p.data.gga.latitude = -gh->p.data.gga.latitude;
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800bbfc:	eef1 7a67 	vneg.f32	s15, s15
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
			}
			break;
 800bc06:	e18a      	b.n	800bf1e <parse_term+0x50a>
		case 4:                             /* Longitude */
			gh->p.data.gga.longitude = parse_lat_long(gh);  /* Parse longitude */
 800bc08:	6878      	ldr	r0, [r7, #4]
 800bc0a:	f7ff fec1 	bl	800b990 <parse_lat_long>
 800bc0e:	eef0 7a40 	vmov.f32	s15, s0
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
			break;
 800bc18:	e18c      	b.n	800bf34 <parse_term+0x520>
		case 5:                             /* Longitude east/west information */
			if (gh->p.term_str[0] == 'W' || gh->p.term_str[0] == 'w') {
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bc20:	2b57      	cmp	r3, #87	; 0x57
 800bc22:	d005      	beq.n	800bc30 <parse_term+0x21c>
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bc2a:	2b77      	cmp	r3, #119	; 0x77
 800bc2c:	f040 8179 	bne.w	800bf22 <parse_term+0x50e>
				gh->p.data.gga.longitude = -gh->p.data.gga.longitude;
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 800bc36:	eef1 7a67 	vneg.f32	s15, s15
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
			}
			break;
 800bc40:	e16f      	b.n	800bf22 <parse_term+0x50e>
		case 6:                             /* Fix status */
			gh->p.data.gga.fix = (uint8_t)parse_number(gh, NULL);
 800bc42:	2100      	movs	r1, #0
 800bc44:	6878      	ldr	r0, [r7, #4]
 800bc46:	f7ff fe35 	bl	800b8b4 <parse_number>
 800bc4a:	4603      	mov	r3, r0
 800bc4c:	b2da      	uxtb	r2, r3
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
			break;
 800bc54:	e16e      	b.n	800bf34 <parse_term+0x520>
		case 7:                             /* Satellites in use */
			gh->p.data.gga.sats_in_use = (uint8_t)parse_number(gh, NULL);
 800bc56:	2100      	movs	r1, #0
 800bc58:	6878      	ldr	r0, [r7, #4]
 800bc5a:	f7ff fe2b 	bl	800b8b4 <parse_number>
 800bc5e:	4603      	mov	r3, r0
 800bc60:	b2da      	uxtb	r2, r3
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
			break;
 800bc68:	e164      	b.n	800bf34 <parse_term+0x520>
		case 9:                             /* Altitude */
			gh->p.data.gga.altitude = parse_float_number(gh, NULL);
 800bc6a:	2100      	movs	r1, #0
 800bc6c:	6878      	ldr	r0, [r7, #4]
 800bc6e:	f7ff fe6b 	bl	800b948 <parse_float_number>
 800bc72:	eef0 7a40 	vmov.f32	s15, s0
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
			break;
 800bc7c:	e15a      	b.n	800bf34 <parse_term+0x520>
		case 11:                            /* Altitude above ellipsoid */
			gh->p.data.gga.geo_sep = parse_float_number(gh, NULL);
 800bc7e:	2100      	movs	r1, #0
 800bc80:	6878      	ldr	r0, [r7, #4]
 800bc82:	f7ff fe61 	bl	800b948 <parse_float_number>
 800bc86:	eef0 7a40 	vmov.f32	s15, s0
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
			break;
 800bc90:	e150      	b.n	800bf34 <parse_term+0x520>
		default: break;
		}
#endif /* GPS_CFG_STATEMENT_GPGGA */
#if GPS_CFG_STATEMENT_GPGSA
	} else if (gh->p.stat == STAT_GSA) {        /* Process GPGSA statement */
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bc98:	2b02      	cmp	r3, #2
 800bc9a:	d17e      	bne.n	800bd9a <parse_term+0x386>
		switch (gh->p.term_num) {
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800bca2:	3b02      	subs	r3, #2
 800bca4:	2b0f      	cmp	r3, #15
 800bca6:	d85b      	bhi.n	800bd60 <parse_term+0x34c>
 800bca8:	a201      	add	r2, pc, #4	; (adr r2, 800bcb0 <parse_term+0x29c>)
 800bcaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcae:	bf00      	nop
 800bcb0:	0800bcf1 	.word	0x0800bcf1
 800bcb4:	0800bd61 	.word	0x0800bd61
 800bcb8:	0800bd61 	.word	0x0800bd61
 800bcbc:	0800bd61 	.word	0x0800bd61
 800bcc0:	0800bd61 	.word	0x0800bd61
 800bcc4:	0800bd61 	.word	0x0800bd61
 800bcc8:	0800bd61 	.word	0x0800bd61
 800bccc:	0800bd61 	.word	0x0800bd61
 800bcd0:	0800bd61 	.word	0x0800bd61
 800bcd4:	0800bd61 	.word	0x0800bd61
 800bcd8:	0800bd61 	.word	0x0800bd61
 800bcdc:	0800bd61 	.word	0x0800bd61
 800bce0:	0800bd61 	.word	0x0800bd61
 800bce4:	0800bd05 	.word	0x0800bd05
 800bce8:	0800bd19 	.word	0x0800bd19
 800bcec:	0800bd2d 	.word	0x0800bd2d
		case 2:                             /* Process fix mode */
			gh->p.data.gsa.fix_mode = (uint8_t)parse_number(gh, NULL);
 800bcf0:	2100      	movs	r1, #0
 800bcf2:	6878      	ldr	r0, [r7, #4]
 800bcf4:	f7ff fdde 	bl	800b8b4 <parse_number>
 800bcf8:	4603      	mov	r3, r0
 800bcfa:	b2da      	uxtb	r2, r3
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
			break;
 800bd02:	e117      	b.n	800bf34 <parse_term+0x520>
		case 15:                            /* Process PDOP */
			gh->p.data.gsa.dop_p = parse_float_number(gh, NULL);
 800bd04:	2100      	movs	r1, #0
 800bd06:	6878      	ldr	r0, [r7, #4]
 800bd08:	f7ff fe1e 	bl	800b948 <parse_float_number>
 800bd0c:	eef0 7a40 	vmov.f32	s15, s0
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
			break;
 800bd16:	e10d      	b.n	800bf34 <parse_term+0x520>
		case 16:                            /* Process HDOP */
			gh->p.data.gsa.dop_h = parse_float_number(gh, NULL);
 800bd18:	2100      	movs	r1, #0
 800bd1a:	6878      	ldr	r0, [r7, #4]
 800bd1c:	f7ff fe14 	bl	800b948 <parse_float_number>
 800bd20:	eef0 7a40 	vmov.f32	s15, s0
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
			break;
 800bd2a:	e103      	b.n	800bf34 <parse_term+0x520>
		case 17:                            /* Process VDOP */
			gh->p.data.gsa.dop_v = parse_float_number(gh, NULL);
 800bd2c:	2100      	movs	r1, #0
 800bd2e:	6878      	ldr	r0, [r7, #4]
 800bd30:	f7ff fe0a 	bl	800b948 <parse_float_number>
 800bd34:	eef0 7a40 	vmov.f32	s15, s0
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
			break;
 800bd3e:	e0f9      	b.n	800bf34 <parse_term+0x520>
 800bd40:	08011f78 	.word	0x08011f78
 800bd44:	08011f80 	.word	0x08011f80
 800bd48:	08011f88 	.word	0x08011f88
 800bd4c:	08011f90 	.word	0x08011f90
 800bd50:	08011f98 	.word	0x08011f98
 800bd54:	08011fa0 	.word	0x08011fa0
 800bd58:	08011fa8 	.word	0x08011fa8
 800bd5c:	08011fb0 	.word	0x08011fb0
		default:
			/* Parse satellite IDs */
			if (gh->p.term_num >= 3 && gh->p.term_num <= 14) {
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800bd66:	2b02      	cmp	r3, #2
 800bd68:	f240 80dd 	bls.w	800bf26 <parse_term+0x512>
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800bd72:	2b0e      	cmp	r3, #14
 800bd74:	f200 80d7 	bhi.w	800bf26 <parse_term+0x512>
				gh->p.data.gsa.satellites_ids[gh->p.term_num - 3] = (uint8_t)parse_number(gh, NULL);
 800bd78:	2100      	movs	r1, #0
 800bd7a:	6878      	ldr	r0, [r7, #4]
 800bd7c:	f7ff fd9a 	bl	800b8b4 <parse_number>
 800bd80:	4602      	mov	r2, r0
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800bd88:	3b03      	subs	r3, #3
 800bd8a:	b2d1      	uxtb	r1, r2
 800bd8c:	687a      	ldr	r2, [r7, #4]
 800bd8e:	4413      	add	r3, r2
 800bd90:	460a      	mov	r2, r1
 800bd92:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
			}
			break;
 800bd96:	bf00      	nop
 800bd98:	e0c5      	b.n	800bf26 <parse_term+0x512>
		}
#endif /* GPS_CFG_STATEMENT_GPGSA */
#if GPS_CFG_STATEMENT_GPGSV
	} else if (gh->p.stat == STAT_GSV) {        /* Process GPGSV statement */
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bda0:	2b03      	cmp	r3, #3
 800bda2:	d11b      	bne.n	800bddc <parse_term+0x3c8>
		switch (gh->p.term_num) {
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800bdaa:	2b02      	cmp	r3, #2
 800bdac:	d002      	beq.n	800bdb4 <parse_term+0x3a0>
 800bdae:	2b03      	cmp	r3, #3
 800bdb0:	d00a      	beq.n	800bdc8 <parse_term+0x3b4>
					default: break;
					}
				}
			}
#endif /* GPS_CFG_STATEMENT_GPGSV_SAT_DET */
			break;
 800bdb2:	e0bf      	b.n	800bf34 <parse_term+0x520>
			gh->p.data.gsv.stat_num = (uint8_t)parse_number(gh, NULL);
 800bdb4:	2100      	movs	r1, #0
 800bdb6:	6878      	ldr	r0, [r7, #4]
 800bdb8:	f7ff fd7c 	bl	800b8b4 <parse_number>
 800bdbc:	4603      	mov	r3, r0
 800bdbe:	b2da      	uxtb	r2, r3
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			break;
 800bdc6:	e0b5      	b.n	800bf34 <parse_term+0x520>
			gh->p.data.gsv.sats_in_view = (uint8_t)parse_number(gh, NULL);
 800bdc8:	2100      	movs	r1, #0
 800bdca:	6878      	ldr	r0, [r7, #4]
 800bdcc:	f7ff fd72 	bl	800b8b4 <parse_number>
 800bdd0:	4603      	mov	r3, r0
 800bdd2:	b2da      	uxtb	r2, r3
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			break;
 800bdda:	e0ab      	b.n	800bf34 <parse_term+0x520>
		}
#endif /* GPS_CFG_STATEMENT_GPGSV */
#if GPS_CFG_STATEMENT_GPRMC
	} else if (gh->p.stat == STAT_RMC) {        /* Process GPRMC statement */
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bde2:	2b04      	cmp	r3, #4
 800bde4:	f040 80a1 	bne.w	800bf2a <parse_term+0x516>
		switch (gh->p.term_num) {
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800bdee:	3b02      	subs	r3, #2
 800bdf0:	2b09      	cmp	r3, #9
 800bdf2:	f200 809c 	bhi.w	800bf2e <parse_term+0x51a>
 800bdf6:	a201      	add	r2, pc, #4	; (adr r2, 800bdfc <parse_term+0x3e8>)
 800bdf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdfc:	0800be25 	.word	0x0800be25
 800be00:	0800bf2f 	.word	0x0800bf2f
 800be04:	0800bf2f 	.word	0x0800bf2f
 800be08:	0800bf2f 	.word	0x0800bf2f
 800be0c:	0800bf2f 	.word	0x0800bf2f
 800be10:	0800be3f 	.word	0x0800be3f
 800be14:	0800be53 	.word	0x0800be53
 800be18:	0800be67 	.word	0x0800be67
 800be1c:	0800bee1 	.word	0x0800bee1
 800be20:	0800bef5 	.word	0x0800bef5
		case 2:                             /* Process valid status */
			gh->p.data.rmc.is_valid = (gh->p.term_str[0] == 'A');
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800be2a:	2b41      	cmp	r3, #65	; 0x41
 800be2c:	bf0c      	ite	eq
 800be2e:	2301      	moveq	r3, #1
 800be30:	2300      	movne	r3, #0
 800be32:	b2db      	uxtb	r3, r3
 800be34:	461a      	mov	r2, r3
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			break;
 800be3c:	e07a      	b.n	800bf34 <parse_term+0x520>
		case 7:                             /* Process ground speed in knots */
			gh->p.data.rmc.speed = parse_float_number(gh, NULL);
 800be3e:	2100      	movs	r1, #0
 800be40:	6878      	ldr	r0, [r7, #4]
 800be42:	f7ff fd81 	bl	800b948 <parse_float_number>
 800be46:	eef0 7a40 	vmov.f32	s15, s0
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
			break;
 800be50:	e070      	b.n	800bf34 <parse_term+0x520>
		case 8:                             /* Process true ground coarse */
			gh->p.data.rmc.coarse = parse_float_number(gh, NULL);
 800be52:	2100      	movs	r1, #0
 800be54:	6878      	ldr	r0, [r7, #4]
 800be56:	f7ff fd77 	bl	800b948 <parse_float_number>
 800be5a:	eef0 7a40 	vmov.f32	s15, s0
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
			break;
 800be64:	e066      	b.n	800bf34 <parse_term+0x520>
		case 9:                             /* Process date */
			gh->p.data.rmc.date = (uint8_t)(10 * CTN(gh->p.term_str[0]) + CTN(gh->p.term_str[1]));
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800be6c:	3b30      	subs	r3, #48	; 0x30
 800be6e:	b2db      	uxtb	r3, r3
 800be70:	461a      	mov	r2, r3
 800be72:	0092      	lsls	r2, r2, #2
 800be74:	4413      	add	r3, r2
 800be76:	005b      	lsls	r3, r3, #1
 800be78:	b2da      	uxtb	r2, r3
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800be80:	4413      	add	r3, r2
 800be82:	b2db      	uxtb	r3, r3
 800be84:	3b30      	subs	r3, #48	; 0x30
 800be86:	b2da      	uxtb	r2, r3
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			gh->p.data.rmc.month = (uint8_t)(10 * CTN(gh->p.term_str[2]) + CTN(gh->p.term_str[3]));
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800be94:	3b30      	subs	r3, #48	; 0x30
 800be96:	b2db      	uxtb	r3, r3
 800be98:	461a      	mov	r2, r3
 800be9a:	0092      	lsls	r2, r2, #2
 800be9c:	4413      	add	r3, r2
 800be9e:	005b      	lsls	r3, r3, #1
 800bea0:	b2da      	uxtb	r2, r3
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800bea8:	4413      	add	r3, r2
 800beaa:	b2db      	uxtb	r3, r3
 800beac:	3b30      	subs	r3, #48	; 0x30
 800beae:	b2da      	uxtb	r2, r3
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
			gh->p.data.rmc.year = (uint8_t)(10 * CTN(gh->p.term_str[4]) + CTN(gh->p.term_str[5]));
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800bebc:	3b30      	subs	r3, #48	; 0x30
 800bebe:	b2db      	uxtb	r3, r3
 800bec0:	461a      	mov	r2, r3
 800bec2:	0092      	lsls	r2, r2, #2
 800bec4:	4413      	add	r3, r2
 800bec6:	005b      	lsls	r3, r3, #1
 800bec8:	b2da      	uxtb	r2, r3
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800bed0:	4413      	add	r3, r2
 800bed2:	b2db      	uxtb	r3, r3
 800bed4:	3b30      	subs	r3, #48	; 0x30
 800bed6:	b2da      	uxtb	r2, r3
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
			break;
 800bede:	e029      	b.n	800bf34 <parse_term+0x520>
		case 10:                            /* Process magnetic variation */
			gh->p.data.rmc.variation = parse_float_number(gh, NULL);
 800bee0:	2100      	movs	r1, #0
 800bee2:	6878      	ldr	r0, [r7, #4]
 800bee4:	f7ff fd30 	bl	800b948 <parse_float_number>
 800bee8:	eef0 7a40 	vmov.f32	s15, s0
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
			break;
 800bef2:	e01f      	b.n	800bf34 <parse_term+0x520>
		case 11:                            /* Process magnetic variation east/west */
			if (gh->p.term_str[0] == 'W' || gh->p.term_str[0] == 'w') {
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800befa:	2b57      	cmp	r3, #87	; 0x57
 800befc:	d004      	beq.n	800bf08 <parse_term+0x4f4>
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bf04:	2b77      	cmp	r3, #119	; 0x77
 800bf06:	d114      	bne.n	800bf32 <parse_term+0x51e>
				gh->p.data.rmc.variation = -gh->p.data.rmc.variation;
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 800bf0e:	eef1 7a67 	vneg.f32	s15, s15
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
			}
			break;
 800bf18:	e00b      	b.n	800bf32 <parse_term+0x51e>
		default: break;
 800bf1a:	bf00      	nop
 800bf1c:	e00a      	b.n	800bf34 <parse_term+0x520>
			break;
 800bf1e:	bf00      	nop
 800bf20:	e008      	b.n	800bf34 <parse_term+0x520>
			break;
 800bf22:	bf00      	nop
 800bf24:	e006      	b.n	800bf34 <parse_term+0x520>
			break;
 800bf26:	bf00      	nop
 800bf28:	e004      	b.n	800bf34 <parse_term+0x520>
		default: break;
		}
#endif /* GPS_CFG_STATEMENT_GPRMC */
	}
 800bf2a:	bf00      	nop
 800bf2c:	e002      	b.n	800bf34 <parse_term+0x520>
		default: break;
 800bf2e:	bf00      	nop
 800bf30:	e000      	b.n	800bf34 <parse_term+0x520>
			break;
 800bf32:	bf00      	nop
	return 1;
 800bf34:	2301      	movs	r3, #1
}
 800bf36:	4618      	mov	r0, r3
 800bf38:	3708      	adds	r7, #8
 800bf3a:	46bd      	mov	sp, r7
 800bf3c:	bd80      	pop	{r7, pc}
 800bf3e:	bf00      	nop

0800bf40 <check_crc>:
 * \brief           Compare calculated CRC with received CRC
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
check_crc(gps_t* gh) {
 800bf40:	b480      	push	{r7}
 800bf42:	b085      	sub	sp, #20
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	6078      	str	r0, [r7, #4]
	uint8_t crc;
	crc = (uint8_t)((CHTN(gh->p.term_str[0]) & 0x0F) << 0x04) | (CHTN(gh->p.term_str[1]) & 0x0F);   /* Convert received CRC from string (hex) to number */
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bf4e:	2b2f      	cmp	r3, #47	; 0x2f
 800bf50:	d90b      	bls.n	800bf6a <check_crc+0x2a>
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bf58:	2b39      	cmp	r3, #57	; 0x39
 800bf5a:	d806      	bhi.n	800bf6a <check_crc+0x2a>
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bf62:	011b      	lsls	r3, r3, #4
 800bf64:	b2db      	uxtb	r3, r3
 800bf66:	b25a      	sxtb	r2, r3
 800bf68:	e026      	b.n	800bfb8 <check_crc+0x78>
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bf70:	2b60      	cmp	r3, #96	; 0x60
 800bf72:	d90d      	bls.n	800bf90 <check_crc+0x50>
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bf7a:	2b7a      	cmp	r3, #122	; 0x7a
 800bf7c:	d808      	bhi.n	800bf90 <check_crc+0x50>
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bf84:	3b57      	subs	r3, #87	; 0x57
 800bf86:	b2db      	uxtb	r3, r3
 800bf88:	011b      	lsls	r3, r3, #4
 800bf8a:	b2db      	uxtb	r3, r3
 800bf8c:	b25a      	sxtb	r2, r3
 800bf8e:	e013      	b.n	800bfb8 <check_crc+0x78>
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bf96:	2b40      	cmp	r3, #64	; 0x40
 800bf98:	d90d      	bls.n	800bfb6 <check_crc+0x76>
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bfa0:	2b5a      	cmp	r3, #90	; 0x5a
 800bfa2:	d808      	bhi.n	800bfb6 <check_crc+0x76>
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bfaa:	3b37      	subs	r3, #55	; 0x37
 800bfac:	b2db      	uxtb	r3, r3
 800bfae:	011b      	lsls	r3, r3, #4
 800bfb0:	b2db      	uxtb	r3, r3
 800bfb2:	b25a      	sxtb	r2, r3
 800bfb4:	e000      	b.n	800bfb8 <check_crc+0x78>
 800bfb6:	2200      	movs	r2, #0
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800bfbe:	2b2f      	cmp	r3, #47	; 0x2f
 800bfc0:	d90c      	bls.n	800bfdc <check_crc+0x9c>
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800bfc8:	2b39      	cmp	r3, #57	; 0x39
 800bfca:	d807      	bhi.n	800bfdc <check_crc+0x9c>
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800bfd2:	b25b      	sxtb	r3, r3
 800bfd4:	f003 030f 	and.w	r3, r3, #15
 800bfd8:	b25b      	sxtb	r3, r3
 800bfda:	e028      	b.n	800c02e <check_crc+0xee>
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800bfe2:	2b60      	cmp	r3, #96	; 0x60
 800bfe4:	d90e      	bls.n	800c004 <check_crc+0xc4>
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800bfec:	2b7a      	cmp	r3, #122	; 0x7a
 800bfee:	d809      	bhi.n	800c004 <check_crc+0xc4>
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800bff6:	3b57      	subs	r3, #87	; 0x57
 800bff8:	b2db      	uxtb	r3, r3
 800bffa:	b25b      	sxtb	r3, r3
 800bffc:	f003 030f 	and.w	r3, r3, #15
 800c000:	b25b      	sxtb	r3, r3
 800c002:	e014      	b.n	800c02e <check_crc+0xee>
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800c00a:	2b40      	cmp	r3, #64	; 0x40
 800c00c:	d90e      	bls.n	800c02c <check_crc+0xec>
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800c014:	2b5a      	cmp	r3, #90	; 0x5a
 800c016:	d809      	bhi.n	800c02c <check_crc+0xec>
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800c01e:	3b37      	subs	r3, #55	; 0x37
 800c020:	b2db      	uxtb	r3, r3
 800c022:	b25b      	sxtb	r3, r3
 800c024:	f003 030f 	and.w	r3, r3, #15
 800c028:	b25b      	sxtb	r3, r3
 800c02a:	e000      	b.n	800c02e <check_crc+0xee>
 800c02c:	2300      	movs	r3, #0
 800c02e:	4313      	orrs	r3, r2
 800c030:	b25b      	sxtb	r3, r3
 800c032:	73fb      	strb	r3, [r7, #15]
	return gh->p.crc_calc == crc;               /* They must match! */
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800c03a:	7bfa      	ldrb	r2, [r7, #15]
 800c03c:	429a      	cmp	r2, r3
 800c03e:	bf0c      	ite	eq
 800c040:	2301      	moveq	r3, #1
 800c042:	2300      	movne	r3, #0
 800c044:	b2db      	uxtb	r3, r3
}
 800c046:	4618      	mov	r0, r3
 800c048:	3714      	adds	r7, #20
 800c04a:	46bd      	mov	sp, r7
 800c04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c050:	4770      	bx	lr

0800c052 <copy_from_tmp_memory>:
 * \brief           Copy temporary memory to user memory
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
copy_from_tmp_memory(gps_t* gh) {
 800c052:	b580      	push	{r7, lr}
 800c054:	b082      	sub	sp, #8
 800c056:	af00      	add	r7, sp, #0
 800c058:	6078      	str	r0, [r7, #4]
	if (0) {
#if GPS_CFG_STATEMENT_GPGGA
	} else if (gh->p.stat == STAT_GGA) {
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c060:	2b01      	cmp	r3, #1
 800c062:	d129      	bne.n	800c0b8 <copy_from_tmp_memory+0x66>
		gh->latitude = gh->p.data.gga.latitude;
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	601a      	str	r2, [r3, #0]
		gh->longitude = gh->p.data.gga.longitude;
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	605a      	str	r2, [r3, #4]
		gh->altitude = gh->p.data.gga.altitude;
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	609a      	str	r2, [r3, #8]
		gh->geo_sep = gh->p.data.gga.geo_sep;
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	60da      	str	r2, [r3, #12]
		gh->sats_in_use = gh->p.data.gga.sats_in_use;
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	741a      	strb	r2, [r3, #16]
		gh->fix = gh->p.data.gga.fix;
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	f893 2069 	ldrb.w	r2, [r3, #105]	; 0x69
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	745a      	strb	r2, [r3, #17]
		gh->hours = gh->p.data.gga.hours;
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	f893 206a 	ldrb.w	r2, [r3, #106]	; 0x6a
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	749a      	strb	r2, [r3, #18]
		gh->minutes = gh->p.data.gga.minutes;
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	f893 206b 	ldrb.w	r2, [r3, #107]	; 0x6b
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	74da      	strb	r2, [r3, #19]
		gh->seconds = gh->p.data.gga.seconds;
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	f893 206c 	ldrb.w	r2, [r3, #108]	; 0x6c
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	751a      	strb	r2, [r3, #20]
 800c0b6:	e055      	b.n	800c164 <copy_from_tmp_memory+0x112>
#endif /* GPS_CFG_STATEMENT_GPGGA */
#if GPS_CFG_STATEMENT_GPGSA
	} else if (gh->p.stat == STAT_GSA) {
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c0be:	2b02      	cmp	r3, #2
 800c0c0:	d11b      	bne.n	800c0fa <copy_from_tmp_memory+0xa8>
		gh->dop_h = gh->p.data.gsa.dop_h;
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	619a      	str	r2, [r3, #24]
		gh->dop_p = gh->p.data.gsa.dop_p;
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	621a      	str	r2, [r3, #32]
		gh->dop_v = gh->p.data.gsa.dop_v;
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	61da      	str	r2, [r3, #28]
		gh->fix_mode = gh->p.data.gsa.fix_mode;
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		memcpy(gh->satellites_ids, gh->p.data.gsa.satellites_ids, sizeof(gh->satellites_ids));
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	f103 0025 	add.w	r0, r3, #37	; 0x25
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	3365      	adds	r3, #101	; 0x65
 800c0f0:	220c      	movs	r2, #12
 800c0f2:	4619      	mov	r1, r3
 800c0f4:	f002 fa2a 	bl	800e54c <memcpy>
 800c0f8:	e034      	b.n	800c164 <copy_from_tmp_memory+0x112>
#endif /* GPS_CFG_STATEMENT_GPGSA */
#if GPS_CFG_STATEMENT_GPGSV
	} else if (gh->p.stat == STAT_GSV) {
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c100:	2b03      	cmp	r3, #3
 800c102:	d106      	bne.n	800c112 <copy_from_tmp_memory+0xc0>
		gh->sats_in_view = gh->p.data.gsv.sats_in_view;
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800c110:	e028      	b.n	800c164 <copy_from_tmp_memory+0x112>
#endif /* GPS_CFG_STATEMENT_GPGSV */
#if GPS_CFG_STATEMENT_GPRMC
	} else if (gh->p.stat == STAT_RMC) {
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c118:	2b04      	cmp	r3, #4
 800c11a:	d123      	bne.n	800c164 <copy_from_tmp_memory+0x112>
		gh->coarse = gh->p.data.rmc.coarse;
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	639a      	str	r2, [r3, #56]	; 0x38
		gh->is_valid = gh->p.data.rmc.is_valid;
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
		gh->speed = gh->p.data.rmc.speed;
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	635a      	str	r2, [r3, #52]	; 0x34
		gh->variation = gh->p.data.rmc.variation;
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	63da      	str	r2, [r3, #60]	; 0x3c
		gh->date = gh->p.data.rmc.date;
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		gh->month = gh->p.data.rmc.month;
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	f893 205a 	ldrb.w	r2, [r3, #90]	; 0x5a
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
		gh->year = gh->p.data.rmc.year;
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	f893 205b 	ldrb.w	r2, [r3, #91]	; 0x5b
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
#endif /* GPS_CFG_STATEMENT_GPRMC */
	}
	return 1;
 800c164:	2301      	movs	r3, #1
}
 800c166:	4618      	mov	r0, r3
 800c168:	3708      	adds	r7, #8
 800c16a:	46bd      	mov	sp, r7
 800c16c:	bd80      	pop	{r7, pc}

0800c16e <gps_init>:
 * \brief           Init GPS handle
 * \param[in]       gh: GPS handle structure
 * \return          `1` on success, `0` otherwise
 */
uint8_t
gps_init(gps_t* gh) {
 800c16e:	b580      	push	{r7, lr}
 800c170:	b082      	sub	sp, #8
 800c172:	af00      	add	r7, sp, #0
 800c174:	6078      	str	r0, [r7, #4]
	memset(gh, 0x00, sizeof(*gh));              /* Reset structure */
 800c176:	2274      	movs	r2, #116	; 0x74
 800c178:	2100      	movs	r1, #0
 800c17a:	6878      	ldr	r0, [r7, #4]
 800c17c:	f002 f9f1 	bl	800e562 <memset>
	return 1;
 800c180:	2301      	movs	r3, #1
}
 800c182:	4618      	mov	r0, r3
 800c184:	3708      	adds	r7, #8
 800c186:	46bd      	mov	sp, r7
 800c188:	bd80      	pop	{r7, pc}

0800c18a <gps_process>:
 * \param[in]       data: Received data
 * \param[in]       len: Number of bytes to process
 * \return          `1` on success, `0` otherwise
 */
uint8_t
gps_process(gps_t* gh, const void* data, size_t len) {
 800c18a:	b580      	push	{r7, lr}
 800c18c:	b086      	sub	sp, #24
 800c18e:	af00      	add	r7, sp, #0
 800c190:	60f8      	str	r0, [r7, #12]
 800c192:	60b9      	str	r1, [r7, #8]
 800c194:	607a      	str	r2, [r7, #4]
	const uint8_t* d = data;
 800c196:	68bb      	ldr	r3, [r7, #8]
 800c198:	617b      	str	r3, [r7, #20]

	while (len--) {                             /* Process all bytes */
 800c19a:	e0a4      	b.n	800c2e6 <gps_process+0x15c>
		if (*d == '$') {                        /* Check for beginning of NMEA line */
 800c19c:	697b      	ldr	r3, [r7, #20]
 800c19e:	781b      	ldrb	r3, [r3, #0]
 800c1a0:	2b24      	cmp	r3, #36	; 0x24
 800c1a2:	d125      	bne.n	800c1f0 <gps_process+0x66>
			memset(&gh->p, 0x00, sizeof(gh->p));/* Reset private memory */
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	3344      	adds	r3, #68	; 0x44
 800c1a8:	2230      	movs	r2, #48	; 0x30
 800c1aa:	2100      	movs	r1, #0
 800c1ac:	4618      	mov	r0, r3
 800c1ae:	f002 f9d8 	bl	800e562 <memset>
			TERM_ADD(gh, *d);                   /* Add character to term */
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800c1b8:	2b0b      	cmp	r3, #11
 800c1ba:	f200 8091 	bhi.w	800c2e0 <gps_process+0x156>
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800c1c4:	1c5a      	adds	r2, r3, #1
 800c1c6:	b2d1      	uxtb	r1, r2
 800c1c8:	68fa      	ldr	r2, [r7, #12]
 800c1ca:	f882 1052 	strb.w	r1, [r2, #82]	; 0x52
 800c1ce:	4619      	mov	r1, r3
 800c1d0:	697b      	ldr	r3, [r7, #20]
 800c1d2:	781a      	ldrb	r2, [r3, #0]
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	440b      	add	r3, r1
 800c1d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800c1e2:	461a      	mov	r2, r3
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	4413      	add	r3, r2
 800c1e8:	2200      	movs	r2, #0
 800c1ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c1ee:	e077      	b.n	800c2e0 <gps_process+0x156>
		} else if (*d == ',') {                 /* Term separator character */
 800c1f0:	697b      	ldr	r3, [r7, #20]
 800c1f2:	781b      	ldrb	r3, [r3, #0]
 800c1f4:	2b2c      	cmp	r3, #44	; 0x2c
 800c1f6:	d11d      	bne.n	800c234 <gps_process+0xaa>
			parse_term(gh);                     /* Parse term we have currently in memory */
 800c1f8:	68f8      	ldr	r0, [r7, #12]
 800c1fa:	f7ff fc0b 	bl	800ba14 <parse_term>
			CRC_ADD(gh, *d);                    /* Add character to CRC computation */
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 800c204:	697b      	ldr	r3, [r7, #20]
 800c206:	781b      	ldrb	r3, [r3, #0]
 800c208:	4053      	eors	r3, r2
 800c20a:	b2da      	uxtb	r2, r3
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			TERM_NEXT(gh);                      /* Start with next term */
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	2200      	movs	r2, #0
 800c216:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	2200      	movs	r2, #0
 800c21e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800c228:	3301      	adds	r3, #1
 800c22a:	b2da      	uxtb	r2, r3
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 800c232:	e055      	b.n	800c2e0 <gps_process+0x156>
		} else if (*d == '*') {                 /* Start indicates end of data for CRC computation */
 800c234:	697b      	ldr	r3, [r7, #20]
 800c236:	781b      	ldrb	r3, [r3, #0]
 800c238:	2b2a      	cmp	r3, #42	; 0x2a
 800c23a:	d117      	bne.n	800c26c <gps_process+0xe2>
			parse_term(gh);                     /* Parse term we have currently in memory */
 800c23c:	68f8      	ldr	r0, [r7, #12]
 800c23e:	f7ff fbe9 	bl	800ba14 <parse_term>
			gh->p.star = 1;                     /* STAR detected */
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	2201      	movs	r2, #1
 800c246:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			TERM_NEXT(gh);                      /* Start with next term */
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	2200      	movs	r2, #0
 800c24e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	2200      	movs	r2, #0
 800c256:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800c260:	3301      	adds	r3, #1
 800c262:	b2da      	uxtb	r2, r3
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 800c26a:	e039      	b.n	800c2e0 <gps_process+0x156>
		} else if (*d == '\r') {
 800c26c:	697b      	ldr	r3, [r7, #20]
 800c26e:	781b      	ldrb	r3, [r3, #0]
 800c270:	2b0d      	cmp	r3, #13
 800c272:	d109      	bne.n	800c288 <gps_process+0xfe>
			if (check_crc(gh)) {                /* Check for CRC result */
 800c274:	68f8      	ldr	r0, [r7, #12]
 800c276:	f7ff fe63 	bl	800bf40 <check_crc>
 800c27a:	4603      	mov	r3, r0
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d02f      	beq.n	800c2e0 <gps_process+0x156>
				/* CRC is OK, in theory we can copy data from statements to user data */
				copy_from_tmp_memory(gh);       /* Copy memory from temporary to user memory */
 800c280:	68f8      	ldr	r0, [r7, #12]
 800c282:	f7ff fee6 	bl	800c052 <copy_from_tmp_memory>
 800c286:	e02b      	b.n	800c2e0 <gps_process+0x156>
			}
		} else {
			if (!gh->p.star) {                  /* Add to CRC only if star not yet detected */
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d109      	bne.n	800c2a6 <gps_process+0x11c>
				CRC_ADD(gh, *d);                /* Add to CRC */
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 800c298:	697b      	ldr	r3, [r7, #20]
 800c29a:	781b      	ldrb	r3, [r3, #0]
 800c29c:	4053      	eors	r3, r2
 800c29e:	b2da      	uxtb	r2, r3
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			TERM_ADD(gh, *d);                   /* Add character to term */
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800c2ac:	2b0b      	cmp	r3, #11
 800c2ae:	d817      	bhi.n	800c2e0 <gps_process+0x156>
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800c2b6:	1c5a      	adds	r2, r3, #1
 800c2b8:	b2d1      	uxtb	r1, r2
 800c2ba:	68fa      	ldr	r2, [r7, #12]
 800c2bc:	f882 1052 	strb.w	r1, [r2, #82]	; 0x52
 800c2c0:	4619      	mov	r1, r3
 800c2c2:	697b      	ldr	r3, [r7, #20]
 800c2c4:	781a      	ldrb	r2, [r3, #0]
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	440b      	add	r3, r1
 800c2ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800c2d4:	461a      	mov	r2, r3
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	4413      	add	r3, r2
 800c2da:	2200      	movs	r2, #0
 800c2dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
		}
		d++;                                    /* Process next character */
 800c2e0:	697b      	ldr	r3, [r7, #20]
 800c2e2:	3301      	adds	r3, #1
 800c2e4:	617b      	str	r3, [r7, #20]
	while (len--) {                             /* Process all bytes */
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	1e5a      	subs	r2, r3, #1
 800c2ea:	607a      	str	r2, [r7, #4]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	f47f af55 	bne.w	800c19c <gps_process+0x12>
	}
	return 1;
 800c2f2:	2301      	movs	r3, #1
}
 800c2f4:	4618      	mov	r0, r3
 800c2f6:	3718      	adds	r7, #24
 800c2f8:	46bd      	mov	sp, r7
 800c2fa:	bd80      	pop	{r7, pc}

0800c2fc <gps_to_speed>:
 * \param[in]       sik: Speed in knots, received from GPS NMEA statement
 * \param[in]       ts: Target speed to convert to from knots
 * \return          Speed calculated from knots
 */
gps_float_t
gps_to_speed(gps_float_t sik, gps_speed_t ts) {
 800c2fc:	b480      	push	{r7}
 800c2fe:	b083      	sub	sp, #12
 800c300:	af00      	add	r7, sp, #0
 800c302:	ed87 0a01 	vstr	s0, [r7, #4]
 800c306:	4603      	mov	r3, r0
 800c308:	70fb      	strb	r3, [r7, #3]
	switch (ts) {
 800c30a:	78fb      	ldrb	r3, [r7, #3]
 800c30c:	2b0e      	cmp	r3, #14
 800c30e:	f200 8086 	bhi.w	800c41e <gps_to_speed+0x122>
 800c312:	a201      	add	r2, pc, #4	; (adr r2, 800c318 <gps_to_speed+0x1c>)
 800c314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c318:	0800c355 	.word	0x0800c355
 800c31c:	0800c363 	.word	0x0800c363
 800c320:	0800c371 	.word	0x0800c371
 800c324:	0800c37f 	.word	0x0800c37f
 800c328:	0800c38d 	.word	0x0800c38d
 800c32c:	0800c39b 	.word	0x0800c39b
 800c330:	0800c3a9 	.word	0x0800c3a9
 800c334:	0800c3b7 	.word	0x0800c3b7
 800c338:	0800c3c5 	.word	0x0800c3c5
 800c33c:	0800c3d3 	.word	0x0800c3d3
 800c340:	0800c3e1 	.word	0x0800c3e1
 800c344:	0800c3ef 	.word	0x0800c3ef
 800c348:	0800c3fd 	.word	0x0800c3fd
 800c34c:	0800c40b 	.word	0x0800c40b
 800c350:	0800c419 	.word	0x0800c419
	case gps_speed_kps:     return FLT(sik * FLT(0.000514));
 800c354:	edd7 7a01 	vldr	s15, [r7, #4]
 800c358:	ed9f 7a35 	vldr	s14, [pc, #212]	; 800c430 <gps_to_speed+0x134>
 800c35c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c360:	e05f      	b.n	800c422 <gps_to_speed+0x126>
	case gps_speed_kph:     return FLT(sik * FLT(1.852));
 800c362:	edd7 7a01 	vldr	s15, [r7, #4]
 800c366:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800c434 <gps_to_speed+0x138>
 800c36a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c36e:	e058      	b.n	800c422 <gps_to_speed+0x126>
	case gps_speed_mps:     return FLT(sik * FLT(0.5144));
 800c370:	edd7 7a01 	vldr	s15, [r7, #4]
 800c374:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800c438 <gps_to_speed+0x13c>
 800c378:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c37c:	e051      	b.n	800c422 <gps_to_speed+0x126>
	case gps_speed_mpm:     return FLT(sik * FLT(30.87));
 800c37e:	edd7 7a01 	vldr	s15, [r7, #4]
 800c382:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 800c43c <gps_to_speed+0x140>
 800c386:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c38a:	e04a      	b.n	800c422 <gps_to_speed+0x126>

	case gps_speed_mips:    return FLT(sik * FLT(0.0003197));
 800c38c:	edd7 7a01 	vldr	s15, [r7, #4]
 800c390:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 800c440 <gps_to_speed+0x144>
 800c394:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c398:	e043      	b.n	800c422 <gps_to_speed+0x126>
	case gps_speed_mph:     return FLT(sik * FLT(1.151));
 800c39a:	edd7 7a01 	vldr	s15, [r7, #4]
 800c39e:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800c444 <gps_to_speed+0x148>
 800c3a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c3a6:	e03c      	b.n	800c422 <gps_to_speed+0x126>
	case gps_speed_fps:     return FLT(sik * FLT(1.688));
 800c3a8:	edd7 7a01 	vldr	s15, [r7, #4]
 800c3ac:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800c448 <gps_to_speed+0x14c>
 800c3b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c3b4:	e035      	b.n	800c422 <gps_to_speed+0x126>
	case gps_speed_fpm:     return FLT(sik * FLT(101.3));
 800c3b6:	edd7 7a01 	vldr	s15, [r7, #4]
 800c3ba:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800c44c <gps_to_speed+0x150>
 800c3be:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c3c2:	e02e      	b.n	800c422 <gps_to_speed+0x126>

	case gps_speed_mpk:     return FLT(sik * FLT(32.4));
 800c3c4:	edd7 7a01 	vldr	s15, [r7, #4]
 800c3c8:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800c450 <gps_to_speed+0x154>
 800c3cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c3d0:	e027      	b.n	800c422 <gps_to_speed+0x126>
	case gps_speed_spk:     return FLT(sik * FLT(1944.0));
 800c3d2:	edd7 7a01 	vldr	s15, [r7, #4]
 800c3d6:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800c454 <gps_to_speed+0x158>
 800c3da:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c3de:	e020      	b.n	800c422 <gps_to_speed+0x126>
	case gps_speed_sp100m:  return FLT(sik * FLT(194.4));
 800c3e0:	edd7 7a01 	vldr	s15, [r7, #4]
 800c3e4:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800c458 <gps_to_speed+0x15c>
 800c3e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c3ec:	e019      	b.n	800c422 <gps_to_speed+0x126>
	case gps_speed_mipm:    return FLT(sik * FLT(52.14));
 800c3ee:	edd7 7a01 	vldr	s15, [r7, #4]
 800c3f2:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800c45c <gps_to_speed+0x160>
 800c3f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c3fa:	e012      	b.n	800c422 <gps_to_speed+0x126>
	case gps_speed_spm:     return FLT(sik * FLT(3128.0));
 800c3fc:	edd7 7a01 	vldr	s15, [r7, #4]
 800c400:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800c460 <gps_to_speed+0x164>
 800c404:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c408:	e00b      	b.n	800c422 <gps_to_speed+0x126>
	case gps_speed_sp100y:  return FLT(sik * FLT(177.7));
 800c40a:	edd7 7a01 	vldr	s15, [r7, #4]
 800c40e:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800c464 <gps_to_speed+0x168>
 800c412:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c416:	e004      	b.n	800c422 <gps_to_speed+0x126>

	case gps_speed_smph:    return FLT(sik * FLT(1.0));
 800c418:	edd7 7a01 	vldr	s15, [r7, #4]
 800c41c:	e001      	b.n	800c422 <gps_to_speed+0x126>
	default: return 0;
 800c41e:	eddf 7a12 	vldr	s15, [pc, #72]	; 800c468 <gps_to_speed+0x16c>
	}
}
 800c422:	eeb0 0a67 	vmov.f32	s0, s15
 800c426:	370c      	adds	r7, #12
 800c428:	46bd      	mov	sp, r7
 800c42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c42e:	4770      	bx	lr
 800c430:	3a06bdf5 	.word	0x3a06bdf5
 800c434:	3fed0e56 	.word	0x3fed0e56
 800c438:	3f03afb8 	.word	0x3f03afb8
 800c43c:	41f6f5c3 	.word	0x41f6f5c3
 800c440:	39a79d68 	.word	0x39a79d68
 800c444:	3f9353f8 	.word	0x3f9353f8
 800c448:	3fd81062 	.word	0x3fd81062
 800c44c:	42ca999a 	.word	0x42ca999a
 800c450:	4201999a 	.word	0x4201999a
 800c454:	44f30000 	.word	0x44f30000
 800c458:	43426666 	.word	0x43426666
 800c45c:	42508f5c 	.word	0x42508f5c
 800c460:	45438000 	.word	0x45438000
 800c464:	4331b333 	.word	0x4331b333
 800c468:	00000000 	.word	0x00000000

0800c46c <Ublox_Init>:
char 		PAYLOAD[SIMCOM_POS_HEADER_LENGTH+SIMCOM_POS_DATA_LENGTH];
//simcom struct
sim_t 	sim;

/* USER CODE END PV */
void Ublox_Init(gps_t *hgps){
 800c46c:	b580      	push	{r7, lr}
 800c46e:	b082      	sub	sp, #8
 800c470:	af00      	add	r7, sp, #0
 800c472:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(UBLOX_PWR_GPIO_Port, UBLOX_PWR_Pin, GPIO_PIN_SET);
 800c474:	2201      	movs	r2, #1
 800c476:	2102      	movs	r1, #2
 800c478:	4806      	ldr	r0, [pc, #24]	; (800c494 <Ublox_Init+0x28>)
 800c47a:	f7f5 ffc3 	bl	8002404 <HAL_GPIO_WritePin>
	osDelay(50);
 800c47e:	2032      	movs	r0, #50	; 0x32
 800c480:	f7f9 fa4f 	bl	8005922 <osDelay>
	gps_init(hgps);
 800c484:	6878      	ldr	r0, [r7, #4]
 800c486:	f7ff fe72 	bl	800c16e <gps_init>
}
 800c48a:	bf00      	nop
 800c48c:	3708      	adds	r7, #8
 800c48e:	46bd      	mov	sp, r7
 800c490:	bd80      	pop	{r7, pc}
 800c492:	bf00      	nop
 800c494:	40020800 	.word	0x40020800

0800c498 <Simcom_On>:

static void Simcom_On(void){
 800c498:	b580      	push	{r7, lr}
 800c49a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SIMCOM_PWR_GPIO_Port, SIMCOM_PWR_Pin, GPIO_PIN_RESET);
 800c49c:	2200      	movs	r2, #0
 800c49e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c4a2:	4808      	ldr	r0, [pc, #32]	; (800c4c4 <Simcom_On+0x2c>)
 800c4a4:	f7f5 ffae 	bl	8002404 <HAL_GPIO_WritePin>
	osDelay(70);
 800c4a8:	2046      	movs	r0, #70	; 0x46
 800c4aa:	f7f9 fa3a 	bl	8005922 <osDelay>
	HAL_GPIO_WritePin(SIMCOM_PWR_GPIO_Port, SIMCOM_PWR_Pin, GPIO_PIN_SET);
 800c4ae:	2201      	movs	r2, #1
 800c4b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c4b4:	4803      	ldr	r0, [pc, #12]	; (800c4c4 <Simcom_On+0x2c>)
 800c4b6:	f7f5 ffa5 	bl	8002404 <HAL_GPIO_WritePin>
	osDelay(50);
 800c4ba:	2032      	movs	r0, #50	; 0x32
 800c4bc:	f7f9 fa31 	bl	8005922 <osDelay>
}
 800c4c0:	bf00      	nop
 800c4c2:	bd80      	pop	{r7, pc}
 800c4c4:	40020c00 	.word	0x40020c00

0800c4c8 <Simcom_Reset>:

static void Simcom_Reset(void){
 800c4c8:	b580      	push	{r7, lr}
 800c4ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SIMCOM_RST_GPIO_Port, SIMCOM_RST_Pin, GPIO_PIN_RESET);
 800c4cc:	2200      	movs	r2, #0
 800c4ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800c4d2:	4808      	ldr	r0, [pc, #32]	; (800c4f4 <Simcom_Reset+0x2c>)
 800c4d4:	f7f5 ff96 	bl	8002404 <HAL_GPIO_WritePin>
	osDelay(10);
 800c4d8:	200a      	movs	r0, #10
 800c4da:	f7f9 fa22 	bl	8005922 <osDelay>
	HAL_GPIO_WritePin(SIMCOM_RST_GPIO_Port, SIMCOM_RST_Pin, GPIO_PIN_SET);
 800c4de:	2201      	movs	r2, #1
 800c4e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800c4e4:	4803      	ldr	r0, [pc, #12]	; (800c4f4 <Simcom_Reset+0x2c>)
 800c4e6:	f7f5 ff8d 	bl	8002404 <HAL_GPIO_WritePin>
	osDelay(50);
 800c4ea:	2032      	movs	r0, #50	; 0x32
 800c4ec:	f7f9 fa19 	bl	8005922 <osDelay>
}
 800c4f0:	bf00      	nop
 800c4f2:	bd80      	pop	{r7, pc}
 800c4f4:	40020400 	.word	0x40020400

0800c4f8 <Simcom_Boot>:

static uint8_t Simcom_Boot(void){
 800c4f8:	b590      	push	{r4, r7, lr}
 800c4fa:	b085      	sub	sp, #20
 800c4fc:	af00      	add	r7, sp, #0
	uint32_t tick;
	uint64_t timeout_tick;

	// reset the state of simcom module
	Simcom_Reset();
 800c4fe:	f7ff ffe3 	bl	800c4c8 <Simcom_Reset>
	// turn off sequence
	Simcom_On();
 800c502:	f7ff ffc9 	bl	800c498 <Simcom_On>
	// set timeout guard (for first boot always 20 second)
	timeout_tick = osKernelSysTickMicroSec(20*1000*1000);
 800c506:	f644 6320 	movw	r3, #20000	; 0x4e20
 800c50a:	f04f 0400 	mov.w	r4, #0
 800c50e:	e9c7 3402 	strd	r3, r4, [r7, #8]
	tick = osKernelSysTick();
 800c512:	f7f9 f9aa 	bl	800586a <osKernelSysTick>
 800c516:	6078      	str	r0, [r7, #4]
	// wait until booting is done
	while ( !(Simcom_Response(SIMCOM_STATUS_READY) || (osKernelSysTick() - tick) > timeout_tick) );
 800c518:	bf00      	nop
 800c51a:	4814      	ldr	r0, [pc, #80]	; (800c56c <Simcom_Boot+0x74>)
 800c51c:	f000 f828 	bl	800c570 <Simcom_Response>
 800c520:	4603      	mov	r3, r0
 800c522:	2b00      	cmp	r3, #0
 800c524:	d10c      	bne.n	800c540 <Simcom_Boot+0x48>
 800c526:	f7f9 f9a0 	bl	800586a <osKernelSysTick>
 800c52a:	4602      	mov	r2, r0
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	1ad3      	subs	r3, r2, r3
 800c530:	f04f 0400 	mov.w	r4, #0
 800c534:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800c538:	42a2      	cmp	r2, r4
 800c53a:	bf08      	it	eq
 800c53c:	4299      	cmpeq	r1, r3
 800c53e:	d2ec      	bcs.n	800c51a <Simcom_Boot+0x22>
	// handle timeout
	return (uint8_t) ((osKernelSysTick() - tick) < timeout_tick);
 800c540:	f7f9 f993 	bl	800586a <osKernelSysTick>
 800c544:	4602      	mov	r2, r0
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	1ad3      	subs	r3, r2, r3
 800c54a:	4619      	mov	r1, r3
 800c54c:	f04f 0200 	mov.w	r2, #0
 800c550:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800c554:	42a2      	cmp	r2, r4
 800c556:	bf08      	it	eq
 800c558:	4299      	cmpeq	r1, r3
 800c55a:	bf34      	ite	cc
 800c55c:	2301      	movcc	r3, #1
 800c55e:	2300      	movcs	r3, #0
 800c560:	b2db      	uxtb	r3, r3
}
 800c562:	4618      	mov	r0, r3
 800c564:	3714      	adds	r7, #20
 800c566:	46bd      	mov	sp, r7
 800c568:	bd90      	pop	{r4, r7, pc}
 800c56a:	bf00      	nop
 800c56c:	08011fb8 	.word	0x08011fb8

0800c570 <Simcom_Response>:

static uint8_t Simcom_Response(char *str)
{
 800c570:	b580      	push	{r7, lr}
 800c572:	b082      	sub	sp, #8
 800c574:	af00      	add	r7, sp, #0
 800c576:	6078      	str	r0, [r7, #4]
	if (strstr(SIMCOM_UART_RX_Buffer, str) != NULL)
 800c578:	6879      	ldr	r1, [r7, #4]
 800c57a:	4806      	ldr	r0, [pc, #24]	; (800c594 <Simcom_Response+0x24>)
 800c57c:	f002 f856 	bl	800e62c <strstr>
 800c580:	4603      	mov	r3, r0
 800c582:	2b00      	cmp	r3, #0
 800c584:	d001      	beq.n	800c58a <Simcom_Response+0x1a>
	{
		return 1;
 800c586:	2301      	movs	r3, #1
 800c588:	e000      	b.n	800c58c <Simcom_Response+0x1c>
	}
	return 0;
 800c58a:	2300      	movs	r3, #0
}
 800c58c:	4618      	mov	r0, r3
 800c58e:	3708      	adds	r7, #8
 800c590:	46bd      	mov	sp, r7
 800c592:	bd80      	pop	{r7, pc}
 800c594:	200067f8 	.word	0x200067f8

0800c598 <Simcom_Send>:

static uint8_t Simcom_Send(char *cmd, uint32_t ms)
{
 800c598:	b580      	push	{r7, lr}
 800c59a:	b086      	sub	sp, #24
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	6078      	str	r0, [r7, #4]
 800c5a0:	6039      	str	r1, [r7, #0]
	osRecursiveMutexWait(SimcomRecMutexHandle, osWaitForever);
 800c5a2:	4b43      	ldr	r3, [pc, #268]	; (800c6b0 <Simcom_Send+0x118>)
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	f04f 31ff 	mov.w	r1, #4294967295
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	f7f9 fbfd 	bl	8005daa <osRecursiveMutexWait>

	uint8_t ret;
	uint32_t tick, timeout_tick;
	// reset rx buffer
	SIMCOM_Reset_Buffer();
 800c5b0:	f7fc ffe0 	bl	8009574 <SIMCOM_Reset_Buffer>
	// transmit to serial
	SIMCOM_Transmit(cmd, strlen(cmd));
 800c5b4:	6878      	ldr	r0, [r7, #4]
 800c5b6:	f7f3 fe15 	bl	80001e4 <strlen>
 800c5ba:	4603      	mov	r3, r0
 800c5bc:	b29b      	uxth	r3, r3
 800c5be:	4619      	mov	r1, r3
 800c5c0:	6878      	ldr	r0, [r7, #4]
 800c5c2:	f7fc ffeb 	bl	800959c <SIMCOM_Transmit>
	// convert time to tick
	timeout_tick = osKernelSysTickMicroSec(SIMCOM_CMD_TIMEOUT*1000*1000);
 800c5c6:	f241 3388 	movw	r3, #5000	; 0x1388
 800c5ca:	613b      	str	r3, [r7, #16]
	// set timeout guard
	tick = osKernelSysTick();
 800c5cc:	f7f9 f94d 	bl	800586a <osKernelSysTick>
 800c5d0:	60f8      	str	r0, [r7, #12]
	// wait for response to complete
	if(strstr(cmd, SIMCOM_MESSAGE_END) == NULL) {
 800c5d2:	211a      	movs	r1, #26
 800c5d4:	6878      	ldr	r0, [r7, #4]
 800c5d6:	f001 ffed 	bl	800e5b4 <strchr>
 800c5da:	4603      	mov	r3, r0
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d104      	bne.n	800c5ea <Simcom_Send+0x52>
		osDelay(200 + ms);
 800c5e0:	683b      	ldr	r3, [r7, #0]
 800c5e2:	33c8      	adds	r3, #200	; 0xc8
 800c5e4:	4618      	mov	r0, r3
 800c5e6:	f7f9 f99c 	bl	8005922 <osDelay>
	}
	// wait response from SIMCOM
	while ( !(Simcom_Response(SIMCOM_STATUS_SEND) || Simcom_Response(SIMCOM_STATUS_CIPSEND) || Simcom_Response(SIMCOM_STATUS_OK) || Simcom_Response(SIMCOM_STATUS_RESTARTED) || Simcom_Response(SIMCOM_STATUS_ERROR) || (osKernelSysTick() - tick) >= timeout_tick) );
 800c5ea:	bf00      	nop
 800c5ec:	4831      	ldr	r0, [pc, #196]	; (800c6b4 <Simcom_Send+0x11c>)
 800c5ee:	f7ff ffbf 	bl	800c570 <Simcom_Response>
 800c5f2:	4603      	mov	r3, r0
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d11f      	bne.n	800c638 <Simcom_Send+0xa0>
 800c5f8:	482f      	ldr	r0, [pc, #188]	; (800c6b8 <Simcom_Send+0x120>)
 800c5fa:	f7ff ffb9 	bl	800c570 <Simcom_Response>
 800c5fe:	4603      	mov	r3, r0
 800c600:	2b00      	cmp	r3, #0
 800c602:	d119      	bne.n	800c638 <Simcom_Send+0xa0>
 800c604:	482d      	ldr	r0, [pc, #180]	; (800c6bc <Simcom_Send+0x124>)
 800c606:	f7ff ffb3 	bl	800c570 <Simcom_Response>
 800c60a:	4603      	mov	r3, r0
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d113      	bne.n	800c638 <Simcom_Send+0xa0>
 800c610:	482b      	ldr	r0, [pc, #172]	; (800c6c0 <Simcom_Send+0x128>)
 800c612:	f7ff ffad 	bl	800c570 <Simcom_Response>
 800c616:	4603      	mov	r3, r0
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d10d      	bne.n	800c638 <Simcom_Send+0xa0>
 800c61c:	4829      	ldr	r0, [pc, #164]	; (800c6c4 <Simcom_Send+0x12c>)
 800c61e:	f7ff ffa7 	bl	800c570 <Simcom_Response>
 800c622:	4603      	mov	r3, r0
 800c624:	2b00      	cmp	r3, #0
 800c626:	d107      	bne.n	800c638 <Simcom_Send+0xa0>
 800c628:	f7f9 f91f 	bl	800586a <osKernelSysTick>
 800c62c:	4602      	mov	r2, r0
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	1ad3      	subs	r3, r2, r3
 800c632:	693a      	ldr	r2, [r7, #16]
 800c634:	429a      	cmp	r2, r3
 800c636:	d8d9      	bhi.n	800c5ec <Simcom_Send+0x54>
	// handle timeout & error
	if ( Simcom_Response(SIMCOM_STATUS_ERROR) || Simcom_Response(SIMCOM_STATUS_RESTARTED) || (osKernelSysTick() - tick) > timeout_tick ){
 800c638:	4822      	ldr	r0, [pc, #136]	; (800c6c4 <Simcom_Send+0x12c>)
 800c63a:	f7ff ff99 	bl	800c570 <Simcom_Response>
 800c63e:	4603      	mov	r3, r0
 800c640:	2b00      	cmp	r3, #0
 800c642:	d10d      	bne.n	800c660 <Simcom_Send+0xc8>
 800c644:	481e      	ldr	r0, [pc, #120]	; (800c6c0 <Simcom_Send+0x128>)
 800c646:	f7ff ff93 	bl	800c570 <Simcom_Response>
 800c64a:	4603      	mov	r3, r0
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d107      	bne.n	800c660 <Simcom_Send+0xc8>
 800c650:	f7f9 f90b 	bl	800586a <osKernelSysTick>
 800c654:	4602      	mov	r2, r0
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	1ad3      	subs	r3, r2, r3
 800c65a:	693a      	ldr	r2, [r7, #16]
 800c65c:	429a      	cmp	r2, r3
 800c65e:	d202      	bcs.n	800c666 <Simcom_Send+0xce>
		ret = 0;
 800c660:	2300      	movs	r3, #0
 800c662:	75fb      	strb	r3, [r7, #23]
 800c664:	e001      	b.n	800c66a <Simcom_Send+0xd2>
	} else {
		ret = 1;
 800c666:	2301      	movs	r3, #1
 800c668:	75fb      	strb	r3, [r7, #23]
	}
	// print for debugger
	if(strstr(cmd, SIMCOM_MESSAGE_END) == NULL) {
 800c66a:	211a      	movs	r1, #26
 800c66c:	6878      	ldr	r0, [r7, #4]
 800c66e:	f001 ffa1 	bl	800e5b4 <strchr>
 800c672:	4603      	mov	r3, r0
 800c674:	2b00      	cmp	r3, #0
 800c676:	d107      	bne.n	800c688 <Simcom_Send+0xf0>
		sprintf(str, "\n=> %s", cmd);
 800c678:	687a      	ldr	r2, [r7, #4]
 800c67a:	4913      	ldr	r1, [pc, #76]	; (800c6c8 <Simcom_Send+0x130>)
 800c67c:	4813      	ldr	r0, [pc, #76]	; (800c6cc <Simcom_Send+0x134>)
 800c67e:	f001 ff79 	bl	800e574 <siprintf>
		swvPrint(str);
 800c682:	4812      	ldr	r0, [pc, #72]	; (800c6cc <Simcom_Send+0x134>)
 800c684:	f7fd fa6c 	bl	8009b60 <swvPrint>
	}
	sprintf(str, "%s\n", SIMCOM_UART_RX_Buffer);
 800c688:	4a11      	ldr	r2, [pc, #68]	; (800c6d0 <Simcom_Send+0x138>)
 800c68a:	4912      	ldr	r1, [pc, #72]	; (800c6d4 <Simcom_Send+0x13c>)
 800c68c:	480f      	ldr	r0, [pc, #60]	; (800c6cc <Simcom_Send+0x134>)
 800c68e:	f001 ff71 	bl	800e574 <siprintf>
	swvPrint(str);
 800c692:	480e      	ldr	r0, [pc, #56]	; (800c6cc <Simcom_Send+0x134>)
 800c694:	f7fd fa64 	bl	8009b60 <swvPrint>
	// check if it has new command
	Simcom_Check_Command();
 800c698:	f000 fb68 	bl	800cd6c <Simcom_Check_Command>

	osRecursiveMutexRelease(SimcomRecMutexHandle);
 800c69c:	4b04      	ldr	r3, [pc, #16]	; (800c6b0 <Simcom_Send+0x118>)
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	4618      	mov	r0, r3
 800c6a2:	f7f9 fb6f 	bl	8005d84 <osRecursiveMutexRelease>
	return ret;
 800c6a6:	7dfb      	ldrb	r3, [r7, #23]
}
 800c6a8:	4618      	mov	r0, r3
 800c6aa:	3718      	adds	r7, #24
 800c6ac:	46bd      	mov	sp, r7
 800c6ae:	bd80      	pop	{r7, pc}
 800c6b0:	200083e0 	.word	0x200083e0
 800c6b4:	08011fc4 	.word	0x08011fc4
 800c6b8:	08011fc8 	.word	0x08011fc8
 800c6bc:	08011fd4 	.word	0x08011fd4
 800c6c0:	08011fdc 	.word	0x08011fdc
 800c6c4:	08011fe4 	.word	0x08011fe4
 800c6c8:	08011fec 	.word	0x08011fec
 800c6cc:	20007a8c 	.word	0x20007a8c
 800c6d0:	200067f8 	.word	0x200067f8
 800c6d4:	08011ff4 	.word	0x08011ff4

0800c6d8 <Simcom_Send_Repeat>:

static uint8_t Simcom_Send_Repeat(char *command, uint32_t ms, char *response)
{
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	b086      	sub	sp, #24
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	60f8      	str	r0, [r7, #12]
 800c6e0:	60b9      	str	r1, [r7, #8]
 800c6e2:	607a      	str	r2, [r7, #4]
	osRecursiveMutexWait(SimcomRecMutexHandle, osWaitForever);
 800c6e4:	4b1d      	ldr	r3, [pc, #116]	; (800c75c <Simcom_Send_Repeat+0x84>)
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	f04f 31ff 	mov.w	r1, #4294967295
 800c6ec:	4618      	mov	r0, r3
 800c6ee:	f7f9 fb5c 	bl	8005daa <osRecursiveMutexWait>

	uint8_t ret = 1, seq = 1, seq_max = 5;
 800c6f2:	2301      	movs	r3, #1
 800c6f4:	75fb      	strb	r3, [r7, #23]
 800c6f6:	2301      	movs	r3, #1
 800c6f8:	75bb      	strb	r3, [r7, #22]
 800c6fa:	2305      	movs	r3, #5
 800c6fc:	757b      	strb	r3, [r7, #21]
	// repeat command until desired response
	do {
		if(seq > 1) {
 800c6fe:	7dbb      	ldrb	r3, [r7, #22]
 800c700:	2b01      	cmp	r3, #1
 800c702:	d903      	bls.n	800c70c <Simcom_Send_Repeat+0x34>
			// execute command every timeout guard elapsed
			osDelay(SIMCOM_CMD_TIMEOUT*500);
 800c704:	f640 10c4 	movw	r0, #2500	; 0x9c4
 800c708:	f7f9 f90b 	bl	8005922 <osDelay>
		}
		// send command
		if (seq <= seq_max) {
 800c70c:	7dba      	ldrb	r2, [r7, #22]
 800c70e:	7d7b      	ldrb	r3, [r7, #21]
 800c710:	429a      	cmp	r2, r3
 800c712:	d80c      	bhi.n	800c72e <Simcom_Send_Repeat+0x56>
			Simcom_Send(command, ms);
 800c714:	68b9      	ldr	r1, [r7, #8]
 800c716:	68f8      	ldr	r0, [r7, #12]
 800c718:	f7ff ff3e 	bl	800c598 <Simcom_Send>
			// if device error, break
			if (Simcom_Response(SIMCOM_STATUS_RESTARTED)) {
 800c71c:	4810      	ldr	r0, [pc, #64]	; (800c760 <Simcom_Send_Repeat+0x88>)
 800c71e:	f7ff ff27 	bl	800c570 <Simcom_Response>
 800c722:	4603      	mov	r3, r0
 800c724:	2b00      	cmp	r3, #0
 800c726:	d005      	beq.n	800c734 <Simcom_Send_Repeat+0x5c>
				ret = 0;
 800c728:	2300      	movs	r3, #0
 800c72a:	75fb      	strb	r3, [r7, #23]
				break;
 800c72c:	e00b      	b.n	800c746 <Simcom_Send_Repeat+0x6e>
			}
		} else {
			// if until max sequence still error, break
			ret = 0;
 800c72e:	2300      	movs	r3, #0
 800c730:	75fb      	strb	r3, [r7, #23]
			break;
 800c732:	e008      	b.n	800c746 <Simcom_Send_Repeat+0x6e>
		}
		// increment sequence
		seq++;
 800c734:	7dbb      	ldrb	r3, [r7, #22]
 800c736:	3301      	adds	r3, #1
 800c738:	75bb      	strb	r3, [r7, #22]
	} while (!Simcom_Response(response));
 800c73a:	6878      	ldr	r0, [r7, #4]
 800c73c:	f7ff ff18 	bl	800c570 <Simcom_Response>
 800c740:	4603      	mov	r3, r0
 800c742:	2b00      	cmp	r3, #0
 800c744:	d0db      	beq.n	800c6fe <Simcom_Send_Repeat+0x26>

	osRecursiveMutexRelease(SimcomRecMutexHandle);
 800c746:	4b05      	ldr	r3, [pc, #20]	; (800c75c <Simcom_Send_Repeat+0x84>)
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	4618      	mov	r0, r3
 800c74c:	f7f9 fb1a 	bl	8005d84 <osRecursiveMutexRelease>
	return ret;
 800c750:	7dfb      	ldrb	r3, [r7, #23]
}
 800c752:	4618      	mov	r0, r3
 800c754:	3718      	adds	r7, #24
 800c756:	46bd      	mov	sp, r7
 800c758:	bd80      	pop	{r7, pc}
 800c75a:	bf00      	nop
 800c75c:	200083e0 	.word	0x200083e0
 800c760:	08011fdc 	.word	0x08011fdc

0800c764 <Simcom_Set_Default_Data>:

static void Simcom_Set_Default_Data(void){
 800c764:	b580      	push	{r7, lr}
 800c766:	af00      	add	r7, sp, #0
	// set initial data
	strcpy(sim.header.prefix, "@P");
 800c768:	4b36      	ldr	r3, [pc, #216]	; (800c844 <Simcom_Set_Default_Data+0xe0>)
 800c76a:	4a37      	ldr	r2, [pc, #220]	; (800c848 <Simcom_Set_Default_Data+0xe4>)
 800c76c:	6812      	ldr	r2, [r2, #0]
 800c76e:	4611      	mov	r1, r2
 800c770:	8019      	strh	r1, [r3, #0]
 800c772:	3302      	adds	r3, #2
 800c774:	0c12      	lsrs	r2, r2, #16
 800c776:	701a      	strb	r2, [r3, #0]
	strcpy(sim.header.unit_id, "354453");
 800c778:	4b34      	ldr	r3, [pc, #208]	; (800c84c <Simcom_Set_Default_Data+0xe8>)
 800c77a:	4a35      	ldr	r2, [pc, #212]	; (800c850 <Simcom_Set_Default_Data+0xec>)
 800c77c:	6810      	ldr	r0, [r2, #0]
 800c77e:	6018      	str	r0, [r3, #0]
 800c780:	8891      	ldrh	r1, [r2, #4]
 800c782:	7992      	ldrb	r2, [r2, #6]
 800c784:	8099      	strh	r1, [r3, #4]
 800c786:	719a      	strb	r2, [r3, #6]
	sim.header.crc = 0;
 800c788:	4b2e      	ldr	r3, [pc, #184]	; (800c844 <Simcom_Set_Default_Data+0xe0>)
 800c78a:	2200      	movs	r2, #0
 800c78c:	809a      	strh	r2, [r3, #4]
	sim.header.length = 0;
 800c78e:	4b2d      	ldr	r3, [pc, #180]	; (800c844 <Simcom_Set_Default_Data+0xe0>)
 800c790:	2200      	movs	r2, #0
 800c792:	80da      	strh	r2, [r3, #6]
	sim.header.seq_id = 0;
 800c794:	4b2b      	ldr	r3, [pc, #172]	; (800c844 <Simcom_Set_Default_Data+0xe0>)
 800c796:	2200      	movs	r2, #0
 800c798:	811a      	strh	r2, [r3, #8]

	strcpy(sim.data.datetime_rtc, "");
 800c79a:	4b2a      	ldr	r3, [pc, #168]	; (800c844 <Simcom_Set_Default_Data+0xe0>)
 800c79c:	2200      	movs	r2, #0
 800c79e:	751a      	strb	r2, [r3, #20]
	strcpy(sim.data.speed, "0");
 800c7a0:	4a2c      	ldr	r2, [pc, #176]	; (800c854 <Simcom_Set_Default_Data+0xf0>)
 800c7a2:	4b2d      	ldr	r3, [pc, #180]	; (800c858 <Simcom_Set_Default_Data+0xf4>)
 800c7a4:	881b      	ldrh	r3, [r3, #0]
 800c7a6:	8013      	strh	r3, [r2, #0]
	strcpy(sim.data.driver_id, "31313");
 800c7a8:	4b2c      	ldr	r3, [pc, #176]	; (800c85c <Simcom_Set_Default_Data+0xf8>)
 800c7aa:	4a2d      	ldr	r2, [pc, #180]	; (800c860 <Simcom_Set_Default_Data+0xfc>)
 800c7ac:	6810      	ldr	r0, [r2, #0]
 800c7ae:	6018      	str	r0, [r3, #0]
 800c7b0:	8892      	ldrh	r2, [r2, #4]
 800c7b2:	809a      	strh	r2, [r3, #4]
	strcpy(sim.data.message, "");
 800c7b4:	4b23      	ldr	r3, [pc, #140]	; (800c844 <Simcom_Set_Default_Data+0xe0>)
 800c7b6:	2200      	movs	r2, #0
 800c7b8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	sim.data.reportd_id = 2;
 800c7bc:	4b21      	ldr	r3, [pc, #132]	; (800c844 <Simcom_Set_Default_Data+0xe0>)
 800c7be:	2202      	movs	r2, #2
 800c7c0:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	sim.data.odometer = Flash_Get_Odometer();
 800c7c4:	f7fd fba6 	bl	8009f14 <Flash_Get_Odometer>
 800c7c8:	4602      	mov	r2, r0
 800c7ca:	4b1e      	ldr	r3, [pc, #120]	; (800c844 <Simcom_Set_Default_Data+0xe0>)
 800c7cc:	625a      	str	r2, [r3, #36]	; 0x24
	sim.data.status_input = 0;
 800c7ce:	4b1d      	ldr	r3, [pc, #116]	; (800c844 <Simcom_Set_Default_Data+0xe0>)
 800c7d0:	2200      	movs	r2, #0
 800c7d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	sim.data.status_output = 0;
 800c7d6:	4b1b      	ldr	r3, [pc, #108]	; (800c844 <Simcom_Set_Default_Data+0xe0>)
 800c7d8:	2200      	movs	r2, #0
 800c7da:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	sim.data.analog_input = 0;
 800c7de:	4b19      	ldr	r3, [pc, #100]	; (800c844 <Simcom_Set_Default_Data+0xe0>)
 800c7e0:	2200      	movs	r2, #0
 800c7e2:	861a      	strh	r2, [r3, #48]	; 0x30
	sim.data.temp_sensor1 = 2000;
 800c7e4:	4b17      	ldr	r3, [pc, #92]	; (800c844 <Simcom_Set_Default_Data+0xe0>)
 800c7e6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800c7ea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	sim.data.temp_sensor2 = 2000;
 800c7ee:	4b15      	ldr	r3, [pc, #84]	; (800c844 <Simcom_Set_Default_Data+0xe0>)
 800c7f0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800c7f4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

	strcpy(sim.data.gps.datetime, "");
 800c7f8:	4b12      	ldr	r3, [pc, #72]	; (800c844 <Simcom_Set_Default_Data+0xe0>)
 800c7fa:	2200      	movs	r2, #0
 800c7fc:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
	strcpy(sim.data.gps.longitude, "0");
 800c800:	4a18      	ldr	r2, [pc, #96]	; (800c864 <Simcom_Set_Default_Data+0x100>)
 800c802:	4b15      	ldr	r3, [pc, #84]	; (800c858 <Simcom_Set_Default_Data+0xf4>)
 800c804:	881b      	ldrh	r3, [r3, #0]
 800c806:	8013      	strh	r3, [r2, #0]
	strcpy(sim.data.gps.latitude, "0");
 800c808:	4a17      	ldr	r2, [pc, #92]	; (800c868 <Simcom_Set_Default_Data+0x104>)
 800c80a:	4b13      	ldr	r3, [pc, #76]	; (800c858 <Simcom_Set_Default_Data+0xf4>)
 800c80c:	881b      	ldrh	r3, [r3, #0]
 800c80e:	8013      	strh	r3, [r2, #0]
	strcpy(sim.data.gps.heading, "108");
 800c810:	4b16      	ldr	r3, [pc, #88]	; (800c86c <Simcom_Set_Default_Data+0x108>)
 800c812:	4a17      	ldr	r2, [pc, #92]	; (800c870 <Simcom_Set_Default_Data+0x10c>)
 800c814:	6810      	ldr	r0, [r2, #0]
 800c816:	6018      	str	r0, [r3, #0]
	strcpy(sim.data.gps.hdop, "0");
 800c818:	4b16      	ldr	r3, [pc, #88]	; (800c874 <Simcom_Set_Default_Data+0x110>)
 800c81a:	2230      	movs	r2, #48	; 0x30
 800c81c:	801a      	strh	r2, [r3, #0]
	strcpy(sim.data.gps.datetime, "");
 800c81e:	4b09      	ldr	r3, [pc, #36]	; (800c844 <Simcom_Set_Default_Data+0xe0>)
 800c820:	2200      	movs	r2, #0
 800c822:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
	// prepare command sequence
	sprintf(CIPSEND, "AT+CIPSEND=0,,\"%s\",%d\r", SERVER_IP, SERVER_PORT);
 800c826:	f241 33b4 	movw	r3, #5044	; 0x13b4
 800c82a:	4a13      	ldr	r2, [pc, #76]	; (800c878 <Simcom_Set_Default_Data+0x114>)
 800c82c:	4913      	ldr	r1, [pc, #76]	; (800c87c <Simcom_Set_Default_Data+0x118>)
 800c82e:	4814      	ldr	r0, [pc, #80]	; (800c880 <Simcom_Set_Default_Data+0x11c>)
 800c830:	f001 fea0 	bl	800e574 <siprintf>
	sprintf(CIPOPEN, "AT+CIPOPEN=0,\"UDP\",,,%d\r", LOCAL_PORT);
 800c834:	f241 32b4 	movw	r2, #5044	; 0x13b4
 800c838:	4912      	ldr	r1, [pc, #72]	; (800c884 <Simcom_Set_Default_Data+0x120>)
 800c83a:	4813      	ldr	r0, [pc, #76]	; (800c888 <Simcom_Set_Default_Data+0x124>)
 800c83c:	f001 fe9a 	bl	800e574 <siprintf>
}
 800c840:	bf00      	nop
 800c842:	bd80      	pop	{r7, pc}
 800c844:	20007e8c 	.word	0x20007e8c
 800c848:	08011ff8 	.word	0x08011ff8
 800c84c:	20007e96 	.word	0x20007e96
 800c850:	08011ffc 	.word	0x08011ffc
 800c854:	20007eb5 	.word	0x20007eb5
 800c858:	08012004 	.word	0x08012004
 800c85c:	20007ebe 	.word	0x20007ebe
 800c860:	08012008 	.word	0x08012008
 800c864:	200080d7 	.word	0x200080d7
 800c868:	200080eb 	.word	0x200080eb
 800c86c:	200080ff 	.word	0x200080ff
 800c870:	08012010 	.word	0x08012010
 800c874:	20008104 	.word	0x20008104
 800c878:	08012014 	.word	0x08012014
 800c87c:	08012024 	.word	0x08012024
 800c880:	20007a58 	.word	0x20007a58
 800c884:	0801203c 	.word	0x0801203c
 800c888:	2000810c 	.word	0x2000810c

0800c88c <Simcom_Init>:

void Simcom_Init(uint8_t restart){
 800c88c:	b580      	push	{r7, lr}
 800c88e:	b084      	sub	sp, #16
 800c890:	af00      	add	r7, sp, #0
 800c892:	4603      	mov	r3, r0
 800c894:	71fb      	strb	r3, [r7, #7]
	uint8_t p, boot = !restart;
 800c896:	79fb      	ldrb	r3, [r7, #7]
 800c898:	2b00      	cmp	r3, #0
 800c89a:	bf0c      	ite	eq
 800c89c:	2301      	moveq	r3, #1
 800c89e:	2300      	movne	r3, #0
 800c8a0:	b2db      	uxtb	r3, r3
 800c8a2:	73bb      	strb	r3, [r7, #14]

	// this do-while is complicated, but it doesn't use recursive function, so it's stack safe
	do {
		p = 0;
 800c8a4:	2300      	movs	r3, #0
 800c8a6:	73fb      	strb	r3, [r7, #15]
		// Turn on the module & wait till ready
		if(boot){
 800c8a8:	7bbb      	ldrb	r3, [r7, #14]
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d02b      	beq.n	800c906 <Simcom_Init+0x7a>
			p = Simcom_Boot();
 800c8ae:	f7ff fe23 	bl	800c4f8 <Simcom_Boot>
 800c8b2:	4603      	mov	r3, r0
 800c8b4:	73fb      	strb	r3, [r7, #15]
			// Execute only on first setup
			if(p && !restart) {
 800c8b6:	7bfb      	ldrb	r3, [r7, #15]
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d01c      	beq.n	800c8f6 <Simcom_Init+0x6a>
 800c8bc:	79fb      	ldrb	r3, [r7, #7]
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d119      	bne.n	800c8f6 <Simcom_Init+0x6a>
				//set default value to variable
				Simcom_Set_Default_Data();
 800c8c2:	f7ff ff4f 	bl	800c764 <Simcom_Set_Default_Data>
				//disable command echo
				p = Simcom_Send("ATE1\r", 0);
 800c8c6:	2100      	movs	r1, #0
 800c8c8:	484e      	ldr	r0, [pc, #312]	; (800ca04 <Simcom_Init+0x178>)
 800c8ca:	f7ff fe65 	bl	800c598 <Simcom_Send>
 800c8ce:	4603      	mov	r3, r0
 800c8d0:	73fb      	strb	r3, [r7, #15]
				//set permanent baudrate
				if(p){
 800c8d2:	7bfb      	ldrb	r3, [r7, #15]
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d005      	beq.n	800c8e4 <Simcom_Init+0x58>
					p = Simcom_Send("AT+IPREX=9600\r", 0);
 800c8d8:	2100      	movs	r1, #0
 800c8da:	484b      	ldr	r0, [pc, #300]	; (800ca08 <Simcom_Init+0x17c>)
 800c8dc:	f7ff fe5c 	bl	800c598 <Simcom_Send>
 800c8e0:	4603      	mov	r3, r0
 800c8e2:	73fb      	strb	r3, [r7, #15]
				}
				//save user setting to ME
				if(p){
 800c8e4:	7bfb      	ldrb	r3, [r7, #15]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d005      	beq.n	800c8f6 <Simcom_Init+0x6a>
					p = Simcom_Send("AT&W\r", 0);
 800c8ea:	2100      	movs	r1, #0
 800c8ec:	4847      	ldr	r0, [pc, #284]	; (800ca0c <Simcom_Init+0x180>)
 800c8ee:	f7ff fe53 	bl	800c598 <Simcom_Send>
 800c8f2:	4603      	mov	r3, r0
 800c8f4:	73fb      	strb	r3, [r7, #15]
				}
			}
			// if boot sequence ok, then disable it
			boot = !p;
 800c8f6:	7bfb      	ldrb	r3, [r7, #15]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	bf0c      	ite	eq
 800c8fc:	2301      	moveq	r3, #1
 800c8fe:	2300      	movne	r3, #0
 800c900:	b2db      	uxtb	r3, r3
 800c902:	73bb      	strb	r3, [r7, #14]
 800c904:	e001      	b.n	800c90a <Simcom_Init+0x7e>
		} else {
			p = 1;
 800c906:	2301      	movs	r3, #1
 800c908:	73fb      	strb	r3, [r7, #15]
		}
		//Lock to WCDMA
		if(p){
 800c90a:	7bfb      	ldrb	r3, [r7, #15]
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d005      	beq.n	800c91c <Simcom_Init+0x90>
			// 2: Auto, 13: 2G, 14: 3G
			p = Simcom_Send("AT+CNMP=2\r", 0);
 800c910:	2100      	movs	r1, #0
 800c912:	483f      	ldr	r0, [pc, #252]	; (800ca10 <Simcom_Init+0x184>)
 800c914:	f7ff fe40 	bl	800c598 <Simcom_Send>
 800c918:	4603      	mov	r3, r0
 800c91a:	73fb      	strb	r3, [r7, #15]
		}
		//Hide “+IPD” header
		if(p){
 800c91c:	7bfb      	ldrb	r3, [r7, #15]
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d005      	beq.n	800c92e <Simcom_Init+0xa2>
			p = Simcom_Send("AT+CIPHEAD=0\r", 0);
 800c922:	2100      	movs	r1, #0
 800c924:	483b      	ldr	r0, [pc, #236]	; (800ca14 <Simcom_Init+0x188>)
 800c926:	f7ff fe37 	bl	800c598 <Simcom_Send>
 800c92a:	4603      	mov	r3, r0
 800c92c:	73fb      	strb	r3, [r7, #15]
		}
		//Hide “RECV FROM” header
		if(p){
 800c92e:	7bfb      	ldrb	r3, [r7, #15]
 800c930:	2b00      	cmp	r3, #0
 800c932:	d005      	beq.n	800c940 <Simcom_Init+0xb4>
			p = Simcom_Send("AT+CIPSRIP=0\r", 0);
 800c934:	2100      	movs	r1, #0
 800c936:	4838      	ldr	r0, [pc, #224]	; (800ca18 <Simcom_Init+0x18c>)
 800c938:	f7ff fe2e 	bl	800c598 <Simcom_Send>
 800c93c:	4603      	mov	r3, r0
 800c93e:	73fb      	strb	r3, [r7, #15]
		}
		//Set module to cache received data.
		if(p){
 800c940:	7bfb      	ldrb	r3, [r7, #15]
 800c942:	2b00      	cmp	r3, #0
 800c944:	d005      	beq.n	800c952 <Simcom_Init+0xc6>
			p = Simcom_Send("AT+CIPRXGET=1\r", 0);
 800c946:	2100      	movs	r1, #0
 800c948:	4834      	ldr	r0, [pc, #208]	; (800ca1c <Simcom_Init+0x190>)
 800c94a:	f7ff fe25 	bl	800c598 <Simcom_Send>
 800c94e:	4603      	mov	r3, r0
 800c950:	73fb      	strb	r3, [r7, #15]
		}
		//Inquiring UE system information
		if(p){
 800c952:	7bfb      	ldrb	r3, [r7, #15]
 800c954:	2b00      	cmp	r3, #0
 800c956:	d00d      	beq.n	800c974 <Simcom_Init+0xe8>
			p = Simcom_Send_Repeat("AT+CPSI?\r", 0, ",Online,");
 800c958:	4a31      	ldr	r2, [pc, #196]	; (800ca20 <Simcom_Init+0x194>)
 800c95a:	2100      	movs	r1, #0
 800c95c:	4831      	ldr	r0, [pc, #196]	; (800ca24 <Simcom_Init+0x198>)
 800c95e:	f7ff febb 	bl	800c6d8 <Simcom_Send_Repeat>
 800c962:	4603      	mov	r3, r0
 800c964:	73fb      	strb	r3, [r7, #15]
			// restart module to fix it
			boot = !p;
 800c966:	7bfb      	ldrb	r3, [r7, #15]
 800c968:	2b00      	cmp	r3, #0
 800c96a:	bf0c      	ite	eq
 800c96c:	2301      	moveq	r3, #1
 800c96e:	2300      	movne	r3, #0
 800c970:	b2db      	uxtb	r3, r3
 800c972:	73bb      	strb	r3, [r7, #14]
		}
		//Define socket PDP context (APN Settings)
		if(p){
 800c974:	7bfb      	ldrb	r3, [r7, #15]
 800c976:	2b00      	cmp	r3, #0
 800c978:	d005      	beq.n	800c986 <Simcom_Init+0xfa>
			p = Simcom_Send("AT+CGSOCKCONT=1,\"IP\",\"telkomsel\"\r", 0);
 800c97a:	2100      	movs	r1, #0
 800c97c:	482a      	ldr	r0, [pc, #168]	; (800ca28 <Simcom_Init+0x19c>)
 800c97e:	f7ff fe0b 	bl	800c598 <Simcom_Send>
 800c982:	4603      	mov	r3, r0
 800c984:	73fb      	strb	r3, [r7, #15]
		}
		//Set active PDP context profile number
		if(p){
 800c986:	7bfb      	ldrb	r3, [r7, #15]
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d005      	beq.n	800c998 <Simcom_Init+0x10c>
			p = Simcom_Send("AT+CSOCKSETPN=1\r", 0);
 800c98c:	2100      	movs	r1, #0
 800c98e:	4827      	ldr	r0, [pc, #156]	; (800ca2c <Simcom_Init+0x1a0>)
 800c990:	f7ff fe02 	bl	800c598 <Simcom_Send>
 800c994:	4603      	mov	r3, r0
 800c996:	73fb      	strb	r3, [r7, #15]
		}
		//Set type of authentication for PDP-IP connections of socket
		if(p){
 800c998:	7bfb      	ldrb	r3, [r7, #15]
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d005      	beq.n	800c9aa <Simcom_Init+0x11e>
			p = Simcom_Send("AT+CSOCKAUTH=1,1,\"wap\",\"wap123\"\r", 0);
 800c99e:	2100      	movs	r1, #0
 800c9a0:	4823      	ldr	r0, [pc, #140]	; (800ca30 <Simcom_Init+0x1a4>)
 800c9a2:	f7ff fdf9 	bl	800c598 <Simcom_Send>
 800c9a6:	4603      	mov	r3, r0
 800c9a8:	73fb      	strb	r3, [r7, #15]
		}
		//Select TCPIP application mode (0: Non Transparent (command mode), 1: Transparent (data mode))
		if(p){
 800c9aa:	7bfb      	ldrb	r3, [r7, #15]
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d005      	beq.n	800c9bc <Simcom_Init+0x130>
			p = Simcom_Send("AT+CIPMODE=0\r", 0);
 800c9b0:	2100      	movs	r1, #0
 800c9b2:	4820      	ldr	r0, [pc, #128]	; (800ca34 <Simcom_Init+0x1a8>)
 800c9b4:	f7ff fdf0 	bl	800c598 <Simcom_Send>
 800c9b8:	4603      	mov	r3, r0
 800c9ba:	73fb      	strb	r3, [r7, #15]
		}
		//Open network
		if(p){
 800c9bc:	7bfb      	ldrb	r3, [r7, #15]
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d006      	beq.n	800c9d0 <Simcom_Init+0x144>
			p = Simcom_Send("AT+NETOPEN\r", 500);
 800c9c2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800c9c6:	481c      	ldr	r0, [pc, #112]	; (800ca38 <Simcom_Init+0x1ac>)
 800c9c8:	f7ff fde6 	bl	800c598 <Simcom_Send>
 800c9cc:	4603      	mov	r3, r0
 800c9ce:	73fb      	strb	r3, [r7, #15]
		}
		//Open local UDP Connection
		if(p){
 800c9d0:	7bfb      	ldrb	r3, [r7, #15]
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d00e      	beq.n	800c9f4 <Simcom_Init+0x168>
			p = Simcom_Send_Repeat(CIPOPEN, 500, SIMCOM_STATUS_OK);
 800c9d6:	4a19      	ldr	r2, [pc, #100]	; (800ca3c <Simcom_Init+0x1b0>)
 800c9d8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800c9dc:	4818      	ldr	r0, [pc, #96]	; (800ca40 <Simcom_Init+0x1b4>)
 800c9de:	f7ff fe7b 	bl	800c6d8 <Simcom_Send_Repeat>
 800c9e2:	4603      	mov	r3, r0
 800c9e4:	73fb      	strb	r3, [r7, #15]
			// restart module to fix it
			boot = !p;
 800c9e6:	7bfb      	ldrb	r3, [r7, #15]
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	bf0c      	ite	eq
 800c9ec:	2301      	moveq	r3, #1
 800c9ee:	2300      	movne	r3, #0
 800c9f0:	b2db      	uxtb	r3, r3
 800c9f2:	73bb      	strb	r3, [r7, #14]
		}
	} while(p == 0);
 800c9f4:	7bfb      	ldrb	r3, [r7, #15]
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	f43f af54 	beq.w	800c8a4 <Simcom_Init+0x18>
}
 800c9fc:	bf00      	nop
 800c9fe:	3710      	adds	r7, #16
 800ca00:	46bd      	mov	sp, r7
 800ca02:	bd80      	pop	{r7, pc}
 800ca04:	08012058 	.word	0x08012058
 800ca08:	08012060 	.word	0x08012060
 800ca0c:	08012070 	.word	0x08012070
 800ca10:	08012078 	.word	0x08012078
 800ca14:	08012084 	.word	0x08012084
 800ca18:	08012094 	.word	0x08012094
 800ca1c:	080120a4 	.word	0x080120a4
 800ca20:	080120b4 	.word	0x080120b4
 800ca24:	080120c0 	.word	0x080120c0
 800ca28:	080120cc 	.word	0x080120cc
 800ca2c:	080120f0 	.word	0x080120f0
 800ca30:	08012104 	.word	0x08012104
 800ca34:	08012128 	.word	0x08012128
 800ca38:	08012138 	.word	0x08012138
 800ca3c:	08011fd4 	.word	0x08011fd4
 800ca40:	2000810c 	.word	0x2000810c

0800ca44 <Simcom_Set_Message>:

void Simcom_Set_Message(char* msg){
 800ca44:	b580      	push	{r7, lr}
 800ca46:	b082      	sub	sp, #8
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	6078      	str	r0, [r7, #4]
	sprintf(sim.data.message, "%s\x1E", msg);
 800ca4c:	687a      	ldr	r2, [r7, #4]
 800ca4e:	4904      	ldr	r1, [pc, #16]	; (800ca60 <Simcom_Set_Message+0x1c>)
 800ca50:	4804      	ldr	r0, [pc, #16]	; (800ca64 <Simcom_Set_Message+0x20>)
 800ca52:	f001 fd8f 	bl	800e574 <siprintf>
}
 800ca56:	bf00      	nop
 800ca58:	3708      	adds	r7, #8
 800ca5a:	46bd      	mov	sp, r7
 800ca5c:	bd80      	pop	{r7, pc}
 800ca5e:	bf00      	nop
 800ca60:	08012144 	.word	0x08012144
 800ca64:	20007ed4 	.word	0x20007ed4

0800ca68 <Simcom_Convert_GPS>:

void Simcom_Convert_GPS(gps_t *hgps){
 800ca68:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca6a:	ed2d 8b02 	vpush	{d8}
 800ca6e:	b087      	sub	sp, #28
 800ca70:	af04      	add	r7, sp, #16
 800ca72:	6078      	str	r0, [r7, #4]
	// parse gps data
	if(hgps->fix > 0){
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	7c5b      	ldrb	r3, [r3, #17]
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d069      	beq.n	800cb50 <Simcom_Convert_GPS+0xe8>
		Simcom_Set_Odometer(sim.data.odometer + ( gps_to_speed(hgps->speed, gps_speed_mps) * REPORT_INTERVAL ));
 800ca7c:	4b37      	ldr	r3, [pc, #220]	; (800cb5c <Simcom_Convert_GPS+0xf4>)
 800ca7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca80:	ee07 3a90 	vmov	s15, r3
 800ca84:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800ca8e:	2002      	movs	r0, #2
 800ca90:	eeb0 0a67 	vmov.f32	s0, s15
 800ca94:	f7ff fc32 	bl	800c2fc <gps_to_speed>
 800ca98:	eeb0 7a40 	vmov.f32	s14, s0
 800ca9c:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 800caa0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800caa4:	ee78 7a27 	vadd.f32	s15, s16, s15
 800caa8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800caac:	ee17 0a90 	vmov	r0, s15
 800cab0:	f000 fa02 	bl	800ceb8 <Simcom_Set_Odometer>
		ftoa(hgps->latitude, sim.data.gps.latitude, 6);
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	edd3 7a00 	vldr	s15, [r3]
 800caba:	2106      	movs	r1, #6
 800cabc:	4828      	ldr	r0, [pc, #160]	; (800cb60 <Simcom_Convert_GPS+0xf8>)
 800cabe:	eeb0 0a67 	vmov.f32	s0, s15
 800cac2:	f7fd f895 	bl	8009bf0 <ftoa>
		ftoa(hgps->longitude, sim.data.gps.longitude, 6);
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	edd3 7a01 	vldr	s15, [r3, #4]
 800cacc:	2106      	movs	r1, #6
 800cace:	4825      	ldr	r0, [pc, #148]	; (800cb64 <Simcom_Convert_GPS+0xfc>)
 800cad0:	eeb0 0a67 	vmov.f32	s0, s15
 800cad4:	f7fd f88c 	bl	8009bf0 <ftoa>
		ftoa(hgps->dop_h, sim.data.gps.hdop, 3);
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	edd3 7a06 	vldr	s15, [r3, #24]
 800cade:	2103      	movs	r1, #3
 800cae0:	4821      	ldr	r0, [pc, #132]	; (800cb68 <Simcom_Convert_GPS+0x100>)
 800cae2:	eeb0 0a67 	vmov.f32	s0, s15
 800cae6:	f7fd f883 	bl	8009bf0 <ftoa>
		ftoa(gps_to_speed(hgps->speed, gps_speed_kph), sim.data.speed, 1);
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800caf0:	2001      	movs	r0, #1
 800caf2:	eeb0 0a67 	vmov.f32	s0, s15
 800caf6:	f7ff fc01 	bl	800c2fc <gps_to_speed>
 800cafa:	eef0 7a40 	vmov.f32	s15, s0
 800cafe:	2101      	movs	r1, #1
 800cb00:	481a      	ldr	r0, [pc, #104]	; (800cb6c <Simcom_Convert_GPS+0x104>)
 800cb02:	eeb0 0a67 	vmov.f32	s0, s15
 800cb06:	f7fd f873 	bl	8009bf0 <ftoa>
		sprintf(sim.data.gps.datetime, "20%02d%02d%02d%02d%02d%02d", hgps->year, hgps->month, hgps->date, convertHourTo(hgps->hours, GMT_TIME), hgps->minutes, hgps->seconds);
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cb10:	461d      	mov	r5, r3
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cb18:	461e      	mov	r6, r3
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cb20:	461c      	mov	r4, r3
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	7c9b      	ldrb	r3, [r3, #18]
 800cb26:	2107      	movs	r1, #7
 800cb28:	4618      	mov	r0, r3
 800cb2a:	f7fd f8d5 	bl	8009cd8 <convertHourTo>
 800cb2e:	4603      	mov	r3, r0
 800cb30:	461a      	mov	r2, r3
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	7cdb      	ldrb	r3, [r3, #19]
 800cb36:	4619      	mov	r1, r3
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	7d1b      	ldrb	r3, [r3, #20]
 800cb3c:	9303      	str	r3, [sp, #12]
 800cb3e:	9102      	str	r1, [sp, #8]
 800cb40:	9201      	str	r2, [sp, #4]
 800cb42:	9400      	str	r4, [sp, #0]
 800cb44:	4633      	mov	r3, r6
 800cb46:	462a      	mov	r2, r5
 800cb48:	4909      	ldr	r1, [pc, #36]	; (800cb70 <Simcom_Convert_GPS+0x108>)
 800cb4a:	480a      	ldr	r0, [pc, #40]	; (800cb74 <Simcom_Convert_GPS+0x10c>)
 800cb4c:	f001 fd12 	bl	800e574 <siprintf>
	}
}
 800cb50:	bf00      	nop
 800cb52:	370c      	adds	r7, #12
 800cb54:	46bd      	mov	sp, r7
 800cb56:	ecbd 8b02 	vpop	{d8}
 800cb5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb5c:	20007e8c 	.word	0x20007e8c
 800cb60:	200080eb 	.word	0x200080eb
 800cb64:	200080d7 	.word	0x200080d7
 800cb68:	20008104 	.word	0x20008104
 800cb6c:	20007eb5 	.word	0x20007eb5
 800cb70:	08012148 	.word	0x08012148
 800cb74:	200080c8 	.word	0x200080c8

0800cb78 <Simcom_Set_Payload>:

void Simcom_Set_Payload(void)
{
 800cb78:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb7a:	b093      	sub	sp, #76	; 0x4c
 800cb7c:	af10      	add	r7, sp, #64	; 0x40
	// parse rtc datetime
	Get_RTC(sim.data.datetime_rtc);
 800cb7e:	4832      	ldr	r0, [pc, #200]	; (800cc48 <Simcom_Set_Payload+0xd0>)
 800cb80:	f7fd f90a 	bl	8009d98 <Get_RTC>
			"%s,%s,%s,%s,%s,"
			"%s,%d,%lu,%s,%d,"
			"%s,%d,%d,%s,%d,"
			"%d,%s\r\n",
			sim.data.gps.datetime, sim.data.datetime_rtc, sim.data.datetime_rtc, sim.data.gps.longitude, sim.data.gps.latitude,
			sim.data.gps.heading, sim.data.reportd_id, sim.data.odometer, sim.data.gps.hdop, sim.data.status_input,
 800cb84:	4b31      	ldr	r3, [pc, #196]	; (800cc4c <Simcom_Set_Payload+0xd4>)
 800cb86:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
	sprintf(
 800cb8a:	4619      	mov	r1, r3
 800cb8c:	4b2f      	ldr	r3, [pc, #188]	; (800cc4c <Simcom_Set_Payload+0xd4>)
 800cb8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
			sim.data.gps.heading, sim.data.reportd_id, sim.data.odometer, sim.data.gps.hdop, sim.data.status_input,
 800cb90:	4a2e      	ldr	r2, [pc, #184]	; (800cc4c <Simcom_Set_Payload+0xd4>)
 800cb92:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
	sprintf(
 800cb96:	4610      	mov	r0, r2
			sim.data.speed,	sim.data.status_output,	sim.data.analog_input, sim.data.driver_id, sim.data.temp_sensor1,
 800cb98:	4a2c      	ldr	r2, [pc, #176]	; (800cc4c <Simcom_Set_Payload+0xd4>)
 800cb9a:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
	sprintf(
 800cb9e:	4614      	mov	r4, r2
			sim.data.speed,	sim.data.status_output,	sim.data.analog_input, sim.data.driver_id, sim.data.temp_sensor1,
 800cba0:	4a2a      	ldr	r2, [pc, #168]	; (800cc4c <Simcom_Set_Payload+0xd4>)
 800cba2:	8e12      	ldrh	r2, [r2, #48]	; 0x30
	sprintf(
 800cba4:	4615      	mov	r5, r2
			sim.data.speed,	sim.data.status_output,	sim.data.analog_input, sim.data.driver_id, sim.data.temp_sensor1,
 800cba6:	4a29      	ldr	r2, [pc, #164]	; (800cc4c <Simcom_Set_Payload+0xd4>)
 800cba8:	f9b2 2044 	ldrsh.w	r2, [r2, #68]	; 0x44
	sprintf(
 800cbac:	4616      	mov	r6, r2
			sim.data.temp_sensor2, sim.data.message);
 800cbae:	4a27      	ldr	r2, [pc, #156]	; (800cc4c <Simcom_Set_Payload+0xd4>)
 800cbb0:	f9b2 2046 	ldrsh.w	r2, [r2, #70]	; 0x46
	sprintf(
 800cbb4:	607a      	str	r2, [r7, #4]
 800cbb6:	4a26      	ldr	r2, [pc, #152]	; (800cc50 <Simcom_Set_Payload+0xd8>)
 800cbb8:	920e      	str	r2, [sp, #56]	; 0x38
 800cbba:	687a      	ldr	r2, [r7, #4]
 800cbbc:	920d      	str	r2, [sp, #52]	; 0x34
 800cbbe:	960c      	str	r6, [sp, #48]	; 0x30
 800cbc0:	4a24      	ldr	r2, [pc, #144]	; (800cc54 <Simcom_Set_Payload+0xdc>)
 800cbc2:	920b      	str	r2, [sp, #44]	; 0x2c
 800cbc4:	950a      	str	r5, [sp, #40]	; 0x28
 800cbc6:	9409      	str	r4, [sp, #36]	; 0x24
 800cbc8:	4a23      	ldr	r2, [pc, #140]	; (800cc58 <Simcom_Set_Payload+0xe0>)
 800cbca:	9208      	str	r2, [sp, #32]
 800cbcc:	9007      	str	r0, [sp, #28]
 800cbce:	4a23      	ldr	r2, [pc, #140]	; (800cc5c <Simcom_Set_Payload+0xe4>)
 800cbd0:	9206      	str	r2, [sp, #24]
 800cbd2:	9305      	str	r3, [sp, #20]
 800cbd4:	9104      	str	r1, [sp, #16]
 800cbd6:	4b22      	ldr	r3, [pc, #136]	; (800cc60 <Simcom_Set_Payload+0xe8>)
 800cbd8:	9303      	str	r3, [sp, #12]
 800cbda:	4b22      	ldr	r3, [pc, #136]	; (800cc64 <Simcom_Set_Payload+0xec>)
 800cbdc:	9302      	str	r3, [sp, #8]
 800cbde:	4b22      	ldr	r3, [pc, #136]	; (800cc68 <Simcom_Set_Payload+0xf0>)
 800cbe0:	9301      	str	r3, [sp, #4]
 800cbe2:	4b19      	ldr	r3, [pc, #100]	; (800cc48 <Simcom_Set_Payload+0xd0>)
 800cbe4:	9300      	str	r3, [sp, #0]
 800cbe6:	4b18      	ldr	r3, [pc, #96]	; (800cc48 <Simcom_Set_Payload+0xd0>)
 800cbe8:	4a20      	ldr	r2, [pc, #128]	; (800cc6c <Simcom_Set_Payload+0xf4>)
 800cbea:	4921      	ldr	r1, [pc, #132]	; (800cc70 <Simcom_Set_Payload+0xf8>)
 800cbec:	4821      	ldr	r0, [pc, #132]	; (800cc74 <Simcom_Set_Payload+0xfc>)
 800cbee:	f001 fcc1 	bl	800e574 <siprintf>
	//Reconstruct the header
	sim.header.length = strlen(POSITION_DATA);
 800cbf2:	4820      	ldr	r0, [pc, #128]	; (800cc74 <Simcom_Set_Payload+0xfc>)
 800cbf4:	f7f3 faf6 	bl	80001e4 <strlen>
 800cbf8:	4603      	mov	r3, r0
 800cbfa:	b29a      	uxth	r2, r3
 800cbfc:	4b13      	ldr	r3, [pc, #76]	; (800cc4c <Simcom_Set_Payload+0xd4>)
 800cbfe:	80da      	strh	r2, [r3, #6]
	sim.header.seq_id++;
 800cc00:	4b12      	ldr	r3, [pc, #72]	; (800cc4c <Simcom_Set_Payload+0xd4>)
 800cc02:	891b      	ldrh	r3, [r3, #8]
 800cc04:	3301      	adds	r3, #1
 800cc06:	b29a      	uxth	r2, r3
 800cc08:	4b10      	ldr	r3, [pc, #64]	; (800cc4c <Simcom_Set_Payload+0xd4>)
 800cc0a:	811a      	strh	r2, [r3, #8]
	sprintf(
			POSITION_HEADER,
			"%s,%d,%d,%d,%s",
			sim.header.prefix, sim.header.crc, sim.header.length, sim.header.seq_id, sim.header.unit_id);
 800cc0c:	4b0f      	ldr	r3, [pc, #60]	; (800cc4c <Simcom_Set_Payload+0xd4>)
 800cc0e:	889b      	ldrh	r3, [r3, #4]
	sprintf(
 800cc10:	4618      	mov	r0, r3
			sim.header.prefix, sim.header.crc, sim.header.length, sim.header.seq_id, sim.header.unit_id);
 800cc12:	4b0e      	ldr	r3, [pc, #56]	; (800cc4c <Simcom_Set_Payload+0xd4>)
 800cc14:	88db      	ldrh	r3, [r3, #6]
	sprintf(
 800cc16:	461a      	mov	r2, r3
			sim.header.prefix, sim.header.crc, sim.header.length, sim.header.seq_id, sim.header.unit_id);
 800cc18:	4b0c      	ldr	r3, [pc, #48]	; (800cc4c <Simcom_Set_Payload+0xd4>)
 800cc1a:	891b      	ldrh	r3, [r3, #8]
	sprintf(
 800cc1c:	4619      	mov	r1, r3
 800cc1e:	4b16      	ldr	r3, [pc, #88]	; (800cc78 <Simcom_Set_Payload+0x100>)
 800cc20:	9302      	str	r3, [sp, #8]
 800cc22:	9101      	str	r1, [sp, #4]
 800cc24:	9200      	str	r2, [sp, #0]
 800cc26:	4603      	mov	r3, r0
 800cc28:	4a08      	ldr	r2, [pc, #32]	; (800cc4c <Simcom_Set_Payload+0xd4>)
 800cc2a:	4914      	ldr	r1, [pc, #80]	; (800cc7c <Simcom_Set_Payload+0x104>)
 800cc2c:	4814      	ldr	r0, [pc, #80]	; (800cc80 <Simcom_Set_Payload+0x108>)
 800cc2e:	f001 fca1 	bl	800e574 <siprintf>
	//Reconstruct the position
	sprintf(PAYLOAD, "%s,%s", POSITION_HEADER, POSITION_DATA);
 800cc32:	4b10      	ldr	r3, [pc, #64]	; (800cc74 <Simcom_Set_Payload+0xfc>)
 800cc34:	4a12      	ldr	r2, [pc, #72]	; (800cc80 <Simcom_Set_Payload+0x108>)
 800cc36:	4913      	ldr	r1, [pc, #76]	; (800cc84 <Simcom_Set_Payload+0x10c>)
 800cc38:	4813      	ldr	r0, [pc, #76]	; (800cc88 <Simcom_Set_Payload+0x110>)
 800cc3a:	f001 fc9b 	bl	800e574 <siprintf>
}
 800cc3e:	bf00      	nop
 800cc40:	370c      	adds	r7, #12
 800cc42:	46bd      	mov	sp, r7
 800cc44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc46:	bf00      	nop
 800cc48:	20007ea0 	.word	0x20007ea0
 800cc4c:	20007e8c 	.word	0x20007e8c
 800cc50:	20007ed4 	.word	0x20007ed4
 800cc54:	20007ebe 	.word	0x20007ebe
 800cc58:	20007eb5 	.word	0x20007eb5
 800cc5c:	20008104 	.word	0x20008104
 800cc60:	200080ff 	.word	0x200080ff
 800cc64:	200080eb 	.word	0x200080eb
 800cc68:	200080d7 	.word	0x200080d7
 800cc6c:	200080c8 	.word	0x200080c8
 800cc70:	08012164 	.word	0x08012164
 800cc74:	200077c0 	.word	0x200077c0
 800cc78:	20007e96 	.word	0x20007e96
 800cc7c:	0801219c 	.word	0x0801219c
 800cc80:	200077a0 	.word	0x200077a0
 800cc84:	080121ac 	.word	0x080121ac
 800cc88:	200074e8 	.word	0x200074e8

0800cc8c <Simcom_Send_Payload>:

uint8_t Simcom_Send_Payload(void){
 800cc8c:	b580      	push	{r7, lr}
 800cc8e:	af00      	add	r7, sp, #0
	return Simcom_To_Server(PAYLOAD, strlen(PAYLOAD));
 800cc90:	4805      	ldr	r0, [pc, #20]	; (800cca8 <Simcom_Send_Payload+0x1c>)
 800cc92:	f7f3 faa7 	bl	80001e4 <strlen>
 800cc96:	4603      	mov	r3, r0
 800cc98:	b29b      	uxth	r3, r3
 800cc9a:	4619      	mov	r1, r3
 800cc9c:	4802      	ldr	r0, [pc, #8]	; (800cca8 <Simcom_Send_Payload+0x1c>)
 800cc9e:	f000 f805 	bl	800ccac <Simcom_To_Server>
 800cca2:	4603      	mov	r3, r0
}
 800cca4:	4618      	mov	r0, r3
 800cca6:	bd80      	pop	{r7, pc}
 800cca8:	200074e8 	.word	0x200074e8

0800ccac <Simcom_To_Server>:

uint8_t Simcom_To_Server(char *message, uint16_t length) {
 800ccac:	b5b0      	push	{r4, r5, r7, lr}
 800ccae:	b086      	sub	sp, #24
 800ccb0:	af00      	add	r7, sp, #0
 800ccb2:	6078      	str	r0, [r7, #4]
 800ccb4:	460b      	mov	r3, r1
 800ccb6:	807b      	strh	r3, [r7, #2]
 800ccb8:	466b      	mov	r3, sp
 800ccba:	461d      	mov	r5, r3
	osRecursiveMutexWait(SimcomRecMutexHandle, osWaitForever);
 800ccbc:	4b27      	ldr	r3, [pc, #156]	; (800cd5c <Simcom_To_Server+0xb0>)
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	f04f 31ff 	mov.w	r1, #4294967295
 800ccc4:	4618      	mov	r0, r3
 800ccc6:	f7f9 f870 	bl	8005daa <osRecursiveMutexWait>

	uint8_t ret = 0;
 800ccca:	2300      	movs	r3, #0
 800cccc:	75fb      	strb	r3, [r7, #23]
	char str[length+1];
 800ccce:	887b      	ldrh	r3, [r7, #2]
 800ccd0:	1c58      	adds	r0, r3, #1
 800ccd2:	1e43      	subs	r3, r0, #1
 800ccd4:	613b      	str	r3, [r7, #16]
 800ccd6:	4603      	mov	r3, r0
 800ccd8:	4619      	mov	r1, r3
 800ccda:	f04f 0200 	mov.w	r2, #0
 800ccde:	f04f 0300 	mov.w	r3, #0
 800cce2:	f04f 0400 	mov.w	r4, #0
 800cce6:	00d4      	lsls	r4, r2, #3
 800cce8:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800ccec:	00cb      	lsls	r3, r1, #3
 800ccee:	4603      	mov	r3, r0
 800ccf0:	4619      	mov	r1, r3
 800ccf2:	f04f 0200 	mov.w	r2, #0
 800ccf6:	f04f 0300 	mov.w	r3, #0
 800ccfa:	f04f 0400 	mov.w	r4, #0
 800ccfe:	00d4      	lsls	r4, r2, #3
 800cd00:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800cd04:	00cb      	lsls	r3, r1, #3
 800cd06:	4603      	mov	r3, r0
 800cd08:	3307      	adds	r3, #7
 800cd0a:	08db      	lsrs	r3, r3, #3
 800cd0c:	00db      	lsls	r3, r3, #3
 800cd0e:	ebad 0d03 	sub.w	sp, sp, r3
 800cd12:	466b      	mov	r3, sp
 800cd14:	3300      	adds	r3, #0
 800cd16:	60fb      	str	r3, [r7, #12]
	// add message end character
	sprintf(str, "%s%s", message, SIMCOM_MESSAGE_END);
 800cd18:	68f8      	ldr	r0, [r7, #12]
 800cd1a:	4b11      	ldr	r3, [pc, #68]	; (800cd60 <Simcom_To_Server+0xb4>)
 800cd1c:	687a      	ldr	r2, [r7, #4]
 800cd1e:	4911      	ldr	r1, [pc, #68]	; (800cd64 <Simcom_To_Server+0xb8>)
 800cd20:	f001 fc28 	bl	800e574 <siprintf>
	// confirm to server that command is executed
	if (Simcom_Send(CIPSEND, 0)) {
 800cd24:	2100      	movs	r1, #0
 800cd26:	4810      	ldr	r0, [pc, #64]	; (800cd68 <Simcom_To_Server+0xbc>)
 800cd28:	f7ff fc36 	bl	800c598 <Simcom_Send>
 800cd2c:	4603      	mov	r3, r0
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d009      	beq.n	800cd46 <Simcom_To_Server+0x9a>
		// send response
		if(Simcom_Send(str, 0)){
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	2100      	movs	r1, #0
 800cd36:	4618      	mov	r0, r3
 800cd38:	f7ff fc2e 	bl	800c598 <Simcom_Send>
 800cd3c:	4603      	mov	r3, r0
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d001      	beq.n	800cd46 <Simcom_To_Server+0x9a>
			ret = 1;
 800cd42:	2301      	movs	r3, #1
 800cd44:	75fb      	strb	r3, [r7, #23]
		}
	}

	osRecursiveMutexRelease(SimcomRecMutexHandle);
 800cd46:	4b05      	ldr	r3, [pc, #20]	; (800cd5c <Simcom_To_Server+0xb0>)
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	4618      	mov	r0, r3
 800cd4c:	f7f9 f81a 	bl	8005d84 <osRecursiveMutexRelease>
	return ret;
 800cd50:	7dfb      	ldrb	r3, [r7, #23]
 800cd52:	46ad      	mov	sp, r5
}
 800cd54:	4618      	mov	r0, r3
 800cd56:	3718      	adds	r7, #24
 800cd58:	46bd      	mov	sp, r7
 800cd5a:	bdb0      	pop	{r4, r5, r7, pc}
 800cd5c:	200083e0 	.word	0x200083e0
 800cd60:	080121b4 	.word	0x080121b4
 800cd64:	080121b8 	.word	0x080121b8
 800cd68:	20007a58 	.word	0x20007a58

0800cd6c <Simcom_Check_Command>:

void Simcom_Check_Command(void)
{
 800cd6c:	b580      	push	{r7, lr}
 800cd6e:	af00      	add	r7, sp, #0
	// check if it has new command
	if (strstr(SIMCOM_UART_RX_Buffer, "+CIPRXGET: 1") != NULL){
 800cd70:	4907      	ldr	r1, [pc, #28]	; (800cd90 <Simcom_Check_Command+0x24>)
 800cd72:	4808      	ldr	r0, [pc, #32]	; (800cd94 <Simcom_Check_Command+0x28>)
 800cd74:	f001 fc5a 	bl	800e62c <strstr>
 800cd78:	4603      	mov	r3, r0
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d006      	beq.n	800cd8c <Simcom_Check_Command+0x20>
		// hand over command to CommandTask
		xTaskNotifyGive( CommandTaskHandle );
 800cd7e:	4b06      	ldr	r3, [pc, #24]	; (800cd98 <Simcom_Check_Command+0x2c>)
 800cd80:	6818      	ldr	r0, [r3, #0]
 800cd82:	2300      	movs	r3, #0
 800cd84:	2202      	movs	r2, #2
 800cd86:	2100      	movs	r1, #0
 800cd88:	f7fb f992 	bl	80080b0 <xTaskGenericNotify>
	}
}
 800cd8c:	bf00      	nop
 800cd8e:	bd80      	pop	{r7, pc}
 800cd90:	080121c0 	.word	0x080121c0
 800cd94:	200067f8 	.word	0x200067f8
 800cd98:	2000832c 	.word	0x2000832c

0800cd9c <Simcom_Get_Command>:

uint8_t Simcom_Get_Command(command_t *command){
 800cd9c:	b580      	push	{r7, lr}
 800cd9e:	b086      	sub	sp, #24
 800cda0:	af00      	add	r7, sp, #0
 800cda2:	6078      	str	r0, [r7, #4]
	osRecursiveMutexWait(SimcomRecMutexHandle, osWaitForever);
 800cda4:	4b3f      	ldr	r3, [pc, #252]	; (800cea4 <Simcom_Get_Command+0x108>)
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	f04f 31ff 	mov.w	r1, #4294967295
 800cdac:	4618      	mov	r0, r3
 800cdae:	f7f8 fffc 	bl	8005daa <osRecursiveMutexWait>

	uint8_t ret = 0;
 800cdb2:	2300      	movs	r3, #0
 800cdb4:	75fb      	strb	r3, [r7, #23]
	char *start, *delim, *end;

	if(Simcom_Send("AT+CIPRXGET=2,0\r", 0)){
 800cdb6:	2100      	movs	r1, #0
 800cdb8:	483b      	ldr	r0, [pc, #236]	; (800cea8 <Simcom_Get_Command+0x10c>)
 800cdba:	f7ff fbed 	bl	800c598 <Simcom_Send>
 800cdbe:	4603      	mov	r3, r0
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d065      	beq.n	800ce90 <Simcom_Get_Command+0xf4>
		// get pointer reference
		start = strstr(SIMCOM_UART_RX_Buffer, "AT$");
 800cdc4:	4939      	ldr	r1, [pc, #228]	; (800ceac <Simcom_Get_Command+0x110>)
 800cdc6:	483a      	ldr	r0, [pc, #232]	; (800ceb0 <Simcom_Get_Command+0x114>)
 800cdc8:	f001 fc30 	bl	800e62c <strstr>
 800cdcc:	6138      	str	r0, [r7, #16]
		end   = strstr(start, "\r\n\r\n");
 800cdce:	4939      	ldr	r1, [pc, #228]	; (800ceb4 <Simcom_Get_Command+0x118>)
 800cdd0:	6938      	ldr	r0, [r7, #16]
 800cdd2:	f001 fc2b 	bl	800e62c <strstr>
 800cdd6:	60f8      	str	r0, [r7, #12]
		delim = strchr(start, '=');
 800cdd8:	213d      	movs	r1, #61	; 0x3d
 800cdda:	6938      	ldr	r0, [r7, #16]
 800cddc:	f001 fbea 	bl	800e5b4 <strchr>
 800cde0:	60b8      	str	r0, [r7, #8]

		// check if command has value
		if(delim != NULL){
 800cde2:	68bb      	ldr	r3, [r7, #8]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d025      	beq.n	800ce34 <Simcom_Get_Command+0x98>
			// get command
			strncpy(command->var, start + 3, delim - (start + 3));
 800cde8:	6878      	ldr	r0, [r7, #4]
 800cdea:	693b      	ldr	r3, [r7, #16]
 800cdec:	1cd9      	adds	r1, r3, #3
 800cdee:	68bb      	ldr	r3, [r7, #8]
 800cdf0:	693a      	ldr	r2, [r7, #16]
 800cdf2:	3203      	adds	r2, #3
 800cdf4:	1a9b      	subs	r3, r3, r2
 800cdf6:	461a      	mov	r2, r3
 800cdf8:	f001 fc03 	bl	800e602 <strncpy>
			*(command->var + (delim - (start + 3))) = '\0';
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	68ba      	ldr	r2, [r7, #8]
 800ce00:	6939      	ldr	r1, [r7, #16]
 800ce02:	3103      	adds	r1, #3
 800ce04:	1a52      	subs	r2, r2, r1
 800ce06:	4413      	add	r3, r2
 800ce08:	2200      	movs	r2, #0
 800ce0a:	701a      	strb	r2, [r3, #0]
			// get value
			strncpy(command->val, delim + 1, end - delim);
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	f103 0014 	add.w	r0, r3, #20
 800ce12:	68bb      	ldr	r3, [r7, #8]
 800ce14:	1c59      	adds	r1, r3, #1
 800ce16:	68fa      	ldr	r2, [r7, #12]
 800ce18:	68bb      	ldr	r3, [r7, #8]
 800ce1a:	1ad3      	subs	r3, r2, r3
 800ce1c:	461a      	mov	r2, r3
 800ce1e:	f001 fbf0 	bl	800e602 <strncpy>
			*(command->val + (end - delim)) = '\0';
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	3314      	adds	r3, #20
 800ce26:	68f9      	ldr	r1, [r7, #12]
 800ce28:	68ba      	ldr	r2, [r7, #8]
 800ce2a:	1a8a      	subs	r2, r1, r2
 800ce2c:	4413      	add	r3, r2
 800ce2e:	2200      	movs	r2, #0
 800ce30:	701a      	strb	r2, [r3, #0]
 800ce32:	e014      	b.n	800ce5e <Simcom_Get_Command+0xc2>
		} else {
			// get command
			strncpy(command->var, start + 3, end - (start + 3));
 800ce34:	6878      	ldr	r0, [r7, #4]
 800ce36:	693b      	ldr	r3, [r7, #16]
 800ce38:	1cd9      	adds	r1, r3, #3
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	693a      	ldr	r2, [r7, #16]
 800ce3e:	3203      	adds	r2, #3
 800ce40:	1a9b      	subs	r3, r3, r2
 800ce42:	461a      	mov	r2, r3
 800ce44:	f001 fbdd 	bl	800e602 <strncpy>
			*(command->var + (end - (start + 3))) = '\0';
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	68fa      	ldr	r2, [r7, #12]
 800ce4c:	6939      	ldr	r1, [r7, #16]
 800ce4e:	3103      	adds	r1, #3
 800ce50:	1a52      	subs	r2, r2, r1
 800ce52:	4413      	add	r3, r2
 800ce54:	2200      	movs	r2, #0
 800ce56:	701a      	strb	r2, [r3, #0]
			// set value
			*(command->val) = '\0';
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	2200      	movs	r2, #0
 800ce5c:	751a      	strb	r2, [r3, #20]
		}

		// get full command
		strncpy(command->cmd, start + 3, end - (start + 3));
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	f103 0028 	add.w	r0, r3, #40	; 0x28
 800ce64:	693b      	ldr	r3, [r7, #16]
 800ce66:	1cd9      	adds	r1, r3, #3
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	693a      	ldr	r2, [r7, #16]
 800ce6c:	3203      	adds	r2, #3
 800ce6e:	1a9b      	subs	r3, r3, r2
 800ce70:	461a      	mov	r2, r3
 800ce72:	f001 fbc6 	bl	800e602 <strncpy>
		*(command->cmd + (end - (start + 3))) = '\0';
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	3328      	adds	r3, #40	; 0x28
 800ce7a:	68fa      	ldr	r2, [r7, #12]
 800ce7c:	6939      	ldr	r1, [r7, #16]
 800ce7e:	3103      	adds	r1, #3
 800ce80:	1a52      	subs	r2, r2, r1
 800ce82:	4413      	add	r3, r2
 800ce84:	2200      	movs	r2, #0
 800ce86:	701a      	strb	r2, [r3, #0]

		// reset rx buffer
		SIMCOM_Reset_Buffer();
 800ce88:	f7fc fb74 	bl	8009574 <SIMCOM_Reset_Buffer>

		ret = 1;
 800ce8c:	2301      	movs	r3, #1
 800ce8e:	75fb      	strb	r3, [r7, #23]
	}

	osRecursiveMutexRelease(SimcomRecMutexHandle);
 800ce90:	4b04      	ldr	r3, [pc, #16]	; (800cea4 <Simcom_Get_Command+0x108>)
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	4618      	mov	r0, r3
 800ce96:	f7f8 ff75 	bl	8005d84 <osRecursiveMutexRelease>
	return ret;
 800ce9a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	3718      	adds	r7, #24
 800cea0:	46bd      	mov	sp, r7
 800cea2:	bd80      	pop	{r7, pc}
 800cea4:	200083e0 	.word	0x200083e0
 800cea8:	080121d0 	.word	0x080121d0
 800ceac:	080121e4 	.word	0x080121e4
 800ceb0:	200067f8 	.word	0x200067f8
 800ceb4:	080121e8 	.word	0x080121e8

0800ceb8 <Simcom_Set_Odometer>:

void Simcom_Set_Odometer(uint32_t odom){
 800ceb8:	b580      	push	{r7, lr}
 800ceba:	b082      	sub	sp, #8
 800cebc:	af00      	add	r7, sp, #0
 800cebe:	6078      	str	r0, [r7, #4]
	sim.data.odometer = odom;
 800cec0:	4a04      	ldr	r2, [pc, #16]	; (800ced4 <Simcom_Set_Odometer+0x1c>)
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	6253      	str	r3, [r2, #36]	; 0x24
	Flash_Save_Odometer(odom);
 800cec6:	6878      	ldr	r0, [r7, #4]
 800cec8:	f7fd f80e 	bl	8009ee8 <Flash_Save_Odometer>
}
 800cecc:	bf00      	nop
 800cece:	3708      	adds	r7, #8
 800ced0:	46bd      	mov	sp, r7
 800ced2:	bd80      	pop	{r7, pc}
 800ced4:	20007e8c 	.word	0x20007e8c

0800ced8 <vApplicationStackOverflowHook>:
}
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 800ced8:	b480      	push	{r7}
 800ceda:	b083      	sub	sp, #12
 800cedc:	af00      	add	r7, sp, #0
 800cede:	6078      	str	r0, [r7, #4]
 800cee0:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 800cee2:	bf00      	nop
 800cee4:	370c      	adds	r7, #12
 800cee6:	46bd      	mov	sp, r7
 800cee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceec:	4770      	bx	lr

0800ceee <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 800ceee:	b480      	push	{r7}
 800cef0:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 800cef2:	bf00      	nop
 800cef4:	46bd      	mov	sp, r7
 800cef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cefa:	4770      	bx	lr

0800cefc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800cefc:	b480      	push	{r7}
 800cefe:	b085      	sub	sp, #20
 800cf00:	af00      	add	r7, sp, #0
 800cf02:	60f8      	str	r0, [r7, #12]
 800cf04:	60b9      	str	r1, [r7, #8]
 800cf06:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	4a07      	ldr	r2, [pc, #28]	; (800cf28 <vApplicationGetIdleTaskMemory+0x2c>)
 800cf0c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800cf0e:	68bb      	ldr	r3, [r7, #8]
 800cf10:	4a06      	ldr	r2, [pc, #24]	; (800cf2c <vApplicationGetIdleTaskMemory+0x30>)
 800cf12:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	2280      	movs	r2, #128	; 0x80
 800cf18:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 800cf1a:	bf00      	nop
 800cf1c:	3714      	adds	r7, #20
 800cf1e:	46bd      	mov	sp, r7
 800cf20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf24:	4770      	bx	lr
 800cf26:	bf00      	nop
 800cf28:	200064f8 	.word	0x200064f8
 800cf2c:	2000654c 	.word	0x2000654c

0800cf30 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800cf30:	b5b0      	push	{r4, r5, r7, lr}
 800cf32:	b0b4      	sub	sp, #208	; 0xd0
 800cf34:	af00      	add	r7, sp, #0


	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800cf36:	f7f4 f837 	bl	8000fa8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800cf3a:	f000 f8e3 	bl	800d104 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800cf3e:	f000 facd 	bl	800d4dc <MX_GPIO_Init>
	MX_DMA_Init();
 800cf42:	f000 fa9b 	bl	800d47c <MX_DMA_Init>
	MX_CAN1_Init();
 800cf46:	f000 f95f 	bl	800d208 <MX_CAN1_Init>
	MX_I2C3_Init();
 800cf4a:	f000 f991 	bl	800d270 <MX_I2C3_Init>
	MX_USART3_UART_Init();
 800cf4e:	f000 fa6b 	bl	800d428 <MX_USART3_UART_Init>
	MX_RTC_Init();
 800cf52:	f000 f9bb 	bl	800d2cc <MX_RTC_Init>
	MX_USART2_UART_Init();
 800cf56:	f000 fa3d 	bl	800d3d4 <MX_USART2_UART_Init>
	MX_UART4_Init();
 800cf5a:	f000 fa11 	bl	800d380 <MX_UART4_Init>
	/* USER CODE BEGIN 2 */
	/* EEPROM Init */
	EE_Init();
 800cf5e:	f7fc fff7 	bl	8009f50 <EE_Init>
	/* USER CODE END 2 */

	/* Create the mutex(es) */
	/* definition and creation of SwvMutex */
	osMutexDef(SwvMutex);
 800cf62:	2300      	movs	r3, #0
 800cf64:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800cf68:	2300      	movs	r3, #0
 800cf6a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	SwvMutexHandle = osMutexCreate(osMutex(SwvMutex));
 800cf6e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800cf72:	4618      	mov	r0, r3
 800cf74:	f7f8 fce9 	bl	800594a <osMutexCreate>
 800cf78:	4602      	mov	r2, r0
 800cf7a:	4b52      	ldr	r3, [pc, #328]	; (800d0c4 <main+0x194>)
 800cf7c:	601a      	str	r2, [r3, #0]

	/* Create the recursive mutex(es) */
	/* definition and creation of SimcomRecMutex */
	osMutexDef(SimcomRecMutex);
 800cf7e:	2300      	movs	r3, #0
 800cf80:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800cf84:	2300      	movs	r3, #0
 800cf86:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	SimcomRecMutexHandle = osRecursiveMutexCreate(osMutex(SimcomRecMutex));
 800cf8a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800cf8e:	4618      	mov	r0, r3
 800cf90:	f7f8 fee0 	bl	8005d54 <osRecursiveMutexCreate>
 800cf94:	4602      	mov	r2, r0
 800cf96:	4b4c      	ldr	r3, [pc, #304]	; (800d0c8 <main+0x198>)
 800cf98:	601a      	str	r2, [r3, #0]

	/* definition and creation of FingerRecMutex */
	osMutexDef(FingerRecMutex);
 800cf9a:	2300      	movs	r3, #0
 800cf9c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800cfa0:	2300      	movs	r3, #0
 800cfa2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	FingerRecMutexHandle = osRecursiveMutexCreate(osMutex(FingerRecMutex));
 800cfa6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800cfaa:	4618      	mov	r0, r3
 800cfac:	f7f8 fed2 	bl	8005d54 <osRecursiveMutexCreate>
 800cfb0:	4602      	mov	r2, r0
 800cfb2:	4b46      	ldr	r3, [pc, #280]	; (800d0cc <main+0x19c>)
 800cfb4:	601a      	str	r2, [r3, #0]
	/* start timers, add new ones, ... */
	/* USER CODE END RTOS_TIMERS */

	/* USER CODE BEGIN RTOS_QUEUES */
	/* add queues, ... */
	osMailQDef(GpsMail, 1, gps_t);
 800cfb6:	2301      	movs	r3, #1
 800cfb8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800cfbc:	2374      	movs	r3, #116	; 0x74
 800cfbe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800cfc2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800cfc6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	GpsMailHandle = osMailCreate(osMailQ(GpsMail), NULL);
 800cfca:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800cfce:	2100      	movs	r1, #0
 800cfd0:	4618      	mov	r0, r3
 800cfd2:	f7f8 fdb4 	bl	8005b3e <osMailCreate>
 800cfd6:	4602      	mov	r2, r0
 800cfd8:	4b3d      	ldr	r3, [pc, #244]	; (800d0d0 <main+0x1a0>)
 800cfda:	601a      	str	r2, [r3, #0]
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of IotTask */
	osThreadDef(IotTask, StartIotTask, osPriorityNormal, 0, 512);
 800cfdc:	4b3d      	ldr	r3, [pc, #244]	; (800d0d4 <main+0x1a4>)
 800cfde:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 800cfe2:	461d      	mov	r5, r3
 800cfe4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cfe6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cfe8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800cfec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	IotTaskHandle = osThreadCreate(osThread(IotTask), NULL);
 800cff0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800cff4:	2100      	movs	r1, #0
 800cff6:	4618      	mov	r0, r3
 800cff8:	f7f8 fc47 	bl	800588a <osThreadCreate>
 800cffc:	4602      	mov	r2, r0
 800cffe:	4b36      	ldr	r3, [pc, #216]	; (800d0d8 <main+0x1a8>)
 800d000:	601a      	str	r2, [r3, #0]

	/* definition and creation of CanTask */
	osThreadDef(CanTask, StartCanTask, osPriorityNormal, 0, 128);
 800d002:	4b36      	ldr	r3, [pc, #216]	; (800d0dc <main+0x1ac>)
 800d004:	f107 0470 	add.w	r4, r7, #112	; 0x70
 800d008:	461d      	mov	r5, r3
 800d00a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d00c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d00e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800d012:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	CanTaskHandle = osThreadCreate(osThread(CanTask), NULL);
 800d016:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800d01a:	2100      	movs	r1, #0
 800d01c:	4618      	mov	r0, r3
 800d01e:	f7f8 fc34 	bl	800588a <osThreadCreate>
 800d022:	4602      	mov	r2, r0
 800d024:	4b2e      	ldr	r3, [pc, #184]	; (800d0e0 <main+0x1b0>)
 800d026:	601a      	str	r2, [r3, #0]

	/* definition and creation of GyroTask */
	osThreadDef(GyroTask, StartGyroTask, osPriorityNormal, 0, 512);
 800d028:	4b2e      	ldr	r3, [pc, #184]	; (800d0e4 <main+0x1b4>)
 800d02a:	f107 0454 	add.w	r4, r7, #84	; 0x54
 800d02e:	461d      	mov	r5, r3
 800d030:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d032:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d034:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800d038:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	GyroTaskHandle = osThreadCreate(osThread(GyroTask), NULL);
 800d03c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800d040:	2100      	movs	r1, #0
 800d042:	4618      	mov	r0, r3
 800d044:	f7f8 fc21 	bl	800588a <osThreadCreate>
 800d048:	4602      	mov	r2, r0
 800d04a:	4b27      	ldr	r3, [pc, #156]	; (800d0e8 <main+0x1b8>)
 800d04c:	601a      	str	r2, [r3, #0]

	/* definition and creation of CommandTask */
	osThreadDef(CommandTask, StartCommandTask, osPriorityHigh, 0, 256);
 800d04e:	4b27      	ldr	r3, [pc, #156]	; (800d0ec <main+0x1bc>)
 800d050:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800d054:	461d      	mov	r5, r3
 800d056:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d058:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d05a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800d05e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	CommandTaskHandle = osThreadCreate(osThread(CommandTask), NULL);
 800d062:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800d066:	2100      	movs	r1, #0
 800d068:	4618      	mov	r0, r3
 800d06a:	f7f8 fc0e 	bl	800588a <osThreadCreate>
 800d06e:	4602      	mov	r2, r0
 800d070:	4b1f      	ldr	r3, [pc, #124]	; (800d0f0 <main+0x1c0>)
 800d072:	601a      	str	r2, [r3, #0]

	/* definition and creation of GpsTask */
	osThreadDef(GpsTask, StartGpsTask, osPriorityNormal, 0, 256);
 800d074:	4b1f      	ldr	r3, [pc, #124]	; (800d0f4 <main+0x1c4>)
 800d076:	f107 041c 	add.w	r4, r7, #28
 800d07a:	461d      	mov	r5, r3
 800d07c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d07e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d080:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800d084:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	GpsTaskHandle = osThreadCreate(osThread(GpsTask), NULL);
 800d088:	f107 031c 	add.w	r3, r7, #28
 800d08c:	2100      	movs	r1, #0
 800d08e:	4618      	mov	r0, r3
 800d090:	f7f8 fbfb 	bl	800588a <osThreadCreate>
 800d094:	4602      	mov	r2, r0
 800d096:	4b18      	ldr	r3, [pc, #96]	; (800d0f8 <main+0x1c8>)
 800d098:	601a      	str	r2, [r3, #0]

	/* definition and creation of FingerTask */
	osThreadDef(FingerTask, StartFingerTask, osPriorityNormal, 0, 256);
 800d09a:	4b18      	ldr	r3, [pc, #96]	; (800d0fc <main+0x1cc>)
 800d09c:	463c      	mov	r4, r7
 800d09e:	461d      	mov	r5, r3
 800d0a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d0a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d0a4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800d0a8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	FingerTaskHandle = osThreadCreate(osThread(FingerTask), NULL);
 800d0ac:	463b      	mov	r3, r7
 800d0ae:	2100      	movs	r1, #0
 800d0b0:	4618      	mov	r0, r3
 800d0b2:	f7f8 fbea 	bl	800588a <osThreadCreate>
 800d0b6:	4602      	mov	r2, r0
 800d0b8:	4b11      	ldr	r3, [pc, #68]	; (800d100 <main+0x1d0>)
 800d0ba:	601a      	str	r2, [r3, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 800d0bc:	f7f8 fbce 	bl	800585c <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 800d0c0:	e7fe      	b.n	800d0c0 <main+0x190>
 800d0c2:	bf00      	nop
 800d0c4:	20008324 	.word	0x20008324
 800d0c8:	200083e0 	.word	0x200083e0
 800d0cc:	200083dc 	.word	0x200083dc
 800d0d0:	20008140 	.word	0x20008140
 800d0d4:	080121f8 	.word	0x080121f8
 800d0d8:	20008370 	.word	0x20008370
 800d0dc:	0801221c 	.word	0x0801221c
 800d0e0:	20008258 	.word	0x20008258
 800d0e4:	08012244 	.word	0x08012244
 800d0e8:	20008300 	.word	0x20008300
 800d0ec:	0801226c 	.word	0x0801226c
 800d0f0:	2000832c 	.word	0x2000832c
 800d0f4:	08012290 	.word	0x08012290
 800d0f8:	20008328 	.word	0x20008328
 800d0fc:	080122b8 	.word	0x080122b8
 800d100:	200082fc 	.word	0x200082fc

0800d104 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800d104:	b580      	push	{r7, lr}
 800d106:	b098      	sub	sp, #96	; 0x60
 800d108:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800d10a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d10e:	2230      	movs	r2, #48	; 0x30
 800d110:	2100      	movs	r1, #0
 800d112:	4618      	mov	r0, r3
 800d114:	f001 fa25 	bl	800e562 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800d118:	f107 031c 	add.w	r3, r7, #28
 800d11c:	2200      	movs	r2, #0
 800d11e:	601a      	str	r2, [r3, #0]
 800d120:	605a      	str	r2, [r3, #4]
 800d122:	609a      	str	r2, [r3, #8]
 800d124:	60da      	str	r2, [r3, #12]
 800d126:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800d128:	f107 030c 	add.w	r3, r7, #12
 800d12c:	2200      	movs	r2, #0
 800d12e:	601a      	str	r2, [r3, #0]
 800d130:	605a      	str	r2, [r3, #4]
 800d132:	609a      	str	r2, [r3, #8]
 800d134:	60da      	str	r2, [r3, #12]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800d136:	2300      	movs	r3, #0
 800d138:	60bb      	str	r3, [r7, #8]
 800d13a:	4b31      	ldr	r3, [pc, #196]	; (800d200 <SystemClock_Config+0xfc>)
 800d13c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d13e:	4a30      	ldr	r2, [pc, #192]	; (800d200 <SystemClock_Config+0xfc>)
 800d140:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d144:	6413      	str	r3, [r2, #64]	; 0x40
 800d146:	4b2e      	ldr	r3, [pc, #184]	; (800d200 <SystemClock_Config+0xfc>)
 800d148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d14a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d14e:	60bb      	str	r3, [r7, #8]
 800d150:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800d152:	2300      	movs	r3, #0
 800d154:	607b      	str	r3, [r7, #4]
 800d156:	4b2b      	ldr	r3, [pc, #172]	; (800d204 <SystemClock_Config+0x100>)
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	4a2a      	ldr	r2, [pc, #168]	; (800d204 <SystemClock_Config+0x100>)
 800d15c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d160:	6013      	str	r3, [r2, #0]
 800d162:	4b28      	ldr	r3, [pc, #160]	; (800d204 <SystemClock_Config+0x100>)
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d16a:	607b      	str	r3, [r7, #4]
 800d16c:	687b      	ldr	r3, [r7, #4]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800d16e:	2309      	movs	r3, #9
 800d170:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800d172:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800d176:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800d178:	2301      	movs	r3, #1
 800d17a:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800d17c:	2302      	movs	r3, #2
 800d17e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800d180:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800d184:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 8;
 800d186:	2308      	movs	r3, #8
 800d188:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 336;
 800d18a:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800d18e:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800d190:	2302      	movs	r3, #2
 800d192:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 7;
 800d194:	2307      	movs	r3, #7
 800d196:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800d198:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d19c:	4618      	mov	r0, r3
 800d19e:	f7f6 f9dd 	bl	800355c <HAL_RCC_OscConfig>
 800d1a2:	4603      	mov	r3, r0
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d001      	beq.n	800d1ac <SystemClock_Config+0xa8>
	{
		Error_Handler();
 800d1a8:	f000 fdae 	bl	800dd08 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800d1ac:	230f      	movs	r3, #15
 800d1ae:	61fb      	str	r3, [r7, #28]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800d1b0:	2302      	movs	r3, #2
 800d1b2:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800d1b4:	2300      	movs	r3, #0
 800d1b6:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800d1b8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800d1bc:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800d1be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d1c2:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800d1c4:	f107 031c 	add.w	r3, r7, #28
 800d1c8:	2105      	movs	r1, #5
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	f7f6 fc08 	bl	80039e0 <HAL_RCC_ClockConfig>
 800d1d0:	4603      	mov	r3, r0
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d001      	beq.n	800d1da <SystemClock_Config+0xd6>
	{
		Error_Handler();
 800d1d6:	f000 fd97 	bl	800dd08 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800d1da:	2302      	movs	r3, #2
 800d1dc:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800d1de:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d1e2:	61bb      	str	r3, [r7, #24]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800d1e4:	f107 030c 	add.w	r3, r7, #12
 800d1e8:	4618      	mov	r0, r3
 800d1ea:	f7f6 fe19 	bl	8003e20 <HAL_RCCEx_PeriphCLKConfig>
 800d1ee:	4603      	mov	r3, r0
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d001      	beq.n	800d1f8 <SystemClock_Config+0xf4>
	{
		Error_Handler();
 800d1f4:	f000 fd88 	bl	800dd08 <Error_Handler>
	}
}
 800d1f8:	bf00      	nop
 800d1fa:	3760      	adds	r7, #96	; 0x60
 800d1fc:	46bd      	mov	sp, r7
 800d1fe:	bd80      	pop	{r7, pc}
 800d200:	40023800 	.word	0x40023800
 800d204:	40007000 	.word	0x40007000

0800d208 <MX_CAN1_Init>:
 * @brief CAN1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN1_Init(void)
{
 800d208:	b580      	push	{r7, lr}
 800d20a:	af00      	add	r7, sp, #0
	/* USER CODE END CAN1_Init 0 */

	/* USER CODE BEGIN CAN1_Init 1 */

	/* USER CODE END CAN1_Init 1 */
	hcan1.Instance = CAN1;
 800d20c:	4b16      	ldr	r3, [pc, #88]	; (800d268 <MX_CAN1_Init+0x60>)
 800d20e:	4a17      	ldr	r2, [pc, #92]	; (800d26c <MX_CAN1_Init+0x64>)
 800d210:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 16;
 800d212:	4b15      	ldr	r3, [pc, #84]	; (800d268 <MX_CAN1_Init+0x60>)
 800d214:	2210      	movs	r2, #16
 800d216:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 800d218:	4b13      	ldr	r3, [pc, #76]	; (800d268 <MX_CAN1_Init+0x60>)
 800d21a:	2200      	movs	r2, #0
 800d21c:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800d21e:	4b12      	ldr	r3, [pc, #72]	; (800d268 <MX_CAN1_Init+0x60>)
 800d220:	2200      	movs	r2, #0
 800d222:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 800d224:	4b10      	ldr	r3, [pc, #64]	; (800d268 <MX_CAN1_Init+0x60>)
 800d226:	2200      	movs	r2, #0
 800d228:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800d22a:	4b0f      	ldr	r3, [pc, #60]	; (800d268 <MX_CAN1_Init+0x60>)
 800d22c:	2200      	movs	r2, #0
 800d22e:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 800d230:	4b0d      	ldr	r3, [pc, #52]	; (800d268 <MX_CAN1_Init+0x60>)
 800d232:	2200      	movs	r2, #0
 800d234:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = DISABLE;
 800d236:	4b0c      	ldr	r3, [pc, #48]	; (800d268 <MX_CAN1_Init+0x60>)
 800d238:	2200      	movs	r2, #0
 800d23a:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 800d23c:	4b0a      	ldr	r3, [pc, #40]	; (800d268 <MX_CAN1_Init+0x60>)
 800d23e:	2200      	movs	r2, #0
 800d240:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = DISABLE;
 800d242:	4b09      	ldr	r3, [pc, #36]	; (800d268 <MX_CAN1_Init+0x60>)
 800d244:	2200      	movs	r2, #0
 800d246:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 800d248:	4b07      	ldr	r3, [pc, #28]	; (800d268 <MX_CAN1_Init+0x60>)
 800d24a:	2200      	movs	r2, #0
 800d24c:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 800d24e:	4b06      	ldr	r3, [pc, #24]	; (800d268 <MX_CAN1_Init+0x60>)
 800d250:	2200      	movs	r2, #0
 800d252:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800d254:	4804      	ldr	r0, [pc, #16]	; (800d268 <MX_CAN1_Init+0x60>)
 800d256:	f7f3 fee9 	bl	800102c <HAL_CAN_Init>
 800d25a:	4603      	mov	r3, r0
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d001      	beq.n	800d264 <MX_CAN1_Init+0x5c>
	{
		Error_Handler();
 800d260:	f000 fd52 	bl	800dd08 <Error_Handler>
	}
	/* USER CODE BEGIN CAN1_Init 2 */

	/* USER CODE END CAN1_Init 2 */

}
 800d264:	bf00      	nop
 800d266:	bd80      	pop	{r7, pc}
 800d268:	200083b4 	.word	0x200083b4
 800d26c:	40006400 	.word	0x40006400

0800d270 <MX_I2C3_Init>:
 * @brief I2C3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C3_Init(void)
{
 800d270:	b580      	push	{r7, lr}
 800d272:	af00      	add	r7, sp, #0
	/* USER CODE END I2C3_Init 0 */

	/* USER CODE BEGIN I2C3_Init 1 */

	/* USER CODE END I2C3_Init 1 */
	hi2c3.Instance = I2C3;
 800d274:	4b12      	ldr	r3, [pc, #72]	; (800d2c0 <MX_I2C3_Init+0x50>)
 800d276:	4a13      	ldr	r2, [pc, #76]	; (800d2c4 <MX_I2C3_Init+0x54>)
 800d278:	601a      	str	r2, [r3, #0]
	hi2c3.Init.ClockSpeed = 100000;
 800d27a:	4b11      	ldr	r3, [pc, #68]	; (800d2c0 <MX_I2C3_Init+0x50>)
 800d27c:	4a12      	ldr	r2, [pc, #72]	; (800d2c8 <MX_I2C3_Init+0x58>)
 800d27e:	605a      	str	r2, [r3, #4]
	hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800d280:	4b0f      	ldr	r3, [pc, #60]	; (800d2c0 <MX_I2C3_Init+0x50>)
 800d282:	2200      	movs	r2, #0
 800d284:	609a      	str	r2, [r3, #8]
	hi2c3.Init.OwnAddress1 = 0;
 800d286:	4b0e      	ldr	r3, [pc, #56]	; (800d2c0 <MX_I2C3_Init+0x50>)
 800d288:	2200      	movs	r2, #0
 800d28a:	60da      	str	r2, [r3, #12]
	hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800d28c:	4b0c      	ldr	r3, [pc, #48]	; (800d2c0 <MX_I2C3_Init+0x50>)
 800d28e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800d292:	611a      	str	r2, [r3, #16]
	hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800d294:	4b0a      	ldr	r3, [pc, #40]	; (800d2c0 <MX_I2C3_Init+0x50>)
 800d296:	2200      	movs	r2, #0
 800d298:	615a      	str	r2, [r3, #20]
	hi2c3.Init.OwnAddress2 = 0;
 800d29a:	4b09      	ldr	r3, [pc, #36]	; (800d2c0 <MX_I2C3_Init+0x50>)
 800d29c:	2200      	movs	r2, #0
 800d29e:	619a      	str	r2, [r3, #24]
	hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800d2a0:	4b07      	ldr	r3, [pc, #28]	; (800d2c0 <MX_I2C3_Init+0x50>)
 800d2a2:	2200      	movs	r2, #0
 800d2a4:	61da      	str	r2, [r3, #28]
	hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800d2a6:	4b06      	ldr	r3, [pc, #24]	; (800d2c0 <MX_I2C3_Init+0x50>)
 800d2a8:	2200      	movs	r2, #0
 800d2aa:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800d2ac:	4804      	ldr	r0, [pc, #16]	; (800d2c0 <MX_I2C3_Init+0x50>)
 800d2ae:	f7f5 f8dd 	bl	800246c <HAL_I2C_Init>
 800d2b2:	4603      	mov	r3, r0
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d001      	beq.n	800d2bc <MX_I2C3_Init+0x4c>
	{
		Error_Handler();
 800d2b8:	f000 fd26 	bl	800dd08 <Error_Handler>
	}
	/* USER CODE BEGIN I2C3_Init 2 */

	/* USER CODE END I2C3_Init 2 */

}
 800d2bc:	bf00      	nop
 800d2be:	bd80      	pop	{r7, pc}
 800d2c0:	20008204 	.word	0x20008204
 800d2c4:	40005c00 	.word	0x40005c00
 800d2c8:	000186a0 	.word	0x000186a0

0800d2cc <MX_RTC_Init>:
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void)
{
 800d2cc:	b580      	push	{r7, lr}
 800d2ce:	b086      	sub	sp, #24
 800d2d0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RTC_Init 0 */

	/* USER CODE END RTC_Init 0 */

	RTC_TimeTypeDef sTime = {0};
 800d2d2:	1d3b      	adds	r3, r7, #4
 800d2d4:	2200      	movs	r2, #0
 800d2d6:	601a      	str	r2, [r3, #0]
 800d2d8:	605a      	str	r2, [r3, #4]
 800d2da:	609a      	str	r2, [r3, #8]
 800d2dc:	60da      	str	r2, [r3, #12]
 800d2de:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = {0};
 800d2e0:	2300      	movs	r3, #0
 800d2e2:	603b      	str	r3, [r7, #0]
	/* USER CODE BEGIN RTC_Init 1 */

	/* USER CODE END RTC_Init 1 */
	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 800d2e4:	4b24      	ldr	r3, [pc, #144]	; (800d378 <MX_RTC_Init+0xac>)
 800d2e6:	4a25      	ldr	r2, [pc, #148]	; (800d37c <MX_RTC_Init+0xb0>)
 800d2e8:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800d2ea:	4b23      	ldr	r3, [pc, #140]	; (800d378 <MX_RTC_Init+0xac>)
 800d2ec:	2200      	movs	r2, #0
 800d2ee:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 800d2f0:	4b21      	ldr	r3, [pc, #132]	; (800d378 <MX_RTC_Init+0xac>)
 800d2f2:	227f      	movs	r2, #127	; 0x7f
 800d2f4:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 800d2f6:	4b20      	ldr	r3, [pc, #128]	; (800d378 <MX_RTC_Init+0xac>)
 800d2f8:	22ff      	movs	r2, #255	; 0xff
 800d2fa:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800d2fc:	4b1e      	ldr	r3, [pc, #120]	; (800d378 <MX_RTC_Init+0xac>)
 800d2fe:	2200      	movs	r2, #0
 800d300:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800d302:	4b1d      	ldr	r3, [pc, #116]	; (800d378 <MX_RTC_Init+0xac>)
 800d304:	2200      	movs	r2, #0
 800d306:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800d308:	4b1b      	ldr	r3, [pc, #108]	; (800d378 <MX_RTC_Init+0xac>)
 800d30a:	2200      	movs	r2, #0
 800d30c:	619a      	str	r2, [r3, #24]
	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800d30e:	481a      	ldr	r0, [pc, #104]	; (800d378 <MX_RTC_Init+0xac>)
 800d310:	f7f6 fe68 	bl	8003fe4 <HAL_RTC_Init>
 800d314:	4603      	mov	r3, r0
 800d316:	2b00      	cmp	r3, #0
 800d318:	d001      	beq.n	800d31e <MX_RTC_Init+0x52>
	{
		Error_Handler();
 800d31a:	f000 fcf5 	bl	800dd08 <Error_Handler>

	/* USER CODE END Check_RTC_BKUP */

	/** Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 0x0;
 800d31e:	2300      	movs	r3, #0
 800d320:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = 0x0;
 800d322:	2300      	movs	r3, #0
 800d324:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = 0x0;
 800d326:	2300      	movs	r3, #0
 800d328:	71bb      	strb	r3, [r7, #6]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800d32a:	2300      	movs	r3, #0
 800d32c:	613b      	str	r3, [r7, #16]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800d32e:	2300      	movs	r3, #0
 800d330:	617b      	str	r3, [r7, #20]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800d332:	1d3b      	adds	r3, r7, #4
 800d334:	2201      	movs	r2, #1
 800d336:	4619      	mov	r1, r3
 800d338:	480f      	ldr	r0, [pc, #60]	; (800d378 <MX_RTC_Init+0xac>)
 800d33a:	f7f6 fee4 	bl	8004106 <HAL_RTC_SetTime>
 800d33e:	4603      	mov	r3, r0
 800d340:	2b00      	cmp	r3, #0
 800d342:	d001      	beq.n	800d348 <MX_RTC_Init+0x7c>
	{
		Error_Handler();
 800d344:	f000 fce0 	bl	800dd08 <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 800d348:	2302      	movs	r3, #2
 800d34a:	703b      	strb	r3, [r7, #0]
	sDate.Month = RTC_MONTH_AUGUST;
 800d34c:	2308      	movs	r3, #8
 800d34e:	707b      	strb	r3, [r7, #1]
	sDate.Date = 0x13;
 800d350:	2313      	movs	r3, #19
 800d352:	70bb      	strb	r3, [r7, #2]
	sDate.Year = 0x19;
 800d354:	2319      	movs	r3, #25
 800d356:	70fb      	strb	r3, [r7, #3]

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800d358:	463b      	mov	r3, r7
 800d35a:	2201      	movs	r2, #1
 800d35c:	4619      	mov	r1, r3
 800d35e:	4806      	ldr	r0, [pc, #24]	; (800d378 <MX_RTC_Init+0xac>)
 800d360:	f7f6 ffec 	bl	800433c <HAL_RTC_SetDate>
 800d364:	4603      	mov	r3, r0
 800d366:	2b00      	cmp	r3, #0
 800d368:	d001      	beq.n	800d36e <MX_RTC_Init+0xa2>
	{
		Error_Handler();
 800d36a:	f000 fccd 	bl	800dd08 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 800d36e:	bf00      	nop
 800d370:	3718      	adds	r7, #24
 800d372:	46bd      	mov	sp, r7
 800d374:	bd80      	pop	{r7, pc}
 800d376:	bf00      	nop
 800d378:	20008304 	.word	0x20008304
 800d37c:	40002800 	.word	0x40002800

0800d380 <MX_UART4_Init>:
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void)
{
 800d380:	b580      	push	{r7, lr}
 800d382:	af00      	add	r7, sp, #0
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 800d384:	4b11      	ldr	r3, [pc, #68]	; (800d3cc <MX_UART4_Init+0x4c>)
 800d386:	4a12      	ldr	r2, [pc, #72]	; (800d3d0 <MX_UART4_Init+0x50>)
 800d388:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = 57600;
 800d38a:	4b10      	ldr	r3, [pc, #64]	; (800d3cc <MX_UART4_Init+0x4c>)
 800d38c:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 800d390:	605a      	str	r2, [r3, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800d392:	4b0e      	ldr	r3, [pc, #56]	; (800d3cc <MX_UART4_Init+0x4c>)
 800d394:	2200      	movs	r2, #0
 800d396:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 800d398:	4b0c      	ldr	r3, [pc, #48]	; (800d3cc <MX_UART4_Init+0x4c>)
 800d39a:	2200      	movs	r2, #0
 800d39c:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 800d39e:	4b0b      	ldr	r3, [pc, #44]	; (800d3cc <MX_UART4_Init+0x4c>)
 800d3a0:	2200      	movs	r2, #0
 800d3a2:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 800d3a4:	4b09      	ldr	r3, [pc, #36]	; (800d3cc <MX_UART4_Init+0x4c>)
 800d3a6:	220c      	movs	r2, #12
 800d3a8:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d3aa:	4b08      	ldr	r3, [pc, #32]	; (800d3cc <MX_UART4_Init+0x4c>)
 800d3ac:	2200      	movs	r2, #0
 800d3ae:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800d3b0:	4b06      	ldr	r3, [pc, #24]	; (800d3cc <MX_UART4_Init+0x4c>)
 800d3b2:	2200      	movs	r2, #0
 800d3b4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart4) != HAL_OK)
 800d3b6:	4805      	ldr	r0, [pc, #20]	; (800d3cc <MX_UART4_Init+0x4c>)
 800d3b8:	f7f7 fb84 	bl	8004ac4 <HAL_UART_Init>
 800d3bc:	4603      	mov	r3, r0
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d001      	beq.n	800d3c6 <MX_UART4_Init+0x46>
	{
		Error_Handler();
 800d3c2:	f000 fca1 	bl	800dd08 <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */

	/* USER CODE END UART4_Init 2 */

}
 800d3c6:	bf00      	nop
 800d3c8:	bd80      	pop	{r7, pc}
 800d3ca:	bf00      	nop
 800d3cc:	20008330 	.word	0x20008330
 800d3d0:	40004c00 	.word	0x40004c00

0800d3d4 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 800d3d4:	b580      	push	{r7, lr}
 800d3d6:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 800d3d8:	4b11      	ldr	r3, [pc, #68]	; (800d420 <MX_USART2_UART_Init+0x4c>)
 800d3da:	4a12      	ldr	r2, [pc, #72]	; (800d424 <MX_USART2_UART_Init+0x50>)
 800d3dc:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 9600;
 800d3de:	4b10      	ldr	r3, [pc, #64]	; (800d420 <MX_USART2_UART_Init+0x4c>)
 800d3e0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800d3e4:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800d3e6:	4b0e      	ldr	r3, [pc, #56]	; (800d420 <MX_USART2_UART_Init+0x4c>)
 800d3e8:	2200      	movs	r2, #0
 800d3ea:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800d3ec:	4b0c      	ldr	r3, [pc, #48]	; (800d420 <MX_USART2_UART_Init+0x4c>)
 800d3ee:	2200      	movs	r2, #0
 800d3f0:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800d3f2:	4b0b      	ldr	r3, [pc, #44]	; (800d420 <MX_USART2_UART_Init+0x4c>)
 800d3f4:	2200      	movs	r2, #0
 800d3f6:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_RX;
 800d3f8:	4b09      	ldr	r3, [pc, #36]	; (800d420 <MX_USART2_UART_Init+0x4c>)
 800d3fa:	2204      	movs	r2, #4
 800d3fc:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d3fe:	4b08      	ldr	r3, [pc, #32]	; (800d420 <MX_USART2_UART_Init+0x4c>)
 800d400:	2200      	movs	r2, #0
 800d402:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800d404:	4b06      	ldr	r3, [pc, #24]	; (800d420 <MX_USART2_UART_Init+0x4c>)
 800d406:	2200      	movs	r2, #0
 800d408:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 800d40a:	4805      	ldr	r0, [pc, #20]	; (800d420 <MX_USART2_UART_Init+0x4c>)
 800d40c:	f7f7 fb5a 	bl	8004ac4 <HAL_UART_Init>
 800d410:	4603      	mov	r3, r0
 800d412:	2b00      	cmp	r3, #0
 800d414:	d001      	beq.n	800d41a <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 800d416:	f000 fc77 	bl	800dd08 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800d41a:	bf00      	nop
 800d41c:	bd80      	pop	{r7, pc}
 800d41e:	bf00      	nop
 800d420:	20008374 	.word	0x20008374
 800d424:	40004400 	.word	0x40004400

0800d428 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 800d428:	b580      	push	{r7, lr}
 800d42a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN USART3_Init 1 */

	//  huart3.Init.BaudRate = 115200;
	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 800d42c:	4b11      	ldr	r3, [pc, #68]	; (800d474 <MX_USART3_UART_Init+0x4c>)
 800d42e:	4a12      	ldr	r2, [pc, #72]	; (800d478 <MX_USART3_UART_Init+0x50>)
 800d430:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 9600;
 800d432:	4b10      	ldr	r3, [pc, #64]	; (800d474 <MX_USART3_UART_Init+0x4c>)
 800d434:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800d438:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800d43a:	4b0e      	ldr	r3, [pc, #56]	; (800d474 <MX_USART3_UART_Init+0x4c>)
 800d43c:	2200      	movs	r2, #0
 800d43e:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 800d440:	4b0c      	ldr	r3, [pc, #48]	; (800d474 <MX_USART3_UART_Init+0x4c>)
 800d442:	2200      	movs	r2, #0
 800d444:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 800d446:	4b0b      	ldr	r3, [pc, #44]	; (800d474 <MX_USART3_UART_Init+0x4c>)
 800d448:	2200      	movs	r2, #0
 800d44a:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 800d44c:	4b09      	ldr	r3, [pc, #36]	; (800d474 <MX_USART3_UART_Init+0x4c>)
 800d44e:	220c      	movs	r2, #12
 800d450:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d452:	4b08      	ldr	r3, [pc, #32]	; (800d474 <MX_USART3_UART_Init+0x4c>)
 800d454:	2200      	movs	r2, #0
 800d456:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800d458:	4b06      	ldr	r3, [pc, #24]	; (800d474 <MX_USART3_UART_Init+0x4c>)
 800d45a:	2200      	movs	r2, #0
 800d45c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK)
 800d45e:	4805      	ldr	r0, [pc, #20]	; (800d474 <MX_USART3_UART_Init+0x4c>)
 800d460:	f7f7 fb30 	bl	8004ac4 <HAL_UART_Init>
 800d464:	4603      	mov	r3, r0
 800d466:	2b00      	cmp	r3, #0
 800d468:	d001      	beq.n	800d46e <MX_USART3_UART_Init+0x46>
	{
		Error_Handler();
 800d46a:	f000 fc4d 	bl	800dd08 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 800d46e:	bf00      	nop
 800d470:	bd80      	pop	{r7, pc}
 800d472:	bf00      	nop
 800d474:	200082bc 	.word	0x200082bc
 800d478:	40004800 	.word	0x40004800

0800d47c <MX_DMA_Init>:

/** 
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) 
{
 800d47c:	b580      	push	{r7, lr}
 800d47e:	b082      	sub	sp, #8
 800d480:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 800d482:	2300      	movs	r3, #0
 800d484:	607b      	str	r3, [r7, #4]
 800d486:	4b14      	ldr	r3, [pc, #80]	; (800d4d8 <MX_DMA_Init+0x5c>)
 800d488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d48a:	4a13      	ldr	r2, [pc, #76]	; (800d4d8 <MX_DMA_Init+0x5c>)
 800d48c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d490:	6313      	str	r3, [r2, #48]	; 0x30
 800d492:	4b11      	ldr	r3, [pc, #68]	; (800d4d8 <MX_DMA_Init+0x5c>)
 800d494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d496:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d49a:	607b      	str	r3, [r7, #4]
 800d49c:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 800d49e:	2200      	movs	r2, #0
 800d4a0:	2105      	movs	r1, #5
 800d4a2:	200c      	movs	r0, #12
 800d4a4:	f7f3 ff76 	bl	8001394 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800d4a8:	200c      	movs	r0, #12
 800d4aa:	f7f3 ff8f 	bl	80013cc <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 800d4ae:	2200      	movs	r2, #0
 800d4b0:	2105      	movs	r1, #5
 800d4b2:	200d      	movs	r0, #13
 800d4b4:	f7f3 ff6e 	bl	8001394 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800d4b8:	200d      	movs	r0, #13
 800d4ba:	f7f3 ff87 	bl	80013cc <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 800d4be:	2200      	movs	r2, #0
 800d4c0:	2105      	movs	r1, #5
 800d4c2:	2010      	movs	r0, #16
 800d4c4:	f7f3 ff66 	bl	8001394 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800d4c8:	2010      	movs	r0, #16
 800d4ca:	f7f3 ff7f 	bl	80013cc <HAL_NVIC_EnableIRQ>

}
 800d4ce:	bf00      	nop
 800d4d0:	3708      	adds	r7, #8
 800d4d2:	46bd      	mov	sp, r7
 800d4d4:	bd80      	pop	{r7, pc}
 800d4d6:	bf00      	nop
 800d4d8:	40023800 	.word	0x40023800

0800d4dc <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800d4dc:	b580      	push	{r7, lr}
 800d4de:	b08c      	sub	sp, #48	; 0x30
 800d4e0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d4e2:	f107 031c 	add.w	r3, r7, #28
 800d4e6:	2200      	movs	r2, #0
 800d4e8:	601a      	str	r2, [r3, #0]
 800d4ea:	605a      	str	r2, [r3, #4]
 800d4ec:	609a      	str	r2, [r3, #8]
 800d4ee:	60da      	str	r2, [r3, #12]
 800d4f0:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800d4f2:	2300      	movs	r3, #0
 800d4f4:	61bb      	str	r3, [r7, #24]
 800d4f6:	4bb1      	ldr	r3, [pc, #708]	; (800d7bc <MX_GPIO_Init+0x2e0>)
 800d4f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4fa:	4ab0      	ldr	r2, [pc, #704]	; (800d7bc <MX_GPIO_Init+0x2e0>)
 800d4fc:	f043 0310 	orr.w	r3, r3, #16
 800d500:	6313      	str	r3, [r2, #48]	; 0x30
 800d502:	4bae      	ldr	r3, [pc, #696]	; (800d7bc <MX_GPIO_Init+0x2e0>)
 800d504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d506:	f003 0310 	and.w	r3, r3, #16
 800d50a:	61bb      	str	r3, [r7, #24]
 800d50c:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800d50e:	2300      	movs	r3, #0
 800d510:	617b      	str	r3, [r7, #20]
 800d512:	4baa      	ldr	r3, [pc, #680]	; (800d7bc <MX_GPIO_Init+0x2e0>)
 800d514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d516:	4aa9      	ldr	r2, [pc, #676]	; (800d7bc <MX_GPIO_Init+0x2e0>)
 800d518:	f043 0304 	orr.w	r3, r3, #4
 800d51c:	6313      	str	r3, [r2, #48]	; 0x30
 800d51e:	4ba7      	ldr	r3, [pc, #668]	; (800d7bc <MX_GPIO_Init+0x2e0>)
 800d520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d522:	f003 0304 	and.w	r3, r3, #4
 800d526:	617b      	str	r3, [r7, #20]
 800d528:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800d52a:	2300      	movs	r3, #0
 800d52c:	613b      	str	r3, [r7, #16]
 800d52e:	4ba3      	ldr	r3, [pc, #652]	; (800d7bc <MX_GPIO_Init+0x2e0>)
 800d530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d532:	4aa2      	ldr	r2, [pc, #648]	; (800d7bc <MX_GPIO_Init+0x2e0>)
 800d534:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d538:	6313      	str	r3, [r2, #48]	; 0x30
 800d53a:	4ba0      	ldr	r3, [pc, #640]	; (800d7bc <MX_GPIO_Init+0x2e0>)
 800d53c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d53e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d542:	613b      	str	r3, [r7, #16]
 800d544:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800d546:	2300      	movs	r3, #0
 800d548:	60fb      	str	r3, [r7, #12]
 800d54a:	4b9c      	ldr	r3, [pc, #624]	; (800d7bc <MX_GPIO_Init+0x2e0>)
 800d54c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d54e:	4a9b      	ldr	r2, [pc, #620]	; (800d7bc <MX_GPIO_Init+0x2e0>)
 800d550:	f043 0301 	orr.w	r3, r3, #1
 800d554:	6313      	str	r3, [r2, #48]	; 0x30
 800d556:	4b99      	ldr	r3, [pc, #612]	; (800d7bc <MX_GPIO_Init+0x2e0>)
 800d558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d55a:	f003 0301 	and.w	r3, r3, #1
 800d55e:	60fb      	str	r3, [r7, #12]
 800d560:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800d562:	2300      	movs	r3, #0
 800d564:	60bb      	str	r3, [r7, #8]
 800d566:	4b95      	ldr	r3, [pc, #596]	; (800d7bc <MX_GPIO_Init+0x2e0>)
 800d568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d56a:	4a94      	ldr	r2, [pc, #592]	; (800d7bc <MX_GPIO_Init+0x2e0>)
 800d56c:	f043 0302 	orr.w	r3, r3, #2
 800d570:	6313      	str	r3, [r2, #48]	; 0x30
 800d572:	4b92      	ldr	r3, [pc, #584]	; (800d7bc <MX_GPIO_Init+0x2e0>)
 800d574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d576:	f003 0302 	and.w	r3, r3, #2
 800d57a:	60bb      	str	r3, [r7, #8]
 800d57c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800d57e:	2300      	movs	r3, #0
 800d580:	607b      	str	r3, [r7, #4]
 800d582:	4b8e      	ldr	r3, [pc, #568]	; (800d7bc <MX_GPIO_Init+0x2e0>)
 800d584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d586:	4a8d      	ldr	r2, [pc, #564]	; (800d7bc <MX_GPIO_Init+0x2e0>)
 800d588:	f043 0308 	orr.w	r3, r3, #8
 800d58c:	6313      	str	r3, [r2, #48]	; 0x30
 800d58e:	4b8b      	ldr	r3, [pc, #556]	; (800d7bc <MX_GPIO_Init+0x2e0>)
 800d590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d592:	f003 0308 	and.w	r3, r3, #8
 800d596:	607b      	str	r3, [r7, #4]
 800d598:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800d59a:	2200      	movs	r2, #0
 800d59c:	2108      	movs	r1, #8
 800d59e:	4888      	ldr	r0, [pc, #544]	; (800d7c0 <MX_GPIO_Init+0x2e4>)
 800d5a0:	f7f4 ff30 	bl	8002404 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, OTG_FS_PowerSwitchOn_Pin|FINGER_PWR_Pin, GPIO_PIN_SET);
 800d5a4:	2201      	movs	r2, #1
 800d5a6:	2105      	movs	r1, #5
 800d5a8:	4886      	ldr	r0, [pc, #536]	; (800d7c4 <MX_GPIO_Init+0x2e8>)
 800d5aa:	f7f4 ff2b 	bl	8002404 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, UBLOX_PWR_Pin|MEMS_PWR_Pin, GPIO_PIN_RESET);
 800d5ae:	2200      	movs	r2, #0
 800d5b0:	2142      	movs	r1, #66	; 0x42
 800d5b2:	4884      	ldr	r0, [pc, #528]	; (800d7c4 <MX_GPIO_Init+0x2e8>)
 800d5b4:	f7f4 ff26 	bl	8002404 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SIMCOM_RST_GPIO_Port, SIMCOM_RST_Pin, GPIO_PIN_SET);
 800d5b8:	2201      	movs	r2, #1
 800d5ba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800d5be:	4882      	ldr	r0, [pc, #520]	; (800d7c8 <MX_GPIO_Init+0x2ec>)
 800d5c0:	f7f4 ff20 	bl	8002404 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SIMCOM_PWR_GPIO_Port, SIMCOM_PWR_Pin, GPIO_PIN_SET);
 800d5c4:	2201      	movs	r2, #1
 800d5c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800d5ca:	4880      	ldr	r0, [pc, #512]	; (800d7cc <MX_GPIO_Init+0x2f0>)
 800d5cc:	f7f4 ff1a 	bl	8002404 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800d5d0:	2200      	movs	r2, #0
 800d5d2:	f24f 0110 	movw	r1, #61456	; 0xf010
 800d5d6:	487d      	ldr	r0, [pc, #500]	; (800d7cc <MX_GPIO_Init+0x2f0>)
 800d5d8:	f7f4 ff14 	bl	8002404 <HAL_GPIO_WritePin>
			|Audio_RST_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin : CS_I2C_SPI_Pin */
	GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800d5dc:	2308      	movs	r3, #8
 800d5de:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d5e0:	2301      	movs	r3, #1
 800d5e2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d5e4:	2300      	movs	r3, #0
 800d5e6:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d5e8:	2300      	movs	r3, #0
 800d5ea:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800d5ec:	f107 031c 	add.w	r3, r7, #28
 800d5f0:	4619      	mov	r1, r3
 800d5f2:	4873      	ldr	r0, [pc, #460]	; (800d7c0 <MX_GPIO_Init+0x2e4>)
 800d5f4:	f7f4 fd54 	bl	80020a0 <HAL_GPIO_Init>

	/*Configure GPIO pin : FINGER_IRQ_Pin */
	GPIO_InitStruct.Pin = FINGER_IRQ_Pin;
 800d5f8:	2340      	movs	r3, #64	; 0x40
 800d5fa:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d5fc:	2300      	movs	r3, #0
 800d5fe:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d600:	2300      	movs	r3, #0
 800d602:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(FINGER_IRQ_GPIO_Port, &GPIO_InitStruct);
 800d604:	f107 031c 	add.w	r3, r7, #28
 800d608:	4619      	mov	r1, r3
 800d60a:	486d      	ldr	r0, [pc, #436]	; (800d7c0 <MX_GPIO_Init+0x2e4>)
 800d60c:	f7f4 fd48 	bl	80020a0 <HAL_GPIO_Init>

	/*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin UBLOX_PWR_Pin FINGER_PWR_Pin MEMS_PWR_Pin */
	GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|UBLOX_PWR_Pin|FINGER_PWR_Pin|MEMS_PWR_Pin;
 800d610:	2347      	movs	r3, #71	; 0x47
 800d612:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d614:	2301      	movs	r3, #1
 800d616:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d618:	2300      	movs	r3, #0
 800d61a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d61c:	2300      	movs	r3, #0
 800d61e:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d620:	f107 031c 	add.w	r3, r7, #28
 800d624:	4619      	mov	r1, r3
 800d626:	4867      	ldr	r0, [pc, #412]	; (800d7c4 <MX_GPIO_Init+0x2e8>)
 800d628:	f7f4 fd3a 	bl	80020a0 <HAL_GPIO_Init>

	/*Configure GPIO pin : PDM_OUT_Pin */
	GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800d62c:	2308      	movs	r3, #8
 800d62e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d630:	2302      	movs	r3, #2
 800d632:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d634:	2300      	movs	r3, #0
 800d636:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d638:	2300      	movs	r3, #0
 800d63a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800d63c:	2305      	movs	r3, #5
 800d63e:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800d640:	f107 031c 	add.w	r3, r7, #28
 800d644:	4619      	mov	r1, r3
 800d646:	485f      	ldr	r0, [pc, #380]	; (800d7c4 <MX_GPIO_Init+0x2e8>)
 800d648:	f7f4 fd2a 	bl	80020a0 <HAL_GPIO_Init>

	/*Configure GPIO pin : I2S3_WS_Pin */
	GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800d64c:	2310      	movs	r3, #16
 800d64e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d650:	2302      	movs	r3, #2
 800d652:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d654:	2300      	movs	r3, #0
 800d656:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d658:	2300      	movs	r3, #0
 800d65a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800d65c:	2306      	movs	r3, #6
 800d65e:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800d660:	f107 031c 	add.w	r3, r7, #28
 800d664:	4619      	mov	r1, r3
 800d666:	485a      	ldr	r0, [pc, #360]	; (800d7d0 <MX_GPIO_Init+0x2f4>)
 800d668:	f7f4 fd1a 	bl	80020a0 <HAL_GPIO_Init>

	/*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
	GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800d66c:	23e0      	movs	r3, #224	; 0xe0
 800d66e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d670:	2302      	movs	r3, #2
 800d672:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d674:	2300      	movs	r3, #0
 800d676:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d678:	2300      	movs	r3, #0
 800d67a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800d67c:	2305      	movs	r3, #5
 800d67e:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d680:	f107 031c 	add.w	r3, r7, #28
 800d684:	4619      	mov	r1, r3
 800d686:	4852      	ldr	r0, [pc, #328]	; (800d7d0 <MX_GPIO_Init+0x2f4>)
 800d688:	f7f4 fd0a 	bl	80020a0 <HAL_GPIO_Init>

	/*Configure GPIO pin : BOOT1_Pin */
	GPIO_InitStruct.Pin = BOOT1_Pin;
 800d68c:	2304      	movs	r3, #4
 800d68e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d690:	2300      	movs	r3, #0
 800d692:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d694:	2300      	movs	r3, #0
 800d696:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800d698:	f107 031c 	add.w	r3, r7, #28
 800d69c:	4619      	mov	r1, r3
 800d69e:	484a      	ldr	r0, [pc, #296]	; (800d7c8 <MX_GPIO_Init+0x2ec>)
 800d6a0:	f7f4 fcfe 	bl	80020a0 <HAL_GPIO_Init>

	/*Configure GPIO pin : CLK_IN_Pin */
	GPIO_InitStruct.Pin = CLK_IN_Pin;
 800d6a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d6a8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d6aa:	2302      	movs	r3, #2
 800d6ac:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d6ae:	2300      	movs	r3, #0
 800d6b0:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d6b2:	2300      	movs	r3, #0
 800d6b4:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800d6b6:	2305      	movs	r3, #5
 800d6b8:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800d6ba:	f107 031c 	add.w	r3, r7, #28
 800d6be:	4619      	mov	r1, r3
 800d6c0:	4841      	ldr	r0, [pc, #260]	; (800d7c8 <MX_GPIO_Init+0x2ec>)
 800d6c2:	f7f4 fced 	bl	80020a0 <HAL_GPIO_Init>

	/*Configure GPIO pin : SIMCOM_RST_Pin */
	GPIO_InitStruct.Pin = SIMCOM_RST_Pin;
 800d6c6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800d6ca:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d6cc:	2301      	movs	r3, #1
 800d6ce:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d6d0:	2300      	movs	r3, #0
 800d6d2:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d6d4:	2300      	movs	r3, #0
 800d6d6:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(SIMCOM_RST_GPIO_Port, &GPIO_InitStruct);
 800d6d8:	f107 031c 	add.w	r3, r7, #28
 800d6dc:	4619      	mov	r1, r3
 800d6de:	483a      	ldr	r0, [pc, #232]	; (800d7c8 <MX_GPIO_Init+0x2ec>)
 800d6e0:	f7f4 fcde 	bl	80020a0 <HAL_GPIO_Init>

	/*Configure GPIO pins : SIMCOM_PWR_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD6_Pin Audio_RST_Pin */
	GPIO_InitStruct.Pin = SIMCOM_PWR_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800d6e4:	f24f 4310 	movw	r3, #62480	; 0xf410
 800d6e8:	61fb      	str	r3, [r7, #28]
			|LD6_Pin|Audio_RST_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d6ea:	2301      	movs	r3, #1
 800d6ec:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d6ee:	2300      	movs	r3, #0
 800d6f0:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d6f2:	2300      	movs	r3, #0
 800d6f4:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800d6f6:	f107 031c 	add.w	r3, r7, #28
 800d6fa:	4619      	mov	r1, r3
 800d6fc:	4833      	ldr	r0, [pc, #204]	; (800d7cc <MX_GPIO_Init+0x2f0>)
 800d6fe:	f7f4 fccf 	bl	80020a0 <HAL_GPIO_Init>

	/*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
	GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800d702:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800d706:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d708:	2302      	movs	r3, #2
 800d70a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d70c:	2300      	movs	r3, #0
 800d70e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d710:	2300      	movs	r3, #0
 800d712:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800d714:	2306      	movs	r3, #6
 800d716:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d718:	f107 031c 	add.w	r3, r7, #28
 800d71c:	4619      	mov	r1, r3
 800d71e:	4829      	ldr	r0, [pc, #164]	; (800d7c4 <MX_GPIO_Init+0x2e8>)
 800d720:	f7f4 fcbe 	bl	80020a0 <HAL_GPIO_Init>

	/*Configure GPIO pin : VBUS_FS_Pin */
	GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800d724:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d728:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d72a:	2300      	movs	r3, #0
 800d72c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d72e:	2300      	movs	r3, #0
 800d730:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800d732:	f107 031c 	add.w	r3, r7, #28
 800d736:	4619      	mov	r1, r3
 800d738:	4825      	ldr	r0, [pc, #148]	; (800d7d0 <MX_GPIO_Init+0x2f4>)
 800d73a:	f7f4 fcb1 	bl	80020a0 <HAL_GPIO_Init>

	/*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
	GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800d73e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800d742:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d744:	2302      	movs	r3, #2
 800d746:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d748:	2300      	movs	r3, #0
 800d74a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d74c:	2300      	movs	r3, #0
 800d74e:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d750:	230a      	movs	r3, #10
 800d752:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d754:	f107 031c 	add.w	r3, r7, #28
 800d758:	4619      	mov	r1, r3
 800d75a:	481d      	ldr	r0, [pc, #116]	; (800d7d0 <MX_GPIO_Init+0x2f4>)
 800d75c:	f7f4 fca0 	bl	80020a0 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800d760:	2320      	movs	r3, #32
 800d762:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d764:	2300      	movs	r3, #0
 800d766:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d768:	2300      	movs	r3, #0
 800d76a:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800d76c:	f107 031c 	add.w	r3, r7, #28
 800d770:	4619      	mov	r1, r3
 800d772:	4816      	ldr	r0, [pc, #88]	; (800d7cc <MX_GPIO_Init+0x2f0>)
 800d774:	f7f4 fc94 	bl	80020a0 <HAL_GPIO_Init>

	/*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
	GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800d778:	f44f 7310 	mov.w	r3, #576	; 0x240
 800d77c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800d77e:	2312      	movs	r3, #18
 800d780:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d782:	2301      	movs	r3, #1
 800d784:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d786:	2300      	movs	r3, #0
 800d788:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800d78a:	2304      	movs	r3, #4
 800d78c:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d78e:	f107 031c 	add.w	r3, r7, #28
 800d792:	4619      	mov	r1, r3
 800d794:	480c      	ldr	r0, [pc, #48]	; (800d7c8 <MX_GPIO_Init+0x2ec>)
 800d796:	f7f4 fc83 	bl	80020a0 <HAL_GPIO_Init>

	/*Configure GPIO pin : MEMS_INT2_Pin */
	GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800d79a:	2302      	movs	r3, #2
 800d79c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800d79e:	4b0d      	ldr	r3, [pc, #52]	; (800d7d4 <MX_GPIO_Init+0x2f8>)
 800d7a0:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d7a2:	2300      	movs	r3, #0
 800d7a4:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800d7a6:	f107 031c 	add.w	r3, r7, #28
 800d7aa:	4619      	mov	r1, r3
 800d7ac:	4804      	ldr	r0, [pc, #16]	; (800d7c0 <MX_GPIO_Init+0x2e4>)
 800d7ae:	f7f4 fc77 	bl	80020a0 <HAL_GPIO_Init>

}
 800d7b2:	bf00      	nop
 800d7b4:	3730      	adds	r7, #48	; 0x30
 800d7b6:	46bd      	mov	sp, r7
 800d7b8:	bd80      	pop	{r7, pc}
 800d7ba:	bf00      	nop
 800d7bc:	40023800 	.word	0x40023800
 800d7c0:	40021000 	.word	0x40021000
 800d7c4:	40020800 	.word	0x40020800
 800d7c8:	40020400 	.word	0x40020400
 800d7cc:	40020c00 	.word	0x40020c00
 800d7d0:	40020000 	.word	0x40020000
 800d7d4:	10120000 	.word	0x10120000

0800d7d8 <vApplicationIdleHook>:

/* USER CODE BEGIN 4 */
void vApplicationIdleHook( void ) {
 800d7d8:	b580      	push	{r7, lr}
 800d7da:	af00      	add	r7, sp, #0
	Simcom_Check_Command();
 800d7dc:	f7ff fac6 	bl	800cd6c <Simcom_Check_Command>
}
 800d7e0:	bf00      	nop
 800d7e2:	bd80      	pop	{r7, pc}

0800d7e4 <StartIotTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartIotTask */
void StartIotTask(void const * argument)
{
 800d7e4:	b580      	push	{r7, lr}
 800d7e6:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 800d7ea:	af00      	add	r7, sp, #0
 800d7ec:	1d3b      	adds	r3, r7, #4
 800d7ee:	6018      	str	r0, [r3, #0]




	/* USER CODE BEGIN 5 */
	const TickType_t xDelay_ms = pdMS_TO_TICKS(REPORT_INTERVAL*1000);
 800d7f0:	f241 3388 	movw	r3, #5000	; 0x1388
 800d7f4:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	uint32_t ulNotifiedValue;
	osEvent evt;
	char msg[SIMCOM_MESSAGE_LENGTH];

	// Start simcom module
	SIMCOM_DMA_Init();
 800d7f8:	f7fb fe94 	bl	8009524 <SIMCOM_DMA_Init>
	Simcom_Init(0);
 800d7fc:	2000      	movs	r0, #0
 800d7fe:	f7ff f845 	bl	800c88c <Simcom_Init>
	/* Infinite loop */
	xLastWakeTime = xTaskGetTickCount();
 800d802:	f7f9 fe89 	bl	8007518 <xTaskGetTickCount>
 800d806:	4603      	mov	r3, r0
 800d808:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
	for(;;)
	{
		// get event data
		xResult = xTaskNotifyWait(
 800d80c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800d810:	2300      	movs	r3, #0
 800d812:	f04f 31ff 	mov.w	r1, #4294967295
 800d816:	2000      	movs	r0, #0
 800d818:	f7fa fbf0 	bl	8007ffc <xTaskNotifyWait>
 800d81c:	f8c7 0210 	str.w	r0, [r7, #528]	; 0x210
				ULONG_MAX, 				/* Reset the notification value to 0 on exit. */
				&ulNotifiedValue, 		/* Notified value pass out in ulNotifiedValue. */
				0  						/* No Block indefinitely. */
		);
		// reset msg event
		sprintf(msg, "%s", "");
 800d820:	f107 0308 	add.w	r3, r7, #8
 800d824:	2200      	movs	r2, #0
 800d826:	701a      	strb	r2, [r3, #0]
		// do this if events occurred
		if(xResult == pdTRUE){
 800d828:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800d82c:	2b01      	cmp	r3, #1
 800d82e:	d121      	bne.n	800d874 <StartIotTask+0x90>
			// check every event
			if( ulNotifiedValue & EVENT_CRASH ){
 800d830:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800d834:	f003 0301 	and.w	r3, r3, #1
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d007      	beq.n	800d84c <StartIotTask+0x68>
				sprintf(msg, "%s%s", msg, "TABRAKAN! ");
 800d83c:	f107 0208 	add.w	r2, r7, #8
 800d840:	f107 0008 	add.w	r0, r7, #8
 800d844:	4b1f      	ldr	r3, [pc, #124]	; (800d8c4 <StartIotTask+0xe0>)
 800d846:	4920      	ldr	r1, [pc, #128]	; (800d8c8 <StartIotTask+0xe4>)
 800d848:	f000 fe94 	bl	800e574 <siprintf>
			}
			if( (ulNotifiedValue & EVENT_FALL) && !(ulNotifiedValue & EVENT_FALL_N) ){
 800d84c:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800d850:	f003 0302 	and.w	r3, r3, #2
 800d854:	2b00      	cmp	r3, #0
 800d856:	d00d      	beq.n	800d874 <StartIotTask+0x90>
 800d858:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800d85c:	f003 0304 	and.w	r3, r3, #4
 800d860:	2b00      	cmp	r3, #0
 800d862:	d107      	bne.n	800d874 <StartIotTask+0x90>
				sprintf(msg, "%s%s", msg, "JATUH! ");
 800d864:	f107 0208 	add.w	r2, r7, #8
 800d868:	f107 0008 	add.w	r0, r7, #8
 800d86c:	4b17      	ldr	r3, [pc, #92]	; (800d8cc <StartIotTask+0xe8>)
 800d86e:	4916      	ldr	r1, [pc, #88]	; (800d8c8 <StartIotTask+0xe4>)
 800d870:	f000 fe80 	bl	800e574 <siprintf>
			}
		}
		// send full msg event
		Simcom_Set_Message(msg);
 800d874:	f107 0308 	add.w	r3, r7, #8
 800d878:	4618      	mov	r0, r3
 800d87a:	f7ff f8e3 	bl	800ca44 <Simcom_Set_Message>

		// get processed gps data
		evt = osMailGet(GpsMailHandle, 0);
 800d87e:	4b14      	ldr	r3, [pc, #80]	; (800d8d0 <StartIotTask+0xec>)
 800d880:	6819      	ldr	r1, [r3, #0]
 800d882:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 800d886:	2200      	movs	r2, #0
 800d888:	4618      	mov	r0, r3
 800d88a:	f7f8 f9ef 	bl	8005c6c <osMailGet>
		// Set payload GPS
		if(evt.status == osEventMail){
 800d88e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800d892:	2b20      	cmp	r3, #32
 800d894:	d104      	bne.n	800d8a0 <StartIotTask+0xbc>
			Simcom_Convert_GPS(evt.value.p);
 800d896:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800d89a:	4618      	mov	r0, r3
 800d89c:	f7ff f8e4 	bl	800ca68 <Simcom_Convert_GPS>
		}
		// Set payload
		Simcom_Set_Payload();
 800d8a0:	f7ff f96a 	bl	800cb78 <Simcom_Set_Payload>
		// Send payload
		if(!Simcom_Send_Payload()){
 800d8a4:	f7ff f9f2 	bl	800cc8c <Simcom_Send_Payload>
 800d8a8:	4603      	mov	r3, r0
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d102      	bne.n	800d8b4 <StartIotTask+0xd0>
			Simcom_Init(1);
 800d8ae:	2001      	movs	r0, #1
 800d8b0:	f7fe ffec 	bl	800c88c <Simcom_Init>
		}
		// Report interval in second
		vTaskDelayUntil(&xLastWakeTime, xDelay_ms);
 800d8b4:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 800d8b8:	f8d7 1214 	ldr.w	r1, [r7, #532]	; 0x214
 800d8bc:	4618      	mov	r0, r3
 800d8be:	f7f9 fc75 	bl	80071ac <vTaskDelayUntil>
		xResult = xTaskNotifyWait(
 800d8c2:	e7a3      	b.n	800d80c <StartIotTask+0x28>
 800d8c4:	080122d4 	.word	0x080122d4
 800d8c8:	080122e0 	.word	0x080122e0
 800d8cc:	080122e8 	.word	0x080122e8
 800d8d0:	20008140 	.word	0x20008140

0800d8d4 <StartCanTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartCanTask */
void StartCanTask(void const * argument)
{
 800d8d4:	b580      	push	{r7, lr}
 800d8d6:	b082      	sub	sp, #8
 800d8d8:	af00      	add	r7, sp, #0
 800d8da:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartCanTask */
	/* Infinite loop */
	for(;;)
	{
		//		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
		osDelay(500);
 800d8dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800d8e0:	f7f8 f81f 	bl	8005922 <osDelay>
 800d8e4:	e7fa      	b.n	800d8dc <StartCanTask+0x8>
	...

0800d8e8 <StartGyroTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartGyroTask */
void StartGyroTask(void const * argument)
{
 800d8e8:	b5b0      	push	{r4, r5, r7, lr}
 800d8ea:	b098      	sub	sp, #96	; 0x60
 800d8ec:	af02      	add	r7, sp, #8
 800d8ee:	61f8      	str	r0, [r7, #28]
	/* USER CODE BEGIN StartGyroTask */
	mems_t mems_calibration;
	mems_decision_t mems_decision;
	SD_MPU6050 mpu;
	/* MPU6050 Initialization*/
	MEMS_Init(&hi2c3, &mpu);
 800d8f0:	f107 0320 	add.w	r3, r7, #32
 800d8f4:	4619      	mov	r1, r3
 800d8f6:	4824      	ldr	r0, [pc, #144]	; (800d988 <StartGyroTask+0xa0>)
 800d8f8:	f7fd fc8a 	bl	800b210 <MEMS_Init>
	// Set calibrator
	mems_calibration = MEMS_Average(&hi2c3, &mpu, NULL, 500);
 800d8fc:	4638      	mov	r0, r7
 800d8fe:	f107 0220 	add.w	r2, r7, #32
 800d902:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800d906:	9300      	str	r3, [sp, #0]
 800d908:	2300      	movs	r3, #0
 800d90a:	491f      	ldr	r1, [pc, #124]	; (800d988 <StartGyroTask+0xa0>)
 800d90c:	f7fd fcac 	bl	800b268 <MEMS_Average>
 800d910:	f107 0440 	add.w	r4, r7, #64	; 0x40
 800d914:	463d      	mov	r5, r7
 800d916:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d918:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d91a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800d91e:	e884 0003 	stmia.w	r4, {r0, r1}
	// Give success indicator
	BSP_Led_Write(1);
 800d922:	2001      	movs	r0, #1
 800d924:	f7fc f9f6 	bl	8009d14 <BSP_Led_Write>
	osDelay(100);
 800d928:	2064      	movs	r0, #100	; 0x64
 800d92a:	f7f7 fffa 	bl	8005922 <osDelay>
	/* Infinite loop */
	for(;;)
	{
		// Read all accelerometer, gyroscope (average)
		mems_decision = MEMS_Decision(&hi2c3, &mpu, &mems_calibration, 25);
 800d92e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800d932:	f107 0120 	add.w	r1, r7, #32
 800d936:	2319      	movs	r3, #25
 800d938:	4813      	ldr	r0, [pc, #76]	; (800d988 <StartGyroTask+0xa0>)
 800d93a:	f7fd fd31 	bl	800b3a0 <MEMS_Decision>
 800d93e:	4603      	mov	r3, r0
 800d940:	87bb      	strh	r3, [r7, #60]	; 0x3c
		// Check accelerometer, happens when impact detected
		if(mems_decision.crash){
 800d942:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800d946:	2b00      	cmp	r3, #0
 800d948:	d006      	beq.n	800d958 <StartGyroTask+0x70>
			xTaskNotify( IotTaskHandle, EVENT_CRASH, eSetBits );
 800d94a:	4b10      	ldr	r3, [pc, #64]	; (800d98c <StartGyroTask+0xa4>)
 800d94c:	6818      	ldr	r0, [r3, #0]
 800d94e:	2300      	movs	r3, #0
 800d950:	2201      	movs	r2, #1
 800d952:	2101      	movs	r1, #1
 800d954:	f7fa fbac 	bl	80080b0 <xTaskGenericNotify>
			//				BSP_Led_Toggle();
			//				osDelay(100);
			//			}
		}
		// Check gyroscope, happens when fall detected
		if(mems_decision.fall){
 800d958:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d007      	beq.n	800d970 <StartGyroTask+0x88>
			xTaskNotify( IotTaskHandle, EVENT_FALL, eSetBits );
 800d960:	4b0a      	ldr	r3, [pc, #40]	; (800d98c <StartGyroTask+0xa4>)
 800d962:	6818      	ldr	r0, [r3, #0]
 800d964:	2300      	movs	r3, #0
 800d966:	2201      	movs	r2, #1
 800d968:	2102      	movs	r1, #2
 800d96a:	f7fa fba1 	bl	80080b0 <xTaskGenericNotify>
 800d96e:	e006      	b.n	800d97e <StartGyroTask+0x96>
			//			BSP_Led_Write(1);
		} else {
			xTaskNotify( IotTaskHandle, EVENT_FALL_N, eSetBits );
 800d970:	4b06      	ldr	r3, [pc, #24]	; (800d98c <StartGyroTask+0xa4>)
 800d972:	6818      	ldr	r0, [r3, #0]
 800d974:	2300      	movs	r3, #0
 800d976:	2201      	movs	r2, #1
 800d978:	2104      	movs	r1, #4
 800d97a:	f7fa fb99 	bl	80080b0 <xTaskGenericNotify>
			//			BSP_Led_Write(0);
		}
		// delay because it's priority is higher
		osDelay(50);
 800d97e:	2032      	movs	r0, #50	; 0x32
 800d980:	f7f7 ffcf 	bl	8005922 <osDelay>
		mems_decision = MEMS_Decision(&hi2c3, &mpu, &mems_calibration, 25);
 800d984:	e7d3      	b.n	800d92e <StartGyroTask+0x46>
 800d986:	bf00      	nop
 800d988:	20008204 	.word	0x20008204
 800d98c:	20008370 	.word	0x20008370

0800d990 <StartCommandTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartCommandTask */
void StartCommandTask(void const * argument)
{
 800d990:	b5b0      	push	{r4, r5, r7, lr}
 800d992:	b0b2      	sub	sp, #200	; 0xc8
 800d994:	af00      	add	r7, sp, #0
 800d996:	6078      	str	r0, [r7, #4]
	uint32_t val;
	/* Infinite loop */
	for(;;)
	{
		// wait for command to arrive
		ulTaskNotifyTake( pdTRUE, portMAX_DELAY );
 800d998:	f04f 31ff 	mov.w	r1, #4294967295
 800d99c:	2001      	movs	r0, #1
 800d99e:	f7fa fae5 	bl	8007f6c <ulTaskNotifyTake>

		// read the command & execute
		if(Simcom_Get_Command(&command)){
 800d9a2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800d9a6:	4618      	mov	r0, r3
 800d9a8:	f7ff f9f8 	bl	800cd9c <Simcom_Get_Command>
 800d9ac:	4603      	mov	r3, r0
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d0f2      	beq.n	800d998 <StartCommandTask+0x8>
			// generic command response
			sprintf(response, "%s executed.", command.cmd);
 800d9b2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800d9b6:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800d9ba:	f107 030c 	add.w	r3, r7, #12
 800d9be:	497e      	ldr	r1, [pc, #504]	; (800dbb8 <StartCommandTask+0x228>)
 800d9c0:	4618      	mov	r0, r3
 800d9c2:	f000 fdd7 	bl	800e574 <siprintf>
			// BSP Led control

			if(strstr(command.var, "LED") != NULL){
 800d9c6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800d9ca:	497c      	ldr	r1, [pc, #496]	; (800dbbc <StartCommandTask+0x22c>)
 800d9cc:	4618      	mov	r0, r3
 800d9ce:	f000 fe2d 	bl	800e62c <strstr>
 800d9d2:	4603      	mov	r3, r0
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d02f      	beq.n	800da38 <StartCommandTask+0xa8>
				val = atoi(command.val);
 800d9d8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800d9dc:	3314      	adds	r3, #20
 800d9de:	4618      	mov	r0, r3
 800d9e0:	f000 fd6b 	bl	800e4ba <atoi>
 800d9e4:	4603      	mov	r3, r0
 800d9e6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
				if(strcmp(command.var, "LED1") == 0) {
 800d9ea:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800d9ee:	4974      	ldr	r1, [pc, #464]	; (800dbc0 <StartCommandTask+0x230>)
 800d9f0:	4618      	mov	r0, r3
 800d9f2:	f7f2 fbed 	bl	80001d0 <strcmp>
 800d9f6:	4603      	mov	r3, r0
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d109      	bne.n	800da10 <StartCommandTask+0x80>
					HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, val);
 800d9fc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800da00:	b2db      	uxtb	r3, r3
 800da02:	461a      	mov	r2, r3
 800da04:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800da08:	486e      	ldr	r0, [pc, #440]	; (800dbc4 <StartCommandTask+0x234>)
 800da0a:	f7f4 fcfb 	bl	8002404 <HAL_GPIO_WritePin>
 800da0e:	e0c4      	b.n	800db9a <StartCommandTask+0x20a>
				} else if(strcmp(command.var, "LED2") == 0) {
 800da10:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800da14:	496c      	ldr	r1, [pc, #432]	; (800dbc8 <StartCommandTask+0x238>)
 800da16:	4618      	mov	r0, r3
 800da18:	f7f2 fbda 	bl	80001d0 <strcmp>
 800da1c:	4603      	mov	r3, r0
 800da1e:	2b00      	cmp	r3, #0
 800da20:	f040 80bb 	bne.w	800db9a <StartCommandTask+0x20a>
					HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, val);
 800da24:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800da28:	b2db      	uxtb	r3, r3
 800da2a:	461a      	mov	r2, r3
 800da2c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800da30:	4864      	ldr	r0, [pc, #400]	; (800dbc4 <StartCommandTask+0x234>)
 800da32:	f7f4 fce7 	bl	8002404 <HAL_GPIO_WritePin>
 800da36:	e0b0      	b.n	800db9a <StartCommandTask+0x20a>
				}
			}
			// Setting RTC
			else if(strcmp(command.var, "RTC") == 0){
 800da38:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800da3c:	4963      	ldr	r1, [pc, #396]	; (800dbcc <StartCommandTask+0x23c>)
 800da3e:	4618      	mov	r0, r3
 800da40:	f7f2 fbc6 	bl	80001d0 <strcmp>
 800da44:	4603      	mov	r3, r0
 800da46:	2b00      	cmp	r3, #0
 800da48:	d106      	bne.n	800da58 <StartCommandTask+0xc8>
				Set_RTC(command.val);
 800da4a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800da4e:	3314      	adds	r3, #20
 800da50:	4618      	mov	r0, r3
 800da52:	f7fc f9cd 	bl	8009df0 <Set_RTC>
 800da56:	e0a0      	b.n	800db9a <StartCommandTask+0x20a>
			}
			// Setting Odometer
			else if(strcmp(command.var, "ODOM") == 0){
 800da58:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800da5c:	495c      	ldr	r1, [pc, #368]	; (800dbd0 <StartCommandTask+0x240>)
 800da5e:	4618      	mov	r0, r3
 800da60:	f7f2 fbb6 	bl	80001d0 <strcmp>
 800da64:	4603      	mov	r3, r0
 800da66:	2b00      	cmp	r3, #0
 800da68:	d10d      	bne.n	800da86 <StartCommandTask+0xf6>
				val = atoi(command.val);
 800da6a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800da6e:	3314      	adds	r3, #20
 800da70:	4618      	mov	r0, r3
 800da72:	f000 fd22 	bl	800e4ba <atoi>
 800da76:	4603      	mov	r3, r0
 800da78:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
				Simcom_Set_Odometer(val);
 800da7c:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 800da80:	f7ff fa1a 	bl	800ceb8 <Simcom_Set_Odometer>
 800da84:	e089      	b.n	800db9a <StartCommandTask+0x20a>
			}
			// Version info
			else if(strcmp(command.var, "INFO") == 0) {
 800da86:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800da8a:	4952      	ldr	r1, [pc, #328]	; (800dbd4 <StartCommandTask+0x244>)
 800da8c:	4618      	mov	r0, r3
 800da8e:	f7f2 fb9f 	bl	80001d0 <strcmp>
 800da92:	4603      	mov	r3, r0
 800da94:	2b00      	cmp	r3, #0
 800da96:	d10b      	bne.n	800dab0 <StartCommandTask+0x120>
				sprintf(response, "HUB v.1.0\nGEN Indonesia @ 2019\n");
 800da98:	f107 030c 	add.w	r3, r7, #12
 800da9c:	4a4e      	ldr	r2, [pc, #312]	; (800dbd8 <StartCommandTask+0x248>)
 800da9e:	461c      	mov	r4, r3
 800daa0:	4615      	mov	r5, r2
 800daa2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800daa4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800daa6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800daaa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800daae:	e074      	b.n	800db9a <StartCommandTask+0x20a>
			}
			// Fingerprint user management
			else if(strstr(command.var, "USER_") != NULL){
 800dab0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800dab4:	4949      	ldr	r1, [pc, #292]	; (800dbdc <StartCommandTask+0x24c>)
 800dab6:	4618      	mov	r0, r3
 800dab8:	f000 fdb8 	bl	800e62c <strstr>
 800dabc:	4603      	mov	r3, r0
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d06b      	beq.n	800db9a <StartCommandTask+0x20a>
				val = atoi(command.val);
 800dac2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800dac6:	3314      	adds	r3, #20
 800dac8:	4618      	mov	r0, r3
 800daca:	f000 fcf6 	bl	800e4ba <atoi>
 800dace:	4603      	mov	r3, r0
 800dad0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

				osRecursiveMutexWait(FingerRecMutexHandle, osWaitForever);
 800dad4:	4b42      	ldr	r3, [pc, #264]	; (800dbe0 <StartCommandTask+0x250>)
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	f04f 31ff 	mov.w	r1, #4294967295
 800dadc:	4618      	mov	r0, r3
 800dade:	f7f8 f964 	bl	8005daa <osRecursiveMutexWait>
				Finger_On();
 800dae2:	f7fc fe59 	bl	800a798 <Finger_On>
				if(strcmp(command.var, "USER_ADD") == 0) {
 800dae6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800daea:	493e      	ldr	r1, [pc, #248]	; (800dbe4 <StartCommandTask+0x254>)
 800daec:	4618      	mov	r0, r3
 800daee:	f7f2 fb6f 	bl	80001d0 <strcmp>
 800daf2:	4603      	mov	r3, r0
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d109      	bne.n	800db0c <StartCommandTask+0x17c>
					p = Finger_Enroll(val);
 800daf8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800dafc:	b2db      	uxtb	r3, r3
 800dafe:	4618      	mov	r0, r3
 800db00:	f7fc fe72 	bl	800a7e8 <Finger_Enroll>
 800db04:	4603      	mov	r3, r0
 800db06:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800db0a:	e020      	b.n	800db4e <StartCommandTask+0x1be>
				}

				else if(strcmp(command.var, "USER_DELETE") == 0) {
 800db0c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800db10:	4935      	ldr	r1, [pc, #212]	; (800dbe8 <StartCommandTask+0x258>)
 800db12:	4618      	mov	r0, r3
 800db14:	f7f2 fb5c 	bl	80001d0 <strcmp>
 800db18:	4603      	mov	r3, r0
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d109      	bne.n	800db32 <StartCommandTask+0x1a2>
					p = Finger_Delete_ID(val);
 800db1e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800db22:	b2db      	uxtb	r3, r3
 800db24:	4618      	mov	r0, r3
 800db26:	f7fd f86b 	bl	800ac00 <Finger_Delete_ID>
 800db2a:	4603      	mov	r3, r0
 800db2c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800db30:	e00d      	b.n	800db4e <StartCommandTask+0x1be>
				}

				else if(strcmp(command.var, "USER_RESET") == 0) {
 800db32:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800db36:	492d      	ldr	r1, [pc, #180]	; (800dbec <StartCommandTask+0x25c>)
 800db38:	4618      	mov	r0, r3
 800db3a:	f7f2 fb49 	bl	80001d0 <strcmp>
 800db3e:	4603      	mov	r3, r0
 800db40:	2b00      	cmp	r3, #0
 800db42:	d104      	bne.n	800db4e <StartCommandTask+0x1be>
					p = Finger_Empty_Database();
 800db44:	f7fd f8a4 	bl	800ac90 <Finger_Empty_Database>
 800db48:	4603      	mov	r3, r0
 800db4a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
				}
				Finger_Off();
 800db4e:	f7fc fe2a 	bl	800a7a6 <Finger_Off>
				osRecursiveMutexRelease(FingerRecMutexHandle);
 800db52:	4b23      	ldr	r3, [pc, #140]	; (800dbe0 <StartCommandTask+0x250>)
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	4618      	mov	r0, r3
 800db58:	f7f8 f914 	bl	8005d84 <osRecursiveMutexRelease>

				sprintf(response, "%s", command.cmd);
 800db5c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800db60:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800db64:	f107 030c 	add.w	r3, r7, #12
 800db68:	4611      	mov	r1, r2
 800db6a:	4618      	mov	r0, r3
 800db6c:	f000 fd2f 	bl	800e5ce <strcpy>
				if( p == FINGERPRINT_OK ){
 800db70:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800db74:	2b00      	cmp	r3, #0
 800db76:	d108      	bne.n	800db8a <StartCommandTask+0x1fa>
					sprintf(response, "%s OK", response);
 800db78:	f107 020c 	add.w	r2, r7, #12
 800db7c:	f107 030c 	add.w	r3, r7, #12
 800db80:	491b      	ldr	r1, [pc, #108]	; (800dbf0 <StartCommandTask+0x260>)
 800db82:	4618      	mov	r0, r3
 800db84:	f000 fcf6 	bl	800e574 <siprintf>
 800db88:	e007      	b.n	800db9a <StartCommandTask+0x20a>
				} else {
					sprintf(response, "%s ERROR", response);
 800db8a:	f107 020c 	add.w	r2, r7, #12
 800db8e:	f107 030c 	add.w	r3, r7, #12
 800db92:	4918      	ldr	r1, [pc, #96]	; (800dbf4 <StartCommandTask+0x264>)
 800db94:	4618      	mov	r0, r3
 800db96:	f000 fced 	bl	800e574 <siprintf>
				}
			}
			// send confirmation
			Simcom_To_Server(response, strlen(response));
 800db9a:	f107 030c 	add.w	r3, r7, #12
 800db9e:	4618      	mov	r0, r3
 800dba0:	f7f2 fb20 	bl	80001e4 <strlen>
 800dba4:	4603      	mov	r3, r0
 800dba6:	b29a      	uxth	r2, r3
 800dba8:	f107 030c 	add.w	r3, r7, #12
 800dbac:	4611      	mov	r1, r2
 800dbae:	4618      	mov	r0, r3
 800dbb0:	f7ff f87c 	bl	800ccac <Simcom_To_Server>
		ulTaskNotifyTake( pdTRUE, portMAX_DELAY );
 800dbb4:	e6f0      	b.n	800d998 <StartCommandTask+0x8>
 800dbb6:	bf00      	nop
 800dbb8:	080122f0 	.word	0x080122f0
 800dbbc:	08012300 	.word	0x08012300
 800dbc0:	08012304 	.word	0x08012304
 800dbc4:	40020c00 	.word	0x40020c00
 800dbc8:	0801230c 	.word	0x0801230c
 800dbcc:	08012314 	.word	0x08012314
 800dbd0:	08012318 	.word	0x08012318
 800dbd4:	08012320 	.word	0x08012320
 800dbd8:	08012328 	.word	0x08012328
 800dbdc:	08012348 	.word	0x08012348
 800dbe0:	200083dc 	.word	0x200083dc
 800dbe4:	08012350 	.word	0x08012350
 800dbe8:	0801235c 	.word	0x0801235c
 800dbec:	08012368 	.word	0x08012368
 800dbf0:	08012374 	.word	0x08012374
 800dbf4:	0801237c 	.word	0x0801237c

0800dbf8 <StartGpsTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartGpsTask */
void StartGpsTask(void const * argument)
{
 800dbf8:	b580      	push	{r7, lr}
 800dbfa:	b0a2      	sub	sp, #136	; 0x88
 800dbfc:	af00      	add	r7, sp, #0
 800dbfe:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartGpsTask */
	extern char UBLOX_UART_RX_Buffer[UBLOX_UART_RX_BUFFER_SIZE];
	const TickType_t xDelay_ms = pdMS_TO_TICKS(REPORT_INTERVAL*1000);
 800dc00:	f241 3388 	movw	r3, #5000	; 0x1388
 800dc04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	TickType_t xLastWakeTime;
	gps_t hgps;
	// Start GPS module
	UBLOX_DMA_Init();
 800dc08:	f7fb ff52 	bl	8009ab0 <UBLOX_DMA_Init>
	Ublox_Init(&hgps);
 800dc0c:	f107 030c 	add.w	r3, r7, #12
 800dc10:	4618      	mov	r0, r3
 800dc12:	f7fe fc2b 	bl	800c46c <Ublox_Init>
	/* Infinite loop */
	xLastWakeTime = xTaskGetTickCount();
 800dc16:	f7f9 fc7f 	bl	8007518 <xTaskGetTickCount>
 800dc1a:	4603      	mov	r3, r0
 800dc1c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	for(;;)
	{
		// get gps info
		gps_process(&hgps, UBLOX_UART_RX_Buffer, strlen(UBLOX_UART_RX_Buffer));
 800dc20:	480c      	ldr	r0, [pc, #48]	; (800dc54 <StartGpsTask+0x5c>)
 800dc22:	f7f2 fadf 	bl	80001e4 <strlen>
 800dc26:	4602      	mov	r2, r0
 800dc28:	f107 030c 	add.w	r3, r7, #12
 800dc2c:	4909      	ldr	r1, [pc, #36]	; (800dc54 <StartGpsTask+0x5c>)
 800dc2e:	4618      	mov	r0, r3
 800dc30:	f7fe faab 	bl	800c18a <gps_process>
		// handover data to IOT_Task
		osMailPut(GpsMailHandle, &hgps);
 800dc34:	4b08      	ldr	r3, [pc, #32]	; (800dc58 <StartGpsTask+0x60>)
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	f107 020c 	add.w	r2, r7, #12
 800dc3c:	4611      	mov	r1, r2
 800dc3e:	4618      	mov	r0, r3
 800dc40:	f7f7 ffd6 	bl	8005bf0 <osMailPut>

		// Report interval in second
		vTaskDelayUntil(&xLastWakeTime, xDelay_ms);
 800dc44:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800dc48:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800dc4c:	4618      	mov	r0, r3
 800dc4e:	f7f9 faad 	bl	80071ac <vTaskDelayUntil>
		gps_process(&hgps, UBLOX_UART_RX_Buffer, strlen(UBLOX_UART_RX_Buffer));
 800dc52:	e7e5      	b.n	800dc20 <StartGpsTask+0x28>
 800dc54:	20007094 	.word	0x20007094
 800dc58:	20008140 	.word	0x20008140

0800dc5c <StartFingerTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartFingerTask */
void StartFingerTask(void const * argument)
{
 800dc5c:	b580      	push	{r7, lr}
 800dc5e:	b084      	sub	sp, #16
 800dc60:	af00      	add	r7, sp, #0
 800dc62:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartFingerTask */
	int p;
	// Initialization
	FINGER_DMA_Init();
 800dc64:	f7fb f9b6 	bl	8008fd4 <FINGER_DMA_Init>
	Finger_Init();
 800dc68:	f7fc fda8 	bl	800a7bc <Finger_Init>
	/* Infinite loop */
	for(;;)
	{
		// scan
		if(HAL_GPIO_ReadPin(FINGER_IRQ_GPIO_Port, FINGER_IRQ_Pin)){
 800dc6c:	2140      	movs	r1, #64	; 0x40
 800dc6e:	481b      	ldr	r0, [pc, #108]	; (800dcdc <StartFingerTask+0x80>)
 800dc70:	f7f4 fbb0 	bl	80023d4 <HAL_GPIO_ReadPin>
 800dc74:	4603      	mov	r3, r0
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d01b      	beq.n	800dcb2 <StartFingerTask+0x56>
			osRecursiveMutexWait(FingerRecMutexHandle, osWaitForever);
 800dc7a:	4b19      	ldr	r3, [pc, #100]	; (800dce0 <StartFingerTask+0x84>)
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	f04f 31ff 	mov.w	r1, #4294967295
 800dc82:	4618      	mov	r0, r3
 800dc84:	f7f8 f891 	bl	8005daa <osRecursiveMutexWait>
			Finger_On();
 800dc88:	f7fc fd86 	bl	800a798 <Finger_On>
			p = Finger_Auth_Fast();
 800dc8c:	f7fd f808 	bl	800aca0 <Finger_Auth_Fast>
 800dc90:	4603      	mov	r3, r0
 800dc92:	60fb      	str	r3, [r7, #12]
			osRecursiveMutexRelease(FingerRecMutexHandle);
 800dc94:	4b12      	ldr	r3, [pc, #72]	; (800dce0 <StartFingerTask+0x84>)
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	4618      	mov	r0, r3
 800dc9a:	f7f8 f873 	bl	8005d84 <osRecursiveMutexRelease>

			BSP_Led_Write((p > 0));
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	bfcc      	ite	gt
 800dca4:	2301      	movgt	r3, #1
 800dca6:	2300      	movle	r3, #0
 800dca8:	b2db      	uxtb	r3, r3
 800dcaa:	4618      	mov	r0, r3
 800dcac:	f7fc f832 	bl	8009d14 <BSP_Led_Write>
 800dcb0:	e010      	b.n	800dcd4 <StartFingerTask+0x78>
		} else {
			osRecursiveMutexWait(FingerRecMutexHandle, osWaitForever);
 800dcb2:	4b0b      	ldr	r3, [pc, #44]	; (800dce0 <StartFingerTask+0x84>)
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	f04f 31ff 	mov.w	r1, #4294967295
 800dcba:	4618      	mov	r0, r3
 800dcbc:	f7f8 f875 	bl	8005daa <osRecursiveMutexWait>
			Finger_Off();
 800dcc0:	f7fc fd71 	bl	800a7a6 <Finger_Off>
			BSP_Led_Write(0);
 800dcc4:	2000      	movs	r0, #0
 800dcc6:	f7fc f825 	bl	8009d14 <BSP_Led_Write>
			osRecursiveMutexRelease(FingerRecMutexHandle);
 800dcca:	4b05      	ldr	r3, [pc, #20]	; (800dce0 <StartFingerTask+0x84>)
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	4618      	mov	r0, r3
 800dcd0:	f7f8 f858 	bl	8005d84 <osRecursiveMutexRelease>
		}
		osDelay(50);
 800dcd4:	2032      	movs	r0, #50	; 0x32
 800dcd6:	f7f7 fe24 	bl	8005922 <osDelay>
		if(HAL_GPIO_ReadPin(FINGER_IRQ_GPIO_Port, FINGER_IRQ_Pin)){
 800dcda:	e7c7      	b.n	800dc6c <StartFingerTask+0x10>
 800dcdc:	40021000 	.word	0x40021000
 800dce0:	200083dc 	.word	0x200083dc

0800dce4 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800dce4:	b580      	push	{r7, lr}
 800dce6:	b082      	sub	sp, #8
 800dce8:	af00      	add	r7, sp, #0
 800dcea:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	4a04      	ldr	r2, [pc, #16]	; (800dd04 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800dcf2:	4293      	cmp	r3, r2
 800dcf4:	d101      	bne.n	800dcfa <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 800dcf6:	f7f3 f979 	bl	8000fec <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 800dcfa:	bf00      	nop
 800dcfc:	3708      	adds	r7, #8
 800dcfe:	46bd      	mov	sp, r7
 800dd00:	bd80      	pop	{r7, pc}
 800dd02:	bf00      	nop
 800dd04:	40010000 	.word	0x40010000

0800dd08 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800dd08:	b580      	push	{r7, lr}
 800dd0a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	swvPrint("Error occurrence.\n");
 800dd0c:	4802      	ldr	r0, [pc, #8]	; (800dd18 <Error_Handler+0x10>)
 800dd0e:	f7fb ff27 	bl	8009b60 <swvPrint>
	/* USER CODE END Error_Handler_Debug */
}
 800dd12:	bf00      	nop
 800dd14:	bd80      	pop	{r7, pc}
 800dd16:	bf00      	nop
 800dd18:	08012388 	.word	0x08012388

0800dd1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800dd1c:	b580      	push	{r7, lr}
 800dd1e:	b082      	sub	sp, #8
 800dd20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800dd22:	2300      	movs	r3, #0
 800dd24:	607b      	str	r3, [r7, #4]
 800dd26:	4b12      	ldr	r3, [pc, #72]	; (800dd70 <HAL_MspInit+0x54>)
 800dd28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dd2a:	4a11      	ldr	r2, [pc, #68]	; (800dd70 <HAL_MspInit+0x54>)
 800dd2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800dd30:	6453      	str	r3, [r2, #68]	; 0x44
 800dd32:	4b0f      	ldr	r3, [pc, #60]	; (800dd70 <HAL_MspInit+0x54>)
 800dd34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dd36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800dd3a:	607b      	str	r3, [r7, #4]
 800dd3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800dd3e:	2300      	movs	r3, #0
 800dd40:	603b      	str	r3, [r7, #0]
 800dd42:	4b0b      	ldr	r3, [pc, #44]	; (800dd70 <HAL_MspInit+0x54>)
 800dd44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd46:	4a0a      	ldr	r2, [pc, #40]	; (800dd70 <HAL_MspInit+0x54>)
 800dd48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dd4c:	6413      	str	r3, [r2, #64]	; 0x40
 800dd4e:	4b08      	ldr	r3, [pc, #32]	; (800dd70 <HAL_MspInit+0x54>)
 800dd50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dd56:	603b      	str	r3, [r7, #0]
 800dd58:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800dd5a:	2200      	movs	r2, #0
 800dd5c:	210f      	movs	r1, #15
 800dd5e:	f06f 0001 	mvn.w	r0, #1
 800dd62:	f7f3 fb17 	bl	8001394 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800dd66:	bf00      	nop
 800dd68:	3708      	adds	r7, #8
 800dd6a:	46bd      	mov	sp, r7
 800dd6c:	bd80      	pop	{r7, pc}
 800dd6e:	bf00      	nop
 800dd70:	40023800 	.word	0x40023800

0800dd74 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800dd74:	b580      	push	{r7, lr}
 800dd76:	b08a      	sub	sp, #40	; 0x28
 800dd78:	af00      	add	r7, sp, #0
 800dd7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800dd7c:	f107 0314 	add.w	r3, r7, #20
 800dd80:	2200      	movs	r2, #0
 800dd82:	601a      	str	r2, [r3, #0]
 800dd84:	605a      	str	r2, [r3, #4]
 800dd86:	609a      	str	r2, [r3, #8]
 800dd88:	60da      	str	r2, [r3, #12]
 800dd8a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	4a19      	ldr	r2, [pc, #100]	; (800ddf8 <HAL_CAN_MspInit+0x84>)
 800dd92:	4293      	cmp	r3, r2
 800dd94:	d12b      	bne.n	800ddee <HAL_CAN_MspInit+0x7a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800dd96:	2300      	movs	r3, #0
 800dd98:	613b      	str	r3, [r7, #16]
 800dd9a:	4b18      	ldr	r3, [pc, #96]	; (800ddfc <HAL_CAN_MspInit+0x88>)
 800dd9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd9e:	4a17      	ldr	r2, [pc, #92]	; (800ddfc <HAL_CAN_MspInit+0x88>)
 800dda0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800dda4:	6413      	str	r3, [r2, #64]	; 0x40
 800dda6:	4b15      	ldr	r3, [pc, #84]	; (800ddfc <HAL_CAN_MspInit+0x88>)
 800dda8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ddaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ddae:	613b      	str	r3, [r7, #16]
 800ddb0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800ddb2:	2300      	movs	r3, #0
 800ddb4:	60fb      	str	r3, [r7, #12]
 800ddb6:	4b11      	ldr	r3, [pc, #68]	; (800ddfc <HAL_CAN_MspInit+0x88>)
 800ddb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ddba:	4a10      	ldr	r2, [pc, #64]	; (800ddfc <HAL_CAN_MspInit+0x88>)
 800ddbc:	f043 0308 	orr.w	r3, r3, #8
 800ddc0:	6313      	str	r3, [r2, #48]	; 0x30
 800ddc2:	4b0e      	ldr	r3, [pc, #56]	; (800ddfc <HAL_CAN_MspInit+0x88>)
 800ddc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ddc6:	f003 0308 	and.w	r3, r3, #8
 800ddca:	60fb      	str	r3, [r7, #12]
 800ddcc:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800ddce:	2303      	movs	r3, #3
 800ddd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ddd2:	2302      	movs	r3, #2
 800ddd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ddd6:	2300      	movs	r3, #0
 800ddd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ddda:	2303      	movs	r3, #3
 800dddc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800ddde:	2309      	movs	r3, #9
 800dde0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800dde2:	f107 0314 	add.w	r3, r7, #20
 800dde6:	4619      	mov	r1, r3
 800dde8:	4805      	ldr	r0, [pc, #20]	; (800de00 <HAL_CAN_MspInit+0x8c>)
 800ddea:	f7f4 f959 	bl	80020a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800ddee:	bf00      	nop
 800ddf0:	3728      	adds	r7, #40	; 0x28
 800ddf2:	46bd      	mov	sp, r7
 800ddf4:	bd80      	pop	{r7, pc}
 800ddf6:	bf00      	nop
 800ddf8:	40006400 	.word	0x40006400
 800ddfc:	40023800 	.word	0x40023800
 800de00:	40020c00 	.word	0x40020c00

0800de04 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800de04:	b580      	push	{r7, lr}
 800de06:	b08a      	sub	sp, #40	; 0x28
 800de08:	af00      	add	r7, sp, #0
 800de0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800de0c:	f107 0314 	add.w	r3, r7, #20
 800de10:	2200      	movs	r2, #0
 800de12:	601a      	str	r2, [r3, #0]
 800de14:	605a      	str	r2, [r3, #4]
 800de16:	609a      	str	r2, [r3, #8]
 800de18:	60da      	str	r2, [r3, #12]
 800de1a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	4a29      	ldr	r2, [pc, #164]	; (800dec8 <HAL_I2C_MspInit+0xc4>)
 800de22:	4293      	cmp	r3, r2
 800de24:	d14b      	bne.n	800debe <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800de26:	2300      	movs	r3, #0
 800de28:	613b      	str	r3, [r7, #16]
 800de2a:	4b28      	ldr	r3, [pc, #160]	; (800decc <HAL_I2C_MspInit+0xc8>)
 800de2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de2e:	4a27      	ldr	r2, [pc, #156]	; (800decc <HAL_I2C_MspInit+0xc8>)
 800de30:	f043 0304 	orr.w	r3, r3, #4
 800de34:	6313      	str	r3, [r2, #48]	; 0x30
 800de36:	4b25      	ldr	r3, [pc, #148]	; (800decc <HAL_I2C_MspInit+0xc8>)
 800de38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de3a:	f003 0304 	and.w	r3, r3, #4
 800de3e:	613b      	str	r3, [r7, #16]
 800de40:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800de42:	2300      	movs	r3, #0
 800de44:	60fb      	str	r3, [r7, #12]
 800de46:	4b21      	ldr	r3, [pc, #132]	; (800decc <HAL_I2C_MspInit+0xc8>)
 800de48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de4a:	4a20      	ldr	r2, [pc, #128]	; (800decc <HAL_I2C_MspInit+0xc8>)
 800de4c:	f043 0301 	orr.w	r3, r3, #1
 800de50:	6313      	str	r3, [r2, #48]	; 0x30
 800de52:	4b1e      	ldr	r3, [pc, #120]	; (800decc <HAL_I2C_MspInit+0xc8>)
 800de54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de56:	f003 0301 	and.w	r3, r3, #1
 800de5a:	60fb      	str	r3, [r7, #12]
 800de5c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration    
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800de5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800de62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800de64:	2312      	movs	r3, #18
 800de66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800de68:	2301      	movs	r3, #1
 800de6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800de6c:	2303      	movs	r3, #3
 800de6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800de70:	2304      	movs	r3, #4
 800de72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800de74:	f107 0314 	add.w	r3, r7, #20
 800de78:	4619      	mov	r1, r3
 800de7a:	4815      	ldr	r0, [pc, #84]	; (800ded0 <HAL_I2C_MspInit+0xcc>)
 800de7c:	f7f4 f910 	bl	80020a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800de80:	f44f 7380 	mov.w	r3, #256	; 0x100
 800de84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800de86:	2312      	movs	r3, #18
 800de88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800de8a:	2301      	movs	r3, #1
 800de8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800de8e:	2303      	movs	r3, #3
 800de90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800de92:	2304      	movs	r3, #4
 800de94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800de96:	f107 0314 	add.w	r3, r7, #20
 800de9a:	4619      	mov	r1, r3
 800de9c:	480d      	ldr	r0, [pc, #52]	; (800ded4 <HAL_I2C_MspInit+0xd0>)
 800de9e:	f7f4 f8ff 	bl	80020a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800dea2:	2300      	movs	r3, #0
 800dea4:	60bb      	str	r3, [r7, #8]
 800dea6:	4b09      	ldr	r3, [pc, #36]	; (800decc <HAL_I2C_MspInit+0xc8>)
 800dea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800deaa:	4a08      	ldr	r2, [pc, #32]	; (800decc <HAL_I2C_MspInit+0xc8>)
 800deac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800deb0:	6413      	str	r3, [r2, #64]	; 0x40
 800deb2:	4b06      	ldr	r3, [pc, #24]	; (800decc <HAL_I2C_MspInit+0xc8>)
 800deb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800deb6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800deba:	60bb      	str	r3, [r7, #8]
 800debc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800debe:	bf00      	nop
 800dec0:	3728      	adds	r7, #40	; 0x28
 800dec2:	46bd      	mov	sp, r7
 800dec4:	bd80      	pop	{r7, pc}
 800dec6:	bf00      	nop
 800dec8:	40005c00 	.word	0x40005c00
 800decc:	40023800 	.word	0x40023800
 800ded0:	40020800 	.word	0x40020800
 800ded4:	40020000 	.word	0x40020000

0800ded8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800ded8:	b480      	push	{r7}
 800deda:	b083      	sub	sp, #12
 800dedc:	af00      	add	r7, sp, #0
 800dede:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	4a05      	ldr	r2, [pc, #20]	; (800defc <HAL_RTC_MspInit+0x24>)
 800dee6:	4293      	cmp	r3, r2
 800dee8:	d102      	bne.n	800def0 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800deea:	4b05      	ldr	r3, [pc, #20]	; (800df00 <HAL_RTC_MspInit+0x28>)
 800deec:	2201      	movs	r2, #1
 800deee:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800def0:	bf00      	nop
 800def2:	370c      	adds	r7, #12
 800def4:	46bd      	mov	sp, r7
 800def6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800defa:	4770      	bx	lr
 800defc:	40002800 	.word	0x40002800
 800df00:	42470e3c 	.word	0x42470e3c

0800df04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800df04:	b580      	push	{r7, lr}
 800df06:	b08e      	sub	sp, #56	; 0x38
 800df08:	af00      	add	r7, sp, #0
 800df0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800df0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800df10:	2200      	movs	r2, #0
 800df12:	601a      	str	r2, [r3, #0]
 800df14:	605a      	str	r2, [r3, #4]
 800df16:	609a      	str	r2, [r3, #8]
 800df18:	60da      	str	r2, [r3, #12]
 800df1a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	4a67      	ldr	r2, [pc, #412]	; (800e0c0 <HAL_UART_MspInit+0x1bc>)
 800df22:	4293      	cmp	r3, r2
 800df24:	d163      	bne.n	800dfee <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800df26:	2300      	movs	r3, #0
 800df28:	623b      	str	r3, [r7, #32]
 800df2a:	4b66      	ldr	r3, [pc, #408]	; (800e0c4 <HAL_UART_MspInit+0x1c0>)
 800df2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df2e:	4a65      	ldr	r2, [pc, #404]	; (800e0c4 <HAL_UART_MspInit+0x1c0>)
 800df30:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800df34:	6413      	str	r3, [r2, #64]	; 0x40
 800df36:	4b63      	ldr	r3, [pc, #396]	; (800e0c4 <HAL_UART_MspInit+0x1c0>)
 800df38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800df3e:	623b      	str	r3, [r7, #32]
 800df40:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800df42:	2300      	movs	r3, #0
 800df44:	61fb      	str	r3, [r7, #28]
 800df46:	4b5f      	ldr	r3, [pc, #380]	; (800e0c4 <HAL_UART_MspInit+0x1c0>)
 800df48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df4a:	4a5e      	ldr	r2, [pc, #376]	; (800e0c4 <HAL_UART_MspInit+0x1c0>)
 800df4c:	f043 0301 	orr.w	r3, r3, #1
 800df50:	6313      	str	r3, [r2, #48]	; 0x30
 800df52:	4b5c      	ldr	r3, [pc, #368]	; (800e0c4 <HAL_UART_MspInit+0x1c0>)
 800df54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df56:	f003 0301 	and.w	r3, r3, #1
 800df5a:	61fb      	str	r3, [r7, #28]
 800df5c:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration    
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800df5e:	2303      	movs	r3, #3
 800df60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800df62:	2302      	movs	r3, #2
 800df64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800df66:	2301      	movs	r3, #1
 800df68:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800df6a:	2303      	movs	r3, #3
 800df6c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800df6e:	2308      	movs	r3, #8
 800df70:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800df72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800df76:	4619      	mov	r1, r3
 800df78:	4853      	ldr	r0, [pc, #332]	; (800e0c8 <HAL_UART_MspInit+0x1c4>)
 800df7a:	f7f4 f891 	bl	80020a0 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 800df7e:	4b53      	ldr	r3, [pc, #332]	; (800e0cc <HAL_UART_MspInit+0x1c8>)
 800df80:	4a53      	ldr	r2, [pc, #332]	; (800e0d0 <HAL_UART_MspInit+0x1cc>)
 800df82:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 800df84:	4b51      	ldr	r3, [pc, #324]	; (800e0cc <HAL_UART_MspInit+0x1c8>)
 800df86:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800df8a:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800df8c:	4b4f      	ldr	r3, [pc, #316]	; (800e0cc <HAL_UART_MspInit+0x1c8>)
 800df8e:	2200      	movs	r2, #0
 800df90:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800df92:	4b4e      	ldr	r3, [pc, #312]	; (800e0cc <HAL_UART_MspInit+0x1c8>)
 800df94:	2200      	movs	r2, #0
 800df96:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800df98:	4b4c      	ldr	r3, [pc, #304]	; (800e0cc <HAL_UART_MspInit+0x1c8>)
 800df9a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800df9e:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800dfa0:	4b4a      	ldr	r3, [pc, #296]	; (800e0cc <HAL_UART_MspInit+0x1c8>)
 800dfa2:	2200      	movs	r2, #0
 800dfa4:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800dfa6:	4b49      	ldr	r3, [pc, #292]	; (800e0cc <HAL_UART_MspInit+0x1c8>)
 800dfa8:	2200      	movs	r2, #0
 800dfaa:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 800dfac:	4b47      	ldr	r3, [pc, #284]	; (800e0cc <HAL_UART_MspInit+0x1c8>)
 800dfae:	f44f 7280 	mov.w	r2, #256	; 0x100
 800dfb2:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800dfb4:	4b45      	ldr	r3, [pc, #276]	; (800e0cc <HAL_UART_MspInit+0x1c8>)
 800dfb6:	2200      	movs	r2, #0
 800dfb8:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800dfba:	4b44      	ldr	r3, [pc, #272]	; (800e0cc <HAL_UART_MspInit+0x1c8>)
 800dfbc:	2200      	movs	r2, #0
 800dfbe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 800dfc0:	4842      	ldr	r0, [pc, #264]	; (800e0cc <HAL_UART_MspInit+0x1c8>)
 800dfc2:	f7f3 fa11 	bl	80013e8 <HAL_DMA_Init>
 800dfc6:	4603      	mov	r3, r0
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d001      	beq.n	800dfd0 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 800dfcc:	f7ff fe9c 	bl	800dd08 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	4a3e      	ldr	r2, [pc, #248]	; (800e0cc <HAL_UART_MspInit+0x1c8>)
 800dfd4:	635a      	str	r2, [r3, #52]	; 0x34
 800dfd6:	4a3d      	ldr	r2, [pc, #244]	; (800e0cc <HAL_UART_MspInit+0x1c8>)
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 800dfdc:	2200      	movs	r2, #0
 800dfde:	2105      	movs	r1, #5
 800dfe0:	2034      	movs	r0, #52	; 0x34
 800dfe2:	f7f3 f9d7 	bl	8001394 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800dfe6:	2034      	movs	r0, #52	; 0x34
 800dfe8:	f7f3 f9f0 	bl	80013cc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800dfec:	e101      	b.n	800e1f2 <HAL_UART_MspInit+0x2ee>
  else if(huart->Instance==USART2)
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	4a38      	ldr	r2, [pc, #224]	; (800e0d4 <HAL_UART_MspInit+0x1d0>)
 800dff4:	4293      	cmp	r3, r2
 800dff6:	d173      	bne.n	800e0e0 <HAL_UART_MspInit+0x1dc>
    __HAL_RCC_USART2_CLK_ENABLE();
 800dff8:	2300      	movs	r3, #0
 800dffa:	61bb      	str	r3, [r7, #24]
 800dffc:	4b31      	ldr	r3, [pc, #196]	; (800e0c4 <HAL_UART_MspInit+0x1c0>)
 800dffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e000:	4a30      	ldr	r2, [pc, #192]	; (800e0c4 <HAL_UART_MspInit+0x1c0>)
 800e002:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e006:	6413      	str	r3, [r2, #64]	; 0x40
 800e008:	4b2e      	ldr	r3, [pc, #184]	; (800e0c4 <HAL_UART_MspInit+0x1c0>)
 800e00a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e00c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e010:	61bb      	str	r3, [r7, #24]
 800e012:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e014:	2300      	movs	r3, #0
 800e016:	617b      	str	r3, [r7, #20]
 800e018:	4b2a      	ldr	r3, [pc, #168]	; (800e0c4 <HAL_UART_MspInit+0x1c0>)
 800e01a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e01c:	4a29      	ldr	r2, [pc, #164]	; (800e0c4 <HAL_UART_MspInit+0x1c0>)
 800e01e:	f043 0301 	orr.w	r3, r3, #1
 800e022:	6313      	str	r3, [r2, #48]	; 0x30
 800e024:	4b27      	ldr	r3, [pc, #156]	; (800e0c4 <HAL_UART_MspInit+0x1c0>)
 800e026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e028:	f003 0301 	and.w	r3, r3, #1
 800e02c:	617b      	str	r3, [r7, #20]
 800e02e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800e030:	230c      	movs	r3, #12
 800e032:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e034:	2302      	movs	r3, #2
 800e036:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e038:	2301      	movs	r3, #1
 800e03a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e03c:	2303      	movs	r3, #3
 800e03e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800e040:	2307      	movs	r3, #7
 800e042:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e044:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e048:	4619      	mov	r1, r3
 800e04a:	481f      	ldr	r0, [pc, #124]	; (800e0c8 <HAL_UART_MspInit+0x1c4>)
 800e04c:	f7f4 f828 	bl	80020a0 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800e050:	4b21      	ldr	r3, [pc, #132]	; (800e0d8 <HAL_UART_MspInit+0x1d4>)
 800e052:	4a22      	ldr	r2, [pc, #136]	; (800e0dc <HAL_UART_MspInit+0x1d8>)
 800e054:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800e056:	4b20      	ldr	r3, [pc, #128]	; (800e0d8 <HAL_UART_MspInit+0x1d4>)
 800e058:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800e05c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800e05e:	4b1e      	ldr	r3, [pc, #120]	; (800e0d8 <HAL_UART_MspInit+0x1d4>)
 800e060:	2200      	movs	r2, #0
 800e062:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800e064:	4b1c      	ldr	r3, [pc, #112]	; (800e0d8 <HAL_UART_MspInit+0x1d4>)
 800e066:	2200      	movs	r2, #0
 800e068:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800e06a:	4b1b      	ldr	r3, [pc, #108]	; (800e0d8 <HAL_UART_MspInit+0x1d4>)
 800e06c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e070:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800e072:	4b19      	ldr	r3, [pc, #100]	; (800e0d8 <HAL_UART_MspInit+0x1d4>)
 800e074:	2200      	movs	r2, #0
 800e076:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800e078:	4b17      	ldr	r3, [pc, #92]	; (800e0d8 <HAL_UART_MspInit+0x1d4>)
 800e07a:	2200      	movs	r2, #0
 800e07c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800e07e:	4b16      	ldr	r3, [pc, #88]	; (800e0d8 <HAL_UART_MspInit+0x1d4>)
 800e080:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e084:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800e086:	4b14      	ldr	r3, [pc, #80]	; (800e0d8 <HAL_UART_MspInit+0x1d4>)
 800e088:	2200      	movs	r2, #0
 800e08a:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800e08c:	4b12      	ldr	r3, [pc, #72]	; (800e0d8 <HAL_UART_MspInit+0x1d4>)
 800e08e:	2200      	movs	r2, #0
 800e090:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800e092:	4811      	ldr	r0, [pc, #68]	; (800e0d8 <HAL_UART_MspInit+0x1d4>)
 800e094:	f7f3 f9a8 	bl	80013e8 <HAL_DMA_Init>
 800e098:	4603      	mov	r3, r0
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d001      	beq.n	800e0a2 <HAL_UART_MspInit+0x19e>
      Error_Handler();
 800e09e:	f7ff fe33 	bl	800dd08 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	4a0c      	ldr	r2, [pc, #48]	; (800e0d8 <HAL_UART_MspInit+0x1d4>)
 800e0a6:	635a      	str	r2, [r3, #52]	; 0x34
 800e0a8:	4a0b      	ldr	r2, [pc, #44]	; (800e0d8 <HAL_UART_MspInit+0x1d4>)
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800e0ae:	2200      	movs	r2, #0
 800e0b0:	2105      	movs	r1, #5
 800e0b2:	2026      	movs	r0, #38	; 0x26
 800e0b4:	f7f3 f96e 	bl	8001394 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800e0b8:	2026      	movs	r0, #38	; 0x26
 800e0ba:	f7f3 f987 	bl	80013cc <HAL_NVIC_EnableIRQ>
}
 800e0be:	e098      	b.n	800e1f2 <HAL_UART_MspInit+0x2ee>
 800e0c0:	40004c00 	.word	0x40004c00
 800e0c4:	40023800 	.word	0x40023800
 800e0c8:	40020000 	.word	0x40020000
 800e0cc:	20008144 	.word	0x20008144
 800e0d0:	40026040 	.word	0x40026040
 800e0d4:	40004400 	.word	0x40004400
 800e0d8:	200081a4 	.word	0x200081a4
 800e0dc:	40026088 	.word	0x40026088
  else if(huart->Instance==USART3)
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	4a45      	ldr	r2, [pc, #276]	; (800e1fc <HAL_UART_MspInit+0x2f8>)
 800e0e6:	4293      	cmp	r3, r2
 800e0e8:	f040 8083 	bne.w	800e1f2 <HAL_UART_MspInit+0x2ee>
    __HAL_RCC_USART3_CLK_ENABLE();
 800e0ec:	2300      	movs	r3, #0
 800e0ee:	613b      	str	r3, [r7, #16]
 800e0f0:	4b43      	ldr	r3, [pc, #268]	; (800e200 <HAL_UART_MspInit+0x2fc>)
 800e0f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e0f4:	4a42      	ldr	r2, [pc, #264]	; (800e200 <HAL_UART_MspInit+0x2fc>)
 800e0f6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800e0fa:	6413      	str	r3, [r2, #64]	; 0x40
 800e0fc:	4b40      	ldr	r3, [pc, #256]	; (800e200 <HAL_UART_MspInit+0x2fc>)
 800e0fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e100:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e104:	613b      	str	r3, [r7, #16]
 800e106:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e108:	2300      	movs	r3, #0
 800e10a:	60fb      	str	r3, [r7, #12]
 800e10c:	4b3c      	ldr	r3, [pc, #240]	; (800e200 <HAL_UART_MspInit+0x2fc>)
 800e10e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e110:	4a3b      	ldr	r2, [pc, #236]	; (800e200 <HAL_UART_MspInit+0x2fc>)
 800e112:	f043 0302 	orr.w	r3, r3, #2
 800e116:	6313      	str	r3, [r2, #48]	; 0x30
 800e118:	4b39      	ldr	r3, [pc, #228]	; (800e200 <HAL_UART_MspInit+0x2fc>)
 800e11a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e11c:	f003 0302 	and.w	r3, r3, #2
 800e120:	60fb      	str	r3, [r7, #12]
 800e122:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800e124:	2300      	movs	r3, #0
 800e126:	60bb      	str	r3, [r7, #8]
 800e128:	4b35      	ldr	r3, [pc, #212]	; (800e200 <HAL_UART_MspInit+0x2fc>)
 800e12a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e12c:	4a34      	ldr	r2, [pc, #208]	; (800e200 <HAL_UART_MspInit+0x2fc>)
 800e12e:	f043 0308 	orr.w	r3, r3, #8
 800e132:	6313      	str	r3, [r2, #48]	; 0x30
 800e134:	4b32      	ldr	r3, [pc, #200]	; (800e200 <HAL_UART_MspInit+0x2fc>)
 800e136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e138:	f003 0308 	and.w	r3, r3, #8
 800e13c:	60bb      	str	r3, [r7, #8]
 800e13e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800e140:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e144:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e146:	2302      	movs	r3, #2
 800e148:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e14a:	2301      	movs	r3, #1
 800e14c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e14e:	2303      	movs	r3, #3
 800e150:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800e152:	2307      	movs	r3, #7
 800e154:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e156:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e15a:	4619      	mov	r1, r3
 800e15c:	4829      	ldr	r0, [pc, #164]	; (800e204 <HAL_UART_MspInit+0x300>)
 800e15e:	f7f3 ff9f 	bl	80020a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800e162:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e166:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e168:	2302      	movs	r3, #2
 800e16a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e16c:	2301      	movs	r3, #1
 800e16e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e170:	2303      	movs	r3, #3
 800e172:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800e174:	2307      	movs	r3, #7
 800e176:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800e178:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e17c:	4619      	mov	r1, r3
 800e17e:	4822      	ldr	r0, [pc, #136]	; (800e208 <HAL_UART_MspInit+0x304>)
 800e180:	f7f3 ff8e 	bl	80020a0 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800e184:	4b21      	ldr	r3, [pc, #132]	; (800e20c <HAL_UART_MspInit+0x308>)
 800e186:	4a22      	ldr	r2, [pc, #136]	; (800e210 <HAL_UART_MspInit+0x30c>)
 800e188:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 800e18a:	4b20      	ldr	r3, [pc, #128]	; (800e20c <HAL_UART_MspInit+0x308>)
 800e18c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800e190:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800e192:	4b1e      	ldr	r3, [pc, #120]	; (800e20c <HAL_UART_MspInit+0x308>)
 800e194:	2200      	movs	r2, #0
 800e196:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800e198:	4b1c      	ldr	r3, [pc, #112]	; (800e20c <HAL_UART_MspInit+0x308>)
 800e19a:	2200      	movs	r2, #0
 800e19c:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800e19e:	4b1b      	ldr	r3, [pc, #108]	; (800e20c <HAL_UART_MspInit+0x308>)
 800e1a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e1a4:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800e1a6:	4b19      	ldr	r3, [pc, #100]	; (800e20c <HAL_UART_MspInit+0x308>)
 800e1a8:	2200      	movs	r2, #0
 800e1aa:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800e1ac:	4b17      	ldr	r3, [pc, #92]	; (800e20c <HAL_UART_MspInit+0x308>)
 800e1ae:	2200      	movs	r2, #0
 800e1b0:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 800e1b2:	4b16      	ldr	r3, [pc, #88]	; (800e20c <HAL_UART_MspInit+0x308>)
 800e1b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e1b8:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800e1ba:	4b14      	ldr	r3, [pc, #80]	; (800e20c <HAL_UART_MspInit+0x308>)
 800e1bc:	2200      	movs	r2, #0
 800e1be:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800e1c0:	4b12      	ldr	r3, [pc, #72]	; (800e20c <HAL_UART_MspInit+0x308>)
 800e1c2:	2200      	movs	r2, #0
 800e1c4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800e1c6:	4811      	ldr	r0, [pc, #68]	; (800e20c <HAL_UART_MspInit+0x308>)
 800e1c8:	f7f3 f90e 	bl	80013e8 <HAL_DMA_Init>
 800e1cc:	4603      	mov	r3, r0
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d001      	beq.n	800e1d6 <HAL_UART_MspInit+0x2d2>
      Error_Handler();
 800e1d2:	f7ff fd99 	bl	800dd08 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	4a0c      	ldr	r2, [pc, #48]	; (800e20c <HAL_UART_MspInit+0x308>)
 800e1da:	635a      	str	r2, [r3, #52]	; 0x34
 800e1dc:	4a0b      	ldr	r2, [pc, #44]	; (800e20c <HAL_UART_MspInit+0x308>)
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800e1e2:	2200      	movs	r2, #0
 800e1e4:	2105      	movs	r1, #5
 800e1e6:	2027      	movs	r0, #39	; 0x27
 800e1e8:	f7f3 f8d4 	bl	8001394 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800e1ec:	2027      	movs	r0, #39	; 0x27
 800e1ee:	f7f3 f8ed 	bl	80013cc <HAL_NVIC_EnableIRQ>
}
 800e1f2:	bf00      	nop
 800e1f4:	3738      	adds	r7, #56	; 0x38
 800e1f6:	46bd      	mov	sp, r7
 800e1f8:	bd80      	pop	{r7, pc}
 800e1fa:	bf00      	nop
 800e1fc:	40004800 	.word	0x40004800
 800e200:	40023800 	.word	0x40023800
 800e204:	40020400 	.word	0x40020400
 800e208:	40020c00 	.word	0x40020c00
 800e20c:	2000825c 	.word	0x2000825c
 800e210:	40026028 	.word	0x40026028

0800e214 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800e214:	b580      	push	{r7, lr}
 800e216:	b08c      	sub	sp, #48	; 0x30
 800e218:	af00      	add	r7, sp, #0
 800e21a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800e21c:	2300      	movs	r3, #0
 800e21e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800e220:	2300      	movs	r3, #0
 800e222:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 800e224:	2200      	movs	r2, #0
 800e226:	6879      	ldr	r1, [r7, #4]
 800e228:	2019      	movs	r0, #25
 800e22a:	f7f3 f8b3 	bl	8001394 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 800e22e:	2019      	movs	r0, #25
 800e230:	f7f3 f8cc 	bl	80013cc <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800e234:	2300      	movs	r3, #0
 800e236:	60fb      	str	r3, [r7, #12]
 800e238:	4b1f      	ldr	r3, [pc, #124]	; (800e2b8 <HAL_InitTick+0xa4>)
 800e23a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e23c:	4a1e      	ldr	r2, [pc, #120]	; (800e2b8 <HAL_InitTick+0xa4>)
 800e23e:	f043 0301 	orr.w	r3, r3, #1
 800e242:	6453      	str	r3, [r2, #68]	; 0x44
 800e244:	4b1c      	ldr	r3, [pc, #112]	; (800e2b8 <HAL_InitTick+0xa4>)
 800e246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e248:	f003 0301 	and.w	r3, r3, #1
 800e24c:	60fb      	str	r3, [r7, #12]
 800e24e:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800e250:	f107 0210 	add.w	r2, r7, #16
 800e254:	f107 0314 	add.w	r3, r7, #20
 800e258:	4611      	mov	r1, r2
 800e25a:	4618      	mov	r0, r3
 800e25c:	f7f5 fdae 	bl	8003dbc <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800e260:	f7f5 fd98 	bl	8003d94 <HAL_RCC_GetPCLK2Freq>
 800e264:	4603      	mov	r3, r0
 800e266:	005b      	lsls	r3, r3, #1
 800e268:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800e26a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e26c:	4a13      	ldr	r2, [pc, #76]	; (800e2bc <HAL_InitTick+0xa8>)
 800e26e:	fba2 2303 	umull	r2, r3, r2, r3
 800e272:	0c9b      	lsrs	r3, r3, #18
 800e274:	3b01      	subs	r3, #1
 800e276:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800e278:	4b11      	ldr	r3, [pc, #68]	; (800e2c0 <HAL_InitTick+0xac>)
 800e27a:	4a12      	ldr	r2, [pc, #72]	; (800e2c4 <HAL_InitTick+0xb0>)
 800e27c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 800e27e:	4b10      	ldr	r3, [pc, #64]	; (800e2c0 <HAL_InitTick+0xac>)
 800e280:	f240 32e7 	movw	r2, #999	; 0x3e7
 800e284:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800e286:	4a0e      	ldr	r2, [pc, #56]	; (800e2c0 <HAL_InitTick+0xac>)
 800e288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e28a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800e28c:	4b0c      	ldr	r3, [pc, #48]	; (800e2c0 <HAL_InitTick+0xac>)
 800e28e:	2200      	movs	r2, #0
 800e290:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e292:	4b0b      	ldr	r3, [pc, #44]	; (800e2c0 <HAL_InitTick+0xac>)
 800e294:	2200      	movs	r2, #0
 800e296:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800e298:	4809      	ldr	r0, [pc, #36]	; (800e2c0 <HAL_InitTick+0xac>)
 800e29a:	f7f6 f9d5 	bl	8004648 <HAL_TIM_Base_Init>
 800e29e:	4603      	mov	r3, r0
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d104      	bne.n	800e2ae <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800e2a4:	4806      	ldr	r0, [pc, #24]	; (800e2c0 <HAL_InitTick+0xac>)
 800e2a6:	f7f6 fa04 	bl	80046b2 <HAL_TIM_Base_Start_IT>
 800e2aa:	4603      	mov	r3, r0
 800e2ac:	e000      	b.n	800e2b0 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800e2ae:	2301      	movs	r3, #1
}
 800e2b0:	4618      	mov	r0, r3
 800e2b2:	3730      	adds	r7, #48	; 0x30
 800e2b4:	46bd      	mov	sp, r7
 800e2b6:	bd80      	pop	{r7, pc}
 800e2b8:	40023800 	.word	0x40023800
 800e2bc:	431bde83 	.word	0x431bde83
 800e2c0:	200083e4 	.word	0x200083e4
 800e2c4:	40010000 	.word	0x40010000

0800e2c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800e2c8:	b480      	push	{r7}
 800e2ca:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800e2cc:	bf00      	nop
 800e2ce:	46bd      	mov	sp, r7
 800e2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2d4:	4770      	bx	lr
	...

0800e2d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800e2d8:	b580      	push	{r7, lr}
 800e2da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	swvPrint("Hard fault interrupt.\n");
 800e2dc:	4801      	ldr	r0, [pc, #4]	; (800e2e4 <HardFault_Handler+0xc>)
 800e2de:	f7fb fc3f 	bl	8009b60 <swvPrint>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800e2e2:	e7fe      	b.n	800e2e2 <HardFault_Handler+0xa>
 800e2e4:	0801239c 	.word	0x0801239c

0800e2e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800e2e8:	b580      	push	{r7, lr}
 800e2ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
	swvPrint("Memory management fault.\n");
 800e2ec:	4801      	ldr	r0, [pc, #4]	; (800e2f4 <MemManage_Handler+0xc>)
 800e2ee:	f7fb fc37 	bl	8009b60 <swvPrint>
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800e2f2:	e7fe      	b.n	800e2f2 <MemManage_Handler+0xa>
 800e2f4:	080123b4 	.word	0x080123b4

0800e2f8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800e2f8:	b580      	push	{r7, lr}
 800e2fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
	swvPrint("Pre-fetch fault, memory access fault.\n");
 800e2fc:	4801      	ldr	r0, [pc, #4]	; (800e304 <BusFault_Handler+0xc>)
 800e2fe:	f7fb fc2f 	bl	8009b60 <swvPrint>
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800e302:	e7fe      	b.n	800e302 <BusFault_Handler+0xa>
 800e304:	080123d0 	.word	0x080123d0

0800e308 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800e308:	b580      	push	{r7, lr}
 800e30a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
	swvPrint("Undefined instruction or illegal state.\n");
 800e30c:	4801      	ldr	r0, [pc, #4]	; (800e314 <UsageFault_Handler+0xc>)
 800e30e:	f7fb fc27 	bl	8009b60 <swvPrint>
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800e312:	e7fe      	b.n	800e312 <UsageFault_Handler+0xa>
 800e314:	080123f8 	.word	0x080123f8

0800e318 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800e318:	b480      	push	{r7}
 800e31a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800e31c:	bf00      	nop
 800e31e:	46bd      	mov	sp, r7
 800e320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e324:	4770      	bx	lr
	...

0800e328 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800e328:	b580      	push	{r7, lr}
 800e32a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */
  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800e32c:	4804      	ldr	r0, [pc, #16]	; (800e340 <DMA1_Stream1_IRQHandler+0x18>)
 800e32e:	f7f3 f98b 	bl	8001648 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */
	SIMCOM_DMA_IrqHandler(&hdma_usart3_rx, &huart3);
 800e332:	4904      	ldr	r1, [pc, #16]	; (800e344 <DMA1_Stream1_IRQHandler+0x1c>)
 800e334:	4802      	ldr	r0, [pc, #8]	; (800e340 <DMA1_Stream1_IRQHandler+0x18>)
 800e336:	f7fa fead 	bl	8009094 <SIMCOM_DMA_IrqHandler>
  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800e33a:	bf00      	nop
 800e33c:	bd80      	pop	{r7, pc}
 800e33e:	bf00      	nop
 800e340:	2000825c 	.word	0x2000825c
 800e344:	200082bc 	.word	0x200082bc

0800e348 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 800e348:	b580      	push	{r7, lr}
 800e34a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 800e34c:	4804      	ldr	r0, [pc, #16]	; (800e360 <DMA1_Stream2_IRQHandler+0x18>)
 800e34e:	f7f3 f97b 	bl	8001648 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */
	FINGER_DMA_IrqHandler(&hdma_uart4_rx, &huart4);
 800e352:	4904      	ldr	r1, [pc, #16]	; (800e364 <DMA1_Stream2_IRQHandler+0x1c>)
 800e354:	4802      	ldr	r0, [pc, #8]	; (800e360 <DMA1_Stream2_IRQHandler+0x18>)
 800e356:	f7fa fbf5 	bl	8008b44 <FINGER_DMA_IrqHandler>
  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800e35a:	bf00      	nop
 800e35c:	bd80      	pop	{r7, pc}
 800e35e:	bf00      	nop
 800e360:	20008144 	.word	0x20008144
 800e364:	20008330 	.word	0x20008330

0800e368 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800e368:	b580      	push	{r7, lr}
 800e36a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800e36c:	4804      	ldr	r0, [pc, #16]	; (800e380 <DMA1_Stream5_IRQHandler+0x18>)
 800e36e:	f7f3 f96b 	bl	8001648 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */
	UBLOX_DMA_IrqHandler(&hdma_usart2_rx, &huart2);
 800e372:	4904      	ldr	r1, [pc, #16]	; (800e384 <DMA1_Stream5_IRQHandler+0x1c>)
 800e374:	4802      	ldr	r0, [pc, #8]	; (800e380 <DMA1_Stream5_IRQHandler+0x18>)
 800e376:	f7fb f94d 	bl	8009614 <UBLOX_DMA_IrqHandler>
  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800e37a:	bf00      	nop
 800e37c:	bd80      	pop	{r7, pc}
 800e37e:	bf00      	nop
 800e380:	200081a4 	.word	0x200081a4
 800e384:	20008374 	.word	0x20008374

0800e388 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800e388:	b580      	push	{r7, lr}
 800e38a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800e38c:	4802      	ldr	r0, [pc, #8]	; (800e398 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800e38e:	f7f6 f9b4 	bl	80046fa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800e392:	bf00      	nop
 800e394:	bd80      	pop	{r7, pc}
 800e396:	bf00      	nop
 800e398:	200083e4 	.word	0x200083e4

0800e39c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800e39c:	b580      	push	{r7, lr}
 800e39e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800e3a0:	4804      	ldr	r0, [pc, #16]	; (800e3b4 <USART2_IRQHandler+0x18>)
 800e3a2:	f7f6 fcf5 	bl	8004d90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
	UBLOX_USART_IrqHandler(&huart2, &hdma_usart2_rx);
 800e3a6:	4904      	ldr	r1, [pc, #16]	; (800e3b8 <USART2_IRQHandler+0x1c>)
 800e3a8:	4802      	ldr	r0, [pc, #8]	; (800e3b4 <USART2_IRQHandler+0x18>)
 800e3aa:	f7fb f90b 	bl	80095c4 <UBLOX_USART_IrqHandler>
  /* USER CODE END USART2_IRQn 1 */
}
 800e3ae:	bf00      	nop
 800e3b0:	bd80      	pop	{r7, pc}
 800e3b2:	bf00      	nop
 800e3b4:	20008374 	.word	0x20008374
 800e3b8:	200081a4 	.word	0x200081a4

0800e3bc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800e3bc:	b580      	push	{r7, lr}
 800e3be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800e3c0:	4804      	ldr	r0, [pc, #16]	; (800e3d4 <USART3_IRQHandler+0x18>)
 800e3c2:	f7f6 fce5 	bl	8004d90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */
	SIMCOM_USART_IrqHandler(&huart3, &hdma_usart3_rx);
 800e3c6:	4904      	ldr	r1, [pc, #16]	; (800e3d8 <USART3_IRQHandler+0x1c>)
 800e3c8:	4802      	ldr	r0, [pc, #8]	; (800e3d4 <USART3_IRQHandler+0x18>)
 800e3ca:	f7fa fe3b 	bl	8009044 <SIMCOM_USART_IrqHandler>
  /* USER CODE END USART3_IRQn 1 */
}
 800e3ce:	bf00      	nop
 800e3d0:	bd80      	pop	{r7, pc}
 800e3d2:	bf00      	nop
 800e3d4:	200082bc 	.word	0x200082bc
 800e3d8:	2000825c 	.word	0x2000825c

0800e3dc <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800e3dc:	b580      	push	{r7, lr}
 800e3de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800e3e0:	4804      	ldr	r0, [pc, #16]	; (800e3f4 <UART4_IRQHandler+0x18>)
 800e3e2:	f7f6 fcd5 	bl	8004d90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */
	FINGER_USART_IrqHandler(&huart4, &hdma_uart4_rx);
 800e3e6:	4904      	ldr	r1, [pc, #16]	; (800e3f8 <UART4_IRQHandler+0x1c>)
 800e3e8:	4802      	ldr	r0, [pc, #8]	; (800e3f4 <UART4_IRQHandler+0x18>)
 800e3ea:	f7fa fb83 	bl	8008af4 <FINGER_USART_IrqHandler>
  /* USER CODE END UART4_IRQn 1 */
}
 800e3ee:	bf00      	nop
 800e3f0:	bd80      	pop	{r7, pc}
 800e3f2:	bf00      	nop
 800e3f4:	20008330 	.word	0x20008330
 800e3f8:	20008144 	.word	0x20008144

0800e3fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800e3fc:	b480      	push	{r7}
 800e3fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800e400:	4b16      	ldr	r3, [pc, #88]	; (800e45c <SystemInit+0x60>)
 800e402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e406:	4a15      	ldr	r2, [pc, #84]	; (800e45c <SystemInit+0x60>)
 800e408:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e40c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800e410:	4b13      	ldr	r3, [pc, #76]	; (800e460 <SystemInit+0x64>)
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	4a12      	ldr	r2, [pc, #72]	; (800e460 <SystemInit+0x64>)
 800e416:	f043 0301 	orr.w	r3, r3, #1
 800e41a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800e41c:	4b10      	ldr	r3, [pc, #64]	; (800e460 <SystemInit+0x64>)
 800e41e:	2200      	movs	r2, #0
 800e420:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800e422:	4b0f      	ldr	r3, [pc, #60]	; (800e460 <SystemInit+0x64>)
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	4a0e      	ldr	r2, [pc, #56]	; (800e460 <SystemInit+0x64>)
 800e428:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800e42c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e430:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800e432:	4b0b      	ldr	r3, [pc, #44]	; (800e460 <SystemInit+0x64>)
 800e434:	4a0b      	ldr	r2, [pc, #44]	; (800e464 <SystemInit+0x68>)
 800e436:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800e438:	4b09      	ldr	r3, [pc, #36]	; (800e460 <SystemInit+0x64>)
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	4a08      	ldr	r2, [pc, #32]	; (800e460 <SystemInit+0x64>)
 800e43e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e442:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800e444:	4b06      	ldr	r3, [pc, #24]	; (800e460 <SystemInit+0x64>)
 800e446:	2200      	movs	r2, #0
 800e448:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800e44a:	4b04      	ldr	r3, [pc, #16]	; (800e45c <SystemInit+0x60>)
 800e44c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800e450:	609a      	str	r2, [r3, #8]
#endif
}
 800e452:	bf00      	nop
 800e454:	46bd      	mov	sp, r7
 800e456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e45a:	4770      	bx	lr
 800e45c:	e000ed00 	.word	0xe000ed00
 800e460:	40023800 	.word	0x40023800
 800e464:	24003010 	.word	0x24003010

0800e468 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800e468:	f8df d034 	ldr.w	sp, [pc, #52]	; 800e4a0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800e46c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800e46e:	e003      	b.n	800e478 <LoopCopyDataInit>

0800e470 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800e470:	4b0c      	ldr	r3, [pc, #48]	; (800e4a4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800e472:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800e474:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800e476:	3104      	adds	r1, #4

0800e478 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800e478:	480b      	ldr	r0, [pc, #44]	; (800e4a8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800e47a:	4b0c      	ldr	r3, [pc, #48]	; (800e4ac <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800e47c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800e47e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800e480:	d3f6      	bcc.n	800e470 <CopyDataInit>
  ldr  r2, =_sbss
 800e482:	4a0b      	ldr	r2, [pc, #44]	; (800e4b0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800e484:	e002      	b.n	800e48c <LoopFillZerobss>

0800e486 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800e486:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800e488:	f842 3b04 	str.w	r3, [r2], #4

0800e48c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800e48c:	4b09      	ldr	r3, [pc, #36]	; (800e4b4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800e48e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800e490:	d3f9      	bcc.n	800e486 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800e492:	f7ff ffb3 	bl	800e3fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800e496:	f000 f81b 	bl	800e4d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800e49a:	f7fe fd49 	bl	800cf30 <main>
  bx  lr    
 800e49e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800e4a0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800e4a4:	08012760 	.word	0x08012760
  ldr  r0, =_sdata
 800e4a8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800e4ac:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 800e4b0:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 800e4b4:	20008428 	.word	0x20008428

0800e4b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800e4b8:	e7fe      	b.n	800e4b8 <ADC_IRQHandler>

0800e4ba <atoi>:
 800e4ba:	220a      	movs	r2, #10
 800e4bc:	2100      	movs	r1, #0
 800e4be:	f000 bfaf 	b.w	800f420 <strtol>
	...

0800e4c4 <__errno>:
 800e4c4:	4b01      	ldr	r3, [pc, #4]	; (800e4cc <__errno+0x8>)
 800e4c6:	6818      	ldr	r0, [r3, #0]
 800e4c8:	4770      	bx	lr
 800e4ca:	bf00      	nop
 800e4cc:	20000010 	.word	0x20000010

0800e4d0 <__libc_init_array>:
 800e4d0:	b570      	push	{r4, r5, r6, lr}
 800e4d2:	4e0d      	ldr	r6, [pc, #52]	; (800e508 <__libc_init_array+0x38>)
 800e4d4:	4c0d      	ldr	r4, [pc, #52]	; (800e50c <__libc_init_array+0x3c>)
 800e4d6:	1ba4      	subs	r4, r4, r6
 800e4d8:	10a4      	asrs	r4, r4, #2
 800e4da:	2500      	movs	r5, #0
 800e4dc:	42a5      	cmp	r5, r4
 800e4de:	d109      	bne.n	800e4f4 <__libc_init_array+0x24>
 800e4e0:	4e0b      	ldr	r6, [pc, #44]	; (800e510 <__libc_init_array+0x40>)
 800e4e2:	4c0c      	ldr	r4, [pc, #48]	; (800e514 <__libc_init_array+0x44>)
 800e4e4:	f003 fbf0 	bl	8011cc8 <_init>
 800e4e8:	1ba4      	subs	r4, r4, r6
 800e4ea:	10a4      	asrs	r4, r4, #2
 800e4ec:	2500      	movs	r5, #0
 800e4ee:	42a5      	cmp	r5, r4
 800e4f0:	d105      	bne.n	800e4fe <__libc_init_array+0x2e>
 800e4f2:	bd70      	pop	{r4, r5, r6, pc}
 800e4f4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e4f8:	4798      	blx	r3
 800e4fa:	3501      	adds	r5, #1
 800e4fc:	e7ee      	b.n	800e4dc <__libc_init_array+0xc>
 800e4fe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e502:	4798      	blx	r3
 800e504:	3501      	adds	r5, #1
 800e506:	e7f2      	b.n	800e4ee <__libc_init_array+0x1e>
 800e508:	08012758 	.word	0x08012758
 800e50c:	08012758 	.word	0x08012758
 800e510:	08012758 	.word	0x08012758
 800e514:	0801275c 	.word	0x0801275c

0800e518 <__itoa>:
 800e518:	1e93      	subs	r3, r2, #2
 800e51a:	2b22      	cmp	r3, #34	; 0x22
 800e51c:	b510      	push	{r4, lr}
 800e51e:	460c      	mov	r4, r1
 800e520:	d904      	bls.n	800e52c <__itoa+0x14>
 800e522:	2300      	movs	r3, #0
 800e524:	700b      	strb	r3, [r1, #0]
 800e526:	461c      	mov	r4, r3
 800e528:	4620      	mov	r0, r4
 800e52a:	bd10      	pop	{r4, pc}
 800e52c:	2a0a      	cmp	r2, #10
 800e52e:	d109      	bne.n	800e544 <__itoa+0x2c>
 800e530:	2800      	cmp	r0, #0
 800e532:	da07      	bge.n	800e544 <__itoa+0x2c>
 800e534:	232d      	movs	r3, #45	; 0x2d
 800e536:	700b      	strb	r3, [r1, #0]
 800e538:	4240      	negs	r0, r0
 800e53a:	2101      	movs	r1, #1
 800e53c:	4421      	add	r1, r4
 800e53e:	f000 ff85 	bl	800f44c <__utoa>
 800e542:	e7f1      	b.n	800e528 <__itoa+0x10>
 800e544:	2100      	movs	r1, #0
 800e546:	e7f9      	b.n	800e53c <__itoa+0x24>

0800e548 <itoa>:
 800e548:	f7ff bfe6 	b.w	800e518 <__itoa>

0800e54c <memcpy>:
 800e54c:	b510      	push	{r4, lr}
 800e54e:	1e43      	subs	r3, r0, #1
 800e550:	440a      	add	r2, r1
 800e552:	4291      	cmp	r1, r2
 800e554:	d100      	bne.n	800e558 <memcpy+0xc>
 800e556:	bd10      	pop	{r4, pc}
 800e558:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e55c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e560:	e7f7      	b.n	800e552 <memcpy+0x6>

0800e562 <memset>:
 800e562:	4402      	add	r2, r0
 800e564:	4603      	mov	r3, r0
 800e566:	4293      	cmp	r3, r2
 800e568:	d100      	bne.n	800e56c <memset+0xa>
 800e56a:	4770      	bx	lr
 800e56c:	f803 1b01 	strb.w	r1, [r3], #1
 800e570:	e7f9      	b.n	800e566 <memset+0x4>
	...

0800e574 <siprintf>:
 800e574:	b40e      	push	{r1, r2, r3}
 800e576:	b500      	push	{lr}
 800e578:	b09c      	sub	sp, #112	; 0x70
 800e57a:	ab1d      	add	r3, sp, #116	; 0x74
 800e57c:	9002      	str	r0, [sp, #8]
 800e57e:	9006      	str	r0, [sp, #24]
 800e580:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e584:	4809      	ldr	r0, [pc, #36]	; (800e5ac <siprintf+0x38>)
 800e586:	9107      	str	r1, [sp, #28]
 800e588:	9104      	str	r1, [sp, #16]
 800e58a:	4909      	ldr	r1, [pc, #36]	; (800e5b0 <siprintf+0x3c>)
 800e58c:	f853 2b04 	ldr.w	r2, [r3], #4
 800e590:	9105      	str	r1, [sp, #20]
 800e592:	6800      	ldr	r0, [r0, #0]
 800e594:	9301      	str	r3, [sp, #4]
 800e596:	a902      	add	r1, sp, #8
 800e598:	f001 ff94 	bl	80104c4 <_svfiprintf_r>
 800e59c:	9b02      	ldr	r3, [sp, #8]
 800e59e:	2200      	movs	r2, #0
 800e5a0:	701a      	strb	r2, [r3, #0]
 800e5a2:	b01c      	add	sp, #112	; 0x70
 800e5a4:	f85d eb04 	ldr.w	lr, [sp], #4
 800e5a8:	b003      	add	sp, #12
 800e5aa:	4770      	bx	lr
 800e5ac:	20000010 	.word	0x20000010
 800e5b0:	ffff0208 	.word	0xffff0208

0800e5b4 <strchr>:
 800e5b4:	b2c9      	uxtb	r1, r1
 800e5b6:	4603      	mov	r3, r0
 800e5b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e5bc:	b11a      	cbz	r2, 800e5c6 <strchr+0x12>
 800e5be:	428a      	cmp	r2, r1
 800e5c0:	d1f9      	bne.n	800e5b6 <strchr+0x2>
 800e5c2:	4618      	mov	r0, r3
 800e5c4:	4770      	bx	lr
 800e5c6:	2900      	cmp	r1, #0
 800e5c8:	bf18      	it	ne
 800e5ca:	2300      	movne	r3, #0
 800e5cc:	e7f9      	b.n	800e5c2 <strchr+0xe>

0800e5ce <strcpy>:
 800e5ce:	4603      	mov	r3, r0
 800e5d0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e5d4:	f803 2b01 	strb.w	r2, [r3], #1
 800e5d8:	2a00      	cmp	r2, #0
 800e5da:	d1f9      	bne.n	800e5d0 <strcpy+0x2>
 800e5dc:	4770      	bx	lr

0800e5de <strncmp>:
 800e5de:	b510      	push	{r4, lr}
 800e5e0:	b16a      	cbz	r2, 800e5fe <strncmp+0x20>
 800e5e2:	3901      	subs	r1, #1
 800e5e4:	1884      	adds	r4, r0, r2
 800e5e6:	f810 3b01 	ldrb.w	r3, [r0], #1
 800e5ea:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800e5ee:	4293      	cmp	r3, r2
 800e5f0:	d103      	bne.n	800e5fa <strncmp+0x1c>
 800e5f2:	42a0      	cmp	r0, r4
 800e5f4:	d001      	beq.n	800e5fa <strncmp+0x1c>
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d1f5      	bne.n	800e5e6 <strncmp+0x8>
 800e5fa:	1a98      	subs	r0, r3, r2
 800e5fc:	bd10      	pop	{r4, pc}
 800e5fe:	4610      	mov	r0, r2
 800e600:	e7fc      	b.n	800e5fc <strncmp+0x1e>

0800e602 <strncpy>:
 800e602:	b570      	push	{r4, r5, r6, lr}
 800e604:	3901      	subs	r1, #1
 800e606:	4604      	mov	r4, r0
 800e608:	b902      	cbnz	r2, 800e60c <strncpy+0xa>
 800e60a:	bd70      	pop	{r4, r5, r6, pc}
 800e60c:	4623      	mov	r3, r4
 800e60e:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800e612:	f803 5b01 	strb.w	r5, [r3], #1
 800e616:	1e56      	subs	r6, r2, #1
 800e618:	b92d      	cbnz	r5, 800e626 <strncpy+0x24>
 800e61a:	4414      	add	r4, r2
 800e61c:	42a3      	cmp	r3, r4
 800e61e:	d0f4      	beq.n	800e60a <strncpy+0x8>
 800e620:	f803 5b01 	strb.w	r5, [r3], #1
 800e624:	e7fa      	b.n	800e61c <strncpy+0x1a>
 800e626:	461c      	mov	r4, r3
 800e628:	4632      	mov	r2, r6
 800e62a:	e7ed      	b.n	800e608 <strncpy+0x6>

0800e62c <strstr>:
 800e62c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e62e:	7803      	ldrb	r3, [r0, #0]
 800e630:	b17b      	cbz	r3, 800e652 <strstr+0x26>
 800e632:	4604      	mov	r4, r0
 800e634:	7823      	ldrb	r3, [r4, #0]
 800e636:	4620      	mov	r0, r4
 800e638:	1c66      	adds	r6, r4, #1
 800e63a:	b17b      	cbz	r3, 800e65c <strstr+0x30>
 800e63c:	1e4a      	subs	r2, r1, #1
 800e63e:	1e63      	subs	r3, r4, #1
 800e640:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800e644:	b14d      	cbz	r5, 800e65a <strstr+0x2e>
 800e646:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800e64a:	42af      	cmp	r7, r5
 800e64c:	4634      	mov	r4, r6
 800e64e:	d0f7      	beq.n	800e640 <strstr+0x14>
 800e650:	e7f0      	b.n	800e634 <strstr+0x8>
 800e652:	780b      	ldrb	r3, [r1, #0]
 800e654:	2b00      	cmp	r3, #0
 800e656:	bf18      	it	ne
 800e658:	2000      	movne	r0, #0
 800e65a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e65c:	4618      	mov	r0, r3
 800e65e:	e7fc      	b.n	800e65a <strstr+0x2e>

0800e660 <sulp>:
 800e660:	b570      	push	{r4, r5, r6, lr}
 800e662:	4604      	mov	r4, r0
 800e664:	460d      	mov	r5, r1
 800e666:	ec45 4b10 	vmov	d0, r4, r5
 800e66a:	4616      	mov	r6, r2
 800e66c:	f001 fd34 	bl	80100d8 <__ulp>
 800e670:	ec51 0b10 	vmov	r0, r1, d0
 800e674:	b17e      	cbz	r6, 800e696 <sulp+0x36>
 800e676:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e67a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e67e:	2b00      	cmp	r3, #0
 800e680:	dd09      	ble.n	800e696 <sulp+0x36>
 800e682:	051b      	lsls	r3, r3, #20
 800e684:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800e688:	2400      	movs	r4, #0
 800e68a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800e68e:	4622      	mov	r2, r4
 800e690:	462b      	mov	r3, r5
 800e692:	f7f1 ffc1 	bl	8000618 <__aeabi_dmul>
 800e696:	bd70      	pop	{r4, r5, r6, pc}

0800e698 <_strtod_l>:
 800e698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e69c:	461f      	mov	r7, r3
 800e69e:	b0a1      	sub	sp, #132	; 0x84
 800e6a0:	2300      	movs	r3, #0
 800e6a2:	4681      	mov	r9, r0
 800e6a4:	4638      	mov	r0, r7
 800e6a6:	460e      	mov	r6, r1
 800e6a8:	9217      	str	r2, [sp, #92]	; 0x5c
 800e6aa:	931c      	str	r3, [sp, #112]	; 0x70
 800e6ac:	f001 fa35 	bl	800fb1a <__localeconv_l>
 800e6b0:	4680      	mov	r8, r0
 800e6b2:	6800      	ldr	r0, [r0, #0]
 800e6b4:	f7f1 fd96 	bl	80001e4 <strlen>
 800e6b8:	f04f 0a00 	mov.w	sl, #0
 800e6bc:	4604      	mov	r4, r0
 800e6be:	f04f 0b00 	mov.w	fp, #0
 800e6c2:	961b      	str	r6, [sp, #108]	; 0x6c
 800e6c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e6c6:	781a      	ldrb	r2, [r3, #0]
 800e6c8:	2a0d      	cmp	r2, #13
 800e6ca:	d832      	bhi.n	800e732 <_strtod_l+0x9a>
 800e6cc:	2a09      	cmp	r2, #9
 800e6ce:	d236      	bcs.n	800e73e <_strtod_l+0xa6>
 800e6d0:	2a00      	cmp	r2, #0
 800e6d2:	d03e      	beq.n	800e752 <_strtod_l+0xba>
 800e6d4:	2300      	movs	r3, #0
 800e6d6:	930d      	str	r3, [sp, #52]	; 0x34
 800e6d8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800e6da:	782b      	ldrb	r3, [r5, #0]
 800e6dc:	2b30      	cmp	r3, #48	; 0x30
 800e6de:	f040 80ac 	bne.w	800e83a <_strtod_l+0x1a2>
 800e6e2:	786b      	ldrb	r3, [r5, #1]
 800e6e4:	2b58      	cmp	r3, #88	; 0x58
 800e6e6:	d001      	beq.n	800e6ec <_strtod_l+0x54>
 800e6e8:	2b78      	cmp	r3, #120	; 0x78
 800e6ea:	d167      	bne.n	800e7bc <_strtod_l+0x124>
 800e6ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e6ee:	9301      	str	r3, [sp, #4]
 800e6f0:	ab1c      	add	r3, sp, #112	; 0x70
 800e6f2:	9300      	str	r3, [sp, #0]
 800e6f4:	9702      	str	r7, [sp, #8]
 800e6f6:	ab1d      	add	r3, sp, #116	; 0x74
 800e6f8:	4a88      	ldr	r2, [pc, #544]	; (800e91c <_strtod_l+0x284>)
 800e6fa:	a91b      	add	r1, sp, #108	; 0x6c
 800e6fc:	4648      	mov	r0, r9
 800e6fe:	f000 ff32 	bl	800f566 <__gethex>
 800e702:	f010 0407 	ands.w	r4, r0, #7
 800e706:	4606      	mov	r6, r0
 800e708:	d005      	beq.n	800e716 <_strtod_l+0x7e>
 800e70a:	2c06      	cmp	r4, #6
 800e70c:	d12b      	bne.n	800e766 <_strtod_l+0xce>
 800e70e:	3501      	adds	r5, #1
 800e710:	2300      	movs	r3, #0
 800e712:	951b      	str	r5, [sp, #108]	; 0x6c
 800e714:	930d      	str	r3, [sp, #52]	; 0x34
 800e716:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e718:	2b00      	cmp	r3, #0
 800e71a:	f040 859a 	bne.w	800f252 <_strtod_l+0xbba>
 800e71e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e720:	b1e3      	cbz	r3, 800e75c <_strtod_l+0xc4>
 800e722:	4652      	mov	r2, sl
 800e724:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800e728:	ec43 2b10 	vmov	d0, r2, r3
 800e72c:	b021      	add	sp, #132	; 0x84
 800e72e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e732:	2a2b      	cmp	r2, #43	; 0x2b
 800e734:	d015      	beq.n	800e762 <_strtod_l+0xca>
 800e736:	2a2d      	cmp	r2, #45	; 0x2d
 800e738:	d004      	beq.n	800e744 <_strtod_l+0xac>
 800e73a:	2a20      	cmp	r2, #32
 800e73c:	d1ca      	bne.n	800e6d4 <_strtod_l+0x3c>
 800e73e:	3301      	adds	r3, #1
 800e740:	931b      	str	r3, [sp, #108]	; 0x6c
 800e742:	e7bf      	b.n	800e6c4 <_strtod_l+0x2c>
 800e744:	2201      	movs	r2, #1
 800e746:	920d      	str	r2, [sp, #52]	; 0x34
 800e748:	1c5a      	adds	r2, r3, #1
 800e74a:	921b      	str	r2, [sp, #108]	; 0x6c
 800e74c:	785b      	ldrb	r3, [r3, #1]
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d1c2      	bne.n	800e6d8 <_strtod_l+0x40>
 800e752:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e754:	961b      	str	r6, [sp, #108]	; 0x6c
 800e756:	2b00      	cmp	r3, #0
 800e758:	f040 8579 	bne.w	800f24e <_strtod_l+0xbb6>
 800e75c:	4652      	mov	r2, sl
 800e75e:	465b      	mov	r3, fp
 800e760:	e7e2      	b.n	800e728 <_strtod_l+0x90>
 800e762:	2200      	movs	r2, #0
 800e764:	e7ef      	b.n	800e746 <_strtod_l+0xae>
 800e766:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800e768:	b13a      	cbz	r2, 800e77a <_strtod_l+0xe2>
 800e76a:	2135      	movs	r1, #53	; 0x35
 800e76c:	a81e      	add	r0, sp, #120	; 0x78
 800e76e:	f001 fdab 	bl	80102c8 <__copybits>
 800e772:	991c      	ldr	r1, [sp, #112]	; 0x70
 800e774:	4648      	mov	r0, r9
 800e776:	f001 fa18 	bl	800fbaa <_Bfree>
 800e77a:	3c01      	subs	r4, #1
 800e77c:	2c04      	cmp	r4, #4
 800e77e:	d806      	bhi.n	800e78e <_strtod_l+0xf6>
 800e780:	e8df f004 	tbb	[pc, r4]
 800e784:	1714030a 	.word	0x1714030a
 800e788:	0a          	.byte	0x0a
 800e789:	00          	.byte	0x00
 800e78a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800e78e:	0730      	lsls	r0, r6, #28
 800e790:	d5c1      	bpl.n	800e716 <_strtod_l+0x7e>
 800e792:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800e796:	e7be      	b.n	800e716 <_strtod_l+0x7e>
 800e798:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800e79c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800e79e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800e7a2:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800e7a6:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800e7aa:	e7f0      	b.n	800e78e <_strtod_l+0xf6>
 800e7ac:	f8df b170 	ldr.w	fp, [pc, #368]	; 800e920 <_strtod_l+0x288>
 800e7b0:	e7ed      	b.n	800e78e <_strtod_l+0xf6>
 800e7b2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800e7b6:	f04f 3aff 	mov.w	sl, #4294967295
 800e7ba:	e7e8      	b.n	800e78e <_strtod_l+0xf6>
 800e7bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e7be:	1c5a      	adds	r2, r3, #1
 800e7c0:	921b      	str	r2, [sp, #108]	; 0x6c
 800e7c2:	785b      	ldrb	r3, [r3, #1]
 800e7c4:	2b30      	cmp	r3, #48	; 0x30
 800e7c6:	d0f9      	beq.n	800e7bc <_strtod_l+0x124>
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d0a4      	beq.n	800e716 <_strtod_l+0x7e>
 800e7cc:	2301      	movs	r3, #1
 800e7ce:	2500      	movs	r5, #0
 800e7d0:	9306      	str	r3, [sp, #24]
 800e7d2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e7d4:	9308      	str	r3, [sp, #32]
 800e7d6:	9507      	str	r5, [sp, #28]
 800e7d8:	9505      	str	r5, [sp, #20]
 800e7da:	220a      	movs	r2, #10
 800e7dc:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800e7de:	7807      	ldrb	r7, [r0, #0]
 800e7e0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800e7e4:	b2d9      	uxtb	r1, r3
 800e7e6:	2909      	cmp	r1, #9
 800e7e8:	d929      	bls.n	800e83e <_strtod_l+0x1a6>
 800e7ea:	4622      	mov	r2, r4
 800e7ec:	f8d8 1000 	ldr.w	r1, [r8]
 800e7f0:	f7ff fef5 	bl	800e5de <strncmp>
 800e7f4:	2800      	cmp	r0, #0
 800e7f6:	d031      	beq.n	800e85c <_strtod_l+0x1c4>
 800e7f8:	2000      	movs	r0, #0
 800e7fa:	9c05      	ldr	r4, [sp, #20]
 800e7fc:	9004      	str	r0, [sp, #16]
 800e7fe:	463b      	mov	r3, r7
 800e800:	4602      	mov	r2, r0
 800e802:	2b65      	cmp	r3, #101	; 0x65
 800e804:	d001      	beq.n	800e80a <_strtod_l+0x172>
 800e806:	2b45      	cmp	r3, #69	; 0x45
 800e808:	d114      	bne.n	800e834 <_strtod_l+0x19c>
 800e80a:	b924      	cbnz	r4, 800e816 <_strtod_l+0x17e>
 800e80c:	b910      	cbnz	r0, 800e814 <_strtod_l+0x17c>
 800e80e:	9b06      	ldr	r3, [sp, #24]
 800e810:	2b00      	cmp	r3, #0
 800e812:	d09e      	beq.n	800e752 <_strtod_l+0xba>
 800e814:	2400      	movs	r4, #0
 800e816:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800e818:	1c73      	adds	r3, r6, #1
 800e81a:	931b      	str	r3, [sp, #108]	; 0x6c
 800e81c:	7873      	ldrb	r3, [r6, #1]
 800e81e:	2b2b      	cmp	r3, #43	; 0x2b
 800e820:	d078      	beq.n	800e914 <_strtod_l+0x27c>
 800e822:	2b2d      	cmp	r3, #45	; 0x2d
 800e824:	d070      	beq.n	800e908 <_strtod_l+0x270>
 800e826:	f04f 0c00 	mov.w	ip, #0
 800e82a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800e82e:	2f09      	cmp	r7, #9
 800e830:	d97c      	bls.n	800e92c <_strtod_l+0x294>
 800e832:	961b      	str	r6, [sp, #108]	; 0x6c
 800e834:	f04f 0e00 	mov.w	lr, #0
 800e838:	e09a      	b.n	800e970 <_strtod_l+0x2d8>
 800e83a:	2300      	movs	r3, #0
 800e83c:	e7c7      	b.n	800e7ce <_strtod_l+0x136>
 800e83e:	9905      	ldr	r1, [sp, #20]
 800e840:	2908      	cmp	r1, #8
 800e842:	bfdd      	ittte	le
 800e844:	9907      	ldrle	r1, [sp, #28]
 800e846:	fb02 3301 	mlale	r3, r2, r1, r3
 800e84a:	9307      	strle	r3, [sp, #28]
 800e84c:	fb02 3505 	mlagt	r5, r2, r5, r3
 800e850:	9b05      	ldr	r3, [sp, #20]
 800e852:	3001      	adds	r0, #1
 800e854:	3301      	adds	r3, #1
 800e856:	9305      	str	r3, [sp, #20]
 800e858:	901b      	str	r0, [sp, #108]	; 0x6c
 800e85a:	e7bf      	b.n	800e7dc <_strtod_l+0x144>
 800e85c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e85e:	191a      	adds	r2, r3, r4
 800e860:	921b      	str	r2, [sp, #108]	; 0x6c
 800e862:	9a05      	ldr	r2, [sp, #20]
 800e864:	5d1b      	ldrb	r3, [r3, r4]
 800e866:	2a00      	cmp	r2, #0
 800e868:	d037      	beq.n	800e8da <_strtod_l+0x242>
 800e86a:	9c05      	ldr	r4, [sp, #20]
 800e86c:	4602      	mov	r2, r0
 800e86e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800e872:	2909      	cmp	r1, #9
 800e874:	d913      	bls.n	800e89e <_strtod_l+0x206>
 800e876:	2101      	movs	r1, #1
 800e878:	9104      	str	r1, [sp, #16]
 800e87a:	e7c2      	b.n	800e802 <_strtod_l+0x16a>
 800e87c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e87e:	1c5a      	adds	r2, r3, #1
 800e880:	921b      	str	r2, [sp, #108]	; 0x6c
 800e882:	785b      	ldrb	r3, [r3, #1]
 800e884:	3001      	adds	r0, #1
 800e886:	2b30      	cmp	r3, #48	; 0x30
 800e888:	d0f8      	beq.n	800e87c <_strtod_l+0x1e4>
 800e88a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800e88e:	2a08      	cmp	r2, #8
 800e890:	f200 84e4 	bhi.w	800f25c <_strtod_l+0xbc4>
 800e894:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800e896:	9208      	str	r2, [sp, #32]
 800e898:	4602      	mov	r2, r0
 800e89a:	2000      	movs	r0, #0
 800e89c:	4604      	mov	r4, r0
 800e89e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800e8a2:	f100 0101 	add.w	r1, r0, #1
 800e8a6:	d012      	beq.n	800e8ce <_strtod_l+0x236>
 800e8a8:	440a      	add	r2, r1
 800e8aa:	eb00 0c04 	add.w	ip, r0, r4
 800e8ae:	4621      	mov	r1, r4
 800e8b0:	270a      	movs	r7, #10
 800e8b2:	458c      	cmp	ip, r1
 800e8b4:	d113      	bne.n	800e8de <_strtod_l+0x246>
 800e8b6:	1821      	adds	r1, r4, r0
 800e8b8:	2908      	cmp	r1, #8
 800e8ba:	f104 0401 	add.w	r4, r4, #1
 800e8be:	4404      	add	r4, r0
 800e8c0:	dc19      	bgt.n	800e8f6 <_strtod_l+0x25e>
 800e8c2:	9b07      	ldr	r3, [sp, #28]
 800e8c4:	210a      	movs	r1, #10
 800e8c6:	fb01 e303 	mla	r3, r1, r3, lr
 800e8ca:	9307      	str	r3, [sp, #28]
 800e8cc:	2100      	movs	r1, #0
 800e8ce:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e8d0:	1c58      	adds	r0, r3, #1
 800e8d2:	901b      	str	r0, [sp, #108]	; 0x6c
 800e8d4:	785b      	ldrb	r3, [r3, #1]
 800e8d6:	4608      	mov	r0, r1
 800e8d8:	e7c9      	b.n	800e86e <_strtod_l+0x1d6>
 800e8da:	9805      	ldr	r0, [sp, #20]
 800e8dc:	e7d3      	b.n	800e886 <_strtod_l+0x1ee>
 800e8de:	2908      	cmp	r1, #8
 800e8e0:	f101 0101 	add.w	r1, r1, #1
 800e8e4:	dc03      	bgt.n	800e8ee <_strtod_l+0x256>
 800e8e6:	9b07      	ldr	r3, [sp, #28]
 800e8e8:	437b      	muls	r3, r7
 800e8ea:	9307      	str	r3, [sp, #28]
 800e8ec:	e7e1      	b.n	800e8b2 <_strtod_l+0x21a>
 800e8ee:	2910      	cmp	r1, #16
 800e8f0:	bfd8      	it	le
 800e8f2:	437d      	mulle	r5, r7
 800e8f4:	e7dd      	b.n	800e8b2 <_strtod_l+0x21a>
 800e8f6:	2c10      	cmp	r4, #16
 800e8f8:	bfdc      	itt	le
 800e8fa:	210a      	movle	r1, #10
 800e8fc:	fb01 e505 	mlale	r5, r1, r5, lr
 800e900:	e7e4      	b.n	800e8cc <_strtod_l+0x234>
 800e902:	2301      	movs	r3, #1
 800e904:	9304      	str	r3, [sp, #16]
 800e906:	e781      	b.n	800e80c <_strtod_l+0x174>
 800e908:	f04f 0c01 	mov.w	ip, #1
 800e90c:	1cb3      	adds	r3, r6, #2
 800e90e:	931b      	str	r3, [sp, #108]	; 0x6c
 800e910:	78b3      	ldrb	r3, [r6, #2]
 800e912:	e78a      	b.n	800e82a <_strtod_l+0x192>
 800e914:	f04f 0c00 	mov.w	ip, #0
 800e918:	e7f8      	b.n	800e90c <_strtod_l+0x274>
 800e91a:	bf00      	nop
 800e91c:	08012450 	.word	0x08012450
 800e920:	7ff00000 	.word	0x7ff00000
 800e924:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e926:	1c5f      	adds	r7, r3, #1
 800e928:	971b      	str	r7, [sp, #108]	; 0x6c
 800e92a:	785b      	ldrb	r3, [r3, #1]
 800e92c:	2b30      	cmp	r3, #48	; 0x30
 800e92e:	d0f9      	beq.n	800e924 <_strtod_l+0x28c>
 800e930:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800e934:	2f08      	cmp	r7, #8
 800e936:	f63f af7d 	bhi.w	800e834 <_strtod_l+0x19c>
 800e93a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800e93e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e940:	930a      	str	r3, [sp, #40]	; 0x28
 800e942:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e944:	1c5f      	adds	r7, r3, #1
 800e946:	971b      	str	r7, [sp, #108]	; 0x6c
 800e948:	785b      	ldrb	r3, [r3, #1]
 800e94a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800e94e:	f1b8 0f09 	cmp.w	r8, #9
 800e952:	d937      	bls.n	800e9c4 <_strtod_l+0x32c>
 800e954:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e956:	1a7f      	subs	r7, r7, r1
 800e958:	2f08      	cmp	r7, #8
 800e95a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800e95e:	dc37      	bgt.n	800e9d0 <_strtod_l+0x338>
 800e960:	45be      	cmp	lr, r7
 800e962:	bfa8      	it	ge
 800e964:	46be      	movge	lr, r7
 800e966:	f1bc 0f00 	cmp.w	ip, #0
 800e96a:	d001      	beq.n	800e970 <_strtod_l+0x2d8>
 800e96c:	f1ce 0e00 	rsb	lr, lr, #0
 800e970:	2c00      	cmp	r4, #0
 800e972:	d151      	bne.n	800ea18 <_strtod_l+0x380>
 800e974:	2800      	cmp	r0, #0
 800e976:	f47f aece 	bne.w	800e716 <_strtod_l+0x7e>
 800e97a:	9a06      	ldr	r2, [sp, #24]
 800e97c:	2a00      	cmp	r2, #0
 800e97e:	f47f aeca 	bne.w	800e716 <_strtod_l+0x7e>
 800e982:	9a04      	ldr	r2, [sp, #16]
 800e984:	2a00      	cmp	r2, #0
 800e986:	f47f aee4 	bne.w	800e752 <_strtod_l+0xba>
 800e98a:	2b4e      	cmp	r3, #78	; 0x4e
 800e98c:	d027      	beq.n	800e9de <_strtod_l+0x346>
 800e98e:	dc21      	bgt.n	800e9d4 <_strtod_l+0x33c>
 800e990:	2b49      	cmp	r3, #73	; 0x49
 800e992:	f47f aede 	bne.w	800e752 <_strtod_l+0xba>
 800e996:	49a0      	ldr	r1, [pc, #640]	; (800ec18 <_strtod_l+0x580>)
 800e998:	a81b      	add	r0, sp, #108	; 0x6c
 800e99a:	f001 f817 	bl	800f9cc <__match>
 800e99e:	2800      	cmp	r0, #0
 800e9a0:	f43f aed7 	beq.w	800e752 <_strtod_l+0xba>
 800e9a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e9a6:	499d      	ldr	r1, [pc, #628]	; (800ec1c <_strtod_l+0x584>)
 800e9a8:	3b01      	subs	r3, #1
 800e9aa:	a81b      	add	r0, sp, #108	; 0x6c
 800e9ac:	931b      	str	r3, [sp, #108]	; 0x6c
 800e9ae:	f001 f80d 	bl	800f9cc <__match>
 800e9b2:	b910      	cbnz	r0, 800e9ba <_strtod_l+0x322>
 800e9b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e9b6:	3301      	adds	r3, #1
 800e9b8:	931b      	str	r3, [sp, #108]	; 0x6c
 800e9ba:	f8df b274 	ldr.w	fp, [pc, #628]	; 800ec30 <_strtod_l+0x598>
 800e9be:	f04f 0a00 	mov.w	sl, #0
 800e9c2:	e6a8      	b.n	800e716 <_strtod_l+0x7e>
 800e9c4:	210a      	movs	r1, #10
 800e9c6:	fb01 3e0e 	mla	lr, r1, lr, r3
 800e9ca:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800e9ce:	e7b8      	b.n	800e942 <_strtod_l+0x2aa>
 800e9d0:	46be      	mov	lr, r7
 800e9d2:	e7c8      	b.n	800e966 <_strtod_l+0x2ce>
 800e9d4:	2b69      	cmp	r3, #105	; 0x69
 800e9d6:	d0de      	beq.n	800e996 <_strtod_l+0x2fe>
 800e9d8:	2b6e      	cmp	r3, #110	; 0x6e
 800e9da:	f47f aeba 	bne.w	800e752 <_strtod_l+0xba>
 800e9de:	4990      	ldr	r1, [pc, #576]	; (800ec20 <_strtod_l+0x588>)
 800e9e0:	a81b      	add	r0, sp, #108	; 0x6c
 800e9e2:	f000 fff3 	bl	800f9cc <__match>
 800e9e6:	2800      	cmp	r0, #0
 800e9e8:	f43f aeb3 	beq.w	800e752 <_strtod_l+0xba>
 800e9ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e9ee:	781b      	ldrb	r3, [r3, #0]
 800e9f0:	2b28      	cmp	r3, #40	; 0x28
 800e9f2:	d10e      	bne.n	800ea12 <_strtod_l+0x37a>
 800e9f4:	aa1e      	add	r2, sp, #120	; 0x78
 800e9f6:	498b      	ldr	r1, [pc, #556]	; (800ec24 <_strtod_l+0x58c>)
 800e9f8:	a81b      	add	r0, sp, #108	; 0x6c
 800e9fa:	f000 fffb 	bl	800f9f4 <__hexnan>
 800e9fe:	2805      	cmp	r0, #5
 800ea00:	d107      	bne.n	800ea12 <_strtod_l+0x37a>
 800ea02:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ea04:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 800ea08:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800ea0c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800ea10:	e681      	b.n	800e716 <_strtod_l+0x7e>
 800ea12:	f8df b224 	ldr.w	fp, [pc, #548]	; 800ec38 <_strtod_l+0x5a0>
 800ea16:	e7d2      	b.n	800e9be <_strtod_l+0x326>
 800ea18:	ebae 0302 	sub.w	r3, lr, r2
 800ea1c:	9306      	str	r3, [sp, #24]
 800ea1e:	9b05      	ldr	r3, [sp, #20]
 800ea20:	9807      	ldr	r0, [sp, #28]
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	bf08      	it	eq
 800ea26:	4623      	moveq	r3, r4
 800ea28:	2c10      	cmp	r4, #16
 800ea2a:	9305      	str	r3, [sp, #20]
 800ea2c:	46a0      	mov	r8, r4
 800ea2e:	bfa8      	it	ge
 800ea30:	f04f 0810 	movge.w	r8, #16
 800ea34:	f7f1 fd76 	bl	8000524 <__aeabi_ui2d>
 800ea38:	2c09      	cmp	r4, #9
 800ea3a:	4682      	mov	sl, r0
 800ea3c:	468b      	mov	fp, r1
 800ea3e:	dc13      	bgt.n	800ea68 <_strtod_l+0x3d0>
 800ea40:	9b06      	ldr	r3, [sp, #24]
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	f43f ae67 	beq.w	800e716 <_strtod_l+0x7e>
 800ea48:	9b06      	ldr	r3, [sp, #24]
 800ea4a:	dd7a      	ble.n	800eb42 <_strtod_l+0x4aa>
 800ea4c:	2b16      	cmp	r3, #22
 800ea4e:	dc61      	bgt.n	800eb14 <_strtod_l+0x47c>
 800ea50:	4a75      	ldr	r2, [pc, #468]	; (800ec28 <_strtod_l+0x590>)
 800ea52:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800ea56:	e9de 0100 	ldrd	r0, r1, [lr]
 800ea5a:	4652      	mov	r2, sl
 800ea5c:	465b      	mov	r3, fp
 800ea5e:	f7f1 fddb 	bl	8000618 <__aeabi_dmul>
 800ea62:	4682      	mov	sl, r0
 800ea64:	468b      	mov	fp, r1
 800ea66:	e656      	b.n	800e716 <_strtod_l+0x7e>
 800ea68:	4b6f      	ldr	r3, [pc, #444]	; (800ec28 <_strtod_l+0x590>)
 800ea6a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800ea6e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800ea72:	f7f1 fdd1 	bl	8000618 <__aeabi_dmul>
 800ea76:	4606      	mov	r6, r0
 800ea78:	4628      	mov	r0, r5
 800ea7a:	460f      	mov	r7, r1
 800ea7c:	f7f1 fd52 	bl	8000524 <__aeabi_ui2d>
 800ea80:	4602      	mov	r2, r0
 800ea82:	460b      	mov	r3, r1
 800ea84:	4630      	mov	r0, r6
 800ea86:	4639      	mov	r1, r7
 800ea88:	f7f1 fc10 	bl	80002ac <__adddf3>
 800ea8c:	2c0f      	cmp	r4, #15
 800ea8e:	4682      	mov	sl, r0
 800ea90:	468b      	mov	fp, r1
 800ea92:	ddd5      	ble.n	800ea40 <_strtod_l+0x3a8>
 800ea94:	9b06      	ldr	r3, [sp, #24]
 800ea96:	eba4 0808 	sub.w	r8, r4, r8
 800ea9a:	4498      	add	r8, r3
 800ea9c:	f1b8 0f00 	cmp.w	r8, #0
 800eaa0:	f340 8096 	ble.w	800ebd0 <_strtod_l+0x538>
 800eaa4:	f018 030f 	ands.w	r3, r8, #15
 800eaa8:	d00a      	beq.n	800eac0 <_strtod_l+0x428>
 800eaaa:	495f      	ldr	r1, [pc, #380]	; (800ec28 <_strtod_l+0x590>)
 800eaac:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800eab0:	4652      	mov	r2, sl
 800eab2:	465b      	mov	r3, fp
 800eab4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800eab8:	f7f1 fdae 	bl	8000618 <__aeabi_dmul>
 800eabc:	4682      	mov	sl, r0
 800eabe:	468b      	mov	fp, r1
 800eac0:	f038 080f 	bics.w	r8, r8, #15
 800eac4:	d073      	beq.n	800ebae <_strtod_l+0x516>
 800eac6:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800eaca:	dd47      	ble.n	800eb5c <_strtod_l+0x4c4>
 800eacc:	2400      	movs	r4, #0
 800eace:	46a0      	mov	r8, r4
 800ead0:	9407      	str	r4, [sp, #28]
 800ead2:	9405      	str	r4, [sp, #20]
 800ead4:	2322      	movs	r3, #34	; 0x22
 800ead6:	f8df b158 	ldr.w	fp, [pc, #344]	; 800ec30 <_strtod_l+0x598>
 800eada:	f8c9 3000 	str.w	r3, [r9]
 800eade:	f04f 0a00 	mov.w	sl, #0
 800eae2:	9b07      	ldr	r3, [sp, #28]
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	f43f ae16 	beq.w	800e716 <_strtod_l+0x7e>
 800eaea:	991c      	ldr	r1, [sp, #112]	; 0x70
 800eaec:	4648      	mov	r0, r9
 800eaee:	f001 f85c 	bl	800fbaa <_Bfree>
 800eaf2:	9905      	ldr	r1, [sp, #20]
 800eaf4:	4648      	mov	r0, r9
 800eaf6:	f001 f858 	bl	800fbaa <_Bfree>
 800eafa:	4641      	mov	r1, r8
 800eafc:	4648      	mov	r0, r9
 800eafe:	f001 f854 	bl	800fbaa <_Bfree>
 800eb02:	9907      	ldr	r1, [sp, #28]
 800eb04:	4648      	mov	r0, r9
 800eb06:	f001 f850 	bl	800fbaa <_Bfree>
 800eb0a:	4621      	mov	r1, r4
 800eb0c:	4648      	mov	r0, r9
 800eb0e:	f001 f84c 	bl	800fbaa <_Bfree>
 800eb12:	e600      	b.n	800e716 <_strtod_l+0x7e>
 800eb14:	9a06      	ldr	r2, [sp, #24]
 800eb16:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800eb1a:	4293      	cmp	r3, r2
 800eb1c:	dbba      	blt.n	800ea94 <_strtod_l+0x3fc>
 800eb1e:	4d42      	ldr	r5, [pc, #264]	; (800ec28 <_strtod_l+0x590>)
 800eb20:	f1c4 040f 	rsb	r4, r4, #15
 800eb24:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800eb28:	4652      	mov	r2, sl
 800eb2a:	465b      	mov	r3, fp
 800eb2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800eb30:	f7f1 fd72 	bl	8000618 <__aeabi_dmul>
 800eb34:	9b06      	ldr	r3, [sp, #24]
 800eb36:	1b1c      	subs	r4, r3, r4
 800eb38:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800eb3c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800eb40:	e78d      	b.n	800ea5e <_strtod_l+0x3c6>
 800eb42:	f113 0f16 	cmn.w	r3, #22
 800eb46:	dba5      	blt.n	800ea94 <_strtod_l+0x3fc>
 800eb48:	4a37      	ldr	r2, [pc, #220]	; (800ec28 <_strtod_l+0x590>)
 800eb4a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800eb4e:	e9d2 2300 	ldrd	r2, r3, [r2]
 800eb52:	4650      	mov	r0, sl
 800eb54:	4659      	mov	r1, fp
 800eb56:	f7f1 fe89 	bl	800086c <__aeabi_ddiv>
 800eb5a:	e782      	b.n	800ea62 <_strtod_l+0x3ca>
 800eb5c:	2300      	movs	r3, #0
 800eb5e:	4e33      	ldr	r6, [pc, #204]	; (800ec2c <_strtod_l+0x594>)
 800eb60:	ea4f 1828 	mov.w	r8, r8, asr #4
 800eb64:	4650      	mov	r0, sl
 800eb66:	4659      	mov	r1, fp
 800eb68:	461d      	mov	r5, r3
 800eb6a:	f1b8 0f01 	cmp.w	r8, #1
 800eb6e:	dc21      	bgt.n	800ebb4 <_strtod_l+0x51c>
 800eb70:	b10b      	cbz	r3, 800eb76 <_strtod_l+0x4de>
 800eb72:	4682      	mov	sl, r0
 800eb74:	468b      	mov	fp, r1
 800eb76:	4b2d      	ldr	r3, [pc, #180]	; (800ec2c <_strtod_l+0x594>)
 800eb78:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800eb7c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800eb80:	4652      	mov	r2, sl
 800eb82:	465b      	mov	r3, fp
 800eb84:	e9d5 0100 	ldrd	r0, r1, [r5]
 800eb88:	f7f1 fd46 	bl	8000618 <__aeabi_dmul>
 800eb8c:	4b28      	ldr	r3, [pc, #160]	; (800ec30 <_strtod_l+0x598>)
 800eb8e:	460a      	mov	r2, r1
 800eb90:	400b      	ands	r3, r1
 800eb92:	4928      	ldr	r1, [pc, #160]	; (800ec34 <_strtod_l+0x59c>)
 800eb94:	428b      	cmp	r3, r1
 800eb96:	4682      	mov	sl, r0
 800eb98:	d898      	bhi.n	800eacc <_strtod_l+0x434>
 800eb9a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800eb9e:	428b      	cmp	r3, r1
 800eba0:	bf86      	itte	hi
 800eba2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800ec3c <_strtod_l+0x5a4>
 800eba6:	f04f 3aff 	movhi.w	sl, #4294967295
 800ebaa:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800ebae:	2300      	movs	r3, #0
 800ebb0:	9304      	str	r3, [sp, #16]
 800ebb2:	e077      	b.n	800eca4 <_strtod_l+0x60c>
 800ebb4:	f018 0f01 	tst.w	r8, #1
 800ebb8:	d006      	beq.n	800ebc8 <_strtod_l+0x530>
 800ebba:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800ebbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebc2:	f7f1 fd29 	bl	8000618 <__aeabi_dmul>
 800ebc6:	2301      	movs	r3, #1
 800ebc8:	3501      	adds	r5, #1
 800ebca:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ebce:	e7cc      	b.n	800eb6a <_strtod_l+0x4d2>
 800ebd0:	d0ed      	beq.n	800ebae <_strtod_l+0x516>
 800ebd2:	f1c8 0800 	rsb	r8, r8, #0
 800ebd6:	f018 020f 	ands.w	r2, r8, #15
 800ebda:	d00a      	beq.n	800ebf2 <_strtod_l+0x55a>
 800ebdc:	4b12      	ldr	r3, [pc, #72]	; (800ec28 <_strtod_l+0x590>)
 800ebde:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ebe2:	4650      	mov	r0, sl
 800ebe4:	4659      	mov	r1, fp
 800ebe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebea:	f7f1 fe3f 	bl	800086c <__aeabi_ddiv>
 800ebee:	4682      	mov	sl, r0
 800ebf0:	468b      	mov	fp, r1
 800ebf2:	ea5f 1828 	movs.w	r8, r8, asr #4
 800ebf6:	d0da      	beq.n	800ebae <_strtod_l+0x516>
 800ebf8:	f1b8 0f1f 	cmp.w	r8, #31
 800ebfc:	dd20      	ble.n	800ec40 <_strtod_l+0x5a8>
 800ebfe:	2400      	movs	r4, #0
 800ec00:	46a0      	mov	r8, r4
 800ec02:	9407      	str	r4, [sp, #28]
 800ec04:	9405      	str	r4, [sp, #20]
 800ec06:	2322      	movs	r3, #34	; 0x22
 800ec08:	f04f 0a00 	mov.w	sl, #0
 800ec0c:	f04f 0b00 	mov.w	fp, #0
 800ec10:	f8c9 3000 	str.w	r3, [r9]
 800ec14:	e765      	b.n	800eae2 <_strtod_l+0x44a>
 800ec16:	bf00      	nop
 800ec18:	08012444 	.word	0x08012444
 800ec1c:	08012447 	.word	0x08012447
 800ec20:	0801244d 	.word	0x0801244d
 800ec24:	08012464 	.word	0x08012464
 800ec28:	080124f8 	.word	0x080124f8
 800ec2c:	080124d0 	.word	0x080124d0
 800ec30:	7ff00000 	.word	0x7ff00000
 800ec34:	7ca00000 	.word	0x7ca00000
 800ec38:	fff80000 	.word	0xfff80000
 800ec3c:	7fefffff 	.word	0x7fefffff
 800ec40:	f018 0310 	ands.w	r3, r8, #16
 800ec44:	bf18      	it	ne
 800ec46:	236a      	movne	r3, #106	; 0x6a
 800ec48:	4da0      	ldr	r5, [pc, #640]	; (800eecc <_strtod_l+0x834>)
 800ec4a:	9304      	str	r3, [sp, #16]
 800ec4c:	4650      	mov	r0, sl
 800ec4e:	4659      	mov	r1, fp
 800ec50:	2300      	movs	r3, #0
 800ec52:	f1b8 0f00 	cmp.w	r8, #0
 800ec56:	f300 810a 	bgt.w	800ee6e <_strtod_l+0x7d6>
 800ec5a:	b10b      	cbz	r3, 800ec60 <_strtod_l+0x5c8>
 800ec5c:	4682      	mov	sl, r0
 800ec5e:	468b      	mov	fp, r1
 800ec60:	9b04      	ldr	r3, [sp, #16]
 800ec62:	b1bb      	cbz	r3, 800ec94 <_strtod_l+0x5fc>
 800ec64:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800ec68:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	4659      	mov	r1, fp
 800ec70:	dd10      	ble.n	800ec94 <_strtod_l+0x5fc>
 800ec72:	2b1f      	cmp	r3, #31
 800ec74:	f340 8107 	ble.w	800ee86 <_strtod_l+0x7ee>
 800ec78:	2b34      	cmp	r3, #52	; 0x34
 800ec7a:	bfde      	ittt	le
 800ec7c:	3b20      	suble	r3, #32
 800ec7e:	f04f 32ff 	movle.w	r2, #4294967295
 800ec82:	fa02 f303 	lslle.w	r3, r2, r3
 800ec86:	f04f 0a00 	mov.w	sl, #0
 800ec8a:	bfcc      	ite	gt
 800ec8c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800ec90:	ea03 0b01 	andle.w	fp, r3, r1
 800ec94:	2200      	movs	r2, #0
 800ec96:	2300      	movs	r3, #0
 800ec98:	4650      	mov	r0, sl
 800ec9a:	4659      	mov	r1, fp
 800ec9c:	f7f1 ff24 	bl	8000ae8 <__aeabi_dcmpeq>
 800eca0:	2800      	cmp	r0, #0
 800eca2:	d1ac      	bne.n	800ebfe <_strtod_l+0x566>
 800eca4:	9b07      	ldr	r3, [sp, #28]
 800eca6:	9300      	str	r3, [sp, #0]
 800eca8:	9a05      	ldr	r2, [sp, #20]
 800ecaa:	9908      	ldr	r1, [sp, #32]
 800ecac:	4623      	mov	r3, r4
 800ecae:	4648      	mov	r0, r9
 800ecb0:	f000 ffcd 	bl	800fc4e <__s2b>
 800ecb4:	9007      	str	r0, [sp, #28]
 800ecb6:	2800      	cmp	r0, #0
 800ecb8:	f43f af08 	beq.w	800eacc <_strtod_l+0x434>
 800ecbc:	9a06      	ldr	r2, [sp, #24]
 800ecbe:	9b06      	ldr	r3, [sp, #24]
 800ecc0:	2a00      	cmp	r2, #0
 800ecc2:	f1c3 0300 	rsb	r3, r3, #0
 800ecc6:	bfa8      	it	ge
 800ecc8:	2300      	movge	r3, #0
 800ecca:	930e      	str	r3, [sp, #56]	; 0x38
 800eccc:	2400      	movs	r4, #0
 800ecce:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800ecd2:	9316      	str	r3, [sp, #88]	; 0x58
 800ecd4:	46a0      	mov	r8, r4
 800ecd6:	9b07      	ldr	r3, [sp, #28]
 800ecd8:	4648      	mov	r0, r9
 800ecda:	6859      	ldr	r1, [r3, #4]
 800ecdc:	f000 ff31 	bl	800fb42 <_Balloc>
 800ece0:	9005      	str	r0, [sp, #20]
 800ece2:	2800      	cmp	r0, #0
 800ece4:	f43f aef6 	beq.w	800ead4 <_strtod_l+0x43c>
 800ece8:	9b07      	ldr	r3, [sp, #28]
 800ecea:	691a      	ldr	r2, [r3, #16]
 800ecec:	3202      	adds	r2, #2
 800ecee:	f103 010c 	add.w	r1, r3, #12
 800ecf2:	0092      	lsls	r2, r2, #2
 800ecf4:	300c      	adds	r0, #12
 800ecf6:	f7ff fc29 	bl	800e54c <memcpy>
 800ecfa:	aa1e      	add	r2, sp, #120	; 0x78
 800ecfc:	a91d      	add	r1, sp, #116	; 0x74
 800ecfe:	ec4b ab10 	vmov	d0, sl, fp
 800ed02:	4648      	mov	r0, r9
 800ed04:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800ed08:	f001 fa5c 	bl	80101c4 <__d2b>
 800ed0c:	901c      	str	r0, [sp, #112]	; 0x70
 800ed0e:	2800      	cmp	r0, #0
 800ed10:	f43f aee0 	beq.w	800ead4 <_strtod_l+0x43c>
 800ed14:	2101      	movs	r1, #1
 800ed16:	4648      	mov	r0, r9
 800ed18:	f001 f825 	bl	800fd66 <__i2b>
 800ed1c:	4680      	mov	r8, r0
 800ed1e:	2800      	cmp	r0, #0
 800ed20:	f43f aed8 	beq.w	800ead4 <_strtod_l+0x43c>
 800ed24:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800ed26:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800ed28:	2e00      	cmp	r6, #0
 800ed2a:	bfab      	itete	ge
 800ed2c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800ed2e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800ed30:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800ed32:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800ed34:	bfac      	ite	ge
 800ed36:	18f7      	addge	r7, r6, r3
 800ed38:	1b9d      	sublt	r5, r3, r6
 800ed3a:	9b04      	ldr	r3, [sp, #16]
 800ed3c:	1af6      	subs	r6, r6, r3
 800ed3e:	4416      	add	r6, r2
 800ed40:	4b63      	ldr	r3, [pc, #396]	; (800eed0 <_strtod_l+0x838>)
 800ed42:	3e01      	subs	r6, #1
 800ed44:	429e      	cmp	r6, r3
 800ed46:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800ed4a:	f280 80af 	bge.w	800eeac <_strtod_l+0x814>
 800ed4e:	1b9b      	subs	r3, r3, r6
 800ed50:	2b1f      	cmp	r3, #31
 800ed52:	eba2 0203 	sub.w	r2, r2, r3
 800ed56:	f04f 0101 	mov.w	r1, #1
 800ed5a:	f300 809b 	bgt.w	800ee94 <_strtod_l+0x7fc>
 800ed5e:	fa01 f303 	lsl.w	r3, r1, r3
 800ed62:	930f      	str	r3, [sp, #60]	; 0x3c
 800ed64:	2300      	movs	r3, #0
 800ed66:	930a      	str	r3, [sp, #40]	; 0x28
 800ed68:	18be      	adds	r6, r7, r2
 800ed6a:	9b04      	ldr	r3, [sp, #16]
 800ed6c:	42b7      	cmp	r7, r6
 800ed6e:	4415      	add	r5, r2
 800ed70:	441d      	add	r5, r3
 800ed72:	463b      	mov	r3, r7
 800ed74:	bfa8      	it	ge
 800ed76:	4633      	movge	r3, r6
 800ed78:	42ab      	cmp	r3, r5
 800ed7a:	bfa8      	it	ge
 800ed7c:	462b      	movge	r3, r5
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	bfc2      	ittt	gt
 800ed82:	1af6      	subgt	r6, r6, r3
 800ed84:	1aed      	subgt	r5, r5, r3
 800ed86:	1aff      	subgt	r7, r7, r3
 800ed88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ed8a:	b1bb      	cbz	r3, 800edbc <_strtod_l+0x724>
 800ed8c:	4641      	mov	r1, r8
 800ed8e:	461a      	mov	r2, r3
 800ed90:	4648      	mov	r0, r9
 800ed92:	f001 f887 	bl	800fea4 <__pow5mult>
 800ed96:	4680      	mov	r8, r0
 800ed98:	2800      	cmp	r0, #0
 800ed9a:	f43f ae9b 	beq.w	800ead4 <_strtod_l+0x43c>
 800ed9e:	4601      	mov	r1, r0
 800eda0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800eda2:	4648      	mov	r0, r9
 800eda4:	f000 ffe8 	bl	800fd78 <__multiply>
 800eda8:	900c      	str	r0, [sp, #48]	; 0x30
 800edaa:	2800      	cmp	r0, #0
 800edac:	f43f ae92 	beq.w	800ead4 <_strtod_l+0x43c>
 800edb0:	991c      	ldr	r1, [sp, #112]	; 0x70
 800edb2:	4648      	mov	r0, r9
 800edb4:	f000 fef9 	bl	800fbaa <_Bfree>
 800edb8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800edba:	931c      	str	r3, [sp, #112]	; 0x70
 800edbc:	2e00      	cmp	r6, #0
 800edbe:	dc7a      	bgt.n	800eeb6 <_strtod_l+0x81e>
 800edc0:	9b06      	ldr	r3, [sp, #24]
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	dd08      	ble.n	800edd8 <_strtod_l+0x740>
 800edc6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800edc8:	9905      	ldr	r1, [sp, #20]
 800edca:	4648      	mov	r0, r9
 800edcc:	f001 f86a 	bl	800fea4 <__pow5mult>
 800edd0:	9005      	str	r0, [sp, #20]
 800edd2:	2800      	cmp	r0, #0
 800edd4:	f43f ae7e 	beq.w	800ead4 <_strtod_l+0x43c>
 800edd8:	2d00      	cmp	r5, #0
 800edda:	dd08      	ble.n	800edee <_strtod_l+0x756>
 800eddc:	462a      	mov	r2, r5
 800edde:	9905      	ldr	r1, [sp, #20]
 800ede0:	4648      	mov	r0, r9
 800ede2:	f001 f8ad 	bl	800ff40 <__lshift>
 800ede6:	9005      	str	r0, [sp, #20]
 800ede8:	2800      	cmp	r0, #0
 800edea:	f43f ae73 	beq.w	800ead4 <_strtod_l+0x43c>
 800edee:	2f00      	cmp	r7, #0
 800edf0:	dd08      	ble.n	800ee04 <_strtod_l+0x76c>
 800edf2:	4641      	mov	r1, r8
 800edf4:	463a      	mov	r2, r7
 800edf6:	4648      	mov	r0, r9
 800edf8:	f001 f8a2 	bl	800ff40 <__lshift>
 800edfc:	4680      	mov	r8, r0
 800edfe:	2800      	cmp	r0, #0
 800ee00:	f43f ae68 	beq.w	800ead4 <_strtod_l+0x43c>
 800ee04:	9a05      	ldr	r2, [sp, #20]
 800ee06:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ee08:	4648      	mov	r0, r9
 800ee0a:	f001 f907 	bl	801001c <__mdiff>
 800ee0e:	4604      	mov	r4, r0
 800ee10:	2800      	cmp	r0, #0
 800ee12:	f43f ae5f 	beq.w	800ead4 <_strtod_l+0x43c>
 800ee16:	68c3      	ldr	r3, [r0, #12]
 800ee18:	930c      	str	r3, [sp, #48]	; 0x30
 800ee1a:	2300      	movs	r3, #0
 800ee1c:	60c3      	str	r3, [r0, #12]
 800ee1e:	4641      	mov	r1, r8
 800ee20:	f001 f8e2 	bl	800ffe8 <__mcmp>
 800ee24:	2800      	cmp	r0, #0
 800ee26:	da55      	bge.n	800eed4 <_strtod_l+0x83c>
 800ee28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ee2a:	b9e3      	cbnz	r3, 800ee66 <_strtod_l+0x7ce>
 800ee2c:	f1ba 0f00 	cmp.w	sl, #0
 800ee30:	d119      	bne.n	800ee66 <_strtod_l+0x7ce>
 800ee32:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ee36:	b9b3      	cbnz	r3, 800ee66 <_strtod_l+0x7ce>
 800ee38:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ee3c:	0d1b      	lsrs	r3, r3, #20
 800ee3e:	051b      	lsls	r3, r3, #20
 800ee40:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800ee44:	d90f      	bls.n	800ee66 <_strtod_l+0x7ce>
 800ee46:	6963      	ldr	r3, [r4, #20]
 800ee48:	b913      	cbnz	r3, 800ee50 <_strtod_l+0x7b8>
 800ee4a:	6923      	ldr	r3, [r4, #16]
 800ee4c:	2b01      	cmp	r3, #1
 800ee4e:	dd0a      	ble.n	800ee66 <_strtod_l+0x7ce>
 800ee50:	4621      	mov	r1, r4
 800ee52:	2201      	movs	r2, #1
 800ee54:	4648      	mov	r0, r9
 800ee56:	f001 f873 	bl	800ff40 <__lshift>
 800ee5a:	4641      	mov	r1, r8
 800ee5c:	4604      	mov	r4, r0
 800ee5e:	f001 f8c3 	bl	800ffe8 <__mcmp>
 800ee62:	2800      	cmp	r0, #0
 800ee64:	dc67      	bgt.n	800ef36 <_strtod_l+0x89e>
 800ee66:	9b04      	ldr	r3, [sp, #16]
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d171      	bne.n	800ef50 <_strtod_l+0x8b8>
 800ee6c:	e63d      	b.n	800eaea <_strtod_l+0x452>
 800ee6e:	f018 0f01 	tst.w	r8, #1
 800ee72:	d004      	beq.n	800ee7e <_strtod_l+0x7e6>
 800ee74:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ee78:	f7f1 fbce 	bl	8000618 <__aeabi_dmul>
 800ee7c:	2301      	movs	r3, #1
 800ee7e:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ee82:	3508      	adds	r5, #8
 800ee84:	e6e5      	b.n	800ec52 <_strtod_l+0x5ba>
 800ee86:	f04f 32ff 	mov.w	r2, #4294967295
 800ee8a:	fa02 f303 	lsl.w	r3, r2, r3
 800ee8e:	ea03 0a0a 	and.w	sl, r3, sl
 800ee92:	e6ff      	b.n	800ec94 <_strtod_l+0x5fc>
 800ee94:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800ee98:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800ee9c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800eea0:	36e2      	adds	r6, #226	; 0xe2
 800eea2:	fa01 f306 	lsl.w	r3, r1, r6
 800eea6:	930a      	str	r3, [sp, #40]	; 0x28
 800eea8:	910f      	str	r1, [sp, #60]	; 0x3c
 800eeaa:	e75d      	b.n	800ed68 <_strtod_l+0x6d0>
 800eeac:	2300      	movs	r3, #0
 800eeae:	930a      	str	r3, [sp, #40]	; 0x28
 800eeb0:	2301      	movs	r3, #1
 800eeb2:	930f      	str	r3, [sp, #60]	; 0x3c
 800eeb4:	e758      	b.n	800ed68 <_strtod_l+0x6d0>
 800eeb6:	4632      	mov	r2, r6
 800eeb8:	991c      	ldr	r1, [sp, #112]	; 0x70
 800eeba:	4648      	mov	r0, r9
 800eebc:	f001 f840 	bl	800ff40 <__lshift>
 800eec0:	901c      	str	r0, [sp, #112]	; 0x70
 800eec2:	2800      	cmp	r0, #0
 800eec4:	f47f af7c 	bne.w	800edc0 <_strtod_l+0x728>
 800eec8:	e604      	b.n	800ead4 <_strtod_l+0x43c>
 800eeca:	bf00      	nop
 800eecc:	08012478 	.word	0x08012478
 800eed0:	fffffc02 	.word	0xfffffc02
 800eed4:	465d      	mov	r5, fp
 800eed6:	f040 8086 	bne.w	800efe6 <_strtod_l+0x94e>
 800eeda:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800eedc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800eee0:	b32a      	cbz	r2, 800ef2e <_strtod_l+0x896>
 800eee2:	4aaf      	ldr	r2, [pc, #700]	; (800f1a0 <_strtod_l+0xb08>)
 800eee4:	4293      	cmp	r3, r2
 800eee6:	d153      	bne.n	800ef90 <_strtod_l+0x8f8>
 800eee8:	9b04      	ldr	r3, [sp, #16]
 800eeea:	4650      	mov	r0, sl
 800eeec:	b1d3      	cbz	r3, 800ef24 <_strtod_l+0x88c>
 800eeee:	4aad      	ldr	r2, [pc, #692]	; (800f1a4 <_strtod_l+0xb0c>)
 800eef0:	402a      	ands	r2, r5
 800eef2:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800eef6:	f04f 31ff 	mov.w	r1, #4294967295
 800eefa:	d816      	bhi.n	800ef2a <_strtod_l+0x892>
 800eefc:	0d12      	lsrs	r2, r2, #20
 800eefe:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800ef02:	fa01 f303 	lsl.w	r3, r1, r3
 800ef06:	4298      	cmp	r0, r3
 800ef08:	d142      	bne.n	800ef90 <_strtod_l+0x8f8>
 800ef0a:	4ba7      	ldr	r3, [pc, #668]	; (800f1a8 <_strtod_l+0xb10>)
 800ef0c:	429d      	cmp	r5, r3
 800ef0e:	d102      	bne.n	800ef16 <_strtod_l+0x87e>
 800ef10:	3001      	adds	r0, #1
 800ef12:	f43f addf 	beq.w	800ead4 <_strtod_l+0x43c>
 800ef16:	4ba3      	ldr	r3, [pc, #652]	; (800f1a4 <_strtod_l+0xb0c>)
 800ef18:	402b      	ands	r3, r5
 800ef1a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800ef1e:	f04f 0a00 	mov.w	sl, #0
 800ef22:	e7a0      	b.n	800ee66 <_strtod_l+0x7ce>
 800ef24:	f04f 33ff 	mov.w	r3, #4294967295
 800ef28:	e7ed      	b.n	800ef06 <_strtod_l+0x86e>
 800ef2a:	460b      	mov	r3, r1
 800ef2c:	e7eb      	b.n	800ef06 <_strtod_l+0x86e>
 800ef2e:	bb7b      	cbnz	r3, 800ef90 <_strtod_l+0x8f8>
 800ef30:	f1ba 0f00 	cmp.w	sl, #0
 800ef34:	d12c      	bne.n	800ef90 <_strtod_l+0x8f8>
 800ef36:	9904      	ldr	r1, [sp, #16]
 800ef38:	4a9a      	ldr	r2, [pc, #616]	; (800f1a4 <_strtod_l+0xb0c>)
 800ef3a:	465b      	mov	r3, fp
 800ef3c:	b1f1      	cbz	r1, 800ef7c <_strtod_l+0x8e4>
 800ef3e:	ea02 010b 	and.w	r1, r2, fp
 800ef42:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800ef46:	dc19      	bgt.n	800ef7c <_strtod_l+0x8e4>
 800ef48:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800ef4c:	f77f ae5b 	ble.w	800ec06 <_strtod_l+0x56e>
 800ef50:	4a96      	ldr	r2, [pc, #600]	; (800f1ac <_strtod_l+0xb14>)
 800ef52:	2300      	movs	r3, #0
 800ef54:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800ef58:	4650      	mov	r0, sl
 800ef5a:	4659      	mov	r1, fp
 800ef5c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800ef60:	f7f1 fb5a 	bl	8000618 <__aeabi_dmul>
 800ef64:	4682      	mov	sl, r0
 800ef66:	468b      	mov	fp, r1
 800ef68:	2900      	cmp	r1, #0
 800ef6a:	f47f adbe 	bne.w	800eaea <_strtod_l+0x452>
 800ef6e:	2800      	cmp	r0, #0
 800ef70:	f47f adbb 	bne.w	800eaea <_strtod_l+0x452>
 800ef74:	2322      	movs	r3, #34	; 0x22
 800ef76:	f8c9 3000 	str.w	r3, [r9]
 800ef7a:	e5b6      	b.n	800eaea <_strtod_l+0x452>
 800ef7c:	4013      	ands	r3, r2
 800ef7e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800ef82:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ef86:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ef8a:	f04f 3aff 	mov.w	sl, #4294967295
 800ef8e:	e76a      	b.n	800ee66 <_strtod_l+0x7ce>
 800ef90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ef92:	b193      	cbz	r3, 800efba <_strtod_l+0x922>
 800ef94:	422b      	tst	r3, r5
 800ef96:	f43f af66 	beq.w	800ee66 <_strtod_l+0x7ce>
 800ef9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ef9c:	9a04      	ldr	r2, [sp, #16]
 800ef9e:	4650      	mov	r0, sl
 800efa0:	4659      	mov	r1, fp
 800efa2:	b173      	cbz	r3, 800efc2 <_strtod_l+0x92a>
 800efa4:	f7ff fb5c 	bl	800e660 <sulp>
 800efa8:	4602      	mov	r2, r0
 800efaa:	460b      	mov	r3, r1
 800efac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800efb0:	f7f1 f97c 	bl	80002ac <__adddf3>
 800efb4:	4682      	mov	sl, r0
 800efb6:	468b      	mov	fp, r1
 800efb8:	e755      	b.n	800ee66 <_strtod_l+0x7ce>
 800efba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800efbc:	ea13 0f0a 	tst.w	r3, sl
 800efc0:	e7e9      	b.n	800ef96 <_strtod_l+0x8fe>
 800efc2:	f7ff fb4d 	bl	800e660 <sulp>
 800efc6:	4602      	mov	r2, r0
 800efc8:	460b      	mov	r3, r1
 800efca:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800efce:	f7f1 f96b 	bl	80002a8 <__aeabi_dsub>
 800efd2:	2200      	movs	r2, #0
 800efd4:	2300      	movs	r3, #0
 800efd6:	4682      	mov	sl, r0
 800efd8:	468b      	mov	fp, r1
 800efda:	f7f1 fd85 	bl	8000ae8 <__aeabi_dcmpeq>
 800efde:	2800      	cmp	r0, #0
 800efe0:	f47f ae11 	bne.w	800ec06 <_strtod_l+0x56e>
 800efe4:	e73f      	b.n	800ee66 <_strtod_l+0x7ce>
 800efe6:	4641      	mov	r1, r8
 800efe8:	4620      	mov	r0, r4
 800efea:	f001 f93a 	bl	8010262 <__ratio>
 800efee:	ec57 6b10 	vmov	r6, r7, d0
 800eff2:	2200      	movs	r2, #0
 800eff4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800eff8:	ee10 0a10 	vmov	r0, s0
 800effc:	4639      	mov	r1, r7
 800effe:	f7f1 fd87 	bl	8000b10 <__aeabi_dcmple>
 800f002:	2800      	cmp	r0, #0
 800f004:	d077      	beq.n	800f0f6 <_strtod_l+0xa5e>
 800f006:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d04a      	beq.n	800f0a2 <_strtod_l+0xa0a>
 800f00c:	4b68      	ldr	r3, [pc, #416]	; (800f1b0 <_strtod_l+0xb18>)
 800f00e:	2200      	movs	r2, #0
 800f010:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800f014:	4f66      	ldr	r7, [pc, #408]	; (800f1b0 <_strtod_l+0xb18>)
 800f016:	2600      	movs	r6, #0
 800f018:	4b62      	ldr	r3, [pc, #392]	; (800f1a4 <_strtod_l+0xb0c>)
 800f01a:	402b      	ands	r3, r5
 800f01c:	930f      	str	r3, [sp, #60]	; 0x3c
 800f01e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f020:	4b64      	ldr	r3, [pc, #400]	; (800f1b4 <_strtod_l+0xb1c>)
 800f022:	429a      	cmp	r2, r3
 800f024:	f040 80ce 	bne.w	800f1c4 <_strtod_l+0xb2c>
 800f028:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800f02c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f030:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800f034:	ec4b ab10 	vmov	d0, sl, fp
 800f038:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800f03c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800f040:	f001 f84a 	bl	80100d8 <__ulp>
 800f044:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f048:	ec53 2b10 	vmov	r2, r3, d0
 800f04c:	f7f1 fae4 	bl	8000618 <__aeabi_dmul>
 800f050:	4652      	mov	r2, sl
 800f052:	465b      	mov	r3, fp
 800f054:	f7f1 f92a 	bl	80002ac <__adddf3>
 800f058:	460b      	mov	r3, r1
 800f05a:	4952      	ldr	r1, [pc, #328]	; (800f1a4 <_strtod_l+0xb0c>)
 800f05c:	4a56      	ldr	r2, [pc, #344]	; (800f1b8 <_strtod_l+0xb20>)
 800f05e:	4019      	ands	r1, r3
 800f060:	4291      	cmp	r1, r2
 800f062:	4682      	mov	sl, r0
 800f064:	d95b      	bls.n	800f11e <_strtod_l+0xa86>
 800f066:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f068:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800f06c:	4293      	cmp	r3, r2
 800f06e:	d103      	bne.n	800f078 <_strtod_l+0x9e0>
 800f070:	9b08      	ldr	r3, [sp, #32]
 800f072:	3301      	adds	r3, #1
 800f074:	f43f ad2e 	beq.w	800ead4 <_strtod_l+0x43c>
 800f078:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800f1a8 <_strtod_l+0xb10>
 800f07c:	f04f 3aff 	mov.w	sl, #4294967295
 800f080:	991c      	ldr	r1, [sp, #112]	; 0x70
 800f082:	4648      	mov	r0, r9
 800f084:	f000 fd91 	bl	800fbaa <_Bfree>
 800f088:	9905      	ldr	r1, [sp, #20]
 800f08a:	4648      	mov	r0, r9
 800f08c:	f000 fd8d 	bl	800fbaa <_Bfree>
 800f090:	4641      	mov	r1, r8
 800f092:	4648      	mov	r0, r9
 800f094:	f000 fd89 	bl	800fbaa <_Bfree>
 800f098:	4621      	mov	r1, r4
 800f09a:	4648      	mov	r0, r9
 800f09c:	f000 fd85 	bl	800fbaa <_Bfree>
 800f0a0:	e619      	b.n	800ecd6 <_strtod_l+0x63e>
 800f0a2:	f1ba 0f00 	cmp.w	sl, #0
 800f0a6:	d11a      	bne.n	800f0de <_strtod_l+0xa46>
 800f0a8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f0ac:	b9eb      	cbnz	r3, 800f0ea <_strtod_l+0xa52>
 800f0ae:	2200      	movs	r2, #0
 800f0b0:	4b3f      	ldr	r3, [pc, #252]	; (800f1b0 <_strtod_l+0xb18>)
 800f0b2:	4630      	mov	r0, r6
 800f0b4:	4639      	mov	r1, r7
 800f0b6:	f7f1 fd21 	bl	8000afc <__aeabi_dcmplt>
 800f0ba:	b9c8      	cbnz	r0, 800f0f0 <_strtod_l+0xa58>
 800f0bc:	4630      	mov	r0, r6
 800f0be:	4639      	mov	r1, r7
 800f0c0:	2200      	movs	r2, #0
 800f0c2:	4b3e      	ldr	r3, [pc, #248]	; (800f1bc <_strtod_l+0xb24>)
 800f0c4:	f7f1 faa8 	bl	8000618 <__aeabi_dmul>
 800f0c8:	4606      	mov	r6, r0
 800f0ca:	460f      	mov	r7, r1
 800f0cc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800f0d0:	9618      	str	r6, [sp, #96]	; 0x60
 800f0d2:	9319      	str	r3, [sp, #100]	; 0x64
 800f0d4:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800f0d8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800f0dc:	e79c      	b.n	800f018 <_strtod_l+0x980>
 800f0de:	f1ba 0f01 	cmp.w	sl, #1
 800f0e2:	d102      	bne.n	800f0ea <_strtod_l+0xa52>
 800f0e4:	2d00      	cmp	r5, #0
 800f0e6:	f43f ad8e 	beq.w	800ec06 <_strtod_l+0x56e>
 800f0ea:	2200      	movs	r2, #0
 800f0ec:	4b34      	ldr	r3, [pc, #208]	; (800f1c0 <_strtod_l+0xb28>)
 800f0ee:	e78f      	b.n	800f010 <_strtod_l+0x978>
 800f0f0:	2600      	movs	r6, #0
 800f0f2:	4f32      	ldr	r7, [pc, #200]	; (800f1bc <_strtod_l+0xb24>)
 800f0f4:	e7ea      	b.n	800f0cc <_strtod_l+0xa34>
 800f0f6:	4b31      	ldr	r3, [pc, #196]	; (800f1bc <_strtod_l+0xb24>)
 800f0f8:	4630      	mov	r0, r6
 800f0fa:	4639      	mov	r1, r7
 800f0fc:	2200      	movs	r2, #0
 800f0fe:	f7f1 fa8b 	bl	8000618 <__aeabi_dmul>
 800f102:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f104:	4606      	mov	r6, r0
 800f106:	460f      	mov	r7, r1
 800f108:	b933      	cbnz	r3, 800f118 <_strtod_l+0xa80>
 800f10a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f10e:	9010      	str	r0, [sp, #64]	; 0x40
 800f110:	9311      	str	r3, [sp, #68]	; 0x44
 800f112:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800f116:	e7df      	b.n	800f0d8 <_strtod_l+0xa40>
 800f118:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800f11c:	e7f9      	b.n	800f112 <_strtod_l+0xa7a>
 800f11e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800f122:	9b04      	ldr	r3, [sp, #16]
 800f124:	2b00      	cmp	r3, #0
 800f126:	d1ab      	bne.n	800f080 <_strtod_l+0x9e8>
 800f128:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f12c:	0d1b      	lsrs	r3, r3, #20
 800f12e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f130:	051b      	lsls	r3, r3, #20
 800f132:	429a      	cmp	r2, r3
 800f134:	465d      	mov	r5, fp
 800f136:	d1a3      	bne.n	800f080 <_strtod_l+0x9e8>
 800f138:	4639      	mov	r1, r7
 800f13a:	4630      	mov	r0, r6
 800f13c:	f7f1 fd1c 	bl	8000b78 <__aeabi_d2iz>
 800f140:	f7f1 fa00 	bl	8000544 <__aeabi_i2d>
 800f144:	460b      	mov	r3, r1
 800f146:	4602      	mov	r2, r0
 800f148:	4639      	mov	r1, r7
 800f14a:	4630      	mov	r0, r6
 800f14c:	f7f1 f8ac 	bl	80002a8 <__aeabi_dsub>
 800f150:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f152:	4606      	mov	r6, r0
 800f154:	460f      	mov	r7, r1
 800f156:	b933      	cbnz	r3, 800f166 <_strtod_l+0xace>
 800f158:	f1ba 0f00 	cmp.w	sl, #0
 800f15c:	d103      	bne.n	800f166 <_strtod_l+0xace>
 800f15e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800f162:	2d00      	cmp	r5, #0
 800f164:	d06d      	beq.n	800f242 <_strtod_l+0xbaa>
 800f166:	a30a      	add	r3, pc, #40	; (adr r3, 800f190 <_strtod_l+0xaf8>)
 800f168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f16c:	4630      	mov	r0, r6
 800f16e:	4639      	mov	r1, r7
 800f170:	f7f1 fcc4 	bl	8000afc <__aeabi_dcmplt>
 800f174:	2800      	cmp	r0, #0
 800f176:	f47f acb8 	bne.w	800eaea <_strtod_l+0x452>
 800f17a:	a307      	add	r3, pc, #28	; (adr r3, 800f198 <_strtod_l+0xb00>)
 800f17c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f180:	4630      	mov	r0, r6
 800f182:	4639      	mov	r1, r7
 800f184:	f7f1 fcd8 	bl	8000b38 <__aeabi_dcmpgt>
 800f188:	2800      	cmp	r0, #0
 800f18a:	f43f af79 	beq.w	800f080 <_strtod_l+0x9e8>
 800f18e:	e4ac      	b.n	800eaea <_strtod_l+0x452>
 800f190:	94a03595 	.word	0x94a03595
 800f194:	3fdfffff 	.word	0x3fdfffff
 800f198:	35afe535 	.word	0x35afe535
 800f19c:	3fe00000 	.word	0x3fe00000
 800f1a0:	000fffff 	.word	0x000fffff
 800f1a4:	7ff00000 	.word	0x7ff00000
 800f1a8:	7fefffff 	.word	0x7fefffff
 800f1ac:	39500000 	.word	0x39500000
 800f1b0:	3ff00000 	.word	0x3ff00000
 800f1b4:	7fe00000 	.word	0x7fe00000
 800f1b8:	7c9fffff 	.word	0x7c9fffff
 800f1bc:	3fe00000 	.word	0x3fe00000
 800f1c0:	bff00000 	.word	0xbff00000
 800f1c4:	9b04      	ldr	r3, [sp, #16]
 800f1c6:	b333      	cbz	r3, 800f216 <_strtod_l+0xb7e>
 800f1c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f1ca:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800f1ce:	d822      	bhi.n	800f216 <_strtod_l+0xb7e>
 800f1d0:	a327      	add	r3, pc, #156	; (adr r3, 800f270 <_strtod_l+0xbd8>)
 800f1d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1d6:	4630      	mov	r0, r6
 800f1d8:	4639      	mov	r1, r7
 800f1da:	f7f1 fc99 	bl	8000b10 <__aeabi_dcmple>
 800f1de:	b1a0      	cbz	r0, 800f20a <_strtod_l+0xb72>
 800f1e0:	4639      	mov	r1, r7
 800f1e2:	4630      	mov	r0, r6
 800f1e4:	f7f1 fcf0 	bl	8000bc8 <__aeabi_d2uiz>
 800f1e8:	2800      	cmp	r0, #0
 800f1ea:	bf08      	it	eq
 800f1ec:	2001      	moveq	r0, #1
 800f1ee:	f7f1 f999 	bl	8000524 <__aeabi_ui2d>
 800f1f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f1f4:	4606      	mov	r6, r0
 800f1f6:	460f      	mov	r7, r1
 800f1f8:	bb03      	cbnz	r3, 800f23c <_strtod_l+0xba4>
 800f1fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f1fe:	9012      	str	r0, [sp, #72]	; 0x48
 800f200:	9313      	str	r3, [sp, #76]	; 0x4c
 800f202:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800f206:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800f20a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f20c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f20e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800f212:	1a9b      	subs	r3, r3, r2
 800f214:	930b      	str	r3, [sp, #44]	; 0x2c
 800f216:	ed9d 0b08 	vldr	d0, [sp, #32]
 800f21a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800f21e:	f000 ff5b 	bl	80100d8 <__ulp>
 800f222:	4650      	mov	r0, sl
 800f224:	ec53 2b10 	vmov	r2, r3, d0
 800f228:	4659      	mov	r1, fp
 800f22a:	f7f1 f9f5 	bl	8000618 <__aeabi_dmul>
 800f22e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800f232:	f7f1 f83b 	bl	80002ac <__adddf3>
 800f236:	4682      	mov	sl, r0
 800f238:	468b      	mov	fp, r1
 800f23a:	e772      	b.n	800f122 <_strtod_l+0xa8a>
 800f23c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 800f240:	e7df      	b.n	800f202 <_strtod_l+0xb6a>
 800f242:	a30d      	add	r3, pc, #52	; (adr r3, 800f278 <_strtod_l+0xbe0>)
 800f244:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f248:	f7f1 fc58 	bl	8000afc <__aeabi_dcmplt>
 800f24c:	e79c      	b.n	800f188 <_strtod_l+0xaf0>
 800f24e:	2300      	movs	r3, #0
 800f250:	930d      	str	r3, [sp, #52]	; 0x34
 800f252:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f254:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f256:	6013      	str	r3, [r2, #0]
 800f258:	f7ff ba61 	b.w	800e71e <_strtod_l+0x86>
 800f25c:	2b65      	cmp	r3, #101	; 0x65
 800f25e:	f04f 0200 	mov.w	r2, #0
 800f262:	f43f ab4e 	beq.w	800e902 <_strtod_l+0x26a>
 800f266:	2101      	movs	r1, #1
 800f268:	4614      	mov	r4, r2
 800f26a:	9104      	str	r1, [sp, #16]
 800f26c:	f7ff bacb 	b.w	800e806 <_strtod_l+0x16e>
 800f270:	ffc00000 	.word	0xffc00000
 800f274:	41dfffff 	.word	0x41dfffff
 800f278:	94a03595 	.word	0x94a03595
 800f27c:	3fcfffff 	.word	0x3fcfffff

0800f280 <strtof>:
 800f280:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 800f284:	4e24      	ldr	r6, [pc, #144]	; (800f318 <strtof+0x98>)
 800f286:	4a25      	ldr	r2, [pc, #148]	; (800f31c <strtof+0x9c>)
 800f288:	6834      	ldr	r4, [r6, #0]
 800f28a:	6a23      	ldr	r3, [r4, #32]
 800f28c:	ed2d 8b02 	vpush	{d8}
 800f290:	2b00      	cmp	r3, #0
 800f292:	bf08      	it	eq
 800f294:	4613      	moveq	r3, r2
 800f296:	460a      	mov	r2, r1
 800f298:	4601      	mov	r1, r0
 800f29a:	4620      	mov	r0, r4
 800f29c:	f7ff f9fc 	bl	800e698 <_strtod_l>
 800f2a0:	ec55 4b10 	vmov	r4, r5, d0
 800f2a4:	ee10 2a10 	vmov	r2, s0
 800f2a8:	462b      	mov	r3, r5
 800f2aa:	ee10 0a10 	vmov	r0, s0
 800f2ae:	4629      	mov	r1, r5
 800f2b0:	f7f1 fc4c 	bl	8000b4c <__aeabi_dcmpun>
 800f2b4:	b130      	cbz	r0, 800f2c4 <strtof+0x44>
 800f2b6:	ecbd 8b02 	vpop	{d8}
 800f2ba:	2000      	movs	r0, #0
 800f2bc:	e8bd 4370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, lr}
 800f2c0:	f001 bb90 	b.w	80109e4 <nanf>
 800f2c4:	4620      	mov	r0, r4
 800f2c6:	4629      	mov	r1, r5
 800f2c8:	f7f1 fc9e 	bl	8000c08 <__aeabi_d2f>
 800f2cc:	ee08 0a10 	vmov	s16, r0
 800f2d0:	eddf 7a13 	vldr	s15, [pc, #76]	; 800f320 <strtof+0xa0>
 800f2d4:	eeb0 7ac8 	vabs.f32	s14, s16
 800f2d8:	eeb4 7a67 	vcmp.f32	s14, s15
 800f2dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f2e0:	dd14      	ble.n	800f30c <strtof+0x8c>
 800f2e2:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
 800f2e6:	f04f 32ff 	mov.w	r2, #4294967295
 800f2ea:	4b0e      	ldr	r3, [pc, #56]	; (800f324 <strtof+0xa4>)
 800f2ec:	4620      	mov	r0, r4
 800f2ee:	4649      	mov	r1, r9
 800f2f0:	f7f1 fc2c 	bl	8000b4c <__aeabi_dcmpun>
 800f2f4:	b938      	cbnz	r0, 800f306 <strtof+0x86>
 800f2f6:	f04f 32ff 	mov.w	r2, #4294967295
 800f2fa:	4b0a      	ldr	r3, [pc, #40]	; (800f324 <strtof+0xa4>)
 800f2fc:	4620      	mov	r0, r4
 800f2fe:	4649      	mov	r1, r9
 800f300:	f7f1 fc06 	bl	8000b10 <__aeabi_dcmple>
 800f304:	b110      	cbz	r0, 800f30c <strtof+0x8c>
 800f306:	6833      	ldr	r3, [r6, #0]
 800f308:	2222      	movs	r2, #34	; 0x22
 800f30a:	601a      	str	r2, [r3, #0]
 800f30c:	eeb0 0a48 	vmov.f32	s0, s16
 800f310:	ecbd 8b02 	vpop	{d8}
 800f314:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800f318:	20000010 	.word	0x20000010
 800f31c:	20000074 	.word	0x20000074
 800f320:	7f7fffff 	.word	0x7f7fffff
 800f324:	7fefffff 	.word	0x7fefffff

0800f328 <_strtol_l.isra.0>:
 800f328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f32c:	4680      	mov	r8, r0
 800f32e:	4689      	mov	r9, r1
 800f330:	4692      	mov	sl, r2
 800f332:	461e      	mov	r6, r3
 800f334:	460f      	mov	r7, r1
 800f336:	463d      	mov	r5, r7
 800f338:	9808      	ldr	r0, [sp, #32]
 800f33a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f33e:	f000 fbe9 	bl	800fb14 <__locale_ctype_ptr_l>
 800f342:	4420      	add	r0, r4
 800f344:	7843      	ldrb	r3, [r0, #1]
 800f346:	f013 0308 	ands.w	r3, r3, #8
 800f34a:	d132      	bne.n	800f3b2 <_strtol_l.isra.0+0x8a>
 800f34c:	2c2d      	cmp	r4, #45	; 0x2d
 800f34e:	d132      	bne.n	800f3b6 <_strtol_l.isra.0+0x8e>
 800f350:	787c      	ldrb	r4, [r7, #1]
 800f352:	1cbd      	adds	r5, r7, #2
 800f354:	2201      	movs	r2, #1
 800f356:	2e00      	cmp	r6, #0
 800f358:	d05d      	beq.n	800f416 <_strtol_l.isra.0+0xee>
 800f35a:	2e10      	cmp	r6, #16
 800f35c:	d109      	bne.n	800f372 <_strtol_l.isra.0+0x4a>
 800f35e:	2c30      	cmp	r4, #48	; 0x30
 800f360:	d107      	bne.n	800f372 <_strtol_l.isra.0+0x4a>
 800f362:	782b      	ldrb	r3, [r5, #0]
 800f364:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f368:	2b58      	cmp	r3, #88	; 0x58
 800f36a:	d14f      	bne.n	800f40c <_strtol_l.isra.0+0xe4>
 800f36c:	786c      	ldrb	r4, [r5, #1]
 800f36e:	2610      	movs	r6, #16
 800f370:	3502      	adds	r5, #2
 800f372:	2a00      	cmp	r2, #0
 800f374:	bf14      	ite	ne
 800f376:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800f37a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800f37e:	2700      	movs	r7, #0
 800f380:	fbb1 fcf6 	udiv	ip, r1, r6
 800f384:	4638      	mov	r0, r7
 800f386:	fb06 1e1c 	mls	lr, r6, ip, r1
 800f38a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800f38e:	2b09      	cmp	r3, #9
 800f390:	d817      	bhi.n	800f3c2 <_strtol_l.isra.0+0x9a>
 800f392:	461c      	mov	r4, r3
 800f394:	42a6      	cmp	r6, r4
 800f396:	dd23      	ble.n	800f3e0 <_strtol_l.isra.0+0xb8>
 800f398:	1c7b      	adds	r3, r7, #1
 800f39a:	d007      	beq.n	800f3ac <_strtol_l.isra.0+0x84>
 800f39c:	4584      	cmp	ip, r0
 800f39e:	d31c      	bcc.n	800f3da <_strtol_l.isra.0+0xb2>
 800f3a0:	d101      	bne.n	800f3a6 <_strtol_l.isra.0+0x7e>
 800f3a2:	45a6      	cmp	lr, r4
 800f3a4:	db19      	blt.n	800f3da <_strtol_l.isra.0+0xb2>
 800f3a6:	fb00 4006 	mla	r0, r0, r6, r4
 800f3aa:	2701      	movs	r7, #1
 800f3ac:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f3b0:	e7eb      	b.n	800f38a <_strtol_l.isra.0+0x62>
 800f3b2:	462f      	mov	r7, r5
 800f3b4:	e7bf      	b.n	800f336 <_strtol_l.isra.0+0xe>
 800f3b6:	2c2b      	cmp	r4, #43	; 0x2b
 800f3b8:	bf04      	itt	eq
 800f3ba:	1cbd      	addeq	r5, r7, #2
 800f3bc:	787c      	ldrbeq	r4, [r7, #1]
 800f3be:	461a      	mov	r2, r3
 800f3c0:	e7c9      	b.n	800f356 <_strtol_l.isra.0+0x2e>
 800f3c2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800f3c6:	2b19      	cmp	r3, #25
 800f3c8:	d801      	bhi.n	800f3ce <_strtol_l.isra.0+0xa6>
 800f3ca:	3c37      	subs	r4, #55	; 0x37
 800f3cc:	e7e2      	b.n	800f394 <_strtol_l.isra.0+0x6c>
 800f3ce:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800f3d2:	2b19      	cmp	r3, #25
 800f3d4:	d804      	bhi.n	800f3e0 <_strtol_l.isra.0+0xb8>
 800f3d6:	3c57      	subs	r4, #87	; 0x57
 800f3d8:	e7dc      	b.n	800f394 <_strtol_l.isra.0+0x6c>
 800f3da:	f04f 37ff 	mov.w	r7, #4294967295
 800f3de:	e7e5      	b.n	800f3ac <_strtol_l.isra.0+0x84>
 800f3e0:	1c7b      	adds	r3, r7, #1
 800f3e2:	d108      	bne.n	800f3f6 <_strtol_l.isra.0+0xce>
 800f3e4:	2322      	movs	r3, #34	; 0x22
 800f3e6:	f8c8 3000 	str.w	r3, [r8]
 800f3ea:	4608      	mov	r0, r1
 800f3ec:	f1ba 0f00 	cmp.w	sl, #0
 800f3f0:	d107      	bne.n	800f402 <_strtol_l.isra.0+0xda>
 800f3f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f3f6:	b102      	cbz	r2, 800f3fa <_strtol_l.isra.0+0xd2>
 800f3f8:	4240      	negs	r0, r0
 800f3fa:	f1ba 0f00 	cmp.w	sl, #0
 800f3fe:	d0f8      	beq.n	800f3f2 <_strtol_l.isra.0+0xca>
 800f400:	b10f      	cbz	r7, 800f406 <_strtol_l.isra.0+0xde>
 800f402:	f105 39ff 	add.w	r9, r5, #4294967295
 800f406:	f8ca 9000 	str.w	r9, [sl]
 800f40a:	e7f2      	b.n	800f3f2 <_strtol_l.isra.0+0xca>
 800f40c:	2430      	movs	r4, #48	; 0x30
 800f40e:	2e00      	cmp	r6, #0
 800f410:	d1af      	bne.n	800f372 <_strtol_l.isra.0+0x4a>
 800f412:	2608      	movs	r6, #8
 800f414:	e7ad      	b.n	800f372 <_strtol_l.isra.0+0x4a>
 800f416:	2c30      	cmp	r4, #48	; 0x30
 800f418:	d0a3      	beq.n	800f362 <_strtol_l.isra.0+0x3a>
 800f41a:	260a      	movs	r6, #10
 800f41c:	e7a9      	b.n	800f372 <_strtol_l.isra.0+0x4a>
	...

0800f420 <strtol>:
 800f420:	4b08      	ldr	r3, [pc, #32]	; (800f444 <strtol+0x24>)
 800f422:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f424:	681c      	ldr	r4, [r3, #0]
 800f426:	4d08      	ldr	r5, [pc, #32]	; (800f448 <strtol+0x28>)
 800f428:	6a23      	ldr	r3, [r4, #32]
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	bf08      	it	eq
 800f42e:	462b      	moveq	r3, r5
 800f430:	9300      	str	r3, [sp, #0]
 800f432:	4613      	mov	r3, r2
 800f434:	460a      	mov	r2, r1
 800f436:	4601      	mov	r1, r0
 800f438:	4620      	mov	r0, r4
 800f43a:	f7ff ff75 	bl	800f328 <_strtol_l.isra.0>
 800f43e:	b003      	add	sp, #12
 800f440:	bd30      	pop	{r4, r5, pc}
 800f442:	bf00      	nop
 800f444:	20000010 	.word	0x20000010
 800f448:	20000074 	.word	0x20000074

0800f44c <__utoa>:
 800f44c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f44e:	4b1d      	ldr	r3, [pc, #116]	; (800f4c4 <__utoa+0x78>)
 800f450:	b08b      	sub	sp, #44	; 0x2c
 800f452:	4605      	mov	r5, r0
 800f454:	460c      	mov	r4, r1
 800f456:	466e      	mov	r6, sp
 800f458:	f103 0c20 	add.w	ip, r3, #32
 800f45c:	6818      	ldr	r0, [r3, #0]
 800f45e:	6859      	ldr	r1, [r3, #4]
 800f460:	4637      	mov	r7, r6
 800f462:	c703      	stmia	r7!, {r0, r1}
 800f464:	3308      	adds	r3, #8
 800f466:	4563      	cmp	r3, ip
 800f468:	463e      	mov	r6, r7
 800f46a:	d1f7      	bne.n	800f45c <__utoa+0x10>
 800f46c:	6818      	ldr	r0, [r3, #0]
 800f46e:	791b      	ldrb	r3, [r3, #4]
 800f470:	713b      	strb	r3, [r7, #4]
 800f472:	1e93      	subs	r3, r2, #2
 800f474:	2b22      	cmp	r3, #34	; 0x22
 800f476:	6038      	str	r0, [r7, #0]
 800f478:	f04f 0300 	mov.w	r3, #0
 800f47c:	d904      	bls.n	800f488 <__utoa+0x3c>
 800f47e:	7023      	strb	r3, [r4, #0]
 800f480:	461c      	mov	r4, r3
 800f482:	4620      	mov	r0, r4
 800f484:	b00b      	add	sp, #44	; 0x2c
 800f486:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f488:	1e66      	subs	r6, r4, #1
 800f48a:	fbb5 f0f2 	udiv	r0, r5, r2
 800f48e:	af0a      	add	r7, sp, #40	; 0x28
 800f490:	fb02 5510 	mls	r5, r2, r0, r5
 800f494:	443d      	add	r5, r7
 800f496:	1c59      	adds	r1, r3, #1
 800f498:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 800f49c:	f806 5f01 	strb.w	r5, [r6, #1]!
 800f4a0:	4605      	mov	r5, r0
 800f4a2:	b968      	cbnz	r0, 800f4c0 <__utoa+0x74>
 800f4a4:	5460      	strb	r0, [r4, r1]
 800f4a6:	4423      	add	r3, r4
 800f4a8:	4622      	mov	r2, r4
 800f4aa:	1b19      	subs	r1, r3, r4
 800f4ac:	1b10      	subs	r0, r2, r4
 800f4ae:	4281      	cmp	r1, r0
 800f4b0:	dde7      	ble.n	800f482 <__utoa+0x36>
 800f4b2:	7811      	ldrb	r1, [r2, #0]
 800f4b4:	7818      	ldrb	r0, [r3, #0]
 800f4b6:	f802 0b01 	strb.w	r0, [r2], #1
 800f4ba:	f803 1901 	strb.w	r1, [r3], #-1
 800f4be:	e7f4      	b.n	800f4aa <__utoa+0x5e>
 800f4c0:	460b      	mov	r3, r1
 800f4c2:	e7e2      	b.n	800f48a <__utoa+0x3e>
 800f4c4:	080124a0 	.word	0x080124a0

0800f4c8 <rshift>:
 800f4c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f4ca:	6906      	ldr	r6, [r0, #16]
 800f4cc:	114b      	asrs	r3, r1, #5
 800f4ce:	429e      	cmp	r6, r3
 800f4d0:	f100 0414 	add.w	r4, r0, #20
 800f4d4:	dd30      	ble.n	800f538 <rshift+0x70>
 800f4d6:	f011 011f 	ands.w	r1, r1, #31
 800f4da:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800f4de:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800f4e2:	d108      	bne.n	800f4f6 <rshift+0x2e>
 800f4e4:	4621      	mov	r1, r4
 800f4e6:	42b2      	cmp	r2, r6
 800f4e8:	460b      	mov	r3, r1
 800f4ea:	d211      	bcs.n	800f510 <rshift+0x48>
 800f4ec:	f852 3b04 	ldr.w	r3, [r2], #4
 800f4f0:	f841 3b04 	str.w	r3, [r1], #4
 800f4f4:	e7f7      	b.n	800f4e6 <rshift+0x1e>
 800f4f6:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800f4fa:	f1c1 0c20 	rsb	ip, r1, #32
 800f4fe:	40cd      	lsrs	r5, r1
 800f500:	3204      	adds	r2, #4
 800f502:	4623      	mov	r3, r4
 800f504:	42b2      	cmp	r2, r6
 800f506:	4617      	mov	r7, r2
 800f508:	d30c      	bcc.n	800f524 <rshift+0x5c>
 800f50a:	601d      	str	r5, [r3, #0]
 800f50c:	b105      	cbz	r5, 800f510 <rshift+0x48>
 800f50e:	3304      	adds	r3, #4
 800f510:	1b1a      	subs	r2, r3, r4
 800f512:	42a3      	cmp	r3, r4
 800f514:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f518:	bf08      	it	eq
 800f51a:	2300      	moveq	r3, #0
 800f51c:	6102      	str	r2, [r0, #16]
 800f51e:	bf08      	it	eq
 800f520:	6143      	streq	r3, [r0, #20]
 800f522:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f524:	683f      	ldr	r7, [r7, #0]
 800f526:	fa07 f70c 	lsl.w	r7, r7, ip
 800f52a:	433d      	orrs	r5, r7
 800f52c:	f843 5b04 	str.w	r5, [r3], #4
 800f530:	f852 5b04 	ldr.w	r5, [r2], #4
 800f534:	40cd      	lsrs	r5, r1
 800f536:	e7e5      	b.n	800f504 <rshift+0x3c>
 800f538:	4623      	mov	r3, r4
 800f53a:	e7e9      	b.n	800f510 <rshift+0x48>

0800f53c <__hexdig_fun>:
 800f53c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800f540:	2b09      	cmp	r3, #9
 800f542:	d802      	bhi.n	800f54a <__hexdig_fun+0xe>
 800f544:	3820      	subs	r0, #32
 800f546:	b2c0      	uxtb	r0, r0
 800f548:	4770      	bx	lr
 800f54a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800f54e:	2b05      	cmp	r3, #5
 800f550:	d801      	bhi.n	800f556 <__hexdig_fun+0x1a>
 800f552:	3847      	subs	r0, #71	; 0x47
 800f554:	e7f7      	b.n	800f546 <__hexdig_fun+0xa>
 800f556:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800f55a:	2b05      	cmp	r3, #5
 800f55c:	d801      	bhi.n	800f562 <__hexdig_fun+0x26>
 800f55e:	3827      	subs	r0, #39	; 0x27
 800f560:	e7f1      	b.n	800f546 <__hexdig_fun+0xa>
 800f562:	2000      	movs	r0, #0
 800f564:	4770      	bx	lr

0800f566 <__gethex>:
 800f566:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f56a:	b08b      	sub	sp, #44	; 0x2c
 800f56c:	468a      	mov	sl, r1
 800f56e:	9002      	str	r0, [sp, #8]
 800f570:	9816      	ldr	r0, [sp, #88]	; 0x58
 800f572:	9306      	str	r3, [sp, #24]
 800f574:	4690      	mov	r8, r2
 800f576:	f000 fad0 	bl	800fb1a <__localeconv_l>
 800f57a:	6803      	ldr	r3, [r0, #0]
 800f57c:	9303      	str	r3, [sp, #12]
 800f57e:	4618      	mov	r0, r3
 800f580:	f7f0 fe30 	bl	80001e4 <strlen>
 800f584:	9b03      	ldr	r3, [sp, #12]
 800f586:	9001      	str	r0, [sp, #4]
 800f588:	4403      	add	r3, r0
 800f58a:	f04f 0b00 	mov.w	fp, #0
 800f58e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800f592:	9307      	str	r3, [sp, #28]
 800f594:	f8da 3000 	ldr.w	r3, [sl]
 800f598:	3302      	adds	r3, #2
 800f59a:	461f      	mov	r7, r3
 800f59c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800f5a0:	2830      	cmp	r0, #48	; 0x30
 800f5a2:	d06c      	beq.n	800f67e <__gethex+0x118>
 800f5a4:	f7ff ffca 	bl	800f53c <__hexdig_fun>
 800f5a8:	4604      	mov	r4, r0
 800f5aa:	2800      	cmp	r0, #0
 800f5ac:	d16a      	bne.n	800f684 <__gethex+0x11e>
 800f5ae:	9a01      	ldr	r2, [sp, #4]
 800f5b0:	9903      	ldr	r1, [sp, #12]
 800f5b2:	4638      	mov	r0, r7
 800f5b4:	f7ff f813 	bl	800e5de <strncmp>
 800f5b8:	2800      	cmp	r0, #0
 800f5ba:	d166      	bne.n	800f68a <__gethex+0x124>
 800f5bc:	9b01      	ldr	r3, [sp, #4]
 800f5be:	5cf8      	ldrb	r0, [r7, r3]
 800f5c0:	18fe      	adds	r6, r7, r3
 800f5c2:	f7ff ffbb 	bl	800f53c <__hexdig_fun>
 800f5c6:	2800      	cmp	r0, #0
 800f5c8:	d062      	beq.n	800f690 <__gethex+0x12a>
 800f5ca:	4633      	mov	r3, r6
 800f5cc:	7818      	ldrb	r0, [r3, #0]
 800f5ce:	2830      	cmp	r0, #48	; 0x30
 800f5d0:	461f      	mov	r7, r3
 800f5d2:	f103 0301 	add.w	r3, r3, #1
 800f5d6:	d0f9      	beq.n	800f5cc <__gethex+0x66>
 800f5d8:	f7ff ffb0 	bl	800f53c <__hexdig_fun>
 800f5dc:	fab0 f580 	clz	r5, r0
 800f5e0:	096d      	lsrs	r5, r5, #5
 800f5e2:	4634      	mov	r4, r6
 800f5e4:	f04f 0b01 	mov.w	fp, #1
 800f5e8:	463a      	mov	r2, r7
 800f5ea:	4616      	mov	r6, r2
 800f5ec:	3201      	adds	r2, #1
 800f5ee:	7830      	ldrb	r0, [r6, #0]
 800f5f0:	f7ff ffa4 	bl	800f53c <__hexdig_fun>
 800f5f4:	2800      	cmp	r0, #0
 800f5f6:	d1f8      	bne.n	800f5ea <__gethex+0x84>
 800f5f8:	9a01      	ldr	r2, [sp, #4]
 800f5fa:	9903      	ldr	r1, [sp, #12]
 800f5fc:	4630      	mov	r0, r6
 800f5fe:	f7fe ffee 	bl	800e5de <strncmp>
 800f602:	b950      	cbnz	r0, 800f61a <__gethex+0xb4>
 800f604:	b954      	cbnz	r4, 800f61c <__gethex+0xb6>
 800f606:	9b01      	ldr	r3, [sp, #4]
 800f608:	18f4      	adds	r4, r6, r3
 800f60a:	4622      	mov	r2, r4
 800f60c:	4616      	mov	r6, r2
 800f60e:	3201      	adds	r2, #1
 800f610:	7830      	ldrb	r0, [r6, #0]
 800f612:	f7ff ff93 	bl	800f53c <__hexdig_fun>
 800f616:	2800      	cmp	r0, #0
 800f618:	d1f8      	bne.n	800f60c <__gethex+0xa6>
 800f61a:	b10c      	cbz	r4, 800f620 <__gethex+0xba>
 800f61c:	1ba4      	subs	r4, r4, r6
 800f61e:	00a4      	lsls	r4, r4, #2
 800f620:	7833      	ldrb	r3, [r6, #0]
 800f622:	2b50      	cmp	r3, #80	; 0x50
 800f624:	d001      	beq.n	800f62a <__gethex+0xc4>
 800f626:	2b70      	cmp	r3, #112	; 0x70
 800f628:	d140      	bne.n	800f6ac <__gethex+0x146>
 800f62a:	7873      	ldrb	r3, [r6, #1]
 800f62c:	2b2b      	cmp	r3, #43	; 0x2b
 800f62e:	d031      	beq.n	800f694 <__gethex+0x12e>
 800f630:	2b2d      	cmp	r3, #45	; 0x2d
 800f632:	d033      	beq.n	800f69c <__gethex+0x136>
 800f634:	1c71      	adds	r1, r6, #1
 800f636:	f04f 0900 	mov.w	r9, #0
 800f63a:	7808      	ldrb	r0, [r1, #0]
 800f63c:	f7ff ff7e 	bl	800f53c <__hexdig_fun>
 800f640:	1e43      	subs	r3, r0, #1
 800f642:	b2db      	uxtb	r3, r3
 800f644:	2b18      	cmp	r3, #24
 800f646:	d831      	bhi.n	800f6ac <__gethex+0x146>
 800f648:	f1a0 0210 	sub.w	r2, r0, #16
 800f64c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f650:	f7ff ff74 	bl	800f53c <__hexdig_fun>
 800f654:	1e43      	subs	r3, r0, #1
 800f656:	b2db      	uxtb	r3, r3
 800f658:	2b18      	cmp	r3, #24
 800f65a:	d922      	bls.n	800f6a2 <__gethex+0x13c>
 800f65c:	f1b9 0f00 	cmp.w	r9, #0
 800f660:	d000      	beq.n	800f664 <__gethex+0xfe>
 800f662:	4252      	negs	r2, r2
 800f664:	4414      	add	r4, r2
 800f666:	f8ca 1000 	str.w	r1, [sl]
 800f66a:	b30d      	cbz	r5, 800f6b0 <__gethex+0x14a>
 800f66c:	f1bb 0f00 	cmp.w	fp, #0
 800f670:	bf0c      	ite	eq
 800f672:	2706      	moveq	r7, #6
 800f674:	2700      	movne	r7, #0
 800f676:	4638      	mov	r0, r7
 800f678:	b00b      	add	sp, #44	; 0x2c
 800f67a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f67e:	f10b 0b01 	add.w	fp, fp, #1
 800f682:	e78a      	b.n	800f59a <__gethex+0x34>
 800f684:	2500      	movs	r5, #0
 800f686:	462c      	mov	r4, r5
 800f688:	e7ae      	b.n	800f5e8 <__gethex+0x82>
 800f68a:	463e      	mov	r6, r7
 800f68c:	2501      	movs	r5, #1
 800f68e:	e7c7      	b.n	800f620 <__gethex+0xba>
 800f690:	4604      	mov	r4, r0
 800f692:	e7fb      	b.n	800f68c <__gethex+0x126>
 800f694:	f04f 0900 	mov.w	r9, #0
 800f698:	1cb1      	adds	r1, r6, #2
 800f69a:	e7ce      	b.n	800f63a <__gethex+0xd4>
 800f69c:	f04f 0901 	mov.w	r9, #1
 800f6a0:	e7fa      	b.n	800f698 <__gethex+0x132>
 800f6a2:	230a      	movs	r3, #10
 800f6a4:	fb03 0202 	mla	r2, r3, r2, r0
 800f6a8:	3a10      	subs	r2, #16
 800f6aa:	e7cf      	b.n	800f64c <__gethex+0xe6>
 800f6ac:	4631      	mov	r1, r6
 800f6ae:	e7da      	b.n	800f666 <__gethex+0x100>
 800f6b0:	1bf3      	subs	r3, r6, r7
 800f6b2:	3b01      	subs	r3, #1
 800f6b4:	4629      	mov	r1, r5
 800f6b6:	2b07      	cmp	r3, #7
 800f6b8:	dc49      	bgt.n	800f74e <__gethex+0x1e8>
 800f6ba:	9802      	ldr	r0, [sp, #8]
 800f6bc:	f000 fa41 	bl	800fb42 <_Balloc>
 800f6c0:	9b01      	ldr	r3, [sp, #4]
 800f6c2:	f100 0914 	add.w	r9, r0, #20
 800f6c6:	f04f 0b00 	mov.w	fp, #0
 800f6ca:	f1c3 0301 	rsb	r3, r3, #1
 800f6ce:	4605      	mov	r5, r0
 800f6d0:	f8cd 9010 	str.w	r9, [sp, #16]
 800f6d4:	46da      	mov	sl, fp
 800f6d6:	9308      	str	r3, [sp, #32]
 800f6d8:	42b7      	cmp	r7, r6
 800f6da:	d33b      	bcc.n	800f754 <__gethex+0x1ee>
 800f6dc:	9804      	ldr	r0, [sp, #16]
 800f6de:	f840 ab04 	str.w	sl, [r0], #4
 800f6e2:	eba0 0009 	sub.w	r0, r0, r9
 800f6e6:	1080      	asrs	r0, r0, #2
 800f6e8:	6128      	str	r0, [r5, #16]
 800f6ea:	0147      	lsls	r7, r0, #5
 800f6ec:	4650      	mov	r0, sl
 800f6ee:	f000 faec 	bl	800fcca <__hi0bits>
 800f6f2:	f8d8 6000 	ldr.w	r6, [r8]
 800f6f6:	1a3f      	subs	r7, r7, r0
 800f6f8:	42b7      	cmp	r7, r6
 800f6fa:	dd64      	ble.n	800f7c6 <__gethex+0x260>
 800f6fc:	1bbf      	subs	r7, r7, r6
 800f6fe:	4639      	mov	r1, r7
 800f700:	4628      	mov	r0, r5
 800f702:	f000 fdfb 	bl	80102fc <__any_on>
 800f706:	4682      	mov	sl, r0
 800f708:	b178      	cbz	r0, 800f72a <__gethex+0x1c4>
 800f70a:	1e7b      	subs	r3, r7, #1
 800f70c:	1159      	asrs	r1, r3, #5
 800f70e:	f003 021f 	and.w	r2, r3, #31
 800f712:	f04f 0a01 	mov.w	sl, #1
 800f716:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800f71a:	fa0a f202 	lsl.w	r2, sl, r2
 800f71e:	420a      	tst	r2, r1
 800f720:	d003      	beq.n	800f72a <__gethex+0x1c4>
 800f722:	4553      	cmp	r3, sl
 800f724:	dc46      	bgt.n	800f7b4 <__gethex+0x24e>
 800f726:	f04f 0a02 	mov.w	sl, #2
 800f72a:	4639      	mov	r1, r7
 800f72c:	4628      	mov	r0, r5
 800f72e:	f7ff fecb 	bl	800f4c8 <rshift>
 800f732:	443c      	add	r4, r7
 800f734:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f738:	42a3      	cmp	r3, r4
 800f73a:	da52      	bge.n	800f7e2 <__gethex+0x27c>
 800f73c:	4629      	mov	r1, r5
 800f73e:	9802      	ldr	r0, [sp, #8]
 800f740:	f000 fa33 	bl	800fbaa <_Bfree>
 800f744:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f746:	2300      	movs	r3, #0
 800f748:	6013      	str	r3, [r2, #0]
 800f74a:	27a3      	movs	r7, #163	; 0xa3
 800f74c:	e793      	b.n	800f676 <__gethex+0x110>
 800f74e:	3101      	adds	r1, #1
 800f750:	105b      	asrs	r3, r3, #1
 800f752:	e7b0      	b.n	800f6b6 <__gethex+0x150>
 800f754:	1e73      	subs	r3, r6, #1
 800f756:	9305      	str	r3, [sp, #20]
 800f758:	9a07      	ldr	r2, [sp, #28]
 800f75a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f75e:	4293      	cmp	r3, r2
 800f760:	d018      	beq.n	800f794 <__gethex+0x22e>
 800f762:	f1bb 0f20 	cmp.w	fp, #32
 800f766:	d107      	bne.n	800f778 <__gethex+0x212>
 800f768:	9b04      	ldr	r3, [sp, #16]
 800f76a:	f8c3 a000 	str.w	sl, [r3]
 800f76e:	3304      	adds	r3, #4
 800f770:	f04f 0a00 	mov.w	sl, #0
 800f774:	9304      	str	r3, [sp, #16]
 800f776:	46d3      	mov	fp, sl
 800f778:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800f77c:	f7ff fede 	bl	800f53c <__hexdig_fun>
 800f780:	f000 000f 	and.w	r0, r0, #15
 800f784:	fa00 f00b 	lsl.w	r0, r0, fp
 800f788:	ea4a 0a00 	orr.w	sl, sl, r0
 800f78c:	f10b 0b04 	add.w	fp, fp, #4
 800f790:	9b05      	ldr	r3, [sp, #20]
 800f792:	e00d      	b.n	800f7b0 <__gethex+0x24a>
 800f794:	9b05      	ldr	r3, [sp, #20]
 800f796:	9a08      	ldr	r2, [sp, #32]
 800f798:	4413      	add	r3, r2
 800f79a:	42bb      	cmp	r3, r7
 800f79c:	d3e1      	bcc.n	800f762 <__gethex+0x1fc>
 800f79e:	4618      	mov	r0, r3
 800f7a0:	9a01      	ldr	r2, [sp, #4]
 800f7a2:	9903      	ldr	r1, [sp, #12]
 800f7a4:	9309      	str	r3, [sp, #36]	; 0x24
 800f7a6:	f7fe ff1a 	bl	800e5de <strncmp>
 800f7aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f7ac:	2800      	cmp	r0, #0
 800f7ae:	d1d8      	bne.n	800f762 <__gethex+0x1fc>
 800f7b0:	461e      	mov	r6, r3
 800f7b2:	e791      	b.n	800f6d8 <__gethex+0x172>
 800f7b4:	1eb9      	subs	r1, r7, #2
 800f7b6:	4628      	mov	r0, r5
 800f7b8:	f000 fda0 	bl	80102fc <__any_on>
 800f7bc:	2800      	cmp	r0, #0
 800f7be:	d0b2      	beq.n	800f726 <__gethex+0x1c0>
 800f7c0:	f04f 0a03 	mov.w	sl, #3
 800f7c4:	e7b1      	b.n	800f72a <__gethex+0x1c4>
 800f7c6:	da09      	bge.n	800f7dc <__gethex+0x276>
 800f7c8:	1bf7      	subs	r7, r6, r7
 800f7ca:	4629      	mov	r1, r5
 800f7cc:	463a      	mov	r2, r7
 800f7ce:	9802      	ldr	r0, [sp, #8]
 800f7d0:	f000 fbb6 	bl	800ff40 <__lshift>
 800f7d4:	1be4      	subs	r4, r4, r7
 800f7d6:	4605      	mov	r5, r0
 800f7d8:	f100 0914 	add.w	r9, r0, #20
 800f7dc:	f04f 0a00 	mov.w	sl, #0
 800f7e0:	e7a8      	b.n	800f734 <__gethex+0x1ce>
 800f7e2:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800f7e6:	42a0      	cmp	r0, r4
 800f7e8:	dd6a      	ble.n	800f8c0 <__gethex+0x35a>
 800f7ea:	1b04      	subs	r4, r0, r4
 800f7ec:	42a6      	cmp	r6, r4
 800f7ee:	dc2e      	bgt.n	800f84e <__gethex+0x2e8>
 800f7f0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f7f4:	2b02      	cmp	r3, #2
 800f7f6:	d022      	beq.n	800f83e <__gethex+0x2d8>
 800f7f8:	2b03      	cmp	r3, #3
 800f7fa:	d024      	beq.n	800f846 <__gethex+0x2e0>
 800f7fc:	2b01      	cmp	r3, #1
 800f7fe:	d115      	bne.n	800f82c <__gethex+0x2c6>
 800f800:	42a6      	cmp	r6, r4
 800f802:	d113      	bne.n	800f82c <__gethex+0x2c6>
 800f804:	2e01      	cmp	r6, #1
 800f806:	dc0b      	bgt.n	800f820 <__gethex+0x2ba>
 800f808:	9a06      	ldr	r2, [sp, #24]
 800f80a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f80e:	6013      	str	r3, [r2, #0]
 800f810:	2301      	movs	r3, #1
 800f812:	612b      	str	r3, [r5, #16]
 800f814:	f8c9 3000 	str.w	r3, [r9]
 800f818:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f81a:	2762      	movs	r7, #98	; 0x62
 800f81c:	601d      	str	r5, [r3, #0]
 800f81e:	e72a      	b.n	800f676 <__gethex+0x110>
 800f820:	1e71      	subs	r1, r6, #1
 800f822:	4628      	mov	r0, r5
 800f824:	f000 fd6a 	bl	80102fc <__any_on>
 800f828:	2800      	cmp	r0, #0
 800f82a:	d1ed      	bne.n	800f808 <__gethex+0x2a2>
 800f82c:	4629      	mov	r1, r5
 800f82e:	9802      	ldr	r0, [sp, #8]
 800f830:	f000 f9bb 	bl	800fbaa <_Bfree>
 800f834:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f836:	2300      	movs	r3, #0
 800f838:	6013      	str	r3, [r2, #0]
 800f83a:	2750      	movs	r7, #80	; 0x50
 800f83c:	e71b      	b.n	800f676 <__gethex+0x110>
 800f83e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f840:	2b00      	cmp	r3, #0
 800f842:	d0e1      	beq.n	800f808 <__gethex+0x2a2>
 800f844:	e7f2      	b.n	800f82c <__gethex+0x2c6>
 800f846:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f848:	2b00      	cmp	r3, #0
 800f84a:	d1dd      	bne.n	800f808 <__gethex+0x2a2>
 800f84c:	e7ee      	b.n	800f82c <__gethex+0x2c6>
 800f84e:	1e67      	subs	r7, r4, #1
 800f850:	f1ba 0f00 	cmp.w	sl, #0
 800f854:	d131      	bne.n	800f8ba <__gethex+0x354>
 800f856:	b127      	cbz	r7, 800f862 <__gethex+0x2fc>
 800f858:	4639      	mov	r1, r7
 800f85a:	4628      	mov	r0, r5
 800f85c:	f000 fd4e 	bl	80102fc <__any_on>
 800f860:	4682      	mov	sl, r0
 800f862:	117a      	asrs	r2, r7, #5
 800f864:	2301      	movs	r3, #1
 800f866:	f007 071f 	and.w	r7, r7, #31
 800f86a:	fa03 f707 	lsl.w	r7, r3, r7
 800f86e:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800f872:	4621      	mov	r1, r4
 800f874:	421f      	tst	r7, r3
 800f876:	4628      	mov	r0, r5
 800f878:	bf18      	it	ne
 800f87a:	f04a 0a02 	orrne.w	sl, sl, #2
 800f87e:	1b36      	subs	r6, r6, r4
 800f880:	f7ff fe22 	bl	800f4c8 <rshift>
 800f884:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800f888:	2702      	movs	r7, #2
 800f88a:	f1ba 0f00 	cmp.w	sl, #0
 800f88e:	d048      	beq.n	800f922 <__gethex+0x3bc>
 800f890:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f894:	2b02      	cmp	r3, #2
 800f896:	d015      	beq.n	800f8c4 <__gethex+0x35e>
 800f898:	2b03      	cmp	r3, #3
 800f89a:	d017      	beq.n	800f8cc <__gethex+0x366>
 800f89c:	2b01      	cmp	r3, #1
 800f89e:	d109      	bne.n	800f8b4 <__gethex+0x34e>
 800f8a0:	f01a 0f02 	tst.w	sl, #2
 800f8a4:	d006      	beq.n	800f8b4 <__gethex+0x34e>
 800f8a6:	f8d9 3000 	ldr.w	r3, [r9]
 800f8aa:	ea4a 0a03 	orr.w	sl, sl, r3
 800f8ae:	f01a 0f01 	tst.w	sl, #1
 800f8b2:	d10e      	bne.n	800f8d2 <__gethex+0x36c>
 800f8b4:	f047 0710 	orr.w	r7, r7, #16
 800f8b8:	e033      	b.n	800f922 <__gethex+0x3bc>
 800f8ba:	f04f 0a01 	mov.w	sl, #1
 800f8be:	e7d0      	b.n	800f862 <__gethex+0x2fc>
 800f8c0:	2701      	movs	r7, #1
 800f8c2:	e7e2      	b.n	800f88a <__gethex+0x324>
 800f8c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f8c6:	f1c3 0301 	rsb	r3, r3, #1
 800f8ca:	9315      	str	r3, [sp, #84]	; 0x54
 800f8cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d0f0      	beq.n	800f8b4 <__gethex+0x34e>
 800f8d2:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800f8d6:	f105 0314 	add.w	r3, r5, #20
 800f8da:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800f8de:	eb03 010a 	add.w	r1, r3, sl
 800f8e2:	f04f 0c00 	mov.w	ip, #0
 800f8e6:	4618      	mov	r0, r3
 800f8e8:	f853 2b04 	ldr.w	r2, [r3], #4
 800f8ec:	f1b2 3fff 	cmp.w	r2, #4294967295
 800f8f0:	d01c      	beq.n	800f92c <__gethex+0x3c6>
 800f8f2:	3201      	adds	r2, #1
 800f8f4:	6002      	str	r2, [r0, #0]
 800f8f6:	2f02      	cmp	r7, #2
 800f8f8:	f105 0314 	add.w	r3, r5, #20
 800f8fc:	d138      	bne.n	800f970 <__gethex+0x40a>
 800f8fe:	f8d8 2000 	ldr.w	r2, [r8]
 800f902:	3a01      	subs	r2, #1
 800f904:	42b2      	cmp	r2, r6
 800f906:	d10a      	bne.n	800f91e <__gethex+0x3b8>
 800f908:	1171      	asrs	r1, r6, #5
 800f90a:	2201      	movs	r2, #1
 800f90c:	f006 061f 	and.w	r6, r6, #31
 800f910:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f914:	fa02 f606 	lsl.w	r6, r2, r6
 800f918:	421e      	tst	r6, r3
 800f91a:	bf18      	it	ne
 800f91c:	4617      	movne	r7, r2
 800f91e:	f047 0720 	orr.w	r7, r7, #32
 800f922:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f924:	601d      	str	r5, [r3, #0]
 800f926:	9b06      	ldr	r3, [sp, #24]
 800f928:	601c      	str	r4, [r3, #0]
 800f92a:	e6a4      	b.n	800f676 <__gethex+0x110>
 800f92c:	4299      	cmp	r1, r3
 800f92e:	f843 cc04 	str.w	ip, [r3, #-4]
 800f932:	d8d8      	bhi.n	800f8e6 <__gethex+0x380>
 800f934:	68ab      	ldr	r3, [r5, #8]
 800f936:	4599      	cmp	r9, r3
 800f938:	db12      	blt.n	800f960 <__gethex+0x3fa>
 800f93a:	6869      	ldr	r1, [r5, #4]
 800f93c:	9802      	ldr	r0, [sp, #8]
 800f93e:	3101      	adds	r1, #1
 800f940:	f000 f8ff 	bl	800fb42 <_Balloc>
 800f944:	692a      	ldr	r2, [r5, #16]
 800f946:	3202      	adds	r2, #2
 800f948:	f105 010c 	add.w	r1, r5, #12
 800f94c:	4683      	mov	fp, r0
 800f94e:	0092      	lsls	r2, r2, #2
 800f950:	300c      	adds	r0, #12
 800f952:	f7fe fdfb 	bl	800e54c <memcpy>
 800f956:	4629      	mov	r1, r5
 800f958:	9802      	ldr	r0, [sp, #8]
 800f95a:	f000 f926 	bl	800fbaa <_Bfree>
 800f95e:	465d      	mov	r5, fp
 800f960:	692b      	ldr	r3, [r5, #16]
 800f962:	1c5a      	adds	r2, r3, #1
 800f964:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800f968:	612a      	str	r2, [r5, #16]
 800f96a:	2201      	movs	r2, #1
 800f96c:	615a      	str	r2, [r3, #20]
 800f96e:	e7c2      	b.n	800f8f6 <__gethex+0x390>
 800f970:	692a      	ldr	r2, [r5, #16]
 800f972:	454a      	cmp	r2, r9
 800f974:	dd0b      	ble.n	800f98e <__gethex+0x428>
 800f976:	2101      	movs	r1, #1
 800f978:	4628      	mov	r0, r5
 800f97a:	f7ff fda5 	bl	800f4c8 <rshift>
 800f97e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f982:	3401      	adds	r4, #1
 800f984:	42a3      	cmp	r3, r4
 800f986:	f6ff aed9 	blt.w	800f73c <__gethex+0x1d6>
 800f98a:	2701      	movs	r7, #1
 800f98c:	e7c7      	b.n	800f91e <__gethex+0x3b8>
 800f98e:	f016 061f 	ands.w	r6, r6, #31
 800f992:	d0fa      	beq.n	800f98a <__gethex+0x424>
 800f994:	449a      	add	sl, r3
 800f996:	f1c6 0620 	rsb	r6, r6, #32
 800f99a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800f99e:	f000 f994 	bl	800fcca <__hi0bits>
 800f9a2:	42b0      	cmp	r0, r6
 800f9a4:	dbe7      	blt.n	800f976 <__gethex+0x410>
 800f9a6:	e7f0      	b.n	800f98a <__gethex+0x424>

0800f9a8 <L_shift>:
 800f9a8:	f1c2 0208 	rsb	r2, r2, #8
 800f9ac:	0092      	lsls	r2, r2, #2
 800f9ae:	b570      	push	{r4, r5, r6, lr}
 800f9b0:	f1c2 0620 	rsb	r6, r2, #32
 800f9b4:	6843      	ldr	r3, [r0, #4]
 800f9b6:	6804      	ldr	r4, [r0, #0]
 800f9b8:	fa03 f506 	lsl.w	r5, r3, r6
 800f9bc:	432c      	orrs	r4, r5
 800f9be:	40d3      	lsrs	r3, r2
 800f9c0:	6004      	str	r4, [r0, #0]
 800f9c2:	f840 3f04 	str.w	r3, [r0, #4]!
 800f9c6:	4288      	cmp	r0, r1
 800f9c8:	d3f4      	bcc.n	800f9b4 <L_shift+0xc>
 800f9ca:	bd70      	pop	{r4, r5, r6, pc}

0800f9cc <__match>:
 800f9cc:	b530      	push	{r4, r5, lr}
 800f9ce:	6803      	ldr	r3, [r0, #0]
 800f9d0:	3301      	adds	r3, #1
 800f9d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f9d6:	b914      	cbnz	r4, 800f9de <__match+0x12>
 800f9d8:	6003      	str	r3, [r0, #0]
 800f9da:	2001      	movs	r0, #1
 800f9dc:	bd30      	pop	{r4, r5, pc}
 800f9de:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f9e2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800f9e6:	2d19      	cmp	r5, #25
 800f9e8:	bf98      	it	ls
 800f9ea:	3220      	addls	r2, #32
 800f9ec:	42a2      	cmp	r2, r4
 800f9ee:	d0f0      	beq.n	800f9d2 <__match+0x6>
 800f9f0:	2000      	movs	r0, #0
 800f9f2:	e7f3      	b.n	800f9dc <__match+0x10>

0800f9f4 <__hexnan>:
 800f9f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9f8:	680b      	ldr	r3, [r1, #0]
 800f9fa:	6801      	ldr	r1, [r0, #0]
 800f9fc:	115f      	asrs	r7, r3, #5
 800f9fe:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800fa02:	f013 031f 	ands.w	r3, r3, #31
 800fa06:	b087      	sub	sp, #28
 800fa08:	bf18      	it	ne
 800fa0a:	3704      	addne	r7, #4
 800fa0c:	2500      	movs	r5, #0
 800fa0e:	1f3e      	subs	r6, r7, #4
 800fa10:	4682      	mov	sl, r0
 800fa12:	4690      	mov	r8, r2
 800fa14:	9301      	str	r3, [sp, #4]
 800fa16:	f847 5c04 	str.w	r5, [r7, #-4]
 800fa1a:	46b1      	mov	r9, r6
 800fa1c:	4634      	mov	r4, r6
 800fa1e:	9502      	str	r5, [sp, #8]
 800fa20:	46ab      	mov	fp, r5
 800fa22:	784a      	ldrb	r2, [r1, #1]
 800fa24:	1c4b      	adds	r3, r1, #1
 800fa26:	9303      	str	r3, [sp, #12]
 800fa28:	b342      	cbz	r2, 800fa7c <__hexnan+0x88>
 800fa2a:	4610      	mov	r0, r2
 800fa2c:	9105      	str	r1, [sp, #20]
 800fa2e:	9204      	str	r2, [sp, #16]
 800fa30:	f7ff fd84 	bl	800f53c <__hexdig_fun>
 800fa34:	2800      	cmp	r0, #0
 800fa36:	d143      	bne.n	800fac0 <__hexnan+0xcc>
 800fa38:	9a04      	ldr	r2, [sp, #16]
 800fa3a:	9905      	ldr	r1, [sp, #20]
 800fa3c:	2a20      	cmp	r2, #32
 800fa3e:	d818      	bhi.n	800fa72 <__hexnan+0x7e>
 800fa40:	9b02      	ldr	r3, [sp, #8]
 800fa42:	459b      	cmp	fp, r3
 800fa44:	dd13      	ble.n	800fa6e <__hexnan+0x7a>
 800fa46:	454c      	cmp	r4, r9
 800fa48:	d206      	bcs.n	800fa58 <__hexnan+0x64>
 800fa4a:	2d07      	cmp	r5, #7
 800fa4c:	dc04      	bgt.n	800fa58 <__hexnan+0x64>
 800fa4e:	462a      	mov	r2, r5
 800fa50:	4649      	mov	r1, r9
 800fa52:	4620      	mov	r0, r4
 800fa54:	f7ff ffa8 	bl	800f9a8 <L_shift>
 800fa58:	4544      	cmp	r4, r8
 800fa5a:	d944      	bls.n	800fae6 <__hexnan+0xf2>
 800fa5c:	2300      	movs	r3, #0
 800fa5e:	f1a4 0904 	sub.w	r9, r4, #4
 800fa62:	f844 3c04 	str.w	r3, [r4, #-4]
 800fa66:	f8cd b008 	str.w	fp, [sp, #8]
 800fa6a:	464c      	mov	r4, r9
 800fa6c:	461d      	mov	r5, r3
 800fa6e:	9903      	ldr	r1, [sp, #12]
 800fa70:	e7d7      	b.n	800fa22 <__hexnan+0x2e>
 800fa72:	2a29      	cmp	r2, #41	; 0x29
 800fa74:	d14a      	bne.n	800fb0c <__hexnan+0x118>
 800fa76:	3102      	adds	r1, #2
 800fa78:	f8ca 1000 	str.w	r1, [sl]
 800fa7c:	f1bb 0f00 	cmp.w	fp, #0
 800fa80:	d044      	beq.n	800fb0c <__hexnan+0x118>
 800fa82:	454c      	cmp	r4, r9
 800fa84:	d206      	bcs.n	800fa94 <__hexnan+0xa0>
 800fa86:	2d07      	cmp	r5, #7
 800fa88:	dc04      	bgt.n	800fa94 <__hexnan+0xa0>
 800fa8a:	462a      	mov	r2, r5
 800fa8c:	4649      	mov	r1, r9
 800fa8e:	4620      	mov	r0, r4
 800fa90:	f7ff ff8a 	bl	800f9a8 <L_shift>
 800fa94:	4544      	cmp	r4, r8
 800fa96:	d928      	bls.n	800faea <__hexnan+0xf6>
 800fa98:	4643      	mov	r3, r8
 800fa9a:	f854 2b04 	ldr.w	r2, [r4], #4
 800fa9e:	f843 2b04 	str.w	r2, [r3], #4
 800faa2:	42a6      	cmp	r6, r4
 800faa4:	d2f9      	bcs.n	800fa9a <__hexnan+0xa6>
 800faa6:	2200      	movs	r2, #0
 800faa8:	f843 2b04 	str.w	r2, [r3], #4
 800faac:	429e      	cmp	r6, r3
 800faae:	d2fb      	bcs.n	800faa8 <__hexnan+0xb4>
 800fab0:	6833      	ldr	r3, [r6, #0]
 800fab2:	b91b      	cbnz	r3, 800fabc <__hexnan+0xc8>
 800fab4:	4546      	cmp	r6, r8
 800fab6:	d127      	bne.n	800fb08 <__hexnan+0x114>
 800fab8:	2301      	movs	r3, #1
 800faba:	6033      	str	r3, [r6, #0]
 800fabc:	2005      	movs	r0, #5
 800fabe:	e026      	b.n	800fb0e <__hexnan+0x11a>
 800fac0:	3501      	adds	r5, #1
 800fac2:	2d08      	cmp	r5, #8
 800fac4:	f10b 0b01 	add.w	fp, fp, #1
 800fac8:	dd06      	ble.n	800fad8 <__hexnan+0xe4>
 800faca:	4544      	cmp	r4, r8
 800facc:	d9cf      	bls.n	800fa6e <__hexnan+0x7a>
 800face:	2300      	movs	r3, #0
 800fad0:	f844 3c04 	str.w	r3, [r4, #-4]
 800fad4:	2501      	movs	r5, #1
 800fad6:	3c04      	subs	r4, #4
 800fad8:	6822      	ldr	r2, [r4, #0]
 800fada:	f000 000f 	and.w	r0, r0, #15
 800fade:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800fae2:	6020      	str	r0, [r4, #0]
 800fae4:	e7c3      	b.n	800fa6e <__hexnan+0x7a>
 800fae6:	2508      	movs	r5, #8
 800fae8:	e7c1      	b.n	800fa6e <__hexnan+0x7a>
 800faea:	9b01      	ldr	r3, [sp, #4]
 800faec:	2b00      	cmp	r3, #0
 800faee:	d0df      	beq.n	800fab0 <__hexnan+0xbc>
 800faf0:	f04f 32ff 	mov.w	r2, #4294967295
 800faf4:	f1c3 0320 	rsb	r3, r3, #32
 800faf8:	fa22 f303 	lsr.w	r3, r2, r3
 800fafc:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800fb00:	401a      	ands	r2, r3
 800fb02:	f847 2c04 	str.w	r2, [r7, #-4]
 800fb06:	e7d3      	b.n	800fab0 <__hexnan+0xbc>
 800fb08:	3e04      	subs	r6, #4
 800fb0a:	e7d1      	b.n	800fab0 <__hexnan+0xbc>
 800fb0c:	2004      	movs	r0, #4
 800fb0e:	b007      	add	sp, #28
 800fb10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fb14 <__locale_ctype_ptr_l>:
 800fb14:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800fb18:	4770      	bx	lr

0800fb1a <__localeconv_l>:
 800fb1a:	30f0      	adds	r0, #240	; 0xf0
 800fb1c:	4770      	bx	lr

0800fb1e <__ascii_mbtowc>:
 800fb1e:	b082      	sub	sp, #8
 800fb20:	b901      	cbnz	r1, 800fb24 <__ascii_mbtowc+0x6>
 800fb22:	a901      	add	r1, sp, #4
 800fb24:	b142      	cbz	r2, 800fb38 <__ascii_mbtowc+0x1a>
 800fb26:	b14b      	cbz	r3, 800fb3c <__ascii_mbtowc+0x1e>
 800fb28:	7813      	ldrb	r3, [r2, #0]
 800fb2a:	600b      	str	r3, [r1, #0]
 800fb2c:	7812      	ldrb	r2, [r2, #0]
 800fb2e:	1c10      	adds	r0, r2, #0
 800fb30:	bf18      	it	ne
 800fb32:	2001      	movne	r0, #1
 800fb34:	b002      	add	sp, #8
 800fb36:	4770      	bx	lr
 800fb38:	4610      	mov	r0, r2
 800fb3a:	e7fb      	b.n	800fb34 <__ascii_mbtowc+0x16>
 800fb3c:	f06f 0001 	mvn.w	r0, #1
 800fb40:	e7f8      	b.n	800fb34 <__ascii_mbtowc+0x16>

0800fb42 <_Balloc>:
 800fb42:	b570      	push	{r4, r5, r6, lr}
 800fb44:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800fb46:	4604      	mov	r4, r0
 800fb48:	460e      	mov	r6, r1
 800fb4a:	b93d      	cbnz	r5, 800fb5c <_Balloc+0x1a>
 800fb4c:	2010      	movs	r0, #16
 800fb4e:	f000 ff5d 	bl	8010a0c <malloc>
 800fb52:	6260      	str	r0, [r4, #36]	; 0x24
 800fb54:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800fb58:	6005      	str	r5, [r0, #0]
 800fb5a:	60c5      	str	r5, [r0, #12]
 800fb5c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800fb5e:	68eb      	ldr	r3, [r5, #12]
 800fb60:	b183      	cbz	r3, 800fb84 <_Balloc+0x42>
 800fb62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fb64:	68db      	ldr	r3, [r3, #12]
 800fb66:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800fb6a:	b9b8      	cbnz	r0, 800fb9c <_Balloc+0x5a>
 800fb6c:	2101      	movs	r1, #1
 800fb6e:	fa01 f506 	lsl.w	r5, r1, r6
 800fb72:	1d6a      	adds	r2, r5, #5
 800fb74:	0092      	lsls	r2, r2, #2
 800fb76:	4620      	mov	r0, r4
 800fb78:	f000 fbe1 	bl	801033e <_calloc_r>
 800fb7c:	b160      	cbz	r0, 800fb98 <_Balloc+0x56>
 800fb7e:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800fb82:	e00e      	b.n	800fba2 <_Balloc+0x60>
 800fb84:	2221      	movs	r2, #33	; 0x21
 800fb86:	2104      	movs	r1, #4
 800fb88:	4620      	mov	r0, r4
 800fb8a:	f000 fbd8 	bl	801033e <_calloc_r>
 800fb8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fb90:	60e8      	str	r0, [r5, #12]
 800fb92:	68db      	ldr	r3, [r3, #12]
 800fb94:	2b00      	cmp	r3, #0
 800fb96:	d1e4      	bne.n	800fb62 <_Balloc+0x20>
 800fb98:	2000      	movs	r0, #0
 800fb9a:	bd70      	pop	{r4, r5, r6, pc}
 800fb9c:	6802      	ldr	r2, [r0, #0]
 800fb9e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800fba2:	2300      	movs	r3, #0
 800fba4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fba8:	e7f7      	b.n	800fb9a <_Balloc+0x58>

0800fbaa <_Bfree>:
 800fbaa:	b570      	push	{r4, r5, r6, lr}
 800fbac:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800fbae:	4606      	mov	r6, r0
 800fbb0:	460d      	mov	r5, r1
 800fbb2:	b93c      	cbnz	r4, 800fbc4 <_Bfree+0x1a>
 800fbb4:	2010      	movs	r0, #16
 800fbb6:	f000 ff29 	bl	8010a0c <malloc>
 800fbba:	6270      	str	r0, [r6, #36]	; 0x24
 800fbbc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fbc0:	6004      	str	r4, [r0, #0]
 800fbc2:	60c4      	str	r4, [r0, #12]
 800fbc4:	b13d      	cbz	r5, 800fbd6 <_Bfree+0x2c>
 800fbc6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800fbc8:	686a      	ldr	r2, [r5, #4]
 800fbca:	68db      	ldr	r3, [r3, #12]
 800fbcc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fbd0:	6029      	str	r1, [r5, #0]
 800fbd2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800fbd6:	bd70      	pop	{r4, r5, r6, pc}

0800fbd8 <__multadd>:
 800fbd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fbdc:	690d      	ldr	r5, [r1, #16]
 800fbde:	461f      	mov	r7, r3
 800fbe0:	4606      	mov	r6, r0
 800fbe2:	460c      	mov	r4, r1
 800fbe4:	f101 0c14 	add.w	ip, r1, #20
 800fbe8:	2300      	movs	r3, #0
 800fbea:	f8dc 0000 	ldr.w	r0, [ip]
 800fbee:	b281      	uxth	r1, r0
 800fbf0:	fb02 7101 	mla	r1, r2, r1, r7
 800fbf4:	0c0f      	lsrs	r7, r1, #16
 800fbf6:	0c00      	lsrs	r0, r0, #16
 800fbf8:	fb02 7000 	mla	r0, r2, r0, r7
 800fbfc:	b289      	uxth	r1, r1
 800fbfe:	3301      	adds	r3, #1
 800fc00:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800fc04:	429d      	cmp	r5, r3
 800fc06:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800fc0a:	f84c 1b04 	str.w	r1, [ip], #4
 800fc0e:	dcec      	bgt.n	800fbea <__multadd+0x12>
 800fc10:	b1d7      	cbz	r7, 800fc48 <__multadd+0x70>
 800fc12:	68a3      	ldr	r3, [r4, #8]
 800fc14:	42ab      	cmp	r3, r5
 800fc16:	dc12      	bgt.n	800fc3e <__multadd+0x66>
 800fc18:	6861      	ldr	r1, [r4, #4]
 800fc1a:	4630      	mov	r0, r6
 800fc1c:	3101      	adds	r1, #1
 800fc1e:	f7ff ff90 	bl	800fb42 <_Balloc>
 800fc22:	6922      	ldr	r2, [r4, #16]
 800fc24:	3202      	adds	r2, #2
 800fc26:	f104 010c 	add.w	r1, r4, #12
 800fc2a:	4680      	mov	r8, r0
 800fc2c:	0092      	lsls	r2, r2, #2
 800fc2e:	300c      	adds	r0, #12
 800fc30:	f7fe fc8c 	bl	800e54c <memcpy>
 800fc34:	4621      	mov	r1, r4
 800fc36:	4630      	mov	r0, r6
 800fc38:	f7ff ffb7 	bl	800fbaa <_Bfree>
 800fc3c:	4644      	mov	r4, r8
 800fc3e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800fc42:	3501      	adds	r5, #1
 800fc44:	615f      	str	r7, [r3, #20]
 800fc46:	6125      	str	r5, [r4, #16]
 800fc48:	4620      	mov	r0, r4
 800fc4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800fc4e <__s2b>:
 800fc4e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fc52:	460c      	mov	r4, r1
 800fc54:	4615      	mov	r5, r2
 800fc56:	461f      	mov	r7, r3
 800fc58:	2209      	movs	r2, #9
 800fc5a:	3308      	adds	r3, #8
 800fc5c:	4606      	mov	r6, r0
 800fc5e:	fb93 f3f2 	sdiv	r3, r3, r2
 800fc62:	2100      	movs	r1, #0
 800fc64:	2201      	movs	r2, #1
 800fc66:	429a      	cmp	r2, r3
 800fc68:	db20      	blt.n	800fcac <__s2b+0x5e>
 800fc6a:	4630      	mov	r0, r6
 800fc6c:	f7ff ff69 	bl	800fb42 <_Balloc>
 800fc70:	9b08      	ldr	r3, [sp, #32]
 800fc72:	6143      	str	r3, [r0, #20]
 800fc74:	2d09      	cmp	r5, #9
 800fc76:	f04f 0301 	mov.w	r3, #1
 800fc7a:	6103      	str	r3, [r0, #16]
 800fc7c:	dd19      	ble.n	800fcb2 <__s2b+0x64>
 800fc7e:	f104 0809 	add.w	r8, r4, #9
 800fc82:	46c1      	mov	r9, r8
 800fc84:	442c      	add	r4, r5
 800fc86:	f819 3b01 	ldrb.w	r3, [r9], #1
 800fc8a:	4601      	mov	r1, r0
 800fc8c:	3b30      	subs	r3, #48	; 0x30
 800fc8e:	220a      	movs	r2, #10
 800fc90:	4630      	mov	r0, r6
 800fc92:	f7ff ffa1 	bl	800fbd8 <__multadd>
 800fc96:	45a1      	cmp	r9, r4
 800fc98:	d1f5      	bne.n	800fc86 <__s2b+0x38>
 800fc9a:	eb08 0405 	add.w	r4, r8, r5
 800fc9e:	3c08      	subs	r4, #8
 800fca0:	1b2d      	subs	r5, r5, r4
 800fca2:	1963      	adds	r3, r4, r5
 800fca4:	42bb      	cmp	r3, r7
 800fca6:	db07      	blt.n	800fcb8 <__s2b+0x6a>
 800fca8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fcac:	0052      	lsls	r2, r2, #1
 800fcae:	3101      	adds	r1, #1
 800fcb0:	e7d9      	b.n	800fc66 <__s2b+0x18>
 800fcb2:	340a      	adds	r4, #10
 800fcb4:	2509      	movs	r5, #9
 800fcb6:	e7f3      	b.n	800fca0 <__s2b+0x52>
 800fcb8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800fcbc:	4601      	mov	r1, r0
 800fcbe:	3b30      	subs	r3, #48	; 0x30
 800fcc0:	220a      	movs	r2, #10
 800fcc2:	4630      	mov	r0, r6
 800fcc4:	f7ff ff88 	bl	800fbd8 <__multadd>
 800fcc8:	e7eb      	b.n	800fca2 <__s2b+0x54>

0800fcca <__hi0bits>:
 800fcca:	0c02      	lsrs	r2, r0, #16
 800fccc:	0412      	lsls	r2, r2, #16
 800fcce:	4603      	mov	r3, r0
 800fcd0:	b9b2      	cbnz	r2, 800fd00 <__hi0bits+0x36>
 800fcd2:	0403      	lsls	r3, r0, #16
 800fcd4:	2010      	movs	r0, #16
 800fcd6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800fcda:	bf04      	itt	eq
 800fcdc:	021b      	lsleq	r3, r3, #8
 800fcde:	3008      	addeq	r0, #8
 800fce0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800fce4:	bf04      	itt	eq
 800fce6:	011b      	lsleq	r3, r3, #4
 800fce8:	3004      	addeq	r0, #4
 800fcea:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800fcee:	bf04      	itt	eq
 800fcf0:	009b      	lsleq	r3, r3, #2
 800fcf2:	3002      	addeq	r0, #2
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	db06      	blt.n	800fd06 <__hi0bits+0x3c>
 800fcf8:	005b      	lsls	r3, r3, #1
 800fcfa:	d503      	bpl.n	800fd04 <__hi0bits+0x3a>
 800fcfc:	3001      	adds	r0, #1
 800fcfe:	4770      	bx	lr
 800fd00:	2000      	movs	r0, #0
 800fd02:	e7e8      	b.n	800fcd6 <__hi0bits+0xc>
 800fd04:	2020      	movs	r0, #32
 800fd06:	4770      	bx	lr

0800fd08 <__lo0bits>:
 800fd08:	6803      	ldr	r3, [r0, #0]
 800fd0a:	f013 0207 	ands.w	r2, r3, #7
 800fd0e:	4601      	mov	r1, r0
 800fd10:	d00b      	beq.n	800fd2a <__lo0bits+0x22>
 800fd12:	07da      	lsls	r2, r3, #31
 800fd14:	d423      	bmi.n	800fd5e <__lo0bits+0x56>
 800fd16:	0798      	lsls	r0, r3, #30
 800fd18:	bf49      	itett	mi
 800fd1a:	085b      	lsrmi	r3, r3, #1
 800fd1c:	089b      	lsrpl	r3, r3, #2
 800fd1e:	2001      	movmi	r0, #1
 800fd20:	600b      	strmi	r3, [r1, #0]
 800fd22:	bf5c      	itt	pl
 800fd24:	600b      	strpl	r3, [r1, #0]
 800fd26:	2002      	movpl	r0, #2
 800fd28:	4770      	bx	lr
 800fd2a:	b298      	uxth	r0, r3
 800fd2c:	b9a8      	cbnz	r0, 800fd5a <__lo0bits+0x52>
 800fd2e:	0c1b      	lsrs	r3, r3, #16
 800fd30:	2010      	movs	r0, #16
 800fd32:	f013 0fff 	tst.w	r3, #255	; 0xff
 800fd36:	bf04      	itt	eq
 800fd38:	0a1b      	lsreq	r3, r3, #8
 800fd3a:	3008      	addeq	r0, #8
 800fd3c:	071a      	lsls	r2, r3, #28
 800fd3e:	bf04      	itt	eq
 800fd40:	091b      	lsreq	r3, r3, #4
 800fd42:	3004      	addeq	r0, #4
 800fd44:	079a      	lsls	r2, r3, #30
 800fd46:	bf04      	itt	eq
 800fd48:	089b      	lsreq	r3, r3, #2
 800fd4a:	3002      	addeq	r0, #2
 800fd4c:	07da      	lsls	r2, r3, #31
 800fd4e:	d402      	bmi.n	800fd56 <__lo0bits+0x4e>
 800fd50:	085b      	lsrs	r3, r3, #1
 800fd52:	d006      	beq.n	800fd62 <__lo0bits+0x5a>
 800fd54:	3001      	adds	r0, #1
 800fd56:	600b      	str	r3, [r1, #0]
 800fd58:	4770      	bx	lr
 800fd5a:	4610      	mov	r0, r2
 800fd5c:	e7e9      	b.n	800fd32 <__lo0bits+0x2a>
 800fd5e:	2000      	movs	r0, #0
 800fd60:	4770      	bx	lr
 800fd62:	2020      	movs	r0, #32
 800fd64:	4770      	bx	lr

0800fd66 <__i2b>:
 800fd66:	b510      	push	{r4, lr}
 800fd68:	460c      	mov	r4, r1
 800fd6a:	2101      	movs	r1, #1
 800fd6c:	f7ff fee9 	bl	800fb42 <_Balloc>
 800fd70:	2201      	movs	r2, #1
 800fd72:	6144      	str	r4, [r0, #20]
 800fd74:	6102      	str	r2, [r0, #16]
 800fd76:	bd10      	pop	{r4, pc}

0800fd78 <__multiply>:
 800fd78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd7c:	4614      	mov	r4, r2
 800fd7e:	690a      	ldr	r2, [r1, #16]
 800fd80:	6923      	ldr	r3, [r4, #16]
 800fd82:	429a      	cmp	r2, r3
 800fd84:	bfb8      	it	lt
 800fd86:	460b      	movlt	r3, r1
 800fd88:	4688      	mov	r8, r1
 800fd8a:	bfbc      	itt	lt
 800fd8c:	46a0      	movlt	r8, r4
 800fd8e:	461c      	movlt	r4, r3
 800fd90:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800fd94:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800fd98:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800fd9c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800fda0:	eb07 0609 	add.w	r6, r7, r9
 800fda4:	42b3      	cmp	r3, r6
 800fda6:	bfb8      	it	lt
 800fda8:	3101      	addlt	r1, #1
 800fdaa:	f7ff feca 	bl	800fb42 <_Balloc>
 800fdae:	f100 0514 	add.w	r5, r0, #20
 800fdb2:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800fdb6:	462b      	mov	r3, r5
 800fdb8:	2200      	movs	r2, #0
 800fdba:	4573      	cmp	r3, lr
 800fdbc:	d316      	bcc.n	800fdec <__multiply+0x74>
 800fdbe:	f104 0214 	add.w	r2, r4, #20
 800fdc2:	f108 0114 	add.w	r1, r8, #20
 800fdc6:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800fdca:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800fdce:	9300      	str	r3, [sp, #0]
 800fdd0:	9b00      	ldr	r3, [sp, #0]
 800fdd2:	9201      	str	r2, [sp, #4]
 800fdd4:	4293      	cmp	r3, r2
 800fdd6:	d80c      	bhi.n	800fdf2 <__multiply+0x7a>
 800fdd8:	2e00      	cmp	r6, #0
 800fdda:	dd03      	ble.n	800fde4 <__multiply+0x6c>
 800fddc:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	d05d      	beq.n	800fea0 <__multiply+0x128>
 800fde4:	6106      	str	r6, [r0, #16]
 800fde6:	b003      	add	sp, #12
 800fde8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fdec:	f843 2b04 	str.w	r2, [r3], #4
 800fdf0:	e7e3      	b.n	800fdba <__multiply+0x42>
 800fdf2:	f8b2 b000 	ldrh.w	fp, [r2]
 800fdf6:	f1bb 0f00 	cmp.w	fp, #0
 800fdfa:	d023      	beq.n	800fe44 <__multiply+0xcc>
 800fdfc:	4689      	mov	r9, r1
 800fdfe:	46ac      	mov	ip, r5
 800fe00:	f04f 0800 	mov.w	r8, #0
 800fe04:	f859 4b04 	ldr.w	r4, [r9], #4
 800fe08:	f8dc a000 	ldr.w	sl, [ip]
 800fe0c:	b2a3      	uxth	r3, r4
 800fe0e:	fa1f fa8a 	uxth.w	sl, sl
 800fe12:	fb0b a303 	mla	r3, fp, r3, sl
 800fe16:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800fe1a:	f8dc 4000 	ldr.w	r4, [ip]
 800fe1e:	4443      	add	r3, r8
 800fe20:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800fe24:	fb0b 840a 	mla	r4, fp, sl, r8
 800fe28:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800fe2c:	46e2      	mov	sl, ip
 800fe2e:	b29b      	uxth	r3, r3
 800fe30:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800fe34:	454f      	cmp	r7, r9
 800fe36:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800fe3a:	f84a 3b04 	str.w	r3, [sl], #4
 800fe3e:	d82b      	bhi.n	800fe98 <__multiply+0x120>
 800fe40:	f8cc 8004 	str.w	r8, [ip, #4]
 800fe44:	9b01      	ldr	r3, [sp, #4]
 800fe46:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800fe4a:	3204      	adds	r2, #4
 800fe4c:	f1ba 0f00 	cmp.w	sl, #0
 800fe50:	d020      	beq.n	800fe94 <__multiply+0x11c>
 800fe52:	682b      	ldr	r3, [r5, #0]
 800fe54:	4689      	mov	r9, r1
 800fe56:	46a8      	mov	r8, r5
 800fe58:	f04f 0b00 	mov.w	fp, #0
 800fe5c:	f8b9 c000 	ldrh.w	ip, [r9]
 800fe60:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800fe64:	fb0a 440c 	mla	r4, sl, ip, r4
 800fe68:	445c      	add	r4, fp
 800fe6a:	46c4      	mov	ip, r8
 800fe6c:	b29b      	uxth	r3, r3
 800fe6e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800fe72:	f84c 3b04 	str.w	r3, [ip], #4
 800fe76:	f859 3b04 	ldr.w	r3, [r9], #4
 800fe7a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800fe7e:	0c1b      	lsrs	r3, r3, #16
 800fe80:	fb0a b303 	mla	r3, sl, r3, fp
 800fe84:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800fe88:	454f      	cmp	r7, r9
 800fe8a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800fe8e:	d805      	bhi.n	800fe9c <__multiply+0x124>
 800fe90:	f8c8 3004 	str.w	r3, [r8, #4]
 800fe94:	3504      	adds	r5, #4
 800fe96:	e79b      	b.n	800fdd0 <__multiply+0x58>
 800fe98:	46d4      	mov	ip, sl
 800fe9a:	e7b3      	b.n	800fe04 <__multiply+0x8c>
 800fe9c:	46e0      	mov	r8, ip
 800fe9e:	e7dd      	b.n	800fe5c <__multiply+0xe4>
 800fea0:	3e01      	subs	r6, #1
 800fea2:	e799      	b.n	800fdd8 <__multiply+0x60>

0800fea4 <__pow5mult>:
 800fea4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fea8:	4615      	mov	r5, r2
 800feaa:	f012 0203 	ands.w	r2, r2, #3
 800feae:	4606      	mov	r6, r0
 800feb0:	460f      	mov	r7, r1
 800feb2:	d007      	beq.n	800fec4 <__pow5mult+0x20>
 800feb4:	3a01      	subs	r2, #1
 800feb6:	4c21      	ldr	r4, [pc, #132]	; (800ff3c <__pow5mult+0x98>)
 800feb8:	2300      	movs	r3, #0
 800feba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800febe:	f7ff fe8b 	bl	800fbd8 <__multadd>
 800fec2:	4607      	mov	r7, r0
 800fec4:	10ad      	asrs	r5, r5, #2
 800fec6:	d035      	beq.n	800ff34 <__pow5mult+0x90>
 800fec8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800feca:	b93c      	cbnz	r4, 800fedc <__pow5mult+0x38>
 800fecc:	2010      	movs	r0, #16
 800fece:	f000 fd9d 	bl	8010a0c <malloc>
 800fed2:	6270      	str	r0, [r6, #36]	; 0x24
 800fed4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fed8:	6004      	str	r4, [r0, #0]
 800feda:	60c4      	str	r4, [r0, #12]
 800fedc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800fee0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fee4:	b94c      	cbnz	r4, 800fefa <__pow5mult+0x56>
 800fee6:	f240 2171 	movw	r1, #625	; 0x271
 800feea:	4630      	mov	r0, r6
 800feec:	f7ff ff3b 	bl	800fd66 <__i2b>
 800fef0:	2300      	movs	r3, #0
 800fef2:	f8c8 0008 	str.w	r0, [r8, #8]
 800fef6:	4604      	mov	r4, r0
 800fef8:	6003      	str	r3, [r0, #0]
 800fefa:	f04f 0800 	mov.w	r8, #0
 800fefe:	07eb      	lsls	r3, r5, #31
 800ff00:	d50a      	bpl.n	800ff18 <__pow5mult+0x74>
 800ff02:	4639      	mov	r1, r7
 800ff04:	4622      	mov	r2, r4
 800ff06:	4630      	mov	r0, r6
 800ff08:	f7ff ff36 	bl	800fd78 <__multiply>
 800ff0c:	4639      	mov	r1, r7
 800ff0e:	4681      	mov	r9, r0
 800ff10:	4630      	mov	r0, r6
 800ff12:	f7ff fe4a 	bl	800fbaa <_Bfree>
 800ff16:	464f      	mov	r7, r9
 800ff18:	106d      	asrs	r5, r5, #1
 800ff1a:	d00b      	beq.n	800ff34 <__pow5mult+0x90>
 800ff1c:	6820      	ldr	r0, [r4, #0]
 800ff1e:	b938      	cbnz	r0, 800ff30 <__pow5mult+0x8c>
 800ff20:	4622      	mov	r2, r4
 800ff22:	4621      	mov	r1, r4
 800ff24:	4630      	mov	r0, r6
 800ff26:	f7ff ff27 	bl	800fd78 <__multiply>
 800ff2a:	6020      	str	r0, [r4, #0]
 800ff2c:	f8c0 8000 	str.w	r8, [r0]
 800ff30:	4604      	mov	r4, r0
 800ff32:	e7e4      	b.n	800fefe <__pow5mult+0x5a>
 800ff34:	4638      	mov	r0, r7
 800ff36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ff3a:	bf00      	nop
 800ff3c:	080125c0 	.word	0x080125c0

0800ff40 <__lshift>:
 800ff40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ff44:	460c      	mov	r4, r1
 800ff46:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ff4a:	6923      	ldr	r3, [r4, #16]
 800ff4c:	6849      	ldr	r1, [r1, #4]
 800ff4e:	eb0a 0903 	add.w	r9, sl, r3
 800ff52:	68a3      	ldr	r3, [r4, #8]
 800ff54:	4607      	mov	r7, r0
 800ff56:	4616      	mov	r6, r2
 800ff58:	f109 0501 	add.w	r5, r9, #1
 800ff5c:	42ab      	cmp	r3, r5
 800ff5e:	db32      	blt.n	800ffc6 <__lshift+0x86>
 800ff60:	4638      	mov	r0, r7
 800ff62:	f7ff fdee 	bl	800fb42 <_Balloc>
 800ff66:	2300      	movs	r3, #0
 800ff68:	4680      	mov	r8, r0
 800ff6a:	f100 0114 	add.w	r1, r0, #20
 800ff6e:	461a      	mov	r2, r3
 800ff70:	4553      	cmp	r3, sl
 800ff72:	db2b      	blt.n	800ffcc <__lshift+0x8c>
 800ff74:	6920      	ldr	r0, [r4, #16]
 800ff76:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ff7a:	f104 0314 	add.w	r3, r4, #20
 800ff7e:	f016 021f 	ands.w	r2, r6, #31
 800ff82:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ff86:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ff8a:	d025      	beq.n	800ffd8 <__lshift+0x98>
 800ff8c:	f1c2 0e20 	rsb	lr, r2, #32
 800ff90:	2000      	movs	r0, #0
 800ff92:	681e      	ldr	r6, [r3, #0]
 800ff94:	468a      	mov	sl, r1
 800ff96:	4096      	lsls	r6, r2
 800ff98:	4330      	orrs	r0, r6
 800ff9a:	f84a 0b04 	str.w	r0, [sl], #4
 800ff9e:	f853 0b04 	ldr.w	r0, [r3], #4
 800ffa2:	459c      	cmp	ip, r3
 800ffa4:	fa20 f00e 	lsr.w	r0, r0, lr
 800ffa8:	d814      	bhi.n	800ffd4 <__lshift+0x94>
 800ffaa:	6048      	str	r0, [r1, #4]
 800ffac:	b108      	cbz	r0, 800ffb2 <__lshift+0x72>
 800ffae:	f109 0502 	add.w	r5, r9, #2
 800ffb2:	3d01      	subs	r5, #1
 800ffb4:	4638      	mov	r0, r7
 800ffb6:	f8c8 5010 	str.w	r5, [r8, #16]
 800ffba:	4621      	mov	r1, r4
 800ffbc:	f7ff fdf5 	bl	800fbaa <_Bfree>
 800ffc0:	4640      	mov	r0, r8
 800ffc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ffc6:	3101      	adds	r1, #1
 800ffc8:	005b      	lsls	r3, r3, #1
 800ffca:	e7c7      	b.n	800ff5c <__lshift+0x1c>
 800ffcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800ffd0:	3301      	adds	r3, #1
 800ffd2:	e7cd      	b.n	800ff70 <__lshift+0x30>
 800ffd4:	4651      	mov	r1, sl
 800ffd6:	e7dc      	b.n	800ff92 <__lshift+0x52>
 800ffd8:	3904      	subs	r1, #4
 800ffda:	f853 2b04 	ldr.w	r2, [r3], #4
 800ffde:	f841 2f04 	str.w	r2, [r1, #4]!
 800ffe2:	459c      	cmp	ip, r3
 800ffe4:	d8f9      	bhi.n	800ffda <__lshift+0x9a>
 800ffe6:	e7e4      	b.n	800ffb2 <__lshift+0x72>

0800ffe8 <__mcmp>:
 800ffe8:	6903      	ldr	r3, [r0, #16]
 800ffea:	690a      	ldr	r2, [r1, #16]
 800ffec:	1a9b      	subs	r3, r3, r2
 800ffee:	b530      	push	{r4, r5, lr}
 800fff0:	d10c      	bne.n	801000c <__mcmp+0x24>
 800fff2:	0092      	lsls	r2, r2, #2
 800fff4:	3014      	adds	r0, #20
 800fff6:	3114      	adds	r1, #20
 800fff8:	1884      	adds	r4, r0, r2
 800fffa:	4411      	add	r1, r2
 800fffc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010000:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010004:	4295      	cmp	r5, r2
 8010006:	d003      	beq.n	8010010 <__mcmp+0x28>
 8010008:	d305      	bcc.n	8010016 <__mcmp+0x2e>
 801000a:	2301      	movs	r3, #1
 801000c:	4618      	mov	r0, r3
 801000e:	bd30      	pop	{r4, r5, pc}
 8010010:	42a0      	cmp	r0, r4
 8010012:	d3f3      	bcc.n	800fffc <__mcmp+0x14>
 8010014:	e7fa      	b.n	801000c <__mcmp+0x24>
 8010016:	f04f 33ff 	mov.w	r3, #4294967295
 801001a:	e7f7      	b.n	801000c <__mcmp+0x24>

0801001c <__mdiff>:
 801001c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010020:	460d      	mov	r5, r1
 8010022:	4607      	mov	r7, r0
 8010024:	4611      	mov	r1, r2
 8010026:	4628      	mov	r0, r5
 8010028:	4614      	mov	r4, r2
 801002a:	f7ff ffdd 	bl	800ffe8 <__mcmp>
 801002e:	1e06      	subs	r6, r0, #0
 8010030:	d108      	bne.n	8010044 <__mdiff+0x28>
 8010032:	4631      	mov	r1, r6
 8010034:	4638      	mov	r0, r7
 8010036:	f7ff fd84 	bl	800fb42 <_Balloc>
 801003a:	2301      	movs	r3, #1
 801003c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8010040:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010044:	bfa4      	itt	ge
 8010046:	4623      	movge	r3, r4
 8010048:	462c      	movge	r4, r5
 801004a:	4638      	mov	r0, r7
 801004c:	6861      	ldr	r1, [r4, #4]
 801004e:	bfa6      	itte	ge
 8010050:	461d      	movge	r5, r3
 8010052:	2600      	movge	r6, #0
 8010054:	2601      	movlt	r6, #1
 8010056:	f7ff fd74 	bl	800fb42 <_Balloc>
 801005a:	692b      	ldr	r3, [r5, #16]
 801005c:	60c6      	str	r6, [r0, #12]
 801005e:	6926      	ldr	r6, [r4, #16]
 8010060:	f105 0914 	add.w	r9, r5, #20
 8010064:	f104 0214 	add.w	r2, r4, #20
 8010068:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 801006c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8010070:	f100 0514 	add.w	r5, r0, #20
 8010074:	f04f 0e00 	mov.w	lr, #0
 8010078:	f852 ab04 	ldr.w	sl, [r2], #4
 801007c:	f859 4b04 	ldr.w	r4, [r9], #4
 8010080:	fa1e f18a 	uxtah	r1, lr, sl
 8010084:	b2a3      	uxth	r3, r4
 8010086:	1ac9      	subs	r1, r1, r3
 8010088:	0c23      	lsrs	r3, r4, #16
 801008a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 801008e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8010092:	b289      	uxth	r1, r1
 8010094:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8010098:	45c8      	cmp	r8, r9
 801009a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801009e:	4694      	mov	ip, r2
 80100a0:	f845 3b04 	str.w	r3, [r5], #4
 80100a4:	d8e8      	bhi.n	8010078 <__mdiff+0x5c>
 80100a6:	45bc      	cmp	ip, r7
 80100a8:	d304      	bcc.n	80100b4 <__mdiff+0x98>
 80100aa:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80100ae:	b183      	cbz	r3, 80100d2 <__mdiff+0xb6>
 80100b0:	6106      	str	r6, [r0, #16]
 80100b2:	e7c5      	b.n	8010040 <__mdiff+0x24>
 80100b4:	f85c 1b04 	ldr.w	r1, [ip], #4
 80100b8:	fa1e f381 	uxtah	r3, lr, r1
 80100bc:	141a      	asrs	r2, r3, #16
 80100be:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80100c2:	b29b      	uxth	r3, r3
 80100c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80100c8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80100cc:	f845 3b04 	str.w	r3, [r5], #4
 80100d0:	e7e9      	b.n	80100a6 <__mdiff+0x8a>
 80100d2:	3e01      	subs	r6, #1
 80100d4:	e7e9      	b.n	80100aa <__mdiff+0x8e>
	...

080100d8 <__ulp>:
 80100d8:	4b12      	ldr	r3, [pc, #72]	; (8010124 <__ulp+0x4c>)
 80100da:	ee10 2a90 	vmov	r2, s1
 80100de:	401a      	ands	r2, r3
 80100e0:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 80100e4:	2b00      	cmp	r3, #0
 80100e6:	dd04      	ble.n	80100f2 <__ulp+0x1a>
 80100e8:	2000      	movs	r0, #0
 80100ea:	4619      	mov	r1, r3
 80100ec:	ec41 0b10 	vmov	d0, r0, r1
 80100f0:	4770      	bx	lr
 80100f2:	425b      	negs	r3, r3
 80100f4:	151b      	asrs	r3, r3, #20
 80100f6:	2b13      	cmp	r3, #19
 80100f8:	f04f 0000 	mov.w	r0, #0
 80100fc:	f04f 0100 	mov.w	r1, #0
 8010100:	dc04      	bgt.n	801010c <__ulp+0x34>
 8010102:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8010106:	fa42 f103 	asr.w	r1, r2, r3
 801010a:	e7ef      	b.n	80100ec <__ulp+0x14>
 801010c:	3b14      	subs	r3, #20
 801010e:	2b1e      	cmp	r3, #30
 8010110:	f04f 0201 	mov.w	r2, #1
 8010114:	bfda      	itte	le
 8010116:	f1c3 031f 	rsble	r3, r3, #31
 801011a:	fa02 f303 	lslle.w	r3, r2, r3
 801011e:	4613      	movgt	r3, r2
 8010120:	4618      	mov	r0, r3
 8010122:	e7e3      	b.n	80100ec <__ulp+0x14>
 8010124:	7ff00000 	.word	0x7ff00000

08010128 <__b2d>:
 8010128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801012a:	6905      	ldr	r5, [r0, #16]
 801012c:	f100 0714 	add.w	r7, r0, #20
 8010130:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8010134:	1f2e      	subs	r6, r5, #4
 8010136:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801013a:	4620      	mov	r0, r4
 801013c:	f7ff fdc5 	bl	800fcca <__hi0bits>
 8010140:	f1c0 0320 	rsb	r3, r0, #32
 8010144:	280a      	cmp	r0, #10
 8010146:	600b      	str	r3, [r1, #0]
 8010148:	f8df c074 	ldr.w	ip, [pc, #116]	; 80101c0 <__b2d+0x98>
 801014c:	dc14      	bgt.n	8010178 <__b2d+0x50>
 801014e:	f1c0 0e0b 	rsb	lr, r0, #11
 8010152:	fa24 f10e 	lsr.w	r1, r4, lr
 8010156:	42b7      	cmp	r7, r6
 8010158:	ea41 030c 	orr.w	r3, r1, ip
 801015c:	bf34      	ite	cc
 801015e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8010162:	2100      	movcs	r1, #0
 8010164:	3015      	adds	r0, #21
 8010166:	fa04 f000 	lsl.w	r0, r4, r0
 801016a:	fa21 f10e 	lsr.w	r1, r1, lr
 801016e:	ea40 0201 	orr.w	r2, r0, r1
 8010172:	ec43 2b10 	vmov	d0, r2, r3
 8010176:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010178:	42b7      	cmp	r7, r6
 801017a:	bf3a      	itte	cc
 801017c:	f1a5 0608 	subcc.w	r6, r5, #8
 8010180:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8010184:	2100      	movcs	r1, #0
 8010186:	380b      	subs	r0, #11
 8010188:	d015      	beq.n	80101b6 <__b2d+0x8e>
 801018a:	4084      	lsls	r4, r0
 801018c:	f1c0 0520 	rsb	r5, r0, #32
 8010190:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8010194:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8010198:	42be      	cmp	r6, r7
 801019a:	fa21 fc05 	lsr.w	ip, r1, r5
 801019e:	ea44 030c 	orr.w	r3, r4, ip
 80101a2:	bf8c      	ite	hi
 80101a4:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80101a8:	2400      	movls	r4, #0
 80101aa:	fa01 f000 	lsl.w	r0, r1, r0
 80101ae:	40ec      	lsrs	r4, r5
 80101b0:	ea40 0204 	orr.w	r2, r0, r4
 80101b4:	e7dd      	b.n	8010172 <__b2d+0x4a>
 80101b6:	ea44 030c 	orr.w	r3, r4, ip
 80101ba:	460a      	mov	r2, r1
 80101bc:	e7d9      	b.n	8010172 <__b2d+0x4a>
 80101be:	bf00      	nop
 80101c0:	3ff00000 	.word	0x3ff00000

080101c4 <__d2b>:
 80101c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80101c8:	460e      	mov	r6, r1
 80101ca:	2101      	movs	r1, #1
 80101cc:	ec59 8b10 	vmov	r8, r9, d0
 80101d0:	4615      	mov	r5, r2
 80101d2:	f7ff fcb6 	bl	800fb42 <_Balloc>
 80101d6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80101da:	4607      	mov	r7, r0
 80101dc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80101e0:	bb34      	cbnz	r4, 8010230 <__d2b+0x6c>
 80101e2:	9301      	str	r3, [sp, #4]
 80101e4:	f1b8 0300 	subs.w	r3, r8, #0
 80101e8:	d027      	beq.n	801023a <__d2b+0x76>
 80101ea:	a802      	add	r0, sp, #8
 80101ec:	f840 3d08 	str.w	r3, [r0, #-8]!
 80101f0:	f7ff fd8a 	bl	800fd08 <__lo0bits>
 80101f4:	9900      	ldr	r1, [sp, #0]
 80101f6:	b1f0      	cbz	r0, 8010236 <__d2b+0x72>
 80101f8:	9a01      	ldr	r2, [sp, #4]
 80101fa:	f1c0 0320 	rsb	r3, r0, #32
 80101fe:	fa02 f303 	lsl.w	r3, r2, r3
 8010202:	430b      	orrs	r3, r1
 8010204:	40c2      	lsrs	r2, r0
 8010206:	617b      	str	r3, [r7, #20]
 8010208:	9201      	str	r2, [sp, #4]
 801020a:	9b01      	ldr	r3, [sp, #4]
 801020c:	61bb      	str	r3, [r7, #24]
 801020e:	2b00      	cmp	r3, #0
 8010210:	bf14      	ite	ne
 8010212:	2102      	movne	r1, #2
 8010214:	2101      	moveq	r1, #1
 8010216:	6139      	str	r1, [r7, #16]
 8010218:	b1c4      	cbz	r4, 801024c <__d2b+0x88>
 801021a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 801021e:	4404      	add	r4, r0
 8010220:	6034      	str	r4, [r6, #0]
 8010222:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010226:	6028      	str	r0, [r5, #0]
 8010228:	4638      	mov	r0, r7
 801022a:	b003      	add	sp, #12
 801022c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010230:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010234:	e7d5      	b.n	80101e2 <__d2b+0x1e>
 8010236:	6179      	str	r1, [r7, #20]
 8010238:	e7e7      	b.n	801020a <__d2b+0x46>
 801023a:	a801      	add	r0, sp, #4
 801023c:	f7ff fd64 	bl	800fd08 <__lo0bits>
 8010240:	9b01      	ldr	r3, [sp, #4]
 8010242:	617b      	str	r3, [r7, #20]
 8010244:	2101      	movs	r1, #1
 8010246:	6139      	str	r1, [r7, #16]
 8010248:	3020      	adds	r0, #32
 801024a:	e7e5      	b.n	8010218 <__d2b+0x54>
 801024c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8010250:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010254:	6030      	str	r0, [r6, #0]
 8010256:	6918      	ldr	r0, [r3, #16]
 8010258:	f7ff fd37 	bl	800fcca <__hi0bits>
 801025c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8010260:	e7e1      	b.n	8010226 <__d2b+0x62>

08010262 <__ratio>:
 8010262:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010266:	4688      	mov	r8, r1
 8010268:	4669      	mov	r1, sp
 801026a:	4681      	mov	r9, r0
 801026c:	f7ff ff5c 	bl	8010128 <__b2d>
 8010270:	a901      	add	r1, sp, #4
 8010272:	4640      	mov	r0, r8
 8010274:	ec57 6b10 	vmov	r6, r7, d0
 8010278:	f7ff ff56 	bl	8010128 <__b2d>
 801027c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010280:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8010284:	eba3 0c02 	sub.w	ip, r3, r2
 8010288:	e9dd 3200 	ldrd	r3, r2, [sp]
 801028c:	1a9b      	subs	r3, r3, r2
 801028e:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8010292:	ec5b ab10 	vmov	sl, fp, d0
 8010296:	2b00      	cmp	r3, #0
 8010298:	bfce      	itee	gt
 801029a:	463a      	movgt	r2, r7
 801029c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80102a0:	465a      	movle	r2, fp
 80102a2:	4659      	mov	r1, fp
 80102a4:	463d      	mov	r5, r7
 80102a6:	bfd4      	ite	le
 80102a8:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 80102ac:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 80102b0:	4630      	mov	r0, r6
 80102b2:	ee10 2a10 	vmov	r2, s0
 80102b6:	460b      	mov	r3, r1
 80102b8:	4629      	mov	r1, r5
 80102ba:	f7f0 fad7 	bl	800086c <__aeabi_ddiv>
 80102be:	ec41 0b10 	vmov	d0, r0, r1
 80102c2:	b003      	add	sp, #12
 80102c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080102c8 <__copybits>:
 80102c8:	3901      	subs	r1, #1
 80102ca:	b510      	push	{r4, lr}
 80102cc:	1149      	asrs	r1, r1, #5
 80102ce:	6914      	ldr	r4, [r2, #16]
 80102d0:	3101      	adds	r1, #1
 80102d2:	f102 0314 	add.w	r3, r2, #20
 80102d6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80102da:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80102de:	42a3      	cmp	r3, r4
 80102e0:	4602      	mov	r2, r0
 80102e2:	d303      	bcc.n	80102ec <__copybits+0x24>
 80102e4:	2300      	movs	r3, #0
 80102e6:	428a      	cmp	r2, r1
 80102e8:	d305      	bcc.n	80102f6 <__copybits+0x2e>
 80102ea:	bd10      	pop	{r4, pc}
 80102ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80102f0:	f840 2b04 	str.w	r2, [r0], #4
 80102f4:	e7f3      	b.n	80102de <__copybits+0x16>
 80102f6:	f842 3b04 	str.w	r3, [r2], #4
 80102fa:	e7f4      	b.n	80102e6 <__copybits+0x1e>

080102fc <__any_on>:
 80102fc:	f100 0214 	add.w	r2, r0, #20
 8010300:	6900      	ldr	r0, [r0, #16]
 8010302:	114b      	asrs	r3, r1, #5
 8010304:	4298      	cmp	r0, r3
 8010306:	b510      	push	{r4, lr}
 8010308:	db11      	blt.n	801032e <__any_on+0x32>
 801030a:	dd0a      	ble.n	8010322 <__any_on+0x26>
 801030c:	f011 011f 	ands.w	r1, r1, #31
 8010310:	d007      	beq.n	8010322 <__any_on+0x26>
 8010312:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8010316:	fa24 f001 	lsr.w	r0, r4, r1
 801031a:	fa00 f101 	lsl.w	r1, r0, r1
 801031e:	428c      	cmp	r4, r1
 8010320:	d10b      	bne.n	801033a <__any_on+0x3e>
 8010322:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010326:	4293      	cmp	r3, r2
 8010328:	d803      	bhi.n	8010332 <__any_on+0x36>
 801032a:	2000      	movs	r0, #0
 801032c:	bd10      	pop	{r4, pc}
 801032e:	4603      	mov	r3, r0
 8010330:	e7f7      	b.n	8010322 <__any_on+0x26>
 8010332:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010336:	2900      	cmp	r1, #0
 8010338:	d0f5      	beq.n	8010326 <__any_on+0x2a>
 801033a:	2001      	movs	r0, #1
 801033c:	e7f6      	b.n	801032c <__any_on+0x30>

0801033e <_calloc_r>:
 801033e:	b538      	push	{r3, r4, r5, lr}
 8010340:	fb02 f401 	mul.w	r4, r2, r1
 8010344:	4621      	mov	r1, r4
 8010346:	f000 f809 	bl	801035c <_malloc_r>
 801034a:	4605      	mov	r5, r0
 801034c:	b118      	cbz	r0, 8010356 <_calloc_r+0x18>
 801034e:	4622      	mov	r2, r4
 8010350:	2100      	movs	r1, #0
 8010352:	f7fe f906 	bl	800e562 <memset>
 8010356:	4628      	mov	r0, r5
 8010358:	bd38      	pop	{r3, r4, r5, pc}
	...

0801035c <_malloc_r>:
 801035c:	b570      	push	{r4, r5, r6, lr}
 801035e:	1ccd      	adds	r5, r1, #3
 8010360:	f025 0503 	bic.w	r5, r5, #3
 8010364:	3508      	adds	r5, #8
 8010366:	2d0c      	cmp	r5, #12
 8010368:	bf38      	it	cc
 801036a:	250c      	movcc	r5, #12
 801036c:	2d00      	cmp	r5, #0
 801036e:	4606      	mov	r6, r0
 8010370:	db01      	blt.n	8010376 <_malloc_r+0x1a>
 8010372:	42a9      	cmp	r1, r5
 8010374:	d903      	bls.n	801037e <_malloc_r+0x22>
 8010376:	230c      	movs	r3, #12
 8010378:	6033      	str	r3, [r6, #0]
 801037a:	2000      	movs	r0, #0
 801037c:	bd70      	pop	{r4, r5, r6, pc}
 801037e:	f000 fb66 	bl	8010a4e <__malloc_lock>
 8010382:	4a21      	ldr	r2, [pc, #132]	; (8010408 <_malloc_r+0xac>)
 8010384:	6814      	ldr	r4, [r2, #0]
 8010386:	4621      	mov	r1, r4
 8010388:	b991      	cbnz	r1, 80103b0 <_malloc_r+0x54>
 801038a:	4c20      	ldr	r4, [pc, #128]	; (801040c <_malloc_r+0xb0>)
 801038c:	6823      	ldr	r3, [r4, #0]
 801038e:	b91b      	cbnz	r3, 8010398 <_malloc_r+0x3c>
 8010390:	4630      	mov	r0, r6
 8010392:	f000 fb17 	bl	80109c4 <_sbrk_r>
 8010396:	6020      	str	r0, [r4, #0]
 8010398:	4629      	mov	r1, r5
 801039a:	4630      	mov	r0, r6
 801039c:	f000 fb12 	bl	80109c4 <_sbrk_r>
 80103a0:	1c43      	adds	r3, r0, #1
 80103a2:	d124      	bne.n	80103ee <_malloc_r+0x92>
 80103a4:	230c      	movs	r3, #12
 80103a6:	6033      	str	r3, [r6, #0]
 80103a8:	4630      	mov	r0, r6
 80103aa:	f000 fb51 	bl	8010a50 <__malloc_unlock>
 80103ae:	e7e4      	b.n	801037a <_malloc_r+0x1e>
 80103b0:	680b      	ldr	r3, [r1, #0]
 80103b2:	1b5b      	subs	r3, r3, r5
 80103b4:	d418      	bmi.n	80103e8 <_malloc_r+0x8c>
 80103b6:	2b0b      	cmp	r3, #11
 80103b8:	d90f      	bls.n	80103da <_malloc_r+0x7e>
 80103ba:	600b      	str	r3, [r1, #0]
 80103bc:	50cd      	str	r5, [r1, r3]
 80103be:	18cc      	adds	r4, r1, r3
 80103c0:	4630      	mov	r0, r6
 80103c2:	f000 fb45 	bl	8010a50 <__malloc_unlock>
 80103c6:	f104 000b 	add.w	r0, r4, #11
 80103ca:	1d23      	adds	r3, r4, #4
 80103cc:	f020 0007 	bic.w	r0, r0, #7
 80103d0:	1ac3      	subs	r3, r0, r3
 80103d2:	d0d3      	beq.n	801037c <_malloc_r+0x20>
 80103d4:	425a      	negs	r2, r3
 80103d6:	50e2      	str	r2, [r4, r3]
 80103d8:	e7d0      	b.n	801037c <_malloc_r+0x20>
 80103da:	428c      	cmp	r4, r1
 80103dc:	684b      	ldr	r3, [r1, #4]
 80103de:	bf16      	itet	ne
 80103e0:	6063      	strne	r3, [r4, #4]
 80103e2:	6013      	streq	r3, [r2, #0]
 80103e4:	460c      	movne	r4, r1
 80103e6:	e7eb      	b.n	80103c0 <_malloc_r+0x64>
 80103e8:	460c      	mov	r4, r1
 80103ea:	6849      	ldr	r1, [r1, #4]
 80103ec:	e7cc      	b.n	8010388 <_malloc_r+0x2c>
 80103ee:	1cc4      	adds	r4, r0, #3
 80103f0:	f024 0403 	bic.w	r4, r4, #3
 80103f4:	42a0      	cmp	r0, r4
 80103f6:	d005      	beq.n	8010404 <_malloc_r+0xa8>
 80103f8:	1a21      	subs	r1, r4, r0
 80103fa:	4630      	mov	r0, r6
 80103fc:	f000 fae2 	bl	80109c4 <_sbrk_r>
 8010400:	3001      	adds	r0, #1
 8010402:	d0cf      	beq.n	80103a4 <_malloc_r+0x48>
 8010404:	6025      	str	r5, [r4, #0]
 8010406:	e7db      	b.n	80103c0 <_malloc_r+0x64>
 8010408:	2000674c 	.word	0x2000674c
 801040c:	20006750 	.word	0x20006750

08010410 <__ssputs_r>:
 8010410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010414:	688e      	ldr	r6, [r1, #8]
 8010416:	429e      	cmp	r6, r3
 8010418:	4682      	mov	sl, r0
 801041a:	460c      	mov	r4, r1
 801041c:	4690      	mov	r8, r2
 801041e:	4699      	mov	r9, r3
 8010420:	d837      	bhi.n	8010492 <__ssputs_r+0x82>
 8010422:	898a      	ldrh	r2, [r1, #12]
 8010424:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010428:	d031      	beq.n	801048e <__ssputs_r+0x7e>
 801042a:	6825      	ldr	r5, [r4, #0]
 801042c:	6909      	ldr	r1, [r1, #16]
 801042e:	1a6f      	subs	r7, r5, r1
 8010430:	6965      	ldr	r5, [r4, #20]
 8010432:	2302      	movs	r3, #2
 8010434:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010438:	fb95 f5f3 	sdiv	r5, r5, r3
 801043c:	f109 0301 	add.w	r3, r9, #1
 8010440:	443b      	add	r3, r7
 8010442:	429d      	cmp	r5, r3
 8010444:	bf38      	it	cc
 8010446:	461d      	movcc	r5, r3
 8010448:	0553      	lsls	r3, r2, #21
 801044a:	d530      	bpl.n	80104ae <__ssputs_r+0x9e>
 801044c:	4629      	mov	r1, r5
 801044e:	f7ff ff85 	bl	801035c <_malloc_r>
 8010452:	4606      	mov	r6, r0
 8010454:	b950      	cbnz	r0, 801046c <__ssputs_r+0x5c>
 8010456:	230c      	movs	r3, #12
 8010458:	f8ca 3000 	str.w	r3, [sl]
 801045c:	89a3      	ldrh	r3, [r4, #12]
 801045e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010462:	81a3      	strh	r3, [r4, #12]
 8010464:	f04f 30ff 	mov.w	r0, #4294967295
 8010468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801046c:	463a      	mov	r2, r7
 801046e:	6921      	ldr	r1, [r4, #16]
 8010470:	f7fe f86c 	bl	800e54c <memcpy>
 8010474:	89a3      	ldrh	r3, [r4, #12]
 8010476:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801047a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801047e:	81a3      	strh	r3, [r4, #12]
 8010480:	6126      	str	r6, [r4, #16]
 8010482:	6165      	str	r5, [r4, #20]
 8010484:	443e      	add	r6, r7
 8010486:	1bed      	subs	r5, r5, r7
 8010488:	6026      	str	r6, [r4, #0]
 801048a:	60a5      	str	r5, [r4, #8]
 801048c:	464e      	mov	r6, r9
 801048e:	454e      	cmp	r6, r9
 8010490:	d900      	bls.n	8010494 <__ssputs_r+0x84>
 8010492:	464e      	mov	r6, r9
 8010494:	4632      	mov	r2, r6
 8010496:	4641      	mov	r1, r8
 8010498:	6820      	ldr	r0, [r4, #0]
 801049a:	f000 fabf 	bl	8010a1c <memmove>
 801049e:	68a3      	ldr	r3, [r4, #8]
 80104a0:	1b9b      	subs	r3, r3, r6
 80104a2:	60a3      	str	r3, [r4, #8]
 80104a4:	6823      	ldr	r3, [r4, #0]
 80104a6:	441e      	add	r6, r3
 80104a8:	6026      	str	r6, [r4, #0]
 80104aa:	2000      	movs	r0, #0
 80104ac:	e7dc      	b.n	8010468 <__ssputs_r+0x58>
 80104ae:	462a      	mov	r2, r5
 80104b0:	f000 fb1e 	bl	8010af0 <_realloc_r>
 80104b4:	4606      	mov	r6, r0
 80104b6:	2800      	cmp	r0, #0
 80104b8:	d1e2      	bne.n	8010480 <__ssputs_r+0x70>
 80104ba:	6921      	ldr	r1, [r4, #16]
 80104bc:	4650      	mov	r0, sl
 80104be:	f000 fac9 	bl	8010a54 <_free_r>
 80104c2:	e7c8      	b.n	8010456 <__ssputs_r+0x46>

080104c4 <_svfiprintf_r>:
 80104c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104c8:	461d      	mov	r5, r3
 80104ca:	898b      	ldrh	r3, [r1, #12]
 80104cc:	061f      	lsls	r7, r3, #24
 80104ce:	b09d      	sub	sp, #116	; 0x74
 80104d0:	4680      	mov	r8, r0
 80104d2:	460c      	mov	r4, r1
 80104d4:	4616      	mov	r6, r2
 80104d6:	d50f      	bpl.n	80104f8 <_svfiprintf_r+0x34>
 80104d8:	690b      	ldr	r3, [r1, #16]
 80104da:	b96b      	cbnz	r3, 80104f8 <_svfiprintf_r+0x34>
 80104dc:	2140      	movs	r1, #64	; 0x40
 80104de:	f7ff ff3d 	bl	801035c <_malloc_r>
 80104e2:	6020      	str	r0, [r4, #0]
 80104e4:	6120      	str	r0, [r4, #16]
 80104e6:	b928      	cbnz	r0, 80104f4 <_svfiprintf_r+0x30>
 80104e8:	230c      	movs	r3, #12
 80104ea:	f8c8 3000 	str.w	r3, [r8]
 80104ee:	f04f 30ff 	mov.w	r0, #4294967295
 80104f2:	e0c8      	b.n	8010686 <_svfiprintf_r+0x1c2>
 80104f4:	2340      	movs	r3, #64	; 0x40
 80104f6:	6163      	str	r3, [r4, #20]
 80104f8:	2300      	movs	r3, #0
 80104fa:	9309      	str	r3, [sp, #36]	; 0x24
 80104fc:	2320      	movs	r3, #32
 80104fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010502:	2330      	movs	r3, #48	; 0x30
 8010504:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010508:	9503      	str	r5, [sp, #12]
 801050a:	f04f 0b01 	mov.w	fp, #1
 801050e:	4637      	mov	r7, r6
 8010510:	463d      	mov	r5, r7
 8010512:	f815 3b01 	ldrb.w	r3, [r5], #1
 8010516:	b10b      	cbz	r3, 801051c <_svfiprintf_r+0x58>
 8010518:	2b25      	cmp	r3, #37	; 0x25
 801051a:	d13e      	bne.n	801059a <_svfiprintf_r+0xd6>
 801051c:	ebb7 0a06 	subs.w	sl, r7, r6
 8010520:	d00b      	beq.n	801053a <_svfiprintf_r+0x76>
 8010522:	4653      	mov	r3, sl
 8010524:	4632      	mov	r2, r6
 8010526:	4621      	mov	r1, r4
 8010528:	4640      	mov	r0, r8
 801052a:	f7ff ff71 	bl	8010410 <__ssputs_r>
 801052e:	3001      	adds	r0, #1
 8010530:	f000 80a4 	beq.w	801067c <_svfiprintf_r+0x1b8>
 8010534:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010536:	4453      	add	r3, sl
 8010538:	9309      	str	r3, [sp, #36]	; 0x24
 801053a:	783b      	ldrb	r3, [r7, #0]
 801053c:	2b00      	cmp	r3, #0
 801053e:	f000 809d 	beq.w	801067c <_svfiprintf_r+0x1b8>
 8010542:	2300      	movs	r3, #0
 8010544:	f04f 32ff 	mov.w	r2, #4294967295
 8010548:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801054c:	9304      	str	r3, [sp, #16]
 801054e:	9307      	str	r3, [sp, #28]
 8010550:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010554:	931a      	str	r3, [sp, #104]	; 0x68
 8010556:	462f      	mov	r7, r5
 8010558:	2205      	movs	r2, #5
 801055a:	f817 1b01 	ldrb.w	r1, [r7], #1
 801055e:	4850      	ldr	r0, [pc, #320]	; (80106a0 <_svfiprintf_r+0x1dc>)
 8010560:	f7ef fe4e 	bl	8000200 <memchr>
 8010564:	9b04      	ldr	r3, [sp, #16]
 8010566:	b9d0      	cbnz	r0, 801059e <_svfiprintf_r+0xda>
 8010568:	06d9      	lsls	r1, r3, #27
 801056a:	bf44      	itt	mi
 801056c:	2220      	movmi	r2, #32
 801056e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8010572:	071a      	lsls	r2, r3, #28
 8010574:	bf44      	itt	mi
 8010576:	222b      	movmi	r2, #43	; 0x2b
 8010578:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801057c:	782a      	ldrb	r2, [r5, #0]
 801057e:	2a2a      	cmp	r2, #42	; 0x2a
 8010580:	d015      	beq.n	80105ae <_svfiprintf_r+0xea>
 8010582:	9a07      	ldr	r2, [sp, #28]
 8010584:	462f      	mov	r7, r5
 8010586:	2000      	movs	r0, #0
 8010588:	250a      	movs	r5, #10
 801058a:	4639      	mov	r1, r7
 801058c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010590:	3b30      	subs	r3, #48	; 0x30
 8010592:	2b09      	cmp	r3, #9
 8010594:	d94d      	bls.n	8010632 <_svfiprintf_r+0x16e>
 8010596:	b1b8      	cbz	r0, 80105c8 <_svfiprintf_r+0x104>
 8010598:	e00f      	b.n	80105ba <_svfiprintf_r+0xf6>
 801059a:	462f      	mov	r7, r5
 801059c:	e7b8      	b.n	8010510 <_svfiprintf_r+0x4c>
 801059e:	4a40      	ldr	r2, [pc, #256]	; (80106a0 <_svfiprintf_r+0x1dc>)
 80105a0:	1a80      	subs	r0, r0, r2
 80105a2:	fa0b f000 	lsl.w	r0, fp, r0
 80105a6:	4318      	orrs	r0, r3
 80105a8:	9004      	str	r0, [sp, #16]
 80105aa:	463d      	mov	r5, r7
 80105ac:	e7d3      	b.n	8010556 <_svfiprintf_r+0x92>
 80105ae:	9a03      	ldr	r2, [sp, #12]
 80105b0:	1d11      	adds	r1, r2, #4
 80105b2:	6812      	ldr	r2, [r2, #0]
 80105b4:	9103      	str	r1, [sp, #12]
 80105b6:	2a00      	cmp	r2, #0
 80105b8:	db01      	blt.n	80105be <_svfiprintf_r+0xfa>
 80105ba:	9207      	str	r2, [sp, #28]
 80105bc:	e004      	b.n	80105c8 <_svfiprintf_r+0x104>
 80105be:	4252      	negs	r2, r2
 80105c0:	f043 0302 	orr.w	r3, r3, #2
 80105c4:	9207      	str	r2, [sp, #28]
 80105c6:	9304      	str	r3, [sp, #16]
 80105c8:	783b      	ldrb	r3, [r7, #0]
 80105ca:	2b2e      	cmp	r3, #46	; 0x2e
 80105cc:	d10c      	bne.n	80105e8 <_svfiprintf_r+0x124>
 80105ce:	787b      	ldrb	r3, [r7, #1]
 80105d0:	2b2a      	cmp	r3, #42	; 0x2a
 80105d2:	d133      	bne.n	801063c <_svfiprintf_r+0x178>
 80105d4:	9b03      	ldr	r3, [sp, #12]
 80105d6:	1d1a      	adds	r2, r3, #4
 80105d8:	681b      	ldr	r3, [r3, #0]
 80105da:	9203      	str	r2, [sp, #12]
 80105dc:	2b00      	cmp	r3, #0
 80105de:	bfb8      	it	lt
 80105e0:	f04f 33ff 	movlt.w	r3, #4294967295
 80105e4:	3702      	adds	r7, #2
 80105e6:	9305      	str	r3, [sp, #20]
 80105e8:	4d2e      	ldr	r5, [pc, #184]	; (80106a4 <_svfiprintf_r+0x1e0>)
 80105ea:	7839      	ldrb	r1, [r7, #0]
 80105ec:	2203      	movs	r2, #3
 80105ee:	4628      	mov	r0, r5
 80105f0:	f7ef fe06 	bl	8000200 <memchr>
 80105f4:	b138      	cbz	r0, 8010606 <_svfiprintf_r+0x142>
 80105f6:	2340      	movs	r3, #64	; 0x40
 80105f8:	1b40      	subs	r0, r0, r5
 80105fa:	fa03 f000 	lsl.w	r0, r3, r0
 80105fe:	9b04      	ldr	r3, [sp, #16]
 8010600:	4303      	orrs	r3, r0
 8010602:	3701      	adds	r7, #1
 8010604:	9304      	str	r3, [sp, #16]
 8010606:	7839      	ldrb	r1, [r7, #0]
 8010608:	4827      	ldr	r0, [pc, #156]	; (80106a8 <_svfiprintf_r+0x1e4>)
 801060a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801060e:	2206      	movs	r2, #6
 8010610:	1c7e      	adds	r6, r7, #1
 8010612:	f7ef fdf5 	bl	8000200 <memchr>
 8010616:	2800      	cmp	r0, #0
 8010618:	d038      	beq.n	801068c <_svfiprintf_r+0x1c8>
 801061a:	4b24      	ldr	r3, [pc, #144]	; (80106ac <_svfiprintf_r+0x1e8>)
 801061c:	bb13      	cbnz	r3, 8010664 <_svfiprintf_r+0x1a0>
 801061e:	9b03      	ldr	r3, [sp, #12]
 8010620:	3307      	adds	r3, #7
 8010622:	f023 0307 	bic.w	r3, r3, #7
 8010626:	3308      	adds	r3, #8
 8010628:	9303      	str	r3, [sp, #12]
 801062a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801062c:	444b      	add	r3, r9
 801062e:	9309      	str	r3, [sp, #36]	; 0x24
 8010630:	e76d      	b.n	801050e <_svfiprintf_r+0x4a>
 8010632:	fb05 3202 	mla	r2, r5, r2, r3
 8010636:	2001      	movs	r0, #1
 8010638:	460f      	mov	r7, r1
 801063a:	e7a6      	b.n	801058a <_svfiprintf_r+0xc6>
 801063c:	2300      	movs	r3, #0
 801063e:	3701      	adds	r7, #1
 8010640:	9305      	str	r3, [sp, #20]
 8010642:	4619      	mov	r1, r3
 8010644:	250a      	movs	r5, #10
 8010646:	4638      	mov	r0, r7
 8010648:	f810 2b01 	ldrb.w	r2, [r0], #1
 801064c:	3a30      	subs	r2, #48	; 0x30
 801064e:	2a09      	cmp	r2, #9
 8010650:	d903      	bls.n	801065a <_svfiprintf_r+0x196>
 8010652:	2b00      	cmp	r3, #0
 8010654:	d0c8      	beq.n	80105e8 <_svfiprintf_r+0x124>
 8010656:	9105      	str	r1, [sp, #20]
 8010658:	e7c6      	b.n	80105e8 <_svfiprintf_r+0x124>
 801065a:	fb05 2101 	mla	r1, r5, r1, r2
 801065e:	2301      	movs	r3, #1
 8010660:	4607      	mov	r7, r0
 8010662:	e7f0      	b.n	8010646 <_svfiprintf_r+0x182>
 8010664:	ab03      	add	r3, sp, #12
 8010666:	9300      	str	r3, [sp, #0]
 8010668:	4622      	mov	r2, r4
 801066a:	4b11      	ldr	r3, [pc, #68]	; (80106b0 <_svfiprintf_r+0x1ec>)
 801066c:	a904      	add	r1, sp, #16
 801066e:	4640      	mov	r0, r8
 8010670:	f3af 8000 	nop.w
 8010674:	f1b0 3fff 	cmp.w	r0, #4294967295
 8010678:	4681      	mov	r9, r0
 801067a:	d1d6      	bne.n	801062a <_svfiprintf_r+0x166>
 801067c:	89a3      	ldrh	r3, [r4, #12]
 801067e:	065b      	lsls	r3, r3, #25
 8010680:	f53f af35 	bmi.w	80104ee <_svfiprintf_r+0x2a>
 8010684:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010686:	b01d      	add	sp, #116	; 0x74
 8010688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801068c:	ab03      	add	r3, sp, #12
 801068e:	9300      	str	r3, [sp, #0]
 8010690:	4622      	mov	r2, r4
 8010692:	4b07      	ldr	r3, [pc, #28]	; (80106b0 <_svfiprintf_r+0x1ec>)
 8010694:	a904      	add	r1, sp, #16
 8010696:	4640      	mov	r0, r8
 8010698:	f000 f882 	bl	80107a0 <_printf_i>
 801069c:	e7ea      	b.n	8010674 <_svfiprintf_r+0x1b0>
 801069e:	bf00      	nop
 80106a0:	080125cc 	.word	0x080125cc
 80106a4:	080125d2 	.word	0x080125d2
 80106a8:	080125d6 	.word	0x080125d6
 80106ac:	00000000 	.word	0x00000000
 80106b0:	08010411 	.word	0x08010411

080106b4 <_printf_common>:
 80106b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80106b8:	4691      	mov	r9, r2
 80106ba:	461f      	mov	r7, r3
 80106bc:	688a      	ldr	r2, [r1, #8]
 80106be:	690b      	ldr	r3, [r1, #16]
 80106c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80106c4:	4293      	cmp	r3, r2
 80106c6:	bfb8      	it	lt
 80106c8:	4613      	movlt	r3, r2
 80106ca:	f8c9 3000 	str.w	r3, [r9]
 80106ce:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80106d2:	4606      	mov	r6, r0
 80106d4:	460c      	mov	r4, r1
 80106d6:	b112      	cbz	r2, 80106de <_printf_common+0x2a>
 80106d8:	3301      	adds	r3, #1
 80106da:	f8c9 3000 	str.w	r3, [r9]
 80106de:	6823      	ldr	r3, [r4, #0]
 80106e0:	0699      	lsls	r1, r3, #26
 80106e2:	bf42      	ittt	mi
 80106e4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80106e8:	3302      	addmi	r3, #2
 80106ea:	f8c9 3000 	strmi.w	r3, [r9]
 80106ee:	6825      	ldr	r5, [r4, #0]
 80106f0:	f015 0506 	ands.w	r5, r5, #6
 80106f4:	d107      	bne.n	8010706 <_printf_common+0x52>
 80106f6:	f104 0a19 	add.w	sl, r4, #25
 80106fa:	68e3      	ldr	r3, [r4, #12]
 80106fc:	f8d9 2000 	ldr.w	r2, [r9]
 8010700:	1a9b      	subs	r3, r3, r2
 8010702:	42ab      	cmp	r3, r5
 8010704:	dc28      	bgt.n	8010758 <_printf_common+0xa4>
 8010706:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801070a:	6822      	ldr	r2, [r4, #0]
 801070c:	3300      	adds	r3, #0
 801070e:	bf18      	it	ne
 8010710:	2301      	movne	r3, #1
 8010712:	0692      	lsls	r2, r2, #26
 8010714:	d42d      	bmi.n	8010772 <_printf_common+0xbe>
 8010716:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801071a:	4639      	mov	r1, r7
 801071c:	4630      	mov	r0, r6
 801071e:	47c0      	blx	r8
 8010720:	3001      	adds	r0, #1
 8010722:	d020      	beq.n	8010766 <_printf_common+0xb2>
 8010724:	6823      	ldr	r3, [r4, #0]
 8010726:	68e5      	ldr	r5, [r4, #12]
 8010728:	f8d9 2000 	ldr.w	r2, [r9]
 801072c:	f003 0306 	and.w	r3, r3, #6
 8010730:	2b04      	cmp	r3, #4
 8010732:	bf08      	it	eq
 8010734:	1aad      	subeq	r5, r5, r2
 8010736:	68a3      	ldr	r3, [r4, #8]
 8010738:	6922      	ldr	r2, [r4, #16]
 801073a:	bf0c      	ite	eq
 801073c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010740:	2500      	movne	r5, #0
 8010742:	4293      	cmp	r3, r2
 8010744:	bfc4      	itt	gt
 8010746:	1a9b      	subgt	r3, r3, r2
 8010748:	18ed      	addgt	r5, r5, r3
 801074a:	f04f 0900 	mov.w	r9, #0
 801074e:	341a      	adds	r4, #26
 8010750:	454d      	cmp	r5, r9
 8010752:	d11a      	bne.n	801078a <_printf_common+0xd6>
 8010754:	2000      	movs	r0, #0
 8010756:	e008      	b.n	801076a <_printf_common+0xb6>
 8010758:	2301      	movs	r3, #1
 801075a:	4652      	mov	r2, sl
 801075c:	4639      	mov	r1, r7
 801075e:	4630      	mov	r0, r6
 8010760:	47c0      	blx	r8
 8010762:	3001      	adds	r0, #1
 8010764:	d103      	bne.n	801076e <_printf_common+0xba>
 8010766:	f04f 30ff 	mov.w	r0, #4294967295
 801076a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801076e:	3501      	adds	r5, #1
 8010770:	e7c3      	b.n	80106fa <_printf_common+0x46>
 8010772:	18e1      	adds	r1, r4, r3
 8010774:	1c5a      	adds	r2, r3, #1
 8010776:	2030      	movs	r0, #48	; 0x30
 8010778:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801077c:	4422      	add	r2, r4
 801077e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010782:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010786:	3302      	adds	r3, #2
 8010788:	e7c5      	b.n	8010716 <_printf_common+0x62>
 801078a:	2301      	movs	r3, #1
 801078c:	4622      	mov	r2, r4
 801078e:	4639      	mov	r1, r7
 8010790:	4630      	mov	r0, r6
 8010792:	47c0      	blx	r8
 8010794:	3001      	adds	r0, #1
 8010796:	d0e6      	beq.n	8010766 <_printf_common+0xb2>
 8010798:	f109 0901 	add.w	r9, r9, #1
 801079c:	e7d8      	b.n	8010750 <_printf_common+0x9c>
	...

080107a0 <_printf_i>:
 80107a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80107a4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80107a8:	460c      	mov	r4, r1
 80107aa:	7e09      	ldrb	r1, [r1, #24]
 80107ac:	b085      	sub	sp, #20
 80107ae:	296e      	cmp	r1, #110	; 0x6e
 80107b0:	4617      	mov	r7, r2
 80107b2:	4606      	mov	r6, r0
 80107b4:	4698      	mov	r8, r3
 80107b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80107b8:	f000 80b3 	beq.w	8010922 <_printf_i+0x182>
 80107bc:	d822      	bhi.n	8010804 <_printf_i+0x64>
 80107be:	2963      	cmp	r1, #99	; 0x63
 80107c0:	d036      	beq.n	8010830 <_printf_i+0x90>
 80107c2:	d80a      	bhi.n	80107da <_printf_i+0x3a>
 80107c4:	2900      	cmp	r1, #0
 80107c6:	f000 80b9 	beq.w	801093c <_printf_i+0x19c>
 80107ca:	2958      	cmp	r1, #88	; 0x58
 80107cc:	f000 8083 	beq.w	80108d6 <_printf_i+0x136>
 80107d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80107d4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80107d8:	e032      	b.n	8010840 <_printf_i+0xa0>
 80107da:	2964      	cmp	r1, #100	; 0x64
 80107dc:	d001      	beq.n	80107e2 <_printf_i+0x42>
 80107de:	2969      	cmp	r1, #105	; 0x69
 80107e0:	d1f6      	bne.n	80107d0 <_printf_i+0x30>
 80107e2:	6820      	ldr	r0, [r4, #0]
 80107e4:	6813      	ldr	r3, [r2, #0]
 80107e6:	0605      	lsls	r5, r0, #24
 80107e8:	f103 0104 	add.w	r1, r3, #4
 80107ec:	d52a      	bpl.n	8010844 <_printf_i+0xa4>
 80107ee:	681b      	ldr	r3, [r3, #0]
 80107f0:	6011      	str	r1, [r2, #0]
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	da03      	bge.n	80107fe <_printf_i+0x5e>
 80107f6:	222d      	movs	r2, #45	; 0x2d
 80107f8:	425b      	negs	r3, r3
 80107fa:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80107fe:	486f      	ldr	r0, [pc, #444]	; (80109bc <_printf_i+0x21c>)
 8010800:	220a      	movs	r2, #10
 8010802:	e039      	b.n	8010878 <_printf_i+0xd8>
 8010804:	2973      	cmp	r1, #115	; 0x73
 8010806:	f000 809d 	beq.w	8010944 <_printf_i+0x1a4>
 801080a:	d808      	bhi.n	801081e <_printf_i+0x7e>
 801080c:	296f      	cmp	r1, #111	; 0x6f
 801080e:	d020      	beq.n	8010852 <_printf_i+0xb2>
 8010810:	2970      	cmp	r1, #112	; 0x70
 8010812:	d1dd      	bne.n	80107d0 <_printf_i+0x30>
 8010814:	6823      	ldr	r3, [r4, #0]
 8010816:	f043 0320 	orr.w	r3, r3, #32
 801081a:	6023      	str	r3, [r4, #0]
 801081c:	e003      	b.n	8010826 <_printf_i+0x86>
 801081e:	2975      	cmp	r1, #117	; 0x75
 8010820:	d017      	beq.n	8010852 <_printf_i+0xb2>
 8010822:	2978      	cmp	r1, #120	; 0x78
 8010824:	d1d4      	bne.n	80107d0 <_printf_i+0x30>
 8010826:	2378      	movs	r3, #120	; 0x78
 8010828:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801082c:	4864      	ldr	r0, [pc, #400]	; (80109c0 <_printf_i+0x220>)
 801082e:	e055      	b.n	80108dc <_printf_i+0x13c>
 8010830:	6813      	ldr	r3, [r2, #0]
 8010832:	1d19      	adds	r1, r3, #4
 8010834:	681b      	ldr	r3, [r3, #0]
 8010836:	6011      	str	r1, [r2, #0]
 8010838:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801083c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010840:	2301      	movs	r3, #1
 8010842:	e08c      	b.n	801095e <_printf_i+0x1be>
 8010844:	681b      	ldr	r3, [r3, #0]
 8010846:	6011      	str	r1, [r2, #0]
 8010848:	f010 0f40 	tst.w	r0, #64	; 0x40
 801084c:	bf18      	it	ne
 801084e:	b21b      	sxthne	r3, r3
 8010850:	e7cf      	b.n	80107f2 <_printf_i+0x52>
 8010852:	6813      	ldr	r3, [r2, #0]
 8010854:	6825      	ldr	r5, [r4, #0]
 8010856:	1d18      	adds	r0, r3, #4
 8010858:	6010      	str	r0, [r2, #0]
 801085a:	0628      	lsls	r0, r5, #24
 801085c:	d501      	bpl.n	8010862 <_printf_i+0xc2>
 801085e:	681b      	ldr	r3, [r3, #0]
 8010860:	e002      	b.n	8010868 <_printf_i+0xc8>
 8010862:	0668      	lsls	r0, r5, #25
 8010864:	d5fb      	bpl.n	801085e <_printf_i+0xbe>
 8010866:	881b      	ldrh	r3, [r3, #0]
 8010868:	4854      	ldr	r0, [pc, #336]	; (80109bc <_printf_i+0x21c>)
 801086a:	296f      	cmp	r1, #111	; 0x6f
 801086c:	bf14      	ite	ne
 801086e:	220a      	movne	r2, #10
 8010870:	2208      	moveq	r2, #8
 8010872:	2100      	movs	r1, #0
 8010874:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010878:	6865      	ldr	r5, [r4, #4]
 801087a:	60a5      	str	r5, [r4, #8]
 801087c:	2d00      	cmp	r5, #0
 801087e:	f2c0 8095 	blt.w	80109ac <_printf_i+0x20c>
 8010882:	6821      	ldr	r1, [r4, #0]
 8010884:	f021 0104 	bic.w	r1, r1, #4
 8010888:	6021      	str	r1, [r4, #0]
 801088a:	2b00      	cmp	r3, #0
 801088c:	d13d      	bne.n	801090a <_printf_i+0x16a>
 801088e:	2d00      	cmp	r5, #0
 8010890:	f040 808e 	bne.w	80109b0 <_printf_i+0x210>
 8010894:	4665      	mov	r5, ip
 8010896:	2a08      	cmp	r2, #8
 8010898:	d10b      	bne.n	80108b2 <_printf_i+0x112>
 801089a:	6823      	ldr	r3, [r4, #0]
 801089c:	07db      	lsls	r3, r3, #31
 801089e:	d508      	bpl.n	80108b2 <_printf_i+0x112>
 80108a0:	6923      	ldr	r3, [r4, #16]
 80108a2:	6862      	ldr	r2, [r4, #4]
 80108a4:	429a      	cmp	r2, r3
 80108a6:	bfde      	ittt	le
 80108a8:	2330      	movle	r3, #48	; 0x30
 80108aa:	f805 3c01 	strble.w	r3, [r5, #-1]
 80108ae:	f105 35ff 	addle.w	r5, r5, #4294967295
 80108b2:	ebac 0305 	sub.w	r3, ip, r5
 80108b6:	6123      	str	r3, [r4, #16]
 80108b8:	f8cd 8000 	str.w	r8, [sp]
 80108bc:	463b      	mov	r3, r7
 80108be:	aa03      	add	r2, sp, #12
 80108c0:	4621      	mov	r1, r4
 80108c2:	4630      	mov	r0, r6
 80108c4:	f7ff fef6 	bl	80106b4 <_printf_common>
 80108c8:	3001      	adds	r0, #1
 80108ca:	d14d      	bne.n	8010968 <_printf_i+0x1c8>
 80108cc:	f04f 30ff 	mov.w	r0, #4294967295
 80108d0:	b005      	add	sp, #20
 80108d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80108d6:	4839      	ldr	r0, [pc, #228]	; (80109bc <_printf_i+0x21c>)
 80108d8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80108dc:	6813      	ldr	r3, [r2, #0]
 80108de:	6821      	ldr	r1, [r4, #0]
 80108e0:	1d1d      	adds	r5, r3, #4
 80108e2:	681b      	ldr	r3, [r3, #0]
 80108e4:	6015      	str	r5, [r2, #0]
 80108e6:	060a      	lsls	r2, r1, #24
 80108e8:	d50b      	bpl.n	8010902 <_printf_i+0x162>
 80108ea:	07ca      	lsls	r2, r1, #31
 80108ec:	bf44      	itt	mi
 80108ee:	f041 0120 	orrmi.w	r1, r1, #32
 80108f2:	6021      	strmi	r1, [r4, #0]
 80108f4:	b91b      	cbnz	r3, 80108fe <_printf_i+0x15e>
 80108f6:	6822      	ldr	r2, [r4, #0]
 80108f8:	f022 0220 	bic.w	r2, r2, #32
 80108fc:	6022      	str	r2, [r4, #0]
 80108fe:	2210      	movs	r2, #16
 8010900:	e7b7      	b.n	8010872 <_printf_i+0xd2>
 8010902:	064d      	lsls	r5, r1, #25
 8010904:	bf48      	it	mi
 8010906:	b29b      	uxthmi	r3, r3
 8010908:	e7ef      	b.n	80108ea <_printf_i+0x14a>
 801090a:	4665      	mov	r5, ip
 801090c:	fbb3 f1f2 	udiv	r1, r3, r2
 8010910:	fb02 3311 	mls	r3, r2, r1, r3
 8010914:	5cc3      	ldrb	r3, [r0, r3]
 8010916:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801091a:	460b      	mov	r3, r1
 801091c:	2900      	cmp	r1, #0
 801091e:	d1f5      	bne.n	801090c <_printf_i+0x16c>
 8010920:	e7b9      	b.n	8010896 <_printf_i+0xf6>
 8010922:	6813      	ldr	r3, [r2, #0]
 8010924:	6825      	ldr	r5, [r4, #0]
 8010926:	6961      	ldr	r1, [r4, #20]
 8010928:	1d18      	adds	r0, r3, #4
 801092a:	6010      	str	r0, [r2, #0]
 801092c:	0628      	lsls	r0, r5, #24
 801092e:	681b      	ldr	r3, [r3, #0]
 8010930:	d501      	bpl.n	8010936 <_printf_i+0x196>
 8010932:	6019      	str	r1, [r3, #0]
 8010934:	e002      	b.n	801093c <_printf_i+0x19c>
 8010936:	066a      	lsls	r2, r5, #25
 8010938:	d5fb      	bpl.n	8010932 <_printf_i+0x192>
 801093a:	8019      	strh	r1, [r3, #0]
 801093c:	2300      	movs	r3, #0
 801093e:	6123      	str	r3, [r4, #16]
 8010940:	4665      	mov	r5, ip
 8010942:	e7b9      	b.n	80108b8 <_printf_i+0x118>
 8010944:	6813      	ldr	r3, [r2, #0]
 8010946:	1d19      	adds	r1, r3, #4
 8010948:	6011      	str	r1, [r2, #0]
 801094a:	681d      	ldr	r5, [r3, #0]
 801094c:	6862      	ldr	r2, [r4, #4]
 801094e:	2100      	movs	r1, #0
 8010950:	4628      	mov	r0, r5
 8010952:	f7ef fc55 	bl	8000200 <memchr>
 8010956:	b108      	cbz	r0, 801095c <_printf_i+0x1bc>
 8010958:	1b40      	subs	r0, r0, r5
 801095a:	6060      	str	r0, [r4, #4]
 801095c:	6863      	ldr	r3, [r4, #4]
 801095e:	6123      	str	r3, [r4, #16]
 8010960:	2300      	movs	r3, #0
 8010962:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010966:	e7a7      	b.n	80108b8 <_printf_i+0x118>
 8010968:	6923      	ldr	r3, [r4, #16]
 801096a:	462a      	mov	r2, r5
 801096c:	4639      	mov	r1, r7
 801096e:	4630      	mov	r0, r6
 8010970:	47c0      	blx	r8
 8010972:	3001      	adds	r0, #1
 8010974:	d0aa      	beq.n	80108cc <_printf_i+0x12c>
 8010976:	6823      	ldr	r3, [r4, #0]
 8010978:	079b      	lsls	r3, r3, #30
 801097a:	d413      	bmi.n	80109a4 <_printf_i+0x204>
 801097c:	68e0      	ldr	r0, [r4, #12]
 801097e:	9b03      	ldr	r3, [sp, #12]
 8010980:	4298      	cmp	r0, r3
 8010982:	bfb8      	it	lt
 8010984:	4618      	movlt	r0, r3
 8010986:	e7a3      	b.n	80108d0 <_printf_i+0x130>
 8010988:	2301      	movs	r3, #1
 801098a:	464a      	mov	r2, r9
 801098c:	4639      	mov	r1, r7
 801098e:	4630      	mov	r0, r6
 8010990:	47c0      	blx	r8
 8010992:	3001      	adds	r0, #1
 8010994:	d09a      	beq.n	80108cc <_printf_i+0x12c>
 8010996:	3501      	adds	r5, #1
 8010998:	68e3      	ldr	r3, [r4, #12]
 801099a:	9a03      	ldr	r2, [sp, #12]
 801099c:	1a9b      	subs	r3, r3, r2
 801099e:	42ab      	cmp	r3, r5
 80109a0:	dcf2      	bgt.n	8010988 <_printf_i+0x1e8>
 80109a2:	e7eb      	b.n	801097c <_printf_i+0x1dc>
 80109a4:	2500      	movs	r5, #0
 80109a6:	f104 0919 	add.w	r9, r4, #25
 80109aa:	e7f5      	b.n	8010998 <_printf_i+0x1f8>
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	d1ac      	bne.n	801090a <_printf_i+0x16a>
 80109b0:	7803      	ldrb	r3, [r0, #0]
 80109b2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80109b6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80109ba:	e76c      	b.n	8010896 <_printf_i+0xf6>
 80109bc:	080125dd 	.word	0x080125dd
 80109c0:	080125ee 	.word	0x080125ee

080109c4 <_sbrk_r>:
 80109c4:	b538      	push	{r3, r4, r5, lr}
 80109c6:	4c06      	ldr	r4, [pc, #24]	; (80109e0 <_sbrk_r+0x1c>)
 80109c8:	2300      	movs	r3, #0
 80109ca:	4605      	mov	r5, r0
 80109cc:	4608      	mov	r0, r1
 80109ce:	6023      	str	r3, [r4, #0]
 80109d0:	f001 f96c 	bl	8011cac <_sbrk>
 80109d4:	1c43      	adds	r3, r0, #1
 80109d6:	d102      	bne.n	80109de <_sbrk_r+0x1a>
 80109d8:	6823      	ldr	r3, [r4, #0]
 80109da:	b103      	cbz	r3, 80109de <_sbrk_r+0x1a>
 80109dc:	602b      	str	r3, [r5, #0]
 80109de:	bd38      	pop	{r3, r4, r5, pc}
 80109e0:	20008424 	.word	0x20008424

080109e4 <nanf>:
 80109e4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80109ec <nanf+0x8>
 80109e8:	4770      	bx	lr
 80109ea:	bf00      	nop
 80109ec:	7fc00000 	.word	0x7fc00000

080109f0 <__ascii_wctomb>:
 80109f0:	b149      	cbz	r1, 8010a06 <__ascii_wctomb+0x16>
 80109f2:	2aff      	cmp	r2, #255	; 0xff
 80109f4:	bf85      	ittet	hi
 80109f6:	238a      	movhi	r3, #138	; 0x8a
 80109f8:	6003      	strhi	r3, [r0, #0]
 80109fa:	700a      	strbls	r2, [r1, #0]
 80109fc:	f04f 30ff 	movhi.w	r0, #4294967295
 8010a00:	bf98      	it	ls
 8010a02:	2001      	movls	r0, #1
 8010a04:	4770      	bx	lr
 8010a06:	4608      	mov	r0, r1
 8010a08:	4770      	bx	lr
	...

08010a0c <malloc>:
 8010a0c:	4b02      	ldr	r3, [pc, #8]	; (8010a18 <malloc+0xc>)
 8010a0e:	4601      	mov	r1, r0
 8010a10:	6818      	ldr	r0, [r3, #0]
 8010a12:	f7ff bca3 	b.w	801035c <_malloc_r>
 8010a16:	bf00      	nop
 8010a18:	20000010 	.word	0x20000010

08010a1c <memmove>:
 8010a1c:	4288      	cmp	r0, r1
 8010a1e:	b510      	push	{r4, lr}
 8010a20:	eb01 0302 	add.w	r3, r1, r2
 8010a24:	d807      	bhi.n	8010a36 <memmove+0x1a>
 8010a26:	1e42      	subs	r2, r0, #1
 8010a28:	4299      	cmp	r1, r3
 8010a2a:	d00a      	beq.n	8010a42 <memmove+0x26>
 8010a2c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010a30:	f802 4f01 	strb.w	r4, [r2, #1]!
 8010a34:	e7f8      	b.n	8010a28 <memmove+0xc>
 8010a36:	4283      	cmp	r3, r0
 8010a38:	d9f5      	bls.n	8010a26 <memmove+0xa>
 8010a3a:	1881      	adds	r1, r0, r2
 8010a3c:	1ad2      	subs	r2, r2, r3
 8010a3e:	42d3      	cmn	r3, r2
 8010a40:	d100      	bne.n	8010a44 <memmove+0x28>
 8010a42:	bd10      	pop	{r4, pc}
 8010a44:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010a48:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8010a4c:	e7f7      	b.n	8010a3e <memmove+0x22>

08010a4e <__malloc_lock>:
 8010a4e:	4770      	bx	lr

08010a50 <__malloc_unlock>:
 8010a50:	4770      	bx	lr
	...

08010a54 <_free_r>:
 8010a54:	b538      	push	{r3, r4, r5, lr}
 8010a56:	4605      	mov	r5, r0
 8010a58:	2900      	cmp	r1, #0
 8010a5a:	d045      	beq.n	8010ae8 <_free_r+0x94>
 8010a5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010a60:	1f0c      	subs	r4, r1, #4
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	bfb8      	it	lt
 8010a66:	18e4      	addlt	r4, r4, r3
 8010a68:	f7ff fff1 	bl	8010a4e <__malloc_lock>
 8010a6c:	4a1f      	ldr	r2, [pc, #124]	; (8010aec <_free_r+0x98>)
 8010a6e:	6813      	ldr	r3, [r2, #0]
 8010a70:	4610      	mov	r0, r2
 8010a72:	b933      	cbnz	r3, 8010a82 <_free_r+0x2e>
 8010a74:	6063      	str	r3, [r4, #4]
 8010a76:	6014      	str	r4, [r2, #0]
 8010a78:	4628      	mov	r0, r5
 8010a7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010a7e:	f7ff bfe7 	b.w	8010a50 <__malloc_unlock>
 8010a82:	42a3      	cmp	r3, r4
 8010a84:	d90c      	bls.n	8010aa0 <_free_r+0x4c>
 8010a86:	6821      	ldr	r1, [r4, #0]
 8010a88:	1862      	adds	r2, r4, r1
 8010a8a:	4293      	cmp	r3, r2
 8010a8c:	bf04      	itt	eq
 8010a8e:	681a      	ldreq	r2, [r3, #0]
 8010a90:	685b      	ldreq	r3, [r3, #4]
 8010a92:	6063      	str	r3, [r4, #4]
 8010a94:	bf04      	itt	eq
 8010a96:	1852      	addeq	r2, r2, r1
 8010a98:	6022      	streq	r2, [r4, #0]
 8010a9a:	6004      	str	r4, [r0, #0]
 8010a9c:	e7ec      	b.n	8010a78 <_free_r+0x24>
 8010a9e:	4613      	mov	r3, r2
 8010aa0:	685a      	ldr	r2, [r3, #4]
 8010aa2:	b10a      	cbz	r2, 8010aa8 <_free_r+0x54>
 8010aa4:	42a2      	cmp	r2, r4
 8010aa6:	d9fa      	bls.n	8010a9e <_free_r+0x4a>
 8010aa8:	6819      	ldr	r1, [r3, #0]
 8010aaa:	1858      	adds	r0, r3, r1
 8010aac:	42a0      	cmp	r0, r4
 8010aae:	d10b      	bne.n	8010ac8 <_free_r+0x74>
 8010ab0:	6820      	ldr	r0, [r4, #0]
 8010ab2:	4401      	add	r1, r0
 8010ab4:	1858      	adds	r0, r3, r1
 8010ab6:	4282      	cmp	r2, r0
 8010ab8:	6019      	str	r1, [r3, #0]
 8010aba:	d1dd      	bne.n	8010a78 <_free_r+0x24>
 8010abc:	6810      	ldr	r0, [r2, #0]
 8010abe:	6852      	ldr	r2, [r2, #4]
 8010ac0:	605a      	str	r2, [r3, #4]
 8010ac2:	4401      	add	r1, r0
 8010ac4:	6019      	str	r1, [r3, #0]
 8010ac6:	e7d7      	b.n	8010a78 <_free_r+0x24>
 8010ac8:	d902      	bls.n	8010ad0 <_free_r+0x7c>
 8010aca:	230c      	movs	r3, #12
 8010acc:	602b      	str	r3, [r5, #0]
 8010ace:	e7d3      	b.n	8010a78 <_free_r+0x24>
 8010ad0:	6820      	ldr	r0, [r4, #0]
 8010ad2:	1821      	adds	r1, r4, r0
 8010ad4:	428a      	cmp	r2, r1
 8010ad6:	bf04      	itt	eq
 8010ad8:	6811      	ldreq	r1, [r2, #0]
 8010ada:	6852      	ldreq	r2, [r2, #4]
 8010adc:	6062      	str	r2, [r4, #4]
 8010ade:	bf04      	itt	eq
 8010ae0:	1809      	addeq	r1, r1, r0
 8010ae2:	6021      	streq	r1, [r4, #0]
 8010ae4:	605c      	str	r4, [r3, #4]
 8010ae6:	e7c7      	b.n	8010a78 <_free_r+0x24>
 8010ae8:	bd38      	pop	{r3, r4, r5, pc}
 8010aea:	bf00      	nop
 8010aec:	2000674c 	.word	0x2000674c

08010af0 <_realloc_r>:
 8010af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010af2:	4607      	mov	r7, r0
 8010af4:	4614      	mov	r4, r2
 8010af6:	460e      	mov	r6, r1
 8010af8:	b921      	cbnz	r1, 8010b04 <_realloc_r+0x14>
 8010afa:	4611      	mov	r1, r2
 8010afc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8010b00:	f7ff bc2c 	b.w	801035c <_malloc_r>
 8010b04:	b922      	cbnz	r2, 8010b10 <_realloc_r+0x20>
 8010b06:	f7ff ffa5 	bl	8010a54 <_free_r>
 8010b0a:	4625      	mov	r5, r4
 8010b0c:	4628      	mov	r0, r5
 8010b0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010b10:	f000 f814 	bl	8010b3c <_malloc_usable_size_r>
 8010b14:	42a0      	cmp	r0, r4
 8010b16:	d20f      	bcs.n	8010b38 <_realloc_r+0x48>
 8010b18:	4621      	mov	r1, r4
 8010b1a:	4638      	mov	r0, r7
 8010b1c:	f7ff fc1e 	bl	801035c <_malloc_r>
 8010b20:	4605      	mov	r5, r0
 8010b22:	2800      	cmp	r0, #0
 8010b24:	d0f2      	beq.n	8010b0c <_realloc_r+0x1c>
 8010b26:	4631      	mov	r1, r6
 8010b28:	4622      	mov	r2, r4
 8010b2a:	f7fd fd0f 	bl	800e54c <memcpy>
 8010b2e:	4631      	mov	r1, r6
 8010b30:	4638      	mov	r0, r7
 8010b32:	f7ff ff8f 	bl	8010a54 <_free_r>
 8010b36:	e7e9      	b.n	8010b0c <_realloc_r+0x1c>
 8010b38:	4635      	mov	r5, r6
 8010b3a:	e7e7      	b.n	8010b0c <_realloc_r+0x1c>

08010b3c <_malloc_usable_size_r>:
 8010b3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010b40:	1f18      	subs	r0, r3, #4
 8010b42:	2b00      	cmp	r3, #0
 8010b44:	bfbc      	itt	lt
 8010b46:	580b      	ldrlt	r3, [r1, r0]
 8010b48:	18c0      	addlt	r0, r0, r3
 8010b4a:	4770      	bx	lr

08010b4c <pow>:
 8010b4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b50:	ed2d 8b04 	vpush	{d8-d9}
 8010b54:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8010e28 <pow+0x2dc>
 8010b58:	b08d      	sub	sp, #52	; 0x34
 8010b5a:	ec57 6b10 	vmov	r6, r7, d0
 8010b5e:	ec55 4b11 	vmov	r4, r5, d1
 8010b62:	f000 f9bd 	bl	8010ee0 <__ieee754_pow>
 8010b66:	f999 3000 	ldrsb.w	r3, [r9]
 8010b6a:	9300      	str	r3, [sp, #0]
 8010b6c:	3301      	adds	r3, #1
 8010b6e:	eeb0 8a40 	vmov.f32	s16, s0
 8010b72:	eef0 8a60 	vmov.f32	s17, s1
 8010b76:	46c8      	mov	r8, r9
 8010b78:	d05f      	beq.n	8010c3a <pow+0xee>
 8010b7a:	4622      	mov	r2, r4
 8010b7c:	462b      	mov	r3, r5
 8010b7e:	4620      	mov	r0, r4
 8010b80:	4629      	mov	r1, r5
 8010b82:	f7ef ffe3 	bl	8000b4c <__aeabi_dcmpun>
 8010b86:	4683      	mov	fp, r0
 8010b88:	2800      	cmp	r0, #0
 8010b8a:	d156      	bne.n	8010c3a <pow+0xee>
 8010b8c:	4632      	mov	r2, r6
 8010b8e:	463b      	mov	r3, r7
 8010b90:	4630      	mov	r0, r6
 8010b92:	4639      	mov	r1, r7
 8010b94:	f7ef ffda 	bl	8000b4c <__aeabi_dcmpun>
 8010b98:	9001      	str	r0, [sp, #4]
 8010b9a:	b1e8      	cbz	r0, 8010bd8 <pow+0x8c>
 8010b9c:	2200      	movs	r2, #0
 8010b9e:	2300      	movs	r3, #0
 8010ba0:	4620      	mov	r0, r4
 8010ba2:	4629      	mov	r1, r5
 8010ba4:	f7ef ffa0 	bl	8000ae8 <__aeabi_dcmpeq>
 8010ba8:	2800      	cmp	r0, #0
 8010baa:	d046      	beq.n	8010c3a <pow+0xee>
 8010bac:	2301      	movs	r3, #1
 8010bae:	9302      	str	r3, [sp, #8]
 8010bb0:	4b96      	ldr	r3, [pc, #600]	; (8010e0c <pow+0x2c0>)
 8010bb2:	9303      	str	r3, [sp, #12]
 8010bb4:	4b96      	ldr	r3, [pc, #600]	; (8010e10 <pow+0x2c4>)
 8010bb6:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8010bba:	2200      	movs	r2, #0
 8010bbc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010bc0:	9b00      	ldr	r3, [sp, #0]
 8010bc2:	2b02      	cmp	r3, #2
 8010bc4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8010bc8:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8010bcc:	d033      	beq.n	8010c36 <pow+0xea>
 8010bce:	a802      	add	r0, sp, #8
 8010bd0:	f000 ff55 	bl	8011a7e <matherr>
 8010bd4:	bb48      	cbnz	r0, 8010c2a <pow+0xde>
 8010bd6:	e05d      	b.n	8010c94 <pow+0x148>
 8010bd8:	f04f 0a00 	mov.w	sl, #0
 8010bdc:	f04f 0b00 	mov.w	fp, #0
 8010be0:	4652      	mov	r2, sl
 8010be2:	465b      	mov	r3, fp
 8010be4:	4630      	mov	r0, r6
 8010be6:	4639      	mov	r1, r7
 8010be8:	f7ef ff7e 	bl	8000ae8 <__aeabi_dcmpeq>
 8010bec:	ec4b ab19 	vmov	d9, sl, fp
 8010bf0:	2800      	cmp	r0, #0
 8010bf2:	d054      	beq.n	8010c9e <pow+0x152>
 8010bf4:	4652      	mov	r2, sl
 8010bf6:	465b      	mov	r3, fp
 8010bf8:	4620      	mov	r0, r4
 8010bfa:	4629      	mov	r1, r5
 8010bfc:	f7ef ff74 	bl	8000ae8 <__aeabi_dcmpeq>
 8010c00:	4680      	mov	r8, r0
 8010c02:	b318      	cbz	r0, 8010c4c <pow+0x100>
 8010c04:	2301      	movs	r3, #1
 8010c06:	9302      	str	r3, [sp, #8]
 8010c08:	4b80      	ldr	r3, [pc, #512]	; (8010e0c <pow+0x2c0>)
 8010c0a:	9303      	str	r3, [sp, #12]
 8010c0c:	9b01      	ldr	r3, [sp, #4]
 8010c0e:	930a      	str	r3, [sp, #40]	; 0x28
 8010c10:	9b00      	ldr	r3, [sp, #0]
 8010c12:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8010c16:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8010c1a:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	d0d5      	beq.n	8010bce <pow+0x82>
 8010c22:	4b7b      	ldr	r3, [pc, #492]	; (8010e10 <pow+0x2c4>)
 8010c24:	2200      	movs	r2, #0
 8010c26:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010c2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010c2c:	b11b      	cbz	r3, 8010c36 <pow+0xea>
 8010c2e:	f7fd fc49 	bl	800e4c4 <__errno>
 8010c32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010c34:	6003      	str	r3, [r0, #0]
 8010c36:	ed9d 8b08 	vldr	d8, [sp, #32]
 8010c3a:	eeb0 0a48 	vmov.f32	s0, s16
 8010c3e:	eef0 0a68 	vmov.f32	s1, s17
 8010c42:	b00d      	add	sp, #52	; 0x34
 8010c44:	ecbd 8b04 	vpop	{d8-d9}
 8010c48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c4c:	ec45 4b10 	vmov	d0, r4, r5
 8010c50:	f000 ff0d 	bl	8011a6e <finite>
 8010c54:	2800      	cmp	r0, #0
 8010c56:	d0f0      	beq.n	8010c3a <pow+0xee>
 8010c58:	4652      	mov	r2, sl
 8010c5a:	465b      	mov	r3, fp
 8010c5c:	4620      	mov	r0, r4
 8010c5e:	4629      	mov	r1, r5
 8010c60:	f7ef ff4c 	bl	8000afc <__aeabi_dcmplt>
 8010c64:	2800      	cmp	r0, #0
 8010c66:	d0e8      	beq.n	8010c3a <pow+0xee>
 8010c68:	2301      	movs	r3, #1
 8010c6a:	9302      	str	r3, [sp, #8]
 8010c6c:	4b67      	ldr	r3, [pc, #412]	; (8010e0c <pow+0x2c0>)
 8010c6e:	9303      	str	r3, [sp, #12]
 8010c70:	f999 3000 	ldrsb.w	r3, [r9]
 8010c74:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8010c78:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8010c7c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8010c80:	b913      	cbnz	r3, 8010c88 <pow+0x13c>
 8010c82:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8010c86:	e7a2      	b.n	8010bce <pow+0x82>
 8010c88:	4962      	ldr	r1, [pc, #392]	; (8010e14 <pow+0x2c8>)
 8010c8a:	2000      	movs	r0, #0
 8010c8c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010c90:	2b02      	cmp	r3, #2
 8010c92:	d19c      	bne.n	8010bce <pow+0x82>
 8010c94:	f7fd fc16 	bl	800e4c4 <__errno>
 8010c98:	2321      	movs	r3, #33	; 0x21
 8010c9a:	6003      	str	r3, [r0, #0]
 8010c9c:	e7c5      	b.n	8010c2a <pow+0xde>
 8010c9e:	eeb0 0a48 	vmov.f32	s0, s16
 8010ca2:	eef0 0a68 	vmov.f32	s1, s17
 8010ca6:	f000 fee2 	bl	8011a6e <finite>
 8010caa:	9000      	str	r0, [sp, #0]
 8010cac:	2800      	cmp	r0, #0
 8010cae:	f040 8081 	bne.w	8010db4 <pow+0x268>
 8010cb2:	ec47 6b10 	vmov	d0, r6, r7
 8010cb6:	f000 feda 	bl	8011a6e <finite>
 8010cba:	2800      	cmp	r0, #0
 8010cbc:	d07a      	beq.n	8010db4 <pow+0x268>
 8010cbe:	ec45 4b10 	vmov	d0, r4, r5
 8010cc2:	f000 fed4 	bl	8011a6e <finite>
 8010cc6:	2800      	cmp	r0, #0
 8010cc8:	d074      	beq.n	8010db4 <pow+0x268>
 8010cca:	ec53 2b18 	vmov	r2, r3, d8
 8010cce:	ee18 0a10 	vmov	r0, s16
 8010cd2:	4619      	mov	r1, r3
 8010cd4:	f7ef ff3a 	bl	8000b4c <__aeabi_dcmpun>
 8010cd8:	f999 9000 	ldrsb.w	r9, [r9]
 8010cdc:	4b4b      	ldr	r3, [pc, #300]	; (8010e0c <pow+0x2c0>)
 8010cde:	b1b0      	cbz	r0, 8010d0e <pow+0x1c2>
 8010ce0:	2201      	movs	r2, #1
 8010ce2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010ce6:	9b00      	ldr	r3, [sp, #0]
 8010ce8:	930a      	str	r3, [sp, #40]	; 0x28
 8010cea:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8010cee:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8010cf2:	f1b9 0f00 	cmp.w	r9, #0
 8010cf6:	d0c4      	beq.n	8010c82 <pow+0x136>
 8010cf8:	4652      	mov	r2, sl
 8010cfa:	465b      	mov	r3, fp
 8010cfc:	4650      	mov	r0, sl
 8010cfe:	4659      	mov	r1, fp
 8010d00:	f7ef fdb4 	bl	800086c <__aeabi_ddiv>
 8010d04:	f1b9 0f02 	cmp.w	r9, #2
 8010d08:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010d0c:	e7c1      	b.n	8010c92 <pow+0x146>
 8010d0e:	2203      	movs	r2, #3
 8010d10:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010d14:	900a      	str	r0, [sp, #40]	; 0x28
 8010d16:	4629      	mov	r1, r5
 8010d18:	4620      	mov	r0, r4
 8010d1a:	2200      	movs	r2, #0
 8010d1c:	4b3e      	ldr	r3, [pc, #248]	; (8010e18 <pow+0x2cc>)
 8010d1e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8010d22:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8010d26:	f7ef fc77 	bl	8000618 <__aeabi_dmul>
 8010d2a:	4604      	mov	r4, r0
 8010d2c:	460d      	mov	r5, r1
 8010d2e:	f1b9 0f00 	cmp.w	r9, #0
 8010d32:	d124      	bne.n	8010d7e <pow+0x232>
 8010d34:	4b39      	ldr	r3, [pc, #228]	; (8010e1c <pow+0x2d0>)
 8010d36:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8010d3a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010d3e:	4630      	mov	r0, r6
 8010d40:	4652      	mov	r2, sl
 8010d42:	465b      	mov	r3, fp
 8010d44:	4639      	mov	r1, r7
 8010d46:	f7ef fed9 	bl	8000afc <__aeabi_dcmplt>
 8010d4a:	2800      	cmp	r0, #0
 8010d4c:	d056      	beq.n	8010dfc <pow+0x2b0>
 8010d4e:	ec45 4b10 	vmov	d0, r4, r5
 8010d52:	f000 fea1 	bl	8011a98 <rint>
 8010d56:	4622      	mov	r2, r4
 8010d58:	462b      	mov	r3, r5
 8010d5a:	ec51 0b10 	vmov	r0, r1, d0
 8010d5e:	f7ef fec3 	bl	8000ae8 <__aeabi_dcmpeq>
 8010d62:	b920      	cbnz	r0, 8010d6e <pow+0x222>
 8010d64:	4b2e      	ldr	r3, [pc, #184]	; (8010e20 <pow+0x2d4>)
 8010d66:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8010d6a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010d6e:	f998 3000 	ldrsb.w	r3, [r8]
 8010d72:	2b02      	cmp	r3, #2
 8010d74:	d142      	bne.n	8010dfc <pow+0x2b0>
 8010d76:	f7fd fba5 	bl	800e4c4 <__errno>
 8010d7a:	2322      	movs	r3, #34	; 0x22
 8010d7c:	e78d      	b.n	8010c9a <pow+0x14e>
 8010d7e:	4b29      	ldr	r3, [pc, #164]	; (8010e24 <pow+0x2d8>)
 8010d80:	2200      	movs	r2, #0
 8010d82:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010d86:	4630      	mov	r0, r6
 8010d88:	4652      	mov	r2, sl
 8010d8a:	465b      	mov	r3, fp
 8010d8c:	4639      	mov	r1, r7
 8010d8e:	f7ef feb5 	bl	8000afc <__aeabi_dcmplt>
 8010d92:	2800      	cmp	r0, #0
 8010d94:	d0eb      	beq.n	8010d6e <pow+0x222>
 8010d96:	ec45 4b10 	vmov	d0, r4, r5
 8010d9a:	f000 fe7d 	bl	8011a98 <rint>
 8010d9e:	4622      	mov	r2, r4
 8010da0:	462b      	mov	r3, r5
 8010da2:	ec51 0b10 	vmov	r0, r1, d0
 8010da6:	f7ef fe9f 	bl	8000ae8 <__aeabi_dcmpeq>
 8010daa:	2800      	cmp	r0, #0
 8010dac:	d1df      	bne.n	8010d6e <pow+0x222>
 8010dae:	2200      	movs	r2, #0
 8010db0:	4b18      	ldr	r3, [pc, #96]	; (8010e14 <pow+0x2c8>)
 8010db2:	e7da      	b.n	8010d6a <pow+0x21e>
 8010db4:	2200      	movs	r2, #0
 8010db6:	2300      	movs	r3, #0
 8010db8:	ec51 0b18 	vmov	r0, r1, d8
 8010dbc:	f7ef fe94 	bl	8000ae8 <__aeabi_dcmpeq>
 8010dc0:	2800      	cmp	r0, #0
 8010dc2:	f43f af3a 	beq.w	8010c3a <pow+0xee>
 8010dc6:	ec47 6b10 	vmov	d0, r6, r7
 8010dca:	f000 fe50 	bl	8011a6e <finite>
 8010dce:	2800      	cmp	r0, #0
 8010dd0:	f43f af33 	beq.w	8010c3a <pow+0xee>
 8010dd4:	ec45 4b10 	vmov	d0, r4, r5
 8010dd8:	f000 fe49 	bl	8011a6e <finite>
 8010ddc:	2800      	cmp	r0, #0
 8010dde:	f43f af2c 	beq.w	8010c3a <pow+0xee>
 8010de2:	2304      	movs	r3, #4
 8010de4:	9302      	str	r3, [sp, #8]
 8010de6:	4b09      	ldr	r3, [pc, #36]	; (8010e0c <pow+0x2c0>)
 8010de8:	9303      	str	r3, [sp, #12]
 8010dea:	2300      	movs	r3, #0
 8010dec:	930a      	str	r3, [sp, #40]	; 0x28
 8010dee:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8010df2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8010df6:	ed8d 9b08 	vstr	d9, [sp, #32]
 8010dfa:	e7b8      	b.n	8010d6e <pow+0x222>
 8010dfc:	a802      	add	r0, sp, #8
 8010dfe:	f000 fe3e 	bl	8011a7e <matherr>
 8010e02:	2800      	cmp	r0, #0
 8010e04:	f47f af11 	bne.w	8010c2a <pow+0xde>
 8010e08:	e7b5      	b.n	8010d76 <pow+0x22a>
 8010e0a:	bf00      	nop
 8010e0c:	08012700 	.word	0x08012700
 8010e10:	3ff00000 	.word	0x3ff00000
 8010e14:	fff00000 	.word	0xfff00000
 8010e18:	3fe00000 	.word	0x3fe00000
 8010e1c:	47efffff 	.word	0x47efffff
 8010e20:	c7efffff 	.word	0xc7efffff
 8010e24:	7ff00000 	.word	0x7ff00000
 8010e28:	200001e0 	.word	0x200001e0

08010e2c <sqrt>:
 8010e2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010e30:	ed2d 8b02 	vpush	{d8}
 8010e34:	b08b      	sub	sp, #44	; 0x2c
 8010e36:	ec55 4b10 	vmov	r4, r5, d0
 8010e3a:	f000 fd5f 	bl	80118fc <__ieee754_sqrt>
 8010e3e:	4b26      	ldr	r3, [pc, #152]	; (8010ed8 <sqrt+0xac>)
 8010e40:	eeb0 8a40 	vmov.f32	s16, s0
 8010e44:	eef0 8a60 	vmov.f32	s17, s1
 8010e48:	f993 6000 	ldrsb.w	r6, [r3]
 8010e4c:	1c73      	adds	r3, r6, #1
 8010e4e:	d02a      	beq.n	8010ea6 <sqrt+0x7a>
 8010e50:	4622      	mov	r2, r4
 8010e52:	462b      	mov	r3, r5
 8010e54:	4620      	mov	r0, r4
 8010e56:	4629      	mov	r1, r5
 8010e58:	f7ef fe78 	bl	8000b4c <__aeabi_dcmpun>
 8010e5c:	4607      	mov	r7, r0
 8010e5e:	bb10      	cbnz	r0, 8010ea6 <sqrt+0x7a>
 8010e60:	f04f 0800 	mov.w	r8, #0
 8010e64:	f04f 0900 	mov.w	r9, #0
 8010e68:	4642      	mov	r2, r8
 8010e6a:	464b      	mov	r3, r9
 8010e6c:	4620      	mov	r0, r4
 8010e6e:	4629      	mov	r1, r5
 8010e70:	f7ef fe44 	bl	8000afc <__aeabi_dcmplt>
 8010e74:	b1b8      	cbz	r0, 8010ea6 <sqrt+0x7a>
 8010e76:	2301      	movs	r3, #1
 8010e78:	9300      	str	r3, [sp, #0]
 8010e7a:	4b18      	ldr	r3, [pc, #96]	; (8010edc <sqrt+0xb0>)
 8010e7c:	9301      	str	r3, [sp, #4]
 8010e7e:	9708      	str	r7, [sp, #32]
 8010e80:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8010e84:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8010e88:	b9b6      	cbnz	r6, 8010eb8 <sqrt+0x8c>
 8010e8a:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8010e8e:	4668      	mov	r0, sp
 8010e90:	f000 fdf5 	bl	8011a7e <matherr>
 8010e94:	b1d0      	cbz	r0, 8010ecc <sqrt+0xa0>
 8010e96:	9b08      	ldr	r3, [sp, #32]
 8010e98:	b11b      	cbz	r3, 8010ea2 <sqrt+0x76>
 8010e9a:	f7fd fb13 	bl	800e4c4 <__errno>
 8010e9e:	9b08      	ldr	r3, [sp, #32]
 8010ea0:	6003      	str	r3, [r0, #0]
 8010ea2:	ed9d 8b06 	vldr	d8, [sp, #24]
 8010ea6:	eeb0 0a48 	vmov.f32	s0, s16
 8010eaa:	eef0 0a68 	vmov.f32	s1, s17
 8010eae:	b00b      	add	sp, #44	; 0x2c
 8010eb0:	ecbd 8b02 	vpop	{d8}
 8010eb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010eb8:	4642      	mov	r2, r8
 8010eba:	464b      	mov	r3, r9
 8010ebc:	4640      	mov	r0, r8
 8010ebe:	4649      	mov	r1, r9
 8010ec0:	f7ef fcd4 	bl	800086c <__aeabi_ddiv>
 8010ec4:	2e02      	cmp	r6, #2
 8010ec6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8010eca:	d1e0      	bne.n	8010e8e <sqrt+0x62>
 8010ecc:	f7fd fafa 	bl	800e4c4 <__errno>
 8010ed0:	2321      	movs	r3, #33	; 0x21
 8010ed2:	6003      	str	r3, [r0, #0]
 8010ed4:	e7df      	b.n	8010e96 <sqrt+0x6a>
 8010ed6:	bf00      	nop
 8010ed8:	200001e0 	.word	0x200001e0
 8010edc:	08012704 	.word	0x08012704

08010ee0 <__ieee754_pow>:
 8010ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ee4:	b091      	sub	sp, #68	; 0x44
 8010ee6:	ed8d 1b00 	vstr	d1, [sp]
 8010eea:	e9dd 2900 	ldrd	r2, r9, [sp]
 8010eee:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8010ef2:	ea58 0302 	orrs.w	r3, r8, r2
 8010ef6:	ec57 6b10 	vmov	r6, r7, d0
 8010efa:	f000 84be 	beq.w	801187a <__ieee754_pow+0x99a>
 8010efe:	4b7a      	ldr	r3, [pc, #488]	; (80110e8 <__ieee754_pow+0x208>)
 8010f00:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8010f04:	429c      	cmp	r4, r3
 8010f06:	463d      	mov	r5, r7
 8010f08:	ee10 aa10 	vmov	sl, s0
 8010f0c:	dc09      	bgt.n	8010f22 <__ieee754_pow+0x42>
 8010f0e:	d103      	bne.n	8010f18 <__ieee754_pow+0x38>
 8010f10:	b93e      	cbnz	r6, 8010f22 <__ieee754_pow+0x42>
 8010f12:	45a0      	cmp	r8, r4
 8010f14:	dc0d      	bgt.n	8010f32 <__ieee754_pow+0x52>
 8010f16:	e001      	b.n	8010f1c <__ieee754_pow+0x3c>
 8010f18:	4598      	cmp	r8, r3
 8010f1a:	dc02      	bgt.n	8010f22 <__ieee754_pow+0x42>
 8010f1c:	4598      	cmp	r8, r3
 8010f1e:	d10e      	bne.n	8010f3e <__ieee754_pow+0x5e>
 8010f20:	b16a      	cbz	r2, 8010f3e <__ieee754_pow+0x5e>
 8010f22:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8010f26:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8010f2a:	ea54 030a 	orrs.w	r3, r4, sl
 8010f2e:	f000 84a4 	beq.w	801187a <__ieee754_pow+0x99a>
 8010f32:	486e      	ldr	r0, [pc, #440]	; (80110ec <__ieee754_pow+0x20c>)
 8010f34:	b011      	add	sp, #68	; 0x44
 8010f36:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f3a:	f000 bda5 	b.w	8011a88 <nan>
 8010f3e:	2d00      	cmp	r5, #0
 8010f40:	da53      	bge.n	8010fea <__ieee754_pow+0x10a>
 8010f42:	4b6b      	ldr	r3, [pc, #428]	; (80110f0 <__ieee754_pow+0x210>)
 8010f44:	4598      	cmp	r8, r3
 8010f46:	dc4d      	bgt.n	8010fe4 <__ieee754_pow+0x104>
 8010f48:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8010f4c:	4598      	cmp	r8, r3
 8010f4e:	dd4c      	ble.n	8010fea <__ieee754_pow+0x10a>
 8010f50:	ea4f 5328 	mov.w	r3, r8, asr #20
 8010f54:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8010f58:	2b14      	cmp	r3, #20
 8010f5a:	dd26      	ble.n	8010faa <__ieee754_pow+0xca>
 8010f5c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8010f60:	fa22 f103 	lsr.w	r1, r2, r3
 8010f64:	fa01 f303 	lsl.w	r3, r1, r3
 8010f68:	4293      	cmp	r3, r2
 8010f6a:	d13e      	bne.n	8010fea <__ieee754_pow+0x10a>
 8010f6c:	f001 0101 	and.w	r1, r1, #1
 8010f70:	f1c1 0b02 	rsb	fp, r1, #2
 8010f74:	2a00      	cmp	r2, #0
 8010f76:	d15b      	bne.n	8011030 <__ieee754_pow+0x150>
 8010f78:	4b5b      	ldr	r3, [pc, #364]	; (80110e8 <__ieee754_pow+0x208>)
 8010f7a:	4598      	cmp	r8, r3
 8010f7c:	d124      	bne.n	8010fc8 <__ieee754_pow+0xe8>
 8010f7e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8010f82:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8010f86:	ea53 030a 	orrs.w	r3, r3, sl
 8010f8a:	f000 8476 	beq.w	801187a <__ieee754_pow+0x99a>
 8010f8e:	4b59      	ldr	r3, [pc, #356]	; (80110f4 <__ieee754_pow+0x214>)
 8010f90:	429c      	cmp	r4, r3
 8010f92:	dd2d      	ble.n	8010ff0 <__ieee754_pow+0x110>
 8010f94:	f1b9 0f00 	cmp.w	r9, #0
 8010f98:	f280 8473 	bge.w	8011882 <__ieee754_pow+0x9a2>
 8010f9c:	2000      	movs	r0, #0
 8010f9e:	2100      	movs	r1, #0
 8010fa0:	ec41 0b10 	vmov	d0, r0, r1
 8010fa4:	b011      	add	sp, #68	; 0x44
 8010fa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010faa:	2a00      	cmp	r2, #0
 8010fac:	d13e      	bne.n	801102c <__ieee754_pow+0x14c>
 8010fae:	f1c3 0314 	rsb	r3, r3, #20
 8010fb2:	fa48 f103 	asr.w	r1, r8, r3
 8010fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8010fba:	4543      	cmp	r3, r8
 8010fbc:	f040 8469 	bne.w	8011892 <__ieee754_pow+0x9b2>
 8010fc0:	f001 0101 	and.w	r1, r1, #1
 8010fc4:	f1c1 0b02 	rsb	fp, r1, #2
 8010fc8:	4b4b      	ldr	r3, [pc, #300]	; (80110f8 <__ieee754_pow+0x218>)
 8010fca:	4598      	cmp	r8, r3
 8010fcc:	d118      	bne.n	8011000 <__ieee754_pow+0x120>
 8010fce:	f1b9 0f00 	cmp.w	r9, #0
 8010fd2:	f280 845a 	bge.w	801188a <__ieee754_pow+0x9aa>
 8010fd6:	4948      	ldr	r1, [pc, #288]	; (80110f8 <__ieee754_pow+0x218>)
 8010fd8:	4632      	mov	r2, r6
 8010fda:	463b      	mov	r3, r7
 8010fdc:	2000      	movs	r0, #0
 8010fde:	f7ef fc45 	bl	800086c <__aeabi_ddiv>
 8010fe2:	e7dd      	b.n	8010fa0 <__ieee754_pow+0xc0>
 8010fe4:	f04f 0b02 	mov.w	fp, #2
 8010fe8:	e7c4      	b.n	8010f74 <__ieee754_pow+0x94>
 8010fea:	f04f 0b00 	mov.w	fp, #0
 8010fee:	e7c1      	b.n	8010f74 <__ieee754_pow+0x94>
 8010ff0:	f1b9 0f00 	cmp.w	r9, #0
 8010ff4:	dad2      	bge.n	8010f9c <__ieee754_pow+0xbc>
 8010ff6:	e9dd 0300 	ldrd	r0, r3, [sp]
 8010ffa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8010ffe:	e7cf      	b.n	8010fa0 <__ieee754_pow+0xc0>
 8011000:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8011004:	d106      	bne.n	8011014 <__ieee754_pow+0x134>
 8011006:	4632      	mov	r2, r6
 8011008:	463b      	mov	r3, r7
 801100a:	4610      	mov	r0, r2
 801100c:	4619      	mov	r1, r3
 801100e:	f7ef fb03 	bl	8000618 <__aeabi_dmul>
 8011012:	e7c5      	b.n	8010fa0 <__ieee754_pow+0xc0>
 8011014:	4b39      	ldr	r3, [pc, #228]	; (80110fc <__ieee754_pow+0x21c>)
 8011016:	4599      	cmp	r9, r3
 8011018:	d10a      	bne.n	8011030 <__ieee754_pow+0x150>
 801101a:	2d00      	cmp	r5, #0
 801101c:	db08      	blt.n	8011030 <__ieee754_pow+0x150>
 801101e:	ec47 6b10 	vmov	d0, r6, r7
 8011022:	b011      	add	sp, #68	; 0x44
 8011024:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011028:	f000 bc68 	b.w	80118fc <__ieee754_sqrt>
 801102c:	f04f 0b00 	mov.w	fp, #0
 8011030:	ec47 6b10 	vmov	d0, r6, r7
 8011034:	f000 fd12 	bl	8011a5c <fabs>
 8011038:	ec51 0b10 	vmov	r0, r1, d0
 801103c:	f1ba 0f00 	cmp.w	sl, #0
 8011040:	d127      	bne.n	8011092 <__ieee754_pow+0x1b2>
 8011042:	b124      	cbz	r4, 801104e <__ieee754_pow+0x16e>
 8011044:	4b2c      	ldr	r3, [pc, #176]	; (80110f8 <__ieee754_pow+0x218>)
 8011046:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801104a:	429a      	cmp	r2, r3
 801104c:	d121      	bne.n	8011092 <__ieee754_pow+0x1b2>
 801104e:	f1b9 0f00 	cmp.w	r9, #0
 8011052:	da05      	bge.n	8011060 <__ieee754_pow+0x180>
 8011054:	4602      	mov	r2, r0
 8011056:	460b      	mov	r3, r1
 8011058:	2000      	movs	r0, #0
 801105a:	4927      	ldr	r1, [pc, #156]	; (80110f8 <__ieee754_pow+0x218>)
 801105c:	f7ef fc06 	bl	800086c <__aeabi_ddiv>
 8011060:	2d00      	cmp	r5, #0
 8011062:	da9d      	bge.n	8010fa0 <__ieee754_pow+0xc0>
 8011064:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8011068:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801106c:	ea54 030b 	orrs.w	r3, r4, fp
 8011070:	d108      	bne.n	8011084 <__ieee754_pow+0x1a4>
 8011072:	4602      	mov	r2, r0
 8011074:	460b      	mov	r3, r1
 8011076:	4610      	mov	r0, r2
 8011078:	4619      	mov	r1, r3
 801107a:	f7ef f915 	bl	80002a8 <__aeabi_dsub>
 801107e:	4602      	mov	r2, r0
 8011080:	460b      	mov	r3, r1
 8011082:	e7ac      	b.n	8010fde <__ieee754_pow+0xfe>
 8011084:	f1bb 0f01 	cmp.w	fp, #1
 8011088:	d18a      	bne.n	8010fa0 <__ieee754_pow+0xc0>
 801108a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801108e:	4619      	mov	r1, r3
 8011090:	e786      	b.n	8010fa0 <__ieee754_pow+0xc0>
 8011092:	0fed      	lsrs	r5, r5, #31
 8011094:	1e6b      	subs	r3, r5, #1
 8011096:	930d      	str	r3, [sp, #52]	; 0x34
 8011098:	ea5b 0303 	orrs.w	r3, fp, r3
 801109c:	d102      	bne.n	80110a4 <__ieee754_pow+0x1c4>
 801109e:	4632      	mov	r2, r6
 80110a0:	463b      	mov	r3, r7
 80110a2:	e7e8      	b.n	8011076 <__ieee754_pow+0x196>
 80110a4:	4b16      	ldr	r3, [pc, #88]	; (8011100 <__ieee754_pow+0x220>)
 80110a6:	4598      	cmp	r8, r3
 80110a8:	f340 80fe 	ble.w	80112a8 <__ieee754_pow+0x3c8>
 80110ac:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80110b0:	4598      	cmp	r8, r3
 80110b2:	dd0a      	ble.n	80110ca <__ieee754_pow+0x1ea>
 80110b4:	4b0f      	ldr	r3, [pc, #60]	; (80110f4 <__ieee754_pow+0x214>)
 80110b6:	429c      	cmp	r4, r3
 80110b8:	dc0d      	bgt.n	80110d6 <__ieee754_pow+0x1f6>
 80110ba:	f1b9 0f00 	cmp.w	r9, #0
 80110be:	f6bf af6d 	bge.w	8010f9c <__ieee754_pow+0xbc>
 80110c2:	a307      	add	r3, pc, #28	; (adr r3, 80110e0 <__ieee754_pow+0x200>)
 80110c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110c8:	e79f      	b.n	801100a <__ieee754_pow+0x12a>
 80110ca:	4b0e      	ldr	r3, [pc, #56]	; (8011104 <__ieee754_pow+0x224>)
 80110cc:	429c      	cmp	r4, r3
 80110ce:	ddf4      	ble.n	80110ba <__ieee754_pow+0x1da>
 80110d0:	4b09      	ldr	r3, [pc, #36]	; (80110f8 <__ieee754_pow+0x218>)
 80110d2:	429c      	cmp	r4, r3
 80110d4:	dd18      	ble.n	8011108 <__ieee754_pow+0x228>
 80110d6:	f1b9 0f00 	cmp.w	r9, #0
 80110da:	dcf2      	bgt.n	80110c2 <__ieee754_pow+0x1e2>
 80110dc:	e75e      	b.n	8010f9c <__ieee754_pow+0xbc>
 80110de:	bf00      	nop
 80110e0:	8800759c 	.word	0x8800759c
 80110e4:	7e37e43c 	.word	0x7e37e43c
 80110e8:	7ff00000 	.word	0x7ff00000
 80110ec:	080125d1 	.word	0x080125d1
 80110f0:	433fffff 	.word	0x433fffff
 80110f4:	3fefffff 	.word	0x3fefffff
 80110f8:	3ff00000 	.word	0x3ff00000
 80110fc:	3fe00000 	.word	0x3fe00000
 8011100:	41e00000 	.word	0x41e00000
 8011104:	3feffffe 	.word	0x3feffffe
 8011108:	2200      	movs	r2, #0
 801110a:	4b63      	ldr	r3, [pc, #396]	; (8011298 <__ieee754_pow+0x3b8>)
 801110c:	f7ef f8cc 	bl	80002a8 <__aeabi_dsub>
 8011110:	a355      	add	r3, pc, #340	; (adr r3, 8011268 <__ieee754_pow+0x388>)
 8011112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011116:	4604      	mov	r4, r0
 8011118:	460d      	mov	r5, r1
 801111a:	f7ef fa7d 	bl	8000618 <__aeabi_dmul>
 801111e:	a354      	add	r3, pc, #336	; (adr r3, 8011270 <__ieee754_pow+0x390>)
 8011120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011124:	4606      	mov	r6, r0
 8011126:	460f      	mov	r7, r1
 8011128:	4620      	mov	r0, r4
 801112a:	4629      	mov	r1, r5
 801112c:	f7ef fa74 	bl	8000618 <__aeabi_dmul>
 8011130:	2200      	movs	r2, #0
 8011132:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011136:	4b59      	ldr	r3, [pc, #356]	; (801129c <__ieee754_pow+0x3bc>)
 8011138:	4620      	mov	r0, r4
 801113a:	4629      	mov	r1, r5
 801113c:	f7ef fa6c 	bl	8000618 <__aeabi_dmul>
 8011140:	4602      	mov	r2, r0
 8011142:	460b      	mov	r3, r1
 8011144:	a14c      	add	r1, pc, #304	; (adr r1, 8011278 <__ieee754_pow+0x398>)
 8011146:	e9d1 0100 	ldrd	r0, r1, [r1]
 801114a:	f7ef f8ad 	bl	80002a8 <__aeabi_dsub>
 801114e:	4622      	mov	r2, r4
 8011150:	462b      	mov	r3, r5
 8011152:	f7ef fa61 	bl	8000618 <__aeabi_dmul>
 8011156:	4602      	mov	r2, r0
 8011158:	460b      	mov	r3, r1
 801115a:	2000      	movs	r0, #0
 801115c:	4950      	ldr	r1, [pc, #320]	; (80112a0 <__ieee754_pow+0x3c0>)
 801115e:	f7ef f8a3 	bl	80002a8 <__aeabi_dsub>
 8011162:	4622      	mov	r2, r4
 8011164:	462b      	mov	r3, r5
 8011166:	4680      	mov	r8, r0
 8011168:	4689      	mov	r9, r1
 801116a:	4620      	mov	r0, r4
 801116c:	4629      	mov	r1, r5
 801116e:	f7ef fa53 	bl	8000618 <__aeabi_dmul>
 8011172:	4602      	mov	r2, r0
 8011174:	460b      	mov	r3, r1
 8011176:	4640      	mov	r0, r8
 8011178:	4649      	mov	r1, r9
 801117a:	f7ef fa4d 	bl	8000618 <__aeabi_dmul>
 801117e:	a340      	add	r3, pc, #256	; (adr r3, 8011280 <__ieee754_pow+0x3a0>)
 8011180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011184:	f7ef fa48 	bl	8000618 <__aeabi_dmul>
 8011188:	4602      	mov	r2, r0
 801118a:	460b      	mov	r3, r1
 801118c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011190:	f7ef f88a 	bl	80002a8 <__aeabi_dsub>
 8011194:	4602      	mov	r2, r0
 8011196:	460b      	mov	r3, r1
 8011198:	4604      	mov	r4, r0
 801119a:	460d      	mov	r5, r1
 801119c:	4630      	mov	r0, r6
 801119e:	4639      	mov	r1, r7
 80111a0:	f7ef f884 	bl	80002ac <__adddf3>
 80111a4:	2000      	movs	r0, #0
 80111a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80111aa:	4632      	mov	r2, r6
 80111ac:	463b      	mov	r3, r7
 80111ae:	f7ef f87b 	bl	80002a8 <__aeabi_dsub>
 80111b2:	4602      	mov	r2, r0
 80111b4:	460b      	mov	r3, r1
 80111b6:	4620      	mov	r0, r4
 80111b8:	4629      	mov	r1, r5
 80111ba:	f7ef f875 	bl	80002a8 <__aeabi_dsub>
 80111be:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80111c0:	f10b 33ff 	add.w	r3, fp, #4294967295
 80111c4:	4313      	orrs	r3, r2
 80111c6:	4606      	mov	r6, r0
 80111c8:	460f      	mov	r7, r1
 80111ca:	f040 81eb 	bne.w	80115a4 <__ieee754_pow+0x6c4>
 80111ce:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8011288 <__ieee754_pow+0x3a8>
 80111d2:	e9dd 4500 	ldrd	r4, r5, [sp]
 80111d6:	2400      	movs	r4, #0
 80111d8:	4622      	mov	r2, r4
 80111da:	462b      	mov	r3, r5
 80111dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80111e0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80111e4:	f7ef f860 	bl	80002a8 <__aeabi_dsub>
 80111e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80111ec:	f7ef fa14 	bl	8000618 <__aeabi_dmul>
 80111f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80111f4:	4680      	mov	r8, r0
 80111f6:	4689      	mov	r9, r1
 80111f8:	4630      	mov	r0, r6
 80111fa:	4639      	mov	r1, r7
 80111fc:	f7ef fa0c 	bl	8000618 <__aeabi_dmul>
 8011200:	4602      	mov	r2, r0
 8011202:	460b      	mov	r3, r1
 8011204:	4640      	mov	r0, r8
 8011206:	4649      	mov	r1, r9
 8011208:	f7ef f850 	bl	80002ac <__adddf3>
 801120c:	4622      	mov	r2, r4
 801120e:	462b      	mov	r3, r5
 8011210:	4680      	mov	r8, r0
 8011212:	4689      	mov	r9, r1
 8011214:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011218:	f7ef f9fe 	bl	8000618 <__aeabi_dmul>
 801121c:	460b      	mov	r3, r1
 801121e:	4604      	mov	r4, r0
 8011220:	460d      	mov	r5, r1
 8011222:	4602      	mov	r2, r0
 8011224:	4649      	mov	r1, r9
 8011226:	4640      	mov	r0, r8
 8011228:	e9cd 4500 	strd	r4, r5, [sp]
 801122c:	f7ef f83e 	bl	80002ac <__adddf3>
 8011230:	4b1c      	ldr	r3, [pc, #112]	; (80112a4 <__ieee754_pow+0x3c4>)
 8011232:	4299      	cmp	r1, r3
 8011234:	4606      	mov	r6, r0
 8011236:	460f      	mov	r7, r1
 8011238:	468b      	mov	fp, r1
 801123a:	f340 82f7 	ble.w	801182c <__ieee754_pow+0x94c>
 801123e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8011242:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8011246:	4303      	orrs	r3, r0
 8011248:	f000 81ea 	beq.w	8011620 <__ieee754_pow+0x740>
 801124c:	a310      	add	r3, pc, #64	; (adr r3, 8011290 <__ieee754_pow+0x3b0>)
 801124e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011252:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011256:	f7ef f9df 	bl	8000618 <__aeabi_dmul>
 801125a:	a30d      	add	r3, pc, #52	; (adr r3, 8011290 <__ieee754_pow+0x3b0>)
 801125c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011260:	e6d5      	b.n	801100e <__ieee754_pow+0x12e>
 8011262:	bf00      	nop
 8011264:	f3af 8000 	nop.w
 8011268:	60000000 	.word	0x60000000
 801126c:	3ff71547 	.word	0x3ff71547
 8011270:	f85ddf44 	.word	0xf85ddf44
 8011274:	3e54ae0b 	.word	0x3e54ae0b
 8011278:	55555555 	.word	0x55555555
 801127c:	3fd55555 	.word	0x3fd55555
 8011280:	652b82fe 	.word	0x652b82fe
 8011284:	3ff71547 	.word	0x3ff71547
 8011288:	00000000 	.word	0x00000000
 801128c:	bff00000 	.word	0xbff00000
 8011290:	8800759c 	.word	0x8800759c
 8011294:	7e37e43c 	.word	0x7e37e43c
 8011298:	3ff00000 	.word	0x3ff00000
 801129c:	3fd00000 	.word	0x3fd00000
 80112a0:	3fe00000 	.word	0x3fe00000
 80112a4:	408fffff 	.word	0x408fffff
 80112a8:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80112ac:	f04f 0200 	mov.w	r2, #0
 80112b0:	da05      	bge.n	80112be <__ieee754_pow+0x3de>
 80112b2:	4bd3      	ldr	r3, [pc, #844]	; (8011600 <__ieee754_pow+0x720>)
 80112b4:	f7ef f9b0 	bl	8000618 <__aeabi_dmul>
 80112b8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80112bc:	460c      	mov	r4, r1
 80112be:	1523      	asrs	r3, r4, #20
 80112c0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80112c4:	4413      	add	r3, r2
 80112c6:	9309      	str	r3, [sp, #36]	; 0x24
 80112c8:	4bce      	ldr	r3, [pc, #824]	; (8011604 <__ieee754_pow+0x724>)
 80112ca:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80112ce:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80112d2:	429c      	cmp	r4, r3
 80112d4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80112d8:	dd08      	ble.n	80112ec <__ieee754_pow+0x40c>
 80112da:	4bcb      	ldr	r3, [pc, #812]	; (8011608 <__ieee754_pow+0x728>)
 80112dc:	429c      	cmp	r4, r3
 80112de:	f340 815e 	ble.w	801159e <__ieee754_pow+0x6be>
 80112e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80112e4:	3301      	adds	r3, #1
 80112e6:	9309      	str	r3, [sp, #36]	; 0x24
 80112e8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80112ec:	f04f 0a00 	mov.w	sl, #0
 80112f0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80112f4:	930c      	str	r3, [sp, #48]	; 0x30
 80112f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80112f8:	4bc4      	ldr	r3, [pc, #784]	; (801160c <__ieee754_pow+0x72c>)
 80112fa:	4413      	add	r3, r2
 80112fc:	ed93 7b00 	vldr	d7, [r3]
 8011300:	4629      	mov	r1, r5
 8011302:	ec53 2b17 	vmov	r2, r3, d7
 8011306:	ed8d 7b06 	vstr	d7, [sp, #24]
 801130a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801130e:	f7ee ffcb 	bl	80002a8 <__aeabi_dsub>
 8011312:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8011316:	4606      	mov	r6, r0
 8011318:	460f      	mov	r7, r1
 801131a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801131e:	f7ee ffc5 	bl	80002ac <__adddf3>
 8011322:	4602      	mov	r2, r0
 8011324:	460b      	mov	r3, r1
 8011326:	2000      	movs	r0, #0
 8011328:	49b9      	ldr	r1, [pc, #740]	; (8011610 <__ieee754_pow+0x730>)
 801132a:	f7ef fa9f 	bl	800086c <__aeabi_ddiv>
 801132e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8011332:	4602      	mov	r2, r0
 8011334:	460b      	mov	r3, r1
 8011336:	4630      	mov	r0, r6
 8011338:	4639      	mov	r1, r7
 801133a:	f7ef f96d 	bl	8000618 <__aeabi_dmul>
 801133e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011342:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8011346:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801134a:	2300      	movs	r3, #0
 801134c:	9302      	str	r3, [sp, #8]
 801134e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8011352:	106d      	asrs	r5, r5, #1
 8011354:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8011358:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801135c:	2200      	movs	r2, #0
 801135e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8011362:	4640      	mov	r0, r8
 8011364:	4649      	mov	r1, r9
 8011366:	4614      	mov	r4, r2
 8011368:	461d      	mov	r5, r3
 801136a:	f7ef f955 	bl	8000618 <__aeabi_dmul>
 801136e:	4602      	mov	r2, r0
 8011370:	460b      	mov	r3, r1
 8011372:	4630      	mov	r0, r6
 8011374:	4639      	mov	r1, r7
 8011376:	f7ee ff97 	bl	80002a8 <__aeabi_dsub>
 801137a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801137e:	4606      	mov	r6, r0
 8011380:	460f      	mov	r7, r1
 8011382:	4620      	mov	r0, r4
 8011384:	4629      	mov	r1, r5
 8011386:	f7ee ff8f 	bl	80002a8 <__aeabi_dsub>
 801138a:	4602      	mov	r2, r0
 801138c:	460b      	mov	r3, r1
 801138e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8011392:	f7ee ff89 	bl	80002a8 <__aeabi_dsub>
 8011396:	4642      	mov	r2, r8
 8011398:	464b      	mov	r3, r9
 801139a:	f7ef f93d 	bl	8000618 <__aeabi_dmul>
 801139e:	4602      	mov	r2, r0
 80113a0:	460b      	mov	r3, r1
 80113a2:	4630      	mov	r0, r6
 80113a4:	4639      	mov	r1, r7
 80113a6:	f7ee ff7f 	bl	80002a8 <__aeabi_dsub>
 80113aa:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80113ae:	f7ef f933 	bl	8000618 <__aeabi_dmul>
 80113b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80113b6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80113ba:	4610      	mov	r0, r2
 80113bc:	4619      	mov	r1, r3
 80113be:	f7ef f92b 	bl	8000618 <__aeabi_dmul>
 80113c2:	a37b      	add	r3, pc, #492	; (adr r3, 80115b0 <__ieee754_pow+0x6d0>)
 80113c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113c8:	4604      	mov	r4, r0
 80113ca:	460d      	mov	r5, r1
 80113cc:	f7ef f924 	bl	8000618 <__aeabi_dmul>
 80113d0:	a379      	add	r3, pc, #484	; (adr r3, 80115b8 <__ieee754_pow+0x6d8>)
 80113d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113d6:	f7ee ff69 	bl	80002ac <__adddf3>
 80113da:	4622      	mov	r2, r4
 80113dc:	462b      	mov	r3, r5
 80113de:	f7ef f91b 	bl	8000618 <__aeabi_dmul>
 80113e2:	a377      	add	r3, pc, #476	; (adr r3, 80115c0 <__ieee754_pow+0x6e0>)
 80113e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113e8:	f7ee ff60 	bl	80002ac <__adddf3>
 80113ec:	4622      	mov	r2, r4
 80113ee:	462b      	mov	r3, r5
 80113f0:	f7ef f912 	bl	8000618 <__aeabi_dmul>
 80113f4:	a374      	add	r3, pc, #464	; (adr r3, 80115c8 <__ieee754_pow+0x6e8>)
 80113f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113fa:	f7ee ff57 	bl	80002ac <__adddf3>
 80113fe:	4622      	mov	r2, r4
 8011400:	462b      	mov	r3, r5
 8011402:	f7ef f909 	bl	8000618 <__aeabi_dmul>
 8011406:	a372      	add	r3, pc, #456	; (adr r3, 80115d0 <__ieee754_pow+0x6f0>)
 8011408:	e9d3 2300 	ldrd	r2, r3, [r3]
 801140c:	f7ee ff4e 	bl	80002ac <__adddf3>
 8011410:	4622      	mov	r2, r4
 8011412:	462b      	mov	r3, r5
 8011414:	f7ef f900 	bl	8000618 <__aeabi_dmul>
 8011418:	a36f      	add	r3, pc, #444	; (adr r3, 80115d8 <__ieee754_pow+0x6f8>)
 801141a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801141e:	f7ee ff45 	bl	80002ac <__adddf3>
 8011422:	4622      	mov	r2, r4
 8011424:	4606      	mov	r6, r0
 8011426:	460f      	mov	r7, r1
 8011428:	462b      	mov	r3, r5
 801142a:	4620      	mov	r0, r4
 801142c:	4629      	mov	r1, r5
 801142e:	f7ef f8f3 	bl	8000618 <__aeabi_dmul>
 8011432:	4602      	mov	r2, r0
 8011434:	460b      	mov	r3, r1
 8011436:	4630      	mov	r0, r6
 8011438:	4639      	mov	r1, r7
 801143a:	f7ef f8ed 	bl	8000618 <__aeabi_dmul>
 801143e:	4642      	mov	r2, r8
 8011440:	4604      	mov	r4, r0
 8011442:	460d      	mov	r5, r1
 8011444:	464b      	mov	r3, r9
 8011446:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801144a:	f7ee ff2f 	bl	80002ac <__adddf3>
 801144e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011452:	f7ef f8e1 	bl	8000618 <__aeabi_dmul>
 8011456:	4622      	mov	r2, r4
 8011458:	462b      	mov	r3, r5
 801145a:	f7ee ff27 	bl	80002ac <__adddf3>
 801145e:	4642      	mov	r2, r8
 8011460:	4606      	mov	r6, r0
 8011462:	460f      	mov	r7, r1
 8011464:	464b      	mov	r3, r9
 8011466:	4640      	mov	r0, r8
 8011468:	4649      	mov	r1, r9
 801146a:	f7ef f8d5 	bl	8000618 <__aeabi_dmul>
 801146e:	2200      	movs	r2, #0
 8011470:	4b68      	ldr	r3, [pc, #416]	; (8011614 <__ieee754_pow+0x734>)
 8011472:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8011476:	f7ee ff19 	bl	80002ac <__adddf3>
 801147a:	4632      	mov	r2, r6
 801147c:	463b      	mov	r3, r7
 801147e:	f7ee ff15 	bl	80002ac <__adddf3>
 8011482:	9802      	ldr	r0, [sp, #8]
 8011484:	460d      	mov	r5, r1
 8011486:	4604      	mov	r4, r0
 8011488:	4602      	mov	r2, r0
 801148a:	460b      	mov	r3, r1
 801148c:	4640      	mov	r0, r8
 801148e:	4649      	mov	r1, r9
 8011490:	f7ef f8c2 	bl	8000618 <__aeabi_dmul>
 8011494:	2200      	movs	r2, #0
 8011496:	4680      	mov	r8, r0
 8011498:	4689      	mov	r9, r1
 801149a:	4b5e      	ldr	r3, [pc, #376]	; (8011614 <__ieee754_pow+0x734>)
 801149c:	4620      	mov	r0, r4
 801149e:	4629      	mov	r1, r5
 80114a0:	f7ee ff02 	bl	80002a8 <__aeabi_dsub>
 80114a4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80114a8:	f7ee fefe 	bl	80002a8 <__aeabi_dsub>
 80114ac:	4602      	mov	r2, r0
 80114ae:	460b      	mov	r3, r1
 80114b0:	4630      	mov	r0, r6
 80114b2:	4639      	mov	r1, r7
 80114b4:	f7ee fef8 	bl	80002a8 <__aeabi_dsub>
 80114b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80114bc:	f7ef f8ac 	bl	8000618 <__aeabi_dmul>
 80114c0:	4622      	mov	r2, r4
 80114c2:	4606      	mov	r6, r0
 80114c4:	460f      	mov	r7, r1
 80114c6:	462b      	mov	r3, r5
 80114c8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80114cc:	f7ef f8a4 	bl	8000618 <__aeabi_dmul>
 80114d0:	4602      	mov	r2, r0
 80114d2:	460b      	mov	r3, r1
 80114d4:	4630      	mov	r0, r6
 80114d6:	4639      	mov	r1, r7
 80114d8:	f7ee fee8 	bl	80002ac <__adddf3>
 80114dc:	4606      	mov	r6, r0
 80114de:	460f      	mov	r7, r1
 80114e0:	4602      	mov	r2, r0
 80114e2:	460b      	mov	r3, r1
 80114e4:	4640      	mov	r0, r8
 80114e6:	4649      	mov	r1, r9
 80114e8:	f7ee fee0 	bl	80002ac <__adddf3>
 80114ec:	9802      	ldr	r0, [sp, #8]
 80114ee:	a33c      	add	r3, pc, #240	; (adr r3, 80115e0 <__ieee754_pow+0x700>)
 80114f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114f4:	4604      	mov	r4, r0
 80114f6:	460d      	mov	r5, r1
 80114f8:	f7ef f88e 	bl	8000618 <__aeabi_dmul>
 80114fc:	4642      	mov	r2, r8
 80114fe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8011502:	464b      	mov	r3, r9
 8011504:	4620      	mov	r0, r4
 8011506:	4629      	mov	r1, r5
 8011508:	f7ee fece 	bl	80002a8 <__aeabi_dsub>
 801150c:	4602      	mov	r2, r0
 801150e:	460b      	mov	r3, r1
 8011510:	4630      	mov	r0, r6
 8011512:	4639      	mov	r1, r7
 8011514:	f7ee fec8 	bl	80002a8 <__aeabi_dsub>
 8011518:	a333      	add	r3, pc, #204	; (adr r3, 80115e8 <__ieee754_pow+0x708>)
 801151a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801151e:	f7ef f87b 	bl	8000618 <__aeabi_dmul>
 8011522:	a333      	add	r3, pc, #204	; (adr r3, 80115f0 <__ieee754_pow+0x710>)
 8011524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011528:	4606      	mov	r6, r0
 801152a:	460f      	mov	r7, r1
 801152c:	4620      	mov	r0, r4
 801152e:	4629      	mov	r1, r5
 8011530:	f7ef f872 	bl	8000618 <__aeabi_dmul>
 8011534:	4602      	mov	r2, r0
 8011536:	460b      	mov	r3, r1
 8011538:	4630      	mov	r0, r6
 801153a:	4639      	mov	r1, r7
 801153c:	f7ee feb6 	bl	80002ac <__adddf3>
 8011540:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011542:	4b35      	ldr	r3, [pc, #212]	; (8011618 <__ieee754_pow+0x738>)
 8011544:	4413      	add	r3, r2
 8011546:	e9d3 2300 	ldrd	r2, r3, [r3]
 801154a:	f7ee feaf 	bl	80002ac <__adddf3>
 801154e:	4604      	mov	r4, r0
 8011550:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011552:	460d      	mov	r5, r1
 8011554:	f7ee fff6 	bl	8000544 <__aeabi_i2d>
 8011558:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801155a:	4b30      	ldr	r3, [pc, #192]	; (801161c <__ieee754_pow+0x73c>)
 801155c:	4413      	add	r3, r2
 801155e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011562:	4606      	mov	r6, r0
 8011564:	460f      	mov	r7, r1
 8011566:	4622      	mov	r2, r4
 8011568:	462b      	mov	r3, r5
 801156a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801156e:	f7ee fe9d 	bl	80002ac <__adddf3>
 8011572:	4642      	mov	r2, r8
 8011574:	464b      	mov	r3, r9
 8011576:	f7ee fe99 	bl	80002ac <__adddf3>
 801157a:	4632      	mov	r2, r6
 801157c:	463b      	mov	r3, r7
 801157e:	f7ee fe95 	bl	80002ac <__adddf3>
 8011582:	9802      	ldr	r0, [sp, #8]
 8011584:	4632      	mov	r2, r6
 8011586:	463b      	mov	r3, r7
 8011588:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801158c:	f7ee fe8c 	bl	80002a8 <__aeabi_dsub>
 8011590:	4642      	mov	r2, r8
 8011592:	464b      	mov	r3, r9
 8011594:	f7ee fe88 	bl	80002a8 <__aeabi_dsub>
 8011598:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801159c:	e607      	b.n	80111ae <__ieee754_pow+0x2ce>
 801159e:	f04f 0a01 	mov.w	sl, #1
 80115a2:	e6a5      	b.n	80112f0 <__ieee754_pow+0x410>
 80115a4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 80115f8 <__ieee754_pow+0x718>
 80115a8:	e613      	b.n	80111d2 <__ieee754_pow+0x2f2>
 80115aa:	bf00      	nop
 80115ac:	f3af 8000 	nop.w
 80115b0:	4a454eef 	.word	0x4a454eef
 80115b4:	3fca7e28 	.word	0x3fca7e28
 80115b8:	93c9db65 	.word	0x93c9db65
 80115bc:	3fcd864a 	.word	0x3fcd864a
 80115c0:	a91d4101 	.word	0xa91d4101
 80115c4:	3fd17460 	.word	0x3fd17460
 80115c8:	518f264d 	.word	0x518f264d
 80115cc:	3fd55555 	.word	0x3fd55555
 80115d0:	db6fabff 	.word	0xdb6fabff
 80115d4:	3fdb6db6 	.word	0x3fdb6db6
 80115d8:	33333303 	.word	0x33333303
 80115dc:	3fe33333 	.word	0x3fe33333
 80115e0:	e0000000 	.word	0xe0000000
 80115e4:	3feec709 	.word	0x3feec709
 80115e8:	dc3a03fd 	.word	0xdc3a03fd
 80115ec:	3feec709 	.word	0x3feec709
 80115f0:	145b01f5 	.word	0x145b01f5
 80115f4:	be3e2fe0 	.word	0xbe3e2fe0
 80115f8:	00000000 	.word	0x00000000
 80115fc:	3ff00000 	.word	0x3ff00000
 8011600:	43400000 	.word	0x43400000
 8011604:	0003988e 	.word	0x0003988e
 8011608:	000bb679 	.word	0x000bb679
 801160c:	08012710 	.word	0x08012710
 8011610:	3ff00000 	.word	0x3ff00000
 8011614:	40080000 	.word	0x40080000
 8011618:	08012730 	.word	0x08012730
 801161c:	08012720 	.word	0x08012720
 8011620:	a3b4      	add	r3, pc, #720	; (adr r3, 80118f4 <__ieee754_pow+0xa14>)
 8011622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011626:	4640      	mov	r0, r8
 8011628:	4649      	mov	r1, r9
 801162a:	f7ee fe3f 	bl	80002ac <__adddf3>
 801162e:	4622      	mov	r2, r4
 8011630:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011634:	462b      	mov	r3, r5
 8011636:	4630      	mov	r0, r6
 8011638:	4639      	mov	r1, r7
 801163a:	f7ee fe35 	bl	80002a8 <__aeabi_dsub>
 801163e:	4602      	mov	r2, r0
 8011640:	460b      	mov	r3, r1
 8011642:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011646:	f7ef fa77 	bl	8000b38 <__aeabi_dcmpgt>
 801164a:	2800      	cmp	r0, #0
 801164c:	f47f adfe 	bne.w	801124c <__ieee754_pow+0x36c>
 8011650:	4aa3      	ldr	r2, [pc, #652]	; (80118e0 <__ieee754_pow+0xa00>)
 8011652:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011656:	4293      	cmp	r3, r2
 8011658:	f340 810a 	ble.w	8011870 <__ieee754_pow+0x990>
 801165c:	151b      	asrs	r3, r3, #20
 801165e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8011662:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8011666:	fa4a f303 	asr.w	r3, sl, r3
 801166a:	445b      	add	r3, fp
 801166c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8011670:	4e9c      	ldr	r6, [pc, #624]	; (80118e4 <__ieee754_pow+0xa04>)
 8011672:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8011676:	4116      	asrs	r6, r2
 8011678:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 801167c:	2000      	movs	r0, #0
 801167e:	ea23 0106 	bic.w	r1, r3, r6
 8011682:	f1c2 0214 	rsb	r2, r2, #20
 8011686:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801168a:	fa4a fa02 	asr.w	sl, sl, r2
 801168e:	f1bb 0f00 	cmp.w	fp, #0
 8011692:	4602      	mov	r2, r0
 8011694:	460b      	mov	r3, r1
 8011696:	4620      	mov	r0, r4
 8011698:	4629      	mov	r1, r5
 801169a:	bfb8      	it	lt
 801169c:	f1ca 0a00 	rsblt	sl, sl, #0
 80116a0:	f7ee fe02 	bl	80002a8 <__aeabi_dsub>
 80116a4:	e9cd 0100 	strd	r0, r1, [sp]
 80116a8:	4642      	mov	r2, r8
 80116aa:	464b      	mov	r3, r9
 80116ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80116b0:	f7ee fdfc 	bl	80002ac <__adddf3>
 80116b4:	2000      	movs	r0, #0
 80116b6:	a378      	add	r3, pc, #480	; (adr r3, 8011898 <__ieee754_pow+0x9b8>)
 80116b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116bc:	4604      	mov	r4, r0
 80116be:	460d      	mov	r5, r1
 80116c0:	f7ee ffaa 	bl	8000618 <__aeabi_dmul>
 80116c4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80116c8:	4606      	mov	r6, r0
 80116ca:	460f      	mov	r7, r1
 80116cc:	4620      	mov	r0, r4
 80116ce:	4629      	mov	r1, r5
 80116d0:	f7ee fdea 	bl	80002a8 <__aeabi_dsub>
 80116d4:	4602      	mov	r2, r0
 80116d6:	460b      	mov	r3, r1
 80116d8:	4640      	mov	r0, r8
 80116da:	4649      	mov	r1, r9
 80116dc:	f7ee fde4 	bl	80002a8 <__aeabi_dsub>
 80116e0:	a36f      	add	r3, pc, #444	; (adr r3, 80118a0 <__ieee754_pow+0x9c0>)
 80116e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116e6:	f7ee ff97 	bl	8000618 <__aeabi_dmul>
 80116ea:	a36f      	add	r3, pc, #444	; (adr r3, 80118a8 <__ieee754_pow+0x9c8>)
 80116ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116f0:	4680      	mov	r8, r0
 80116f2:	4689      	mov	r9, r1
 80116f4:	4620      	mov	r0, r4
 80116f6:	4629      	mov	r1, r5
 80116f8:	f7ee ff8e 	bl	8000618 <__aeabi_dmul>
 80116fc:	4602      	mov	r2, r0
 80116fe:	460b      	mov	r3, r1
 8011700:	4640      	mov	r0, r8
 8011702:	4649      	mov	r1, r9
 8011704:	f7ee fdd2 	bl	80002ac <__adddf3>
 8011708:	4604      	mov	r4, r0
 801170a:	460d      	mov	r5, r1
 801170c:	4602      	mov	r2, r0
 801170e:	460b      	mov	r3, r1
 8011710:	4630      	mov	r0, r6
 8011712:	4639      	mov	r1, r7
 8011714:	f7ee fdca 	bl	80002ac <__adddf3>
 8011718:	4632      	mov	r2, r6
 801171a:	463b      	mov	r3, r7
 801171c:	4680      	mov	r8, r0
 801171e:	4689      	mov	r9, r1
 8011720:	f7ee fdc2 	bl	80002a8 <__aeabi_dsub>
 8011724:	4602      	mov	r2, r0
 8011726:	460b      	mov	r3, r1
 8011728:	4620      	mov	r0, r4
 801172a:	4629      	mov	r1, r5
 801172c:	f7ee fdbc 	bl	80002a8 <__aeabi_dsub>
 8011730:	4642      	mov	r2, r8
 8011732:	4606      	mov	r6, r0
 8011734:	460f      	mov	r7, r1
 8011736:	464b      	mov	r3, r9
 8011738:	4640      	mov	r0, r8
 801173a:	4649      	mov	r1, r9
 801173c:	f7ee ff6c 	bl	8000618 <__aeabi_dmul>
 8011740:	a35b      	add	r3, pc, #364	; (adr r3, 80118b0 <__ieee754_pow+0x9d0>)
 8011742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011746:	4604      	mov	r4, r0
 8011748:	460d      	mov	r5, r1
 801174a:	f7ee ff65 	bl	8000618 <__aeabi_dmul>
 801174e:	a35a      	add	r3, pc, #360	; (adr r3, 80118b8 <__ieee754_pow+0x9d8>)
 8011750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011754:	f7ee fda8 	bl	80002a8 <__aeabi_dsub>
 8011758:	4622      	mov	r2, r4
 801175a:	462b      	mov	r3, r5
 801175c:	f7ee ff5c 	bl	8000618 <__aeabi_dmul>
 8011760:	a357      	add	r3, pc, #348	; (adr r3, 80118c0 <__ieee754_pow+0x9e0>)
 8011762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011766:	f7ee fda1 	bl	80002ac <__adddf3>
 801176a:	4622      	mov	r2, r4
 801176c:	462b      	mov	r3, r5
 801176e:	f7ee ff53 	bl	8000618 <__aeabi_dmul>
 8011772:	a355      	add	r3, pc, #340	; (adr r3, 80118c8 <__ieee754_pow+0x9e8>)
 8011774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011778:	f7ee fd96 	bl	80002a8 <__aeabi_dsub>
 801177c:	4622      	mov	r2, r4
 801177e:	462b      	mov	r3, r5
 8011780:	f7ee ff4a 	bl	8000618 <__aeabi_dmul>
 8011784:	a352      	add	r3, pc, #328	; (adr r3, 80118d0 <__ieee754_pow+0x9f0>)
 8011786:	e9d3 2300 	ldrd	r2, r3, [r3]
 801178a:	f7ee fd8f 	bl	80002ac <__adddf3>
 801178e:	4622      	mov	r2, r4
 8011790:	462b      	mov	r3, r5
 8011792:	f7ee ff41 	bl	8000618 <__aeabi_dmul>
 8011796:	4602      	mov	r2, r0
 8011798:	460b      	mov	r3, r1
 801179a:	4640      	mov	r0, r8
 801179c:	4649      	mov	r1, r9
 801179e:	f7ee fd83 	bl	80002a8 <__aeabi_dsub>
 80117a2:	4604      	mov	r4, r0
 80117a4:	460d      	mov	r5, r1
 80117a6:	4602      	mov	r2, r0
 80117a8:	460b      	mov	r3, r1
 80117aa:	4640      	mov	r0, r8
 80117ac:	4649      	mov	r1, r9
 80117ae:	f7ee ff33 	bl	8000618 <__aeabi_dmul>
 80117b2:	2200      	movs	r2, #0
 80117b4:	e9cd 0100 	strd	r0, r1, [sp]
 80117b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80117bc:	4620      	mov	r0, r4
 80117be:	4629      	mov	r1, r5
 80117c0:	f7ee fd72 	bl	80002a8 <__aeabi_dsub>
 80117c4:	4602      	mov	r2, r0
 80117c6:	460b      	mov	r3, r1
 80117c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80117cc:	f7ef f84e 	bl	800086c <__aeabi_ddiv>
 80117d0:	4632      	mov	r2, r6
 80117d2:	4604      	mov	r4, r0
 80117d4:	460d      	mov	r5, r1
 80117d6:	463b      	mov	r3, r7
 80117d8:	4640      	mov	r0, r8
 80117da:	4649      	mov	r1, r9
 80117dc:	f7ee ff1c 	bl	8000618 <__aeabi_dmul>
 80117e0:	4632      	mov	r2, r6
 80117e2:	463b      	mov	r3, r7
 80117e4:	f7ee fd62 	bl	80002ac <__adddf3>
 80117e8:	4602      	mov	r2, r0
 80117ea:	460b      	mov	r3, r1
 80117ec:	4620      	mov	r0, r4
 80117ee:	4629      	mov	r1, r5
 80117f0:	f7ee fd5a 	bl	80002a8 <__aeabi_dsub>
 80117f4:	4642      	mov	r2, r8
 80117f6:	464b      	mov	r3, r9
 80117f8:	f7ee fd56 	bl	80002a8 <__aeabi_dsub>
 80117fc:	4602      	mov	r2, r0
 80117fe:	460b      	mov	r3, r1
 8011800:	2000      	movs	r0, #0
 8011802:	4939      	ldr	r1, [pc, #228]	; (80118e8 <__ieee754_pow+0xa08>)
 8011804:	f7ee fd50 	bl	80002a8 <__aeabi_dsub>
 8011808:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 801180c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8011810:	4602      	mov	r2, r0
 8011812:	460b      	mov	r3, r1
 8011814:	da2f      	bge.n	8011876 <__ieee754_pow+0x996>
 8011816:	4650      	mov	r0, sl
 8011818:	ec43 2b10 	vmov	d0, r2, r3
 801181c:	f000 f9c0 	bl	8011ba0 <scalbn>
 8011820:	ec51 0b10 	vmov	r0, r1, d0
 8011824:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011828:	f7ff bbf1 	b.w	801100e <__ieee754_pow+0x12e>
 801182c:	4b2f      	ldr	r3, [pc, #188]	; (80118ec <__ieee754_pow+0xa0c>)
 801182e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8011832:	429e      	cmp	r6, r3
 8011834:	f77f af0c 	ble.w	8011650 <__ieee754_pow+0x770>
 8011838:	4b2d      	ldr	r3, [pc, #180]	; (80118f0 <__ieee754_pow+0xa10>)
 801183a:	440b      	add	r3, r1
 801183c:	4303      	orrs	r3, r0
 801183e:	d00b      	beq.n	8011858 <__ieee754_pow+0x978>
 8011840:	a325      	add	r3, pc, #148	; (adr r3, 80118d8 <__ieee754_pow+0x9f8>)
 8011842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011846:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801184a:	f7ee fee5 	bl	8000618 <__aeabi_dmul>
 801184e:	a322      	add	r3, pc, #136	; (adr r3, 80118d8 <__ieee754_pow+0x9f8>)
 8011850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011854:	f7ff bbdb 	b.w	801100e <__ieee754_pow+0x12e>
 8011858:	4622      	mov	r2, r4
 801185a:	462b      	mov	r3, r5
 801185c:	f7ee fd24 	bl	80002a8 <__aeabi_dsub>
 8011860:	4642      	mov	r2, r8
 8011862:	464b      	mov	r3, r9
 8011864:	f7ef f95e 	bl	8000b24 <__aeabi_dcmpge>
 8011868:	2800      	cmp	r0, #0
 801186a:	f43f aef1 	beq.w	8011650 <__ieee754_pow+0x770>
 801186e:	e7e7      	b.n	8011840 <__ieee754_pow+0x960>
 8011870:	f04f 0a00 	mov.w	sl, #0
 8011874:	e718      	b.n	80116a8 <__ieee754_pow+0x7c8>
 8011876:	4621      	mov	r1, r4
 8011878:	e7d4      	b.n	8011824 <__ieee754_pow+0x944>
 801187a:	2000      	movs	r0, #0
 801187c:	491a      	ldr	r1, [pc, #104]	; (80118e8 <__ieee754_pow+0xa08>)
 801187e:	f7ff bb8f 	b.w	8010fa0 <__ieee754_pow+0xc0>
 8011882:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011886:	f7ff bb8b 	b.w	8010fa0 <__ieee754_pow+0xc0>
 801188a:	4630      	mov	r0, r6
 801188c:	4639      	mov	r1, r7
 801188e:	f7ff bb87 	b.w	8010fa0 <__ieee754_pow+0xc0>
 8011892:	4693      	mov	fp, r2
 8011894:	f7ff bb98 	b.w	8010fc8 <__ieee754_pow+0xe8>
 8011898:	00000000 	.word	0x00000000
 801189c:	3fe62e43 	.word	0x3fe62e43
 80118a0:	fefa39ef 	.word	0xfefa39ef
 80118a4:	3fe62e42 	.word	0x3fe62e42
 80118a8:	0ca86c39 	.word	0x0ca86c39
 80118ac:	be205c61 	.word	0xbe205c61
 80118b0:	72bea4d0 	.word	0x72bea4d0
 80118b4:	3e663769 	.word	0x3e663769
 80118b8:	c5d26bf1 	.word	0xc5d26bf1
 80118bc:	3ebbbd41 	.word	0x3ebbbd41
 80118c0:	af25de2c 	.word	0xaf25de2c
 80118c4:	3f11566a 	.word	0x3f11566a
 80118c8:	16bebd93 	.word	0x16bebd93
 80118cc:	3f66c16c 	.word	0x3f66c16c
 80118d0:	5555553e 	.word	0x5555553e
 80118d4:	3fc55555 	.word	0x3fc55555
 80118d8:	c2f8f359 	.word	0xc2f8f359
 80118dc:	01a56e1f 	.word	0x01a56e1f
 80118e0:	3fe00000 	.word	0x3fe00000
 80118e4:	000fffff 	.word	0x000fffff
 80118e8:	3ff00000 	.word	0x3ff00000
 80118ec:	4090cbff 	.word	0x4090cbff
 80118f0:	3f6f3400 	.word	0x3f6f3400
 80118f4:	652b82fe 	.word	0x652b82fe
 80118f8:	3c971547 	.word	0x3c971547

080118fc <__ieee754_sqrt>:
 80118fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011900:	4955      	ldr	r1, [pc, #340]	; (8011a58 <__ieee754_sqrt+0x15c>)
 8011902:	ec55 4b10 	vmov	r4, r5, d0
 8011906:	43a9      	bics	r1, r5
 8011908:	462b      	mov	r3, r5
 801190a:	462a      	mov	r2, r5
 801190c:	d112      	bne.n	8011934 <__ieee754_sqrt+0x38>
 801190e:	ee10 2a10 	vmov	r2, s0
 8011912:	ee10 0a10 	vmov	r0, s0
 8011916:	4629      	mov	r1, r5
 8011918:	f7ee fe7e 	bl	8000618 <__aeabi_dmul>
 801191c:	4602      	mov	r2, r0
 801191e:	460b      	mov	r3, r1
 8011920:	4620      	mov	r0, r4
 8011922:	4629      	mov	r1, r5
 8011924:	f7ee fcc2 	bl	80002ac <__adddf3>
 8011928:	4604      	mov	r4, r0
 801192a:	460d      	mov	r5, r1
 801192c:	ec45 4b10 	vmov	d0, r4, r5
 8011930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011934:	2d00      	cmp	r5, #0
 8011936:	ee10 0a10 	vmov	r0, s0
 801193a:	4621      	mov	r1, r4
 801193c:	dc0f      	bgt.n	801195e <__ieee754_sqrt+0x62>
 801193e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8011942:	4330      	orrs	r0, r6
 8011944:	d0f2      	beq.n	801192c <__ieee754_sqrt+0x30>
 8011946:	b155      	cbz	r5, 801195e <__ieee754_sqrt+0x62>
 8011948:	ee10 2a10 	vmov	r2, s0
 801194c:	4620      	mov	r0, r4
 801194e:	4629      	mov	r1, r5
 8011950:	f7ee fcaa 	bl	80002a8 <__aeabi_dsub>
 8011954:	4602      	mov	r2, r0
 8011956:	460b      	mov	r3, r1
 8011958:	f7ee ff88 	bl	800086c <__aeabi_ddiv>
 801195c:	e7e4      	b.n	8011928 <__ieee754_sqrt+0x2c>
 801195e:	151b      	asrs	r3, r3, #20
 8011960:	d073      	beq.n	8011a4a <__ieee754_sqrt+0x14e>
 8011962:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8011966:	07dd      	lsls	r5, r3, #31
 8011968:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801196c:	bf48      	it	mi
 801196e:	0fc8      	lsrmi	r0, r1, #31
 8011970:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8011974:	bf44      	itt	mi
 8011976:	0049      	lslmi	r1, r1, #1
 8011978:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 801197c:	2500      	movs	r5, #0
 801197e:	1058      	asrs	r0, r3, #1
 8011980:	0fcb      	lsrs	r3, r1, #31
 8011982:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8011986:	0049      	lsls	r1, r1, #1
 8011988:	2316      	movs	r3, #22
 801198a:	462c      	mov	r4, r5
 801198c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8011990:	19a7      	adds	r7, r4, r6
 8011992:	4297      	cmp	r7, r2
 8011994:	bfde      	ittt	le
 8011996:	19bc      	addle	r4, r7, r6
 8011998:	1bd2      	suble	r2, r2, r7
 801199a:	19ad      	addle	r5, r5, r6
 801199c:	0fcf      	lsrs	r7, r1, #31
 801199e:	3b01      	subs	r3, #1
 80119a0:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 80119a4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80119a8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80119ac:	d1f0      	bne.n	8011990 <__ieee754_sqrt+0x94>
 80119ae:	f04f 0c20 	mov.w	ip, #32
 80119b2:	469e      	mov	lr, r3
 80119b4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80119b8:	42a2      	cmp	r2, r4
 80119ba:	eb06 070e 	add.w	r7, r6, lr
 80119be:	dc02      	bgt.n	80119c6 <__ieee754_sqrt+0xca>
 80119c0:	d112      	bne.n	80119e8 <__ieee754_sqrt+0xec>
 80119c2:	428f      	cmp	r7, r1
 80119c4:	d810      	bhi.n	80119e8 <__ieee754_sqrt+0xec>
 80119c6:	2f00      	cmp	r7, #0
 80119c8:	eb07 0e06 	add.w	lr, r7, r6
 80119cc:	da42      	bge.n	8011a54 <__ieee754_sqrt+0x158>
 80119ce:	f1be 0f00 	cmp.w	lr, #0
 80119d2:	db3f      	blt.n	8011a54 <__ieee754_sqrt+0x158>
 80119d4:	f104 0801 	add.w	r8, r4, #1
 80119d8:	1b12      	subs	r2, r2, r4
 80119da:	428f      	cmp	r7, r1
 80119dc:	bf88      	it	hi
 80119de:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80119e2:	1bc9      	subs	r1, r1, r7
 80119e4:	4433      	add	r3, r6
 80119e6:	4644      	mov	r4, r8
 80119e8:	0052      	lsls	r2, r2, #1
 80119ea:	f1bc 0c01 	subs.w	ip, ip, #1
 80119ee:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 80119f2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80119f6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80119fa:	d1dd      	bne.n	80119b8 <__ieee754_sqrt+0xbc>
 80119fc:	430a      	orrs	r2, r1
 80119fe:	d006      	beq.n	8011a0e <__ieee754_sqrt+0x112>
 8011a00:	1c5c      	adds	r4, r3, #1
 8011a02:	bf13      	iteet	ne
 8011a04:	3301      	addne	r3, #1
 8011a06:	3501      	addeq	r5, #1
 8011a08:	4663      	moveq	r3, ip
 8011a0a:	f023 0301 	bicne.w	r3, r3, #1
 8011a0e:	106a      	asrs	r2, r5, #1
 8011a10:	085b      	lsrs	r3, r3, #1
 8011a12:	07e9      	lsls	r1, r5, #31
 8011a14:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8011a18:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8011a1c:	bf48      	it	mi
 8011a1e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8011a22:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8011a26:	461c      	mov	r4, r3
 8011a28:	e780      	b.n	801192c <__ieee754_sqrt+0x30>
 8011a2a:	0aca      	lsrs	r2, r1, #11
 8011a2c:	3815      	subs	r0, #21
 8011a2e:	0549      	lsls	r1, r1, #21
 8011a30:	2a00      	cmp	r2, #0
 8011a32:	d0fa      	beq.n	8011a2a <__ieee754_sqrt+0x12e>
 8011a34:	02d6      	lsls	r6, r2, #11
 8011a36:	d50a      	bpl.n	8011a4e <__ieee754_sqrt+0x152>
 8011a38:	f1c3 0420 	rsb	r4, r3, #32
 8011a3c:	fa21 f404 	lsr.w	r4, r1, r4
 8011a40:	1e5d      	subs	r5, r3, #1
 8011a42:	4099      	lsls	r1, r3
 8011a44:	4322      	orrs	r2, r4
 8011a46:	1b43      	subs	r3, r0, r5
 8011a48:	e78b      	b.n	8011962 <__ieee754_sqrt+0x66>
 8011a4a:	4618      	mov	r0, r3
 8011a4c:	e7f0      	b.n	8011a30 <__ieee754_sqrt+0x134>
 8011a4e:	0052      	lsls	r2, r2, #1
 8011a50:	3301      	adds	r3, #1
 8011a52:	e7ef      	b.n	8011a34 <__ieee754_sqrt+0x138>
 8011a54:	46a0      	mov	r8, r4
 8011a56:	e7bf      	b.n	80119d8 <__ieee754_sqrt+0xdc>
 8011a58:	7ff00000 	.word	0x7ff00000

08011a5c <fabs>:
 8011a5c:	ec51 0b10 	vmov	r0, r1, d0
 8011a60:	ee10 2a10 	vmov	r2, s0
 8011a64:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011a68:	ec43 2b10 	vmov	d0, r2, r3
 8011a6c:	4770      	bx	lr

08011a6e <finite>:
 8011a6e:	ee10 3a90 	vmov	r3, s1
 8011a72:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8011a76:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8011a7a:	0fc0      	lsrs	r0, r0, #31
 8011a7c:	4770      	bx	lr

08011a7e <matherr>:
 8011a7e:	2000      	movs	r0, #0
 8011a80:	4770      	bx	lr
 8011a82:	0000      	movs	r0, r0
 8011a84:	0000      	movs	r0, r0
	...

08011a88 <nan>:
 8011a88:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011a90 <nan+0x8>
 8011a8c:	4770      	bx	lr
 8011a8e:	bf00      	nop
 8011a90:	00000000 	.word	0x00000000
 8011a94:	7ff80000 	.word	0x7ff80000

08011a98 <rint>:
 8011a98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011a9a:	ec51 0b10 	vmov	r0, r1, d0
 8011a9e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8011aa2:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8011aa6:	2e13      	cmp	r6, #19
 8011aa8:	460b      	mov	r3, r1
 8011aaa:	ee10 4a10 	vmov	r4, s0
 8011aae:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8011ab2:	dc56      	bgt.n	8011b62 <rint+0xca>
 8011ab4:	2e00      	cmp	r6, #0
 8011ab6:	da2b      	bge.n	8011b10 <rint+0x78>
 8011ab8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8011abc:	4302      	orrs	r2, r0
 8011abe:	d023      	beq.n	8011b08 <rint+0x70>
 8011ac0:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8011ac4:	4302      	orrs	r2, r0
 8011ac6:	4254      	negs	r4, r2
 8011ac8:	4314      	orrs	r4, r2
 8011aca:	0c4b      	lsrs	r3, r1, #17
 8011acc:	0b24      	lsrs	r4, r4, #12
 8011ace:	045b      	lsls	r3, r3, #17
 8011ad0:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8011ad4:	ea44 0103 	orr.w	r1, r4, r3
 8011ad8:	460b      	mov	r3, r1
 8011ada:	492f      	ldr	r1, [pc, #188]	; (8011b98 <rint+0x100>)
 8011adc:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8011ae0:	e9d1 6700 	ldrd	r6, r7, [r1]
 8011ae4:	4602      	mov	r2, r0
 8011ae6:	4639      	mov	r1, r7
 8011ae8:	4630      	mov	r0, r6
 8011aea:	f7ee fbdf 	bl	80002ac <__adddf3>
 8011aee:	e9cd 0100 	strd	r0, r1, [sp]
 8011af2:	463b      	mov	r3, r7
 8011af4:	4632      	mov	r2, r6
 8011af6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011afa:	f7ee fbd5 	bl	80002a8 <__aeabi_dsub>
 8011afe:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011b02:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8011b06:	4639      	mov	r1, r7
 8011b08:	ec41 0b10 	vmov	d0, r0, r1
 8011b0c:	b003      	add	sp, #12
 8011b0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011b10:	4a22      	ldr	r2, [pc, #136]	; (8011b9c <rint+0x104>)
 8011b12:	4132      	asrs	r2, r6
 8011b14:	ea01 0702 	and.w	r7, r1, r2
 8011b18:	4307      	orrs	r7, r0
 8011b1a:	d0f5      	beq.n	8011b08 <rint+0x70>
 8011b1c:	0852      	lsrs	r2, r2, #1
 8011b1e:	4011      	ands	r1, r2
 8011b20:	430c      	orrs	r4, r1
 8011b22:	d00b      	beq.n	8011b3c <rint+0xa4>
 8011b24:	ea23 0202 	bic.w	r2, r3, r2
 8011b28:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8011b2c:	2e13      	cmp	r6, #19
 8011b2e:	fa43 f306 	asr.w	r3, r3, r6
 8011b32:	bf0c      	ite	eq
 8011b34:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8011b38:	2400      	movne	r4, #0
 8011b3a:	4313      	orrs	r3, r2
 8011b3c:	4916      	ldr	r1, [pc, #88]	; (8011b98 <rint+0x100>)
 8011b3e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8011b42:	4622      	mov	r2, r4
 8011b44:	e9d5 4500 	ldrd	r4, r5, [r5]
 8011b48:	4620      	mov	r0, r4
 8011b4a:	4629      	mov	r1, r5
 8011b4c:	f7ee fbae 	bl	80002ac <__adddf3>
 8011b50:	e9cd 0100 	strd	r0, r1, [sp]
 8011b54:	4622      	mov	r2, r4
 8011b56:	462b      	mov	r3, r5
 8011b58:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011b5c:	f7ee fba4 	bl	80002a8 <__aeabi_dsub>
 8011b60:	e7d2      	b.n	8011b08 <rint+0x70>
 8011b62:	2e33      	cmp	r6, #51	; 0x33
 8011b64:	dd07      	ble.n	8011b76 <rint+0xde>
 8011b66:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8011b6a:	d1cd      	bne.n	8011b08 <rint+0x70>
 8011b6c:	ee10 2a10 	vmov	r2, s0
 8011b70:	f7ee fb9c 	bl	80002ac <__adddf3>
 8011b74:	e7c8      	b.n	8011b08 <rint+0x70>
 8011b76:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8011b7a:	f04f 32ff 	mov.w	r2, #4294967295
 8011b7e:	40f2      	lsrs	r2, r6
 8011b80:	4210      	tst	r0, r2
 8011b82:	d0c1      	beq.n	8011b08 <rint+0x70>
 8011b84:	0852      	lsrs	r2, r2, #1
 8011b86:	4210      	tst	r0, r2
 8011b88:	bf1f      	itttt	ne
 8011b8a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8011b8e:	ea20 0202 	bicne.w	r2, r0, r2
 8011b92:	4134      	asrne	r4, r6
 8011b94:	4314      	orrne	r4, r2
 8011b96:	e7d1      	b.n	8011b3c <rint+0xa4>
 8011b98:	08012740 	.word	0x08012740
 8011b9c:	000fffff 	.word	0x000fffff

08011ba0 <scalbn>:
 8011ba0:	b570      	push	{r4, r5, r6, lr}
 8011ba2:	ec55 4b10 	vmov	r4, r5, d0
 8011ba6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8011baa:	4606      	mov	r6, r0
 8011bac:	462b      	mov	r3, r5
 8011bae:	b9aa      	cbnz	r2, 8011bdc <scalbn+0x3c>
 8011bb0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8011bb4:	4323      	orrs	r3, r4
 8011bb6:	d03b      	beq.n	8011c30 <scalbn+0x90>
 8011bb8:	4b31      	ldr	r3, [pc, #196]	; (8011c80 <scalbn+0xe0>)
 8011bba:	4629      	mov	r1, r5
 8011bbc:	2200      	movs	r2, #0
 8011bbe:	ee10 0a10 	vmov	r0, s0
 8011bc2:	f7ee fd29 	bl	8000618 <__aeabi_dmul>
 8011bc6:	4b2f      	ldr	r3, [pc, #188]	; (8011c84 <scalbn+0xe4>)
 8011bc8:	429e      	cmp	r6, r3
 8011bca:	4604      	mov	r4, r0
 8011bcc:	460d      	mov	r5, r1
 8011bce:	da12      	bge.n	8011bf6 <scalbn+0x56>
 8011bd0:	a327      	add	r3, pc, #156	; (adr r3, 8011c70 <scalbn+0xd0>)
 8011bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bd6:	f7ee fd1f 	bl	8000618 <__aeabi_dmul>
 8011bda:	e009      	b.n	8011bf0 <scalbn+0x50>
 8011bdc:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8011be0:	428a      	cmp	r2, r1
 8011be2:	d10c      	bne.n	8011bfe <scalbn+0x5e>
 8011be4:	ee10 2a10 	vmov	r2, s0
 8011be8:	4620      	mov	r0, r4
 8011bea:	4629      	mov	r1, r5
 8011bec:	f7ee fb5e 	bl	80002ac <__adddf3>
 8011bf0:	4604      	mov	r4, r0
 8011bf2:	460d      	mov	r5, r1
 8011bf4:	e01c      	b.n	8011c30 <scalbn+0x90>
 8011bf6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8011bfa:	460b      	mov	r3, r1
 8011bfc:	3a36      	subs	r2, #54	; 0x36
 8011bfe:	4432      	add	r2, r6
 8011c00:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8011c04:	428a      	cmp	r2, r1
 8011c06:	dd0b      	ble.n	8011c20 <scalbn+0x80>
 8011c08:	ec45 4b11 	vmov	d1, r4, r5
 8011c0c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8011c78 <scalbn+0xd8>
 8011c10:	f000 f83c 	bl	8011c8c <copysign>
 8011c14:	a318      	add	r3, pc, #96	; (adr r3, 8011c78 <scalbn+0xd8>)
 8011c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c1a:	ec51 0b10 	vmov	r0, r1, d0
 8011c1e:	e7da      	b.n	8011bd6 <scalbn+0x36>
 8011c20:	2a00      	cmp	r2, #0
 8011c22:	dd08      	ble.n	8011c36 <scalbn+0x96>
 8011c24:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011c28:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011c2c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8011c30:	ec45 4b10 	vmov	d0, r4, r5
 8011c34:	bd70      	pop	{r4, r5, r6, pc}
 8011c36:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8011c3a:	da0d      	bge.n	8011c58 <scalbn+0xb8>
 8011c3c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8011c40:	429e      	cmp	r6, r3
 8011c42:	ec45 4b11 	vmov	d1, r4, r5
 8011c46:	dce1      	bgt.n	8011c0c <scalbn+0x6c>
 8011c48:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8011c70 <scalbn+0xd0>
 8011c4c:	f000 f81e 	bl	8011c8c <copysign>
 8011c50:	a307      	add	r3, pc, #28	; (adr r3, 8011c70 <scalbn+0xd0>)
 8011c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c56:	e7e0      	b.n	8011c1a <scalbn+0x7a>
 8011c58:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011c5c:	3236      	adds	r2, #54	; 0x36
 8011c5e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011c62:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8011c66:	4620      	mov	r0, r4
 8011c68:	4629      	mov	r1, r5
 8011c6a:	2200      	movs	r2, #0
 8011c6c:	4b06      	ldr	r3, [pc, #24]	; (8011c88 <scalbn+0xe8>)
 8011c6e:	e7b2      	b.n	8011bd6 <scalbn+0x36>
 8011c70:	c2f8f359 	.word	0xc2f8f359
 8011c74:	01a56e1f 	.word	0x01a56e1f
 8011c78:	8800759c 	.word	0x8800759c
 8011c7c:	7e37e43c 	.word	0x7e37e43c
 8011c80:	43500000 	.word	0x43500000
 8011c84:	ffff3cb0 	.word	0xffff3cb0
 8011c88:	3c900000 	.word	0x3c900000

08011c8c <copysign>:
 8011c8c:	ec51 0b10 	vmov	r0, r1, d0
 8011c90:	ee11 0a90 	vmov	r0, s3
 8011c94:	ee10 2a10 	vmov	r2, s0
 8011c98:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8011c9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8011ca0:	ea41 0300 	orr.w	r3, r1, r0
 8011ca4:	ec43 2b10 	vmov	d0, r2, r3
 8011ca8:	4770      	bx	lr
	...

08011cac <_sbrk>:
 8011cac:	4b04      	ldr	r3, [pc, #16]	; (8011cc0 <_sbrk+0x14>)
 8011cae:	6819      	ldr	r1, [r3, #0]
 8011cb0:	4602      	mov	r2, r0
 8011cb2:	b909      	cbnz	r1, 8011cb8 <_sbrk+0xc>
 8011cb4:	4903      	ldr	r1, [pc, #12]	; (8011cc4 <_sbrk+0x18>)
 8011cb6:	6019      	str	r1, [r3, #0]
 8011cb8:	6818      	ldr	r0, [r3, #0]
 8011cba:	4402      	add	r2, r0
 8011cbc:	601a      	str	r2, [r3, #0]
 8011cbe:	4770      	bx	lr
 8011cc0:	20006754 	.word	0x20006754
 8011cc4:	20008428 	.word	0x20008428

08011cc8 <_init>:
 8011cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011cca:	bf00      	nop
 8011ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011cce:	bc08      	pop	{r3}
 8011cd0:	469e      	mov	lr, r3
 8011cd2:	4770      	bx	lr

08011cd4 <_fini>:
 8011cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011cd6:	bf00      	nop
 8011cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011cda:	bc08      	pop	{r3}
 8011cdc:	469e      	mov	lr, r3
 8011cde:	4770      	bx	lr
