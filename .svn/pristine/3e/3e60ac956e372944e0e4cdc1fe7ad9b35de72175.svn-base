
HUB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000148f4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00012b30  08014a88  08014a88  00024a88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080275b8  080275b8  00040228  2**0
                  CONTENTS
  4 .ARM          00000008  080275b8  080275b8  000375b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080275c0  080275c0  00040228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080275c0  080275c0  000375c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080275c4  080275c4  000375c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000228  20000000  080275c8  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008468  20000228  080277f0  00040228  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20008690  080277f0  00048690  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040228  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002d031  00000000  00000000  00040258  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000061f6  00000000  00000000  0006d289  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002080  00000000  00000000  00073480  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001dc0  00000000  00000000  00075500  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002ac48  00000000  00000000  000772c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00020e1c  00000000  00000000  000a1f08  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e537a  00000000  00000000  000c2d24  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001a809e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009480  00000000  00000000  001a811c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000228 	.word	0x20000228
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08014a6c 	.word	0x08014a6c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000022c 	.word	0x2000022c
 80001cc:	08014a6c 	.word	0x08014a6c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b972 	b.w	8000fa4 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9e08      	ldr	r6, [sp, #32]
 8000cde:	4604      	mov	r4, r0
 8000ce0:	4688      	mov	r8, r1
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d14b      	bne.n	8000d7e <__udivmoddi4+0xa6>
 8000ce6:	428a      	cmp	r2, r1
 8000ce8:	4615      	mov	r5, r2
 8000cea:	d967      	bls.n	8000dbc <__udivmoddi4+0xe4>
 8000cec:	fab2 f282 	clz	r2, r2
 8000cf0:	b14a      	cbz	r2, 8000d06 <__udivmoddi4+0x2e>
 8000cf2:	f1c2 0720 	rsb	r7, r2, #32
 8000cf6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cfa:	fa20 f707 	lsr.w	r7, r0, r7
 8000cfe:	4095      	lsls	r5, r2
 8000d00:	ea47 0803 	orr.w	r8, r7, r3
 8000d04:	4094      	lsls	r4, r2
 8000d06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d0a:	0c23      	lsrs	r3, r4, #16
 8000d0c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d10:	fa1f fc85 	uxth.w	ip, r5
 8000d14:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d18:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d1c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d20:	4299      	cmp	r1, r3
 8000d22:	d909      	bls.n	8000d38 <__udivmoddi4+0x60>
 8000d24:	18eb      	adds	r3, r5, r3
 8000d26:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d2a:	f080 811b 	bcs.w	8000f64 <__udivmoddi4+0x28c>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 8118 	bls.w	8000f64 <__udivmoddi4+0x28c>
 8000d34:	3f02      	subs	r7, #2
 8000d36:	442b      	add	r3, r5
 8000d38:	1a5b      	subs	r3, r3, r1
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d48:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d4c:	45a4      	cmp	ip, r4
 8000d4e:	d909      	bls.n	8000d64 <__udivmoddi4+0x8c>
 8000d50:	192c      	adds	r4, r5, r4
 8000d52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d56:	f080 8107 	bcs.w	8000f68 <__udivmoddi4+0x290>
 8000d5a:	45a4      	cmp	ip, r4
 8000d5c:	f240 8104 	bls.w	8000f68 <__udivmoddi4+0x290>
 8000d60:	3802      	subs	r0, #2
 8000d62:	442c      	add	r4, r5
 8000d64:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d68:	eba4 040c 	sub.w	r4, r4, ip
 8000d6c:	2700      	movs	r7, #0
 8000d6e:	b11e      	cbz	r6, 8000d78 <__udivmoddi4+0xa0>
 8000d70:	40d4      	lsrs	r4, r2
 8000d72:	2300      	movs	r3, #0
 8000d74:	e9c6 4300 	strd	r4, r3, [r6]
 8000d78:	4639      	mov	r1, r7
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0xbe>
 8000d82:	2e00      	cmp	r6, #0
 8000d84:	f000 80eb 	beq.w	8000f5e <__udivmoddi4+0x286>
 8000d88:	2700      	movs	r7, #0
 8000d8a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d8e:	4638      	mov	r0, r7
 8000d90:	4639      	mov	r1, r7
 8000d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d96:	fab3 f783 	clz	r7, r3
 8000d9a:	2f00      	cmp	r7, #0
 8000d9c:	d147      	bne.n	8000e2e <__udivmoddi4+0x156>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d302      	bcc.n	8000da8 <__udivmoddi4+0xd0>
 8000da2:	4282      	cmp	r2, r0
 8000da4:	f200 80fa 	bhi.w	8000f9c <__udivmoddi4+0x2c4>
 8000da8:	1a84      	subs	r4, r0, r2
 8000daa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dae:	2001      	movs	r0, #1
 8000db0:	4698      	mov	r8, r3
 8000db2:	2e00      	cmp	r6, #0
 8000db4:	d0e0      	beq.n	8000d78 <__udivmoddi4+0xa0>
 8000db6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dba:	e7dd      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000dbc:	b902      	cbnz	r2, 8000dc0 <__udivmoddi4+0xe8>
 8000dbe:	deff      	udf	#255	; 0xff
 8000dc0:	fab2 f282 	clz	r2, r2
 8000dc4:	2a00      	cmp	r2, #0
 8000dc6:	f040 808f 	bne.w	8000ee8 <__udivmoddi4+0x210>
 8000dca:	1b49      	subs	r1, r1, r5
 8000dcc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dd0:	fa1f f885 	uxth.w	r8, r5
 8000dd4:	2701      	movs	r7, #1
 8000dd6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dda:	0c23      	lsrs	r3, r4, #16
 8000ddc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000de0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000de4:	fb08 f10c 	mul.w	r1, r8, ip
 8000de8:	4299      	cmp	r1, r3
 8000dea:	d907      	bls.n	8000dfc <__udivmoddi4+0x124>
 8000dec:	18eb      	adds	r3, r5, r3
 8000dee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000df2:	d202      	bcs.n	8000dfa <__udivmoddi4+0x122>
 8000df4:	4299      	cmp	r1, r3
 8000df6:	f200 80cd 	bhi.w	8000f94 <__udivmoddi4+0x2bc>
 8000dfa:	4684      	mov	ip, r0
 8000dfc:	1a59      	subs	r1, r3, r1
 8000dfe:	b2a3      	uxth	r3, r4
 8000e00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e04:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e08:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e0c:	fb08 f800 	mul.w	r8, r8, r0
 8000e10:	45a0      	cmp	r8, r4
 8000e12:	d907      	bls.n	8000e24 <__udivmoddi4+0x14c>
 8000e14:	192c      	adds	r4, r5, r4
 8000e16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e1a:	d202      	bcs.n	8000e22 <__udivmoddi4+0x14a>
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	f200 80b6 	bhi.w	8000f8e <__udivmoddi4+0x2b6>
 8000e22:	4618      	mov	r0, r3
 8000e24:	eba4 0408 	sub.w	r4, r4, r8
 8000e28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e2c:	e79f      	b.n	8000d6e <__udivmoddi4+0x96>
 8000e2e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e32:	40bb      	lsls	r3, r7
 8000e34:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e38:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e3c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e40:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e44:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e48:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e4c:	4325      	orrs	r5, r4
 8000e4e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e52:	0c2c      	lsrs	r4, r5, #16
 8000e54:	fb08 3319 	mls	r3, r8, r9, r3
 8000e58:	fa1f fa8e 	uxth.w	sl, lr
 8000e5c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e60:	fb09 f40a 	mul.w	r4, r9, sl
 8000e64:	429c      	cmp	r4, r3
 8000e66:	fa02 f207 	lsl.w	r2, r2, r7
 8000e6a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e6e:	d90b      	bls.n	8000e88 <__udivmoddi4+0x1b0>
 8000e70:	eb1e 0303 	adds.w	r3, lr, r3
 8000e74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e78:	f080 8087 	bcs.w	8000f8a <__udivmoddi4+0x2b2>
 8000e7c:	429c      	cmp	r4, r3
 8000e7e:	f240 8084 	bls.w	8000f8a <__udivmoddi4+0x2b2>
 8000e82:	f1a9 0902 	sub.w	r9, r9, #2
 8000e86:	4473      	add	r3, lr
 8000e88:	1b1b      	subs	r3, r3, r4
 8000e8a:	b2ad      	uxth	r5, r5
 8000e8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e90:	fb08 3310 	mls	r3, r8, r0, r3
 8000e94:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e98:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e9c:	45a2      	cmp	sl, r4
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x1da>
 8000ea0:	eb1e 0404 	adds.w	r4, lr, r4
 8000ea4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ea8:	d26b      	bcs.n	8000f82 <__udivmoddi4+0x2aa>
 8000eaa:	45a2      	cmp	sl, r4
 8000eac:	d969      	bls.n	8000f82 <__udivmoddi4+0x2aa>
 8000eae:	3802      	subs	r0, #2
 8000eb0:	4474      	add	r4, lr
 8000eb2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eb6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eba:	eba4 040a 	sub.w	r4, r4, sl
 8000ebe:	454c      	cmp	r4, r9
 8000ec0:	46c2      	mov	sl, r8
 8000ec2:	464b      	mov	r3, r9
 8000ec4:	d354      	bcc.n	8000f70 <__udivmoddi4+0x298>
 8000ec6:	d051      	beq.n	8000f6c <__udivmoddi4+0x294>
 8000ec8:	2e00      	cmp	r6, #0
 8000eca:	d069      	beq.n	8000fa0 <__udivmoddi4+0x2c8>
 8000ecc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ed0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ed4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ed8:	40fd      	lsrs	r5, r7
 8000eda:	40fc      	lsrs	r4, r7
 8000edc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ee0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ee4:	2700      	movs	r7, #0
 8000ee6:	e747      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000ee8:	f1c2 0320 	rsb	r3, r2, #32
 8000eec:	fa20 f703 	lsr.w	r7, r0, r3
 8000ef0:	4095      	lsls	r5, r2
 8000ef2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ef6:	fa21 f303 	lsr.w	r3, r1, r3
 8000efa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000efe:	4338      	orrs	r0, r7
 8000f00:	0c01      	lsrs	r1, r0, #16
 8000f02:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f06:	fa1f f885 	uxth.w	r8, r5
 8000f0a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f12:	fb07 f308 	mul.w	r3, r7, r8
 8000f16:	428b      	cmp	r3, r1
 8000f18:	fa04 f402 	lsl.w	r4, r4, r2
 8000f1c:	d907      	bls.n	8000f2e <__udivmoddi4+0x256>
 8000f1e:	1869      	adds	r1, r5, r1
 8000f20:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f24:	d22f      	bcs.n	8000f86 <__udivmoddi4+0x2ae>
 8000f26:	428b      	cmp	r3, r1
 8000f28:	d92d      	bls.n	8000f86 <__udivmoddi4+0x2ae>
 8000f2a:	3f02      	subs	r7, #2
 8000f2c:	4429      	add	r1, r5
 8000f2e:	1acb      	subs	r3, r1, r3
 8000f30:	b281      	uxth	r1, r0
 8000f32:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f36:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f3e:	fb00 f308 	mul.w	r3, r0, r8
 8000f42:	428b      	cmp	r3, r1
 8000f44:	d907      	bls.n	8000f56 <__udivmoddi4+0x27e>
 8000f46:	1869      	adds	r1, r5, r1
 8000f48:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f4c:	d217      	bcs.n	8000f7e <__udivmoddi4+0x2a6>
 8000f4e:	428b      	cmp	r3, r1
 8000f50:	d915      	bls.n	8000f7e <__udivmoddi4+0x2a6>
 8000f52:	3802      	subs	r0, #2
 8000f54:	4429      	add	r1, r5
 8000f56:	1ac9      	subs	r1, r1, r3
 8000f58:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f5c:	e73b      	b.n	8000dd6 <__udivmoddi4+0xfe>
 8000f5e:	4637      	mov	r7, r6
 8000f60:	4630      	mov	r0, r6
 8000f62:	e709      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000f64:	4607      	mov	r7, r0
 8000f66:	e6e7      	b.n	8000d38 <__udivmoddi4+0x60>
 8000f68:	4618      	mov	r0, r3
 8000f6a:	e6fb      	b.n	8000d64 <__udivmoddi4+0x8c>
 8000f6c:	4541      	cmp	r1, r8
 8000f6e:	d2ab      	bcs.n	8000ec8 <__udivmoddi4+0x1f0>
 8000f70:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f74:	eb69 020e 	sbc.w	r2, r9, lr
 8000f78:	3801      	subs	r0, #1
 8000f7a:	4613      	mov	r3, r2
 8000f7c:	e7a4      	b.n	8000ec8 <__udivmoddi4+0x1f0>
 8000f7e:	4660      	mov	r0, ip
 8000f80:	e7e9      	b.n	8000f56 <__udivmoddi4+0x27e>
 8000f82:	4618      	mov	r0, r3
 8000f84:	e795      	b.n	8000eb2 <__udivmoddi4+0x1da>
 8000f86:	4667      	mov	r7, ip
 8000f88:	e7d1      	b.n	8000f2e <__udivmoddi4+0x256>
 8000f8a:	4681      	mov	r9, r0
 8000f8c:	e77c      	b.n	8000e88 <__udivmoddi4+0x1b0>
 8000f8e:	3802      	subs	r0, #2
 8000f90:	442c      	add	r4, r5
 8000f92:	e747      	b.n	8000e24 <__udivmoddi4+0x14c>
 8000f94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f98:	442b      	add	r3, r5
 8000f9a:	e72f      	b.n	8000dfc <__udivmoddi4+0x124>
 8000f9c:	4638      	mov	r0, r7
 8000f9e:	e708      	b.n	8000db2 <__udivmoddi4+0xda>
 8000fa0:	4637      	mov	r7, r6
 8000fa2:	e6e9      	b.n	8000d78 <__udivmoddi4+0xa0>

08000fa4 <__aeabi_idiv0>:
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop

08000fa8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fac:	4b0e      	ldr	r3, [pc, #56]	; (8000fe8 <HAL_Init+0x40>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a0d      	ldr	r2, [pc, #52]	; (8000fe8 <HAL_Init+0x40>)
 8000fb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fb6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fb8:	4b0b      	ldr	r3, [pc, #44]	; (8000fe8 <HAL_Init+0x40>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a0a      	ldr	r2, [pc, #40]	; (8000fe8 <HAL_Init+0x40>)
 8000fbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fc2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fc4:	4b08      	ldr	r3, [pc, #32]	; (8000fe8 <HAL_Init+0x40>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a07      	ldr	r2, [pc, #28]	; (8000fe8 <HAL_Init+0x40>)
 8000fca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fd0:	2003      	movs	r0, #3
 8000fd2:	f000 f9f6 	bl	80013c2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fd6:	2000      	movs	r0, #0
 8000fd8:	f00f ffba 	bl	8010f50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fdc:	f00f fc20 	bl	8010820 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fe0:	2300      	movs	r3, #0
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40023c00 	.word	0x40023c00

08000fec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ff0:	4b06      	ldr	r3, [pc, #24]	; (800100c <HAL_IncTick+0x20>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	4b06      	ldr	r3, [pc, #24]	; (8001010 <HAL_IncTick+0x24>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	4a04      	ldr	r2, [pc, #16]	; (8001010 <HAL_IncTick+0x24>)
 8000ffe:	6013      	str	r3, [r2, #0]
}
 8001000:	bf00      	nop
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	20000000 	.word	0x20000000
 8001010:	20006860 	.word	0x20006860

08001014 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  return uwTick;
 8001018:	4b03      	ldr	r3, [pc, #12]	; (8001028 <HAL_GetTick+0x14>)
 800101a:	681b      	ldr	r3, [r3, #0]
}
 800101c:	4618      	mov	r0, r3
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	20006860 	.word	0x20006860

0800102c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001034:	f7ff ffee 	bl	8001014 <HAL_GetTick>
 8001038:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001044:	d005      	beq.n	8001052 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001046:	4b09      	ldr	r3, [pc, #36]	; (800106c <HAL_Delay+0x40>)
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	461a      	mov	r2, r3
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	4413      	add	r3, r2
 8001050:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001052:	bf00      	nop
 8001054:	f7ff ffde 	bl	8001014 <HAL_GetTick>
 8001058:	4602      	mov	r2, r0
 800105a:	68bb      	ldr	r3, [r7, #8]
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	68fa      	ldr	r2, [r7, #12]
 8001060:	429a      	cmp	r2, r3
 8001062:	d8f7      	bhi.n	8001054 <HAL_Delay+0x28>
  {
  }
}
 8001064:	bf00      	nop
 8001066:	3710      	adds	r7, #16
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	20000000 	.word	0x20000000

08001070 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d101      	bne.n	8001082 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800107e:	2301      	movs	r3, #1
 8001080:	e0ed      	b.n	800125e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001088:	b2db      	uxtb	r3, r3
 800108a:	2b00      	cmp	r3, #0
 800108c:	d102      	bne.n	8001094 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	f00f fbf2 	bl	8010878 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f022 0202 	bic.w	r2, r2, #2
 80010a2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010a4:	f7ff ffb6 	bl	8001014 <HAL_GetTick>
 80010a8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80010aa:	e012      	b.n	80010d2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80010ac:	f7ff ffb2 	bl	8001014 <HAL_GetTick>
 80010b0:	4602      	mov	r2, r0
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	2b0a      	cmp	r3, #10
 80010b8:	d90b      	bls.n	80010d2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010be:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2205      	movs	r2, #5
 80010ca:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	e0c5      	b.n	800125e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f003 0302 	and.w	r3, r3, #2
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d1e5      	bne.n	80010ac <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f042 0201 	orr.w	r2, r2, #1
 80010ee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010f0:	f7ff ff90 	bl	8001014 <HAL_GetTick>
 80010f4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80010f6:	e012      	b.n	800111e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80010f8:	f7ff ff8c 	bl	8001014 <HAL_GetTick>
 80010fc:	4602      	mov	r2, r0
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	2b0a      	cmp	r3, #10
 8001104:	d90b      	bls.n	800111e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800110a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2205      	movs	r2, #5
 8001116:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
 800111c:	e09f      	b.n	800125e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f003 0301 	and.w	r3, r3, #1
 8001128:	2b00      	cmp	r3, #0
 800112a:	d0e5      	beq.n	80010f8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	7e1b      	ldrb	r3, [r3, #24]
 8001130:	2b01      	cmp	r3, #1
 8001132:	d108      	bne.n	8001146 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	e007      	b.n	8001156 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001154:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	7e5b      	ldrb	r3, [r3, #25]
 800115a:	2b01      	cmp	r3, #1
 800115c:	d108      	bne.n	8001170 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800116c:	601a      	str	r2, [r3, #0]
 800116e:	e007      	b.n	8001180 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800117e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	7e9b      	ldrb	r3, [r3, #26]
 8001184:	2b01      	cmp	r3, #1
 8001186:	d108      	bne.n	800119a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f042 0220 	orr.w	r2, r2, #32
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	e007      	b.n	80011aa <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f022 0220 	bic.w	r2, r2, #32
 80011a8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	7edb      	ldrb	r3, [r3, #27]
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d108      	bne.n	80011c4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f022 0210 	bic.w	r2, r2, #16
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	e007      	b.n	80011d4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f042 0210 	orr.w	r2, r2, #16
 80011d2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	7f1b      	ldrb	r3, [r3, #28]
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d108      	bne.n	80011ee <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f042 0208 	orr.w	r2, r2, #8
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	e007      	b.n	80011fe <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f022 0208 	bic.w	r2, r2, #8
 80011fc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	7f5b      	ldrb	r3, [r3, #29]
 8001202:	2b01      	cmp	r3, #1
 8001204:	d108      	bne.n	8001218 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f042 0204 	orr.w	r2, r2, #4
 8001214:	601a      	str	r2, [r3, #0]
 8001216:	e007      	b.n	8001228 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f022 0204 	bic.w	r2, r2, #4
 8001226:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	689a      	ldr	r2, [r3, #8]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	431a      	orrs	r2, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	691b      	ldr	r3, [r3, #16]
 8001236:	431a      	orrs	r2, r3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	695b      	ldr	r3, [r3, #20]
 800123c:	ea42 0103 	orr.w	r1, r2, r3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	1e5a      	subs	r2, r3, #1
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	430a      	orrs	r2, r1
 800124c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2200      	movs	r2, #0
 8001252:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2201      	movs	r2, #1
 8001258:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800125c:	2300      	movs	r3, #0
}
 800125e:	4618      	mov	r0, r3
 8001260:	3710      	adds	r7, #16
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
	...

08001268 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001268:	b480      	push	{r7}
 800126a:	b085      	sub	sp, #20
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	f003 0307 	and.w	r3, r3, #7
 8001276:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001278:	4b0c      	ldr	r3, [pc, #48]	; (80012ac <__NVIC_SetPriorityGrouping+0x44>)
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800127e:	68ba      	ldr	r2, [r7, #8]
 8001280:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001284:	4013      	ands	r3, r2
 8001286:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001290:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001294:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001298:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800129a:	4a04      	ldr	r2, [pc, #16]	; (80012ac <__NVIC_SetPriorityGrouping+0x44>)
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	60d3      	str	r3, [r2, #12]
}
 80012a0:	bf00      	nop
 80012a2:	3714      	adds	r7, #20
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr
 80012ac:	e000ed00 	.word	0xe000ed00

080012b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012b4:	4b04      	ldr	r3, [pc, #16]	; (80012c8 <__NVIC_GetPriorityGrouping+0x18>)
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	0a1b      	lsrs	r3, r3, #8
 80012ba:	f003 0307 	and.w	r3, r3, #7
}
 80012be:	4618      	mov	r0, r3
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr
 80012c8:	e000ed00 	.word	0xe000ed00

080012cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	4603      	mov	r3, r0
 80012d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	db0b      	blt.n	80012f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012de:	79fb      	ldrb	r3, [r7, #7]
 80012e0:	f003 021f 	and.w	r2, r3, #31
 80012e4:	4907      	ldr	r1, [pc, #28]	; (8001304 <__NVIC_EnableIRQ+0x38>)
 80012e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ea:	095b      	lsrs	r3, r3, #5
 80012ec:	2001      	movs	r0, #1
 80012ee:	fa00 f202 	lsl.w	r2, r0, r2
 80012f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012f6:	bf00      	nop
 80012f8:	370c      	adds	r7, #12
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	e000e100 	.word	0xe000e100

08001308 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	6039      	str	r1, [r7, #0]
 8001312:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001314:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001318:	2b00      	cmp	r3, #0
 800131a:	db0a      	blt.n	8001332 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	b2da      	uxtb	r2, r3
 8001320:	490c      	ldr	r1, [pc, #48]	; (8001354 <__NVIC_SetPriority+0x4c>)
 8001322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001326:	0112      	lsls	r2, r2, #4
 8001328:	b2d2      	uxtb	r2, r2
 800132a:	440b      	add	r3, r1
 800132c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001330:	e00a      	b.n	8001348 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	b2da      	uxtb	r2, r3
 8001336:	4908      	ldr	r1, [pc, #32]	; (8001358 <__NVIC_SetPriority+0x50>)
 8001338:	79fb      	ldrb	r3, [r7, #7]
 800133a:	f003 030f 	and.w	r3, r3, #15
 800133e:	3b04      	subs	r3, #4
 8001340:	0112      	lsls	r2, r2, #4
 8001342:	b2d2      	uxtb	r2, r2
 8001344:	440b      	add	r3, r1
 8001346:	761a      	strb	r2, [r3, #24]
}
 8001348:	bf00      	nop
 800134a:	370c      	adds	r7, #12
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr
 8001354:	e000e100 	.word	0xe000e100
 8001358:	e000ed00 	.word	0xe000ed00

0800135c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800135c:	b480      	push	{r7}
 800135e:	b089      	sub	sp, #36	; 0x24
 8001360:	af00      	add	r7, sp, #0
 8001362:	60f8      	str	r0, [r7, #12]
 8001364:	60b9      	str	r1, [r7, #8]
 8001366:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	f003 0307 	and.w	r3, r3, #7
 800136e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	f1c3 0307 	rsb	r3, r3, #7
 8001376:	2b04      	cmp	r3, #4
 8001378:	bf28      	it	cs
 800137a:	2304      	movcs	r3, #4
 800137c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	3304      	adds	r3, #4
 8001382:	2b06      	cmp	r3, #6
 8001384:	d902      	bls.n	800138c <NVIC_EncodePriority+0x30>
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	3b03      	subs	r3, #3
 800138a:	e000      	b.n	800138e <NVIC_EncodePriority+0x32>
 800138c:	2300      	movs	r3, #0
 800138e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001390:	f04f 32ff 	mov.w	r2, #4294967295
 8001394:	69bb      	ldr	r3, [r7, #24]
 8001396:	fa02 f303 	lsl.w	r3, r2, r3
 800139a:	43da      	mvns	r2, r3
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	401a      	ands	r2, r3
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013a4:	f04f 31ff 	mov.w	r1, #4294967295
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	fa01 f303 	lsl.w	r3, r1, r3
 80013ae:	43d9      	mvns	r1, r3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b4:	4313      	orrs	r3, r2
         );
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3724      	adds	r7, #36	; 0x24
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr

080013c2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013c2:	b580      	push	{r7, lr}
 80013c4:	b082      	sub	sp, #8
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f7ff ff4c 	bl	8001268 <__NVIC_SetPriorityGrouping>
}
 80013d0:	bf00      	nop
 80013d2:	3708      	adds	r7, #8
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013d8:	b580      	push	{r7, lr}
 80013da:	b086      	sub	sp, #24
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	60b9      	str	r1, [r7, #8]
 80013e2:	607a      	str	r2, [r7, #4]
 80013e4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013e6:	2300      	movs	r3, #0
 80013e8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013ea:	f7ff ff61 	bl	80012b0 <__NVIC_GetPriorityGrouping>
 80013ee:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013f0:	687a      	ldr	r2, [r7, #4]
 80013f2:	68b9      	ldr	r1, [r7, #8]
 80013f4:	6978      	ldr	r0, [r7, #20]
 80013f6:	f7ff ffb1 	bl	800135c <NVIC_EncodePriority>
 80013fa:	4602      	mov	r2, r0
 80013fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001400:	4611      	mov	r1, r2
 8001402:	4618      	mov	r0, r3
 8001404:	f7ff ff80 	bl	8001308 <__NVIC_SetPriority>
}
 8001408:	bf00      	nop
 800140a:	3718      	adds	r7, #24
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}

08001410 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	4603      	mov	r3, r0
 8001418:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800141a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141e:	4618      	mov	r0, r3
 8001420:	f7ff ff54 	bl	80012cc <__NVIC_EnableIRQ>
}
 8001424:	bf00      	nop
 8001426:	3708      	adds	r7, #8
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}

0800142c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b086      	sub	sp, #24
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001434:	2300      	movs	r3, #0
 8001436:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001438:	f7ff fdec 	bl	8001014 <HAL_GetTick>
 800143c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d101      	bne.n	8001448 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001444:	2301      	movs	r3, #1
 8001446:	e099      	b.n	800157c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2200      	movs	r2, #0
 800144c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2202      	movs	r2, #2
 8001454:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f022 0201 	bic.w	r2, r2, #1
 8001466:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001468:	e00f      	b.n	800148a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800146a:	f7ff fdd3 	bl	8001014 <HAL_GetTick>
 800146e:	4602      	mov	r2, r0
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	1ad3      	subs	r3, r2, r3
 8001474:	2b05      	cmp	r3, #5
 8001476:	d908      	bls.n	800148a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2220      	movs	r2, #32
 800147c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2203      	movs	r2, #3
 8001482:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001486:	2303      	movs	r3, #3
 8001488:	e078      	b.n	800157c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f003 0301 	and.w	r3, r3, #1
 8001494:	2b00      	cmp	r3, #0
 8001496:	d1e8      	bne.n	800146a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80014a0:	697a      	ldr	r2, [r7, #20]
 80014a2:	4b38      	ldr	r3, [pc, #224]	; (8001584 <HAL_DMA_Init+0x158>)
 80014a4:	4013      	ands	r3, r2
 80014a6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	685a      	ldr	r2, [r3, #4]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	691b      	ldr	r3, [r3, #16]
 80014bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	699b      	ldr	r3, [r3, #24]
 80014c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6a1b      	ldr	r3, [r3, #32]
 80014d4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014d6:	697a      	ldr	r2, [r7, #20]
 80014d8:	4313      	orrs	r3, r2
 80014da:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e0:	2b04      	cmp	r3, #4
 80014e2:	d107      	bne.n	80014f4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ec:	4313      	orrs	r3, r2
 80014ee:	697a      	ldr	r2, [r7, #20]
 80014f0:	4313      	orrs	r3, r2
 80014f2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	697a      	ldr	r2, [r7, #20]
 80014fa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	695b      	ldr	r3, [r3, #20]
 8001502:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	f023 0307 	bic.w	r3, r3, #7
 800150a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001510:	697a      	ldr	r2, [r7, #20]
 8001512:	4313      	orrs	r3, r2
 8001514:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800151a:	2b04      	cmp	r3, #4
 800151c:	d117      	bne.n	800154e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001522:	697a      	ldr	r2, [r7, #20]
 8001524:	4313      	orrs	r3, r2
 8001526:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800152c:	2b00      	cmp	r3, #0
 800152e:	d00e      	beq.n	800154e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001530:	6878      	ldr	r0, [r7, #4]
 8001532:	f000 faf7 	bl	8001b24 <DMA_CheckFifoParam>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d008      	beq.n	800154e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2240      	movs	r2, #64	; 0x40
 8001540:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2201      	movs	r2, #1
 8001546:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800154a:	2301      	movs	r3, #1
 800154c:	e016      	b.n	800157c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	697a      	ldr	r2, [r7, #20]
 8001554:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f000 faae 	bl	8001ab8 <DMA_CalcBaseAndBitshift>
 800155c:	4603      	mov	r3, r0
 800155e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001564:	223f      	movs	r2, #63	; 0x3f
 8001566:	409a      	lsls	r2, r3
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2200      	movs	r2, #0
 8001570:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2201      	movs	r2, #1
 8001576:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800157a:	2300      	movs	r3, #0
}
 800157c:	4618      	mov	r0, r3
 800157e:	3718      	adds	r7, #24
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	f010803f 	.word	0xf010803f

08001588 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d101      	bne.n	800159a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	e050      	b.n	800163c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d101      	bne.n	80015aa <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80015a6:	2302      	movs	r3, #2
 80015a8:	e048      	b.n	800163c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f022 0201 	bic.w	r2, r2, #1
 80015b8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	2200      	movs	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	2200      	movs	r2, #0
 80015c8:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	2200      	movs	r2, #0
 80015d0:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	2200      	movs	r2, #0
 80015d8:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	2200      	movs	r2, #0
 80015e0:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	2221      	movs	r2, #33	; 0x21
 80015e8:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	f000 fa64 	bl	8001ab8 <DMA_CalcBaseAndBitshift>
 80015f0:	4603      	mov	r3, r0
 80015f2:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2200      	movs	r2, #0
 80015f8:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2200      	movs	r2, #0
 80015fe:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2200      	movs	r2, #0
 8001604:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2200      	movs	r2, #0
 800160a:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2200      	movs	r2, #0
 8001610:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2200      	movs	r2, #0
 8001616:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800161c:	223f      	movs	r2, #63	; 0x3f
 800161e:	409a      	lsls	r2, r3
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2200      	movs	r2, #0
 8001628:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2200      	movs	r2, #0
 800162e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2200      	movs	r2, #0
 8001636:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800163a:	2300      	movs	r3, #0
}
 800163c:	4618      	mov	r0, r3
 800163e:	3710      	adds	r7, #16
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}

08001644 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b086      	sub	sp, #24
 8001648:	af00      	add	r7, sp, #0
 800164a:	60f8      	str	r0, [r7, #12]
 800164c:	60b9      	str	r1, [r7, #8]
 800164e:	607a      	str	r2, [r7, #4]
 8001650:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001652:	2300      	movs	r3, #0
 8001654:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800165a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001662:	2b01      	cmp	r3, #1
 8001664:	d101      	bne.n	800166a <HAL_DMA_Start_IT+0x26>
 8001666:	2302      	movs	r3, #2
 8001668:	e048      	b.n	80016fc <HAL_DMA_Start_IT+0xb8>
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	2201      	movs	r2, #1
 800166e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001678:	b2db      	uxtb	r3, r3
 800167a:	2b01      	cmp	r3, #1
 800167c:	d137      	bne.n	80016ee <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	2202      	movs	r2, #2
 8001682:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	2200      	movs	r2, #0
 800168a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	687a      	ldr	r2, [r7, #4]
 8001690:	68b9      	ldr	r1, [r7, #8]
 8001692:	68f8      	ldr	r0, [r7, #12]
 8001694:	f000 f9e2 	bl	8001a5c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800169c:	223f      	movs	r2, #63	; 0x3f
 800169e:	409a      	lsls	r2, r3
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f042 0216 	orr.w	r2, r2, #22
 80016b2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	695a      	ldr	r2, [r3, #20]
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80016c2:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d007      	beq.n	80016dc <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f042 0208 	orr.w	r2, r2, #8
 80016da:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f042 0201 	orr.w	r2, r2, #1
 80016ea:	601a      	str	r2, [r3, #0]
 80016ec:	e005      	b.n	80016fa <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	2200      	movs	r2, #0
 80016f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80016f6:	2302      	movs	r3, #2
 80016f8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80016fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3718      	adds	r7, #24
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}

08001704 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001712:	b2db      	uxtb	r3, r3
 8001714:	2b02      	cmp	r3, #2
 8001716:	d004      	beq.n	8001722 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2280      	movs	r2, #128	; 0x80
 800171c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e00c      	b.n	800173c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2205      	movs	r2, #5
 8001726:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f022 0201 	bic.w	r2, r2, #1
 8001738:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800173a:	2300      	movs	r3, #0
}
 800173c:	4618      	mov	r0, r3
 800173e:	370c      	adds	r7, #12
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr

08001748 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b086      	sub	sp, #24
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001750:	2300      	movs	r3, #0
 8001752:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001754:	4b92      	ldr	r3, [pc, #584]	; (80019a0 <HAL_DMA_IRQHandler+0x258>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a92      	ldr	r2, [pc, #584]	; (80019a4 <HAL_DMA_IRQHandler+0x25c>)
 800175a:	fba2 2303 	umull	r2, r3, r2, r3
 800175e:	0a9b      	lsrs	r3, r3, #10
 8001760:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001766:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001772:	2208      	movs	r2, #8
 8001774:	409a      	lsls	r2, r3
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	4013      	ands	r3, r2
 800177a:	2b00      	cmp	r3, #0
 800177c:	d01a      	beq.n	80017b4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 0304 	and.w	r3, r3, #4
 8001788:	2b00      	cmp	r3, #0
 800178a:	d013      	beq.n	80017b4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f022 0204 	bic.w	r2, r2, #4
 800179a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017a0:	2208      	movs	r2, #8
 80017a2:	409a      	lsls	r2, r3
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017ac:	f043 0201 	orr.w	r2, r3, #1
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017b8:	2201      	movs	r2, #1
 80017ba:	409a      	lsls	r2, r3
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	4013      	ands	r3, r2
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d012      	beq.n	80017ea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	695b      	ldr	r3, [r3, #20]
 80017ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d00b      	beq.n	80017ea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017d6:	2201      	movs	r2, #1
 80017d8:	409a      	lsls	r2, r3
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017e2:	f043 0202 	orr.w	r2, r3, #2
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017ee:	2204      	movs	r2, #4
 80017f0:	409a      	lsls	r2, r3
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	4013      	ands	r3, r2
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d012      	beq.n	8001820 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 0302 	and.w	r3, r3, #2
 8001804:	2b00      	cmp	r3, #0
 8001806:	d00b      	beq.n	8001820 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800180c:	2204      	movs	r2, #4
 800180e:	409a      	lsls	r2, r3
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001818:	f043 0204 	orr.w	r2, r3, #4
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001824:	2210      	movs	r2, #16
 8001826:	409a      	lsls	r2, r3
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	4013      	ands	r3, r2
 800182c:	2b00      	cmp	r3, #0
 800182e:	d043      	beq.n	80018b8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0308 	and.w	r3, r3, #8
 800183a:	2b00      	cmp	r3, #0
 800183c:	d03c      	beq.n	80018b8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001842:	2210      	movs	r2, #16
 8001844:	409a      	lsls	r2, r3
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001854:	2b00      	cmp	r3, #0
 8001856:	d018      	beq.n	800188a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d108      	bne.n	8001878 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186a:	2b00      	cmp	r3, #0
 800186c:	d024      	beq.n	80018b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	4798      	blx	r3
 8001876:	e01f      	b.n	80018b8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800187c:	2b00      	cmp	r3, #0
 800187e:	d01b      	beq.n	80018b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	4798      	blx	r3
 8001888:	e016      	b.n	80018b8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001894:	2b00      	cmp	r3, #0
 8001896:	d107      	bne.n	80018a8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f022 0208 	bic.w	r2, r2, #8
 80018a6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d003      	beq.n	80018b8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018bc:	2220      	movs	r2, #32
 80018be:	409a      	lsls	r2, r3
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	4013      	ands	r3, r2
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	f000 808e 	beq.w	80019e6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 0310 	and.w	r3, r3, #16
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	f000 8086 	beq.w	80019e6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018de:	2220      	movs	r2, #32
 80018e0:	409a      	lsls	r2, r3
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	2b05      	cmp	r3, #5
 80018f0:	d136      	bne.n	8001960 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f022 0216 	bic.w	r2, r2, #22
 8001900:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	695a      	ldr	r2, [r3, #20]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001910:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001916:	2b00      	cmp	r3, #0
 8001918:	d103      	bne.n	8001922 <HAL_DMA_IRQHandler+0x1da>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800191e:	2b00      	cmp	r3, #0
 8001920:	d007      	beq.n	8001932 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f022 0208 	bic.w	r2, r2, #8
 8001930:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001936:	223f      	movs	r2, #63	; 0x3f
 8001938:	409a      	lsls	r2, r3
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2200      	movs	r2, #0
 8001942:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2201      	movs	r2, #1
 800194a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001952:	2b00      	cmp	r3, #0
 8001954:	d07d      	beq.n	8001a52 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	4798      	blx	r3
        }
        return;
 800195e:	e078      	b.n	8001a52 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d01c      	beq.n	80019a8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001978:	2b00      	cmp	r3, #0
 800197a:	d108      	bne.n	800198e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001980:	2b00      	cmp	r3, #0
 8001982:	d030      	beq.n	80019e6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	4798      	blx	r3
 800198c:	e02b      	b.n	80019e6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001992:	2b00      	cmp	r3, #0
 8001994:	d027      	beq.n	80019e6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	4798      	blx	r3
 800199e:	e022      	b.n	80019e6 <HAL_DMA_IRQHandler+0x29e>
 80019a0:	20000050 	.word	0x20000050
 80019a4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d10f      	bne.n	80019d6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f022 0210 	bic.w	r2, r2, #16
 80019c4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2200      	movs	r2, #0
 80019ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2201      	movs	r2, #1
 80019d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d003      	beq.n	80019e6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d032      	beq.n	8001a54 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019f2:	f003 0301 	and.w	r3, r3, #1
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d022      	beq.n	8001a40 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2205      	movs	r2, #5
 80019fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f022 0201 	bic.w	r2, r2, #1
 8001a10:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	3301      	adds	r3, #1
 8001a16:	60bb      	str	r3, [r7, #8]
 8001a18:	697a      	ldr	r2, [r7, #20]
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d307      	bcc.n	8001a2e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 0301 	and.w	r3, r3, #1
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d1f2      	bne.n	8001a12 <HAL_DMA_IRQHandler+0x2ca>
 8001a2c:	e000      	b.n	8001a30 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001a2e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2200      	movs	r2, #0
 8001a34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d005      	beq.n	8001a54 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	4798      	blx	r3
 8001a50:	e000      	b.n	8001a54 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001a52:	bf00      	nop
    }
  }
}
 8001a54:	3718      	adds	r7, #24
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop

08001a5c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b085      	sub	sp, #20
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	60f8      	str	r0, [r7, #12]
 8001a64:	60b9      	str	r1, [r7, #8]
 8001a66:	607a      	str	r2, [r7, #4]
 8001a68:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001a78:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	683a      	ldr	r2, [r7, #0]
 8001a80:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	2b40      	cmp	r3, #64	; 0x40
 8001a88:	d108      	bne.n	8001a9c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	68ba      	ldr	r2, [r7, #8]
 8001a98:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001a9a:	e007      	b.n	8001aac <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	68ba      	ldr	r2, [r7, #8]
 8001aa2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	687a      	ldr	r2, [r7, #4]
 8001aaa:	60da      	str	r2, [r3, #12]
}
 8001aac:	bf00      	nop
 8001aae:	3714      	adds	r7, #20
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr

08001ab8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b085      	sub	sp, #20
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	3b10      	subs	r3, #16
 8001ac8:	4a14      	ldr	r2, [pc, #80]	; (8001b1c <DMA_CalcBaseAndBitshift+0x64>)
 8001aca:	fba2 2303 	umull	r2, r3, r2, r3
 8001ace:	091b      	lsrs	r3, r3, #4
 8001ad0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001ad2:	4a13      	ldr	r2, [pc, #76]	; (8001b20 <DMA_CalcBaseAndBitshift+0x68>)
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	4413      	add	r3, r2
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	461a      	mov	r2, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	2b03      	cmp	r3, #3
 8001ae4:	d909      	bls.n	8001afa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001aee:	f023 0303 	bic.w	r3, r3, #3
 8001af2:	1d1a      	adds	r2, r3, #4
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	659a      	str	r2, [r3, #88]	; 0x58
 8001af8:	e007      	b.n	8001b0a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001b02:	f023 0303 	bic.w	r3, r3, #3
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3714      	adds	r7, #20
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	aaaaaaab 	.word	0xaaaaaaab
 8001b20:	08015268 	.word	0x08015268

08001b24 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b085      	sub	sp, #20
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b34:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	699b      	ldr	r3, [r3, #24]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d11f      	bne.n	8001b7e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	2b03      	cmp	r3, #3
 8001b42:	d855      	bhi.n	8001bf0 <DMA_CheckFifoParam+0xcc>
 8001b44:	a201      	add	r2, pc, #4	; (adr r2, 8001b4c <DMA_CheckFifoParam+0x28>)
 8001b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b4a:	bf00      	nop
 8001b4c:	08001b5d 	.word	0x08001b5d
 8001b50:	08001b6f 	.word	0x08001b6f
 8001b54:	08001b5d 	.word	0x08001b5d
 8001b58:	08001bf1 	.word	0x08001bf1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d045      	beq.n	8001bf4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b6c:	e042      	b.n	8001bf4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b72:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001b76:	d13f      	bne.n	8001bf8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b7c:	e03c      	b.n	8001bf8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	699b      	ldr	r3, [r3, #24]
 8001b82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b86:	d121      	bne.n	8001bcc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	2b03      	cmp	r3, #3
 8001b8c:	d836      	bhi.n	8001bfc <DMA_CheckFifoParam+0xd8>
 8001b8e:	a201      	add	r2, pc, #4	; (adr r2, 8001b94 <DMA_CheckFifoParam+0x70>)
 8001b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b94:	08001ba5 	.word	0x08001ba5
 8001b98:	08001bab 	.word	0x08001bab
 8001b9c:	08001ba5 	.word	0x08001ba5
 8001ba0:	08001bbd 	.word	0x08001bbd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	73fb      	strb	r3, [r7, #15]
      break;
 8001ba8:	e02f      	b.n	8001c0a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d024      	beq.n	8001c00 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001bba:	e021      	b.n	8001c00 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001bc4:	d11e      	bne.n	8001c04 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001bca:	e01b      	b.n	8001c04 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	2b02      	cmp	r3, #2
 8001bd0:	d902      	bls.n	8001bd8 <DMA_CheckFifoParam+0xb4>
 8001bd2:	2b03      	cmp	r3, #3
 8001bd4:	d003      	beq.n	8001bde <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001bd6:	e018      	b.n	8001c0a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	73fb      	strb	r3, [r7, #15]
      break;
 8001bdc:	e015      	b.n	8001c0a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001be2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d00e      	beq.n	8001c08 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	73fb      	strb	r3, [r7, #15]
      break;
 8001bee:	e00b      	b.n	8001c08 <DMA_CheckFifoParam+0xe4>
      break;
 8001bf0:	bf00      	nop
 8001bf2:	e00a      	b.n	8001c0a <DMA_CheckFifoParam+0xe6>
      break;
 8001bf4:	bf00      	nop
 8001bf6:	e008      	b.n	8001c0a <DMA_CheckFifoParam+0xe6>
      break;
 8001bf8:	bf00      	nop
 8001bfa:	e006      	b.n	8001c0a <DMA_CheckFifoParam+0xe6>
      break;
 8001bfc:	bf00      	nop
 8001bfe:	e004      	b.n	8001c0a <DMA_CheckFifoParam+0xe6>
      break;
 8001c00:	bf00      	nop
 8001c02:	e002      	b.n	8001c0a <DMA_CheckFifoParam+0xe6>
      break;   
 8001c04:	bf00      	nop
 8001c06:	e000      	b.n	8001c0a <DMA_CheckFifoParam+0xe6>
      break;
 8001c08:	bf00      	nop
    }
  } 
  
  return status; 
 8001c0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3714      	adds	r7, #20
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b086      	sub	sp, #24
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	60f8      	str	r0, [r7, #12]
 8001c20:	60b9      	str	r1, [r7, #8]
 8001c22:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001c2a:	4b23      	ldr	r3, [pc, #140]	; (8001cb8 <HAL_FLASH_Program+0xa0>)
 8001c2c:	7e1b      	ldrb	r3, [r3, #24]
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d101      	bne.n	8001c36 <HAL_FLASH_Program+0x1e>
 8001c32:	2302      	movs	r3, #2
 8001c34:	e03b      	b.n	8001cae <HAL_FLASH_Program+0x96>
 8001c36:	4b20      	ldr	r3, [pc, #128]	; (8001cb8 <HAL_FLASH_Program+0xa0>)
 8001c38:	2201      	movs	r2, #1
 8001c3a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001c3c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001c40:	f000 f860 	bl	8001d04 <FLASH_WaitForLastOperation>
 8001c44:	4603      	mov	r3, r0
 8001c46:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8001c48:	7dfb      	ldrb	r3, [r7, #23]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d12b      	bne.n	8001ca6 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d105      	bne.n	8001c60 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001c54:	783b      	ldrb	r3, [r7, #0]
 8001c56:	4619      	mov	r1, r3
 8001c58:	68b8      	ldr	r0, [r7, #8]
 8001c5a:	f000 f907 	bl	8001e6c <FLASH_Program_Byte>
 8001c5e:	e016      	b.n	8001c8e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d105      	bne.n	8001c72 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001c66:	883b      	ldrh	r3, [r7, #0]
 8001c68:	4619      	mov	r1, r3
 8001c6a:	68b8      	ldr	r0, [r7, #8]
 8001c6c:	f000 f8da 	bl	8001e24 <FLASH_Program_HalfWord>
 8001c70:	e00d      	b.n	8001c8e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d105      	bne.n	8001c84 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	68b8      	ldr	r0, [r7, #8]
 8001c7e:	f000 f8af 	bl	8001de0 <FLASH_Program_Word>
 8001c82:	e004      	b.n	8001c8e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001c84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001c88:	68b8      	ldr	r0, [r7, #8]
 8001c8a:	f000 f87b 	bl	8001d84 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001c8e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001c92:	f000 f837 	bl	8001d04 <FLASH_WaitForLastOperation>
 8001c96:	4603      	mov	r3, r0
 8001c98:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8001c9a:	4b08      	ldr	r3, [pc, #32]	; (8001cbc <HAL_FLASH_Program+0xa4>)
 8001c9c:	691b      	ldr	r3, [r3, #16]
 8001c9e:	4a07      	ldr	r2, [pc, #28]	; (8001cbc <HAL_FLASH_Program+0xa4>)
 8001ca0:	f023 0301 	bic.w	r3, r3, #1
 8001ca4:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001ca6:	4b04      	ldr	r3, [pc, #16]	; (8001cb8 <HAL_FLASH_Program+0xa0>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	761a      	strb	r2, [r3, #24]
  
  return status;
 8001cac:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3718      	adds	r7, #24
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	20006864 	.word	0x20006864
 8001cbc:	40023c00 	.word	0x40023c00

08001cc0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001cca:	4b0b      	ldr	r3, [pc, #44]	; (8001cf8 <HAL_FLASH_Unlock+0x38>)
 8001ccc:	691b      	ldr	r3, [r3, #16]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	da0b      	bge.n	8001cea <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001cd2:	4b09      	ldr	r3, [pc, #36]	; (8001cf8 <HAL_FLASH_Unlock+0x38>)
 8001cd4:	4a09      	ldr	r2, [pc, #36]	; (8001cfc <HAL_FLASH_Unlock+0x3c>)
 8001cd6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001cd8:	4b07      	ldr	r3, [pc, #28]	; (8001cf8 <HAL_FLASH_Unlock+0x38>)
 8001cda:	4a09      	ldr	r2, [pc, #36]	; (8001d00 <HAL_FLASH_Unlock+0x40>)
 8001cdc:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001cde:	4b06      	ldr	r3, [pc, #24]	; (8001cf8 <HAL_FLASH_Unlock+0x38>)
 8001ce0:	691b      	ldr	r3, [r3, #16]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	da01      	bge.n	8001cea <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001cea:	79fb      	ldrb	r3, [r7, #7]
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr
 8001cf8:	40023c00 	.word	0x40023c00
 8001cfc:	45670123 	.word	0x45670123
 8001d00:	cdef89ab 	.word	0xcdef89ab

08001d04 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001d10:	4b1a      	ldr	r3, [pc, #104]	; (8001d7c <FLASH_WaitForLastOperation+0x78>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001d16:	f7ff f97d 	bl	8001014 <HAL_GetTick>
 8001d1a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001d1c:	e010      	b.n	8001d40 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d24:	d00c      	beq.n	8001d40 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d007      	beq.n	8001d3c <FLASH_WaitForLastOperation+0x38>
 8001d2c:	f7ff f972 	bl	8001014 <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d201      	bcs.n	8001d40 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	e019      	b.n	8001d74 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001d40:	4b0f      	ldr	r3, [pc, #60]	; (8001d80 <FLASH_WaitForLastOperation+0x7c>)
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d1e8      	bne.n	8001d1e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001d4c:	4b0c      	ldr	r3, [pc, #48]	; (8001d80 <FLASH_WaitForLastOperation+0x7c>)
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	f003 0301 	and.w	r3, r3, #1
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d002      	beq.n	8001d5e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001d58:	4b09      	ldr	r3, [pc, #36]	; (8001d80 <FLASH_WaitForLastOperation+0x7c>)
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001d5e:	4b08      	ldr	r3, [pc, #32]	; (8001d80 <FLASH_WaitForLastOperation+0x7c>)
 8001d60:	68db      	ldr	r3, [r3, #12]
 8001d62:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d003      	beq.n	8001d72 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001d6a:	f000 f8a1 	bl	8001eb0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e000      	b.n	8001d74 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8001d72:	2300      	movs	r3, #0
  
}  
 8001d74:	4618      	mov	r0, r3
 8001d76:	3710      	adds	r7, #16
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	20006864 	.word	0x20006864
 8001d80:	40023c00 	.word	0x40023c00

08001d84 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001d84:	b490      	push	{r4, r7}
 8001d86:	b084      	sub	sp, #16
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	60f8      	str	r0, [r7, #12]
 8001d8c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001d90:	4b12      	ldr	r3, [pc, #72]	; (8001ddc <FLASH_Program_DoubleWord+0x58>)
 8001d92:	691b      	ldr	r3, [r3, #16]
 8001d94:	4a11      	ldr	r2, [pc, #68]	; (8001ddc <FLASH_Program_DoubleWord+0x58>)
 8001d96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d9a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001d9c:	4b0f      	ldr	r3, [pc, #60]	; (8001ddc <FLASH_Program_DoubleWord+0x58>)
 8001d9e:	691b      	ldr	r3, [r3, #16]
 8001da0:	4a0e      	ldr	r2, [pc, #56]	; (8001ddc <FLASH_Program_DoubleWord+0x58>)
 8001da2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001da6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001da8:	4b0c      	ldr	r3, [pc, #48]	; (8001ddc <FLASH_Program_DoubleWord+0x58>)
 8001daa:	691b      	ldr	r3, [r3, #16]
 8001dac:	4a0b      	ldr	r2, [pc, #44]	; (8001ddc <FLASH_Program_DoubleWord+0x58>)
 8001dae:	f043 0301 	orr.w	r3, r3, #1
 8001db2:	6113      	str	r3, [r2, #16]

  /* Program the double-word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	683a      	ldr	r2, [r7, #0]
 8001db8:	601a      	str	r2, [r3, #0]
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8001dba:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001dbe:	f04f 0300 	mov.w	r3, #0
 8001dc2:	f04f 0400 	mov.w	r4, #0
 8001dc6:	0013      	movs	r3, r2
 8001dc8:	2400      	movs	r4, #0
 8001dca:	68fa      	ldr	r2, [r7, #12]
 8001dcc:	3204      	adds	r2, #4
 8001dce:	6013      	str	r3, [r2, #0]
}
 8001dd0:	bf00      	nop
 8001dd2:	3710      	adds	r7, #16
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bc90      	pop	{r4, r7}
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	40023c00 	.word	0x40023c00

08001de0 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001dea:	4b0d      	ldr	r3, [pc, #52]	; (8001e20 <FLASH_Program_Word+0x40>)
 8001dec:	691b      	ldr	r3, [r3, #16]
 8001dee:	4a0c      	ldr	r2, [pc, #48]	; (8001e20 <FLASH_Program_Word+0x40>)
 8001df0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001df4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001df6:	4b0a      	ldr	r3, [pc, #40]	; (8001e20 <FLASH_Program_Word+0x40>)
 8001df8:	691b      	ldr	r3, [r3, #16]
 8001dfa:	4a09      	ldr	r2, [pc, #36]	; (8001e20 <FLASH_Program_Word+0x40>)
 8001dfc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e00:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001e02:	4b07      	ldr	r3, [pc, #28]	; (8001e20 <FLASH_Program_Word+0x40>)
 8001e04:	691b      	ldr	r3, [r3, #16]
 8001e06:	4a06      	ldr	r2, [pc, #24]	; (8001e20 <FLASH_Program_Word+0x40>)
 8001e08:	f043 0301 	orr.w	r3, r3, #1
 8001e0c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	683a      	ldr	r2, [r7, #0]
 8001e12:	601a      	str	r2, [r3, #0]
}
 8001e14:	bf00      	nop
 8001e16:	370c      	adds	r7, #12
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr
 8001e20:	40023c00 	.word	0x40023c00

08001e24 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001e30:	4b0d      	ldr	r3, [pc, #52]	; (8001e68 <FLASH_Program_HalfWord+0x44>)
 8001e32:	691b      	ldr	r3, [r3, #16]
 8001e34:	4a0c      	ldr	r2, [pc, #48]	; (8001e68 <FLASH_Program_HalfWord+0x44>)
 8001e36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e3a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001e3c:	4b0a      	ldr	r3, [pc, #40]	; (8001e68 <FLASH_Program_HalfWord+0x44>)
 8001e3e:	691b      	ldr	r3, [r3, #16]
 8001e40:	4a09      	ldr	r2, [pc, #36]	; (8001e68 <FLASH_Program_HalfWord+0x44>)
 8001e42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e46:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001e48:	4b07      	ldr	r3, [pc, #28]	; (8001e68 <FLASH_Program_HalfWord+0x44>)
 8001e4a:	691b      	ldr	r3, [r3, #16]
 8001e4c:	4a06      	ldr	r2, [pc, #24]	; (8001e68 <FLASH_Program_HalfWord+0x44>)
 8001e4e:	f043 0301 	orr.w	r3, r3, #1
 8001e52:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	887a      	ldrh	r2, [r7, #2]
 8001e58:	801a      	strh	r2, [r3, #0]
}
 8001e5a:	bf00      	nop
 8001e5c:	370c      	adds	r7, #12
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	40023c00 	.word	0x40023c00

08001e6c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	460b      	mov	r3, r1
 8001e76:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001e78:	4b0c      	ldr	r3, [pc, #48]	; (8001eac <FLASH_Program_Byte+0x40>)
 8001e7a:	691b      	ldr	r3, [r3, #16]
 8001e7c:	4a0b      	ldr	r2, [pc, #44]	; (8001eac <FLASH_Program_Byte+0x40>)
 8001e7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e82:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001e84:	4b09      	ldr	r3, [pc, #36]	; (8001eac <FLASH_Program_Byte+0x40>)
 8001e86:	4a09      	ldr	r2, [pc, #36]	; (8001eac <FLASH_Program_Byte+0x40>)
 8001e88:	691b      	ldr	r3, [r3, #16]
 8001e8a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001e8c:	4b07      	ldr	r3, [pc, #28]	; (8001eac <FLASH_Program_Byte+0x40>)
 8001e8e:	691b      	ldr	r3, [r3, #16]
 8001e90:	4a06      	ldr	r2, [pc, #24]	; (8001eac <FLASH_Program_Byte+0x40>)
 8001e92:	f043 0301 	orr.w	r3, r3, #1
 8001e96:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	78fa      	ldrb	r2, [r7, #3]
 8001e9c:	701a      	strb	r2, [r3, #0]
}
 8001e9e:	bf00      	nop
 8001ea0:	370c      	adds	r7, #12
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	40023c00 	.word	0x40023c00

08001eb0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001eb4:	4b27      	ldr	r3, [pc, #156]	; (8001f54 <FLASH_SetErrorCode+0xa4>)
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	f003 0310 	and.w	r3, r3, #16
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d008      	beq.n	8001ed2 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001ec0:	4b25      	ldr	r3, [pc, #148]	; (8001f58 <FLASH_SetErrorCode+0xa8>)
 8001ec2:	69db      	ldr	r3, [r3, #28]
 8001ec4:	f043 0310 	orr.w	r3, r3, #16
 8001ec8:	4a23      	ldr	r2, [pc, #140]	; (8001f58 <FLASH_SetErrorCode+0xa8>)
 8001eca:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001ecc:	4b21      	ldr	r3, [pc, #132]	; (8001f54 <FLASH_SetErrorCode+0xa4>)
 8001ece:	2210      	movs	r2, #16
 8001ed0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001ed2:	4b20      	ldr	r3, [pc, #128]	; (8001f54 <FLASH_SetErrorCode+0xa4>)
 8001ed4:	68db      	ldr	r3, [r3, #12]
 8001ed6:	f003 0320 	and.w	r3, r3, #32
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d008      	beq.n	8001ef0 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001ede:	4b1e      	ldr	r3, [pc, #120]	; (8001f58 <FLASH_SetErrorCode+0xa8>)
 8001ee0:	69db      	ldr	r3, [r3, #28]
 8001ee2:	f043 0308 	orr.w	r3, r3, #8
 8001ee6:	4a1c      	ldr	r2, [pc, #112]	; (8001f58 <FLASH_SetErrorCode+0xa8>)
 8001ee8:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8001eea:	4b1a      	ldr	r3, [pc, #104]	; (8001f54 <FLASH_SetErrorCode+0xa4>)
 8001eec:	2220      	movs	r2, #32
 8001eee:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001ef0:	4b18      	ldr	r3, [pc, #96]	; (8001f54 <FLASH_SetErrorCode+0xa4>)
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d008      	beq.n	8001f0e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001efc:	4b16      	ldr	r3, [pc, #88]	; (8001f58 <FLASH_SetErrorCode+0xa8>)
 8001efe:	69db      	ldr	r3, [r3, #28]
 8001f00:	f043 0304 	orr.w	r3, r3, #4
 8001f04:	4a14      	ldr	r2, [pc, #80]	; (8001f58 <FLASH_SetErrorCode+0xa8>)
 8001f06:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001f08:	4b12      	ldr	r3, [pc, #72]	; (8001f54 <FLASH_SetErrorCode+0xa4>)
 8001f0a:	2240      	movs	r2, #64	; 0x40
 8001f0c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8001f0e:	4b11      	ldr	r3, [pc, #68]	; (8001f54 <FLASH_SetErrorCode+0xa4>)
 8001f10:	68db      	ldr	r3, [r3, #12]
 8001f12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d008      	beq.n	8001f2c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8001f1a:	4b0f      	ldr	r3, [pc, #60]	; (8001f58 <FLASH_SetErrorCode+0xa8>)
 8001f1c:	69db      	ldr	r3, [r3, #28]
 8001f1e:	f043 0302 	orr.w	r3, r3, #2
 8001f22:	4a0d      	ldr	r2, [pc, #52]	; (8001f58 <FLASH_SetErrorCode+0xa8>)
 8001f24:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001f26:	4b0b      	ldr	r3, [pc, #44]	; (8001f54 <FLASH_SetErrorCode+0xa4>)
 8001f28:	2280      	movs	r2, #128	; 0x80
 8001f2a:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001f2c:	4b09      	ldr	r3, [pc, #36]	; (8001f54 <FLASH_SetErrorCode+0xa4>)
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	f003 0302 	and.w	r3, r3, #2
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d008      	beq.n	8001f4a <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001f38:	4b07      	ldr	r3, [pc, #28]	; (8001f58 <FLASH_SetErrorCode+0xa8>)
 8001f3a:	69db      	ldr	r3, [r3, #28]
 8001f3c:	f043 0320 	orr.w	r3, r3, #32
 8001f40:	4a05      	ldr	r2, [pc, #20]	; (8001f58 <FLASH_SetErrorCode+0xa8>)
 8001f42:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001f44:	4b03      	ldr	r3, [pc, #12]	; (8001f54 <FLASH_SetErrorCode+0xa4>)
 8001f46:	2202      	movs	r2, #2
 8001f48:	60da      	str	r2, [r3, #12]
  }
}
 8001f4a:	bf00      	nop
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr
 8001f54:	40023c00 	.word	0x40023c00
 8001f58:	20006864 	.word	0x20006864

08001f5c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001f6e:	4b31      	ldr	r3, [pc, #196]	; (8002034 <HAL_FLASHEx_Erase+0xd8>)
 8001f70:	7e1b      	ldrb	r3, [r3, #24]
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d101      	bne.n	8001f7a <HAL_FLASHEx_Erase+0x1e>
 8001f76:	2302      	movs	r3, #2
 8001f78:	e058      	b.n	800202c <HAL_FLASHEx_Erase+0xd0>
 8001f7a:	4b2e      	ldr	r3, [pc, #184]	; (8002034 <HAL_FLASHEx_Erase+0xd8>)
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001f80:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001f84:	f7ff febe 	bl	8001d04 <FLASH_WaitForLastOperation>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8001f8c:	7bfb      	ldrb	r3, [r7, #15]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d148      	bne.n	8002024 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	f04f 32ff 	mov.w	r2, #4294967295
 8001f98:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d115      	bne.n	8001fce <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	691b      	ldr	r3, [r3, #16]
 8001fa6:	b2da      	uxtb	r2, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	4619      	mov	r1, r3
 8001fae:	4610      	mov	r0, r2
 8001fb0:	f000 f844 	bl	800203c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001fb4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001fb8:	f7ff fea4 	bl	8001d04 <FLASH_WaitForLastOperation>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8001fc0:	4b1d      	ldr	r3, [pc, #116]	; (8002038 <HAL_FLASHEx_Erase+0xdc>)
 8001fc2:	691b      	ldr	r3, [r3, #16]
 8001fc4:	4a1c      	ldr	r2, [pc, #112]	; (8002038 <HAL_FLASHEx_Erase+0xdc>)
 8001fc6:	f023 0304 	bic.w	r3, r3, #4
 8001fca:	6113      	str	r3, [r2, #16]
 8001fcc:	e028      	b.n	8002020 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	60bb      	str	r3, [r7, #8]
 8001fd4:	e01c      	b.n	8002010 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	691b      	ldr	r3, [r3, #16]
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	4619      	mov	r1, r3
 8001fde:	68b8      	ldr	r0, [r7, #8]
 8001fe0:	f000 f850 	bl	8002084 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001fe4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001fe8:	f7ff fe8c 	bl	8001d04 <FLASH_WaitForLastOperation>
 8001fec:	4603      	mov	r3, r0
 8001fee:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8001ff0:	4b11      	ldr	r3, [pc, #68]	; (8002038 <HAL_FLASHEx_Erase+0xdc>)
 8001ff2:	691b      	ldr	r3, [r3, #16]
 8001ff4:	4a10      	ldr	r2, [pc, #64]	; (8002038 <HAL_FLASHEx_Erase+0xdc>)
 8001ff6:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8001ffa:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8001ffc:	7bfb      	ldrb	r3, [r7, #15]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d003      	beq.n	800200a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	68ba      	ldr	r2, [r7, #8]
 8002006:	601a      	str	r2, [r3, #0]
          break;
 8002008:	e00a      	b.n	8002020 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	3301      	adds	r3, #1
 800200e:	60bb      	str	r3, [r7, #8]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	68da      	ldr	r2, [r3, #12]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	4413      	add	r3, r2
 800201a:	68ba      	ldr	r2, [r7, #8]
 800201c:	429a      	cmp	r2, r3
 800201e:	d3da      	bcc.n	8001fd6 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8002020:	f000 f878 	bl	8002114 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002024:	4b03      	ldr	r3, [pc, #12]	; (8002034 <HAL_FLASHEx_Erase+0xd8>)
 8002026:	2200      	movs	r2, #0
 8002028:	761a      	strb	r2, [r3, #24]

  return status;
 800202a:	7bfb      	ldrb	r3, [r7, #15]
}
 800202c:	4618      	mov	r0, r3
 800202e:	3710      	adds	r7, #16
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	20006864 	.word	0x20006864
 8002038:	40023c00 	.word	0x40023c00

0800203c <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	4603      	mov	r3, r0
 8002044:	6039      	str	r1, [r7, #0]
 8002046:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002048:	4b0d      	ldr	r3, [pc, #52]	; (8002080 <FLASH_MassErase+0x44>)
 800204a:	691b      	ldr	r3, [r3, #16]
 800204c:	4a0c      	ldr	r2, [pc, #48]	; (8002080 <FLASH_MassErase+0x44>)
 800204e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002052:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8002054:	4b0a      	ldr	r3, [pc, #40]	; (8002080 <FLASH_MassErase+0x44>)
 8002056:	691b      	ldr	r3, [r3, #16]
 8002058:	4a09      	ldr	r2, [pc, #36]	; (8002080 <FLASH_MassErase+0x44>)
 800205a:	f043 0304 	orr.w	r3, r3, #4
 800205e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8002060:	4b07      	ldr	r3, [pc, #28]	; (8002080 <FLASH_MassErase+0x44>)
 8002062:	691a      	ldr	r2, [r3, #16]
 8002064:	79fb      	ldrb	r3, [r7, #7]
 8002066:	021b      	lsls	r3, r3, #8
 8002068:	4313      	orrs	r3, r2
 800206a:	4a05      	ldr	r2, [pc, #20]	; (8002080 <FLASH_MassErase+0x44>)
 800206c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002070:	6113      	str	r3, [r2, #16]
}
 8002072:	bf00      	nop
 8002074:	370c      	adds	r7, #12
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	40023c00 	.word	0x40023c00

08002084 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8002084:	b480      	push	{r7}
 8002086:	b085      	sub	sp, #20
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	460b      	mov	r3, r1
 800208e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8002090:	2300      	movs	r3, #0
 8002092:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8002094:	78fb      	ldrb	r3, [r7, #3]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d102      	bne.n	80020a0 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 800209a:	2300      	movs	r3, #0
 800209c:	60fb      	str	r3, [r7, #12]
 800209e:	e010      	b.n	80020c2 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80020a0:	78fb      	ldrb	r3, [r7, #3]
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d103      	bne.n	80020ae <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80020a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020aa:	60fb      	str	r3, [r7, #12]
 80020ac:	e009      	b.n	80020c2 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80020ae:	78fb      	ldrb	r3, [r7, #3]
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d103      	bne.n	80020bc <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80020b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020b8:	60fb      	str	r3, [r7, #12]
 80020ba:	e002      	b.n	80020c2 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80020bc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80020c0:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80020c2:	4b13      	ldr	r3, [pc, #76]	; (8002110 <FLASH_Erase_Sector+0x8c>)
 80020c4:	691b      	ldr	r3, [r3, #16]
 80020c6:	4a12      	ldr	r2, [pc, #72]	; (8002110 <FLASH_Erase_Sector+0x8c>)
 80020c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020cc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80020ce:	4b10      	ldr	r3, [pc, #64]	; (8002110 <FLASH_Erase_Sector+0x8c>)
 80020d0:	691a      	ldr	r2, [r3, #16]
 80020d2:	490f      	ldr	r1, [pc, #60]	; (8002110 <FLASH_Erase_Sector+0x8c>)
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80020da:	4b0d      	ldr	r3, [pc, #52]	; (8002110 <FLASH_Erase_Sector+0x8c>)
 80020dc:	691b      	ldr	r3, [r3, #16]
 80020de:	4a0c      	ldr	r2, [pc, #48]	; (8002110 <FLASH_Erase_Sector+0x8c>)
 80020e0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80020e4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80020e6:	4b0a      	ldr	r3, [pc, #40]	; (8002110 <FLASH_Erase_Sector+0x8c>)
 80020e8:	691a      	ldr	r2, [r3, #16]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	00db      	lsls	r3, r3, #3
 80020ee:	4313      	orrs	r3, r2
 80020f0:	4a07      	ldr	r2, [pc, #28]	; (8002110 <FLASH_Erase_Sector+0x8c>)
 80020f2:	f043 0302 	orr.w	r3, r3, #2
 80020f6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80020f8:	4b05      	ldr	r3, [pc, #20]	; (8002110 <FLASH_Erase_Sector+0x8c>)
 80020fa:	691b      	ldr	r3, [r3, #16]
 80020fc:	4a04      	ldr	r2, [pc, #16]	; (8002110 <FLASH_Erase_Sector+0x8c>)
 80020fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002102:	6113      	str	r3, [r2, #16]
}
 8002104:	bf00      	nop
 8002106:	3714      	adds	r7, #20
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr
 8002110:	40023c00 	.word	0x40023c00

08002114 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8002118:	4b20      	ldr	r3, [pc, #128]	; (800219c <FLASH_FlushCaches+0x88>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002120:	2b00      	cmp	r3, #0
 8002122:	d017      	beq.n	8002154 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002124:	4b1d      	ldr	r3, [pc, #116]	; (800219c <FLASH_FlushCaches+0x88>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a1c      	ldr	r2, [pc, #112]	; (800219c <FLASH_FlushCaches+0x88>)
 800212a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800212e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002130:	4b1a      	ldr	r3, [pc, #104]	; (800219c <FLASH_FlushCaches+0x88>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a19      	ldr	r2, [pc, #100]	; (800219c <FLASH_FlushCaches+0x88>)
 8002136:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800213a:	6013      	str	r3, [r2, #0]
 800213c:	4b17      	ldr	r3, [pc, #92]	; (800219c <FLASH_FlushCaches+0x88>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a16      	ldr	r2, [pc, #88]	; (800219c <FLASH_FlushCaches+0x88>)
 8002142:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002146:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002148:	4b14      	ldr	r3, [pc, #80]	; (800219c <FLASH_FlushCaches+0x88>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a13      	ldr	r2, [pc, #76]	; (800219c <FLASH_FlushCaches+0x88>)
 800214e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002152:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8002154:	4b11      	ldr	r3, [pc, #68]	; (800219c <FLASH_FlushCaches+0x88>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800215c:	2b00      	cmp	r3, #0
 800215e:	d017      	beq.n	8002190 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8002160:	4b0e      	ldr	r3, [pc, #56]	; (800219c <FLASH_FlushCaches+0x88>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a0d      	ldr	r2, [pc, #52]	; (800219c <FLASH_FlushCaches+0x88>)
 8002166:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800216a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800216c:	4b0b      	ldr	r3, [pc, #44]	; (800219c <FLASH_FlushCaches+0x88>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a0a      	ldr	r2, [pc, #40]	; (800219c <FLASH_FlushCaches+0x88>)
 8002172:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002176:	6013      	str	r3, [r2, #0]
 8002178:	4b08      	ldr	r3, [pc, #32]	; (800219c <FLASH_FlushCaches+0x88>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a07      	ldr	r2, [pc, #28]	; (800219c <FLASH_FlushCaches+0x88>)
 800217e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002182:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002184:	4b05      	ldr	r3, [pc, #20]	; (800219c <FLASH_FlushCaches+0x88>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a04      	ldr	r2, [pc, #16]	; (800219c <FLASH_FlushCaches+0x88>)
 800218a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800218e:	6013      	str	r3, [r2, #0]
  }
}
 8002190:	bf00      	nop
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	40023c00 	.word	0x40023c00

080021a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b089      	sub	sp, #36	; 0x24
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021aa:	2300      	movs	r3, #0
 80021ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021ae:	2300      	movs	r3, #0
 80021b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021b2:	2300      	movs	r3, #0
 80021b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021b6:	2300      	movs	r3, #0
 80021b8:	61fb      	str	r3, [r7, #28]
 80021ba:	e16b      	b.n	8002494 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021bc:	2201      	movs	r2, #1
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	fa02 f303 	lsl.w	r3, r2, r3
 80021c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	697a      	ldr	r2, [r7, #20]
 80021cc:	4013      	ands	r3, r2
 80021ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021d0:	693a      	ldr	r2, [r7, #16]
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	429a      	cmp	r2, r3
 80021d6:	f040 815a 	bne.w	800248e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d003      	beq.n	80021ea <HAL_GPIO_Init+0x4a>
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	2b12      	cmp	r3, #18
 80021e8:	d123      	bne.n	8002232 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	08da      	lsrs	r2, r3, #3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	3208      	adds	r2, #8
 80021f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	f003 0307 	and.w	r3, r3, #7
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	220f      	movs	r2, #15
 8002202:	fa02 f303 	lsl.w	r3, r2, r3
 8002206:	43db      	mvns	r3, r3
 8002208:	69ba      	ldr	r2, [r7, #24]
 800220a:	4013      	ands	r3, r2
 800220c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	691a      	ldr	r2, [r3, #16]
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	f003 0307 	and.w	r3, r3, #7
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	fa02 f303 	lsl.w	r3, r2, r3
 800221e:	69ba      	ldr	r2, [r7, #24]
 8002220:	4313      	orrs	r3, r2
 8002222:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	08da      	lsrs	r2, r3, #3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	3208      	adds	r2, #8
 800222c:	69b9      	ldr	r1, [r7, #24]
 800222e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	005b      	lsls	r3, r3, #1
 800223c:	2203      	movs	r2, #3
 800223e:	fa02 f303 	lsl.w	r3, r2, r3
 8002242:	43db      	mvns	r3, r3
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	4013      	ands	r3, r2
 8002248:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f003 0203 	and.w	r2, r3, #3
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	005b      	lsls	r3, r3, #1
 8002256:	fa02 f303 	lsl.w	r3, r2, r3
 800225a:	69ba      	ldr	r2, [r7, #24]
 800225c:	4313      	orrs	r3, r2
 800225e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	69ba      	ldr	r2, [r7, #24]
 8002264:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	2b01      	cmp	r3, #1
 800226c:	d00b      	beq.n	8002286 <HAL_GPIO_Init+0xe6>
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	2b02      	cmp	r3, #2
 8002274:	d007      	beq.n	8002286 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800227a:	2b11      	cmp	r3, #17
 800227c:	d003      	beq.n	8002286 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	2b12      	cmp	r3, #18
 8002284:	d130      	bne.n	80022e8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	005b      	lsls	r3, r3, #1
 8002290:	2203      	movs	r2, #3
 8002292:	fa02 f303 	lsl.w	r3, r2, r3
 8002296:	43db      	mvns	r3, r3
 8002298:	69ba      	ldr	r2, [r7, #24]
 800229a:	4013      	ands	r3, r2
 800229c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	68da      	ldr	r2, [r3, #12]
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	005b      	lsls	r3, r3, #1
 80022a6:	fa02 f303 	lsl.w	r3, r2, r3
 80022aa:	69ba      	ldr	r2, [r7, #24]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022bc:	2201      	movs	r2, #1
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	fa02 f303 	lsl.w	r3, r2, r3
 80022c4:	43db      	mvns	r3, r3
 80022c6:	69ba      	ldr	r2, [r7, #24]
 80022c8:	4013      	ands	r3, r2
 80022ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	091b      	lsrs	r3, r3, #4
 80022d2:	f003 0201 	and.w	r2, r3, #1
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	fa02 f303 	lsl.w	r3, r2, r3
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	4313      	orrs	r3, r2
 80022e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	69ba      	ldr	r2, [r7, #24]
 80022e6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	005b      	lsls	r3, r3, #1
 80022f2:	2203      	movs	r2, #3
 80022f4:	fa02 f303 	lsl.w	r3, r2, r3
 80022f8:	43db      	mvns	r3, r3
 80022fa:	69ba      	ldr	r2, [r7, #24]
 80022fc:	4013      	ands	r3, r2
 80022fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	689a      	ldr	r2, [r3, #8]
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	005b      	lsls	r3, r3, #1
 8002308:	fa02 f303 	lsl.w	r3, r2, r3
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	4313      	orrs	r3, r2
 8002310:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	69ba      	ldr	r2, [r7, #24]
 8002316:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002320:	2b00      	cmp	r3, #0
 8002322:	f000 80b4 	beq.w	800248e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002326:	2300      	movs	r3, #0
 8002328:	60fb      	str	r3, [r7, #12]
 800232a:	4b5f      	ldr	r3, [pc, #380]	; (80024a8 <HAL_GPIO_Init+0x308>)
 800232c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800232e:	4a5e      	ldr	r2, [pc, #376]	; (80024a8 <HAL_GPIO_Init+0x308>)
 8002330:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002334:	6453      	str	r3, [r2, #68]	; 0x44
 8002336:	4b5c      	ldr	r3, [pc, #368]	; (80024a8 <HAL_GPIO_Init+0x308>)
 8002338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800233a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800233e:	60fb      	str	r3, [r7, #12]
 8002340:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002342:	4a5a      	ldr	r2, [pc, #360]	; (80024ac <HAL_GPIO_Init+0x30c>)
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	089b      	lsrs	r3, r3, #2
 8002348:	3302      	adds	r3, #2
 800234a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800234e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	f003 0303 	and.w	r3, r3, #3
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	220f      	movs	r2, #15
 800235a:	fa02 f303 	lsl.w	r3, r2, r3
 800235e:	43db      	mvns	r3, r3
 8002360:	69ba      	ldr	r2, [r7, #24]
 8002362:	4013      	ands	r3, r2
 8002364:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4a51      	ldr	r2, [pc, #324]	; (80024b0 <HAL_GPIO_Init+0x310>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d02b      	beq.n	80023c6 <HAL_GPIO_Init+0x226>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a50      	ldr	r2, [pc, #320]	; (80024b4 <HAL_GPIO_Init+0x314>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d025      	beq.n	80023c2 <HAL_GPIO_Init+0x222>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4a4f      	ldr	r2, [pc, #316]	; (80024b8 <HAL_GPIO_Init+0x318>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d01f      	beq.n	80023be <HAL_GPIO_Init+0x21e>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a4e      	ldr	r2, [pc, #312]	; (80024bc <HAL_GPIO_Init+0x31c>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d019      	beq.n	80023ba <HAL_GPIO_Init+0x21a>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4a4d      	ldr	r2, [pc, #308]	; (80024c0 <HAL_GPIO_Init+0x320>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d013      	beq.n	80023b6 <HAL_GPIO_Init+0x216>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4a4c      	ldr	r2, [pc, #304]	; (80024c4 <HAL_GPIO_Init+0x324>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d00d      	beq.n	80023b2 <HAL_GPIO_Init+0x212>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a4b      	ldr	r2, [pc, #300]	; (80024c8 <HAL_GPIO_Init+0x328>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d007      	beq.n	80023ae <HAL_GPIO_Init+0x20e>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a4a      	ldr	r2, [pc, #296]	; (80024cc <HAL_GPIO_Init+0x32c>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d101      	bne.n	80023aa <HAL_GPIO_Init+0x20a>
 80023a6:	2307      	movs	r3, #7
 80023a8:	e00e      	b.n	80023c8 <HAL_GPIO_Init+0x228>
 80023aa:	2308      	movs	r3, #8
 80023ac:	e00c      	b.n	80023c8 <HAL_GPIO_Init+0x228>
 80023ae:	2306      	movs	r3, #6
 80023b0:	e00a      	b.n	80023c8 <HAL_GPIO_Init+0x228>
 80023b2:	2305      	movs	r3, #5
 80023b4:	e008      	b.n	80023c8 <HAL_GPIO_Init+0x228>
 80023b6:	2304      	movs	r3, #4
 80023b8:	e006      	b.n	80023c8 <HAL_GPIO_Init+0x228>
 80023ba:	2303      	movs	r3, #3
 80023bc:	e004      	b.n	80023c8 <HAL_GPIO_Init+0x228>
 80023be:	2302      	movs	r3, #2
 80023c0:	e002      	b.n	80023c8 <HAL_GPIO_Init+0x228>
 80023c2:	2301      	movs	r3, #1
 80023c4:	e000      	b.n	80023c8 <HAL_GPIO_Init+0x228>
 80023c6:	2300      	movs	r3, #0
 80023c8:	69fa      	ldr	r2, [r7, #28]
 80023ca:	f002 0203 	and.w	r2, r2, #3
 80023ce:	0092      	lsls	r2, r2, #2
 80023d0:	4093      	lsls	r3, r2
 80023d2:	69ba      	ldr	r2, [r7, #24]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023d8:	4934      	ldr	r1, [pc, #208]	; (80024ac <HAL_GPIO_Init+0x30c>)
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	089b      	lsrs	r3, r3, #2
 80023de:	3302      	adds	r3, #2
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023e6:	4b3a      	ldr	r3, [pc, #232]	; (80024d0 <HAL_GPIO_Init+0x330>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	43db      	mvns	r3, r3
 80023f0:	69ba      	ldr	r2, [r7, #24]
 80023f2:	4013      	ands	r3, r2
 80023f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d003      	beq.n	800240a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002402:	69ba      	ldr	r2, [r7, #24]
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	4313      	orrs	r3, r2
 8002408:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800240a:	4a31      	ldr	r2, [pc, #196]	; (80024d0 <HAL_GPIO_Init+0x330>)
 800240c:	69bb      	ldr	r3, [r7, #24]
 800240e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002410:	4b2f      	ldr	r3, [pc, #188]	; (80024d0 <HAL_GPIO_Init+0x330>)
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	43db      	mvns	r3, r3
 800241a:	69ba      	ldr	r2, [r7, #24]
 800241c:	4013      	ands	r3, r2
 800241e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d003      	beq.n	8002434 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	4313      	orrs	r3, r2
 8002432:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002434:	4a26      	ldr	r2, [pc, #152]	; (80024d0 <HAL_GPIO_Init+0x330>)
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800243a:	4b25      	ldr	r3, [pc, #148]	; (80024d0 <HAL_GPIO_Init+0x330>)
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	43db      	mvns	r3, r3
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	4013      	ands	r3, r2
 8002448:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d003      	beq.n	800245e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002456:	69ba      	ldr	r2, [r7, #24]
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	4313      	orrs	r3, r2
 800245c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800245e:	4a1c      	ldr	r2, [pc, #112]	; (80024d0 <HAL_GPIO_Init+0x330>)
 8002460:	69bb      	ldr	r3, [r7, #24]
 8002462:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002464:	4b1a      	ldr	r3, [pc, #104]	; (80024d0 <HAL_GPIO_Init+0x330>)
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	43db      	mvns	r3, r3
 800246e:	69ba      	ldr	r2, [r7, #24]
 8002470:	4013      	ands	r3, r2
 8002472:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800247c:	2b00      	cmp	r3, #0
 800247e:	d003      	beq.n	8002488 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002480:	69ba      	ldr	r2, [r7, #24]
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	4313      	orrs	r3, r2
 8002486:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002488:	4a11      	ldr	r2, [pc, #68]	; (80024d0 <HAL_GPIO_Init+0x330>)
 800248a:	69bb      	ldr	r3, [r7, #24]
 800248c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	3301      	adds	r3, #1
 8002492:	61fb      	str	r3, [r7, #28]
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	2b0f      	cmp	r3, #15
 8002498:	f67f ae90 	bls.w	80021bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800249c:	bf00      	nop
 800249e:	3724      	adds	r7, #36	; 0x24
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr
 80024a8:	40023800 	.word	0x40023800
 80024ac:	40013800 	.word	0x40013800
 80024b0:	40020000 	.word	0x40020000
 80024b4:	40020400 	.word	0x40020400
 80024b8:	40020800 	.word	0x40020800
 80024bc:	40020c00 	.word	0x40020c00
 80024c0:	40021000 	.word	0x40021000
 80024c4:	40021400 	.word	0x40021400
 80024c8:	40021800 	.word	0x40021800
 80024cc:	40021c00 	.word	0x40021c00
 80024d0:	40013c00 	.word	0x40013c00

080024d4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b087      	sub	sp, #28
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024de:	2300      	movs	r3, #0
 80024e0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80024e2:	2300      	movs	r3, #0
 80024e4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80024e6:	2300      	movs	r3, #0
 80024e8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024ea:	2300      	movs	r3, #0
 80024ec:	617b      	str	r3, [r7, #20]
 80024ee:	e0cd      	b.n	800268c <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024f0:	2201      	movs	r2, #1
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	fa02 f303 	lsl.w	r3, r2, r3
 80024f8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80024fa:	683a      	ldr	r2, [r7, #0]
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	4013      	ands	r3, r2
 8002500:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8002502:	68fa      	ldr	r2, [r7, #12]
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	429a      	cmp	r2, r3
 8002508:	f040 80bd 	bne.w	8002686 <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800250c:	4a64      	ldr	r2, [pc, #400]	; (80026a0 <HAL_GPIO_DeInit+0x1cc>)
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	089b      	lsrs	r3, r3, #2
 8002512:	3302      	adds	r3, #2
 8002514:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002518:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	f003 0303 	and.w	r3, r3, #3
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	220f      	movs	r2, #15
 8002524:	fa02 f303 	lsl.w	r3, r2, r3
 8002528:	68ba      	ldr	r2, [r7, #8]
 800252a:	4013      	ands	r3, r2
 800252c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4a5c      	ldr	r2, [pc, #368]	; (80026a4 <HAL_GPIO_DeInit+0x1d0>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d02b      	beq.n	800258e <HAL_GPIO_DeInit+0xba>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4a5b      	ldr	r2, [pc, #364]	; (80026a8 <HAL_GPIO_DeInit+0x1d4>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d025      	beq.n	800258a <HAL_GPIO_DeInit+0xb6>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4a5a      	ldr	r2, [pc, #360]	; (80026ac <HAL_GPIO_DeInit+0x1d8>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d01f      	beq.n	8002586 <HAL_GPIO_DeInit+0xb2>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4a59      	ldr	r2, [pc, #356]	; (80026b0 <HAL_GPIO_DeInit+0x1dc>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d019      	beq.n	8002582 <HAL_GPIO_DeInit+0xae>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a58      	ldr	r2, [pc, #352]	; (80026b4 <HAL_GPIO_DeInit+0x1e0>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d013      	beq.n	800257e <HAL_GPIO_DeInit+0xaa>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4a57      	ldr	r2, [pc, #348]	; (80026b8 <HAL_GPIO_DeInit+0x1e4>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d00d      	beq.n	800257a <HAL_GPIO_DeInit+0xa6>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4a56      	ldr	r2, [pc, #344]	; (80026bc <HAL_GPIO_DeInit+0x1e8>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d007      	beq.n	8002576 <HAL_GPIO_DeInit+0xa2>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4a55      	ldr	r2, [pc, #340]	; (80026c0 <HAL_GPIO_DeInit+0x1ec>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d101      	bne.n	8002572 <HAL_GPIO_DeInit+0x9e>
 800256e:	2307      	movs	r3, #7
 8002570:	e00e      	b.n	8002590 <HAL_GPIO_DeInit+0xbc>
 8002572:	2308      	movs	r3, #8
 8002574:	e00c      	b.n	8002590 <HAL_GPIO_DeInit+0xbc>
 8002576:	2306      	movs	r3, #6
 8002578:	e00a      	b.n	8002590 <HAL_GPIO_DeInit+0xbc>
 800257a:	2305      	movs	r3, #5
 800257c:	e008      	b.n	8002590 <HAL_GPIO_DeInit+0xbc>
 800257e:	2304      	movs	r3, #4
 8002580:	e006      	b.n	8002590 <HAL_GPIO_DeInit+0xbc>
 8002582:	2303      	movs	r3, #3
 8002584:	e004      	b.n	8002590 <HAL_GPIO_DeInit+0xbc>
 8002586:	2302      	movs	r3, #2
 8002588:	e002      	b.n	8002590 <HAL_GPIO_DeInit+0xbc>
 800258a:	2301      	movs	r3, #1
 800258c:	e000      	b.n	8002590 <HAL_GPIO_DeInit+0xbc>
 800258e:	2300      	movs	r3, #0
 8002590:	697a      	ldr	r2, [r7, #20]
 8002592:	f002 0203 	and.w	r2, r2, #3
 8002596:	0092      	lsls	r2, r2, #2
 8002598:	4093      	lsls	r3, r2
 800259a:	68ba      	ldr	r2, [r7, #8]
 800259c:	429a      	cmp	r2, r3
 800259e:	d132      	bne.n	8002606 <HAL_GPIO_DeInit+0x132>
      {
        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	f003 0303 	and.w	r3, r3, #3
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	220f      	movs	r2, #15
 80025aa:	fa02 f303 	lsl.w	r3, r2, r3
 80025ae:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80025b0:	4a3b      	ldr	r2, [pc, #236]	; (80026a0 <HAL_GPIO_DeInit+0x1cc>)
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	089b      	lsrs	r3, r3, #2
 80025b6:	3302      	adds	r3, #2
 80025b8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	43da      	mvns	r2, r3
 80025c0:	4837      	ldr	r0, [pc, #220]	; (80026a0 <HAL_GPIO_DeInit+0x1cc>)
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	089b      	lsrs	r3, r3, #2
 80025c6:	400a      	ands	r2, r1
 80025c8:	3302      	adds	r3, #2
 80025ca:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80025ce:	4b3d      	ldr	r3, [pc, #244]	; (80026c4 <HAL_GPIO_DeInit+0x1f0>)
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	43db      	mvns	r3, r3
 80025d6:	493b      	ldr	r1, [pc, #236]	; (80026c4 <HAL_GPIO_DeInit+0x1f0>)
 80025d8:	4013      	ands	r3, r2
 80025da:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80025dc:	4b39      	ldr	r3, [pc, #228]	; (80026c4 <HAL_GPIO_DeInit+0x1f0>)
 80025de:	685a      	ldr	r2, [r3, #4]
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	43db      	mvns	r3, r3
 80025e4:	4937      	ldr	r1, [pc, #220]	; (80026c4 <HAL_GPIO_DeInit+0x1f0>)
 80025e6:	4013      	ands	r3, r2
 80025e8:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80025ea:	4b36      	ldr	r3, [pc, #216]	; (80026c4 <HAL_GPIO_DeInit+0x1f0>)
 80025ec:	689a      	ldr	r2, [r3, #8]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	43db      	mvns	r3, r3
 80025f2:	4934      	ldr	r1, [pc, #208]	; (80026c4 <HAL_GPIO_DeInit+0x1f0>)
 80025f4:	4013      	ands	r3, r2
 80025f6:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80025f8:	4b32      	ldr	r3, [pc, #200]	; (80026c4 <HAL_GPIO_DeInit+0x1f0>)
 80025fa:	68da      	ldr	r2, [r3, #12]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	43db      	mvns	r3, r3
 8002600:	4930      	ldr	r1, [pc, #192]	; (80026c4 <HAL_GPIO_DeInit+0x1f0>)
 8002602:	4013      	ands	r3, r2
 8002604:	60cb      	str	r3, [r1, #12]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	005b      	lsls	r3, r3, #1
 800260e:	2103      	movs	r1, #3
 8002610:	fa01 f303 	lsl.w	r3, r1, r3
 8002614:	43db      	mvns	r3, r3
 8002616:	401a      	ands	r2, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	08da      	lsrs	r2, r3, #3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	3208      	adds	r2, #8
 8002624:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	f003 0307 	and.w	r3, r3, #7
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	220f      	movs	r2, #15
 8002632:	fa02 f303 	lsl.w	r3, r2, r3
 8002636:	43db      	mvns	r3, r3
 8002638:	697a      	ldr	r2, [r7, #20]
 800263a:	08d2      	lsrs	r2, r2, #3
 800263c:	4019      	ands	r1, r3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	3208      	adds	r2, #8
 8002642:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	689a      	ldr	r2, [r3, #8]
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	005b      	lsls	r3, r3, #1
 800264e:	2103      	movs	r1, #3
 8002650:	fa01 f303 	lsl.w	r3, r1, r3
 8002654:	43db      	mvns	r3, r3
 8002656:	401a      	ands	r2, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	685a      	ldr	r2, [r3, #4]
 8002660:	2101      	movs	r1, #1
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	fa01 f303 	lsl.w	r3, r1, r3
 8002668:	43db      	mvns	r3, r3
 800266a:	401a      	ands	r2, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	68da      	ldr	r2, [r3, #12]
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	005b      	lsls	r3, r3, #1
 8002678:	2103      	movs	r1, #3
 800267a:	fa01 f303 	lsl.w	r3, r1, r3
 800267e:	43db      	mvns	r3, r3
 8002680:	401a      	ands	r2, r3
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	60da      	str	r2, [r3, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	3301      	adds	r3, #1
 800268a:	617b      	str	r3, [r7, #20]
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	2b0f      	cmp	r3, #15
 8002690:	f67f af2e 	bls.w	80024f0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8002694:	bf00      	nop
 8002696:	371c      	adds	r7, #28
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr
 80026a0:	40013800 	.word	0x40013800
 80026a4:	40020000 	.word	0x40020000
 80026a8:	40020400 	.word	0x40020400
 80026ac:	40020800 	.word	0x40020800
 80026b0:	40020c00 	.word	0x40020c00
 80026b4:	40021000 	.word	0x40021000
 80026b8:	40021400 	.word	0x40021400
 80026bc:	40021800 	.word	0x40021800
 80026c0:	40021c00 	.word	0x40021c00
 80026c4:	40013c00 	.word	0x40013c00

080026c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b085      	sub	sp, #20
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	460b      	mov	r3, r1
 80026d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	691a      	ldr	r2, [r3, #16]
 80026d8:	887b      	ldrh	r3, [r7, #2]
 80026da:	4013      	ands	r3, r2
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d002      	beq.n	80026e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80026e0:	2301      	movs	r3, #1
 80026e2:	73fb      	strb	r3, [r7, #15]
 80026e4:	e001      	b.n	80026ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80026e6:	2300      	movs	r3, #0
 80026e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80026ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3714      	adds	r7, #20
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr

080026f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	460b      	mov	r3, r1
 8002702:	807b      	strh	r3, [r7, #2]
 8002704:	4613      	mov	r3, r2
 8002706:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002708:	787b      	ldrb	r3, [r7, #1]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d003      	beq.n	8002716 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800270e:	887a      	ldrh	r2, [r7, #2]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002714:	e003      	b.n	800271e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002716:	887b      	ldrh	r3, [r7, #2]
 8002718:	041a      	lsls	r2, r3, #16
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	619a      	str	r2, [r3, #24]
}
 800271e:	bf00      	nop
 8002720:	370c      	adds	r7, #12
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr

0800272a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800272a:	b480      	push	{r7}
 800272c:	b083      	sub	sp, #12
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
 8002732:	460b      	mov	r3, r1
 8002734:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	695a      	ldr	r2, [r3, #20]
 800273a:	887b      	ldrh	r3, [r7, #2]
 800273c:	401a      	ands	r2, r3
 800273e:	887b      	ldrh	r3, [r7, #2]
 8002740:	429a      	cmp	r2, r3
 8002742:	d104      	bne.n	800274e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002744:	887b      	ldrh	r3, [r7, #2]
 8002746:	041a      	lsls	r2, r3, #16
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800274c:	e002      	b.n	8002754 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800274e:	887a      	ldrh	r2, [r7, #2]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	619a      	str	r2, [r3, #24]
}
 8002754:	bf00      	nop
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d101      	bne.n	8002772 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e10f      	b.n	8002992 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002778:	b2db      	uxtb	r3, r3
 800277a:	2b00      	cmp	r3, #0
 800277c:	d106      	bne.n	800278c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f00e f8be 	bl	8010908 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2224      	movs	r2, #36	; 0x24
 8002790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f022 0201 	bic.w	r2, r2, #1
 80027a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80027a4:	f002 fec0 	bl	8005528 <HAL_RCC_GetPCLK1Freq>
 80027a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	4a7b      	ldr	r2, [pc, #492]	; (800299c <HAL_I2C_Init+0x23c>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d807      	bhi.n	80027c4 <HAL_I2C_Init+0x64>
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	4a7a      	ldr	r2, [pc, #488]	; (80029a0 <HAL_I2C_Init+0x240>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	bf94      	ite	ls
 80027bc:	2301      	movls	r3, #1
 80027be:	2300      	movhi	r3, #0
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	e006      	b.n	80027d2 <HAL_I2C_Init+0x72>
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	4a77      	ldr	r2, [pc, #476]	; (80029a4 <HAL_I2C_Init+0x244>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	bf94      	ite	ls
 80027cc:	2301      	movls	r3, #1
 80027ce:	2300      	movhi	r3, #0
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d001      	beq.n	80027da <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e0db      	b.n	8002992 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	4a72      	ldr	r2, [pc, #456]	; (80029a8 <HAL_I2C_Init+0x248>)
 80027de:	fba2 2303 	umull	r2, r3, r2, r3
 80027e2:	0c9b      	lsrs	r3, r3, #18
 80027e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	68ba      	ldr	r2, [r7, #8]
 80027f6:	430a      	orrs	r2, r1
 80027f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	6a1b      	ldr	r3, [r3, #32]
 8002800:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	4a64      	ldr	r2, [pc, #400]	; (800299c <HAL_I2C_Init+0x23c>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d802      	bhi.n	8002814 <HAL_I2C_Init+0xb4>
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	3301      	adds	r3, #1
 8002812:	e009      	b.n	8002828 <HAL_I2C_Init+0xc8>
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800281a:	fb02 f303 	mul.w	r3, r2, r3
 800281e:	4a63      	ldr	r2, [pc, #396]	; (80029ac <HAL_I2C_Init+0x24c>)
 8002820:	fba2 2303 	umull	r2, r3, r2, r3
 8002824:	099b      	lsrs	r3, r3, #6
 8002826:	3301      	adds	r3, #1
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	6812      	ldr	r2, [r2, #0]
 800282c:	430b      	orrs	r3, r1
 800282e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	69db      	ldr	r3, [r3, #28]
 8002836:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800283a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	4956      	ldr	r1, [pc, #344]	; (800299c <HAL_I2C_Init+0x23c>)
 8002844:	428b      	cmp	r3, r1
 8002846:	d80d      	bhi.n	8002864 <HAL_I2C_Init+0x104>
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	1e59      	subs	r1, r3, #1
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	005b      	lsls	r3, r3, #1
 8002852:	fbb1 f3f3 	udiv	r3, r1, r3
 8002856:	3301      	adds	r3, #1
 8002858:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800285c:	2b04      	cmp	r3, #4
 800285e:	bf38      	it	cc
 8002860:	2304      	movcc	r3, #4
 8002862:	e04f      	b.n	8002904 <HAL_I2C_Init+0x1a4>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d111      	bne.n	8002890 <HAL_I2C_Init+0x130>
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	1e58      	subs	r0, r3, #1
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6859      	ldr	r1, [r3, #4]
 8002874:	460b      	mov	r3, r1
 8002876:	005b      	lsls	r3, r3, #1
 8002878:	440b      	add	r3, r1
 800287a:	fbb0 f3f3 	udiv	r3, r0, r3
 800287e:	3301      	adds	r3, #1
 8002880:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002884:	2b00      	cmp	r3, #0
 8002886:	bf0c      	ite	eq
 8002888:	2301      	moveq	r3, #1
 800288a:	2300      	movne	r3, #0
 800288c:	b2db      	uxtb	r3, r3
 800288e:	e012      	b.n	80028b6 <HAL_I2C_Init+0x156>
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	1e58      	subs	r0, r3, #1
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6859      	ldr	r1, [r3, #4]
 8002898:	460b      	mov	r3, r1
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	440b      	add	r3, r1
 800289e:	0099      	lsls	r1, r3, #2
 80028a0:	440b      	add	r3, r1
 80028a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80028a6:	3301      	adds	r3, #1
 80028a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	bf0c      	ite	eq
 80028b0:	2301      	moveq	r3, #1
 80028b2:	2300      	movne	r3, #0
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d001      	beq.n	80028be <HAL_I2C_Init+0x15e>
 80028ba:	2301      	movs	r3, #1
 80028bc:	e022      	b.n	8002904 <HAL_I2C_Init+0x1a4>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d10e      	bne.n	80028e4 <HAL_I2C_Init+0x184>
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	1e58      	subs	r0, r3, #1
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6859      	ldr	r1, [r3, #4]
 80028ce:	460b      	mov	r3, r1
 80028d0:	005b      	lsls	r3, r3, #1
 80028d2:	440b      	add	r3, r1
 80028d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80028d8:	3301      	adds	r3, #1
 80028da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028e2:	e00f      	b.n	8002904 <HAL_I2C_Init+0x1a4>
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	1e58      	subs	r0, r3, #1
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6859      	ldr	r1, [r3, #4]
 80028ec:	460b      	mov	r3, r1
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	440b      	add	r3, r1
 80028f2:	0099      	lsls	r1, r3, #2
 80028f4:	440b      	add	r3, r1
 80028f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80028fa:	3301      	adds	r3, #1
 80028fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002900:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002904:	6879      	ldr	r1, [r7, #4]
 8002906:	6809      	ldr	r1, [r1, #0]
 8002908:	4313      	orrs	r3, r2
 800290a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	69da      	ldr	r2, [r3, #28]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a1b      	ldr	r3, [r3, #32]
 800291e:	431a      	orrs	r2, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	430a      	orrs	r2, r1
 8002926:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002932:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	6911      	ldr	r1, [r2, #16]
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	68d2      	ldr	r2, [r2, #12]
 800293e:	4311      	orrs	r1, r2
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	6812      	ldr	r2, [r2, #0]
 8002944:	430b      	orrs	r3, r1
 8002946:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	68db      	ldr	r3, [r3, #12]
 800294e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	695a      	ldr	r2, [r3, #20]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	699b      	ldr	r3, [r3, #24]
 800295a:	431a      	orrs	r2, r3
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	430a      	orrs	r2, r1
 8002962:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f042 0201 	orr.w	r2, r2, #1
 8002972:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2200      	movs	r2, #0
 8002978:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2220      	movs	r2, #32
 800297e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2200      	movs	r2, #0
 800298c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002990:	2300      	movs	r3, #0
}
 8002992:	4618      	mov	r0, r3
 8002994:	3710      	adds	r7, #16
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	000186a0 	.word	0x000186a0
 80029a0:	001e847f 	.word	0x001e847f
 80029a4:	003d08ff 	.word	0x003d08ff
 80029a8:	431bde83 	.word	0x431bde83
 80029ac:	10624dd3 	.word	0x10624dd3

080029b0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d101      	bne.n	80029c2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e021      	b.n	8002a06 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2224      	movs	r2, #36	; 0x24
 80029c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f022 0201 	bic.w	r2, r2, #1
 80029d8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f00e f834 	bl	8010a48 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2200      	movs	r2, #0
 80029e4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2200      	movs	r2, #0
 80029ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2200      	movs	r2, #0
 80029f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2200      	movs	r2, #0
 80029f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2200      	movs	r2, #0
 8002a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a04:	2300      	movs	r3, #0
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3708      	adds	r7, #8
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
	...

08002a10 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b088      	sub	sp, #32
 8002a14:	af02      	add	r7, sp, #8
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	607a      	str	r2, [r7, #4]
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	460b      	mov	r3, r1
 8002a1e:	817b      	strh	r3, [r7, #10]
 8002a20:	4613      	mov	r3, r2
 8002a22:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a24:	f7fe faf6 	bl	8001014 <HAL_GetTick>
 8002a28:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	2b20      	cmp	r3, #32
 8002a34:	f040 80e0 	bne.w	8002bf8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	9300      	str	r3, [sp, #0]
 8002a3c:	2319      	movs	r3, #25
 8002a3e:	2201      	movs	r2, #1
 8002a40:	4970      	ldr	r1, [pc, #448]	; (8002c04 <HAL_I2C_Master_Transmit+0x1f4>)
 8002a42:	68f8      	ldr	r0, [r7, #12]
 8002a44:	f001 f9de 	bl	8003e04 <I2C_WaitOnFlagUntilTimeout>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d001      	beq.n	8002a52 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002a4e:	2302      	movs	r3, #2
 8002a50:	e0d3      	b.n	8002bfa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d101      	bne.n	8002a60 <HAL_I2C_Master_Transmit+0x50>
 8002a5c:	2302      	movs	r3, #2
 8002a5e:	e0cc      	b.n	8002bfa <HAL_I2C_Master_Transmit+0x1ea>
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0301 	and.w	r3, r3, #1
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d007      	beq.n	8002a86 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f042 0201 	orr.w	r2, r2, #1
 8002a84:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a94:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2221      	movs	r2, #33	; 0x21
 8002a9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2210      	movs	r2, #16
 8002aa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	893a      	ldrh	r2, [r7, #8]
 8002ab6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002abc:	b29a      	uxth	r2, r3
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	4a50      	ldr	r2, [pc, #320]	; (8002c08 <HAL_I2C_Master_Transmit+0x1f8>)
 8002ac6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002ac8:	8979      	ldrh	r1, [r7, #10]
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	6a3a      	ldr	r2, [r7, #32]
 8002ace:	68f8      	ldr	r0, [r7, #12]
 8002ad0:	f000 ff12 	bl	80038f8 <I2C_MasterRequestWrite>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d001      	beq.n	8002ade <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e08d      	b.n	8002bfa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ade:	2300      	movs	r3, #0
 8002ae0:	613b      	str	r3, [r7, #16]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	695b      	ldr	r3, [r3, #20]
 8002ae8:	613b      	str	r3, [r7, #16]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	699b      	ldr	r3, [r3, #24]
 8002af0:	613b      	str	r3, [r7, #16]
 8002af2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002af4:	e066      	b.n	8002bc4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002af6:	697a      	ldr	r2, [r7, #20]
 8002af8:	6a39      	ldr	r1, [r7, #32]
 8002afa:	68f8      	ldr	r0, [r7, #12]
 8002afc:	f001 fa58 	bl	8003fb0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d00d      	beq.n	8002b22 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0a:	2b04      	cmp	r3, #4
 8002b0c:	d107      	bne.n	8002b1e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b1c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e06b      	b.n	8002bfa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b26:	781a      	ldrb	r2, [r3, #0]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b32:	1c5a      	adds	r2, r3, #1
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	3b01      	subs	r3, #1
 8002b40:	b29a      	uxth	r2, r3
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b4a:	3b01      	subs	r3, #1
 8002b4c:	b29a      	uxth	r2, r3
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	695b      	ldr	r3, [r3, #20]
 8002b58:	f003 0304 	and.w	r3, r3, #4
 8002b5c:	2b04      	cmp	r3, #4
 8002b5e:	d11b      	bne.n	8002b98 <HAL_I2C_Master_Transmit+0x188>
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d017      	beq.n	8002b98 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6c:	781a      	ldrb	r2, [r3, #0]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b78:	1c5a      	adds	r2, r3, #1
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	3b01      	subs	r3, #1
 8002b86:	b29a      	uxth	r2, r3
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b90:	3b01      	subs	r3, #1
 8002b92:	b29a      	uxth	r2, r3
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b98:	697a      	ldr	r2, [r7, #20]
 8002b9a:	6a39      	ldr	r1, [r7, #32]
 8002b9c:	68f8      	ldr	r0, [r7, #12]
 8002b9e:	f001 fa48 	bl	8004032 <I2C_WaitOnBTFFlagUntilTimeout>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d00d      	beq.n	8002bc4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bac:	2b04      	cmp	r3, #4
 8002bae:	d107      	bne.n	8002bc0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bbe:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e01a      	b.n	8002bfa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d194      	bne.n	8002af6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bda:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2220      	movs	r2, #32
 8002be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2200      	movs	r2, #0
 8002be8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	e000      	b.n	8002bfa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002bf8:	2302      	movs	r3, #2
  }
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3718      	adds	r7, #24
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	00100002 	.word	0x00100002
 8002c08:	ffff0000 	.word	0xffff0000

08002c0c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b08c      	sub	sp, #48	; 0x30
 8002c10:	af02      	add	r7, sp, #8
 8002c12:	60f8      	str	r0, [r7, #12]
 8002c14:	607a      	str	r2, [r7, #4]
 8002c16:	461a      	mov	r2, r3
 8002c18:	460b      	mov	r3, r1
 8002c1a:	817b      	strh	r3, [r7, #10]
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c20:	f7fe f9f8 	bl	8001014 <HAL_GetTick>
 8002c24:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	2b20      	cmp	r3, #32
 8002c30:	f040 820b 	bne.w	800304a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c36:	9300      	str	r3, [sp, #0]
 8002c38:	2319      	movs	r3, #25
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	497c      	ldr	r1, [pc, #496]	; (8002e30 <HAL_I2C_Master_Receive+0x224>)
 8002c3e:	68f8      	ldr	r0, [r7, #12]
 8002c40:	f001 f8e0 	bl	8003e04 <I2C_WaitOnFlagUntilTimeout>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d001      	beq.n	8002c4e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002c4a:	2302      	movs	r3, #2
 8002c4c:	e1fe      	b.n	800304c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d101      	bne.n	8002c5c <HAL_I2C_Master_Receive+0x50>
 8002c58:	2302      	movs	r3, #2
 8002c5a:	e1f7      	b.n	800304c <HAL_I2C_Master_Receive+0x440>
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0301 	and.w	r3, r3, #1
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d007      	beq.n	8002c82 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f042 0201 	orr.w	r2, r2, #1
 8002c80:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c90:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2222      	movs	r2, #34	; 0x22
 8002c96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2210      	movs	r2, #16
 8002c9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	893a      	ldrh	r2, [r7, #8]
 8002cb2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cb8:	b29a      	uxth	r2, r3
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	4a5c      	ldr	r2, [pc, #368]	; (8002e34 <HAL_I2C_Master_Receive+0x228>)
 8002cc2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002cc4:	8979      	ldrh	r1, [r7, #10]
 8002cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002cca:	68f8      	ldr	r0, [r7, #12]
 8002ccc:	f000 fe8a 	bl	80039e4 <I2C_MasterRequestRead>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d001      	beq.n	8002cda <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e1b8      	b.n	800304c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d113      	bne.n	8002d0a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	623b      	str	r3, [r7, #32]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	695b      	ldr	r3, [r3, #20]
 8002cec:	623b      	str	r3, [r7, #32]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	699b      	ldr	r3, [r3, #24]
 8002cf4:	623b      	str	r3, [r7, #32]
 8002cf6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d06:	601a      	str	r2, [r3, #0]
 8002d08:	e18c      	b.n	8003024 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d11b      	bne.n	8002d4a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d20:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d22:	2300      	movs	r3, #0
 8002d24:	61fb      	str	r3, [r7, #28]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	695b      	ldr	r3, [r3, #20]
 8002d2c:	61fb      	str	r3, [r7, #28]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	699b      	ldr	r3, [r3, #24]
 8002d34:	61fb      	str	r3, [r7, #28]
 8002d36:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d46:	601a      	str	r2, [r3, #0]
 8002d48:	e16c      	b.n	8003024 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d11b      	bne.n	8002d8a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d60:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d70:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d72:	2300      	movs	r3, #0
 8002d74:	61bb      	str	r3, [r7, #24]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	695b      	ldr	r3, [r3, #20]
 8002d7c:	61bb      	str	r3, [r7, #24]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	699b      	ldr	r3, [r3, #24]
 8002d84:	61bb      	str	r3, [r7, #24]
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	e14c      	b.n	8003024 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002d98:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	617b      	str	r3, [r7, #20]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	695b      	ldr	r3, [r3, #20]
 8002da4:	617b      	str	r3, [r7, #20]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	699b      	ldr	r3, [r3, #24]
 8002dac:	617b      	str	r3, [r7, #20]
 8002dae:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002db0:	e138      	b.n	8003024 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002db6:	2b03      	cmp	r3, #3
 8002db8:	f200 80f1 	bhi.w	8002f9e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d123      	bne.n	8002e0c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dc6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002dc8:	68f8      	ldr	r0, [r7, #12]
 8002dca:	f001 f973 	bl	80040b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d001      	beq.n	8002dd8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e139      	b.n	800304c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	691a      	ldr	r2, [r3, #16]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de2:	b2d2      	uxtb	r2, r2
 8002de4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dea:	1c5a      	adds	r2, r3, #1
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002df4:	3b01      	subs	r3, #1
 8002df6:	b29a      	uxth	r2, r3
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	3b01      	subs	r3, #1
 8002e04:	b29a      	uxth	r2, r3
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002e0a:	e10b      	b.n	8003024 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	d14e      	bne.n	8002eb2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e16:	9300      	str	r3, [sp, #0]
 8002e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	4906      	ldr	r1, [pc, #24]	; (8002e38 <HAL_I2C_Master_Receive+0x22c>)
 8002e1e:	68f8      	ldr	r0, [r7, #12]
 8002e20:	f000 fff0 	bl	8003e04 <I2C_WaitOnFlagUntilTimeout>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d008      	beq.n	8002e3c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e10e      	b.n	800304c <HAL_I2C_Master_Receive+0x440>
 8002e2e:	bf00      	nop
 8002e30:	00100002 	.word	0x00100002
 8002e34:	ffff0000 	.word	0xffff0000
 8002e38:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e4a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	691a      	ldr	r2, [r3, #16]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e56:	b2d2      	uxtb	r2, r2
 8002e58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5e:	1c5a      	adds	r2, r3, #1
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e68:	3b01      	subs	r3, #1
 8002e6a:	b29a      	uxth	r2, r3
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e74:	b29b      	uxth	r3, r3
 8002e76:	3b01      	subs	r3, #1
 8002e78:	b29a      	uxth	r2, r3
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	691a      	ldr	r2, [r3, #16]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e88:	b2d2      	uxtb	r2, r2
 8002e8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e90:	1c5a      	adds	r2, r3, #1
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e9a:	3b01      	subs	r3, #1
 8002e9c:	b29a      	uxth	r2, r3
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	3b01      	subs	r3, #1
 8002eaa:	b29a      	uxth	r2, r3
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002eb0:	e0b8      	b.n	8003024 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb4:	9300      	str	r3, [sp, #0]
 8002eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eb8:	2200      	movs	r2, #0
 8002eba:	4966      	ldr	r1, [pc, #408]	; (8003054 <HAL_I2C_Master_Receive+0x448>)
 8002ebc:	68f8      	ldr	r0, [r7, #12]
 8002ebe:	f000 ffa1 	bl	8003e04 <I2C_WaitOnFlagUntilTimeout>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d001      	beq.n	8002ecc <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e0bf      	b.n	800304c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002eda:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	691a      	ldr	r2, [r3, #16]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee6:	b2d2      	uxtb	r2, r2
 8002ee8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eee:	1c5a      	adds	r2, r3, #1
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ef8:	3b01      	subs	r3, #1
 8002efa:	b29a      	uxth	r2, r3
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	3b01      	subs	r3, #1
 8002f08:	b29a      	uxth	r2, r3
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f10:	9300      	str	r3, [sp, #0]
 8002f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f14:	2200      	movs	r2, #0
 8002f16:	494f      	ldr	r1, [pc, #316]	; (8003054 <HAL_I2C_Master_Receive+0x448>)
 8002f18:	68f8      	ldr	r0, [r7, #12]
 8002f1a:	f000 ff73 	bl	8003e04 <I2C_WaitOnFlagUntilTimeout>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d001      	beq.n	8002f28 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e091      	b.n	800304c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f36:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	691a      	ldr	r2, [r3, #16]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f42:	b2d2      	uxtb	r2, r2
 8002f44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4a:	1c5a      	adds	r2, r3, #1
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f54:	3b01      	subs	r3, #1
 8002f56:	b29a      	uxth	r2, r3
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	3b01      	subs	r3, #1
 8002f64:	b29a      	uxth	r2, r3
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	691a      	ldr	r2, [r3, #16]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f74:	b2d2      	uxtb	r2, r2
 8002f76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7c:	1c5a      	adds	r2, r3, #1
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f86:	3b01      	subs	r3, #1
 8002f88:	b29a      	uxth	r2, r3
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	3b01      	subs	r3, #1
 8002f96:	b29a      	uxth	r2, r3
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002f9c:	e042      	b.n	8003024 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fa0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002fa2:	68f8      	ldr	r0, [r7, #12]
 8002fa4:	f001 f886 	bl	80040b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d001      	beq.n	8002fb2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e04c      	b.n	800304c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	691a      	ldr	r2, [r3, #16]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fbc:	b2d2      	uxtb	r2, r2
 8002fbe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc4:	1c5a      	adds	r2, r3, #1
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fce:	3b01      	subs	r3, #1
 8002fd0:	b29a      	uxth	r2, r3
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	3b01      	subs	r3, #1
 8002fde:	b29a      	uxth	r2, r3
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	695b      	ldr	r3, [r3, #20]
 8002fea:	f003 0304 	and.w	r3, r3, #4
 8002fee:	2b04      	cmp	r3, #4
 8002ff0:	d118      	bne.n	8003024 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	691a      	ldr	r2, [r3, #16]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffc:	b2d2      	uxtb	r2, r2
 8002ffe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003004:	1c5a      	adds	r2, r3, #1
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800300e:	3b01      	subs	r3, #1
 8003010:	b29a      	uxth	r2, r3
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800301a:	b29b      	uxth	r3, r3
 800301c:	3b01      	subs	r3, #1
 800301e:	b29a      	uxth	r2, r3
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003028:	2b00      	cmp	r3, #0
 800302a:	f47f aec2 	bne.w	8002db2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2220      	movs	r2, #32
 8003032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2200      	movs	r2, #0
 800303a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2200      	movs	r2, #0
 8003042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003046:	2300      	movs	r3, #0
 8003048:	e000      	b.n	800304c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800304a:	2302      	movs	r3, #2
  }
}
 800304c:	4618      	mov	r0, r3
 800304e:	3728      	adds	r7, #40	; 0x28
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}
 8003054:	00010004 	.word	0x00010004

08003058 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b088      	sub	sp, #32
 800305c:	af02      	add	r7, sp, #8
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	4608      	mov	r0, r1
 8003062:	4611      	mov	r1, r2
 8003064:	461a      	mov	r2, r3
 8003066:	4603      	mov	r3, r0
 8003068:	817b      	strh	r3, [r7, #10]
 800306a:	460b      	mov	r3, r1
 800306c:	813b      	strh	r3, [r7, #8]
 800306e:	4613      	mov	r3, r2
 8003070:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003072:	f7fd ffcf 	bl	8001014 <HAL_GetTick>
 8003076:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800307e:	b2db      	uxtb	r3, r3
 8003080:	2b20      	cmp	r3, #32
 8003082:	f040 80d9 	bne.w	8003238 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	9300      	str	r3, [sp, #0]
 800308a:	2319      	movs	r3, #25
 800308c:	2201      	movs	r2, #1
 800308e:	496d      	ldr	r1, [pc, #436]	; (8003244 <HAL_I2C_Mem_Write+0x1ec>)
 8003090:	68f8      	ldr	r0, [r7, #12]
 8003092:	f000 feb7 	bl	8003e04 <I2C_WaitOnFlagUntilTimeout>
 8003096:	4603      	mov	r3, r0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d001      	beq.n	80030a0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800309c:	2302      	movs	r3, #2
 800309e:	e0cc      	b.n	800323a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d101      	bne.n	80030ae <HAL_I2C_Mem_Write+0x56>
 80030aa:	2302      	movs	r3, #2
 80030ac:	e0c5      	b.n	800323a <HAL_I2C_Mem_Write+0x1e2>
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2201      	movs	r2, #1
 80030b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0301 	and.w	r3, r3, #1
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d007      	beq.n	80030d4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f042 0201 	orr.w	r2, r2, #1
 80030d2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030e2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2221      	movs	r2, #33	; 0x21
 80030e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2240      	movs	r2, #64	; 0x40
 80030f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2200      	movs	r2, #0
 80030f8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	6a3a      	ldr	r2, [r7, #32]
 80030fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003104:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800310a:	b29a      	uxth	r2, r3
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	4a4d      	ldr	r2, [pc, #308]	; (8003248 <HAL_I2C_Mem_Write+0x1f0>)
 8003114:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003116:	88f8      	ldrh	r0, [r7, #6]
 8003118:	893a      	ldrh	r2, [r7, #8]
 800311a:	8979      	ldrh	r1, [r7, #10]
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	9301      	str	r3, [sp, #4]
 8003120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003122:	9300      	str	r3, [sp, #0]
 8003124:	4603      	mov	r3, r0
 8003126:	68f8      	ldr	r0, [r7, #12]
 8003128:	f000 fd12 	bl	8003b50 <I2C_RequestMemoryWrite>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d052      	beq.n	80031d8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e081      	b.n	800323a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003136:	697a      	ldr	r2, [r7, #20]
 8003138:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800313a:	68f8      	ldr	r0, [r7, #12]
 800313c:	f000 ff38 	bl	8003fb0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d00d      	beq.n	8003162 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314a:	2b04      	cmp	r3, #4
 800314c:	d107      	bne.n	800315e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800315c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e06b      	b.n	800323a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003166:	781a      	ldrb	r2, [r3, #0]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003172:	1c5a      	adds	r2, r3, #1
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800317c:	3b01      	subs	r3, #1
 800317e:	b29a      	uxth	r2, r3
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003188:	b29b      	uxth	r3, r3
 800318a:	3b01      	subs	r3, #1
 800318c:	b29a      	uxth	r2, r3
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	695b      	ldr	r3, [r3, #20]
 8003198:	f003 0304 	and.w	r3, r3, #4
 800319c:	2b04      	cmp	r3, #4
 800319e:	d11b      	bne.n	80031d8 <HAL_I2C_Mem_Write+0x180>
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d017      	beq.n	80031d8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ac:	781a      	ldrb	r2, [r3, #0]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b8:	1c5a      	adds	r2, r3, #1
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031c2:	3b01      	subs	r3, #1
 80031c4:	b29a      	uxth	r2, r3
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	3b01      	subs	r3, #1
 80031d2:	b29a      	uxth	r2, r3
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d1aa      	bne.n	8003136 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031e0:	697a      	ldr	r2, [r7, #20]
 80031e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80031e4:	68f8      	ldr	r0, [r7, #12]
 80031e6:	f000 ff24 	bl	8004032 <I2C_WaitOnBTFFlagUntilTimeout>
 80031ea:	4603      	mov	r3, r0
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d00d      	beq.n	800320c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f4:	2b04      	cmp	r3, #4
 80031f6:	d107      	bne.n	8003208 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003206:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e016      	b.n	800323a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800321a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2220      	movs	r2, #32
 8003220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2200      	movs	r2, #0
 8003228:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2200      	movs	r2, #0
 8003230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003234:	2300      	movs	r3, #0
 8003236:	e000      	b.n	800323a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003238:	2302      	movs	r3, #2
  }
}
 800323a:	4618      	mov	r0, r3
 800323c:	3718      	adds	r7, #24
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	00100002 	.word	0x00100002
 8003248:	ffff0000 	.word	0xffff0000

0800324c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b08c      	sub	sp, #48	; 0x30
 8003250:	af02      	add	r7, sp, #8
 8003252:	60f8      	str	r0, [r7, #12]
 8003254:	4608      	mov	r0, r1
 8003256:	4611      	mov	r1, r2
 8003258:	461a      	mov	r2, r3
 800325a:	4603      	mov	r3, r0
 800325c:	817b      	strh	r3, [r7, #10]
 800325e:	460b      	mov	r3, r1
 8003260:	813b      	strh	r3, [r7, #8]
 8003262:	4613      	mov	r3, r2
 8003264:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003266:	f7fd fed5 	bl	8001014 <HAL_GetTick>
 800326a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003272:	b2db      	uxtb	r3, r3
 8003274:	2b20      	cmp	r3, #32
 8003276:	f040 8208 	bne.w	800368a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800327a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327c:	9300      	str	r3, [sp, #0]
 800327e:	2319      	movs	r3, #25
 8003280:	2201      	movs	r2, #1
 8003282:	497b      	ldr	r1, [pc, #492]	; (8003470 <HAL_I2C_Mem_Read+0x224>)
 8003284:	68f8      	ldr	r0, [r7, #12]
 8003286:	f000 fdbd 	bl	8003e04 <I2C_WaitOnFlagUntilTimeout>
 800328a:	4603      	mov	r3, r0
 800328c:	2b00      	cmp	r3, #0
 800328e:	d001      	beq.n	8003294 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003290:	2302      	movs	r3, #2
 8003292:	e1fb      	b.n	800368c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800329a:	2b01      	cmp	r3, #1
 800329c:	d101      	bne.n	80032a2 <HAL_I2C_Mem_Read+0x56>
 800329e:	2302      	movs	r3, #2
 80032a0:	e1f4      	b.n	800368c <HAL_I2C_Mem_Read+0x440>
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2201      	movs	r2, #1
 80032a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0301 	and.w	r3, r3, #1
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d007      	beq.n	80032c8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f042 0201 	orr.w	r2, r2, #1
 80032c6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032d6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2222      	movs	r2, #34	; 0x22
 80032dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2240      	movs	r2, #64	; 0x40
 80032e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2200      	movs	r2, #0
 80032ec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80032f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032fe:	b29a      	uxth	r2, r3
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	4a5b      	ldr	r2, [pc, #364]	; (8003474 <HAL_I2C_Mem_Read+0x228>)
 8003308:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800330a:	88f8      	ldrh	r0, [r7, #6]
 800330c:	893a      	ldrh	r2, [r7, #8]
 800330e:	8979      	ldrh	r1, [r7, #10]
 8003310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003312:	9301      	str	r3, [sp, #4]
 8003314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003316:	9300      	str	r3, [sp, #0]
 8003318:	4603      	mov	r3, r0
 800331a:	68f8      	ldr	r0, [r7, #12]
 800331c:	f000 fca2 	bl	8003c64 <I2C_RequestMemoryRead>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d001      	beq.n	800332a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e1b0      	b.n	800368c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800332e:	2b00      	cmp	r3, #0
 8003330:	d113      	bne.n	800335a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003332:	2300      	movs	r3, #0
 8003334:	623b      	str	r3, [r7, #32]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	695b      	ldr	r3, [r3, #20]
 800333c:	623b      	str	r3, [r7, #32]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	699b      	ldr	r3, [r3, #24]
 8003344:	623b      	str	r3, [r7, #32]
 8003346:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003356:	601a      	str	r2, [r3, #0]
 8003358:	e184      	b.n	8003664 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800335e:	2b01      	cmp	r3, #1
 8003360:	d11b      	bne.n	800339a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003370:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003372:	2300      	movs	r3, #0
 8003374:	61fb      	str	r3, [r7, #28]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	695b      	ldr	r3, [r3, #20]
 800337c:	61fb      	str	r3, [r7, #28]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	699b      	ldr	r3, [r3, #24]
 8003384:	61fb      	str	r3, [r7, #28]
 8003386:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003396:	601a      	str	r2, [r3, #0]
 8003398:	e164      	b.n	8003664 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800339e:	2b02      	cmp	r3, #2
 80033a0:	d11b      	bne.n	80033da <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033b0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033c0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033c2:	2300      	movs	r3, #0
 80033c4:	61bb      	str	r3, [r7, #24]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	695b      	ldr	r3, [r3, #20]
 80033cc:	61bb      	str	r3, [r7, #24]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	699b      	ldr	r3, [r3, #24]
 80033d4:	61bb      	str	r3, [r7, #24]
 80033d6:	69bb      	ldr	r3, [r7, #24]
 80033d8:	e144      	b.n	8003664 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033da:	2300      	movs	r3, #0
 80033dc:	617b      	str	r3, [r7, #20]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	695b      	ldr	r3, [r3, #20]
 80033e4:	617b      	str	r3, [r7, #20]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	699b      	ldr	r3, [r3, #24]
 80033ec:	617b      	str	r3, [r7, #20]
 80033ee:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80033f0:	e138      	b.n	8003664 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033f6:	2b03      	cmp	r3, #3
 80033f8:	f200 80f1 	bhi.w	80035de <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003400:	2b01      	cmp	r3, #1
 8003402:	d123      	bne.n	800344c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003404:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003406:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003408:	68f8      	ldr	r0, [r7, #12]
 800340a:	f000 fe53 	bl	80040b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800340e:	4603      	mov	r3, r0
 8003410:	2b00      	cmp	r3, #0
 8003412:	d001      	beq.n	8003418 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e139      	b.n	800368c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	691a      	ldr	r2, [r3, #16]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003422:	b2d2      	uxtb	r2, r2
 8003424:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342a:	1c5a      	adds	r2, r3, #1
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003434:	3b01      	subs	r3, #1
 8003436:	b29a      	uxth	r2, r3
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003440:	b29b      	uxth	r3, r3
 8003442:	3b01      	subs	r3, #1
 8003444:	b29a      	uxth	r2, r3
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	855a      	strh	r2, [r3, #42]	; 0x2a
 800344a:	e10b      	b.n	8003664 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003450:	2b02      	cmp	r3, #2
 8003452:	d14e      	bne.n	80034f2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003456:	9300      	str	r3, [sp, #0]
 8003458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800345a:	2200      	movs	r2, #0
 800345c:	4906      	ldr	r1, [pc, #24]	; (8003478 <HAL_I2C_Mem_Read+0x22c>)
 800345e:	68f8      	ldr	r0, [r7, #12]
 8003460:	f000 fcd0 	bl	8003e04 <I2C_WaitOnFlagUntilTimeout>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d008      	beq.n	800347c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e10e      	b.n	800368c <HAL_I2C_Mem_Read+0x440>
 800346e:	bf00      	nop
 8003470:	00100002 	.word	0x00100002
 8003474:	ffff0000 	.word	0xffff0000
 8003478:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800348a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	691a      	ldr	r2, [r3, #16]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003496:	b2d2      	uxtb	r2, r2
 8003498:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349e:	1c5a      	adds	r2, r3, #1
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034a8:	3b01      	subs	r3, #1
 80034aa:	b29a      	uxth	r2, r3
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	3b01      	subs	r3, #1
 80034b8:	b29a      	uxth	r2, r3
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	691a      	ldr	r2, [r3, #16]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c8:	b2d2      	uxtb	r2, r2
 80034ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d0:	1c5a      	adds	r2, r3, #1
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034da:	3b01      	subs	r3, #1
 80034dc:	b29a      	uxth	r2, r3
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034e6:	b29b      	uxth	r3, r3
 80034e8:	3b01      	subs	r3, #1
 80034ea:	b29a      	uxth	r2, r3
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	855a      	strh	r2, [r3, #42]	; 0x2a
 80034f0:	e0b8      	b.n	8003664 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80034f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f4:	9300      	str	r3, [sp, #0]
 80034f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034f8:	2200      	movs	r2, #0
 80034fa:	4966      	ldr	r1, [pc, #408]	; (8003694 <HAL_I2C_Mem_Read+0x448>)
 80034fc:	68f8      	ldr	r0, [r7, #12]
 80034fe:	f000 fc81 	bl	8003e04 <I2C_WaitOnFlagUntilTimeout>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d001      	beq.n	800350c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e0bf      	b.n	800368c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800351a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	691a      	ldr	r2, [r3, #16]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003526:	b2d2      	uxtb	r2, r2
 8003528:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352e:	1c5a      	adds	r2, r3, #1
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003538:	3b01      	subs	r3, #1
 800353a:	b29a      	uxth	r2, r3
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003544:	b29b      	uxth	r3, r3
 8003546:	3b01      	subs	r3, #1
 8003548:	b29a      	uxth	r2, r3
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800354e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003550:	9300      	str	r3, [sp, #0]
 8003552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003554:	2200      	movs	r2, #0
 8003556:	494f      	ldr	r1, [pc, #316]	; (8003694 <HAL_I2C_Mem_Read+0x448>)
 8003558:	68f8      	ldr	r0, [r7, #12]
 800355a:	f000 fc53 	bl	8003e04 <I2C_WaitOnFlagUntilTimeout>
 800355e:	4603      	mov	r3, r0
 8003560:	2b00      	cmp	r3, #0
 8003562:	d001      	beq.n	8003568 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	e091      	b.n	800368c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003576:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	691a      	ldr	r2, [r3, #16]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003582:	b2d2      	uxtb	r2, r2
 8003584:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358a:	1c5a      	adds	r2, r3, #1
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003594:	3b01      	subs	r3, #1
 8003596:	b29a      	uxth	r2, r3
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	3b01      	subs	r3, #1
 80035a4:	b29a      	uxth	r2, r3
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	691a      	ldr	r2, [r3, #16]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b4:	b2d2      	uxtb	r2, r2
 80035b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035bc:	1c5a      	adds	r2, r3, #1
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035c6:	3b01      	subs	r3, #1
 80035c8:	b29a      	uxth	r2, r3
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	3b01      	subs	r3, #1
 80035d6:	b29a      	uxth	r2, r3
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	855a      	strh	r2, [r3, #42]	; 0x2a
 80035dc:	e042      	b.n	8003664 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035e0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80035e2:	68f8      	ldr	r0, [r7, #12]
 80035e4:	f000 fd66 	bl	80040b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d001      	beq.n	80035f2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e04c      	b.n	800368c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	691a      	ldr	r2, [r3, #16]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fc:	b2d2      	uxtb	r2, r2
 80035fe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003604:	1c5a      	adds	r2, r3, #1
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800360e:	3b01      	subs	r3, #1
 8003610:	b29a      	uxth	r2, r3
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800361a:	b29b      	uxth	r3, r3
 800361c:	3b01      	subs	r3, #1
 800361e:	b29a      	uxth	r2, r3
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	695b      	ldr	r3, [r3, #20]
 800362a:	f003 0304 	and.w	r3, r3, #4
 800362e:	2b04      	cmp	r3, #4
 8003630:	d118      	bne.n	8003664 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	691a      	ldr	r2, [r3, #16]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363c:	b2d2      	uxtb	r2, r2
 800363e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003644:	1c5a      	adds	r2, r3, #1
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800364e:	3b01      	subs	r3, #1
 8003650:	b29a      	uxth	r2, r3
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800365a:	b29b      	uxth	r3, r3
 800365c:	3b01      	subs	r3, #1
 800365e:	b29a      	uxth	r2, r3
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003668:	2b00      	cmp	r3, #0
 800366a:	f47f aec2 	bne.w	80033f2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2220      	movs	r2, #32
 8003672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2200      	movs	r2, #0
 800367a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2200      	movs	r2, #0
 8003682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003686:	2300      	movs	r3, #0
 8003688:	e000      	b.n	800368c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800368a:	2302      	movs	r3, #2
  }
}
 800368c:	4618      	mov	r0, r3
 800368e:	3728      	adds	r7, #40	; 0x28
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}
 8003694:	00010004 	.word	0x00010004

08003698 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b08a      	sub	sp, #40	; 0x28
 800369c:	af02      	add	r7, sp, #8
 800369e:	60f8      	str	r0, [r7, #12]
 80036a0:	607a      	str	r2, [r7, #4]
 80036a2:	603b      	str	r3, [r7, #0]
 80036a4:	460b      	mov	r3, r1
 80036a6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80036a8:	f7fd fcb4 	bl	8001014 <HAL_GetTick>
 80036ac:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80036ae:	2301      	movs	r3, #1
 80036b0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	2b20      	cmp	r3, #32
 80036bc:	f040 8105 	bne.w	80038ca <HAL_I2C_IsDeviceReady+0x232>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	9300      	str	r3, [sp, #0]
 80036c4:	2319      	movs	r3, #25
 80036c6:	2201      	movs	r2, #1
 80036c8:	4982      	ldr	r1, [pc, #520]	; (80038d4 <HAL_I2C_IsDeviceReady+0x23c>)
 80036ca:	68f8      	ldr	r0, [r7, #12]
 80036cc:	f000 fb9a 	bl	8003e04 <I2C_WaitOnFlagUntilTimeout>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d001      	beq.n	80036da <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80036d6:	2302      	movs	r3, #2
 80036d8:	e0f8      	b.n	80038cc <HAL_I2C_IsDeviceReady+0x234>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d101      	bne.n	80036e8 <HAL_I2C_IsDeviceReady+0x50>
 80036e4:	2302      	movs	r3, #2
 80036e6:	e0f1      	b.n	80038cc <HAL_I2C_IsDeviceReady+0x234>
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0301 	and.w	r3, r3, #1
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d007      	beq.n	800370e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f042 0201 	orr.w	r2, r2, #1
 800370c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800371c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2224      	movs	r2, #36	; 0x24
 8003722:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2200      	movs	r2, #0
 800372a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	4a6a      	ldr	r2, [pc, #424]	; (80038d8 <HAL_I2C_IsDeviceReady+0x240>)
 8003730:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003740:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	9300      	str	r3, [sp, #0]
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	2200      	movs	r2, #0
 800374a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800374e:	68f8      	ldr	r0, [r7, #12]
 8003750:	f000 fb58 	bl	8003e04 <I2C_WaitOnFlagUntilTimeout>
 8003754:	4603      	mov	r3, r0
 8003756:	2b00      	cmp	r3, #0
 8003758:	d001      	beq.n	800375e <HAL_I2C_IsDeviceReady+0xc6>
      {
        return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e0b6      	b.n	80038cc <HAL_I2C_IsDeviceReady+0x234>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800375e:	897b      	ldrh	r3, [r7, #10]
 8003760:	b2db      	uxtb	r3, r3
 8003762:	461a      	mov	r2, r3
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800376c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800376e:	f7fd fc51 	bl	8001014 <HAL_GetTick>
 8003772:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	695b      	ldr	r3, [r3, #20]
 800377a:	f003 0302 	and.w	r3, r3, #2
 800377e:	2b02      	cmp	r3, #2
 8003780:	bf0c      	ite	eq
 8003782:	2301      	moveq	r3, #1
 8003784:	2300      	movne	r3, #0
 8003786:	b2db      	uxtb	r3, r3
 8003788:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	695b      	ldr	r3, [r3, #20]
 8003790:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003794:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003798:	bf0c      	ite	eq
 800379a:	2301      	moveq	r3, #1
 800379c:	2300      	movne	r3, #0
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80037a2:	e025      	b.n	80037f0 <HAL_I2C_IsDeviceReady+0x158>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80037a4:	f7fd fc36 	bl	8001014 <HAL_GetTick>
 80037a8:	4602      	mov	r2, r0
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	683a      	ldr	r2, [r7, #0]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d302      	bcc.n	80037ba <HAL_I2C_IsDeviceReady+0x122>
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d103      	bne.n	80037c2 <HAL_I2C_IsDeviceReady+0x12a>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	22a0      	movs	r2, #160	; 0xa0
 80037be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	695b      	ldr	r3, [r3, #20]
 80037c8:	f003 0302 	and.w	r3, r3, #2
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	bf0c      	ite	eq
 80037d0:	2301      	moveq	r3, #1
 80037d2:	2300      	movne	r3, #0
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	695b      	ldr	r3, [r3, #20]
 80037de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037e6:	bf0c      	ite	eq
 80037e8:	2301      	moveq	r3, #1
 80037ea:	2300      	movne	r3, #0
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	2ba0      	cmp	r3, #160	; 0xa0
 80037fa:	d005      	beq.n	8003808 <HAL_I2C_IsDeviceReady+0x170>
 80037fc:	7dfb      	ldrb	r3, [r7, #23]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d102      	bne.n	8003808 <HAL_I2C_IsDeviceReady+0x170>
 8003802:	7dbb      	ldrb	r3, [r7, #22]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d0cd      	beq.n	80037a4 <HAL_I2C_IsDeviceReady+0x10c>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2220      	movs	r2, #32
 800380c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	695b      	ldr	r3, [r3, #20]
 8003816:	f003 0302 	and.w	r3, r3, #2
 800381a:	2b02      	cmp	r3, #2
 800381c:	d129      	bne.n	8003872 <HAL_I2C_IsDeviceReady+0x1da>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800382c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800382e:	2300      	movs	r3, #0
 8003830:	613b      	str	r3, [r7, #16]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	695b      	ldr	r3, [r3, #20]
 8003838:	613b      	str	r3, [r7, #16]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	699b      	ldr	r3, [r3, #24]
 8003840:	613b      	str	r3, [r7, #16]
 8003842:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	9300      	str	r3, [sp, #0]
 8003848:	2319      	movs	r3, #25
 800384a:	2201      	movs	r2, #1
 800384c:	4921      	ldr	r1, [pc, #132]	; (80038d4 <HAL_I2C_IsDeviceReady+0x23c>)
 800384e:	68f8      	ldr	r0, [r7, #12]
 8003850:	f000 fad8 	bl	8003e04 <I2C_WaitOnFlagUntilTimeout>
 8003854:	4603      	mov	r3, r0
 8003856:	2b00      	cmp	r3, #0
 8003858:	d001      	beq.n	800385e <HAL_I2C_IsDeviceReady+0x1c6>
        {
          return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e036      	b.n	80038cc <HAL_I2C_IsDeviceReady+0x234>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2220      	movs	r2, #32
 8003862:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2200      	movs	r2, #0
 800386a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800386e:	2300      	movs	r3, #0
 8003870:	e02c      	b.n	80038cc <HAL_I2C_IsDeviceReady+0x234>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003880:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800388a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	9300      	str	r3, [sp, #0]
 8003890:	2319      	movs	r3, #25
 8003892:	2201      	movs	r2, #1
 8003894:	490f      	ldr	r1, [pc, #60]	; (80038d4 <HAL_I2C_IsDeviceReady+0x23c>)
 8003896:	68f8      	ldr	r0, [r7, #12]
 8003898:	f000 fab4 	bl	8003e04 <I2C_WaitOnFlagUntilTimeout>
 800389c:	4603      	mov	r3, r0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d001      	beq.n	80038a6 <HAL_I2C_IsDeviceReady+0x20e>
        {
          return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e012      	b.n	80038cc <HAL_I2C_IsDeviceReady+0x234>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80038a6:	69bb      	ldr	r3, [r7, #24]
 80038a8:	3301      	adds	r3, #1
 80038aa:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80038ac:	69ba      	ldr	r2, [r7, #24]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	429a      	cmp	r2, r3
 80038b2:	f4ff af3e 	bcc.w	8003732 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2220      	movs	r2, #32
 80038ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2200      	movs	r2, #0
 80038c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e000      	b.n	80038cc <HAL_I2C_IsDeviceReady+0x234>
  }
  else
  {
    return HAL_BUSY;
 80038ca:	2302      	movs	r3, #2
  }
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3720      	adds	r7, #32
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	00100002 	.word	0x00100002
 80038d8:	ffff0000 	.word	0xffff0000

080038dc <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80038dc:	b480      	push	{r7}
 80038de:	b083      	sub	sp, #12
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038ea:	b2db      	uxtb	r3, r3
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	370c      	adds	r7, #12
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr

080038f8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b088      	sub	sp, #32
 80038fc:	af02      	add	r7, sp, #8
 80038fe:	60f8      	str	r0, [r7, #12]
 8003900:	607a      	str	r2, [r7, #4]
 8003902:	603b      	str	r3, [r7, #0]
 8003904:	460b      	mov	r3, r1
 8003906:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800390c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	2b08      	cmp	r3, #8
 8003912:	d006      	beq.n	8003922 <I2C_MasterRequestWrite+0x2a>
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	2b01      	cmp	r3, #1
 8003918:	d003      	beq.n	8003922 <I2C_MasterRequestWrite+0x2a>
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003920:	d108      	bne.n	8003934 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003930:	601a      	str	r2, [r3, #0]
 8003932:	e00b      	b.n	800394c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003938:	2b12      	cmp	r3, #18
 800393a:	d107      	bne.n	800394c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800394a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	9300      	str	r3, [sp, #0]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2200      	movs	r2, #0
 8003954:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003958:	68f8      	ldr	r0, [r7, #12]
 800395a:	f000 fa53 	bl	8003e04 <I2C_WaitOnFlagUntilTimeout>
 800395e:	4603      	mov	r3, r0
 8003960:	2b00      	cmp	r3, #0
 8003962:	d001      	beq.n	8003968 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e035      	b.n	80039d4 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	691b      	ldr	r3, [r3, #16]
 800396c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003970:	d108      	bne.n	8003984 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003972:	897b      	ldrh	r3, [r7, #10]
 8003974:	b2db      	uxtb	r3, r3
 8003976:	461a      	mov	r2, r3
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003980:	611a      	str	r2, [r3, #16]
 8003982:	e01b      	b.n	80039bc <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003984:	897b      	ldrh	r3, [r7, #10]
 8003986:	11db      	asrs	r3, r3, #7
 8003988:	b2db      	uxtb	r3, r3
 800398a:	f003 0306 	and.w	r3, r3, #6
 800398e:	b2db      	uxtb	r3, r3
 8003990:	f063 030f 	orn	r3, r3, #15
 8003994:	b2da      	uxtb	r2, r3
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	490e      	ldr	r1, [pc, #56]	; (80039dc <I2C_MasterRequestWrite+0xe4>)
 80039a2:	68f8      	ldr	r0, [r7, #12]
 80039a4:	f000 fa85 	bl	8003eb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d001      	beq.n	80039b2 <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e010      	b.n	80039d4 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80039b2:	897b      	ldrh	r3, [r7, #10]
 80039b4:	b2da      	uxtb	r2, r3
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	4907      	ldr	r1, [pc, #28]	; (80039e0 <I2C_MasterRequestWrite+0xe8>)
 80039c2:	68f8      	ldr	r0, [r7, #12]
 80039c4:	f000 fa75 	bl	8003eb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d001      	beq.n	80039d2 <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e000      	b.n	80039d4 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 80039d2:	2300      	movs	r3, #0
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3718      	adds	r7, #24
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}
 80039dc:	00010008 	.word	0x00010008
 80039e0:	00010002 	.word	0x00010002

080039e4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b088      	sub	sp, #32
 80039e8:	af02      	add	r7, sp, #8
 80039ea:	60f8      	str	r0, [r7, #12]
 80039ec:	607a      	str	r2, [r7, #4]
 80039ee:	603b      	str	r3, [r7, #0]
 80039f0:	460b      	mov	r3, r1
 80039f2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003a08:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	2b08      	cmp	r3, #8
 8003a0e:	d006      	beq.n	8003a1e <I2C_MasterRequestRead+0x3a>
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d003      	beq.n	8003a1e <I2C_MasterRequestRead+0x3a>
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003a1c:	d108      	bne.n	8003a30 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a2c:	601a      	str	r2, [r3, #0]
 8003a2e:	e00b      	b.n	8003a48 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a34:	2b11      	cmp	r3, #17
 8003a36:	d107      	bne.n	8003a48 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a46:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	9300      	str	r3, [sp, #0]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003a54:	68f8      	ldr	r0, [r7, #12]
 8003a56:	f000 f9d5 	bl	8003e04 <I2C_WaitOnFlagUntilTimeout>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d001      	beq.n	8003a64 <I2C_MasterRequestRead+0x80>
  {
    return HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e06d      	b.n	8003b40 <I2C_MasterRequestRead+0x15c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	691b      	ldr	r3, [r3, #16]
 8003a68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a6c:	d108      	bne.n	8003a80 <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003a6e:	897b      	ldrh	r3, [r7, #10]
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	f043 0301 	orr.w	r3, r3, #1
 8003a76:	b2da      	uxtb	r2, r3
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	611a      	str	r2, [r3, #16]
 8003a7e:	e053      	b.n	8003b28 <I2C_MasterRequestRead+0x144>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003a80:	897b      	ldrh	r3, [r7, #10]
 8003a82:	11db      	asrs	r3, r3, #7
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	f003 0306 	and.w	r3, r3, #6
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	f063 030f 	orn	r3, r3, #15
 8003a90:	b2da      	uxtb	r2, r3
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	492a      	ldr	r1, [pc, #168]	; (8003b48 <I2C_MasterRequestRead+0x164>)
 8003a9e:	68f8      	ldr	r0, [r7, #12]
 8003aa0:	f000 fa07 	bl	8003eb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d001      	beq.n	8003aae <I2C_MasterRequestRead+0xca>
    {
      return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e048      	b.n	8003b40 <I2C_MasterRequestRead+0x15c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003aae:	897b      	ldrh	r3, [r7, #10]
 8003ab0:	b2da      	uxtb	r2, r3
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	4923      	ldr	r1, [pc, #140]	; (8003b4c <I2C_MasterRequestRead+0x168>)
 8003abe:	68f8      	ldr	r0, [r7, #12]
 8003ac0:	f000 f9f7 	bl	8003eb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d001      	beq.n	8003ace <I2C_MasterRequestRead+0xea>
    {
      return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e038      	b.n	8003b40 <I2C_MasterRequestRead+0x15c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ace:	2300      	movs	r3, #0
 8003ad0:	613b      	str	r3, [r7, #16]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	695b      	ldr	r3, [r3, #20]
 8003ad8:	613b      	str	r3, [r7, #16]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	699b      	ldr	r3, [r3, #24]
 8003ae0:	613b      	str	r3, [r7, #16]
 8003ae2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003af2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	9300      	str	r3, [sp, #0]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b00:	68f8      	ldr	r0, [r7, #12]
 8003b02:	f000 f97f 	bl	8003e04 <I2C_WaitOnFlagUntilTimeout>
 8003b06:	4603      	mov	r3, r0
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d001      	beq.n	8003b10 <I2C_MasterRequestRead+0x12c>
    {
      return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e017      	b.n	8003b40 <I2C_MasterRequestRead+0x15c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003b10:	897b      	ldrh	r3, [r7, #10]
 8003b12:	11db      	asrs	r3, r3, #7
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	f003 0306 	and.w	r3, r3, #6
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	f063 030e 	orn	r3, r3, #14
 8003b20:	b2da      	uxtb	r2, r3
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	4907      	ldr	r1, [pc, #28]	; (8003b4c <I2C_MasterRequestRead+0x168>)
 8003b2e:	68f8      	ldr	r0, [r7, #12]
 8003b30:	f000 f9bf 	bl	8003eb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d001      	beq.n	8003b3e <I2C_MasterRequestRead+0x15a>
  {
    return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e000      	b.n	8003b40 <I2C_MasterRequestRead+0x15c>
  }

  return HAL_OK;
 8003b3e:	2300      	movs	r3, #0
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3718      	adds	r7, #24
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	00010008 	.word	0x00010008
 8003b4c:	00010002 	.word	0x00010002

08003b50 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b088      	sub	sp, #32
 8003b54:	af02      	add	r7, sp, #8
 8003b56:	60f8      	str	r0, [r7, #12]
 8003b58:	4608      	mov	r0, r1
 8003b5a:	4611      	mov	r1, r2
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	4603      	mov	r3, r0
 8003b60:	817b      	strh	r3, [r7, #10]
 8003b62:	460b      	mov	r3, r1
 8003b64:	813b      	strh	r3, [r7, #8]
 8003b66:	4613      	mov	r3, r2
 8003b68:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b78:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7c:	9300      	str	r3, [sp, #0]
 8003b7e:	6a3b      	ldr	r3, [r7, #32]
 8003b80:	2200      	movs	r2, #0
 8003b82:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b86:	68f8      	ldr	r0, [r7, #12]
 8003b88:	f000 f93c 	bl	8003e04 <I2C_WaitOnFlagUntilTimeout>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d001      	beq.n	8003b96 <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e05f      	b.n	8003c56 <I2C_RequestMemoryWrite+0x106>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003b96:	897b      	ldrh	r3, [r7, #10]
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003ba4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba8:	6a3a      	ldr	r2, [r7, #32]
 8003baa:	492d      	ldr	r1, [pc, #180]	; (8003c60 <I2C_RequestMemoryWrite+0x110>)
 8003bac:	68f8      	ldr	r0, [r7, #12]
 8003bae:	f000 f980 	bl	8003eb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d001      	beq.n	8003bbc <I2C_RequestMemoryWrite+0x6c>
  {
    return HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e04c      	b.n	8003c56 <I2C_RequestMemoryWrite+0x106>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	617b      	str	r3, [r7, #20]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	695b      	ldr	r3, [r3, #20]
 8003bc6:	617b      	str	r3, [r7, #20]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	699b      	ldr	r3, [r3, #24]
 8003bce:	617b      	str	r3, [r7, #20]
 8003bd0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bd4:	6a39      	ldr	r1, [r7, #32]
 8003bd6:	68f8      	ldr	r0, [r7, #12]
 8003bd8:	f000 f9ea 	bl	8003fb0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d00d      	beq.n	8003bfe <I2C_RequestMemoryWrite+0xae>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be6:	2b04      	cmp	r3, #4
 8003be8:	d107      	bne.n	8003bfa <I2C_RequestMemoryWrite+0xaa>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bf8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e02b      	b.n	8003c56 <I2C_RequestMemoryWrite+0x106>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003bfe:	88fb      	ldrh	r3, [r7, #6]
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d105      	bne.n	8003c10 <I2C_RequestMemoryWrite+0xc0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c04:	893b      	ldrh	r3, [r7, #8]
 8003c06:	b2da      	uxtb	r2, r3
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	611a      	str	r2, [r3, #16]
 8003c0e:	e021      	b.n	8003c54 <I2C_RequestMemoryWrite+0x104>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003c10:	893b      	ldrh	r3, [r7, #8]
 8003c12:	0a1b      	lsrs	r3, r3, #8
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	b2da      	uxtb	r2, r3
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c20:	6a39      	ldr	r1, [r7, #32]
 8003c22:	68f8      	ldr	r0, [r7, #12]
 8003c24:	f000 f9c4 	bl	8003fb0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d00d      	beq.n	8003c4a <I2C_RequestMemoryWrite+0xfa>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c32:	2b04      	cmp	r3, #4
 8003c34:	d107      	bne.n	8003c46 <I2C_RequestMemoryWrite+0xf6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c44:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e005      	b.n	8003c56 <I2C_RequestMemoryWrite+0x106>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c4a:	893b      	ldrh	r3, [r7, #8]
 8003c4c:	b2da      	uxtb	r2, r3
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003c54:	2300      	movs	r3, #0
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3718      	adds	r7, #24
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	bf00      	nop
 8003c60:	00010002 	.word	0x00010002

08003c64 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b088      	sub	sp, #32
 8003c68:	af02      	add	r7, sp, #8
 8003c6a:	60f8      	str	r0, [r7, #12]
 8003c6c:	4608      	mov	r0, r1
 8003c6e:	4611      	mov	r1, r2
 8003c70:	461a      	mov	r2, r3
 8003c72:	4603      	mov	r3, r0
 8003c74:	817b      	strh	r3, [r7, #10]
 8003c76:	460b      	mov	r3, r1
 8003c78:	813b      	strh	r3, [r7, #8]
 8003c7a:	4613      	mov	r3, r2
 8003c7c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003c8c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c9c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca0:	9300      	str	r3, [sp, #0]
 8003ca2:	6a3b      	ldr	r3, [r7, #32]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003caa:	68f8      	ldr	r0, [r7, #12]
 8003cac:	f000 f8aa 	bl	8003e04 <I2C_WaitOnFlagUntilTimeout>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d001      	beq.n	8003cba <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e09e      	b.n	8003df8 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003cba:	897b      	ldrh	r3, [r7, #10]
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003cc8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ccc:	6a3a      	ldr	r2, [r7, #32]
 8003cce:	494c      	ldr	r1, [pc, #304]	; (8003e00 <I2C_RequestMemoryRead+0x19c>)
 8003cd0:	68f8      	ldr	r0, [r7, #12]
 8003cd2:	f000 f8ee 	bl	8003eb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d001      	beq.n	8003ce0 <I2C_RequestMemoryRead+0x7c>
  {
    return HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e08b      	b.n	8003df8 <I2C_RequestMemoryRead+0x194>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	617b      	str	r3, [r7, #20]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	695b      	ldr	r3, [r3, #20]
 8003cea:	617b      	str	r3, [r7, #20]
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	699b      	ldr	r3, [r3, #24]
 8003cf2:	617b      	str	r3, [r7, #20]
 8003cf4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cf8:	6a39      	ldr	r1, [r7, #32]
 8003cfa:	68f8      	ldr	r0, [r7, #12]
 8003cfc:	f000 f958 	bl	8003fb0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d00d      	beq.n	8003d22 <I2C_RequestMemoryRead+0xbe>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0a:	2b04      	cmp	r3, #4
 8003d0c:	d107      	bne.n	8003d1e <I2C_RequestMemoryRead+0xba>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d1c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e06a      	b.n	8003df8 <I2C_RequestMemoryRead+0x194>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d22:	88fb      	ldrh	r3, [r7, #6]
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d105      	bne.n	8003d34 <I2C_RequestMemoryRead+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d28:	893b      	ldrh	r3, [r7, #8]
 8003d2a:	b2da      	uxtb	r2, r3
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	611a      	str	r2, [r3, #16]
 8003d32:	e021      	b.n	8003d78 <I2C_RequestMemoryRead+0x114>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003d34:	893b      	ldrh	r3, [r7, #8]
 8003d36:	0a1b      	lsrs	r3, r3, #8
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	b2da      	uxtb	r2, r3
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d44:	6a39      	ldr	r1, [r7, #32]
 8003d46:	68f8      	ldr	r0, [r7, #12]
 8003d48:	f000 f932 	bl	8003fb0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d00d      	beq.n	8003d6e <I2C_RequestMemoryRead+0x10a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d56:	2b04      	cmp	r3, #4
 8003d58:	d107      	bne.n	8003d6a <I2C_RequestMemoryRead+0x106>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d68:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e044      	b.n	8003df8 <I2C_RequestMemoryRead+0x194>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d6e:	893b      	ldrh	r3, [r7, #8]
 8003d70:	b2da      	uxtb	r2, r3
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d7a:	6a39      	ldr	r1, [r7, #32]
 8003d7c:	68f8      	ldr	r0, [r7, #12]
 8003d7e:	f000 f917 	bl	8003fb0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d82:	4603      	mov	r3, r0
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d00d      	beq.n	8003da4 <I2C_RequestMemoryRead+0x140>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8c:	2b04      	cmp	r3, #4
 8003d8e:	d107      	bne.n	8003da0 <I2C_RequestMemoryRead+0x13c>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d9e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	e029      	b.n	8003df8 <I2C_RequestMemoryRead+0x194>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003db2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db6:	9300      	str	r3, [sp, #0]
 8003db8:	6a3b      	ldr	r3, [r7, #32]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003dc0:	68f8      	ldr	r0, [r7, #12]
 8003dc2:	f000 f81f 	bl	8003e04 <I2C_WaitOnFlagUntilTimeout>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d001      	beq.n	8003dd0 <I2C_RequestMemoryRead+0x16c>
  {
    return HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e013      	b.n	8003df8 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003dd0:	897b      	ldrh	r3, [r7, #10]
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	f043 0301 	orr.w	r3, r3, #1
 8003dd8:	b2da      	uxtb	r2, r3
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de2:	6a3a      	ldr	r2, [r7, #32]
 8003de4:	4906      	ldr	r1, [pc, #24]	; (8003e00 <I2C_RequestMemoryRead+0x19c>)
 8003de6:	68f8      	ldr	r0, [r7, #12]
 8003de8:	f000 f863 	bl	8003eb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003dec:	4603      	mov	r3, r0
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d001      	beq.n	8003df6 <I2C_RequestMemoryRead+0x192>
  {
    return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e000      	b.n	8003df8 <I2C_RequestMemoryRead+0x194>
  }

  return HAL_OK;
 8003df6:	2300      	movs	r3, #0
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3718      	adds	r7, #24
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	00010002 	.word	0x00010002

08003e04 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b084      	sub	sp, #16
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	60f8      	str	r0, [r7, #12]
 8003e0c:	60b9      	str	r1, [r7, #8]
 8003e0e:	603b      	str	r3, [r7, #0]
 8003e10:	4613      	mov	r3, r2
 8003e12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e14:	e025      	b.n	8003e62 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e1c:	d021      	beq.n	8003e62 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e1e:	f7fd f8f9 	bl	8001014 <HAL_GetTick>
 8003e22:	4602      	mov	r2, r0
 8003e24:	69bb      	ldr	r3, [r7, #24]
 8003e26:	1ad3      	subs	r3, r2, r3
 8003e28:	683a      	ldr	r2, [r7, #0]
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	d302      	bcc.n	8003e34 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d116      	bne.n	8003e62 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2200      	movs	r2, #0
 8003e38:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2220      	movs	r2, #32
 8003e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2200      	movs	r2, #0
 8003e46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4e:	f043 0220 	orr.w	r2, r3, #32
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e023      	b.n	8003eaa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	0c1b      	lsrs	r3, r3, #16
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d10d      	bne.n	8003e88 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	695b      	ldr	r3, [r3, #20]
 8003e72:	43da      	mvns	r2, r3
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	4013      	ands	r3, r2
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	bf0c      	ite	eq
 8003e7e:	2301      	moveq	r3, #1
 8003e80:	2300      	movne	r3, #0
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	461a      	mov	r2, r3
 8003e86:	e00c      	b.n	8003ea2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	699b      	ldr	r3, [r3, #24]
 8003e8e:	43da      	mvns	r2, r3
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	4013      	ands	r3, r2
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	bf0c      	ite	eq
 8003e9a:	2301      	moveq	r3, #1
 8003e9c:	2300      	movne	r3, #0
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	79fb      	ldrb	r3, [r7, #7]
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d0b6      	beq.n	8003e16 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ea8:	2300      	movs	r3, #0
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3710      	adds	r7, #16
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}

08003eb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003eb2:	b580      	push	{r7, lr}
 8003eb4:	b084      	sub	sp, #16
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	60f8      	str	r0, [r7, #12]
 8003eba:	60b9      	str	r1, [r7, #8]
 8003ebc:	607a      	str	r2, [r7, #4]
 8003ebe:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ec0:	e051      	b.n	8003f66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	695b      	ldr	r3, [r3, #20]
 8003ec8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ecc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ed0:	d123      	bne.n	8003f1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ee0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003eea:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2220      	movs	r2, #32
 8003ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2200      	movs	r2, #0
 8003efe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f06:	f043 0204 	orr.w	r2, r3, #4
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2200      	movs	r2, #0
 8003f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e046      	b.n	8003fa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f20:	d021      	beq.n	8003f66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f22:	f7fd f877 	bl	8001014 <HAL_GetTick>
 8003f26:	4602      	mov	r2, r0
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	1ad3      	subs	r3, r2, r3
 8003f2c:	687a      	ldr	r2, [r7, #4]
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d302      	bcc.n	8003f38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d116      	bne.n	8003f66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2220      	movs	r2, #32
 8003f42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f52:	f043 0220 	orr.w	r2, r3, #32
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e020      	b.n	8003fa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	0c1b      	lsrs	r3, r3, #16
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d10c      	bne.n	8003f8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	695b      	ldr	r3, [r3, #20]
 8003f76:	43da      	mvns	r2, r3
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	b29b      	uxth	r3, r3
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	bf14      	ite	ne
 8003f82:	2301      	movne	r3, #1
 8003f84:	2300      	moveq	r3, #0
 8003f86:	b2db      	uxtb	r3, r3
 8003f88:	e00b      	b.n	8003fa2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	699b      	ldr	r3, [r3, #24]
 8003f90:	43da      	mvns	r2, r3
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	4013      	ands	r3, r2
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	bf14      	ite	ne
 8003f9c:	2301      	movne	r3, #1
 8003f9e:	2300      	moveq	r3, #0
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d18d      	bne.n	8003ec2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003fa6:	2300      	movs	r3, #0
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3710      	adds	r7, #16
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b084      	sub	sp, #16
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	60b9      	str	r1, [r7, #8]
 8003fba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003fbc:	e02d      	b.n	800401a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003fbe:	68f8      	ldr	r0, [r7, #12]
 8003fc0:	f000 f8ce 	bl	8004160 <I2C_IsAcknowledgeFailed>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d001      	beq.n	8003fce <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e02d      	b.n	800402a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fd4:	d021      	beq.n	800401a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fd6:	f7fd f81d 	bl	8001014 <HAL_GetTick>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	1ad3      	subs	r3, r2, r3
 8003fe0:	68ba      	ldr	r2, [r7, #8]
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d302      	bcc.n	8003fec <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d116      	bne.n	800401a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2220      	movs	r2, #32
 8003ff6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004006:	f043 0220 	orr.w	r2, r3, #32
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2200      	movs	r2, #0
 8004012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e007      	b.n	800402a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	695b      	ldr	r3, [r3, #20]
 8004020:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004024:	2b80      	cmp	r3, #128	; 0x80
 8004026:	d1ca      	bne.n	8003fbe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004028:	2300      	movs	r3, #0
}
 800402a:	4618      	mov	r0, r3
 800402c:	3710      	adds	r7, #16
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}

08004032 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004032:	b580      	push	{r7, lr}
 8004034:	b084      	sub	sp, #16
 8004036:	af00      	add	r7, sp, #0
 8004038:	60f8      	str	r0, [r7, #12]
 800403a:	60b9      	str	r1, [r7, #8]
 800403c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800403e:	e02d      	b.n	800409c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004040:	68f8      	ldr	r0, [r7, #12]
 8004042:	f000 f88d 	bl	8004160 <I2C_IsAcknowledgeFailed>
 8004046:	4603      	mov	r3, r0
 8004048:	2b00      	cmp	r3, #0
 800404a:	d001      	beq.n	8004050 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	e02d      	b.n	80040ac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004056:	d021      	beq.n	800409c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004058:	f7fc ffdc 	bl	8001014 <HAL_GetTick>
 800405c:	4602      	mov	r2, r0
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	1ad3      	subs	r3, r2, r3
 8004062:	68ba      	ldr	r2, [r7, #8]
 8004064:	429a      	cmp	r2, r3
 8004066:	d302      	bcc.n	800406e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d116      	bne.n	800409c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2200      	movs	r2, #0
 8004072:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2220      	movs	r2, #32
 8004078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2200      	movs	r2, #0
 8004080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004088:	f043 0220 	orr.w	r2, r3, #32
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2200      	movs	r2, #0
 8004094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e007      	b.n	80040ac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	695b      	ldr	r3, [r3, #20]
 80040a2:	f003 0304 	and.w	r3, r3, #4
 80040a6:	2b04      	cmp	r3, #4
 80040a8:	d1ca      	bne.n	8004040 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80040aa:	2300      	movs	r3, #0
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3710      	adds	r7, #16
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}

080040b4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b084      	sub	sp, #16
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	60f8      	str	r0, [r7, #12]
 80040bc:	60b9      	str	r1, [r7, #8]
 80040be:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80040c0:	e042      	b.n	8004148 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	695b      	ldr	r3, [r3, #20]
 80040c8:	f003 0310 	and.w	r3, r3, #16
 80040cc:	2b10      	cmp	r3, #16
 80040ce:	d119      	bne.n	8004104 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f06f 0210 	mvn.w	r2, #16
 80040d8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2200      	movs	r2, #0
 80040de:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2220      	movs	r2, #32
 80040e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2200      	movs	r2, #0
 80040ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2200      	movs	r2, #0
 80040fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	e029      	b.n	8004158 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004104:	f7fc ff86 	bl	8001014 <HAL_GetTick>
 8004108:	4602      	mov	r2, r0
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	1ad3      	subs	r3, r2, r3
 800410e:	68ba      	ldr	r2, [r7, #8]
 8004110:	429a      	cmp	r2, r3
 8004112:	d302      	bcc.n	800411a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d116      	bne.n	8004148 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2200      	movs	r2, #0
 800411e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2220      	movs	r2, #32
 8004124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2200      	movs	r2, #0
 800412c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004134:	f043 0220 	orr.w	r2, r3, #32
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2200      	movs	r2, #0
 8004140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	e007      	b.n	8004158 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	695b      	ldr	r3, [r3, #20]
 800414e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004152:	2b40      	cmp	r3, #64	; 0x40
 8004154:	d1b5      	bne.n	80040c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004156:	2300      	movs	r3, #0
}
 8004158:	4618      	mov	r0, r3
 800415a:	3710      	adds	r7, #16
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}

08004160 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004160:	b480      	push	{r7}
 8004162:	b083      	sub	sp, #12
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	695b      	ldr	r3, [r3, #20]
 800416e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004172:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004176:	d11b      	bne.n	80041b0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004180:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2200      	movs	r2, #0
 8004186:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2220      	movs	r2, #32
 800418c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2200      	movs	r2, #0
 8004194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419c:	f043 0204 	orr.w	r2, r3, #4
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	e000      	b.n	80041b2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80041b0:	2300      	movs	r3, #0
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	370c      	adds	r7, #12
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr
	...

080041c0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b088      	sub	sp, #32
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d101      	bne.n	80041d2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e128      	b.n	8004424 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d109      	bne.n	80041f2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2200      	movs	r2, #0
 80041e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4a90      	ldr	r2, [pc, #576]	; (800442c <HAL_I2S_Init+0x26c>)
 80041ea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f00c fc65 	bl	8010abc <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2202      	movs	r2, #2
 80041f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	69db      	ldr	r3, [r3, #28]
 8004200:	687a      	ldr	r2, [r7, #4]
 8004202:	6812      	ldr	r2, [r2, #0]
 8004204:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004208:	f023 030f 	bic.w	r3, r3, #15
 800420c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	2202      	movs	r2, #2
 8004214:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	695b      	ldr	r3, [r3, #20]
 800421a:	2b02      	cmp	r3, #2
 800421c:	d060      	beq.n	80042e0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d102      	bne.n	800422c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004226:	2310      	movs	r3, #16
 8004228:	617b      	str	r3, [r7, #20]
 800422a:	e001      	b.n	8004230 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800422c:	2320      	movs	r3, #32
 800422e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	2b20      	cmp	r3, #32
 8004236:	d802      	bhi.n	800423e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	005b      	lsls	r3, r3, #1
 800423c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800423e:	2001      	movs	r0, #1
 8004240:	f001 fada 	bl	80057f8 <HAL_RCCEx_GetPeriphCLKFreq>
 8004244:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	691b      	ldr	r3, [r3, #16]
 800424a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800424e:	d125      	bne.n	800429c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d010      	beq.n	800427a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	68fa      	ldr	r2, [r7, #12]
 800425e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004262:	4613      	mov	r3, r2
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	4413      	add	r3, r2
 8004268:	005b      	lsls	r3, r3, #1
 800426a:	461a      	mov	r2, r3
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	695b      	ldr	r3, [r3, #20]
 8004270:	fbb2 f3f3 	udiv	r3, r2, r3
 8004274:	3305      	adds	r3, #5
 8004276:	613b      	str	r3, [r7, #16]
 8004278:	e01f      	b.n	80042ba <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	00db      	lsls	r3, r3, #3
 800427e:	68fa      	ldr	r2, [r7, #12]
 8004280:	fbb2 f2f3 	udiv	r2, r2, r3
 8004284:	4613      	mov	r3, r2
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	4413      	add	r3, r2
 800428a:	005b      	lsls	r3, r3, #1
 800428c:	461a      	mov	r2, r3
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	695b      	ldr	r3, [r3, #20]
 8004292:	fbb2 f3f3 	udiv	r3, r2, r3
 8004296:	3305      	adds	r3, #5
 8004298:	613b      	str	r3, [r7, #16]
 800429a:	e00e      	b.n	80042ba <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800429c:	68fa      	ldr	r2, [r7, #12]
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80042a4:	4613      	mov	r3, r2
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	4413      	add	r3, r2
 80042aa:	005b      	lsls	r3, r3, #1
 80042ac:	461a      	mov	r2, r3
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	695b      	ldr	r3, [r3, #20]
 80042b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80042b6:	3305      	adds	r3, #5
 80042b8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	4a5c      	ldr	r2, [pc, #368]	; (8004430 <HAL_I2S_Init+0x270>)
 80042be:	fba2 2303 	umull	r2, r3, r2, r3
 80042c2:	08db      	lsrs	r3, r3, #3
 80042c4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	f003 0301 	and.w	r3, r3, #1
 80042cc:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80042ce:	693a      	ldr	r2, [r7, #16]
 80042d0:	69bb      	ldr	r3, [r7, #24]
 80042d2:	1ad3      	subs	r3, r2, r3
 80042d4:	085b      	lsrs	r3, r3, #1
 80042d6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80042d8:	69bb      	ldr	r3, [r7, #24]
 80042da:	021b      	lsls	r3, r3, #8
 80042dc:	61bb      	str	r3, [r7, #24]
 80042de:	e003      	b.n	80042e8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80042e0:	2302      	movs	r3, #2
 80042e2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80042e4:	2300      	movs	r3, #0
 80042e6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80042e8:	69fb      	ldr	r3, [r7, #28]
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d902      	bls.n	80042f4 <HAL_I2S_Init+0x134>
 80042ee:	69fb      	ldr	r3, [r7, #28]
 80042f0:	2bff      	cmp	r3, #255	; 0xff
 80042f2:	d907      	bls.n	8004304 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042f8:	f043 0210 	orr.w	r2, r3, #16
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	e08f      	b.n	8004424 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	691a      	ldr	r2, [r3, #16]
 8004308:	69bb      	ldr	r3, [r7, #24]
 800430a:	ea42 0103 	orr.w	r1, r2, r3
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	69fa      	ldr	r2, [r7, #28]
 8004314:	430a      	orrs	r2, r1
 8004316:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	69db      	ldr	r3, [r3, #28]
 800431e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004322:	f023 030f 	bic.w	r3, r3, #15
 8004326:	687a      	ldr	r2, [r7, #4]
 8004328:	6851      	ldr	r1, [r2, #4]
 800432a:	687a      	ldr	r2, [r7, #4]
 800432c:	6892      	ldr	r2, [r2, #8]
 800432e:	4311      	orrs	r1, r2
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	68d2      	ldr	r2, [r2, #12]
 8004334:	4311      	orrs	r1, r2
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	6992      	ldr	r2, [r2, #24]
 800433a:	430a      	orrs	r2, r1
 800433c:	431a      	orrs	r2, r3
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004346:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6a1b      	ldr	r3, [r3, #32]
 800434c:	2b01      	cmp	r3, #1
 800434e:	d161      	bne.n	8004414 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	4a38      	ldr	r2, [pc, #224]	; (8004434 <HAL_I2S_Init+0x274>)
 8004354:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a37      	ldr	r2, [pc, #220]	; (8004438 <HAL_I2S_Init+0x278>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d101      	bne.n	8004364 <HAL_I2S_Init+0x1a4>
 8004360:	4b36      	ldr	r3, [pc, #216]	; (800443c <HAL_I2S_Init+0x27c>)
 8004362:	e001      	b.n	8004368 <HAL_I2S_Init+0x1a8>
 8004364:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004368:	69db      	ldr	r3, [r3, #28]
 800436a:	687a      	ldr	r2, [r7, #4]
 800436c:	6812      	ldr	r2, [r2, #0]
 800436e:	4932      	ldr	r1, [pc, #200]	; (8004438 <HAL_I2S_Init+0x278>)
 8004370:	428a      	cmp	r2, r1
 8004372:	d101      	bne.n	8004378 <HAL_I2S_Init+0x1b8>
 8004374:	4a31      	ldr	r2, [pc, #196]	; (800443c <HAL_I2S_Init+0x27c>)
 8004376:	e001      	b.n	800437c <HAL_I2S_Init+0x1bc>
 8004378:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800437c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004380:	f023 030f 	bic.w	r3, r3, #15
 8004384:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a2b      	ldr	r2, [pc, #172]	; (8004438 <HAL_I2S_Init+0x278>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d101      	bne.n	8004394 <HAL_I2S_Init+0x1d4>
 8004390:	4b2a      	ldr	r3, [pc, #168]	; (800443c <HAL_I2S_Init+0x27c>)
 8004392:	e001      	b.n	8004398 <HAL_I2S_Init+0x1d8>
 8004394:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004398:	2202      	movs	r2, #2
 800439a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a25      	ldr	r2, [pc, #148]	; (8004438 <HAL_I2S_Init+0x278>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d101      	bne.n	80043aa <HAL_I2S_Init+0x1ea>
 80043a6:	4b25      	ldr	r3, [pc, #148]	; (800443c <HAL_I2S_Init+0x27c>)
 80043a8:	e001      	b.n	80043ae <HAL_I2S_Init+0x1ee>
 80043aa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80043ae:	69db      	ldr	r3, [r3, #28]
 80043b0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043ba:	d003      	beq.n	80043c4 <HAL_I2S_Init+0x204>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d103      	bne.n	80043cc <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80043c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80043c8:	613b      	str	r3, [r7, #16]
 80043ca:	e001      	b.n	80043d0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80043cc:	2300      	movs	r3, #0
 80043ce:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	b299      	uxth	r1, r3
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	68db      	ldr	r3, [r3, #12]
 80043de:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	699b      	ldr	r3, [r3, #24]
 80043e4:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80043e6:	4303      	orrs	r3, r0
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	430b      	orrs	r3, r1
 80043ec:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80043ee:	4313      	orrs	r3, r2
 80043f0:	b29a      	uxth	r2, r3
 80043f2:	897b      	ldrh	r3, [r7, #10]
 80043f4:	4313      	orrs	r3, r2
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80043fc:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a0d      	ldr	r2, [pc, #52]	; (8004438 <HAL_I2S_Init+0x278>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d101      	bne.n	800440c <HAL_I2S_Init+0x24c>
 8004408:	4b0c      	ldr	r3, [pc, #48]	; (800443c <HAL_I2S_Init+0x27c>)
 800440a:	e001      	b.n	8004410 <HAL_I2S_Init+0x250>
 800440c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004410:	897a      	ldrh	r2, [r7, #10]
 8004412:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2200      	movs	r2, #0
 8004418:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2201      	movs	r2, #1
 800441e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8004422:	2300      	movs	r3, #0
}
 8004424:	4618      	mov	r0, r3
 8004426:	3720      	adds	r7, #32
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}
 800442c:	08004751 	.word	0x08004751
 8004430:	cccccccd 	.word	0xcccccccd
 8004434:	08004865 	.word	0x08004865
 8004438:	40003800 	.word	0x40003800
 800443c:	40003400 	.word	0x40003400

08004440 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b086      	sub	sp, #24
 8004444:	af00      	add	r7, sp, #0
 8004446:	60f8      	str	r0, [r7, #12]
 8004448:	60b9      	str	r1, [r7, #8]
 800444a:	4613      	mov	r3, r2
 800444c:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d002      	beq.n	800445a <HAL_I2S_Transmit_DMA+0x1a>
 8004454:	88fb      	ldrh	r3, [r7, #6]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d101      	bne.n	800445e <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e08e      	b.n	800457c <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004464:	b2db      	uxtb	r3, r3
 8004466:	2b01      	cmp	r3, #1
 8004468:	d101      	bne.n	800446e <HAL_I2S_Transmit_DMA+0x2e>
 800446a:	2302      	movs	r3, #2
 800446c:	e086      	b.n	800457c <HAL_I2S_Transmit_DMA+0x13c>
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2201      	movs	r2, #1
 8004472:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800447c:	b2db      	uxtb	r3, r3
 800447e:	2b01      	cmp	r3, #1
 8004480:	d005      	beq.n	800448e <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2200      	movs	r2, #0
 8004486:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 800448a:	2302      	movs	r3, #2
 800448c:	e076      	b.n	800457c <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2203      	movs	r2, #3
 8004492:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2200      	movs	r2, #0
 800449a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	68ba      	ldr	r2, [r7, #8]
 80044a0:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	69db      	ldr	r3, [r3, #28]
 80044a8:	f003 0307 	and.w	r3, r3, #7
 80044ac:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	2b03      	cmp	r3, #3
 80044b2:	d002      	beq.n	80044ba <HAL_I2S_Transmit_DMA+0x7a>
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	2b05      	cmp	r3, #5
 80044b8:	d10a      	bne.n	80044d0 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 80044ba:	88fb      	ldrh	r3, [r7, #6]
 80044bc:	005b      	lsls	r3, r3, #1
 80044be:	b29a      	uxth	r2, r3
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 80044c4:	88fb      	ldrh	r3, [r7, #6]
 80044c6:	005b      	lsls	r3, r3, #1
 80044c8:	b29a      	uxth	r2, r3
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80044ce:	e005      	b.n	80044dc <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	88fa      	ldrh	r2, [r7, #6]
 80044d4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	88fa      	ldrh	r2, [r7, #6]
 80044da:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e0:	4a28      	ldr	r2, [pc, #160]	; (8004584 <HAL_I2S_Transmit_DMA+0x144>)
 80044e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e8:	4a27      	ldr	r2, [pc, #156]	; (8004588 <HAL_I2S_Transmit_DMA+0x148>)
 80044ea:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f0:	4a26      	ldr	r2, [pc, #152]	; (800458c <HAL_I2S_Transmit_DMA+0x14c>)
 80044f2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx, (uint32_t)hi2s->pTxBuffPtr, (uint32_t)&hi2s->Instance->DR, hi2s->TxXferSize))
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fc:	4619      	mov	r1, r3
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	330c      	adds	r3, #12
 8004504:	461a      	mov	r2, r3
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800450a:	b29b      	uxth	r3, r3
 800450c:	f7fd f89a 	bl	8001644 <HAL_DMA_Start_IT>
 8004510:	4603      	mov	r3, r0
 8004512:	2b00      	cmp	r3, #0
 8004514:	d00f      	beq.n	8004536 <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800451a:	f043 0208 	orr.w	r2, r3, #8
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2201      	movs	r2, #1
 8004526:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2200      	movs	r2, #0
 800452e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e022      	b.n	800457c <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	69db      	ldr	r3, [r3, #28]
 800453c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004540:	2b00      	cmp	r3, #0
 8004542:	d107      	bne.n	8004554 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	69da      	ldr	r2, [r3, #28]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004552:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	f003 0302 	and.w	r3, r3, #2
 800455e:	2b00      	cmp	r3, #0
 8004560:	d107      	bne.n	8004572 <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	685a      	ldr	r2, [r3, #4]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f042 0202 	orr.w	r2, r2, #2
 8004570:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2200      	movs	r2, #0
 8004576:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 800457a:	2300      	movs	r3, #0
}
 800457c:	4618      	mov	r0, r3
 800457e:	3718      	adds	r7, #24
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}
 8004584:	0800462f 	.word	0x0800462f
 8004588:	080045ed 	.word	0x080045ed
 800458c:	0800464b 	.word	0x0800464b

08004590 <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b082      	sub	sp, #8
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  /* Call the IrqHandler ISR set during HAL_I2S_INIT */
  hi2s->IrqHandlerISR(hi2s);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	4798      	blx	r3
}
 80045a0:	bf00      	nop
 80045a2:	3708      	adds	r7, #8
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}

080045a8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b083      	sub	sp, #12
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80045b0:	bf00      	nop
 80045b2:	370c      	adds	r7, #12
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr

080045bc <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80045bc:	b480      	push	{r7}
 80045be:	b083      	sub	sp, #12
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80045c4:	bf00      	nop
 80045c6:	370c      	adds	r7, #12
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr

080045d0 <HAL_I2S_GetState>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL state
  */
HAL_I2S_StateTypeDef HAL_I2S_GetState(I2S_HandleTypeDef *hi2s)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b083      	sub	sp, #12
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  return hi2s->State;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045de:	b2db      	uxtb	r3, r3
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	370c      	adds	r7, #12
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr

080045ec <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b084      	sub	sp, #16
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f8:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	69db      	ldr	r3, [r3, #28]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d10e      	bne.n	8004620 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	685a      	ldr	r2, [r3, #4]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f022 0202 	bic.w	r2, r2, #2
 8004610:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2200      	movs	r2, #0
 8004616:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8004620:	68f8      	ldr	r0, [r7, #12]
 8004622:	f00b ff0d 	bl	8010440 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8004626:	bf00      	nop
 8004628:	3710      	adds	r7, #16
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}

0800462e <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800462e:	b580      	push	{r7, lr}
 8004630:	b084      	sub	sp, #16
 8004632:	af00      	add	r7, sp, #0
 8004634:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800463a:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 800463c:	68f8      	ldr	r0, [r7, #12]
 800463e:	f00b ff11 	bl	8010464 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8004642:	bf00      	nop
 8004644:	3710      	adds	r7, #16
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}

0800464a <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 800464a:	b580      	push	{r7, lr}
 800464c:	b084      	sub	sp, #16
 800464e:	af00      	add	r7, sp, #0
 8004650:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004656:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	685a      	ldr	r2, [r3, #4]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f022 0203 	bic.w	r2, r2, #3
 8004666:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2200      	movs	r2, #0
 800466c:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2200      	movs	r2, #0
 8004672:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004680:	f043 0208 	orr.w	r2, r3, #8
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8004688:	68f8      	ldr	r0, [r7, #12]
 800468a:	f7ff ff97 	bl	80045bc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800468e:	bf00      	nop
 8004690:	3710      	adds	r7, #16
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}

08004696 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004696:	b580      	push	{r7, lr}
 8004698:	b082      	sub	sp, #8
 800469a:	af00      	add	r7, sp, #0
 800469c:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a2:	881a      	ldrh	r2, [r3, #0]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ae:	1c9a      	adds	r2, r3, #2
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	3b01      	subs	r3, #1
 80046bc:	b29a      	uxth	r2, r3
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046c6:	b29b      	uxth	r3, r3
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d10e      	bne.n	80046ea <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	685a      	ldr	r2, [r3, #4]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80046da:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2201      	movs	r2, #1
 80046e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f00b feab 	bl	8010440 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80046ea:	bf00      	nop
 80046ec:	3708      	adds	r7, #8
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}

080046f2 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80046f2:	b580      	push	{r7, lr}
 80046f4:	b082      	sub	sp, #8
 80046f6:	af00      	add	r7, sp, #0
 80046f8:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	68da      	ldr	r2, [r3, #12]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004704:	b292      	uxth	r2, r2
 8004706:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800470c:	1c9a      	adds	r2, r3, #2
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004716:	b29b      	uxth	r3, r3
 8004718:	3b01      	subs	r3, #1
 800471a:	b29a      	uxth	r2, r3
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004724:	b29b      	uxth	r3, r3
 8004726:	2b00      	cmp	r3, #0
 8004728:	d10e      	bne.n	8004748 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	685a      	ldr	r2, [r3, #4]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004738:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2201      	movs	r2, #1
 800473e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f7ff ff30 	bl	80045a8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004748:	bf00      	nop
 800474a:	3708      	adds	r7, #8
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}

08004750 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b086      	sub	sp, #24
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004766:	b2db      	uxtb	r3, r3
 8004768:	2b04      	cmp	r3, #4
 800476a:	d13a      	bne.n	80047e2 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	f003 0301 	and.w	r3, r3, #1
 8004772:	2b01      	cmp	r3, #1
 8004774:	d109      	bne.n	800478a <I2S_IRQHandler+0x3a>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004780:	2b40      	cmp	r3, #64	; 0x40
 8004782:	d102      	bne.n	800478a <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	f7ff ffb4 	bl	80046f2 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004790:	2b40      	cmp	r3, #64	; 0x40
 8004792:	d126      	bne.n	80047e2 <I2S_IRQHandler+0x92>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	f003 0320 	and.w	r3, r3, #32
 800479e:	2b20      	cmp	r3, #32
 80047a0:	d11f      	bne.n	80047e2 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	685a      	ldr	r2, [r3, #4]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80047b0:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80047b2:	2300      	movs	r3, #0
 80047b4:	613b      	str	r3, [r7, #16]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	613b      	str	r3, [r7, #16]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	613b      	str	r3, [r7, #16]
 80047c6:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2201      	movs	r2, #1
 80047cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047d4:	f043 0202 	orr.w	r2, r3, #2
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	f7ff feed 	bl	80045bc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	2b03      	cmp	r3, #3
 80047ec:	d136      	bne.n	800485c <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	f003 0302 	and.w	r3, r3, #2
 80047f4:	2b02      	cmp	r3, #2
 80047f6:	d109      	bne.n	800480c <I2S_IRQHandler+0xbc>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004802:	2b80      	cmp	r3, #128	; 0x80
 8004804:	d102      	bne.n	800480c <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f7ff ff45 	bl	8004696 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	f003 0308 	and.w	r3, r3, #8
 8004812:	2b08      	cmp	r3, #8
 8004814:	d122      	bne.n	800485c <I2S_IRQHandler+0x10c>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	f003 0320 	and.w	r3, r3, #32
 8004820:	2b20      	cmp	r3, #32
 8004822:	d11b      	bne.n	800485c <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	685a      	ldr	r2, [r3, #4]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004832:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004834:	2300      	movs	r3, #0
 8004836:	60fb      	str	r3, [r7, #12]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	60fb      	str	r3, [r7, #12]
 8004840:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2201      	movs	r2, #1
 8004846:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800484e:	f043 0204 	orr.w	r2, r3, #4
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f7ff feb0 	bl	80045bc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800485c:	bf00      	nop
 800485e:	3718      	adds	r7, #24
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}

08004864 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b088      	sub	sp, #32
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4aa2      	ldr	r2, [pc, #648]	; (8004b04 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d101      	bne.n	8004882 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800487e:	4ba2      	ldr	r3, [pc, #648]	; (8004b08 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004880:	e001      	b.n	8004886 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004882:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a9b      	ldr	r2, [pc, #620]	; (8004b04 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d101      	bne.n	80048a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800489c:	4b9a      	ldr	r3, [pc, #616]	; (8004b08 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800489e:	e001      	b.n	80048a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80048a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048b0:	d004      	beq.n	80048bc <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	f040 8099 	bne.w	80049ee <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80048bc:	69fb      	ldr	r3, [r7, #28]
 80048be:	f003 0302 	and.w	r3, r3, #2
 80048c2:	2b02      	cmp	r3, #2
 80048c4:	d107      	bne.n	80048d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d002      	beq.n	80048d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f000 f925 	bl	8004b20 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80048d6:	69bb      	ldr	r3, [r7, #24]
 80048d8:	f003 0301 	and.w	r3, r3, #1
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d107      	bne.n	80048f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d002      	beq.n	80048f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f000 f9c8 	bl	8004c80 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80048f0:	69bb      	ldr	r3, [r7, #24]
 80048f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048f6:	2b40      	cmp	r3, #64	; 0x40
 80048f8:	d13a      	bne.n	8004970 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	f003 0320 	and.w	r3, r3, #32
 8004900:	2b00      	cmp	r3, #0
 8004902:	d035      	beq.n	8004970 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a7e      	ldr	r2, [pc, #504]	; (8004b04 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d101      	bne.n	8004912 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800490e:	4b7e      	ldr	r3, [pc, #504]	; (8004b08 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004910:	e001      	b.n	8004916 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004912:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004916:	685a      	ldr	r2, [r3, #4]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4979      	ldr	r1, [pc, #484]	; (8004b04 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800491e:	428b      	cmp	r3, r1
 8004920:	d101      	bne.n	8004926 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004922:	4b79      	ldr	r3, [pc, #484]	; (8004b08 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004924:	e001      	b.n	800492a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004926:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800492a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800492e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	685a      	ldr	r2, [r3, #4]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800493e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004940:	2300      	movs	r3, #0
 8004942:	60fb      	str	r3, [r7, #12]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	68db      	ldr	r3, [r3, #12]
 800494a:	60fb      	str	r3, [r7, #12]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	60fb      	str	r3, [r7, #12]
 8004954:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2201      	movs	r2, #1
 800495a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004962:	f043 0202 	orr.w	r2, r3, #2
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f7ff fe26 	bl	80045bc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004970:	69fb      	ldr	r3, [r7, #28]
 8004972:	f003 0308 	and.w	r3, r3, #8
 8004976:	2b08      	cmp	r3, #8
 8004978:	f040 80be 	bne.w	8004af8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	f003 0320 	and.w	r3, r3, #32
 8004982:	2b00      	cmp	r3, #0
 8004984:	f000 80b8 	beq.w	8004af8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	685a      	ldr	r2, [r3, #4]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004996:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a59      	ldr	r2, [pc, #356]	; (8004b04 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d101      	bne.n	80049a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80049a2:	4b59      	ldr	r3, [pc, #356]	; (8004b08 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80049a4:	e001      	b.n	80049aa <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80049a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80049aa:	685a      	ldr	r2, [r3, #4]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4954      	ldr	r1, [pc, #336]	; (8004b04 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80049b2:	428b      	cmp	r3, r1
 80049b4:	d101      	bne.n	80049ba <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80049b6:	4b54      	ldr	r3, [pc, #336]	; (8004b08 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80049b8:	e001      	b.n	80049be <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80049ba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80049be:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80049c2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80049c4:	2300      	movs	r3, #0
 80049c6:	60bb      	str	r3, [r7, #8]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	60bb      	str	r3, [r7, #8]
 80049d0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2201      	movs	r2, #1
 80049d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049de:	f043 0204 	orr.w	r2, r3, #4
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f7ff fde8 	bl	80045bc <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80049ec:	e084      	b.n	8004af8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80049ee:	69bb      	ldr	r3, [r7, #24]
 80049f0:	f003 0302 	and.w	r3, r3, #2
 80049f4:	2b02      	cmp	r3, #2
 80049f6:	d107      	bne.n	8004a08 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d002      	beq.n	8004a08 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f000 f8be 	bl	8004b84 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004a08:	69fb      	ldr	r3, [r7, #28]
 8004a0a:	f003 0301 	and.w	r3, r3, #1
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d107      	bne.n	8004a22 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d002      	beq.n	8004a22 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f000 f8fd 	bl	8004c1c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004a22:	69fb      	ldr	r3, [r7, #28]
 8004a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a28:	2b40      	cmp	r3, #64	; 0x40
 8004a2a:	d12f      	bne.n	8004a8c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	f003 0320 	and.w	r3, r3, #32
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d02a      	beq.n	8004a8c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	685a      	ldr	r2, [r3, #4]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004a44:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a2e      	ldr	r2, [pc, #184]	; (8004b04 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d101      	bne.n	8004a54 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004a50:	4b2d      	ldr	r3, [pc, #180]	; (8004b08 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004a52:	e001      	b.n	8004a58 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004a54:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a58:	685a      	ldr	r2, [r3, #4]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4929      	ldr	r1, [pc, #164]	; (8004b04 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004a60:	428b      	cmp	r3, r1
 8004a62:	d101      	bne.n	8004a68 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004a64:	4b28      	ldr	r3, [pc, #160]	; (8004b08 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004a66:	e001      	b.n	8004a6c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004a68:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a6c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004a70:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2201      	movs	r2, #1
 8004a76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a7e:	f043 0202 	orr.w	r2, r3, #2
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f7ff fd98 	bl	80045bc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004a8c:	69bb      	ldr	r3, [r7, #24]
 8004a8e:	f003 0308 	and.w	r3, r3, #8
 8004a92:	2b08      	cmp	r3, #8
 8004a94:	d131      	bne.n	8004afa <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	f003 0320 	and.w	r3, r3, #32
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d02c      	beq.n	8004afa <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a17      	ldr	r2, [pc, #92]	; (8004b04 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d101      	bne.n	8004aae <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004aaa:	4b17      	ldr	r3, [pc, #92]	; (8004b08 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004aac:	e001      	b.n	8004ab2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004aae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ab2:	685a      	ldr	r2, [r3, #4]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4912      	ldr	r1, [pc, #72]	; (8004b04 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004aba:	428b      	cmp	r3, r1
 8004abc:	d101      	bne.n	8004ac2 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8004abe:	4b12      	ldr	r3, [pc, #72]	; (8004b08 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004ac0:	e001      	b.n	8004ac6 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8004ac2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ac6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004aca:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	685a      	ldr	r2, [r3, #4]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004ada:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ae8:	f043 0204 	orr.w	r2, r3, #4
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	f7ff fd63 	bl	80045bc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004af6:	e000      	b.n	8004afa <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004af8:	bf00      	nop
}
 8004afa:	bf00      	nop
 8004afc:	3720      	adds	r7, #32
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}
 8004b02:	bf00      	nop
 8004b04:	40003800 	.word	0x40003800
 8004b08:	40003400 	.word	0x40003400

08004b0c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b083      	sub	sp, #12
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004b14:	bf00      	nop
 8004b16:	370c      	adds	r7, #12
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr

08004b20 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b082      	sub	sp, #8
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b2c:	1c99      	adds	r1, r3, #2
 8004b2e:	687a      	ldr	r2, [r7, #4]
 8004b30:	6251      	str	r1, [r2, #36]	; 0x24
 8004b32:	881a      	ldrh	r2, [r3, #0]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b3e:	b29b      	uxth	r3, r3
 8004b40:	3b01      	subs	r3, #1
 8004b42:	b29a      	uxth	r2, r3
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b4c:	b29b      	uxth	r3, r3
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d113      	bne.n	8004b7a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	685a      	ldr	r2, [r3, #4]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004b60:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d106      	bne.n	8004b7a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f7ff ffc9 	bl	8004b0c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004b7a:	bf00      	nop
 8004b7c:	3708      	adds	r7, #8
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}
	...

08004b84 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b082      	sub	sp, #8
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b90:	1c99      	adds	r1, r3, #2
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	6251      	str	r1, [r2, #36]	; 0x24
 8004b96:	8819      	ldrh	r1, [r3, #0]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a1d      	ldr	r2, [pc, #116]	; (8004c14 <I2SEx_TxISR_I2SExt+0x90>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d101      	bne.n	8004ba6 <I2SEx_TxISR_I2SExt+0x22>
 8004ba2:	4b1d      	ldr	r3, [pc, #116]	; (8004c18 <I2SEx_TxISR_I2SExt+0x94>)
 8004ba4:	e001      	b.n	8004baa <I2SEx_TxISR_I2SExt+0x26>
 8004ba6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004baa:	460a      	mov	r2, r1
 8004bac:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	3b01      	subs	r3, #1
 8004bb6:	b29a      	uxth	r2, r3
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bc0:	b29b      	uxth	r3, r3
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d121      	bne.n	8004c0a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a12      	ldr	r2, [pc, #72]	; (8004c14 <I2SEx_TxISR_I2SExt+0x90>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d101      	bne.n	8004bd4 <I2SEx_TxISR_I2SExt+0x50>
 8004bd0:	4b11      	ldr	r3, [pc, #68]	; (8004c18 <I2SEx_TxISR_I2SExt+0x94>)
 8004bd2:	e001      	b.n	8004bd8 <I2SEx_TxISR_I2SExt+0x54>
 8004bd4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004bd8:	685a      	ldr	r2, [r3, #4]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	490d      	ldr	r1, [pc, #52]	; (8004c14 <I2SEx_TxISR_I2SExt+0x90>)
 8004be0:	428b      	cmp	r3, r1
 8004be2:	d101      	bne.n	8004be8 <I2SEx_TxISR_I2SExt+0x64>
 8004be4:	4b0c      	ldr	r3, [pc, #48]	; (8004c18 <I2SEx_TxISR_I2SExt+0x94>)
 8004be6:	e001      	b.n	8004bec <I2SEx_TxISR_I2SExt+0x68>
 8004be8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004bec:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004bf0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004bf6:	b29b      	uxth	r3, r3
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d106      	bne.n	8004c0a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2201      	movs	r2, #1
 8004c00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004c04:	6878      	ldr	r0, [r7, #4]
 8004c06:	f7ff ff81 	bl	8004b0c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004c0a:	bf00      	nop
 8004c0c:	3708      	adds	r7, #8
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	40003800 	.word	0x40003800
 8004c18:	40003400 	.word	0x40003400

08004c1c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b082      	sub	sp, #8
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	68d8      	ldr	r0, [r3, #12]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c2e:	1c99      	adds	r1, r3, #2
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004c34:	b282      	uxth	r2, r0
 8004c36:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	3b01      	subs	r3, #1
 8004c40:	b29a      	uxth	r2, r3
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004c4a:	b29b      	uxth	r3, r3
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d113      	bne.n	8004c78 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	685a      	ldr	r2, [r3, #4]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004c5e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c64:	b29b      	uxth	r3, r3
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d106      	bne.n	8004c78 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f7ff ff4a 	bl	8004b0c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004c78:	bf00      	nop
 8004c7a:	3708      	adds	r7, #8
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}

08004c80 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b082      	sub	sp, #8
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a20      	ldr	r2, [pc, #128]	; (8004d10 <I2SEx_RxISR_I2SExt+0x90>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d101      	bne.n	8004c96 <I2SEx_RxISR_I2SExt+0x16>
 8004c92:	4b20      	ldr	r3, [pc, #128]	; (8004d14 <I2SEx_RxISR_I2SExt+0x94>)
 8004c94:	e001      	b.n	8004c9a <I2SEx_RxISR_I2SExt+0x1a>
 8004c96:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c9a:	68d8      	ldr	r0, [r3, #12]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca0:	1c99      	adds	r1, r3, #2
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004ca6:	b282      	uxth	r2, r0
 8004ca8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004cae:	b29b      	uxth	r3, r3
 8004cb0:	3b01      	subs	r3, #1
 8004cb2:	b29a      	uxth	r2, r3
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004cbc:	b29b      	uxth	r3, r3
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d121      	bne.n	8004d06 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a12      	ldr	r2, [pc, #72]	; (8004d10 <I2SEx_RxISR_I2SExt+0x90>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d101      	bne.n	8004cd0 <I2SEx_RxISR_I2SExt+0x50>
 8004ccc:	4b11      	ldr	r3, [pc, #68]	; (8004d14 <I2SEx_RxISR_I2SExt+0x94>)
 8004cce:	e001      	b.n	8004cd4 <I2SEx_RxISR_I2SExt+0x54>
 8004cd0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004cd4:	685a      	ldr	r2, [r3, #4]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	490d      	ldr	r1, [pc, #52]	; (8004d10 <I2SEx_RxISR_I2SExt+0x90>)
 8004cdc:	428b      	cmp	r3, r1
 8004cde:	d101      	bne.n	8004ce4 <I2SEx_RxISR_I2SExt+0x64>
 8004ce0:	4b0c      	ldr	r3, [pc, #48]	; (8004d14 <I2SEx_RxISR_I2SExt+0x94>)
 8004ce2:	e001      	b.n	8004ce8 <I2SEx_RxISR_I2SExt+0x68>
 8004ce4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ce8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004cec:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d106      	bne.n	8004d06 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f7ff ff03 	bl	8004b0c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004d06:	bf00      	nop
 8004d08:	3708      	adds	r7, #8
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}
 8004d0e:	bf00      	nop
 8004d10:	40003800 	.word	0x40003800
 8004d14:	40003400 	.word	0x40003400

08004d18 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b086      	sub	sp, #24
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d101      	bne.n	8004d2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	e22d      	b.n	8005186 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f003 0301 	and.w	r3, r3, #1
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d075      	beq.n	8004e22 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004d36:	4ba3      	ldr	r3, [pc, #652]	; (8004fc4 <HAL_RCC_OscConfig+0x2ac>)
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	f003 030c 	and.w	r3, r3, #12
 8004d3e:	2b04      	cmp	r3, #4
 8004d40:	d00c      	beq.n	8004d5c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d42:	4ba0      	ldr	r3, [pc, #640]	; (8004fc4 <HAL_RCC_OscConfig+0x2ac>)
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004d4a:	2b08      	cmp	r3, #8
 8004d4c:	d112      	bne.n	8004d74 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d4e:	4b9d      	ldr	r3, [pc, #628]	; (8004fc4 <HAL_RCC_OscConfig+0x2ac>)
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d5a:	d10b      	bne.n	8004d74 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d5c:	4b99      	ldr	r3, [pc, #612]	; (8004fc4 <HAL_RCC_OscConfig+0x2ac>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d05b      	beq.n	8004e20 <HAL_RCC_OscConfig+0x108>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d157      	bne.n	8004e20 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	e208      	b.n	8005186 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d7c:	d106      	bne.n	8004d8c <HAL_RCC_OscConfig+0x74>
 8004d7e:	4b91      	ldr	r3, [pc, #580]	; (8004fc4 <HAL_RCC_OscConfig+0x2ac>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a90      	ldr	r2, [pc, #576]	; (8004fc4 <HAL_RCC_OscConfig+0x2ac>)
 8004d84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d88:	6013      	str	r3, [r2, #0]
 8004d8a:	e01d      	b.n	8004dc8 <HAL_RCC_OscConfig+0xb0>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d94:	d10c      	bne.n	8004db0 <HAL_RCC_OscConfig+0x98>
 8004d96:	4b8b      	ldr	r3, [pc, #556]	; (8004fc4 <HAL_RCC_OscConfig+0x2ac>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a8a      	ldr	r2, [pc, #552]	; (8004fc4 <HAL_RCC_OscConfig+0x2ac>)
 8004d9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004da0:	6013      	str	r3, [r2, #0]
 8004da2:	4b88      	ldr	r3, [pc, #544]	; (8004fc4 <HAL_RCC_OscConfig+0x2ac>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a87      	ldr	r2, [pc, #540]	; (8004fc4 <HAL_RCC_OscConfig+0x2ac>)
 8004da8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dac:	6013      	str	r3, [r2, #0]
 8004dae:	e00b      	b.n	8004dc8 <HAL_RCC_OscConfig+0xb0>
 8004db0:	4b84      	ldr	r3, [pc, #528]	; (8004fc4 <HAL_RCC_OscConfig+0x2ac>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a83      	ldr	r2, [pc, #524]	; (8004fc4 <HAL_RCC_OscConfig+0x2ac>)
 8004db6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dba:	6013      	str	r3, [r2, #0]
 8004dbc:	4b81      	ldr	r3, [pc, #516]	; (8004fc4 <HAL_RCC_OscConfig+0x2ac>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a80      	ldr	r2, [pc, #512]	; (8004fc4 <HAL_RCC_OscConfig+0x2ac>)
 8004dc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004dc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d013      	beq.n	8004df8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dd0:	f7fc f920 	bl	8001014 <HAL_GetTick>
 8004dd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dd6:	e008      	b.n	8004dea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004dd8:	f7fc f91c 	bl	8001014 <HAL_GetTick>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	1ad3      	subs	r3, r2, r3
 8004de2:	2b64      	cmp	r3, #100	; 0x64
 8004de4:	d901      	bls.n	8004dea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004de6:	2303      	movs	r3, #3
 8004de8:	e1cd      	b.n	8005186 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dea:	4b76      	ldr	r3, [pc, #472]	; (8004fc4 <HAL_RCC_OscConfig+0x2ac>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d0f0      	beq.n	8004dd8 <HAL_RCC_OscConfig+0xc0>
 8004df6:	e014      	b.n	8004e22 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004df8:	f7fc f90c 	bl	8001014 <HAL_GetTick>
 8004dfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004dfe:	e008      	b.n	8004e12 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e00:	f7fc f908 	bl	8001014 <HAL_GetTick>
 8004e04:	4602      	mov	r2, r0
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	1ad3      	subs	r3, r2, r3
 8004e0a:	2b64      	cmp	r3, #100	; 0x64
 8004e0c:	d901      	bls.n	8004e12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004e0e:	2303      	movs	r3, #3
 8004e10:	e1b9      	b.n	8005186 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e12:	4b6c      	ldr	r3, [pc, #432]	; (8004fc4 <HAL_RCC_OscConfig+0x2ac>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d1f0      	bne.n	8004e00 <HAL_RCC_OscConfig+0xe8>
 8004e1e:	e000      	b.n	8004e22 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 0302 	and.w	r3, r3, #2
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d063      	beq.n	8004ef6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004e2e:	4b65      	ldr	r3, [pc, #404]	; (8004fc4 <HAL_RCC_OscConfig+0x2ac>)
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	f003 030c 	and.w	r3, r3, #12
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d00b      	beq.n	8004e52 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e3a:	4b62      	ldr	r3, [pc, #392]	; (8004fc4 <HAL_RCC_OscConfig+0x2ac>)
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004e42:	2b08      	cmp	r3, #8
 8004e44:	d11c      	bne.n	8004e80 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e46:	4b5f      	ldr	r3, [pc, #380]	; (8004fc4 <HAL_RCC_OscConfig+0x2ac>)
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d116      	bne.n	8004e80 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e52:	4b5c      	ldr	r3, [pc, #368]	; (8004fc4 <HAL_RCC_OscConfig+0x2ac>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f003 0302 	and.w	r3, r3, #2
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d005      	beq.n	8004e6a <HAL_RCC_OscConfig+0x152>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	68db      	ldr	r3, [r3, #12]
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d001      	beq.n	8004e6a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	e18d      	b.n	8005186 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e6a:	4b56      	ldr	r3, [pc, #344]	; (8004fc4 <HAL_RCC_OscConfig+0x2ac>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	691b      	ldr	r3, [r3, #16]
 8004e76:	00db      	lsls	r3, r3, #3
 8004e78:	4952      	ldr	r1, [pc, #328]	; (8004fc4 <HAL_RCC_OscConfig+0x2ac>)
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e7e:	e03a      	b.n	8004ef6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	68db      	ldr	r3, [r3, #12]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d020      	beq.n	8004eca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e88:	4b4f      	ldr	r3, [pc, #316]	; (8004fc8 <HAL_RCC_OscConfig+0x2b0>)
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e8e:	f7fc f8c1 	bl	8001014 <HAL_GetTick>
 8004e92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e94:	e008      	b.n	8004ea8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e96:	f7fc f8bd 	bl	8001014 <HAL_GetTick>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	1ad3      	subs	r3, r2, r3
 8004ea0:	2b02      	cmp	r3, #2
 8004ea2:	d901      	bls.n	8004ea8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004ea4:	2303      	movs	r3, #3
 8004ea6:	e16e      	b.n	8005186 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ea8:	4b46      	ldr	r3, [pc, #280]	; (8004fc4 <HAL_RCC_OscConfig+0x2ac>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f003 0302 	and.w	r3, r3, #2
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d0f0      	beq.n	8004e96 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004eb4:	4b43      	ldr	r3, [pc, #268]	; (8004fc4 <HAL_RCC_OscConfig+0x2ac>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	691b      	ldr	r3, [r3, #16]
 8004ec0:	00db      	lsls	r3, r3, #3
 8004ec2:	4940      	ldr	r1, [pc, #256]	; (8004fc4 <HAL_RCC_OscConfig+0x2ac>)
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	600b      	str	r3, [r1, #0]
 8004ec8:	e015      	b.n	8004ef6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004eca:	4b3f      	ldr	r3, [pc, #252]	; (8004fc8 <HAL_RCC_OscConfig+0x2b0>)
 8004ecc:	2200      	movs	r2, #0
 8004ece:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ed0:	f7fc f8a0 	bl	8001014 <HAL_GetTick>
 8004ed4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ed6:	e008      	b.n	8004eea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ed8:	f7fc f89c 	bl	8001014 <HAL_GetTick>
 8004edc:	4602      	mov	r2, r0
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	1ad3      	subs	r3, r2, r3
 8004ee2:	2b02      	cmp	r3, #2
 8004ee4:	d901      	bls.n	8004eea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004ee6:	2303      	movs	r3, #3
 8004ee8:	e14d      	b.n	8005186 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004eea:	4b36      	ldr	r3, [pc, #216]	; (8004fc4 <HAL_RCC_OscConfig+0x2ac>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 0302 	and.w	r3, r3, #2
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d1f0      	bne.n	8004ed8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f003 0308 	and.w	r3, r3, #8
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d030      	beq.n	8004f64 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	695b      	ldr	r3, [r3, #20]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d016      	beq.n	8004f38 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f0a:	4b30      	ldr	r3, [pc, #192]	; (8004fcc <HAL_RCC_OscConfig+0x2b4>)
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f10:	f7fc f880 	bl	8001014 <HAL_GetTick>
 8004f14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f16:	e008      	b.n	8004f2a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f18:	f7fc f87c 	bl	8001014 <HAL_GetTick>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	1ad3      	subs	r3, r2, r3
 8004f22:	2b02      	cmp	r3, #2
 8004f24:	d901      	bls.n	8004f2a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004f26:	2303      	movs	r3, #3
 8004f28:	e12d      	b.n	8005186 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f2a:	4b26      	ldr	r3, [pc, #152]	; (8004fc4 <HAL_RCC_OscConfig+0x2ac>)
 8004f2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f2e:	f003 0302 	and.w	r3, r3, #2
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d0f0      	beq.n	8004f18 <HAL_RCC_OscConfig+0x200>
 8004f36:	e015      	b.n	8004f64 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f38:	4b24      	ldr	r3, [pc, #144]	; (8004fcc <HAL_RCC_OscConfig+0x2b4>)
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f3e:	f7fc f869 	bl	8001014 <HAL_GetTick>
 8004f42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f44:	e008      	b.n	8004f58 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f46:	f7fc f865 	bl	8001014 <HAL_GetTick>
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	1ad3      	subs	r3, r2, r3
 8004f50:	2b02      	cmp	r3, #2
 8004f52:	d901      	bls.n	8004f58 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004f54:	2303      	movs	r3, #3
 8004f56:	e116      	b.n	8005186 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f58:	4b1a      	ldr	r3, [pc, #104]	; (8004fc4 <HAL_RCC_OscConfig+0x2ac>)
 8004f5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f5c:	f003 0302 	and.w	r3, r3, #2
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d1f0      	bne.n	8004f46 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f003 0304 	and.w	r3, r3, #4
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	f000 80a0 	beq.w	80050b2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f72:	2300      	movs	r3, #0
 8004f74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f76:	4b13      	ldr	r3, [pc, #76]	; (8004fc4 <HAL_RCC_OscConfig+0x2ac>)
 8004f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d10f      	bne.n	8004fa2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f82:	2300      	movs	r3, #0
 8004f84:	60fb      	str	r3, [r7, #12]
 8004f86:	4b0f      	ldr	r3, [pc, #60]	; (8004fc4 <HAL_RCC_OscConfig+0x2ac>)
 8004f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f8a:	4a0e      	ldr	r2, [pc, #56]	; (8004fc4 <HAL_RCC_OscConfig+0x2ac>)
 8004f8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f90:	6413      	str	r3, [r2, #64]	; 0x40
 8004f92:	4b0c      	ldr	r3, [pc, #48]	; (8004fc4 <HAL_RCC_OscConfig+0x2ac>)
 8004f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f9a:	60fb      	str	r3, [r7, #12]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fa2:	4b0b      	ldr	r3, [pc, #44]	; (8004fd0 <HAL_RCC_OscConfig+0x2b8>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d121      	bne.n	8004ff2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004fae:	4b08      	ldr	r3, [pc, #32]	; (8004fd0 <HAL_RCC_OscConfig+0x2b8>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a07      	ldr	r2, [pc, #28]	; (8004fd0 <HAL_RCC_OscConfig+0x2b8>)
 8004fb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fb8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004fba:	f7fc f82b 	bl	8001014 <HAL_GetTick>
 8004fbe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fc0:	e011      	b.n	8004fe6 <HAL_RCC_OscConfig+0x2ce>
 8004fc2:	bf00      	nop
 8004fc4:	40023800 	.word	0x40023800
 8004fc8:	42470000 	.word	0x42470000
 8004fcc:	42470e80 	.word	0x42470e80
 8004fd0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fd4:	f7fc f81e 	bl	8001014 <HAL_GetTick>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	1ad3      	subs	r3, r2, r3
 8004fde:	2b02      	cmp	r3, #2
 8004fe0:	d901      	bls.n	8004fe6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004fe2:	2303      	movs	r3, #3
 8004fe4:	e0cf      	b.n	8005186 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fe6:	4b6a      	ldr	r3, [pc, #424]	; (8005190 <HAL_RCC_OscConfig+0x478>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d0f0      	beq.n	8004fd4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	2b01      	cmp	r3, #1
 8004ff8:	d106      	bne.n	8005008 <HAL_RCC_OscConfig+0x2f0>
 8004ffa:	4b66      	ldr	r3, [pc, #408]	; (8005194 <HAL_RCC_OscConfig+0x47c>)
 8004ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ffe:	4a65      	ldr	r2, [pc, #404]	; (8005194 <HAL_RCC_OscConfig+0x47c>)
 8005000:	f043 0301 	orr.w	r3, r3, #1
 8005004:	6713      	str	r3, [r2, #112]	; 0x70
 8005006:	e01c      	b.n	8005042 <HAL_RCC_OscConfig+0x32a>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	2b05      	cmp	r3, #5
 800500e:	d10c      	bne.n	800502a <HAL_RCC_OscConfig+0x312>
 8005010:	4b60      	ldr	r3, [pc, #384]	; (8005194 <HAL_RCC_OscConfig+0x47c>)
 8005012:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005014:	4a5f      	ldr	r2, [pc, #380]	; (8005194 <HAL_RCC_OscConfig+0x47c>)
 8005016:	f043 0304 	orr.w	r3, r3, #4
 800501a:	6713      	str	r3, [r2, #112]	; 0x70
 800501c:	4b5d      	ldr	r3, [pc, #372]	; (8005194 <HAL_RCC_OscConfig+0x47c>)
 800501e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005020:	4a5c      	ldr	r2, [pc, #368]	; (8005194 <HAL_RCC_OscConfig+0x47c>)
 8005022:	f043 0301 	orr.w	r3, r3, #1
 8005026:	6713      	str	r3, [r2, #112]	; 0x70
 8005028:	e00b      	b.n	8005042 <HAL_RCC_OscConfig+0x32a>
 800502a:	4b5a      	ldr	r3, [pc, #360]	; (8005194 <HAL_RCC_OscConfig+0x47c>)
 800502c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800502e:	4a59      	ldr	r2, [pc, #356]	; (8005194 <HAL_RCC_OscConfig+0x47c>)
 8005030:	f023 0301 	bic.w	r3, r3, #1
 8005034:	6713      	str	r3, [r2, #112]	; 0x70
 8005036:	4b57      	ldr	r3, [pc, #348]	; (8005194 <HAL_RCC_OscConfig+0x47c>)
 8005038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800503a:	4a56      	ldr	r2, [pc, #344]	; (8005194 <HAL_RCC_OscConfig+0x47c>)
 800503c:	f023 0304 	bic.w	r3, r3, #4
 8005040:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d015      	beq.n	8005076 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800504a:	f7fb ffe3 	bl	8001014 <HAL_GetTick>
 800504e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005050:	e00a      	b.n	8005068 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005052:	f7fb ffdf 	bl	8001014 <HAL_GetTick>
 8005056:	4602      	mov	r2, r0
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	1ad3      	subs	r3, r2, r3
 800505c:	f643 2298 	movw	r2, #15000	; 0x3a98
 8005060:	4293      	cmp	r3, r2
 8005062:	d901      	bls.n	8005068 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005064:	2303      	movs	r3, #3
 8005066:	e08e      	b.n	8005186 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005068:	4b4a      	ldr	r3, [pc, #296]	; (8005194 <HAL_RCC_OscConfig+0x47c>)
 800506a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800506c:	f003 0302 	and.w	r3, r3, #2
 8005070:	2b00      	cmp	r3, #0
 8005072:	d0ee      	beq.n	8005052 <HAL_RCC_OscConfig+0x33a>
 8005074:	e014      	b.n	80050a0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005076:	f7fb ffcd 	bl	8001014 <HAL_GetTick>
 800507a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800507c:	e00a      	b.n	8005094 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800507e:	f7fb ffc9 	bl	8001014 <HAL_GetTick>
 8005082:	4602      	mov	r2, r0
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	1ad3      	subs	r3, r2, r3
 8005088:	f643 2298 	movw	r2, #15000	; 0x3a98
 800508c:	4293      	cmp	r3, r2
 800508e:	d901      	bls.n	8005094 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005090:	2303      	movs	r3, #3
 8005092:	e078      	b.n	8005186 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005094:	4b3f      	ldr	r3, [pc, #252]	; (8005194 <HAL_RCC_OscConfig+0x47c>)
 8005096:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005098:	f003 0302 	and.w	r3, r3, #2
 800509c:	2b00      	cmp	r3, #0
 800509e:	d1ee      	bne.n	800507e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80050a0:	7dfb      	ldrb	r3, [r7, #23]
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	d105      	bne.n	80050b2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050a6:	4b3b      	ldr	r3, [pc, #236]	; (8005194 <HAL_RCC_OscConfig+0x47c>)
 80050a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050aa:	4a3a      	ldr	r2, [pc, #232]	; (8005194 <HAL_RCC_OscConfig+0x47c>)
 80050ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050b0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	699b      	ldr	r3, [r3, #24]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d064      	beq.n	8005184 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80050ba:	4b36      	ldr	r3, [pc, #216]	; (8005194 <HAL_RCC_OscConfig+0x47c>)
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	f003 030c 	and.w	r3, r3, #12
 80050c2:	2b08      	cmp	r3, #8
 80050c4:	d05c      	beq.n	8005180 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	699b      	ldr	r3, [r3, #24]
 80050ca:	2b02      	cmp	r3, #2
 80050cc:	d141      	bne.n	8005152 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050ce:	4b32      	ldr	r3, [pc, #200]	; (8005198 <HAL_RCC_OscConfig+0x480>)
 80050d0:	2200      	movs	r2, #0
 80050d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050d4:	f7fb ff9e 	bl	8001014 <HAL_GetTick>
 80050d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050da:	e008      	b.n	80050ee <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050dc:	f7fb ff9a 	bl	8001014 <HAL_GetTick>
 80050e0:	4602      	mov	r2, r0
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	1ad3      	subs	r3, r2, r3
 80050e6:	2b02      	cmp	r3, #2
 80050e8:	d901      	bls.n	80050ee <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 80050ea:	2303      	movs	r3, #3
 80050ec:	e04b      	b.n	8005186 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050ee:	4b29      	ldr	r3, [pc, #164]	; (8005194 <HAL_RCC_OscConfig+0x47c>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d1f0      	bne.n	80050dc <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	69da      	ldr	r2, [r3, #28]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6a1b      	ldr	r3, [r3, #32]
 8005102:	431a      	orrs	r2, r3
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005108:	019b      	lsls	r3, r3, #6
 800510a:	431a      	orrs	r2, r3
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005110:	085b      	lsrs	r3, r3, #1
 8005112:	3b01      	subs	r3, #1
 8005114:	041b      	lsls	r3, r3, #16
 8005116:	431a      	orrs	r2, r3
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800511c:	061b      	lsls	r3, r3, #24
 800511e:	491d      	ldr	r1, [pc, #116]	; (8005194 <HAL_RCC_OscConfig+0x47c>)
 8005120:	4313      	orrs	r3, r2
 8005122:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005124:	4b1c      	ldr	r3, [pc, #112]	; (8005198 <HAL_RCC_OscConfig+0x480>)
 8005126:	2201      	movs	r2, #1
 8005128:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800512a:	f7fb ff73 	bl	8001014 <HAL_GetTick>
 800512e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005130:	e008      	b.n	8005144 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005132:	f7fb ff6f 	bl	8001014 <HAL_GetTick>
 8005136:	4602      	mov	r2, r0
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	1ad3      	subs	r3, r2, r3
 800513c:	2b02      	cmp	r3, #2
 800513e:	d901      	bls.n	8005144 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8005140:	2303      	movs	r3, #3
 8005142:	e020      	b.n	8005186 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005144:	4b13      	ldr	r3, [pc, #76]	; (8005194 <HAL_RCC_OscConfig+0x47c>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800514c:	2b00      	cmp	r3, #0
 800514e:	d0f0      	beq.n	8005132 <HAL_RCC_OscConfig+0x41a>
 8005150:	e018      	b.n	8005184 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005152:	4b11      	ldr	r3, [pc, #68]	; (8005198 <HAL_RCC_OscConfig+0x480>)
 8005154:	2200      	movs	r2, #0
 8005156:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005158:	f7fb ff5c 	bl	8001014 <HAL_GetTick>
 800515c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800515e:	e008      	b.n	8005172 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005160:	f7fb ff58 	bl	8001014 <HAL_GetTick>
 8005164:	4602      	mov	r2, r0
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	1ad3      	subs	r3, r2, r3
 800516a:	2b02      	cmp	r3, #2
 800516c:	d901      	bls.n	8005172 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800516e:	2303      	movs	r3, #3
 8005170:	e009      	b.n	8005186 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005172:	4b08      	ldr	r3, [pc, #32]	; (8005194 <HAL_RCC_OscConfig+0x47c>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800517a:	2b00      	cmp	r3, #0
 800517c:	d1f0      	bne.n	8005160 <HAL_RCC_OscConfig+0x448>
 800517e:	e001      	b.n	8005184 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	e000      	b.n	8005186 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8005184:	2300      	movs	r3, #0
}
 8005186:	4618      	mov	r0, r3
 8005188:	3718      	adds	r7, #24
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}
 800518e:	bf00      	nop
 8005190:	40007000 	.word	0x40007000
 8005194:	40023800 	.word	0x40023800
 8005198:	42470060 	.word	0x42470060

0800519c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b084      	sub	sp, #16
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
 80051a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d101      	bne.n	80051b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	e0ca      	b.n	8005346 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80051b0:	4b67      	ldr	r3, [pc, #412]	; (8005350 <HAL_RCC_ClockConfig+0x1b4>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f003 030f 	and.w	r3, r3, #15
 80051b8:	683a      	ldr	r2, [r7, #0]
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d90c      	bls.n	80051d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051be:	4b64      	ldr	r3, [pc, #400]	; (8005350 <HAL_RCC_ClockConfig+0x1b4>)
 80051c0:	683a      	ldr	r2, [r7, #0]
 80051c2:	b2d2      	uxtb	r2, r2
 80051c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051c6:	4b62      	ldr	r3, [pc, #392]	; (8005350 <HAL_RCC_ClockConfig+0x1b4>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f003 030f 	and.w	r3, r3, #15
 80051ce:	683a      	ldr	r2, [r7, #0]
 80051d0:	429a      	cmp	r2, r3
 80051d2:	d001      	beq.n	80051d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	e0b6      	b.n	8005346 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f003 0302 	and.w	r3, r3, #2
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d020      	beq.n	8005226 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f003 0304 	and.w	r3, r3, #4
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d005      	beq.n	80051fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80051f0:	4b58      	ldr	r3, [pc, #352]	; (8005354 <HAL_RCC_ClockConfig+0x1b8>)
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	4a57      	ldr	r2, [pc, #348]	; (8005354 <HAL_RCC_ClockConfig+0x1b8>)
 80051f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80051fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f003 0308 	and.w	r3, r3, #8
 8005204:	2b00      	cmp	r3, #0
 8005206:	d005      	beq.n	8005214 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005208:	4b52      	ldr	r3, [pc, #328]	; (8005354 <HAL_RCC_ClockConfig+0x1b8>)
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	4a51      	ldr	r2, [pc, #324]	; (8005354 <HAL_RCC_ClockConfig+0x1b8>)
 800520e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005212:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005214:	4b4f      	ldr	r3, [pc, #316]	; (8005354 <HAL_RCC_ClockConfig+0x1b8>)
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	494c      	ldr	r1, [pc, #304]	; (8005354 <HAL_RCC_ClockConfig+0x1b8>)
 8005222:	4313      	orrs	r3, r2
 8005224:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f003 0301 	and.w	r3, r3, #1
 800522e:	2b00      	cmp	r3, #0
 8005230:	d044      	beq.n	80052bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	2b01      	cmp	r3, #1
 8005238:	d107      	bne.n	800524a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800523a:	4b46      	ldr	r3, [pc, #280]	; (8005354 <HAL_RCC_ClockConfig+0x1b8>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005242:	2b00      	cmp	r3, #0
 8005244:	d119      	bne.n	800527a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	e07d      	b.n	8005346 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	2b02      	cmp	r3, #2
 8005250:	d003      	beq.n	800525a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005256:	2b03      	cmp	r3, #3
 8005258:	d107      	bne.n	800526a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800525a:	4b3e      	ldr	r3, [pc, #248]	; (8005354 <HAL_RCC_ClockConfig+0x1b8>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005262:	2b00      	cmp	r3, #0
 8005264:	d109      	bne.n	800527a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	e06d      	b.n	8005346 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800526a:	4b3a      	ldr	r3, [pc, #232]	; (8005354 <HAL_RCC_ClockConfig+0x1b8>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f003 0302 	and.w	r3, r3, #2
 8005272:	2b00      	cmp	r3, #0
 8005274:	d101      	bne.n	800527a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	e065      	b.n	8005346 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800527a:	4b36      	ldr	r3, [pc, #216]	; (8005354 <HAL_RCC_ClockConfig+0x1b8>)
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	f023 0203 	bic.w	r2, r3, #3
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	4933      	ldr	r1, [pc, #204]	; (8005354 <HAL_RCC_ClockConfig+0x1b8>)
 8005288:	4313      	orrs	r3, r2
 800528a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800528c:	f7fb fec2 	bl	8001014 <HAL_GetTick>
 8005290:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005292:	e00a      	b.n	80052aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005294:	f7fb febe 	bl	8001014 <HAL_GetTick>
 8005298:	4602      	mov	r2, r0
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	1ad3      	subs	r3, r2, r3
 800529e:	f241 3288 	movw	r2, #5000	; 0x1388
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d901      	bls.n	80052aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80052a6:	2303      	movs	r3, #3
 80052a8:	e04d      	b.n	8005346 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052aa:	4b2a      	ldr	r3, [pc, #168]	; (8005354 <HAL_RCC_ClockConfig+0x1b8>)
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	f003 020c 	and.w	r2, r3, #12
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	009b      	lsls	r3, r3, #2
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d1eb      	bne.n	8005294 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80052bc:	4b24      	ldr	r3, [pc, #144]	; (8005350 <HAL_RCC_ClockConfig+0x1b4>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f003 030f 	and.w	r3, r3, #15
 80052c4:	683a      	ldr	r2, [r7, #0]
 80052c6:	429a      	cmp	r2, r3
 80052c8:	d20c      	bcs.n	80052e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052ca:	4b21      	ldr	r3, [pc, #132]	; (8005350 <HAL_RCC_ClockConfig+0x1b4>)
 80052cc:	683a      	ldr	r2, [r7, #0]
 80052ce:	b2d2      	uxtb	r2, r2
 80052d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052d2:	4b1f      	ldr	r3, [pc, #124]	; (8005350 <HAL_RCC_ClockConfig+0x1b4>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f003 030f 	and.w	r3, r3, #15
 80052da:	683a      	ldr	r2, [r7, #0]
 80052dc:	429a      	cmp	r2, r3
 80052de:	d001      	beq.n	80052e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80052e0:	2301      	movs	r3, #1
 80052e2:	e030      	b.n	8005346 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f003 0304 	and.w	r3, r3, #4
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d008      	beq.n	8005302 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052f0:	4b18      	ldr	r3, [pc, #96]	; (8005354 <HAL_RCC_ClockConfig+0x1b8>)
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	68db      	ldr	r3, [r3, #12]
 80052fc:	4915      	ldr	r1, [pc, #84]	; (8005354 <HAL_RCC_ClockConfig+0x1b8>)
 80052fe:	4313      	orrs	r3, r2
 8005300:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f003 0308 	and.w	r3, r3, #8
 800530a:	2b00      	cmp	r3, #0
 800530c:	d009      	beq.n	8005322 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800530e:	4b11      	ldr	r3, [pc, #68]	; (8005354 <HAL_RCC_ClockConfig+0x1b8>)
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	691b      	ldr	r3, [r3, #16]
 800531a:	00db      	lsls	r3, r3, #3
 800531c:	490d      	ldr	r1, [pc, #52]	; (8005354 <HAL_RCC_ClockConfig+0x1b8>)
 800531e:	4313      	orrs	r3, r2
 8005320:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005322:	f000 f81d 	bl	8005360 <HAL_RCC_GetSysClockFreq>
 8005326:	4601      	mov	r1, r0
 8005328:	4b0a      	ldr	r3, [pc, #40]	; (8005354 <HAL_RCC_ClockConfig+0x1b8>)
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	091b      	lsrs	r3, r3, #4
 800532e:	f003 030f 	and.w	r3, r3, #15
 8005332:	4a09      	ldr	r2, [pc, #36]	; (8005358 <HAL_RCC_ClockConfig+0x1bc>)
 8005334:	5cd3      	ldrb	r3, [r2, r3]
 8005336:	fa21 f303 	lsr.w	r3, r1, r3
 800533a:	4a08      	ldr	r2, [pc, #32]	; (800535c <HAL_RCC_ClockConfig+0x1c0>)
 800533c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800533e:	2000      	movs	r0, #0
 8005340:	f00b fe06 	bl	8010f50 <HAL_InitTick>

  return HAL_OK;
 8005344:	2300      	movs	r3, #0
}
 8005346:	4618      	mov	r0, r3
 8005348:	3710      	adds	r7, #16
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}
 800534e:	bf00      	nop
 8005350:	40023c00 	.word	0x40023c00
 8005354:	40023800 	.word	0x40023800
 8005358:	08027290 	.word	0x08027290
 800535c:	20000050 	.word	0x20000050

08005360 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005360:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005362:	b085      	sub	sp, #20
 8005364:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005366:	2300      	movs	r3, #0
 8005368:	607b      	str	r3, [r7, #4]
 800536a:	2300      	movs	r3, #0
 800536c:	60fb      	str	r3, [r7, #12]
 800536e:	2300      	movs	r3, #0
 8005370:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005372:	2300      	movs	r3, #0
 8005374:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005376:	4b63      	ldr	r3, [pc, #396]	; (8005504 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	f003 030c 	and.w	r3, r3, #12
 800537e:	2b04      	cmp	r3, #4
 8005380:	d007      	beq.n	8005392 <HAL_RCC_GetSysClockFreq+0x32>
 8005382:	2b08      	cmp	r3, #8
 8005384:	d008      	beq.n	8005398 <HAL_RCC_GetSysClockFreq+0x38>
 8005386:	2b00      	cmp	r3, #0
 8005388:	f040 80b4 	bne.w	80054f4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800538c:	4b5e      	ldr	r3, [pc, #376]	; (8005508 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800538e:	60bb      	str	r3, [r7, #8]
       break;
 8005390:	e0b3      	b.n	80054fa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005392:	4b5e      	ldr	r3, [pc, #376]	; (800550c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8005394:	60bb      	str	r3, [r7, #8]
      break;
 8005396:	e0b0      	b.n	80054fa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005398:	4b5a      	ldr	r3, [pc, #360]	; (8005504 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80053a0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80053a2:	4b58      	ldr	r3, [pc, #352]	; (8005504 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d04a      	beq.n	8005444 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053ae:	4b55      	ldr	r3, [pc, #340]	; (8005504 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	099b      	lsrs	r3, r3, #6
 80053b4:	f04f 0400 	mov.w	r4, #0
 80053b8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80053bc:	f04f 0200 	mov.w	r2, #0
 80053c0:	ea03 0501 	and.w	r5, r3, r1
 80053c4:	ea04 0602 	and.w	r6, r4, r2
 80053c8:	4629      	mov	r1, r5
 80053ca:	4632      	mov	r2, r6
 80053cc:	f04f 0300 	mov.w	r3, #0
 80053d0:	f04f 0400 	mov.w	r4, #0
 80053d4:	0154      	lsls	r4, r2, #5
 80053d6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80053da:	014b      	lsls	r3, r1, #5
 80053dc:	4619      	mov	r1, r3
 80053de:	4622      	mov	r2, r4
 80053e0:	1b49      	subs	r1, r1, r5
 80053e2:	eb62 0206 	sbc.w	r2, r2, r6
 80053e6:	f04f 0300 	mov.w	r3, #0
 80053ea:	f04f 0400 	mov.w	r4, #0
 80053ee:	0194      	lsls	r4, r2, #6
 80053f0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80053f4:	018b      	lsls	r3, r1, #6
 80053f6:	1a5b      	subs	r3, r3, r1
 80053f8:	eb64 0402 	sbc.w	r4, r4, r2
 80053fc:	f04f 0100 	mov.w	r1, #0
 8005400:	f04f 0200 	mov.w	r2, #0
 8005404:	00e2      	lsls	r2, r4, #3
 8005406:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800540a:	00d9      	lsls	r1, r3, #3
 800540c:	460b      	mov	r3, r1
 800540e:	4614      	mov	r4, r2
 8005410:	195b      	adds	r3, r3, r5
 8005412:	eb44 0406 	adc.w	r4, r4, r6
 8005416:	f04f 0100 	mov.w	r1, #0
 800541a:	f04f 0200 	mov.w	r2, #0
 800541e:	0262      	lsls	r2, r4, #9
 8005420:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8005424:	0259      	lsls	r1, r3, #9
 8005426:	460b      	mov	r3, r1
 8005428:	4614      	mov	r4, r2
 800542a:	4618      	mov	r0, r3
 800542c:	4621      	mov	r1, r4
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f04f 0400 	mov.w	r4, #0
 8005434:	461a      	mov	r2, r3
 8005436:	4623      	mov	r3, r4
 8005438:	f7fb fc36 	bl	8000ca8 <__aeabi_uldivmod>
 800543c:	4603      	mov	r3, r0
 800543e:	460c      	mov	r4, r1
 8005440:	60fb      	str	r3, [r7, #12]
 8005442:	e049      	b.n	80054d8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005444:	4b2f      	ldr	r3, [pc, #188]	; (8005504 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	099b      	lsrs	r3, r3, #6
 800544a:	f04f 0400 	mov.w	r4, #0
 800544e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005452:	f04f 0200 	mov.w	r2, #0
 8005456:	ea03 0501 	and.w	r5, r3, r1
 800545a:	ea04 0602 	and.w	r6, r4, r2
 800545e:	4629      	mov	r1, r5
 8005460:	4632      	mov	r2, r6
 8005462:	f04f 0300 	mov.w	r3, #0
 8005466:	f04f 0400 	mov.w	r4, #0
 800546a:	0154      	lsls	r4, r2, #5
 800546c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005470:	014b      	lsls	r3, r1, #5
 8005472:	4619      	mov	r1, r3
 8005474:	4622      	mov	r2, r4
 8005476:	1b49      	subs	r1, r1, r5
 8005478:	eb62 0206 	sbc.w	r2, r2, r6
 800547c:	f04f 0300 	mov.w	r3, #0
 8005480:	f04f 0400 	mov.w	r4, #0
 8005484:	0194      	lsls	r4, r2, #6
 8005486:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800548a:	018b      	lsls	r3, r1, #6
 800548c:	1a5b      	subs	r3, r3, r1
 800548e:	eb64 0402 	sbc.w	r4, r4, r2
 8005492:	f04f 0100 	mov.w	r1, #0
 8005496:	f04f 0200 	mov.w	r2, #0
 800549a:	00e2      	lsls	r2, r4, #3
 800549c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80054a0:	00d9      	lsls	r1, r3, #3
 80054a2:	460b      	mov	r3, r1
 80054a4:	4614      	mov	r4, r2
 80054a6:	195b      	adds	r3, r3, r5
 80054a8:	eb44 0406 	adc.w	r4, r4, r6
 80054ac:	f04f 0100 	mov.w	r1, #0
 80054b0:	f04f 0200 	mov.w	r2, #0
 80054b4:	02a2      	lsls	r2, r4, #10
 80054b6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80054ba:	0299      	lsls	r1, r3, #10
 80054bc:	460b      	mov	r3, r1
 80054be:	4614      	mov	r4, r2
 80054c0:	4618      	mov	r0, r3
 80054c2:	4621      	mov	r1, r4
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	f04f 0400 	mov.w	r4, #0
 80054ca:	461a      	mov	r2, r3
 80054cc:	4623      	mov	r3, r4
 80054ce:	f7fb fbeb 	bl	8000ca8 <__aeabi_uldivmod>
 80054d2:	4603      	mov	r3, r0
 80054d4:	460c      	mov	r4, r1
 80054d6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80054d8:	4b0a      	ldr	r3, [pc, #40]	; (8005504 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	0c1b      	lsrs	r3, r3, #16
 80054de:	f003 0303 	and.w	r3, r3, #3
 80054e2:	3301      	adds	r3, #1
 80054e4:	005b      	lsls	r3, r3, #1
 80054e6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80054e8:	68fa      	ldr	r2, [r7, #12]
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80054f0:	60bb      	str	r3, [r7, #8]
      break;
 80054f2:	e002      	b.n	80054fa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80054f4:	4b04      	ldr	r3, [pc, #16]	; (8005508 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80054f6:	60bb      	str	r3, [r7, #8]
      break;
 80054f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80054fa:	68bb      	ldr	r3, [r7, #8]
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	3714      	adds	r7, #20
 8005500:	46bd      	mov	sp, r7
 8005502:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005504:	40023800 	.word	0x40023800
 8005508:	00f42400 	.word	0x00f42400
 800550c:	007a1200 	.word	0x007a1200

08005510 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005510:	b480      	push	{r7}
 8005512:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005514:	4b03      	ldr	r3, [pc, #12]	; (8005524 <HAL_RCC_GetHCLKFreq+0x14>)
 8005516:	681b      	ldr	r3, [r3, #0]
}
 8005518:	4618      	mov	r0, r3
 800551a:	46bd      	mov	sp, r7
 800551c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005520:	4770      	bx	lr
 8005522:	bf00      	nop
 8005524:	20000050 	.word	0x20000050

08005528 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800552c:	f7ff fff0 	bl	8005510 <HAL_RCC_GetHCLKFreq>
 8005530:	4601      	mov	r1, r0
 8005532:	4b05      	ldr	r3, [pc, #20]	; (8005548 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	0a9b      	lsrs	r3, r3, #10
 8005538:	f003 0307 	and.w	r3, r3, #7
 800553c:	4a03      	ldr	r2, [pc, #12]	; (800554c <HAL_RCC_GetPCLK1Freq+0x24>)
 800553e:	5cd3      	ldrb	r3, [r2, r3]
 8005540:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005544:	4618      	mov	r0, r3
 8005546:	bd80      	pop	{r7, pc}
 8005548:	40023800 	.word	0x40023800
 800554c:	080272a0 	.word	0x080272a0

08005550 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005554:	f7ff ffdc 	bl	8005510 <HAL_RCC_GetHCLKFreq>
 8005558:	4601      	mov	r1, r0
 800555a:	4b05      	ldr	r3, [pc, #20]	; (8005570 <HAL_RCC_GetPCLK2Freq+0x20>)
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	0b5b      	lsrs	r3, r3, #13
 8005560:	f003 0307 	and.w	r3, r3, #7
 8005564:	4a03      	ldr	r2, [pc, #12]	; (8005574 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005566:	5cd3      	ldrb	r3, [r2, r3]
 8005568:	fa21 f303 	lsr.w	r3, r1, r3
}
 800556c:	4618      	mov	r0, r3
 800556e:	bd80      	pop	{r7, pc}
 8005570:	40023800 	.word	0x40023800
 8005574:	080272a0 	.word	0x080272a0

08005578 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005578:	b480      	push	{r7}
 800557a:	b083      	sub	sp, #12
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	220f      	movs	r2, #15
 8005586:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005588:	4b12      	ldr	r3, [pc, #72]	; (80055d4 <HAL_RCC_GetClockConfig+0x5c>)
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	f003 0203 	and.w	r2, r3, #3
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005594:	4b0f      	ldr	r3, [pc, #60]	; (80055d4 <HAL_RCC_GetClockConfig+0x5c>)
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80055a0:	4b0c      	ldr	r3, [pc, #48]	; (80055d4 <HAL_RCC_GetClockConfig+0x5c>)
 80055a2:	689b      	ldr	r3, [r3, #8]
 80055a4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80055ac:	4b09      	ldr	r3, [pc, #36]	; (80055d4 <HAL_RCC_GetClockConfig+0x5c>)
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	08db      	lsrs	r3, r3, #3
 80055b2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80055ba:	4b07      	ldr	r3, [pc, #28]	; (80055d8 <HAL_RCC_GetClockConfig+0x60>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f003 020f 	and.w	r2, r3, #15
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	601a      	str	r2, [r3, #0]
}
 80055c6:	bf00      	nop
 80055c8:	370c      	adds	r7, #12
 80055ca:	46bd      	mov	sp, r7
 80055cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d0:	4770      	bx	lr
 80055d2:	bf00      	nop
 80055d4:	40023800 	.word	0x40023800
 80055d8:	40023c00 	.word	0x40023c00

080055dc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b086      	sub	sp, #24
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80055e4:	2300      	movs	r3, #0
 80055e6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80055e8:	2300      	movs	r3, #0
 80055ea:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f003 0301 	and.w	r3, r3, #1
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d105      	bne.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005600:	2b00      	cmp	r3, #0
 8005602:	d035      	beq.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005604:	4b62      	ldr	r3, [pc, #392]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005606:	2200      	movs	r2, #0
 8005608:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800560a:	f7fb fd03 	bl	8001014 <HAL_GetTick>
 800560e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005610:	e008      	b.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005612:	f7fb fcff 	bl	8001014 <HAL_GetTick>
 8005616:	4602      	mov	r2, r0
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	1ad3      	subs	r3, r2, r3
 800561c:	2b02      	cmp	r3, #2
 800561e:	d901      	bls.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005620:	2303      	movs	r3, #3
 8005622:	e0b0      	b.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005624:	4b5b      	ldr	r3, [pc, #364]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800562c:	2b00      	cmp	r3, #0
 800562e:	d1f0      	bne.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	019a      	lsls	r2, r3, #6
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	071b      	lsls	r3, r3, #28
 800563c:	4955      	ldr	r1, [pc, #340]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800563e:	4313      	orrs	r3, r2
 8005640:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005644:	4b52      	ldr	r3, [pc, #328]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005646:	2201      	movs	r2, #1
 8005648:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800564a:	f7fb fce3 	bl	8001014 <HAL_GetTick>
 800564e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005650:	e008      	b.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005652:	f7fb fcdf 	bl	8001014 <HAL_GetTick>
 8005656:	4602      	mov	r2, r0
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	1ad3      	subs	r3, r2, r3
 800565c:	2b02      	cmp	r3, #2
 800565e:	d901      	bls.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005660:	2303      	movs	r3, #3
 8005662:	e090      	b.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005664:	4b4b      	ldr	r3, [pc, #300]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800566c:	2b00      	cmp	r3, #0
 800566e:	d0f0      	beq.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f003 0302 	and.w	r3, r3, #2
 8005678:	2b00      	cmp	r3, #0
 800567a:	f000 8083 	beq.w	8005784 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800567e:	2300      	movs	r3, #0
 8005680:	60fb      	str	r3, [r7, #12]
 8005682:	4b44      	ldr	r3, [pc, #272]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005686:	4a43      	ldr	r2, [pc, #268]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005688:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800568c:	6413      	str	r3, [r2, #64]	; 0x40
 800568e:	4b41      	ldr	r3, [pc, #260]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005696:	60fb      	str	r3, [r7, #12]
 8005698:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800569a:	4b3f      	ldr	r3, [pc, #252]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a3e      	ldr	r2, [pc, #248]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80056a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056a4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80056a6:	f7fb fcb5 	bl	8001014 <HAL_GetTick>
 80056aa:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80056ac:	e008      	b.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80056ae:	f7fb fcb1 	bl	8001014 <HAL_GetTick>
 80056b2:	4602      	mov	r2, r0
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	1ad3      	subs	r3, r2, r3
 80056b8:	2b02      	cmp	r3, #2
 80056ba:	d901      	bls.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80056bc:	2303      	movs	r3, #3
 80056be:	e062      	b.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80056c0:	4b35      	ldr	r3, [pc, #212]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d0f0      	beq.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80056cc:	4b31      	ldr	r3, [pc, #196]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80056ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056d4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d02f      	beq.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x160>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	68db      	ldr	r3, [r3, #12]
 80056e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056e4:	693a      	ldr	r2, [r7, #16]
 80056e6:	429a      	cmp	r2, r3
 80056e8:	d028      	beq.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80056ea:	4b2a      	ldr	r3, [pc, #168]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80056ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056f2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80056f4:	4b29      	ldr	r3, [pc, #164]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80056f6:	2201      	movs	r2, #1
 80056f8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80056fa:	4b28      	ldr	r3, [pc, #160]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80056fc:	2200      	movs	r2, #0
 80056fe:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005700:	4a24      	ldr	r2, [pc, #144]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005706:	4b23      	ldr	r3, [pc, #140]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800570a:	f003 0301 	and.w	r3, r3, #1
 800570e:	2b01      	cmp	r3, #1
 8005710:	d114      	bne.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005712:	f7fb fc7f 	bl	8001014 <HAL_GetTick>
 8005716:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005718:	e00a      	b.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800571a:	f7fb fc7b 	bl	8001014 <HAL_GetTick>
 800571e:	4602      	mov	r2, r0
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	1ad3      	subs	r3, r2, r3
 8005724:	f643 2298 	movw	r2, #15000	; 0x3a98
 8005728:	4293      	cmp	r3, r2
 800572a:	d901      	bls.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800572c:	2303      	movs	r3, #3
 800572e:	e02a      	b.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005730:	4b18      	ldr	r3, [pc, #96]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005734:	f003 0302 	and.w	r3, r3, #2
 8005738:	2b00      	cmp	r3, #0
 800573a:	d0ee      	beq.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	68db      	ldr	r3, [r3, #12]
 8005740:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005744:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005748:	d10d      	bne.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800574a:	4b12      	ldr	r3, [pc, #72]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	68db      	ldr	r3, [r3, #12]
 8005756:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800575a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800575e:	490d      	ldr	r1, [pc, #52]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005760:	4313      	orrs	r3, r2
 8005762:	608b      	str	r3, [r1, #8]
 8005764:	e005      	b.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005766:	4b0b      	ldr	r3, [pc, #44]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005768:	689b      	ldr	r3, [r3, #8]
 800576a:	4a0a      	ldr	r2, [pc, #40]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800576c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005770:	6093      	str	r3, [r2, #8]
 8005772:	4b08      	ldr	r3, [pc, #32]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005774:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	68db      	ldr	r3, [r3, #12]
 800577a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800577e:	4905      	ldr	r1, [pc, #20]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005780:	4313      	orrs	r3, r2
 8005782:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005784:	2300      	movs	r3, #0
}
 8005786:	4618      	mov	r0, r3
 8005788:	3718      	adds	r7, #24
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
 800578e:	bf00      	nop
 8005790:	42470068 	.word	0x42470068
 8005794:	40023800 	.word	0x40023800
 8005798:	40007000 	.word	0x40007000
 800579c:	42470e40 	.word	0x42470e40

080057a0 <HAL_RCCEx_GetPeriphCLKConfig>:
  * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
  * will be configured.
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b085      	sub	sp, #20
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  uint32_t tempreg;

  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2203      	movs	r2, #3
 80057ac:	601a      	str	r2, [r3, #0]

  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 80057ae:	4b11      	ldr	r3, [pc, #68]	; (80057f4 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 80057b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057b4:	099b      	lsrs	r3, r3, #6
 80057b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80057be:	4b0d      	ldr	r3, [pc, #52]	; (80057f4 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 80057c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057c4:	0f1b      	lsrs	r3, r3, #28
 80057c6:	f003 0207 	and.w	r2, r3, #7
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	609a      	str	r2, [r3, #8]
#if defined(STM32F411xE)
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM);
#endif /* STM32F411xE */
  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 80057ce:	4b09      	ldr	r3, [pc, #36]	; (80057f4 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 80057d0:	689b      	ldr	r3, [r3, #8]
 80057d2:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80057d6:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 80057d8:	4b06      	ldr	r3, [pc, #24]	; (80057f4 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 80057da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057dc:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	431a      	orrs	r2, r3
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	60da      	str	r2, [r3, #12]
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
}
 80057e8:	bf00      	nop
 80057ea:	3714      	adds	r7, #20
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr
 80057f4:	40023800 	.word	0x40023800

080057f8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b087      	sub	sp, #28
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005800:	2300      	movs	r3, #0
 8005802:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005804:	2300      	movs	r3, #0
 8005806:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005808:	2300      	movs	r3, #0
 800580a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800580c:	2300      	movs	r3, #0
 800580e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2b01      	cmp	r3, #1
 8005814:	d13d      	bne.n	8005892 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005816:	4b22      	ldr	r3, [pc, #136]	; (80058a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800581e:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d004      	beq.n	8005830 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8005826:	2b01      	cmp	r3, #1
 8005828:	d12f      	bne.n	800588a <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800582a:	4b1e      	ldr	r3, [pc, #120]	; (80058a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800582c:	617b      	str	r3, [r7, #20]
          break;
 800582e:	e02f      	b.n	8005890 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005830:	4b1b      	ldr	r3, [pc, #108]	; (80058a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005838:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800583c:	d108      	bne.n	8005850 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800583e:	4b18      	ldr	r3, [pc, #96]	; (80058a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005846:	4a18      	ldr	r2, [pc, #96]	; (80058a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005848:	fbb2 f3f3 	udiv	r3, r2, r3
 800584c:	613b      	str	r3, [r7, #16]
 800584e:	e007      	b.n	8005860 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005850:	4b13      	ldr	r3, [pc, #76]	; (80058a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005858:	4a14      	ldr	r2, [pc, #80]	; (80058ac <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800585a:	fbb2 f3f3 	udiv	r3, r2, r3
 800585e:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005860:	4b0f      	ldr	r3, [pc, #60]	; (80058a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8005862:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005866:	099b      	lsrs	r3, r3, #6
 8005868:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	fb02 f303 	mul.w	r3, r2, r3
 8005872:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005874:	4b0a      	ldr	r3, [pc, #40]	; (80058a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8005876:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800587a:	0f1b      	lsrs	r3, r3, #28
 800587c:	f003 0307 	and.w	r3, r3, #7
 8005880:	68ba      	ldr	r2, [r7, #8]
 8005882:	fbb2 f3f3 	udiv	r3, r2, r3
 8005886:	617b      	str	r3, [r7, #20]
          break;
 8005888:	e002      	b.n	8005890 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800588a:	2300      	movs	r3, #0
 800588c:	617b      	str	r3, [r7, #20]
          break;
 800588e:	bf00      	nop
        }
      }
      break;
 8005890:	bf00      	nop
    }
  }
  return frequency;
 8005892:	697b      	ldr	r3, [r7, #20]
}
 8005894:	4618      	mov	r0, r3
 8005896:	371c      	adds	r7, #28
 8005898:	46bd      	mov	sp, r7
 800589a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589e:	4770      	bx	lr
 80058a0:	40023800 	.word	0x40023800
 80058a4:	00bb8000 	.word	0x00bb8000
 80058a8:	007a1200 	.word	0x007a1200
 80058ac:	00f42400 	.word	0x00f42400

080058b0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b082      	sub	sp, #8
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d101      	bne.n	80058c2 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80058be:	2301      	movs	r3, #1
 80058c0:	e083      	b.n	80059ca <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	7f5b      	ldrb	r3, [r3, #29]
 80058c6:	b2db      	uxtb	r3, r3
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d105      	bne.n	80058d8 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2200      	movs	r2, #0
 80058d0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f00b f99e 	bl	8010c14 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2202      	movs	r2, #2
 80058dc:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	22ca      	movs	r2, #202	; 0xca
 80058e4:	625a      	str	r2, [r3, #36]	; 0x24
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	2253      	movs	r2, #83	; 0x53
 80058ec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f000 faa8 	bl	8005e44 <RTC_EnterInitMode>
 80058f4:	4603      	mov	r3, r0
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d008      	beq.n	800590c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	22ff      	movs	r2, #255	; 0xff
 8005900:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2204      	movs	r2, #4
 8005906:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8005908:	2301      	movs	r3, #1
 800590a:	e05e      	b.n	80059ca <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	689b      	ldr	r3, [r3, #8]
 8005912:	687a      	ldr	r2, [r7, #4]
 8005914:	6812      	ldr	r2, [r2, #0]
 8005916:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800591a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800591e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	6899      	ldr	r1, [r3, #8]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	685a      	ldr	r2, [r3, #4]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	691b      	ldr	r3, [r3, #16]
 800592e:	431a      	orrs	r2, r3
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	695b      	ldr	r3, [r3, #20]
 8005934:	431a      	orrs	r2, r3
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	430a      	orrs	r2, r1
 800593c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	687a      	ldr	r2, [r7, #4]
 8005944:	68d2      	ldr	r2, [r2, #12]
 8005946:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	6919      	ldr	r1, [r3, #16]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	041a      	lsls	r2, r3, #16
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	430a      	orrs	r2, r1
 800595a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	68da      	ldr	r2, [r3, #12]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800596a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	f003 0320 	and.w	r3, r3, #32
 8005976:	2b00      	cmp	r3, #0
 8005978:	d10e      	bne.n	8005998 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f000 fa3a 	bl	8005df4 <HAL_RTC_WaitForSynchro>
 8005980:	4603      	mov	r3, r0
 8005982:	2b00      	cmp	r3, #0
 8005984:	d008      	beq.n	8005998 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	22ff      	movs	r2, #255	; 0xff
 800598c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2204      	movs	r2, #4
 8005992:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8005994:	2301      	movs	r3, #1
 8005996:	e018      	b.n	80059ca <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80059a6:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	699a      	ldr	r2, [r3, #24]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	430a      	orrs	r2, r1
 80059b8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	22ff      	movs	r2, #255	; 0xff
 80059c0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2201      	movs	r2, #1
 80059c6:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80059c8:	2300      	movs	r3, #0
  }
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3708      	adds	r7, #8
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}

080059d2 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80059d2:	b590      	push	{r4, r7, lr}
 80059d4:	b087      	sub	sp, #28
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	60f8      	str	r0, [r7, #12]
 80059da:	60b9      	str	r1, [r7, #8]
 80059dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80059de:	2300      	movs	r3, #0
 80059e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	7f1b      	ldrb	r3, [r3, #28]
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	d101      	bne.n	80059ee <HAL_RTC_SetTime+0x1c>
 80059ea:	2302      	movs	r3, #2
 80059ec:	e0aa      	b.n	8005b44 <HAL_RTC_SetTime+0x172>
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2201      	movs	r2, #1
 80059f2:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2202      	movs	r2, #2
 80059f8:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d126      	bne.n	8005a4e <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	689b      	ldr	r3, [r3, #8]
 8005a06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d102      	bne.n	8005a14 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	2200      	movs	r2, #0
 8005a12:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	781b      	ldrb	r3, [r3, #0]
 8005a18:	4618      	mov	r0, r3
 8005a1a:	f000 fa3f 	bl	8005e9c <RTC_ByteToBcd2>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	785b      	ldrb	r3, [r3, #1]
 8005a26:	4618      	mov	r0, r3
 8005a28:	f000 fa38 	bl	8005e9c <RTC_ByteToBcd2>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005a30:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	789b      	ldrb	r3, [r3, #2]
 8005a36:	4618      	mov	r0, r3
 8005a38:	f000 fa30 	bl	8005e9c <RTC_ByteToBcd2>
 8005a3c:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005a3e:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	78db      	ldrb	r3, [r3, #3]
 8005a46:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	617b      	str	r3, [r7, #20]
 8005a4c:	e018      	b.n	8005a80 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	689b      	ldr	r3, [r3, #8]
 8005a54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d102      	bne.n	8005a62 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	781b      	ldrb	r3, [r3, #0]
 8005a66:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	785b      	ldrb	r3, [r3, #1]
 8005a6c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005a6e:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8005a70:	68ba      	ldr	r2, [r7, #8]
 8005a72:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8005a74:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	78db      	ldrb	r3, [r3, #3]
 8005a7a:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	22ca      	movs	r2, #202	; 0xca
 8005a86:	625a      	str	r2, [r3, #36]	; 0x24
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	2253      	movs	r2, #83	; 0x53
 8005a8e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005a90:	68f8      	ldr	r0, [r7, #12]
 8005a92:	f000 f9d7 	bl	8005e44 <RTC_EnterInitMode>
 8005a96:	4603      	mov	r3, r0
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d00b      	beq.n	8005ab4 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	22ff      	movs	r2, #255	; 0xff
 8005aa2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2204      	movs	r2, #4
 8005aa8:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2200      	movs	r2, #0
 8005aae:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	e047      	b.n	8005b44 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005abe:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005ac2:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	689a      	ldr	r2, [r3, #8]
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005ad2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	6899      	ldr	r1, [r3, #8]
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	68da      	ldr	r2, [r3, #12]
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	691b      	ldr	r3, [r3, #16]
 8005ae2:	431a      	orrs	r2, r3
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	430a      	orrs	r2, r1
 8005aea:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	68da      	ldr	r2, [r3, #12]
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005afa:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	689b      	ldr	r3, [r3, #8]
 8005b02:	f003 0320 	and.w	r3, r3, #32
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d111      	bne.n	8005b2e <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005b0a:	68f8      	ldr	r0, [r7, #12]
 8005b0c:	f000 f972 	bl	8005df4 <HAL_RTC_WaitForSynchro>
 8005b10:	4603      	mov	r3, r0
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d00b      	beq.n	8005b2e <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	22ff      	movs	r2, #255	; 0xff
 8005b1c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	2204      	movs	r2, #4
 8005b22:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2200      	movs	r2, #0
 8005b28:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	e00a      	b.n	8005b44 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	22ff      	movs	r2, #255	; 0xff
 8005b34:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2201      	movs	r2, #1
 8005b3a:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8005b42:	2300      	movs	r3, #0
  }
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	371c      	adds	r7, #28
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd90      	pop	{r4, r7, pc}

08005b4c <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b086      	sub	sp, #24
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	60f8      	str	r0, [r7, #12]
 8005b54:	60b9      	str	r1, [r7, #8]
 8005b56:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	691b      	ldr	r3, [r3, #16]
 8005b6c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005b7e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005b82:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	0c1b      	lsrs	r3, r3, #16
 8005b88:	b2db      	uxtb	r3, r3
 8005b8a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b8e:	b2da      	uxtb	r2, r3
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	0a1b      	lsrs	r3, r3, #8
 8005b98:	b2db      	uxtb	r3, r3
 8005b9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b9e:	b2da      	uxtb	r2, r3
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	b2db      	uxtb	r3, r3
 8005ba8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bac:	b2da      	uxtb	r2, r3
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	0c1b      	lsrs	r3, r3, #16
 8005bb6:	b2db      	uxtb	r3, r3
 8005bb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bbc:	b2da      	uxtb	r2, r3
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d11a      	bne.n	8005bfe <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	781b      	ldrb	r3, [r3, #0]
 8005bcc:	4618      	mov	r0, r3
 8005bce:	f000 f983 	bl	8005ed8 <RTC_Bcd2ToByte>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	461a      	mov	r2, r3
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	785b      	ldrb	r3, [r3, #1]
 8005bde:	4618      	mov	r0, r3
 8005be0:	f000 f97a 	bl	8005ed8 <RTC_Bcd2ToByte>
 8005be4:	4603      	mov	r3, r0
 8005be6:	461a      	mov	r2, r3
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	789b      	ldrb	r3, [r3, #2]
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	f000 f971 	bl	8005ed8 <RTC_Bcd2ToByte>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	461a      	mov	r2, r3
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005bfe:	2300      	movs	r3, #0
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	3718      	adds	r7, #24
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}

08005c08 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005c08:	b590      	push	{r4, r7, lr}
 8005c0a:	b087      	sub	sp, #28
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	60f8      	str	r0, [r7, #12]
 8005c10:	60b9      	str	r1, [r7, #8]
 8005c12:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005c14:	2300      	movs	r3, #0
 8005c16:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	7f1b      	ldrb	r3, [r3, #28]
 8005c1c:	2b01      	cmp	r3, #1
 8005c1e:	d101      	bne.n	8005c24 <HAL_RTC_SetDate+0x1c>
 8005c20:	2302      	movs	r3, #2
 8005c22:	e094      	b.n	8005d4e <HAL_RTC_SetDate+0x146>
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2201      	movs	r2, #1
 8005c28:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2202      	movs	r2, #2
 8005c2e:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d10e      	bne.n	8005c54 <HAL_RTC_SetDate+0x4c>
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	785b      	ldrb	r3, [r3, #1]
 8005c3a:	f003 0310 	and.w	r3, r3, #16
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d008      	beq.n	8005c54 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	785b      	ldrb	r3, [r3, #1]
 8005c46:	f023 0310 	bic.w	r3, r3, #16
 8005c4a:	b2db      	uxtb	r3, r3
 8005c4c:	330a      	adds	r3, #10
 8005c4e:	b2da      	uxtb	r2, r3
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d11c      	bne.n	8005c94 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	78db      	ldrb	r3, [r3, #3]
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f000 f91c 	bl	8005e9c <RTC_ByteToBcd2>
 8005c64:	4603      	mov	r3, r0
 8005c66:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	785b      	ldrb	r3, [r3, #1]
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f000 f915 	bl	8005e9c <RTC_ByteToBcd2>
 8005c72:	4603      	mov	r3, r0
 8005c74:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005c76:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	789b      	ldrb	r3, [r3, #2]
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f000 f90d 	bl	8005e9c <RTC_ByteToBcd2>
 8005c82:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005c84:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	781b      	ldrb	r3, [r3, #0]
 8005c8c:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	617b      	str	r3, [r7, #20]
 8005c92:	e00e      	b.n	8005cb2 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	78db      	ldrb	r3, [r3, #3]
 8005c98:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	785b      	ldrb	r3, [r3, #1]
 8005c9e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005ca0:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8005ca2:	68ba      	ldr	r2, [r7, #8]
 8005ca4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8005ca6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	781b      	ldrb	r3, [r3, #0]
 8005cac:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	22ca      	movs	r2, #202	; 0xca
 8005cb8:	625a      	str	r2, [r3, #36]	; 0x24
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	2253      	movs	r2, #83	; 0x53
 8005cc0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005cc2:	68f8      	ldr	r0, [r7, #12]
 8005cc4:	f000 f8be 	bl	8005e44 <RTC_EnterInitMode>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d00b      	beq.n	8005ce6 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	22ff      	movs	r2, #255	; 0xff
 8005cd4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2204      	movs	r2, #4
 8005cda:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e033      	b.n	8005d4e <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681a      	ldr	r2, [r3, #0]
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005cf0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005cf4:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	68da      	ldr	r2, [r3, #12]
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d04:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	689b      	ldr	r3, [r3, #8]
 8005d0c:	f003 0320 	and.w	r3, r3, #32
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d111      	bne.n	8005d38 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005d14:	68f8      	ldr	r0, [r7, #12]
 8005d16:	f000 f86d 	bl	8005df4 <HAL_RTC_WaitForSynchro>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d00b      	beq.n	8005d38 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	22ff      	movs	r2, #255	; 0xff
 8005d26:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2204      	movs	r2, #4
 8005d2c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2200      	movs	r2, #0
 8005d32:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8005d34:	2301      	movs	r3, #1
 8005d36:	e00a      	b.n	8005d4e <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	22ff      	movs	r2, #255	; 0xff
 8005d3e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	2201      	movs	r2, #1
 8005d44:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8005d4c:	2300      	movs	r3, #0
  }
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	371c      	adds	r7, #28
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd90      	pop	{r4, r7, pc}

08005d56 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005d56:	b580      	push	{r7, lr}
 8005d58:	b086      	sub	sp, #24
 8005d5a:	af00      	add	r7, sp, #0
 8005d5c:	60f8      	str	r0, [r7, #12]
 8005d5e:	60b9      	str	r1, [r7, #8]
 8005d60:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005d62:	2300      	movs	r3, #0
 8005d64:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005d70:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005d74:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	0c1b      	lsrs	r3, r3, #16
 8005d7a:	b2da      	uxtb	r2, r3
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	0a1b      	lsrs	r3, r3, #8
 8005d84:	b2db      	uxtb	r3, r3
 8005d86:	f003 031f 	and.w	r3, r3, #31
 8005d8a:	b2da      	uxtb	r2, r3
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	b2db      	uxtb	r3, r3
 8005d94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d98:	b2da      	uxtb	r2, r3
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	0b5b      	lsrs	r3, r3, #13
 8005da2:	b2db      	uxtb	r3, r3
 8005da4:	f003 0307 	and.w	r3, r3, #7
 8005da8:	b2da      	uxtb	r2, r3
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d11a      	bne.n	8005dea <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	78db      	ldrb	r3, [r3, #3]
 8005db8:	4618      	mov	r0, r3
 8005dba:	f000 f88d 	bl	8005ed8 <RTC_Bcd2ToByte>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	461a      	mov	r2, r3
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	785b      	ldrb	r3, [r3, #1]
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f000 f884 	bl	8005ed8 <RTC_Bcd2ToByte>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	461a      	mov	r2, r3
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	789b      	ldrb	r3, [r3, #2]
 8005ddc:	4618      	mov	r0, r3
 8005dde:	f000 f87b 	bl	8005ed8 <RTC_Bcd2ToByte>
 8005de2:	4603      	mov	r3, r0
 8005de4:	461a      	mov	r2, r3
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005dea:	2300      	movs	r3, #0
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	3718      	adds	r7, #24
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd80      	pop	{r7, pc}

08005df4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b084      	sub	sp, #16
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	68da      	ldr	r2, [r3, #12]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005e0e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005e10:	f7fb f900 	bl	8001014 <HAL_GetTick>
 8005e14:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005e16:	e009      	b.n	8005e2c <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005e18:	f7fb f8fc 	bl	8001014 <HAL_GetTick>
 8005e1c:	4602      	mov	r2, r0
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	1ad3      	subs	r3, r2, r3
 8005e22:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e26:	d901      	bls.n	8005e2c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005e28:	2303      	movs	r3, #3
 8005e2a:	e007      	b.n	8005e3c <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	68db      	ldr	r3, [r3, #12]
 8005e32:	f003 0320 	and.w	r3, r3, #32
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d0ee      	beq.n	8005e18 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005e3a:	2300      	movs	r3, #0
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	3710      	adds	r7, #16
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}

08005e44 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b084      	sub	sp, #16
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	68db      	ldr	r3, [r3, #12]
 8005e56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d119      	bne.n	8005e92 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f04f 32ff 	mov.w	r2, #4294967295
 8005e66:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005e68:	f7fb f8d4 	bl	8001014 <HAL_GetTick>
 8005e6c:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005e6e:	e009      	b.n	8005e84 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005e70:	f7fb f8d0 	bl	8001014 <HAL_GetTick>
 8005e74:	4602      	mov	r2, r0
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	1ad3      	subs	r3, r2, r3
 8005e7a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e7e:	d901      	bls.n	8005e84 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8005e80:	2303      	movs	r3, #3
 8005e82:	e007      	b.n	8005e94 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	68db      	ldr	r3, [r3, #12]
 8005e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d0ee      	beq.n	8005e70 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8005e92:	2300      	movs	r3, #0
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	3710      	adds	r7, #16
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd80      	pop	{r7, pc}

08005e9c <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b085      	sub	sp, #20
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8005eaa:	e005      	b.n	8005eb8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	3301      	adds	r3, #1
 8005eb0:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8005eb2:	79fb      	ldrb	r3, [r7, #7]
 8005eb4:	3b0a      	subs	r3, #10
 8005eb6:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8005eb8:	79fb      	ldrb	r3, [r7, #7]
 8005eba:	2b09      	cmp	r3, #9
 8005ebc:	d8f6      	bhi.n	8005eac <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	b2db      	uxtb	r3, r3
 8005ec2:	011b      	lsls	r3, r3, #4
 8005ec4:	b2da      	uxtb	r2, r3
 8005ec6:	79fb      	ldrb	r3, [r7, #7]
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	b2db      	uxtb	r3, r3
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	3714      	adds	r7, #20
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr

08005ed8 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b085      	sub	sp, #20
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	4603      	mov	r3, r0
 8005ee0:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8005ee6:	79fb      	ldrb	r3, [r7, #7]
 8005ee8:	091b      	lsrs	r3, r3, #4
 8005eea:	b2db      	uxtb	r3, r3
 8005eec:	461a      	mov	r2, r3
 8005eee:	4613      	mov	r3, r2
 8005ef0:	009b      	lsls	r3, r3, #2
 8005ef2:	4413      	add	r3, r2
 8005ef4:	005b      	lsls	r3, r3, #1
 8005ef6:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8005ef8:	79fb      	ldrb	r3, [r7, #7]
 8005efa:	f003 030f 	and.w	r3, r3, #15
 8005efe:	b2da      	uxtb	r2, r3
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	b2db      	uxtb	r3, r3
 8005f04:	4413      	add	r3, r2
 8005f06:	b2db      	uxtb	r3, r3
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3714      	adds	r7, #20
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr

08005f14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b082      	sub	sp, #8
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d101      	bne.n	8005f26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f22:	2301      	movs	r3, #1
 8005f24:	e01d      	b.n	8005f62 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f2c:	b2db      	uxtb	r3, r3
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d106      	bne.n	8005f40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2200      	movs	r2, #0
 8005f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f000 f815 	bl	8005f6a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2202      	movs	r2, #2
 8005f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681a      	ldr	r2, [r3, #0]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	3304      	adds	r3, #4
 8005f50:	4619      	mov	r1, r3
 8005f52:	4610      	mov	r0, r2
 8005f54:	f000 f968 	bl	8006228 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f60:	2300      	movs	r3, #0
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3708      	adds	r7, #8
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}

08005f6a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005f6a:	b480      	push	{r7}
 8005f6c:	b083      	sub	sp, #12
 8005f6e:	af00      	add	r7, sp, #0
 8005f70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005f72:	bf00      	nop
 8005f74:	370c      	adds	r7, #12
 8005f76:	46bd      	mov	sp, r7
 8005f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7c:	4770      	bx	lr

08005f7e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005f7e:	b480      	push	{r7}
 8005f80:	b085      	sub	sp, #20
 8005f82:	af00      	add	r7, sp, #0
 8005f84:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	68da      	ldr	r2, [r3, #12]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f042 0201 	orr.w	r2, r2, #1
 8005f94:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	f003 0307 	and.w	r3, r3, #7
 8005fa0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2b06      	cmp	r3, #6
 8005fa6:	d007      	beq.n	8005fb8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	681a      	ldr	r2, [r3, #0]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f042 0201 	orr.w	r2, r2, #1
 8005fb6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005fb8:	2300      	movs	r3, #0
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3714      	adds	r7, #20
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc4:	4770      	bx	lr

08005fc6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005fc6:	b580      	push	{r7, lr}
 8005fc8:	b082      	sub	sp, #8
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	691b      	ldr	r3, [r3, #16]
 8005fd4:	f003 0302 	and.w	r3, r3, #2
 8005fd8:	2b02      	cmp	r3, #2
 8005fda:	d122      	bne.n	8006022 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	68db      	ldr	r3, [r3, #12]
 8005fe2:	f003 0302 	and.w	r3, r3, #2
 8005fe6:	2b02      	cmp	r3, #2
 8005fe8:	d11b      	bne.n	8006022 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f06f 0202 	mvn.w	r2, #2
 8005ff2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	699b      	ldr	r3, [r3, #24]
 8006000:	f003 0303 	and.w	r3, r3, #3
 8006004:	2b00      	cmp	r3, #0
 8006006:	d003      	beq.n	8006010 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	f000 f8ee 	bl	80061ea <HAL_TIM_IC_CaptureCallback>
 800600e:	e005      	b.n	800601c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	f000 f8e0 	bl	80061d6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f000 f8f1 	bl	80061fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2200      	movs	r2, #0
 8006020:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	691b      	ldr	r3, [r3, #16]
 8006028:	f003 0304 	and.w	r3, r3, #4
 800602c:	2b04      	cmp	r3, #4
 800602e:	d122      	bne.n	8006076 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	68db      	ldr	r3, [r3, #12]
 8006036:	f003 0304 	and.w	r3, r3, #4
 800603a:	2b04      	cmp	r3, #4
 800603c:	d11b      	bne.n	8006076 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f06f 0204 	mvn.w	r2, #4
 8006046:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2202      	movs	r2, #2
 800604c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	699b      	ldr	r3, [r3, #24]
 8006054:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006058:	2b00      	cmp	r3, #0
 800605a:	d003      	beq.n	8006064 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f000 f8c4 	bl	80061ea <HAL_TIM_IC_CaptureCallback>
 8006062:	e005      	b.n	8006070 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f000 f8b6 	bl	80061d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	f000 f8c7 	bl	80061fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2200      	movs	r2, #0
 8006074:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	691b      	ldr	r3, [r3, #16]
 800607c:	f003 0308 	and.w	r3, r3, #8
 8006080:	2b08      	cmp	r3, #8
 8006082:	d122      	bne.n	80060ca <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	68db      	ldr	r3, [r3, #12]
 800608a:	f003 0308 	and.w	r3, r3, #8
 800608e:	2b08      	cmp	r3, #8
 8006090:	d11b      	bne.n	80060ca <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f06f 0208 	mvn.w	r2, #8
 800609a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2204      	movs	r2, #4
 80060a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	69db      	ldr	r3, [r3, #28]
 80060a8:	f003 0303 	and.w	r3, r3, #3
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d003      	beq.n	80060b8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f000 f89a 	bl	80061ea <HAL_TIM_IC_CaptureCallback>
 80060b6:	e005      	b.n	80060c4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060b8:	6878      	ldr	r0, [r7, #4]
 80060ba:	f000 f88c 	bl	80061d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f000 f89d 	bl	80061fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2200      	movs	r2, #0
 80060c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	691b      	ldr	r3, [r3, #16]
 80060d0:	f003 0310 	and.w	r3, r3, #16
 80060d4:	2b10      	cmp	r3, #16
 80060d6:	d122      	bne.n	800611e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	68db      	ldr	r3, [r3, #12]
 80060de:	f003 0310 	and.w	r3, r3, #16
 80060e2:	2b10      	cmp	r3, #16
 80060e4:	d11b      	bne.n	800611e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f06f 0210 	mvn.w	r2, #16
 80060ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2208      	movs	r2, #8
 80060f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	69db      	ldr	r3, [r3, #28]
 80060fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006100:	2b00      	cmp	r3, #0
 8006102:	d003      	beq.n	800610c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	f000 f870 	bl	80061ea <HAL_TIM_IC_CaptureCallback>
 800610a:	e005      	b.n	8006118 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f000 f862 	bl	80061d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f000 f873 	bl	80061fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2200      	movs	r2, #0
 800611c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	691b      	ldr	r3, [r3, #16]
 8006124:	f003 0301 	and.w	r3, r3, #1
 8006128:	2b01      	cmp	r3, #1
 800612a:	d10e      	bne.n	800614a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	68db      	ldr	r3, [r3, #12]
 8006132:	f003 0301 	and.w	r3, r3, #1
 8006136:	2b01      	cmp	r3, #1
 8006138:	d107      	bne.n	800614a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f06f 0201 	mvn.w	r2, #1
 8006142:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f009 fed7 	bl	800fef8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	691b      	ldr	r3, [r3, #16]
 8006150:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006154:	2b80      	cmp	r3, #128	; 0x80
 8006156:	d10e      	bne.n	8006176 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	68db      	ldr	r3, [r3, #12]
 800615e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006162:	2b80      	cmp	r3, #128	; 0x80
 8006164:	d107      	bne.n	8006176 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800616e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f000 f903 	bl	800637c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	691b      	ldr	r3, [r3, #16]
 800617c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006180:	2b40      	cmp	r3, #64	; 0x40
 8006182:	d10e      	bne.n	80061a2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	68db      	ldr	r3, [r3, #12]
 800618a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800618e:	2b40      	cmp	r3, #64	; 0x40
 8006190:	d107      	bne.n	80061a2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800619a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f000 f838 	bl	8006212 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	691b      	ldr	r3, [r3, #16]
 80061a8:	f003 0320 	and.w	r3, r3, #32
 80061ac:	2b20      	cmp	r3, #32
 80061ae:	d10e      	bne.n	80061ce <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	68db      	ldr	r3, [r3, #12]
 80061b6:	f003 0320 	and.w	r3, r3, #32
 80061ba:	2b20      	cmp	r3, #32
 80061bc:	d107      	bne.n	80061ce <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f06f 0220 	mvn.w	r2, #32
 80061c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f000 f8cd 	bl	8006368 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80061ce:	bf00      	nop
 80061d0:	3708      	adds	r7, #8
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}

080061d6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80061d6:	b480      	push	{r7}
 80061d8:	b083      	sub	sp, #12
 80061da:	af00      	add	r7, sp, #0
 80061dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80061de:	bf00      	nop
 80061e0:	370c      	adds	r7, #12
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr

080061ea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80061ea:	b480      	push	{r7}
 80061ec:	b083      	sub	sp, #12
 80061ee:	af00      	add	r7, sp, #0
 80061f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80061f2:	bf00      	nop
 80061f4:	370c      	adds	r7, #12
 80061f6:	46bd      	mov	sp, r7
 80061f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fc:	4770      	bx	lr

080061fe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80061fe:	b480      	push	{r7}
 8006200:	b083      	sub	sp, #12
 8006202:	af00      	add	r7, sp, #0
 8006204:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006206:	bf00      	nop
 8006208:	370c      	adds	r7, #12
 800620a:	46bd      	mov	sp, r7
 800620c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006210:	4770      	bx	lr

08006212 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006212:	b480      	push	{r7}
 8006214:	b083      	sub	sp, #12
 8006216:	af00      	add	r7, sp, #0
 8006218:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800621a:	bf00      	nop
 800621c:	370c      	adds	r7, #12
 800621e:	46bd      	mov	sp, r7
 8006220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006224:	4770      	bx	lr
	...

08006228 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006228:	b480      	push	{r7}
 800622a:	b085      	sub	sp, #20
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
 8006230:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	4a40      	ldr	r2, [pc, #256]	; (800633c <TIM_Base_SetConfig+0x114>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d013      	beq.n	8006268 <TIM_Base_SetConfig+0x40>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006246:	d00f      	beq.n	8006268 <TIM_Base_SetConfig+0x40>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	4a3d      	ldr	r2, [pc, #244]	; (8006340 <TIM_Base_SetConfig+0x118>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d00b      	beq.n	8006268 <TIM_Base_SetConfig+0x40>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	4a3c      	ldr	r2, [pc, #240]	; (8006344 <TIM_Base_SetConfig+0x11c>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d007      	beq.n	8006268 <TIM_Base_SetConfig+0x40>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	4a3b      	ldr	r2, [pc, #236]	; (8006348 <TIM_Base_SetConfig+0x120>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d003      	beq.n	8006268 <TIM_Base_SetConfig+0x40>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	4a3a      	ldr	r2, [pc, #232]	; (800634c <TIM_Base_SetConfig+0x124>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d108      	bne.n	800627a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800626e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	68fa      	ldr	r2, [r7, #12]
 8006276:	4313      	orrs	r3, r2
 8006278:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	4a2f      	ldr	r2, [pc, #188]	; (800633c <TIM_Base_SetConfig+0x114>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d02b      	beq.n	80062da <TIM_Base_SetConfig+0xb2>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006288:	d027      	beq.n	80062da <TIM_Base_SetConfig+0xb2>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	4a2c      	ldr	r2, [pc, #176]	; (8006340 <TIM_Base_SetConfig+0x118>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d023      	beq.n	80062da <TIM_Base_SetConfig+0xb2>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	4a2b      	ldr	r2, [pc, #172]	; (8006344 <TIM_Base_SetConfig+0x11c>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d01f      	beq.n	80062da <TIM_Base_SetConfig+0xb2>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	4a2a      	ldr	r2, [pc, #168]	; (8006348 <TIM_Base_SetConfig+0x120>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d01b      	beq.n	80062da <TIM_Base_SetConfig+0xb2>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	4a29      	ldr	r2, [pc, #164]	; (800634c <TIM_Base_SetConfig+0x124>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d017      	beq.n	80062da <TIM_Base_SetConfig+0xb2>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	4a28      	ldr	r2, [pc, #160]	; (8006350 <TIM_Base_SetConfig+0x128>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d013      	beq.n	80062da <TIM_Base_SetConfig+0xb2>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	4a27      	ldr	r2, [pc, #156]	; (8006354 <TIM_Base_SetConfig+0x12c>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d00f      	beq.n	80062da <TIM_Base_SetConfig+0xb2>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	4a26      	ldr	r2, [pc, #152]	; (8006358 <TIM_Base_SetConfig+0x130>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d00b      	beq.n	80062da <TIM_Base_SetConfig+0xb2>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	4a25      	ldr	r2, [pc, #148]	; (800635c <TIM_Base_SetConfig+0x134>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d007      	beq.n	80062da <TIM_Base_SetConfig+0xb2>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	4a24      	ldr	r2, [pc, #144]	; (8006360 <TIM_Base_SetConfig+0x138>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d003      	beq.n	80062da <TIM_Base_SetConfig+0xb2>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	4a23      	ldr	r2, [pc, #140]	; (8006364 <TIM_Base_SetConfig+0x13c>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d108      	bne.n	80062ec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	68db      	ldr	r3, [r3, #12]
 80062e6:	68fa      	ldr	r2, [r7, #12]
 80062e8:	4313      	orrs	r3, r2
 80062ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	695b      	ldr	r3, [r3, #20]
 80062f6:	4313      	orrs	r3, r2
 80062f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	68fa      	ldr	r2, [r7, #12]
 80062fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	689a      	ldr	r2, [r3, #8]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	681a      	ldr	r2, [r3, #0]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	4a0a      	ldr	r2, [pc, #40]	; (800633c <TIM_Base_SetConfig+0x114>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d003      	beq.n	8006320 <TIM_Base_SetConfig+0xf8>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	4a0c      	ldr	r2, [pc, #48]	; (800634c <TIM_Base_SetConfig+0x124>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d103      	bne.n	8006328 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	691a      	ldr	r2, [r3, #16]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2201      	movs	r2, #1
 800632c:	615a      	str	r2, [r3, #20]
}
 800632e:	bf00      	nop
 8006330:	3714      	adds	r7, #20
 8006332:	46bd      	mov	sp, r7
 8006334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006338:	4770      	bx	lr
 800633a:	bf00      	nop
 800633c:	40010000 	.word	0x40010000
 8006340:	40000400 	.word	0x40000400
 8006344:	40000800 	.word	0x40000800
 8006348:	40000c00 	.word	0x40000c00
 800634c:	40010400 	.word	0x40010400
 8006350:	40014000 	.word	0x40014000
 8006354:	40014400 	.word	0x40014400
 8006358:	40014800 	.word	0x40014800
 800635c:	40001800 	.word	0x40001800
 8006360:	40001c00 	.word	0x40001c00
 8006364:	40002000 	.word	0x40002000

08006368 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006368:	b480      	push	{r7}
 800636a:	b083      	sub	sp, #12
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006370:	bf00      	nop
 8006372:	370c      	adds	r7, #12
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr

0800637c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800637c:	b480      	push	{r7}
 800637e:	b083      	sub	sp, #12
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006384:	bf00      	nop
 8006386:	370c      	adds	r7, #12
 8006388:	46bd      	mov	sp, r7
 800638a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638e:	4770      	bx	lr

08006390 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b082      	sub	sp, #8
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d101      	bne.n	80063a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800639e:	2301      	movs	r3, #1
 80063a0:	e03f      	b.n	8006422 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80063a8:	b2db      	uxtb	r3, r3
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d106      	bne.n	80063bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2200      	movs	r2, #0
 80063b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f00a fc42 	bl	8010c40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2224      	movs	r2, #36	; 0x24
 80063c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	68da      	ldr	r2, [r3, #12]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80063d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f000 fc73 	bl	8006cc0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	691a      	ldr	r2, [r3, #16]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80063e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	695a      	ldr	r2, [r3, #20]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80063f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	68da      	ldr	r2, [r3, #12]
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006408:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2200      	movs	r2, #0
 800640e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2220      	movs	r2, #32
 8006414:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2220      	movs	r2, #32
 800641c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006420:	2300      	movs	r3, #0
}
 8006422:	4618      	mov	r0, r3
 8006424:	3708      	adds	r7, #8
 8006426:	46bd      	mov	sp, r7
 8006428:	bd80      	pop	{r7, pc}

0800642a <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800642a:	b580      	push	{r7, lr}
 800642c:	b088      	sub	sp, #32
 800642e:	af02      	add	r7, sp, #8
 8006430:	60f8      	str	r0, [r7, #12]
 8006432:	60b9      	str	r1, [r7, #8]
 8006434:	603b      	str	r3, [r7, #0]
 8006436:	4613      	mov	r3, r2
 8006438:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800643a:	2300      	movs	r3, #0
 800643c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006444:	b2db      	uxtb	r3, r3
 8006446:	2b20      	cmp	r3, #32
 8006448:	f040 8083 	bne.w	8006552 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d002      	beq.n	8006458 <HAL_UART_Transmit+0x2e>
 8006452:	88fb      	ldrh	r3, [r7, #6]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d101      	bne.n	800645c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8006458:	2301      	movs	r3, #1
 800645a:	e07b      	b.n	8006554 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006462:	2b01      	cmp	r3, #1
 8006464:	d101      	bne.n	800646a <HAL_UART_Transmit+0x40>
 8006466:	2302      	movs	r3, #2
 8006468:	e074      	b.n	8006554 <HAL_UART_Transmit+0x12a>
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	2201      	movs	r2, #1
 800646e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2200      	movs	r2, #0
 8006476:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2221      	movs	r2, #33	; 0x21
 800647c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8006480:	f7fa fdc8 	bl	8001014 <HAL_GetTick>
 8006484:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	88fa      	ldrh	r2, [r7, #6]
 800648a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	88fa      	ldrh	r2, [r7, #6]
 8006490:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006492:	e042      	b.n	800651a <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006498:	b29b      	uxth	r3, r3
 800649a:	3b01      	subs	r3, #1
 800649c:	b29a      	uxth	r2, r3
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	689b      	ldr	r3, [r3, #8]
 80064a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064aa:	d122      	bne.n	80064f2 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	9300      	str	r3, [sp, #0]
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	2200      	movs	r2, #0
 80064b4:	2180      	movs	r1, #128	; 0x80
 80064b6:	68f8      	ldr	r0, [r7, #12]
 80064b8:	f000 fa80 	bl	80069bc <UART_WaitOnFlagUntilTimeout>
 80064bc:	4603      	mov	r3, r0
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d001      	beq.n	80064c6 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80064c2:	2303      	movs	r3, #3
 80064c4:	e046      	b.n	8006554 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	881b      	ldrh	r3, [r3, #0]
 80064ce:	461a      	mov	r2, r3
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80064d8:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	691b      	ldr	r3, [r3, #16]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d103      	bne.n	80064ea <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	3302      	adds	r3, #2
 80064e6:	60bb      	str	r3, [r7, #8]
 80064e8:	e017      	b.n	800651a <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	3301      	adds	r3, #1
 80064ee:	60bb      	str	r3, [r7, #8]
 80064f0:	e013      	b.n	800651a <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	9300      	str	r3, [sp, #0]
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	2200      	movs	r2, #0
 80064fa:	2180      	movs	r1, #128	; 0x80
 80064fc:	68f8      	ldr	r0, [r7, #12]
 80064fe:	f000 fa5d 	bl	80069bc <UART_WaitOnFlagUntilTimeout>
 8006502:	4603      	mov	r3, r0
 8006504:	2b00      	cmp	r3, #0
 8006506:	d001      	beq.n	800650c <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8006508:	2303      	movs	r3, #3
 800650a:	e023      	b.n	8006554 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	1c5a      	adds	r2, r3, #1
 8006510:	60ba      	str	r2, [r7, #8]
 8006512:	781a      	ldrb	r2, [r3, #0]
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800651e:	b29b      	uxth	r3, r3
 8006520:	2b00      	cmp	r3, #0
 8006522:	d1b7      	bne.n	8006494 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	9300      	str	r3, [sp, #0]
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	2200      	movs	r2, #0
 800652c:	2140      	movs	r1, #64	; 0x40
 800652e:	68f8      	ldr	r0, [r7, #12]
 8006530:	f000 fa44 	bl	80069bc <UART_WaitOnFlagUntilTimeout>
 8006534:	4603      	mov	r3, r0
 8006536:	2b00      	cmp	r3, #0
 8006538:	d001      	beq.n	800653e <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800653a:	2303      	movs	r3, #3
 800653c:	e00a      	b.n	8006554 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	2220      	movs	r2, #32
 8006542:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	2200      	movs	r2, #0
 800654a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800654e:	2300      	movs	r3, #0
 8006550:	e000      	b.n	8006554 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8006552:	2302      	movs	r3, #2
  }
}
 8006554:	4618      	mov	r0, r3
 8006556:	3718      	adds	r7, #24
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}

0800655c <HAL_UART_Receive_DMA>:
  * @param  Size Amount of data to be received
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b086      	sub	sp, #24
 8006560:	af00      	add	r7, sp, #0
 8006562:	60f8      	str	r0, [r7, #12]
 8006564:	60b9      	str	r1, [r7, #8]
 8006566:	4613      	mov	r3, r2
 8006568:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006570:	b2db      	uxtb	r3, r3
 8006572:	2b20      	cmp	r3, #32
 8006574:	d166      	bne.n	8006644 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d002      	beq.n	8006582 <HAL_UART_Receive_DMA+0x26>
 800657c:	88fb      	ldrh	r3, [r7, #6]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d101      	bne.n	8006586 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006582:	2301      	movs	r3, #1
 8006584:	e05f      	b.n	8006646 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800658c:	2b01      	cmp	r3, #1
 800658e:	d101      	bne.n	8006594 <HAL_UART_Receive_DMA+0x38>
 8006590:	2302      	movs	r3, #2
 8006592:	e058      	b.n	8006646 <HAL_UART_Receive_DMA+0xea>
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2201      	movs	r2, #1
 8006598:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800659c:	68ba      	ldr	r2, [r7, #8]
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	88fa      	ldrh	r2, [r7, #6]
 80065a6:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	2200      	movs	r2, #0
 80065ac:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2222      	movs	r2, #34	; 0x22
 80065b2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065ba:	4a25      	ldr	r2, [pc, #148]	; (8006650 <HAL_UART_Receive_DMA+0xf4>)
 80065bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065c2:	4a24      	ldr	r2, [pc, #144]	; (8006654 <HAL_UART_Receive_DMA+0xf8>)
 80065c4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065ca:	4a23      	ldr	r2, [pc, #140]	; (8006658 <HAL_UART_Receive_DMA+0xfc>)
 80065cc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065d2:	2200      	movs	r2, #0
 80065d4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 80065d6:	f107 0308 	add.w	r3, r7, #8
 80065da:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	3304      	adds	r3, #4
 80065e6:	4619      	mov	r1, r3
 80065e8:	697b      	ldr	r3, [r7, #20]
 80065ea:	681a      	ldr	r2, [r3, #0]
 80065ec:	88fb      	ldrh	r3, [r7, #6]
 80065ee:	f7fb f829 	bl	8001644 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 80065f2:	2300      	movs	r3, #0
 80065f4:	613b      	str	r3, [r7, #16]
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	613b      	str	r3, [r7, #16]
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	613b      	str	r3, [r7, #16]
 8006606:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	2200      	movs	r2, #0
 800660c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	68da      	ldr	r2, [r3, #12]
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800661e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	695a      	ldr	r2, [r3, #20]
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f042 0201 	orr.w	r2, r2, #1
 800662e:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	695a      	ldr	r2, [r3, #20]
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800663e:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8006640:	2300      	movs	r3, #0
 8006642:	e000      	b.n	8006646 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8006644:	2302      	movs	r3, #2
  }
}
 8006646:	4618      	mov	r0, r3
 8006648:	3718      	adds	r7, #24
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}
 800664e:	bf00      	nop
 8006650:	080068a5 	.word	0x080068a5
 8006654:	0800690d 	.word	0x0800690d
 8006658:	08006929 	.word	0x08006929

0800665c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b088      	sub	sp, #32
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	68db      	ldr	r3, [r3, #12]
 8006672:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	695b      	ldr	r3, [r3, #20]
 800667a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800667c:	2300      	movs	r3, #0
 800667e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8006680:	2300      	movs	r3, #0
 8006682:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006684:	69fb      	ldr	r3, [r7, #28]
 8006686:	f003 030f 	and.w	r3, r3, #15
 800668a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d10d      	bne.n	80066ae <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006692:	69fb      	ldr	r3, [r7, #28]
 8006694:	f003 0320 	and.w	r3, r3, #32
 8006698:	2b00      	cmp	r3, #0
 800669a:	d008      	beq.n	80066ae <HAL_UART_IRQHandler+0x52>
 800669c:	69bb      	ldr	r3, [r7, #24]
 800669e:	f003 0320 	and.w	r3, r3, #32
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d003      	beq.n	80066ae <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f000 fa88 	bl	8006bbc <UART_Receive_IT>
      return;
 80066ac:	e0cc      	b.n	8006848 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80066ae:	693b      	ldr	r3, [r7, #16]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	f000 80ab 	beq.w	800680c <HAL_UART_IRQHandler+0x1b0>
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	f003 0301 	and.w	r3, r3, #1
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d105      	bne.n	80066cc <HAL_UART_IRQHandler+0x70>
 80066c0:	69bb      	ldr	r3, [r7, #24]
 80066c2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	f000 80a0 	beq.w	800680c <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80066cc:	69fb      	ldr	r3, [r7, #28]
 80066ce:	f003 0301 	and.w	r3, r3, #1
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d00a      	beq.n	80066ec <HAL_UART_IRQHandler+0x90>
 80066d6:	69bb      	ldr	r3, [r7, #24]
 80066d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d005      	beq.n	80066ec <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066e4:	f043 0201 	orr.w	r2, r3, #1
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80066ec:	69fb      	ldr	r3, [r7, #28]
 80066ee:	f003 0304 	and.w	r3, r3, #4
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d00a      	beq.n	800670c <HAL_UART_IRQHandler+0xb0>
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	f003 0301 	and.w	r3, r3, #1
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d005      	beq.n	800670c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006704:	f043 0202 	orr.w	r2, r3, #2
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800670c:	69fb      	ldr	r3, [r7, #28]
 800670e:	f003 0302 	and.w	r3, r3, #2
 8006712:	2b00      	cmp	r3, #0
 8006714:	d00a      	beq.n	800672c <HAL_UART_IRQHandler+0xd0>
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	f003 0301 	and.w	r3, r3, #1
 800671c:	2b00      	cmp	r3, #0
 800671e:	d005      	beq.n	800672c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006724:	f043 0204 	orr.w	r2, r3, #4
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800672c:	69fb      	ldr	r3, [r7, #28]
 800672e:	f003 0308 	and.w	r3, r3, #8
 8006732:	2b00      	cmp	r3, #0
 8006734:	d00a      	beq.n	800674c <HAL_UART_IRQHandler+0xf0>
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	f003 0301 	and.w	r3, r3, #1
 800673c:	2b00      	cmp	r3, #0
 800673e:	d005      	beq.n	800674c <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006744:	f043 0208 	orr.w	r2, r3, #8
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006750:	2b00      	cmp	r3, #0
 8006752:	d078      	beq.n	8006846 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006754:	69fb      	ldr	r3, [r7, #28]
 8006756:	f003 0320 	and.w	r3, r3, #32
 800675a:	2b00      	cmp	r3, #0
 800675c:	d007      	beq.n	800676e <HAL_UART_IRQHandler+0x112>
 800675e:	69bb      	ldr	r3, [r7, #24]
 8006760:	f003 0320 	and.w	r3, r3, #32
 8006764:	2b00      	cmp	r3, #0
 8006766:	d002      	beq.n	800676e <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f000 fa27 	bl	8006bbc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	695b      	ldr	r3, [r3, #20]
 8006774:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006778:	2b40      	cmp	r3, #64	; 0x40
 800677a:	bf0c      	ite	eq
 800677c:	2301      	moveq	r3, #1
 800677e:	2300      	movne	r3, #0
 8006780:	b2db      	uxtb	r3, r3
 8006782:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006788:	f003 0308 	and.w	r3, r3, #8
 800678c:	2b00      	cmp	r3, #0
 800678e:	d102      	bne.n	8006796 <HAL_UART_IRQHandler+0x13a>
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d031      	beq.n	80067fa <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f000 f970 	bl	8006a7c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	695b      	ldr	r3, [r3, #20]
 80067a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067a6:	2b40      	cmp	r3, #64	; 0x40
 80067a8:	d123      	bne.n	80067f2 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	695a      	ldr	r2, [r3, #20]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067b8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d013      	beq.n	80067ea <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067c6:	4a22      	ldr	r2, [pc, #136]	; (8006850 <HAL_UART_IRQHandler+0x1f4>)
 80067c8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067ce:	4618      	mov	r0, r3
 80067d0:	f7fa ff98 	bl	8001704 <HAL_DMA_Abort_IT>
 80067d4:	4603      	mov	r3, r0
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d016      	beq.n	8006808 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067e0:	687a      	ldr	r2, [r7, #4]
 80067e2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80067e4:	4610      	mov	r0, r2
 80067e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067e8:	e00e      	b.n	8006808 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f000 f850 	bl	8006890 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067f0:	e00a      	b.n	8006808 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f000 f84c 	bl	8006890 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067f8:	e006      	b.n	8006808 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f000 f848 	bl	8006890 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2200      	movs	r2, #0
 8006804:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8006806:	e01e      	b.n	8006846 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006808:	bf00      	nop
    return;
 800680a:	e01c      	b.n	8006846 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800680c:	69fb      	ldr	r3, [r7, #28]
 800680e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006812:	2b00      	cmp	r3, #0
 8006814:	d008      	beq.n	8006828 <HAL_UART_IRQHandler+0x1cc>
 8006816:	69bb      	ldr	r3, [r7, #24]
 8006818:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800681c:	2b00      	cmp	r3, #0
 800681e:	d003      	beq.n	8006828 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f000 f95d 	bl	8006ae0 <UART_Transmit_IT>
    return;
 8006826:	e00f      	b.n	8006848 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006828:	69fb      	ldr	r3, [r7, #28]
 800682a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800682e:	2b00      	cmp	r3, #0
 8006830:	d00a      	beq.n	8006848 <HAL_UART_IRQHandler+0x1ec>
 8006832:	69bb      	ldr	r3, [r7, #24]
 8006834:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006838:	2b00      	cmp	r3, #0
 800683a:	d005      	beq.n	8006848 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f000 f9a5 	bl	8006b8c <UART_EndTransmit_IT>
    return;
 8006842:	bf00      	nop
 8006844:	e000      	b.n	8006848 <HAL_UART_IRQHandler+0x1ec>
    return;
 8006846:	bf00      	nop
  }
}
 8006848:	3720      	adds	r7, #32
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}
 800684e:	bf00      	nop
 8006850:	08006ab9 	.word	0x08006ab9

08006854 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006854:	b480      	push	{r7}
 8006856:	b083      	sub	sp, #12
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800685c:	bf00      	nop
 800685e:	370c      	adds	r7, #12
 8006860:	46bd      	mov	sp, r7
 8006862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006866:	4770      	bx	lr

08006868 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006868:	b480      	push	{r7}
 800686a:	b083      	sub	sp, #12
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006870:	bf00      	nop
 8006872:	370c      	adds	r7, #12
 8006874:	46bd      	mov	sp, r7
 8006876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687a:	4770      	bx	lr

0800687c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800687c:	b480      	push	{r7}
 800687e:	b083      	sub	sp, #12
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006884:	bf00      	nop
 8006886:	370c      	adds	r7, #12
 8006888:	46bd      	mov	sp, r7
 800688a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688e:	4770      	bx	lr

08006890 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006890:	b480      	push	{r7}
 8006892:	b083      	sub	sp, #12
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006898:	bf00      	nop
 800689a:	370c      	adds	r7, #12
 800689c:	46bd      	mov	sp, r7
 800689e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a2:	4770      	bx	lr

080068a4 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b084      	sub	sp, #16
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068b0:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d11e      	bne.n	80068fe <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	2200      	movs	r2, #0
 80068c4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	68da      	ldr	r2, [r3, #12]
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80068d4:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	695a      	ldr	r2, [r3, #20]
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f022 0201 	bic.w	r2, r2, #1
 80068e4:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	695a      	ldr	r2, [r3, #20]
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068f4:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	2220      	movs	r2, #32
 80068fa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80068fe:	68f8      	ldr	r0, [r7, #12]
 8006900:	f7ff ffb2 	bl	8006868 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006904:	bf00      	nop
 8006906:	3710      	adds	r7, #16
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}

0800690c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b084      	sub	sp, #16
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006918:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800691a:	68f8      	ldr	r0, [r7, #12]
 800691c:	f7ff ffae 	bl	800687c <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006920:	bf00      	nop
 8006922:	3710      	adds	r7, #16
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}

08006928 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b084      	sub	sp, #16
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006930:	2300      	movs	r3, #0
 8006932:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006938:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	695b      	ldr	r3, [r3, #20]
 8006940:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006944:	2b80      	cmp	r3, #128	; 0x80
 8006946:	bf0c      	ite	eq
 8006948:	2301      	moveq	r3, #1
 800694a:	2300      	movne	r3, #0
 800694c:	b2db      	uxtb	r3, r3
 800694e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006956:	b2db      	uxtb	r3, r3
 8006958:	2b21      	cmp	r3, #33	; 0x21
 800695a:	d108      	bne.n	800696e <UART_DMAError+0x46>
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d005      	beq.n	800696e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	2200      	movs	r2, #0
 8006966:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006968:	68b8      	ldr	r0, [r7, #8]
 800696a:	f000 f871 	bl	8006a50 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	695b      	ldr	r3, [r3, #20]
 8006974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006978:	2b40      	cmp	r3, #64	; 0x40
 800697a:	bf0c      	ite	eq
 800697c:	2301      	moveq	r3, #1
 800697e:	2300      	movne	r3, #0
 8006980:	b2db      	uxtb	r3, r3
 8006982:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800698a:	b2db      	uxtb	r3, r3
 800698c:	2b22      	cmp	r3, #34	; 0x22
 800698e:	d108      	bne.n	80069a2 <UART_DMAError+0x7a>
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d005      	beq.n	80069a2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	2200      	movs	r2, #0
 800699a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800699c:	68b8      	ldr	r0, [r7, #8]
 800699e:	f000 f86d 	bl	8006a7c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069a6:	f043 0210 	orr.w	r2, r3, #16
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80069ae:	68b8      	ldr	r0, [r7, #8]
 80069b0:	f7ff ff6e 	bl	8006890 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80069b4:	bf00      	nop
 80069b6:	3710      	adds	r7, #16
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}

080069bc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b084      	sub	sp, #16
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	60f8      	str	r0, [r7, #12]
 80069c4:	60b9      	str	r1, [r7, #8]
 80069c6:	603b      	str	r3, [r7, #0]
 80069c8:	4613      	mov	r3, r2
 80069ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069cc:	e02c      	b.n	8006a28 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069ce:	69bb      	ldr	r3, [r7, #24]
 80069d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069d4:	d028      	beq.n	8006a28 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80069d6:	69bb      	ldr	r3, [r7, #24]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d007      	beq.n	80069ec <UART_WaitOnFlagUntilTimeout+0x30>
 80069dc:	f7fa fb1a 	bl	8001014 <HAL_GetTick>
 80069e0:	4602      	mov	r2, r0
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	1ad3      	subs	r3, r2, r3
 80069e6:	69ba      	ldr	r2, [r7, #24]
 80069e8:	429a      	cmp	r2, r3
 80069ea:	d21d      	bcs.n	8006a28 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	68da      	ldr	r2, [r3, #12]
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80069fa:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	695a      	ldr	r2, [r3, #20]
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f022 0201 	bic.w	r2, r2, #1
 8006a0a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	2220      	movs	r2, #32
 8006a10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	2220      	movs	r2, #32
 8006a18:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8006a24:	2303      	movs	r3, #3
 8006a26:	e00f      	b.n	8006a48 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	681a      	ldr	r2, [r3, #0]
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	4013      	ands	r3, r2
 8006a32:	68ba      	ldr	r2, [r7, #8]
 8006a34:	429a      	cmp	r2, r3
 8006a36:	bf0c      	ite	eq
 8006a38:	2301      	moveq	r3, #1
 8006a3a:	2300      	movne	r3, #0
 8006a3c:	b2db      	uxtb	r3, r3
 8006a3e:	461a      	mov	r2, r3
 8006a40:	79fb      	ldrb	r3, [r7, #7]
 8006a42:	429a      	cmp	r2, r3
 8006a44:	d0c3      	beq.n	80069ce <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006a46:	2300      	movs	r3, #0
}
 8006a48:	4618      	mov	r0, r3
 8006a4a:	3710      	adds	r7, #16
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bd80      	pop	{r7, pc}

08006a50 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006a50:	b480      	push	{r7}
 8006a52:	b083      	sub	sp, #12
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	68da      	ldr	r2, [r3, #12]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8006a66:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2220      	movs	r2, #32
 8006a6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8006a70:	bf00      	nop
 8006a72:	370c      	adds	r7, #12
 8006a74:	46bd      	mov	sp, r7
 8006a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7a:	4770      	bx	lr

08006a7c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b083      	sub	sp, #12
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	68da      	ldr	r2, [r3, #12]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006a92:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	695a      	ldr	r2, [r3, #20]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f022 0201 	bic.w	r2, r2, #1
 8006aa2:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2220      	movs	r2, #32
 8006aa8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8006aac:	bf00      	nop
 8006aae:	370c      	adds	r7, #12
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab6:	4770      	bx	lr

08006ab8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b084      	sub	sp, #16
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ac4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006ad2:	68f8      	ldr	r0, [r7, #12]
 8006ad4:	f7ff fedc 	bl	8006890 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ad8:	bf00      	nop
 8006ada:	3710      	adds	r7, #16
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bd80      	pop	{r7, pc}

08006ae0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b085      	sub	sp, #20
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006aee:	b2db      	uxtb	r3, r3
 8006af0:	2b21      	cmp	r3, #33	; 0x21
 8006af2:	d144      	bne.n	8006b7e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	689b      	ldr	r3, [r3, #8]
 8006af8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006afc:	d11a      	bne.n	8006b34 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6a1b      	ldr	r3, [r3, #32]
 8006b02:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	881b      	ldrh	r3, [r3, #0]
 8006b08:	461a      	mov	r2, r3
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b12:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	691b      	ldr	r3, [r3, #16]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d105      	bne.n	8006b28 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6a1b      	ldr	r3, [r3, #32]
 8006b20:	1c9a      	adds	r2, r3, #2
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	621a      	str	r2, [r3, #32]
 8006b26:	e00e      	b.n	8006b46 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6a1b      	ldr	r3, [r3, #32]
 8006b2c:	1c5a      	adds	r2, r3, #1
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	621a      	str	r2, [r3, #32]
 8006b32:	e008      	b.n	8006b46 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6a1b      	ldr	r3, [r3, #32]
 8006b38:	1c59      	adds	r1, r3, #1
 8006b3a:	687a      	ldr	r2, [r7, #4]
 8006b3c:	6211      	str	r1, [r2, #32]
 8006b3e:	781a      	ldrb	r2, [r3, #0]
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006b4a:	b29b      	uxth	r3, r3
 8006b4c:	3b01      	subs	r3, #1
 8006b4e:	b29b      	uxth	r3, r3
 8006b50:	687a      	ldr	r2, [r7, #4]
 8006b52:	4619      	mov	r1, r3
 8006b54:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d10f      	bne.n	8006b7a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	68da      	ldr	r2, [r3, #12]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006b68:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	68da      	ldr	r2, [r3, #12]
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b78:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	e000      	b.n	8006b80 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006b7e:	2302      	movs	r3, #2
  }
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	3714      	adds	r7, #20
 8006b84:	46bd      	mov	sp, r7
 8006b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8a:	4770      	bx	lr

08006b8c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b082      	sub	sp, #8
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	68da      	ldr	r2, [r3, #12]
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ba2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2220      	movs	r2, #32
 8006ba8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	f7ff fe51 	bl	8006854 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006bb2:	2300      	movs	r3, #0
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	3708      	adds	r7, #8
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd80      	pop	{r7, pc}

08006bbc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b084      	sub	sp, #16
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006bca:	b2db      	uxtb	r3, r3
 8006bcc:	2b22      	cmp	r3, #34	; 0x22
 8006bce:	d171      	bne.n	8006cb4 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	689b      	ldr	r3, [r3, #8]
 8006bd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bd8:	d123      	bne.n	8006c22 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bde:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	691b      	ldr	r3, [r3, #16]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d10e      	bne.n	8006c06 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	b29b      	uxth	r3, r3
 8006bf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bf4:	b29a      	uxth	r2, r3
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bfe:	1c9a      	adds	r2, r3, #2
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	629a      	str	r2, [r3, #40]	; 0x28
 8006c04:	e029      	b.n	8006c5a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	b29b      	uxth	r3, r3
 8006c0e:	b2db      	uxtb	r3, r3
 8006c10:	b29a      	uxth	r2, r3
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c1a:	1c5a      	adds	r2, r3, #1
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	629a      	str	r2, [r3, #40]	; 0x28
 8006c20:	e01b      	b.n	8006c5a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	691b      	ldr	r3, [r3, #16]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d10a      	bne.n	8006c40 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	6858      	ldr	r0, [r3, #4]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c34:	1c59      	adds	r1, r3, #1
 8006c36:	687a      	ldr	r2, [r7, #4]
 8006c38:	6291      	str	r1, [r2, #40]	; 0x28
 8006c3a:	b2c2      	uxtb	r2, r0
 8006c3c:	701a      	strb	r2, [r3, #0]
 8006c3e:	e00c      	b.n	8006c5a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	685b      	ldr	r3, [r3, #4]
 8006c46:	b2da      	uxtb	r2, r3
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c4c:	1c58      	adds	r0, r3, #1
 8006c4e:	6879      	ldr	r1, [r7, #4]
 8006c50:	6288      	str	r0, [r1, #40]	; 0x28
 8006c52:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006c56:	b2d2      	uxtb	r2, r2
 8006c58:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c5e:	b29b      	uxth	r3, r3
 8006c60:	3b01      	subs	r3, #1
 8006c62:	b29b      	uxth	r3, r3
 8006c64:	687a      	ldr	r2, [r7, #4]
 8006c66:	4619      	mov	r1, r3
 8006c68:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d120      	bne.n	8006cb0 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	68da      	ldr	r2, [r3, #12]
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f022 0220 	bic.w	r2, r2, #32
 8006c7c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	68da      	ldr	r2, [r3, #12]
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006c8c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	695a      	ldr	r2, [r3, #20]
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f022 0201 	bic.w	r2, r2, #1
 8006c9c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2220      	movs	r2, #32
 8006ca2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f7ff fdde 	bl	8006868 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8006cac:	2300      	movs	r3, #0
 8006cae:	e002      	b.n	8006cb6 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	e000      	b.n	8006cb6 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8006cb4:	2302      	movs	r3, #2
  }
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	3710      	adds	r7, #16
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd80      	pop	{r7, pc}
	...

08006cc0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006cc0:	b5b0      	push	{r4, r5, r7, lr}
 8006cc2:	b084      	sub	sp, #16
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	691b      	ldr	r3, [r3, #16]
 8006cce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	68da      	ldr	r2, [r3, #12]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	430a      	orrs	r2, r1
 8006cdc:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	689a      	ldr	r2, [r3, #8]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	691b      	ldr	r3, [r3, #16]
 8006ce6:	431a      	orrs	r2, r3
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	695b      	ldr	r3, [r3, #20]
 8006cec:	431a      	orrs	r2, r3
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	69db      	ldr	r3, [r3, #28]
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	68db      	ldr	r3, [r3, #12]
 8006cfc:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006d00:	f023 030c 	bic.w	r3, r3, #12
 8006d04:	687a      	ldr	r2, [r7, #4]
 8006d06:	6812      	ldr	r2, [r2, #0]
 8006d08:	68f9      	ldr	r1, [r7, #12]
 8006d0a:	430b      	orrs	r3, r1
 8006d0c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	695b      	ldr	r3, [r3, #20]
 8006d14:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	699a      	ldr	r2, [r3, #24]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	430a      	orrs	r2, r1
 8006d22:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	69db      	ldr	r3, [r3, #28]
 8006d28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d2c:	f040 80e4 	bne.w	8006ef8 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4aab      	ldr	r2, [pc, #684]	; (8006fe4 <UART_SetConfig+0x324>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d004      	beq.n	8006d44 <UART_SetConfig+0x84>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4aaa      	ldr	r2, [pc, #680]	; (8006fe8 <UART_SetConfig+0x328>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d16c      	bne.n	8006e1e <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8006d44:	f7fe fc04 	bl	8005550 <HAL_RCC_GetPCLK2Freq>
 8006d48:	4602      	mov	r2, r0
 8006d4a:	4613      	mov	r3, r2
 8006d4c:	009b      	lsls	r3, r3, #2
 8006d4e:	4413      	add	r3, r2
 8006d50:	009a      	lsls	r2, r3, #2
 8006d52:	441a      	add	r2, r3
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	685b      	ldr	r3, [r3, #4]
 8006d58:	005b      	lsls	r3, r3, #1
 8006d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d5e:	4aa3      	ldr	r2, [pc, #652]	; (8006fec <UART_SetConfig+0x32c>)
 8006d60:	fba2 2303 	umull	r2, r3, r2, r3
 8006d64:	095b      	lsrs	r3, r3, #5
 8006d66:	011c      	lsls	r4, r3, #4
 8006d68:	f7fe fbf2 	bl	8005550 <HAL_RCC_GetPCLK2Freq>
 8006d6c:	4602      	mov	r2, r0
 8006d6e:	4613      	mov	r3, r2
 8006d70:	009b      	lsls	r3, r3, #2
 8006d72:	4413      	add	r3, r2
 8006d74:	009a      	lsls	r2, r3, #2
 8006d76:	441a      	add	r2, r3
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	685b      	ldr	r3, [r3, #4]
 8006d7c:	005b      	lsls	r3, r3, #1
 8006d7e:	fbb2 f5f3 	udiv	r5, r2, r3
 8006d82:	f7fe fbe5 	bl	8005550 <HAL_RCC_GetPCLK2Freq>
 8006d86:	4602      	mov	r2, r0
 8006d88:	4613      	mov	r3, r2
 8006d8a:	009b      	lsls	r3, r3, #2
 8006d8c:	4413      	add	r3, r2
 8006d8e:	009a      	lsls	r2, r3, #2
 8006d90:	441a      	add	r2, r3
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	005b      	lsls	r3, r3, #1
 8006d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d9c:	4a93      	ldr	r2, [pc, #588]	; (8006fec <UART_SetConfig+0x32c>)
 8006d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8006da2:	095b      	lsrs	r3, r3, #5
 8006da4:	2264      	movs	r2, #100	; 0x64
 8006da6:	fb02 f303 	mul.w	r3, r2, r3
 8006daa:	1aeb      	subs	r3, r5, r3
 8006dac:	00db      	lsls	r3, r3, #3
 8006dae:	3332      	adds	r3, #50	; 0x32
 8006db0:	4a8e      	ldr	r2, [pc, #568]	; (8006fec <UART_SetConfig+0x32c>)
 8006db2:	fba2 2303 	umull	r2, r3, r2, r3
 8006db6:	095b      	lsrs	r3, r3, #5
 8006db8:	005b      	lsls	r3, r3, #1
 8006dba:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006dbe:	441c      	add	r4, r3
 8006dc0:	f7fe fbc6 	bl	8005550 <HAL_RCC_GetPCLK2Freq>
 8006dc4:	4602      	mov	r2, r0
 8006dc6:	4613      	mov	r3, r2
 8006dc8:	009b      	lsls	r3, r3, #2
 8006dca:	4413      	add	r3, r2
 8006dcc:	009a      	lsls	r2, r3, #2
 8006dce:	441a      	add	r2, r3
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	005b      	lsls	r3, r3, #1
 8006dd6:	fbb2 f5f3 	udiv	r5, r2, r3
 8006dda:	f7fe fbb9 	bl	8005550 <HAL_RCC_GetPCLK2Freq>
 8006dde:	4602      	mov	r2, r0
 8006de0:	4613      	mov	r3, r2
 8006de2:	009b      	lsls	r3, r3, #2
 8006de4:	4413      	add	r3, r2
 8006de6:	009a      	lsls	r2, r3, #2
 8006de8:	441a      	add	r2, r3
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	685b      	ldr	r3, [r3, #4]
 8006dee:	005b      	lsls	r3, r3, #1
 8006df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006df4:	4a7d      	ldr	r2, [pc, #500]	; (8006fec <UART_SetConfig+0x32c>)
 8006df6:	fba2 2303 	umull	r2, r3, r2, r3
 8006dfa:	095b      	lsrs	r3, r3, #5
 8006dfc:	2264      	movs	r2, #100	; 0x64
 8006dfe:	fb02 f303 	mul.w	r3, r2, r3
 8006e02:	1aeb      	subs	r3, r5, r3
 8006e04:	00db      	lsls	r3, r3, #3
 8006e06:	3332      	adds	r3, #50	; 0x32
 8006e08:	4a78      	ldr	r2, [pc, #480]	; (8006fec <UART_SetConfig+0x32c>)
 8006e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8006e0e:	095b      	lsrs	r3, r3, #5
 8006e10:	f003 0207 	and.w	r2, r3, #7
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4422      	add	r2, r4
 8006e1a:	609a      	str	r2, [r3, #8]
 8006e1c:	e154      	b.n	80070c8 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8006e1e:	f7fe fb83 	bl	8005528 <HAL_RCC_GetPCLK1Freq>
 8006e22:	4602      	mov	r2, r0
 8006e24:	4613      	mov	r3, r2
 8006e26:	009b      	lsls	r3, r3, #2
 8006e28:	4413      	add	r3, r2
 8006e2a:	009a      	lsls	r2, r3, #2
 8006e2c:	441a      	add	r2, r3
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	685b      	ldr	r3, [r3, #4]
 8006e32:	005b      	lsls	r3, r3, #1
 8006e34:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e38:	4a6c      	ldr	r2, [pc, #432]	; (8006fec <UART_SetConfig+0x32c>)
 8006e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8006e3e:	095b      	lsrs	r3, r3, #5
 8006e40:	011c      	lsls	r4, r3, #4
 8006e42:	f7fe fb71 	bl	8005528 <HAL_RCC_GetPCLK1Freq>
 8006e46:	4602      	mov	r2, r0
 8006e48:	4613      	mov	r3, r2
 8006e4a:	009b      	lsls	r3, r3, #2
 8006e4c:	4413      	add	r3, r2
 8006e4e:	009a      	lsls	r2, r3, #2
 8006e50:	441a      	add	r2, r3
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	685b      	ldr	r3, [r3, #4]
 8006e56:	005b      	lsls	r3, r3, #1
 8006e58:	fbb2 f5f3 	udiv	r5, r2, r3
 8006e5c:	f7fe fb64 	bl	8005528 <HAL_RCC_GetPCLK1Freq>
 8006e60:	4602      	mov	r2, r0
 8006e62:	4613      	mov	r3, r2
 8006e64:	009b      	lsls	r3, r3, #2
 8006e66:	4413      	add	r3, r2
 8006e68:	009a      	lsls	r2, r3, #2
 8006e6a:	441a      	add	r2, r3
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	685b      	ldr	r3, [r3, #4]
 8006e70:	005b      	lsls	r3, r3, #1
 8006e72:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e76:	4a5d      	ldr	r2, [pc, #372]	; (8006fec <UART_SetConfig+0x32c>)
 8006e78:	fba2 2303 	umull	r2, r3, r2, r3
 8006e7c:	095b      	lsrs	r3, r3, #5
 8006e7e:	2264      	movs	r2, #100	; 0x64
 8006e80:	fb02 f303 	mul.w	r3, r2, r3
 8006e84:	1aeb      	subs	r3, r5, r3
 8006e86:	00db      	lsls	r3, r3, #3
 8006e88:	3332      	adds	r3, #50	; 0x32
 8006e8a:	4a58      	ldr	r2, [pc, #352]	; (8006fec <UART_SetConfig+0x32c>)
 8006e8c:	fba2 2303 	umull	r2, r3, r2, r3
 8006e90:	095b      	lsrs	r3, r3, #5
 8006e92:	005b      	lsls	r3, r3, #1
 8006e94:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006e98:	441c      	add	r4, r3
 8006e9a:	f7fe fb45 	bl	8005528 <HAL_RCC_GetPCLK1Freq>
 8006e9e:	4602      	mov	r2, r0
 8006ea0:	4613      	mov	r3, r2
 8006ea2:	009b      	lsls	r3, r3, #2
 8006ea4:	4413      	add	r3, r2
 8006ea6:	009a      	lsls	r2, r3, #2
 8006ea8:	441a      	add	r2, r3
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	685b      	ldr	r3, [r3, #4]
 8006eae:	005b      	lsls	r3, r3, #1
 8006eb0:	fbb2 f5f3 	udiv	r5, r2, r3
 8006eb4:	f7fe fb38 	bl	8005528 <HAL_RCC_GetPCLK1Freq>
 8006eb8:	4602      	mov	r2, r0
 8006eba:	4613      	mov	r3, r2
 8006ebc:	009b      	lsls	r3, r3, #2
 8006ebe:	4413      	add	r3, r2
 8006ec0:	009a      	lsls	r2, r3, #2
 8006ec2:	441a      	add	r2, r3
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	685b      	ldr	r3, [r3, #4]
 8006ec8:	005b      	lsls	r3, r3, #1
 8006eca:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ece:	4a47      	ldr	r2, [pc, #284]	; (8006fec <UART_SetConfig+0x32c>)
 8006ed0:	fba2 2303 	umull	r2, r3, r2, r3
 8006ed4:	095b      	lsrs	r3, r3, #5
 8006ed6:	2264      	movs	r2, #100	; 0x64
 8006ed8:	fb02 f303 	mul.w	r3, r2, r3
 8006edc:	1aeb      	subs	r3, r5, r3
 8006ede:	00db      	lsls	r3, r3, #3
 8006ee0:	3332      	adds	r3, #50	; 0x32
 8006ee2:	4a42      	ldr	r2, [pc, #264]	; (8006fec <UART_SetConfig+0x32c>)
 8006ee4:	fba2 2303 	umull	r2, r3, r2, r3
 8006ee8:	095b      	lsrs	r3, r3, #5
 8006eea:	f003 0207 	and.w	r2, r3, #7
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4422      	add	r2, r4
 8006ef4:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8006ef6:	e0e7      	b.n	80070c8 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4a39      	ldr	r2, [pc, #228]	; (8006fe4 <UART_SetConfig+0x324>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d004      	beq.n	8006f0c <UART_SetConfig+0x24c>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a38      	ldr	r2, [pc, #224]	; (8006fe8 <UART_SetConfig+0x328>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d171      	bne.n	8006ff0 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8006f0c:	f7fe fb20 	bl	8005550 <HAL_RCC_GetPCLK2Freq>
 8006f10:	4602      	mov	r2, r0
 8006f12:	4613      	mov	r3, r2
 8006f14:	009b      	lsls	r3, r3, #2
 8006f16:	4413      	add	r3, r2
 8006f18:	009a      	lsls	r2, r3, #2
 8006f1a:	441a      	add	r2, r3
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	685b      	ldr	r3, [r3, #4]
 8006f20:	009b      	lsls	r3, r3, #2
 8006f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f26:	4a31      	ldr	r2, [pc, #196]	; (8006fec <UART_SetConfig+0x32c>)
 8006f28:	fba2 2303 	umull	r2, r3, r2, r3
 8006f2c:	095b      	lsrs	r3, r3, #5
 8006f2e:	011c      	lsls	r4, r3, #4
 8006f30:	f7fe fb0e 	bl	8005550 <HAL_RCC_GetPCLK2Freq>
 8006f34:	4602      	mov	r2, r0
 8006f36:	4613      	mov	r3, r2
 8006f38:	009b      	lsls	r3, r3, #2
 8006f3a:	4413      	add	r3, r2
 8006f3c:	009a      	lsls	r2, r3, #2
 8006f3e:	441a      	add	r2, r3
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	009b      	lsls	r3, r3, #2
 8006f46:	fbb2 f5f3 	udiv	r5, r2, r3
 8006f4a:	f7fe fb01 	bl	8005550 <HAL_RCC_GetPCLK2Freq>
 8006f4e:	4602      	mov	r2, r0
 8006f50:	4613      	mov	r3, r2
 8006f52:	009b      	lsls	r3, r3, #2
 8006f54:	4413      	add	r3, r2
 8006f56:	009a      	lsls	r2, r3, #2
 8006f58:	441a      	add	r2, r3
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	009b      	lsls	r3, r3, #2
 8006f60:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f64:	4a21      	ldr	r2, [pc, #132]	; (8006fec <UART_SetConfig+0x32c>)
 8006f66:	fba2 2303 	umull	r2, r3, r2, r3
 8006f6a:	095b      	lsrs	r3, r3, #5
 8006f6c:	2264      	movs	r2, #100	; 0x64
 8006f6e:	fb02 f303 	mul.w	r3, r2, r3
 8006f72:	1aeb      	subs	r3, r5, r3
 8006f74:	011b      	lsls	r3, r3, #4
 8006f76:	3332      	adds	r3, #50	; 0x32
 8006f78:	4a1c      	ldr	r2, [pc, #112]	; (8006fec <UART_SetConfig+0x32c>)
 8006f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8006f7e:	095b      	lsrs	r3, r3, #5
 8006f80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006f84:	441c      	add	r4, r3
 8006f86:	f7fe fae3 	bl	8005550 <HAL_RCC_GetPCLK2Freq>
 8006f8a:	4602      	mov	r2, r0
 8006f8c:	4613      	mov	r3, r2
 8006f8e:	009b      	lsls	r3, r3, #2
 8006f90:	4413      	add	r3, r2
 8006f92:	009a      	lsls	r2, r3, #2
 8006f94:	441a      	add	r2, r3
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	685b      	ldr	r3, [r3, #4]
 8006f9a:	009b      	lsls	r3, r3, #2
 8006f9c:	fbb2 f5f3 	udiv	r5, r2, r3
 8006fa0:	f7fe fad6 	bl	8005550 <HAL_RCC_GetPCLK2Freq>
 8006fa4:	4602      	mov	r2, r0
 8006fa6:	4613      	mov	r3, r2
 8006fa8:	009b      	lsls	r3, r3, #2
 8006faa:	4413      	add	r3, r2
 8006fac:	009a      	lsls	r2, r3, #2
 8006fae:	441a      	add	r2, r3
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	685b      	ldr	r3, [r3, #4]
 8006fb4:	009b      	lsls	r3, r3, #2
 8006fb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fba:	4a0c      	ldr	r2, [pc, #48]	; (8006fec <UART_SetConfig+0x32c>)
 8006fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8006fc0:	095b      	lsrs	r3, r3, #5
 8006fc2:	2264      	movs	r2, #100	; 0x64
 8006fc4:	fb02 f303 	mul.w	r3, r2, r3
 8006fc8:	1aeb      	subs	r3, r5, r3
 8006fca:	011b      	lsls	r3, r3, #4
 8006fcc:	3332      	adds	r3, #50	; 0x32
 8006fce:	4a07      	ldr	r2, [pc, #28]	; (8006fec <UART_SetConfig+0x32c>)
 8006fd0:	fba2 2303 	umull	r2, r3, r2, r3
 8006fd4:	095b      	lsrs	r3, r3, #5
 8006fd6:	f003 020f 	and.w	r2, r3, #15
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4422      	add	r2, r4
 8006fe0:	609a      	str	r2, [r3, #8]
 8006fe2:	e071      	b.n	80070c8 <UART_SetConfig+0x408>
 8006fe4:	40011000 	.word	0x40011000
 8006fe8:	40011400 	.word	0x40011400
 8006fec:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8006ff0:	f7fe fa9a 	bl	8005528 <HAL_RCC_GetPCLK1Freq>
 8006ff4:	4602      	mov	r2, r0
 8006ff6:	4613      	mov	r3, r2
 8006ff8:	009b      	lsls	r3, r3, #2
 8006ffa:	4413      	add	r3, r2
 8006ffc:	009a      	lsls	r2, r3, #2
 8006ffe:	441a      	add	r2, r3
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	009b      	lsls	r3, r3, #2
 8007006:	fbb2 f3f3 	udiv	r3, r2, r3
 800700a:	4a31      	ldr	r2, [pc, #196]	; (80070d0 <UART_SetConfig+0x410>)
 800700c:	fba2 2303 	umull	r2, r3, r2, r3
 8007010:	095b      	lsrs	r3, r3, #5
 8007012:	011c      	lsls	r4, r3, #4
 8007014:	f7fe fa88 	bl	8005528 <HAL_RCC_GetPCLK1Freq>
 8007018:	4602      	mov	r2, r0
 800701a:	4613      	mov	r3, r2
 800701c:	009b      	lsls	r3, r3, #2
 800701e:	4413      	add	r3, r2
 8007020:	009a      	lsls	r2, r3, #2
 8007022:	441a      	add	r2, r3
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	685b      	ldr	r3, [r3, #4]
 8007028:	009b      	lsls	r3, r3, #2
 800702a:	fbb2 f5f3 	udiv	r5, r2, r3
 800702e:	f7fe fa7b 	bl	8005528 <HAL_RCC_GetPCLK1Freq>
 8007032:	4602      	mov	r2, r0
 8007034:	4613      	mov	r3, r2
 8007036:	009b      	lsls	r3, r3, #2
 8007038:	4413      	add	r3, r2
 800703a:	009a      	lsls	r2, r3, #2
 800703c:	441a      	add	r2, r3
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	685b      	ldr	r3, [r3, #4]
 8007042:	009b      	lsls	r3, r3, #2
 8007044:	fbb2 f3f3 	udiv	r3, r2, r3
 8007048:	4a21      	ldr	r2, [pc, #132]	; (80070d0 <UART_SetConfig+0x410>)
 800704a:	fba2 2303 	umull	r2, r3, r2, r3
 800704e:	095b      	lsrs	r3, r3, #5
 8007050:	2264      	movs	r2, #100	; 0x64
 8007052:	fb02 f303 	mul.w	r3, r2, r3
 8007056:	1aeb      	subs	r3, r5, r3
 8007058:	011b      	lsls	r3, r3, #4
 800705a:	3332      	adds	r3, #50	; 0x32
 800705c:	4a1c      	ldr	r2, [pc, #112]	; (80070d0 <UART_SetConfig+0x410>)
 800705e:	fba2 2303 	umull	r2, r3, r2, r3
 8007062:	095b      	lsrs	r3, r3, #5
 8007064:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007068:	441c      	add	r4, r3
 800706a:	f7fe fa5d 	bl	8005528 <HAL_RCC_GetPCLK1Freq>
 800706e:	4602      	mov	r2, r0
 8007070:	4613      	mov	r3, r2
 8007072:	009b      	lsls	r3, r3, #2
 8007074:	4413      	add	r3, r2
 8007076:	009a      	lsls	r2, r3, #2
 8007078:	441a      	add	r2, r3
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	685b      	ldr	r3, [r3, #4]
 800707e:	009b      	lsls	r3, r3, #2
 8007080:	fbb2 f5f3 	udiv	r5, r2, r3
 8007084:	f7fe fa50 	bl	8005528 <HAL_RCC_GetPCLK1Freq>
 8007088:	4602      	mov	r2, r0
 800708a:	4613      	mov	r3, r2
 800708c:	009b      	lsls	r3, r3, #2
 800708e:	4413      	add	r3, r2
 8007090:	009a      	lsls	r2, r3, #2
 8007092:	441a      	add	r2, r3
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	685b      	ldr	r3, [r3, #4]
 8007098:	009b      	lsls	r3, r3, #2
 800709a:	fbb2 f3f3 	udiv	r3, r2, r3
 800709e:	4a0c      	ldr	r2, [pc, #48]	; (80070d0 <UART_SetConfig+0x410>)
 80070a0:	fba2 2303 	umull	r2, r3, r2, r3
 80070a4:	095b      	lsrs	r3, r3, #5
 80070a6:	2264      	movs	r2, #100	; 0x64
 80070a8:	fb02 f303 	mul.w	r3, r2, r3
 80070ac:	1aeb      	subs	r3, r5, r3
 80070ae:	011b      	lsls	r3, r3, #4
 80070b0:	3332      	adds	r3, #50	; 0x32
 80070b2:	4a07      	ldr	r2, [pc, #28]	; (80070d0 <UART_SetConfig+0x410>)
 80070b4:	fba2 2303 	umull	r2, r3, r2, r3
 80070b8:	095b      	lsrs	r3, r3, #5
 80070ba:	f003 020f 	and.w	r2, r3, #15
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4422      	add	r2, r4
 80070c4:	609a      	str	r2, [r3, #8]
}
 80070c6:	e7ff      	b.n	80070c8 <UART_SetConfig+0x408>
 80070c8:	bf00      	nop
 80070ca:	3710      	adds	r7, #16
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bdb0      	pop	{r4, r5, r7, pc}
 80070d0:	51eb851f 	.word	0x51eb851f

080070d4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b085      	sub	sp, #20
 80070d8:	af00      	add	r7, sp, #0
 80070da:	4603      	mov	r3, r0
 80070dc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80070de:	2300      	movs	r3, #0
 80070e0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80070e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80070e6:	2b84      	cmp	r3, #132	; 0x84
 80070e8:	d005      	beq.n	80070f6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80070ea:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	4413      	add	r3, r2
 80070f2:	3303      	adds	r3, #3
 80070f4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80070f6:	68fb      	ldr	r3, [r7, #12]
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3714      	adds	r7, #20
 80070fc:	46bd      	mov	sp, r7
 80070fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007102:	4770      	bx	lr

08007104 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8007104:	b480      	push	{r7}
 8007106:	b083      	sub	sp, #12
 8007108:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800710a:	f3ef 8305 	mrs	r3, IPSR
 800710e:	607b      	str	r3, [r7, #4]
  return(result);
 8007110:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8007112:	2b00      	cmp	r3, #0
 8007114:	bf14      	ite	ne
 8007116:	2301      	movne	r3, #1
 8007118:	2300      	moveq	r3, #0
 800711a:	b2db      	uxtb	r3, r3
}
 800711c:	4618      	mov	r0, r3
 800711e:	370c      	adds	r7, #12
 8007120:	46bd      	mov	sp, r7
 8007122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007126:	4770      	bx	lr

08007128 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800712c:	f001 fe2e 	bl	8008d8c <vTaskStartScheduler>
  
  return osOK;
 8007130:	2300      	movs	r3, #0
}
 8007132:	4618      	mov	r0, r3
 8007134:	bd80      	pop	{r7, pc}

08007136 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8007136:	b580      	push	{r7, lr}
 8007138:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800713a:	f7ff ffe3 	bl	8007104 <inHandlerMode>
 800713e:	4603      	mov	r3, r0
 8007140:	2b00      	cmp	r3, #0
 8007142:	d003      	beq.n	800714c <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8007144:	f001 ff3a 	bl	8008fbc <xTaskGetTickCountFromISR>
 8007148:	4603      	mov	r3, r0
 800714a:	e002      	b.n	8007152 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800714c:	f001 ff26 	bl	8008f9c <xTaskGetTickCount>
 8007150:	4603      	mov	r3, r0
  }
}
 8007152:	4618      	mov	r0, r3
 8007154:	bd80      	pop	{r7, pc}

08007156 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007156:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007158:	b089      	sub	sp, #36	; 0x24
 800715a:	af04      	add	r7, sp, #16
 800715c:	6078      	str	r0, [r7, #4]
 800715e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	695b      	ldr	r3, [r3, #20]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d020      	beq.n	80071aa <osThreadCreate+0x54>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	699b      	ldr	r3, [r3, #24]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d01c      	beq.n	80071aa <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	685c      	ldr	r4, [r3, #4]
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681d      	ldr	r5, [r3, #0]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	691e      	ldr	r6, [r3, #16]
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007182:	4618      	mov	r0, r3
 8007184:	f7ff ffa6 	bl	80070d4 <makeFreeRtosPriority>
 8007188:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	695b      	ldr	r3, [r3, #20]
 800718e:	687a      	ldr	r2, [r7, #4]
 8007190:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007192:	9202      	str	r2, [sp, #8]
 8007194:	9301      	str	r3, [sp, #4]
 8007196:	9100      	str	r1, [sp, #0]
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	4632      	mov	r2, r6
 800719c:	4629      	mov	r1, r5
 800719e:	4620      	mov	r0, r4
 80071a0:	f001 fbb3 	bl	800890a <xTaskCreateStatic>
 80071a4:	4603      	mov	r3, r0
 80071a6:	60fb      	str	r3, [r7, #12]
 80071a8:	e01c      	b.n	80071e4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	685c      	ldr	r4, [r3, #4]
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80071b6:	b29e      	uxth	r6, r3
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80071be:	4618      	mov	r0, r3
 80071c0:	f7ff ff88 	bl	80070d4 <makeFreeRtosPriority>
 80071c4:	4602      	mov	r2, r0
 80071c6:	f107 030c 	add.w	r3, r7, #12
 80071ca:	9301      	str	r3, [sp, #4]
 80071cc:	9200      	str	r2, [sp, #0]
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	4632      	mov	r2, r6
 80071d2:	4629      	mov	r1, r5
 80071d4:	4620      	mov	r0, r4
 80071d6:	f001 fbf1 	bl	80089bc <xTaskCreate>
 80071da:	4603      	mov	r3, r0
 80071dc:	2b01      	cmp	r3, #1
 80071de:	d001      	beq.n	80071e4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80071e0:	2300      	movs	r3, #0
 80071e2:	e000      	b.n	80071e6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80071e4:	68fb      	ldr	r3, [r7, #12]
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	3714      	adds	r7, #20
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bdf0      	pop	{r4, r5, r6, r7, pc}

080071ee <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80071ee:	b580      	push	{r7, lr}
 80071f0:	b084      	sub	sp, #16
 80071f2:	af00      	add	r7, sp, #0
 80071f4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d001      	beq.n	8007204 <osDelay+0x16>
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	e000      	b.n	8007206 <osDelay+0x18>
 8007204:	2301      	movs	r3, #1
 8007206:	4618      	mov	r0, r3
 8007208:	f001 fd8c 	bl	8008d24 <vTaskDelay>
  
  return osOK;
 800720c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800720e:	4618      	mov	r0, r3
 8007210:	3710      	adds	r7, #16
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}

08007216 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8007216:	b580      	push	{r7, lr}
 8007218:	b082      	sub	sp, #8
 800721a:	af00      	add	r7, sp, #0
 800721c:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	685b      	ldr	r3, [r3, #4]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d007      	beq.n	8007236 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	685b      	ldr	r3, [r3, #4]
 800722a:	4619      	mov	r1, r3
 800722c:	2001      	movs	r0, #1
 800722e:	f000 fd47 	bl	8007cc0 <xQueueCreateMutexStatic>
 8007232:	4603      	mov	r3, r0
 8007234:	e003      	b.n	800723e <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8007236:	2001      	movs	r0, #1
 8007238:	f000 fd2a 	bl	8007c90 <xQueueCreateMutex>
 800723c:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800723e:	4618      	mov	r0, r3
 8007240:	3708      	adds	r7, #8
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}
	...

08007248 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b084      	sub	sp, #16
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
 8007250:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8007252:	2300      	movs	r3, #0
 8007254:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d101      	bne.n	8007260 <osMutexWait+0x18>
    return osErrorParameter;
 800725c:	2380      	movs	r3, #128	; 0x80
 800725e:	e03a      	b.n	80072d6 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8007260:	2300      	movs	r3, #0
 8007262:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800726a:	d103      	bne.n	8007274 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800726c:	f04f 33ff 	mov.w	r3, #4294967295
 8007270:	60fb      	str	r3, [r7, #12]
 8007272:	e009      	b.n	8007288 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d006      	beq.n	8007288 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d101      	bne.n	8007288 <osMutexWait+0x40>
      ticks = 1;
 8007284:	2301      	movs	r3, #1
 8007286:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8007288:	f7ff ff3c 	bl	8007104 <inHandlerMode>
 800728c:	4603      	mov	r3, r0
 800728e:	2b00      	cmp	r3, #0
 8007290:	d017      	beq.n	80072c2 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8007292:	f107 0308 	add.w	r3, r7, #8
 8007296:	461a      	mov	r2, r3
 8007298:	2100      	movs	r1, #0
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f001 f990 	bl	80085c0 <xQueueReceiveFromISR>
 80072a0:	4603      	mov	r3, r0
 80072a2:	2b01      	cmp	r3, #1
 80072a4:	d001      	beq.n	80072aa <osMutexWait+0x62>
      return osErrorOS;
 80072a6:	23ff      	movs	r3, #255	; 0xff
 80072a8:	e015      	b.n	80072d6 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d011      	beq.n	80072d4 <osMutexWait+0x8c>
 80072b0:	4b0b      	ldr	r3, [pc, #44]	; (80072e0 <osMutexWait+0x98>)
 80072b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072b6:	601a      	str	r2, [r3, #0]
 80072b8:	f3bf 8f4f 	dsb	sy
 80072bc:	f3bf 8f6f 	isb	sy
 80072c0:	e008      	b.n	80072d4 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80072c2:	68f9      	ldr	r1, [r7, #12]
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f001 f873 	bl	80083b0 <xQueueSemaphoreTake>
 80072ca:	4603      	mov	r3, r0
 80072cc:	2b01      	cmp	r3, #1
 80072ce:	d001      	beq.n	80072d4 <osMutexWait+0x8c>
    return osErrorOS;
 80072d0:	23ff      	movs	r3, #255	; 0xff
 80072d2:	e000      	b.n	80072d6 <osMutexWait+0x8e>
  }
  
  return osOK;
 80072d4:	2300      	movs	r3, #0
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	3710      	adds	r7, #16
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}
 80072de:	bf00      	nop
 80072e0:	e000ed04 	.word	0xe000ed04

080072e4 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b084      	sub	sp, #16
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80072ec:	2300      	movs	r3, #0
 80072ee:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80072f0:	2300      	movs	r3, #0
 80072f2:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 80072f4:	f7ff ff06 	bl	8007104 <inHandlerMode>
 80072f8:	4603      	mov	r3, r0
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d016      	beq.n	800732c <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80072fe:	f107 0308 	add.w	r3, r7, #8
 8007302:	4619      	mov	r1, r3
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f000 feed 	bl	80080e4 <xQueueGiveFromISR>
 800730a:	4603      	mov	r3, r0
 800730c:	2b01      	cmp	r3, #1
 800730e:	d001      	beq.n	8007314 <osMutexRelease+0x30>
      return osErrorOS;
 8007310:	23ff      	movs	r3, #255	; 0xff
 8007312:	e017      	b.n	8007344 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d013      	beq.n	8007342 <osMutexRelease+0x5e>
 800731a:	4b0c      	ldr	r3, [pc, #48]	; (800734c <osMutexRelease+0x68>)
 800731c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007320:	601a      	str	r2, [r3, #0]
 8007322:	f3bf 8f4f 	dsb	sy
 8007326:	f3bf 8f6f 	isb	sy
 800732a:	e00a      	b.n	8007342 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800732c:	2300      	movs	r3, #0
 800732e:	2200      	movs	r2, #0
 8007330:	2100      	movs	r1, #0
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f000 fd48 	bl	8007dc8 <xQueueGenericSend>
 8007338:	4603      	mov	r3, r0
 800733a:	2b01      	cmp	r3, #1
 800733c:	d001      	beq.n	8007342 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800733e:	23ff      	movs	r3, #255	; 0xff
 8007340:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8007342:	68fb      	ldr	r3, [r7, #12]
}
 8007344:	4618      	mov	r0, r3
 8007346:	3710      	adds	r7, #16
 8007348:	46bd      	mov	sp, r7
 800734a:	bd80      	pop	{r7, pc}
 800734c:	e000ed04 	.word	0xe000ed04

08007350 <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b086      	sub	sp, #24
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	685b      	ldr	r3, [r3, #4]
 800735c:	3303      	adds	r3, #3
 800735e:	f023 0303 	bic.w	r3, r3, #3
 8007362:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 8007364:	2014      	movs	r0, #20
 8007366:	f002 feeb 	bl	800a140 <pvPortMalloc>
 800736a:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 800736c:	697b      	ldr	r3, [r7, #20]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d046      	beq.n	8007400 <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681a      	ldr	r2, [r3, #0]
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 800737a:	68fa      	ldr	r2, [r7, #12]
 800737c:	697b      	ldr	r3, [r7, #20]
 800737e:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 8007380:	697b      	ldr	r3, [r7, #20]
 8007382:	2200      	movs	r2, #0
 8007384:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4618      	mov	r0, r3
 800738c:	f002 fed8 	bl	800a140 <pvPortMalloc>
 8007390:	4602      	mov	r2, r0
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 8007396:	697b      	ldr	r3, [r7, #20]
 8007398:	685b      	ldr	r3, [r3, #4]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d02b      	beq.n	80073f6 <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	68fa      	ldr	r2, [r7, #12]
 80073a4:	fb02 f303 	mul.w	r3, r2, r3
 80073a8:	4618      	mov	r0, r3
 80073aa:	f002 fec9 	bl	800a140 <pvPortMalloc>
 80073ae:	4602      	mov	r2, r0
 80073b0:	697b      	ldr	r3, [r7, #20]
 80073b2:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d011      	beq.n	80073e0 <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 80073bc:	2300      	movs	r3, #0
 80073be:	613b      	str	r3, [r7, #16]
 80073c0:	e008      	b.n	80073d4 <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	685a      	ldr	r2, [r3, #4]
 80073c6:	693b      	ldr	r3, [r7, #16]
 80073c8:	4413      	add	r3, r2
 80073ca:	2200      	movs	r2, #0
 80073cc:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 80073ce:	693b      	ldr	r3, [r7, #16]
 80073d0:	3301      	adds	r3, #1
 80073d2:	613b      	str	r3, [r7, #16]
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	693a      	ldr	r2, [r7, #16]
 80073da:	429a      	cmp	r2, r3
 80073dc:	d3f1      	bcc.n	80073c2 <osPoolCreate+0x72>
 80073de:	e00f      	b.n	8007400 <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	685b      	ldr	r3, [r3, #4]
 80073e4:	4618      	mov	r0, r3
 80073e6:	f002 ff71 	bl	800a2cc <vPortFree>
        vPortFree(thePool);
 80073ea:	6978      	ldr	r0, [r7, #20]
 80073ec:	f002 ff6e 	bl	800a2cc <vPortFree>
        thePool = NULL;
 80073f0:	2300      	movs	r3, #0
 80073f2:	617b      	str	r3, [r7, #20]
 80073f4:	e004      	b.n	8007400 <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 80073f6:	6978      	ldr	r0, [r7, #20]
 80073f8:	f002 ff68 	bl	800a2cc <vPortFree>
      thePool = NULL;
 80073fc:	2300      	movs	r3, #0
 80073fe:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 8007400:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 8007402:	4618      	mov	r0, r3
 8007404:	3718      	adds	r7, #24
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}

0800740a <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800740a:	b590      	push	{r4, r7, lr}
 800740c:	b085      	sub	sp, #20
 800740e:	af02      	add	r7, sp, #8
 8007410:	6078      	str	r0, [r7, #4]
 8007412:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	689b      	ldr	r3, [r3, #8]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d012      	beq.n	8007442 <osMessageCreate+0x38>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	68db      	ldr	r3, [r3, #12]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d00e      	beq.n	8007442 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6818      	ldr	r0, [r3, #0]
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6859      	ldr	r1, [r3, #4]
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	689a      	ldr	r2, [r3, #8]
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	68dc      	ldr	r4, [r3, #12]
 8007434:	2300      	movs	r3, #0
 8007436:	9300      	str	r3, [sp, #0]
 8007438:	4623      	mov	r3, r4
 800743a:	f000 fb41 	bl	8007ac0 <xQueueGenericCreateStatic>
 800743e:	4603      	mov	r3, r0
 8007440:	e008      	b.n	8007454 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6818      	ldr	r0, [r3, #0]
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	685b      	ldr	r3, [r3, #4]
 800744a:	2200      	movs	r2, #0
 800744c:	4619      	mov	r1, r3
 800744e:	f000 fba9 	bl	8007ba4 <xQueueGenericCreate>
 8007452:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8007454:	4618      	mov	r0, r3
 8007456:	370c      	adds	r7, #12
 8007458:	46bd      	mov	sp, r7
 800745a:	bd90      	pop	{r4, r7, pc}

0800745c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b086      	sub	sp, #24
 8007460:	af00      	add	r7, sp, #0
 8007462:	60f8      	str	r0, [r7, #12]
 8007464:	60b9      	str	r1, [r7, #8]
 8007466:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8007468:	2300      	movs	r3, #0
 800746a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8007470:	697b      	ldr	r3, [r7, #20]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d101      	bne.n	800747a <osMessagePut+0x1e>
    ticks = 1;
 8007476:	2301      	movs	r3, #1
 8007478:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800747a:	f7ff fe43 	bl	8007104 <inHandlerMode>
 800747e:	4603      	mov	r3, r0
 8007480:	2b00      	cmp	r3, #0
 8007482:	d018      	beq.n	80074b6 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8007484:	f107 0210 	add.w	r2, r7, #16
 8007488:	f107 0108 	add.w	r1, r7, #8
 800748c:	2300      	movs	r3, #0
 800748e:	68f8      	ldr	r0, [r7, #12]
 8007490:	f000 fd94 	bl	8007fbc <xQueueGenericSendFromISR>
 8007494:	4603      	mov	r3, r0
 8007496:	2b01      	cmp	r3, #1
 8007498:	d001      	beq.n	800749e <osMessagePut+0x42>
      return osErrorOS;
 800749a:	23ff      	movs	r3, #255	; 0xff
 800749c:	e018      	b.n	80074d0 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800749e:	693b      	ldr	r3, [r7, #16]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d014      	beq.n	80074ce <osMessagePut+0x72>
 80074a4:	4b0c      	ldr	r3, [pc, #48]	; (80074d8 <osMessagePut+0x7c>)
 80074a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074aa:	601a      	str	r2, [r3, #0]
 80074ac:	f3bf 8f4f 	dsb	sy
 80074b0:	f3bf 8f6f 	isb	sy
 80074b4:	e00b      	b.n	80074ce <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80074b6:	f107 0108 	add.w	r1, r7, #8
 80074ba:	2300      	movs	r3, #0
 80074bc:	697a      	ldr	r2, [r7, #20]
 80074be:	68f8      	ldr	r0, [r7, #12]
 80074c0:	f000 fc82 	bl	8007dc8 <xQueueGenericSend>
 80074c4:	4603      	mov	r3, r0
 80074c6:	2b01      	cmp	r3, #1
 80074c8:	d001      	beq.n	80074ce <osMessagePut+0x72>
      return osErrorOS;
 80074ca:	23ff      	movs	r3, #255	; 0xff
 80074cc:	e000      	b.n	80074d0 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80074ce:	2300      	movs	r3, #0
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	3718      	adds	r7, #24
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd80      	pop	{r7, pc}
 80074d8:	e000ed04 	.word	0xe000ed04

080074dc <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80074dc:	b590      	push	{r4, r7, lr}
 80074de:	b08b      	sub	sp, #44	; 0x2c
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	60f8      	str	r0, [r7, #12]
 80074e4:	60b9      	str	r1, [r7, #8]
 80074e6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80074ec:	2300      	movs	r3, #0
 80074ee:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d10a      	bne.n	800750c <osMessageGet+0x30>
    event.status = osErrorParameter;
 80074f6:	2380      	movs	r3, #128	; 0x80
 80074f8:	617b      	str	r3, [r7, #20]
    return event;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	461c      	mov	r4, r3
 80074fe:	f107 0314 	add.w	r3, r7, #20
 8007502:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007506:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800750a:	e054      	b.n	80075b6 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800750c:	2300      	movs	r3, #0
 800750e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8007510:	2300      	movs	r3, #0
 8007512:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800751a:	d103      	bne.n	8007524 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800751c:	f04f 33ff 	mov.w	r3, #4294967295
 8007520:	627b      	str	r3, [r7, #36]	; 0x24
 8007522:	e009      	b.n	8007538 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d006      	beq.n	8007538 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800752e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007530:	2b00      	cmp	r3, #0
 8007532:	d101      	bne.n	8007538 <osMessageGet+0x5c>
      ticks = 1;
 8007534:	2301      	movs	r3, #1
 8007536:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8007538:	f7ff fde4 	bl	8007104 <inHandlerMode>
 800753c:	4603      	mov	r3, r0
 800753e:	2b00      	cmp	r3, #0
 8007540:	d01c      	beq.n	800757c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8007542:	f107 0220 	add.w	r2, r7, #32
 8007546:	f107 0314 	add.w	r3, r7, #20
 800754a:	3304      	adds	r3, #4
 800754c:	4619      	mov	r1, r3
 800754e:	68b8      	ldr	r0, [r7, #8]
 8007550:	f001 f836 	bl	80085c0 <xQueueReceiveFromISR>
 8007554:	4603      	mov	r3, r0
 8007556:	2b01      	cmp	r3, #1
 8007558:	d102      	bne.n	8007560 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800755a:	2310      	movs	r3, #16
 800755c:	617b      	str	r3, [r7, #20]
 800755e:	e001      	b.n	8007564 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8007560:	2300      	movs	r3, #0
 8007562:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007564:	6a3b      	ldr	r3, [r7, #32]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d01d      	beq.n	80075a6 <osMessageGet+0xca>
 800756a:	4b15      	ldr	r3, [pc, #84]	; (80075c0 <osMessageGet+0xe4>)
 800756c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007570:	601a      	str	r2, [r3, #0]
 8007572:	f3bf 8f4f 	dsb	sy
 8007576:	f3bf 8f6f 	isb	sy
 800757a:	e014      	b.n	80075a6 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800757c:	f107 0314 	add.w	r3, r7, #20
 8007580:	3304      	adds	r3, #4
 8007582:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007584:	4619      	mov	r1, r3
 8007586:	68b8      	ldr	r0, [r7, #8]
 8007588:	f000 fe36 	bl	80081f8 <xQueueReceive>
 800758c:	4603      	mov	r3, r0
 800758e:	2b01      	cmp	r3, #1
 8007590:	d102      	bne.n	8007598 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8007592:	2310      	movs	r3, #16
 8007594:	617b      	str	r3, [r7, #20]
 8007596:	e006      	b.n	80075a6 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8007598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800759a:	2b00      	cmp	r3, #0
 800759c:	d101      	bne.n	80075a2 <osMessageGet+0xc6>
 800759e:	2300      	movs	r3, #0
 80075a0:	e000      	b.n	80075a4 <osMessageGet+0xc8>
 80075a2:	2340      	movs	r3, #64	; 0x40
 80075a4:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	461c      	mov	r4, r3
 80075aa:	f107 0314 	add.w	r3, r7, #20
 80075ae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80075b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80075b6:	68f8      	ldr	r0, [r7, #12]
 80075b8:	372c      	adds	r7, #44	; 0x2c
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bd90      	pop	{r4, r7, pc}
 80075be:	bf00      	nop
 80075c0:	e000ed04 	.word	0xe000ed04

080075c4 <osMailCreate>:
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 80075c4:	b590      	push	{r4, r7, lr}
 80075c6:	b087      	sub	sp, #28
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
 80075cc:	6039      	str	r1, [r7, #0]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	60fb      	str	r3, [r7, #12]
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	685b      	ldr	r3, [r3, #4]
 80075d8:	613b      	str	r3, [r7, #16]
 80075da:	2300      	movs	r3, #0
 80075dc:	617b      	str	r3, [r7, #20]
  
  /* Create a mail queue control block */

  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	689c      	ldr	r4, [r3, #8]
 80075e2:	200c      	movs	r0, #12
 80075e4:	f002 fdac 	bl	800a140 <pvPortMalloc>
 80075e8:	4603      	mov	r3, r0
 80075ea:	6023      	str	r3, [r4, #0]

  if (*(queue_def->cb) == NULL) {
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	689b      	ldr	r3, [r3, #8]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d101      	bne.n	80075fa <osMailCreate+0x36>
    return NULL;
 80075f6:	2300      	movs	r3, #0
 80075f8:	e038      	b.n	800766c <osMailCreate+0xa8>
  }
  (*(queue_def->cb))->queue_def = queue_def;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	689b      	ldr	r3, [r3, #8]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	687a      	ldr	r2, [r7, #4]
 8007602:	601a      	str	r2, [r3, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6818      	ldr	r0, [r3, #0]
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	689b      	ldr	r3, [r3, #8]
 800760c:	681c      	ldr	r4, [r3, #0]
 800760e:	2200      	movs	r2, #0
 8007610:	2104      	movs	r1, #4
 8007612:	f000 fac7 	bl	8007ba4 <xQueueGenericCreate>
 8007616:	4603      	mov	r3, r0
 8007618:	6063      	str	r3, [r4, #4]


  if ((*(queue_def->cb))->handle == NULL) {
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	689b      	ldr	r3, [r3, #8]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	685b      	ldr	r3, [r3, #4]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d107      	bne.n	8007636 <osMailCreate+0x72>
    vPortFree(*(queue_def->cb));
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	689b      	ldr	r3, [r3, #8]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4618      	mov	r0, r3
 800762e:	f002 fe4d 	bl	800a2cc <vPortFree>
    return NULL;
 8007632:	2300      	movs	r3, #0
 8007634:	e01a      	b.n	800766c <osMailCreate+0xa8>
  }
  
  /* Create a mail pool */
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	689b      	ldr	r3, [r3, #8]
 800763a:	681c      	ldr	r4, [r3, #0]
 800763c:	f107 030c 	add.w	r3, r7, #12
 8007640:	4618      	mov	r0, r3
 8007642:	f7ff fe85 	bl	8007350 <osPoolCreate>
 8007646:	4603      	mov	r3, r0
 8007648:	60a3      	str	r3, [r4, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	689b      	ldr	r3, [r3, #8]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	689b      	ldr	r3, [r3, #8]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d107      	bne.n	8007666 <osMailCreate+0xa2>
    //TODO: Delete queue. How to do it in FreeRTOS?
    vPortFree(*(queue_def->cb));
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	689b      	ldr	r3, [r3, #8]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	4618      	mov	r0, r3
 800765e:	f002 fe35 	bl	800a2cc <vPortFree>
    return NULL;
 8007662:	2300      	movs	r3, #0
 8007664:	e002      	b.n	800766c <osMailCreate+0xa8>
  }
  
  return *(queue_def->cb);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	689b      	ldr	r3, [r3, #8]
 800766a:	681b      	ldr	r3, [r3, #0]
#else
  return NULL;
#endif
}
 800766c:	4618      	mov	r0, r3
 800766e:	371c      	adds	r7, #28
 8007670:	46bd      	mov	sp, r7
 8007672:	bd90      	pop	{r4, r7, pc}

08007674 <osMailPut>:
* @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAlloc.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailPut (osMailQId queue_id, void *mail)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b084      	sub	sp, #16
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
 800767c:	6039      	str	r1, [r7, #0]
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d101      	bne.n	8007688 <osMailPut+0x14>
    return osErrorParameter;
 8007684:	2380      	movs	r3, #128	; 0x80
 8007686:	e02c      	b.n	80076e2 <osMailPut+0x6e>
  }
  
  taskWoken = pdFALSE;
 8007688:	2300      	movs	r3, #0
 800768a:	60fb      	str	r3, [r7, #12]
  
  if (inHandlerMode()) {
 800768c:	f7ff fd3a 	bl	8007104 <inHandlerMode>
 8007690:	4603      	mov	r3, r0
 8007692:	2b00      	cmp	r3, #0
 8007694:	d018      	beq.n	80076c8 <osMailPut+0x54>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6858      	ldr	r0, [r3, #4]
 800769a:	f107 020c 	add.w	r2, r7, #12
 800769e:	4639      	mov	r1, r7
 80076a0:	2300      	movs	r3, #0
 80076a2:	f000 fc8b 	bl	8007fbc <xQueueGenericSendFromISR>
 80076a6:	4603      	mov	r3, r0
 80076a8:	2b01      	cmp	r3, #1
 80076aa:	d001      	beq.n	80076b0 <osMailPut+0x3c>
      return osErrorOS;
 80076ac:	23ff      	movs	r3, #255	; 0xff
 80076ae:	e018      	b.n	80076e2 <osMailPut+0x6e>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d014      	beq.n	80076e0 <osMailPut+0x6c>
 80076b6:	4b0d      	ldr	r3, [pc, #52]	; (80076ec <osMailPut+0x78>)
 80076b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076bc:	601a      	str	r2, [r3, #0]
 80076be:	f3bf 8f4f 	dsb	sy
 80076c2:	f3bf 8f6f 	isb	sy
 80076c6:	e00b      	b.n	80076e0 <osMailPut+0x6c>
  }
  else {
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6858      	ldr	r0, [r3, #4]
 80076cc:	4639      	mov	r1, r7
 80076ce:	2300      	movs	r3, #0
 80076d0:	2200      	movs	r2, #0
 80076d2:	f000 fb79 	bl	8007dc8 <xQueueGenericSend>
 80076d6:	4603      	mov	r3, r0
 80076d8:	2b01      	cmp	r3, #1
 80076da:	d001      	beq.n	80076e0 <osMailPut+0x6c>
      return osErrorOS;
 80076dc:	23ff      	movs	r3, #255	; 0xff
 80076de:	e000      	b.n	80076e2 <osMailPut+0x6e>
    }
  }
  
  return osOK;
 80076e0:	2300      	movs	r3, #0
}
 80076e2:	4618      	mov	r0, r3
 80076e4:	3710      	adds	r7, #16
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd80      	pop	{r7, pc}
 80076ea:	bf00      	nop
 80076ec:	e000ed04 	.word	0xe000ed04

080076f0 <osMailGet>:
* @param millisec    timeout value or 0 in case of no time-out
* @retval event that contains mail information or error code.
* @note   MUST REMAIN UNCHANGED: \b osMailGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMailGet (osMailQId queue_id, uint32_t millisec)
{
 80076f0:	b590      	push	{r4, r7, lr}
 80076f2:	b08b      	sub	sp, #44	; 0x2c
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	60f8      	str	r0, [r7, #12]
 80076f8:	60b9      	str	r1, [r7, #8]
 80076fa:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.mail_id = queue_id;
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	61fb      	str	r3, [r7, #28]
  
  if (queue_id == NULL) {
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d10a      	bne.n	800771c <osMailGet+0x2c>
    event.status = osErrorParameter;
 8007706:	2380      	movs	r3, #128	; 0x80
 8007708:	617b      	str	r3, [r7, #20]
    return event;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	461c      	mov	r4, r3
 800770e:	f107 0314 	add.w	r3, r7, #20
 8007712:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007716:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800771a:	e056      	b.n	80077ca <osMailGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800771c:	2300      	movs	r3, #0
 800771e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8007720:	2300      	movs	r3, #0
 8007722:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f1b3 3fff 	cmp.w	r3, #4294967295
 800772a:	d103      	bne.n	8007734 <osMailGet+0x44>
    ticks = portMAX_DELAY;
 800772c:	f04f 33ff 	mov.w	r3, #4294967295
 8007730:	627b      	str	r3, [r7, #36]	; 0x24
 8007732:	e009      	b.n	8007748 <osMailGet+0x58>
  }
  else if (millisec != 0) {
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d006      	beq.n	8007748 <osMailGet+0x58>
    ticks = millisec / portTICK_PERIOD_MS;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800773e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007740:	2b00      	cmp	r3, #0
 8007742:	d101      	bne.n	8007748 <osMailGet+0x58>
      ticks = 1;
 8007744:	2301      	movs	r3, #1
 8007746:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8007748:	f7ff fcdc 	bl	8007104 <inHandlerMode>
 800774c:	4603      	mov	r3, r0
 800774e:	2b00      	cmp	r3, #0
 8007750:	d01d      	beq.n	800778e <osMailGet+0x9e>
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	6858      	ldr	r0, [r3, #4]
 8007756:	f107 0220 	add.w	r2, r7, #32
 800775a:	f107 0314 	add.w	r3, r7, #20
 800775e:	3304      	adds	r3, #4
 8007760:	4619      	mov	r1, r3
 8007762:	f000 ff2d 	bl	80085c0 <xQueueReceiveFromISR>
 8007766:	4603      	mov	r3, r0
 8007768:	2b01      	cmp	r3, #1
 800776a:	d102      	bne.n	8007772 <osMailGet+0x82>
      /* We have mail */
      event.status = osEventMail;
 800776c:	2320      	movs	r3, #32
 800776e:	617b      	str	r3, [r7, #20]
 8007770:	e001      	b.n	8007776 <osMailGet+0x86>
    }
    else {
      event.status = osOK;
 8007772:	2300      	movs	r3, #0
 8007774:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007776:	6a3b      	ldr	r3, [r7, #32]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d01e      	beq.n	80077ba <osMailGet+0xca>
 800777c:	4b15      	ldr	r3, [pc, #84]	; (80077d4 <osMailGet+0xe4>)
 800777e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007782:	601a      	str	r2, [r3, #0]
 8007784:	f3bf 8f4f 	dsb	sy
 8007788:	f3bf 8f6f 	isb	sy
 800778c:	e015      	b.n	80077ba <osMailGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	6858      	ldr	r0, [r3, #4]
 8007792:	f107 0314 	add.w	r3, r7, #20
 8007796:	3304      	adds	r3, #4
 8007798:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800779a:	4619      	mov	r1, r3
 800779c:	f000 fd2c 	bl	80081f8 <xQueueReceive>
 80077a0:	4603      	mov	r3, r0
 80077a2:	2b01      	cmp	r3, #1
 80077a4:	d102      	bne.n	80077ac <osMailGet+0xbc>
      /* We have mail */
      event.status = osEventMail;
 80077a6:	2320      	movs	r3, #32
 80077a8:	617b      	str	r3, [r7, #20]
 80077aa:	e006      	b.n	80077ba <osMailGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80077ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d101      	bne.n	80077b6 <osMailGet+0xc6>
 80077b2:	2300      	movs	r3, #0
 80077b4:	e000      	b.n	80077b8 <osMailGet+0xc8>
 80077b6:	2340      	movs	r3, #64	; 0x40
 80077b8:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	461c      	mov	r4, r3
 80077be:	f107 0314 	add.w	r3, r7, #20
 80077c2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80077c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80077ca:	68f8      	ldr	r0, [r7, #12]
 80077cc:	372c      	adds	r7, #44	; 0x2c
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd90      	pop	{r4, r7, pc}
 80077d2:	bf00      	nop
 80077d4:	e000ed04 	.word	0xe000ed04

080077d8 <osRecursiveMutexCreate>:
* @brief  Create and Initialize a Recursive Mutex
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error..
*/
osMutexId osRecursiveMutexCreate (const osMutexDef_t *mutex_def)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b082      	sub	sp, #8
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
#if (configUSE_RECURSIVE_MUTEXES == 1)
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL){
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	685b      	ldr	r3, [r3, #4]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d007      	beq.n	80077f8 <osRecursiveMutexCreate+0x20>
    return xSemaphoreCreateRecursiveMutexStatic( mutex_def->controlblock );
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	685b      	ldr	r3, [r3, #4]
 80077ec:	4619      	mov	r1, r3
 80077ee:	2004      	movs	r0, #4
 80077f0:	f000 fa66 	bl	8007cc0 <xQueueCreateMutexStatic>
 80077f4:	4603      	mov	r3, r0
 80077f6:	e003      	b.n	8007800 <osRecursiveMutexCreate+0x28>
  }
  else {
    return xSemaphoreCreateRecursiveMutex();
 80077f8:	2004      	movs	r0, #4
 80077fa:	f000 fa49 	bl	8007c90 <xQueueCreateMutex>
 80077fe:	4603      	mov	r3, r0
  return xSemaphoreCreateRecursiveMutex();
#endif
#else
  return NULL;
#endif	
}
 8007800:	4618      	mov	r0, r3
 8007802:	3708      	adds	r7, #8
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}

08007808 <osRecursiveMutexRelease>:
* @brief  Release a Recursive Mutex
* @param   mutex_id      mutex ID obtained by \ref osRecursiveMutexCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osRecursiveMutexRelease (osMutexId mutex_id)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b084      	sub	sp, #16
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
#if (configUSE_RECURSIVE_MUTEXES == 1)
  osStatus result = osOK;
 8007810:	2300      	movs	r3, #0
 8007812:	60fb      	str	r3, [r7, #12]
 
  if (xSemaphoreGiveRecursive(mutex_id) != pdTRUE) 
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f000 fa6e 	bl	8007cf6 <xQueueGiveMutexRecursive>
 800781a:	4603      	mov	r3, r0
 800781c:	2b01      	cmp	r3, #1
 800781e:	d001      	beq.n	8007824 <osRecursiveMutexRelease+0x1c>
  {
    result = osErrorOS;
 8007820:	23ff      	movs	r3, #255	; 0xff
 8007822:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8007824:	68fb      	ldr	r3, [r7, #12]
#else
	return osErrorResource;
#endif
}
 8007826:	4618      	mov	r0, r3
 8007828:	3710      	adds	r7, #16
 800782a:	46bd      	mov	sp, r7
 800782c:	bd80      	pop	{r7, pc}

0800782e <osRecursiveMutexWait>:
* @param   mutex_id    mutex ID obtained by \ref osRecursiveMutexCreate.
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osRecursiveMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800782e:	b580      	push	{r7, lr}
 8007830:	b084      	sub	sp, #16
 8007832:	af00      	add	r7, sp, #0
 8007834:	6078      	str	r0, [r7, #4]
 8007836:	6039      	str	r1, [r7, #0]
#if (configUSE_RECURSIVE_MUTEXES == 1)
  TickType_t ticks;
  
  if (mutex_id == NULL)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d101      	bne.n	8007842 <osRecursiveMutexWait+0x14>
  {
    return osErrorParameter;
 800783e:	2380      	movs	r3, #128	; 0x80
 8007840:	e01d      	b.n	800787e <osRecursiveMutexWait+0x50>
  }
  
  ticks = 0;
 8007842:	2300      	movs	r3, #0
 8007844:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) 
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800784c:	d103      	bne.n	8007856 <osRecursiveMutexWait+0x28>
  {
    ticks = portMAX_DELAY;
 800784e:	f04f 33ff 	mov.w	r3, #4294967295
 8007852:	60fb      	str	r3, [r7, #12]
 8007854:	e009      	b.n	800786a <osRecursiveMutexWait+0x3c>
  }
  else if (millisec != 0) 
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d006      	beq.n	800786a <osRecursiveMutexWait+0x3c>
  {
    ticks = millisec / portTICK_PERIOD_MS;
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) 
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d101      	bne.n	800786a <osRecursiveMutexWait+0x3c>
    {
      ticks = 1;
 8007866:	2301      	movs	r3, #1
 8007868:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (xSemaphoreTakeRecursive(mutex_id, ticks) != pdTRUE) 
 800786a:	68f9      	ldr	r1, [r7, #12]
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f000 fa75 	bl	8007d5c <xQueueTakeMutexRecursive>
 8007872:	4603      	mov	r3, r0
 8007874:	2b01      	cmp	r3, #1
 8007876:	d001      	beq.n	800787c <osRecursiveMutexWait+0x4e>
  {
    return osErrorOS;
 8007878:	23ff      	movs	r3, #255	; 0xff
 800787a:	e000      	b.n	800787e <osRecursiveMutexWait+0x50>
  }
  return osOK;
 800787c:	2300      	movs	r3, #0
#else
	return osErrorResource;
#endif
}
 800787e:	4618      	mov	r0, r3
 8007880:	3710      	adds	r7, #16
 8007882:	46bd      	mov	sp, r7
 8007884:	bd80      	pop	{r7, pc}

08007886 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007886:	b480      	push	{r7}
 8007888:	b083      	sub	sp, #12
 800788a:	af00      	add	r7, sp, #0
 800788c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	f103 0208 	add.w	r2, r3, #8
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f04f 32ff 	mov.w	r2, #4294967295
 800789e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f103 0208 	add.w	r2, r3, #8
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f103 0208 	add.w	r2, r3, #8
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2200      	movs	r2, #0
 80078b8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80078ba:	bf00      	nop
 80078bc:	370c      	adds	r7, #12
 80078be:	46bd      	mov	sp, r7
 80078c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c4:	4770      	bx	lr

080078c6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80078c6:	b480      	push	{r7}
 80078c8:	b083      	sub	sp, #12
 80078ca:	af00      	add	r7, sp, #0
 80078cc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2200      	movs	r2, #0
 80078d2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80078d4:	bf00      	nop
 80078d6:	370c      	adds	r7, #12
 80078d8:	46bd      	mov	sp, r7
 80078da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078de:	4770      	bx	lr

080078e0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80078e0:	b480      	push	{r7}
 80078e2:	b085      	sub	sp, #20
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
 80078e8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	685b      	ldr	r3, [r3, #4]
 80078ee:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	68fa      	ldr	r2, [r7, #12]
 80078f4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	689a      	ldr	r2, [r3, #8]
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	689b      	ldr	r3, [r3, #8]
 8007902:	683a      	ldr	r2, [r7, #0]
 8007904:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	683a      	ldr	r2, [r7, #0]
 800790a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	687a      	ldr	r2, [r7, #4]
 8007910:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	1c5a      	adds	r2, r3, #1
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	601a      	str	r2, [r3, #0]
}
 800791c:	bf00      	nop
 800791e:	3714      	adds	r7, #20
 8007920:	46bd      	mov	sp, r7
 8007922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007926:	4770      	bx	lr

08007928 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007928:	b480      	push	{r7}
 800792a:	b085      	sub	sp, #20
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
 8007930:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800793e:	d103      	bne.n	8007948 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	691b      	ldr	r3, [r3, #16]
 8007944:	60fb      	str	r3, [r7, #12]
 8007946:	e00c      	b.n	8007962 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	3308      	adds	r3, #8
 800794c:	60fb      	str	r3, [r7, #12]
 800794e:	e002      	b.n	8007956 <vListInsert+0x2e>
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	685b      	ldr	r3, [r3, #4]
 8007954:	60fb      	str	r3, [r7, #12]
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	685b      	ldr	r3, [r3, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	68ba      	ldr	r2, [r7, #8]
 800795e:	429a      	cmp	r2, r3
 8007960:	d2f6      	bcs.n	8007950 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	685a      	ldr	r2, [r3, #4]
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	685b      	ldr	r3, [r3, #4]
 800796e:	683a      	ldr	r2, [r7, #0]
 8007970:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	68fa      	ldr	r2, [r7, #12]
 8007976:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	683a      	ldr	r2, [r7, #0]
 800797c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	687a      	ldr	r2, [r7, #4]
 8007982:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	1c5a      	adds	r2, r3, #1
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	601a      	str	r2, [r3, #0]
}
 800798e:	bf00      	nop
 8007990:	3714      	adds	r7, #20
 8007992:	46bd      	mov	sp, r7
 8007994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007998:	4770      	bx	lr

0800799a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800799a:	b480      	push	{r7}
 800799c:	b085      	sub	sp, #20
 800799e:	af00      	add	r7, sp, #0
 80079a0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	691b      	ldr	r3, [r3, #16]
 80079a6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	685b      	ldr	r3, [r3, #4]
 80079ac:	687a      	ldr	r2, [r7, #4]
 80079ae:	6892      	ldr	r2, [r2, #8]
 80079b0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	689b      	ldr	r3, [r3, #8]
 80079b6:	687a      	ldr	r2, [r7, #4]
 80079b8:	6852      	ldr	r2, [r2, #4]
 80079ba:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	685b      	ldr	r3, [r3, #4]
 80079c0:	687a      	ldr	r2, [r7, #4]
 80079c2:	429a      	cmp	r2, r3
 80079c4:	d103      	bne.n	80079ce <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	689a      	ldr	r2, [r3, #8]
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2200      	movs	r2, #0
 80079d2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	1e5a      	subs	r2, r3, #1
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
}
 80079e2:	4618      	mov	r0, r3
 80079e4:	3714      	adds	r7, #20
 80079e6:	46bd      	mov	sp, r7
 80079e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ec:	4770      	bx	lr
	...

080079f0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b084      	sub	sp, #16
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
 80079f8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d109      	bne.n	8007a18 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a08:	f383 8811 	msr	BASEPRI, r3
 8007a0c:	f3bf 8f6f 	isb	sy
 8007a10:	f3bf 8f4f 	dsb	sy
 8007a14:	60bb      	str	r3, [r7, #8]
 8007a16:	e7fe      	b.n	8007a16 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8007a18:	f002 fa78 	bl	8009f0c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681a      	ldr	r2, [r3, #0]
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a24:	68f9      	ldr	r1, [r7, #12]
 8007a26:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007a28:	fb01 f303 	mul.w	r3, r1, r3
 8007a2c:	441a      	add	r2, r3
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	2200      	movs	r2, #0
 8007a36:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681a      	ldr	r2, [r3, #0]
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681a      	ldr	r2, [r3, #0]
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a48:	3b01      	subs	r3, #1
 8007a4a:	68f9      	ldr	r1, [r7, #12]
 8007a4c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007a4e:	fb01 f303 	mul.w	r3, r1, r3
 8007a52:	441a      	add	r2, r3
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	22ff      	movs	r2, #255	; 0xff
 8007a5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	22ff      	movs	r2, #255	; 0xff
 8007a64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d114      	bne.n	8007a98 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	691b      	ldr	r3, [r3, #16]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d01a      	beq.n	8007aac <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	3310      	adds	r3, #16
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f001 fc10 	bl	80092a0 <xTaskRemoveFromEventList>
 8007a80:	4603      	mov	r3, r0
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d012      	beq.n	8007aac <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007a86:	4b0d      	ldr	r3, [pc, #52]	; (8007abc <xQueueGenericReset+0xcc>)
 8007a88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a8c:	601a      	str	r2, [r3, #0]
 8007a8e:	f3bf 8f4f 	dsb	sy
 8007a92:	f3bf 8f6f 	isb	sy
 8007a96:	e009      	b.n	8007aac <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	3310      	adds	r3, #16
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	f7ff fef2 	bl	8007886 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	3324      	adds	r3, #36	; 0x24
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	f7ff feed 	bl	8007886 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007aac:	f002 fa5c 	bl	8009f68 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007ab0:	2301      	movs	r3, #1
}
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	3710      	adds	r7, #16
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bd80      	pop	{r7, pc}
 8007aba:	bf00      	nop
 8007abc:	e000ed04 	.word	0xe000ed04

08007ac0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b08e      	sub	sp, #56	; 0x38
 8007ac4:	af02      	add	r7, sp, #8
 8007ac6:	60f8      	str	r0, [r7, #12]
 8007ac8:	60b9      	str	r1, [r7, #8]
 8007aca:	607a      	str	r2, [r7, #4]
 8007acc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d109      	bne.n	8007ae8 <xQueueGenericCreateStatic+0x28>
 8007ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ad8:	f383 8811 	msr	BASEPRI, r3
 8007adc:	f3bf 8f6f 	isb	sy
 8007ae0:	f3bf 8f4f 	dsb	sy
 8007ae4:	62bb      	str	r3, [r7, #40]	; 0x28
 8007ae6:	e7fe      	b.n	8007ae6 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d109      	bne.n	8007b02 <xQueueGenericCreateStatic+0x42>
 8007aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007af2:	f383 8811 	msr	BASEPRI, r3
 8007af6:	f3bf 8f6f 	isb	sy
 8007afa:	f3bf 8f4f 	dsb	sy
 8007afe:	627b      	str	r3, [r7, #36]	; 0x24
 8007b00:	e7fe      	b.n	8007b00 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d002      	beq.n	8007b0e <xQueueGenericCreateStatic+0x4e>
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d001      	beq.n	8007b12 <xQueueGenericCreateStatic+0x52>
 8007b0e:	2301      	movs	r3, #1
 8007b10:	e000      	b.n	8007b14 <xQueueGenericCreateStatic+0x54>
 8007b12:	2300      	movs	r3, #0
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d109      	bne.n	8007b2c <xQueueGenericCreateStatic+0x6c>
 8007b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b1c:	f383 8811 	msr	BASEPRI, r3
 8007b20:	f3bf 8f6f 	isb	sy
 8007b24:	f3bf 8f4f 	dsb	sy
 8007b28:	623b      	str	r3, [r7, #32]
 8007b2a:	e7fe      	b.n	8007b2a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d102      	bne.n	8007b38 <xQueueGenericCreateStatic+0x78>
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d101      	bne.n	8007b3c <xQueueGenericCreateStatic+0x7c>
 8007b38:	2301      	movs	r3, #1
 8007b3a:	e000      	b.n	8007b3e <xQueueGenericCreateStatic+0x7e>
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d109      	bne.n	8007b56 <xQueueGenericCreateStatic+0x96>
 8007b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b46:	f383 8811 	msr	BASEPRI, r3
 8007b4a:	f3bf 8f6f 	isb	sy
 8007b4e:	f3bf 8f4f 	dsb	sy
 8007b52:	61fb      	str	r3, [r7, #28]
 8007b54:	e7fe      	b.n	8007b54 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007b56:	2348      	movs	r3, #72	; 0x48
 8007b58:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007b5a:	697b      	ldr	r3, [r7, #20]
 8007b5c:	2b48      	cmp	r3, #72	; 0x48
 8007b5e:	d009      	beq.n	8007b74 <xQueueGenericCreateStatic+0xb4>
 8007b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b64:	f383 8811 	msr	BASEPRI, r3
 8007b68:	f3bf 8f6f 	isb	sy
 8007b6c:	f3bf 8f4f 	dsb	sy
 8007b70:	61bb      	str	r3, [r7, #24]
 8007b72:	e7fe      	b.n	8007b72 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d00d      	beq.n	8007b9a <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b80:	2201      	movs	r2, #1
 8007b82:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007b86:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b8c:	9300      	str	r3, [sp, #0]
 8007b8e:	4613      	mov	r3, r2
 8007b90:	687a      	ldr	r2, [r7, #4]
 8007b92:	68b9      	ldr	r1, [r7, #8]
 8007b94:	68f8      	ldr	r0, [r7, #12]
 8007b96:	f000 f842 	bl	8007c1e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8007b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	3730      	adds	r7, #48	; 0x30
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	bd80      	pop	{r7, pc}

08007ba4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b08a      	sub	sp, #40	; 0x28
 8007ba8:	af02      	add	r7, sp, #8
 8007baa:	60f8      	str	r0, [r7, #12]
 8007bac:	60b9      	str	r1, [r7, #8]
 8007bae:	4613      	mov	r3, r2
 8007bb0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d109      	bne.n	8007bcc <xQueueGenericCreate+0x28>
 8007bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bbc:	f383 8811 	msr	BASEPRI, r3
 8007bc0:	f3bf 8f6f 	isb	sy
 8007bc4:	f3bf 8f4f 	dsb	sy
 8007bc8:	613b      	str	r3, [r7, #16]
 8007bca:	e7fe      	b.n	8007bca <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d102      	bne.n	8007bd8 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	61fb      	str	r3, [r7, #28]
 8007bd6:	e004      	b.n	8007be2 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	68ba      	ldr	r2, [r7, #8]
 8007bdc:	fb02 f303 	mul.w	r3, r2, r3
 8007be0:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8007be2:	69fb      	ldr	r3, [r7, #28]
 8007be4:	3348      	adds	r3, #72	; 0x48
 8007be6:	4618      	mov	r0, r3
 8007be8:	f002 faaa 	bl	800a140 <pvPortMalloc>
 8007bec:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007bee:	69bb      	ldr	r3, [r7, #24]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d00f      	beq.n	8007c14 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8007bf4:	69bb      	ldr	r3, [r7, #24]
 8007bf6:	3348      	adds	r3, #72	; 0x48
 8007bf8:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007bfa:	69bb      	ldr	r3, [r7, #24]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007c02:	79fa      	ldrb	r2, [r7, #7]
 8007c04:	69bb      	ldr	r3, [r7, #24]
 8007c06:	9300      	str	r3, [sp, #0]
 8007c08:	4613      	mov	r3, r2
 8007c0a:	697a      	ldr	r2, [r7, #20]
 8007c0c:	68b9      	ldr	r1, [r7, #8]
 8007c0e:	68f8      	ldr	r0, [r7, #12]
 8007c10:	f000 f805 	bl	8007c1e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8007c14:	69bb      	ldr	r3, [r7, #24]
	}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3720      	adds	r7, #32
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}

08007c1e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007c1e:	b580      	push	{r7, lr}
 8007c20:	b084      	sub	sp, #16
 8007c22:	af00      	add	r7, sp, #0
 8007c24:	60f8      	str	r0, [r7, #12]
 8007c26:	60b9      	str	r1, [r7, #8]
 8007c28:	607a      	str	r2, [r7, #4]
 8007c2a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d103      	bne.n	8007c3a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007c32:	69bb      	ldr	r3, [r7, #24]
 8007c34:	69ba      	ldr	r2, [r7, #24]
 8007c36:	601a      	str	r2, [r3, #0]
 8007c38:	e002      	b.n	8007c40 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007c3a:	69bb      	ldr	r3, [r7, #24]
 8007c3c:	687a      	ldr	r2, [r7, #4]
 8007c3e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007c40:	69bb      	ldr	r3, [r7, #24]
 8007c42:	68fa      	ldr	r2, [r7, #12]
 8007c44:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007c46:	69bb      	ldr	r3, [r7, #24]
 8007c48:	68ba      	ldr	r2, [r7, #8]
 8007c4a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007c4c:	2101      	movs	r1, #1
 8007c4e:	69b8      	ldr	r0, [r7, #24]
 8007c50:	f7ff fece 	bl	80079f0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007c54:	bf00      	nop
 8007c56:	3710      	adds	r7, #16
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd80      	pop	{r7, pc}

08007c5c <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b082      	sub	sp, #8
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d00e      	beq.n	8007c88 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2200      	movs	r2, #0
 8007c74:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	2200      	movs	r2, #0
 8007c80:	2100      	movs	r1, #0
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f000 f8a0 	bl	8007dc8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8007c88:	bf00      	nop
 8007c8a:	3708      	adds	r7, #8
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}

08007c90 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b086      	sub	sp, #24
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	4603      	mov	r3, r0
 8007c98:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	617b      	str	r3, [r7, #20]
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007ca2:	79fb      	ldrb	r3, [r7, #7]
 8007ca4:	461a      	mov	r2, r3
 8007ca6:	6939      	ldr	r1, [r7, #16]
 8007ca8:	6978      	ldr	r0, [r7, #20]
 8007caa:	f7ff ff7b 	bl	8007ba4 <xQueueGenericCreate>
 8007cae:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8007cb0:	68f8      	ldr	r0, [r7, #12]
 8007cb2:	f7ff ffd3 	bl	8007c5c <prvInitialiseMutex>

		return pxNewQueue;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
	}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	3718      	adds	r7, #24
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}

08007cc0 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b088      	sub	sp, #32
 8007cc4:	af02      	add	r7, sp, #8
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	6039      	str	r1, [r7, #0]
 8007cca:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007ccc:	2301      	movs	r3, #1
 8007cce:	617b      	str	r3, [r7, #20]
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8007cd4:	79fb      	ldrb	r3, [r7, #7]
 8007cd6:	9300      	str	r3, [sp, #0]
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	2200      	movs	r2, #0
 8007cdc:	6939      	ldr	r1, [r7, #16]
 8007cde:	6978      	ldr	r0, [r7, #20]
 8007ce0:	f7ff feee 	bl	8007ac0 <xQueueGenericCreateStatic>
 8007ce4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8007ce6:	68f8      	ldr	r0, [r7, #12]
 8007ce8:	f7ff ffb8 	bl	8007c5c <prvInitialiseMutex>

		return pxNewQueue;
 8007cec:	68fb      	ldr	r3, [r7, #12]
	}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	3718      	adds	r7, #24
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}

08007cf6 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8007cf6:	b590      	push	{r4, r7, lr}
 8007cf8:	b087      	sub	sp, #28
 8007cfa:	af00      	add	r7, sp, #0
 8007cfc:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8007d02:	693b      	ldr	r3, [r7, #16]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d109      	bne.n	8007d1c <xQueueGiveMutexRecursive+0x26>
 8007d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d0c:	f383 8811 	msr	BASEPRI, r3
 8007d10:	f3bf 8f6f 	isb	sy
 8007d14:	f3bf 8f4f 	dsb	sy
 8007d18:	60fb      	str	r3, [r7, #12]
 8007d1a:	e7fe      	b.n	8007d1a <xQueueGiveMutexRecursive+0x24>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
 8007d1c:	693b      	ldr	r3, [r7, #16]
 8007d1e:	685c      	ldr	r4, [r3, #4]
 8007d20:	f001 fc7c 	bl	800961c <xTaskGetCurrentTaskHandle>
 8007d24:	4603      	mov	r3, r0
 8007d26:	429c      	cmp	r4, r3
 8007d28:	d111      	bne.n	8007d4e <xQueueGiveMutexRecursive+0x58>
			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.uxRecursiveCallCount )--;
 8007d2a:	693b      	ldr	r3, [r7, #16]
 8007d2c:	68db      	ldr	r3, [r3, #12]
 8007d2e:	1e5a      	subs	r2, r3, #1
 8007d30:	693b      	ldr	r3, [r7, #16]
 8007d32:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8007d34:	693b      	ldr	r3, [r7, #16]
 8007d36:	68db      	ldr	r3, [r3, #12]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d105      	bne.n	8007d48 <xQueueGiveMutexRecursive+0x52>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	2200      	movs	r2, #0
 8007d40:	2100      	movs	r1, #0
 8007d42:	6938      	ldr	r0, [r7, #16]
 8007d44:	f000 f840 	bl	8007dc8 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8007d48:	2301      	movs	r3, #1
 8007d4a:	617b      	str	r3, [r7, #20]
 8007d4c:	e001      	b.n	8007d52 <xQueueGiveMutexRecursive+0x5c>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8007d4e:	2300      	movs	r3, #0
 8007d50:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8007d52:	697b      	ldr	r3, [r7, #20]
	}
 8007d54:	4618      	mov	r0, r3
 8007d56:	371c      	adds	r7, #28
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd90      	pop	{r4, r7, pc}

08007d5c <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8007d5c:	b590      	push	{r4, r7, lr}
 8007d5e:	b087      	sub	sp, #28
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
 8007d64:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8007d6a:	693b      	ldr	r3, [r7, #16]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d109      	bne.n	8007d84 <xQueueTakeMutexRecursive+0x28>
 8007d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d74:	f383 8811 	msr	BASEPRI, r3
 8007d78:	f3bf 8f6f 	isb	sy
 8007d7c:	f3bf 8f4f 	dsb	sy
 8007d80:	60fb      	str	r3, [r7, #12]
 8007d82:	e7fe      	b.n	8007d82 <xQueueTakeMutexRecursive+0x26>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8007d84:	693b      	ldr	r3, [r7, #16]
 8007d86:	685c      	ldr	r4, [r3, #4]
 8007d88:	f001 fc48 	bl	800961c <xTaskGetCurrentTaskHandle>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	429c      	cmp	r4, r3
 8007d90:	d107      	bne.n	8007da2 <xQueueTakeMutexRecursive+0x46>
		{
			( pxMutex->u.uxRecursiveCallCount )++;
 8007d92:	693b      	ldr	r3, [r7, #16]
 8007d94:	68db      	ldr	r3, [r3, #12]
 8007d96:	1c5a      	adds	r2, r3, #1
 8007d98:	693b      	ldr	r3, [r7, #16]
 8007d9a:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	617b      	str	r3, [r7, #20]
 8007da0:	e00c      	b.n	8007dbc <xQueueTakeMutexRecursive+0x60>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8007da2:	6839      	ldr	r1, [r7, #0]
 8007da4:	6938      	ldr	r0, [r7, #16]
 8007da6:	f000 fb03 	bl	80083b0 <xQueueSemaphoreTake>
 8007daa:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8007dac:	697b      	ldr	r3, [r7, #20]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d004      	beq.n	8007dbc <xQueueTakeMutexRecursive+0x60>
			{
				( pxMutex->u.uxRecursiveCallCount )++;
 8007db2:	693b      	ldr	r3, [r7, #16]
 8007db4:	68db      	ldr	r3, [r3, #12]
 8007db6:	1c5a      	adds	r2, r3, #1
 8007db8:	693b      	ldr	r3, [r7, #16]
 8007dba:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8007dbc:	697b      	ldr	r3, [r7, #20]
	}
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	371c      	adds	r7, #28
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd90      	pop	{r4, r7, pc}
	...

08007dc8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b08e      	sub	sp, #56	; 0x38
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	60f8      	str	r0, [r7, #12]
 8007dd0:	60b9      	str	r1, [r7, #8]
 8007dd2:	607a      	str	r2, [r7, #4]
 8007dd4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d109      	bne.n	8007df8 <xQueueGenericSend+0x30>
 8007de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007de8:	f383 8811 	msr	BASEPRI, r3
 8007dec:	f3bf 8f6f 	isb	sy
 8007df0:	f3bf 8f4f 	dsb	sy
 8007df4:	62bb      	str	r3, [r7, #40]	; 0x28
 8007df6:	e7fe      	b.n	8007df6 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d103      	bne.n	8007e06 <xQueueGenericSend+0x3e>
 8007dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d101      	bne.n	8007e0a <xQueueGenericSend+0x42>
 8007e06:	2301      	movs	r3, #1
 8007e08:	e000      	b.n	8007e0c <xQueueGenericSend+0x44>
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d109      	bne.n	8007e24 <xQueueGenericSend+0x5c>
 8007e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e14:	f383 8811 	msr	BASEPRI, r3
 8007e18:	f3bf 8f6f 	isb	sy
 8007e1c:	f3bf 8f4f 	dsb	sy
 8007e20:	627b      	str	r3, [r7, #36]	; 0x24
 8007e22:	e7fe      	b.n	8007e22 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	2b02      	cmp	r3, #2
 8007e28:	d103      	bne.n	8007e32 <xQueueGenericSend+0x6a>
 8007e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e2e:	2b01      	cmp	r3, #1
 8007e30:	d101      	bne.n	8007e36 <xQueueGenericSend+0x6e>
 8007e32:	2301      	movs	r3, #1
 8007e34:	e000      	b.n	8007e38 <xQueueGenericSend+0x70>
 8007e36:	2300      	movs	r3, #0
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d109      	bne.n	8007e50 <xQueueGenericSend+0x88>
 8007e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e40:	f383 8811 	msr	BASEPRI, r3
 8007e44:	f3bf 8f6f 	isb	sy
 8007e48:	f3bf 8f4f 	dsb	sy
 8007e4c:	623b      	str	r3, [r7, #32]
 8007e4e:	e7fe      	b.n	8007e4e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007e50:	f001 fbf4 	bl	800963c <xTaskGetSchedulerState>
 8007e54:	4603      	mov	r3, r0
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d102      	bne.n	8007e60 <xQueueGenericSend+0x98>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d101      	bne.n	8007e64 <xQueueGenericSend+0x9c>
 8007e60:	2301      	movs	r3, #1
 8007e62:	e000      	b.n	8007e66 <xQueueGenericSend+0x9e>
 8007e64:	2300      	movs	r3, #0
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d109      	bne.n	8007e7e <xQueueGenericSend+0xb6>
 8007e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e6e:	f383 8811 	msr	BASEPRI, r3
 8007e72:	f3bf 8f6f 	isb	sy
 8007e76:	f3bf 8f4f 	dsb	sy
 8007e7a:	61fb      	str	r3, [r7, #28]
 8007e7c:	e7fe      	b.n	8007e7c <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007e7e:	f002 f845 	bl	8009f0c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e8a:	429a      	cmp	r2, r3
 8007e8c:	d302      	bcc.n	8007e94 <xQueueGenericSend+0xcc>
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	2b02      	cmp	r3, #2
 8007e92:	d129      	bne.n	8007ee8 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007e94:	683a      	ldr	r2, [r7, #0]
 8007e96:	68b9      	ldr	r1, [r7, #8]
 8007e98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e9a:	f000 fc26 	bl	80086ea <prvCopyDataToQueue>
 8007e9e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d010      	beq.n	8007eca <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eaa:	3324      	adds	r3, #36	; 0x24
 8007eac:	4618      	mov	r0, r3
 8007eae:	f001 f9f7 	bl	80092a0 <xTaskRemoveFromEventList>
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d013      	beq.n	8007ee0 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007eb8:	4b3f      	ldr	r3, [pc, #252]	; (8007fb8 <xQueueGenericSend+0x1f0>)
 8007eba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ebe:	601a      	str	r2, [r3, #0]
 8007ec0:	f3bf 8f4f 	dsb	sy
 8007ec4:	f3bf 8f6f 	isb	sy
 8007ec8:	e00a      	b.n	8007ee0 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d007      	beq.n	8007ee0 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007ed0:	4b39      	ldr	r3, [pc, #228]	; (8007fb8 <xQueueGenericSend+0x1f0>)
 8007ed2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ed6:	601a      	str	r2, [r3, #0]
 8007ed8:	f3bf 8f4f 	dsb	sy
 8007edc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007ee0:	f002 f842 	bl	8009f68 <vPortExitCritical>
				return pdPASS;
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	e063      	b.n	8007fb0 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d103      	bne.n	8007ef6 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007eee:	f002 f83b 	bl	8009f68 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	e05c      	b.n	8007fb0 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007ef6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d106      	bne.n	8007f0a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007efc:	f107 0314 	add.w	r3, r7, #20
 8007f00:	4618      	mov	r0, r3
 8007f02:	f001 fa2f 	bl	8009364 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007f06:	2301      	movs	r3, #1
 8007f08:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007f0a:	f002 f82d 	bl	8009f68 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007f0e:	f000 ff9b 	bl	8008e48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007f12:	f001 fffb 	bl	8009f0c <vPortEnterCritical>
 8007f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f18:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007f1c:	b25b      	sxtb	r3, r3
 8007f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f22:	d103      	bne.n	8007f2c <xQueueGenericSend+0x164>
 8007f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f26:	2200      	movs	r2, #0
 8007f28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f2e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007f32:	b25b      	sxtb	r3, r3
 8007f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f38:	d103      	bne.n	8007f42 <xQueueGenericSend+0x17a>
 8007f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007f42:	f002 f811 	bl	8009f68 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007f46:	1d3a      	adds	r2, r7, #4
 8007f48:	f107 0314 	add.w	r3, r7, #20
 8007f4c:	4611      	mov	r1, r2
 8007f4e:	4618      	mov	r0, r3
 8007f50:	f001 fa1e 	bl	8009390 <xTaskCheckForTimeOut>
 8007f54:	4603      	mov	r3, r0
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d124      	bne.n	8007fa4 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007f5a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f5c:	f000 fcbd 	bl	80088da <prvIsQueueFull>
 8007f60:	4603      	mov	r3, r0
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d018      	beq.n	8007f98 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f68:	3310      	adds	r3, #16
 8007f6a:	687a      	ldr	r2, [r7, #4]
 8007f6c:	4611      	mov	r1, r2
 8007f6e:	4618      	mov	r0, r3
 8007f70:	f001 f972 	bl	8009258 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007f74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f76:	f000 fc48 	bl	800880a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007f7a:	f000 ff73 	bl	8008e64 <xTaskResumeAll>
 8007f7e:	4603      	mov	r3, r0
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	f47f af7c 	bne.w	8007e7e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8007f86:	4b0c      	ldr	r3, [pc, #48]	; (8007fb8 <xQueueGenericSend+0x1f0>)
 8007f88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f8c:	601a      	str	r2, [r3, #0]
 8007f8e:	f3bf 8f4f 	dsb	sy
 8007f92:	f3bf 8f6f 	isb	sy
 8007f96:	e772      	b.n	8007e7e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007f98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f9a:	f000 fc36 	bl	800880a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007f9e:	f000 ff61 	bl	8008e64 <xTaskResumeAll>
 8007fa2:	e76c      	b.n	8007e7e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007fa4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007fa6:	f000 fc30 	bl	800880a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007faa:	f000 ff5b 	bl	8008e64 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007fae:	2300      	movs	r3, #0
		}
	}
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	3738      	adds	r7, #56	; 0x38
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bd80      	pop	{r7, pc}
 8007fb8:	e000ed04 	.word	0xe000ed04

08007fbc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b08e      	sub	sp, #56	; 0x38
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	60f8      	str	r0, [r7, #12]
 8007fc4:	60b9      	str	r1, [r7, #8]
 8007fc6:	607a      	str	r2, [r7, #4]
 8007fc8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d109      	bne.n	8007fe8 <xQueueGenericSendFromISR+0x2c>
 8007fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fd8:	f383 8811 	msr	BASEPRI, r3
 8007fdc:	f3bf 8f6f 	isb	sy
 8007fe0:	f3bf 8f4f 	dsb	sy
 8007fe4:	627b      	str	r3, [r7, #36]	; 0x24
 8007fe6:	e7fe      	b.n	8007fe6 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d103      	bne.n	8007ff6 <xQueueGenericSendFromISR+0x3a>
 8007fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d101      	bne.n	8007ffa <xQueueGenericSendFromISR+0x3e>
 8007ff6:	2301      	movs	r3, #1
 8007ff8:	e000      	b.n	8007ffc <xQueueGenericSendFromISR+0x40>
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d109      	bne.n	8008014 <xQueueGenericSendFromISR+0x58>
 8008000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008004:	f383 8811 	msr	BASEPRI, r3
 8008008:	f3bf 8f6f 	isb	sy
 800800c:	f3bf 8f4f 	dsb	sy
 8008010:	623b      	str	r3, [r7, #32]
 8008012:	e7fe      	b.n	8008012 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	2b02      	cmp	r3, #2
 8008018:	d103      	bne.n	8008022 <xQueueGenericSendFromISR+0x66>
 800801a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800801c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800801e:	2b01      	cmp	r3, #1
 8008020:	d101      	bne.n	8008026 <xQueueGenericSendFromISR+0x6a>
 8008022:	2301      	movs	r3, #1
 8008024:	e000      	b.n	8008028 <xQueueGenericSendFromISR+0x6c>
 8008026:	2300      	movs	r3, #0
 8008028:	2b00      	cmp	r3, #0
 800802a:	d109      	bne.n	8008040 <xQueueGenericSendFromISR+0x84>
 800802c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008030:	f383 8811 	msr	BASEPRI, r3
 8008034:	f3bf 8f6f 	isb	sy
 8008038:	f3bf 8f4f 	dsb	sy
 800803c:	61fb      	str	r3, [r7, #28]
 800803e:	e7fe      	b.n	800803e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008040:	f002 f840 	bl	800a0c4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008044:	f3ef 8211 	mrs	r2, BASEPRI
 8008048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800804c:	f383 8811 	msr	BASEPRI, r3
 8008050:	f3bf 8f6f 	isb	sy
 8008054:	f3bf 8f4f 	dsb	sy
 8008058:	61ba      	str	r2, [r7, #24]
 800805a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800805c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800805e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008062:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008066:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008068:	429a      	cmp	r2, r3
 800806a:	d302      	bcc.n	8008072 <xQueueGenericSendFromISR+0xb6>
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	2b02      	cmp	r3, #2
 8008070:	d12c      	bne.n	80080cc <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008074:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008078:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800807c:	683a      	ldr	r2, [r7, #0]
 800807e:	68b9      	ldr	r1, [r7, #8]
 8008080:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008082:	f000 fb32 	bl	80086ea <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008086:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800808a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800808e:	d112      	bne.n	80080b6 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008094:	2b00      	cmp	r3, #0
 8008096:	d016      	beq.n	80080c6 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800809a:	3324      	adds	r3, #36	; 0x24
 800809c:	4618      	mov	r0, r3
 800809e:	f001 f8ff 	bl	80092a0 <xTaskRemoveFromEventList>
 80080a2:	4603      	mov	r3, r0
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d00e      	beq.n	80080c6 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d00b      	beq.n	80080c6 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2201      	movs	r2, #1
 80080b2:	601a      	str	r2, [r3, #0]
 80080b4:	e007      	b.n	80080c6 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80080b6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80080ba:	3301      	adds	r3, #1
 80080bc:	b2db      	uxtb	r3, r3
 80080be:	b25a      	sxtb	r2, r3
 80080c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80080c6:	2301      	movs	r3, #1
 80080c8:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80080ca:	e001      	b.n	80080d0 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80080cc:	2300      	movs	r3, #0
 80080ce:	637b      	str	r3, [r7, #52]	; 0x34
 80080d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080d2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80080d4:	693b      	ldr	r3, [r7, #16]
 80080d6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80080da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80080dc:	4618      	mov	r0, r3
 80080de:	3738      	adds	r7, #56	; 0x38
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bd80      	pop	{r7, pc}

080080e4 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b08e      	sub	sp, #56	; 0x38
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
 80080ec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80080f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d109      	bne.n	800810c <xQueueGiveFromISR+0x28>
	__asm volatile
 80080f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080fc:	f383 8811 	msr	BASEPRI, r3
 8008100:	f3bf 8f6f 	isb	sy
 8008104:	f3bf 8f4f 	dsb	sy
 8008108:	623b      	str	r3, [r7, #32]
 800810a:	e7fe      	b.n	800810a <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800810c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800810e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008110:	2b00      	cmp	r3, #0
 8008112:	d009      	beq.n	8008128 <xQueueGiveFromISR+0x44>
 8008114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008118:	f383 8811 	msr	BASEPRI, r3
 800811c:	f3bf 8f6f 	isb	sy
 8008120:	f3bf 8f4f 	dsb	sy
 8008124:	61fb      	str	r3, [r7, #28]
 8008126:	e7fe      	b.n	8008126 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8008128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d103      	bne.n	8008138 <xQueueGiveFromISR+0x54>
 8008130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008132:	685b      	ldr	r3, [r3, #4]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d101      	bne.n	800813c <xQueueGiveFromISR+0x58>
 8008138:	2301      	movs	r3, #1
 800813a:	e000      	b.n	800813e <xQueueGiveFromISR+0x5a>
 800813c:	2300      	movs	r3, #0
 800813e:	2b00      	cmp	r3, #0
 8008140:	d109      	bne.n	8008156 <xQueueGiveFromISR+0x72>
 8008142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008146:	f383 8811 	msr	BASEPRI, r3
 800814a:	f3bf 8f6f 	isb	sy
 800814e:	f3bf 8f4f 	dsb	sy
 8008152:	61bb      	str	r3, [r7, #24]
 8008154:	e7fe      	b.n	8008154 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008156:	f001 ffb5 	bl	800a0c4 <vPortValidateInterruptPriority>
	__asm volatile
 800815a:	f3ef 8211 	mrs	r2, BASEPRI
 800815e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008162:	f383 8811 	msr	BASEPRI, r3
 8008166:	f3bf 8f6f 	isb	sy
 800816a:	f3bf 8f4f 	dsb	sy
 800816e:	617a      	str	r2, [r7, #20]
 8008170:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8008172:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008174:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800817a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800817c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800817e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008180:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008182:	429a      	cmp	r2, r3
 8008184:	d22b      	bcs.n	80081de <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008188:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800818c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008192:	1c5a      	adds	r2, r3, #1
 8008194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008196:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008198:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800819c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081a0:	d112      	bne.n	80081c8 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80081a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d016      	beq.n	80081d8 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80081aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ac:	3324      	adds	r3, #36	; 0x24
 80081ae:	4618      	mov	r0, r3
 80081b0:	f001 f876 	bl	80092a0 <xTaskRemoveFromEventList>
 80081b4:	4603      	mov	r3, r0
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d00e      	beq.n	80081d8 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d00b      	beq.n	80081d8 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	2201      	movs	r2, #1
 80081c4:	601a      	str	r2, [r3, #0]
 80081c6:	e007      	b.n	80081d8 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80081c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80081cc:	3301      	adds	r3, #1
 80081ce:	b2db      	uxtb	r3, r3
 80081d0:	b25a      	sxtb	r2, r3
 80081d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80081d8:	2301      	movs	r3, #1
 80081da:	637b      	str	r3, [r7, #52]	; 0x34
 80081dc:	e001      	b.n	80081e2 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80081de:	2300      	movs	r3, #0
 80081e0:	637b      	str	r3, [r7, #52]	; 0x34
 80081e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081e4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80081ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80081ee:	4618      	mov	r0, r3
 80081f0:	3738      	adds	r7, #56	; 0x38
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bd80      	pop	{r7, pc}
	...

080081f8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b08c      	sub	sp, #48	; 0x30
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	60f8      	str	r0, [r7, #12]
 8008200:	60b9      	str	r1, [r7, #8]
 8008202:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008204:	2300      	movs	r3, #0
 8008206:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800820c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800820e:	2b00      	cmp	r3, #0
 8008210:	d109      	bne.n	8008226 <xQueueReceive+0x2e>
	__asm volatile
 8008212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008216:	f383 8811 	msr	BASEPRI, r3
 800821a:	f3bf 8f6f 	isb	sy
 800821e:	f3bf 8f4f 	dsb	sy
 8008222:	623b      	str	r3, [r7, #32]
 8008224:	e7fe      	b.n	8008224 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008226:	68bb      	ldr	r3, [r7, #8]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d103      	bne.n	8008234 <xQueueReceive+0x3c>
 800822c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800822e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008230:	2b00      	cmp	r3, #0
 8008232:	d101      	bne.n	8008238 <xQueueReceive+0x40>
 8008234:	2301      	movs	r3, #1
 8008236:	e000      	b.n	800823a <xQueueReceive+0x42>
 8008238:	2300      	movs	r3, #0
 800823a:	2b00      	cmp	r3, #0
 800823c:	d109      	bne.n	8008252 <xQueueReceive+0x5a>
 800823e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008242:	f383 8811 	msr	BASEPRI, r3
 8008246:	f3bf 8f6f 	isb	sy
 800824a:	f3bf 8f4f 	dsb	sy
 800824e:	61fb      	str	r3, [r7, #28]
 8008250:	e7fe      	b.n	8008250 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008252:	f001 f9f3 	bl	800963c <xTaskGetSchedulerState>
 8008256:	4603      	mov	r3, r0
 8008258:	2b00      	cmp	r3, #0
 800825a:	d102      	bne.n	8008262 <xQueueReceive+0x6a>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d101      	bne.n	8008266 <xQueueReceive+0x6e>
 8008262:	2301      	movs	r3, #1
 8008264:	e000      	b.n	8008268 <xQueueReceive+0x70>
 8008266:	2300      	movs	r3, #0
 8008268:	2b00      	cmp	r3, #0
 800826a:	d109      	bne.n	8008280 <xQueueReceive+0x88>
 800826c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008270:	f383 8811 	msr	BASEPRI, r3
 8008274:	f3bf 8f6f 	isb	sy
 8008278:	f3bf 8f4f 	dsb	sy
 800827c:	61bb      	str	r3, [r7, #24]
 800827e:	e7fe      	b.n	800827e <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8008280:	f001 fe44 	bl	8009f0c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008288:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800828a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800828c:	2b00      	cmp	r3, #0
 800828e:	d01f      	beq.n	80082d0 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008290:	68b9      	ldr	r1, [r7, #8]
 8008292:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008294:	f000 fa93 	bl	80087be <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800829a:	1e5a      	subs	r2, r3, #1
 800829c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800829e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80082a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082a2:	691b      	ldr	r3, [r3, #16]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d00f      	beq.n	80082c8 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80082a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082aa:	3310      	adds	r3, #16
 80082ac:	4618      	mov	r0, r3
 80082ae:	f000 fff7 	bl	80092a0 <xTaskRemoveFromEventList>
 80082b2:	4603      	mov	r3, r0
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d007      	beq.n	80082c8 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80082b8:	4b3c      	ldr	r3, [pc, #240]	; (80083ac <xQueueReceive+0x1b4>)
 80082ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082be:	601a      	str	r2, [r3, #0]
 80082c0:	f3bf 8f4f 	dsb	sy
 80082c4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80082c8:	f001 fe4e 	bl	8009f68 <vPortExitCritical>
				return pdPASS;
 80082cc:	2301      	movs	r3, #1
 80082ce:	e069      	b.n	80083a4 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d103      	bne.n	80082de <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80082d6:	f001 fe47 	bl	8009f68 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80082da:	2300      	movs	r3, #0
 80082dc:	e062      	b.n	80083a4 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80082de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d106      	bne.n	80082f2 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80082e4:	f107 0310 	add.w	r3, r7, #16
 80082e8:	4618      	mov	r0, r3
 80082ea:	f001 f83b 	bl	8009364 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80082ee:	2301      	movs	r3, #1
 80082f0:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80082f2:	f001 fe39 	bl	8009f68 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80082f6:	f000 fda7 	bl	8008e48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80082fa:	f001 fe07 	bl	8009f0c <vPortEnterCritical>
 80082fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008300:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008304:	b25b      	sxtb	r3, r3
 8008306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800830a:	d103      	bne.n	8008314 <xQueueReceive+0x11c>
 800830c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800830e:	2200      	movs	r2, #0
 8008310:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008316:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800831a:	b25b      	sxtb	r3, r3
 800831c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008320:	d103      	bne.n	800832a <xQueueReceive+0x132>
 8008322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008324:	2200      	movs	r2, #0
 8008326:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800832a:	f001 fe1d 	bl	8009f68 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800832e:	1d3a      	adds	r2, r7, #4
 8008330:	f107 0310 	add.w	r3, r7, #16
 8008334:	4611      	mov	r1, r2
 8008336:	4618      	mov	r0, r3
 8008338:	f001 f82a 	bl	8009390 <xTaskCheckForTimeOut>
 800833c:	4603      	mov	r3, r0
 800833e:	2b00      	cmp	r3, #0
 8008340:	d123      	bne.n	800838a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008342:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008344:	f000 fab3 	bl	80088ae <prvIsQueueEmpty>
 8008348:	4603      	mov	r3, r0
 800834a:	2b00      	cmp	r3, #0
 800834c:	d017      	beq.n	800837e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800834e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008350:	3324      	adds	r3, #36	; 0x24
 8008352:	687a      	ldr	r2, [r7, #4]
 8008354:	4611      	mov	r1, r2
 8008356:	4618      	mov	r0, r3
 8008358:	f000 ff7e 	bl	8009258 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800835c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800835e:	f000 fa54 	bl	800880a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008362:	f000 fd7f 	bl	8008e64 <xTaskResumeAll>
 8008366:	4603      	mov	r3, r0
 8008368:	2b00      	cmp	r3, #0
 800836a:	d189      	bne.n	8008280 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800836c:	4b0f      	ldr	r3, [pc, #60]	; (80083ac <xQueueReceive+0x1b4>)
 800836e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008372:	601a      	str	r2, [r3, #0]
 8008374:	f3bf 8f4f 	dsb	sy
 8008378:	f3bf 8f6f 	isb	sy
 800837c:	e780      	b.n	8008280 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800837e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008380:	f000 fa43 	bl	800880a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008384:	f000 fd6e 	bl	8008e64 <xTaskResumeAll>
 8008388:	e77a      	b.n	8008280 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800838a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800838c:	f000 fa3d 	bl	800880a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008390:	f000 fd68 	bl	8008e64 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008394:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008396:	f000 fa8a 	bl	80088ae <prvIsQueueEmpty>
 800839a:	4603      	mov	r3, r0
 800839c:	2b00      	cmp	r3, #0
 800839e:	f43f af6f 	beq.w	8008280 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80083a2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80083a4:	4618      	mov	r0, r3
 80083a6:	3730      	adds	r7, #48	; 0x30
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bd80      	pop	{r7, pc}
 80083ac:	e000ed04 	.word	0xe000ed04

080083b0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b08e      	sub	sp, #56	; 0x38
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
 80083b8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80083ba:	2300      	movs	r3, #0
 80083bc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80083c2:	2300      	movs	r3, #0
 80083c4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80083c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d109      	bne.n	80083e0 <xQueueSemaphoreTake+0x30>
 80083cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083d0:	f383 8811 	msr	BASEPRI, r3
 80083d4:	f3bf 8f6f 	isb	sy
 80083d8:	f3bf 8f4f 	dsb	sy
 80083dc:	623b      	str	r3, [r7, #32]
 80083de:	e7fe      	b.n	80083de <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80083e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d009      	beq.n	80083fc <xQueueSemaphoreTake+0x4c>
 80083e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083ec:	f383 8811 	msr	BASEPRI, r3
 80083f0:	f3bf 8f6f 	isb	sy
 80083f4:	f3bf 8f4f 	dsb	sy
 80083f8:	61fb      	str	r3, [r7, #28]
 80083fa:	e7fe      	b.n	80083fa <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80083fc:	f001 f91e 	bl	800963c <xTaskGetSchedulerState>
 8008400:	4603      	mov	r3, r0
 8008402:	2b00      	cmp	r3, #0
 8008404:	d102      	bne.n	800840c <xQueueSemaphoreTake+0x5c>
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d101      	bne.n	8008410 <xQueueSemaphoreTake+0x60>
 800840c:	2301      	movs	r3, #1
 800840e:	e000      	b.n	8008412 <xQueueSemaphoreTake+0x62>
 8008410:	2300      	movs	r3, #0
 8008412:	2b00      	cmp	r3, #0
 8008414:	d109      	bne.n	800842a <xQueueSemaphoreTake+0x7a>
 8008416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800841a:	f383 8811 	msr	BASEPRI, r3
 800841e:	f3bf 8f6f 	isb	sy
 8008422:	f3bf 8f4f 	dsb	sy
 8008426:	61bb      	str	r3, [r7, #24]
 8008428:	e7fe      	b.n	8008428 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800842a:	f001 fd6f 	bl	8009f0c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800842e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008432:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008436:	2b00      	cmp	r3, #0
 8008438:	d024      	beq.n	8008484 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800843a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800843c:	1e5a      	subs	r2, r3, #1
 800843e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008440:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d104      	bne.n	8008454 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800844a:	f001 fabd 	bl	80099c8 <pvTaskIncrementMutexHeldCount>
 800844e:	4602      	mov	r2, r0
 8008450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008452:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008456:	691b      	ldr	r3, [r3, #16]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d00f      	beq.n	800847c <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800845c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800845e:	3310      	adds	r3, #16
 8008460:	4618      	mov	r0, r3
 8008462:	f000 ff1d 	bl	80092a0 <xTaskRemoveFromEventList>
 8008466:	4603      	mov	r3, r0
 8008468:	2b00      	cmp	r3, #0
 800846a:	d007      	beq.n	800847c <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800846c:	4b53      	ldr	r3, [pc, #332]	; (80085bc <xQueueSemaphoreTake+0x20c>)
 800846e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008472:	601a      	str	r2, [r3, #0]
 8008474:	f3bf 8f4f 	dsb	sy
 8008478:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800847c:	f001 fd74 	bl	8009f68 <vPortExitCritical>
				return pdPASS;
 8008480:	2301      	movs	r3, #1
 8008482:	e096      	b.n	80085b2 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d110      	bne.n	80084ac <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800848a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800848c:	2b00      	cmp	r3, #0
 800848e:	d009      	beq.n	80084a4 <xQueueSemaphoreTake+0xf4>
 8008490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008494:	f383 8811 	msr	BASEPRI, r3
 8008498:	f3bf 8f6f 	isb	sy
 800849c:	f3bf 8f4f 	dsb	sy
 80084a0:	617b      	str	r3, [r7, #20]
 80084a2:	e7fe      	b.n	80084a2 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80084a4:	f001 fd60 	bl	8009f68 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80084a8:	2300      	movs	r3, #0
 80084aa:	e082      	b.n	80085b2 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 80084ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d106      	bne.n	80084c0 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80084b2:	f107 030c 	add.w	r3, r7, #12
 80084b6:	4618      	mov	r0, r3
 80084b8:	f000 ff54 	bl	8009364 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80084bc:	2301      	movs	r3, #1
 80084be:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80084c0:	f001 fd52 	bl	8009f68 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80084c4:	f000 fcc0 	bl	8008e48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80084c8:	f001 fd20 	bl	8009f0c <vPortEnterCritical>
 80084cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80084d2:	b25b      	sxtb	r3, r3
 80084d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084d8:	d103      	bne.n	80084e2 <xQueueSemaphoreTake+0x132>
 80084da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084dc:	2200      	movs	r2, #0
 80084de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80084e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80084e8:	b25b      	sxtb	r3, r3
 80084ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084ee:	d103      	bne.n	80084f8 <xQueueSemaphoreTake+0x148>
 80084f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084f2:	2200      	movs	r2, #0
 80084f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80084f8:	f001 fd36 	bl	8009f68 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80084fc:	463a      	mov	r2, r7
 80084fe:	f107 030c 	add.w	r3, r7, #12
 8008502:	4611      	mov	r1, r2
 8008504:	4618      	mov	r0, r3
 8008506:	f000 ff43 	bl	8009390 <xTaskCheckForTimeOut>
 800850a:	4603      	mov	r3, r0
 800850c:	2b00      	cmp	r3, #0
 800850e:	d132      	bne.n	8008576 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008510:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008512:	f000 f9cc 	bl	80088ae <prvIsQueueEmpty>
 8008516:	4603      	mov	r3, r0
 8008518:	2b00      	cmp	r3, #0
 800851a:	d026      	beq.n	800856a <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800851c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d109      	bne.n	8008538 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8008524:	f001 fcf2 	bl	8009f0c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8008528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800852a:	685b      	ldr	r3, [r3, #4]
 800852c:	4618      	mov	r0, r3
 800852e:	f001 f8a3 	bl	8009678 <xTaskPriorityInherit>
 8008532:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8008534:	f001 fd18 	bl	8009f68 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800853a:	3324      	adds	r3, #36	; 0x24
 800853c:	683a      	ldr	r2, [r7, #0]
 800853e:	4611      	mov	r1, r2
 8008540:	4618      	mov	r0, r3
 8008542:	f000 fe89 	bl	8009258 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008546:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008548:	f000 f95f 	bl	800880a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800854c:	f000 fc8a 	bl	8008e64 <xTaskResumeAll>
 8008550:	4603      	mov	r3, r0
 8008552:	2b00      	cmp	r3, #0
 8008554:	f47f af69 	bne.w	800842a <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8008558:	4b18      	ldr	r3, [pc, #96]	; (80085bc <xQueueSemaphoreTake+0x20c>)
 800855a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800855e:	601a      	str	r2, [r3, #0]
 8008560:	f3bf 8f4f 	dsb	sy
 8008564:	f3bf 8f6f 	isb	sy
 8008568:	e75f      	b.n	800842a <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800856a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800856c:	f000 f94d 	bl	800880a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008570:	f000 fc78 	bl	8008e64 <xTaskResumeAll>
 8008574:	e759      	b.n	800842a <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008576:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008578:	f000 f947 	bl	800880a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800857c:	f000 fc72 	bl	8008e64 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008580:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008582:	f000 f994 	bl	80088ae <prvIsQueueEmpty>
 8008586:	4603      	mov	r3, r0
 8008588:	2b00      	cmp	r3, #0
 800858a:	f43f af4e 	beq.w	800842a <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800858e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008590:	2b00      	cmp	r3, #0
 8008592:	d00d      	beq.n	80085b0 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8008594:	f001 fcba 	bl	8009f0c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008598:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800859a:	f000 f88e 	bl	80086ba <prvGetDisinheritPriorityAfterTimeout>
 800859e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80085a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085a2:	685b      	ldr	r3, [r3, #4]
 80085a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80085a6:	4618      	mov	r0, r3
 80085a8:	f001 f970 	bl	800988c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80085ac:	f001 fcdc 	bl	8009f68 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80085b0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	3738      	adds	r7, #56	; 0x38
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bd80      	pop	{r7, pc}
 80085ba:	bf00      	nop
 80085bc:	e000ed04 	.word	0xe000ed04

080085c0 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b08e      	sub	sp, #56	; 0x38
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	60f8      	str	r0, [r7, #12]
 80085c8:	60b9      	str	r1, [r7, #8]
 80085ca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80085d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d109      	bne.n	80085ea <xQueueReceiveFromISR+0x2a>
 80085d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085da:	f383 8811 	msr	BASEPRI, r3
 80085de:	f3bf 8f6f 	isb	sy
 80085e2:	f3bf 8f4f 	dsb	sy
 80085e6:	623b      	str	r3, [r7, #32]
 80085e8:	e7fe      	b.n	80085e8 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d103      	bne.n	80085f8 <xQueueReceiveFromISR+0x38>
 80085f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d101      	bne.n	80085fc <xQueueReceiveFromISR+0x3c>
 80085f8:	2301      	movs	r3, #1
 80085fa:	e000      	b.n	80085fe <xQueueReceiveFromISR+0x3e>
 80085fc:	2300      	movs	r3, #0
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d109      	bne.n	8008616 <xQueueReceiveFromISR+0x56>
 8008602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008606:	f383 8811 	msr	BASEPRI, r3
 800860a:	f3bf 8f6f 	isb	sy
 800860e:	f3bf 8f4f 	dsb	sy
 8008612:	61fb      	str	r3, [r7, #28]
 8008614:	e7fe      	b.n	8008614 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008616:	f001 fd55 	bl	800a0c4 <vPortValidateInterruptPriority>
	__asm volatile
 800861a:	f3ef 8211 	mrs	r2, BASEPRI
 800861e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008622:	f383 8811 	msr	BASEPRI, r3
 8008626:	f3bf 8f6f 	isb	sy
 800862a:	f3bf 8f4f 	dsb	sy
 800862e:	61ba      	str	r2, [r7, #24]
 8008630:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008632:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008634:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800863a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800863c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800863e:	2b00      	cmp	r3, #0
 8008640:	d02f      	beq.n	80086a2 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008644:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008648:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800864c:	68b9      	ldr	r1, [r7, #8]
 800864e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008650:	f000 f8b5 	bl	80087be <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008656:	1e5a      	subs	r2, r3, #1
 8008658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800865a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800865c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008664:	d112      	bne.n	800868c <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008668:	691b      	ldr	r3, [r3, #16]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d016      	beq.n	800869c <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800866e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008670:	3310      	adds	r3, #16
 8008672:	4618      	mov	r0, r3
 8008674:	f000 fe14 	bl	80092a0 <xTaskRemoveFromEventList>
 8008678:	4603      	mov	r3, r0
 800867a:	2b00      	cmp	r3, #0
 800867c:	d00e      	beq.n	800869c <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d00b      	beq.n	800869c <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2201      	movs	r2, #1
 8008688:	601a      	str	r2, [r3, #0]
 800868a:	e007      	b.n	800869c <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800868c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008690:	3301      	adds	r3, #1
 8008692:	b2db      	uxtb	r3, r3
 8008694:	b25a      	sxtb	r2, r3
 8008696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008698:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800869c:	2301      	movs	r3, #1
 800869e:	637b      	str	r3, [r7, #52]	; 0x34
 80086a0:	e001      	b.n	80086a6 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 80086a2:	2300      	movs	r3, #0
 80086a4:	637b      	str	r3, [r7, #52]	; 0x34
 80086a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086a8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80086aa:	693b      	ldr	r3, [r7, #16]
 80086ac:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80086b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80086b2:	4618      	mov	r0, r3
 80086b4:	3738      	adds	r7, #56	; 0x38
 80086b6:	46bd      	mov	sp, r7
 80086b8:	bd80      	pop	{r7, pc}

080086ba <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80086ba:	b480      	push	{r7}
 80086bc:	b085      	sub	sp, #20
 80086be:	af00      	add	r7, sp, #0
 80086c0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d006      	beq.n	80086d8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	f1c3 0307 	rsb	r3, r3, #7
 80086d4:	60fb      	str	r3, [r7, #12]
 80086d6:	e001      	b.n	80086dc <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80086d8:	2300      	movs	r3, #0
 80086da:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80086dc:	68fb      	ldr	r3, [r7, #12]
	}
 80086de:	4618      	mov	r0, r3
 80086e0:	3714      	adds	r7, #20
 80086e2:	46bd      	mov	sp, r7
 80086e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e8:	4770      	bx	lr

080086ea <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80086ea:	b580      	push	{r7, lr}
 80086ec:	b086      	sub	sp, #24
 80086ee:	af00      	add	r7, sp, #0
 80086f0:	60f8      	str	r0, [r7, #12]
 80086f2:	60b9      	str	r1, [r7, #8]
 80086f4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80086f6:	2300      	movs	r3, #0
 80086f8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086fe:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008704:	2b00      	cmp	r3, #0
 8008706:	d10d      	bne.n	8008724 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d14d      	bne.n	80087ac <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	685b      	ldr	r3, [r3, #4]
 8008714:	4618      	mov	r0, r3
 8008716:	f001 f835 	bl	8009784 <xTaskPriorityDisinherit>
 800871a:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	2200      	movs	r2, #0
 8008720:	605a      	str	r2, [r3, #4]
 8008722:	e043      	b.n	80087ac <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d119      	bne.n	800875e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	6898      	ldr	r0, [r3, #8]
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008732:	461a      	mov	r2, r3
 8008734:	68b9      	ldr	r1, [r7, #8]
 8008736:	f008 fde7 	bl	8011308 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	689a      	ldr	r2, [r3, #8]
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008742:	441a      	add	r2, r3
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	689a      	ldr	r2, [r3, #8]
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	685b      	ldr	r3, [r3, #4]
 8008750:	429a      	cmp	r2, r3
 8008752:	d32b      	bcc.n	80087ac <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	681a      	ldr	r2, [r3, #0]
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	609a      	str	r2, [r3, #8]
 800875c:	e026      	b.n	80087ac <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	68d8      	ldr	r0, [r3, #12]
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008766:	461a      	mov	r2, r3
 8008768:	68b9      	ldr	r1, [r7, #8]
 800876a:	f008 fdcd 	bl	8011308 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	68da      	ldr	r2, [r3, #12]
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008776:	425b      	negs	r3, r3
 8008778:	441a      	add	r2, r3
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	68da      	ldr	r2, [r3, #12]
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	429a      	cmp	r2, r3
 8008788:	d207      	bcs.n	800879a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	685a      	ldr	r2, [r3, #4]
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008792:	425b      	negs	r3, r3
 8008794:	441a      	add	r2, r3
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	2b02      	cmp	r3, #2
 800879e:	d105      	bne.n	80087ac <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80087a0:	693b      	ldr	r3, [r7, #16]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d002      	beq.n	80087ac <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80087a6:	693b      	ldr	r3, [r7, #16]
 80087a8:	3b01      	subs	r3, #1
 80087aa:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80087ac:	693b      	ldr	r3, [r7, #16]
 80087ae:	1c5a      	adds	r2, r3, #1
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80087b4:	697b      	ldr	r3, [r7, #20]
}
 80087b6:	4618      	mov	r0, r3
 80087b8:	3718      	adds	r7, #24
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bd80      	pop	{r7, pc}

080087be <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80087be:	b580      	push	{r7, lr}
 80087c0:	b082      	sub	sp, #8
 80087c2:	af00      	add	r7, sp, #0
 80087c4:	6078      	str	r0, [r7, #4]
 80087c6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d018      	beq.n	8008802 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	68da      	ldr	r2, [r3, #12]
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087d8:	441a      	add	r2, r3
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	68da      	ldr	r2, [r3, #12]
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	685b      	ldr	r3, [r3, #4]
 80087e6:	429a      	cmp	r2, r3
 80087e8:	d303      	bcc.n	80087f2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681a      	ldr	r2, [r3, #0]
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	68d9      	ldr	r1, [r3, #12]
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087fa:	461a      	mov	r2, r3
 80087fc:	6838      	ldr	r0, [r7, #0]
 80087fe:	f008 fd83 	bl	8011308 <memcpy>
	}
}
 8008802:	bf00      	nop
 8008804:	3708      	adds	r7, #8
 8008806:	46bd      	mov	sp, r7
 8008808:	bd80      	pop	{r7, pc}

0800880a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800880a:	b580      	push	{r7, lr}
 800880c:	b084      	sub	sp, #16
 800880e:	af00      	add	r7, sp, #0
 8008810:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008812:	f001 fb7b 	bl	8009f0c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800881c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800881e:	e011      	b.n	8008844 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008824:	2b00      	cmp	r3, #0
 8008826:	d012      	beq.n	800884e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	3324      	adds	r3, #36	; 0x24
 800882c:	4618      	mov	r0, r3
 800882e:	f000 fd37 	bl	80092a0 <xTaskRemoveFromEventList>
 8008832:	4603      	mov	r3, r0
 8008834:	2b00      	cmp	r3, #0
 8008836:	d001      	beq.n	800883c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008838:	f000 fe1a 	bl	8009470 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800883c:	7bfb      	ldrb	r3, [r7, #15]
 800883e:	3b01      	subs	r3, #1
 8008840:	b2db      	uxtb	r3, r3
 8008842:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008844:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008848:	2b00      	cmp	r3, #0
 800884a:	dce9      	bgt.n	8008820 <prvUnlockQueue+0x16>
 800884c:	e000      	b.n	8008850 <prvUnlockQueue+0x46>
					break;
 800884e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	22ff      	movs	r2, #255	; 0xff
 8008854:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008858:	f001 fb86 	bl	8009f68 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800885c:	f001 fb56 	bl	8009f0c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008866:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008868:	e011      	b.n	800888e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	691b      	ldr	r3, [r3, #16]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d012      	beq.n	8008898 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	3310      	adds	r3, #16
 8008876:	4618      	mov	r0, r3
 8008878:	f000 fd12 	bl	80092a0 <xTaskRemoveFromEventList>
 800887c:	4603      	mov	r3, r0
 800887e:	2b00      	cmp	r3, #0
 8008880:	d001      	beq.n	8008886 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008882:	f000 fdf5 	bl	8009470 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008886:	7bbb      	ldrb	r3, [r7, #14]
 8008888:	3b01      	subs	r3, #1
 800888a:	b2db      	uxtb	r3, r3
 800888c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800888e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008892:	2b00      	cmp	r3, #0
 8008894:	dce9      	bgt.n	800886a <prvUnlockQueue+0x60>
 8008896:	e000      	b.n	800889a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008898:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	22ff      	movs	r2, #255	; 0xff
 800889e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80088a2:	f001 fb61 	bl	8009f68 <vPortExitCritical>
}
 80088a6:	bf00      	nop
 80088a8:	3710      	adds	r7, #16
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}

080088ae <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80088ae:	b580      	push	{r7, lr}
 80088b0:	b084      	sub	sp, #16
 80088b2:	af00      	add	r7, sp, #0
 80088b4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80088b6:	f001 fb29 	bl	8009f0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d102      	bne.n	80088c8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80088c2:	2301      	movs	r3, #1
 80088c4:	60fb      	str	r3, [r7, #12]
 80088c6:	e001      	b.n	80088cc <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80088c8:	2300      	movs	r3, #0
 80088ca:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80088cc:	f001 fb4c 	bl	8009f68 <vPortExitCritical>

	return xReturn;
 80088d0:	68fb      	ldr	r3, [r7, #12]
}
 80088d2:	4618      	mov	r0, r3
 80088d4:	3710      	adds	r7, #16
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bd80      	pop	{r7, pc}

080088da <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80088da:	b580      	push	{r7, lr}
 80088dc:	b084      	sub	sp, #16
 80088de:	af00      	add	r7, sp, #0
 80088e0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80088e2:	f001 fb13 	bl	8009f0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088ee:	429a      	cmp	r2, r3
 80088f0:	d102      	bne.n	80088f8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80088f2:	2301      	movs	r3, #1
 80088f4:	60fb      	str	r3, [r7, #12]
 80088f6:	e001      	b.n	80088fc <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80088f8:	2300      	movs	r3, #0
 80088fa:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80088fc:	f001 fb34 	bl	8009f68 <vPortExitCritical>

	return xReturn;
 8008900:	68fb      	ldr	r3, [r7, #12]
}
 8008902:	4618      	mov	r0, r3
 8008904:	3710      	adds	r7, #16
 8008906:	46bd      	mov	sp, r7
 8008908:	bd80      	pop	{r7, pc}

0800890a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800890a:	b580      	push	{r7, lr}
 800890c:	b08e      	sub	sp, #56	; 0x38
 800890e:	af04      	add	r7, sp, #16
 8008910:	60f8      	str	r0, [r7, #12]
 8008912:	60b9      	str	r1, [r7, #8]
 8008914:	607a      	str	r2, [r7, #4]
 8008916:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008918:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800891a:	2b00      	cmp	r3, #0
 800891c:	d109      	bne.n	8008932 <xTaskCreateStatic+0x28>
	__asm volatile
 800891e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008922:	f383 8811 	msr	BASEPRI, r3
 8008926:	f3bf 8f6f 	isb	sy
 800892a:	f3bf 8f4f 	dsb	sy
 800892e:	623b      	str	r3, [r7, #32]
 8008930:	e7fe      	b.n	8008930 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8008932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008934:	2b00      	cmp	r3, #0
 8008936:	d109      	bne.n	800894c <xTaskCreateStatic+0x42>
 8008938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800893c:	f383 8811 	msr	BASEPRI, r3
 8008940:	f3bf 8f6f 	isb	sy
 8008944:	f3bf 8f4f 	dsb	sy
 8008948:	61fb      	str	r3, [r7, #28]
 800894a:	e7fe      	b.n	800894a <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800894c:	2354      	movs	r3, #84	; 0x54
 800894e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008950:	693b      	ldr	r3, [r7, #16]
 8008952:	2b54      	cmp	r3, #84	; 0x54
 8008954:	d009      	beq.n	800896a <xTaskCreateStatic+0x60>
 8008956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800895a:	f383 8811 	msr	BASEPRI, r3
 800895e:	f3bf 8f6f 	isb	sy
 8008962:	f3bf 8f4f 	dsb	sy
 8008966:	61bb      	str	r3, [r7, #24]
 8008968:	e7fe      	b.n	8008968 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800896a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800896c:	2b00      	cmp	r3, #0
 800896e:	d01e      	beq.n	80089ae <xTaskCreateStatic+0xa4>
 8008970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008972:	2b00      	cmp	r3, #0
 8008974:	d01b      	beq.n	80089ae <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008978:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800897a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800897c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800897e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008982:	2202      	movs	r2, #2
 8008984:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008988:	2300      	movs	r3, #0
 800898a:	9303      	str	r3, [sp, #12]
 800898c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800898e:	9302      	str	r3, [sp, #8]
 8008990:	f107 0314 	add.w	r3, r7, #20
 8008994:	9301      	str	r3, [sp, #4]
 8008996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008998:	9300      	str	r3, [sp, #0]
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	687a      	ldr	r2, [r7, #4]
 800899e:	68b9      	ldr	r1, [r7, #8]
 80089a0:	68f8      	ldr	r0, [r7, #12]
 80089a2:	f000 f850 	bl	8008a46 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80089a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80089a8:	f000 f8d8 	bl	8008b5c <prvAddNewTaskToReadyList>
 80089ac:	e001      	b.n	80089b2 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 80089ae:	2300      	movs	r3, #0
 80089b0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80089b2:	697b      	ldr	r3, [r7, #20]
	}
 80089b4:	4618      	mov	r0, r3
 80089b6:	3728      	adds	r7, #40	; 0x28
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bd80      	pop	{r7, pc}

080089bc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b08c      	sub	sp, #48	; 0x30
 80089c0:	af04      	add	r7, sp, #16
 80089c2:	60f8      	str	r0, [r7, #12]
 80089c4:	60b9      	str	r1, [r7, #8]
 80089c6:	603b      	str	r3, [r7, #0]
 80089c8:	4613      	mov	r3, r2
 80089ca:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80089cc:	88fb      	ldrh	r3, [r7, #6]
 80089ce:	009b      	lsls	r3, r3, #2
 80089d0:	4618      	mov	r0, r3
 80089d2:	f001 fbb5 	bl	800a140 <pvPortMalloc>
 80089d6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80089d8:	697b      	ldr	r3, [r7, #20]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d00e      	beq.n	80089fc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80089de:	2054      	movs	r0, #84	; 0x54
 80089e0:	f001 fbae 	bl	800a140 <pvPortMalloc>
 80089e4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80089e6:	69fb      	ldr	r3, [r7, #28]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d003      	beq.n	80089f4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80089ec:	69fb      	ldr	r3, [r7, #28]
 80089ee:	697a      	ldr	r2, [r7, #20]
 80089f0:	631a      	str	r2, [r3, #48]	; 0x30
 80089f2:	e005      	b.n	8008a00 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80089f4:	6978      	ldr	r0, [r7, #20]
 80089f6:	f001 fc69 	bl	800a2cc <vPortFree>
 80089fa:	e001      	b.n	8008a00 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80089fc:	2300      	movs	r3, #0
 80089fe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008a00:	69fb      	ldr	r3, [r7, #28]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d017      	beq.n	8008a36 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008a06:	69fb      	ldr	r3, [r7, #28]
 8008a08:	2200      	movs	r2, #0
 8008a0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008a0e:	88fa      	ldrh	r2, [r7, #6]
 8008a10:	2300      	movs	r3, #0
 8008a12:	9303      	str	r3, [sp, #12]
 8008a14:	69fb      	ldr	r3, [r7, #28]
 8008a16:	9302      	str	r3, [sp, #8]
 8008a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a1a:	9301      	str	r3, [sp, #4]
 8008a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a1e:	9300      	str	r3, [sp, #0]
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	68b9      	ldr	r1, [r7, #8]
 8008a24:	68f8      	ldr	r0, [r7, #12]
 8008a26:	f000 f80e 	bl	8008a46 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008a2a:	69f8      	ldr	r0, [r7, #28]
 8008a2c:	f000 f896 	bl	8008b5c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008a30:	2301      	movs	r3, #1
 8008a32:	61bb      	str	r3, [r7, #24]
 8008a34:	e002      	b.n	8008a3c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008a36:	f04f 33ff 	mov.w	r3, #4294967295
 8008a3a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008a3c:	69bb      	ldr	r3, [r7, #24]
	}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	3720      	adds	r7, #32
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bd80      	pop	{r7, pc}

08008a46 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008a46:	b580      	push	{r7, lr}
 8008a48:	b088      	sub	sp, #32
 8008a4a:	af00      	add	r7, sp, #0
 8008a4c:	60f8      	str	r0, [r7, #12]
 8008a4e:	60b9      	str	r1, [r7, #8]
 8008a50:	607a      	str	r2, [r7, #4]
 8008a52:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a56:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	009b      	lsls	r3, r3, #2
 8008a5c:	461a      	mov	r2, r3
 8008a5e:	21a5      	movs	r1, #165	; 0xa5
 8008a60:	f008 fc5d 	bl	801131e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8008a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008a6e:	3b01      	subs	r3, #1
 8008a70:	009b      	lsls	r3, r3, #2
 8008a72:	4413      	add	r3, r2
 8008a74:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8008a76:	69bb      	ldr	r3, [r7, #24]
 8008a78:	f023 0307 	bic.w	r3, r3, #7
 8008a7c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008a7e:	69bb      	ldr	r3, [r7, #24]
 8008a80:	f003 0307 	and.w	r3, r3, #7
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d009      	beq.n	8008a9c <prvInitialiseNewTask+0x56>
 8008a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a8c:	f383 8811 	msr	BASEPRI, r3
 8008a90:	f3bf 8f6f 	isb	sy
 8008a94:	f3bf 8f4f 	dsb	sy
 8008a98:	617b      	str	r3, [r7, #20]
 8008a9a:	e7fe      	b.n	8008a9a <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	61fb      	str	r3, [r7, #28]
 8008aa0:	e012      	b.n	8008ac8 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008aa2:	68ba      	ldr	r2, [r7, #8]
 8008aa4:	69fb      	ldr	r3, [r7, #28]
 8008aa6:	4413      	add	r3, r2
 8008aa8:	7819      	ldrb	r1, [r3, #0]
 8008aaa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008aac:	69fb      	ldr	r3, [r7, #28]
 8008aae:	4413      	add	r3, r2
 8008ab0:	3334      	adds	r3, #52	; 0x34
 8008ab2:	460a      	mov	r2, r1
 8008ab4:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8008ab6:	68ba      	ldr	r2, [r7, #8]
 8008ab8:	69fb      	ldr	r3, [r7, #28]
 8008aba:	4413      	add	r3, r2
 8008abc:	781b      	ldrb	r3, [r3, #0]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d006      	beq.n	8008ad0 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008ac2:	69fb      	ldr	r3, [r7, #28]
 8008ac4:	3301      	adds	r3, #1
 8008ac6:	61fb      	str	r3, [r7, #28]
 8008ac8:	69fb      	ldr	r3, [r7, #28]
 8008aca:	2b0f      	cmp	r3, #15
 8008acc:	d9e9      	bls.n	8008aa2 <prvInitialiseNewTask+0x5c>
 8008ace:	e000      	b.n	8008ad2 <prvInitialiseNewTask+0x8c>
		{
			break;
 8008ad0:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008adc:	2b06      	cmp	r3, #6
 8008ade:	d901      	bls.n	8008ae4 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008ae0:	2306      	movs	r3, #6
 8008ae2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ae6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ae8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008aee:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008af2:	2200      	movs	r2, #0
 8008af4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008af8:	3304      	adds	r3, #4
 8008afa:	4618      	mov	r0, r3
 8008afc:	f7fe fee3 	bl	80078c6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b02:	3318      	adds	r3, #24
 8008b04:	4618      	mov	r0, r3
 8008b06:	f7fe fede 	bl	80078c6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b0e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b12:	f1c3 0207 	rsb	r2, r3, #7
 8008b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b18:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b1e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b22:	2200      	movs	r2, #0
 8008b24:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b28:	2200      	movs	r2, #0
 8008b2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	}
	#endif

	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		pxNewTCB->ucDelayAborted = pdFALSE;
 8008b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b30:	2200      	movs	r2, #0
 8008b32:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008b36:	683a      	ldr	r2, [r7, #0]
 8008b38:	68f9      	ldr	r1, [r7, #12]
 8008b3a:	69b8      	ldr	r0, [r7, #24]
 8008b3c:	f001 f8bc 	bl	8009cb8 <pxPortInitialiseStack>
 8008b40:	4602      	mov	r2, r0
 8008b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b44:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8008b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d002      	beq.n	8008b52 <prvInitialiseNewTask+0x10c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b50:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008b52:	bf00      	nop
 8008b54:	3720      	adds	r7, #32
 8008b56:	46bd      	mov	sp, r7
 8008b58:	bd80      	pop	{r7, pc}
	...

08008b5c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b082      	sub	sp, #8
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008b64:	f001 f9d2 	bl	8009f0c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008b68:	4b2a      	ldr	r3, [pc, #168]	; (8008c14 <prvAddNewTaskToReadyList+0xb8>)
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	3301      	adds	r3, #1
 8008b6e:	4a29      	ldr	r2, [pc, #164]	; (8008c14 <prvAddNewTaskToReadyList+0xb8>)
 8008b70:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008b72:	4b29      	ldr	r3, [pc, #164]	; (8008c18 <prvAddNewTaskToReadyList+0xbc>)
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d109      	bne.n	8008b8e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008b7a:	4a27      	ldr	r2, [pc, #156]	; (8008c18 <prvAddNewTaskToReadyList+0xbc>)
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008b80:	4b24      	ldr	r3, [pc, #144]	; (8008c14 <prvAddNewTaskToReadyList+0xb8>)
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	2b01      	cmp	r3, #1
 8008b86:	d110      	bne.n	8008baa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008b88:	f000 fc88 	bl	800949c <prvInitialiseTaskLists>
 8008b8c:	e00d      	b.n	8008baa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008b8e:	4b23      	ldr	r3, [pc, #140]	; (8008c1c <prvAddNewTaskToReadyList+0xc0>)
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d109      	bne.n	8008baa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008b96:	4b20      	ldr	r3, [pc, #128]	; (8008c18 <prvAddNewTaskToReadyList+0xbc>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ba0:	429a      	cmp	r2, r3
 8008ba2:	d802      	bhi.n	8008baa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008ba4:	4a1c      	ldr	r2, [pc, #112]	; (8008c18 <prvAddNewTaskToReadyList+0xbc>)
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008baa:	4b1d      	ldr	r3, [pc, #116]	; (8008c20 <prvAddNewTaskToReadyList+0xc4>)
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	3301      	adds	r3, #1
 8008bb0:	4a1b      	ldr	r2, [pc, #108]	; (8008c20 <prvAddNewTaskToReadyList+0xc4>)
 8008bb2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bb8:	2201      	movs	r2, #1
 8008bba:	409a      	lsls	r2, r3
 8008bbc:	4b19      	ldr	r3, [pc, #100]	; (8008c24 <prvAddNewTaskToReadyList+0xc8>)
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	4313      	orrs	r3, r2
 8008bc2:	4a18      	ldr	r2, [pc, #96]	; (8008c24 <prvAddNewTaskToReadyList+0xc8>)
 8008bc4:	6013      	str	r3, [r2, #0]
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bca:	4613      	mov	r3, r2
 8008bcc:	009b      	lsls	r3, r3, #2
 8008bce:	4413      	add	r3, r2
 8008bd0:	009b      	lsls	r3, r3, #2
 8008bd2:	4a15      	ldr	r2, [pc, #84]	; (8008c28 <prvAddNewTaskToReadyList+0xcc>)
 8008bd4:	441a      	add	r2, r3
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	3304      	adds	r3, #4
 8008bda:	4619      	mov	r1, r3
 8008bdc:	4610      	mov	r0, r2
 8008bde:	f7fe fe7f 	bl	80078e0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008be2:	f001 f9c1 	bl	8009f68 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008be6:	4b0d      	ldr	r3, [pc, #52]	; (8008c1c <prvAddNewTaskToReadyList+0xc0>)
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d00e      	beq.n	8008c0c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008bee:	4b0a      	ldr	r3, [pc, #40]	; (8008c18 <prvAddNewTaskToReadyList+0xbc>)
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bf8:	429a      	cmp	r2, r3
 8008bfa:	d207      	bcs.n	8008c0c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008bfc:	4b0b      	ldr	r3, [pc, #44]	; (8008c2c <prvAddNewTaskToReadyList+0xd0>)
 8008bfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c02:	601a      	str	r2, [r3, #0]
 8008c04:	f3bf 8f4f 	dsb	sy
 8008c08:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008c0c:	bf00      	nop
 8008c0e:	3708      	adds	r7, #8
 8008c10:	46bd      	mov	sp, r7
 8008c12:	bd80      	pop	{r7, pc}
 8008c14:	20000344 	.word	0x20000344
 8008c18:	20000244 	.word	0x20000244
 8008c1c:	20000350 	.word	0x20000350
 8008c20:	20000360 	.word	0x20000360
 8008c24:	2000034c 	.word	0x2000034c
 8008c28:	20000248 	.word	0x20000248
 8008c2c:	e000ed04 	.word	0xe000ed04

08008c30 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b08a      	sub	sp, #40	; 0x28
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
 8008c38:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d109      	bne.n	8008c58 <vTaskDelayUntil+0x28>
 8008c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c48:	f383 8811 	msr	BASEPRI, r3
 8008c4c:	f3bf 8f6f 	isb	sy
 8008c50:	f3bf 8f4f 	dsb	sy
 8008c54:	617b      	str	r3, [r7, #20]
 8008c56:	e7fe      	b.n	8008c56 <vTaskDelayUntil+0x26>
		configASSERT( ( xTimeIncrement > 0U ) );
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d109      	bne.n	8008c72 <vTaskDelayUntil+0x42>
 8008c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c62:	f383 8811 	msr	BASEPRI, r3
 8008c66:	f3bf 8f6f 	isb	sy
 8008c6a:	f3bf 8f4f 	dsb	sy
 8008c6e:	613b      	str	r3, [r7, #16]
 8008c70:	e7fe      	b.n	8008c70 <vTaskDelayUntil+0x40>
		configASSERT( uxSchedulerSuspended == 0 );
 8008c72:	4b29      	ldr	r3, [pc, #164]	; (8008d18 <vTaskDelayUntil+0xe8>)
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d009      	beq.n	8008c8e <vTaskDelayUntil+0x5e>
 8008c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c7e:	f383 8811 	msr	BASEPRI, r3
 8008c82:	f3bf 8f6f 	isb	sy
 8008c86:	f3bf 8f4f 	dsb	sy
 8008c8a:	60fb      	str	r3, [r7, #12]
 8008c8c:	e7fe      	b.n	8008c8c <vTaskDelayUntil+0x5c>

		vTaskSuspendAll();
 8008c8e:	f000 f8db 	bl	8008e48 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8008c92:	4b22      	ldr	r3, [pc, #136]	; (8008d1c <vTaskDelayUntil+0xec>)
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	683a      	ldr	r2, [r7, #0]
 8008c9e:	4413      	add	r3, r2
 8008ca0:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	6a3a      	ldr	r2, [r7, #32]
 8008ca8:	429a      	cmp	r2, r3
 8008caa:	d20b      	bcs.n	8008cc4 <vTaskDelayUntil+0x94>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	69fa      	ldr	r2, [r7, #28]
 8008cb2:	429a      	cmp	r2, r3
 8008cb4:	d211      	bcs.n	8008cda <vTaskDelayUntil+0xaa>
 8008cb6:	69fa      	ldr	r2, [r7, #28]
 8008cb8:	6a3b      	ldr	r3, [r7, #32]
 8008cba:	429a      	cmp	r2, r3
 8008cbc:	d90d      	bls.n	8008cda <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 8008cbe:	2301      	movs	r3, #1
 8008cc0:	627b      	str	r3, [r7, #36]	; 0x24
 8008cc2:	e00a      	b.n	8008cda <vTaskDelayUntil+0xaa>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	69fa      	ldr	r2, [r7, #28]
 8008cca:	429a      	cmp	r2, r3
 8008ccc:	d303      	bcc.n	8008cd6 <vTaskDelayUntil+0xa6>
 8008cce:	69fa      	ldr	r2, [r7, #28]
 8008cd0:	6a3b      	ldr	r3, [r7, #32]
 8008cd2:	429a      	cmp	r2, r3
 8008cd4:	d901      	bls.n	8008cda <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 8008cd6:	2301      	movs	r3, #1
 8008cd8:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	69fa      	ldr	r2, [r7, #28]
 8008cde:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8008ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d006      	beq.n	8008cf4 <vTaskDelayUntil+0xc4>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8008ce6:	69fa      	ldr	r2, [r7, #28]
 8008ce8:	6a3b      	ldr	r3, [r7, #32]
 8008cea:	1ad3      	subs	r3, r2, r3
 8008cec:	2100      	movs	r1, #0
 8008cee:	4618      	mov	r0, r3
 8008cf0:	f000 ff78 	bl	8009be4 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8008cf4:	f000 f8b6 	bl	8008e64 <xTaskResumeAll>
 8008cf8:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008cfa:	69bb      	ldr	r3, [r7, #24]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d107      	bne.n	8008d10 <vTaskDelayUntil+0xe0>
		{
			portYIELD_WITHIN_API();
 8008d00:	4b07      	ldr	r3, [pc, #28]	; (8008d20 <vTaskDelayUntil+0xf0>)
 8008d02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d06:	601a      	str	r2, [r3, #0]
 8008d08:	f3bf 8f4f 	dsb	sy
 8008d0c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008d10:	bf00      	nop
 8008d12:	3728      	adds	r7, #40	; 0x28
 8008d14:	46bd      	mov	sp, r7
 8008d16:	bd80      	pop	{r7, pc}
 8008d18:	2000036c 	.word	0x2000036c
 8008d1c:	20000348 	.word	0x20000348
 8008d20:	e000ed04 	.word	0xe000ed04

08008d24 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b084      	sub	sp, #16
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d016      	beq.n	8008d64 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008d36:	4b13      	ldr	r3, [pc, #76]	; (8008d84 <vTaskDelay+0x60>)
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d009      	beq.n	8008d52 <vTaskDelay+0x2e>
 8008d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d42:	f383 8811 	msr	BASEPRI, r3
 8008d46:	f3bf 8f6f 	isb	sy
 8008d4a:	f3bf 8f4f 	dsb	sy
 8008d4e:	60bb      	str	r3, [r7, #8]
 8008d50:	e7fe      	b.n	8008d50 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8008d52:	f000 f879 	bl	8008e48 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008d56:	2100      	movs	r1, #0
 8008d58:	6878      	ldr	r0, [r7, #4]
 8008d5a:	f000 ff43 	bl	8009be4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008d5e:	f000 f881 	bl	8008e64 <xTaskResumeAll>
 8008d62:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d107      	bne.n	8008d7a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8008d6a:	4b07      	ldr	r3, [pc, #28]	; (8008d88 <vTaskDelay+0x64>)
 8008d6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d70:	601a      	str	r2, [r3, #0]
 8008d72:	f3bf 8f4f 	dsb	sy
 8008d76:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008d7a:	bf00      	nop
 8008d7c:	3710      	adds	r7, #16
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	bd80      	pop	{r7, pc}
 8008d82:	bf00      	nop
 8008d84:	2000036c 	.word	0x2000036c
 8008d88:	e000ed04 	.word	0xe000ed04

08008d8c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b08a      	sub	sp, #40	; 0x28
 8008d90:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008d92:	2300      	movs	r3, #0
 8008d94:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008d96:	2300      	movs	r3, #0
 8008d98:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008d9a:	463a      	mov	r2, r7
 8008d9c:	1d39      	adds	r1, r7, #4
 8008d9e:	f107 0308 	add.w	r3, r7, #8
 8008da2:	4618      	mov	r0, r3
 8008da4:	f006 f946 	bl	800f034 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008da8:	6839      	ldr	r1, [r7, #0]
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	68ba      	ldr	r2, [r7, #8]
 8008dae:	9202      	str	r2, [sp, #8]
 8008db0:	9301      	str	r3, [sp, #4]
 8008db2:	2300      	movs	r3, #0
 8008db4:	9300      	str	r3, [sp, #0]
 8008db6:	2300      	movs	r3, #0
 8008db8:	460a      	mov	r2, r1
 8008dba:	491d      	ldr	r1, [pc, #116]	; (8008e30 <vTaskStartScheduler+0xa4>)
 8008dbc:	481d      	ldr	r0, [pc, #116]	; (8008e34 <vTaskStartScheduler+0xa8>)
 8008dbe:	f7ff fda4 	bl	800890a <xTaskCreateStatic>
 8008dc2:	4602      	mov	r2, r0
 8008dc4:	4b1c      	ldr	r3, [pc, #112]	; (8008e38 <vTaskStartScheduler+0xac>)
 8008dc6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008dc8:	4b1b      	ldr	r3, [pc, #108]	; (8008e38 <vTaskStartScheduler+0xac>)
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d002      	beq.n	8008dd6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	617b      	str	r3, [r7, #20]
 8008dd4:	e001      	b.n	8008dda <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008dda:	697b      	ldr	r3, [r7, #20]
 8008ddc:	2b01      	cmp	r3, #1
 8008dde:	d115      	bne.n	8008e0c <vTaskStartScheduler+0x80>
 8008de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008de4:	f383 8811 	msr	BASEPRI, r3
 8008de8:	f3bf 8f6f 	isb	sy
 8008dec:	f3bf 8f4f 	dsb	sy
 8008df0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008df2:	4b12      	ldr	r3, [pc, #72]	; (8008e3c <vTaskStartScheduler+0xb0>)
 8008df4:	f04f 32ff 	mov.w	r2, #4294967295
 8008df8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008dfa:	4b11      	ldr	r3, [pc, #68]	; (8008e40 <vTaskStartScheduler+0xb4>)
 8008dfc:	2201      	movs	r2, #1
 8008dfe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8008e00:	4b10      	ldr	r3, [pc, #64]	; (8008e44 <vTaskStartScheduler+0xb8>)
 8008e02:	2200      	movs	r2, #0
 8008e04:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008e06:	f000 ffe3 	bl	8009dd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008e0a:	e00d      	b.n	8008e28 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008e0c:	697b      	ldr	r3, [r7, #20]
 8008e0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e12:	d109      	bne.n	8008e28 <vTaskStartScheduler+0x9c>
 8008e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e18:	f383 8811 	msr	BASEPRI, r3
 8008e1c:	f3bf 8f6f 	isb	sy
 8008e20:	f3bf 8f4f 	dsb	sy
 8008e24:	60fb      	str	r3, [r7, #12]
 8008e26:	e7fe      	b.n	8008e26 <vTaskStartScheduler+0x9a>
}
 8008e28:	bf00      	nop
 8008e2a:	3718      	adds	r7, #24
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	bd80      	pop	{r7, pc}
 8008e30:	08014a88 	.word	0x08014a88
 8008e34:	08009489 	.word	0x08009489
 8008e38:	20000368 	.word	0x20000368
 8008e3c:	20000364 	.word	0x20000364
 8008e40:	20000350 	.word	0x20000350
 8008e44:	20000348 	.word	0x20000348

08008e48 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008e48:	b480      	push	{r7}
 8008e4a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008e4c:	4b04      	ldr	r3, [pc, #16]	; (8008e60 <vTaskSuspendAll+0x18>)
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	3301      	adds	r3, #1
 8008e52:	4a03      	ldr	r2, [pc, #12]	; (8008e60 <vTaskSuspendAll+0x18>)
 8008e54:	6013      	str	r3, [r2, #0]
}
 8008e56:	bf00      	nop
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5e:	4770      	bx	lr
 8008e60:	2000036c 	.word	0x2000036c

08008e64 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b084      	sub	sp, #16
 8008e68:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008e6e:	2300      	movs	r3, #0
 8008e70:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008e72:	4b41      	ldr	r3, [pc, #260]	; (8008f78 <xTaskResumeAll+0x114>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d109      	bne.n	8008e8e <xTaskResumeAll+0x2a>
 8008e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e7e:	f383 8811 	msr	BASEPRI, r3
 8008e82:	f3bf 8f6f 	isb	sy
 8008e86:	f3bf 8f4f 	dsb	sy
 8008e8a:	603b      	str	r3, [r7, #0]
 8008e8c:	e7fe      	b.n	8008e8c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008e8e:	f001 f83d 	bl	8009f0c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008e92:	4b39      	ldr	r3, [pc, #228]	; (8008f78 <xTaskResumeAll+0x114>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	3b01      	subs	r3, #1
 8008e98:	4a37      	ldr	r2, [pc, #220]	; (8008f78 <xTaskResumeAll+0x114>)
 8008e9a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008e9c:	4b36      	ldr	r3, [pc, #216]	; (8008f78 <xTaskResumeAll+0x114>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d161      	bne.n	8008f68 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008ea4:	4b35      	ldr	r3, [pc, #212]	; (8008f7c <xTaskResumeAll+0x118>)
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d05d      	beq.n	8008f68 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008eac:	e02e      	b.n	8008f0c <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8008eae:	4b34      	ldr	r3, [pc, #208]	; (8008f80 <xTaskResumeAll+0x11c>)
 8008eb0:	68db      	ldr	r3, [r3, #12]
 8008eb2:	68db      	ldr	r3, [r3, #12]
 8008eb4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	3318      	adds	r3, #24
 8008eba:	4618      	mov	r0, r3
 8008ebc:	f7fe fd6d 	bl	800799a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	3304      	adds	r3, #4
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	f7fe fd68 	bl	800799a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ece:	2201      	movs	r2, #1
 8008ed0:	409a      	lsls	r2, r3
 8008ed2:	4b2c      	ldr	r3, [pc, #176]	; (8008f84 <xTaskResumeAll+0x120>)
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	4313      	orrs	r3, r2
 8008ed8:	4a2a      	ldr	r2, [pc, #168]	; (8008f84 <xTaskResumeAll+0x120>)
 8008eda:	6013      	str	r3, [r2, #0]
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ee0:	4613      	mov	r3, r2
 8008ee2:	009b      	lsls	r3, r3, #2
 8008ee4:	4413      	add	r3, r2
 8008ee6:	009b      	lsls	r3, r3, #2
 8008ee8:	4a27      	ldr	r2, [pc, #156]	; (8008f88 <xTaskResumeAll+0x124>)
 8008eea:	441a      	add	r2, r3
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	3304      	adds	r3, #4
 8008ef0:	4619      	mov	r1, r3
 8008ef2:	4610      	mov	r0, r2
 8008ef4:	f7fe fcf4 	bl	80078e0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008efc:	4b23      	ldr	r3, [pc, #140]	; (8008f8c <xTaskResumeAll+0x128>)
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f02:	429a      	cmp	r2, r3
 8008f04:	d302      	bcc.n	8008f0c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8008f06:	4b22      	ldr	r3, [pc, #136]	; (8008f90 <xTaskResumeAll+0x12c>)
 8008f08:	2201      	movs	r2, #1
 8008f0a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008f0c:	4b1c      	ldr	r3, [pc, #112]	; (8008f80 <xTaskResumeAll+0x11c>)
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d1cc      	bne.n	8008eae <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d001      	beq.n	8008f1e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008f1a:	f000 fb59 	bl	80095d0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008f1e:	4b1d      	ldr	r3, [pc, #116]	; (8008f94 <xTaskResumeAll+0x130>)
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d010      	beq.n	8008f4c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008f2a:	f000 f859 	bl	8008fe0 <xTaskIncrementTick>
 8008f2e:	4603      	mov	r3, r0
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d002      	beq.n	8008f3a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8008f34:	4b16      	ldr	r3, [pc, #88]	; (8008f90 <xTaskResumeAll+0x12c>)
 8008f36:	2201      	movs	r2, #1
 8008f38:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	3b01      	subs	r3, #1
 8008f3e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d1f1      	bne.n	8008f2a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8008f46:	4b13      	ldr	r3, [pc, #76]	; (8008f94 <xTaskResumeAll+0x130>)
 8008f48:	2200      	movs	r2, #0
 8008f4a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008f4c:	4b10      	ldr	r3, [pc, #64]	; (8008f90 <xTaskResumeAll+0x12c>)
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d009      	beq.n	8008f68 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008f54:	2301      	movs	r3, #1
 8008f56:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008f58:	4b0f      	ldr	r3, [pc, #60]	; (8008f98 <xTaskResumeAll+0x134>)
 8008f5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f5e:	601a      	str	r2, [r3, #0]
 8008f60:	f3bf 8f4f 	dsb	sy
 8008f64:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008f68:	f000 fffe 	bl	8009f68 <vPortExitCritical>

	return xAlreadyYielded;
 8008f6c:	68bb      	ldr	r3, [r7, #8]
}
 8008f6e:	4618      	mov	r0, r3
 8008f70:	3710      	adds	r7, #16
 8008f72:	46bd      	mov	sp, r7
 8008f74:	bd80      	pop	{r7, pc}
 8008f76:	bf00      	nop
 8008f78:	2000036c 	.word	0x2000036c
 8008f7c:	20000344 	.word	0x20000344
 8008f80:	20000304 	.word	0x20000304
 8008f84:	2000034c 	.word	0x2000034c
 8008f88:	20000248 	.word	0x20000248
 8008f8c:	20000244 	.word	0x20000244
 8008f90:	20000358 	.word	0x20000358
 8008f94:	20000354 	.word	0x20000354
 8008f98:	e000ed04 	.word	0xe000ed04

08008f9c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008f9c:	b480      	push	{r7}
 8008f9e:	b083      	sub	sp, #12
 8008fa0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008fa2:	4b05      	ldr	r3, [pc, #20]	; (8008fb8 <xTaskGetTickCount+0x1c>)
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008fa8:	687b      	ldr	r3, [r7, #4]
}
 8008faa:	4618      	mov	r0, r3
 8008fac:	370c      	adds	r7, #12
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb4:	4770      	bx	lr
 8008fb6:	bf00      	nop
 8008fb8:	20000348 	.word	0x20000348

08008fbc <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b082      	sub	sp, #8
 8008fc0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008fc2:	f001 f87f 	bl	800a0c4 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8008fca:	4b04      	ldr	r3, [pc, #16]	; (8008fdc <xTaskGetTickCountFromISR+0x20>)
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008fd0:	683b      	ldr	r3, [r7, #0]
}
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	3708      	adds	r7, #8
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bd80      	pop	{r7, pc}
 8008fda:	bf00      	nop
 8008fdc:	20000348 	.word	0x20000348

08008fe0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b086      	sub	sp, #24
 8008fe4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008fea:	4b50      	ldr	r3, [pc, #320]	; (800912c <xTaskIncrementTick+0x14c>)
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	f040 808c 	bne.w	800910c <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008ff4:	4b4e      	ldr	r3, [pc, #312]	; (8009130 <xTaskIncrementTick+0x150>)
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	3301      	adds	r3, #1
 8008ffa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008ffc:	4a4c      	ldr	r2, [pc, #304]	; (8009130 <xTaskIncrementTick+0x150>)
 8008ffe:	693b      	ldr	r3, [r7, #16]
 8009000:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009002:	693b      	ldr	r3, [r7, #16]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d11f      	bne.n	8009048 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8009008:	4b4a      	ldr	r3, [pc, #296]	; (8009134 <xTaskIncrementTick+0x154>)
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d009      	beq.n	8009026 <xTaskIncrementTick+0x46>
 8009012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009016:	f383 8811 	msr	BASEPRI, r3
 800901a:	f3bf 8f6f 	isb	sy
 800901e:	f3bf 8f4f 	dsb	sy
 8009022:	603b      	str	r3, [r7, #0]
 8009024:	e7fe      	b.n	8009024 <xTaskIncrementTick+0x44>
 8009026:	4b43      	ldr	r3, [pc, #268]	; (8009134 <xTaskIncrementTick+0x154>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	60fb      	str	r3, [r7, #12]
 800902c:	4b42      	ldr	r3, [pc, #264]	; (8009138 <xTaskIncrementTick+0x158>)
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	4a40      	ldr	r2, [pc, #256]	; (8009134 <xTaskIncrementTick+0x154>)
 8009032:	6013      	str	r3, [r2, #0]
 8009034:	4a40      	ldr	r2, [pc, #256]	; (8009138 <xTaskIncrementTick+0x158>)
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	6013      	str	r3, [r2, #0]
 800903a:	4b40      	ldr	r3, [pc, #256]	; (800913c <xTaskIncrementTick+0x15c>)
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	3301      	adds	r3, #1
 8009040:	4a3e      	ldr	r2, [pc, #248]	; (800913c <xTaskIncrementTick+0x15c>)
 8009042:	6013      	str	r3, [r2, #0]
 8009044:	f000 fac4 	bl	80095d0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009048:	4b3d      	ldr	r3, [pc, #244]	; (8009140 <xTaskIncrementTick+0x160>)
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	693a      	ldr	r2, [r7, #16]
 800904e:	429a      	cmp	r2, r3
 8009050:	d34d      	bcc.n	80090ee <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009052:	4b38      	ldr	r3, [pc, #224]	; (8009134 <xTaskIncrementTick+0x154>)
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d101      	bne.n	8009060 <xTaskIncrementTick+0x80>
 800905c:	2301      	movs	r3, #1
 800905e:	e000      	b.n	8009062 <xTaskIncrementTick+0x82>
 8009060:	2300      	movs	r3, #0
 8009062:	2b00      	cmp	r3, #0
 8009064:	d004      	beq.n	8009070 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009066:	4b36      	ldr	r3, [pc, #216]	; (8009140 <xTaskIncrementTick+0x160>)
 8009068:	f04f 32ff 	mov.w	r2, #4294967295
 800906c:	601a      	str	r2, [r3, #0]
					break;
 800906e:	e03e      	b.n	80090ee <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009070:	4b30      	ldr	r3, [pc, #192]	; (8009134 <xTaskIncrementTick+0x154>)
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	68db      	ldr	r3, [r3, #12]
 8009076:	68db      	ldr	r3, [r3, #12]
 8009078:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800907a:	68bb      	ldr	r3, [r7, #8]
 800907c:	685b      	ldr	r3, [r3, #4]
 800907e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009080:	693a      	ldr	r2, [r7, #16]
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	429a      	cmp	r2, r3
 8009086:	d203      	bcs.n	8009090 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009088:	4a2d      	ldr	r2, [pc, #180]	; (8009140 <xTaskIncrementTick+0x160>)
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	6013      	str	r3, [r2, #0]
						break;
 800908e:	e02e      	b.n	80090ee <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009090:	68bb      	ldr	r3, [r7, #8]
 8009092:	3304      	adds	r3, #4
 8009094:	4618      	mov	r0, r3
 8009096:	f7fe fc80 	bl	800799a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800909a:	68bb      	ldr	r3, [r7, #8]
 800909c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d004      	beq.n	80090ac <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80090a2:	68bb      	ldr	r3, [r7, #8]
 80090a4:	3318      	adds	r3, #24
 80090a6:	4618      	mov	r0, r3
 80090a8:	f7fe fc77 	bl	800799a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80090ac:	68bb      	ldr	r3, [r7, #8]
 80090ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090b0:	2201      	movs	r2, #1
 80090b2:	409a      	lsls	r2, r3
 80090b4:	4b23      	ldr	r3, [pc, #140]	; (8009144 <xTaskIncrementTick+0x164>)
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	4313      	orrs	r3, r2
 80090ba:	4a22      	ldr	r2, [pc, #136]	; (8009144 <xTaskIncrementTick+0x164>)
 80090bc:	6013      	str	r3, [r2, #0]
 80090be:	68bb      	ldr	r3, [r7, #8]
 80090c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090c2:	4613      	mov	r3, r2
 80090c4:	009b      	lsls	r3, r3, #2
 80090c6:	4413      	add	r3, r2
 80090c8:	009b      	lsls	r3, r3, #2
 80090ca:	4a1f      	ldr	r2, [pc, #124]	; (8009148 <xTaskIncrementTick+0x168>)
 80090cc:	441a      	add	r2, r3
 80090ce:	68bb      	ldr	r3, [r7, #8]
 80090d0:	3304      	adds	r3, #4
 80090d2:	4619      	mov	r1, r3
 80090d4:	4610      	mov	r0, r2
 80090d6:	f7fe fc03 	bl	80078e0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80090da:	68bb      	ldr	r3, [r7, #8]
 80090dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090de:	4b1b      	ldr	r3, [pc, #108]	; (800914c <xTaskIncrementTick+0x16c>)
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090e4:	429a      	cmp	r2, r3
 80090e6:	d3b4      	bcc.n	8009052 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80090e8:	2301      	movs	r3, #1
 80090ea:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80090ec:	e7b1      	b.n	8009052 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80090ee:	4b17      	ldr	r3, [pc, #92]	; (800914c <xTaskIncrementTick+0x16c>)
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090f4:	4914      	ldr	r1, [pc, #80]	; (8009148 <xTaskIncrementTick+0x168>)
 80090f6:	4613      	mov	r3, r2
 80090f8:	009b      	lsls	r3, r3, #2
 80090fa:	4413      	add	r3, r2
 80090fc:	009b      	lsls	r3, r3, #2
 80090fe:	440b      	add	r3, r1
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	2b01      	cmp	r3, #1
 8009104:	d907      	bls.n	8009116 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8009106:	2301      	movs	r3, #1
 8009108:	617b      	str	r3, [r7, #20]
 800910a:	e004      	b.n	8009116 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800910c:	4b10      	ldr	r3, [pc, #64]	; (8009150 <xTaskIncrementTick+0x170>)
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	3301      	adds	r3, #1
 8009112:	4a0f      	ldr	r2, [pc, #60]	; (8009150 <xTaskIncrementTick+0x170>)
 8009114:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009116:	4b0f      	ldr	r3, [pc, #60]	; (8009154 <xTaskIncrementTick+0x174>)
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d001      	beq.n	8009122 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800911e:	2301      	movs	r3, #1
 8009120:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009122:	697b      	ldr	r3, [r7, #20]
}
 8009124:	4618      	mov	r0, r3
 8009126:	3718      	adds	r7, #24
 8009128:	46bd      	mov	sp, r7
 800912a:	bd80      	pop	{r7, pc}
 800912c:	2000036c 	.word	0x2000036c
 8009130:	20000348 	.word	0x20000348
 8009134:	200002fc 	.word	0x200002fc
 8009138:	20000300 	.word	0x20000300
 800913c:	2000035c 	.word	0x2000035c
 8009140:	20000364 	.word	0x20000364
 8009144:	2000034c 	.word	0x2000034c
 8009148:	20000248 	.word	0x20000248
 800914c:	20000244 	.word	0x20000244
 8009150:	20000354 	.word	0x20000354
 8009154:	20000358 	.word	0x20000358

08009158 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b088      	sub	sp, #32
 800915c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800915e:	4b39      	ldr	r3, [pc, #228]	; (8009244 <vTaskSwitchContext+0xec>)
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d003      	beq.n	800916e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009166:	4b38      	ldr	r3, [pc, #224]	; (8009248 <vTaskSwitchContext+0xf0>)
 8009168:	2201      	movs	r2, #1
 800916a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800916c:	e065      	b.n	800923a <vTaskSwitchContext+0xe2>
		xYieldPending = pdFALSE;
 800916e:	4b36      	ldr	r3, [pc, #216]	; (8009248 <vTaskSwitchContext+0xf0>)
 8009170:	2200      	movs	r2, #0
 8009172:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8009174:	4b35      	ldr	r3, [pc, #212]	; (800924c <vTaskSwitchContext+0xf4>)
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800917a:	61fb      	str	r3, [r7, #28]
 800917c:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8009180:	61bb      	str	r3, [r7, #24]
 8009182:	69fb      	ldr	r3, [r7, #28]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	69ba      	ldr	r2, [r7, #24]
 8009188:	429a      	cmp	r2, r3
 800918a:	d111      	bne.n	80091b0 <vTaskSwitchContext+0x58>
 800918c:	69fb      	ldr	r3, [r7, #28]
 800918e:	3304      	adds	r3, #4
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	69ba      	ldr	r2, [r7, #24]
 8009194:	429a      	cmp	r2, r3
 8009196:	d10b      	bne.n	80091b0 <vTaskSwitchContext+0x58>
 8009198:	69fb      	ldr	r3, [r7, #28]
 800919a:	3308      	adds	r3, #8
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	69ba      	ldr	r2, [r7, #24]
 80091a0:	429a      	cmp	r2, r3
 80091a2:	d105      	bne.n	80091b0 <vTaskSwitchContext+0x58>
 80091a4:	69fb      	ldr	r3, [r7, #28]
 80091a6:	330c      	adds	r3, #12
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	69ba      	ldr	r2, [r7, #24]
 80091ac:	429a      	cmp	r2, r3
 80091ae:	d008      	beq.n	80091c2 <vTaskSwitchContext+0x6a>
 80091b0:	4b26      	ldr	r3, [pc, #152]	; (800924c <vTaskSwitchContext+0xf4>)
 80091b2:	681a      	ldr	r2, [r3, #0]
 80091b4:	4b25      	ldr	r3, [pc, #148]	; (800924c <vTaskSwitchContext+0xf4>)
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	3334      	adds	r3, #52	; 0x34
 80091ba:	4619      	mov	r1, r3
 80091bc:	4610      	mov	r0, r2
 80091be:	f005 ff26 	bl	800f00e <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80091c2:	4b23      	ldr	r3, [pc, #140]	; (8009250 <vTaskSwitchContext+0xf8>)
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	fab3 f383 	clz	r3, r3
 80091ce:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80091d0:	7afb      	ldrb	r3, [r7, #11]
 80091d2:	f1c3 031f 	rsb	r3, r3, #31
 80091d6:	617b      	str	r3, [r7, #20]
 80091d8:	491e      	ldr	r1, [pc, #120]	; (8009254 <vTaskSwitchContext+0xfc>)
 80091da:	697a      	ldr	r2, [r7, #20]
 80091dc:	4613      	mov	r3, r2
 80091de:	009b      	lsls	r3, r3, #2
 80091e0:	4413      	add	r3, r2
 80091e2:	009b      	lsls	r3, r3, #2
 80091e4:	440b      	add	r3, r1
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d109      	bne.n	8009200 <vTaskSwitchContext+0xa8>
	__asm volatile
 80091ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091f0:	f383 8811 	msr	BASEPRI, r3
 80091f4:	f3bf 8f6f 	isb	sy
 80091f8:	f3bf 8f4f 	dsb	sy
 80091fc:	607b      	str	r3, [r7, #4]
 80091fe:	e7fe      	b.n	80091fe <vTaskSwitchContext+0xa6>
 8009200:	697a      	ldr	r2, [r7, #20]
 8009202:	4613      	mov	r3, r2
 8009204:	009b      	lsls	r3, r3, #2
 8009206:	4413      	add	r3, r2
 8009208:	009b      	lsls	r3, r3, #2
 800920a:	4a12      	ldr	r2, [pc, #72]	; (8009254 <vTaskSwitchContext+0xfc>)
 800920c:	4413      	add	r3, r2
 800920e:	613b      	str	r3, [r7, #16]
 8009210:	693b      	ldr	r3, [r7, #16]
 8009212:	685b      	ldr	r3, [r3, #4]
 8009214:	685a      	ldr	r2, [r3, #4]
 8009216:	693b      	ldr	r3, [r7, #16]
 8009218:	605a      	str	r2, [r3, #4]
 800921a:	693b      	ldr	r3, [r7, #16]
 800921c:	685a      	ldr	r2, [r3, #4]
 800921e:	693b      	ldr	r3, [r7, #16]
 8009220:	3308      	adds	r3, #8
 8009222:	429a      	cmp	r2, r3
 8009224:	d104      	bne.n	8009230 <vTaskSwitchContext+0xd8>
 8009226:	693b      	ldr	r3, [r7, #16]
 8009228:	685b      	ldr	r3, [r3, #4]
 800922a:	685a      	ldr	r2, [r3, #4]
 800922c:	693b      	ldr	r3, [r7, #16]
 800922e:	605a      	str	r2, [r3, #4]
 8009230:	693b      	ldr	r3, [r7, #16]
 8009232:	685b      	ldr	r3, [r3, #4]
 8009234:	68db      	ldr	r3, [r3, #12]
 8009236:	4a05      	ldr	r2, [pc, #20]	; (800924c <vTaskSwitchContext+0xf4>)
 8009238:	6013      	str	r3, [r2, #0]
}
 800923a:	bf00      	nop
 800923c:	3720      	adds	r7, #32
 800923e:	46bd      	mov	sp, r7
 8009240:	bd80      	pop	{r7, pc}
 8009242:	bf00      	nop
 8009244:	2000036c 	.word	0x2000036c
 8009248:	20000358 	.word	0x20000358
 800924c:	20000244 	.word	0x20000244
 8009250:	2000034c 	.word	0x2000034c
 8009254:	20000248 	.word	0x20000248

08009258 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b084      	sub	sp, #16
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
 8009260:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d109      	bne.n	800927c <vTaskPlaceOnEventList+0x24>
 8009268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800926c:	f383 8811 	msr	BASEPRI, r3
 8009270:	f3bf 8f6f 	isb	sy
 8009274:	f3bf 8f4f 	dsb	sy
 8009278:	60fb      	str	r3, [r7, #12]
 800927a:	e7fe      	b.n	800927a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800927c:	4b07      	ldr	r3, [pc, #28]	; (800929c <vTaskPlaceOnEventList+0x44>)
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	3318      	adds	r3, #24
 8009282:	4619      	mov	r1, r3
 8009284:	6878      	ldr	r0, [r7, #4]
 8009286:	f7fe fb4f 	bl	8007928 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800928a:	2101      	movs	r1, #1
 800928c:	6838      	ldr	r0, [r7, #0]
 800928e:	f000 fca9 	bl	8009be4 <prvAddCurrentTaskToDelayedList>
}
 8009292:	bf00      	nop
 8009294:	3710      	adds	r7, #16
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}
 800929a:	bf00      	nop
 800929c:	20000244 	.word	0x20000244

080092a0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b086      	sub	sp, #24
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	68db      	ldr	r3, [r3, #12]
 80092ac:	68db      	ldr	r3, [r3, #12]
 80092ae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80092b0:	693b      	ldr	r3, [r7, #16]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d109      	bne.n	80092ca <xTaskRemoveFromEventList+0x2a>
 80092b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ba:	f383 8811 	msr	BASEPRI, r3
 80092be:	f3bf 8f6f 	isb	sy
 80092c2:	f3bf 8f4f 	dsb	sy
 80092c6:	60fb      	str	r3, [r7, #12]
 80092c8:	e7fe      	b.n	80092c8 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80092ca:	693b      	ldr	r3, [r7, #16]
 80092cc:	3318      	adds	r3, #24
 80092ce:	4618      	mov	r0, r3
 80092d0:	f7fe fb63 	bl	800799a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80092d4:	4b1d      	ldr	r3, [pc, #116]	; (800934c <xTaskRemoveFromEventList+0xac>)
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d11c      	bne.n	8009316 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80092dc:	693b      	ldr	r3, [r7, #16]
 80092de:	3304      	adds	r3, #4
 80092e0:	4618      	mov	r0, r3
 80092e2:	f7fe fb5a 	bl	800799a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80092e6:	693b      	ldr	r3, [r7, #16]
 80092e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092ea:	2201      	movs	r2, #1
 80092ec:	409a      	lsls	r2, r3
 80092ee:	4b18      	ldr	r3, [pc, #96]	; (8009350 <xTaskRemoveFromEventList+0xb0>)
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	4313      	orrs	r3, r2
 80092f4:	4a16      	ldr	r2, [pc, #88]	; (8009350 <xTaskRemoveFromEventList+0xb0>)
 80092f6:	6013      	str	r3, [r2, #0]
 80092f8:	693b      	ldr	r3, [r7, #16]
 80092fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092fc:	4613      	mov	r3, r2
 80092fe:	009b      	lsls	r3, r3, #2
 8009300:	4413      	add	r3, r2
 8009302:	009b      	lsls	r3, r3, #2
 8009304:	4a13      	ldr	r2, [pc, #76]	; (8009354 <xTaskRemoveFromEventList+0xb4>)
 8009306:	441a      	add	r2, r3
 8009308:	693b      	ldr	r3, [r7, #16]
 800930a:	3304      	adds	r3, #4
 800930c:	4619      	mov	r1, r3
 800930e:	4610      	mov	r0, r2
 8009310:	f7fe fae6 	bl	80078e0 <vListInsertEnd>
 8009314:	e005      	b.n	8009322 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009316:	693b      	ldr	r3, [r7, #16]
 8009318:	3318      	adds	r3, #24
 800931a:	4619      	mov	r1, r3
 800931c:	480e      	ldr	r0, [pc, #56]	; (8009358 <xTaskRemoveFromEventList+0xb8>)
 800931e:	f7fe fadf 	bl	80078e0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009322:	693b      	ldr	r3, [r7, #16]
 8009324:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009326:	4b0d      	ldr	r3, [pc, #52]	; (800935c <xTaskRemoveFromEventList+0xbc>)
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800932c:	429a      	cmp	r2, r3
 800932e:	d905      	bls.n	800933c <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009330:	2301      	movs	r3, #1
 8009332:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009334:	4b0a      	ldr	r3, [pc, #40]	; (8009360 <xTaskRemoveFromEventList+0xc0>)
 8009336:	2201      	movs	r2, #1
 8009338:	601a      	str	r2, [r3, #0]
 800933a:	e001      	b.n	8009340 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800933c:	2300      	movs	r3, #0
 800933e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8009340:	697b      	ldr	r3, [r7, #20]
}
 8009342:	4618      	mov	r0, r3
 8009344:	3718      	adds	r7, #24
 8009346:	46bd      	mov	sp, r7
 8009348:	bd80      	pop	{r7, pc}
 800934a:	bf00      	nop
 800934c:	2000036c 	.word	0x2000036c
 8009350:	2000034c 	.word	0x2000034c
 8009354:	20000248 	.word	0x20000248
 8009358:	20000304 	.word	0x20000304
 800935c:	20000244 	.word	0x20000244
 8009360:	20000358 	.word	0x20000358

08009364 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009364:	b480      	push	{r7}
 8009366:	b083      	sub	sp, #12
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800936c:	4b06      	ldr	r3, [pc, #24]	; (8009388 <vTaskInternalSetTimeOutState+0x24>)
 800936e:	681a      	ldr	r2, [r3, #0]
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009374:	4b05      	ldr	r3, [pc, #20]	; (800938c <vTaskInternalSetTimeOutState+0x28>)
 8009376:	681a      	ldr	r2, [r3, #0]
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	605a      	str	r2, [r3, #4]
}
 800937c:	bf00      	nop
 800937e:	370c      	adds	r7, #12
 8009380:	46bd      	mov	sp, r7
 8009382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009386:	4770      	bx	lr
 8009388:	2000035c 	.word	0x2000035c
 800938c:	20000348 	.word	0x20000348

08009390 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b088      	sub	sp, #32
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
 8009398:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d109      	bne.n	80093b4 <xTaskCheckForTimeOut+0x24>
 80093a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093a4:	f383 8811 	msr	BASEPRI, r3
 80093a8:	f3bf 8f6f 	isb	sy
 80093ac:	f3bf 8f4f 	dsb	sy
 80093b0:	613b      	str	r3, [r7, #16]
 80093b2:	e7fe      	b.n	80093b2 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80093b4:	683b      	ldr	r3, [r7, #0]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d109      	bne.n	80093ce <xTaskCheckForTimeOut+0x3e>
 80093ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093be:	f383 8811 	msr	BASEPRI, r3
 80093c2:	f3bf 8f6f 	isb	sy
 80093c6:	f3bf 8f4f 	dsb	sy
 80093ca:	60fb      	str	r3, [r7, #12]
 80093cc:	e7fe      	b.n	80093cc <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80093ce:	f000 fd9d 	bl	8009f0c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80093d2:	4b24      	ldr	r3, [pc, #144]	; (8009464 <xTaskCheckForTimeOut+0xd4>)
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	685b      	ldr	r3, [r3, #4]
 80093dc:	69ba      	ldr	r2, [r7, #24]
 80093de:	1ad3      	subs	r3, r2, r3
 80093e0:	617b      	str	r3, [r7, #20]

		#if( INCLUDE_xTaskAbortDelay == 1 )
			if( pxCurrentTCB->ucDelayAborted != pdFALSE )
 80093e2:	4b21      	ldr	r3, [pc, #132]	; (8009468 <xTaskCheckForTimeOut+0xd8>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d007      	beq.n	80093fe <xTaskCheckForTimeOut+0x6e>
			{
				/* The delay was aborted, which is not the same as a time out,
				but has the same result. */
				pxCurrentTCB->ucDelayAborted = pdFALSE;
 80093ee:	4b1e      	ldr	r3, [pc, #120]	; (8009468 <xTaskCheckForTimeOut+0xd8>)
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	2200      	movs	r2, #0
 80093f4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
				xReturn = pdTRUE;
 80093f8:	2301      	movs	r3, #1
 80093fa:	61fb      	str	r3, [r7, #28]
 80093fc:	e02b      	b.n	8009456 <xTaskCheckForTimeOut+0xc6>
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009406:	d102      	bne.n	800940e <xTaskCheckForTimeOut+0x7e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009408:	2300      	movs	r3, #0
 800940a:	61fb      	str	r3, [r7, #28]
 800940c:	e023      	b.n	8009456 <xTaskCheckForTimeOut+0xc6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681a      	ldr	r2, [r3, #0]
 8009412:	4b16      	ldr	r3, [pc, #88]	; (800946c <xTaskCheckForTimeOut+0xdc>)
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	429a      	cmp	r2, r3
 8009418:	d007      	beq.n	800942a <xTaskCheckForTimeOut+0x9a>
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	685b      	ldr	r3, [r3, #4]
 800941e:	69ba      	ldr	r2, [r7, #24]
 8009420:	429a      	cmp	r2, r3
 8009422:	d302      	bcc.n	800942a <xTaskCheckForTimeOut+0x9a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009424:	2301      	movs	r3, #1
 8009426:	61fb      	str	r3, [r7, #28]
 8009428:	e015      	b.n	8009456 <xTaskCheckForTimeOut+0xc6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	697a      	ldr	r2, [r7, #20]
 8009430:	429a      	cmp	r2, r3
 8009432:	d20b      	bcs.n	800944c <xTaskCheckForTimeOut+0xbc>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	681a      	ldr	r2, [r3, #0]
 8009438:	697b      	ldr	r3, [r7, #20]
 800943a:	1ad2      	subs	r2, r2, r3
 800943c:	683b      	ldr	r3, [r7, #0]
 800943e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009440:	6878      	ldr	r0, [r7, #4]
 8009442:	f7ff ff8f 	bl	8009364 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009446:	2300      	movs	r3, #0
 8009448:	61fb      	str	r3, [r7, #28]
 800944a:	e004      	b.n	8009456 <xTaskCheckForTimeOut+0xc6>
		}
		else
		{
			*pxTicksToWait = 0;
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	2200      	movs	r2, #0
 8009450:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009452:	2301      	movs	r3, #1
 8009454:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009456:	f000 fd87 	bl	8009f68 <vPortExitCritical>

	return xReturn;
 800945a:	69fb      	ldr	r3, [r7, #28]
}
 800945c:	4618      	mov	r0, r3
 800945e:	3720      	adds	r7, #32
 8009460:	46bd      	mov	sp, r7
 8009462:	bd80      	pop	{r7, pc}
 8009464:	20000348 	.word	0x20000348
 8009468:	20000244 	.word	0x20000244
 800946c:	2000035c 	.word	0x2000035c

08009470 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009470:	b480      	push	{r7}
 8009472:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009474:	4b03      	ldr	r3, [pc, #12]	; (8009484 <vTaskMissedYield+0x14>)
 8009476:	2201      	movs	r2, #1
 8009478:	601a      	str	r2, [r3, #0]
}
 800947a:	bf00      	nop
 800947c:	46bd      	mov	sp, r7
 800947e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009482:	4770      	bx	lr
 8009484:	20000358 	.word	0x20000358

08009488 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b082      	sub	sp, #8
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009490:	f000 f844 	bl	800951c <prvCheckTasksWaitingTermination>
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8009494:	f005 fdb4 	bl	800f000 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8009498:	e7fa      	b.n	8009490 <prvIdleTask+0x8>
	...

0800949c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b082      	sub	sp, #8
 80094a0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80094a2:	2300      	movs	r3, #0
 80094a4:	607b      	str	r3, [r7, #4]
 80094a6:	e00c      	b.n	80094c2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80094a8:	687a      	ldr	r2, [r7, #4]
 80094aa:	4613      	mov	r3, r2
 80094ac:	009b      	lsls	r3, r3, #2
 80094ae:	4413      	add	r3, r2
 80094b0:	009b      	lsls	r3, r3, #2
 80094b2:	4a12      	ldr	r2, [pc, #72]	; (80094fc <prvInitialiseTaskLists+0x60>)
 80094b4:	4413      	add	r3, r2
 80094b6:	4618      	mov	r0, r3
 80094b8:	f7fe f9e5 	bl	8007886 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	3301      	adds	r3, #1
 80094c0:	607b      	str	r3, [r7, #4]
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	2b06      	cmp	r3, #6
 80094c6:	d9ef      	bls.n	80094a8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80094c8:	480d      	ldr	r0, [pc, #52]	; (8009500 <prvInitialiseTaskLists+0x64>)
 80094ca:	f7fe f9dc 	bl	8007886 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80094ce:	480d      	ldr	r0, [pc, #52]	; (8009504 <prvInitialiseTaskLists+0x68>)
 80094d0:	f7fe f9d9 	bl	8007886 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80094d4:	480c      	ldr	r0, [pc, #48]	; (8009508 <prvInitialiseTaskLists+0x6c>)
 80094d6:	f7fe f9d6 	bl	8007886 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80094da:	480c      	ldr	r0, [pc, #48]	; (800950c <prvInitialiseTaskLists+0x70>)
 80094dc:	f7fe f9d3 	bl	8007886 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80094e0:	480b      	ldr	r0, [pc, #44]	; (8009510 <prvInitialiseTaskLists+0x74>)
 80094e2:	f7fe f9d0 	bl	8007886 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80094e6:	4b0b      	ldr	r3, [pc, #44]	; (8009514 <prvInitialiseTaskLists+0x78>)
 80094e8:	4a05      	ldr	r2, [pc, #20]	; (8009500 <prvInitialiseTaskLists+0x64>)
 80094ea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80094ec:	4b0a      	ldr	r3, [pc, #40]	; (8009518 <prvInitialiseTaskLists+0x7c>)
 80094ee:	4a05      	ldr	r2, [pc, #20]	; (8009504 <prvInitialiseTaskLists+0x68>)
 80094f0:	601a      	str	r2, [r3, #0]
}
 80094f2:	bf00      	nop
 80094f4:	3708      	adds	r7, #8
 80094f6:	46bd      	mov	sp, r7
 80094f8:	bd80      	pop	{r7, pc}
 80094fa:	bf00      	nop
 80094fc:	20000248 	.word	0x20000248
 8009500:	200002d4 	.word	0x200002d4
 8009504:	200002e8 	.word	0x200002e8
 8009508:	20000304 	.word	0x20000304
 800950c:	20000318 	.word	0x20000318
 8009510:	20000330 	.word	0x20000330
 8009514:	200002fc 	.word	0x200002fc
 8009518:	20000300 	.word	0x20000300

0800951c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b082      	sub	sp, #8
 8009520:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009522:	e019      	b.n	8009558 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009524:	f000 fcf2 	bl	8009f0c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8009528:	4b0f      	ldr	r3, [pc, #60]	; (8009568 <prvCheckTasksWaitingTermination+0x4c>)
 800952a:	68db      	ldr	r3, [r3, #12]
 800952c:	68db      	ldr	r3, [r3, #12]
 800952e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	3304      	adds	r3, #4
 8009534:	4618      	mov	r0, r3
 8009536:	f7fe fa30 	bl	800799a <uxListRemove>
				--uxCurrentNumberOfTasks;
 800953a:	4b0c      	ldr	r3, [pc, #48]	; (800956c <prvCheckTasksWaitingTermination+0x50>)
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	3b01      	subs	r3, #1
 8009540:	4a0a      	ldr	r2, [pc, #40]	; (800956c <prvCheckTasksWaitingTermination+0x50>)
 8009542:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009544:	4b0a      	ldr	r3, [pc, #40]	; (8009570 <prvCheckTasksWaitingTermination+0x54>)
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	3b01      	subs	r3, #1
 800954a:	4a09      	ldr	r2, [pc, #36]	; (8009570 <prvCheckTasksWaitingTermination+0x54>)
 800954c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800954e:	f000 fd0b 	bl	8009f68 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009552:	6878      	ldr	r0, [r7, #4]
 8009554:	f000 f80e 	bl	8009574 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009558:	4b05      	ldr	r3, [pc, #20]	; (8009570 <prvCheckTasksWaitingTermination+0x54>)
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d1e1      	bne.n	8009524 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009560:	bf00      	nop
 8009562:	3708      	adds	r7, #8
 8009564:	46bd      	mov	sp, r7
 8009566:	bd80      	pop	{r7, pc}
 8009568:	20000318 	.word	0x20000318
 800956c:	20000344 	.word	0x20000344
 8009570:	2000032c 	.word	0x2000032c

08009574 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009574:	b580      	push	{r7, lr}
 8009576:	b084      	sub	sp, #16
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009582:	2b00      	cmp	r3, #0
 8009584:	d108      	bne.n	8009598 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800958a:	4618      	mov	r0, r3
 800958c:	f000 fe9e 	bl	800a2cc <vPortFree>
				vPortFree( pxTCB );
 8009590:	6878      	ldr	r0, [r7, #4]
 8009592:	f000 fe9b 	bl	800a2cc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009596:	e017      	b.n	80095c8 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800959e:	2b01      	cmp	r3, #1
 80095a0:	d103      	bne.n	80095aa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80095a2:	6878      	ldr	r0, [r7, #4]
 80095a4:	f000 fe92 	bl	800a2cc <vPortFree>
	}
 80095a8:	e00e      	b.n	80095c8 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80095b0:	2b02      	cmp	r3, #2
 80095b2:	d009      	beq.n	80095c8 <prvDeleteTCB+0x54>
 80095b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095b8:	f383 8811 	msr	BASEPRI, r3
 80095bc:	f3bf 8f6f 	isb	sy
 80095c0:	f3bf 8f4f 	dsb	sy
 80095c4:	60fb      	str	r3, [r7, #12]
 80095c6:	e7fe      	b.n	80095c6 <prvDeleteTCB+0x52>
	}
 80095c8:	bf00      	nop
 80095ca:	3710      	adds	r7, #16
 80095cc:	46bd      	mov	sp, r7
 80095ce:	bd80      	pop	{r7, pc}

080095d0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80095d0:	b480      	push	{r7}
 80095d2:	b083      	sub	sp, #12
 80095d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80095d6:	4b0f      	ldr	r3, [pc, #60]	; (8009614 <prvResetNextTaskUnblockTime+0x44>)
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d101      	bne.n	80095e4 <prvResetNextTaskUnblockTime+0x14>
 80095e0:	2301      	movs	r3, #1
 80095e2:	e000      	b.n	80095e6 <prvResetNextTaskUnblockTime+0x16>
 80095e4:	2300      	movs	r3, #0
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d004      	beq.n	80095f4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80095ea:	4b0b      	ldr	r3, [pc, #44]	; (8009618 <prvResetNextTaskUnblockTime+0x48>)
 80095ec:	f04f 32ff 	mov.w	r2, #4294967295
 80095f0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80095f2:	e008      	b.n	8009606 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80095f4:	4b07      	ldr	r3, [pc, #28]	; (8009614 <prvResetNextTaskUnblockTime+0x44>)
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	68db      	ldr	r3, [r3, #12]
 80095fa:	68db      	ldr	r3, [r3, #12]
 80095fc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	685b      	ldr	r3, [r3, #4]
 8009602:	4a05      	ldr	r2, [pc, #20]	; (8009618 <prvResetNextTaskUnblockTime+0x48>)
 8009604:	6013      	str	r3, [r2, #0]
}
 8009606:	bf00      	nop
 8009608:	370c      	adds	r7, #12
 800960a:	46bd      	mov	sp, r7
 800960c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009610:	4770      	bx	lr
 8009612:	bf00      	nop
 8009614:	200002fc 	.word	0x200002fc
 8009618:	20000364 	.word	0x20000364

0800961c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800961c:	b480      	push	{r7}
 800961e:	b083      	sub	sp, #12
 8009620:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8009622:	4b05      	ldr	r3, [pc, #20]	; (8009638 <xTaskGetCurrentTaskHandle+0x1c>)
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	607b      	str	r3, [r7, #4]

		return xReturn;
 8009628:	687b      	ldr	r3, [r7, #4]
	}
 800962a:	4618      	mov	r0, r3
 800962c:	370c      	adds	r7, #12
 800962e:	46bd      	mov	sp, r7
 8009630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009634:	4770      	bx	lr
 8009636:	bf00      	nop
 8009638:	20000244 	.word	0x20000244

0800963c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800963c:	b480      	push	{r7}
 800963e:	b083      	sub	sp, #12
 8009640:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009642:	4b0b      	ldr	r3, [pc, #44]	; (8009670 <xTaskGetSchedulerState+0x34>)
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d102      	bne.n	8009650 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800964a:	2301      	movs	r3, #1
 800964c:	607b      	str	r3, [r7, #4]
 800964e:	e008      	b.n	8009662 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009650:	4b08      	ldr	r3, [pc, #32]	; (8009674 <xTaskGetSchedulerState+0x38>)
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d102      	bne.n	800965e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009658:	2302      	movs	r3, #2
 800965a:	607b      	str	r3, [r7, #4]
 800965c:	e001      	b.n	8009662 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800965e:	2300      	movs	r3, #0
 8009660:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009662:	687b      	ldr	r3, [r7, #4]
	}
 8009664:	4618      	mov	r0, r3
 8009666:	370c      	adds	r7, #12
 8009668:	46bd      	mov	sp, r7
 800966a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966e:	4770      	bx	lr
 8009670:	20000350 	.word	0x20000350
 8009674:	2000036c 	.word	0x2000036c

08009678 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009678:	b580      	push	{r7, lr}
 800967a:	b084      	sub	sp, #16
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009684:	2300      	movs	r3, #0
 8009686:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d06e      	beq.n	800976c <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800968e:	68bb      	ldr	r3, [r7, #8]
 8009690:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009692:	4b39      	ldr	r3, [pc, #228]	; (8009778 <xTaskPriorityInherit+0x100>)
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009698:	429a      	cmp	r2, r3
 800969a:	d25e      	bcs.n	800975a <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800969c:	68bb      	ldr	r3, [r7, #8]
 800969e:	699b      	ldr	r3, [r3, #24]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	db06      	blt.n	80096b2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80096a4:	4b34      	ldr	r3, [pc, #208]	; (8009778 <xTaskPriorityInherit+0x100>)
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096aa:	f1c3 0207 	rsb	r2, r3, #7
 80096ae:	68bb      	ldr	r3, [r7, #8]
 80096b0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80096b2:	68bb      	ldr	r3, [r7, #8]
 80096b4:	6959      	ldr	r1, [r3, #20]
 80096b6:	68bb      	ldr	r3, [r7, #8]
 80096b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096ba:	4613      	mov	r3, r2
 80096bc:	009b      	lsls	r3, r3, #2
 80096be:	4413      	add	r3, r2
 80096c0:	009b      	lsls	r3, r3, #2
 80096c2:	4a2e      	ldr	r2, [pc, #184]	; (800977c <xTaskPriorityInherit+0x104>)
 80096c4:	4413      	add	r3, r2
 80096c6:	4299      	cmp	r1, r3
 80096c8:	d101      	bne.n	80096ce <xTaskPriorityInherit+0x56>
 80096ca:	2301      	movs	r3, #1
 80096cc:	e000      	b.n	80096d0 <xTaskPriorityInherit+0x58>
 80096ce:	2300      	movs	r3, #0
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d03a      	beq.n	800974a <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80096d4:	68bb      	ldr	r3, [r7, #8]
 80096d6:	3304      	adds	r3, #4
 80096d8:	4618      	mov	r0, r3
 80096da:	f7fe f95e 	bl	800799a <uxListRemove>
 80096de:	4603      	mov	r3, r0
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d115      	bne.n	8009710 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80096e4:	68bb      	ldr	r3, [r7, #8]
 80096e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096e8:	4924      	ldr	r1, [pc, #144]	; (800977c <xTaskPriorityInherit+0x104>)
 80096ea:	4613      	mov	r3, r2
 80096ec:	009b      	lsls	r3, r3, #2
 80096ee:	4413      	add	r3, r2
 80096f0:	009b      	lsls	r3, r3, #2
 80096f2:	440b      	add	r3, r1
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d10a      	bne.n	8009710 <xTaskPriorityInherit+0x98>
 80096fa:	68bb      	ldr	r3, [r7, #8]
 80096fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096fe:	2201      	movs	r2, #1
 8009700:	fa02 f303 	lsl.w	r3, r2, r3
 8009704:	43da      	mvns	r2, r3
 8009706:	4b1e      	ldr	r3, [pc, #120]	; (8009780 <xTaskPriorityInherit+0x108>)
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	4013      	ands	r3, r2
 800970c:	4a1c      	ldr	r2, [pc, #112]	; (8009780 <xTaskPriorityInherit+0x108>)
 800970e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009710:	4b19      	ldr	r3, [pc, #100]	; (8009778 <xTaskPriorityInherit+0x100>)
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009716:	68bb      	ldr	r3, [r7, #8]
 8009718:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800971a:	68bb      	ldr	r3, [r7, #8]
 800971c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800971e:	2201      	movs	r2, #1
 8009720:	409a      	lsls	r2, r3
 8009722:	4b17      	ldr	r3, [pc, #92]	; (8009780 <xTaskPriorityInherit+0x108>)
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	4313      	orrs	r3, r2
 8009728:	4a15      	ldr	r2, [pc, #84]	; (8009780 <xTaskPriorityInherit+0x108>)
 800972a:	6013      	str	r3, [r2, #0]
 800972c:	68bb      	ldr	r3, [r7, #8]
 800972e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009730:	4613      	mov	r3, r2
 8009732:	009b      	lsls	r3, r3, #2
 8009734:	4413      	add	r3, r2
 8009736:	009b      	lsls	r3, r3, #2
 8009738:	4a10      	ldr	r2, [pc, #64]	; (800977c <xTaskPriorityInherit+0x104>)
 800973a:	441a      	add	r2, r3
 800973c:	68bb      	ldr	r3, [r7, #8]
 800973e:	3304      	adds	r3, #4
 8009740:	4619      	mov	r1, r3
 8009742:	4610      	mov	r0, r2
 8009744:	f7fe f8cc 	bl	80078e0 <vListInsertEnd>
 8009748:	e004      	b.n	8009754 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800974a:	4b0b      	ldr	r3, [pc, #44]	; (8009778 <xTaskPriorityInherit+0x100>)
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009750:	68bb      	ldr	r3, [r7, #8]
 8009752:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009754:	2301      	movs	r3, #1
 8009756:	60fb      	str	r3, [r7, #12]
 8009758:	e008      	b.n	800976c <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800975a:	68bb      	ldr	r3, [r7, #8]
 800975c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800975e:	4b06      	ldr	r3, [pc, #24]	; (8009778 <xTaskPriorityInherit+0x100>)
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009764:	429a      	cmp	r2, r3
 8009766:	d201      	bcs.n	800976c <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009768:	2301      	movs	r3, #1
 800976a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800976c:	68fb      	ldr	r3, [r7, #12]
	}
 800976e:	4618      	mov	r0, r3
 8009770:	3710      	adds	r7, #16
 8009772:	46bd      	mov	sp, r7
 8009774:	bd80      	pop	{r7, pc}
 8009776:	bf00      	nop
 8009778:	20000244 	.word	0x20000244
 800977c:	20000248 	.word	0x20000248
 8009780:	2000034c 	.word	0x2000034c

08009784 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009784:	b580      	push	{r7, lr}
 8009786:	b086      	sub	sp, #24
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009790:	2300      	movs	r3, #0
 8009792:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d06c      	beq.n	8009874 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800979a:	4b39      	ldr	r3, [pc, #228]	; (8009880 <xTaskPriorityDisinherit+0xfc>)
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	693a      	ldr	r2, [r7, #16]
 80097a0:	429a      	cmp	r2, r3
 80097a2:	d009      	beq.n	80097b8 <xTaskPriorityDisinherit+0x34>
 80097a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097a8:	f383 8811 	msr	BASEPRI, r3
 80097ac:	f3bf 8f6f 	isb	sy
 80097b0:	f3bf 8f4f 	dsb	sy
 80097b4:	60fb      	str	r3, [r7, #12]
 80097b6:	e7fe      	b.n	80097b6 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80097b8:	693b      	ldr	r3, [r7, #16]
 80097ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d109      	bne.n	80097d4 <xTaskPriorityDisinherit+0x50>
 80097c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097c4:	f383 8811 	msr	BASEPRI, r3
 80097c8:	f3bf 8f6f 	isb	sy
 80097cc:	f3bf 8f4f 	dsb	sy
 80097d0:	60bb      	str	r3, [r7, #8]
 80097d2:	e7fe      	b.n	80097d2 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80097d4:	693b      	ldr	r3, [r7, #16]
 80097d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80097d8:	1e5a      	subs	r2, r3, #1
 80097da:	693b      	ldr	r3, [r7, #16]
 80097dc:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80097de:	693b      	ldr	r3, [r7, #16]
 80097e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097e2:	693b      	ldr	r3, [r7, #16]
 80097e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097e6:	429a      	cmp	r2, r3
 80097e8:	d044      	beq.n	8009874 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80097ea:	693b      	ldr	r3, [r7, #16]
 80097ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d140      	bne.n	8009874 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80097f2:	693b      	ldr	r3, [r7, #16]
 80097f4:	3304      	adds	r3, #4
 80097f6:	4618      	mov	r0, r3
 80097f8:	f7fe f8cf 	bl	800799a <uxListRemove>
 80097fc:	4603      	mov	r3, r0
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d115      	bne.n	800982e <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009802:	693b      	ldr	r3, [r7, #16]
 8009804:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009806:	491f      	ldr	r1, [pc, #124]	; (8009884 <xTaskPriorityDisinherit+0x100>)
 8009808:	4613      	mov	r3, r2
 800980a:	009b      	lsls	r3, r3, #2
 800980c:	4413      	add	r3, r2
 800980e:	009b      	lsls	r3, r3, #2
 8009810:	440b      	add	r3, r1
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d10a      	bne.n	800982e <xTaskPriorityDisinherit+0xaa>
 8009818:	693b      	ldr	r3, [r7, #16]
 800981a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800981c:	2201      	movs	r2, #1
 800981e:	fa02 f303 	lsl.w	r3, r2, r3
 8009822:	43da      	mvns	r2, r3
 8009824:	4b18      	ldr	r3, [pc, #96]	; (8009888 <xTaskPriorityDisinherit+0x104>)
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	4013      	ands	r3, r2
 800982a:	4a17      	ldr	r2, [pc, #92]	; (8009888 <xTaskPriorityDisinherit+0x104>)
 800982c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800982e:	693b      	ldr	r3, [r7, #16]
 8009830:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009832:	693b      	ldr	r3, [r7, #16]
 8009834:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009836:	693b      	ldr	r3, [r7, #16]
 8009838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800983a:	f1c3 0207 	rsb	r2, r3, #7
 800983e:	693b      	ldr	r3, [r7, #16]
 8009840:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009842:	693b      	ldr	r3, [r7, #16]
 8009844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009846:	2201      	movs	r2, #1
 8009848:	409a      	lsls	r2, r3
 800984a:	4b0f      	ldr	r3, [pc, #60]	; (8009888 <xTaskPriorityDisinherit+0x104>)
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	4313      	orrs	r3, r2
 8009850:	4a0d      	ldr	r2, [pc, #52]	; (8009888 <xTaskPriorityDisinherit+0x104>)
 8009852:	6013      	str	r3, [r2, #0]
 8009854:	693b      	ldr	r3, [r7, #16]
 8009856:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009858:	4613      	mov	r3, r2
 800985a:	009b      	lsls	r3, r3, #2
 800985c:	4413      	add	r3, r2
 800985e:	009b      	lsls	r3, r3, #2
 8009860:	4a08      	ldr	r2, [pc, #32]	; (8009884 <xTaskPriorityDisinherit+0x100>)
 8009862:	441a      	add	r2, r3
 8009864:	693b      	ldr	r3, [r7, #16]
 8009866:	3304      	adds	r3, #4
 8009868:	4619      	mov	r1, r3
 800986a:	4610      	mov	r0, r2
 800986c:	f7fe f838 	bl	80078e0 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009870:	2301      	movs	r3, #1
 8009872:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009874:	697b      	ldr	r3, [r7, #20]
	}
 8009876:	4618      	mov	r0, r3
 8009878:	3718      	adds	r7, #24
 800987a:	46bd      	mov	sp, r7
 800987c:	bd80      	pop	{r7, pc}
 800987e:	bf00      	nop
 8009880:	20000244 	.word	0x20000244
 8009884:	20000248 	.word	0x20000248
 8009888:	2000034c 	.word	0x2000034c

0800988c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800988c:	b580      	push	{r7, lr}
 800988e:	b088      	sub	sp, #32
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
 8009894:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800989a:	2301      	movs	r3, #1
 800989c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	f000 8086 	beq.w	80099b2 <vTaskPriorityDisinheritAfterTimeout+0x126>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80098a6:	69bb      	ldr	r3, [r7, #24]
 80098a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d109      	bne.n	80098c2 <vTaskPriorityDisinheritAfterTimeout+0x36>
 80098ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098b2:	f383 8811 	msr	BASEPRI, r3
 80098b6:	f3bf 8f6f 	isb	sy
 80098ba:	f3bf 8f4f 	dsb	sy
 80098be:	60fb      	str	r3, [r7, #12]
 80098c0:	e7fe      	b.n	80098c0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80098c2:	69bb      	ldr	r3, [r7, #24]
 80098c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098c6:	683a      	ldr	r2, [r7, #0]
 80098c8:	429a      	cmp	r2, r3
 80098ca:	d902      	bls.n	80098d2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	61fb      	str	r3, [r7, #28]
 80098d0:	e002      	b.n	80098d8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80098d2:	69bb      	ldr	r3, [r7, #24]
 80098d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098d6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80098d8:	69bb      	ldr	r3, [r7, #24]
 80098da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098dc:	69fa      	ldr	r2, [r7, #28]
 80098de:	429a      	cmp	r2, r3
 80098e0:	d067      	beq.n	80099b2 <vTaskPriorityDisinheritAfterTimeout+0x126>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80098e2:	69bb      	ldr	r3, [r7, #24]
 80098e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80098e6:	697a      	ldr	r2, [r7, #20]
 80098e8:	429a      	cmp	r2, r3
 80098ea:	d162      	bne.n	80099b2 <vTaskPriorityDisinheritAfterTimeout+0x126>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80098ec:	4b33      	ldr	r3, [pc, #204]	; (80099bc <vTaskPriorityDisinheritAfterTimeout+0x130>)
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	69ba      	ldr	r2, [r7, #24]
 80098f2:	429a      	cmp	r2, r3
 80098f4:	d109      	bne.n	800990a <vTaskPriorityDisinheritAfterTimeout+0x7e>
 80098f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098fa:	f383 8811 	msr	BASEPRI, r3
 80098fe:	f3bf 8f6f 	isb	sy
 8009902:	f3bf 8f4f 	dsb	sy
 8009906:	60bb      	str	r3, [r7, #8]
 8009908:	e7fe      	b.n	8009908 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800990a:	69bb      	ldr	r3, [r7, #24]
 800990c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800990e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009910:	69bb      	ldr	r3, [r7, #24]
 8009912:	69fa      	ldr	r2, [r7, #28]
 8009914:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009916:	69bb      	ldr	r3, [r7, #24]
 8009918:	699b      	ldr	r3, [r3, #24]
 800991a:	2b00      	cmp	r3, #0
 800991c:	db04      	blt.n	8009928 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800991e:	69fb      	ldr	r3, [r7, #28]
 8009920:	f1c3 0207 	rsb	r2, r3, #7
 8009924:	69bb      	ldr	r3, [r7, #24]
 8009926:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009928:	69bb      	ldr	r3, [r7, #24]
 800992a:	6959      	ldr	r1, [r3, #20]
 800992c:	693a      	ldr	r2, [r7, #16]
 800992e:	4613      	mov	r3, r2
 8009930:	009b      	lsls	r3, r3, #2
 8009932:	4413      	add	r3, r2
 8009934:	009b      	lsls	r3, r3, #2
 8009936:	4a22      	ldr	r2, [pc, #136]	; (80099c0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8009938:	4413      	add	r3, r2
 800993a:	4299      	cmp	r1, r3
 800993c:	d101      	bne.n	8009942 <vTaskPriorityDisinheritAfterTimeout+0xb6>
 800993e:	2301      	movs	r3, #1
 8009940:	e000      	b.n	8009944 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8009942:	2300      	movs	r3, #0
 8009944:	2b00      	cmp	r3, #0
 8009946:	d034      	beq.n	80099b2 <vTaskPriorityDisinheritAfterTimeout+0x126>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009948:	69bb      	ldr	r3, [r7, #24]
 800994a:	3304      	adds	r3, #4
 800994c:	4618      	mov	r0, r3
 800994e:	f7fe f824 	bl	800799a <uxListRemove>
 8009952:	4603      	mov	r3, r0
 8009954:	2b00      	cmp	r3, #0
 8009956:	d115      	bne.n	8009984 <vTaskPriorityDisinheritAfterTimeout+0xf8>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009958:	69bb      	ldr	r3, [r7, #24]
 800995a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800995c:	4918      	ldr	r1, [pc, #96]	; (80099c0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800995e:	4613      	mov	r3, r2
 8009960:	009b      	lsls	r3, r3, #2
 8009962:	4413      	add	r3, r2
 8009964:	009b      	lsls	r3, r3, #2
 8009966:	440b      	add	r3, r1
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d10a      	bne.n	8009984 <vTaskPriorityDisinheritAfterTimeout+0xf8>
 800996e:	69bb      	ldr	r3, [r7, #24]
 8009970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009972:	2201      	movs	r2, #1
 8009974:	fa02 f303 	lsl.w	r3, r2, r3
 8009978:	43da      	mvns	r2, r3
 800997a:	4b12      	ldr	r3, [pc, #72]	; (80099c4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	4013      	ands	r3, r2
 8009980:	4a10      	ldr	r2, [pc, #64]	; (80099c4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8009982:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009984:	69bb      	ldr	r3, [r7, #24]
 8009986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009988:	2201      	movs	r2, #1
 800998a:	409a      	lsls	r2, r3
 800998c:	4b0d      	ldr	r3, [pc, #52]	; (80099c4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	4313      	orrs	r3, r2
 8009992:	4a0c      	ldr	r2, [pc, #48]	; (80099c4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8009994:	6013      	str	r3, [r2, #0]
 8009996:	69bb      	ldr	r3, [r7, #24]
 8009998:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800999a:	4613      	mov	r3, r2
 800999c:	009b      	lsls	r3, r3, #2
 800999e:	4413      	add	r3, r2
 80099a0:	009b      	lsls	r3, r3, #2
 80099a2:	4a07      	ldr	r2, [pc, #28]	; (80099c0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80099a4:	441a      	add	r2, r3
 80099a6:	69bb      	ldr	r3, [r7, #24]
 80099a8:	3304      	adds	r3, #4
 80099aa:	4619      	mov	r1, r3
 80099ac:	4610      	mov	r0, r2
 80099ae:	f7fd ff97 	bl	80078e0 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80099b2:	bf00      	nop
 80099b4:	3720      	adds	r7, #32
 80099b6:	46bd      	mov	sp, r7
 80099b8:	bd80      	pop	{r7, pc}
 80099ba:	bf00      	nop
 80099bc:	20000244 	.word	0x20000244
 80099c0:	20000248 	.word	0x20000248
 80099c4:	2000034c 	.word	0x2000034c

080099c8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80099c8:	b480      	push	{r7}
 80099ca:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80099cc:	4b07      	ldr	r3, [pc, #28]	; (80099ec <pvTaskIncrementMutexHeldCount+0x24>)
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d004      	beq.n	80099de <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80099d4:	4b05      	ldr	r3, [pc, #20]	; (80099ec <pvTaskIncrementMutexHeldCount+0x24>)
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80099da:	3201      	adds	r2, #1
 80099dc:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80099de:	4b03      	ldr	r3, [pc, #12]	; (80099ec <pvTaskIncrementMutexHeldCount+0x24>)
 80099e0:	681b      	ldr	r3, [r3, #0]
	}
 80099e2:	4618      	mov	r0, r3
 80099e4:	46bd      	mov	sp, r7
 80099e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ea:	4770      	bx	lr
 80099ec:	20000244 	.word	0x20000244

080099f0 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b086      	sub	sp, #24
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	60f8      	str	r0, [r7, #12]
 80099f8:	60b9      	str	r1, [r7, #8]
 80099fa:	607a      	str	r2, [r7, #4]
 80099fc:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 80099fe:	f000 fa85 	bl	8009f0c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8009a02:	4b26      	ldr	r3, [pc, #152]	; (8009a9c <xTaskNotifyWait+0xac>)
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009a0a:	b2db      	uxtb	r3, r3
 8009a0c:	2b02      	cmp	r3, #2
 8009a0e:	d01a      	beq.n	8009a46 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8009a10:	4b22      	ldr	r3, [pc, #136]	; (8009a9c <xTaskNotifyWait+0xac>)
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8009a16:	68fa      	ldr	r2, [r7, #12]
 8009a18:	43d2      	mvns	r2, r2
 8009a1a:	400a      	ands	r2, r1
 8009a1c:	64da      	str	r2, [r3, #76]	; 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8009a1e:	4b1f      	ldr	r3, [pc, #124]	; (8009a9c <xTaskNotifyWait+0xac>)
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	2201      	movs	r2, #1
 8009a24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d00b      	beq.n	8009a46 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009a2e:	2101      	movs	r1, #1
 8009a30:	6838      	ldr	r0, [r7, #0]
 8009a32:	f000 f8d7 	bl	8009be4 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8009a36:	4b1a      	ldr	r3, [pc, #104]	; (8009aa0 <xTaskNotifyWait+0xb0>)
 8009a38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a3c:	601a      	str	r2, [r3, #0]
 8009a3e:	f3bf 8f4f 	dsb	sy
 8009a42:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8009a46:	f000 fa8f 	bl	8009f68 <vPortExitCritical>

		taskENTER_CRITICAL();
 8009a4a:	f000 fa5f 	bl	8009f0c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d004      	beq.n	8009a5e <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8009a54:	4b11      	ldr	r3, [pc, #68]	; (8009a9c <xTaskNotifyWait+0xac>)
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8009a5e:	4b0f      	ldr	r3, [pc, #60]	; (8009a9c <xTaskNotifyWait+0xac>)
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009a66:	b2db      	uxtb	r3, r3
 8009a68:	2b02      	cmp	r3, #2
 8009a6a:	d002      	beq.n	8009a72 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	617b      	str	r3, [r7, #20]
 8009a70:	e008      	b.n	8009a84 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8009a72:	4b0a      	ldr	r3, [pc, #40]	; (8009a9c <xTaskNotifyWait+0xac>)
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8009a78:	68ba      	ldr	r2, [r7, #8]
 8009a7a:	43d2      	mvns	r2, r2
 8009a7c:	400a      	ands	r2, r1
 8009a7e:	64da      	str	r2, [r3, #76]	; 0x4c
				xReturn = pdTRUE;
 8009a80:	2301      	movs	r3, #1
 8009a82:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009a84:	4b05      	ldr	r3, [pc, #20]	; (8009a9c <xTaskNotifyWait+0xac>)
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	2200      	movs	r2, #0
 8009a8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 8009a8e:	f000 fa6b 	bl	8009f68 <vPortExitCritical>

		return xReturn;
 8009a92:	697b      	ldr	r3, [r7, #20]
	}
 8009a94:	4618      	mov	r0, r3
 8009a96:	3718      	adds	r7, #24
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	bd80      	pop	{r7, pc}
 8009a9c:	20000244 	.word	0x20000244
 8009aa0:	e000ed04 	.word	0xe000ed04

08009aa4 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b08a      	sub	sp, #40	; 0x28
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	60f8      	str	r0, [r7, #12]
 8009aac:	60b9      	str	r1, [r7, #8]
 8009aae:	603b      	str	r3, [r7, #0]
 8009ab0:	4613      	mov	r3, r2
 8009ab2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8009ab4:	2301      	movs	r3, #1
 8009ab6:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d109      	bne.n	8009ad2 <xTaskGenericNotify+0x2e>
 8009abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ac2:	f383 8811 	msr	BASEPRI, r3
 8009ac6:	f3bf 8f6f 	isb	sy
 8009aca:	f3bf 8f4f 	dsb	sy
 8009ace:	61bb      	str	r3, [r7, #24]
 8009ad0:	e7fe      	b.n	8009ad0 <xTaskGenericNotify+0x2c>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8009ad6:	f000 fa19 	bl	8009f0c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8009ada:	683b      	ldr	r3, [r7, #0]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d003      	beq.n	8009ae8 <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8009ae0:	6a3b      	ldr	r3, [r7, #32]
 8009ae2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009ae4:	683b      	ldr	r3, [r7, #0]
 8009ae6:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8009ae8:	6a3b      	ldr	r3, [r7, #32]
 8009aea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009aee:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8009af0:	6a3b      	ldr	r3, [r7, #32]
 8009af2:	2202      	movs	r2, #2
 8009af4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 8009af8:	79fb      	ldrb	r3, [r7, #7]
 8009afa:	2b04      	cmp	r3, #4
 8009afc:	d827      	bhi.n	8009b4e <xTaskGenericNotify+0xaa>
 8009afe:	a201      	add	r2, pc, #4	; (adr r2, 8009b04 <xTaskGenericNotify+0x60>)
 8009b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b04:	08009b4f 	.word	0x08009b4f
 8009b08:	08009b19 	.word	0x08009b19
 8009b0c:	08009b27 	.word	0x08009b27
 8009b10:	08009b33 	.word	0x08009b33
 8009b14:	08009b3b 	.word	0x08009b3b
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8009b18:	6a3b      	ldr	r3, [r7, #32]
 8009b1a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009b1c:	68bb      	ldr	r3, [r7, #8]
 8009b1e:	431a      	orrs	r2, r3
 8009b20:	6a3b      	ldr	r3, [r7, #32]
 8009b22:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8009b24:	e013      	b.n	8009b4e <xTaskGenericNotify+0xaa>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8009b26:	6a3b      	ldr	r3, [r7, #32]
 8009b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b2a:	1c5a      	adds	r2, r3, #1
 8009b2c:	6a3b      	ldr	r3, [r7, #32]
 8009b2e:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8009b30:	e00d      	b.n	8009b4e <xTaskGenericNotify+0xaa>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8009b32:	6a3b      	ldr	r3, [r7, #32]
 8009b34:	68ba      	ldr	r2, [r7, #8]
 8009b36:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8009b38:	e009      	b.n	8009b4e <xTaskGenericNotify+0xaa>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8009b3a:	7ffb      	ldrb	r3, [r7, #31]
 8009b3c:	2b02      	cmp	r3, #2
 8009b3e:	d003      	beq.n	8009b48 <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8009b40:	6a3b      	ldr	r3, [r7, #32]
 8009b42:	68ba      	ldr	r2, [r7, #8]
 8009b44:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8009b46:	e001      	b.n	8009b4c <xTaskGenericNotify+0xa8>
						xReturn = pdFAIL;
 8009b48:	2300      	movs	r3, #0
 8009b4a:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8009b4c:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8009b4e:	7ffb      	ldrb	r3, [r7, #31]
 8009b50:	2b01      	cmp	r3, #1
 8009b52:	d138      	bne.n	8009bc6 <xTaskGenericNotify+0x122>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009b54:	6a3b      	ldr	r3, [r7, #32]
 8009b56:	3304      	adds	r3, #4
 8009b58:	4618      	mov	r0, r3
 8009b5a:	f7fd ff1e 	bl	800799a <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8009b5e:	6a3b      	ldr	r3, [r7, #32]
 8009b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b62:	2201      	movs	r2, #1
 8009b64:	409a      	lsls	r2, r3
 8009b66:	4b1b      	ldr	r3, [pc, #108]	; (8009bd4 <xTaskGenericNotify+0x130>)
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	4313      	orrs	r3, r2
 8009b6c:	4a19      	ldr	r2, [pc, #100]	; (8009bd4 <xTaskGenericNotify+0x130>)
 8009b6e:	6013      	str	r3, [r2, #0]
 8009b70:	6a3b      	ldr	r3, [r7, #32]
 8009b72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b74:	4613      	mov	r3, r2
 8009b76:	009b      	lsls	r3, r3, #2
 8009b78:	4413      	add	r3, r2
 8009b7a:	009b      	lsls	r3, r3, #2
 8009b7c:	4a16      	ldr	r2, [pc, #88]	; (8009bd8 <xTaskGenericNotify+0x134>)
 8009b7e:	441a      	add	r2, r3
 8009b80:	6a3b      	ldr	r3, [r7, #32]
 8009b82:	3304      	adds	r3, #4
 8009b84:	4619      	mov	r1, r3
 8009b86:	4610      	mov	r0, r2
 8009b88:	f7fd feaa 	bl	80078e0 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8009b8c:	6a3b      	ldr	r3, [r7, #32]
 8009b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d009      	beq.n	8009ba8 <xTaskGenericNotify+0x104>
 8009b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b98:	f383 8811 	msr	BASEPRI, r3
 8009b9c:	f3bf 8f6f 	isb	sy
 8009ba0:	f3bf 8f4f 	dsb	sy
 8009ba4:	617b      	str	r3, [r7, #20]
 8009ba6:	e7fe      	b.n	8009ba6 <xTaskGenericNotify+0x102>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009ba8:	6a3b      	ldr	r3, [r7, #32]
 8009baa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bac:	4b0b      	ldr	r3, [pc, #44]	; (8009bdc <xTaskGenericNotify+0x138>)
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bb2:	429a      	cmp	r2, r3
 8009bb4:	d907      	bls.n	8009bc6 <xTaskGenericNotify+0x122>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8009bb6:	4b0a      	ldr	r3, [pc, #40]	; (8009be0 <xTaskGenericNotify+0x13c>)
 8009bb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009bbc:	601a      	str	r2, [r3, #0]
 8009bbe:	f3bf 8f4f 	dsb	sy
 8009bc2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8009bc6:	f000 f9cf 	bl	8009f68 <vPortExitCritical>

		return xReturn;
 8009bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8009bcc:	4618      	mov	r0, r3
 8009bce:	3728      	adds	r7, #40	; 0x28
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	bd80      	pop	{r7, pc}
 8009bd4:	2000034c 	.word	0x2000034c
 8009bd8:	20000248 	.word	0x20000248
 8009bdc:	20000244 	.word	0x20000244
 8009be0:	e000ed04 	.word	0xe000ed04

08009be4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b084      	sub	sp, #16
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
 8009bec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009bee:	4b2b      	ldr	r3, [pc, #172]	; (8009c9c <prvAddCurrentTaskToDelayedList+0xb8>)
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	60fb      	str	r3, [r7, #12]
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 8009bf4:	4b2a      	ldr	r3, [pc, #168]	; (8009ca0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009bfe:	4b28      	ldr	r3, [pc, #160]	; (8009ca0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	3304      	adds	r3, #4
 8009c04:	4618      	mov	r0, r3
 8009c06:	f7fd fec8 	bl	800799a <uxListRemove>
 8009c0a:	4603      	mov	r3, r0
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d10b      	bne.n	8009c28 <prvAddCurrentTaskToDelayedList+0x44>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8009c10:	4b23      	ldr	r3, [pc, #140]	; (8009ca0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c16:	2201      	movs	r2, #1
 8009c18:	fa02 f303 	lsl.w	r3, r2, r3
 8009c1c:	43da      	mvns	r2, r3
 8009c1e:	4b21      	ldr	r3, [pc, #132]	; (8009ca4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	4013      	ands	r3, r2
 8009c24:	4a1f      	ldr	r2, [pc, #124]	; (8009ca4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8009c26:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c2e:	d10a      	bne.n	8009c46 <prvAddCurrentTaskToDelayedList+0x62>
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d007      	beq.n	8009c46 <prvAddCurrentTaskToDelayedList+0x62>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009c36:	4b1a      	ldr	r3, [pc, #104]	; (8009ca0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	3304      	adds	r3, #4
 8009c3c:	4619      	mov	r1, r3
 8009c3e:	481a      	ldr	r0, [pc, #104]	; (8009ca8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009c40:	f7fd fe4e 	bl	80078e0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009c44:	e026      	b.n	8009c94 <prvAddCurrentTaskToDelayedList+0xb0>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009c46:	68fa      	ldr	r2, [r7, #12]
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	4413      	add	r3, r2
 8009c4c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009c4e:	4b14      	ldr	r3, [pc, #80]	; (8009ca0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	68ba      	ldr	r2, [r7, #8]
 8009c54:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009c56:	68ba      	ldr	r2, [r7, #8]
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	429a      	cmp	r2, r3
 8009c5c:	d209      	bcs.n	8009c72 <prvAddCurrentTaskToDelayedList+0x8e>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009c5e:	4b13      	ldr	r3, [pc, #76]	; (8009cac <prvAddCurrentTaskToDelayedList+0xc8>)
 8009c60:	681a      	ldr	r2, [r3, #0]
 8009c62:	4b0f      	ldr	r3, [pc, #60]	; (8009ca0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	3304      	adds	r3, #4
 8009c68:	4619      	mov	r1, r3
 8009c6a:	4610      	mov	r0, r2
 8009c6c:	f7fd fe5c 	bl	8007928 <vListInsert>
}
 8009c70:	e010      	b.n	8009c94 <prvAddCurrentTaskToDelayedList+0xb0>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009c72:	4b0f      	ldr	r3, [pc, #60]	; (8009cb0 <prvAddCurrentTaskToDelayedList+0xcc>)
 8009c74:	681a      	ldr	r2, [r3, #0]
 8009c76:	4b0a      	ldr	r3, [pc, #40]	; (8009ca0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	3304      	adds	r3, #4
 8009c7c:	4619      	mov	r1, r3
 8009c7e:	4610      	mov	r0, r2
 8009c80:	f7fd fe52 	bl	8007928 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009c84:	4b0b      	ldr	r3, [pc, #44]	; (8009cb4 <prvAddCurrentTaskToDelayedList+0xd0>)
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	68ba      	ldr	r2, [r7, #8]
 8009c8a:	429a      	cmp	r2, r3
 8009c8c:	d202      	bcs.n	8009c94 <prvAddCurrentTaskToDelayedList+0xb0>
					xNextTaskUnblockTime = xTimeToWake;
 8009c8e:	4a09      	ldr	r2, [pc, #36]	; (8009cb4 <prvAddCurrentTaskToDelayedList+0xd0>)
 8009c90:	68bb      	ldr	r3, [r7, #8]
 8009c92:	6013      	str	r3, [r2, #0]
}
 8009c94:	bf00      	nop
 8009c96:	3710      	adds	r7, #16
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	bd80      	pop	{r7, pc}
 8009c9c:	20000348 	.word	0x20000348
 8009ca0:	20000244 	.word	0x20000244
 8009ca4:	2000034c 	.word	0x2000034c
 8009ca8:	20000330 	.word	0x20000330
 8009cac:	20000300 	.word	0x20000300
 8009cb0:	200002fc 	.word	0x200002fc
 8009cb4:	20000364 	.word	0x20000364

08009cb8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009cb8:	b480      	push	{r7}
 8009cba:	b085      	sub	sp, #20
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	60f8      	str	r0, [r7, #12]
 8009cc0:	60b9      	str	r1, [r7, #8]
 8009cc2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	3b04      	subs	r3, #4
 8009cc8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009cd0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	3b04      	subs	r3, #4
 8009cd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	f023 0201 	bic.w	r2, r3, #1
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	3b04      	subs	r3, #4
 8009ce6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009ce8:	4a0c      	ldr	r2, [pc, #48]	; (8009d1c <pxPortInitialiseStack+0x64>)
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	3b14      	subs	r3, #20
 8009cf2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009cf4:	687a      	ldr	r2, [r7, #4]
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	3b04      	subs	r3, #4
 8009cfe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	f06f 0202 	mvn.w	r2, #2
 8009d06:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	3b20      	subs	r3, #32
 8009d0c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009d0e:	68fb      	ldr	r3, [r7, #12]
}
 8009d10:	4618      	mov	r0, r3
 8009d12:	3714      	adds	r7, #20
 8009d14:	46bd      	mov	sp, r7
 8009d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1a:	4770      	bx	lr
 8009d1c:	08009d21 	.word	0x08009d21

08009d20 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009d20:	b480      	push	{r7}
 8009d22:	b085      	sub	sp, #20
 8009d24:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009d26:	2300      	movs	r3, #0
 8009d28:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009d2a:	4b11      	ldr	r3, [pc, #68]	; (8009d70 <prvTaskExitError+0x50>)
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d32:	d009      	beq.n	8009d48 <prvTaskExitError+0x28>
 8009d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d38:	f383 8811 	msr	BASEPRI, r3
 8009d3c:	f3bf 8f6f 	isb	sy
 8009d40:	f3bf 8f4f 	dsb	sy
 8009d44:	60fb      	str	r3, [r7, #12]
 8009d46:	e7fe      	b.n	8009d46 <prvTaskExitError+0x26>
 8009d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d4c:	f383 8811 	msr	BASEPRI, r3
 8009d50:	f3bf 8f6f 	isb	sy
 8009d54:	f3bf 8f4f 	dsb	sy
 8009d58:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009d5a:	bf00      	nop
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d0fc      	beq.n	8009d5c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009d62:	bf00      	nop
 8009d64:	3714      	adds	r7, #20
 8009d66:	46bd      	mov	sp, r7
 8009d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6c:	4770      	bx	lr
 8009d6e:	bf00      	nop
 8009d70:	20000004 	.word	0x20000004
	...

08009d80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009d80:	4b07      	ldr	r3, [pc, #28]	; (8009da0 <pxCurrentTCBConst2>)
 8009d82:	6819      	ldr	r1, [r3, #0]
 8009d84:	6808      	ldr	r0, [r1, #0]
 8009d86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d8a:	f380 8809 	msr	PSP, r0
 8009d8e:	f3bf 8f6f 	isb	sy
 8009d92:	f04f 0000 	mov.w	r0, #0
 8009d96:	f380 8811 	msr	BASEPRI, r0
 8009d9a:	4770      	bx	lr
 8009d9c:	f3af 8000 	nop.w

08009da0 <pxCurrentTCBConst2>:
 8009da0:	20000244 	.word	0x20000244
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009da4:	bf00      	nop
 8009da6:	bf00      	nop

08009da8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009da8:	4808      	ldr	r0, [pc, #32]	; (8009dcc <prvPortStartFirstTask+0x24>)
 8009daa:	6800      	ldr	r0, [r0, #0]
 8009dac:	6800      	ldr	r0, [r0, #0]
 8009dae:	f380 8808 	msr	MSP, r0
 8009db2:	f04f 0000 	mov.w	r0, #0
 8009db6:	f380 8814 	msr	CONTROL, r0
 8009dba:	b662      	cpsie	i
 8009dbc:	b661      	cpsie	f
 8009dbe:	f3bf 8f4f 	dsb	sy
 8009dc2:	f3bf 8f6f 	isb	sy
 8009dc6:	df00      	svc	0
 8009dc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009dca:	bf00      	nop
 8009dcc:	e000ed08 	.word	0xe000ed08

08009dd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b086      	sub	sp, #24
 8009dd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009dd6:	4b44      	ldr	r3, [pc, #272]	; (8009ee8 <xPortStartScheduler+0x118>)
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	4a44      	ldr	r2, [pc, #272]	; (8009eec <xPortStartScheduler+0x11c>)
 8009ddc:	4293      	cmp	r3, r2
 8009dde:	d109      	bne.n	8009df4 <xPortStartScheduler+0x24>
 8009de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009de4:	f383 8811 	msr	BASEPRI, r3
 8009de8:	f3bf 8f6f 	isb	sy
 8009dec:	f3bf 8f4f 	dsb	sy
 8009df0:	613b      	str	r3, [r7, #16]
 8009df2:	e7fe      	b.n	8009df2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009df4:	4b3c      	ldr	r3, [pc, #240]	; (8009ee8 <xPortStartScheduler+0x118>)
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	4a3d      	ldr	r2, [pc, #244]	; (8009ef0 <xPortStartScheduler+0x120>)
 8009dfa:	4293      	cmp	r3, r2
 8009dfc:	d109      	bne.n	8009e12 <xPortStartScheduler+0x42>
 8009dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e02:	f383 8811 	msr	BASEPRI, r3
 8009e06:	f3bf 8f6f 	isb	sy
 8009e0a:	f3bf 8f4f 	dsb	sy
 8009e0e:	60fb      	str	r3, [r7, #12]
 8009e10:	e7fe      	b.n	8009e10 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009e12:	4b38      	ldr	r3, [pc, #224]	; (8009ef4 <xPortStartScheduler+0x124>)
 8009e14:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009e16:	697b      	ldr	r3, [r7, #20]
 8009e18:	781b      	ldrb	r3, [r3, #0]
 8009e1a:	b2db      	uxtb	r3, r3
 8009e1c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009e1e:	697b      	ldr	r3, [r7, #20]
 8009e20:	22ff      	movs	r2, #255	; 0xff
 8009e22:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009e24:	697b      	ldr	r3, [r7, #20]
 8009e26:	781b      	ldrb	r3, [r3, #0]
 8009e28:	b2db      	uxtb	r3, r3
 8009e2a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009e2c:	78fb      	ldrb	r3, [r7, #3]
 8009e2e:	b2db      	uxtb	r3, r3
 8009e30:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009e34:	b2da      	uxtb	r2, r3
 8009e36:	4b30      	ldr	r3, [pc, #192]	; (8009ef8 <xPortStartScheduler+0x128>)
 8009e38:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009e3a:	4b30      	ldr	r3, [pc, #192]	; (8009efc <xPortStartScheduler+0x12c>)
 8009e3c:	2207      	movs	r2, #7
 8009e3e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009e40:	e009      	b.n	8009e56 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8009e42:	4b2e      	ldr	r3, [pc, #184]	; (8009efc <xPortStartScheduler+0x12c>)
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	3b01      	subs	r3, #1
 8009e48:	4a2c      	ldr	r2, [pc, #176]	; (8009efc <xPortStartScheduler+0x12c>)
 8009e4a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009e4c:	78fb      	ldrb	r3, [r7, #3]
 8009e4e:	b2db      	uxtb	r3, r3
 8009e50:	005b      	lsls	r3, r3, #1
 8009e52:	b2db      	uxtb	r3, r3
 8009e54:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009e56:	78fb      	ldrb	r3, [r7, #3]
 8009e58:	b2db      	uxtb	r3, r3
 8009e5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e5e:	2b80      	cmp	r3, #128	; 0x80
 8009e60:	d0ef      	beq.n	8009e42 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009e62:	4b26      	ldr	r3, [pc, #152]	; (8009efc <xPortStartScheduler+0x12c>)
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	f1c3 0307 	rsb	r3, r3, #7
 8009e6a:	2b04      	cmp	r3, #4
 8009e6c:	d009      	beq.n	8009e82 <xPortStartScheduler+0xb2>
 8009e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e72:	f383 8811 	msr	BASEPRI, r3
 8009e76:	f3bf 8f6f 	isb	sy
 8009e7a:	f3bf 8f4f 	dsb	sy
 8009e7e:	60bb      	str	r3, [r7, #8]
 8009e80:	e7fe      	b.n	8009e80 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009e82:	4b1e      	ldr	r3, [pc, #120]	; (8009efc <xPortStartScheduler+0x12c>)
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	021b      	lsls	r3, r3, #8
 8009e88:	4a1c      	ldr	r2, [pc, #112]	; (8009efc <xPortStartScheduler+0x12c>)
 8009e8a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009e8c:	4b1b      	ldr	r3, [pc, #108]	; (8009efc <xPortStartScheduler+0x12c>)
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009e94:	4a19      	ldr	r2, [pc, #100]	; (8009efc <xPortStartScheduler+0x12c>)
 8009e96:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	b2da      	uxtb	r2, r3
 8009e9c:	697b      	ldr	r3, [r7, #20]
 8009e9e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009ea0:	4b17      	ldr	r3, [pc, #92]	; (8009f00 <xPortStartScheduler+0x130>)
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	4a16      	ldr	r2, [pc, #88]	; (8009f00 <xPortStartScheduler+0x130>)
 8009ea6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009eaa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009eac:	4b14      	ldr	r3, [pc, #80]	; (8009f00 <xPortStartScheduler+0x130>)
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	4a13      	ldr	r2, [pc, #76]	; (8009f00 <xPortStartScheduler+0x130>)
 8009eb2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009eb6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009eb8:	f000 f8d6 	bl	800a068 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009ebc:	4b11      	ldr	r3, [pc, #68]	; (8009f04 <xPortStartScheduler+0x134>)
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009ec2:	f000 f8f5 	bl	800a0b0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009ec6:	4b10      	ldr	r3, [pc, #64]	; (8009f08 <xPortStartScheduler+0x138>)
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	4a0f      	ldr	r2, [pc, #60]	; (8009f08 <xPortStartScheduler+0x138>)
 8009ecc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009ed0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009ed2:	f7ff ff69 	bl	8009da8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009ed6:	f7ff f93f 	bl	8009158 <vTaskSwitchContext>
	prvTaskExitError();
 8009eda:	f7ff ff21 	bl	8009d20 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009ede:	2300      	movs	r3, #0
}
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	3718      	adds	r7, #24
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	bd80      	pop	{r7, pc}
 8009ee8:	e000ed00 	.word	0xe000ed00
 8009eec:	410fc271 	.word	0x410fc271
 8009ef0:	410fc270 	.word	0x410fc270
 8009ef4:	e000e400 	.word	0xe000e400
 8009ef8:	20000370 	.word	0x20000370
 8009efc:	20000374 	.word	0x20000374
 8009f00:	e000ed20 	.word	0xe000ed20
 8009f04:	20000004 	.word	0x20000004
 8009f08:	e000ef34 	.word	0xe000ef34

08009f0c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009f0c:	b480      	push	{r7}
 8009f0e:	b083      	sub	sp, #12
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f16:	f383 8811 	msr	BASEPRI, r3
 8009f1a:	f3bf 8f6f 	isb	sy
 8009f1e:	f3bf 8f4f 	dsb	sy
 8009f22:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009f24:	4b0e      	ldr	r3, [pc, #56]	; (8009f60 <vPortEnterCritical+0x54>)
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	3301      	adds	r3, #1
 8009f2a:	4a0d      	ldr	r2, [pc, #52]	; (8009f60 <vPortEnterCritical+0x54>)
 8009f2c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009f2e:	4b0c      	ldr	r3, [pc, #48]	; (8009f60 <vPortEnterCritical+0x54>)
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	2b01      	cmp	r3, #1
 8009f34:	d10e      	bne.n	8009f54 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009f36:	4b0b      	ldr	r3, [pc, #44]	; (8009f64 <vPortEnterCritical+0x58>)
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	b2db      	uxtb	r3, r3
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d009      	beq.n	8009f54 <vPortEnterCritical+0x48>
 8009f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f44:	f383 8811 	msr	BASEPRI, r3
 8009f48:	f3bf 8f6f 	isb	sy
 8009f4c:	f3bf 8f4f 	dsb	sy
 8009f50:	603b      	str	r3, [r7, #0]
 8009f52:	e7fe      	b.n	8009f52 <vPortEnterCritical+0x46>
	}
}
 8009f54:	bf00      	nop
 8009f56:	370c      	adds	r7, #12
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5e:	4770      	bx	lr
 8009f60:	20000004 	.word	0x20000004
 8009f64:	e000ed04 	.word	0xe000ed04

08009f68 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009f68:	b480      	push	{r7}
 8009f6a:	b083      	sub	sp, #12
 8009f6c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009f6e:	4b11      	ldr	r3, [pc, #68]	; (8009fb4 <vPortExitCritical+0x4c>)
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d109      	bne.n	8009f8a <vPortExitCritical+0x22>
 8009f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f7a:	f383 8811 	msr	BASEPRI, r3
 8009f7e:	f3bf 8f6f 	isb	sy
 8009f82:	f3bf 8f4f 	dsb	sy
 8009f86:	607b      	str	r3, [r7, #4]
 8009f88:	e7fe      	b.n	8009f88 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8009f8a:	4b0a      	ldr	r3, [pc, #40]	; (8009fb4 <vPortExitCritical+0x4c>)
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	3b01      	subs	r3, #1
 8009f90:	4a08      	ldr	r2, [pc, #32]	; (8009fb4 <vPortExitCritical+0x4c>)
 8009f92:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009f94:	4b07      	ldr	r3, [pc, #28]	; (8009fb4 <vPortExitCritical+0x4c>)
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d104      	bne.n	8009fa6 <vPortExitCritical+0x3e>
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8009fa6:	bf00      	nop
 8009fa8:	370c      	adds	r7, #12
 8009faa:	46bd      	mov	sp, r7
 8009fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb0:	4770      	bx	lr
 8009fb2:	bf00      	nop
 8009fb4:	20000004 	.word	0x20000004
	...

08009fc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009fc0:	f3ef 8009 	mrs	r0, PSP
 8009fc4:	f3bf 8f6f 	isb	sy
 8009fc8:	4b15      	ldr	r3, [pc, #84]	; (800a020 <pxCurrentTCBConst>)
 8009fca:	681a      	ldr	r2, [r3, #0]
 8009fcc:	f01e 0f10 	tst.w	lr, #16
 8009fd0:	bf08      	it	eq
 8009fd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009fd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fda:	6010      	str	r0, [r2, #0]
 8009fdc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009fe0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009fe4:	f380 8811 	msr	BASEPRI, r0
 8009fe8:	f3bf 8f4f 	dsb	sy
 8009fec:	f3bf 8f6f 	isb	sy
 8009ff0:	f7ff f8b2 	bl	8009158 <vTaskSwitchContext>
 8009ff4:	f04f 0000 	mov.w	r0, #0
 8009ff8:	f380 8811 	msr	BASEPRI, r0
 8009ffc:	bc09      	pop	{r0, r3}
 8009ffe:	6819      	ldr	r1, [r3, #0]
 800a000:	6808      	ldr	r0, [r1, #0]
 800a002:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a006:	f01e 0f10 	tst.w	lr, #16
 800a00a:	bf08      	it	eq
 800a00c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a010:	f380 8809 	msr	PSP, r0
 800a014:	f3bf 8f6f 	isb	sy
 800a018:	4770      	bx	lr
 800a01a:	bf00      	nop
 800a01c:	f3af 8000 	nop.w

0800a020 <pxCurrentTCBConst>:
 800a020:	20000244 	.word	0x20000244
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a024:	bf00      	nop
 800a026:	bf00      	nop

0800a028 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a028:	b580      	push	{r7, lr}
 800a02a:	b082      	sub	sp, #8
 800a02c:	af00      	add	r7, sp, #0
	__asm volatile
 800a02e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a032:	f383 8811 	msr	BASEPRI, r3
 800a036:	f3bf 8f6f 	isb	sy
 800a03a:	f3bf 8f4f 	dsb	sy
 800a03e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a040:	f7fe ffce 	bl	8008fe0 <xTaskIncrementTick>
 800a044:	4603      	mov	r3, r0
 800a046:	2b00      	cmp	r3, #0
 800a048:	d003      	beq.n	800a052 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a04a:	4b06      	ldr	r3, [pc, #24]	; (800a064 <SysTick_Handler+0x3c>)
 800a04c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a050:	601a      	str	r2, [r3, #0]
 800a052:	2300      	movs	r3, #0
 800a054:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800a05c:	bf00      	nop
 800a05e:	3708      	adds	r7, #8
 800a060:	46bd      	mov	sp, r7
 800a062:	bd80      	pop	{r7, pc}
 800a064:	e000ed04 	.word	0xe000ed04

0800a068 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a068:	b480      	push	{r7}
 800a06a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a06c:	4b0b      	ldr	r3, [pc, #44]	; (800a09c <vPortSetupTimerInterrupt+0x34>)
 800a06e:	2200      	movs	r2, #0
 800a070:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a072:	4b0b      	ldr	r3, [pc, #44]	; (800a0a0 <vPortSetupTimerInterrupt+0x38>)
 800a074:	2200      	movs	r2, #0
 800a076:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a078:	4b0a      	ldr	r3, [pc, #40]	; (800a0a4 <vPortSetupTimerInterrupt+0x3c>)
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	4a0a      	ldr	r2, [pc, #40]	; (800a0a8 <vPortSetupTimerInterrupt+0x40>)
 800a07e:	fba2 2303 	umull	r2, r3, r2, r3
 800a082:	099b      	lsrs	r3, r3, #6
 800a084:	4a09      	ldr	r2, [pc, #36]	; (800a0ac <vPortSetupTimerInterrupt+0x44>)
 800a086:	3b01      	subs	r3, #1
 800a088:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a08a:	4b04      	ldr	r3, [pc, #16]	; (800a09c <vPortSetupTimerInterrupt+0x34>)
 800a08c:	2207      	movs	r2, #7
 800a08e:	601a      	str	r2, [r3, #0]
}
 800a090:	bf00      	nop
 800a092:	46bd      	mov	sp, r7
 800a094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a098:	4770      	bx	lr
 800a09a:	bf00      	nop
 800a09c:	e000e010 	.word	0xe000e010
 800a0a0:	e000e018 	.word	0xe000e018
 800a0a4:	20000050 	.word	0x20000050
 800a0a8:	10624dd3 	.word	0x10624dd3
 800a0ac:	e000e014 	.word	0xe000e014

0800a0b0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a0b0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a0c0 <vPortEnableVFP+0x10>
 800a0b4:	6801      	ldr	r1, [r0, #0]
 800a0b6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a0ba:	6001      	str	r1, [r0, #0]
 800a0bc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a0be:	bf00      	nop
 800a0c0:	e000ed88 	.word	0xe000ed88

0800a0c4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a0c4:	b480      	push	{r7}
 800a0c6:	b085      	sub	sp, #20
 800a0c8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a0ca:	f3ef 8305 	mrs	r3, IPSR
 800a0ce:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	2b0f      	cmp	r3, #15
 800a0d4:	d913      	bls.n	800a0fe <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a0d6:	4a16      	ldr	r2, [pc, #88]	; (800a130 <vPortValidateInterruptPriority+0x6c>)
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	4413      	add	r3, r2
 800a0dc:	781b      	ldrb	r3, [r3, #0]
 800a0de:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a0e0:	4b14      	ldr	r3, [pc, #80]	; (800a134 <vPortValidateInterruptPriority+0x70>)
 800a0e2:	781b      	ldrb	r3, [r3, #0]
 800a0e4:	7afa      	ldrb	r2, [r7, #11]
 800a0e6:	429a      	cmp	r2, r3
 800a0e8:	d209      	bcs.n	800a0fe <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800a0ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0ee:	f383 8811 	msr	BASEPRI, r3
 800a0f2:	f3bf 8f6f 	isb	sy
 800a0f6:	f3bf 8f4f 	dsb	sy
 800a0fa:	607b      	str	r3, [r7, #4]
 800a0fc:	e7fe      	b.n	800a0fc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a0fe:	4b0e      	ldr	r3, [pc, #56]	; (800a138 <vPortValidateInterruptPriority+0x74>)
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a106:	4b0d      	ldr	r3, [pc, #52]	; (800a13c <vPortValidateInterruptPriority+0x78>)
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	429a      	cmp	r2, r3
 800a10c:	d909      	bls.n	800a122 <vPortValidateInterruptPriority+0x5e>
 800a10e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a112:	f383 8811 	msr	BASEPRI, r3
 800a116:	f3bf 8f6f 	isb	sy
 800a11a:	f3bf 8f4f 	dsb	sy
 800a11e:	603b      	str	r3, [r7, #0]
 800a120:	e7fe      	b.n	800a120 <vPortValidateInterruptPriority+0x5c>
	}
 800a122:	bf00      	nop
 800a124:	3714      	adds	r7, #20
 800a126:	46bd      	mov	sp, r7
 800a128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12c:	4770      	bx	lr
 800a12e:	bf00      	nop
 800a130:	e000e3f0 	.word	0xe000e3f0
 800a134:	20000370 	.word	0x20000370
 800a138:	e000ed0c 	.word	0xe000ed0c
 800a13c:	20000374 	.word	0x20000374

0800a140 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a140:	b580      	push	{r7, lr}
 800a142:	b08a      	sub	sp, #40	; 0x28
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a148:	2300      	movs	r3, #0
 800a14a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a14c:	f7fe fe7c 	bl	8008e48 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a150:	4b59      	ldr	r3, [pc, #356]	; (800a2b8 <pvPortMalloc+0x178>)
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d101      	bne.n	800a15c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a158:	f000 f910 	bl	800a37c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a15c:	4b57      	ldr	r3, [pc, #348]	; (800a2bc <pvPortMalloc+0x17c>)
 800a15e:	681a      	ldr	r2, [r3, #0]
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	4013      	ands	r3, r2
 800a164:	2b00      	cmp	r3, #0
 800a166:	f040 808c 	bne.w	800a282 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d01c      	beq.n	800a1aa <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800a170:	2208      	movs	r2, #8
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	4413      	add	r3, r2
 800a176:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	f003 0307 	and.w	r3, r3, #7
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d013      	beq.n	800a1aa <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	f023 0307 	bic.w	r3, r3, #7
 800a188:	3308      	adds	r3, #8
 800a18a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	f003 0307 	and.w	r3, r3, #7
 800a192:	2b00      	cmp	r3, #0
 800a194:	d009      	beq.n	800a1aa <pvPortMalloc+0x6a>
 800a196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a19a:	f383 8811 	msr	BASEPRI, r3
 800a19e:	f3bf 8f6f 	isb	sy
 800a1a2:	f3bf 8f4f 	dsb	sy
 800a1a6:	617b      	str	r3, [r7, #20]
 800a1a8:	e7fe      	b.n	800a1a8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d068      	beq.n	800a282 <pvPortMalloc+0x142>
 800a1b0:	4b43      	ldr	r3, [pc, #268]	; (800a2c0 <pvPortMalloc+0x180>)
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	687a      	ldr	r2, [r7, #4]
 800a1b6:	429a      	cmp	r2, r3
 800a1b8:	d863      	bhi.n	800a282 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a1ba:	4b42      	ldr	r3, [pc, #264]	; (800a2c4 <pvPortMalloc+0x184>)
 800a1bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a1be:	4b41      	ldr	r3, [pc, #260]	; (800a2c4 <pvPortMalloc+0x184>)
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a1c4:	e004      	b.n	800a1d0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800a1c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a1ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a1d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1d2:	685b      	ldr	r3, [r3, #4]
 800a1d4:	687a      	ldr	r2, [r7, #4]
 800a1d6:	429a      	cmp	r2, r3
 800a1d8:	d903      	bls.n	800a1e2 <pvPortMalloc+0xa2>
 800a1da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d1f1      	bne.n	800a1c6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a1e2:	4b35      	ldr	r3, [pc, #212]	; (800a2b8 <pvPortMalloc+0x178>)
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1e8:	429a      	cmp	r2, r3
 800a1ea:	d04a      	beq.n	800a282 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a1ec:	6a3b      	ldr	r3, [r7, #32]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	2208      	movs	r2, #8
 800a1f2:	4413      	add	r3, r2
 800a1f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a1f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1f8:	681a      	ldr	r2, [r3, #0]
 800a1fa:	6a3b      	ldr	r3, [r7, #32]
 800a1fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a1fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a200:	685a      	ldr	r2, [r3, #4]
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	1ad2      	subs	r2, r2, r3
 800a206:	2308      	movs	r3, #8
 800a208:	005b      	lsls	r3, r3, #1
 800a20a:	429a      	cmp	r2, r3
 800a20c:	d91e      	bls.n	800a24c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a20e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	4413      	add	r3, r2
 800a214:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a216:	69bb      	ldr	r3, [r7, #24]
 800a218:	f003 0307 	and.w	r3, r3, #7
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d009      	beq.n	800a234 <pvPortMalloc+0xf4>
 800a220:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a224:	f383 8811 	msr	BASEPRI, r3
 800a228:	f3bf 8f6f 	isb	sy
 800a22c:	f3bf 8f4f 	dsb	sy
 800a230:	613b      	str	r3, [r7, #16]
 800a232:	e7fe      	b.n	800a232 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a236:	685a      	ldr	r2, [r3, #4]
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	1ad2      	subs	r2, r2, r3
 800a23c:	69bb      	ldr	r3, [r7, #24]
 800a23e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a242:	687a      	ldr	r2, [r7, #4]
 800a244:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a246:	69b8      	ldr	r0, [r7, #24]
 800a248:	f000 f8fa 	bl	800a440 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a24c:	4b1c      	ldr	r3, [pc, #112]	; (800a2c0 <pvPortMalloc+0x180>)
 800a24e:	681a      	ldr	r2, [r3, #0]
 800a250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a252:	685b      	ldr	r3, [r3, #4]
 800a254:	1ad3      	subs	r3, r2, r3
 800a256:	4a1a      	ldr	r2, [pc, #104]	; (800a2c0 <pvPortMalloc+0x180>)
 800a258:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a25a:	4b19      	ldr	r3, [pc, #100]	; (800a2c0 <pvPortMalloc+0x180>)
 800a25c:	681a      	ldr	r2, [r3, #0]
 800a25e:	4b1a      	ldr	r3, [pc, #104]	; (800a2c8 <pvPortMalloc+0x188>)
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	429a      	cmp	r2, r3
 800a264:	d203      	bcs.n	800a26e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a266:	4b16      	ldr	r3, [pc, #88]	; (800a2c0 <pvPortMalloc+0x180>)
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	4a17      	ldr	r2, [pc, #92]	; (800a2c8 <pvPortMalloc+0x188>)
 800a26c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a26e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a270:	685a      	ldr	r2, [r3, #4]
 800a272:	4b12      	ldr	r3, [pc, #72]	; (800a2bc <pvPortMalloc+0x17c>)
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	431a      	orrs	r2, r3
 800a278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a27a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a27c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a27e:	2200      	movs	r2, #0
 800a280:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a282:	f7fe fdef 	bl	8008e64 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800a286:	69fb      	ldr	r3, [r7, #28]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d101      	bne.n	800a290 <pvPortMalloc+0x150>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800a28c:	f004 feca 	bl	800f024 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a290:	69fb      	ldr	r3, [r7, #28]
 800a292:	f003 0307 	and.w	r3, r3, #7
 800a296:	2b00      	cmp	r3, #0
 800a298:	d009      	beq.n	800a2ae <pvPortMalloc+0x16e>
 800a29a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a29e:	f383 8811 	msr	BASEPRI, r3
 800a2a2:	f3bf 8f6f 	isb	sy
 800a2a6:	f3bf 8f4f 	dsb	sy
 800a2aa:	60fb      	str	r3, [r7, #12]
 800a2ac:	e7fe      	b.n	800a2ac <pvPortMalloc+0x16c>
	return pvReturn;
 800a2ae:	69fb      	ldr	r3, [r7, #28]
}
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	3728      	adds	r7, #40	; 0x28
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	bd80      	pop	{r7, pc}
 800a2b8:	20006528 	.word	0x20006528
 800a2bc:	20006534 	.word	0x20006534
 800a2c0:	2000652c 	.word	0x2000652c
 800a2c4:	20006520 	.word	0x20006520
 800a2c8:	20006530 	.word	0x20006530

0800a2cc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b086      	sub	sp, #24
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d046      	beq.n	800a36c <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a2de:	2308      	movs	r3, #8
 800a2e0:	425b      	negs	r3, r3
 800a2e2:	697a      	ldr	r2, [r7, #20]
 800a2e4:	4413      	add	r3, r2
 800a2e6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a2e8:	697b      	ldr	r3, [r7, #20]
 800a2ea:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a2ec:	693b      	ldr	r3, [r7, #16]
 800a2ee:	685a      	ldr	r2, [r3, #4]
 800a2f0:	4b20      	ldr	r3, [pc, #128]	; (800a374 <vPortFree+0xa8>)
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	4013      	ands	r3, r2
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d109      	bne.n	800a30e <vPortFree+0x42>
 800a2fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2fe:	f383 8811 	msr	BASEPRI, r3
 800a302:	f3bf 8f6f 	isb	sy
 800a306:	f3bf 8f4f 	dsb	sy
 800a30a:	60fb      	str	r3, [r7, #12]
 800a30c:	e7fe      	b.n	800a30c <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a30e:	693b      	ldr	r3, [r7, #16]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d009      	beq.n	800a32a <vPortFree+0x5e>
 800a316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a31a:	f383 8811 	msr	BASEPRI, r3
 800a31e:	f3bf 8f6f 	isb	sy
 800a322:	f3bf 8f4f 	dsb	sy
 800a326:	60bb      	str	r3, [r7, #8]
 800a328:	e7fe      	b.n	800a328 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a32a:	693b      	ldr	r3, [r7, #16]
 800a32c:	685a      	ldr	r2, [r3, #4]
 800a32e:	4b11      	ldr	r3, [pc, #68]	; (800a374 <vPortFree+0xa8>)
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	4013      	ands	r3, r2
 800a334:	2b00      	cmp	r3, #0
 800a336:	d019      	beq.n	800a36c <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a338:	693b      	ldr	r3, [r7, #16]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d115      	bne.n	800a36c <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a340:	693b      	ldr	r3, [r7, #16]
 800a342:	685a      	ldr	r2, [r3, #4]
 800a344:	4b0b      	ldr	r3, [pc, #44]	; (800a374 <vPortFree+0xa8>)
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	43db      	mvns	r3, r3
 800a34a:	401a      	ands	r2, r3
 800a34c:	693b      	ldr	r3, [r7, #16]
 800a34e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a350:	f7fe fd7a 	bl	8008e48 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a354:	693b      	ldr	r3, [r7, #16]
 800a356:	685a      	ldr	r2, [r3, #4]
 800a358:	4b07      	ldr	r3, [pc, #28]	; (800a378 <vPortFree+0xac>)
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	4413      	add	r3, r2
 800a35e:	4a06      	ldr	r2, [pc, #24]	; (800a378 <vPortFree+0xac>)
 800a360:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a362:	6938      	ldr	r0, [r7, #16]
 800a364:	f000 f86c 	bl	800a440 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a368:	f7fe fd7c 	bl	8008e64 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a36c:	bf00      	nop
 800a36e:	3718      	adds	r7, #24
 800a370:	46bd      	mov	sp, r7
 800a372:	bd80      	pop	{r7, pc}
 800a374:	20006534 	.word	0x20006534
 800a378:	2000652c 	.word	0x2000652c

0800a37c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a37c:	b480      	push	{r7}
 800a37e:	b085      	sub	sp, #20
 800a380:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a382:	f246 13a8 	movw	r3, #25000	; 0x61a8
 800a386:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a388:	4b27      	ldr	r3, [pc, #156]	; (800a428 <prvHeapInit+0xac>)
 800a38a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	f003 0307 	and.w	r3, r3, #7
 800a392:	2b00      	cmp	r3, #0
 800a394:	d00c      	beq.n	800a3b0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	3307      	adds	r3, #7
 800a39a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	f023 0307 	bic.w	r3, r3, #7
 800a3a2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a3a4:	68ba      	ldr	r2, [r7, #8]
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	1ad3      	subs	r3, r2, r3
 800a3aa:	4a1f      	ldr	r2, [pc, #124]	; (800a428 <prvHeapInit+0xac>)
 800a3ac:	4413      	add	r3, r2
 800a3ae:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a3b4:	4a1d      	ldr	r2, [pc, #116]	; (800a42c <prvHeapInit+0xb0>)
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a3ba:	4b1c      	ldr	r3, [pc, #112]	; (800a42c <prvHeapInit+0xb0>)
 800a3bc:	2200      	movs	r2, #0
 800a3be:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	68ba      	ldr	r2, [r7, #8]
 800a3c4:	4413      	add	r3, r2
 800a3c6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a3c8:	2208      	movs	r2, #8
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	1a9b      	subs	r3, r3, r2
 800a3ce:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	f023 0307 	bic.w	r3, r3, #7
 800a3d6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	4a15      	ldr	r2, [pc, #84]	; (800a430 <prvHeapInit+0xb4>)
 800a3dc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a3de:	4b14      	ldr	r3, [pc, #80]	; (800a430 <prvHeapInit+0xb4>)
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a3e6:	4b12      	ldr	r3, [pc, #72]	; (800a430 <prvHeapInit+0xb4>)
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a3f2:	683b      	ldr	r3, [r7, #0]
 800a3f4:	68fa      	ldr	r2, [r7, #12]
 800a3f6:	1ad2      	subs	r2, r2, r3
 800a3f8:	683b      	ldr	r3, [r7, #0]
 800a3fa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a3fc:	4b0c      	ldr	r3, [pc, #48]	; (800a430 <prvHeapInit+0xb4>)
 800a3fe:	681a      	ldr	r2, [r3, #0]
 800a400:	683b      	ldr	r3, [r7, #0]
 800a402:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a404:	683b      	ldr	r3, [r7, #0]
 800a406:	685b      	ldr	r3, [r3, #4]
 800a408:	4a0a      	ldr	r2, [pc, #40]	; (800a434 <prvHeapInit+0xb8>)
 800a40a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a40c:	683b      	ldr	r3, [r7, #0]
 800a40e:	685b      	ldr	r3, [r3, #4]
 800a410:	4a09      	ldr	r2, [pc, #36]	; (800a438 <prvHeapInit+0xbc>)
 800a412:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a414:	4b09      	ldr	r3, [pc, #36]	; (800a43c <prvHeapInit+0xc0>)
 800a416:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a41a:	601a      	str	r2, [r3, #0]
}
 800a41c:	bf00      	nop
 800a41e:	3714      	adds	r7, #20
 800a420:	46bd      	mov	sp, r7
 800a422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a426:	4770      	bx	lr
 800a428:	20000378 	.word	0x20000378
 800a42c:	20006520 	.word	0x20006520
 800a430:	20006528 	.word	0x20006528
 800a434:	20006530 	.word	0x20006530
 800a438:	2000652c 	.word	0x2000652c
 800a43c:	20006534 	.word	0x20006534

0800a440 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a440:	b480      	push	{r7}
 800a442:	b085      	sub	sp, #20
 800a444:	af00      	add	r7, sp, #0
 800a446:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a448:	4b28      	ldr	r3, [pc, #160]	; (800a4ec <prvInsertBlockIntoFreeList+0xac>)
 800a44a:	60fb      	str	r3, [r7, #12]
 800a44c:	e002      	b.n	800a454 <prvInsertBlockIntoFreeList+0x14>
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	60fb      	str	r3, [r7, #12]
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	687a      	ldr	r2, [r7, #4]
 800a45a:	429a      	cmp	r2, r3
 800a45c:	d8f7      	bhi.n	800a44e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	685b      	ldr	r3, [r3, #4]
 800a466:	68ba      	ldr	r2, [r7, #8]
 800a468:	4413      	add	r3, r2
 800a46a:	687a      	ldr	r2, [r7, #4]
 800a46c:	429a      	cmp	r2, r3
 800a46e:	d108      	bne.n	800a482 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	685a      	ldr	r2, [r3, #4]
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	685b      	ldr	r3, [r3, #4]
 800a478:	441a      	add	r2, r3
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	685b      	ldr	r3, [r3, #4]
 800a48a:	68ba      	ldr	r2, [r7, #8]
 800a48c:	441a      	add	r2, r3
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	429a      	cmp	r2, r3
 800a494:	d118      	bne.n	800a4c8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	681a      	ldr	r2, [r3, #0]
 800a49a:	4b15      	ldr	r3, [pc, #84]	; (800a4f0 <prvInsertBlockIntoFreeList+0xb0>)
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	429a      	cmp	r2, r3
 800a4a0:	d00d      	beq.n	800a4be <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	685a      	ldr	r2, [r3, #4]
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	685b      	ldr	r3, [r3, #4]
 800a4ac:	441a      	add	r2, r3
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	681a      	ldr	r2, [r3, #0]
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	601a      	str	r2, [r3, #0]
 800a4bc:	e008      	b.n	800a4d0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a4be:	4b0c      	ldr	r3, [pc, #48]	; (800a4f0 <prvInsertBlockIntoFreeList+0xb0>)
 800a4c0:	681a      	ldr	r2, [r3, #0]
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	601a      	str	r2, [r3, #0]
 800a4c6:	e003      	b.n	800a4d0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	681a      	ldr	r2, [r3, #0]
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a4d0:	68fa      	ldr	r2, [r7, #12]
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	429a      	cmp	r2, r3
 800a4d6:	d002      	beq.n	800a4de <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	687a      	ldr	r2, [r7, #4]
 800a4dc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a4de:	bf00      	nop
 800a4e0:	3714      	adds	r7, #20
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e8:	4770      	bx	lr
 800a4ea:	bf00      	nop
 800a4ec:	20006520 	.word	0x20006520
 800a4f0:	20006528 	.word	0x20006528

0800a4f4 <FINGER_USART_IrqHandler>:
char FINGER_UART_RX_Buffer[FINGER_UART_RX_BUFFER_SIZE];
size_t finger_write, finger_len, finger_tocopy;
uint8_t *finger_ptr;

void FINGER_USART_IrqHandler(UART_HandleTypeDef *huart, DMA_HandleTypeDef *hdma)
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b084      	sub	sp, #16
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	6078      	str	r0, [r7, #4]
 800a4fc:	6039      	str	r1, [r7, #0]
	if (huart->Instance->SR & UART_FLAG_IDLE) /* if Idle flag is set */
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	f003 0310 	and.w	r3, r3, #16
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d016      	beq.n	800a53a <FINGER_USART_IrqHandler+0x46>
	{
		__HAL_UART_CLEAR_IDLEFLAG(huart);	 /* Clear idle flag */
 800a50c:	2300      	movs	r3, #0
 800a50e:	60fb      	str	r3, [r7, #12]
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	60fb      	str	r3, [r7, #12]
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	685b      	ldr	r3, [r3, #4]
 800a51e:	60fb      	str	r3, [r7, #12]
 800a520:	68fb      	ldr	r3, [r7, #12]
		__HAL_DMA_DISABLE(hdma);			 /* Disabling DMA will force transfer complete interrupt if enabled */
 800a522:	683b      	ldr	r3, [r7, #0]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	681a      	ldr	r2, [r3, #0]
 800a528:	683b      	ldr	r3, [r7, #0]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	f022 0201 	bic.w	r2, r2, #1
 800a530:	601a      	str	r2, [r3, #0]
		FINGER_DMA_IrqHandler(hdma, huart);
 800a532:	6879      	ldr	r1, [r7, #4]
 800a534:	6838      	ldr	r0, [r7, #0]
 800a536:	f000 f805 	bl	800a544 <FINGER_DMA_IrqHandler>
	}
}
 800a53a:	bf00      	nop
 800a53c:	3710      	adds	r7, #16
 800a53e:	46bd      	mov	sp, r7
 800a540:	bd80      	pop	{r7, pc}
	...

0800a544 <FINGER_DMA_IrqHandler>:

void FINGER_DMA_IrqHandler(DMA_HandleTypeDef *hdma, UART_HandleTypeDef *huart)
{
 800a544:	b580      	push	{r7, lr}
 800a546:	b082      	sub	sp, #8
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]
 800a54c:	6039      	str	r1, [r7, #0]
	if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET) // if the source is TC
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	f003 0310 	and.w	r3, r3, #16
 800a558:	2b00      	cmp	r3, #0
 800a55a:	f000 8211 	beq.w	800a980 <FINGER_DMA_IrqHandler+0x43c>
	{
		/* Clear the transfer complete flag */
		__HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	461a      	mov	r2, r3
 800a564:	4b99      	ldr	r3, [pc, #612]	; (800a7cc <FINGER_DMA_IrqHandler+0x288>)
 800a566:	429a      	cmp	r2, r3
 800a568:	d960      	bls.n	800a62c <FINGER_DMA_IrqHandler+0xe8>
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	4a98      	ldr	r2, [pc, #608]	; (800a7d0 <FINGER_DMA_IrqHandler+0x28c>)
 800a570:	4293      	cmp	r3, r2
 800a572:	d057      	beq.n	800a624 <FINGER_DMA_IrqHandler+0xe0>
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	4a96      	ldr	r2, [pc, #600]	; (800a7d4 <FINGER_DMA_IrqHandler+0x290>)
 800a57a:	4293      	cmp	r3, r2
 800a57c:	d050      	beq.n	800a620 <FINGER_DMA_IrqHandler+0xdc>
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	4a95      	ldr	r2, [pc, #596]	; (800a7d8 <FINGER_DMA_IrqHandler+0x294>)
 800a584:	4293      	cmp	r3, r2
 800a586:	d049      	beq.n	800a61c <FINGER_DMA_IrqHandler+0xd8>
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	4a93      	ldr	r2, [pc, #588]	; (800a7dc <FINGER_DMA_IrqHandler+0x298>)
 800a58e:	4293      	cmp	r3, r2
 800a590:	d042      	beq.n	800a618 <FINGER_DMA_IrqHandler+0xd4>
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	4a92      	ldr	r2, [pc, #584]	; (800a7e0 <FINGER_DMA_IrqHandler+0x29c>)
 800a598:	4293      	cmp	r3, r2
 800a59a:	d03a      	beq.n	800a612 <FINGER_DMA_IrqHandler+0xce>
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	4a90      	ldr	r2, [pc, #576]	; (800a7e4 <FINGER_DMA_IrqHandler+0x2a0>)
 800a5a2:	4293      	cmp	r3, r2
 800a5a4:	d032      	beq.n	800a60c <FINGER_DMA_IrqHandler+0xc8>
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	4a8f      	ldr	r2, [pc, #572]	; (800a7e8 <FINGER_DMA_IrqHandler+0x2a4>)
 800a5ac:	4293      	cmp	r3, r2
 800a5ae:	d02a      	beq.n	800a606 <FINGER_DMA_IrqHandler+0xc2>
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	4a8d      	ldr	r2, [pc, #564]	; (800a7ec <FINGER_DMA_IrqHandler+0x2a8>)
 800a5b6:	4293      	cmp	r3, r2
 800a5b8:	d022      	beq.n	800a600 <FINGER_DMA_IrqHandler+0xbc>
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	4a8c      	ldr	r2, [pc, #560]	; (800a7f0 <FINGER_DMA_IrqHandler+0x2ac>)
 800a5c0:	4293      	cmp	r3, r2
 800a5c2:	d01a      	beq.n	800a5fa <FINGER_DMA_IrqHandler+0xb6>
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	4a8a      	ldr	r2, [pc, #552]	; (800a7f4 <FINGER_DMA_IrqHandler+0x2b0>)
 800a5ca:	4293      	cmp	r3, r2
 800a5cc:	d012      	beq.n	800a5f4 <FINGER_DMA_IrqHandler+0xb0>
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	4a89      	ldr	r2, [pc, #548]	; (800a7f8 <FINGER_DMA_IrqHandler+0x2b4>)
 800a5d4:	4293      	cmp	r3, r2
 800a5d6:	d00a      	beq.n	800a5ee <FINGER_DMA_IrqHandler+0xaa>
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	4a87      	ldr	r2, [pc, #540]	; (800a7fc <FINGER_DMA_IrqHandler+0x2b8>)
 800a5de:	4293      	cmp	r3, r2
 800a5e0:	d102      	bne.n	800a5e8 <FINGER_DMA_IrqHandler+0xa4>
 800a5e2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a5e6:	e01e      	b.n	800a626 <FINGER_DMA_IrqHandler+0xe2>
 800a5e8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a5ec:	e01b      	b.n	800a626 <FINGER_DMA_IrqHandler+0xe2>
 800a5ee:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a5f2:	e018      	b.n	800a626 <FINGER_DMA_IrqHandler+0xe2>
 800a5f4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a5f8:	e015      	b.n	800a626 <FINGER_DMA_IrqHandler+0xe2>
 800a5fa:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a5fe:	e012      	b.n	800a626 <FINGER_DMA_IrqHandler+0xe2>
 800a600:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a604:	e00f      	b.n	800a626 <FINGER_DMA_IrqHandler+0xe2>
 800a606:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a60a:	e00c      	b.n	800a626 <FINGER_DMA_IrqHandler+0xe2>
 800a60c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a610:	e009      	b.n	800a626 <FINGER_DMA_IrqHandler+0xe2>
 800a612:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a616:	e006      	b.n	800a626 <FINGER_DMA_IrqHandler+0xe2>
 800a618:	2320      	movs	r3, #32
 800a61a:	e004      	b.n	800a626 <FINGER_DMA_IrqHandler+0xe2>
 800a61c:	2320      	movs	r3, #32
 800a61e:	e002      	b.n	800a626 <FINGER_DMA_IrqHandler+0xe2>
 800a620:	2320      	movs	r3, #32
 800a622:	e000      	b.n	800a626 <FINGER_DMA_IrqHandler+0xe2>
 800a624:	2320      	movs	r3, #32
 800a626:	4a76      	ldr	r2, [pc, #472]	; (800a800 <FINGER_DMA_IrqHandler+0x2bc>)
 800a628:	60d3      	str	r3, [r2, #12]
 800a62a:	e151      	b.n	800a8d0 <FINGER_DMA_IrqHandler+0x38c>
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	461a      	mov	r2, r3
 800a632:	4b74      	ldr	r3, [pc, #464]	; (800a804 <FINGER_DMA_IrqHandler+0x2c0>)
 800a634:	429a      	cmp	r2, r3
 800a636:	d960      	bls.n	800a6fa <FINGER_DMA_IrqHandler+0x1b6>
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	4a64      	ldr	r2, [pc, #400]	; (800a7d0 <FINGER_DMA_IrqHandler+0x28c>)
 800a63e:	4293      	cmp	r3, r2
 800a640:	d057      	beq.n	800a6f2 <FINGER_DMA_IrqHandler+0x1ae>
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	4a63      	ldr	r2, [pc, #396]	; (800a7d4 <FINGER_DMA_IrqHandler+0x290>)
 800a648:	4293      	cmp	r3, r2
 800a64a:	d050      	beq.n	800a6ee <FINGER_DMA_IrqHandler+0x1aa>
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	4a61      	ldr	r2, [pc, #388]	; (800a7d8 <FINGER_DMA_IrqHandler+0x294>)
 800a652:	4293      	cmp	r3, r2
 800a654:	d049      	beq.n	800a6ea <FINGER_DMA_IrqHandler+0x1a6>
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	4a60      	ldr	r2, [pc, #384]	; (800a7dc <FINGER_DMA_IrqHandler+0x298>)
 800a65c:	4293      	cmp	r3, r2
 800a65e:	d042      	beq.n	800a6e6 <FINGER_DMA_IrqHandler+0x1a2>
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	4a5e      	ldr	r2, [pc, #376]	; (800a7e0 <FINGER_DMA_IrqHandler+0x29c>)
 800a666:	4293      	cmp	r3, r2
 800a668:	d03a      	beq.n	800a6e0 <FINGER_DMA_IrqHandler+0x19c>
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	4a5d      	ldr	r2, [pc, #372]	; (800a7e4 <FINGER_DMA_IrqHandler+0x2a0>)
 800a670:	4293      	cmp	r3, r2
 800a672:	d032      	beq.n	800a6da <FINGER_DMA_IrqHandler+0x196>
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	4a5b      	ldr	r2, [pc, #364]	; (800a7e8 <FINGER_DMA_IrqHandler+0x2a4>)
 800a67a:	4293      	cmp	r3, r2
 800a67c:	d02a      	beq.n	800a6d4 <FINGER_DMA_IrqHandler+0x190>
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	4a5a      	ldr	r2, [pc, #360]	; (800a7ec <FINGER_DMA_IrqHandler+0x2a8>)
 800a684:	4293      	cmp	r3, r2
 800a686:	d022      	beq.n	800a6ce <FINGER_DMA_IrqHandler+0x18a>
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	4a58      	ldr	r2, [pc, #352]	; (800a7f0 <FINGER_DMA_IrqHandler+0x2ac>)
 800a68e:	4293      	cmp	r3, r2
 800a690:	d01a      	beq.n	800a6c8 <FINGER_DMA_IrqHandler+0x184>
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	4a57      	ldr	r2, [pc, #348]	; (800a7f4 <FINGER_DMA_IrqHandler+0x2b0>)
 800a698:	4293      	cmp	r3, r2
 800a69a:	d012      	beq.n	800a6c2 <FINGER_DMA_IrqHandler+0x17e>
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	4a55      	ldr	r2, [pc, #340]	; (800a7f8 <FINGER_DMA_IrqHandler+0x2b4>)
 800a6a2:	4293      	cmp	r3, r2
 800a6a4:	d00a      	beq.n	800a6bc <FINGER_DMA_IrqHandler+0x178>
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	4a54      	ldr	r2, [pc, #336]	; (800a7fc <FINGER_DMA_IrqHandler+0x2b8>)
 800a6ac:	4293      	cmp	r3, r2
 800a6ae:	d102      	bne.n	800a6b6 <FINGER_DMA_IrqHandler+0x172>
 800a6b0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a6b4:	e01e      	b.n	800a6f4 <FINGER_DMA_IrqHandler+0x1b0>
 800a6b6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a6ba:	e01b      	b.n	800a6f4 <FINGER_DMA_IrqHandler+0x1b0>
 800a6bc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a6c0:	e018      	b.n	800a6f4 <FINGER_DMA_IrqHandler+0x1b0>
 800a6c2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a6c6:	e015      	b.n	800a6f4 <FINGER_DMA_IrqHandler+0x1b0>
 800a6c8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a6cc:	e012      	b.n	800a6f4 <FINGER_DMA_IrqHandler+0x1b0>
 800a6ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a6d2:	e00f      	b.n	800a6f4 <FINGER_DMA_IrqHandler+0x1b0>
 800a6d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a6d8:	e00c      	b.n	800a6f4 <FINGER_DMA_IrqHandler+0x1b0>
 800a6da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a6de:	e009      	b.n	800a6f4 <FINGER_DMA_IrqHandler+0x1b0>
 800a6e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a6e4:	e006      	b.n	800a6f4 <FINGER_DMA_IrqHandler+0x1b0>
 800a6e6:	2320      	movs	r3, #32
 800a6e8:	e004      	b.n	800a6f4 <FINGER_DMA_IrqHandler+0x1b0>
 800a6ea:	2320      	movs	r3, #32
 800a6ec:	e002      	b.n	800a6f4 <FINGER_DMA_IrqHandler+0x1b0>
 800a6ee:	2320      	movs	r3, #32
 800a6f0:	e000      	b.n	800a6f4 <FINGER_DMA_IrqHandler+0x1b0>
 800a6f2:	2320      	movs	r3, #32
 800a6f4:	4a42      	ldr	r2, [pc, #264]	; (800a800 <FINGER_DMA_IrqHandler+0x2bc>)
 800a6f6:	6093      	str	r3, [r2, #8]
 800a6f8:	e0ea      	b.n	800a8d0 <FINGER_DMA_IrqHandler+0x38c>
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	461a      	mov	r2, r3
 800a700:	4b41      	ldr	r3, [pc, #260]	; (800a808 <FINGER_DMA_IrqHandler+0x2c4>)
 800a702:	429a      	cmp	r2, r3
 800a704:	f240 8084 	bls.w	800a810 <FINGER_DMA_IrqHandler+0x2cc>
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	4a30      	ldr	r2, [pc, #192]	; (800a7d0 <FINGER_DMA_IrqHandler+0x28c>)
 800a70e:	4293      	cmp	r3, r2
 800a710:	d057      	beq.n	800a7c2 <FINGER_DMA_IrqHandler+0x27e>
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	4a2f      	ldr	r2, [pc, #188]	; (800a7d4 <FINGER_DMA_IrqHandler+0x290>)
 800a718:	4293      	cmp	r3, r2
 800a71a:	d050      	beq.n	800a7be <FINGER_DMA_IrqHandler+0x27a>
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	4a2d      	ldr	r2, [pc, #180]	; (800a7d8 <FINGER_DMA_IrqHandler+0x294>)
 800a722:	4293      	cmp	r3, r2
 800a724:	d049      	beq.n	800a7ba <FINGER_DMA_IrqHandler+0x276>
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	4a2c      	ldr	r2, [pc, #176]	; (800a7dc <FINGER_DMA_IrqHandler+0x298>)
 800a72c:	4293      	cmp	r3, r2
 800a72e:	d042      	beq.n	800a7b6 <FINGER_DMA_IrqHandler+0x272>
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	4a2a      	ldr	r2, [pc, #168]	; (800a7e0 <FINGER_DMA_IrqHandler+0x29c>)
 800a736:	4293      	cmp	r3, r2
 800a738:	d03a      	beq.n	800a7b0 <FINGER_DMA_IrqHandler+0x26c>
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	4a29      	ldr	r2, [pc, #164]	; (800a7e4 <FINGER_DMA_IrqHandler+0x2a0>)
 800a740:	4293      	cmp	r3, r2
 800a742:	d032      	beq.n	800a7aa <FINGER_DMA_IrqHandler+0x266>
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	4a27      	ldr	r2, [pc, #156]	; (800a7e8 <FINGER_DMA_IrqHandler+0x2a4>)
 800a74a:	4293      	cmp	r3, r2
 800a74c:	d02a      	beq.n	800a7a4 <FINGER_DMA_IrqHandler+0x260>
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	4a26      	ldr	r2, [pc, #152]	; (800a7ec <FINGER_DMA_IrqHandler+0x2a8>)
 800a754:	4293      	cmp	r3, r2
 800a756:	d022      	beq.n	800a79e <FINGER_DMA_IrqHandler+0x25a>
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	4a24      	ldr	r2, [pc, #144]	; (800a7f0 <FINGER_DMA_IrqHandler+0x2ac>)
 800a75e:	4293      	cmp	r3, r2
 800a760:	d01a      	beq.n	800a798 <FINGER_DMA_IrqHandler+0x254>
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	4a23      	ldr	r2, [pc, #140]	; (800a7f4 <FINGER_DMA_IrqHandler+0x2b0>)
 800a768:	4293      	cmp	r3, r2
 800a76a:	d012      	beq.n	800a792 <FINGER_DMA_IrqHandler+0x24e>
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	4a21      	ldr	r2, [pc, #132]	; (800a7f8 <FINGER_DMA_IrqHandler+0x2b4>)
 800a772:	4293      	cmp	r3, r2
 800a774:	d00a      	beq.n	800a78c <FINGER_DMA_IrqHandler+0x248>
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	4a20      	ldr	r2, [pc, #128]	; (800a7fc <FINGER_DMA_IrqHandler+0x2b8>)
 800a77c:	4293      	cmp	r3, r2
 800a77e:	d102      	bne.n	800a786 <FINGER_DMA_IrqHandler+0x242>
 800a780:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a784:	e01e      	b.n	800a7c4 <FINGER_DMA_IrqHandler+0x280>
 800a786:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a78a:	e01b      	b.n	800a7c4 <FINGER_DMA_IrqHandler+0x280>
 800a78c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a790:	e018      	b.n	800a7c4 <FINGER_DMA_IrqHandler+0x280>
 800a792:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a796:	e015      	b.n	800a7c4 <FINGER_DMA_IrqHandler+0x280>
 800a798:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a79c:	e012      	b.n	800a7c4 <FINGER_DMA_IrqHandler+0x280>
 800a79e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a7a2:	e00f      	b.n	800a7c4 <FINGER_DMA_IrqHandler+0x280>
 800a7a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a7a8:	e00c      	b.n	800a7c4 <FINGER_DMA_IrqHandler+0x280>
 800a7aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a7ae:	e009      	b.n	800a7c4 <FINGER_DMA_IrqHandler+0x280>
 800a7b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a7b4:	e006      	b.n	800a7c4 <FINGER_DMA_IrqHandler+0x280>
 800a7b6:	2320      	movs	r3, #32
 800a7b8:	e004      	b.n	800a7c4 <FINGER_DMA_IrqHandler+0x280>
 800a7ba:	2320      	movs	r3, #32
 800a7bc:	e002      	b.n	800a7c4 <FINGER_DMA_IrqHandler+0x280>
 800a7be:	2320      	movs	r3, #32
 800a7c0:	e000      	b.n	800a7c4 <FINGER_DMA_IrqHandler+0x280>
 800a7c2:	2320      	movs	r3, #32
 800a7c4:	4a11      	ldr	r2, [pc, #68]	; (800a80c <FINGER_DMA_IrqHandler+0x2c8>)
 800a7c6:	60d3      	str	r3, [r2, #12]
 800a7c8:	e082      	b.n	800a8d0 <FINGER_DMA_IrqHandler+0x38c>
 800a7ca:	bf00      	nop
 800a7cc:	40026458 	.word	0x40026458
 800a7d0:	40026010 	.word	0x40026010
 800a7d4:	40026410 	.word	0x40026410
 800a7d8:	40026070 	.word	0x40026070
 800a7dc:	40026470 	.word	0x40026470
 800a7e0:	40026028 	.word	0x40026028
 800a7e4:	40026428 	.word	0x40026428
 800a7e8:	40026088 	.word	0x40026088
 800a7ec:	40026488 	.word	0x40026488
 800a7f0:	40026040 	.word	0x40026040
 800a7f4:	40026440 	.word	0x40026440
 800a7f8:	400260a0 	.word	0x400260a0
 800a7fc:	400264a0 	.word	0x400264a0
 800a800:	40026400 	.word	0x40026400
 800a804:	400260b8 	.word	0x400260b8
 800a808:	40026058 	.word	0x40026058
 800a80c:	40026000 	.word	0x40026000
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	4a5c      	ldr	r2, [pc, #368]	; (800a988 <FINGER_DMA_IrqHandler+0x444>)
 800a816:	4293      	cmp	r3, r2
 800a818:	d057      	beq.n	800a8ca <FINGER_DMA_IrqHandler+0x386>
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	4a5b      	ldr	r2, [pc, #364]	; (800a98c <FINGER_DMA_IrqHandler+0x448>)
 800a820:	4293      	cmp	r3, r2
 800a822:	d050      	beq.n	800a8c6 <FINGER_DMA_IrqHandler+0x382>
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	4a59      	ldr	r2, [pc, #356]	; (800a990 <FINGER_DMA_IrqHandler+0x44c>)
 800a82a:	4293      	cmp	r3, r2
 800a82c:	d049      	beq.n	800a8c2 <FINGER_DMA_IrqHandler+0x37e>
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	4a58      	ldr	r2, [pc, #352]	; (800a994 <FINGER_DMA_IrqHandler+0x450>)
 800a834:	4293      	cmp	r3, r2
 800a836:	d042      	beq.n	800a8be <FINGER_DMA_IrqHandler+0x37a>
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	4a56      	ldr	r2, [pc, #344]	; (800a998 <FINGER_DMA_IrqHandler+0x454>)
 800a83e:	4293      	cmp	r3, r2
 800a840:	d03a      	beq.n	800a8b8 <FINGER_DMA_IrqHandler+0x374>
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	4a55      	ldr	r2, [pc, #340]	; (800a99c <FINGER_DMA_IrqHandler+0x458>)
 800a848:	4293      	cmp	r3, r2
 800a84a:	d032      	beq.n	800a8b2 <FINGER_DMA_IrqHandler+0x36e>
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	4a53      	ldr	r2, [pc, #332]	; (800a9a0 <FINGER_DMA_IrqHandler+0x45c>)
 800a852:	4293      	cmp	r3, r2
 800a854:	d02a      	beq.n	800a8ac <FINGER_DMA_IrqHandler+0x368>
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	4a52      	ldr	r2, [pc, #328]	; (800a9a4 <FINGER_DMA_IrqHandler+0x460>)
 800a85c:	4293      	cmp	r3, r2
 800a85e:	d022      	beq.n	800a8a6 <FINGER_DMA_IrqHandler+0x362>
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	4a50      	ldr	r2, [pc, #320]	; (800a9a8 <FINGER_DMA_IrqHandler+0x464>)
 800a866:	4293      	cmp	r3, r2
 800a868:	d01a      	beq.n	800a8a0 <FINGER_DMA_IrqHandler+0x35c>
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	4a4f      	ldr	r2, [pc, #316]	; (800a9ac <FINGER_DMA_IrqHandler+0x468>)
 800a870:	4293      	cmp	r3, r2
 800a872:	d012      	beq.n	800a89a <FINGER_DMA_IrqHandler+0x356>
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	4a4d      	ldr	r2, [pc, #308]	; (800a9b0 <FINGER_DMA_IrqHandler+0x46c>)
 800a87a:	4293      	cmp	r3, r2
 800a87c:	d00a      	beq.n	800a894 <FINGER_DMA_IrqHandler+0x350>
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	4a4c      	ldr	r2, [pc, #304]	; (800a9b4 <FINGER_DMA_IrqHandler+0x470>)
 800a884:	4293      	cmp	r3, r2
 800a886:	d102      	bne.n	800a88e <FINGER_DMA_IrqHandler+0x34a>
 800a888:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a88c:	e01e      	b.n	800a8cc <FINGER_DMA_IrqHandler+0x388>
 800a88e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a892:	e01b      	b.n	800a8cc <FINGER_DMA_IrqHandler+0x388>
 800a894:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a898:	e018      	b.n	800a8cc <FINGER_DMA_IrqHandler+0x388>
 800a89a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a89e:	e015      	b.n	800a8cc <FINGER_DMA_IrqHandler+0x388>
 800a8a0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a8a4:	e012      	b.n	800a8cc <FINGER_DMA_IrqHandler+0x388>
 800a8a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a8aa:	e00f      	b.n	800a8cc <FINGER_DMA_IrqHandler+0x388>
 800a8ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a8b0:	e00c      	b.n	800a8cc <FINGER_DMA_IrqHandler+0x388>
 800a8b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a8b6:	e009      	b.n	800a8cc <FINGER_DMA_IrqHandler+0x388>
 800a8b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a8bc:	e006      	b.n	800a8cc <FINGER_DMA_IrqHandler+0x388>
 800a8be:	2320      	movs	r3, #32
 800a8c0:	e004      	b.n	800a8cc <FINGER_DMA_IrqHandler+0x388>
 800a8c2:	2320      	movs	r3, #32
 800a8c4:	e002      	b.n	800a8cc <FINGER_DMA_IrqHandler+0x388>
 800a8c6:	2320      	movs	r3, #32
 800a8c8:	e000      	b.n	800a8cc <FINGER_DMA_IrqHandler+0x388>
 800a8ca:	2320      	movs	r3, #32
 800a8cc:	4a3a      	ldr	r2, [pc, #232]	; (800a9b8 <FINGER_DMA_IrqHandler+0x474>)
 800a8ce:	6093      	str	r3, [r2, #8]

		/* Get the finger_length of the data */
		finger_len = FINGER_DMA_RX_BUFFER_SIZE - hdma->Instance->NDTR;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	685b      	ldr	r3, [r3, #4]
 800a8d6:	f1c3 0332 	rsb	r3, r3, #50	; 0x32
 800a8da:	4a38      	ldr	r2, [pc, #224]	; (800a9bc <FINGER_DMA_IrqHandler+0x478>)
 800a8dc:	6013      	str	r3, [r2, #0]
		/* Only process if DMA is not empty */
		if(finger_len > 0) {
 800a8de:	4b37      	ldr	r3, [pc, #220]	; (800a9bc <FINGER_DMA_IrqHandler+0x478>)
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d044      	beq.n	800a970 <FINGER_DMA_IrqHandler+0x42c>
			/* Reset the buffer */
			FINGER_Reset_Buffer();
 800a8e6:	f000 f89d 	bl	800aa24 <FINGER_Reset_Buffer>
			/* Get number of bytes we can copy to the end of buffer */
			finger_tocopy = FINGER_UART_RX_BUFFER_SIZE - finger_write;
 800a8ea:	4b35      	ldr	r3, [pc, #212]	; (800a9c0 <FINGER_DMA_IrqHandler+0x47c>)
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	f1c3 0332 	rsb	r3, r3, #50	; 0x32
 800a8f2:	4a34      	ldr	r2, [pc, #208]	; (800a9c4 <FINGER_DMA_IrqHandler+0x480>)
 800a8f4:	6013      	str	r3, [r2, #0]
			/* finger_write received data for UART main buffer for manipulation later */
			finger_ptr = (uint8_t *) FINGER_DMA_RX_Buffer;
 800a8f6:	4b34      	ldr	r3, [pc, #208]	; (800a9c8 <FINGER_DMA_IrqHandler+0x484>)
 800a8f8:	4a34      	ldr	r2, [pc, #208]	; (800a9cc <FINGER_DMA_IrqHandler+0x488>)
 800a8fa:	601a      	str	r2, [r3, #0]
			/* Check how many bytes to copy */
			if (finger_tocopy > finger_len)
 800a8fc:	4b31      	ldr	r3, [pc, #196]	; (800a9c4 <FINGER_DMA_IrqHandler+0x480>)
 800a8fe:	681a      	ldr	r2, [r3, #0]
 800a900:	4b2e      	ldr	r3, [pc, #184]	; (800a9bc <FINGER_DMA_IrqHandler+0x478>)
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	429a      	cmp	r2, r3
 800a906:	d903      	bls.n	800a910 <FINGER_DMA_IrqHandler+0x3cc>
			{
				finger_tocopy = finger_len;
 800a908:	4b2c      	ldr	r3, [pc, #176]	; (800a9bc <FINGER_DMA_IrqHandler+0x478>)
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	4a2d      	ldr	r2, [pc, #180]	; (800a9c4 <FINGER_DMA_IrqHandler+0x480>)
 800a90e:	6013      	str	r3, [r2, #0]
			}
			/* Copy first part */
			memcpy(&FINGER_UART_RX_Buffer[finger_write], finger_ptr, finger_tocopy);
 800a910:	4b2b      	ldr	r3, [pc, #172]	; (800a9c0 <FINGER_DMA_IrqHandler+0x47c>)
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	4a2e      	ldr	r2, [pc, #184]	; (800a9d0 <FINGER_DMA_IrqHandler+0x48c>)
 800a916:	1898      	adds	r0, r3, r2
 800a918:	4b2b      	ldr	r3, [pc, #172]	; (800a9c8 <FINGER_DMA_IrqHandler+0x484>)
 800a91a:	6819      	ldr	r1, [r3, #0]
 800a91c:	4b29      	ldr	r3, [pc, #164]	; (800a9c4 <FINGER_DMA_IrqHandler+0x480>)
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	461a      	mov	r2, r3
 800a922:	f006 fcf1 	bl	8011308 <memcpy>
			/* Correct values for remaining data */
			finger_write += finger_tocopy;
 800a926:	4b26      	ldr	r3, [pc, #152]	; (800a9c0 <FINGER_DMA_IrqHandler+0x47c>)
 800a928:	681a      	ldr	r2, [r3, #0]
 800a92a:	4b26      	ldr	r3, [pc, #152]	; (800a9c4 <FINGER_DMA_IrqHandler+0x480>)
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	4413      	add	r3, r2
 800a930:	4a23      	ldr	r2, [pc, #140]	; (800a9c0 <FINGER_DMA_IrqHandler+0x47c>)
 800a932:	6013      	str	r3, [r2, #0]
			finger_len -= finger_tocopy;
 800a934:	4b21      	ldr	r3, [pc, #132]	; (800a9bc <FINGER_DMA_IrqHandler+0x478>)
 800a936:	681a      	ldr	r2, [r3, #0]
 800a938:	4b22      	ldr	r3, [pc, #136]	; (800a9c4 <FINGER_DMA_IrqHandler+0x480>)
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	1ad3      	subs	r3, r2, r3
 800a93e:	4a1f      	ldr	r2, [pc, #124]	; (800a9bc <FINGER_DMA_IrqHandler+0x478>)
 800a940:	6013      	str	r3, [r2, #0]
			finger_ptr += finger_tocopy;
 800a942:	4b21      	ldr	r3, [pc, #132]	; (800a9c8 <FINGER_DMA_IrqHandler+0x484>)
 800a944:	681a      	ldr	r2, [r3, #0]
 800a946:	4b1f      	ldr	r3, [pc, #124]	; (800a9c4 <FINGER_DMA_IrqHandler+0x480>)
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	4413      	add	r3, r2
 800a94c:	4a1e      	ldr	r2, [pc, #120]	; (800a9c8 <FINGER_DMA_IrqHandler+0x484>)
 800a94e:	6013      	str	r3, [r2, #0]

			/* If still data to finger_write for beginning of buffer */
			if (finger_len)
 800a950:	4b1a      	ldr	r3, [pc, #104]	; (800a9bc <FINGER_DMA_IrqHandler+0x478>)
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	2b00      	cmp	r3, #0
 800a956:	d00b      	beq.n	800a970 <FINGER_DMA_IrqHandler+0x42c>
			{
				/* Don't care if we override Read pointer now */
				memcpy(&FINGER_UART_RX_Buffer[0], finger_ptr, finger_len);
 800a958:	4b1b      	ldr	r3, [pc, #108]	; (800a9c8 <FINGER_DMA_IrqHandler+0x484>)
 800a95a:	6819      	ldr	r1, [r3, #0]
 800a95c:	4b17      	ldr	r3, [pc, #92]	; (800a9bc <FINGER_DMA_IrqHandler+0x478>)
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	461a      	mov	r2, r3
 800a962:	481b      	ldr	r0, [pc, #108]	; (800a9d0 <FINGER_DMA_IrqHandler+0x48c>)
 800a964:	f006 fcd0 	bl	8011308 <memcpy>
				finger_write = finger_len;
 800a968:	4b14      	ldr	r3, [pc, #80]	; (800a9bc <FINGER_DMA_IrqHandler+0x478>)
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	4a14      	ldr	r2, [pc, #80]	; (800a9c0 <FINGER_DMA_IrqHandler+0x47c>)
 800a96e:	6013      	str	r3, [r2, #0]
			// set null at the end
			//			FINGER_UART_RX_Buffer[finger_write] = '\0';
		}

		/* Start DMA transfer again */
		hdma->Instance->CR |= DMA_SxCR_EN;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	681a      	ldr	r2, [r3, #0]
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	f042 0201 	orr.w	r2, r2, #1
 800a97e:	601a      	str	r2, [r3, #0]
	}
}
 800a980:	bf00      	nop
 800a982:	3708      	adds	r7, #8
 800a984:	46bd      	mov	sp, r7
 800a986:	bd80      	pop	{r7, pc}
 800a988:	40026010 	.word	0x40026010
 800a98c:	40026410 	.word	0x40026410
 800a990:	40026070 	.word	0x40026070
 800a994:	40026470 	.word	0x40026470
 800a998:	40026028 	.word	0x40026028
 800a99c:	40026428 	.word	0x40026428
 800a9a0:	40026088 	.word	0x40026088
 800a9a4:	40026488 	.word	0x40026488
 800a9a8:	40026040 	.word	0x40026040
 800a9ac:	40026440 	.word	0x40026440
 800a9b0:	400260a0 	.word	0x400260a0
 800a9b4:	400264a0 	.word	0x400264a0
 800a9b8:	40026000 	.word	0x40026000
 800a9bc:	200068bc 	.word	0x200068bc
 800a9c0:	200068f8 	.word	0x200068f8
 800a9c4:	200068c0 	.word	0x200068c0
 800a9c8:	20006884 	.word	0x20006884
 800a9cc:	200068c4 	.word	0x200068c4
 800a9d0:	20006888 	.word	0x20006888

0800a9d4 <FINGER_DMA_Init>:

void FINGER_DMA_Init(void){
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	af00      	add	r7, sp, #0
	__HAL_UART_ENABLE_IT(&huart4, UART_IT_IDLE);      // enable idle line interrupt
 800a9d8:	4b0f      	ldr	r3, [pc, #60]	; (800aa18 <FINGER_DMA_Init+0x44>)
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	68da      	ldr	r2, [r3, #12]
 800a9de:	4b0e      	ldr	r3, [pc, #56]	; (800aa18 <FINGER_DMA_Init+0x44>)
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	f042 0210 	orr.w	r2, r2, #16
 800a9e6:	60da      	str	r2, [r3, #12]
	__HAL_DMA_ENABLE_IT(&hdma_uart4_rx, DMA_IT_TC);  // enable DMA Tx cplt interrupt
 800a9e8:	4b0c      	ldr	r3, [pc, #48]	; (800aa1c <FINGER_DMA_Init+0x48>)
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	681a      	ldr	r2, [r3, #0]
 800a9ee:	4b0b      	ldr	r3, [pc, #44]	; (800aa1c <FINGER_DMA_Init+0x48>)
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	f042 0210 	orr.w	r2, r2, #16
 800a9f6:	601a      	str	r2, [r3, #0]
	__HAL_DMA_DISABLE_IT(&hdma_uart4_rx, DMA_IT_HT); // disable half complete interrupt
 800a9f8:	4b08      	ldr	r3, [pc, #32]	; (800aa1c <FINGER_DMA_Init+0x48>)
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	681a      	ldr	r2, [r3, #0]
 800a9fe:	4b07      	ldr	r3, [pc, #28]	; (800aa1c <FINGER_DMA_Init+0x48>)
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	f022 0208 	bic.w	r2, r2, #8
 800aa06:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(&huart4, (uint8_t *) FINGER_DMA_RX_Buffer, FINGER_DMA_RX_BUFFER_SIZE);
 800aa08:	2232      	movs	r2, #50	; 0x32
 800aa0a:	4905      	ldr	r1, [pc, #20]	; (800aa20 <FINGER_DMA_Init+0x4c>)
 800aa0c:	4802      	ldr	r0, [pc, #8]	; (800aa18 <FINGER_DMA_Init+0x44>)
 800aa0e:	f7fb fda5 	bl	800655c <HAL_UART_Receive_DMA>
}
 800aa12:	bf00      	nop
 800aa14:	bd80      	pop	{r7, pc}
 800aa16:	bf00      	nop
 800aa18:	200084f0 	.word	0x200084f0
 800aa1c:	2000824c 	.word	0x2000824c
 800aa20:	200068c4 	.word	0x200068c4

0800aa24 <FINGER_Reset_Buffer>:

void FINGER_Reset_Buffer(void){
 800aa24:	b580      	push	{r7, lr}
 800aa26:	af00      	add	r7, sp, #0
	// clear rx buffer
	memset(FINGER_UART_RX_Buffer, 0, sizeof(FINGER_UART_RX_Buffer));
 800aa28:	2232      	movs	r2, #50	; 0x32
 800aa2a:	2100      	movs	r1, #0
 800aa2c:	4803      	ldr	r0, [pc, #12]	; (800aa3c <FINGER_Reset_Buffer+0x18>)
 800aa2e:	f006 fc76 	bl	801131e <memset>
	// set index back to first
	finger_write = 0;
 800aa32:	4b03      	ldr	r3, [pc, #12]	; (800aa40 <FINGER_Reset_Buffer+0x1c>)
 800aa34:	2200      	movs	r2, #0
 800aa36:	601a      	str	r2, [r3, #0]
}
 800aa38:	bf00      	nop
 800aa3a:	bd80      	pop	{r7, pc}
 800aa3c:	20006888 	.word	0x20006888
 800aa40:	200068f8 	.word	0x200068f8

0800aa44 <SIMCOM_USART_IrqHandler>:
char SIMCOM_UART_RX_Buffer[SIMCOM_UART_RX_BUFFER_SIZE];
size_t simcom_write, simcom_len, simcom_tocopy;
uint8_t *simcom_ptr;

void SIMCOM_USART_IrqHandler(UART_HandleTypeDef *huart, DMA_HandleTypeDef *hdma)
{
 800aa44:	b580      	push	{r7, lr}
 800aa46:	b084      	sub	sp, #16
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
 800aa4c:	6039      	str	r1, [r7, #0]
	if (huart->Instance->SR & UART_FLAG_IDLE) /* if Idle flag is set */
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	f003 0310 	and.w	r3, r3, #16
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d016      	beq.n	800aa8a <SIMCOM_USART_IrqHandler+0x46>
	{
		__HAL_UART_CLEAR_IDLEFLAG (huart);	 /* Clear idle flag */
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	60fb      	str	r3, [r7, #12]
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	60fb      	str	r3, [r7, #12]
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	685b      	ldr	r3, [r3, #4]
 800aa6e:	60fb      	str	r3, [r7, #12]
 800aa70:	68fb      	ldr	r3, [r7, #12]
		__HAL_DMA_DISABLE(hdma);						 /* Disabling DMA will force transfer complete interrupt if enabled */
 800aa72:	683b      	ldr	r3, [r7, #0]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	681a      	ldr	r2, [r3, #0]
 800aa78:	683b      	ldr	r3, [r7, #0]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	f022 0201 	bic.w	r2, r2, #1
 800aa80:	601a      	str	r2, [r3, #0]
		SIMCOM_DMA_IrqHandler(hdma, huart);
 800aa82:	6879      	ldr	r1, [r7, #4]
 800aa84:	6838      	ldr	r0, [r7, #0]
 800aa86:	f000 f805 	bl	800aa94 <SIMCOM_DMA_IrqHandler>
	}
}
 800aa8a:	bf00      	nop
 800aa8c:	3710      	adds	r7, #16
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	bd80      	pop	{r7, pc}
	...

0800aa94 <SIMCOM_DMA_IrqHandler>:

void SIMCOM_DMA_IrqHandler(DMA_HandleTypeDef *hdma, UART_HandleTypeDef *huart)
{
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b082      	sub	sp, #8
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
 800aa9c:	6039      	str	r1, [r7, #0]
	if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET) // if the source is TC
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	f003 0310 	and.w	r3, r3, #16
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	f000 8210 	beq.w	800aece <SIMCOM_DMA_IrqHandler+0x43a>
	{
		/* Clear the transfer complete flag */
		__HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	461a      	mov	r2, r3
 800aab4:	4b99      	ldr	r3, [pc, #612]	; (800ad1c <SIMCOM_DMA_IrqHandler+0x288>)
 800aab6:	429a      	cmp	r2, r3
 800aab8:	d960      	bls.n	800ab7c <SIMCOM_DMA_IrqHandler+0xe8>
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	4a98      	ldr	r2, [pc, #608]	; (800ad20 <SIMCOM_DMA_IrqHandler+0x28c>)
 800aac0:	4293      	cmp	r3, r2
 800aac2:	d057      	beq.n	800ab74 <SIMCOM_DMA_IrqHandler+0xe0>
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	4a96      	ldr	r2, [pc, #600]	; (800ad24 <SIMCOM_DMA_IrqHandler+0x290>)
 800aaca:	4293      	cmp	r3, r2
 800aacc:	d050      	beq.n	800ab70 <SIMCOM_DMA_IrqHandler+0xdc>
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	4a95      	ldr	r2, [pc, #596]	; (800ad28 <SIMCOM_DMA_IrqHandler+0x294>)
 800aad4:	4293      	cmp	r3, r2
 800aad6:	d049      	beq.n	800ab6c <SIMCOM_DMA_IrqHandler+0xd8>
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	4a93      	ldr	r2, [pc, #588]	; (800ad2c <SIMCOM_DMA_IrqHandler+0x298>)
 800aade:	4293      	cmp	r3, r2
 800aae0:	d042      	beq.n	800ab68 <SIMCOM_DMA_IrqHandler+0xd4>
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	4a92      	ldr	r2, [pc, #584]	; (800ad30 <SIMCOM_DMA_IrqHandler+0x29c>)
 800aae8:	4293      	cmp	r3, r2
 800aaea:	d03a      	beq.n	800ab62 <SIMCOM_DMA_IrqHandler+0xce>
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	4a90      	ldr	r2, [pc, #576]	; (800ad34 <SIMCOM_DMA_IrqHandler+0x2a0>)
 800aaf2:	4293      	cmp	r3, r2
 800aaf4:	d032      	beq.n	800ab5c <SIMCOM_DMA_IrqHandler+0xc8>
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	4a8f      	ldr	r2, [pc, #572]	; (800ad38 <SIMCOM_DMA_IrqHandler+0x2a4>)
 800aafc:	4293      	cmp	r3, r2
 800aafe:	d02a      	beq.n	800ab56 <SIMCOM_DMA_IrqHandler+0xc2>
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	4a8d      	ldr	r2, [pc, #564]	; (800ad3c <SIMCOM_DMA_IrqHandler+0x2a8>)
 800ab06:	4293      	cmp	r3, r2
 800ab08:	d022      	beq.n	800ab50 <SIMCOM_DMA_IrqHandler+0xbc>
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	4a8c      	ldr	r2, [pc, #560]	; (800ad40 <SIMCOM_DMA_IrqHandler+0x2ac>)
 800ab10:	4293      	cmp	r3, r2
 800ab12:	d01a      	beq.n	800ab4a <SIMCOM_DMA_IrqHandler+0xb6>
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	4a8a      	ldr	r2, [pc, #552]	; (800ad44 <SIMCOM_DMA_IrqHandler+0x2b0>)
 800ab1a:	4293      	cmp	r3, r2
 800ab1c:	d012      	beq.n	800ab44 <SIMCOM_DMA_IrqHandler+0xb0>
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	4a89      	ldr	r2, [pc, #548]	; (800ad48 <SIMCOM_DMA_IrqHandler+0x2b4>)
 800ab24:	4293      	cmp	r3, r2
 800ab26:	d00a      	beq.n	800ab3e <SIMCOM_DMA_IrqHandler+0xaa>
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	4a87      	ldr	r2, [pc, #540]	; (800ad4c <SIMCOM_DMA_IrqHandler+0x2b8>)
 800ab2e:	4293      	cmp	r3, r2
 800ab30:	d102      	bne.n	800ab38 <SIMCOM_DMA_IrqHandler+0xa4>
 800ab32:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800ab36:	e01e      	b.n	800ab76 <SIMCOM_DMA_IrqHandler+0xe2>
 800ab38:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ab3c:	e01b      	b.n	800ab76 <SIMCOM_DMA_IrqHandler+0xe2>
 800ab3e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800ab42:	e018      	b.n	800ab76 <SIMCOM_DMA_IrqHandler+0xe2>
 800ab44:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800ab48:	e015      	b.n	800ab76 <SIMCOM_DMA_IrqHandler+0xe2>
 800ab4a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800ab4e:	e012      	b.n	800ab76 <SIMCOM_DMA_IrqHandler+0xe2>
 800ab50:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ab54:	e00f      	b.n	800ab76 <SIMCOM_DMA_IrqHandler+0xe2>
 800ab56:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ab5a:	e00c      	b.n	800ab76 <SIMCOM_DMA_IrqHandler+0xe2>
 800ab5c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ab60:	e009      	b.n	800ab76 <SIMCOM_DMA_IrqHandler+0xe2>
 800ab62:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ab66:	e006      	b.n	800ab76 <SIMCOM_DMA_IrqHandler+0xe2>
 800ab68:	2320      	movs	r3, #32
 800ab6a:	e004      	b.n	800ab76 <SIMCOM_DMA_IrqHandler+0xe2>
 800ab6c:	2320      	movs	r3, #32
 800ab6e:	e002      	b.n	800ab76 <SIMCOM_DMA_IrqHandler+0xe2>
 800ab70:	2320      	movs	r3, #32
 800ab72:	e000      	b.n	800ab76 <SIMCOM_DMA_IrqHandler+0xe2>
 800ab74:	2320      	movs	r3, #32
 800ab76:	4a76      	ldr	r2, [pc, #472]	; (800ad50 <SIMCOM_DMA_IrqHandler+0x2bc>)
 800ab78:	60d3      	str	r3, [r2, #12]
 800ab7a:	e151      	b.n	800ae20 <SIMCOM_DMA_IrqHandler+0x38c>
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	461a      	mov	r2, r3
 800ab82:	4b74      	ldr	r3, [pc, #464]	; (800ad54 <SIMCOM_DMA_IrqHandler+0x2c0>)
 800ab84:	429a      	cmp	r2, r3
 800ab86:	d960      	bls.n	800ac4a <SIMCOM_DMA_IrqHandler+0x1b6>
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	4a64      	ldr	r2, [pc, #400]	; (800ad20 <SIMCOM_DMA_IrqHandler+0x28c>)
 800ab8e:	4293      	cmp	r3, r2
 800ab90:	d057      	beq.n	800ac42 <SIMCOM_DMA_IrqHandler+0x1ae>
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	4a63      	ldr	r2, [pc, #396]	; (800ad24 <SIMCOM_DMA_IrqHandler+0x290>)
 800ab98:	4293      	cmp	r3, r2
 800ab9a:	d050      	beq.n	800ac3e <SIMCOM_DMA_IrqHandler+0x1aa>
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	4a61      	ldr	r2, [pc, #388]	; (800ad28 <SIMCOM_DMA_IrqHandler+0x294>)
 800aba2:	4293      	cmp	r3, r2
 800aba4:	d049      	beq.n	800ac3a <SIMCOM_DMA_IrqHandler+0x1a6>
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	4a60      	ldr	r2, [pc, #384]	; (800ad2c <SIMCOM_DMA_IrqHandler+0x298>)
 800abac:	4293      	cmp	r3, r2
 800abae:	d042      	beq.n	800ac36 <SIMCOM_DMA_IrqHandler+0x1a2>
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	4a5e      	ldr	r2, [pc, #376]	; (800ad30 <SIMCOM_DMA_IrqHandler+0x29c>)
 800abb6:	4293      	cmp	r3, r2
 800abb8:	d03a      	beq.n	800ac30 <SIMCOM_DMA_IrqHandler+0x19c>
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	4a5d      	ldr	r2, [pc, #372]	; (800ad34 <SIMCOM_DMA_IrqHandler+0x2a0>)
 800abc0:	4293      	cmp	r3, r2
 800abc2:	d032      	beq.n	800ac2a <SIMCOM_DMA_IrqHandler+0x196>
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	4a5b      	ldr	r2, [pc, #364]	; (800ad38 <SIMCOM_DMA_IrqHandler+0x2a4>)
 800abca:	4293      	cmp	r3, r2
 800abcc:	d02a      	beq.n	800ac24 <SIMCOM_DMA_IrqHandler+0x190>
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	4a5a      	ldr	r2, [pc, #360]	; (800ad3c <SIMCOM_DMA_IrqHandler+0x2a8>)
 800abd4:	4293      	cmp	r3, r2
 800abd6:	d022      	beq.n	800ac1e <SIMCOM_DMA_IrqHandler+0x18a>
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	4a58      	ldr	r2, [pc, #352]	; (800ad40 <SIMCOM_DMA_IrqHandler+0x2ac>)
 800abde:	4293      	cmp	r3, r2
 800abe0:	d01a      	beq.n	800ac18 <SIMCOM_DMA_IrqHandler+0x184>
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	4a57      	ldr	r2, [pc, #348]	; (800ad44 <SIMCOM_DMA_IrqHandler+0x2b0>)
 800abe8:	4293      	cmp	r3, r2
 800abea:	d012      	beq.n	800ac12 <SIMCOM_DMA_IrqHandler+0x17e>
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	4a55      	ldr	r2, [pc, #340]	; (800ad48 <SIMCOM_DMA_IrqHandler+0x2b4>)
 800abf2:	4293      	cmp	r3, r2
 800abf4:	d00a      	beq.n	800ac0c <SIMCOM_DMA_IrqHandler+0x178>
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	4a54      	ldr	r2, [pc, #336]	; (800ad4c <SIMCOM_DMA_IrqHandler+0x2b8>)
 800abfc:	4293      	cmp	r3, r2
 800abfe:	d102      	bne.n	800ac06 <SIMCOM_DMA_IrqHandler+0x172>
 800ac00:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800ac04:	e01e      	b.n	800ac44 <SIMCOM_DMA_IrqHandler+0x1b0>
 800ac06:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ac0a:	e01b      	b.n	800ac44 <SIMCOM_DMA_IrqHandler+0x1b0>
 800ac0c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800ac10:	e018      	b.n	800ac44 <SIMCOM_DMA_IrqHandler+0x1b0>
 800ac12:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800ac16:	e015      	b.n	800ac44 <SIMCOM_DMA_IrqHandler+0x1b0>
 800ac18:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800ac1c:	e012      	b.n	800ac44 <SIMCOM_DMA_IrqHandler+0x1b0>
 800ac1e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ac22:	e00f      	b.n	800ac44 <SIMCOM_DMA_IrqHandler+0x1b0>
 800ac24:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ac28:	e00c      	b.n	800ac44 <SIMCOM_DMA_IrqHandler+0x1b0>
 800ac2a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ac2e:	e009      	b.n	800ac44 <SIMCOM_DMA_IrqHandler+0x1b0>
 800ac30:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ac34:	e006      	b.n	800ac44 <SIMCOM_DMA_IrqHandler+0x1b0>
 800ac36:	2320      	movs	r3, #32
 800ac38:	e004      	b.n	800ac44 <SIMCOM_DMA_IrqHandler+0x1b0>
 800ac3a:	2320      	movs	r3, #32
 800ac3c:	e002      	b.n	800ac44 <SIMCOM_DMA_IrqHandler+0x1b0>
 800ac3e:	2320      	movs	r3, #32
 800ac40:	e000      	b.n	800ac44 <SIMCOM_DMA_IrqHandler+0x1b0>
 800ac42:	2320      	movs	r3, #32
 800ac44:	4a42      	ldr	r2, [pc, #264]	; (800ad50 <SIMCOM_DMA_IrqHandler+0x2bc>)
 800ac46:	6093      	str	r3, [r2, #8]
 800ac48:	e0ea      	b.n	800ae20 <SIMCOM_DMA_IrqHandler+0x38c>
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	461a      	mov	r2, r3
 800ac50:	4b41      	ldr	r3, [pc, #260]	; (800ad58 <SIMCOM_DMA_IrqHandler+0x2c4>)
 800ac52:	429a      	cmp	r2, r3
 800ac54:	f240 8084 	bls.w	800ad60 <SIMCOM_DMA_IrqHandler+0x2cc>
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	4a30      	ldr	r2, [pc, #192]	; (800ad20 <SIMCOM_DMA_IrqHandler+0x28c>)
 800ac5e:	4293      	cmp	r3, r2
 800ac60:	d057      	beq.n	800ad12 <SIMCOM_DMA_IrqHandler+0x27e>
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	4a2f      	ldr	r2, [pc, #188]	; (800ad24 <SIMCOM_DMA_IrqHandler+0x290>)
 800ac68:	4293      	cmp	r3, r2
 800ac6a:	d050      	beq.n	800ad0e <SIMCOM_DMA_IrqHandler+0x27a>
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	4a2d      	ldr	r2, [pc, #180]	; (800ad28 <SIMCOM_DMA_IrqHandler+0x294>)
 800ac72:	4293      	cmp	r3, r2
 800ac74:	d049      	beq.n	800ad0a <SIMCOM_DMA_IrqHandler+0x276>
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	4a2c      	ldr	r2, [pc, #176]	; (800ad2c <SIMCOM_DMA_IrqHandler+0x298>)
 800ac7c:	4293      	cmp	r3, r2
 800ac7e:	d042      	beq.n	800ad06 <SIMCOM_DMA_IrqHandler+0x272>
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	4a2a      	ldr	r2, [pc, #168]	; (800ad30 <SIMCOM_DMA_IrqHandler+0x29c>)
 800ac86:	4293      	cmp	r3, r2
 800ac88:	d03a      	beq.n	800ad00 <SIMCOM_DMA_IrqHandler+0x26c>
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	4a29      	ldr	r2, [pc, #164]	; (800ad34 <SIMCOM_DMA_IrqHandler+0x2a0>)
 800ac90:	4293      	cmp	r3, r2
 800ac92:	d032      	beq.n	800acfa <SIMCOM_DMA_IrqHandler+0x266>
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	4a27      	ldr	r2, [pc, #156]	; (800ad38 <SIMCOM_DMA_IrqHandler+0x2a4>)
 800ac9a:	4293      	cmp	r3, r2
 800ac9c:	d02a      	beq.n	800acf4 <SIMCOM_DMA_IrqHandler+0x260>
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	4a26      	ldr	r2, [pc, #152]	; (800ad3c <SIMCOM_DMA_IrqHandler+0x2a8>)
 800aca4:	4293      	cmp	r3, r2
 800aca6:	d022      	beq.n	800acee <SIMCOM_DMA_IrqHandler+0x25a>
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	4a24      	ldr	r2, [pc, #144]	; (800ad40 <SIMCOM_DMA_IrqHandler+0x2ac>)
 800acae:	4293      	cmp	r3, r2
 800acb0:	d01a      	beq.n	800ace8 <SIMCOM_DMA_IrqHandler+0x254>
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	4a23      	ldr	r2, [pc, #140]	; (800ad44 <SIMCOM_DMA_IrqHandler+0x2b0>)
 800acb8:	4293      	cmp	r3, r2
 800acba:	d012      	beq.n	800ace2 <SIMCOM_DMA_IrqHandler+0x24e>
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	4a21      	ldr	r2, [pc, #132]	; (800ad48 <SIMCOM_DMA_IrqHandler+0x2b4>)
 800acc2:	4293      	cmp	r3, r2
 800acc4:	d00a      	beq.n	800acdc <SIMCOM_DMA_IrqHandler+0x248>
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	4a20      	ldr	r2, [pc, #128]	; (800ad4c <SIMCOM_DMA_IrqHandler+0x2b8>)
 800accc:	4293      	cmp	r3, r2
 800acce:	d102      	bne.n	800acd6 <SIMCOM_DMA_IrqHandler+0x242>
 800acd0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800acd4:	e01e      	b.n	800ad14 <SIMCOM_DMA_IrqHandler+0x280>
 800acd6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800acda:	e01b      	b.n	800ad14 <SIMCOM_DMA_IrqHandler+0x280>
 800acdc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800ace0:	e018      	b.n	800ad14 <SIMCOM_DMA_IrqHandler+0x280>
 800ace2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800ace6:	e015      	b.n	800ad14 <SIMCOM_DMA_IrqHandler+0x280>
 800ace8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800acec:	e012      	b.n	800ad14 <SIMCOM_DMA_IrqHandler+0x280>
 800acee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800acf2:	e00f      	b.n	800ad14 <SIMCOM_DMA_IrqHandler+0x280>
 800acf4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800acf8:	e00c      	b.n	800ad14 <SIMCOM_DMA_IrqHandler+0x280>
 800acfa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800acfe:	e009      	b.n	800ad14 <SIMCOM_DMA_IrqHandler+0x280>
 800ad00:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ad04:	e006      	b.n	800ad14 <SIMCOM_DMA_IrqHandler+0x280>
 800ad06:	2320      	movs	r3, #32
 800ad08:	e004      	b.n	800ad14 <SIMCOM_DMA_IrqHandler+0x280>
 800ad0a:	2320      	movs	r3, #32
 800ad0c:	e002      	b.n	800ad14 <SIMCOM_DMA_IrqHandler+0x280>
 800ad0e:	2320      	movs	r3, #32
 800ad10:	e000      	b.n	800ad14 <SIMCOM_DMA_IrqHandler+0x280>
 800ad12:	2320      	movs	r3, #32
 800ad14:	4a11      	ldr	r2, [pc, #68]	; (800ad5c <SIMCOM_DMA_IrqHandler+0x2c8>)
 800ad16:	60d3      	str	r3, [r2, #12]
 800ad18:	e082      	b.n	800ae20 <SIMCOM_DMA_IrqHandler+0x38c>
 800ad1a:	bf00      	nop
 800ad1c:	40026458 	.word	0x40026458
 800ad20:	40026010 	.word	0x40026010
 800ad24:	40026410 	.word	0x40026410
 800ad28:	40026070 	.word	0x40026070
 800ad2c:	40026470 	.word	0x40026470
 800ad30:	40026028 	.word	0x40026028
 800ad34:	40026428 	.word	0x40026428
 800ad38:	40026088 	.word	0x40026088
 800ad3c:	40026488 	.word	0x40026488
 800ad40:	40026040 	.word	0x40026040
 800ad44:	40026440 	.word	0x40026440
 800ad48:	400260a0 	.word	0x400260a0
 800ad4c:	400264a0 	.word	0x400264a0
 800ad50:	40026400 	.word	0x40026400
 800ad54:	400260b8 	.word	0x400260b8
 800ad58:	40026058 	.word	0x40026058
 800ad5c:	40026000 	.word	0x40026000
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	4a5c      	ldr	r2, [pc, #368]	; (800aed8 <SIMCOM_DMA_IrqHandler+0x444>)
 800ad66:	4293      	cmp	r3, r2
 800ad68:	d057      	beq.n	800ae1a <SIMCOM_DMA_IrqHandler+0x386>
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	4a5b      	ldr	r2, [pc, #364]	; (800aedc <SIMCOM_DMA_IrqHandler+0x448>)
 800ad70:	4293      	cmp	r3, r2
 800ad72:	d050      	beq.n	800ae16 <SIMCOM_DMA_IrqHandler+0x382>
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	4a59      	ldr	r2, [pc, #356]	; (800aee0 <SIMCOM_DMA_IrqHandler+0x44c>)
 800ad7a:	4293      	cmp	r3, r2
 800ad7c:	d049      	beq.n	800ae12 <SIMCOM_DMA_IrqHandler+0x37e>
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	4a58      	ldr	r2, [pc, #352]	; (800aee4 <SIMCOM_DMA_IrqHandler+0x450>)
 800ad84:	4293      	cmp	r3, r2
 800ad86:	d042      	beq.n	800ae0e <SIMCOM_DMA_IrqHandler+0x37a>
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	4a56      	ldr	r2, [pc, #344]	; (800aee8 <SIMCOM_DMA_IrqHandler+0x454>)
 800ad8e:	4293      	cmp	r3, r2
 800ad90:	d03a      	beq.n	800ae08 <SIMCOM_DMA_IrqHandler+0x374>
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	4a55      	ldr	r2, [pc, #340]	; (800aeec <SIMCOM_DMA_IrqHandler+0x458>)
 800ad98:	4293      	cmp	r3, r2
 800ad9a:	d032      	beq.n	800ae02 <SIMCOM_DMA_IrqHandler+0x36e>
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	4a53      	ldr	r2, [pc, #332]	; (800aef0 <SIMCOM_DMA_IrqHandler+0x45c>)
 800ada2:	4293      	cmp	r3, r2
 800ada4:	d02a      	beq.n	800adfc <SIMCOM_DMA_IrqHandler+0x368>
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	4a52      	ldr	r2, [pc, #328]	; (800aef4 <SIMCOM_DMA_IrqHandler+0x460>)
 800adac:	4293      	cmp	r3, r2
 800adae:	d022      	beq.n	800adf6 <SIMCOM_DMA_IrqHandler+0x362>
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	4a50      	ldr	r2, [pc, #320]	; (800aef8 <SIMCOM_DMA_IrqHandler+0x464>)
 800adb6:	4293      	cmp	r3, r2
 800adb8:	d01a      	beq.n	800adf0 <SIMCOM_DMA_IrqHandler+0x35c>
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	4a4f      	ldr	r2, [pc, #316]	; (800aefc <SIMCOM_DMA_IrqHandler+0x468>)
 800adc0:	4293      	cmp	r3, r2
 800adc2:	d012      	beq.n	800adea <SIMCOM_DMA_IrqHandler+0x356>
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	4a4d      	ldr	r2, [pc, #308]	; (800af00 <SIMCOM_DMA_IrqHandler+0x46c>)
 800adca:	4293      	cmp	r3, r2
 800adcc:	d00a      	beq.n	800ade4 <SIMCOM_DMA_IrqHandler+0x350>
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	4a4c      	ldr	r2, [pc, #304]	; (800af04 <SIMCOM_DMA_IrqHandler+0x470>)
 800add4:	4293      	cmp	r3, r2
 800add6:	d102      	bne.n	800adde <SIMCOM_DMA_IrqHandler+0x34a>
 800add8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800addc:	e01e      	b.n	800ae1c <SIMCOM_DMA_IrqHandler+0x388>
 800adde:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ade2:	e01b      	b.n	800ae1c <SIMCOM_DMA_IrqHandler+0x388>
 800ade4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800ade8:	e018      	b.n	800ae1c <SIMCOM_DMA_IrqHandler+0x388>
 800adea:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800adee:	e015      	b.n	800ae1c <SIMCOM_DMA_IrqHandler+0x388>
 800adf0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800adf4:	e012      	b.n	800ae1c <SIMCOM_DMA_IrqHandler+0x388>
 800adf6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800adfa:	e00f      	b.n	800ae1c <SIMCOM_DMA_IrqHandler+0x388>
 800adfc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ae00:	e00c      	b.n	800ae1c <SIMCOM_DMA_IrqHandler+0x388>
 800ae02:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ae06:	e009      	b.n	800ae1c <SIMCOM_DMA_IrqHandler+0x388>
 800ae08:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ae0c:	e006      	b.n	800ae1c <SIMCOM_DMA_IrqHandler+0x388>
 800ae0e:	2320      	movs	r3, #32
 800ae10:	e004      	b.n	800ae1c <SIMCOM_DMA_IrqHandler+0x388>
 800ae12:	2320      	movs	r3, #32
 800ae14:	e002      	b.n	800ae1c <SIMCOM_DMA_IrqHandler+0x388>
 800ae16:	2320      	movs	r3, #32
 800ae18:	e000      	b.n	800ae1c <SIMCOM_DMA_IrqHandler+0x388>
 800ae1a:	2320      	movs	r3, #32
 800ae1c:	4a3a      	ldr	r2, [pc, #232]	; (800af08 <SIMCOM_DMA_IrqHandler+0x474>)
 800ae1e:	6093      	str	r3, [r2, #8]

		/* simcom_write received data for UART main buffer for manipulation later */
		simcom_ptr = (uint8_t *) SIMCOM_DMA_RX_Buffer;
 800ae20:	4b3a      	ldr	r3, [pc, #232]	; (800af0c <SIMCOM_DMA_IrqHandler+0x478>)
 800ae22:	4a3b      	ldr	r2, [pc, #236]	; (800af10 <SIMCOM_DMA_IrqHandler+0x47c>)
 800ae24:	601a      	str	r2, [r3, #0]

		/* Get the simcom_length of the data */
		simcom_len = SIMCOM_DMA_RX_BUFFER_SIZE - hdma->Instance->NDTR;
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	685b      	ldr	r3, [r3, #4]
 800ae2c:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800ae30:	4a38      	ldr	r2, [pc, #224]	; (800af14 <SIMCOM_DMA_IrqHandler+0x480>)
 800ae32:	6013      	str	r3, [r2, #0]

		/* Get number of bytes we can copy to the end of buffer */
		simcom_tocopy = SIMCOM_UART_RX_BUFFER_SIZE - simcom_write;
 800ae34:	4b38      	ldr	r3, [pc, #224]	; (800af18 <SIMCOM_DMA_IrqHandler+0x484>)
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 800ae3c:	4a37      	ldr	r2, [pc, #220]	; (800af1c <SIMCOM_DMA_IrqHandler+0x488>)
 800ae3e:	6013      	str	r3, [r2, #0]

		/* Check how many bytes to copy */
		if (simcom_tocopy > simcom_len)
 800ae40:	4b36      	ldr	r3, [pc, #216]	; (800af1c <SIMCOM_DMA_IrqHandler+0x488>)
 800ae42:	681a      	ldr	r2, [r3, #0]
 800ae44:	4b33      	ldr	r3, [pc, #204]	; (800af14 <SIMCOM_DMA_IrqHandler+0x480>)
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	429a      	cmp	r2, r3
 800ae4a:	d903      	bls.n	800ae54 <SIMCOM_DMA_IrqHandler+0x3c0>
		{
			simcom_tocopy = simcom_len;
 800ae4c:	4b31      	ldr	r3, [pc, #196]	; (800af14 <SIMCOM_DMA_IrqHandler+0x480>)
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	4a32      	ldr	r2, [pc, #200]	; (800af1c <SIMCOM_DMA_IrqHandler+0x488>)
 800ae52:	6013      	str	r3, [r2, #0]
		}

		/* Copy first part */
		memcpy(&SIMCOM_UART_RX_Buffer[simcom_write], simcom_ptr, simcom_tocopy);
 800ae54:	4b30      	ldr	r3, [pc, #192]	; (800af18 <SIMCOM_DMA_IrqHandler+0x484>)
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	4a31      	ldr	r2, [pc, #196]	; (800af20 <SIMCOM_DMA_IrqHandler+0x48c>)
 800ae5a:	1898      	adds	r0, r3, r2
 800ae5c:	4b2b      	ldr	r3, [pc, #172]	; (800af0c <SIMCOM_DMA_IrqHandler+0x478>)
 800ae5e:	6819      	ldr	r1, [r3, #0]
 800ae60:	4b2e      	ldr	r3, [pc, #184]	; (800af1c <SIMCOM_DMA_IrqHandler+0x488>)
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	461a      	mov	r2, r3
 800ae66:	f006 fa4f 	bl	8011308 <memcpy>

		/* Correct values for remaining data */
		simcom_write += simcom_tocopy;
 800ae6a:	4b2b      	ldr	r3, [pc, #172]	; (800af18 <SIMCOM_DMA_IrqHandler+0x484>)
 800ae6c:	681a      	ldr	r2, [r3, #0]
 800ae6e:	4b2b      	ldr	r3, [pc, #172]	; (800af1c <SIMCOM_DMA_IrqHandler+0x488>)
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	4413      	add	r3, r2
 800ae74:	4a28      	ldr	r2, [pc, #160]	; (800af18 <SIMCOM_DMA_IrqHandler+0x484>)
 800ae76:	6013      	str	r3, [r2, #0]
		simcom_len -= simcom_tocopy;
 800ae78:	4b26      	ldr	r3, [pc, #152]	; (800af14 <SIMCOM_DMA_IrqHandler+0x480>)
 800ae7a:	681a      	ldr	r2, [r3, #0]
 800ae7c:	4b27      	ldr	r3, [pc, #156]	; (800af1c <SIMCOM_DMA_IrqHandler+0x488>)
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	1ad3      	subs	r3, r2, r3
 800ae82:	4a24      	ldr	r2, [pc, #144]	; (800af14 <SIMCOM_DMA_IrqHandler+0x480>)
 800ae84:	6013      	str	r3, [r2, #0]
		simcom_ptr += simcom_tocopy;
 800ae86:	4b21      	ldr	r3, [pc, #132]	; (800af0c <SIMCOM_DMA_IrqHandler+0x478>)
 800ae88:	681a      	ldr	r2, [r3, #0]
 800ae8a:	4b24      	ldr	r3, [pc, #144]	; (800af1c <SIMCOM_DMA_IrqHandler+0x488>)
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	4413      	add	r3, r2
 800ae90:	4a1e      	ldr	r2, [pc, #120]	; (800af0c <SIMCOM_DMA_IrqHandler+0x478>)
 800ae92:	6013      	str	r3, [r2, #0]

		/* If still data to simcom_write for beginning of buffer */
		if (simcom_len)
 800ae94:	4b1f      	ldr	r3, [pc, #124]	; (800af14 <SIMCOM_DMA_IrqHandler+0x480>)
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d00b      	beq.n	800aeb4 <SIMCOM_DMA_IrqHandler+0x420>
		{
			/* Don't care if we override Read pointer now */
			memcpy(&SIMCOM_UART_RX_Buffer[0], simcom_ptr, simcom_len);
 800ae9c:	4b1b      	ldr	r3, [pc, #108]	; (800af0c <SIMCOM_DMA_IrqHandler+0x478>)
 800ae9e:	6819      	ldr	r1, [r3, #0]
 800aea0:	4b1c      	ldr	r3, [pc, #112]	; (800af14 <SIMCOM_DMA_IrqHandler+0x480>)
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	461a      	mov	r2, r3
 800aea6:	481e      	ldr	r0, [pc, #120]	; (800af20 <SIMCOM_DMA_IrqHandler+0x48c>)
 800aea8:	f006 fa2e 	bl	8011308 <memcpy>
			simcom_write = simcom_len;
 800aeac:	4b19      	ldr	r3, [pc, #100]	; (800af14 <SIMCOM_DMA_IrqHandler+0x480>)
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	4a19      	ldr	r2, [pc, #100]	; (800af18 <SIMCOM_DMA_IrqHandler+0x484>)
 800aeb2:	6013      	str	r3, [r2, #0]
		}

		// set null at the end
		SIMCOM_UART_RX_Buffer[simcom_write] = '\0';
 800aeb4:	4b18      	ldr	r3, [pc, #96]	; (800af18 <SIMCOM_DMA_IrqHandler+0x484>)
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	4a19      	ldr	r2, [pc, #100]	; (800af20 <SIMCOM_DMA_IrqHandler+0x48c>)
 800aeba:	2100      	movs	r1, #0
 800aebc:	54d1      	strb	r1, [r2, r3]

		/* Start DMA transfer again */
		hdma->Instance->CR |= DMA_SxCR_EN;
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	681a      	ldr	r2, [r3, #0]
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	f042 0201 	orr.w	r2, r2, #1
 800aecc:	601a      	str	r2, [r3, #0]
	}
}
 800aece:	bf00      	nop
 800aed0:	3708      	adds	r7, #8
 800aed2:	46bd      	mov	sp, r7
 800aed4:	bd80      	pop	{r7, pc}
 800aed6:	bf00      	nop
 800aed8:	40026010 	.word	0x40026010
 800aedc:	40026410 	.word	0x40026410
 800aee0:	40026070 	.word	0x40026070
 800aee4:	40026470 	.word	0x40026470
 800aee8:	40026028 	.word	0x40026028
 800aeec:	40026428 	.word	0x40026428
 800aef0:	40026088 	.word	0x40026088
 800aef4:	40026488 	.word	0x40026488
 800aef8:	40026040 	.word	0x40026040
 800aefc:	40026440 	.word	0x40026440
 800af00:	400260a0 	.word	0x400260a0
 800af04:	400264a0 	.word	0x400264a0
 800af08:	40026000 	.word	0x40026000
 800af0c:	20006d08 	.word	0x20006d08
 800af10:	20006d0c 	.word	0x20006d0c
 800af14:	20006d04 	.word	0x20006d04
 800af18:	200068fc 	.word	0x200068fc
 800af1c:	20006d00 	.word	0x20006d00
 800af20:	20006900 	.word	0x20006900

0800af24 <SIMCOM_DMA_Init>:

void SIMCOM_DMA_Init(void){
 800af24:	b580      	push	{r7, lr}
 800af26:	af00      	add	r7, sp, #0
	__HAL_UART_ENABLE_IT(&huart3, UART_IT_IDLE);      // enable idle line interrupt
 800af28:	4b0f      	ldr	r3, [pc, #60]	; (800af68 <SIMCOM_DMA_Init+0x44>)
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	68da      	ldr	r2, [r3, #12]
 800af2e:	4b0e      	ldr	r3, [pc, #56]	; (800af68 <SIMCOM_DMA_Init+0x44>)
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	f042 0210 	orr.w	r2, r2, #16
 800af36:	60da      	str	r2, [r3, #12]
	__HAL_DMA_ENABLE_IT(&hdma_usart3_rx, DMA_IT_TC);  // enable DMA Tx cplt interrupt
 800af38:	4b0c      	ldr	r3, [pc, #48]	; (800af6c <SIMCOM_DMA_Init+0x48>)
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	681a      	ldr	r2, [r3, #0]
 800af3e:	4b0b      	ldr	r3, [pc, #44]	; (800af6c <SIMCOM_DMA_Init+0x48>)
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	f042 0210 	orr.w	r2, r2, #16
 800af46:	601a      	str	r2, [r3, #0]
	__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT); // disable half complete interrupt
 800af48:	4b08      	ldr	r3, [pc, #32]	; (800af6c <SIMCOM_DMA_Init+0x48>)
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	681a      	ldr	r2, [r3, #0]
 800af4e:	4b07      	ldr	r3, [pc, #28]	; (800af6c <SIMCOM_DMA_Init+0x48>)
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	f022 0208 	bic.w	r2, r2, #8
 800af56:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(&huart3, (uint8_t *) SIMCOM_DMA_RX_Buffer, SIMCOM_DMA_RX_BUFFER_SIZE);
 800af58:	2280      	movs	r2, #128	; 0x80
 800af5a:	4905      	ldr	r1, [pc, #20]	; (800af70 <SIMCOM_DMA_Init+0x4c>)
 800af5c:	4802      	ldr	r0, [pc, #8]	; (800af68 <SIMCOM_DMA_Init+0x44>)
 800af5e:	f7fb fafd 	bl	800655c <HAL_UART_Receive_DMA>
}
 800af62:	bf00      	nop
 800af64:	bd80      	pop	{r7, pc}
 800af66:	bf00      	nop
 800af68:	200083c4 	.word	0x200083c4
 800af6c:	20008364 	.word	0x20008364
 800af70:	20006d0c 	.word	0x20006d0c

0800af74 <SIMCOM_Reset_Buffer>:

void SIMCOM_Reset_Buffer(void){
 800af74:	b580      	push	{r7, lr}
 800af76:	af00      	add	r7, sp, #0
	// clear rx buffer
	memset(SIMCOM_UART_RX_Buffer, 0, sizeof(SIMCOM_UART_RX_Buffer));
 800af78:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800af7c:	2100      	movs	r1, #0
 800af7e:	4805      	ldr	r0, [pc, #20]	; (800af94 <SIMCOM_Reset_Buffer+0x20>)
 800af80:	f006 f9cd 	bl	801131e <memset>
	// wail until clear is done
	osDelay(50);
 800af84:	2032      	movs	r0, #50	; 0x32
 800af86:	f7fc f932 	bl	80071ee <osDelay>
	// set index back to first
	simcom_write = 0;
 800af8a:	4b03      	ldr	r3, [pc, #12]	; (800af98 <SIMCOM_Reset_Buffer+0x24>)
 800af8c:	2200      	movs	r2, #0
 800af8e:	601a      	str	r2, [r3, #0]
	// set null at the end
	//	SIMCOM_UART_RX_Buffer[simcom_write] = '\0';
}
 800af90:	bf00      	nop
 800af92:	bd80      	pop	{r7, pc}
 800af94:	20006900 	.word	0x20006900
 800af98:	200068fc 	.word	0x200068fc

0800af9c <SIMCOM_Transmit>:

void SIMCOM_Transmit(char *pData, uint16_t Size){
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b082      	sub	sp, #8
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
 800afa4:	460b      	mov	r3, r1
 800afa6:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart3, (uint8_t *) pData, Size, HAL_MAX_DELAY);
 800afa8:	887a      	ldrh	r2, [r7, #2]
 800afaa:	f04f 33ff 	mov.w	r3, #4294967295
 800afae:	6879      	ldr	r1, [r7, #4]
 800afb0:	4803      	ldr	r0, [pc, #12]	; (800afc0 <SIMCOM_Transmit+0x24>)
 800afb2:	f7fb fa3a 	bl	800642a <HAL_UART_Transmit>
}
 800afb6:	bf00      	nop
 800afb8:	3708      	adds	r7, #8
 800afba:	46bd      	mov	sp, r7
 800afbc:	bd80      	pop	{r7, pc}
 800afbe:	bf00      	nop
 800afc0:	200083c4 	.word	0x200083c4

0800afc4 <UBLOX_USART_IrqHandler>:
char UBLOX_UART_RX_Buffer[UBLOX_UART_RX_BUFFER_SIZE];
size_t ublox_write, ublox_len, ublox_tocopy;
uint8_t *ublox_ptr;

void UBLOX_USART_IrqHandler(UART_HandleTypeDef *huart, DMA_HandleTypeDef *hdma)
{
 800afc4:	b580      	push	{r7, lr}
 800afc6:	b084      	sub	sp, #16
 800afc8:	af00      	add	r7, sp, #0
 800afca:	6078      	str	r0, [r7, #4]
 800afcc:	6039      	str	r1, [r7, #0]
	if (huart->Instance->SR & UART_FLAG_IDLE) /* if Idle flag is set */
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	f003 0310 	and.w	r3, r3, #16
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d016      	beq.n	800b00a <UBLOX_USART_IrqHandler+0x46>
	{
		__HAL_UART_CLEAR_IDLEFLAG(huart);	 /* Clear idle flag */
 800afdc:	2300      	movs	r3, #0
 800afde:	60fb      	str	r3, [r7, #12]
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	60fb      	str	r3, [r7, #12]
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	685b      	ldr	r3, [r3, #4]
 800afee:	60fb      	str	r3, [r7, #12]
 800aff0:	68fb      	ldr	r3, [r7, #12]
		__HAL_DMA_DISABLE(hdma);			 /* Disabling DMA will force transfer complete interrupt if enabled */
 800aff2:	683b      	ldr	r3, [r7, #0]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	681a      	ldr	r2, [r3, #0]
 800aff8:	683b      	ldr	r3, [r7, #0]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	f022 0201 	bic.w	r2, r2, #1
 800b000:	601a      	str	r2, [r3, #0]
		UBLOX_DMA_IrqHandler(hdma, huart);
 800b002:	6879      	ldr	r1, [r7, #4]
 800b004:	6838      	ldr	r0, [r7, #0]
 800b006:	f000 f805 	bl	800b014 <UBLOX_DMA_IrqHandler>
	}
}
 800b00a:	bf00      	nop
 800b00c:	3710      	adds	r7, #16
 800b00e:	46bd      	mov	sp, r7
 800b010:	bd80      	pop	{r7, pc}
	...

0800b014 <UBLOX_DMA_IrqHandler>:

void UBLOX_DMA_IrqHandler(DMA_HandleTypeDef *hdma, UART_HandleTypeDef *huart)
{
 800b014:	b580      	push	{r7, lr}
 800b016:	b082      	sub	sp, #8
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
 800b01c:	6039      	str	r1, [r7, #0]
	if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET) // if the source is TC
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	f003 0310 	and.w	r3, r3, #16
 800b028:	2b00      	cmp	r3, #0
 800b02a:	f000 8216 	beq.w	800b45a <UBLOX_DMA_IrqHandler+0x446>
	{
		/* Clear the transfer complete flag */
		__HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	461a      	mov	r2, r3
 800b034:	4b99      	ldr	r3, [pc, #612]	; (800b29c <UBLOX_DMA_IrqHandler+0x288>)
 800b036:	429a      	cmp	r2, r3
 800b038:	d960      	bls.n	800b0fc <UBLOX_DMA_IrqHandler+0xe8>
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	4a98      	ldr	r2, [pc, #608]	; (800b2a0 <UBLOX_DMA_IrqHandler+0x28c>)
 800b040:	4293      	cmp	r3, r2
 800b042:	d057      	beq.n	800b0f4 <UBLOX_DMA_IrqHandler+0xe0>
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	4a96      	ldr	r2, [pc, #600]	; (800b2a4 <UBLOX_DMA_IrqHandler+0x290>)
 800b04a:	4293      	cmp	r3, r2
 800b04c:	d050      	beq.n	800b0f0 <UBLOX_DMA_IrqHandler+0xdc>
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	4a95      	ldr	r2, [pc, #596]	; (800b2a8 <UBLOX_DMA_IrqHandler+0x294>)
 800b054:	4293      	cmp	r3, r2
 800b056:	d049      	beq.n	800b0ec <UBLOX_DMA_IrqHandler+0xd8>
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	4a93      	ldr	r2, [pc, #588]	; (800b2ac <UBLOX_DMA_IrqHandler+0x298>)
 800b05e:	4293      	cmp	r3, r2
 800b060:	d042      	beq.n	800b0e8 <UBLOX_DMA_IrqHandler+0xd4>
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	4a92      	ldr	r2, [pc, #584]	; (800b2b0 <UBLOX_DMA_IrqHandler+0x29c>)
 800b068:	4293      	cmp	r3, r2
 800b06a:	d03a      	beq.n	800b0e2 <UBLOX_DMA_IrqHandler+0xce>
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	4a90      	ldr	r2, [pc, #576]	; (800b2b4 <UBLOX_DMA_IrqHandler+0x2a0>)
 800b072:	4293      	cmp	r3, r2
 800b074:	d032      	beq.n	800b0dc <UBLOX_DMA_IrqHandler+0xc8>
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	4a8f      	ldr	r2, [pc, #572]	; (800b2b8 <UBLOX_DMA_IrqHandler+0x2a4>)
 800b07c:	4293      	cmp	r3, r2
 800b07e:	d02a      	beq.n	800b0d6 <UBLOX_DMA_IrqHandler+0xc2>
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	4a8d      	ldr	r2, [pc, #564]	; (800b2bc <UBLOX_DMA_IrqHandler+0x2a8>)
 800b086:	4293      	cmp	r3, r2
 800b088:	d022      	beq.n	800b0d0 <UBLOX_DMA_IrqHandler+0xbc>
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	4a8c      	ldr	r2, [pc, #560]	; (800b2c0 <UBLOX_DMA_IrqHandler+0x2ac>)
 800b090:	4293      	cmp	r3, r2
 800b092:	d01a      	beq.n	800b0ca <UBLOX_DMA_IrqHandler+0xb6>
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	4a8a      	ldr	r2, [pc, #552]	; (800b2c4 <UBLOX_DMA_IrqHandler+0x2b0>)
 800b09a:	4293      	cmp	r3, r2
 800b09c:	d012      	beq.n	800b0c4 <UBLOX_DMA_IrqHandler+0xb0>
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	4a89      	ldr	r2, [pc, #548]	; (800b2c8 <UBLOX_DMA_IrqHandler+0x2b4>)
 800b0a4:	4293      	cmp	r3, r2
 800b0a6:	d00a      	beq.n	800b0be <UBLOX_DMA_IrqHandler+0xaa>
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	4a87      	ldr	r2, [pc, #540]	; (800b2cc <UBLOX_DMA_IrqHandler+0x2b8>)
 800b0ae:	4293      	cmp	r3, r2
 800b0b0:	d102      	bne.n	800b0b8 <UBLOX_DMA_IrqHandler+0xa4>
 800b0b2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b0b6:	e01e      	b.n	800b0f6 <UBLOX_DMA_IrqHandler+0xe2>
 800b0b8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b0bc:	e01b      	b.n	800b0f6 <UBLOX_DMA_IrqHandler+0xe2>
 800b0be:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b0c2:	e018      	b.n	800b0f6 <UBLOX_DMA_IrqHandler+0xe2>
 800b0c4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b0c8:	e015      	b.n	800b0f6 <UBLOX_DMA_IrqHandler+0xe2>
 800b0ca:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b0ce:	e012      	b.n	800b0f6 <UBLOX_DMA_IrqHandler+0xe2>
 800b0d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b0d4:	e00f      	b.n	800b0f6 <UBLOX_DMA_IrqHandler+0xe2>
 800b0d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b0da:	e00c      	b.n	800b0f6 <UBLOX_DMA_IrqHandler+0xe2>
 800b0dc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b0e0:	e009      	b.n	800b0f6 <UBLOX_DMA_IrqHandler+0xe2>
 800b0e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b0e6:	e006      	b.n	800b0f6 <UBLOX_DMA_IrqHandler+0xe2>
 800b0e8:	2320      	movs	r3, #32
 800b0ea:	e004      	b.n	800b0f6 <UBLOX_DMA_IrqHandler+0xe2>
 800b0ec:	2320      	movs	r3, #32
 800b0ee:	e002      	b.n	800b0f6 <UBLOX_DMA_IrqHandler+0xe2>
 800b0f0:	2320      	movs	r3, #32
 800b0f2:	e000      	b.n	800b0f6 <UBLOX_DMA_IrqHandler+0xe2>
 800b0f4:	2320      	movs	r3, #32
 800b0f6:	4a76      	ldr	r2, [pc, #472]	; (800b2d0 <UBLOX_DMA_IrqHandler+0x2bc>)
 800b0f8:	60d3      	str	r3, [r2, #12]
 800b0fa:	e151      	b.n	800b3a0 <UBLOX_DMA_IrqHandler+0x38c>
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	461a      	mov	r2, r3
 800b102:	4b74      	ldr	r3, [pc, #464]	; (800b2d4 <UBLOX_DMA_IrqHandler+0x2c0>)
 800b104:	429a      	cmp	r2, r3
 800b106:	d960      	bls.n	800b1ca <UBLOX_DMA_IrqHandler+0x1b6>
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	4a64      	ldr	r2, [pc, #400]	; (800b2a0 <UBLOX_DMA_IrqHandler+0x28c>)
 800b10e:	4293      	cmp	r3, r2
 800b110:	d057      	beq.n	800b1c2 <UBLOX_DMA_IrqHandler+0x1ae>
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	4a63      	ldr	r2, [pc, #396]	; (800b2a4 <UBLOX_DMA_IrqHandler+0x290>)
 800b118:	4293      	cmp	r3, r2
 800b11a:	d050      	beq.n	800b1be <UBLOX_DMA_IrqHandler+0x1aa>
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	4a61      	ldr	r2, [pc, #388]	; (800b2a8 <UBLOX_DMA_IrqHandler+0x294>)
 800b122:	4293      	cmp	r3, r2
 800b124:	d049      	beq.n	800b1ba <UBLOX_DMA_IrqHandler+0x1a6>
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	4a60      	ldr	r2, [pc, #384]	; (800b2ac <UBLOX_DMA_IrqHandler+0x298>)
 800b12c:	4293      	cmp	r3, r2
 800b12e:	d042      	beq.n	800b1b6 <UBLOX_DMA_IrqHandler+0x1a2>
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	4a5e      	ldr	r2, [pc, #376]	; (800b2b0 <UBLOX_DMA_IrqHandler+0x29c>)
 800b136:	4293      	cmp	r3, r2
 800b138:	d03a      	beq.n	800b1b0 <UBLOX_DMA_IrqHandler+0x19c>
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	4a5d      	ldr	r2, [pc, #372]	; (800b2b4 <UBLOX_DMA_IrqHandler+0x2a0>)
 800b140:	4293      	cmp	r3, r2
 800b142:	d032      	beq.n	800b1aa <UBLOX_DMA_IrqHandler+0x196>
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	4a5b      	ldr	r2, [pc, #364]	; (800b2b8 <UBLOX_DMA_IrqHandler+0x2a4>)
 800b14a:	4293      	cmp	r3, r2
 800b14c:	d02a      	beq.n	800b1a4 <UBLOX_DMA_IrqHandler+0x190>
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	4a5a      	ldr	r2, [pc, #360]	; (800b2bc <UBLOX_DMA_IrqHandler+0x2a8>)
 800b154:	4293      	cmp	r3, r2
 800b156:	d022      	beq.n	800b19e <UBLOX_DMA_IrqHandler+0x18a>
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	4a58      	ldr	r2, [pc, #352]	; (800b2c0 <UBLOX_DMA_IrqHandler+0x2ac>)
 800b15e:	4293      	cmp	r3, r2
 800b160:	d01a      	beq.n	800b198 <UBLOX_DMA_IrqHandler+0x184>
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	4a57      	ldr	r2, [pc, #348]	; (800b2c4 <UBLOX_DMA_IrqHandler+0x2b0>)
 800b168:	4293      	cmp	r3, r2
 800b16a:	d012      	beq.n	800b192 <UBLOX_DMA_IrqHandler+0x17e>
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	4a55      	ldr	r2, [pc, #340]	; (800b2c8 <UBLOX_DMA_IrqHandler+0x2b4>)
 800b172:	4293      	cmp	r3, r2
 800b174:	d00a      	beq.n	800b18c <UBLOX_DMA_IrqHandler+0x178>
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	4a54      	ldr	r2, [pc, #336]	; (800b2cc <UBLOX_DMA_IrqHandler+0x2b8>)
 800b17c:	4293      	cmp	r3, r2
 800b17e:	d102      	bne.n	800b186 <UBLOX_DMA_IrqHandler+0x172>
 800b180:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b184:	e01e      	b.n	800b1c4 <UBLOX_DMA_IrqHandler+0x1b0>
 800b186:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b18a:	e01b      	b.n	800b1c4 <UBLOX_DMA_IrqHandler+0x1b0>
 800b18c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b190:	e018      	b.n	800b1c4 <UBLOX_DMA_IrqHandler+0x1b0>
 800b192:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b196:	e015      	b.n	800b1c4 <UBLOX_DMA_IrqHandler+0x1b0>
 800b198:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b19c:	e012      	b.n	800b1c4 <UBLOX_DMA_IrqHandler+0x1b0>
 800b19e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b1a2:	e00f      	b.n	800b1c4 <UBLOX_DMA_IrqHandler+0x1b0>
 800b1a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b1a8:	e00c      	b.n	800b1c4 <UBLOX_DMA_IrqHandler+0x1b0>
 800b1aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b1ae:	e009      	b.n	800b1c4 <UBLOX_DMA_IrqHandler+0x1b0>
 800b1b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b1b4:	e006      	b.n	800b1c4 <UBLOX_DMA_IrqHandler+0x1b0>
 800b1b6:	2320      	movs	r3, #32
 800b1b8:	e004      	b.n	800b1c4 <UBLOX_DMA_IrqHandler+0x1b0>
 800b1ba:	2320      	movs	r3, #32
 800b1bc:	e002      	b.n	800b1c4 <UBLOX_DMA_IrqHandler+0x1b0>
 800b1be:	2320      	movs	r3, #32
 800b1c0:	e000      	b.n	800b1c4 <UBLOX_DMA_IrqHandler+0x1b0>
 800b1c2:	2320      	movs	r3, #32
 800b1c4:	4a42      	ldr	r2, [pc, #264]	; (800b2d0 <UBLOX_DMA_IrqHandler+0x2bc>)
 800b1c6:	6093      	str	r3, [r2, #8]
 800b1c8:	e0ea      	b.n	800b3a0 <UBLOX_DMA_IrqHandler+0x38c>
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	461a      	mov	r2, r3
 800b1d0:	4b41      	ldr	r3, [pc, #260]	; (800b2d8 <UBLOX_DMA_IrqHandler+0x2c4>)
 800b1d2:	429a      	cmp	r2, r3
 800b1d4:	f240 8084 	bls.w	800b2e0 <UBLOX_DMA_IrqHandler+0x2cc>
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	4a30      	ldr	r2, [pc, #192]	; (800b2a0 <UBLOX_DMA_IrqHandler+0x28c>)
 800b1de:	4293      	cmp	r3, r2
 800b1e0:	d057      	beq.n	800b292 <UBLOX_DMA_IrqHandler+0x27e>
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	4a2f      	ldr	r2, [pc, #188]	; (800b2a4 <UBLOX_DMA_IrqHandler+0x290>)
 800b1e8:	4293      	cmp	r3, r2
 800b1ea:	d050      	beq.n	800b28e <UBLOX_DMA_IrqHandler+0x27a>
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	4a2d      	ldr	r2, [pc, #180]	; (800b2a8 <UBLOX_DMA_IrqHandler+0x294>)
 800b1f2:	4293      	cmp	r3, r2
 800b1f4:	d049      	beq.n	800b28a <UBLOX_DMA_IrqHandler+0x276>
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	4a2c      	ldr	r2, [pc, #176]	; (800b2ac <UBLOX_DMA_IrqHandler+0x298>)
 800b1fc:	4293      	cmp	r3, r2
 800b1fe:	d042      	beq.n	800b286 <UBLOX_DMA_IrqHandler+0x272>
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	4a2a      	ldr	r2, [pc, #168]	; (800b2b0 <UBLOX_DMA_IrqHandler+0x29c>)
 800b206:	4293      	cmp	r3, r2
 800b208:	d03a      	beq.n	800b280 <UBLOX_DMA_IrqHandler+0x26c>
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	4a29      	ldr	r2, [pc, #164]	; (800b2b4 <UBLOX_DMA_IrqHandler+0x2a0>)
 800b210:	4293      	cmp	r3, r2
 800b212:	d032      	beq.n	800b27a <UBLOX_DMA_IrqHandler+0x266>
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	4a27      	ldr	r2, [pc, #156]	; (800b2b8 <UBLOX_DMA_IrqHandler+0x2a4>)
 800b21a:	4293      	cmp	r3, r2
 800b21c:	d02a      	beq.n	800b274 <UBLOX_DMA_IrqHandler+0x260>
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	4a26      	ldr	r2, [pc, #152]	; (800b2bc <UBLOX_DMA_IrqHandler+0x2a8>)
 800b224:	4293      	cmp	r3, r2
 800b226:	d022      	beq.n	800b26e <UBLOX_DMA_IrqHandler+0x25a>
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	4a24      	ldr	r2, [pc, #144]	; (800b2c0 <UBLOX_DMA_IrqHandler+0x2ac>)
 800b22e:	4293      	cmp	r3, r2
 800b230:	d01a      	beq.n	800b268 <UBLOX_DMA_IrqHandler+0x254>
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	4a23      	ldr	r2, [pc, #140]	; (800b2c4 <UBLOX_DMA_IrqHandler+0x2b0>)
 800b238:	4293      	cmp	r3, r2
 800b23a:	d012      	beq.n	800b262 <UBLOX_DMA_IrqHandler+0x24e>
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	4a21      	ldr	r2, [pc, #132]	; (800b2c8 <UBLOX_DMA_IrqHandler+0x2b4>)
 800b242:	4293      	cmp	r3, r2
 800b244:	d00a      	beq.n	800b25c <UBLOX_DMA_IrqHandler+0x248>
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	4a20      	ldr	r2, [pc, #128]	; (800b2cc <UBLOX_DMA_IrqHandler+0x2b8>)
 800b24c:	4293      	cmp	r3, r2
 800b24e:	d102      	bne.n	800b256 <UBLOX_DMA_IrqHandler+0x242>
 800b250:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b254:	e01e      	b.n	800b294 <UBLOX_DMA_IrqHandler+0x280>
 800b256:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b25a:	e01b      	b.n	800b294 <UBLOX_DMA_IrqHandler+0x280>
 800b25c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b260:	e018      	b.n	800b294 <UBLOX_DMA_IrqHandler+0x280>
 800b262:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b266:	e015      	b.n	800b294 <UBLOX_DMA_IrqHandler+0x280>
 800b268:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b26c:	e012      	b.n	800b294 <UBLOX_DMA_IrqHandler+0x280>
 800b26e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b272:	e00f      	b.n	800b294 <UBLOX_DMA_IrqHandler+0x280>
 800b274:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b278:	e00c      	b.n	800b294 <UBLOX_DMA_IrqHandler+0x280>
 800b27a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b27e:	e009      	b.n	800b294 <UBLOX_DMA_IrqHandler+0x280>
 800b280:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b284:	e006      	b.n	800b294 <UBLOX_DMA_IrqHandler+0x280>
 800b286:	2320      	movs	r3, #32
 800b288:	e004      	b.n	800b294 <UBLOX_DMA_IrqHandler+0x280>
 800b28a:	2320      	movs	r3, #32
 800b28c:	e002      	b.n	800b294 <UBLOX_DMA_IrqHandler+0x280>
 800b28e:	2320      	movs	r3, #32
 800b290:	e000      	b.n	800b294 <UBLOX_DMA_IrqHandler+0x280>
 800b292:	2320      	movs	r3, #32
 800b294:	4a11      	ldr	r2, [pc, #68]	; (800b2dc <UBLOX_DMA_IrqHandler+0x2c8>)
 800b296:	60d3      	str	r3, [r2, #12]
 800b298:	e082      	b.n	800b3a0 <UBLOX_DMA_IrqHandler+0x38c>
 800b29a:	bf00      	nop
 800b29c:	40026458 	.word	0x40026458
 800b2a0:	40026010 	.word	0x40026010
 800b2a4:	40026410 	.word	0x40026410
 800b2a8:	40026070 	.word	0x40026070
 800b2ac:	40026470 	.word	0x40026470
 800b2b0:	40026028 	.word	0x40026028
 800b2b4:	40026428 	.word	0x40026428
 800b2b8:	40026088 	.word	0x40026088
 800b2bc:	40026488 	.word	0x40026488
 800b2c0:	40026040 	.word	0x40026040
 800b2c4:	40026440 	.word	0x40026440
 800b2c8:	400260a0 	.word	0x400260a0
 800b2cc:	400264a0 	.word	0x400264a0
 800b2d0:	40026400 	.word	0x40026400
 800b2d4:	400260b8 	.word	0x400260b8
 800b2d8:	40026058 	.word	0x40026058
 800b2dc:	40026000 	.word	0x40026000
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	4a5f      	ldr	r2, [pc, #380]	; (800b464 <UBLOX_DMA_IrqHandler+0x450>)
 800b2e6:	4293      	cmp	r3, r2
 800b2e8:	d057      	beq.n	800b39a <UBLOX_DMA_IrqHandler+0x386>
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	4a5e      	ldr	r2, [pc, #376]	; (800b468 <UBLOX_DMA_IrqHandler+0x454>)
 800b2f0:	4293      	cmp	r3, r2
 800b2f2:	d050      	beq.n	800b396 <UBLOX_DMA_IrqHandler+0x382>
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	4a5c      	ldr	r2, [pc, #368]	; (800b46c <UBLOX_DMA_IrqHandler+0x458>)
 800b2fa:	4293      	cmp	r3, r2
 800b2fc:	d049      	beq.n	800b392 <UBLOX_DMA_IrqHandler+0x37e>
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	4a5b      	ldr	r2, [pc, #364]	; (800b470 <UBLOX_DMA_IrqHandler+0x45c>)
 800b304:	4293      	cmp	r3, r2
 800b306:	d042      	beq.n	800b38e <UBLOX_DMA_IrqHandler+0x37a>
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	4a59      	ldr	r2, [pc, #356]	; (800b474 <UBLOX_DMA_IrqHandler+0x460>)
 800b30e:	4293      	cmp	r3, r2
 800b310:	d03a      	beq.n	800b388 <UBLOX_DMA_IrqHandler+0x374>
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	4a58      	ldr	r2, [pc, #352]	; (800b478 <UBLOX_DMA_IrqHandler+0x464>)
 800b318:	4293      	cmp	r3, r2
 800b31a:	d032      	beq.n	800b382 <UBLOX_DMA_IrqHandler+0x36e>
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	4a56      	ldr	r2, [pc, #344]	; (800b47c <UBLOX_DMA_IrqHandler+0x468>)
 800b322:	4293      	cmp	r3, r2
 800b324:	d02a      	beq.n	800b37c <UBLOX_DMA_IrqHandler+0x368>
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	4a55      	ldr	r2, [pc, #340]	; (800b480 <UBLOX_DMA_IrqHandler+0x46c>)
 800b32c:	4293      	cmp	r3, r2
 800b32e:	d022      	beq.n	800b376 <UBLOX_DMA_IrqHandler+0x362>
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	4a53      	ldr	r2, [pc, #332]	; (800b484 <UBLOX_DMA_IrqHandler+0x470>)
 800b336:	4293      	cmp	r3, r2
 800b338:	d01a      	beq.n	800b370 <UBLOX_DMA_IrqHandler+0x35c>
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	4a52      	ldr	r2, [pc, #328]	; (800b488 <UBLOX_DMA_IrqHandler+0x474>)
 800b340:	4293      	cmp	r3, r2
 800b342:	d012      	beq.n	800b36a <UBLOX_DMA_IrqHandler+0x356>
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	4a50      	ldr	r2, [pc, #320]	; (800b48c <UBLOX_DMA_IrqHandler+0x478>)
 800b34a:	4293      	cmp	r3, r2
 800b34c:	d00a      	beq.n	800b364 <UBLOX_DMA_IrqHandler+0x350>
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	4a4f      	ldr	r2, [pc, #316]	; (800b490 <UBLOX_DMA_IrqHandler+0x47c>)
 800b354:	4293      	cmp	r3, r2
 800b356:	d102      	bne.n	800b35e <UBLOX_DMA_IrqHandler+0x34a>
 800b358:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b35c:	e01e      	b.n	800b39c <UBLOX_DMA_IrqHandler+0x388>
 800b35e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b362:	e01b      	b.n	800b39c <UBLOX_DMA_IrqHandler+0x388>
 800b364:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b368:	e018      	b.n	800b39c <UBLOX_DMA_IrqHandler+0x388>
 800b36a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b36e:	e015      	b.n	800b39c <UBLOX_DMA_IrqHandler+0x388>
 800b370:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b374:	e012      	b.n	800b39c <UBLOX_DMA_IrqHandler+0x388>
 800b376:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b37a:	e00f      	b.n	800b39c <UBLOX_DMA_IrqHandler+0x388>
 800b37c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b380:	e00c      	b.n	800b39c <UBLOX_DMA_IrqHandler+0x388>
 800b382:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b386:	e009      	b.n	800b39c <UBLOX_DMA_IrqHandler+0x388>
 800b388:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b38c:	e006      	b.n	800b39c <UBLOX_DMA_IrqHandler+0x388>
 800b38e:	2320      	movs	r3, #32
 800b390:	e004      	b.n	800b39c <UBLOX_DMA_IrqHandler+0x388>
 800b392:	2320      	movs	r3, #32
 800b394:	e002      	b.n	800b39c <UBLOX_DMA_IrqHandler+0x388>
 800b396:	2320      	movs	r3, #32
 800b398:	e000      	b.n	800b39c <UBLOX_DMA_IrqHandler+0x388>
 800b39a:	2320      	movs	r3, #32
 800b39c:	4a3d      	ldr	r2, [pc, #244]	; (800b494 <UBLOX_DMA_IrqHandler+0x480>)
 800b39e:	6093      	str	r3, [r2, #8]

		/* Get the ublox_length of the data */
		ublox_len = UBLOX_DMA_RX_BUFFER_SIZE - hdma->Instance->NDTR;
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	685b      	ldr	r3, [r3, #4]
 800b3a6:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 800b3aa:	4a3b      	ldr	r2, [pc, #236]	; (800b498 <UBLOX_DMA_IrqHandler+0x484>)
 800b3ac:	6013      	str	r3, [r2, #0]
		/* Only process if DMA is not empty */
		if(ublox_len > 0) {
 800b3ae:	4b3a      	ldr	r3, [pc, #232]	; (800b498 <UBLOX_DMA_IrqHandler+0x484>)
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d049      	beq.n	800b44a <UBLOX_DMA_IrqHandler+0x436>
			/* Reset the buffer */
			UBLOX_Reset_Buffer();
 800b3b6:	f000 f8a3 	bl	800b500 <UBLOX_Reset_Buffer>
			/* Get number of bytes we can copy to the end of buffer */
			ublox_tocopy = UBLOX_UART_RX_BUFFER_SIZE - ublox_write;
 800b3ba:	4b38      	ldr	r3, [pc, #224]	; (800b49c <UBLOX_DMA_IrqHandler+0x488>)
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 800b3c2:	4a37      	ldr	r2, [pc, #220]	; (800b4a0 <UBLOX_DMA_IrqHandler+0x48c>)
 800b3c4:	6013      	str	r3, [r2, #0]
			/* ublox_write received data for UART main buffer for manipulation later */
			ublox_ptr = (uint8_t *) UBLOX_DMA_RX_Buffer;
 800b3c6:	4b37      	ldr	r3, [pc, #220]	; (800b4a4 <UBLOX_DMA_IrqHandler+0x490>)
 800b3c8:	4a37      	ldr	r2, [pc, #220]	; (800b4a8 <UBLOX_DMA_IrqHandler+0x494>)
 800b3ca:	601a      	str	r2, [r3, #0]
			/* Check how many bytes to copy */
			if (ublox_tocopy > ublox_len)
 800b3cc:	4b34      	ldr	r3, [pc, #208]	; (800b4a0 <UBLOX_DMA_IrqHandler+0x48c>)
 800b3ce:	681a      	ldr	r2, [r3, #0]
 800b3d0:	4b31      	ldr	r3, [pc, #196]	; (800b498 <UBLOX_DMA_IrqHandler+0x484>)
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	429a      	cmp	r2, r3
 800b3d6:	d903      	bls.n	800b3e0 <UBLOX_DMA_IrqHandler+0x3cc>
			{
				ublox_tocopy = ublox_len;
 800b3d8:	4b2f      	ldr	r3, [pc, #188]	; (800b498 <UBLOX_DMA_IrqHandler+0x484>)
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	4a30      	ldr	r2, [pc, #192]	; (800b4a0 <UBLOX_DMA_IrqHandler+0x48c>)
 800b3de:	6013      	str	r3, [r2, #0]
			}
			/* Copy first part */
			memcpy(&UBLOX_UART_RX_Buffer[ublox_write], ublox_ptr, ublox_tocopy);
 800b3e0:	4b2e      	ldr	r3, [pc, #184]	; (800b49c <UBLOX_DMA_IrqHandler+0x488>)
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	4a31      	ldr	r2, [pc, #196]	; (800b4ac <UBLOX_DMA_IrqHandler+0x498>)
 800b3e6:	1898      	adds	r0, r3, r2
 800b3e8:	4b2e      	ldr	r3, [pc, #184]	; (800b4a4 <UBLOX_DMA_IrqHandler+0x490>)
 800b3ea:	6819      	ldr	r1, [r3, #0]
 800b3ec:	4b2c      	ldr	r3, [pc, #176]	; (800b4a0 <UBLOX_DMA_IrqHandler+0x48c>)
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	461a      	mov	r2, r3
 800b3f2:	f005 ff89 	bl	8011308 <memcpy>
			/* Correct values for remaining data */
			ublox_write += ublox_tocopy;
 800b3f6:	4b29      	ldr	r3, [pc, #164]	; (800b49c <UBLOX_DMA_IrqHandler+0x488>)
 800b3f8:	681a      	ldr	r2, [r3, #0]
 800b3fa:	4b29      	ldr	r3, [pc, #164]	; (800b4a0 <UBLOX_DMA_IrqHandler+0x48c>)
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	4413      	add	r3, r2
 800b400:	4a26      	ldr	r2, [pc, #152]	; (800b49c <UBLOX_DMA_IrqHandler+0x488>)
 800b402:	6013      	str	r3, [r2, #0]
			ublox_len -= ublox_tocopy;
 800b404:	4b24      	ldr	r3, [pc, #144]	; (800b498 <UBLOX_DMA_IrqHandler+0x484>)
 800b406:	681a      	ldr	r2, [r3, #0]
 800b408:	4b25      	ldr	r3, [pc, #148]	; (800b4a0 <UBLOX_DMA_IrqHandler+0x48c>)
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	1ad3      	subs	r3, r2, r3
 800b40e:	4a22      	ldr	r2, [pc, #136]	; (800b498 <UBLOX_DMA_IrqHandler+0x484>)
 800b410:	6013      	str	r3, [r2, #0]
			ublox_ptr += ublox_tocopy;
 800b412:	4b24      	ldr	r3, [pc, #144]	; (800b4a4 <UBLOX_DMA_IrqHandler+0x490>)
 800b414:	681a      	ldr	r2, [r3, #0]
 800b416:	4b22      	ldr	r3, [pc, #136]	; (800b4a0 <UBLOX_DMA_IrqHandler+0x48c>)
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	4413      	add	r3, r2
 800b41c:	4a21      	ldr	r2, [pc, #132]	; (800b4a4 <UBLOX_DMA_IrqHandler+0x490>)
 800b41e:	6013      	str	r3, [r2, #0]

			/* If still data to ublox_write for beginning of buffer */
			if (ublox_len)
 800b420:	4b1d      	ldr	r3, [pc, #116]	; (800b498 <UBLOX_DMA_IrqHandler+0x484>)
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	2b00      	cmp	r3, #0
 800b426:	d00b      	beq.n	800b440 <UBLOX_DMA_IrqHandler+0x42c>
			{
				/* Don't care if we override Read pointer now */
				memcpy(&UBLOX_UART_RX_Buffer[0], ublox_ptr, ublox_len);
 800b428:	4b1e      	ldr	r3, [pc, #120]	; (800b4a4 <UBLOX_DMA_IrqHandler+0x490>)
 800b42a:	6819      	ldr	r1, [r3, #0]
 800b42c:	4b1a      	ldr	r3, [pc, #104]	; (800b498 <UBLOX_DMA_IrqHandler+0x484>)
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	461a      	mov	r2, r3
 800b432:	481e      	ldr	r0, [pc, #120]	; (800b4ac <UBLOX_DMA_IrqHandler+0x498>)
 800b434:	f005 ff68 	bl	8011308 <memcpy>
				ublox_write = ublox_len;
 800b438:	4b17      	ldr	r3, [pc, #92]	; (800b498 <UBLOX_DMA_IrqHandler+0x484>)
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	4a17      	ldr	r2, [pc, #92]	; (800b49c <UBLOX_DMA_IrqHandler+0x488>)
 800b43e:	6013      	str	r3, [r2, #0]
			}
			// set null at the end
			UBLOX_UART_RX_Buffer[ublox_write] = '\0';
 800b440:	4b16      	ldr	r3, [pc, #88]	; (800b49c <UBLOX_DMA_IrqHandler+0x488>)
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	4a19      	ldr	r2, [pc, #100]	; (800b4ac <UBLOX_DMA_IrqHandler+0x498>)
 800b446:	2100      	movs	r1, #0
 800b448:	54d1      	strb	r1, [r2, r3]
		}

		/* Start DMA transfer again */
		hdma->Instance->CR |= DMA_SxCR_EN;
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	681a      	ldr	r2, [r3, #0]
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	f042 0201 	orr.w	r2, r2, #1
 800b458:	601a      	str	r2, [r3, #0]
	}
}
 800b45a:	bf00      	nop
 800b45c:	3708      	adds	r7, #8
 800b45e:	46bd      	mov	sp, r7
 800b460:	bd80      	pop	{r7, pc}
 800b462:	bf00      	nop
 800b464:	40026010 	.word	0x40026010
 800b468:	40026410 	.word	0x40026410
 800b46c:	40026070 	.word	0x40026070
 800b470:	40026470 	.word	0x40026470
 800b474:	40026028 	.word	0x40026028
 800b478:	40026428 	.word	0x40026428
 800b47c:	40026088 	.word	0x40026088
 800b480:	40026488 	.word	0x40026488
 800b484:	40026040 	.word	0x40026040
 800b488:	40026440 	.word	0x40026440
 800b48c:	400260a0 	.word	0x400260a0
 800b490:	400264a0 	.word	0x400264a0
 800b494:	40026000 	.word	0x40026000
 800b498:	20006d90 	.word	0x20006d90
 800b49c:	20006d94 	.word	0x20006d94
 800b4a0:	20006d98 	.word	0x20006d98
 800b4a4:	20006d8c 	.word	0x20006d8c
 800b4a8:	20006d9c 	.word	0x20006d9c
 800b4ac:	2000719c 	.word	0x2000719c

0800b4b0 <UBLOX_DMA_Init>:

void UBLOX_DMA_Init(void){
 800b4b0:	b580      	push	{r7, lr}
 800b4b2:	af00      	add	r7, sp, #0
	__HAL_UART_ENABLE_IT(&huart2, UART_IT_IDLE);      // enable idle line interrupt
 800b4b4:	4b0f      	ldr	r3, [pc, #60]	; (800b4f4 <UBLOX_DMA_Init+0x44>)
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	68da      	ldr	r2, [r3, #12]
 800b4ba:	4b0e      	ldr	r3, [pc, #56]	; (800b4f4 <UBLOX_DMA_Init+0x44>)
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	f042 0210 	orr.w	r2, r2, #16
 800b4c2:	60da      	str	r2, [r3, #12]
	__HAL_DMA_ENABLE_IT(&hdma_usart2_rx, DMA_IT_TC);  // enable DMA Tx cplt interrupt
 800b4c4:	4b0c      	ldr	r3, [pc, #48]	; (800b4f8 <UBLOX_DMA_Init+0x48>)
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	681a      	ldr	r2, [r3, #0]
 800b4ca:	4b0b      	ldr	r3, [pc, #44]	; (800b4f8 <UBLOX_DMA_Init+0x48>)
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	f042 0210 	orr.w	r2, r2, #16
 800b4d2:	601a      	str	r2, [r3, #0]
	__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT); // disable half complete interrupt
 800b4d4:	4b08      	ldr	r3, [pc, #32]	; (800b4f8 <UBLOX_DMA_Init+0x48>)
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	681a      	ldr	r2, [r3, #0]
 800b4da:	4b07      	ldr	r3, [pc, #28]	; (800b4f8 <UBLOX_DMA_Init+0x48>)
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	f022 0208 	bic.w	r2, r2, #8
 800b4e2:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(&huart2, (uint8_t *) UBLOX_DMA_RX_Buffer, UBLOX_DMA_RX_BUFFER_SIZE);
 800b4e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b4e8:	4904      	ldr	r1, [pc, #16]	; (800b4fc <UBLOX_DMA_Init+0x4c>)
 800b4ea:	4802      	ldr	r0, [pc, #8]	; (800b4f4 <UBLOX_DMA_Init+0x44>)
 800b4ec:	f7fb f836 	bl	800655c <HAL_UART_Receive_DMA>
}
 800b4f0:	bf00      	nop
 800b4f2:	bd80      	pop	{r7, pc}
 800b4f4:	2000858c 	.word	0x2000858c
 800b4f8:	200082ac 	.word	0x200082ac
 800b4fc:	20006d9c 	.word	0x20006d9c

0800b500 <UBLOX_Reset_Buffer>:

void UBLOX_Reset_Buffer(void){
 800b500:	b480      	push	{r7}
 800b502:	af00      	add	r7, sp, #0
	// clear rx buffer
	//	memset(UBLOX_UART_RX_Buffer, 0, sizeof(UBLOX_UART_RX_Buffer));
	// set index back to first
	ublox_write = 0;
 800b504:	4b06      	ldr	r3, [pc, #24]	; (800b520 <UBLOX_Reset_Buffer+0x20>)
 800b506:	2200      	movs	r2, #0
 800b508:	601a      	str	r2, [r3, #0]
	//	 set null at the end
	UBLOX_UART_RX_Buffer[ublox_write] = '\0';
 800b50a:	4b05      	ldr	r3, [pc, #20]	; (800b520 <UBLOX_Reset_Buffer+0x20>)
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	4a05      	ldr	r2, [pc, #20]	; (800b524 <UBLOX_Reset_Buffer+0x24>)
 800b510:	2100      	movs	r1, #0
 800b512:	54d1      	strb	r1, [r2, r3]
}
 800b514:	bf00      	nop
 800b516:	46bd      	mov	sp, r7
 800b518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51c:	4770      	bx	lr
 800b51e:	bf00      	nop
 800b520:	20006d94 	.word	0x20006d94
 800b524:	2000719c 	.word	0x2000719c

0800b528 <ITM_Out>:
#include "_config.h"

extern osMutexId SwvMutexHandle;
extern RTC_HandleTypeDef hrtc;

void ITM_Out(uint32_t ch) {
 800b528:	b480      	push	{r7}
 800b52a:	b085      	sub	sp, #20
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	6078      	str	r0, [r7, #4]
#if (DEBUG_HUB == 1)
	int port = 0;
 800b530:	2300      	movs	r3, #0
 800b532:	60fb      	str	r3, [r7, #12]

	while (ITM->PORT[port].u32 == 0)
 800b534:	bf00      	nop
 800b536:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b540:	2b00      	cmp	r3, #0
 800b542:	d0f8      	beq.n	800b536 <ITM_Out+0xe>
		;
	ITM->PORT[port].u8 = (uint8_t) ch;
 800b544:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	b2d9      	uxtb	r1, r3
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
#endif
}
 800b552:	bf00      	nop
 800b554:	3714      	adds	r7, #20
 800b556:	46bd      	mov	sp, r7
 800b558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b55c:	4770      	bx	lr
	...

0800b560 <swvPrint>:

void swvPrint(char* ptr) {
 800b560:	b580      	push	{r7, lr}
 800b562:	b082      	sub	sp, #8
 800b564:	af00      	add	r7, sp, #0
 800b566:	6078      	str	r0, [r7, #4]
	osMutexWait(SwvMutexHandle, osWaitForever);
 800b568:	4b0d      	ldr	r3, [pc, #52]	; (800b5a0 <swvPrint+0x40>)
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	f04f 31ff 	mov.w	r1, #4294967295
 800b570:	4618      	mov	r0, r3
 800b572:	f7fb fe69 	bl	8007248 <osMutexWait>

	while (*ptr != '\0') {
 800b576:	e006      	b.n	800b586 <swvPrint+0x26>
		ITM_Out((uint32_t) *(ptr++));
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	1c5a      	adds	r2, r3, #1
 800b57c:	607a      	str	r2, [r7, #4]
 800b57e:	781b      	ldrb	r3, [r3, #0]
 800b580:	4618      	mov	r0, r3
 800b582:	f7ff ffd1 	bl	800b528 <ITM_Out>
	while (*ptr != '\0') {
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	781b      	ldrb	r3, [r3, #0]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d1f4      	bne.n	800b578 <swvPrint+0x18>
	}

	osMutexRelease(SwvMutexHandle);
 800b58e:	4b04      	ldr	r3, [pc, #16]	; (800b5a0 <swvPrint+0x40>)
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	4618      	mov	r0, r3
 800b594:	f7fb fea6 	bl	80072e4 <osMutexRelease>
}
 800b598:	bf00      	nop
 800b59a:	3708      	adds	r7, #8
 800b59c:	46bd      	mov	sp, r7
 800b59e:	bd80      	pop	{r7, pc}
 800b5a0:	200084e4 	.word	0x200084e4

0800b5a4 <swvPrintLn>:

void swvPrintLn(char* ptr) {
 800b5a4:	b580      	push	{r7, lr}
 800b5a6:	b082      	sub	sp, #8
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	6078      	str	r0, [r7, #4]
	osMutexWait(SwvMutexHandle, osWaitForever);
 800b5ac:	4b0f      	ldr	r3, [pc, #60]	; (800b5ec <swvPrintLn+0x48>)
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	f04f 31ff 	mov.w	r1, #4294967295
 800b5b4:	4618      	mov	r0, r3
 800b5b6:	f7fb fe47 	bl	8007248 <osMutexWait>

	while (*ptr != '\0') {
 800b5ba:	e006      	b.n	800b5ca <swvPrintLn+0x26>
		ITM_Out((uint32_t) *(ptr++));
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	1c5a      	adds	r2, r3, #1
 800b5c0:	607a      	str	r2, [r7, #4]
 800b5c2:	781b      	ldrb	r3, [r3, #0]
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	f7ff ffaf 	bl	800b528 <ITM_Out>
	while (*ptr != '\0') {
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	781b      	ldrb	r3, [r3, #0]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d1f4      	bne.n	800b5bc <swvPrintLn+0x18>
	}
	ITM_Out((uint32_t) '\n');
 800b5d2:	200a      	movs	r0, #10
 800b5d4:	f7ff ffa8 	bl	800b528 <ITM_Out>

	osMutexRelease(SwvMutexHandle);
 800b5d8:	4b04      	ldr	r3, [pc, #16]	; (800b5ec <swvPrintLn+0x48>)
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	4618      	mov	r0, r3
 800b5de:	f7fb fe81 	bl	80072e4 <osMutexRelease>
}
 800b5e2:	bf00      	nop
 800b5e4:	3708      	adds	r7, #8
 800b5e6:	46bd      	mov	sp, r7
 800b5e8:	bd80      	pop	{r7, pc}
 800b5ea:	bf00      	nop
 800b5ec:	200084e4 	.word	0x200084e4

0800b5f0 <ftoa>:
	swvPrint(value);
	swvPrint("\n===============================\n");
}

// Converts a floating point number to string.
void ftoa(float f, char *str, char size) {
 800b5f0:	b580      	push	{r7, lr}
 800b5f2:	b0a0      	sub	sp, #128	; 0x80
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	ed87 0a03 	vstr	s0, [r7, #12]
 800b5fa:	60b8      	str	r0, [r7, #8]
 800b5fc:	460b      	mov	r3, r1
 800b5fe:	71fb      	strb	r3, [r7, #7]
	uint8_t pos;  // position in string
	char len;  // length of decimal part of result
	char curr[100];  // temp holder for next digit
	int value;  // decimal digit(s) to convert
	pos = 0;  // initialize pos, just to be sure
 800b600:	2300      	movs	r3, #0
 800b602:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

	value = (int) f;  // truncate the floating point number
 800b606:	edd7 7a03 	vldr	s15, [r7, #12]
 800b60a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b60e:	ee17 3a90 	vmov	r3, s15
 800b612:	67bb      	str	r3, [r7, #120]	; 0x78
	itoa(value, str, 10);  // this is kinda dangerous depending on the length of str
 800b614:	220a      	movs	r2, #10
 800b616:	68b9      	ldr	r1, [r7, #8]
 800b618:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800b61a:	f005 fe73 	bl	8011304 <itoa>
	// now str array has the digits before the decimal

	if (f < 0)  // handle negative numbers
 800b61e:	edd7 7a03 	vldr	s15, [r7, #12]
 800b622:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b62a:	d508      	bpl.n	800b63e <ftoa+0x4e>
			{
		f *= -1;
 800b62c:	edd7 7a03 	vldr	s15, [r7, #12]
 800b630:	eef1 7a67 	vneg.f32	s15, s15
 800b634:	edc7 7a03 	vstr	s15, [r7, #12]
		value *= -1;
 800b638:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b63a:	425b      	negs	r3, r3
 800b63c:	67bb      	str	r3, [r7, #120]	; 0x78
	}

	len = strlen(str);  // find out how big the integer part was
 800b63e:	68b8      	ldr	r0, [r7, #8]
 800b640:	f7f4 fdd0 	bl	80001e4 <strlen>
 800b644:	4603      	mov	r3, r0
 800b646:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	pos = len;  // position the pointer to the end of the integer part
 800b64a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b64e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	str[pos++] = '.';  // add decimal point to string
 800b652:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b656:	1c5a      	adds	r2, r3, #1
 800b658:	f887 207f 	strb.w	r2, [r7, #127]	; 0x7f
 800b65c:	461a      	mov	r2, r3
 800b65e:	68bb      	ldr	r3, [r7, #8]
 800b660:	4413      	add	r3, r2
 800b662:	222e      	movs	r2, #46	; 0x2e
 800b664:	701a      	strb	r2, [r3, #0]

	while (pos < (size + len + 1))  // process remaining digits
 800b666:	e02a      	b.n	800b6be <ftoa+0xce>
	{
		f = f - (float) value;  // hack off the whole part of the number
 800b668:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b66a:	ee07 3a90 	vmov	s15, r3
 800b66e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b672:	ed97 7a03 	vldr	s14, [r7, #12]
 800b676:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b67a:	edc7 7a03 	vstr	s15, [r7, #12]
		f *= 10;  // move next digit over
 800b67e:	edd7 7a03 	vldr	s15, [r7, #12]
 800b682:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800b686:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b68a:	edc7 7a03 	vstr	s15, [r7, #12]
		value = (int) f;  // get next digit
 800b68e:	edd7 7a03 	vldr	s15, [r7, #12]
 800b692:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b696:	ee17 3a90 	vmov	r3, s15
 800b69a:	67bb      	str	r3, [r7, #120]	; 0x78
		itoa(value, curr, 10); // convert digit to string
 800b69c:	f107 0310 	add.w	r3, r7, #16
 800b6a0:	220a      	movs	r2, #10
 800b6a2:	4619      	mov	r1, r3
 800b6a4:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800b6a6:	f005 fe2d 	bl	8011304 <itoa>
		str[pos++] = *curr; // add digit to result string and increment pointer
 800b6aa:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b6ae:	1c5a      	adds	r2, r3, #1
 800b6b0:	f887 207f 	strb.w	r2, [r7, #127]	; 0x7f
 800b6b4:	461a      	mov	r2, r3
 800b6b6:	68bb      	ldr	r3, [r7, #8]
 800b6b8:	4413      	add	r3, r2
 800b6ba:	7c3a      	ldrb	r2, [r7, #16]
 800b6bc:	701a      	strb	r2, [r3, #0]
	while (pos < (size + len + 1))  // process remaining digits
 800b6be:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 800b6c2:	79f9      	ldrb	r1, [r7, #7]
 800b6c4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b6c8:	440b      	add	r3, r1
 800b6ca:	3301      	adds	r3, #1
 800b6cc:	429a      	cmp	r2, r3
 800b6ce:	dbcb      	blt.n	800b668 <ftoa+0x78>
	}
}
 800b6d0:	bf00      	nop
 800b6d2:	3780      	adds	r7, #128	; 0x80
 800b6d4:	46bd      	mov	sp, r7
 800b6d6:	bd80      	pop	{r7, pc}

0800b6d8 <convertHourTo>:

uint8_t convertHourTo(uint8_t hour, int offset) {
 800b6d8:	b480      	push	{r7}
 800b6da:	b083      	sub	sp, #12
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	4603      	mov	r3, r0
 800b6e0:	6039      	str	r1, [r7, #0]
 800b6e2:	71fb      	strb	r3, [r7, #7]
	return (hour + offset) > 23 ? ((hour + offset) - 24) : (hour + offset);
 800b6e4:	79fa      	ldrb	r2, [r7, #7]
 800b6e6:	683b      	ldr	r3, [r7, #0]
 800b6e8:	4413      	add	r3, r2
 800b6ea:	2b17      	cmp	r3, #23
 800b6ec:	dd07      	ble.n	800b6fe <convertHourTo+0x26>
 800b6ee:	683b      	ldr	r3, [r7, #0]
 800b6f0:	b2da      	uxtb	r2, r3
 800b6f2:	79fb      	ldrb	r3, [r7, #7]
 800b6f4:	4413      	add	r3, r2
 800b6f6:	b2db      	uxtb	r3, r3
 800b6f8:	3b18      	subs	r3, #24
 800b6fa:	b2db      	uxtb	r3, r3
 800b6fc:	e004      	b.n	800b708 <convertHourTo+0x30>
 800b6fe:	683b      	ldr	r3, [r7, #0]
 800b700:	b2da      	uxtb	r2, r3
 800b702:	79fb      	ldrb	r3, [r7, #7]
 800b704:	4413      	add	r3, r2
 800b706:	b2db      	uxtb	r3, r3
}
 800b708:	4618      	mov	r0, r3
 800b70a:	370c      	adds	r7, #12
 800b70c:	46bd      	mov	sp, r7
 800b70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b712:	4770      	bx	lr

0800b714 <BSP_Led_Write>:

void BSP_Led_Write(uint8_t state) {
 800b714:	b580      	push	{r7, lr}
 800b716:	b082      	sub	sp, #8
 800b718:	af00      	add	r7, sp, #0
 800b71a:	4603      	mov	r3, r0
 800b71c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, state);
 800b71e:	79fb      	ldrb	r3, [r7, #7]
 800b720:	461a      	mov	r2, r3
 800b722:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b726:	480e      	ldr	r0, [pc, #56]	; (800b760 <BSP_Led_Write+0x4c>)
 800b728:	f7f6 ffe6 	bl	80026f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, state);
 800b72c:	79fb      	ldrb	r3, [r7, #7]
 800b72e:	461a      	mov	r2, r3
 800b730:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800b734:	480a      	ldr	r0, [pc, #40]	; (800b760 <BSP_Led_Write+0x4c>)
 800b736:	f7f6 ffdf 	bl	80026f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, state);
 800b73a:	79fb      	ldrb	r3, [r7, #7]
 800b73c:	461a      	mov	r2, r3
 800b73e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b742:	4807      	ldr	r0, [pc, #28]	; (800b760 <BSP_Led_Write+0x4c>)
 800b744:	f7f6 ffd8 	bl	80026f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, state);
 800b748:	79fb      	ldrb	r3, [r7, #7]
 800b74a:	461a      	mov	r2, r3
 800b74c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800b750:	4803      	ldr	r0, [pc, #12]	; (800b760 <BSP_Led_Write+0x4c>)
 800b752:	f7f6 ffd1 	bl	80026f8 <HAL_GPIO_WritePin>
}
 800b756:	bf00      	nop
 800b758:	3708      	adds	r7, #8
 800b75a:	46bd      	mov	sp, r7
 800b75c:	bd80      	pop	{r7, pc}
 800b75e:	bf00      	nop
 800b760:	40020c00 	.word	0x40020c00

0800b764 <BSP_Led_Toggle>:

void BSP_Led_Toggle(void) {
 800b764:	b580      	push	{r7, lr}
 800b766:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LD6_GPIO_Port, LD6_Pin);
 800b768:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b76c:	4809      	ldr	r0, [pc, #36]	; (800b794 <BSP_Led_Toggle+0x30>)
 800b76e:	f7f6 ffdc 	bl	800272a <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LD5_GPIO_Port, LD5_Pin);
 800b772:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800b776:	4807      	ldr	r0, [pc, #28]	; (800b794 <BSP_Led_Toggle+0x30>)
 800b778:	f7f6 ffd7 	bl	800272a <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 800b77c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b780:	4804      	ldr	r0, [pc, #16]	; (800b794 <BSP_Led_Toggle+0x30>)
 800b782:	f7f6 ffd2 	bl	800272a <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 800b786:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800b78a:	4802      	ldr	r0, [pc, #8]	; (800b794 <BSP_Led_Toggle+0x30>)
 800b78c:	f7f6 ffcd 	bl	800272a <HAL_GPIO_TogglePin>
}
 800b790:	bf00      	nop
 800b792:	bd80      	pop	{r7, pc}
 800b794:	40020c00 	.word	0x40020c00

0800b798 <Get_RTC>:

void Get_RTC(char *dateTime) {
 800b798:	b5b0      	push	{r4, r5, r7, lr}
 800b79a:	b08c      	sub	sp, #48	; 0x30
 800b79c:	af04      	add	r7, sp, #16
 800b79e:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef currentTime;
	RTC_DateTypeDef currentDate;

	// get the RTC
	HAL_RTC_GetTime(&hrtc, &currentTime, RTC_FORMAT_BIN);
 800b7a0:	f107 030c 	add.w	r3, r7, #12
 800b7a4:	2200      	movs	r2, #0
 800b7a6:	4619      	mov	r1, r3
 800b7a8:	480f      	ldr	r0, [pc, #60]	; (800b7e8 <Get_RTC+0x50>)
 800b7aa:	f7fa f9cf 	bl	8005b4c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &currentDate, RTC_FORMAT_BIN);
 800b7ae:	f107 0308 	add.w	r3, r7, #8
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	4619      	mov	r1, r3
 800b7b6:	480c      	ldr	r0, [pc, #48]	; (800b7e8 <Get_RTC+0x50>)
 800b7b8:	f7fa facd 	bl	8005d56 <HAL_RTC_GetDate>

	// combine RTC datetime
	sprintf(dateTime, "20%02d%02d%02d%02d%02d%02d", currentDate.Year, currentDate.Month, currentDate.Date, currentTime.Hours,
 800b7bc:	7afb      	ldrb	r3, [r7, #11]
 800b7be:	461c      	mov	r4, r3
 800b7c0:	7a7b      	ldrb	r3, [r7, #9]
 800b7c2:	461d      	mov	r5, r3
 800b7c4:	7abb      	ldrb	r3, [r7, #10]
 800b7c6:	7b3a      	ldrb	r2, [r7, #12]
			currentTime.Minutes, currentTime.Seconds);
 800b7c8:	7b79      	ldrb	r1, [r7, #13]
 800b7ca:	7bb8      	ldrb	r0, [r7, #14]
	sprintf(dateTime, "20%02d%02d%02d%02d%02d%02d", currentDate.Year, currentDate.Month, currentDate.Date, currentTime.Hours,
 800b7cc:	9003      	str	r0, [sp, #12]
 800b7ce:	9102      	str	r1, [sp, #8]
 800b7d0:	9201      	str	r2, [sp, #4]
 800b7d2:	9300      	str	r3, [sp, #0]
 800b7d4:	462b      	mov	r3, r5
 800b7d6:	4622      	mov	r2, r4
 800b7d8:	4904      	ldr	r1, [pc, #16]	; (800b7ec <Get_RTC+0x54>)
 800b7da:	6878      	ldr	r0, [r7, #4]
 800b7dc:	f005 fda8 	bl	8011330 <siprintf>
}
 800b7e0:	bf00      	nop
 800b7e2:	3720      	adds	r7, #32
 800b7e4:	46bd      	mov	sp, r7
 800b7e6:	bdb0      	pop	{r4, r5, r7, pc}
 800b7e8:	200084c4 	.word	0x200084c4
 800b7ec:	08014abc 	.word	0x08014abc

0800b7f0 <Set_RTC>:

void Set_RTC(char *dateTime) {
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b08e      	sub	sp, #56	; 0x38
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]
	char Y[2], M[2], D[2], H[2], I[2], S[2];
	RTC_TimeTypeDef currentTime;
	RTC_DateTypeDef currentDate;

	// parsing
	strncpy(Y, dateTime + 2, 2);
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	1c99      	adds	r1, r3, #2
 800b7fc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800b800:	2202      	movs	r2, #2
 800b802:	4618      	mov	r0, r3
 800b804:	f005 fddb 	bl	80113be <strncpy>
	strncpy(M, dateTime + 4, 2);
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	1d19      	adds	r1, r3, #4
 800b80c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b810:	2202      	movs	r2, #2
 800b812:	4618      	mov	r0, r3
 800b814:	f005 fdd3 	bl	80113be <strncpy>
	strncpy(D, dateTime + 6, 2);
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	1d99      	adds	r1, r3, #6
 800b81c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b820:	2202      	movs	r2, #2
 800b822:	4618      	mov	r0, r3
 800b824:	f005 fdcb 	bl	80113be <strncpy>
	strncpy(H, dateTime + 8, 2);
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	f103 0108 	add.w	r1, r3, #8
 800b82e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b832:	2202      	movs	r2, #2
 800b834:	4618      	mov	r0, r3
 800b836:	f005 fdc2 	bl	80113be <strncpy>
	strncpy(I, dateTime + 10, 2);
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	f103 010a 	add.w	r1, r3, #10
 800b840:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b844:	2202      	movs	r2, #2
 800b846:	4618      	mov	r0, r3
 800b848:	f005 fdb9 	bl	80113be <strncpy>
	strncpy(S, dateTime + 12, 2);
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	f103 010c 	add.w	r1, r3, #12
 800b852:	f107 0320 	add.w	r3, r7, #32
 800b856:	2202      	movs	r2, #2
 800b858:	4618      	mov	r0, r3
 800b85a:	f005 fdb0 	bl	80113be <strncpy>

	// assing to object
	currentDate.WeekDay = RTC_WEEKDAY_SUNDAY; // day is ignored
 800b85e:	2307      	movs	r3, #7
 800b860:	723b      	strb	r3, [r7, #8]
	currentDate.Year = atoi(Y);
 800b862:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800b866:	4618      	mov	r0, r3
 800b868:	f005 fd05 	bl	8011276 <atoi>
 800b86c:	4603      	mov	r3, r0
 800b86e:	b2db      	uxtb	r3, r3
 800b870:	72fb      	strb	r3, [r7, #11]
	currentDate.Month = atoi(M);
 800b872:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b876:	4618      	mov	r0, r3
 800b878:	f005 fcfd 	bl	8011276 <atoi>
 800b87c:	4603      	mov	r3, r0
 800b87e:	b2db      	uxtb	r3, r3
 800b880:	727b      	strb	r3, [r7, #9]
	currentDate.Date = atoi(D);
 800b882:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b886:	4618      	mov	r0, r3
 800b888:	f005 fcf5 	bl	8011276 <atoi>
 800b88c:	4603      	mov	r3, r0
 800b88e:	b2db      	uxtb	r3, r3
 800b890:	72bb      	strb	r3, [r7, #10]
	currentTime.Hours = atoi(H);
 800b892:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b896:	4618      	mov	r0, r3
 800b898:	f005 fced 	bl	8011276 <atoi>
 800b89c:	4603      	mov	r3, r0
 800b89e:	b2db      	uxtb	r3, r3
 800b8a0:	733b      	strb	r3, [r7, #12]
	currentTime.Minutes = atoi(I);
 800b8a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	f005 fce5 	bl	8011276 <atoi>
 800b8ac:	4603      	mov	r3, r0
 800b8ae:	b2db      	uxtb	r3, r3
 800b8b0:	737b      	strb	r3, [r7, #13]
	currentTime.SecondFraction = atoi(S);
 800b8b2:	f107 0320 	add.w	r3, r7, #32
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	f005 fcdd 	bl	8011276 <atoi>
 800b8bc:	4603      	mov	r3, r0
 800b8be:	617b      	str	r3, [r7, #20]

	// set the RTC
	HAL_RTC_SetTime(&hrtc, &currentTime, RTC_FORMAT_BIN);
 800b8c0:	f107 030c 	add.w	r3, r7, #12
 800b8c4:	2200      	movs	r2, #0
 800b8c6:	4619      	mov	r1, r3
 800b8c8:	4806      	ldr	r0, [pc, #24]	; (800b8e4 <Set_RTC+0xf4>)
 800b8ca:	f7fa f882 	bl	80059d2 <HAL_RTC_SetTime>
	HAL_RTC_SetDate(&hrtc, &currentDate, RTC_FORMAT_BIN);
 800b8ce:	f107 0308 	add.w	r3, r7, #8
 800b8d2:	2200      	movs	r2, #0
 800b8d4:	4619      	mov	r1, r3
 800b8d6:	4803      	ldr	r0, [pc, #12]	; (800b8e4 <Set_RTC+0xf4>)
 800b8d8:	f7fa f996 	bl	8005c08 <HAL_RTC_SetDate>
}
 800b8dc:	bf00      	nop
 800b8de:	3738      	adds	r7, #56	; 0x38
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	bd80      	pop	{r7, pc}
 800b8e4:	200084c4 	.word	0x200084c4

0800b8e8 <EE_Init>:
 *   corruption after a power loss.
 * @param  None.
 * @retval - Flash error code: on write Flash error
 *         - FLASH_COMPLETE: on success
 */
uint16_t EE_Init(void) {
 800b8e8:	b580      	push	{r7, lr}
 800b8ea:	b08a      	sub	sp, #40	; 0x28
 800b8ec:	af00      	add	r7, sp, #0
	uint16_t PageStatus0 = 6, PageStatus1 = 6;
 800b8ee:	2306      	movs	r3, #6
 800b8f0:	847b      	strh	r3, [r7, #34]	; 0x22
 800b8f2:	2306      	movs	r3, #6
 800b8f4:	843b      	strh	r3, [r7, #32]
	uint16_t VarIdx = 0;
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t EepromStatus = 0, ReadStatus = 0;
 800b8fa:	2300      	movs	r3, #0
 800b8fc:	83fb      	strh	r3, [r7, #30]
 800b8fe:	2300      	movs	r3, #0
 800b900:	83bb      	strh	r3, [r7, #28]
	int16_t x = -1;
 800b902:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b906:	84bb      	strh	r3, [r7, #36]	; 0x24
	HAL_StatusTypeDef FlashStatus;
	uint32_t SectorError = 0;
 800b908:	2300      	movs	r3, #0
 800b90a:	617b      	str	r3, [r7, #20]
	FLASH_EraseInitTypeDef pEraseInit;

	/* Unlock the Flash Program Erase controller */
	HAL_FLASH_Unlock();
 800b90c:	f7f6 f9d8 	bl	8001cc0 <HAL_FLASH_Unlock>

	/* Get Page0 status */
	PageStatus0 = (*(__IO uint16_t*) PAGE0_BASE_ADDRESS);
 800b910:	4b9f      	ldr	r3, [pc, #636]	; (800bb90 <EE_Init+0x2a8>)
 800b912:	881b      	ldrh	r3, [r3, #0]
 800b914:	847b      	strh	r3, [r7, #34]	; 0x22
	/* Get Page1 status */
	PageStatus1 = (*(__IO uint16_t*) PAGE1_BASE_ADDRESS);
 800b916:	4b9f      	ldr	r3, [pc, #636]	; (800bb94 <EE_Init+0x2ac>)
 800b918:	881b      	ldrh	r3, [r3, #0]
 800b91a:	843b      	strh	r3, [r7, #32]

	pEraseInit.TypeErase = TYPEERASE_SECTORS;
 800b91c:	2300      	movs	r3, #0
 800b91e:	603b      	str	r3, [r7, #0]
	pEraseInit.Sector = PAGE0_ID;
 800b920:	230a      	movs	r3, #10
 800b922:	60bb      	str	r3, [r7, #8]
	pEraseInit.NbSectors = 1;
 800b924:	2301      	movs	r3, #1
 800b926:	60fb      	str	r3, [r7, #12]
	pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800b928:	2302      	movs	r3, #2
 800b92a:	613b      	str	r3, [r7, #16]

	/* Check for invalid header states and repair if necessary */
	switch (PageStatus0) {
 800b92c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b92e:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 800b932:	4293      	cmp	r3, r2
 800b934:	d057      	beq.n	800b9e6 <EE_Init+0xfe>
 800b936:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b93a:	4293      	cmp	r3, r2
 800b93c:	d003      	beq.n	800b946 <EE_Init+0x5e>
 800b93e:	2b00      	cmp	r3, #0
 800b940:	f000 80f4 	beq.w	800bb2c <EE_Init+0x244>
 800b944:	e18d      	b.n	800bc62 <EE_Init+0x37a>
		case ERASED:
			if (PageStatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 800b946:	8c3b      	ldrh	r3, [r7, #32]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d116      	bne.n	800b97a <EE_Init+0x92>
			{
				/* Erase Page0 */
				if (!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS)) {
 800b94c:	4890      	ldr	r0, [pc, #576]	; (800bb90 <EE_Init+0x2a8>)
 800b94e:	f000 f9a9 	bl	800bca4 <EE_VerifyPageFullyErased>
 800b952:	4603      	mov	r3, r0
 800b954:	2b00      	cmp	r3, #0
 800b956:	f040 818e 	bne.w	800bc76 <EE_Init+0x38e>
					FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800b95a:	f107 0214 	add.w	r2, r7, #20
 800b95e:	463b      	mov	r3, r7
 800b960:	4611      	mov	r1, r2
 800b962:	4618      	mov	r0, r3
 800b964:	f7f6 fafa 	bl	8001f5c <HAL_FLASHEx_Erase>
 800b968:	4603      	mov	r3, r0
 800b96a:	76fb      	strb	r3, [r7, #27]
					/* If erase operation was failed, a Flash error code is returned */
					if (FlashStatus != HAL_OK) {
 800b96c:	7efb      	ldrb	r3, [r7, #27]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	f000 8181 	beq.w	800bc76 <EE_Init+0x38e>
						return FlashStatus;
 800b974:	7efb      	ldrb	r3, [r7, #27]
 800b976:	b29b      	uxth	r3, r3
 800b978:	e185      	b.n	800bc86 <EE_Init+0x39e>
					}
				}
			} else if (PageStatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 800b97a:	8c3b      	ldrh	r3, [r7, #32]
 800b97c:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 800b980:	4293      	cmp	r3, r2
 800b982:	d125      	bne.n	800b9d0 <EE_Init+0xe8>
			{
				/* Erase Page0 */
				if (!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS)) {
 800b984:	4882      	ldr	r0, [pc, #520]	; (800bb90 <EE_Init+0x2a8>)
 800b986:	f000 f98d 	bl	800bca4 <EE_VerifyPageFullyErased>
 800b98a:	4603      	mov	r3, r0
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d10e      	bne.n	800b9ae <EE_Init+0xc6>
					FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800b990:	f107 0214 	add.w	r2, r7, #20
 800b994:	463b      	mov	r3, r7
 800b996:	4611      	mov	r1, r2
 800b998:	4618      	mov	r0, r3
 800b99a:	f7f6 fadf 	bl	8001f5c <HAL_FLASHEx_Erase>
 800b99e:	4603      	mov	r3, r0
 800b9a0:	76fb      	strb	r3, [r7, #27]
					/* If erase operation was failed, a Flash error code is returned */
					if (FlashStatus != HAL_OK) {
 800b9a2:	7efb      	ldrb	r3, [r7, #27]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d002      	beq.n	800b9ae <EE_Init+0xc6>
						return FlashStatus;
 800b9a8:	7efb      	ldrb	r3, [r7, #27]
 800b9aa:	b29b      	uxth	r3, r3
 800b9ac:	e16b      	b.n	800bc86 <EE_Init+0x39e>
					}
				}
				/* Mark Page1 as valid */
				FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);
 800b9ae:	f04f 0200 	mov.w	r2, #0
 800b9b2:	f04f 0300 	mov.w	r3, #0
 800b9b6:	4977      	ldr	r1, [pc, #476]	; (800bb94 <EE_Init+0x2ac>)
 800b9b8:	2001      	movs	r0, #1
 800b9ba:	f7f6 f92d 	bl	8001c18 <HAL_FLASH_Program>
 800b9be:	4603      	mov	r3, r0
 800b9c0:	76fb      	strb	r3, [r7, #27]
				/* If program operation was failed, a Flash error code is returned */
				if (FlashStatus != HAL_OK) {
 800b9c2:	7efb      	ldrb	r3, [r7, #27]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	f000 8156 	beq.w	800bc76 <EE_Init+0x38e>
					return FlashStatus;
 800b9ca:	7efb      	ldrb	r3, [r7, #27]
 800b9cc:	b29b      	uxth	r3, r3
 800b9ce:	e15a      	b.n	800bc86 <EE_Init+0x39e>
				}
			} else /* First EEPROM access (Page0&1 are erased) or invalid state -> format EEPROM */
			{
				/* Erase both Page0 and Page1 and set Page0 as valid page */
				FlashStatus = EE_Format();
 800b9d0:	f000 f9fa 	bl	800bdc8 <EE_Format>
 800b9d4:	4603      	mov	r3, r0
 800b9d6:	76fb      	strb	r3, [r7, #27]
				/* If erase/program operation was failed, a Flash error code is returned */
				if (FlashStatus != HAL_OK) {
 800b9d8:	7efb      	ldrb	r3, [r7, #27]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	f000 814b 	beq.w	800bc76 <EE_Init+0x38e>
					return FlashStatus;
 800b9e0:	7efb      	ldrb	r3, [r7, #27]
 800b9e2:	b29b      	uxth	r3, r3
 800b9e4:	e14f      	b.n	800bc86 <EE_Init+0x39e>
				}
			}
			break;

		case RECEIVE_DATA:
			if (PageStatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 800b9e6:	8c3b      	ldrh	r3, [r7, #32]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d163      	bne.n	800bab4 <EE_Init+0x1cc>
			{
				/* Transfer data from Page1 to Page0 */
				for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++) {
 800b9ec:	2300      	movs	r3, #0
 800b9ee:	84fb      	strh	r3, [r7, #38]	; 0x26
 800b9f0:	e030      	b.n	800ba54 <EE_Init+0x16c>
					if ((*(__IO uint16_t*) (PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx]) {
 800b9f2:	4b69      	ldr	r3, [pc, #420]	; (800bb98 <EE_Init+0x2b0>)
 800b9f4:	881b      	ldrh	r3, [r3, #0]
 800b9f6:	b29a      	uxth	r2, r3
 800b9f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b9fa:	4968      	ldr	r1, [pc, #416]	; (800bb9c <EE_Init+0x2b4>)
 800b9fc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800ba00:	429a      	cmp	r2, r3
 800ba02:	d101      	bne.n	800ba08 <EE_Init+0x120>
						x = VarIdx;
 800ba04:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ba06:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
					if (VarIdx != x) {
 800ba08:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ba0a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800ba0e:	429a      	cmp	r2, r3
 800ba10:	d01d      	beq.n	800ba4e <EE_Init+0x166>
						/* Read the last variables' updates */
						ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 800ba12:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ba14:	4a61      	ldr	r2, [pc, #388]	; (800bb9c <EE_Init+0x2b4>)
 800ba16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ba1a:	4961      	ldr	r1, [pc, #388]	; (800bba0 <EE_Init+0x2b8>)
 800ba1c:	4618      	mov	r0, r3
 800ba1e:	f000 f967 	bl	800bcf0 <EE_ReadVariable>
 800ba22:	4603      	mov	r3, r0
 800ba24:	83bb      	strh	r3, [r7, #28]
						/* In case variable corresponding to the virtual address was found */
						if (ReadStatus != 0x1) {
 800ba26:	8bbb      	ldrh	r3, [r7, #28]
 800ba28:	2b01      	cmp	r3, #1
 800ba2a:	d010      	beq.n	800ba4e <EE_Init+0x166>
							/* Transfer the variable to the Page0 */
							EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 800ba2c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ba2e:	4a5b      	ldr	r2, [pc, #364]	; (800bb9c <EE_Init+0x2b4>)
 800ba30:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800ba34:	4b5a      	ldr	r3, [pc, #360]	; (800bba0 <EE_Init+0x2b8>)
 800ba36:	881b      	ldrh	r3, [r3, #0]
 800ba38:	4619      	mov	r1, r3
 800ba3a:	4610      	mov	r0, r2
 800ba3c:	f000 fa5c 	bl	800bef8 <EE_VerifyPageFullWriteVariable>
 800ba40:	4603      	mov	r3, r0
 800ba42:	83fb      	strh	r3, [r7, #30]
							/* If program operation was failed, a Flash error code is returned */
							if (EepromStatus != HAL_OK) {
 800ba44:	8bfb      	ldrh	r3, [r7, #30]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d001      	beq.n	800ba4e <EE_Init+0x166>
								return EepromStatus;
 800ba4a:	8bfb      	ldrh	r3, [r7, #30]
 800ba4c:	e11b      	b.n	800bc86 <EE_Init+0x39e>
				for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++) {
 800ba4e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ba50:	3301      	adds	r3, #1
 800ba52:	84fb      	strh	r3, [r7, #38]	; 0x26
 800ba54:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ba56:	2b01      	cmp	r3, #1
 800ba58:	d9cb      	bls.n	800b9f2 <EE_Init+0x10a>
							}
						}
					}
				}
				/* Mark Page0 as valid */
				FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 800ba5a:	f04f 0200 	mov.w	r2, #0
 800ba5e:	f04f 0300 	mov.w	r3, #0
 800ba62:	494b      	ldr	r1, [pc, #300]	; (800bb90 <EE_Init+0x2a8>)
 800ba64:	2001      	movs	r0, #1
 800ba66:	f7f6 f8d7 	bl	8001c18 <HAL_FLASH_Program>
 800ba6a:	4603      	mov	r3, r0
 800ba6c:	76fb      	strb	r3, [r7, #27]
				/* If program operation was failed, a Flash error code is returned */
				if (FlashStatus != HAL_OK) {
 800ba6e:	7efb      	ldrb	r3, [r7, #27]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d002      	beq.n	800ba7a <EE_Init+0x192>
					return FlashStatus;
 800ba74:	7efb      	ldrb	r3, [r7, #27]
 800ba76:	b29b      	uxth	r3, r3
 800ba78:	e105      	b.n	800bc86 <EE_Init+0x39e>
				}
				pEraseInit.Sector = PAGE1_ID;
 800ba7a:	230b      	movs	r3, #11
 800ba7c:	60bb      	str	r3, [r7, #8]
				pEraseInit.NbSectors = 1;
 800ba7e:	2301      	movs	r3, #1
 800ba80:	60fb      	str	r3, [r7, #12]
				pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800ba82:	2302      	movs	r3, #2
 800ba84:	613b      	str	r3, [r7, #16]
				/* Erase Page1 */
				if (!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS)) {
 800ba86:	4843      	ldr	r0, [pc, #268]	; (800bb94 <EE_Init+0x2ac>)
 800ba88:	f000 f90c 	bl	800bca4 <EE_VerifyPageFullyErased>
 800ba8c:	4603      	mov	r3, r0
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	f040 80f3 	bne.w	800bc7a <EE_Init+0x392>
					FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800ba94:	f107 0214 	add.w	r2, r7, #20
 800ba98:	463b      	mov	r3, r7
 800ba9a:	4611      	mov	r1, r2
 800ba9c:	4618      	mov	r0, r3
 800ba9e:	f7f6 fa5d 	bl	8001f5c <HAL_FLASHEx_Erase>
 800baa2:	4603      	mov	r3, r0
 800baa4:	76fb      	strb	r3, [r7, #27]
					/* If erase operation was failed, a Flash error code is returned */
					if (FlashStatus != HAL_OK) {
 800baa6:	7efb      	ldrb	r3, [r7, #27]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	f000 80e6 	beq.w	800bc7a <EE_Init+0x392>
						return FlashStatus;
 800baae:	7efb      	ldrb	r3, [r7, #27]
 800bab0:	b29b      	uxth	r3, r3
 800bab2:	e0e8      	b.n	800bc86 <EE_Init+0x39e>
					}
				}
			} else if (PageStatus1 == ERASED) /* Page0 receive, Page1 erased */
 800bab4:	8c3b      	ldrh	r3, [r7, #32]
 800bab6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800baba:	4293      	cmp	r3, r2
 800babc:	d12b      	bne.n	800bb16 <EE_Init+0x22e>
			{
				pEraseInit.Sector = PAGE1_ID;
 800babe:	230b      	movs	r3, #11
 800bac0:	60bb      	str	r3, [r7, #8]
				pEraseInit.NbSectors = 1;
 800bac2:	2301      	movs	r3, #1
 800bac4:	60fb      	str	r3, [r7, #12]
				pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800bac6:	2302      	movs	r3, #2
 800bac8:	613b      	str	r3, [r7, #16]
				/* Erase Page1 */
				if (!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS)) {
 800baca:	4832      	ldr	r0, [pc, #200]	; (800bb94 <EE_Init+0x2ac>)
 800bacc:	f000 f8ea 	bl	800bca4 <EE_VerifyPageFullyErased>
 800bad0:	4603      	mov	r3, r0
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d10e      	bne.n	800baf4 <EE_Init+0x20c>
					FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800bad6:	f107 0214 	add.w	r2, r7, #20
 800bada:	463b      	mov	r3, r7
 800badc:	4611      	mov	r1, r2
 800bade:	4618      	mov	r0, r3
 800bae0:	f7f6 fa3c 	bl	8001f5c <HAL_FLASHEx_Erase>
 800bae4:	4603      	mov	r3, r0
 800bae6:	76fb      	strb	r3, [r7, #27]
					/* If erase operation was failed, a Flash error code is returned */
					if (FlashStatus != HAL_OK) {
 800bae8:	7efb      	ldrb	r3, [r7, #27]
 800baea:	2b00      	cmp	r3, #0
 800baec:	d002      	beq.n	800baf4 <EE_Init+0x20c>
						return FlashStatus;
 800baee:	7efb      	ldrb	r3, [r7, #27]
 800baf0:	b29b      	uxth	r3, r3
 800baf2:	e0c8      	b.n	800bc86 <EE_Init+0x39e>
					}
				}
				/* Mark Page0 as valid */
				FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 800baf4:	f04f 0200 	mov.w	r2, #0
 800baf8:	f04f 0300 	mov.w	r3, #0
 800bafc:	4924      	ldr	r1, [pc, #144]	; (800bb90 <EE_Init+0x2a8>)
 800bafe:	2001      	movs	r0, #1
 800bb00:	f7f6 f88a 	bl	8001c18 <HAL_FLASH_Program>
 800bb04:	4603      	mov	r3, r0
 800bb06:	76fb      	strb	r3, [r7, #27]
				/* If program operation was failed, a Flash error code is returned */
				if (FlashStatus != HAL_OK) {
 800bb08:	7efb      	ldrb	r3, [r7, #27]
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	f000 80b5 	beq.w	800bc7a <EE_Init+0x392>
					return FlashStatus;
 800bb10:	7efb      	ldrb	r3, [r7, #27]
 800bb12:	b29b      	uxth	r3, r3
 800bb14:	e0b7      	b.n	800bc86 <EE_Init+0x39e>
				}
			} else /* Invalid state -> format eeprom */
			{
				/* Erase both Page0 and Page1 and set Page0 as valid page */
				FlashStatus = EE_Format();
 800bb16:	f000 f957 	bl	800bdc8 <EE_Format>
 800bb1a:	4603      	mov	r3, r0
 800bb1c:	76fb      	strb	r3, [r7, #27]
				/* If erase/program operation was failed, a Flash error code is returned */
				if (FlashStatus != HAL_OK) {
 800bb1e:	7efb      	ldrb	r3, [r7, #27]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	f000 80aa 	beq.w	800bc7a <EE_Init+0x392>
					return FlashStatus;
 800bb26:	7efb      	ldrb	r3, [r7, #27]
 800bb28:	b29b      	uxth	r3, r3
 800bb2a:	e0ac      	b.n	800bc86 <EE_Init+0x39e>
				}
			}
			break;

		case VALID_PAGE:
			if (PageStatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 800bb2c:	8c3b      	ldrh	r3, [r7, #32]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d10a      	bne.n	800bb48 <EE_Init+0x260>
			{
				/* Erase both Page0 and Page1 and set Page0 as valid page */
				FlashStatus = EE_Format();
 800bb32:	f000 f949 	bl	800bdc8 <EE_Format>
 800bb36:	4603      	mov	r3, r0
 800bb38:	76fb      	strb	r3, [r7, #27]
				/* If erase/program operation was failed, a Flash error code is returned */
				if (FlashStatus != HAL_OK) {
 800bb3a:	7efb      	ldrb	r3, [r7, #27]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	f000 809e 	beq.w	800bc7e <EE_Init+0x396>
					return FlashStatus;
 800bb42:	7efb      	ldrb	r3, [r7, #27]
 800bb44:	b29b      	uxth	r3, r3
 800bb46:	e09e      	b.n	800bc86 <EE_Init+0x39e>
				}
			} else if (PageStatus1 == ERASED) /* Page0 valid, Page1 erased */
 800bb48:	8c3b      	ldrh	r3, [r7, #32]
 800bb4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bb4e:	4293      	cmp	r3, r2
 800bb50:	d11b      	bne.n	800bb8a <EE_Init+0x2a2>
			{
				pEraseInit.Sector = PAGE1_ID;
 800bb52:	230b      	movs	r3, #11
 800bb54:	60bb      	str	r3, [r7, #8]
				pEraseInit.NbSectors = 1;
 800bb56:	2301      	movs	r3, #1
 800bb58:	60fb      	str	r3, [r7, #12]
				pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800bb5a:	2302      	movs	r3, #2
 800bb5c:	613b      	str	r3, [r7, #16]
				/* Erase Page1 */
				if (!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS)) {
 800bb5e:	480d      	ldr	r0, [pc, #52]	; (800bb94 <EE_Init+0x2ac>)
 800bb60:	f000 f8a0 	bl	800bca4 <EE_VerifyPageFullyErased>
 800bb64:	4603      	mov	r3, r0
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	f040 8089 	bne.w	800bc7e <EE_Init+0x396>
					FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800bb6c:	f107 0214 	add.w	r2, r7, #20
 800bb70:	463b      	mov	r3, r7
 800bb72:	4611      	mov	r1, r2
 800bb74:	4618      	mov	r0, r3
 800bb76:	f7f6 f9f1 	bl	8001f5c <HAL_FLASHEx_Erase>
 800bb7a:	4603      	mov	r3, r0
 800bb7c:	76fb      	strb	r3, [r7, #27]
					/* If erase operation was failed, a Flash error code is returned */
					if (FlashStatus != HAL_OK) {
 800bb7e:	7efb      	ldrb	r3, [r7, #27]
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d07c      	beq.n	800bc7e <EE_Init+0x396>
						return FlashStatus;
 800bb84:	7efb      	ldrb	r3, [r7, #27]
 800bb86:	b29b      	uxth	r3, r3
 800bb88:	e07d      	b.n	800bc86 <EE_Init+0x39e>
					}
				}
			} else /* Page0 valid, Page1 receive */
			{
				/* Transfer data from Page0 to Page1 */
				for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++) {
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800bb8e:	e03a      	b.n	800bc06 <EE_Init+0x31e>
 800bb90:	080d0000 	.word	0x080d0000
 800bb94:	080f0000 	.word	0x080f0000
 800bb98:	080d0006 	.word	0x080d0006
 800bb9c:	20000008 	.word	0x20000008
 800bba0:	20006538 	.word	0x20006538
					if ((*(__IO uint16_t*) (PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx]) {
 800bba4:	4b3a      	ldr	r3, [pc, #232]	; (800bc90 <EE_Init+0x3a8>)
 800bba6:	881b      	ldrh	r3, [r3, #0]
 800bba8:	b29a      	uxth	r2, r3
 800bbaa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bbac:	4939      	ldr	r1, [pc, #228]	; (800bc94 <EE_Init+0x3ac>)
 800bbae:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800bbb2:	429a      	cmp	r2, r3
 800bbb4:	d101      	bne.n	800bbba <EE_Init+0x2d2>
						x = VarIdx;
 800bbb6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bbb8:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
					if (VarIdx != x) {
 800bbba:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800bbbc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800bbc0:	429a      	cmp	r2, r3
 800bbc2:	d01d      	beq.n	800bc00 <EE_Init+0x318>
						/* Read the last variables' updates */
						ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 800bbc4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bbc6:	4a33      	ldr	r2, [pc, #204]	; (800bc94 <EE_Init+0x3ac>)
 800bbc8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bbcc:	4932      	ldr	r1, [pc, #200]	; (800bc98 <EE_Init+0x3b0>)
 800bbce:	4618      	mov	r0, r3
 800bbd0:	f000 f88e 	bl	800bcf0 <EE_ReadVariable>
 800bbd4:	4603      	mov	r3, r0
 800bbd6:	83bb      	strh	r3, [r7, #28]
						/* In case variable corresponding to the virtual address was found */
						if (ReadStatus != 0x1) {
 800bbd8:	8bbb      	ldrh	r3, [r7, #28]
 800bbda:	2b01      	cmp	r3, #1
 800bbdc:	d010      	beq.n	800bc00 <EE_Init+0x318>
							/* Transfer the variable to the Page1 */
							EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 800bbde:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bbe0:	4a2c      	ldr	r2, [pc, #176]	; (800bc94 <EE_Init+0x3ac>)
 800bbe2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800bbe6:	4b2c      	ldr	r3, [pc, #176]	; (800bc98 <EE_Init+0x3b0>)
 800bbe8:	881b      	ldrh	r3, [r3, #0]
 800bbea:	4619      	mov	r1, r3
 800bbec:	4610      	mov	r0, r2
 800bbee:	f000 f983 	bl	800bef8 <EE_VerifyPageFullWriteVariable>
 800bbf2:	4603      	mov	r3, r0
 800bbf4:	83fb      	strh	r3, [r7, #30]
							/* If program operation was failed, a Flash error code is returned */
							if (EepromStatus != HAL_OK) {
 800bbf6:	8bfb      	ldrh	r3, [r7, #30]
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d001      	beq.n	800bc00 <EE_Init+0x318>
								return EepromStatus;
 800bbfc:	8bfb      	ldrh	r3, [r7, #30]
 800bbfe:	e042      	b.n	800bc86 <EE_Init+0x39e>
				for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++) {
 800bc00:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bc02:	3301      	adds	r3, #1
 800bc04:	84fb      	strh	r3, [r7, #38]	; 0x26
 800bc06:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bc08:	2b01      	cmp	r3, #1
 800bc0a:	d9cb      	bls.n	800bba4 <EE_Init+0x2bc>
							}
						}
					}
				}
				/* Mark Page1 as valid */
				FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);
 800bc0c:	f04f 0200 	mov.w	r2, #0
 800bc10:	f04f 0300 	mov.w	r3, #0
 800bc14:	4921      	ldr	r1, [pc, #132]	; (800bc9c <EE_Init+0x3b4>)
 800bc16:	2001      	movs	r0, #1
 800bc18:	f7f5 fffe 	bl	8001c18 <HAL_FLASH_Program>
 800bc1c:	4603      	mov	r3, r0
 800bc1e:	76fb      	strb	r3, [r7, #27]
				/* If program operation was failed, a Flash error code is returned */
				if (FlashStatus != HAL_OK) {
 800bc20:	7efb      	ldrb	r3, [r7, #27]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d002      	beq.n	800bc2c <EE_Init+0x344>
					return FlashStatus;
 800bc26:	7efb      	ldrb	r3, [r7, #27]
 800bc28:	b29b      	uxth	r3, r3
 800bc2a:	e02c      	b.n	800bc86 <EE_Init+0x39e>
				}
				pEraseInit.Sector = PAGE0_ID;
 800bc2c:	230a      	movs	r3, #10
 800bc2e:	60bb      	str	r3, [r7, #8]
				pEraseInit.NbSectors = 1;
 800bc30:	2301      	movs	r3, #1
 800bc32:	60fb      	str	r3, [r7, #12]
				pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800bc34:	2302      	movs	r3, #2
 800bc36:	613b      	str	r3, [r7, #16]
				/* Erase Page0 */
				if (!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS)) {
 800bc38:	4819      	ldr	r0, [pc, #100]	; (800bca0 <EE_Init+0x3b8>)
 800bc3a:	f000 f833 	bl	800bca4 <EE_VerifyPageFullyErased>
 800bc3e:	4603      	mov	r3, r0
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d11c      	bne.n	800bc7e <EE_Init+0x396>
					FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800bc44:	f107 0214 	add.w	r2, r7, #20
 800bc48:	463b      	mov	r3, r7
 800bc4a:	4611      	mov	r1, r2
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	f7f6 f985 	bl	8001f5c <HAL_FLASHEx_Erase>
 800bc52:	4603      	mov	r3, r0
 800bc54:	76fb      	strb	r3, [r7, #27]
					/* If erase operation was failed, a Flash error code is returned */
					if (FlashStatus != HAL_OK) {
 800bc56:	7efb      	ldrb	r3, [r7, #27]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d010      	beq.n	800bc7e <EE_Init+0x396>
						return FlashStatus;
 800bc5c:	7efb      	ldrb	r3, [r7, #27]
 800bc5e:	b29b      	uxth	r3, r3
 800bc60:	e011      	b.n	800bc86 <EE_Init+0x39e>
			}
			break;

		default: /* Any other state -> format eeprom */
			/* Erase both Page0 and Page1 and set Page0 as valid page */
			FlashStatus = EE_Format();
 800bc62:	f000 f8b1 	bl	800bdc8 <EE_Format>
 800bc66:	4603      	mov	r3, r0
 800bc68:	76fb      	strb	r3, [r7, #27]
			/* If erase/program operation was failed, a Flash error code is returned */
			if (FlashStatus != HAL_OK) {
 800bc6a:	7efb      	ldrb	r3, [r7, #27]
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d008      	beq.n	800bc82 <EE_Init+0x39a>
				return FlashStatus;
 800bc70:	7efb      	ldrb	r3, [r7, #27]
 800bc72:	b29b      	uxth	r3, r3
 800bc74:	e007      	b.n	800bc86 <EE_Init+0x39e>
			break;
 800bc76:	bf00      	nop
 800bc78:	e004      	b.n	800bc84 <EE_Init+0x39c>
			break;
 800bc7a:	bf00      	nop
 800bc7c:	e002      	b.n	800bc84 <EE_Init+0x39c>
			break;
 800bc7e:	bf00      	nop
 800bc80:	e000      	b.n	800bc84 <EE_Init+0x39c>
			}
			break;
 800bc82:	bf00      	nop
	}

	return HAL_OK;
 800bc84:	2300      	movs	r3, #0
}
 800bc86:	4618      	mov	r0, r3
 800bc88:	3728      	adds	r7, #40	; 0x28
 800bc8a:	46bd      	mov	sp, r7
 800bc8c:	bd80      	pop	{r7, pc}
 800bc8e:	bf00      	nop
 800bc90:	080f0006 	.word	0x080f0006
 800bc94:	20000008 	.word	0x20000008
 800bc98:	20006538 	.word	0x20006538
 800bc9c:	080f0000 	.word	0x080f0000
 800bca0:	080d0000 	.word	0x080d0000

0800bca4 <EE_VerifyPageFullyErased>:
 *     @arg PAGE1_BASE_ADDRESS: Page1 base address
 * @retval page fully erased status:
 *           - 0: if Page not erased
 *           - 1: if Page erased
 */
uint16_t EE_VerifyPageFullyErased(uint32_t Address) {
 800bca4:	b480      	push	{r7}
 800bca6:	b085      	sub	sp, #20
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	6078      	str	r0, [r7, #4]
	uint32_t ReadStatus = 1;
 800bcac:	2301      	movs	r3, #1
 800bcae:	60fb      	str	r3, [r7, #12]
	uint16_t AddressValue = 0x5555;
 800bcb0:	f245 5355 	movw	r3, #21845	; 0x5555
 800bcb4:	817b      	strh	r3, [r7, #10]

	/* Check each active page address starting from end */
	while (Address <= PAGE0_END_ADDRESS) {
 800bcb6:	e00d      	b.n	800bcd4 <EE_VerifyPageFullyErased+0x30>
		/* Get the current location content to be compared with virtual address */
		AddressValue = (*(__IO uint16_t*) Address);
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	881b      	ldrh	r3, [r3, #0]
 800bcbc:	817b      	strh	r3, [r7, #10]

		/* Compare the read address with the virtual address */
		if (AddressValue != ERASED) {
 800bcbe:	897b      	ldrh	r3, [r7, #10]
 800bcc0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bcc4:	4293      	cmp	r3, r2
 800bcc6:	d002      	beq.n	800bcce <EE_VerifyPageFullyErased+0x2a>

			/* In case variable value is read, reset ReadStatus flag */
			ReadStatus = 0;
 800bcc8:	2300      	movs	r3, #0
 800bcca:	60fb      	str	r3, [r7, #12]

			break;
 800bccc:	e006      	b.n	800bcdc <EE_VerifyPageFullyErased+0x38>
		}
		/* Next address location */
		Address = Address + 4;
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	3304      	adds	r3, #4
 800bcd2:	607b      	str	r3, [r7, #4]
	while (Address <= PAGE0_END_ADDRESS) {
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	4a05      	ldr	r2, [pc, #20]	; (800bcec <EE_VerifyPageFullyErased+0x48>)
 800bcd8:	4293      	cmp	r3, r2
 800bcda:	d9ed      	bls.n	800bcb8 <EE_VerifyPageFullyErased+0x14>
	}

	/* Return ReadStatus value: (0: Page not erased, 1: Sector erased) */
	return ReadStatus;
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	b29b      	uxth	r3, r3
}
 800bce0:	4618      	mov	r0, r3
 800bce2:	3714      	adds	r7, #20
 800bce4:	46bd      	mov	sp, r7
 800bce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcea:	4770      	bx	lr
 800bcec:	080effff 	.word	0x080effff

0800bcf0 <EE_ReadVariable>:
 * @retval Success or error status:
 *           - 0: if variable was found
 *           - 1: if the variable was not found
 *           - NO_VALID_PAGE: if no valid page was found.
 */
uint16_t EE_ReadVariable(uint16_t VirtAddress, uint16_t* Data) {
 800bcf0:	b580      	push	{r7, lr}
 800bcf2:	b086      	sub	sp, #24
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	4603      	mov	r3, r0
 800bcf8:	6039      	str	r1, [r7, #0]
 800bcfa:	80fb      	strh	r3, [r7, #6]
	uint16_t ValidPage = PAGE0;
 800bcfc:	2300      	movs	r3, #0
 800bcfe:	81fb      	strh	r3, [r7, #14]
	uint16_t AddressValue = 0x5555, ReadStatus = 1;
 800bd00:	f245 5355 	movw	r3, #21845	; 0x5555
 800bd04:	81bb      	strh	r3, [r7, #12]
 800bd06:	2301      	movs	r3, #1
 800bd08:	82fb      	strh	r3, [r7, #22]
	uint32_t Address = EEPROM_START_ADDRESS, PageStartAddress = EEPROM_START_ADDRESS;
 800bd0a:	4b1c      	ldr	r3, [pc, #112]	; (800bd7c <EE_ReadVariable+0x8c>)
 800bd0c:	613b      	str	r3, [r7, #16]
 800bd0e:	4b1b      	ldr	r3, [pc, #108]	; (800bd7c <EE_ReadVariable+0x8c>)
 800bd10:	60bb      	str	r3, [r7, #8]

	/* Get active Page for read operation */
	ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 800bd12:	2000      	movs	r0, #0
 800bd14:	f000 f8aa 	bl	800be6c <EE_FindValidPage>
 800bd18:	4603      	mov	r3, r0
 800bd1a:	81fb      	strh	r3, [r7, #14]

	/* Check if there is no valid page */
	if (ValidPage == NO_VALID_PAGE) {
 800bd1c:	89fb      	ldrh	r3, [r7, #14]
 800bd1e:	2bab      	cmp	r3, #171	; 0xab
 800bd20:	d101      	bne.n	800bd26 <EE_ReadVariable+0x36>
		return NO_VALID_PAGE;
 800bd22:	23ab      	movs	r3, #171	; 0xab
 800bd24:	e026      	b.n	800bd74 <EE_ReadVariable+0x84>
	}

	/* Get the valid Page start Address */
	PageStartAddress = (uint32_t) (EEPROM_START_ADDRESS + (uint32_t) (ValidPage * PAGE_SIZE ));
 800bd26:	89fb      	ldrh	r3, [r7, #14]
 800bd28:	045b      	lsls	r3, r3, #17
 800bd2a:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800bd2e:	f503 2350 	add.w	r3, r3, #851968	; 0xd0000
 800bd32:	60bb      	str	r3, [r7, #8]

	/* Get the valid Page end Address */
	Address = (uint32_t) ((EEPROM_START_ADDRESS - 2) + (uint32_t) ((1 + ValidPage) * PAGE_SIZE ));
 800bd34:	89fb      	ldrh	r3, [r7, #14]
 800bd36:	3301      	adds	r3, #1
 800bd38:	045a      	lsls	r2, r3, #17
 800bd3a:	4b11      	ldr	r3, [pc, #68]	; (800bd80 <EE_ReadVariable+0x90>)
 800bd3c:	4413      	add	r3, r2
 800bd3e:	613b      	str	r3, [r7, #16]

	/* Check each active page address starting from end */
	while (Address > (PageStartAddress + 2)) {
 800bd40:	e012      	b.n	800bd68 <EE_ReadVariable+0x78>
		/* Get the current location content to be compared with virtual address */
		AddressValue = (*(__IO uint16_t*) Address);
 800bd42:	693b      	ldr	r3, [r7, #16]
 800bd44:	881b      	ldrh	r3, [r3, #0]
 800bd46:	81bb      	strh	r3, [r7, #12]

		/* Compare the read address with the virtual address */
		if (AddressValue == VirtAddress) {
 800bd48:	89ba      	ldrh	r2, [r7, #12]
 800bd4a:	88fb      	ldrh	r3, [r7, #6]
 800bd4c:	429a      	cmp	r2, r3
 800bd4e:	d108      	bne.n	800bd62 <EE_ReadVariable+0x72>
			/* Get content of Address-2 which is variable value */
			*Data = (*(__IO uint16_t*) (Address - 2));
 800bd50:	693b      	ldr	r3, [r7, #16]
 800bd52:	3b02      	subs	r3, #2
 800bd54:	881b      	ldrh	r3, [r3, #0]
 800bd56:	b29a      	uxth	r2, r3
 800bd58:	683b      	ldr	r3, [r7, #0]
 800bd5a:	801a      	strh	r2, [r3, #0]

			/* In case variable value is read, reset ReadStatus flag */
			ReadStatus = 0;
 800bd5c:	2300      	movs	r3, #0
 800bd5e:	82fb      	strh	r3, [r7, #22]

			break;
 800bd60:	e007      	b.n	800bd72 <EE_ReadVariable+0x82>
		} else {
			/* Next address location */
			Address = Address - 4;
 800bd62:	693b      	ldr	r3, [r7, #16]
 800bd64:	3b04      	subs	r3, #4
 800bd66:	613b      	str	r3, [r7, #16]
	while (Address > (PageStartAddress + 2)) {
 800bd68:	68bb      	ldr	r3, [r7, #8]
 800bd6a:	3302      	adds	r3, #2
 800bd6c:	693a      	ldr	r2, [r7, #16]
 800bd6e:	429a      	cmp	r2, r3
 800bd70:	d8e7      	bhi.n	800bd42 <EE_ReadVariable+0x52>
		}
	}

	/* Return ReadStatus value: (0: variable exist, 1: variable doesn't exist) */
	return ReadStatus;
 800bd72:	8afb      	ldrh	r3, [r7, #22]
}
 800bd74:	4618      	mov	r0, r3
 800bd76:	3718      	adds	r7, #24
 800bd78:	46bd      	mov	sp, r7
 800bd7a:	bd80      	pop	{r7, pc}
 800bd7c:	080d0000 	.word	0x080d0000
 800bd80:	080cfffe 	.word	0x080cfffe

0800bd84 <EE_WriteVariable>:
 *           - FLASH_COMPLETE: on success
 *           - PAGE_FULL: if valid page is full
 *           - NO_VALID_PAGE: if no valid page was found
 *           - Flash error code: on write Flash error
 */
uint16_t EE_WriteVariable(uint16_t VirtAddress, uint16_t Data) {
 800bd84:	b580      	push	{r7, lr}
 800bd86:	b084      	sub	sp, #16
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	4603      	mov	r3, r0
 800bd8c:	460a      	mov	r2, r1
 800bd8e:	80fb      	strh	r3, [r7, #6]
 800bd90:	4613      	mov	r3, r2
 800bd92:	80bb      	strh	r3, [r7, #4]
	uint16_t Status = 0;
 800bd94:	2300      	movs	r3, #0
 800bd96:	81fb      	strh	r3, [r7, #14]

	/* Write the variable virtual address and value in the EEPROM */
	Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 800bd98:	88ba      	ldrh	r2, [r7, #4]
 800bd9a:	88fb      	ldrh	r3, [r7, #6]
 800bd9c:	4611      	mov	r1, r2
 800bd9e:	4618      	mov	r0, r3
 800bda0:	f000 f8aa 	bl	800bef8 <EE_VerifyPageFullWriteVariable>
 800bda4:	4603      	mov	r3, r0
 800bda6:	81fb      	strh	r3, [r7, #14]

	/* In case the EEPROM active page is full */
	if (Status == PAGE_FULL) {
 800bda8:	89fb      	ldrh	r3, [r7, #14]
 800bdaa:	2b80      	cmp	r3, #128	; 0x80
 800bdac:	d107      	bne.n	800bdbe <EE_WriteVariable+0x3a>
		/* Perform Page transfer */
		Status = EE_PageTransfer(VirtAddress, Data);
 800bdae:	88ba      	ldrh	r2, [r7, #4]
 800bdb0:	88fb      	ldrh	r3, [r7, #6]
 800bdb2:	4611      	mov	r1, r2
 800bdb4:	4618      	mov	r0, r3
 800bdb6:	f000 f8ff 	bl	800bfb8 <EE_PageTransfer>
 800bdba:	4603      	mov	r3, r0
 800bdbc:	81fb      	strh	r3, [r7, #14]
	}

	/* Return last operation status */
	return Status;
 800bdbe:	89fb      	ldrh	r3, [r7, #14]
}
 800bdc0:	4618      	mov	r0, r3
 800bdc2:	3710      	adds	r7, #16
 800bdc4:	46bd      	mov	sp, r7
 800bdc6:	bd80      	pop	{r7, pc}

0800bdc8 <EE_Format>:
 * @brief  Erases PAGE and PAGE1 and writes VALID_PAGE header to PAGE
 * @param  None
 * @retval Status of the last operation (Flash write or erase) done during
 *         EEPROM formating
 */
static HAL_StatusTypeDef EE_Format(void) {
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	b088      	sub	sp, #32
 800bdcc:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef FlashStatus = HAL_OK;
 800bdce:	2300      	movs	r3, #0
 800bdd0:	77fb      	strb	r3, [r7, #31]
	uint32_t SectorError = 0;
 800bdd2:	2300      	movs	r3, #0
 800bdd4:	61bb      	str	r3, [r7, #24]
	FLASH_EraseInitTypeDef pEraseInit;

	pEraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;
 800bdd6:	2300      	movs	r3, #0
 800bdd8:	607b      	str	r3, [r7, #4]
	pEraseInit.Sector = PAGE0_ID;
 800bdda:	230a      	movs	r3, #10
 800bddc:	60fb      	str	r3, [r7, #12]
	pEraseInit.NbSectors = 1;
 800bdde:	2301      	movs	r3, #1
 800bde0:	613b      	str	r3, [r7, #16]
	pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800bde2:	2302      	movs	r3, #2
 800bde4:	617b      	str	r3, [r7, #20]
	/* Erase Page0 */
	if (!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS)) {
 800bde6:	481f      	ldr	r0, [pc, #124]	; (800be64 <EE_Format+0x9c>)
 800bde8:	f7ff ff5c 	bl	800bca4 <EE_VerifyPageFullyErased>
 800bdec:	4603      	mov	r3, r0
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d10d      	bne.n	800be0e <EE_Format+0x46>
		FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800bdf2:	f107 0218 	add.w	r2, r7, #24
 800bdf6:	1d3b      	adds	r3, r7, #4
 800bdf8:	4611      	mov	r1, r2
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	f7f6 f8ae 	bl	8001f5c <HAL_FLASHEx_Erase>
 800be00:	4603      	mov	r3, r0
 800be02:	77fb      	strb	r3, [r7, #31]
		/* If erase operation was failed, a Flash error code is returned */
		if (FlashStatus != HAL_OK) {
 800be04:	7ffb      	ldrb	r3, [r7, #31]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d001      	beq.n	800be0e <EE_Format+0x46>
			return FlashStatus;
 800be0a:	7ffb      	ldrb	r3, [r7, #31]
 800be0c:	e025      	b.n	800be5a <EE_Format+0x92>
		}
	}
	/* Set Page0 as valid page: Write VALID_PAGE at Page0 base address */
	FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 800be0e:	f04f 0200 	mov.w	r2, #0
 800be12:	f04f 0300 	mov.w	r3, #0
 800be16:	4913      	ldr	r1, [pc, #76]	; (800be64 <EE_Format+0x9c>)
 800be18:	2001      	movs	r0, #1
 800be1a:	f7f5 fefd 	bl	8001c18 <HAL_FLASH_Program>
 800be1e:	4603      	mov	r3, r0
 800be20:	77fb      	strb	r3, [r7, #31]
	/* If program operation was failed, a Flash error code is returned */
	if (FlashStatus != HAL_OK) {
 800be22:	7ffb      	ldrb	r3, [r7, #31]
 800be24:	2b00      	cmp	r3, #0
 800be26:	d001      	beq.n	800be2c <EE_Format+0x64>
		return FlashStatus;
 800be28:	7ffb      	ldrb	r3, [r7, #31]
 800be2a:	e016      	b.n	800be5a <EE_Format+0x92>
	}

	pEraseInit.Sector = PAGE1_ID;
 800be2c:	230b      	movs	r3, #11
 800be2e:	60fb      	str	r3, [r7, #12]
	/* Erase Page1 */
	if (!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS)) {
 800be30:	480d      	ldr	r0, [pc, #52]	; (800be68 <EE_Format+0xa0>)
 800be32:	f7ff ff37 	bl	800bca4 <EE_VerifyPageFullyErased>
 800be36:	4603      	mov	r3, r0
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d10d      	bne.n	800be58 <EE_Format+0x90>
		FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800be3c:	f107 0218 	add.w	r2, r7, #24
 800be40:	1d3b      	adds	r3, r7, #4
 800be42:	4611      	mov	r1, r2
 800be44:	4618      	mov	r0, r3
 800be46:	f7f6 f889 	bl	8001f5c <HAL_FLASHEx_Erase>
 800be4a:	4603      	mov	r3, r0
 800be4c:	77fb      	strb	r3, [r7, #31]
		/* If erase operation was failed, a Flash error code is returned */
		if (FlashStatus != HAL_OK) {
 800be4e:	7ffb      	ldrb	r3, [r7, #31]
 800be50:	2b00      	cmp	r3, #0
 800be52:	d001      	beq.n	800be58 <EE_Format+0x90>
			return FlashStatus;
 800be54:	7ffb      	ldrb	r3, [r7, #31]
 800be56:	e000      	b.n	800be5a <EE_Format+0x92>
		}
	}

	return HAL_OK;
 800be58:	2300      	movs	r3, #0
}
 800be5a:	4618      	mov	r0, r3
 800be5c:	3720      	adds	r7, #32
 800be5e:	46bd      	mov	sp, r7
 800be60:	bd80      	pop	{r7, pc}
 800be62:	bf00      	nop
 800be64:	080d0000 	.word	0x080d0000
 800be68:	080f0000 	.word	0x080f0000

0800be6c <EE_FindValidPage>:
 *     @arg READ_FROM_VALID_PAGE: read operation from valid page
 *     @arg WRITE_IN_VALID_PAGE: write operation from valid page
 * @retval Valid page number (PAGE or PAGE1) or NO_VALID_PAGE in case
 *   of no valid page was found
 */
static uint16_t EE_FindValidPage(uint8_t Operation) {
 800be6c:	b480      	push	{r7}
 800be6e:	b085      	sub	sp, #20
 800be70:	af00      	add	r7, sp, #0
 800be72:	4603      	mov	r3, r0
 800be74:	71fb      	strb	r3, [r7, #7]
	uint16_t PageStatus0 = 6, PageStatus1 = 6;
 800be76:	2306      	movs	r3, #6
 800be78:	81fb      	strh	r3, [r7, #14]
 800be7a:	2306      	movs	r3, #6
 800be7c:	81bb      	strh	r3, [r7, #12]

	/* Get Page0 actual status */
	PageStatus0 = (*(__IO uint16_t*) PAGE0_BASE_ADDRESS);
 800be7e:	4b1c      	ldr	r3, [pc, #112]	; (800bef0 <EE_FindValidPage+0x84>)
 800be80:	881b      	ldrh	r3, [r3, #0]
 800be82:	81fb      	strh	r3, [r7, #14]

	/* Get Page1 actual status */
	PageStatus1 = (*(__IO uint16_t*) PAGE1_BASE_ADDRESS);
 800be84:	4b1b      	ldr	r3, [pc, #108]	; (800bef4 <EE_FindValidPage+0x88>)
 800be86:	881b      	ldrh	r3, [r3, #0]
 800be88:	81bb      	strh	r3, [r7, #12]

	/* Write or read operation */
	switch (Operation) {
 800be8a:	79fb      	ldrb	r3, [r7, #7]
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d01b      	beq.n	800bec8 <EE_FindValidPage+0x5c>
 800be90:	2b01      	cmp	r3, #1
 800be92:	d125      	bne.n	800bee0 <EE_FindValidPage+0x74>
		case WRITE_IN_VALID_PAGE: /* ---- Write operation ---- */
			if (PageStatus1 == VALID_PAGE) {
 800be94:	89bb      	ldrh	r3, [r7, #12]
 800be96:	2b00      	cmp	r3, #0
 800be98:	d108      	bne.n	800beac <EE_FindValidPage+0x40>
				/* Page0 receiving data */
				if (PageStatus0 == RECEIVE_DATA) {
 800be9a:	89fb      	ldrh	r3, [r7, #14]
 800be9c:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 800bea0:	4293      	cmp	r3, r2
 800bea2:	d101      	bne.n	800bea8 <EE_FindValidPage+0x3c>
					return PAGE0; /* Page0 valid */
 800bea4:	2300      	movs	r3, #0
 800bea6:	e01c      	b.n	800bee2 <EE_FindValidPage+0x76>
				} else {
					return PAGE1; /* Page1 valid */
 800bea8:	2301      	movs	r3, #1
 800beaa:	e01a      	b.n	800bee2 <EE_FindValidPage+0x76>
				}
			} else if (PageStatus0 == VALID_PAGE) {
 800beac:	89fb      	ldrh	r3, [r7, #14]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d108      	bne.n	800bec4 <EE_FindValidPage+0x58>
				/* Page1 receiving data */
				if (PageStatus1 == RECEIVE_DATA) {
 800beb2:	89bb      	ldrh	r3, [r7, #12]
 800beb4:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 800beb8:	4293      	cmp	r3, r2
 800beba:	d101      	bne.n	800bec0 <EE_FindValidPage+0x54>
					return PAGE1; /* Page1 valid */
 800bebc:	2301      	movs	r3, #1
 800bebe:	e010      	b.n	800bee2 <EE_FindValidPage+0x76>
				} else {
					return PAGE0; /* Page0 valid */
 800bec0:	2300      	movs	r3, #0
 800bec2:	e00e      	b.n	800bee2 <EE_FindValidPage+0x76>
				}
			} else {
				return NO_VALID_PAGE; /* No valid Page */
 800bec4:	23ab      	movs	r3, #171	; 0xab
 800bec6:	e00c      	b.n	800bee2 <EE_FindValidPage+0x76>
			}

		case READ_FROM_VALID_PAGE: /* ---- Read operation ---- */
			if (PageStatus0 == VALID_PAGE) {
 800bec8:	89fb      	ldrh	r3, [r7, #14]
 800beca:	2b00      	cmp	r3, #0
 800becc:	d101      	bne.n	800bed2 <EE_FindValidPage+0x66>
				return PAGE0; /* Page0 valid */
 800bece:	2300      	movs	r3, #0
 800bed0:	e007      	b.n	800bee2 <EE_FindValidPage+0x76>
			} else if (PageStatus1 == VALID_PAGE) {
 800bed2:	89bb      	ldrh	r3, [r7, #12]
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d101      	bne.n	800bedc <EE_FindValidPage+0x70>
				return PAGE1; /* Page1 valid */
 800bed8:	2301      	movs	r3, #1
 800beda:	e002      	b.n	800bee2 <EE_FindValidPage+0x76>
			} else {
				return NO_VALID_PAGE; /* No valid Page */
 800bedc:	23ab      	movs	r3, #171	; 0xab
 800bede:	e000      	b.n	800bee2 <EE_FindValidPage+0x76>
			}

		default:
			return PAGE0; /* Page0 valid */
 800bee0:	2300      	movs	r3, #0
	}
}
 800bee2:	4618      	mov	r0, r3
 800bee4:	3714      	adds	r7, #20
 800bee6:	46bd      	mov	sp, r7
 800bee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beec:	4770      	bx	lr
 800beee:	bf00      	nop
 800bef0:	080d0000 	.word	0x080d0000
 800bef4:	080f0000 	.word	0x080f0000

0800bef8 <EE_VerifyPageFullWriteVariable>:
 *           - FLASH_COMPLETE: on success
 *           - PAGE_FULL: if valid page is full
 *           - NO_VALID_PAGE: if no valid page was found
 *           - Flash error code: on write Flash error
 */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data) {
 800bef8:	b590      	push	{r4, r7, lr}
 800befa:	b087      	sub	sp, #28
 800befc:	af00      	add	r7, sp, #0
 800befe:	4603      	mov	r3, r0
 800bf00:	460a      	mov	r2, r1
 800bf02:	80fb      	strh	r3, [r7, #6]
 800bf04:	4613      	mov	r3, r2
 800bf06:	80bb      	strh	r3, [r7, #4]
	HAL_StatusTypeDef FlashStatus = HAL_OK;
 800bf08:	2300      	movs	r3, #0
 800bf0a:	74fb      	strb	r3, [r7, #19]
	uint16_t ValidPage = PAGE0;
 800bf0c:	2300      	movs	r3, #0
 800bf0e:	823b      	strh	r3, [r7, #16]
	uint32_t Address = EEPROM_START_ADDRESS, PageEndAddress = EEPROM_START_ADDRESS + PAGE_SIZE;
 800bf10:	4b26      	ldr	r3, [pc, #152]	; (800bfac <EE_VerifyPageFullWriteVariable+0xb4>)
 800bf12:	617b      	str	r3, [r7, #20]
 800bf14:	4b26      	ldr	r3, [pc, #152]	; (800bfb0 <EE_VerifyPageFullWriteVariable+0xb8>)
 800bf16:	60fb      	str	r3, [r7, #12]

	/* Get valid Page for write operation */
	ValidPage = EE_FindValidPage(WRITE_IN_VALID_PAGE);
 800bf18:	2001      	movs	r0, #1
 800bf1a:	f7ff ffa7 	bl	800be6c <EE_FindValidPage>
 800bf1e:	4603      	mov	r3, r0
 800bf20:	823b      	strh	r3, [r7, #16]

	/* Check if there is no valid page */
	if (ValidPage == NO_VALID_PAGE) {
 800bf22:	8a3b      	ldrh	r3, [r7, #16]
 800bf24:	2bab      	cmp	r3, #171	; 0xab
 800bf26:	d101      	bne.n	800bf2c <EE_VerifyPageFullWriteVariable+0x34>
		return NO_VALID_PAGE;
 800bf28:	23ab      	movs	r3, #171	; 0xab
 800bf2a:	e03a      	b.n	800bfa2 <EE_VerifyPageFullWriteVariable+0xaa>
	}

	/* Get the valid Page start Address */
	Address = (uint32_t) (EEPROM_START_ADDRESS + (uint32_t) (ValidPage * PAGE_SIZE ));
 800bf2c:	8a3b      	ldrh	r3, [r7, #16]
 800bf2e:	045b      	lsls	r3, r3, #17
 800bf30:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800bf34:	f503 2350 	add.w	r3, r3, #851968	; 0xd0000
 800bf38:	617b      	str	r3, [r7, #20]

	/* Get the valid Page end Address */
	PageEndAddress = (uint32_t) ((EEPROM_START_ADDRESS - 1) + (uint32_t) ((ValidPage + 1) * PAGE_SIZE ));
 800bf3a:	8a3b      	ldrh	r3, [r7, #16]
 800bf3c:	3301      	adds	r3, #1
 800bf3e:	045a      	lsls	r2, r3, #17
 800bf40:	4b1c      	ldr	r3, [pc, #112]	; (800bfb4 <EE_VerifyPageFullWriteVariable+0xbc>)
 800bf42:	4413      	add	r3, r2
 800bf44:	60fb      	str	r3, [r7, #12]

	/* Check each active page address starting from begining */
	while (Address < PageEndAddress) {
 800bf46:	e027      	b.n	800bf98 <EE_VerifyPageFullWriteVariable+0xa0>
		/* Verify if Address and Address+2 contents are 0xFFFFFFFF */
		if ((*(__IO uint32_t*) Address) == 0xFFFFFFFF) {
 800bf48:	697b      	ldr	r3, [r7, #20]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf50:	d11f      	bne.n	800bf92 <EE_VerifyPageFullWriteVariable+0x9a>
			/* Set variable data */
			FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Address, Data);
 800bf52:	88bb      	ldrh	r3, [r7, #4]
 800bf54:	f04f 0400 	mov.w	r4, #0
 800bf58:	461a      	mov	r2, r3
 800bf5a:	4623      	mov	r3, r4
 800bf5c:	6979      	ldr	r1, [r7, #20]
 800bf5e:	2001      	movs	r0, #1
 800bf60:	f7f5 fe5a 	bl	8001c18 <HAL_FLASH_Program>
 800bf64:	4603      	mov	r3, r0
 800bf66:	74fb      	strb	r3, [r7, #19]
			/* If program operation was failed, a Flash error code is returned */
			if (FlashStatus != HAL_OK) {
 800bf68:	7cfb      	ldrb	r3, [r7, #19]
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d002      	beq.n	800bf74 <EE_VerifyPageFullWriteVariable+0x7c>
				return FlashStatus;
 800bf6e:	7cfb      	ldrb	r3, [r7, #19]
 800bf70:	b29b      	uxth	r3, r3
 800bf72:	e016      	b.n	800bfa2 <EE_VerifyPageFullWriteVariable+0xaa>
			}
			/* Set variable virtual address */
			FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Address + 2, VirtAddress);
 800bf74:	697b      	ldr	r3, [r7, #20]
 800bf76:	1c99      	adds	r1, r3, #2
 800bf78:	88fb      	ldrh	r3, [r7, #6]
 800bf7a:	f04f 0400 	mov.w	r4, #0
 800bf7e:	461a      	mov	r2, r3
 800bf80:	4623      	mov	r3, r4
 800bf82:	2001      	movs	r0, #1
 800bf84:	f7f5 fe48 	bl	8001c18 <HAL_FLASH_Program>
 800bf88:	4603      	mov	r3, r0
 800bf8a:	74fb      	strb	r3, [r7, #19]
			/* Return program operation status */
			return FlashStatus;
 800bf8c:	7cfb      	ldrb	r3, [r7, #19]
 800bf8e:	b29b      	uxth	r3, r3
 800bf90:	e007      	b.n	800bfa2 <EE_VerifyPageFullWriteVariable+0xaa>
		} else {
			/* Next address location */
			Address = Address + 4;
 800bf92:	697b      	ldr	r3, [r7, #20]
 800bf94:	3304      	adds	r3, #4
 800bf96:	617b      	str	r3, [r7, #20]
	while (Address < PageEndAddress) {
 800bf98:	697a      	ldr	r2, [r7, #20]
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	429a      	cmp	r2, r3
 800bf9e:	d3d3      	bcc.n	800bf48 <EE_VerifyPageFullWriteVariable+0x50>
		}
	}

	/* Return PAGE_FULL in case the valid page is full */
	return PAGE_FULL;
 800bfa0:	2380      	movs	r3, #128	; 0x80
}
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	371c      	adds	r7, #28
 800bfa6:	46bd      	mov	sp, r7
 800bfa8:	bd90      	pop	{r4, r7, pc}
 800bfaa:	bf00      	nop
 800bfac:	080d0000 	.word	0x080d0000
 800bfb0:	080f0000 	.word	0x080f0000
 800bfb4:	080cffff 	.word	0x080cffff

0800bfb8 <EE_PageTransfer>:
 *           - FLASH_COMPLETE: on success
 *           - PAGE_FULL: if valid page is full
 *           - NO_VALID_PAGE: if no valid page was found
 *           - Flash error code: on write Flash error
 */
static uint16_t EE_PageTransfer(uint16_t VirtAddress, uint16_t Data) {
 800bfb8:	b580      	push	{r7, lr}
 800bfba:	b08c      	sub	sp, #48	; 0x30
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	4603      	mov	r3, r0
 800bfc0:	460a      	mov	r2, r1
 800bfc2:	80fb      	strh	r3, [r7, #6]
 800bfc4:	4613      	mov	r3, r2
 800bfc6:	80bb      	strh	r3, [r7, #4]
	HAL_StatusTypeDef FlashStatus = HAL_OK;
 800bfc8:	2300      	movs	r3, #0
 800bfca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t NewPageAddress = EEPROM_START_ADDRESS;
 800bfce:	4b54      	ldr	r3, [pc, #336]	; (800c120 <EE_PageTransfer+0x168>)
 800bfd0:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint16_t OldPageId = 0;
 800bfd2:	2300      	movs	r3, #0
 800bfd4:	857b      	strh	r3, [r7, #42]	; 0x2a
	uint16_t ValidPage = PAGE0, VarIdx = 0;
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	84bb      	strh	r3, [r7, #36]	; 0x24
 800bfda:	2300      	movs	r3, #0
 800bfdc:	853b      	strh	r3, [r7, #40]	; 0x28
	uint16_t EepromStatus = 0, ReadStatus = 0;
 800bfde:	2300      	movs	r3, #0
 800bfe0:	847b      	strh	r3, [r7, #34]	; 0x22
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	843b      	strh	r3, [r7, #32]
	uint32_t SectorError = 0;
 800bfe6:	2300      	movs	r3, #0
 800bfe8:	61fb      	str	r3, [r7, #28]
	FLASH_EraseInitTypeDef pEraseInit;

	/* Get active Page for read operation */
	ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 800bfea:	2000      	movs	r0, #0
 800bfec:	f7ff ff3e 	bl	800be6c <EE_FindValidPage>
 800bff0:	4603      	mov	r3, r0
 800bff2:	84bb      	strh	r3, [r7, #36]	; 0x24

	if (ValidPage == PAGE1) /* Page1 valid */
 800bff4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bff6:	2b01      	cmp	r3, #1
 800bff8:	d104      	bne.n	800c004 <EE_PageTransfer+0x4c>
	{
		/* New page address where variable will be moved to */
		NewPageAddress = PAGE0_BASE_ADDRESS;
 800bffa:	4b49      	ldr	r3, [pc, #292]	; (800c120 <EE_PageTransfer+0x168>)
 800bffc:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Old page ID where variable will be taken from */
		OldPageId = PAGE1_ID;
 800bffe:	230b      	movs	r3, #11
 800c000:	857b      	strh	r3, [r7, #42]	; 0x2a
 800c002:	e009      	b.n	800c018 <EE_PageTransfer+0x60>
	} else if (ValidPage == PAGE0) /* Page0 valid */
 800c004:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c006:	2b00      	cmp	r3, #0
 800c008:	d104      	bne.n	800c014 <EE_PageTransfer+0x5c>
	{
		/* New page address  where variable will be moved to */
		NewPageAddress = PAGE1_BASE_ADDRESS;
 800c00a:	4b46      	ldr	r3, [pc, #280]	; (800c124 <EE_PageTransfer+0x16c>)
 800c00c:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Old page ID where variable will be taken from */
		OldPageId = PAGE0_ID;
 800c00e:	230a      	movs	r3, #10
 800c010:	857b      	strh	r3, [r7, #42]	; 0x2a
 800c012:	e001      	b.n	800c018 <EE_PageTransfer+0x60>
	} else {
		return NO_VALID_PAGE; /* No valid Page */
 800c014:	23ab      	movs	r3, #171	; 0xab
 800c016:	e07e      	b.n	800c116 <EE_PageTransfer+0x15e>
	}

	/* Set the new Page status to RECEIVE_DATA status */
	FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, NewPageAddress, RECEIVE_DATA);
 800c018:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 800c01c:	f04f 0300 	mov.w	r3, #0
 800c020:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c022:	2001      	movs	r0, #1
 800c024:	f7f5 fdf8 	bl	8001c18 <HAL_FLASH_Program>
 800c028:	4603      	mov	r3, r0
 800c02a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	/* If program operation was failed, a Flash error code is returned */
	if (FlashStatus != HAL_OK) {
 800c02e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c032:	2b00      	cmp	r3, #0
 800c034:	d003      	beq.n	800c03e <EE_PageTransfer+0x86>
		return FlashStatus;
 800c036:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c03a:	b29b      	uxth	r3, r3
 800c03c:	e06b      	b.n	800c116 <EE_PageTransfer+0x15e>
	}

	/* Write the variable passed as parameter in the new active page */
	EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 800c03e:	88ba      	ldrh	r2, [r7, #4]
 800c040:	88fb      	ldrh	r3, [r7, #6]
 800c042:	4611      	mov	r1, r2
 800c044:	4618      	mov	r0, r3
 800c046:	f7ff ff57 	bl	800bef8 <EE_VerifyPageFullWriteVariable>
 800c04a:	4603      	mov	r3, r0
 800c04c:	847b      	strh	r3, [r7, #34]	; 0x22
	/* If program operation was failed, a Flash error code is returned */
	if (EepromStatus != HAL_OK) {
 800c04e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c050:	2b00      	cmp	r3, #0
 800c052:	d001      	beq.n	800c058 <EE_PageTransfer+0xa0>
		return EepromStatus;
 800c054:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c056:	e05e      	b.n	800c116 <EE_PageTransfer+0x15e>
	}

	/* Transfer process: transfer variables from old to the new active page */
	for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++) {
 800c058:	2300      	movs	r3, #0
 800c05a:	853b      	strh	r3, [r7, #40]	; 0x28
 800c05c:	e027      	b.n	800c0ae <EE_PageTransfer+0xf6>
		if (VirtAddVarTab[VarIdx] != VirtAddress) /* Check each variable except the one passed as parameter */
 800c05e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c060:	4a31      	ldr	r2, [pc, #196]	; (800c128 <EE_PageTransfer+0x170>)
 800c062:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c066:	88fa      	ldrh	r2, [r7, #6]
 800c068:	429a      	cmp	r2, r3
 800c06a:	d01d      	beq.n	800c0a8 <EE_PageTransfer+0xf0>
		{
			/* Read the other last variable updates */
			ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 800c06c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c06e:	4a2e      	ldr	r2, [pc, #184]	; (800c128 <EE_PageTransfer+0x170>)
 800c070:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c074:	492d      	ldr	r1, [pc, #180]	; (800c12c <EE_PageTransfer+0x174>)
 800c076:	4618      	mov	r0, r3
 800c078:	f7ff fe3a 	bl	800bcf0 <EE_ReadVariable>
 800c07c:	4603      	mov	r3, r0
 800c07e:	843b      	strh	r3, [r7, #32]
			/* In case variable corresponding to the virtual address was found */
			if (ReadStatus != 0x1) {
 800c080:	8c3b      	ldrh	r3, [r7, #32]
 800c082:	2b01      	cmp	r3, #1
 800c084:	d010      	beq.n	800c0a8 <EE_PageTransfer+0xf0>
				/* Transfer the variable to the new active page */
				EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 800c086:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c088:	4a27      	ldr	r2, [pc, #156]	; (800c128 <EE_PageTransfer+0x170>)
 800c08a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800c08e:	4b27      	ldr	r3, [pc, #156]	; (800c12c <EE_PageTransfer+0x174>)
 800c090:	881b      	ldrh	r3, [r3, #0]
 800c092:	4619      	mov	r1, r3
 800c094:	4610      	mov	r0, r2
 800c096:	f7ff ff2f 	bl	800bef8 <EE_VerifyPageFullWriteVariable>
 800c09a:	4603      	mov	r3, r0
 800c09c:	847b      	strh	r3, [r7, #34]	; 0x22
				/* If program operation was failed, a Flash error code is returned */
				if (EepromStatus != HAL_OK) {
 800c09e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d001      	beq.n	800c0a8 <EE_PageTransfer+0xf0>
					return EepromStatus;
 800c0a4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c0a6:	e036      	b.n	800c116 <EE_PageTransfer+0x15e>
	for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++) {
 800c0a8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c0aa:	3301      	adds	r3, #1
 800c0ac:	853b      	strh	r3, [r7, #40]	; 0x28
 800c0ae:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c0b0:	2b01      	cmp	r3, #1
 800c0b2:	d9d4      	bls.n	800c05e <EE_PageTransfer+0xa6>
				}
			}
		}
	}

	pEraseInit.TypeErase = TYPEERASE_SECTORS;
 800c0b4:	2300      	movs	r3, #0
 800c0b6:	60bb      	str	r3, [r7, #8]
	pEraseInit.Sector = OldPageId;
 800c0b8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800c0ba:	613b      	str	r3, [r7, #16]
	pEraseInit.NbSectors = 1;
 800c0bc:	2301      	movs	r3, #1
 800c0be:	617b      	str	r3, [r7, #20]
	pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800c0c0:	2302      	movs	r3, #2
 800c0c2:	61bb      	str	r3, [r7, #24]

	/* Erase the old Page: Set old Page status to ERASED status */
	FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800c0c4:	f107 021c 	add.w	r2, r7, #28
 800c0c8:	f107 0308 	add.w	r3, r7, #8
 800c0cc:	4611      	mov	r1, r2
 800c0ce:	4618      	mov	r0, r3
 800c0d0:	f7f5 ff44 	bl	8001f5c <HAL_FLASHEx_Erase>
 800c0d4:	4603      	mov	r3, r0
 800c0d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	/* If erase operation was failed, a Flash error code is returned */
	if (FlashStatus != HAL_OK) {
 800c0da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d003      	beq.n	800c0ea <EE_PageTransfer+0x132>
		return FlashStatus;
 800c0e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c0e6:	b29b      	uxth	r3, r3
 800c0e8:	e015      	b.n	800c116 <EE_PageTransfer+0x15e>
	}

	/* Set new Page status to VALID_PAGE status */
	FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, NewPageAddress, VALID_PAGE);
 800c0ea:	f04f 0200 	mov.w	r2, #0
 800c0ee:	f04f 0300 	mov.w	r3, #0
 800c0f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c0f4:	2001      	movs	r0, #1
 800c0f6:	f7f5 fd8f 	bl	8001c18 <HAL_FLASH_Program>
 800c0fa:	4603      	mov	r3, r0
 800c0fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	/* If program operation was failed, a Flash error code is returned */
	if (FlashStatus != HAL_OK) {
 800c100:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c104:	2b00      	cmp	r3, #0
 800c106:	d003      	beq.n	800c110 <EE_PageTransfer+0x158>
		return FlashStatus;
 800c108:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c10c:	b29b      	uxth	r3, r3
 800c10e:	e002      	b.n	800c116 <EE_PageTransfer+0x15e>
	}

	/* Return last operation flash status */
	return FlashStatus;
 800c110:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c114:	b29b      	uxth	r3, r3
}
 800c116:	4618      	mov	r0, r3
 800c118:	3730      	adds	r7, #48	; 0x30
 800c11a:	46bd      	mov	sp, r7
 800c11c:	bd80      	pop	{r7, pc}
 800c11e:	bf00      	nop
 800c120:	080d0000 	.word	0x080d0000
 800c124:	080f0000 	.word	0x080f0000
 800c128:	20000008 	.word	0x20000008
 800c12c:	20006538 	.word	0x20006538

0800c130 <Finger_On>:
extern uint16_t fingerConfidence;
extern osMutexId FingerRecMutexHandle;
/* Private variable ---------------------------------------------------------*/
char str[50];

void Finger_On(void) {
 800c130:	b580      	push	{r7, lr}
 800c132:	af00      	add	r7, sp, #0
	osRecursiveMutexWait(FingerRecMutexHandle, osWaitForever);
 800c134:	4b05      	ldr	r3, [pc, #20]	; (800c14c <Finger_On+0x1c>)
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	f04f 31ff 	mov.w	r1, #4294967295
 800c13c:	4618      	mov	r0, r3
 800c13e:	f7fb fb76 	bl	800782e <osRecursiveMutexWait>
	FZ3387_SET_POWER(0);
 800c142:	2000      	movs	r0, #0
 800c144:	f000 faf4 	bl	800c730 <FZ3387_SET_POWER>
}
 800c148:	bf00      	nop
 800c14a:	bd80      	pop	{r7, pc}
 800c14c:	20008644 	.word	0x20008644

0800c150 <Finger_Off>:

void Finger_Off(void) {
 800c150:	b580      	push	{r7, lr}
 800c152:	af00      	add	r7, sp, #0
	FZ3387_SET_POWER(1);
 800c154:	2001      	movs	r0, #1
 800c156:	f000 faeb 	bl	800c730 <FZ3387_SET_POWER>
	osDelay(50);
 800c15a:	2032      	movs	r0, #50	; 0x32
 800c15c:	f7fb f847 	bl	80071ee <osDelay>
	osRecursiveMutexRelease(FingerRecMutexHandle);
 800c160:	4b03      	ldr	r3, [pc, #12]	; (800c170 <Finger_Off+0x20>)
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	4618      	mov	r0, r3
 800c166:	f7fb fb4f 	bl	8007808 <osRecursiveMutexRelease>
}
 800c16a:	bf00      	nop
 800c16c:	bd80      	pop	{r7, pc}
 800c16e:	bf00      	nop
 800c170:	20008644 	.word	0x20008644

0800c174 <Finger_Init>:

void Finger_Init(void) {
 800c174:	b580      	push	{r7, lr}
 800c176:	b082      	sub	sp, #8
 800c178:	af00      	add	r7, sp, #0
	uint8_t verified = 0;
 800c17a:	2300      	movs	r3, #0
 800c17c:	71fb      	strb	r3, [r7, #7]
	
	//	 verify password and check hardware
	do {
		swvPrintLn("Finger_Init");
 800c17e:	480b      	ldr	r0, [pc, #44]	; (800c1ac <Finger_Init+0x38>)
 800c180:	f7ff fa10 	bl	800b5a4 <swvPrintLn>

		Finger_On();
 800c184:	f7ff ffd4 	bl	800c130 <Finger_On>
		verified = FZ3387_verifyPassword();
 800c188:	f000 fb34 	bl	800c7f4 <FZ3387_verifyPassword>
 800c18c:	4603      	mov	r3, r0
 800c18e:	71fb      	strb	r3, [r7, #7]
		Finger_Off();
 800c190:	f7ff ffde 	bl	800c150 <Finger_Off>

		osDelay(500);
 800c194:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800c198:	f7fb f829 	bl	80071ee <osDelay>
	} while (!verified);
 800c19c:	79fb      	ldrb	r3, [r7, #7]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d0ed      	beq.n	800c17e <Finger_Init+0xa>
}
 800c1a2:	bf00      	nop
 800c1a4:	3708      	adds	r7, #8
 800c1a6:	46bd      	mov	sp, r7
 800c1a8:	bd80      	pop	{r7, pc}
 800c1aa:	bf00      	nop
 800c1ac:	08014ad8 	.word	0x08014ad8

0800c1b0 <Finger_Enroll>:

uint8_t Finger_Enroll(uint8_t id) {
 800c1b0:	b580      	push	{r7, lr}
 800c1b2:	b086      	sub	sp, #24
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	4603      	mov	r3, r0
 800c1b8:	71fb      	strb	r3, [r7, #7]
	uint32_t tick, timeout_tick;
	int p = -1, error = 0;
 800c1ba:	f04f 33ff 	mov.w	r3, #4294967295
 800c1be:	617b      	str	r3, [r7, #20]
 800c1c0:	2300      	movs	r3, #0
 800c1c2:	613b      	str	r3, [r7, #16]

	Finger_On();
 800c1c4:	f7ff ffb4 	bl	800c130 <Finger_On>
	// convert time to tick
	timeout_tick = osKernelSysTickMicroSec(FINGER_SCAN_TIMEOUT*1000*1000);
 800c1c8:	f644 6320 	movw	r3, #20000	; 0x4e20
 800c1cc:	60fb      	str	r3, [r7, #12]
	//	Take Image
	sprintf(str, "Waiting for valid finger to enroll as # %d", id);
 800c1ce:	79fb      	ldrb	r3, [r7, #7]
 800c1d0:	461a      	mov	r2, r3
 800c1d2:	49b9      	ldr	r1, [pc, #740]	; (800c4b8 <Finger_Enroll+0x308>)
 800c1d4:	48b9      	ldr	r0, [pc, #740]	; (800c4bc <Finger_Enroll+0x30c>)
 800c1d6:	f005 f8ab 	bl	8011330 <siprintf>
	swvPrintLn(str);
 800c1da:	48b8      	ldr	r0, [pc, #736]	; (800c4bc <Finger_Enroll+0x30c>)
 800c1dc:	f7ff f9e2 	bl	800b5a4 <swvPrintLn>

	// set timeout guard
	tick = osKernelSysTick();
 800c1e0:	f7fa ffa9 	bl	8007136 <osKernelSysTick>
 800c1e4:	60b8      	str	r0, [r7, #8]
	while (p != FINGERPRINT_OK && !error) {
 800c1e6:	e031      	b.n	800c24c <Finger_Enroll+0x9c>
		// handle timeout
		if ((osKernelSysTick() - tick) > timeout_tick) {
 800c1e8:	f7fa ffa5 	bl	8007136 <osKernelSysTick>
 800c1ec:	4602      	mov	r2, r0
 800c1ee:	68bb      	ldr	r3, [r7, #8]
 800c1f0:	1ad3      	subs	r3, r2, r3
 800c1f2:	68fa      	ldr	r2, [r7, #12]
 800c1f4:	429a      	cmp	r2, r3
 800c1f6:	d201      	bcs.n	800c1fc <Finger_Enroll+0x4c>
			error = 1;
 800c1f8:	2301      	movs	r3, #1
 800c1fa:	613b      	str	r3, [r7, #16]
		}
		// send command
		BSP_Led_Toggle();
 800c1fc:	f7ff fab2 	bl	800b764 <BSP_Led_Toggle>
		p = FZ3387_getImage();
 800c200:	f000 fb24 	bl	800c84c <FZ3387_getImage>
 800c204:	4603      	mov	r3, r0
 800c206:	617b      	str	r3, [r7, #20]
		// check response
		switch (p) {
 800c208:	697b      	ldr	r3, [r7, #20]
 800c20a:	2b03      	cmp	r3, #3
 800c20c:	d81a      	bhi.n	800c244 <Finger_Enroll+0x94>
 800c20e:	a201      	add	r2, pc, #4	; (adr r2, 800c214 <Finger_Enroll+0x64>)
 800c210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c214:	0800c225 	.word	0x0800c225
 800c218:	0800c235 	.word	0x0800c235
 800c21c:	0800c22d 	.word	0x0800c22d
 800c220:	0800c23d 	.word	0x0800c23d
			case FINGERPRINT_OK:
				swvPrintLn("Image taken");
 800c224:	48a6      	ldr	r0, [pc, #664]	; (800c4c0 <Finger_Enroll+0x310>)
 800c226:	f7ff f9bd 	bl	800b5a4 <swvPrintLn>
				break;
 800c22a:	e00f      	b.n	800c24c <Finger_Enroll+0x9c>
			case FINGERPRINT_NOFINGER:
				swvPrintLn(".");
 800c22c:	48a5      	ldr	r0, [pc, #660]	; (800c4c4 <Finger_Enroll+0x314>)
 800c22e:	f7ff f9b9 	bl	800b5a4 <swvPrintLn>
				break;
 800c232:	e00b      	b.n	800c24c <Finger_Enroll+0x9c>
			case FINGERPRINT_PACKETRECIEVEERR:
				swvPrintLn("Communication error");
 800c234:	48a4      	ldr	r0, [pc, #656]	; (800c4c8 <Finger_Enroll+0x318>)
 800c236:	f7ff f9b5 	bl	800b5a4 <swvPrintLn>
				break;
 800c23a:	e007      	b.n	800c24c <Finger_Enroll+0x9c>
			case FINGERPRINT_IMAGEFAIL:
				swvPrintLn("Imaging error");
 800c23c:	48a3      	ldr	r0, [pc, #652]	; (800c4cc <Finger_Enroll+0x31c>)
 800c23e:	f7ff f9b1 	bl	800b5a4 <swvPrintLn>
				break;
 800c242:	e003      	b.n	800c24c <Finger_Enroll+0x9c>
			default:
				swvPrintLn("Unknown error");
 800c244:	48a2      	ldr	r0, [pc, #648]	; (800c4d0 <Finger_Enroll+0x320>)
 800c246:	f7ff f9ad 	bl	800b5a4 <swvPrintLn>
				break;
 800c24a:	bf00      	nop
	while (p != FINGERPRINT_OK && !error) {
 800c24c:	697b      	ldr	r3, [r7, #20]
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d002      	beq.n	800c258 <Finger_Enroll+0xa8>
 800c252:	693b      	ldr	r3, [r7, #16]
 800c254:	2b00      	cmp	r3, #0
 800c256:	d0c7      	beq.n	800c1e8 <Finger_Enroll+0x38>
		}
	}

	if (!error) {
 800c258:	693b      	ldr	r3, [r7, #16]
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d152      	bne.n	800c304 <Finger_Enroll+0x154>
		// set default to error, then set to fix
		error = 1;
 800c25e:	2301      	movs	r3, #1
 800c260:	613b      	str	r3, [r7, #16]
		//	put image to buffer 1
		p = FZ3387_image2Tz(1);
 800c262:	2001      	movs	r0, #1
 800c264:	f000 fb01 	bl	800c86a <FZ3387_image2Tz>
 800c268:	4603      	mov	r3, r0
 800c26a:	617b      	str	r3, [r7, #20]
		switch (p) {
 800c26c:	697b      	ldr	r3, [r7, #20]
 800c26e:	2b15      	cmp	r3, #21
 800c270:	d844      	bhi.n	800c2fc <Finger_Enroll+0x14c>
 800c272:	a201      	add	r2, pc, #4	; (adr r2, 800c278 <Finger_Enroll+0xc8>)
 800c274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c278:	0800c2d1 	.word	0x0800c2d1
 800c27c:	0800c2e5 	.word	0x0800c2e5
 800c280:	0800c2fd 	.word	0x0800c2fd
 800c284:	0800c2fd 	.word	0x0800c2fd
 800c288:	0800c2fd 	.word	0x0800c2fd
 800c28c:	0800c2fd 	.word	0x0800c2fd
 800c290:	0800c2dd 	.word	0x0800c2dd
 800c294:	0800c2ed 	.word	0x0800c2ed
 800c298:	0800c2fd 	.word	0x0800c2fd
 800c29c:	0800c2fd 	.word	0x0800c2fd
 800c2a0:	0800c2fd 	.word	0x0800c2fd
 800c2a4:	0800c2fd 	.word	0x0800c2fd
 800c2a8:	0800c2fd 	.word	0x0800c2fd
 800c2ac:	0800c2fd 	.word	0x0800c2fd
 800c2b0:	0800c2fd 	.word	0x0800c2fd
 800c2b4:	0800c2fd 	.word	0x0800c2fd
 800c2b8:	0800c2fd 	.word	0x0800c2fd
 800c2bc:	0800c2fd 	.word	0x0800c2fd
 800c2c0:	0800c2fd 	.word	0x0800c2fd
 800c2c4:	0800c2fd 	.word	0x0800c2fd
 800c2c8:	0800c2fd 	.word	0x0800c2fd
 800c2cc:	0800c2f5 	.word	0x0800c2f5
			case FINGERPRINT_OK:
				swvPrintLn("Image converted");
 800c2d0:	4880      	ldr	r0, [pc, #512]	; (800c4d4 <Finger_Enroll+0x324>)
 800c2d2:	f7ff f967 	bl	800b5a4 <swvPrintLn>
				error = 0;
 800c2d6:	2300      	movs	r3, #0
 800c2d8:	613b      	str	r3, [r7, #16]
				break;
 800c2da:	e014      	b.n	800c306 <Finger_Enroll+0x156>
			case FINGERPRINT_IMAGEMESS:
				swvPrintLn("Image too messy");
 800c2dc:	487e      	ldr	r0, [pc, #504]	; (800c4d8 <Finger_Enroll+0x328>)
 800c2de:	f7ff f961 	bl	800b5a4 <swvPrintLn>
				break;
 800c2e2:	e010      	b.n	800c306 <Finger_Enroll+0x156>
			case FINGERPRINT_PACKETRECIEVEERR:
				swvPrintLn("Communication error");
 800c2e4:	4878      	ldr	r0, [pc, #480]	; (800c4c8 <Finger_Enroll+0x318>)
 800c2e6:	f7ff f95d 	bl	800b5a4 <swvPrintLn>
				break;
 800c2ea:	e00c      	b.n	800c306 <Finger_Enroll+0x156>
			case FINGERPRINT_FEATUREFAIL:
				swvPrintLn("Could not find finger print features");
 800c2ec:	487b      	ldr	r0, [pc, #492]	; (800c4dc <Finger_Enroll+0x32c>)
 800c2ee:	f7ff f959 	bl	800b5a4 <swvPrintLn>
				break;
 800c2f2:	e008      	b.n	800c306 <Finger_Enroll+0x156>
			case FINGERPRINT_INVALIDIMAGE:
				swvPrintLn("Could not find finger print features");
 800c2f4:	4879      	ldr	r0, [pc, #484]	; (800c4dc <Finger_Enroll+0x32c>)
 800c2f6:	f7ff f955 	bl	800b5a4 <swvPrintLn>
				break;
 800c2fa:	e004      	b.n	800c306 <Finger_Enroll+0x156>
			default:
				swvPrintLn("Unknown error");
 800c2fc:	4874      	ldr	r0, [pc, #464]	; (800c4d0 <Finger_Enroll+0x320>)
 800c2fe:	f7ff f951 	bl	800b5a4 <swvPrintLn>
				break;
 800c302:	e000      	b.n	800c306 <Finger_Enroll+0x156>
		}
	}
 800c304:	bf00      	nop

	if (!error) {
 800c306:	693b      	ldr	r3, [r7, #16]
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d14b      	bne.n	800c3a4 <Finger_Enroll+0x1f4>
		//	 Wait for put your finger up
		BSP_Led_Write(0);
 800c30c:	2000      	movs	r0, #0
 800c30e:	f7ff fa01 	bl	800b714 <BSP_Led_Write>
		swvPrintLn("Remove finger");
 800c312:	4873      	ldr	r0, [pc, #460]	; (800c4e0 <Finger_Enroll+0x330>)
 800c314:	f7ff f946 	bl	800b5a4 <swvPrintLn>
		osDelay(2000);
 800c318:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c31c:	f7fa ff67 	bl	80071ee <osDelay>

		//	Take Image again
		swvPrintLn("Place same finger again");
 800c320:	4870      	ldr	r0, [pc, #448]	; (800c4e4 <Finger_Enroll+0x334>)
 800c322:	f7ff f93f 	bl	800b5a4 <swvPrintLn>
		p = -1;
 800c326:	f04f 33ff 	mov.w	r3, #4294967295
 800c32a:	617b      	str	r3, [r7, #20]
		// set timeout guard
		tick = osKernelSysTick();
 800c32c:	f7fa ff03 	bl	8007136 <osKernelSysTick>
 800c330:	60b8      	str	r0, [r7, #8]
		while (p != FINGERPRINT_OK && !error) {
 800c332:	e031      	b.n	800c398 <Finger_Enroll+0x1e8>
			// handle timeout
			if ((osKernelSysTick() - tick) > timeout_tick) {
 800c334:	f7fa feff 	bl	8007136 <osKernelSysTick>
 800c338:	4602      	mov	r2, r0
 800c33a:	68bb      	ldr	r3, [r7, #8]
 800c33c:	1ad3      	subs	r3, r2, r3
 800c33e:	68fa      	ldr	r2, [r7, #12]
 800c340:	429a      	cmp	r2, r3
 800c342:	d201      	bcs.n	800c348 <Finger_Enroll+0x198>
				error = 1;
 800c344:	2301      	movs	r3, #1
 800c346:	613b      	str	r3, [r7, #16]
			}
			// send command
			BSP_Led_Toggle();
 800c348:	f7ff fa0c 	bl	800b764 <BSP_Led_Toggle>
			p = FZ3387_getImage();
 800c34c:	f000 fa7e 	bl	800c84c <FZ3387_getImage>
 800c350:	4603      	mov	r3, r0
 800c352:	617b      	str	r3, [r7, #20]
			// handle response
			switch (p) {
 800c354:	697b      	ldr	r3, [r7, #20]
 800c356:	2b03      	cmp	r3, #3
 800c358:	d81a      	bhi.n	800c390 <Finger_Enroll+0x1e0>
 800c35a:	a201      	add	r2, pc, #4	; (adr r2, 800c360 <Finger_Enroll+0x1b0>)
 800c35c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c360:	0800c371 	.word	0x0800c371
 800c364:	0800c381 	.word	0x0800c381
 800c368:	0800c379 	.word	0x0800c379
 800c36c:	0800c389 	.word	0x0800c389
				case FINGERPRINT_OK:
					swvPrintLn("Image taken");
 800c370:	4853      	ldr	r0, [pc, #332]	; (800c4c0 <Finger_Enroll+0x310>)
 800c372:	f7ff f917 	bl	800b5a4 <swvPrintLn>
					break;
 800c376:	e00f      	b.n	800c398 <Finger_Enroll+0x1e8>
				case FINGERPRINT_NOFINGER:
					swvPrint(".");
 800c378:	4852      	ldr	r0, [pc, #328]	; (800c4c4 <Finger_Enroll+0x314>)
 800c37a:	f7ff f8f1 	bl	800b560 <swvPrint>
					break;
 800c37e:	e00b      	b.n	800c398 <Finger_Enroll+0x1e8>
				case FINGERPRINT_PACKETRECIEVEERR:
					swvPrintLn("Communication error");
 800c380:	4851      	ldr	r0, [pc, #324]	; (800c4c8 <Finger_Enroll+0x318>)
 800c382:	f7ff f90f 	bl	800b5a4 <swvPrintLn>
					break;
 800c386:	e007      	b.n	800c398 <Finger_Enroll+0x1e8>
				case FINGERPRINT_IMAGEFAIL:
					swvPrintLn("Imaging error");
 800c388:	4850      	ldr	r0, [pc, #320]	; (800c4cc <Finger_Enroll+0x31c>)
 800c38a:	f7ff f90b 	bl	800b5a4 <swvPrintLn>
					break;
 800c38e:	e003      	b.n	800c398 <Finger_Enroll+0x1e8>
				default:
					swvPrintLn("Unknown error");
 800c390:	484f      	ldr	r0, [pc, #316]	; (800c4d0 <Finger_Enroll+0x320>)
 800c392:	f7ff f907 	bl	800b5a4 <swvPrintLn>
					break;
 800c396:	bf00      	nop
		while (p != FINGERPRINT_OK && !error) {
 800c398:	697b      	ldr	r3, [r7, #20]
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d002      	beq.n	800c3a4 <Finger_Enroll+0x1f4>
 800c39e:	693b      	ldr	r3, [r7, #16]
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d0c7      	beq.n	800c334 <Finger_Enroll+0x184>
			}
		}
	}

	if (!error) {
 800c3a4:	693b      	ldr	r3, [r7, #16]
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d152      	bne.n	800c450 <Finger_Enroll+0x2a0>
		error = 1;
 800c3aa:	2301      	movs	r3, #1
 800c3ac:	613b      	str	r3, [r7, #16]
		//	put image to buffer 2
		p = FZ3387_image2Tz(2);
 800c3ae:	2002      	movs	r0, #2
 800c3b0:	f000 fa5b 	bl	800c86a <FZ3387_image2Tz>
 800c3b4:	4603      	mov	r3, r0
 800c3b6:	617b      	str	r3, [r7, #20]
		switch (p) {
 800c3b8:	697b      	ldr	r3, [r7, #20]
 800c3ba:	2b15      	cmp	r3, #21
 800c3bc:	d844      	bhi.n	800c448 <Finger_Enroll+0x298>
 800c3be:	a201      	add	r2, pc, #4	; (adr r2, 800c3c4 <Finger_Enroll+0x214>)
 800c3c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3c4:	0800c41d 	.word	0x0800c41d
 800c3c8:	0800c431 	.word	0x0800c431
 800c3cc:	0800c449 	.word	0x0800c449
 800c3d0:	0800c449 	.word	0x0800c449
 800c3d4:	0800c449 	.word	0x0800c449
 800c3d8:	0800c449 	.word	0x0800c449
 800c3dc:	0800c429 	.word	0x0800c429
 800c3e0:	0800c439 	.word	0x0800c439
 800c3e4:	0800c449 	.word	0x0800c449
 800c3e8:	0800c449 	.word	0x0800c449
 800c3ec:	0800c449 	.word	0x0800c449
 800c3f0:	0800c449 	.word	0x0800c449
 800c3f4:	0800c449 	.word	0x0800c449
 800c3f8:	0800c449 	.word	0x0800c449
 800c3fc:	0800c449 	.word	0x0800c449
 800c400:	0800c449 	.word	0x0800c449
 800c404:	0800c449 	.word	0x0800c449
 800c408:	0800c449 	.word	0x0800c449
 800c40c:	0800c449 	.word	0x0800c449
 800c410:	0800c449 	.word	0x0800c449
 800c414:	0800c449 	.word	0x0800c449
 800c418:	0800c441 	.word	0x0800c441
			case FINGERPRINT_OK:
				swvPrintLn("Image converted");
 800c41c:	482d      	ldr	r0, [pc, #180]	; (800c4d4 <Finger_Enroll+0x324>)
 800c41e:	f7ff f8c1 	bl	800b5a4 <swvPrintLn>
				error = 0;
 800c422:	2300      	movs	r3, #0
 800c424:	613b      	str	r3, [r7, #16]
				break;
 800c426:	e014      	b.n	800c452 <Finger_Enroll+0x2a2>
			case FINGERPRINT_IMAGEMESS:
				swvPrintLn("Image too messy");
 800c428:	482b      	ldr	r0, [pc, #172]	; (800c4d8 <Finger_Enroll+0x328>)
 800c42a:	f7ff f8bb 	bl	800b5a4 <swvPrintLn>
				break;
 800c42e:	e010      	b.n	800c452 <Finger_Enroll+0x2a2>
			case FINGERPRINT_PACKETRECIEVEERR:
				swvPrintLn("Communication error");
 800c430:	4825      	ldr	r0, [pc, #148]	; (800c4c8 <Finger_Enroll+0x318>)
 800c432:	f7ff f8b7 	bl	800b5a4 <swvPrintLn>
				break;
 800c436:	e00c      	b.n	800c452 <Finger_Enroll+0x2a2>
			case FINGERPRINT_FEATUREFAIL:
				swvPrintLn("Could not find fingerprint features");
 800c438:	482b      	ldr	r0, [pc, #172]	; (800c4e8 <Finger_Enroll+0x338>)
 800c43a:	f7ff f8b3 	bl	800b5a4 <swvPrintLn>
				break;
 800c43e:	e008      	b.n	800c452 <Finger_Enroll+0x2a2>
			case FINGERPRINT_INVALIDIMAGE:
				swvPrintLn("Could not find fingerprint features");
 800c440:	4829      	ldr	r0, [pc, #164]	; (800c4e8 <Finger_Enroll+0x338>)
 800c442:	f7ff f8af 	bl	800b5a4 <swvPrintLn>
				break;
 800c446:	e004      	b.n	800c452 <Finger_Enroll+0x2a2>
			default:
				swvPrintLn("Unknown error");
 800c448:	4821      	ldr	r0, [pc, #132]	; (800c4d0 <Finger_Enroll+0x320>)
 800c44a:	f7ff f8ab 	bl	800b5a4 <swvPrintLn>
				break;
 800c44e:	e000      	b.n	800c452 <Finger_Enroll+0x2a2>
		}
	}
 800c450:	bf00      	nop

	if (!error) {
 800c452:	693b      	ldr	r3, [r7, #16]
 800c454:	2b00      	cmp	r3, #0
 800c456:	d152      	bne.n	800c4fe <Finger_Enroll+0x34e>
		//	 Wait for put your finger up
		BSP_Led_Write(0);
 800c458:	2000      	movs	r0, #0
 800c45a:	f7ff f95b 	bl	800b714 <BSP_Led_Write>
		swvPrintLn("Remove finger");
 800c45e:	4820      	ldr	r0, [pc, #128]	; (800c4e0 <Finger_Enroll+0x330>)
 800c460:	f7ff f8a0 	bl	800b5a4 <swvPrintLn>
		osDelay(2000);
 800c464:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c468:	f7fa fec1 	bl	80071ee <osDelay>
		//	Create Register model
		error = 1;
 800c46c:	2301      	movs	r3, #1
 800c46e:	613b      	str	r3, [r7, #16]
		sprintf(str, "Creating model for #%d", id);
 800c470:	79fb      	ldrb	r3, [r7, #7]
 800c472:	461a      	mov	r2, r3
 800c474:	491d      	ldr	r1, [pc, #116]	; (800c4ec <Finger_Enroll+0x33c>)
 800c476:	4811      	ldr	r0, [pc, #68]	; (800c4bc <Finger_Enroll+0x30c>)
 800c478:	f004 ff5a 	bl	8011330 <siprintf>
		swvPrintLn(str);
 800c47c:	480f      	ldr	r0, [pc, #60]	; (800c4bc <Finger_Enroll+0x30c>)
 800c47e:	f7ff f891 	bl	800b5a4 <swvPrintLn>

		p = FZ3387_createModel();
 800c482:	f000 fa06 	bl	800c892 <FZ3387_createModel>
 800c486:	4603      	mov	r3, r0
 800c488:	617b      	str	r3, [r7, #20]
		if (p == FINGERPRINT_OK) {
 800c48a:	697b      	ldr	r3, [r7, #20]
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d105      	bne.n	800c49c <Finger_Enroll+0x2ec>
			swvPrintLn("Prints matched!");
 800c490:	4817      	ldr	r0, [pc, #92]	; (800c4f0 <Finger_Enroll+0x340>)
 800c492:	f7ff f887 	bl	800b5a4 <swvPrintLn>
			error = 0;
 800c496:	2300      	movs	r3, #0
 800c498:	613b      	str	r3, [r7, #16]
 800c49a:	e030      	b.n	800c4fe <Finger_Enroll+0x34e>
		} else if (p == FINGERPRINT_PACKETRECIEVEERR) {
 800c49c:	697b      	ldr	r3, [r7, #20]
 800c49e:	2b01      	cmp	r3, #1
 800c4a0:	d103      	bne.n	800c4aa <Finger_Enroll+0x2fa>
			swvPrintLn("Communication error");
 800c4a2:	4809      	ldr	r0, [pc, #36]	; (800c4c8 <Finger_Enroll+0x318>)
 800c4a4:	f7ff f87e 	bl	800b5a4 <swvPrintLn>
 800c4a8:	e029      	b.n	800c4fe <Finger_Enroll+0x34e>
		} else if (p == FINGERPRINT_ENROLLMISMATCH) {
 800c4aa:	697b      	ldr	r3, [r7, #20]
 800c4ac:	2b0a      	cmp	r3, #10
 800c4ae:	d123      	bne.n	800c4f8 <Finger_Enroll+0x348>
			swvPrintLn("Fingerprints did not match");
 800c4b0:	4810      	ldr	r0, [pc, #64]	; (800c4f4 <Finger_Enroll+0x344>)
 800c4b2:	f7ff f877 	bl	800b5a4 <swvPrintLn>
 800c4b6:	e022      	b.n	800c4fe <Finger_Enroll+0x34e>
 800c4b8:	08014ae4 	.word	0x08014ae4
 800c4bc:	20007b94 	.word	0x20007b94
 800c4c0:	08014b10 	.word	0x08014b10
 800c4c4:	08014b1c 	.word	0x08014b1c
 800c4c8:	08014b20 	.word	0x08014b20
 800c4cc:	08014b34 	.word	0x08014b34
 800c4d0:	08014b44 	.word	0x08014b44
 800c4d4:	08014b54 	.word	0x08014b54
 800c4d8:	08014b64 	.word	0x08014b64
 800c4dc:	08014b74 	.word	0x08014b74
 800c4e0:	08014b9c 	.word	0x08014b9c
 800c4e4:	08014bac 	.word	0x08014bac
 800c4e8:	08014bc4 	.word	0x08014bc4
 800c4ec:	08014be8 	.word	0x08014be8
 800c4f0:	08014c00 	.word	0x08014c00
 800c4f4:	08014c10 	.word	0x08014c10
		} else {
			swvPrintLn("Unknown error");
 800c4f8:	4820      	ldr	r0, [pc, #128]	; (800c57c <Finger_Enroll+0x3cc>)
 800c4fa:	f7ff f853 	bl	800b5a4 <swvPrintLn>
		}
	}

	if (!error) {
 800c4fe:	693b      	ldr	r3, [r7, #16]
 800c500:	2b00      	cmp	r3, #0
 800c502:	d132      	bne.n	800c56a <Finger_Enroll+0x3ba>
		error = 1;
 800c504:	2301      	movs	r3, #1
 800c506:	613b      	str	r3, [r7, #16]
		//	Store in memory
		sprintf(str, "ID %d", id);
 800c508:	79fb      	ldrb	r3, [r7, #7]
 800c50a:	461a      	mov	r2, r3
 800c50c:	491c      	ldr	r1, [pc, #112]	; (800c580 <Finger_Enroll+0x3d0>)
 800c50e:	481d      	ldr	r0, [pc, #116]	; (800c584 <Finger_Enroll+0x3d4>)
 800c510:	f004 ff0e 	bl	8011330 <siprintf>
		swvPrintLn(str);
 800c514:	481b      	ldr	r0, [pc, #108]	; (800c584 <Finger_Enroll+0x3d4>)
 800c516:	f7ff f845 	bl	800b5a4 <swvPrintLn>

		p = FZ3387_storeModel(id);
 800c51a:	79fb      	ldrb	r3, [r7, #7]
 800c51c:	b29b      	uxth	r3, r3
 800c51e:	4618      	mov	r0, r3
 800c520:	f000 f9c6 	bl	800c8b0 <FZ3387_storeModel>
 800c524:	4603      	mov	r3, r0
 800c526:	617b      	str	r3, [r7, #20]
		if (p == FINGERPRINT_OK) {
 800c528:	697b      	ldr	r3, [r7, #20]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d105      	bne.n	800c53a <Finger_Enroll+0x38a>
			swvPrintLn("Stored!");
 800c52e:	4816      	ldr	r0, [pc, #88]	; (800c588 <Finger_Enroll+0x3d8>)
 800c530:	f7ff f838 	bl	800b5a4 <swvPrintLn>
			error = 0;
 800c534:	2300      	movs	r3, #0
 800c536:	613b      	str	r3, [r7, #16]
 800c538:	e017      	b.n	800c56a <Finger_Enroll+0x3ba>
		} else if (p == FINGERPRINT_PACKETRECIEVEERR) {
 800c53a:	697b      	ldr	r3, [r7, #20]
 800c53c:	2b01      	cmp	r3, #1
 800c53e:	d103      	bne.n	800c548 <Finger_Enroll+0x398>
			swvPrintLn("Communication error");
 800c540:	4812      	ldr	r0, [pc, #72]	; (800c58c <Finger_Enroll+0x3dc>)
 800c542:	f7ff f82f 	bl	800b5a4 <swvPrintLn>
 800c546:	e010      	b.n	800c56a <Finger_Enroll+0x3ba>
		} else if (p == FINGERPRINT_BADLOCATION) {
 800c548:	697b      	ldr	r3, [r7, #20]
 800c54a:	2b0b      	cmp	r3, #11
 800c54c:	d103      	bne.n	800c556 <Finger_Enroll+0x3a6>
			swvPrintLn("Could not store in that location");
 800c54e:	4810      	ldr	r0, [pc, #64]	; (800c590 <Finger_Enroll+0x3e0>)
 800c550:	f7ff f828 	bl	800b5a4 <swvPrintLn>
 800c554:	e009      	b.n	800c56a <Finger_Enroll+0x3ba>
		} else if (p == FINGERPRINT_FLASHERR) {
 800c556:	697b      	ldr	r3, [r7, #20]
 800c558:	2b18      	cmp	r3, #24
 800c55a:	d103      	bne.n	800c564 <Finger_Enroll+0x3b4>
			swvPrintLn("Error writing to flash");
 800c55c:	480d      	ldr	r0, [pc, #52]	; (800c594 <Finger_Enroll+0x3e4>)
 800c55e:	f7ff f821 	bl	800b5a4 <swvPrintLn>
 800c562:	e002      	b.n	800c56a <Finger_Enroll+0x3ba>
		} else {
			swvPrintLn("Unknown error");
 800c564:	4805      	ldr	r0, [pc, #20]	; (800c57c <Finger_Enroll+0x3cc>)
 800c566:	f7ff f81d 	bl	800b5a4 <swvPrintLn>
		}
	}

	Finger_Off();
 800c56a:	f7ff fdf1 	bl	800c150 <Finger_Off>
	return p;
 800c56e:	697b      	ldr	r3, [r7, #20]
 800c570:	b2db      	uxtb	r3, r3
}
 800c572:	4618      	mov	r0, r3
 800c574:	3718      	adds	r7, #24
 800c576:	46bd      	mov	sp, r7
 800c578:	bd80      	pop	{r7, pc}
 800c57a:	bf00      	nop
 800c57c:	08014b44 	.word	0x08014b44
 800c580:	08014c2c 	.word	0x08014c2c
 800c584:	20007b94 	.word	0x20007b94
 800c588:	08014c34 	.word	0x08014c34
 800c58c:	08014b20 	.word	0x08014b20
 800c590:	08014c3c 	.word	0x08014c3c
 800c594:	08014c60 	.word	0x08014c60

0800c598 <Finger_Delete_ID>:

uint8_t Finger_Delete_ID(uint8_t id) {
 800c598:	b580      	push	{r7, lr}
 800c59a:	b084      	sub	sp, #16
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	4603      	mov	r3, r0
 800c5a0:	71fb      	strb	r3, [r7, #7]
	uint8_t p = -1;
 800c5a2:	23ff      	movs	r3, #255	; 0xff
 800c5a4:	73fb      	strb	r3, [r7, #15]

	Finger_On();
 800c5a6:	f7ff fdc3 	bl	800c130 <Finger_On>
	p = FZ3387_deleteModel(id);
 800c5aa:	79fb      	ldrb	r3, [r7, #7]
 800c5ac:	b29b      	uxth	r3, r3
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	f000 f99a 	bl	800c8e8 <FZ3387_deleteModel>
 800c5b4:	4603      	mov	r3, r0
 800c5b6:	73fb      	strb	r3, [r7, #15]
	Finger_Off();
 800c5b8:	f7ff fdca 	bl	800c150 <Finger_Off>

	if (p == FINGERPRINT_OK) {
 800c5bc:	7bfb      	ldrb	r3, [r7, #15]
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d103      	bne.n	800c5ca <Finger_Delete_ID+0x32>
		swvPrintLn("Deleted!");
 800c5c2:	4813      	ldr	r0, [pc, #76]	; (800c610 <Finger_Delete_ID+0x78>)
 800c5c4:	f7fe ffee 	bl	800b5a4 <swvPrintLn>
 800c5c8:	e01d      	b.n	800c606 <Finger_Delete_ID+0x6e>
	} else if (p == FINGERPRINT_PACKETRECIEVEERR) {
 800c5ca:	7bfb      	ldrb	r3, [r7, #15]
 800c5cc:	2b01      	cmp	r3, #1
 800c5ce:	d103      	bne.n	800c5d8 <Finger_Delete_ID+0x40>
		swvPrintLn("Communication error");
 800c5d0:	4810      	ldr	r0, [pc, #64]	; (800c614 <Finger_Delete_ID+0x7c>)
 800c5d2:	f7fe ffe7 	bl	800b5a4 <swvPrintLn>
 800c5d6:	e016      	b.n	800c606 <Finger_Delete_ID+0x6e>
	} else if (p == FINGERPRINT_BADLOCATION) {
 800c5d8:	7bfb      	ldrb	r3, [r7, #15]
 800c5da:	2b0b      	cmp	r3, #11
 800c5dc:	d103      	bne.n	800c5e6 <Finger_Delete_ID+0x4e>
		swvPrintLn("Could not delete in that location");
 800c5de:	480e      	ldr	r0, [pc, #56]	; (800c618 <Finger_Delete_ID+0x80>)
 800c5e0:	f7fe ffe0 	bl	800b5a4 <swvPrintLn>
 800c5e4:	e00f      	b.n	800c606 <Finger_Delete_ID+0x6e>
	} else if (p == FINGERPRINT_FLASHERR) {
 800c5e6:	7bfb      	ldrb	r3, [r7, #15]
 800c5e8:	2b18      	cmp	r3, #24
 800c5ea:	d103      	bne.n	800c5f4 <Finger_Delete_ID+0x5c>
		swvPrintLn("Error writing to flash");
 800c5ec:	480b      	ldr	r0, [pc, #44]	; (800c61c <Finger_Delete_ID+0x84>)
 800c5ee:	f7fe ffd9 	bl	800b5a4 <swvPrintLn>
 800c5f2:	e008      	b.n	800c606 <Finger_Delete_ID+0x6e>
	} else {
		sprintf(str, "Unknown error: 0x%02x", p);
 800c5f4:	7bfb      	ldrb	r3, [r7, #15]
 800c5f6:	461a      	mov	r2, r3
 800c5f8:	4909      	ldr	r1, [pc, #36]	; (800c620 <Finger_Delete_ID+0x88>)
 800c5fa:	480a      	ldr	r0, [pc, #40]	; (800c624 <Finger_Delete_ID+0x8c>)
 800c5fc:	f004 fe98 	bl	8011330 <siprintf>
		swvPrintLn(str);
 800c600:	4808      	ldr	r0, [pc, #32]	; (800c624 <Finger_Delete_ID+0x8c>)
 800c602:	f7fe ffcf 	bl	800b5a4 <swvPrintLn>
	}

	return p;
 800c606:	7bfb      	ldrb	r3, [r7, #15]
}
 800c608:	4618      	mov	r0, r3
 800c60a:	3710      	adds	r7, #16
 800c60c:	46bd      	mov	sp, r7
 800c60e:	bd80      	pop	{r7, pc}
 800c610:	08014c78 	.word	0x08014c78
 800c614:	08014b20 	.word	0x08014b20
 800c618:	08014c84 	.word	0x08014c84
 800c61c:	08014c60 	.word	0x08014c60
 800c620:	08014ca8 	.word	0x08014ca8
 800c624:	20007b94 	.word	0x20007b94

0800c628 <Finger_Empty_Database>:

uint8_t Finger_Empty_Database(void) {
 800c628:	b580      	push	{r7, lr}
 800c62a:	b082      	sub	sp, #8
 800c62c:	af00      	add	r7, sp, #0
	uint8_t p = -1;
 800c62e:	23ff      	movs	r3, #255	; 0xff
 800c630:	71fb      	strb	r3, [r7, #7]

	Finger_On();
 800c632:	f7ff fd7d 	bl	800c130 <Finger_On>
	p = FZ3387_emptyDatabase();
 800c636:	f000 f975 	bl	800c924 <FZ3387_emptyDatabase>
 800c63a:	4603      	mov	r3, r0
 800c63c:	71fb      	strb	r3, [r7, #7]
	Finger_Off();
 800c63e:	f7ff fd87 	bl	800c150 <Finger_Off>

	return p;
 800c642:	79fb      	ldrb	r3, [r7, #7]
}
 800c644:	4618      	mov	r0, r3
 800c646:	3708      	adds	r7, #8
 800c648:	46bd      	mov	sp, r7
 800c64a:	bd80      	pop	{r7, pc}

0800c64c <Finger_Auth_Fast>:
	}

	return -1;
}

int8_t Finger_Auth_Fast(void) {
 800c64c:	b580      	push	{r7, lr}
 800c64e:	b082      	sub	sp, #8
 800c650:	af00      	add	r7, sp, #0
	uint8_t p = -1;
 800c652:	23ff      	movs	r3, #255	; 0xff
 800c654:	71fb      	strb	r3, [r7, #7]

	p = FZ3387_getImage();
 800c656:	f000 f8f9 	bl	800c84c <FZ3387_getImage>
 800c65a:	4603      	mov	r3, r0
 800c65c:	71fb      	strb	r3, [r7, #7]

	if (p == FINGERPRINT_OK) {
 800c65e:	79fb      	ldrb	r3, [r7, #7]
 800c660:	2b00      	cmp	r3, #0
 800c662:	d104      	bne.n	800c66e <Finger_Auth_Fast+0x22>
		p = FZ3387_image2Tz(1);
 800c664:	2001      	movs	r0, #1
 800c666:	f000 f900 	bl	800c86a <FZ3387_image2Tz>
 800c66a:	4603      	mov	r3, r0
 800c66c:	71fb      	strb	r3, [r7, #7]
	}

	if (p == FINGERPRINT_OK) {
 800c66e:	79fb      	ldrb	r3, [r7, #7]
 800c670:	2b00      	cmp	r3, #0
 800c672:	d103      	bne.n	800c67c <Finger_Auth_Fast+0x30>
		p = FZ3387_fingerFastSearch();
 800c674:	f000 f966 	bl	800c944 <FZ3387_fingerFastSearch>
 800c678:	4603      	mov	r3, r0
 800c67a:	71fb      	strb	r3, [r7, #7]
	}

	if (p == FINGERPRINT_OK) {
 800c67c:	79fb      	ldrb	r3, [r7, #7]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d113      	bne.n	800c6aa <Finger_Auth_Fast+0x5e>
		// found a match!
		sprintf(str, "Found ID #%d  with confidence of %d", fingerID, fingerConfidence);
 800c682:	4b0d      	ldr	r3, [pc, #52]	; (800c6b8 <Finger_Auth_Fast+0x6c>)
 800c684:	881b      	ldrh	r3, [r3, #0]
 800c686:	461a      	mov	r2, r3
 800c688:	4b0c      	ldr	r3, [pc, #48]	; (800c6bc <Finger_Auth_Fast+0x70>)
 800c68a:	881b      	ldrh	r3, [r3, #0]
 800c68c:	490c      	ldr	r1, [pc, #48]	; (800c6c0 <Finger_Auth_Fast+0x74>)
 800c68e:	480d      	ldr	r0, [pc, #52]	; (800c6c4 <Finger_Auth_Fast+0x78>)
 800c690:	f004 fe4e 	bl	8011330 <siprintf>
		swvPrintLn(str);
 800c694:	480b      	ldr	r0, [pc, #44]	; (800c6c4 <Finger_Auth_Fast+0x78>)
 800c696:	f7fe ff85 	bl	800b5a4 <swvPrintLn>

		if (fingerConfidence > FINGER_CONFIDENCE_MIN) {
 800c69a:	4b08      	ldr	r3, [pc, #32]	; (800c6bc <Finger_Auth_Fast+0x70>)
 800c69c:	881b      	ldrh	r3, [r3, #0]
 800c69e:	2b0a      	cmp	r3, #10
 800c6a0:	d903      	bls.n	800c6aa <Finger_Auth_Fast+0x5e>
			return fingerID;
 800c6a2:	4b05      	ldr	r3, [pc, #20]	; (800c6b8 <Finger_Auth_Fast+0x6c>)
 800c6a4:	881b      	ldrh	r3, [r3, #0]
 800c6a6:	b25b      	sxtb	r3, r3
 800c6a8:	e001      	b.n	800c6ae <Finger_Auth_Fast+0x62>
		}
	}

	return -1;
 800c6aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	3708      	adds	r7, #8
 800c6b2:	46bd      	mov	sp, r7
 800c6b4:	bd80      	pop	{r7, pc}
 800c6b6:	bf00      	nop
 800c6b8:	2000759c 	.word	0x2000759c
 800c6bc:	200075ec 	.word	0x200075ec
 800c6c0:	08014d04 	.word	0x08014d04
 800c6c4:	20007b94 	.word	0x20007b94

0800c6c8 <Flash_Save_Odometer>:

#include "_flash.h"

uint16_t VirtAddVarTab[NB_OF_VAR] = { VADDR_ODOMETER_L, VADDR_ODOMETER_H };

void Flash_Save_Odometer(uint32_t odometer) {
 800c6c8:	b580      	push	{r7, lr}
 800c6ca:	b082      	sub	sp, #8
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	6078      	str	r0, [r7, #4]
	EE_WriteVariable(VADDR_ODOMETER_L, (uint16_t) odometer);
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	b29b      	uxth	r3, r3
 800c6d4:	4619      	mov	r1, r3
 800c6d6:	2000      	movs	r0, #0
 800c6d8:	f7ff fb54 	bl	800bd84 <EE_WriteVariable>
	EE_WriteVariable(VADDR_ODOMETER_H, (uint16_t) odometer >> 16);
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	b29b      	uxth	r3, r3
 800c6e0:	141b      	asrs	r3, r3, #16
 800c6e2:	b29b      	uxth	r3, r3
 800c6e4:	4619      	mov	r1, r3
 800c6e6:	2001      	movs	r0, #1
 800c6e8:	f7ff fb4c 	bl	800bd84 <EE_WriteVariable>
}
 800c6ec:	bf00      	nop
 800c6ee:	3708      	adds	r7, #8
 800c6f0:	46bd      	mov	sp, r7
 800c6f2:	bd80      	pop	{r7, pc}

0800c6f4 <Flash_Get_Odometer>:

uint32_t Flash_Get_Odometer(void) {
 800c6f4:	b580      	push	{r7, lr}
 800c6f6:	b082      	sub	sp, #8
 800c6f8:	af00      	add	r7, sp, #0
	uint16_t odom_L, odom_H;

	if (EE_ReadVariable(VADDR_ODOMETER_L, &odom_L) == HAL_OK) {
 800c6fa:	1dbb      	adds	r3, r7, #6
 800c6fc:	4619      	mov	r1, r3
 800c6fe:	2000      	movs	r0, #0
 800c700:	f7ff faf6 	bl	800bcf0 <EE_ReadVariable>
 800c704:	4603      	mov	r3, r0
 800c706:	2b00      	cmp	r3, #0
 800c708:	d10c      	bne.n	800c724 <Flash_Get_Odometer+0x30>
		if (EE_ReadVariable(VADDR_ODOMETER_H, &odom_H) == HAL_OK) {
 800c70a:	1d3b      	adds	r3, r7, #4
 800c70c:	4619      	mov	r1, r3
 800c70e:	2001      	movs	r0, #1
 800c710:	f7ff faee 	bl	800bcf0 <EE_ReadVariable>
 800c714:	4603      	mov	r3, r0
 800c716:	2b00      	cmp	r3, #0
 800c718:	d104      	bne.n	800c724 <Flash_Get_Odometer+0x30>
			return (odom_H << 16) | odom_L;
 800c71a:	88bb      	ldrh	r3, [r7, #4]
 800c71c:	041b      	lsls	r3, r3, #16
 800c71e:	88fa      	ldrh	r2, [r7, #6]
 800c720:	4313      	orrs	r3, r2
 800c722:	e000      	b.n	800c726 <Flash_Get_Odometer+0x32>
		}
	}
	return 0;
 800c724:	2300      	movs	r3, #0
}
 800c726:	4618      	mov	r0, r3
 800c728:	3708      	adds	r7, #8
 800c72a:	46bd      	mov	sp, r7
 800c72c:	bd80      	pop	{r7, pc}
	...

0800c730 <FZ3387_SET_POWER>:
uint16_t fingerTemplateCount;

/***************************************************************************
 FUNCTIONS
 ***************************************************************************/
void FZ3387_SET_POWER(uint8_t state){
 800c730:	b580      	push	{r7, lr}
 800c732:	b082      	sub	sp, #8
 800c734:	af00      	add	r7, sp, #0
 800c736:	4603      	mov	r3, r0
 800c738:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(FINGER_PWR_GPIO_Port, FINGER_PWR_Pin, state);
 800c73a:	79fb      	ldrb	r3, [r7, #7]
 800c73c:	461a      	mov	r2, r3
 800c73e:	2104      	movs	r1, #4
 800c740:	4805      	ldr	r0, [pc, #20]	; (800c758 <FZ3387_SET_POWER+0x28>)
 800c742:	f7f5 ffd9 	bl	80026f8 <HAL_GPIO_WritePin>
	osDelay(500);
 800c746:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800c74a:	f7fa fd50 	bl	80071ee <osDelay>
}
 800c74e:	bf00      	nop
 800c750:	3708      	adds	r7, #8
 800c752:	46bd      	mov	sp, r7
 800c754:	bd80      	pop	{r7, pc}
 800c756:	bf00      	nop
 800c758:	40020800 	.word	0x40020800

0800c75c <FZ3387_SERIAL_WRITE>:

void FZ3387_SERIAL_WRITE(uint8_t c){
 800c75c:	b580      	push	{r7, lr}
 800c75e:	b082      	sub	sp, #8
 800c760:	af00      	add	r7, sp, #0
 800c762:	4603      	mov	r3, r0
 800c764:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart4, &c, 1, HAL_MAX_DELAY);
 800c766:	1df9      	adds	r1, r7, #7
 800c768:	f04f 33ff 	mov.w	r3, #4294967295
 800c76c:	2201      	movs	r2, #1
 800c76e:	4803      	ldr	r0, [pc, #12]	; (800c77c <FZ3387_SERIAL_WRITE+0x20>)
 800c770:	f7f9 fe5b 	bl	800642a <HAL_UART_Transmit>
}
 800c774:	bf00      	nop
 800c776:	3708      	adds	r7, #8
 800c778:	46bd      	mov	sp, r7
 800c77a:	bd80      	pop	{r7, pc}
 800c77c:	200084f0 	.word	0x200084f0

0800c780 <FZ3387_SERIAL_WRITE_U16>:

void FZ3387_SERIAL_WRITE_U16(uint16_t cc){
 800c780:	b580      	push	{r7, lr}
 800c782:	b082      	sub	sp, #8
 800c784:	af00      	add	r7, sp, #0
 800c786:	4603      	mov	r3, r0
 800c788:	80fb      	strh	r3, [r7, #6]
	FZ3387_SERIAL_WRITE((uint8_t)(cc>>8)); FZ3387_SERIAL_WRITE((uint8_t)(cc & 0xFF));
 800c78a:	88fb      	ldrh	r3, [r7, #6]
 800c78c:	0a1b      	lsrs	r3, r3, #8
 800c78e:	b29b      	uxth	r3, r3
 800c790:	b2db      	uxtb	r3, r3
 800c792:	4618      	mov	r0, r3
 800c794:	f7ff ffe2 	bl	800c75c <FZ3387_SERIAL_WRITE>
 800c798:	88fb      	ldrh	r3, [r7, #6]
 800c79a:	b2db      	uxtb	r3, r3
 800c79c:	4618      	mov	r0, r3
 800c79e:	f7ff ffdd 	bl	800c75c <FZ3387_SERIAL_WRITE>
}
 800c7a2:	bf00      	nop
 800c7a4:	3708      	adds	r7, #8
 800c7a6:	46bd      	mov	sp, r7
 800c7a8:	bd80      	pop	{r7, pc}
	...

0800c7ac <FZ3387_SEND_CMD_PACKET>:

uint8_t FZ3387_SEND_CMD_PACKET(uint8_t *data, uint8_t size){
 800c7ac:	b580      	push	{r7, lr}
 800c7ae:	b082      	sub	sp, #8
 800c7b0:	af00      	add	r7, sp, #0
 800c7b2:	6078      	str	r0, [r7, #4]
 800c7b4:	460b      	mov	r3, r1
 800c7b6:	70fb      	strb	r3, [r7, #3]
	FZ3387_setPacket(FINGERPRINT_COMMANDPACKET, size, data);
 800c7b8:	78fb      	ldrb	r3, [r7, #3]
 800c7ba:	b29b      	uxth	r3, r3
 800c7bc:	687a      	ldr	r2, [r7, #4]
 800c7be:	4619      	mov	r1, r3
 800c7c0:	2001      	movs	r0, #1
 800c7c2:	f000 f90d 	bl	800c9e0 <FZ3387_setPacket>
	FZ3387_writeStructuredPacket();
 800c7c6:	f000 f951 	bl	800ca6c <FZ3387_writeStructuredPacket>

	if (FZ3387_getStructuredPacket() != FINGERPRINT_OK) {
 800c7ca:	f000 f9ad 	bl	800cb28 <FZ3387_getStructuredPacket>
 800c7ce:	4603      	mov	r3, r0
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d001      	beq.n	800c7d8 <FZ3387_SEND_CMD_PACKET+0x2c>
		return FINGERPRINT_PACKETRECIEVEERR;
 800c7d4:	2301      	movs	r3, #1
 800c7d6:	e007      	b.n	800c7e8 <FZ3387_SEND_CMD_PACKET+0x3c>
	}
	if (packet.type != FINGERPRINT_ACKPACKET) {
 800c7d8:	4b05      	ldr	r3, [pc, #20]	; (800c7f0 <FZ3387_SEND_CMD_PACKET+0x44>)
 800c7da:	799b      	ldrb	r3, [r3, #6]
 800c7dc:	2b07      	cmp	r3, #7
 800c7de:	d001      	beq.n	800c7e4 <FZ3387_SEND_CMD_PACKET+0x38>
		return FINGERPRINT_PACKETRECIEVEERR;
 800c7e0:	2301      	movs	r3, #1
 800c7e2:	e001      	b.n	800c7e8 <FZ3387_SEND_CMD_PACKET+0x3c>
	}
	return packet.data[0];
 800c7e4:	4b02      	ldr	r3, [pc, #8]	; (800c7f0 <FZ3387_SEND_CMD_PACKET+0x44>)
 800c7e6:	7a9b      	ldrb	r3, [r3, #10]
}
 800c7e8:	4618      	mov	r0, r3
 800c7ea:	3708      	adds	r7, #8
 800c7ec:	46bd      	mov	sp, r7
 800c7ee:	bd80      	pop	{r7, pc}
 800c7f0:	200075a0 	.word	0x200075a0

0800c7f4 <FZ3387_verifyPassword>:
/*!
    @brief  Verifies the sensors' access password (default password is 0x0000000). A good way to also check if the sensors is active and responding
    @returns True if password is correct
 */
/**************************************************************************/
bool FZ3387_verifyPassword(void) {
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	af00      	add	r7, sp, #0
	return FZ3387_checkPassword() == FINGERPRINT_OK;
 800c7f8:	f000 f808 	bl	800c80c <FZ3387_checkPassword>
 800c7fc:	4603      	mov	r3, r0
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	bf0c      	ite	eq
 800c802:	2301      	moveq	r3, #1
 800c804:	2300      	movne	r3, #0
 800c806:	b2db      	uxtb	r3, r3
}
 800c808:	4618      	mov	r0, r3
 800c80a:	bd80      	pop	{r7, pc}

0800c80c <FZ3387_checkPassword>:

uint8_t FZ3387_checkPassword(void) {
 800c80c:	b580      	push	{r7, lr}
 800c80e:	b082      	sub	sp, #8
 800c810:	af00      	add	r7, sp, #0
	uint8_t data[] = {
 800c812:	2313      	movs	r3, #19
 800c814:	703b      	strb	r3, [r7, #0]
 800c816:	2300      	movs	r3, #0
 800c818:	707b      	strb	r3, [r7, #1]
 800c81a:	2300      	movs	r3, #0
 800c81c:	70bb      	strb	r3, [r7, #2]
 800c81e:	2300      	movs	r3, #0
 800c820:	70fb      	strb	r3, [r7, #3]
 800c822:	2300      	movs	r3, #0
 800c824:	713b      	strb	r3, [r7, #4]
			(uint8_t)(FINGERPRINT_PASSWORD >> 16),
			(uint8_t)(FINGERPRINT_PASSWORD >> 8),
			(uint8_t)(FINGERPRINT_PASSWORD & 0xFF)
	};

	FZ3387_SEND_CMD_PACKET(data, sizeof(data));
 800c826:	463b      	mov	r3, r7
 800c828:	2105      	movs	r1, #5
 800c82a:	4618      	mov	r0, r3
 800c82c:	f7ff ffbe 	bl	800c7ac <FZ3387_SEND_CMD_PACKET>
	if (packet.data[0] == FINGERPRINT_OK)
 800c830:	4b05      	ldr	r3, [pc, #20]	; (800c848 <FZ3387_checkPassword+0x3c>)
 800c832:	7a9b      	ldrb	r3, [r3, #10]
 800c834:	2b00      	cmp	r3, #0
 800c836:	d101      	bne.n	800c83c <FZ3387_checkPassword+0x30>
		return FINGERPRINT_OK;
 800c838:	2300      	movs	r3, #0
 800c83a:	e000      	b.n	800c83e <FZ3387_checkPassword+0x32>
	else
		return FINGERPRINT_PACKETRECIEVEERR;
 800c83c:	2301      	movs	r3, #1
}
 800c83e:	4618      	mov	r0, r3
 800c840:	3708      	adds	r7, #8
 800c842:	46bd      	mov	sp, r7
 800c844:	bd80      	pop	{r7, pc}
 800c846:	bf00      	nop
 800c848:	200075a0 	.word	0x200075a0

0800c84c <FZ3387_getImage>:
    @returns <code>FINGERPRINT_NOFINGER</code> if no finger detected
    @returns <code>FINGERPRINT_PACKETRECIEVEERR</code> on communication error
    @returns <code>FINGERPRINT_IMAGEFAIL</code> on imaging error
 */
/**************************************************************************/
uint8_t FZ3387_getImage(void) {
 800c84c:	b580      	push	{r7, lr}
 800c84e:	b082      	sub	sp, #8
 800c850:	af00      	add	r7, sp, #0
	uint8_t data[] = {
 800c852:	2301      	movs	r3, #1
 800c854:	713b      	strb	r3, [r7, #4]
			FINGERPRINT_GETIMAGE
	};
	return FZ3387_SEND_CMD_PACKET(data, sizeof(data));
 800c856:	1d3b      	adds	r3, r7, #4
 800c858:	2101      	movs	r1, #1
 800c85a:	4618      	mov	r0, r3
 800c85c:	f7ff ffa6 	bl	800c7ac <FZ3387_SEND_CMD_PACKET>
 800c860:	4603      	mov	r3, r0
}
 800c862:	4618      	mov	r0, r3
 800c864:	3708      	adds	r7, #8
 800c866:	46bd      	mov	sp, r7
 800c868:	bd80      	pop	{r7, pc}

0800c86a <FZ3387_image2Tz>:
    @returns <code>FINGERPRINT_IMAGEMESS</code> if image is too messy
    @returns <code>FINGERPRINT_PACKETRECIEVEERR</code> on communication error
    @returns <code>FINGERPRINT_FEATUREFAIL</code> on failure to identify fingerprint features
    @returns <code>FINGERPRINT_INVALIDIMAGE</code> on failure to identify fingerprint features
 */
uint8_t FZ3387_image2Tz(uint8_t slot) {
 800c86a:	b580      	push	{r7, lr}
 800c86c:	b084      	sub	sp, #16
 800c86e:	af00      	add	r7, sp, #0
 800c870:	4603      	mov	r3, r0
 800c872:	71fb      	strb	r3, [r7, #7]
	uint8_t data[] = {
 800c874:	2302      	movs	r3, #2
 800c876:	733b      	strb	r3, [r7, #12]
 800c878:	79fb      	ldrb	r3, [r7, #7]
 800c87a:	737b      	strb	r3, [r7, #13]
			FINGERPRINT_IMAGE2TZ,
			slot
	};
	return FZ3387_SEND_CMD_PACKET(data, sizeof(data));
 800c87c:	f107 030c 	add.w	r3, r7, #12
 800c880:	2102      	movs	r1, #2
 800c882:	4618      	mov	r0, r3
 800c884:	f7ff ff92 	bl	800c7ac <FZ3387_SEND_CMD_PACKET>
 800c888:	4603      	mov	r3, r0
}
 800c88a:	4618      	mov	r0, r3
 800c88c:	3710      	adds	r7, #16
 800c88e:	46bd      	mov	sp, r7
 800c890:	bd80      	pop	{r7, pc}

0800c892 <FZ3387_createModel>:
    @brief   Ask the sensor to take two print feature template and create a model
    @returns <code>FINGERPRINT_OK</code> on success
    @returns <code>FINGERPRINT_PACKETRECIEVEERR</code> on communication error
    @returns <code>FINGERPRINT_ENROLLMISMATCH</code> on mismatch of fingerprints
 */
uint8_t FZ3387_createModel(void) {
 800c892:	b580      	push	{r7, lr}
 800c894:	b082      	sub	sp, #8
 800c896:	af00      	add	r7, sp, #0
	uint8_t data[] = {
 800c898:	2305      	movs	r3, #5
 800c89a:	713b      	strb	r3, [r7, #4]
			FINGERPRINT_REGMODEL
	};
	return FZ3387_SEND_CMD_PACKET(data, sizeof(data));
 800c89c:	1d3b      	adds	r3, r7, #4
 800c89e:	2101      	movs	r1, #1
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	f7ff ff83 	bl	800c7ac <FZ3387_SEND_CMD_PACKET>
 800c8a6:	4603      	mov	r3, r0
}
 800c8a8:	4618      	mov	r0, r3
 800c8aa:	3708      	adds	r7, #8
 800c8ac:	46bd      	mov	sp, r7
 800c8ae:	bd80      	pop	{r7, pc}

0800c8b0 <FZ3387_storeModel>:
    @returns <code>FINGERPRINT_OK</code> on success
    @returns <code>FINGERPRINT_BADLOCATION</code> if the location is invalid
    @returns <code>FINGERPRINT_FLASHERR</code> if the model couldn't be written to flash memory
    @returns <code>FINGERPRINT_PACKETRECIEVEERR</code> on communication error
 */
uint8_t FZ3387_storeModel(uint16_t location) {
 800c8b0:	b580      	push	{r7, lr}
 800c8b2:	b084      	sub	sp, #16
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	4603      	mov	r3, r0
 800c8b8:	80fb      	strh	r3, [r7, #6]
	uint8_t data[] = {
 800c8ba:	2306      	movs	r3, #6
 800c8bc:	733b      	strb	r3, [r7, #12]
 800c8be:	2301      	movs	r3, #1
 800c8c0:	737b      	strb	r3, [r7, #13]
			FINGERPRINT_STORE,
			0x01,
			(uint8_t)(location >> 8),
 800c8c2:	88fb      	ldrh	r3, [r7, #6]
 800c8c4:	0a1b      	lsrs	r3, r3, #8
 800c8c6:	b29b      	uxth	r3, r3
 800c8c8:	b2db      	uxtb	r3, r3
	uint8_t data[] = {
 800c8ca:	73bb      	strb	r3, [r7, #14]
			(uint8_t)(location & 0xFF)
 800c8cc:	88fb      	ldrh	r3, [r7, #6]
 800c8ce:	b2db      	uxtb	r3, r3
	uint8_t data[] = {
 800c8d0:	73fb      	strb	r3, [r7, #15]
	};
	return FZ3387_SEND_CMD_PACKET(data, sizeof(data));
 800c8d2:	f107 030c 	add.w	r3, r7, #12
 800c8d6:	2104      	movs	r1, #4
 800c8d8:	4618      	mov	r0, r3
 800c8da:	f7ff ff67 	bl	800c7ac <FZ3387_SEND_CMD_PACKET>
 800c8de:	4603      	mov	r3, r0
}
 800c8e0:	4618      	mov	r0, r3
 800c8e2:	3710      	adds	r7, #16
 800c8e4:	46bd      	mov	sp, r7
 800c8e6:	bd80      	pop	{r7, pc}

0800c8e8 <FZ3387_deleteModel>:
    @returns <code>FINGERPRINT_OK</code> on success
    @returns <code>FINGERPRINT_BADLOCATION</code> if the location is invalid
    @returns <code>FINGERPRINT_FLASHERR</code> if the model couldn't be written to flash memory
    @returns <code>FINGERPRINT_PACKETRECIEVEERR</code> on communication error
 */
uint8_t FZ3387_deleteModel(uint16_t location) {
 800c8e8:	b580      	push	{r7, lr}
 800c8ea:	b084      	sub	sp, #16
 800c8ec:	af00      	add	r7, sp, #0
 800c8ee:	4603      	mov	r3, r0
 800c8f0:	80fb      	strh	r3, [r7, #6]
	uint8_t data[] = {
 800c8f2:	230c      	movs	r3, #12
 800c8f4:	723b      	strb	r3, [r7, #8]
			FINGERPRINT_DELETE,
			(uint8_t)(location >> 8),
 800c8f6:	88fb      	ldrh	r3, [r7, #6]
 800c8f8:	0a1b      	lsrs	r3, r3, #8
 800c8fa:	b29b      	uxth	r3, r3
 800c8fc:	b2db      	uxtb	r3, r3
	uint8_t data[] = {
 800c8fe:	727b      	strb	r3, [r7, #9]
			(uint8_t)(location & 0xFF),
 800c900:	88fb      	ldrh	r3, [r7, #6]
 800c902:	b2db      	uxtb	r3, r3
	uint8_t data[] = {
 800c904:	72bb      	strb	r3, [r7, #10]
 800c906:	2300      	movs	r3, #0
 800c908:	72fb      	strb	r3, [r7, #11]
 800c90a:	2301      	movs	r3, #1
 800c90c:	733b      	strb	r3, [r7, #12]
			0x00,
			0x01
	};
	return FZ3387_SEND_CMD_PACKET(data, sizeof(data));
 800c90e:	f107 0308 	add.w	r3, r7, #8
 800c912:	2105      	movs	r1, #5
 800c914:	4618      	mov	r0, r3
 800c916:	f7ff ff49 	bl	800c7ac <FZ3387_SEND_CMD_PACKET>
 800c91a:	4603      	mov	r3, r0
}
 800c91c:	4618      	mov	r0, r3
 800c91e:	3710      	adds	r7, #16
 800c920:	46bd      	mov	sp, r7
 800c922:	bd80      	pop	{r7, pc}

0800c924 <FZ3387_emptyDatabase>:
    @returns <code>FINGERPRINT_OK</code> on success
    @returns <code>FINGERPRINT_BADLOCATION</code> if the location is invalid
    @returns <code>FINGERPRINT_FLASHERR</code> if the model couldn't be written to flash memory
    @returns <code>FINGERPRINT_PACKETRECIEVEERR</code> on communication error
 */
uint8_t FZ3387_emptyDatabase(void) {
 800c924:	b580      	push	{r7, lr}
 800c926:	b082      	sub	sp, #8
 800c928:	af00      	add	r7, sp, #0
	uint8_t data[] = {
 800c92a:	230d      	movs	r3, #13
 800c92c:	713b      	strb	r3, [r7, #4]
			FINGERPRINT_EMPTY
	};
	return FZ3387_SEND_CMD_PACKET(data, sizeof(data));
 800c92e:	1d3b      	adds	r3, r7, #4
 800c930:	2101      	movs	r1, #1
 800c932:	4618      	mov	r0, r3
 800c934:	f7ff ff3a 	bl	800c7ac <FZ3387_SEND_CMD_PACKET>
 800c938:	4603      	mov	r3, r0
}
 800c93a:	4618      	mov	r0, r3
 800c93c:	3708      	adds	r7, #8
 800c93e:	46bd      	mov	sp, r7
 800c940:	bd80      	pop	{r7, pc}
	...

0800c944 <FZ3387_fingerFastSearch>:
    @returns <code>FINGERPRINT_OK</code> on fingerprint match success
    @returns <code>FINGERPRINT_NOTFOUND</code> no match made
    @returns <code>FINGERPRINT_PACKETRECIEVEERR</code> on communication error
 */
/**************************************************************************/
uint8_t FZ3387_fingerFastSearch(void) {
 800c944:	b580      	push	{r7, lr}
 800c946:	b082      	sub	sp, #8
 800c948:	af00      	add	r7, sp, #0
	uint8_t data[] = {
 800c94a:	4a21      	ldr	r2, [pc, #132]	; (800c9d0 <FZ3387_fingerFastSearch+0x8c>)
 800c94c:	463b      	mov	r3, r7
 800c94e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c952:	6018      	str	r0, [r3, #0]
 800c954:	3304      	adds	r3, #4
 800c956:	8019      	strh	r1, [r3, #0]
			0x00,
			0x00,
			0xA3
	};
	// high speed search of slot #1 starting at page 0x0000 and page #0x00A3
	FZ3387_SEND_CMD_PACKET(data, sizeof(data));
 800c958:	463b      	mov	r3, r7
 800c95a:	2106      	movs	r1, #6
 800c95c:	4618      	mov	r0, r3
 800c95e:	f7ff ff25 	bl	800c7ac <FZ3387_SEND_CMD_PACKET>
	fingerID = 0xFFFF;
 800c962:	4b1c      	ldr	r3, [pc, #112]	; (800c9d4 <FZ3387_fingerFastSearch+0x90>)
 800c964:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c968:	801a      	strh	r2, [r3, #0]
	fingerConfidence = 0xFFFF;
 800c96a:	4b1b      	ldr	r3, [pc, #108]	; (800c9d8 <FZ3387_fingerFastSearch+0x94>)
 800c96c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c970:	801a      	strh	r2, [r3, #0]

	fingerID = packet.data[1];
 800c972:	4b1a      	ldr	r3, [pc, #104]	; (800c9dc <FZ3387_fingerFastSearch+0x98>)
 800c974:	7adb      	ldrb	r3, [r3, #11]
 800c976:	b29a      	uxth	r2, r3
 800c978:	4b16      	ldr	r3, [pc, #88]	; (800c9d4 <FZ3387_fingerFastSearch+0x90>)
 800c97a:	801a      	strh	r2, [r3, #0]
	fingerID <<= 8;
 800c97c:	4b15      	ldr	r3, [pc, #84]	; (800c9d4 <FZ3387_fingerFastSearch+0x90>)
 800c97e:	881b      	ldrh	r3, [r3, #0]
 800c980:	021b      	lsls	r3, r3, #8
 800c982:	b29a      	uxth	r2, r3
 800c984:	4b13      	ldr	r3, [pc, #76]	; (800c9d4 <FZ3387_fingerFastSearch+0x90>)
 800c986:	801a      	strh	r2, [r3, #0]
	fingerID |= packet.data[2];
 800c988:	4b14      	ldr	r3, [pc, #80]	; (800c9dc <FZ3387_fingerFastSearch+0x98>)
 800c98a:	7b1b      	ldrb	r3, [r3, #12]
 800c98c:	b29a      	uxth	r2, r3
 800c98e:	4b11      	ldr	r3, [pc, #68]	; (800c9d4 <FZ3387_fingerFastSearch+0x90>)
 800c990:	881b      	ldrh	r3, [r3, #0]
 800c992:	4313      	orrs	r3, r2
 800c994:	b29a      	uxth	r2, r3
 800c996:	4b0f      	ldr	r3, [pc, #60]	; (800c9d4 <FZ3387_fingerFastSearch+0x90>)
 800c998:	801a      	strh	r2, [r3, #0]

	fingerConfidence = packet.data[3];
 800c99a:	4b10      	ldr	r3, [pc, #64]	; (800c9dc <FZ3387_fingerFastSearch+0x98>)
 800c99c:	7b5b      	ldrb	r3, [r3, #13]
 800c99e:	b29a      	uxth	r2, r3
 800c9a0:	4b0d      	ldr	r3, [pc, #52]	; (800c9d8 <FZ3387_fingerFastSearch+0x94>)
 800c9a2:	801a      	strh	r2, [r3, #0]
	fingerConfidence <<= 8;
 800c9a4:	4b0c      	ldr	r3, [pc, #48]	; (800c9d8 <FZ3387_fingerFastSearch+0x94>)
 800c9a6:	881b      	ldrh	r3, [r3, #0]
 800c9a8:	021b      	lsls	r3, r3, #8
 800c9aa:	b29a      	uxth	r2, r3
 800c9ac:	4b0a      	ldr	r3, [pc, #40]	; (800c9d8 <FZ3387_fingerFastSearch+0x94>)
 800c9ae:	801a      	strh	r2, [r3, #0]
	fingerConfidence |= packet.data[4];
 800c9b0:	4b0a      	ldr	r3, [pc, #40]	; (800c9dc <FZ3387_fingerFastSearch+0x98>)
 800c9b2:	7b9b      	ldrb	r3, [r3, #14]
 800c9b4:	b29a      	uxth	r2, r3
 800c9b6:	4b08      	ldr	r3, [pc, #32]	; (800c9d8 <FZ3387_fingerFastSearch+0x94>)
 800c9b8:	881b      	ldrh	r3, [r3, #0]
 800c9ba:	4313      	orrs	r3, r2
 800c9bc:	b29a      	uxth	r2, r3
 800c9be:	4b06      	ldr	r3, [pc, #24]	; (800c9d8 <FZ3387_fingerFastSearch+0x94>)
 800c9c0:	801a      	strh	r2, [r3, #0]

	return packet.data[0];
 800c9c2:	4b06      	ldr	r3, [pc, #24]	; (800c9dc <FZ3387_fingerFastSearch+0x98>)
 800c9c4:	7a9b      	ldrb	r3, [r3, #10]
}
 800c9c6:	4618      	mov	r0, r3
 800c9c8:	3708      	adds	r7, #8
 800c9ca:	46bd      	mov	sp, r7
 800c9cc:	bd80      	pop	{r7, pc}
 800c9ce:	bf00      	nop
 800c9d0:	08014d2c 	.word	0x08014d2c
 800c9d4:	2000759c 	.word	0x2000759c
 800c9d8:	200075ec 	.word	0x200075ec
 800c9dc:	200075a0 	.word	0x200075a0

0800c9e0 <FZ3387_setPacket>:
/*!
    @brief Packet conversion
 */
/**************************************************************************/

void FZ3387_setPacket(uint8_t type, uint16_t length, uint8_t * data) {
 800c9e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c9e2:	b083      	sub	sp, #12
 800c9e4:	af00      	add	r7, sp, #0
 800c9e6:	4603      	mov	r3, r0
 800c9e8:	603a      	str	r2, [r7, #0]
 800c9ea:	71fb      	strb	r3, [r7, #7]
 800c9ec:	460b      	mov	r3, r1
 800c9ee:	80bb      	strh	r3, [r7, #4]
	packet.start_code = FINGERPRINT_STARTCODE;
 800c9f0:	4b1c      	ldr	r3, [pc, #112]	; (800ca64 <FZ3387_setPacket+0x84>)
 800c9f2:	f64e 7201 	movw	r2, #61185	; 0xef01
 800c9f6:	801a      	strh	r2, [r3, #0]
	packet.type = type;
 800c9f8:	4a1a      	ldr	r2, [pc, #104]	; (800ca64 <FZ3387_setPacket+0x84>)
 800c9fa:	79fb      	ldrb	r3, [r7, #7]
 800c9fc:	7193      	strb	r3, [r2, #6]
	packet.length = length;
 800c9fe:	4a19      	ldr	r2, [pc, #100]	; (800ca64 <FZ3387_setPacket+0x84>)
 800ca00:	88bb      	ldrh	r3, [r7, #4]
 800ca02:	8113      	strh	r3, [r2, #8]
	packet.address[0] = (uint8_t)(FINGERPRINT_ADDRESS >> 24);
 800ca04:	4b17      	ldr	r3, [pc, #92]	; (800ca64 <FZ3387_setPacket+0x84>)
 800ca06:	22ff      	movs	r2, #255	; 0xff
 800ca08:	709a      	strb	r2, [r3, #2]
	packet.address[1] = (uint8_t)(FINGERPRINT_ADDRESS >> 16);
 800ca0a:	4b16      	ldr	r3, [pc, #88]	; (800ca64 <FZ3387_setPacket+0x84>)
 800ca0c:	22ff      	movs	r2, #255	; 0xff
 800ca0e:	70da      	strb	r2, [r3, #3]
	packet.address[2] = (uint8_t)(FINGERPRINT_ADDRESS >> 8);
 800ca10:	4b14      	ldr	r3, [pc, #80]	; (800ca64 <FZ3387_setPacket+0x84>)
 800ca12:	22ff      	movs	r2, #255	; 0xff
 800ca14:	711a      	strb	r2, [r3, #4]
	packet.address[3] = (uint8_t)(FINGERPRINT_ADDRESS & 0xFF);
 800ca16:	4b13      	ldr	r3, [pc, #76]	; (800ca64 <FZ3387_setPacket+0x84>)
 800ca18:	22ff      	movs	r2, #255	; 0xff
 800ca1a:	715a      	strb	r2, [r3, #5]

	if(length<64)
 800ca1c:	88bb      	ldrh	r3, [r7, #4]
 800ca1e:	2b3f      	cmp	r3, #63	; 0x3f
 800ca20:	d806      	bhi.n	800ca30 <FZ3387_setPacket+0x50>
		memcpy(packet.data, data, length);
 800ca22:	88bb      	ldrh	r3, [r7, #4]
 800ca24:	461a      	mov	r2, r3
 800ca26:	6839      	ldr	r1, [r7, #0]
 800ca28:	480f      	ldr	r0, [pc, #60]	; (800ca68 <FZ3387_setPacket+0x88>)
 800ca2a:	f004 fc6d 	bl	8011308 <memcpy>
	else
		memcpy(packet.data, data, 64);
}
 800ca2e:	e015      	b.n	800ca5c <FZ3387_setPacket+0x7c>
		memcpy(packet.data, data, 64);
 800ca30:	4a0c      	ldr	r2, [pc, #48]	; (800ca64 <FZ3387_setPacket+0x84>)
 800ca32:	683b      	ldr	r3, [r7, #0]
 800ca34:	f102 000a 	add.w	r0, r2, #10
 800ca38:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800ca3c:	4602      	mov	r2, r0
 800ca3e:	4619      	mov	r1, r3
 800ca40:	f8d1 c000 	ldr.w	ip, [r1]
 800ca44:	684e      	ldr	r6, [r1, #4]
 800ca46:	688d      	ldr	r5, [r1, #8]
 800ca48:	68c9      	ldr	r1, [r1, #12]
 800ca4a:	f8c2 c000 	str.w	ip, [r2]
 800ca4e:	6056      	str	r6, [r2, #4]
 800ca50:	6095      	str	r5, [r2, #8]
 800ca52:	60d1      	str	r1, [r2, #12]
 800ca54:	3310      	adds	r3, #16
 800ca56:	3010      	adds	r0, #16
 800ca58:	42a3      	cmp	r3, r4
 800ca5a:	d1ef      	bne.n	800ca3c <FZ3387_setPacket+0x5c>
}
 800ca5c:	bf00      	nop
 800ca5e:	370c      	adds	r7, #12
 800ca60:	46bd      	mov	sp, r7
 800ca62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca64:	200075a0 	.word	0x200075a0
 800ca68:	200075aa 	.word	0x200075aa

0800ca6c <FZ3387_writeStructuredPacket>:
    @brief   Helper function to process a packet and send it over UART to the sensor
    @param   packet A structure containing the bytes to transmit
 */
/**************************************************************************/

void FZ3387_writeStructuredPacket(void) {
 800ca6c:	b580      	push	{r7, lr}
 800ca6e:	b082      	sub	sp, #8
 800ca70:	af00      	add	r7, sp, #0
	FZ3387_SERIAL_WRITE_U16(packet.start_code);
 800ca72:	4b2c      	ldr	r3, [pc, #176]	; (800cb24 <FZ3387_writeStructuredPacket+0xb8>)
 800ca74:	881b      	ldrh	r3, [r3, #0]
 800ca76:	4618      	mov	r0, r3
 800ca78:	f7ff fe82 	bl	800c780 <FZ3387_SERIAL_WRITE_U16>
	FZ3387_SERIAL_WRITE(packet.address[0]);
 800ca7c:	4b29      	ldr	r3, [pc, #164]	; (800cb24 <FZ3387_writeStructuredPacket+0xb8>)
 800ca7e:	789b      	ldrb	r3, [r3, #2]
 800ca80:	4618      	mov	r0, r3
 800ca82:	f7ff fe6b 	bl	800c75c <FZ3387_SERIAL_WRITE>
	FZ3387_SERIAL_WRITE(packet.address[1]);
 800ca86:	4b27      	ldr	r3, [pc, #156]	; (800cb24 <FZ3387_writeStructuredPacket+0xb8>)
 800ca88:	78db      	ldrb	r3, [r3, #3]
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	f7ff fe66 	bl	800c75c <FZ3387_SERIAL_WRITE>
	FZ3387_SERIAL_WRITE(packet.address[2]);
 800ca90:	4b24      	ldr	r3, [pc, #144]	; (800cb24 <FZ3387_writeStructuredPacket+0xb8>)
 800ca92:	791b      	ldrb	r3, [r3, #4]
 800ca94:	4618      	mov	r0, r3
 800ca96:	f7ff fe61 	bl	800c75c <FZ3387_SERIAL_WRITE>
	FZ3387_SERIAL_WRITE(packet.address[3]);
 800ca9a:	4b22      	ldr	r3, [pc, #136]	; (800cb24 <FZ3387_writeStructuredPacket+0xb8>)
 800ca9c:	795b      	ldrb	r3, [r3, #5]
 800ca9e:	4618      	mov	r0, r3
 800caa0:	f7ff fe5c 	bl	800c75c <FZ3387_SERIAL_WRITE>
	FZ3387_SERIAL_WRITE(packet.type);
 800caa4:	4b1f      	ldr	r3, [pc, #124]	; (800cb24 <FZ3387_writeStructuredPacket+0xb8>)
 800caa6:	799b      	ldrb	r3, [r3, #6]
 800caa8:	4618      	mov	r0, r3
 800caaa:	f7ff fe57 	bl	800c75c <FZ3387_SERIAL_WRITE>

	uint16_t wire_length = packet.length + 2;
 800caae:	4b1d      	ldr	r3, [pc, #116]	; (800cb24 <FZ3387_writeStructuredPacket+0xb8>)
 800cab0:	891b      	ldrh	r3, [r3, #8]
 800cab2:	3302      	adds	r3, #2
 800cab4:	807b      	strh	r3, [r7, #2]
	FZ3387_SERIAL_WRITE_U16(wire_length);
 800cab6:	887b      	ldrh	r3, [r7, #2]
 800cab8:	4618      	mov	r0, r3
 800caba:	f7ff fe61 	bl	800c780 <FZ3387_SERIAL_WRITE_U16>

	uint16_t sum = ((wire_length)>>8) + ((wire_length)&0xFF) + packet.type;
 800cabe:	887b      	ldrh	r3, [r7, #2]
 800cac0:	0a1b      	lsrs	r3, r3, #8
 800cac2:	b29a      	uxth	r2, r3
 800cac4:	887b      	ldrh	r3, [r7, #2]
 800cac6:	b2db      	uxtb	r3, r3
 800cac8:	b29b      	uxth	r3, r3
 800caca:	4413      	add	r3, r2
 800cacc:	b29a      	uxth	r2, r3
 800cace:	4b15      	ldr	r3, [pc, #84]	; (800cb24 <FZ3387_writeStructuredPacket+0xb8>)
 800cad0:	799b      	ldrb	r3, [r3, #6]
 800cad2:	b29b      	uxth	r3, r3
 800cad4:	4413      	add	r3, r2
 800cad6:	80fb      	strh	r3, [r7, #6]
	for (uint8_t i=0; i< packet.length; i++) {
 800cad8:	2300      	movs	r3, #0
 800cada:	717b      	strb	r3, [r7, #5]
 800cadc:	e011      	b.n	800cb02 <FZ3387_writeStructuredPacket+0x96>
		FZ3387_SERIAL_WRITE(packet.data[i]);
 800cade:	797b      	ldrb	r3, [r7, #5]
 800cae0:	4a10      	ldr	r2, [pc, #64]	; (800cb24 <FZ3387_writeStructuredPacket+0xb8>)
 800cae2:	4413      	add	r3, r2
 800cae4:	7a9b      	ldrb	r3, [r3, #10]
 800cae6:	4618      	mov	r0, r3
 800cae8:	f7ff fe38 	bl	800c75c <FZ3387_SERIAL_WRITE>
		sum += packet.data[i];
 800caec:	797b      	ldrb	r3, [r7, #5]
 800caee:	4a0d      	ldr	r2, [pc, #52]	; (800cb24 <FZ3387_writeStructuredPacket+0xb8>)
 800caf0:	4413      	add	r3, r2
 800caf2:	7a9b      	ldrb	r3, [r3, #10]
 800caf4:	b29a      	uxth	r2, r3
 800caf6:	88fb      	ldrh	r3, [r7, #6]
 800caf8:	4413      	add	r3, r2
 800cafa:	80fb      	strh	r3, [r7, #6]
	for (uint8_t i=0; i< packet.length; i++) {
 800cafc:	797b      	ldrb	r3, [r7, #5]
 800cafe:	3301      	adds	r3, #1
 800cb00:	717b      	strb	r3, [r7, #5]
 800cb02:	797b      	ldrb	r3, [r7, #5]
 800cb04:	b29a      	uxth	r2, r3
 800cb06:	4b07      	ldr	r3, [pc, #28]	; (800cb24 <FZ3387_writeStructuredPacket+0xb8>)
 800cb08:	891b      	ldrh	r3, [r3, #8]
 800cb0a:	429a      	cmp	r2, r3
 800cb0c:	d3e7      	bcc.n	800cade <FZ3387_writeStructuredPacket+0x72>
	}

	FZ3387_SERIAL_WRITE_U16(sum);
 800cb0e:	88fb      	ldrh	r3, [r7, #6]
 800cb10:	4618      	mov	r0, r3
 800cb12:	f7ff fe35 	bl	800c780 <FZ3387_SERIAL_WRITE_U16>

	osDelay(250);
 800cb16:	20fa      	movs	r0, #250	; 0xfa
 800cb18:	f7fa fb69 	bl	80071ee <osDelay>
}
 800cb1c:	bf00      	nop
 800cb1e:	3708      	adds	r7, #8
 800cb20:	46bd      	mov	sp, r7
 800cb22:	bd80      	pop	{r7, pc}
 800cb24:	200075a0 	.word	0x200075a0

0800cb28 <FZ3387_getStructuredPacket>:
    @param   timeout how many milliseconds we're willing to wait
    @returns <code>FINGERPRINT_OK</code> on success
    @returns <code>FINGERPRINT_TIMEOUT</code> or <code>FINGERPRINT_BADPACKET</code> on failure
 */
/**************************************************************************/
uint8_t FZ3387_getStructuredPacket(void) {
 800cb28:	b480      	push	{r7}
 800cb2a:	b083      	sub	sp, #12
 800cb2c:	af00      	add	r7, sp, #0
	uint8_t byte;
	uint16_t idx=0;
 800cb2e:	2300      	movs	r3, #0
 800cb30:	80fb      	strh	r3, [r7, #6]

	while(1){
		byte = FINGER_UART_RX_Buffer[idx];
 800cb32:	88fb      	ldrh	r3, [r7, #6]
 800cb34:	4a36      	ldr	r2, [pc, #216]	; (800cc10 <FZ3387_getStructuredPacket+0xe8>)
 800cb36:	5cd3      	ldrb	r3, [r2, r3]
 800cb38:	717b      	strb	r3, [r7, #5]

		switch (idx) {
 800cb3a:	88fb      	ldrh	r3, [r7, #6]
 800cb3c:	2b08      	cmp	r3, #8
 800cb3e:	d84c      	bhi.n	800cbda <FZ3387_getStructuredPacket+0xb2>
 800cb40:	a201      	add	r2, pc, #4	; (adr r2, 800cb48 <FZ3387_getStructuredPacket+0x20>)
 800cb42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb46:	bf00      	nop
 800cb48:	0800cb6d 	.word	0x0800cb6d
 800cb4c:	0800cb85 	.word	0x0800cb85
 800cb50:	0800cba5 	.word	0x0800cba5
 800cb54:	0800cba5 	.word	0x0800cba5
 800cb58:	0800cba5 	.word	0x0800cba5
 800cb5c:	0800cba5 	.word	0x0800cba5
 800cb60:	0800cbb3 	.word	0x0800cbb3
 800cb64:	0800cbbb 	.word	0x0800cbbb
 800cb68:	0800cbc9 	.word	0x0800cbc9
		case 0:
			if (byte != (FINGERPRINT_STARTCODE >> 8)){
 800cb6c:	797b      	ldrb	r3, [r7, #5]
 800cb6e:	2bef      	cmp	r3, #239	; 0xef
 800cb70:	d001      	beq.n	800cb76 <FZ3387_getStructuredPacket+0x4e>
				// continue;
				return FINGERPRINT_BADPACKET;
 800cb72:	23fe      	movs	r3, #254	; 0xfe
 800cb74:	e046      	b.n	800cc04 <FZ3387_getStructuredPacket+0xdc>
			}
			packet.start_code = (uint16_t)byte << 8;
 800cb76:	797b      	ldrb	r3, [r7, #5]
 800cb78:	b29b      	uxth	r3, r3
 800cb7a:	021b      	lsls	r3, r3, #8
 800cb7c:	b29a      	uxth	r2, r3
 800cb7e:	4b25      	ldr	r3, [pc, #148]	; (800cc14 <FZ3387_getStructuredPacket+0xec>)
 800cb80:	801a      	strh	r2, [r3, #0]
			break;
 800cb82:	e03b      	b.n	800cbfc <FZ3387_getStructuredPacket+0xd4>
		case 1:
			packet.start_code |= byte;
 800cb84:	4b23      	ldr	r3, [pc, #140]	; (800cc14 <FZ3387_getStructuredPacket+0xec>)
 800cb86:	881a      	ldrh	r2, [r3, #0]
 800cb88:	797b      	ldrb	r3, [r7, #5]
 800cb8a:	b29b      	uxth	r3, r3
 800cb8c:	4313      	orrs	r3, r2
 800cb8e:	b29a      	uxth	r2, r3
 800cb90:	4b20      	ldr	r3, [pc, #128]	; (800cc14 <FZ3387_getStructuredPacket+0xec>)
 800cb92:	801a      	strh	r2, [r3, #0]
			if (packet.start_code != FINGERPRINT_STARTCODE){
 800cb94:	4b1f      	ldr	r3, [pc, #124]	; (800cc14 <FZ3387_getStructuredPacket+0xec>)
 800cb96:	881b      	ldrh	r3, [r3, #0]
 800cb98:	f64e 7201 	movw	r2, #61185	; 0xef01
 800cb9c:	4293      	cmp	r3, r2
 800cb9e:	d02a      	beq.n	800cbf6 <FZ3387_getStructuredPacket+0xce>
				return FINGERPRINT_BADPACKET;
 800cba0:	23fe      	movs	r3, #254	; 0xfe
 800cba2:	e02f      	b.n	800cc04 <FZ3387_getStructuredPacket+0xdc>
			break;
		case 2:
		case 3:
		case 4:
		case 5:
			packet.address[idx-2] = byte;
 800cba4:	88fb      	ldrh	r3, [r7, #6]
 800cba6:	3b02      	subs	r3, #2
 800cba8:	4a1a      	ldr	r2, [pc, #104]	; (800cc14 <FZ3387_getStructuredPacket+0xec>)
 800cbaa:	4413      	add	r3, r2
 800cbac:	797a      	ldrb	r2, [r7, #5]
 800cbae:	709a      	strb	r2, [r3, #2]
			break;
 800cbb0:	e024      	b.n	800cbfc <FZ3387_getStructuredPacket+0xd4>
		case 6:
			packet.type = byte;
 800cbb2:	4a18      	ldr	r2, [pc, #96]	; (800cc14 <FZ3387_getStructuredPacket+0xec>)
 800cbb4:	797b      	ldrb	r3, [r7, #5]
 800cbb6:	7193      	strb	r3, [r2, #6]
			break;
 800cbb8:	e020      	b.n	800cbfc <FZ3387_getStructuredPacket+0xd4>
		case 7:
			packet.length = (uint16_t)byte << 8;
 800cbba:	797b      	ldrb	r3, [r7, #5]
 800cbbc:	b29b      	uxth	r3, r3
 800cbbe:	021b      	lsls	r3, r3, #8
 800cbc0:	b29a      	uxth	r2, r3
 800cbc2:	4b14      	ldr	r3, [pc, #80]	; (800cc14 <FZ3387_getStructuredPacket+0xec>)
 800cbc4:	811a      	strh	r2, [r3, #8]
			break;
 800cbc6:	e019      	b.n	800cbfc <FZ3387_getStructuredPacket+0xd4>
		case 8:
			packet.length |= byte;
 800cbc8:	4b12      	ldr	r3, [pc, #72]	; (800cc14 <FZ3387_getStructuredPacket+0xec>)
 800cbca:	891a      	ldrh	r2, [r3, #8]
 800cbcc:	797b      	ldrb	r3, [r7, #5]
 800cbce:	b29b      	uxth	r3, r3
 800cbd0:	4313      	orrs	r3, r2
 800cbd2:	b29a      	uxth	r2, r3
 800cbd4:	4b0f      	ldr	r3, [pc, #60]	; (800cc14 <FZ3387_getStructuredPacket+0xec>)
 800cbd6:	811a      	strh	r2, [r3, #8]
			break;
 800cbd8:	e010      	b.n	800cbfc <FZ3387_getStructuredPacket+0xd4>
		default:
			packet.data[idx-9] = byte;
 800cbda:	88fb      	ldrh	r3, [r7, #6]
 800cbdc:	3b09      	subs	r3, #9
 800cbde:	4a0d      	ldr	r2, [pc, #52]	; (800cc14 <FZ3387_getStructuredPacket+0xec>)
 800cbe0:	4413      	add	r3, r2
 800cbe2:	797a      	ldrb	r2, [r7, #5]
 800cbe4:	729a      	strb	r2, [r3, #10]
			if((idx-8) == packet.length){
 800cbe6:	88fb      	ldrh	r3, [r7, #6]
 800cbe8:	3b08      	subs	r3, #8
 800cbea:	4a0a      	ldr	r2, [pc, #40]	; (800cc14 <FZ3387_getStructuredPacket+0xec>)
 800cbec:	8912      	ldrh	r2, [r2, #8]
 800cbee:	4293      	cmp	r3, r2
 800cbf0:	d103      	bne.n	800cbfa <FZ3387_getStructuredPacket+0xd2>
				return FINGERPRINT_OK;
 800cbf2:	2300      	movs	r3, #0
 800cbf4:	e006      	b.n	800cc04 <FZ3387_getStructuredPacket+0xdc>
			break;
 800cbf6:	bf00      	nop
 800cbf8:	e000      	b.n	800cbfc <FZ3387_getStructuredPacket+0xd4>
			}
			break;
 800cbfa:	bf00      	nop
		}
		idx++;
 800cbfc:	88fb      	ldrh	r3, [r7, #6]
 800cbfe:	3301      	adds	r3, #1
 800cc00:	80fb      	strh	r3, [r7, #6]
		byte = FINGER_UART_RX_Buffer[idx];
 800cc02:	e796      	b.n	800cb32 <FZ3387_getStructuredPacket+0xa>
	}

	// Shouldn't get here so...
	return FINGERPRINT_BADPACKET;
}
 800cc04:	4618      	mov	r0, r3
 800cc06:	370c      	adds	r7, #12
 800cc08:	46bd      	mov	sp, r7
 800cc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc0e:	4770      	bx	lr
 800cc10:	20006888 	.word	0x20006888
 800cc14:	200075a0 	.word	0x200075a0

0800cc18 <MEMS_Init>:
 *  Created on: Aug 23, 2019
 *      Author: Puja
 */
#include <_mems.h>

void MEMS_Init(I2C_HandleTypeDef* i2c, SD_MPU6050* mpu){
 800cc18:	b580      	push	{r7, lr}
 800cc1a:	b086      	sub	sp, #24
 800cc1c:	af02      	add	r7, sp, #8
 800cc1e:	6078      	str	r0, [r7, #4]
 800cc20:	6039      	str	r1, [r7, #0]
	SD_MPU6050_Result result;

	do {
		swvPrintLn("MEMS_Init");
 800cc22:	4814      	ldr	r0, [pc, #80]	; (800cc74 <MEMS_Init+0x5c>)
 800cc24:	f7fe fcbe 	bl	800b5a4 <swvPrintLn>

		// turn off module
		HAL_GPIO_WritePin(MEMS_PWR_GPIO_Port, MEMS_PWR_Pin, GPIO_PIN_RESET);
 800cc28:	2200      	movs	r2, #0
 800cc2a:	2140      	movs	r1, #64	; 0x40
 800cc2c:	4812      	ldr	r0, [pc, #72]	; (800cc78 <MEMS_Init+0x60>)
 800cc2e:	f7f5 fd63 	bl	80026f8 <HAL_GPIO_WritePin>
		osDelay(50);
 800cc32:	2032      	movs	r0, #50	; 0x32
 800cc34:	f7fa fadb 	bl	80071ee <osDelay>
		// turn on module
		HAL_GPIO_WritePin(MEMS_PWR_GPIO_Port, MEMS_PWR_Pin, GPIO_PIN_SET);
 800cc38:	2201      	movs	r2, #1
 800cc3a:	2140      	movs	r1, #64	; 0x40
 800cc3c:	480e      	ldr	r0, [pc, #56]	; (800cc78 <MEMS_Init+0x60>)
 800cc3e:	f7f5 fd5b 	bl	80026f8 <HAL_GPIO_WritePin>
		osDelay(50);
 800cc42:	2032      	movs	r0, #50	; 0x32
 800cc44:	f7fa fad3 	bl	80071ee <osDelay>
		// module initialization
		result = SD_MPU6050_Init(i2c, mpu,
 800cc48:	2300      	movs	r3, #0
 800cc4a:	9300      	str	r3, [sp, #0]
 800cc4c:	2303      	movs	r3, #3
 800cc4e:	2200      	movs	r2, #0
 800cc50:	6839      	ldr	r1, [r7, #0]
 800cc52:	6878      	ldr	r0, [r7, #4]
 800cc54:	f000 f934 	bl	800cec0 <SD_MPU6050_Init>
 800cc58:	4603      	mov	r3, r0
 800cc5a:	73fb      	strb	r3, [r7, #15]
				SD_MPU6050_Device_0, SD_MPU6050_Accelerometer_16G, SD_MPU6050_Gyroscope_250s
		);
		osDelay(1000);
 800cc5c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800cc60:	f7fa fac5 	bl	80071ee <osDelay>
	} while(result != SD_MPU6050_Result_Ok);
 800cc64:	7bfb      	ldrb	r3, [r7, #15]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d1db      	bne.n	800cc22 <MEMS_Init+0xa>
}
 800cc6a:	bf00      	nop
 800cc6c:	3710      	adds	r7, #16
 800cc6e:	46bd      	mov	sp, r7
 800cc70:	bd80      	pop	{r7, pc}
 800cc72:	bf00      	nop
 800cc74:	08014d34 	.word	0x08014d34
 800cc78:	40020800 	.word	0x40020800

0800cc7c <MEMS_Average>:

mems_t MEMS_Average(I2C_HandleTypeDef* i2c, SD_MPU6050* mpu, mems_t* calibrator, uint16_t sample) {
 800cc7c:	b5b0      	push	{r4, r5, r7, lr}
 800cc7e:	b08c      	sub	sp, #48	; 0x30
 800cc80:	af00      	add	r7, sp, #0
 800cc82:	60f8      	str	r0, [r7, #12]
 800cc84:	60b9      	str	r1, [r7, #8]
 800cc86:	607a      	str	r2, [r7, #4]
 800cc88:	603b      	str	r3, [r7, #0]
	uint16_t i;
	mems_t mems;
	// reset value
	mems.accelerometer.x = 0;
 800cc8a:	2300      	movs	r3, #0
 800cc8c:	617b      	str	r3, [r7, #20]
	mems.accelerometer.y = 0;
 800cc8e:	2300      	movs	r3, #0
 800cc90:	61bb      	str	r3, [r7, #24]
	mems.accelerometer.z = 0;
 800cc92:	2300      	movs	r3, #0
 800cc94:	61fb      	str	r3, [r7, #28]
	mems.gyroscope.x = 0;
 800cc96:	2300      	movs	r3, #0
 800cc98:	623b      	str	r3, [r7, #32]
	mems.gyroscope.y = 0;
 800cc9a:	2300      	movs	r3, #0
 800cc9c:	627b      	str	r3, [r7, #36]	; 0x24
	mems.gyroscope.z = 0;
 800cc9e:	2300      	movs	r3, #0
 800cca0:	62bb      	str	r3, [r7, #40]	; 0x28
	// sampling
	for(i=0; i<sample; i++){
 800cca2:	2300      	movs	r3, #0
 800cca4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800cca6:	e02a      	b.n	800ccfe <MEMS_Average+0x82>
		// read sensor
		SD_MPU6050_ReadAll(i2c, mpu);
 800cca8:	6879      	ldr	r1, [r7, #4]
 800ccaa:	68b8      	ldr	r0, [r7, #8]
 800ccac:	f000 fa86 	bl	800d1bc <SD_MPU6050_ReadAll>
		// sum all value
		mems.accelerometer.x += mpu->Gyroscope_X;
 800ccb0:	697b      	ldr	r3, [r7, #20]
 800ccb2:	687a      	ldr	r2, [r7, #4]
 800ccb4:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 800ccb8:	4413      	add	r3, r2
 800ccba:	617b      	str	r3, [r7, #20]
		mems.accelerometer.y += mpu->Gyroscope_Y;
 800ccbc:	69bb      	ldr	r3, [r7, #24]
 800ccbe:	687a      	ldr	r2, [r7, #4]
 800ccc0:	f9b2 2014 	ldrsh.w	r2, [r2, #20]
 800ccc4:	4413      	add	r3, r2
 800ccc6:	61bb      	str	r3, [r7, #24]
		mems.accelerometer.z += mpu->Gyroscope_Z;
 800ccc8:	69fb      	ldr	r3, [r7, #28]
 800ccca:	687a      	ldr	r2, [r7, #4]
 800cccc:	f9b2 2016 	ldrsh.w	r2, [r2, #22]
 800ccd0:	4413      	add	r3, r2
 800ccd2:	61fb      	str	r3, [r7, #28]
		mems.gyroscope.x += mpu->Accelerometer_X;
 800ccd4:	6a3b      	ldr	r3, [r7, #32]
 800ccd6:	687a      	ldr	r2, [r7, #4]
 800ccd8:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 800ccdc:	4413      	add	r3, r2
 800ccde:	623b      	str	r3, [r7, #32]
		mems.gyroscope.y += mpu->Accelerometer_Y;
 800cce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cce2:	687a      	ldr	r2, [r7, #4]
 800cce4:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 800cce8:	4413      	add	r3, r2
 800ccea:	627b      	str	r3, [r7, #36]	; 0x24
		mems.gyroscope.z += mpu->Accelerometer_Z;
 800ccec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccee:	687a      	ldr	r2, [r7, #4]
 800ccf0:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 800ccf4:	4413      	add	r3, r2
 800ccf6:	62bb      	str	r3, [r7, #40]	; 0x28
	for(i=0; i<sample; i++){
 800ccf8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ccfa:	3301      	adds	r3, #1
 800ccfc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800ccfe:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800cd00:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800cd04:	429a      	cmp	r2, r3
 800cd06:	d3cf      	bcc.n	800cca8 <MEMS_Average+0x2c>
	}
	// calculate the average
	mems.accelerometer.x = mems.accelerometer.x / sample;
 800cd08:	697a      	ldr	r2, [r7, #20]
 800cd0a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800cd0e:	fb92 f3f3 	sdiv	r3, r2, r3
 800cd12:	617b      	str	r3, [r7, #20]
	mems.accelerometer.y = mems.accelerometer.y / sample;
 800cd14:	69ba      	ldr	r2, [r7, #24]
 800cd16:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800cd1a:	fb92 f3f3 	sdiv	r3, r2, r3
 800cd1e:	61bb      	str	r3, [r7, #24]
	mems.accelerometer.z = mems.accelerometer.z / sample;
 800cd20:	69fa      	ldr	r2, [r7, #28]
 800cd22:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800cd26:	fb92 f3f3 	sdiv	r3, r2, r3
 800cd2a:	61fb      	str	r3, [r7, #28]
	mems.gyroscope.x = mems.gyroscope.x / sample;
 800cd2c:	6a3a      	ldr	r2, [r7, #32]
 800cd2e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800cd32:	fb92 f3f3 	sdiv	r3, r2, r3
 800cd36:	623b      	str	r3, [r7, #32]
	mems.gyroscope.y = mems.gyroscope.y / sample;
 800cd38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cd3a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800cd3e:	fb92 f3f3 	sdiv	r3, r2, r3
 800cd42:	627b      	str	r3, [r7, #36]	; 0x24
	mems.gyroscope.z = mems.gyroscope.z / sample;
 800cd44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cd46:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800cd4a:	fb92 f3f3 	sdiv	r3, r2, r3
 800cd4e:	62bb      	str	r3, [r7, #40]	; 0x28
	// set for calibration
	if(calibrator != NULL){
 800cd50:	683b      	ldr	r3, [r7, #0]
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d01d      	beq.n	800cd92 <MEMS_Average+0x116>
		mems.accelerometer.x -= calibrator->accelerometer.x;
 800cd56:	697a      	ldr	r2, [r7, #20]
 800cd58:	683b      	ldr	r3, [r7, #0]
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	1ad3      	subs	r3, r2, r3
 800cd5e:	617b      	str	r3, [r7, #20]
		mems.accelerometer.y -= calibrator->accelerometer.y;
 800cd60:	69ba      	ldr	r2, [r7, #24]
 800cd62:	683b      	ldr	r3, [r7, #0]
 800cd64:	685b      	ldr	r3, [r3, #4]
 800cd66:	1ad3      	subs	r3, r2, r3
 800cd68:	61bb      	str	r3, [r7, #24]
		mems.accelerometer.z -= calibrator->accelerometer.z;
 800cd6a:	69fa      	ldr	r2, [r7, #28]
 800cd6c:	683b      	ldr	r3, [r7, #0]
 800cd6e:	689b      	ldr	r3, [r3, #8]
 800cd70:	1ad3      	subs	r3, r2, r3
 800cd72:	61fb      	str	r3, [r7, #28]
		mems.gyroscope.x -= calibrator->gyroscope.x;
 800cd74:	6a3a      	ldr	r2, [r7, #32]
 800cd76:	683b      	ldr	r3, [r7, #0]
 800cd78:	68db      	ldr	r3, [r3, #12]
 800cd7a:	1ad3      	subs	r3, r2, r3
 800cd7c:	623b      	str	r3, [r7, #32]
		mems.gyroscope.y -= calibrator->gyroscope.y;
 800cd7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cd80:	683b      	ldr	r3, [r7, #0]
 800cd82:	691b      	ldr	r3, [r3, #16]
 800cd84:	1ad3      	subs	r3, r2, r3
 800cd86:	627b      	str	r3, [r7, #36]	; 0x24
		mems.gyroscope.z -= calibrator->gyroscope.z;
 800cd88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cd8a:	683b      	ldr	r3, [r7, #0]
 800cd8c:	695b      	ldr	r3, [r3, #20]
 800cd8e:	1ad3      	subs	r3, r2, r3
 800cd90:	62bb      	str	r3, [r7, #40]	; 0x28
	}

	return mems;
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	461d      	mov	r5, r3
 800cd96:	f107 0414 	add.w	r4, r7, #20
 800cd9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cd9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cd9e:	e894 0003 	ldmia.w	r4, {r0, r1}
 800cda2:	e885 0003 	stmia.w	r5, {r0, r1}
}
 800cda6:	68f8      	ldr	r0, [r7, #12]
 800cda8:	3730      	adds	r7, #48	; 0x30
 800cdaa:	46bd      	mov	sp, r7
 800cdac:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800cdb0 <MEMS_Decision>:

mems_decision_t MEMS_Decision(I2C_HandleTypeDef* i2c, SD_MPU6050* mpu, mems_t* calibrator, uint16_t sample){
 800cdb0:	b5b0      	push	{r4, r5, r7, lr}
 800cdb2:	b092      	sub	sp, #72	; 0x48
 800cdb4:	af02      	add	r7, sp, #8
 800cdb6:	60f8      	str	r0, [r7, #12]
 800cdb8:	60b9      	str	r1, [r7, #8]
 800cdba:	607a      	str	r2, [r7, #4]
 800cdbc:	807b      	strh	r3, [r7, #2]
	int32_t g_force, accel_limit=46000, gyro_limit=10000;
 800cdbe:	f24b 33b0 	movw	r3, #46000	; 0xb3b0
 800cdc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cdc4:	f242 7310 	movw	r3, #10000	; 0x2710
 800cdc8:	63bb      	str	r3, [r7, #56]	; 0x38
	mems_decision_t mems_decision;
	mems_t mems;
	//	char str[200];

	// get mems data
	mems = MEMS_Average(i2c, mpu, calibrator, sample);
 800cdca:	f107 0014 	add.w	r0, r7, #20
 800cdce:	887b      	ldrh	r3, [r7, #2]
 800cdd0:	9300      	str	r3, [sp, #0]
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	68ba      	ldr	r2, [r7, #8]
 800cdd6:	68f9      	ldr	r1, [r7, #12]
 800cdd8:	f7ff ff50 	bl	800cc7c <MEMS_Average>
	// calculate g-force
	g_force = sqrt(pow(mems.accelerometer.x, 2) + pow(mems.accelerometer.y, 2) + pow(mems.accelerometer.z, 2) );
 800cddc:	697b      	ldr	r3, [r7, #20]
 800cdde:	4618      	mov	r0, r3
 800cde0:	f7f3 fbb0 	bl	8000544 <__aeabi_i2d>
 800cde4:	4603      	mov	r3, r0
 800cde6:	460c      	mov	r4, r1
 800cde8:	ed9f 1b33 	vldr	d1, [pc, #204]	; 800ceb8 <MEMS_Decision+0x108>
 800cdec:	ec44 3b10 	vmov	d0, r3, r4
 800cdf0:	f006 fd8c 	bl	801390c <pow>
 800cdf4:	ec55 4b10 	vmov	r4, r5, d0
 800cdf8:	69bb      	ldr	r3, [r7, #24]
 800cdfa:	4618      	mov	r0, r3
 800cdfc:	f7f3 fba2 	bl	8000544 <__aeabi_i2d>
 800ce00:	4602      	mov	r2, r0
 800ce02:	460b      	mov	r3, r1
 800ce04:	ed9f 1b2c 	vldr	d1, [pc, #176]	; 800ceb8 <MEMS_Decision+0x108>
 800ce08:	ec43 2b10 	vmov	d0, r2, r3
 800ce0c:	f006 fd7e 	bl	801390c <pow>
 800ce10:	ec53 2b10 	vmov	r2, r3, d0
 800ce14:	4620      	mov	r0, r4
 800ce16:	4629      	mov	r1, r5
 800ce18:	f7f3 fa48 	bl	80002ac <__adddf3>
 800ce1c:	4603      	mov	r3, r0
 800ce1e:	460c      	mov	r4, r1
 800ce20:	4625      	mov	r5, r4
 800ce22:	461c      	mov	r4, r3
 800ce24:	69fb      	ldr	r3, [r7, #28]
 800ce26:	4618      	mov	r0, r3
 800ce28:	f7f3 fb8c 	bl	8000544 <__aeabi_i2d>
 800ce2c:	4602      	mov	r2, r0
 800ce2e:	460b      	mov	r3, r1
 800ce30:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800ceb8 <MEMS_Decision+0x108>
 800ce34:	ec43 2b10 	vmov	d0, r2, r3
 800ce38:	f006 fd68 	bl	801390c <pow>
 800ce3c:	ec53 2b10 	vmov	r2, r3, d0
 800ce40:	4620      	mov	r0, r4
 800ce42:	4629      	mov	r1, r5
 800ce44:	f7f3 fa32 	bl	80002ac <__adddf3>
 800ce48:	4603      	mov	r3, r0
 800ce4a:	460c      	mov	r4, r1
 800ce4c:	ec44 3b17 	vmov	d7, r3, r4
 800ce50:	eeb0 0a47 	vmov.f32	s0, s14
 800ce54:	eef0 0a67 	vmov.f32	s1, s15
 800ce58:	f006 fec8 	bl	8013bec <sqrt>
 800ce5c:	ec54 3b10 	vmov	r3, r4, d0
 800ce60:	4618      	mov	r0, r3
 800ce62:	4621      	mov	r1, r4
 800ce64:	f7f3 fe88 	bl	8000b78 <__aeabi_d2iz>
 800ce68:	4603      	mov	r3, r0
 800ce6a:	637b      	str	r3, [r7, #52]	; 0x34
	mems_decision.crash = (g_force > accel_limit);
 800ce6c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ce6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce70:	429a      	cmp	r2, r3
 800ce72:	bfcc      	ite	gt
 800ce74:	2301      	movgt	r3, #1
 800ce76:	2300      	movle	r3, #0
 800ce78:	b2db      	uxtb	r3, r3
 800ce7a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	// calculate movement change
	mems_decision.fall = (abs(mems.gyroscope.z) > gyro_limit);
 800ce7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	bfb8      	it	lt
 800ce84:	425b      	neglt	r3, r3
 800ce86:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ce88:	429a      	cmp	r2, r3
 800ce8a:	bfb4      	ite	lt
 800ce8c:	2301      	movlt	r3, #1
 800ce8e:	2300      	movge	r3, #0
 800ce90:	b2db      	uxtb	r3, r3
 800ce92:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	//			mems.accelerometer.x, mems.accelerometer.y, mems.accelerometer.z,
	//			mems.gyroscope.x, mems.gyroscope.y, mems.gyroscope.z
	//	);
	//	swvPrint(str);

	return mems_decision;
 800ce96:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ce98:	863b      	strh	r3, [r7, #48]	; 0x30
 800ce9a:	2300      	movs	r3, #0
 800ce9c:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800cea0:	f362 0307 	bfi	r3, r2, #0, #8
 800cea4:	f897 2031 	ldrb.w	r2, [r7, #49]	; 0x31
 800cea8:	f362 230f 	bfi	r3, r2, #8, #8
}
 800ceac:	4618      	mov	r0, r3
 800ceae:	3740      	adds	r7, #64	; 0x40
 800ceb0:	46bd      	mov	sp, r7
 800ceb2:	bdb0      	pop	{r4, r5, r7, pc}
 800ceb4:	f3af 8000 	nop.w
 800ceb8:	00000000 	.word	0x00000000
 800cebc:	40000000 	.word	0x40000000

0800cec0 <SD_MPU6050_Init>:
#define MPU6050_ACCE_SENS_4			((float) 8192)
#define MPU6050_ACCE_SENS_8			((float) 4096)
#define MPU6050_ACCE_SENS_16		((float) 2048)

SD_MPU6050_Result SD_MPU6050_Init(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct, SD_MPU6050_Device DeviceNumber, SD_MPU6050_Accelerometer AccelerometerSensitivity, SD_MPU6050_Gyroscope GyroscopeSensitivity)
{
 800cec0:	b580      	push	{r7, lr}
 800cec2:	b08a      	sub	sp, #40	; 0x28
 800cec4:	af02      	add	r7, sp, #8
 800cec6:	60f8      	str	r0, [r7, #12]
 800cec8:	60b9      	str	r1, [r7, #8]
 800ceca:	4611      	mov	r1, r2
 800cecc:	461a      	mov	r2, r3
 800cece:	460b      	mov	r3, r1
 800ced0:	71fb      	strb	r3, [r7, #7]
 800ced2:	4613      	mov	r3, r2
 800ced4:	71bb      	strb	r3, [r7, #6]
	uint8_t WHO_AM_I = (uint8_t)MPU6050_WHO_AM_I;
 800ced6:	2375      	movs	r3, #117	; 0x75
 800ced8:	76bb      	strb	r3, [r7, #26]
	uint8_t temp;
	I2C_HandleTypeDef* Handle = I2Cx;
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	61fb      	str	r3, [r7, #28]
	uint8_t d[2];


	/* Format I2C address */
	DataStruct->Address = MPU6050_I2C_ADDR | (uint8_t)DeviceNumber;
 800cede:	79fb      	ldrb	r3, [r7, #7]
 800cee0:	f063 032f 	orn	r3, r3, #47	; 0x2f
 800cee4:	b2da      	uxtb	r2, r3
 800cee6:	68bb      	ldr	r3, [r7, #8]
 800cee8:	701a      	strb	r2, [r3, #0]
	uint8_t address = DataStruct->Address;
 800ceea:	68bb      	ldr	r3, [r7, #8]
 800ceec:	781b      	ldrb	r3, [r3, #0]
 800ceee:	76fb      	strb	r3, [r7, #27]

	/* Check if device is connected */
	if(HAL_I2C_IsDeviceReady(Handle,address,2,5)!=HAL_OK)
 800cef0:	7efb      	ldrb	r3, [r7, #27]
 800cef2:	b299      	uxth	r1, r3
 800cef4:	2305      	movs	r3, #5
 800cef6:	2202      	movs	r2, #2
 800cef8:	69f8      	ldr	r0, [r7, #28]
 800cefa:	f7f6 fbcd 	bl	8003698 <HAL_I2C_IsDeviceReady>
 800cefe:	4603      	mov	r3, r0
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d001      	beq.n	800cf08 <SD_MPU6050_Init+0x48>
	{
				return SD_MPU6050_Result_Error;
 800cf04:	2301      	movs	r3, #1
 800cf06:	e04c      	b.n	800cfa2 <SD_MPU6050_Init+0xe2>
	}
	/* Check who am I */
	//------------------
		/* Send address */
		if(HAL_I2C_Master_Transmit(Handle, address, &WHO_AM_I, 1, 1000) != HAL_OK)
 800cf08:	7efb      	ldrb	r3, [r7, #27]
 800cf0a:	b299      	uxth	r1, r3
 800cf0c:	f107 021a 	add.w	r2, r7, #26
 800cf10:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800cf14:	9300      	str	r3, [sp, #0]
 800cf16:	2301      	movs	r3, #1
 800cf18:	69f8      	ldr	r0, [r7, #28]
 800cf1a:	f7f5 fd79 	bl	8002a10 <HAL_I2C_Master_Transmit>
 800cf1e:	4603      	mov	r3, r0
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d001      	beq.n	800cf28 <SD_MPU6050_Init+0x68>
		{
			return SD_MPU6050_Result_Error;
 800cf24:	2301      	movs	r3, #1
 800cf26:	e03c      	b.n	800cfa2 <SD_MPU6050_Init+0xe2>
		}

		/* Receive multiple byte */
		if(HAL_I2C_Master_Receive(Handle, address, &temp, 1, 1000) != HAL_OK)
 800cf28:	7efb      	ldrb	r3, [r7, #27]
 800cf2a:	b299      	uxth	r1, r3
 800cf2c:	f107 0219 	add.w	r2, r7, #25
 800cf30:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800cf34:	9300      	str	r3, [sp, #0]
 800cf36:	2301      	movs	r3, #1
 800cf38:	69f8      	ldr	r0, [r7, #28]
 800cf3a:	f7f5 fe67 	bl	8002c0c <HAL_I2C_Master_Receive>
 800cf3e:	4603      	mov	r3, r0
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d003      	beq.n	800cf4c <SD_MPU6050_Init+0x8c>
		{
			return SD_MPU6050_Result_Error;
 800cf44:	2301      	movs	r3, #1
 800cf46:	e02c      	b.n	800cfa2 <SD_MPU6050_Init+0xe2>

		/* Checking */
		while(temp != MPU6050_I_AM)
		{
				/* Return error */
				return SD_MPU6050_Result_DeviceInvalid;
 800cf48:	2303      	movs	r3, #3
 800cf4a:	e02a      	b.n	800cfa2 <SD_MPU6050_Init+0xe2>
		while(temp != MPU6050_I_AM)
 800cf4c:	bf00      	nop
 800cf4e:	7e7b      	ldrb	r3, [r7, #25]
 800cf50:	2b72      	cmp	r3, #114	; 0x72
 800cf52:	d1f9      	bne.n	800cf48 <SD_MPU6050_Init+0x88>
	//------------------

	/* Wakeup MPU6050 */
	//------------------
		/* Format array to send */
		d[0] = MPU6050_PWR_MGMT_1;
 800cf54:	236b      	movs	r3, #107	; 0x6b
 800cf56:	753b      	strb	r3, [r7, #20]
		d[1] = 0x00;
 800cf58:	2300      	movs	r3, #0
 800cf5a:	757b      	strb	r3, [r7, #21]

		/* Try to transmit via I2C */
		if(HAL_I2C_Master_Transmit(Handle,(uint16_t)address , (uint8_t *)d, 2, 1000) != HAL_OK)
 800cf5c:	7efb      	ldrb	r3, [r7, #27]
 800cf5e:	b299      	uxth	r1, r3
 800cf60:	f107 0214 	add.w	r2, r7, #20
 800cf64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800cf68:	9300      	str	r3, [sp, #0]
 800cf6a:	2302      	movs	r3, #2
 800cf6c:	69f8      	ldr	r0, [r7, #28]
 800cf6e:	f7f5 fd4f 	bl	8002a10 <HAL_I2C_Master_Transmit>
 800cf72:	4603      	mov	r3, r0
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d001      	beq.n	800cf7c <SD_MPU6050_Init+0xbc>
		{
					return SD_MPU6050_Result_Error;
 800cf78:	2301      	movs	r3, #1
 800cf7a:	e012      	b.n	800cfa2 <SD_MPU6050_Init+0xe2>
		}
	//------------------

	/* Set sample rate to 1kHz */
	SD_MPU6050_SetDataRate(I2Cx,DataStruct, SD_MPU6050_DataRate_8KHz);
 800cf7c:	2200      	movs	r2, #0
 800cf7e:	68b9      	ldr	r1, [r7, #8]
 800cf80:	68f8      	ldr	r0, [r7, #12]
 800cf82:	f000 f812 	bl	800cfaa <SD_MPU6050_SetDataRate>

	/* Config accelerometer */
	SD_MPU6050_SetAccelerometer(I2Cx,DataStruct, AccelerometerSensitivity);
 800cf86:	79bb      	ldrb	r3, [r7, #6]
 800cf88:	461a      	mov	r2, r3
 800cf8a:	68b9      	ldr	r1, [r7, #8]
 800cf8c:	68f8      	ldr	r0, [r7, #12]
 800cf8e:	f000 f831 	bl	800cff4 <SD_MPU6050_SetAccelerometer>

	/* Config Gyroscope */
	SD_MPU6050_SetGyroscope(I2Cx,DataStruct, GyroscopeSensitivity);
 800cf92:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800cf96:	461a      	mov	r2, r3
 800cf98:	68b9      	ldr	r1, [r7, #8]
 800cf9a:	68f8      	ldr	r0, [r7, #12]
 800cf9c:	f000 f89a 	bl	800d0d4 <SD_MPU6050_SetGyroscope>

	/* Return OK */
	return SD_MPU6050_Result_Ok;
 800cfa0:	2300      	movs	r3, #0
}
 800cfa2:	4618      	mov	r0, r3
 800cfa4:	3720      	adds	r7, #32
 800cfa6:	46bd      	mov	sp, r7
 800cfa8:	bd80      	pop	{r7, pc}

0800cfaa <SD_MPU6050_SetDataRate>:

SD_MPU6050_Result SD_MPU6050_SetDataRate(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct, uint8_t rate)
{
 800cfaa:	b580      	push	{r7, lr}
 800cfac:	b088      	sub	sp, #32
 800cfae:	af02      	add	r7, sp, #8
 800cfb0:	60f8      	str	r0, [r7, #12]
 800cfb2:	60b9      	str	r1, [r7, #8]
 800cfb4:	4613      	mov	r3, r2
 800cfb6:	71fb      	strb	r3, [r7, #7]
	uint8_t d[2];
	I2C_HandleTypeDef* Handle = I2Cx;
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	617b      	str	r3, [r7, #20]
	uint8_t address = DataStruct->Address;
 800cfbc:	68bb      	ldr	r3, [r7, #8]
 800cfbe:	781b      	ldrb	r3, [r3, #0]
 800cfc0:	74fb      	strb	r3, [r7, #19]
	/* Format array to send */
	d[0] = MPU6050_SMPLRT_DIV;
 800cfc2:	2319      	movs	r3, #25
 800cfc4:	743b      	strb	r3, [r7, #16]
	d[1] = rate;
 800cfc6:	79fb      	ldrb	r3, [r7, #7]
 800cfc8:	747b      	strb	r3, [r7, #17]

	/* Set data sample rate */
	while(HAL_I2C_Master_Transmit(Handle,(uint16_t)address,(uint8_t *)d,2,1000)!=HAL_OK);
 800cfca:	bf00      	nop
 800cfcc:	7cfb      	ldrb	r3, [r7, #19]
 800cfce:	b299      	uxth	r1, r3
 800cfd0:	f107 0210 	add.w	r2, r7, #16
 800cfd4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800cfd8:	9300      	str	r3, [sp, #0]
 800cfda:	2302      	movs	r3, #2
 800cfdc:	6978      	ldr	r0, [r7, #20]
 800cfde:	f7f5 fd17 	bl	8002a10 <HAL_I2C_Master_Transmit>
 800cfe2:	4603      	mov	r3, r0
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d1f1      	bne.n	800cfcc <SD_MPU6050_SetDataRate+0x22>
	/*{
				return SD_MPU6050_Result_Error;
	}*/

	/* Return OK */
	return SD_MPU6050_Result_Ok;
 800cfe8:	2300      	movs	r3, #0
}
 800cfea:	4618      	mov	r0, r3
 800cfec:	3718      	adds	r7, #24
 800cfee:	46bd      	mov	sp, r7
 800cff0:	bd80      	pop	{r7, pc}
	...

0800cff4 <SD_MPU6050_SetAccelerometer>:

SD_MPU6050_Result SD_MPU6050_SetAccelerometer(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct, SD_MPU6050_Accelerometer AccelerometerSensitivity)
{
 800cff4:	b580      	push	{r7, lr}
 800cff6:	b088      	sub	sp, #32
 800cff8:	af02      	add	r7, sp, #8
 800cffa:	60f8      	str	r0, [r7, #12]
 800cffc:	60b9      	str	r1, [r7, #8]
 800cffe:	4613      	mov	r3, r2
 800d000:	71fb      	strb	r3, [r7, #7]
	uint8_t temp;
	I2C_HandleTypeDef* Handle = I2Cx;
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	617b      	str	r3, [r7, #20]
	uint8_t address = DataStruct->Address;
 800d006:	68bb      	ldr	r3, [r7, #8]
 800d008:	781b      	ldrb	r3, [r3, #0]
 800d00a:	74fb      	strb	r3, [r7, #19]
	uint8_t regAdd =(uint8_t )MPU6050_ACCEL_CONFIG;
 800d00c:	231c      	movs	r3, #28
 800d00e:	747b      	strb	r3, [r7, #17]

	/* Config accelerometer */
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&regAdd, 1, 1000) != HAL_OK);
 800d010:	bf00      	nop
 800d012:	7cfb      	ldrb	r3, [r7, #19]
 800d014:	b299      	uxth	r1, r3
 800d016:	f107 0211 	add.w	r2, r7, #17
 800d01a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d01e:	9300      	str	r3, [sp, #0]
 800d020:	2301      	movs	r3, #1
 800d022:	6978      	ldr	r0, [r7, #20]
 800d024:	f7f5 fcf4 	bl	8002a10 <HAL_I2C_Master_Transmit>
 800d028:	4603      	mov	r3, r0
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d1f1      	bne.n	800d012 <SD_MPU6050_SetAccelerometer+0x1e>
	/*{
				return SD_MPU6050_Result_Error;
	}*/
	while(HAL_I2C_Master_Receive(Handle, (uint16_t)address, &temp, 1, 1000) != HAL_OK);
 800d02e:	bf00      	nop
 800d030:	7cfb      	ldrb	r3, [r7, #19]
 800d032:	b299      	uxth	r1, r3
 800d034:	f107 0212 	add.w	r2, r7, #18
 800d038:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d03c:	9300      	str	r3, [sp, #0]
 800d03e:	2301      	movs	r3, #1
 800d040:	6978      	ldr	r0, [r7, #20]
 800d042:	f7f5 fde3 	bl	8002c0c <HAL_I2C_Master_Receive>
 800d046:	4603      	mov	r3, r0
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d1f1      	bne.n	800d030 <SD_MPU6050_SetAccelerometer+0x3c>
	/*{
				return SD_MPU6050_Result_Error;
	}*/
	temp = (temp & 0xE7) | (uint8_t)AccelerometerSensitivity << 3;
 800d04c:	7cbb      	ldrb	r3, [r7, #18]
 800d04e:	b25b      	sxtb	r3, r3
 800d050:	f023 0318 	bic.w	r3, r3, #24
 800d054:	b25a      	sxtb	r2, r3
 800d056:	79fb      	ldrb	r3, [r7, #7]
 800d058:	00db      	lsls	r3, r3, #3
 800d05a:	b25b      	sxtb	r3, r3
 800d05c:	4313      	orrs	r3, r2
 800d05e:	b25b      	sxtb	r3, r3
 800d060:	b2db      	uxtb	r3, r3
 800d062:	74bb      	strb	r3, [r7, #18]
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&temp, 1, 1000) != HAL_OK);
 800d064:	bf00      	nop
 800d066:	7cfb      	ldrb	r3, [r7, #19]
 800d068:	b299      	uxth	r1, r3
 800d06a:	f107 0212 	add.w	r2, r7, #18
 800d06e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d072:	9300      	str	r3, [sp, #0]
 800d074:	2301      	movs	r3, #1
 800d076:	6978      	ldr	r0, [r7, #20]
 800d078:	f7f5 fcca 	bl	8002a10 <HAL_I2C_Master_Transmit>
 800d07c:	4603      	mov	r3, r0
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d1f1      	bne.n	800d066 <SD_MPU6050_SetAccelerometer+0x72>
	/*{
				return SD_MPU6050_Result_Error;
	}*/

	/* Set sensitivities for multiplying gyro and accelerometer data */
	switch (AccelerometerSensitivity) {
 800d082:	79fb      	ldrb	r3, [r7, #7]
 800d084:	2b03      	cmp	r3, #3
 800d086:	d81f      	bhi.n	800d0c8 <SD_MPU6050_SetAccelerometer+0xd4>
 800d088:	a201      	add	r2, pc, #4	; (adr r2, 800d090 <SD_MPU6050_SetAccelerometer+0x9c>)
 800d08a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d08e:	bf00      	nop
 800d090:	0800d0a1 	.word	0x0800d0a1
 800d094:	0800d0ab 	.word	0x0800d0ab
 800d098:	0800d0b5 	.word	0x0800d0b5
 800d09c:	0800d0bf 	.word	0x0800d0bf
		case SD_MPU6050_Accelerometer_2G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_2;
 800d0a0:	68bb      	ldr	r3, [r7, #8]
 800d0a2:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 800d0a6:	609a      	str	r2, [r3, #8]
			break;
 800d0a8:	e00f      	b.n	800d0ca <SD_MPU6050_SetAccelerometer+0xd6>
		case SD_MPU6050_Accelerometer_4G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_4;
 800d0aa:	68bb      	ldr	r3, [r7, #8]
 800d0ac:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 800d0b0:	609a      	str	r2, [r3, #8]
			break;
 800d0b2:	e00a      	b.n	800d0ca <SD_MPU6050_SetAccelerometer+0xd6>
		case SD_MPU6050_Accelerometer_8G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_8;
 800d0b4:	68bb      	ldr	r3, [r7, #8]
 800d0b6:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 800d0ba:	609a      	str	r2, [r3, #8]
			break;
 800d0bc:	e005      	b.n	800d0ca <SD_MPU6050_SetAccelerometer+0xd6>
		case SD_MPU6050_Accelerometer_16G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_16;
 800d0be:	68bb      	ldr	r3, [r7, #8]
 800d0c0:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 800d0c4:	609a      	str	r2, [r3, #8]
			break;
 800d0c6:	e000      	b.n	800d0ca <SD_MPU6050_SetAccelerometer+0xd6>
		default:
			break;
 800d0c8:	bf00      	nop
		}

	/* Return OK */
	return SD_MPU6050_Result_Ok;
 800d0ca:	2300      	movs	r3, #0
}
 800d0cc:	4618      	mov	r0, r3
 800d0ce:	3718      	adds	r7, #24
 800d0d0:	46bd      	mov	sp, r7
 800d0d2:	bd80      	pop	{r7, pc}

0800d0d4 <SD_MPU6050_SetGyroscope>:

SD_MPU6050_Result SD_MPU6050_SetGyroscope(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct, SD_MPU6050_Gyroscope GyroscopeSensitivity)
{
 800d0d4:	b580      	push	{r7, lr}
 800d0d6:	b088      	sub	sp, #32
 800d0d8:	af02      	add	r7, sp, #8
 800d0da:	60f8      	str	r0, [r7, #12]
 800d0dc:	60b9      	str	r1, [r7, #8]
 800d0de:	4613      	mov	r3, r2
 800d0e0:	71fb      	strb	r3, [r7, #7]
	uint8_t temp;
	I2C_HandleTypeDef* Handle = I2Cx;
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	617b      	str	r3, [r7, #20]
	uint8_t address = DataStruct->Address;
 800d0e6:	68bb      	ldr	r3, [r7, #8]
 800d0e8:	781b      	ldrb	r3, [r3, #0]
 800d0ea:	74fb      	strb	r3, [r7, #19]
	uint8_t regAdd =(uint8_t )MPU6050_GYRO_CONFIG;
 800d0ec:	231b      	movs	r3, #27
 800d0ee:	747b      	strb	r3, [r7, #17]

	/* Config gyroscope */
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&regAdd, 1, 1000) != HAL_OK);
 800d0f0:	bf00      	nop
 800d0f2:	7cfb      	ldrb	r3, [r7, #19]
 800d0f4:	b299      	uxth	r1, r3
 800d0f6:	f107 0211 	add.w	r2, r7, #17
 800d0fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d0fe:	9300      	str	r3, [sp, #0]
 800d100:	2301      	movs	r3, #1
 800d102:	6978      	ldr	r0, [r7, #20]
 800d104:	f7f5 fc84 	bl	8002a10 <HAL_I2C_Master_Transmit>
 800d108:	4603      	mov	r3, r0
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d1f1      	bne.n	800d0f2 <SD_MPU6050_SetGyroscope+0x1e>
	/*{
				return SD_MPU6050_Result_Error;
	}*/
	while(HAL_I2C_Master_Receive(Handle, (uint16_t)address, &temp, 1, 1000) != HAL_OK);
 800d10e:	bf00      	nop
 800d110:	7cfb      	ldrb	r3, [r7, #19]
 800d112:	b299      	uxth	r1, r3
 800d114:	f107 0212 	add.w	r2, r7, #18
 800d118:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d11c:	9300      	str	r3, [sp, #0]
 800d11e:	2301      	movs	r3, #1
 800d120:	6978      	ldr	r0, [r7, #20]
 800d122:	f7f5 fd73 	bl	8002c0c <HAL_I2C_Master_Receive>
 800d126:	4603      	mov	r3, r0
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d1f1      	bne.n	800d110 <SD_MPU6050_SetGyroscope+0x3c>
	/*{
				return SD_MPU6050_Result_Error;
	}*/
	temp = (temp & 0xE7) | (uint8_t)GyroscopeSensitivity << 3;
 800d12c:	7cbb      	ldrb	r3, [r7, #18]
 800d12e:	b25b      	sxtb	r3, r3
 800d130:	f023 0318 	bic.w	r3, r3, #24
 800d134:	b25a      	sxtb	r2, r3
 800d136:	79fb      	ldrb	r3, [r7, #7]
 800d138:	00db      	lsls	r3, r3, #3
 800d13a:	b25b      	sxtb	r3, r3
 800d13c:	4313      	orrs	r3, r2
 800d13e:	b25b      	sxtb	r3, r3
 800d140:	b2db      	uxtb	r3, r3
 800d142:	74bb      	strb	r3, [r7, #18]
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&temp, 1, 1000) != HAL_OK);
 800d144:	bf00      	nop
 800d146:	7cfb      	ldrb	r3, [r7, #19]
 800d148:	b299      	uxth	r1, r3
 800d14a:	f107 0212 	add.w	r2, r7, #18
 800d14e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d152:	9300      	str	r3, [sp, #0]
 800d154:	2301      	movs	r3, #1
 800d156:	6978      	ldr	r0, [r7, #20]
 800d158:	f7f5 fc5a 	bl	8002a10 <HAL_I2C_Master_Transmit>
 800d15c:	4603      	mov	r3, r0
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d1f1      	bne.n	800d146 <SD_MPU6050_SetGyroscope+0x72>
	/*{
				return SD_MPU6050_Result_Error;
	}*/

	switch (GyroscopeSensitivity) {
 800d162:	79fb      	ldrb	r3, [r7, #7]
 800d164:	2b03      	cmp	r3, #3
 800d166:	d81b      	bhi.n	800d1a0 <SD_MPU6050_SetGyroscope+0xcc>
 800d168:	a201      	add	r2, pc, #4	; (adr r2, 800d170 <SD_MPU6050_SetGyroscope+0x9c>)
 800d16a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d16e:	bf00      	nop
 800d170:	0800d181 	.word	0x0800d181
 800d174:	0800d189 	.word	0x0800d189
 800d178:	0800d191 	.word	0x0800d191
 800d17c:	0800d199 	.word	0x0800d199
			case SD_MPU6050_Gyroscope_250s:
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_250;
 800d180:	68bb      	ldr	r3, [r7, #8]
 800d182:	4a0a      	ldr	r2, [pc, #40]	; (800d1ac <SD_MPU6050_SetGyroscope+0xd8>)
 800d184:	605a      	str	r2, [r3, #4]
				break;
 800d186:	e00c      	b.n	800d1a2 <SD_MPU6050_SetGyroscope+0xce>
			case SD_MPU6050_Gyroscope_500s:
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_500;
 800d188:	68bb      	ldr	r3, [r7, #8]
 800d18a:	4a09      	ldr	r2, [pc, #36]	; (800d1b0 <SD_MPU6050_SetGyroscope+0xdc>)
 800d18c:	605a      	str	r2, [r3, #4]
				break;
 800d18e:	e008      	b.n	800d1a2 <SD_MPU6050_SetGyroscope+0xce>
			case SD_MPU6050_Gyroscope_1000s:
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_1000;
 800d190:	68bb      	ldr	r3, [r7, #8]
 800d192:	4a08      	ldr	r2, [pc, #32]	; (800d1b4 <SD_MPU6050_SetGyroscope+0xe0>)
 800d194:	605a      	str	r2, [r3, #4]
				break;
 800d196:	e004      	b.n	800d1a2 <SD_MPU6050_SetGyroscope+0xce>
			case SD_MPU6050_Gyroscope_2000s:
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_2000;
 800d198:	68bb      	ldr	r3, [r7, #8]
 800d19a:	4a07      	ldr	r2, [pc, #28]	; (800d1b8 <SD_MPU6050_SetGyroscope+0xe4>)
 800d19c:	605a      	str	r2, [r3, #4]
				break;
 800d19e:	e000      	b.n	800d1a2 <SD_MPU6050_SetGyroscope+0xce>
			default:
				break;
 800d1a0:	bf00      	nop
		}
	/* Return OK */
	return SD_MPU6050_Result_Ok;
 800d1a2:	2300      	movs	r3, #0
}
 800d1a4:	4618      	mov	r0, r3
 800d1a6:	3718      	adds	r7, #24
 800d1a8:	46bd      	mov	sp, r7
 800d1aa:	bd80      	pop	{r7, pc}
 800d1ac:	3bfa232d 	.word	0x3bfa232d
 800d1b0:	3c7a232d 	.word	0x3c7a232d
 800d1b4:	3cf9c190 	.word	0x3cf9c190
 800d1b8:	3d79c190 	.word	0x3d79c190

0800d1bc <SD_MPU6050_ReadAll>:

	/* Return OK */
	return SD_MPU6050_Result_Ok;
}
SD_MPU6050_Result SD_MPU6050_ReadAll(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct)
{
 800d1bc:	b580      	push	{r7, lr}
 800d1be:	b08c      	sub	sp, #48	; 0x30
 800d1c0:	af02      	add	r7, sp, #8
 800d1c2:	6078      	str	r0, [r7, #4]
 800d1c4:	6039      	str	r1, [r7, #0]
	uint8_t data[14];
	int16_t temp;
	uint8_t reg = MPU6050_ACCEL_XOUT_H;
 800d1c6:	233b      	movs	r3, #59	; 0x3b
 800d1c8:	73fb      	strb	r3, [r7, #15]
	I2C_HandleTypeDef* Handle = I2Cx;
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t address = DataStruct->Address;
 800d1ce:	683b      	ldr	r3, [r7, #0]
 800d1d0:	781b      	ldrb	r3, [r3, #0]
 800d1d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	/* Read full raw data, 14bytes */
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address, &reg, 1, 1000) != HAL_OK);
 800d1d6:	bf00      	nop
 800d1d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d1dc:	b299      	uxth	r1, r3
 800d1de:	f107 020f 	add.w	r2, r7, #15
 800d1e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d1e6:	9300      	str	r3, [sp, #0]
 800d1e8:	2301      	movs	r3, #1
 800d1ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d1ec:	f7f5 fc10 	bl	8002a10 <HAL_I2C_Master_Transmit>
 800d1f0:	4603      	mov	r3, r0
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d1f0      	bne.n	800d1d8 <SD_MPU6050_ReadAll+0x1c>

	while(HAL_I2C_Master_Receive(Handle, (uint16_t)address, data, 14, 1000) != HAL_OK);
 800d1f6:	bf00      	nop
 800d1f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d1fc:	b299      	uxth	r1, r3
 800d1fe:	f107 0210 	add.w	r2, r7, #16
 800d202:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d206:	9300      	str	r3, [sp, #0]
 800d208:	230e      	movs	r3, #14
 800d20a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d20c:	f7f5 fcfe 	bl	8002c0c <HAL_I2C_Master_Receive>
 800d210:	4603      	mov	r3, r0
 800d212:	2b00      	cmp	r3, #0
 800d214:	d1f0      	bne.n	800d1f8 <SD_MPU6050_ReadAll+0x3c>

	/* Format accelerometer data */
	DataStruct->Accelerometer_X = (int16_t)(data[0] << 8 | data[1]);
 800d216:	7c3b      	ldrb	r3, [r7, #16]
 800d218:	021b      	lsls	r3, r3, #8
 800d21a:	b21a      	sxth	r2, r3
 800d21c:	7c7b      	ldrb	r3, [r7, #17]
 800d21e:	b21b      	sxth	r3, r3
 800d220:	4313      	orrs	r3, r2
 800d222:	b21a      	sxth	r2, r3
 800d224:	683b      	ldr	r3, [r7, #0]
 800d226:	819a      	strh	r2, [r3, #12]
	DataStruct->Accelerometer_Y = (int16_t)(data[2] << 8 | data[3]);
 800d228:	7cbb      	ldrb	r3, [r7, #18]
 800d22a:	021b      	lsls	r3, r3, #8
 800d22c:	b21a      	sxth	r2, r3
 800d22e:	7cfb      	ldrb	r3, [r7, #19]
 800d230:	b21b      	sxth	r3, r3
 800d232:	4313      	orrs	r3, r2
 800d234:	b21a      	sxth	r2, r3
 800d236:	683b      	ldr	r3, [r7, #0]
 800d238:	81da      	strh	r2, [r3, #14]
	DataStruct->Accelerometer_Z = (int16_t)(data[4] << 8 | data[5]);
 800d23a:	7d3b      	ldrb	r3, [r7, #20]
 800d23c:	021b      	lsls	r3, r3, #8
 800d23e:	b21a      	sxth	r2, r3
 800d240:	7d7b      	ldrb	r3, [r7, #21]
 800d242:	b21b      	sxth	r3, r3
 800d244:	4313      	orrs	r3, r2
 800d246:	b21a      	sxth	r2, r3
 800d248:	683b      	ldr	r3, [r7, #0]
 800d24a:	821a      	strh	r2, [r3, #16]

	/* Format temperature */
	temp = (data[6] << 8 | data[7]);
 800d24c:	7dbb      	ldrb	r3, [r7, #22]
 800d24e:	021b      	lsls	r3, r3, #8
 800d250:	b21a      	sxth	r2, r3
 800d252:	7dfb      	ldrb	r3, [r7, #23]
 800d254:	b21b      	sxth	r3, r3
 800d256:	4313      	orrs	r3, r2
 800d258:	843b      	strh	r3, [r7, #32]
	DataStruct->Temperature = (float)((float)((int16_t)temp) / (float)340.0 + (float)36.53);
 800d25a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d25e:	ee07 3a90 	vmov	s15, r3
 800d262:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d266:	eddf 6a15 	vldr	s13, [pc, #84]	; 800d2bc <SD_MPU6050_ReadAll+0x100>
 800d26a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d26e:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800d2c0 <SD_MPU6050_ReadAll+0x104>
 800d272:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d276:	683b      	ldr	r3, [r7, #0]
 800d278:	edc3 7a06 	vstr	s15, [r3, #24]

	/* Format gyroscope data */
	DataStruct->Gyroscope_X = (int16_t)(data[8] << 8 | data[9]);
 800d27c:	7e3b      	ldrb	r3, [r7, #24]
 800d27e:	021b      	lsls	r3, r3, #8
 800d280:	b21a      	sxth	r2, r3
 800d282:	7e7b      	ldrb	r3, [r7, #25]
 800d284:	b21b      	sxth	r3, r3
 800d286:	4313      	orrs	r3, r2
 800d288:	b21a      	sxth	r2, r3
 800d28a:	683b      	ldr	r3, [r7, #0]
 800d28c:	825a      	strh	r2, [r3, #18]
	DataStruct->Gyroscope_Y = (int16_t)(data[10] << 8 | data[11]);
 800d28e:	7ebb      	ldrb	r3, [r7, #26]
 800d290:	021b      	lsls	r3, r3, #8
 800d292:	b21a      	sxth	r2, r3
 800d294:	7efb      	ldrb	r3, [r7, #27]
 800d296:	b21b      	sxth	r3, r3
 800d298:	4313      	orrs	r3, r2
 800d29a:	b21a      	sxth	r2, r3
 800d29c:	683b      	ldr	r3, [r7, #0]
 800d29e:	829a      	strh	r2, [r3, #20]
	DataStruct->Gyroscope_Z = (int16_t)(data[12] << 8 | data[13]);
 800d2a0:	7f3b      	ldrb	r3, [r7, #28]
 800d2a2:	021b      	lsls	r3, r3, #8
 800d2a4:	b21a      	sxth	r2, r3
 800d2a6:	7f7b      	ldrb	r3, [r7, #29]
 800d2a8:	b21b      	sxth	r3, r3
 800d2aa:	4313      	orrs	r3, r2
 800d2ac:	b21a      	sxth	r2, r3
 800d2ae:	683b      	ldr	r3, [r7, #0]
 800d2b0:	82da      	strh	r2, [r3, #22]

	/* Return OK */
	return SD_MPU6050_Result_Ok;
 800d2b2:	2300      	movs	r3, #0
}
 800d2b4:	4618      	mov	r0, r3
 800d2b6:	3728      	adds	r7, #40	; 0x28
 800d2b8:	46bd      	mov	sp, r7
 800d2ba:	bd80      	pop	{r7, pc}
 800d2bc:	43aa0000 	.word	0x43aa0000
 800d2c0:	42121eb8 	.word	0x42121eb8

0800d2c4 <parse_number>:
 * \param[in]       gh: GPS handle
 * \param[in]       t: Text to parse. Set to `NULL` to parse current GPS term
 * \return          Parsed integer
 */
static int32_t
parse_number(gps_t* gh, const char* t) {
 800d2c4:	b480      	push	{r7}
 800d2c6:	b085      	sub	sp, #20
 800d2c8:	af00      	add	r7, sp, #0
 800d2ca:	6078      	str	r0, [r7, #4]
 800d2cc:	6039      	str	r1, [r7, #0]
	int32_t res = 0;
 800d2ce:	2300      	movs	r3, #0
 800d2d0:	60fb      	str	r3, [r7, #12]
	uint8_t minus;

	if (t == NULL) {
 800d2d2:	683b      	ldr	r3, [r7, #0]
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d106      	bne.n	800d2e6 <parse_number+0x22>
		t = gh->p.term_str;
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	3345      	adds	r3, #69	; 0x45
 800d2dc:	603b      	str	r3, [r7, #0]
	}
	for (; t != NULL && *t == ' '; t++) {}      /* Strip leading spaces */
 800d2de:	e002      	b.n	800d2e6 <parse_number+0x22>
 800d2e0:	683b      	ldr	r3, [r7, #0]
 800d2e2:	3301      	adds	r3, #1
 800d2e4:	603b      	str	r3, [r7, #0]
 800d2e6:	683b      	ldr	r3, [r7, #0]
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d003      	beq.n	800d2f4 <parse_number+0x30>
 800d2ec:	683b      	ldr	r3, [r7, #0]
 800d2ee:	781b      	ldrb	r3, [r3, #0]
 800d2f0:	2b20      	cmp	r3, #32
 800d2f2:	d0f5      	beq.n	800d2e0 <parse_number+0x1c>

	minus = (*t == '-' ? (t++, 1) : 0);
 800d2f4:	683b      	ldr	r3, [r7, #0]
 800d2f6:	781b      	ldrb	r3, [r3, #0]
 800d2f8:	2b2d      	cmp	r3, #45	; 0x2d
 800d2fa:	d104      	bne.n	800d306 <parse_number+0x42>
 800d2fc:	683b      	ldr	r3, [r7, #0]
 800d2fe:	3301      	adds	r3, #1
 800d300:	603b      	str	r3, [r7, #0]
 800d302:	2301      	movs	r3, #1
 800d304:	e000      	b.n	800d308 <parse_number+0x44>
 800d306:	2300      	movs	r3, #0
 800d308:	72fb      	strb	r3, [r7, #11]
	for (; t != NULL && CIN(*t); t++) {
 800d30a:	e00d      	b.n	800d328 <parse_number+0x64>
		res = 10 * res + CTN(*t);
 800d30c:	68fa      	ldr	r2, [r7, #12]
 800d30e:	4613      	mov	r3, r2
 800d310:	009b      	lsls	r3, r3, #2
 800d312:	4413      	add	r3, r2
 800d314:	005b      	lsls	r3, r3, #1
 800d316:	461a      	mov	r2, r3
 800d318:	683b      	ldr	r3, [r7, #0]
 800d31a:	781b      	ldrb	r3, [r3, #0]
 800d31c:	3b30      	subs	r3, #48	; 0x30
 800d31e:	4413      	add	r3, r2
 800d320:	60fb      	str	r3, [r7, #12]
	for (; t != NULL && CIN(*t); t++) {
 800d322:	683b      	ldr	r3, [r7, #0]
 800d324:	3301      	adds	r3, #1
 800d326:	603b      	str	r3, [r7, #0]
 800d328:	683b      	ldr	r3, [r7, #0]
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d007      	beq.n	800d33e <parse_number+0x7a>
 800d32e:	683b      	ldr	r3, [r7, #0]
 800d330:	781b      	ldrb	r3, [r3, #0]
 800d332:	2b2f      	cmp	r3, #47	; 0x2f
 800d334:	d903      	bls.n	800d33e <parse_number+0x7a>
 800d336:	683b      	ldr	r3, [r7, #0]
 800d338:	781b      	ldrb	r3, [r3, #0]
 800d33a:	2b39      	cmp	r3, #57	; 0x39
 800d33c:	d9e6      	bls.n	800d30c <parse_number+0x48>
	}
	return minus ? -res : res;
 800d33e:	7afb      	ldrb	r3, [r7, #11]
 800d340:	2b00      	cmp	r3, #0
 800d342:	d002      	beq.n	800d34a <parse_number+0x86>
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	425b      	negs	r3, r3
 800d348:	e000      	b.n	800d34c <parse_number+0x88>
 800d34a:	68fb      	ldr	r3, [r7, #12]
}
 800d34c:	4618      	mov	r0, r3
 800d34e:	3714      	adds	r7, #20
 800d350:	46bd      	mov	sp, r7
 800d352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d356:	4770      	bx	lr

0800d358 <parse_float_number>:
 * \param[in]       gh: GPS handle
 * \param[in]       t: Text to parse. Set to `NULL` to parse current GPS term
 * \return          Parsed double in \ref gps_float_t format
 */
static gps_float_t
parse_float_number(gps_t* gh, const char* t) {
 800d358:	b580      	push	{r7, lr}
 800d35a:	b084      	sub	sp, #16
 800d35c:	af00      	add	r7, sp, #0
 800d35e:	6078      	str	r0, [r7, #4]
 800d360:	6039      	str	r1, [r7, #0]
	gps_float_t res;

	if (t == NULL) {
 800d362:	683b      	ldr	r3, [r7, #0]
 800d364:	2b00      	cmp	r3, #0
 800d366:	d106      	bne.n	800d376 <parse_float_number+0x1e>
		t = gh->p.term_str;
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	3345      	adds	r3, #69	; 0x45
 800d36c:	603b      	str	r3, [r7, #0]
	}
	for (; t != NULL && *t == ' '; t++) {}      /* Strip leading spaces */
 800d36e:	e002      	b.n	800d376 <parse_float_number+0x1e>
 800d370:	683b      	ldr	r3, [r7, #0]
 800d372:	3301      	adds	r3, #1
 800d374:	603b      	str	r3, [r7, #0]
 800d376:	683b      	ldr	r3, [r7, #0]
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d003      	beq.n	800d384 <parse_float_number+0x2c>
 800d37c:	683b      	ldr	r3, [r7, #0]
 800d37e:	781b      	ldrb	r3, [r3, #0]
 800d380:	2b20      	cmp	r3, #32
 800d382:	d0f5      	beq.n	800d370 <parse_float_number+0x18>

#if GPS_CFG_DOUBLE
	res = strtod(t, NULL);                      /* Parse string to double */
#else /* GPS_CFG_DOUBLE */
	res = strtof(t, NULL);                      /* Parse string to float */
 800d384:	2100      	movs	r1, #0
 800d386:	6838      	ldr	r0, [r7, #0]
 800d388:	f004 fe5a 	bl	8012040 <strtof>
 800d38c:	ed87 0a03 	vstr	s0, [r7, #12]
#endif /* !GPS_CFG_DOUBLE */

	return FLT(res);                            /* Return casted value, based on float size */
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	ee07 3a90 	vmov	s15, r3
}
 800d396:	eeb0 0a67 	vmov.f32	s0, s15
 800d39a:	3710      	adds	r7, #16
 800d39c:	46bd      	mov	sp, r7
 800d39e:	bd80      	pop	{r7, pc}

0800d3a0 <parse_lat_long>:
 *                  NMEA output for latitude is ddmm.sss and longitude is dddmm.sss
 * \param[in]       gh: GPS handle
 * \return          Latitude/Longitude value in degrees
 */
static gps_float_t
parse_lat_long(gps_t* gh) {
 800d3a0:	b580      	push	{r7, lr}
 800d3a2:	b086      	sub	sp, #24
 800d3a4:	af00      	add	r7, sp, #0
 800d3a6:	6078      	str	r0, [r7, #4]
	gps_float_t ll, deg, min;

	ll = parse_float_number(gh, NULL);          /* Parse value as double */
 800d3a8:	2100      	movs	r1, #0
 800d3aa:	6878      	ldr	r0, [r7, #4]
 800d3ac:	f7ff ffd4 	bl	800d358 <parse_float_number>
 800d3b0:	ed87 0a05 	vstr	s0, [r7, #20]
	deg = FLT((int)((int)ll / 100));            /* Get absolute degrees value, interested in integer part only */
 800d3b4:	edd7 7a05 	vldr	s15, [r7, #20]
 800d3b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d3bc:	ee17 1a90 	vmov	r1, s15
 800d3c0:	4b15      	ldr	r3, [pc, #84]	; (800d418 <parse_lat_long+0x78>)
 800d3c2:	fb83 2301 	smull	r2, r3, r3, r1
 800d3c6:	115a      	asrs	r2, r3, #5
 800d3c8:	17cb      	asrs	r3, r1, #31
 800d3ca:	1ad3      	subs	r3, r2, r3
 800d3cc:	ee07 3a90 	vmov	s15, r3
 800d3d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d3d4:	edc7 7a04 	vstr	s15, [r7, #16]
	min = ll - (deg * FLT(100));                /* Get remaining part from full number, minutes */
 800d3d8:	edd7 7a04 	vldr	s15, [r7, #16]
 800d3dc:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800d41c <parse_lat_long+0x7c>
 800d3e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d3e4:	ed97 7a05 	vldr	s14, [r7, #20]
 800d3e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d3ec:	edc7 7a03 	vstr	s15, [r7, #12]
	ll = deg + (min / FLT(60));               /* Calculate latitude/longitude */
 800d3f0:	ed97 7a03 	vldr	s14, [r7, #12]
 800d3f4:	eddf 6a0a 	vldr	s13, [pc, #40]	; 800d420 <parse_lat_long+0x80>
 800d3f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d3fc:	ed97 7a04 	vldr	s14, [r7, #16]
 800d400:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d404:	edc7 7a05 	vstr	s15, [r7, #20]

	return ll;
 800d408:	697b      	ldr	r3, [r7, #20]
 800d40a:	ee07 3a90 	vmov	s15, r3
}
 800d40e:	eeb0 0a67 	vmov.f32	s0, s15
 800d412:	3718      	adds	r7, #24
 800d414:	46bd      	mov	sp, r7
 800d416:	bd80      	pop	{r7, pc}
 800d418:	51eb851f 	.word	0x51eb851f
 800d41c:	42c80000 	.word	0x42c80000
 800d420:	42700000 	.word	0x42700000

0800d424 <parse_term>:
 * \brief           Parse received term
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
parse_term(gps_t* gh) {
 800d424:	b580      	push	{r7, lr}
 800d426:	b082      	sub	sp, #8
 800d428:	af00      	add	r7, sp, #0
 800d42a:	6078      	str	r0, [r7, #4]
	if (gh->p.term_num == 0) {                  /* Check string type */
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800d432:	2b00      	cmp	r3, #0
 800d434:	d169      	bne.n	800d50a <parse_term+0xe6>
		if (0) {
#if GPS_CFG_STATEMENT_GPGGA
		} else if (!strncmp(gh->p.term_str, "$GPGGA", 6) || !strncmp(gh->p.term_str, "$GNGGA", 6)) {
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	3345      	adds	r3, #69	; 0x45
 800d43a:	2206      	movs	r2, #6
 800d43c:	49c4      	ldr	r1, [pc, #784]	; (800d750 <parse_term+0x32c>)
 800d43e:	4618      	mov	r0, r3
 800d440:	f003 ffab 	bl	801139a <strncmp>
 800d444:	4603      	mov	r3, r0
 800d446:	2b00      	cmp	r3, #0
 800d448:	d009      	beq.n	800d45e <parse_term+0x3a>
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	3345      	adds	r3, #69	; 0x45
 800d44e:	2206      	movs	r2, #6
 800d450:	49c0      	ldr	r1, [pc, #768]	; (800d754 <parse_term+0x330>)
 800d452:	4618      	mov	r0, r3
 800d454:	f003 ffa1 	bl	801139a <strncmp>
 800d458:	4603      	mov	r3, r0
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d104      	bne.n	800d468 <parse_term+0x44>
			gh->p.stat = STAT_GGA;
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	2201      	movs	r2, #1
 800d462:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d466:	e04e      	b.n	800d506 <parse_term+0xe2>
#endif /* GPS_CFG_STATEMENT_GPGGA */
#if GPS_CFG_STATEMENT_GPGSA
		} else if (!strncmp(gh->p.term_str, "$GPGSA", 6) || !strncmp(gh->p.term_str, "$GNGSA", 6)) {
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	3345      	adds	r3, #69	; 0x45
 800d46c:	2206      	movs	r2, #6
 800d46e:	49ba      	ldr	r1, [pc, #744]	; (800d758 <parse_term+0x334>)
 800d470:	4618      	mov	r0, r3
 800d472:	f003 ff92 	bl	801139a <strncmp>
 800d476:	4603      	mov	r3, r0
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d009      	beq.n	800d490 <parse_term+0x6c>
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	3345      	adds	r3, #69	; 0x45
 800d480:	2206      	movs	r2, #6
 800d482:	49b6      	ldr	r1, [pc, #728]	; (800d75c <parse_term+0x338>)
 800d484:	4618      	mov	r0, r3
 800d486:	f003 ff88 	bl	801139a <strncmp>
 800d48a:	4603      	mov	r3, r0
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d104      	bne.n	800d49a <parse_term+0x76>
			gh->p.stat = STAT_GSA;
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	2202      	movs	r2, #2
 800d494:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d498:	e035      	b.n	800d506 <parse_term+0xe2>
#endif /* GPS_CFG_STATEMENT_GPGSA */
#if GPS_CFG_STATEMENT_GPGSV
		} else if (!strncmp(gh->p.term_str, "$GPGSV", 6) || !strncmp(gh->p.term_str, "$GNGSV", 6)) {
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	3345      	adds	r3, #69	; 0x45
 800d49e:	2206      	movs	r2, #6
 800d4a0:	49af      	ldr	r1, [pc, #700]	; (800d760 <parse_term+0x33c>)
 800d4a2:	4618      	mov	r0, r3
 800d4a4:	f003 ff79 	bl	801139a <strncmp>
 800d4a8:	4603      	mov	r3, r0
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d009      	beq.n	800d4c2 <parse_term+0x9e>
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	3345      	adds	r3, #69	; 0x45
 800d4b2:	2206      	movs	r2, #6
 800d4b4:	49ab      	ldr	r1, [pc, #684]	; (800d764 <parse_term+0x340>)
 800d4b6:	4618      	mov	r0, r3
 800d4b8:	f003 ff6f 	bl	801139a <strncmp>
 800d4bc:	4603      	mov	r3, r0
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d104      	bne.n	800d4cc <parse_term+0xa8>
			gh->p.stat = STAT_GSV;
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	2203      	movs	r2, #3
 800d4c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d4ca:	e01c      	b.n	800d506 <parse_term+0xe2>
#endif /* GPS_CFG_STATEMENT_GPGSV */
#if GPS_CFG_STATEMENT_GPRMC
		} else if (!strncmp(gh->p.term_str, "$GPRMC", 6) || !strncmp(gh->p.term_str, "$GNRMC", 6)) {
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	3345      	adds	r3, #69	; 0x45
 800d4d0:	2206      	movs	r2, #6
 800d4d2:	49a5      	ldr	r1, [pc, #660]	; (800d768 <parse_term+0x344>)
 800d4d4:	4618      	mov	r0, r3
 800d4d6:	f003 ff60 	bl	801139a <strncmp>
 800d4da:	4603      	mov	r3, r0
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d009      	beq.n	800d4f4 <parse_term+0xd0>
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	3345      	adds	r3, #69	; 0x45
 800d4e4:	2206      	movs	r2, #6
 800d4e6:	49a1      	ldr	r1, [pc, #644]	; (800d76c <parse_term+0x348>)
 800d4e8:	4618      	mov	r0, r3
 800d4ea:	f003 ff56 	bl	801139a <strncmp>
 800d4ee:	4603      	mov	r3, r0
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d104      	bne.n	800d4fe <parse_term+0xda>
			gh->p.stat = STAT_RMC;
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	2204      	movs	r2, #4
 800d4f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d4fc:	e003      	b.n	800d506 <parse_term+0xe2>
#endif /* GPS_CFG_STATEMENT_GPRMC */
		} else {
			gh->p.stat = STAT_UNKNOWN;          /* Invalid statement for library */
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	2200      	movs	r2, #0
 800d502:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		}
		return 1;
 800d506:	2301      	movs	r3, #1
 800d508:	e21d      	b.n	800d946 <parse_term+0x522>
	}

	/* Start parsing terms */
	if (gh->p.stat == STAT_UNKNOWN) {
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d510:	2b00      	cmp	r3, #0
 800d512:	f000 8217 	beq.w	800d944 <parse_term+0x520>
#if GPS_CFG_STATEMENT_GPGGA
	} else if (gh->p.stat == STAT_GGA) {        /* Process GPGGA statement */
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d51c:	2b01      	cmp	r3, #1
 800d51e:	f040 80c0 	bne.w	800d6a2 <parse_term+0x27e>
		switch (gh->p.term_num) {
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800d528:	3b01      	subs	r3, #1
 800d52a:	2b0a      	cmp	r3, #10
 800d52c:	f200 81fd 	bhi.w	800d92a <parse_term+0x506>
 800d530:	a201      	add	r2, pc, #4	; (adr r2, 800d538 <parse_term+0x114>)
 800d532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d536:	bf00      	nop
 800d538:	0800d565 	.word	0x0800d565
 800d53c:	0800d5df 	.word	0x0800d5df
 800d540:	0800d5f1 	.word	0x0800d5f1
 800d544:	0800d619 	.word	0x0800d619
 800d548:	0800d62b 	.word	0x0800d62b
 800d54c:	0800d653 	.word	0x0800d653
 800d550:	0800d667 	.word	0x0800d667
 800d554:	0800d92b 	.word	0x0800d92b
 800d558:	0800d67b 	.word	0x0800d67b
 800d55c:	0800d92b 	.word	0x0800d92b
 800d560:	0800d68f 	.word	0x0800d68f
		case 1:                             /* Process UTC time */
			gh->p.data.gga.hours = 10 * CTN(gh->p.term_str[0]) + CTN(gh->p.term_str[1]);
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d56a:	3b30      	subs	r3, #48	; 0x30
 800d56c:	b2db      	uxtb	r3, r3
 800d56e:	461a      	mov	r2, r3
 800d570:	0092      	lsls	r2, r2, #2
 800d572:	4413      	add	r3, r2
 800d574:	005b      	lsls	r3, r3, #1
 800d576:	b2da      	uxtb	r2, r3
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800d57e:	4413      	add	r3, r2
 800d580:	b2db      	uxtb	r3, r3
 800d582:	3b30      	subs	r3, #48	; 0x30
 800d584:	b2da      	uxtb	r2, r3
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
			gh->p.data.gga.minutes = 10 * CTN(gh->p.term_str[2]) + CTN(gh->p.term_str[3]);
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800d592:	3b30      	subs	r3, #48	; 0x30
 800d594:	b2db      	uxtb	r3, r3
 800d596:	461a      	mov	r2, r3
 800d598:	0092      	lsls	r2, r2, #2
 800d59a:	4413      	add	r3, r2
 800d59c:	005b      	lsls	r3, r3, #1
 800d59e:	b2da      	uxtb	r2, r3
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800d5a6:	4413      	add	r3, r2
 800d5a8:	b2db      	uxtb	r3, r3
 800d5aa:	3b30      	subs	r3, #48	; 0x30
 800d5ac:	b2da      	uxtb	r2, r3
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
			gh->p.data.gga.seconds = 10 * CTN(gh->p.term_str[4]) + CTN(gh->p.term_str[5]);
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800d5ba:	3b30      	subs	r3, #48	; 0x30
 800d5bc:	b2db      	uxtb	r3, r3
 800d5be:	461a      	mov	r2, r3
 800d5c0:	0092      	lsls	r2, r2, #2
 800d5c2:	4413      	add	r3, r2
 800d5c4:	005b      	lsls	r3, r3, #1
 800d5c6:	b2da      	uxtb	r2, r3
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800d5ce:	4413      	add	r3, r2
 800d5d0:	b2db      	uxtb	r3, r3
 800d5d2:	3b30      	subs	r3, #48	; 0x30
 800d5d4:	b2da      	uxtb	r2, r3
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
			break;
 800d5dc:	e1b2      	b.n	800d944 <parse_term+0x520>
		case 2:                             /* Latitude */
			gh->p.data.gga.latitude = parse_lat_long(gh);   /* Parse latitude */
 800d5de:	6878      	ldr	r0, [r7, #4]
 800d5e0:	f7ff fede 	bl	800d3a0 <parse_lat_long>
 800d5e4:	eef0 7a40 	vmov.f32	s15, s0
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
			break;
 800d5ee:	e1a9      	b.n	800d944 <parse_term+0x520>
		case 3:                             /* Latitude north/south information */
			if (gh->p.term_str[0] == 'S' || gh->p.term_str[0] == 's') {
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d5f6:	2b53      	cmp	r3, #83	; 0x53
 800d5f8:	d005      	beq.n	800d606 <parse_term+0x1e2>
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d600:	2b73      	cmp	r3, #115	; 0x73
 800d602:	f040 8194 	bne.w	800d92e <parse_term+0x50a>
				gh->p.data.gga.latitude = -gh->p.data.gga.latitude;
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800d60c:	eef1 7a67 	vneg.f32	s15, s15
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
			}
			break;
 800d616:	e18a      	b.n	800d92e <parse_term+0x50a>
		case 4:                             /* Longitude */
			gh->p.data.gga.longitude = parse_lat_long(gh);  /* Parse longitude */
 800d618:	6878      	ldr	r0, [r7, #4]
 800d61a:	f7ff fec1 	bl	800d3a0 <parse_lat_long>
 800d61e:	eef0 7a40 	vmov.f32	s15, s0
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
			break;
 800d628:	e18c      	b.n	800d944 <parse_term+0x520>
		case 5:                             /* Longitude east/west information */
			if (gh->p.term_str[0] == 'W' || gh->p.term_str[0] == 'w') {
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d630:	2b57      	cmp	r3, #87	; 0x57
 800d632:	d005      	beq.n	800d640 <parse_term+0x21c>
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d63a:	2b77      	cmp	r3, #119	; 0x77
 800d63c:	f040 8179 	bne.w	800d932 <parse_term+0x50e>
				gh->p.data.gga.longitude = -gh->p.data.gga.longitude;
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 800d646:	eef1 7a67 	vneg.f32	s15, s15
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
			}
			break;
 800d650:	e16f      	b.n	800d932 <parse_term+0x50e>
		case 6:                             /* Fix status */
			gh->p.data.gga.fix = (uint8_t)parse_number(gh, NULL);
 800d652:	2100      	movs	r1, #0
 800d654:	6878      	ldr	r0, [r7, #4]
 800d656:	f7ff fe35 	bl	800d2c4 <parse_number>
 800d65a:	4603      	mov	r3, r0
 800d65c:	b2da      	uxtb	r2, r3
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
			break;
 800d664:	e16e      	b.n	800d944 <parse_term+0x520>
		case 7:                             /* Satellites in use */
			gh->p.data.gga.sats_in_use = (uint8_t)parse_number(gh, NULL);
 800d666:	2100      	movs	r1, #0
 800d668:	6878      	ldr	r0, [r7, #4]
 800d66a:	f7ff fe2b 	bl	800d2c4 <parse_number>
 800d66e:	4603      	mov	r3, r0
 800d670:	b2da      	uxtb	r2, r3
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
			break;
 800d678:	e164      	b.n	800d944 <parse_term+0x520>
		case 9:                             /* Altitude */
			gh->p.data.gga.altitude = parse_float_number(gh, NULL);
 800d67a:	2100      	movs	r1, #0
 800d67c:	6878      	ldr	r0, [r7, #4]
 800d67e:	f7ff fe6b 	bl	800d358 <parse_float_number>
 800d682:	eef0 7a40 	vmov.f32	s15, s0
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
			break;
 800d68c:	e15a      	b.n	800d944 <parse_term+0x520>
		case 11:                            /* Altitude above ellipsoid */
			gh->p.data.gga.geo_sep = parse_float_number(gh, NULL);
 800d68e:	2100      	movs	r1, #0
 800d690:	6878      	ldr	r0, [r7, #4]
 800d692:	f7ff fe61 	bl	800d358 <parse_float_number>
 800d696:	eef0 7a40 	vmov.f32	s15, s0
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
			break;
 800d6a0:	e150      	b.n	800d944 <parse_term+0x520>
		default: break;
		}
#endif /* GPS_CFG_STATEMENT_GPGGA */
#if GPS_CFG_STATEMENT_GPGSA
	} else if (gh->p.stat == STAT_GSA) {        /* Process GPGSA statement */
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d6a8:	2b02      	cmp	r3, #2
 800d6aa:	d17e      	bne.n	800d7aa <parse_term+0x386>
		switch (gh->p.term_num) {
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800d6b2:	3b02      	subs	r3, #2
 800d6b4:	2b0f      	cmp	r3, #15
 800d6b6:	d85b      	bhi.n	800d770 <parse_term+0x34c>
 800d6b8:	a201      	add	r2, pc, #4	; (adr r2, 800d6c0 <parse_term+0x29c>)
 800d6ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6be:	bf00      	nop
 800d6c0:	0800d701 	.word	0x0800d701
 800d6c4:	0800d771 	.word	0x0800d771
 800d6c8:	0800d771 	.word	0x0800d771
 800d6cc:	0800d771 	.word	0x0800d771
 800d6d0:	0800d771 	.word	0x0800d771
 800d6d4:	0800d771 	.word	0x0800d771
 800d6d8:	0800d771 	.word	0x0800d771
 800d6dc:	0800d771 	.word	0x0800d771
 800d6e0:	0800d771 	.word	0x0800d771
 800d6e4:	0800d771 	.word	0x0800d771
 800d6e8:	0800d771 	.word	0x0800d771
 800d6ec:	0800d771 	.word	0x0800d771
 800d6f0:	0800d771 	.word	0x0800d771
 800d6f4:	0800d715 	.word	0x0800d715
 800d6f8:	0800d729 	.word	0x0800d729
 800d6fc:	0800d73d 	.word	0x0800d73d
		case 2:                             /* Process fix mode */
			gh->p.data.gsa.fix_mode = (uint8_t)parse_number(gh, NULL);
 800d700:	2100      	movs	r1, #0
 800d702:	6878      	ldr	r0, [r7, #4]
 800d704:	f7ff fdde 	bl	800d2c4 <parse_number>
 800d708:	4603      	mov	r3, r0
 800d70a:	b2da      	uxtb	r2, r3
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
			break;
 800d712:	e117      	b.n	800d944 <parse_term+0x520>
		case 15:                            /* Process PDOP */
			gh->p.data.gsa.dop_p = parse_float_number(gh, NULL);
 800d714:	2100      	movs	r1, #0
 800d716:	6878      	ldr	r0, [r7, #4]
 800d718:	f7ff fe1e 	bl	800d358 <parse_float_number>
 800d71c:	eef0 7a40 	vmov.f32	s15, s0
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
			break;
 800d726:	e10d      	b.n	800d944 <parse_term+0x520>
		case 16:                            /* Process HDOP */
			gh->p.data.gsa.dop_h = parse_float_number(gh, NULL);
 800d728:	2100      	movs	r1, #0
 800d72a:	6878      	ldr	r0, [r7, #4]
 800d72c:	f7ff fe14 	bl	800d358 <parse_float_number>
 800d730:	eef0 7a40 	vmov.f32	s15, s0
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
			break;
 800d73a:	e103      	b.n	800d944 <parse_term+0x520>
		case 17:                            /* Process VDOP */
			gh->p.data.gsa.dop_v = parse_float_number(gh, NULL);
 800d73c:	2100      	movs	r1, #0
 800d73e:	6878      	ldr	r0, [r7, #4]
 800d740:	f7ff fe0a 	bl	800d358 <parse_float_number>
 800d744:	eef0 7a40 	vmov.f32	s15, s0
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
			break;
 800d74e:	e0f9      	b.n	800d944 <parse_term+0x520>
 800d750:	08014d40 	.word	0x08014d40
 800d754:	08014d48 	.word	0x08014d48
 800d758:	08014d50 	.word	0x08014d50
 800d75c:	08014d58 	.word	0x08014d58
 800d760:	08014d60 	.word	0x08014d60
 800d764:	08014d68 	.word	0x08014d68
 800d768:	08014d70 	.word	0x08014d70
 800d76c:	08014d78 	.word	0x08014d78
		default:
			/* Parse satellite IDs */
			if (gh->p.term_num >= 3 && gh->p.term_num <= 14) {
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800d776:	2b02      	cmp	r3, #2
 800d778:	f240 80dd 	bls.w	800d936 <parse_term+0x512>
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800d782:	2b0e      	cmp	r3, #14
 800d784:	f200 80d7 	bhi.w	800d936 <parse_term+0x512>
				gh->p.data.gsa.satellites_ids[gh->p.term_num - 3] = (uint8_t)parse_number(gh, NULL);
 800d788:	2100      	movs	r1, #0
 800d78a:	6878      	ldr	r0, [r7, #4]
 800d78c:	f7ff fd9a 	bl	800d2c4 <parse_number>
 800d790:	4602      	mov	r2, r0
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800d798:	3b03      	subs	r3, #3
 800d79a:	b2d1      	uxtb	r1, r2
 800d79c:	687a      	ldr	r2, [r7, #4]
 800d79e:	4413      	add	r3, r2
 800d7a0:	460a      	mov	r2, r1
 800d7a2:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
			}
			break;
 800d7a6:	bf00      	nop
 800d7a8:	e0c5      	b.n	800d936 <parse_term+0x512>
		}
#endif /* GPS_CFG_STATEMENT_GPGSA */
#if GPS_CFG_STATEMENT_GPGSV
	} else if (gh->p.stat == STAT_GSV) {        /* Process GPGSV statement */
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d7b0:	2b03      	cmp	r3, #3
 800d7b2:	d11b      	bne.n	800d7ec <parse_term+0x3c8>
		switch (gh->p.term_num) {
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800d7ba:	2b02      	cmp	r3, #2
 800d7bc:	d002      	beq.n	800d7c4 <parse_term+0x3a0>
 800d7be:	2b03      	cmp	r3, #3
 800d7c0:	d00a      	beq.n	800d7d8 <parse_term+0x3b4>
					default: break;
					}
				}
			}
#endif /* GPS_CFG_STATEMENT_GPGSV_SAT_DET */
			break;
 800d7c2:	e0bf      	b.n	800d944 <parse_term+0x520>
			gh->p.data.gsv.stat_num = (uint8_t)parse_number(gh, NULL);
 800d7c4:	2100      	movs	r1, #0
 800d7c6:	6878      	ldr	r0, [r7, #4]
 800d7c8:	f7ff fd7c 	bl	800d2c4 <parse_number>
 800d7cc:	4603      	mov	r3, r0
 800d7ce:	b2da      	uxtb	r2, r3
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			break;
 800d7d6:	e0b5      	b.n	800d944 <parse_term+0x520>
			gh->p.data.gsv.sats_in_view = (uint8_t)parse_number(gh, NULL);
 800d7d8:	2100      	movs	r1, #0
 800d7da:	6878      	ldr	r0, [r7, #4]
 800d7dc:	f7ff fd72 	bl	800d2c4 <parse_number>
 800d7e0:	4603      	mov	r3, r0
 800d7e2:	b2da      	uxtb	r2, r3
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			break;
 800d7ea:	e0ab      	b.n	800d944 <parse_term+0x520>
		}
#endif /* GPS_CFG_STATEMENT_GPGSV */
#if GPS_CFG_STATEMENT_GPRMC
	} else if (gh->p.stat == STAT_RMC) {        /* Process GPRMC statement */
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d7f2:	2b04      	cmp	r3, #4
 800d7f4:	f040 80a1 	bne.w	800d93a <parse_term+0x516>
		switch (gh->p.term_num) {
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800d7fe:	3b02      	subs	r3, #2
 800d800:	2b09      	cmp	r3, #9
 800d802:	f200 809c 	bhi.w	800d93e <parse_term+0x51a>
 800d806:	a201      	add	r2, pc, #4	; (adr r2, 800d80c <parse_term+0x3e8>)
 800d808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d80c:	0800d835 	.word	0x0800d835
 800d810:	0800d93f 	.word	0x0800d93f
 800d814:	0800d93f 	.word	0x0800d93f
 800d818:	0800d93f 	.word	0x0800d93f
 800d81c:	0800d93f 	.word	0x0800d93f
 800d820:	0800d84f 	.word	0x0800d84f
 800d824:	0800d863 	.word	0x0800d863
 800d828:	0800d877 	.word	0x0800d877
 800d82c:	0800d8f1 	.word	0x0800d8f1
 800d830:	0800d905 	.word	0x0800d905
		case 2:                             /* Process valid status */
			gh->p.data.rmc.is_valid = (gh->p.term_str[0] == 'A');
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d83a:	2b41      	cmp	r3, #65	; 0x41
 800d83c:	bf0c      	ite	eq
 800d83e:	2301      	moveq	r3, #1
 800d840:	2300      	movne	r3, #0
 800d842:	b2db      	uxtb	r3, r3
 800d844:	461a      	mov	r2, r3
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			break;
 800d84c:	e07a      	b.n	800d944 <parse_term+0x520>
		case 7:                             /* Process ground speed in knots */
			gh->p.data.rmc.speed = parse_float_number(gh, NULL);
 800d84e:	2100      	movs	r1, #0
 800d850:	6878      	ldr	r0, [r7, #4]
 800d852:	f7ff fd81 	bl	800d358 <parse_float_number>
 800d856:	eef0 7a40 	vmov.f32	s15, s0
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
			break;
 800d860:	e070      	b.n	800d944 <parse_term+0x520>
		case 8:                             /* Process true ground coarse */
			gh->p.data.rmc.coarse = parse_float_number(gh, NULL);
 800d862:	2100      	movs	r1, #0
 800d864:	6878      	ldr	r0, [r7, #4]
 800d866:	f7ff fd77 	bl	800d358 <parse_float_number>
 800d86a:	eef0 7a40 	vmov.f32	s15, s0
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
			break;
 800d874:	e066      	b.n	800d944 <parse_term+0x520>
		case 9:                             /* Process date */
			gh->p.data.rmc.date = (uint8_t)(10 * CTN(gh->p.term_str[0]) + CTN(gh->p.term_str[1]));
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d87c:	3b30      	subs	r3, #48	; 0x30
 800d87e:	b2db      	uxtb	r3, r3
 800d880:	461a      	mov	r2, r3
 800d882:	0092      	lsls	r2, r2, #2
 800d884:	4413      	add	r3, r2
 800d886:	005b      	lsls	r3, r3, #1
 800d888:	b2da      	uxtb	r2, r3
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800d890:	4413      	add	r3, r2
 800d892:	b2db      	uxtb	r3, r3
 800d894:	3b30      	subs	r3, #48	; 0x30
 800d896:	b2da      	uxtb	r2, r3
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			gh->p.data.rmc.month = (uint8_t)(10 * CTN(gh->p.term_str[2]) + CTN(gh->p.term_str[3]));
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800d8a4:	3b30      	subs	r3, #48	; 0x30
 800d8a6:	b2db      	uxtb	r3, r3
 800d8a8:	461a      	mov	r2, r3
 800d8aa:	0092      	lsls	r2, r2, #2
 800d8ac:	4413      	add	r3, r2
 800d8ae:	005b      	lsls	r3, r3, #1
 800d8b0:	b2da      	uxtb	r2, r3
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800d8b8:	4413      	add	r3, r2
 800d8ba:	b2db      	uxtb	r3, r3
 800d8bc:	3b30      	subs	r3, #48	; 0x30
 800d8be:	b2da      	uxtb	r2, r3
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
			gh->p.data.rmc.year = (uint8_t)(10 * CTN(gh->p.term_str[4]) + CTN(gh->p.term_str[5]));
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800d8cc:	3b30      	subs	r3, #48	; 0x30
 800d8ce:	b2db      	uxtb	r3, r3
 800d8d0:	461a      	mov	r2, r3
 800d8d2:	0092      	lsls	r2, r2, #2
 800d8d4:	4413      	add	r3, r2
 800d8d6:	005b      	lsls	r3, r3, #1
 800d8d8:	b2da      	uxtb	r2, r3
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800d8e0:	4413      	add	r3, r2
 800d8e2:	b2db      	uxtb	r3, r3
 800d8e4:	3b30      	subs	r3, #48	; 0x30
 800d8e6:	b2da      	uxtb	r2, r3
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
			break;
 800d8ee:	e029      	b.n	800d944 <parse_term+0x520>
		case 10:                            /* Process magnetic variation */
			gh->p.data.rmc.variation = parse_float_number(gh, NULL);
 800d8f0:	2100      	movs	r1, #0
 800d8f2:	6878      	ldr	r0, [r7, #4]
 800d8f4:	f7ff fd30 	bl	800d358 <parse_float_number>
 800d8f8:	eef0 7a40 	vmov.f32	s15, s0
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
			break;
 800d902:	e01f      	b.n	800d944 <parse_term+0x520>
		case 11:                            /* Process magnetic variation east/west */
			if (gh->p.term_str[0] == 'W' || gh->p.term_str[0] == 'w') {
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d90a:	2b57      	cmp	r3, #87	; 0x57
 800d90c:	d004      	beq.n	800d918 <parse_term+0x4f4>
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d914:	2b77      	cmp	r3, #119	; 0x77
 800d916:	d114      	bne.n	800d942 <parse_term+0x51e>
				gh->p.data.rmc.variation = -gh->p.data.rmc.variation;
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 800d91e:	eef1 7a67 	vneg.f32	s15, s15
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
			}
			break;
 800d928:	e00b      	b.n	800d942 <parse_term+0x51e>
		default: break;
 800d92a:	bf00      	nop
 800d92c:	e00a      	b.n	800d944 <parse_term+0x520>
			break;
 800d92e:	bf00      	nop
 800d930:	e008      	b.n	800d944 <parse_term+0x520>
			break;
 800d932:	bf00      	nop
 800d934:	e006      	b.n	800d944 <parse_term+0x520>
			break;
 800d936:	bf00      	nop
 800d938:	e004      	b.n	800d944 <parse_term+0x520>
		default: break;
		}
#endif /* GPS_CFG_STATEMENT_GPRMC */
	}
 800d93a:	bf00      	nop
 800d93c:	e002      	b.n	800d944 <parse_term+0x520>
		default: break;
 800d93e:	bf00      	nop
 800d940:	e000      	b.n	800d944 <parse_term+0x520>
			break;
 800d942:	bf00      	nop
	return 1;
 800d944:	2301      	movs	r3, #1
}
 800d946:	4618      	mov	r0, r3
 800d948:	3708      	adds	r7, #8
 800d94a:	46bd      	mov	sp, r7
 800d94c:	bd80      	pop	{r7, pc}
 800d94e:	bf00      	nop

0800d950 <check_crc>:
 * \brief           Compare calculated CRC with received CRC
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
check_crc(gps_t* gh) {
 800d950:	b480      	push	{r7}
 800d952:	b085      	sub	sp, #20
 800d954:	af00      	add	r7, sp, #0
 800d956:	6078      	str	r0, [r7, #4]
	uint8_t crc;
	crc = (uint8_t)((CHTN(gh->p.term_str[0]) & 0x0F) << 0x04) | (CHTN(gh->p.term_str[1]) & 0x0F);   /* Convert received CRC from string (hex) to number */
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d95e:	2b2f      	cmp	r3, #47	; 0x2f
 800d960:	d90b      	bls.n	800d97a <check_crc+0x2a>
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d968:	2b39      	cmp	r3, #57	; 0x39
 800d96a:	d806      	bhi.n	800d97a <check_crc+0x2a>
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d972:	011b      	lsls	r3, r3, #4
 800d974:	b2db      	uxtb	r3, r3
 800d976:	b25a      	sxtb	r2, r3
 800d978:	e026      	b.n	800d9c8 <check_crc+0x78>
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d980:	2b60      	cmp	r3, #96	; 0x60
 800d982:	d90d      	bls.n	800d9a0 <check_crc+0x50>
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d98a:	2b7a      	cmp	r3, #122	; 0x7a
 800d98c:	d808      	bhi.n	800d9a0 <check_crc+0x50>
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d994:	3b57      	subs	r3, #87	; 0x57
 800d996:	b2db      	uxtb	r3, r3
 800d998:	011b      	lsls	r3, r3, #4
 800d99a:	b2db      	uxtb	r3, r3
 800d99c:	b25a      	sxtb	r2, r3
 800d99e:	e013      	b.n	800d9c8 <check_crc+0x78>
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d9a6:	2b40      	cmp	r3, #64	; 0x40
 800d9a8:	d90d      	bls.n	800d9c6 <check_crc+0x76>
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d9b0:	2b5a      	cmp	r3, #90	; 0x5a
 800d9b2:	d808      	bhi.n	800d9c6 <check_crc+0x76>
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d9ba:	3b37      	subs	r3, #55	; 0x37
 800d9bc:	b2db      	uxtb	r3, r3
 800d9be:	011b      	lsls	r3, r3, #4
 800d9c0:	b2db      	uxtb	r3, r3
 800d9c2:	b25a      	sxtb	r2, r3
 800d9c4:	e000      	b.n	800d9c8 <check_crc+0x78>
 800d9c6:	2200      	movs	r2, #0
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800d9ce:	2b2f      	cmp	r3, #47	; 0x2f
 800d9d0:	d90c      	bls.n	800d9ec <check_crc+0x9c>
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800d9d8:	2b39      	cmp	r3, #57	; 0x39
 800d9da:	d807      	bhi.n	800d9ec <check_crc+0x9c>
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800d9e2:	b25b      	sxtb	r3, r3
 800d9e4:	f003 030f 	and.w	r3, r3, #15
 800d9e8:	b25b      	sxtb	r3, r3
 800d9ea:	e028      	b.n	800da3e <check_crc+0xee>
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800d9f2:	2b60      	cmp	r3, #96	; 0x60
 800d9f4:	d90e      	bls.n	800da14 <check_crc+0xc4>
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800d9fc:	2b7a      	cmp	r3, #122	; 0x7a
 800d9fe:	d809      	bhi.n	800da14 <check_crc+0xc4>
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800da06:	3b57      	subs	r3, #87	; 0x57
 800da08:	b2db      	uxtb	r3, r3
 800da0a:	b25b      	sxtb	r3, r3
 800da0c:	f003 030f 	and.w	r3, r3, #15
 800da10:	b25b      	sxtb	r3, r3
 800da12:	e014      	b.n	800da3e <check_crc+0xee>
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800da1a:	2b40      	cmp	r3, #64	; 0x40
 800da1c:	d90e      	bls.n	800da3c <check_crc+0xec>
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800da24:	2b5a      	cmp	r3, #90	; 0x5a
 800da26:	d809      	bhi.n	800da3c <check_crc+0xec>
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800da2e:	3b37      	subs	r3, #55	; 0x37
 800da30:	b2db      	uxtb	r3, r3
 800da32:	b25b      	sxtb	r3, r3
 800da34:	f003 030f 	and.w	r3, r3, #15
 800da38:	b25b      	sxtb	r3, r3
 800da3a:	e000      	b.n	800da3e <check_crc+0xee>
 800da3c:	2300      	movs	r3, #0
 800da3e:	4313      	orrs	r3, r2
 800da40:	b25b      	sxtb	r3, r3
 800da42:	73fb      	strb	r3, [r7, #15]
	return gh->p.crc_calc == crc;               /* They must match! */
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800da4a:	7bfa      	ldrb	r2, [r7, #15]
 800da4c:	429a      	cmp	r2, r3
 800da4e:	bf0c      	ite	eq
 800da50:	2301      	moveq	r3, #1
 800da52:	2300      	movne	r3, #0
 800da54:	b2db      	uxtb	r3, r3
}
 800da56:	4618      	mov	r0, r3
 800da58:	3714      	adds	r7, #20
 800da5a:	46bd      	mov	sp, r7
 800da5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da60:	4770      	bx	lr

0800da62 <copy_from_tmp_memory>:
 * \brief           Copy temporary memory to user memory
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
copy_from_tmp_memory(gps_t* gh) {
 800da62:	b580      	push	{r7, lr}
 800da64:	b082      	sub	sp, #8
 800da66:	af00      	add	r7, sp, #0
 800da68:	6078      	str	r0, [r7, #4]
	if (0) {
#if GPS_CFG_STATEMENT_GPGGA
	} else if (gh->p.stat == STAT_GGA) {
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800da70:	2b01      	cmp	r3, #1
 800da72:	d129      	bne.n	800dac8 <copy_from_tmp_memory+0x66>
		gh->latitude = gh->p.data.gga.latitude;
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	601a      	str	r2, [r3, #0]
		gh->longitude = gh->p.data.gga.longitude;
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	605a      	str	r2, [r3, #4]
		gh->altitude = gh->p.data.gga.altitude;
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	609a      	str	r2, [r3, #8]
		gh->geo_sep = gh->p.data.gga.geo_sep;
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	60da      	str	r2, [r3, #12]
		gh->sats_in_use = gh->p.data.gga.sats_in_use;
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	741a      	strb	r2, [r3, #16]
		gh->fix = gh->p.data.gga.fix;
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	f893 2069 	ldrb.w	r2, [r3, #105]	; 0x69
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	745a      	strb	r2, [r3, #17]
		gh->hours = gh->p.data.gga.hours;
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	f893 206a 	ldrb.w	r2, [r3, #106]	; 0x6a
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	749a      	strb	r2, [r3, #18]
		gh->minutes = gh->p.data.gga.minutes;
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	f893 206b 	ldrb.w	r2, [r3, #107]	; 0x6b
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	74da      	strb	r2, [r3, #19]
		gh->seconds = gh->p.data.gga.seconds;
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	f893 206c 	ldrb.w	r2, [r3, #108]	; 0x6c
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	751a      	strb	r2, [r3, #20]
 800dac6:	e055      	b.n	800db74 <copy_from_tmp_memory+0x112>
#endif /* GPS_CFG_STATEMENT_GPGGA */
#if GPS_CFG_STATEMENT_GPGSA
	} else if (gh->p.stat == STAT_GSA) {
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dace:	2b02      	cmp	r3, #2
 800dad0:	d11b      	bne.n	800db0a <copy_from_tmp_memory+0xa8>
		gh->dop_h = gh->p.data.gsa.dop_h;
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	619a      	str	r2, [r3, #24]
		gh->dop_p = gh->p.data.gsa.dop_p;
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	621a      	str	r2, [r3, #32]
		gh->dop_v = gh->p.data.gsa.dop_v;
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	61da      	str	r2, [r3, #28]
		gh->fix_mode = gh->p.data.gsa.fix_mode;
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		memcpy(gh->satellites_ids, gh->p.data.gsa.satellites_ids, sizeof(gh->satellites_ids));
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	f103 0025 	add.w	r0, r3, #37	; 0x25
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	3365      	adds	r3, #101	; 0x65
 800db00:	220c      	movs	r2, #12
 800db02:	4619      	mov	r1, r3
 800db04:	f003 fc00 	bl	8011308 <memcpy>
 800db08:	e034      	b.n	800db74 <copy_from_tmp_memory+0x112>
#endif /* GPS_CFG_STATEMENT_GPGSA */
#if GPS_CFG_STATEMENT_GPGSV
	} else if (gh->p.stat == STAT_GSV) {
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800db10:	2b03      	cmp	r3, #3
 800db12:	d106      	bne.n	800db22 <copy_from_tmp_memory+0xc0>
		gh->sats_in_view = gh->p.data.gsv.sats_in_view;
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800db20:	e028      	b.n	800db74 <copy_from_tmp_memory+0x112>
#endif /* GPS_CFG_STATEMENT_GPGSV */
#if GPS_CFG_STATEMENT_GPRMC
	} else if (gh->p.stat == STAT_RMC) {
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800db28:	2b04      	cmp	r3, #4
 800db2a:	d123      	bne.n	800db74 <copy_from_tmp_memory+0x112>
		gh->coarse = gh->p.data.rmc.coarse;
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	639a      	str	r2, [r3, #56]	; 0x38
		gh->is_valid = gh->p.data.rmc.is_valid;
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
		gh->speed = gh->p.data.rmc.speed;
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	635a      	str	r2, [r3, #52]	; 0x34
		gh->variation = gh->p.data.rmc.variation;
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	63da      	str	r2, [r3, #60]	; 0x3c
		gh->date = gh->p.data.rmc.date;
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		gh->month = gh->p.data.rmc.month;
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	f893 205a 	ldrb.w	r2, [r3, #90]	; 0x5a
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
		gh->year = gh->p.data.rmc.year;
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	f893 205b 	ldrb.w	r2, [r3, #91]	; 0x5b
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
#endif /* GPS_CFG_STATEMENT_GPRMC */
	}
	return 1;
 800db74:	2301      	movs	r3, #1
}
 800db76:	4618      	mov	r0, r3
 800db78:	3708      	adds	r7, #8
 800db7a:	46bd      	mov	sp, r7
 800db7c:	bd80      	pop	{r7, pc}

0800db7e <gps_init>:
 * \brief           Init GPS handle
 * \param[in]       gh: GPS handle structure
 * \return          `1` on success, `0` otherwise
 */
uint8_t
gps_init(gps_t* gh) {
 800db7e:	b580      	push	{r7, lr}
 800db80:	b082      	sub	sp, #8
 800db82:	af00      	add	r7, sp, #0
 800db84:	6078      	str	r0, [r7, #4]
	memset(gh, 0x00, sizeof(*gh));              /* Reset structure */
 800db86:	2274      	movs	r2, #116	; 0x74
 800db88:	2100      	movs	r1, #0
 800db8a:	6878      	ldr	r0, [r7, #4]
 800db8c:	f003 fbc7 	bl	801131e <memset>
	return 1;
 800db90:	2301      	movs	r3, #1
}
 800db92:	4618      	mov	r0, r3
 800db94:	3708      	adds	r7, #8
 800db96:	46bd      	mov	sp, r7
 800db98:	bd80      	pop	{r7, pc}

0800db9a <gps_process>:
 * \param[in]       data: Received data
 * \param[in]       len: Number of bytes to process
 * \return          `1` on success, `0` otherwise
 */
uint8_t
gps_process(gps_t* gh, const void* data, size_t len) {
 800db9a:	b580      	push	{r7, lr}
 800db9c:	b086      	sub	sp, #24
 800db9e:	af00      	add	r7, sp, #0
 800dba0:	60f8      	str	r0, [r7, #12]
 800dba2:	60b9      	str	r1, [r7, #8]
 800dba4:	607a      	str	r2, [r7, #4]
	const uint8_t* d = data;
 800dba6:	68bb      	ldr	r3, [r7, #8]
 800dba8:	617b      	str	r3, [r7, #20]

	while (len--) {                             /* Process all bytes */
 800dbaa:	e0a4      	b.n	800dcf6 <gps_process+0x15c>
		if (*d == '$') {                        /* Check for beginning of NMEA line */
 800dbac:	697b      	ldr	r3, [r7, #20]
 800dbae:	781b      	ldrb	r3, [r3, #0]
 800dbb0:	2b24      	cmp	r3, #36	; 0x24
 800dbb2:	d125      	bne.n	800dc00 <gps_process+0x66>
			memset(&gh->p, 0x00, sizeof(gh->p));/* Reset private memory */
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	3344      	adds	r3, #68	; 0x44
 800dbb8:	2230      	movs	r2, #48	; 0x30
 800dbba:	2100      	movs	r1, #0
 800dbbc:	4618      	mov	r0, r3
 800dbbe:	f003 fbae 	bl	801131e <memset>
			TERM_ADD(gh, *d);                   /* Add character to term */
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800dbc8:	2b0b      	cmp	r3, #11
 800dbca:	f200 8091 	bhi.w	800dcf0 <gps_process+0x156>
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800dbd4:	1c5a      	adds	r2, r3, #1
 800dbd6:	b2d1      	uxtb	r1, r2
 800dbd8:	68fa      	ldr	r2, [r7, #12]
 800dbda:	f882 1052 	strb.w	r1, [r2, #82]	; 0x52
 800dbde:	4619      	mov	r1, r3
 800dbe0:	697b      	ldr	r3, [r7, #20]
 800dbe2:	781a      	ldrb	r2, [r3, #0]
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	440b      	add	r3, r1
 800dbe8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800dbf2:	461a      	mov	r2, r3
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	4413      	add	r3, r2
 800dbf8:	2200      	movs	r2, #0
 800dbfa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dbfe:	e077      	b.n	800dcf0 <gps_process+0x156>
		} else if (*d == ',') {                 /* Term separator character */
 800dc00:	697b      	ldr	r3, [r7, #20]
 800dc02:	781b      	ldrb	r3, [r3, #0]
 800dc04:	2b2c      	cmp	r3, #44	; 0x2c
 800dc06:	d11d      	bne.n	800dc44 <gps_process+0xaa>
			parse_term(gh);                     /* Parse term we have currently in memory */
 800dc08:	68f8      	ldr	r0, [r7, #12]
 800dc0a:	f7ff fc0b 	bl	800d424 <parse_term>
			CRC_ADD(gh, *d);                    /* Add character to CRC computation */
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 800dc14:	697b      	ldr	r3, [r7, #20]
 800dc16:	781b      	ldrb	r3, [r3, #0]
 800dc18:	4053      	eors	r3, r2
 800dc1a:	b2da      	uxtb	r2, r3
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			TERM_NEXT(gh);                      /* Start with next term */
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	2200      	movs	r2, #0
 800dc26:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	2200      	movs	r2, #0
 800dc2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800dc38:	3301      	adds	r3, #1
 800dc3a:	b2da      	uxtb	r2, r3
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 800dc42:	e055      	b.n	800dcf0 <gps_process+0x156>
		} else if (*d == '*') {                 /* Start indicates end of data for CRC computation */
 800dc44:	697b      	ldr	r3, [r7, #20]
 800dc46:	781b      	ldrb	r3, [r3, #0]
 800dc48:	2b2a      	cmp	r3, #42	; 0x2a
 800dc4a:	d117      	bne.n	800dc7c <gps_process+0xe2>
			parse_term(gh);                     /* Parse term we have currently in memory */
 800dc4c:	68f8      	ldr	r0, [r7, #12]
 800dc4e:	f7ff fbe9 	bl	800d424 <parse_term>
			gh->p.star = 1;                     /* STAR detected */
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	2201      	movs	r2, #1
 800dc56:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			TERM_NEXT(gh);                      /* Start with next term */
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	2200      	movs	r2, #0
 800dc5e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	2200      	movs	r2, #0
 800dc66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800dc70:	3301      	adds	r3, #1
 800dc72:	b2da      	uxtb	r2, r3
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 800dc7a:	e039      	b.n	800dcf0 <gps_process+0x156>
		} else if (*d == '\r') {
 800dc7c:	697b      	ldr	r3, [r7, #20]
 800dc7e:	781b      	ldrb	r3, [r3, #0]
 800dc80:	2b0d      	cmp	r3, #13
 800dc82:	d109      	bne.n	800dc98 <gps_process+0xfe>
			if (check_crc(gh)) {                /* Check for CRC result */
 800dc84:	68f8      	ldr	r0, [r7, #12]
 800dc86:	f7ff fe63 	bl	800d950 <check_crc>
 800dc8a:	4603      	mov	r3, r0
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d02f      	beq.n	800dcf0 <gps_process+0x156>
				/* CRC is OK, in theory we can copy data from statements to user data */
				copy_from_tmp_memory(gh);       /* Copy memory from temporary to user memory */
 800dc90:	68f8      	ldr	r0, [r7, #12]
 800dc92:	f7ff fee6 	bl	800da62 <copy_from_tmp_memory>
 800dc96:	e02b      	b.n	800dcf0 <gps_process+0x156>
			}
		} else {
			if (!gh->p.star) {                  /* Add to CRC only if star not yet detected */
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d109      	bne.n	800dcb6 <gps_process+0x11c>
				CRC_ADD(gh, *d);                /* Add to CRC */
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 800dca8:	697b      	ldr	r3, [r7, #20]
 800dcaa:	781b      	ldrb	r3, [r3, #0]
 800dcac:	4053      	eors	r3, r2
 800dcae:	b2da      	uxtb	r2, r3
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			TERM_ADD(gh, *d);                   /* Add character to term */
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800dcbc:	2b0b      	cmp	r3, #11
 800dcbe:	d817      	bhi.n	800dcf0 <gps_process+0x156>
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800dcc6:	1c5a      	adds	r2, r3, #1
 800dcc8:	b2d1      	uxtb	r1, r2
 800dcca:	68fa      	ldr	r2, [r7, #12]
 800dccc:	f882 1052 	strb.w	r1, [r2, #82]	; 0x52
 800dcd0:	4619      	mov	r1, r3
 800dcd2:	697b      	ldr	r3, [r7, #20]
 800dcd4:	781a      	ldrb	r2, [r3, #0]
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	440b      	add	r3, r1
 800dcda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800dce4:	461a      	mov	r2, r3
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	4413      	add	r3, r2
 800dcea:	2200      	movs	r2, #0
 800dcec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
		}
		d++;                                    /* Process next character */
 800dcf0:	697b      	ldr	r3, [r7, #20]
 800dcf2:	3301      	adds	r3, #1
 800dcf4:	617b      	str	r3, [r7, #20]
	while (len--) {                             /* Process all bytes */
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	1e5a      	subs	r2, r3, #1
 800dcfa:	607a      	str	r2, [r7, #4]
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	f47f af55 	bne.w	800dbac <gps_process+0x12>
	}
	return 1;
 800dd02:	2301      	movs	r3, #1
}
 800dd04:	4618      	mov	r0, r3
 800dd06:	3718      	adds	r7, #24
 800dd08:	46bd      	mov	sp, r7
 800dd0a:	bd80      	pop	{r7, pc}

0800dd0c <gps_to_speed>:
 * \param[in]       sik: Speed in knots, received from GPS NMEA statement
 * \param[in]       ts: Target speed to convert to from knots
 * \return          Speed calculated from knots
 */
gps_float_t
gps_to_speed(gps_float_t sik, gps_speed_t ts) {
 800dd0c:	b480      	push	{r7}
 800dd0e:	b083      	sub	sp, #12
 800dd10:	af00      	add	r7, sp, #0
 800dd12:	ed87 0a01 	vstr	s0, [r7, #4]
 800dd16:	4603      	mov	r3, r0
 800dd18:	70fb      	strb	r3, [r7, #3]
	switch (ts) {
 800dd1a:	78fb      	ldrb	r3, [r7, #3]
 800dd1c:	2b0e      	cmp	r3, #14
 800dd1e:	f200 8086 	bhi.w	800de2e <gps_to_speed+0x122>
 800dd22:	a201      	add	r2, pc, #4	; (adr r2, 800dd28 <gps_to_speed+0x1c>)
 800dd24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd28:	0800dd65 	.word	0x0800dd65
 800dd2c:	0800dd73 	.word	0x0800dd73
 800dd30:	0800dd81 	.word	0x0800dd81
 800dd34:	0800dd8f 	.word	0x0800dd8f
 800dd38:	0800dd9d 	.word	0x0800dd9d
 800dd3c:	0800ddab 	.word	0x0800ddab
 800dd40:	0800ddb9 	.word	0x0800ddb9
 800dd44:	0800ddc7 	.word	0x0800ddc7
 800dd48:	0800ddd5 	.word	0x0800ddd5
 800dd4c:	0800dde3 	.word	0x0800dde3
 800dd50:	0800ddf1 	.word	0x0800ddf1
 800dd54:	0800ddff 	.word	0x0800ddff
 800dd58:	0800de0d 	.word	0x0800de0d
 800dd5c:	0800de1b 	.word	0x0800de1b
 800dd60:	0800de29 	.word	0x0800de29
	case gps_speed_kps:     return FLT(sik * FLT(0.000514));
 800dd64:	edd7 7a01 	vldr	s15, [r7, #4]
 800dd68:	ed9f 7a35 	vldr	s14, [pc, #212]	; 800de40 <gps_to_speed+0x134>
 800dd6c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dd70:	e05f      	b.n	800de32 <gps_to_speed+0x126>
	case gps_speed_kph:     return FLT(sik * FLT(1.852));
 800dd72:	edd7 7a01 	vldr	s15, [r7, #4]
 800dd76:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800de44 <gps_to_speed+0x138>
 800dd7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dd7e:	e058      	b.n	800de32 <gps_to_speed+0x126>
	case gps_speed_mps:     return FLT(sik * FLT(0.5144));
 800dd80:	edd7 7a01 	vldr	s15, [r7, #4]
 800dd84:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800de48 <gps_to_speed+0x13c>
 800dd88:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dd8c:	e051      	b.n	800de32 <gps_to_speed+0x126>
	case gps_speed_mpm:     return FLT(sik * FLT(30.87));
 800dd8e:	edd7 7a01 	vldr	s15, [r7, #4]
 800dd92:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 800de4c <gps_to_speed+0x140>
 800dd96:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dd9a:	e04a      	b.n	800de32 <gps_to_speed+0x126>

	case gps_speed_mips:    return FLT(sik * FLT(0.0003197));
 800dd9c:	edd7 7a01 	vldr	s15, [r7, #4]
 800dda0:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 800de50 <gps_to_speed+0x144>
 800dda4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dda8:	e043      	b.n	800de32 <gps_to_speed+0x126>
	case gps_speed_mph:     return FLT(sik * FLT(1.151));
 800ddaa:	edd7 7a01 	vldr	s15, [r7, #4]
 800ddae:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800de54 <gps_to_speed+0x148>
 800ddb2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ddb6:	e03c      	b.n	800de32 <gps_to_speed+0x126>
	case gps_speed_fps:     return FLT(sik * FLT(1.688));
 800ddb8:	edd7 7a01 	vldr	s15, [r7, #4]
 800ddbc:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800de58 <gps_to_speed+0x14c>
 800ddc0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ddc4:	e035      	b.n	800de32 <gps_to_speed+0x126>
	case gps_speed_fpm:     return FLT(sik * FLT(101.3));
 800ddc6:	edd7 7a01 	vldr	s15, [r7, #4]
 800ddca:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800de5c <gps_to_speed+0x150>
 800ddce:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ddd2:	e02e      	b.n	800de32 <gps_to_speed+0x126>

	case gps_speed_mpk:     return FLT(sik * FLT(32.4));
 800ddd4:	edd7 7a01 	vldr	s15, [r7, #4]
 800ddd8:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800de60 <gps_to_speed+0x154>
 800dddc:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dde0:	e027      	b.n	800de32 <gps_to_speed+0x126>
	case gps_speed_spk:     return FLT(sik * FLT(1944.0));
 800dde2:	edd7 7a01 	vldr	s15, [r7, #4]
 800dde6:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800de64 <gps_to_speed+0x158>
 800ddea:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ddee:	e020      	b.n	800de32 <gps_to_speed+0x126>
	case gps_speed_sp100m:  return FLT(sik * FLT(194.4));
 800ddf0:	edd7 7a01 	vldr	s15, [r7, #4]
 800ddf4:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800de68 <gps_to_speed+0x15c>
 800ddf8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ddfc:	e019      	b.n	800de32 <gps_to_speed+0x126>
	case gps_speed_mipm:    return FLT(sik * FLT(52.14));
 800ddfe:	edd7 7a01 	vldr	s15, [r7, #4]
 800de02:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800de6c <gps_to_speed+0x160>
 800de06:	ee67 7a87 	vmul.f32	s15, s15, s14
 800de0a:	e012      	b.n	800de32 <gps_to_speed+0x126>
	case gps_speed_spm:     return FLT(sik * FLT(3128.0));
 800de0c:	edd7 7a01 	vldr	s15, [r7, #4]
 800de10:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800de70 <gps_to_speed+0x164>
 800de14:	ee67 7a87 	vmul.f32	s15, s15, s14
 800de18:	e00b      	b.n	800de32 <gps_to_speed+0x126>
	case gps_speed_sp100y:  return FLT(sik * FLT(177.7));
 800de1a:	edd7 7a01 	vldr	s15, [r7, #4]
 800de1e:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800de74 <gps_to_speed+0x168>
 800de22:	ee67 7a87 	vmul.f32	s15, s15, s14
 800de26:	e004      	b.n	800de32 <gps_to_speed+0x126>

	case gps_speed_smph:    return FLT(sik * FLT(1.0));
 800de28:	edd7 7a01 	vldr	s15, [r7, #4]
 800de2c:	e001      	b.n	800de32 <gps_to_speed+0x126>
	default: return 0;
 800de2e:	eddf 7a12 	vldr	s15, [pc, #72]	; 800de78 <gps_to_speed+0x16c>
	}
}
 800de32:	eeb0 0a67 	vmov.f32	s0, s15
 800de36:	370c      	adds	r7, #12
 800de38:	46bd      	mov	sp, r7
 800de3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de3e:	4770      	bx	lr
 800de40:	3a06bdf5 	.word	0x3a06bdf5
 800de44:	3fed0e56 	.word	0x3fed0e56
 800de48:	3f03afb8 	.word	0x3f03afb8
 800de4c:	41f6f5c3 	.word	0x41f6f5c3
 800de50:	39a79d68 	.word	0x39a79d68
 800de54:	3f9353f8 	.word	0x3f9353f8
 800de58:	3fd81062 	.word	0x3fd81062
 800de5c:	42ca999a 	.word	0x42ca999a
 800de60:	4201999a 	.word	0x4201999a
 800de64:	44f30000 	.word	0x44f30000
 800de68:	43426666 	.word	0x43426666
 800de6c:	42508f5c 	.word	0x42508f5c
 800de70:	45438000 	.word	0x45438000
 800de74:	4331b333 	.word	0x4331b333
 800de78:	00000000 	.word	0x00000000

0800de7c <Ublox_Init>:
char 		PAYLOAD[SIMCOM_POS_HEADER_LENGTH+SIMCOM_POS_DATA_LENGTH];
//simcom struct
sim_t 	sim;

/* USER CODE END PV */
void Ublox_Init(gps_t *hgps){
 800de7c:	b580      	push	{r7, lr}
 800de7e:	b082      	sub	sp, #8
 800de80:	af00      	add	r7, sp, #0
 800de82:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(UBLOX_PWR_GPIO_Port, UBLOX_PWR_Pin, GPIO_PIN_SET);
 800de84:	2201      	movs	r2, #1
 800de86:	2102      	movs	r1, #2
 800de88:	4806      	ldr	r0, [pc, #24]	; (800dea4 <Ublox_Init+0x28>)
 800de8a:	f7f4 fc35 	bl	80026f8 <HAL_GPIO_WritePin>
	osDelay(50);
 800de8e:	2032      	movs	r0, #50	; 0x32
 800de90:	f7f9 f9ad 	bl	80071ee <osDelay>
	gps_init(hgps);
 800de94:	6878      	ldr	r0, [r7, #4]
 800de96:	f7ff fe72 	bl	800db7e <gps_init>
}
 800de9a:	bf00      	nop
 800de9c:	3708      	adds	r7, #8
 800de9e:	46bd      	mov	sp, r7
 800dea0:	bd80      	pop	{r7, pc}
 800dea2:	bf00      	nop
 800dea4:	40020800 	.word	0x40020800

0800dea8 <Simcom_On>:

static void Simcom_On(void){
 800dea8:	b580      	push	{r7, lr}
 800deaa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SIMCOM_PWR_GPIO_Port, SIMCOM_PWR_Pin, GPIO_PIN_RESET);
 800deac:	2200      	movs	r2, #0
 800deae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800deb2:	4808      	ldr	r0, [pc, #32]	; (800ded4 <Simcom_On+0x2c>)
 800deb4:	f7f4 fc20 	bl	80026f8 <HAL_GPIO_WritePin>
	osDelay(70);
 800deb8:	2046      	movs	r0, #70	; 0x46
 800deba:	f7f9 f998 	bl	80071ee <osDelay>
	HAL_GPIO_WritePin(SIMCOM_PWR_GPIO_Port, SIMCOM_PWR_Pin, GPIO_PIN_SET);
 800debe:	2201      	movs	r2, #1
 800dec0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800dec4:	4803      	ldr	r0, [pc, #12]	; (800ded4 <Simcom_On+0x2c>)
 800dec6:	f7f4 fc17 	bl	80026f8 <HAL_GPIO_WritePin>
	osDelay(50);
 800deca:	2032      	movs	r0, #50	; 0x32
 800decc:	f7f9 f98f 	bl	80071ee <osDelay>
}
 800ded0:	bf00      	nop
 800ded2:	bd80      	pop	{r7, pc}
 800ded4:	40020c00 	.word	0x40020c00

0800ded8 <Simcom_Reset>:

static void Simcom_Reset(void){
 800ded8:	b580      	push	{r7, lr}
 800deda:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SIMCOM_RST_GPIO_Port, SIMCOM_RST_Pin, GPIO_PIN_RESET);
 800dedc:	2200      	movs	r2, #0
 800dede:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800dee2:	4808      	ldr	r0, [pc, #32]	; (800df04 <Simcom_Reset+0x2c>)
 800dee4:	f7f4 fc08 	bl	80026f8 <HAL_GPIO_WritePin>
	osDelay(10);
 800dee8:	200a      	movs	r0, #10
 800deea:	f7f9 f980 	bl	80071ee <osDelay>
	HAL_GPIO_WritePin(SIMCOM_RST_GPIO_Port, SIMCOM_RST_Pin, GPIO_PIN_SET);
 800deee:	2201      	movs	r2, #1
 800def0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800def4:	4803      	ldr	r0, [pc, #12]	; (800df04 <Simcom_Reset+0x2c>)
 800def6:	f7f4 fbff 	bl	80026f8 <HAL_GPIO_WritePin>
	osDelay(50);
 800defa:	2032      	movs	r0, #50	; 0x32
 800defc:	f7f9 f977 	bl	80071ee <osDelay>
}
 800df00:	bf00      	nop
 800df02:	bd80      	pop	{r7, pc}
 800df04:	40020400 	.word	0x40020400

0800df08 <Simcom_Boot>:

static uint8_t Simcom_Boot(void){
 800df08:	b590      	push	{r4, r7, lr}
 800df0a:	b085      	sub	sp, #20
 800df0c:	af00      	add	r7, sp, #0
	uint32_t tick;
	uint64_t timeout_tick;

	// reset the state of simcom module
	Simcom_Reset();
 800df0e:	f7ff ffe3 	bl	800ded8 <Simcom_Reset>
	// turn off sequence
	Simcom_On();
 800df12:	f7ff ffc9 	bl	800dea8 <Simcom_On>
	// set timeout guard (for first boot always 20 second)
	timeout_tick = osKernelSysTickMicroSec(20*1000*1000);
 800df16:	f644 6320 	movw	r3, #20000	; 0x4e20
 800df1a:	f04f 0400 	mov.w	r4, #0
 800df1e:	e9c7 3402 	strd	r3, r4, [r7, #8]
	tick = osKernelSysTick();
 800df22:	f7f9 f908 	bl	8007136 <osKernelSysTick>
 800df26:	6078      	str	r0, [r7, #4]
	// wait until booting is done
	while ( !(Simcom_Response(SIMCOM_STATUS_READY) || (osKernelSysTick() - tick) > timeout_tick) );
 800df28:	bf00      	nop
 800df2a:	4814      	ldr	r0, [pc, #80]	; (800df7c <Simcom_Boot+0x74>)
 800df2c:	f000 f828 	bl	800df80 <Simcom_Response>
 800df30:	4603      	mov	r3, r0
 800df32:	2b00      	cmp	r3, #0
 800df34:	d10c      	bne.n	800df50 <Simcom_Boot+0x48>
 800df36:	f7f9 f8fe 	bl	8007136 <osKernelSysTick>
 800df3a:	4602      	mov	r2, r0
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	1ad3      	subs	r3, r2, r3
 800df40:	f04f 0400 	mov.w	r4, #0
 800df44:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800df48:	42a2      	cmp	r2, r4
 800df4a:	bf08      	it	eq
 800df4c:	4299      	cmpeq	r1, r3
 800df4e:	d2ec      	bcs.n	800df2a <Simcom_Boot+0x22>
	// handle timeout
	return (uint8_t) ((osKernelSysTick() - tick) < timeout_tick);
 800df50:	f7f9 f8f1 	bl	8007136 <osKernelSysTick>
 800df54:	4602      	mov	r2, r0
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	1ad3      	subs	r3, r2, r3
 800df5a:	4619      	mov	r1, r3
 800df5c:	f04f 0200 	mov.w	r2, #0
 800df60:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800df64:	42a2      	cmp	r2, r4
 800df66:	bf08      	it	eq
 800df68:	4299      	cmpeq	r1, r3
 800df6a:	bf34      	ite	cc
 800df6c:	2301      	movcc	r3, #1
 800df6e:	2300      	movcs	r3, #0
 800df70:	b2db      	uxtb	r3, r3
}
 800df72:	4618      	mov	r0, r3
 800df74:	3714      	adds	r7, #20
 800df76:	46bd      	mov	sp, r7
 800df78:	bd90      	pop	{r4, r7, pc}
 800df7a:	bf00      	nop
 800df7c:	08014d80 	.word	0x08014d80

0800df80 <Simcom_Response>:

static uint8_t Simcom_Response(char *str)
{
 800df80:	b580      	push	{r7, lr}
 800df82:	b082      	sub	sp, #8
 800df84:	af00      	add	r7, sp, #0
 800df86:	6078      	str	r0, [r7, #4]
	if (strstr(SIMCOM_UART_RX_Buffer, str) != NULL)
 800df88:	6879      	ldr	r1, [r7, #4]
 800df8a:	4806      	ldr	r0, [pc, #24]	; (800dfa4 <Simcom_Response+0x24>)
 800df8c:	f003 fa2c 	bl	80113e8 <strstr>
 800df90:	4603      	mov	r3, r0
 800df92:	2b00      	cmp	r3, #0
 800df94:	d001      	beq.n	800df9a <Simcom_Response+0x1a>
	{
		return 1;
 800df96:	2301      	movs	r3, #1
 800df98:	e000      	b.n	800df9c <Simcom_Response+0x1c>
	}
	return 0;
 800df9a:	2300      	movs	r3, #0
}
 800df9c:	4618      	mov	r0, r3
 800df9e:	3708      	adds	r7, #8
 800dfa0:	46bd      	mov	sp, r7
 800dfa2:	bd80      	pop	{r7, pc}
 800dfa4:	20006900 	.word	0x20006900

0800dfa8 <Simcom_Send>:

static uint8_t Simcom_Send(char *cmd, uint32_t ms)
{
 800dfa8:	b580      	push	{r7, lr}
 800dfaa:	b086      	sub	sp, #24
 800dfac:	af00      	add	r7, sp, #0
 800dfae:	6078      	str	r0, [r7, #4]
 800dfb0:	6039      	str	r1, [r7, #0]
	osRecursiveMutexWait(SimcomRecMutexHandle, osWaitForever);
 800dfb2:	4b43      	ldr	r3, [pc, #268]	; (800e0c0 <Simcom_Send+0x118>)
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	f04f 31ff 	mov.w	r1, #4294967295
 800dfba:	4618      	mov	r0, r3
 800dfbc:	f7f9 fc37 	bl	800782e <osRecursiveMutexWait>

	uint8_t ret;
	uint32_t tick, timeout_tick;
	// reset rx buffer
	SIMCOM_Reset_Buffer();
 800dfc0:	f7fc ffd8 	bl	800af74 <SIMCOM_Reset_Buffer>
	// transmit to serial
	SIMCOM_Transmit(cmd, strlen(cmd));
 800dfc4:	6878      	ldr	r0, [r7, #4]
 800dfc6:	f7f2 f90d 	bl	80001e4 <strlen>
 800dfca:	4603      	mov	r3, r0
 800dfcc:	b29b      	uxth	r3, r3
 800dfce:	4619      	mov	r1, r3
 800dfd0:	6878      	ldr	r0, [r7, #4]
 800dfd2:	f7fc ffe3 	bl	800af9c <SIMCOM_Transmit>
	// convert time to tick
	timeout_tick = osKernelSysTickMicroSec(SIMCOM_CMD_TIMEOUT*1000*1000);
 800dfd6:	f241 3388 	movw	r3, #5000	; 0x1388
 800dfda:	613b      	str	r3, [r7, #16]
	// set timeout guard
	tick = osKernelSysTick();
 800dfdc:	f7f9 f8ab 	bl	8007136 <osKernelSysTick>
 800dfe0:	60f8      	str	r0, [r7, #12]
	// wait for response to complete
	if(strstr(cmd, SIMCOM_MESSAGE_END) == NULL) {
 800dfe2:	211a      	movs	r1, #26
 800dfe4:	6878      	ldr	r0, [r7, #4]
 800dfe6:	f003 f9c3 	bl	8011370 <strchr>
 800dfea:	4603      	mov	r3, r0
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d104      	bne.n	800dffa <Simcom_Send+0x52>
		osDelay(200 + ms);
 800dff0:	683b      	ldr	r3, [r7, #0]
 800dff2:	33c8      	adds	r3, #200	; 0xc8
 800dff4:	4618      	mov	r0, r3
 800dff6:	f7f9 f8fa 	bl	80071ee <osDelay>
	}
	// wait response from SIMCOM
	while ( !(Simcom_Response(SIMCOM_STATUS_SEND) || Simcom_Response(SIMCOM_STATUS_CIPSEND) || Simcom_Response(SIMCOM_STATUS_OK) || Simcom_Response(SIMCOM_STATUS_RESTARTED) || Simcom_Response(SIMCOM_STATUS_ERROR) || (osKernelSysTick() - tick) >= timeout_tick) );
 800dffa:	bf00      	nop
 800dffc:	4831      	ldr	r0, [pc, #196]	; (800e0c4 <Simcom_Send+0x11c>)
 800dffe:	f7ff ffbf 	bl	800df80 <Simcom_Response>
 800e002:	4603      	mov	r3, r0
 800e004:	2b00      	cmp	r3, #0
 800e006:	d11f      	bne.n	800e048 <Simcom_Send+0xa0>
 800e008:	482f      	ldr	r0, [pc, #188]	; (800e0c8 <Simcom_Send+0x120>)
 800e00a:	f7ff ffb9 	bl	800df80 <Simcom_Response>
 800e00e:	4603      	mov	r3, r0
 800e010:	2b00      	cmp	r3, #0
 800e012:	d119      	bne.n	800e048 <Simcom_Send+0xa0>
 800e014:	482d      	ldr	r0, [pc, #180]	; (800e0cc <Simcom_Send+0x124>)
 800e016:	f7ff ffb3 	bl	800df80 <Simcom_Response>
 800e01a:	4603      	mov	r3, r0
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d113      	bne.n	800e048 <Simcom_Send+0xa0>
 800e020:	482b      	ldr	r0, [pc, #172]	; (800e0d0 <Simcom_Send+0x128>)
 800e022:	f7ff ffad 	bl	800df80 <Simcom_Response>
 800e026:	4603      	mov	r3, r0
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d10d      	bne.n	800e048 <Simcom_Send+0xa0>
 800e02c:	4829      	ldr	r0, [pc, #164]	; (800e0d4 <Simcom_Send+0x12c>)
 800e02e:	f7ff ffa7 	bl	800df80 <Simcom_Response>
 800e032:	4603      	mov	r3, r0
 800e034:	2b00      	cmp	r3, #0
 800e036:	d107      	bne.n	800e048 <Simcom_Send+0xa0>
 800e038:	f7f9 f87d 	bl	8007136 <osKernelSysTick>
 800e03c:	4602      	mov	r2, r0
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	1ad3      	subs	r3, r2, r3
 800e042:	693a      	ldr	r2, [r7, #16]
 800e044:	429a      	cmp	r2, r3
 800e046:	d8d9      	bhi.n	800dffc <Simcom_Send+0x54>
	// handle timeout & error
	if ( Simcom_Response(SIMCOM_STATUS_ERROR) || Simcom_Response(SIMCOM_STATUS_RESTARTED) || (osKernelSysTick() - tick) > timeout_tick ){
 800e048:	4822      	ldr	r0, [pc, #136]	; (800e0d4 <Simcom_Send+0x12c>)
 800e04a:	f7ff ff99 	bl	800df80 <Simcom_Response>
 800e04e:	4603      	mov	r3, r0
 800e050:	2b00      	cmp	r3, #0
 800e052:	d10d      	bne.n	800e070 <Simcom_Send+0xc8>
 800e054:	481e      	ldr	r0, [pc, #120]	; (800e0d0 <Simcom_Send+0x128>)
 800e056:	f7ff ff93 	bl	800df80 <Simcom_Response>
 800e05a:	4603      	mov	r3, r0
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d107      	bne.n	800e070 <Simcom_Send+0xc8>
 800e060:	f7f9 f869 	bl	8007136 <osKernelSysTick>
 800e064:	4602      	mov	r2, r0
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	1ad3      	subs	r3, r2, r3
 800e06a:	693a      	ldr	r2, [r7, #16]
 800e06c:	429a      	cmp	r2, r3
 800e06e:	d202      	bcs.n	800e076 <Simcom_Send+0xce>
		ret = 0;
 800e070:	2300      	movs	r3, #0
 800e072:	75fb      	strb	r3, [r7, #23]
 800e074:	e001      	b.n	800e07a <Simcom_Send+0xd2>
	} else {
		ret = 1;
 800e076:	2301      	movs	r3, #1
 800e078:	75fb      	strb	r3, [r7, #23]
	}
	// print for debugger
	if(strstr(cmd, SIMCOM_MESSAGE_END) == NULL) {
 800e07a:	211a      	movs	r1, #26
 800e07c:	6878      	ldr	r0, [r7, #4]
 800e07e:	f003 f977 	bl	8011370 <strchr>
 800e082:	4603      	mov	r3, r0
 800e084:	2b00      	cmp	r3, #0
 800e086:	d107      	bne.n	800e098 <Simcom_Send+0xf0>
		sprintf(str, "\n=> %s", cmd);
 800e088:	687a      	ldr	r2, [r7, #4]
 800e08a:	4913      	ldr	r1, [pc, #76]	; (800e0d8 <Simcom_Send+0x130>)
 800e08c:	4813      	ldr	r0, [pc, #76]	; (800e0dc <Simcom_Send+0x134>)
 800e08e:	f003 f94f 	bl	8011330 <siprintf>
		swvPrint(str);
 800e092:	4812      	ldr	r0, [pc, #72]	; (800e0dc <Simcom_Send+0x134>)
 800e094:	f7fd fa64 	bl	800b560 <swvPrint>
	}
	sprintf(str, "%s\n", SIMCOM_UART_RX_Buffer);
 800e098:	4a11      	ldr	r2, [pc, #68]	; (800e0e0 <Simcom_Send+0x138>)
 800e09a:	4912      	ldr	r1, [pc, #72]	; (800e0e4 <Simcom_Send+0x13c>)
 800e09c:	480f      	ldr	r0, [pc, #60]	; (800e0dc <Simcom_Send+0x134>)
 800e09e:	f003 f947 	bl	8011330 <siprintf>
	swvPrint(str);
 800e0a2:	480e      	ldr	r0, [pc, #56]	; (800e0dc <Simcom_Send+0x134>)
 800e0a4:	f7fd fa5c 	bl	800b560 <swvPrint>
	// check if it has new command
	Simcom_Check_Command();
 800e0a8:	f000 fb6e 	bl	800e788 <Simcom_Check_Command>

	osRecursiveMutexRelease(SimcomRecMutexHandle);
 800e0ac:	4b04      	ldr	r3, [pc, #16]	; (800e0c0 <Simcom_Send+0x118>)
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	4618      	mov	r0, r3
 800e0b2:	f7f9 fba9 	bl	8007808 <osRecursiveMutexRelease>
	return ret;
 800e0b6:	7dfb      	ldrb	r3, [r7, #23]
}
 800e0b8:	4618      	mov	r0, r3
 800e0ba:	3718      	adds	r7, #24
 800e0bc:	46bd      	mov	sp, r7
 800e0be:	bd80      	pop	{r7, pc}
 800e0c0:	20008648 	.word	0x20008648
 800e0c4:	08014d8c 	.word	0x08014d8c
 800e0c8:	08014d90 	.word	0x08014d90
 800e0cc:	08014d9c 	.word	0x08014d9c
 800e0d0:	08014da4 	.word	0x08014da4
 800e0d4:	08014dac 	.word	0x08014dac
 800e0d8:	08014db4 	.word	0x08014db4
 800e0dc:	20007b94 	.word	0x20007b94
 800e0e0:	20006900 	.word	0x20006900
 800e0e4:	08014dbc 	.word	0x08014dbc

0800e0e8 <Simcom_Send_Repeat>:

static uint8_t Simcom_Send_Repeat(char *command, uint32_t ms, char *response)
{
 800e0e8:	b580      	push	{r7, lr}
 800e0ea:	b086      	sub	sp, #24
 800e0ec:	af00      	add	r7, sp, #0
 800e0ee:	60f8      	str	r0, [r7, #12]
 800e0f0:	60b9      	str	r1, [r7, #8]
 800e0f2:	607a      	str	r2, [r7, #4]
	osRecursiveMutexWait(SimcomRecMutexHandle, osWaitForever);
 800e0f4:	4b1d      	ldr	r3, [pc, #116]	; (800e16c <Simcom_Send_Repeat+0x84>)
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	f04f 31ff 	mov.w	r1, #4294967295
 800e0fc:	4618      	mov	r0, r3
 800e0fe:	f7f9 fb96 	bl	800782e <osRecursiveMutexWait>

	uint8_t ret = 1, seq = 1, seq_max = 5;
 800e102:	2301      	movs	r3, #1
 800e104:	75fb      	strb	r3, [r7, #23]
 800e106:	2301      	movs	r3, #1
 800e108:	75bb      	strb	r3, [r7, #22]
 800e10a:	2305      	movs	r3, #5
 800e10c:	757b      	strb	r3, [r7, #21]
	// repeat command until desired response
	do {
		if(seq > 1) {
 800e10e:	7dbb      	ldrb	r3, [r7, #22]
 800e110:	2b01      	cmp	r3, #1
 800e112:	d903      	bls.n	800e11c <Simcom_Send_Repeat+0x34>
			// execute command every timeout guard elapsed
			osDelay(SIMCOM_CMD_TIMEOUT*500);
 800e114:	f640 10c4 	movw	r0, #2500	; 0x9c4
 800e118:	f7f9 f869 	bl	80071ee <osDelay>
		}
		// send command
		if (seq <= seq_max) {
 800e11c:	7dba      	ldrb	r2, [r7, #22]
 800e11e:	7d7b      	ldrb	r3, [r7, #21]
 800e120:	429a      	cmp	r2, r3
 800e122:	d80c      	bhi.n	800e13e <Simcom_Send_Repeat+0x56>
			Simcom_Send(command, ms);
 800e124:	68b9      	ldr	r1, [r7, #8]
 800e126:	68f8      	ldr	r0, [r7, #12]
 800e128:	f7ff ff3e 	bl	800dfa8 <Simcom_Send>
			// if device error, break
			if (Simcom_Response(SIMCOM_STATUS_RESTARTED)) {
 800e12c:	4810      	ldr	r0, [pc, #64]	; (800e170 <Simcom_Send_Repeat+0x88>)
 800e12e:	f7ff ff27 	bl	800df80 <Simcom_Response>
 800e132:	4603      	mov	r3, r0
 800e134:	2b00      	cmp	r3, #0
 800e136:	d005      	beq.n	800e144 <Simcom_Send_Repeat+0x5c>
				ret = 0;
 800e138:	2300      	movs	r3, #0
 800e13a:	75fb      	strb	r3, [r7, #23]
				break;
 800e13c:	e00b      	b.n	800e156 <Simcom_Send_Repeat+0x6e>
			}
		} else {
			// if until max sequence still error, break
			ret = 0;
 800e13e:	2300      	movs	r3, #0
 800e140:	75fb      	strb	r3, [r7, #23]
			break;
 800e142:	e008      	b.n	800e156 <Simcom_Send_Repeat+0x6e>
		}
		// increment sequence
		seq++;
 800e144:	7dbb      	ldrb	r3, [r7, #22]
 800e146:	3301      	adds	r3, #1
 800e148:	75bb      	strb	r3, [r7, #22]
	} while (!Simcom_Response(response));
 800e14a:	6878      	ldr	r0, [r7, #4]
 800e14c:	f7ff ff18 	bl	800df80 <Simcom_Response>
 800e150:	4603      	mov	r3, r0
 800e152:	2b00      	cmp	r3, #0
 800e154:	d0db      	beq.n	800e10e <Simcom_Send_Repeat+0x26>

	osRecursiveMutexRelease(SimcomRecMutexHandle);
 800e156:	4b05      	ldr	r3, [pc, #20]	; (800e16c <Simcom_Send_Repeat+0x84>)
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	4618      	mov	r0, r3
 800e15c:	f7f9 fb54 	bl	8007808 <osRecursiveMutexRelease>
	return ret;
 800e160:	7dfb      	ldrb	r3, [r7, #23]
}
 800e162:	4618      	mov	r0, r3
 800e164:	3718      	adds	r7, #24
 800e166:	46bd      	mov	sp, r7
 800e168:	bd80      	pop	{r7, pc}
 800e16a:	bf00      	nop
 800e16c:	20008648 	.word	0x20008648
 800e170:	08014da4 	.word	0x08014da4

0800e174 <Simcom_Set_Default_Data>:

static void Simcom_Set_Default_Data(void){
 800e174:	b580      	push	{r7, lr}
 800e176:	af00      	add	r7, sp, #0
	// set initial data
	strcpy(sim.header.prefix, "@P");
 800e178:	4b36      	ldr	r3, [pc, #216]	; (800e254 <Simcom_Set_Default_Data+0xe0>)
 800e17a:	4a37      	ldr	r2, [pc, #220]	; (800e258 <Simcom_Set_Default_Data+0xe4>)
 800e17c:	6812      	ldr	r2, [r2, #0]
 800e17e:	4611      	mov	r1, r2
 800e180:	8019      	strh	r1, [r3, #0]
 800e182:	3302      	adds	r3, #2
 800e184:	0c12      	lsrs	r2, r2, #16
 800e186:	701a      	strb	r2, [r3, #0]
	strcpy(sim.header.unit_id, "354453");
 800e188:	4b34      	ldr	r3, [pc, #208]	; (800e25c <Simcom_Set_Default_Data+0xe8>)
 800e18a:	4a35      	ldr	r2, [pc, #212]	; (800e260 <Simcom_Set_Default_Data+0xec>)
 800e18c:	6810      	ldr	r0, [r2, #0]
 800e18e:	6018      	str	r0, [r3, #0]
 800e190:	8891      	ldrh	r1, [r2, #4]
 800e192:	7992      	ldrb	r2, [r2, #6]
 800e194:	8099      	strh	r1, [r3, #4]
 800e196:	719a      	strb	r2, [r3, #6]
	sim.header.crc = 0;
 800e198:	4b2e      	ldr	r3, [pc, #184]	; (800e254 <Simcom_Set_Default_Data+0xe0>)
 800e19a:	2200      	movs	r2, #0
 800e19c:	809a      	strh	r2, [r3, #4]
	sim.header.length = 0;
 800e19e:	4b2d      	ldr	r3, [pc, #180]	; (800e254 <Simcom_Set_Default_Data+0xe0>)
 800e1a0:	2200      	movs	r2, #0
 800e1a2:	80da      	strh	r2, [r3, #6]
	sim.header.seq_id = 0;
 800e1a4:	4b2b      	ldr	r3, [pc, #172]	; (800e254 <Simcom_Set_Default_Data+0xe0>)
 800e1a6:	2200      	movs	r2, #0
 800e1a8:	811a      	strh	r2, [r3, #8]

	strcpy(sim.data.datetime_rtc, "");
 800e1aa:	4b2a      	ldr	r3, [pc, #168]	; (800e254 <Simcom_Set_Default_Data+0xe0>)
 800e1ac:	2200      	movs	r2, #0
 800e1ae:	751a      	strb	r2, [r3, #20]
	strcpy(sim.data.speed, "0");
 800e1b0:	4a2c      	ldr	r2, [pc, #176]	; (800e264 <Simcom_Set_Default_Data+0xf0>)
 800e1b2:	4b2d      	ldr	r3, [pc, #180]	; (800e268 <Simcom_Set_Default_Data+0xf4>)
 800e1b4:	881b      	ldrh	r3, [r3, #0]
 800e1b6:	8013      	strh	r3, [r2, #0]
	strcpy(sim.data.driver_id, "31313");
 800e1b8:	4b2c      	ldr	r3, [pc, #176]	; (800e26c <Simcom_Set_Default_Data+0xf8>)
 800e1ba:	4a2d      	ldr	r2, [pc, #180]	; (800e270 <Simcom_Set_Default_Data+0xfc>)
 800e1bc:	6810      	ldr	r0, [r2, #0]
 800e1be:	6018      	str	r0, [r3, #0]
 800e1c0:	8892      	ldrh	r2, [r2, #4]
 800e1c2:	809a      	strh	r2, [r3, #4]
	strcpy(sim.data.message, "");
 800e1c4:	4b23      	ldr	r3, [pc, #140]	; (800e254 <Simcom_Set_Default_Data+0xe0>)
 800e1c6:	2200      	movs	r2, #0
 800e1c8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	sim.data.reportd_id = 2;
 800e1cc:	4b21      	ldr	r3, [pc, #132]	; (800e254 <Simcom_Set_Default_Data+0xe0>)
 800e1ce:	2202      	movs	r2, #2
 800e1d0:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	sim.data.odometer = Flash_Get_Odometer();
 800e1d4:	f7fe fa8e 	bl	800c6f4 <Flash_Get_Odometer>
 800e1d8:	4602      	mov	r2, r0
 800e1da:	4b1e      	ldr	r3, [pc, #120]	; (800e254 <Simcom_Set_Default_Data+0xe0>)
 800e1dc:	625a      	str	r2, [r3, #36]	; 0x24
	sim.data.status_input = 0;
 800e1de:	4b1d      	ldr	r3, [pc, #116]	; (800e254 <Simcom_Set_Default_Data+0xe0>)
 800e1e0:	2200      	movs	r2, #0
 800e1e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	sim.data.status_output = 0;
 800e1e6:	4b1b      	ldr	r3, [pc, #108]	; (800e254 <Simcom_Set_Default_Data+0xe0>)
 800e1e8:	2200      	movs	r2, #0
 800e1ea:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	sim.data.analog_input = 0;
 800e1ee:	4b19      	ldr	r3, [pc, #100]	; (800e254 <Simcom_Set_Default_Data+0xe0>)
 800e1f0:	2200      	movs	r2, #0
 800e1f2:	861a      	strh	r2, [r3, #48]	; 0x30
	sim.data.temp_sensor1 = 2000;
 800e1f4:	4b17      	ldr	r3, [pc, #92]	; (800e254 <Simcom_Set_Default_Data+0xe0>)
 800e1f6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800e1fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	sim.data.temp_sensor2 = 2000;
 800e1fe:	4b15      	ldr	r3, [pc, #84]	; (800e254 <Simcom_Set_Default_Data+0xe0>)
 800e200:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800e204:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

	strcpy(sim.data.gps.datetime, "");
 800e208:	4b12      	ldr	r3, [pc, #72]	; (800e254 <Simcom_Set_Default_Data+0xe0>)
 800e20a:	2200      	movs	r2, #0
 800e20c:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
	strcpy(sim.data.gps.longitude, "0");
 800e210:	4a18      	ldr	r2, [pc, #96]	; (800e274 <Simcom_Set_Default_Data+0x100>)
 800e212:	4b15      	ldr	r3, [pc, #84]	; (800e268 <Simcom_Set_Default_Data+0xf4>)
 800e214:	881b      	ldrh	r3, [r3, #0]
 800e216:	8013      	strh	r3, [r2, #0]
	strcpy(sim.data.gps.latitude, "0");
 800e218:	4a17      	ldr	r2, [pc, #92]	; (800e278 <Simcom_Set_Default_Data+0x104>)
 800e21a:	4b13      	ldr	r3, [pc, #76]	; (800e268 <Simcom_Set_Default_Data+0xf4>)
 800e21c:	881b      	ldrh	r3, [r3, #0]
 800e21e:	8013      	strh	r3, [r2, #0]
	strcpy(sim.data.gps.heading, "108");
 800e220:	4b16      	ldr	r3, [pc, #88]	; (800e27c <Simcom_Set_Default_Data+0x108>)
 800e222:	4a17      	ldr	r2, [pc, #92]	; (800e280 <Simcom_Set_Default_Data+0x10c>)
 800e224:	6810      	ldr	r0, [r2, #0]
 800e226:	6018      	str	r0, [r3, #0]
	strcpy(sim.data.gps.hdop, "0");
 800e228:	4b16      	ldr	r3, [pc, #88]	; (800e284 <Simcom_Set_Default_Data+0x110>)
 800e22a:	2230      	movs	r2, #48	; 0x30
 800e22c:	801a      	strh	r2, [r3, #0]
	strcpy(sim.data.gps.datetime, "");
 800e22e:	4b09      	ldr	r3, [pc, #36]	; (800e254 <Simcom_Set_Default_Data+0xe0>)
 800e230:	2200      	movs	r2, #0
 800e232:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
	// prepare command sequence
	sprintf(CIPSEND, "AT+CIPSEND=0,,\"%s\",%d\r", SERVER_IP, SERVER_PORT);
 800e236:	f241 33b4 	movw	r3, #5044	; 0x13b4
 800e23a:	4a13      	ldr	r2, [pc, #76]	; (800e288 <Simcom_Set_Default_Data+0x114>)
 800e23c:	4913      	ldr	r1, [pc, #76]	; (800e28c <Simcom_Set_Default_Data+0x118>)
 800e23e:	4814      	ldr	r0, [pc, #80]	; (800e290 <Simcom_Set_Default_Data+0x11c>)
 800e240:	f003 f876 	bl	8011330 <siprintf>
	sprintf(CIPOPEN, "AT+CIPOPEN=0,\"UDP\",,,%d\r", LOCAL_PORT);
 800e244:	f241 32b4 	movw	r2, #5044	; 0x13b4
 800e248:	4912      	ldr	r1, [pc, #72]	; (800e294 <Simcom_Set_Default_Data+0x120>)
 800e24a:	4813      	ldr	r0, [pc, #76]	; (800e298 <Simcom_Set_Default_Data+0x124>)
 800e24c:	f003 f870 	bl	8011330 <siprintf>
}
 800e250:	bf00      	nop
 800e252:	bd80      	pop	{r7, pc}
 800e254:	20007f94 	.word	0x20007f94
 800e258:	08014dc0 	.word	0x08014dc0
 800e25c:	20007f9e 	.word	0x20007f9e
 800e260:	08014dc4 	.word	0x08014dc4
 800e264:	20007fbd 	.word	0x20007fbd
 800e268:	08014dcc 	.word	0x08014dcc
 800e26c:	20007fc6 	.word	0x20007fc6
 800e270:	08014dd0 	.word	0x08014dd0
 800e274:	200081df 	.word	0x200081df
 800e278:	200081f3 	.word	0x200081f3
 800e27c:	20008207 	.word	0x20008207
 800e280:	08014dd8 	.word	0x08014dd8
 800e284:	2000820c 	.word	0x2000820c
 800e288:	08014ddc 	.word	0x08014ddc
 800e28c:	08014dec 	.word	0x08014dec
 800e290:	20007b60 	.word	0x20007b60
 800e294:	08014e04 	.word	0x08014e04
 800e298:	20008214 	.word	0x20008214

0800e29c <Simcom_Init>:

void Simcom_Init(uint8_t restart){
 800e29c:	b580      	push	{r7, lr}
 800e29e:	b084      	sub	sp, #16
 800e2a0:	af00      	add	r7, sp, #0
 800e2a2:	4603      	mov	r3, r0
 800e2a4:	71fb      	strb	r3, [r7, #7]
	uint8_t p, boot = !restart;
 800e2a6:	79fb      	ldrb	r3, [r7, #7]
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	bf0c      	ite	eq
 800e2ac:	2301      	moveq	r3, #1
 800e2ae:	2300      	movne	r3, #0
 800e2b0:	b2db      	uxtb	r3, r3
 800e2b2:	73bb      	strb	r3, [r7, #14]

	// this do-while is complicated, but it doesn't use recursive function, so it's stack safe
	do {
		swvPrintLn("Simcom_Init");
 800e2b4:	4859      	ldr	r0, [pc, #356]	; (800e41c <Simcom_Init+0x180>)
 800e2b6:	f7fd f975 	bl	800b5a4 <swvPrintLn>

		p = 0;
 800e2ba:	2300      	movs	r3, #0
 800e2bc:	73fb      	strb	r3, [r7, #15]
		// Turn on the module & wait till ready
		if(boot){
 800e2be:	7bbb      	ldrb	r3, [r7, #14]
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d02b      	beq.n	800e31c <Simcom_Init+0x80>
			p = Simcom_Boot();
 800e2c4:	f7ff fe20 	bl	800df08 <Simcom_Boot>
 800e2c8:	4603      	mov	r3, r0
 800e2ca:	73fb      	strb	r3, [r7, #15]
			// Execute only on first setup
			if(p && !restart) {
 800e2cc:	7bfb      	ldrb	r3, [r7, #15]
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d01c      	beq.n	800e30c <Simcom_Init+0x70>
 800e2d2:	79fb      	ldrb	r3, [r7, #7]
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d119      	bne.n	800e30c <Simcom_Init+0x70>
				//set default value to variable
				Simcom_Set_Default_Data();
 800e2d8:	f7ff ff4c 	bl	800e174 <Simcom_Set_Default_Data>
				//disable command echo
				p = Simcom_Send("ATE1\r", 0);
 800e2dc:	2100      	movs	r1, #0
 800e2de:	4850      	ldr	r0, [pc, #320]	; (800e420 <Simcom_Init+0x184>)
 800e2e0:	f7ff fe62 	bl	800dfa8 <Simcom_Send>
 800e2e4:	4603      	mov	r3, r0
 800e2e6:	73fb      	strb	r3, [r7, #15]
				//set permanent baudrate
				if(p){
 800e2e8:	7bfb      	ldrb	r3, [r7, #15]
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d005      	beq.n	800e2fa <Simcom_Init+0x5e>
					p = Simcom_Send("AT+IPREX=9600\r", 0);
 800e2ee:	2100      	movs	r1, #0
 800e2f0:	484c      	ldr	r0, [pc, #304]	; (800e424 <Simcom_Init+0x188>)
 800e2f2:	f7ff fe59 	bl	800dfa8 <Simcom_Send>
 800e2f6:	4603      	mov	r3, r0
 800e2f8:	73fb      	strb	r3, [r7, #15]
				}
				//save user setting to ME
				if(p){
 800e2fa:	7bfb      	ldrb	r3, [r7, #15]
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d005      	beq.n	800e30c <Simcom_Init+0x70>
					p = Simcom_Send("AT&W\r", 0);
 800e300:	2100      	movs	r1, #0
 800e302:	4849      	ldr	r0, [pc, #292]	; (800e428 <Simcom_Init+0x18c>)
 800e304:	f7ff fe50 	bl	800dfa8 <Simcom_Send>
 800e308:	4603      	mov	r3, r0
 800e30a:	73fb      	strb	r3, [r7, #15]
				}
			}
			// if boot sequence ok, then disable it
			boot = !p;
 800e30c:	7bfb      	ldrb	r3, [r7, #15]
 800e30e:	2b00      	cmp	r3, #0
 800e310:	bf0c      	ite	eq
 800e312:	2301      	moveq	r3, #1
 800e314:	2300      	movne	r3, #0
 800e316:	b2db      	uxtb	r3, r3
 800e318:	73bb      	strb	r3, [r7, #14]
 800e31a:	e001      	b.n	800e320 <Simcom_Init+0x84>
		} else {
			p = 1;
 800e31c:	2301      	movs	r3, #1
 800e31e:	73fb      	strb	r3, [r7, #15]
		}
		//Lock to WCDMA
		if(p){
 800e320:	7bfb      	ldrb	r3, [r7, #15]
 800e322:	2b00      	cmp	r3, #0
 800e324:	d005      	beq.n	800e332 <Simcom_Init+0x96>
			// 2: Auto, 13: 2G, 14: 3G
			p = Simcom_Send("AT+CNMP=2\r", 0);
 800e326:	2100      	movs	r1, #0
 800e328:	4840      	ldr	r0, [pc, #256]	; (800e42c <Simcom_Init+0x190>)
 800e32a:	f7ff fe3d 	bl	800dfa8 <Simcom_Send>
 800e32e:	4603      	mov	r3, r0
 800e330:	73fb      	strb	r3, [r7, #15]
		}
		//Hide “+IPD” header
		if(p){
 800e332:	7bfb      	ldrb	r3, [r7, #15]
 800e334:	2b00      	cmp	r3, #0
 800e336:	d005      	beq.n	800e344 <Simcom_Init+0xa8>
			p = Simcom_Send("AT+CIPHEAD=0\r", 0);
 800e338:	2100      	movs	r1, #0
 800e33a:	483d      	ldr	r0, [pc, #244]	; (800e430 <Simcom_Init+0x194>)
 800e33c:	f7ff fe34 	bl	800dfa8 <Simcom_Send>
 800e340:	4603      	mov	r3, r0
 800e342:	73fb      	strb	r3, [r7, #15]
		}
		//Hide “RECV FROM” header
		if(p){
 800e344:	7bfb      	ldrb	r3, [r7, #15]
 800e346:	2b00      	cmp	r3, #0
 800e348:	d005      	beq.n	800e356 <Simcom_Init+0xba>
			p = Simcom_Send("AT+CIPSRIP=0\r", 0);
 800e34a:	2100      	movs	r1, #0
 800e34c:	4839      	ldr	r0, [pc, #228]	; (800e434 <Simcom_Init+0x198>)
 800e34e:	f7ff fe2b 	bl	800dfa8 <Simcom_Send>
 800e352:	4603      	mov	r3, r0
 800e354:	73fb      	strb	r3, [r7, #15]
		}
		//Set module to cache received data.
		if(p){
 800e356:	7bfb      	ldrb	r3, [r7, #15]
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d005      	beq.n	800e368 <Simcom_Init+0xcc>
			p = Simcom_Send("AT+CIPRXGET=1\r", 0);
 800e35c:	2100      	movs	r1, #0
 800e35e:	4836      	ldr	r0, [pc, #216]	; (800e438 <Simcom_Init+0x19c>)
 800e360:	f7ff fe22 	bl	800dfa8 <Simcom_Send>
 800e364:	4603      	mov	r3, r0
 800e366:	73fb      	strb	r3, [r7, #15]
		}
		//Inquiring UE system information
		if(p){
 800e368:	7bfb      	ldrb	r3, [r7, #15]
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d00d      	beq.n	800e38a <Simcom_Init+0xee>
			p = Simcom_Send_Repeat("AT+CPSI?\r", 0, ",Online,");
 800e36e:	4a33      	ldr	r2, [pc, #204]	; (800e43c <Simcom_Init+0x1a0>)
 800e370:	2100      	movs	r1, #0
 800e372:	4833      	ldr	r0, [pc, #204]	; (800e440 <Simcom_Init+0x1a4>)
 800e374:	f7ff feb8 	bl	800e0e8 <Simcom_Send_Repeat>
 800e378:	4603      	mov	r3, r0
 800e37a:	73fb      	strb	r3, [r7, #15]
			// restart module to fix it
			boot = !p;
 800e37c:	7bfb      	ldrb	r3, [r7, #15]
 800e37e:	2b00      	cmp	r3, #0
 800e380:	bf0c      	ite	eq
 800e382:	2301      	moveq	r3, #1
 800e384:	2300      	movne	r3, #0
 800e386:	b2db      	uxtb	r3, r3
 800e388:	73bb      	strb	r3, [r7, #14]
		}
		//Define socket PDP context (APN Settings)
		if(p){
 800e38a:	7bfb      	ldrb	r3, [r7, #15]
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d005      	beq.n	800e39c <Simcom_Init+0x100>
			//			p = Simcom_Send("AT+CGSOCKCONT=1,\"IP\",\"telkomsel\"\r", 0);
			p = Simcom_Send("AT+CGSOCKCONT=1,\"IP\",\"3gprs\"\r", 0);
 800e390:	2100      	movs	r1, #0
 800e392:	482c      	ldr	r0, [pc, #176]	; (800e444 <Simcom_Init+0x1a8>)
 800e394:	f7ff fe08 	bl	800dfa8 <Simcom_Send>
 800e398:	4603      	mov	r3, r0
 800e39a:	73fb      	strb	r3, [r7, #15]
		}
		//Set active PDP context profile number
		if(p){
 800e39c:	7bfb      	ldrb	r3, [r7, #15]
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d005      	beq.n	800e3ae <Simcom_Init+0x112>
			p = Simcom_Send("AT+CSOCKSETPN=1\r", 0);
 800e3a2:	2100      	movs	r1, #0
 800e3a4:	4828      	ldr	r0, [pc, #160]	; (800e448 <Simcom_Init+0x1ac>)
 800e3a6:	f7ff fdff 	bl	800dfa8 <Simcom_Send>
 800e3aa:	4603      	mov	r3, r0
 800e3ac:	73fb      	strb	r3, [r7, #15]
		}
		//Set type of authentication for PDP-IP connections of socket
		if(p){
 800e3ae:	7bfb      	ldrb	r3, [r7, #15]
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d005      	beq.n	800e3c0 <Simcom_Init+0x124>
			//			p = Simcom_Send("AT+CSOCKAUTH=1,1,\"wap\",\"wap123\"\r", 0);
			p = Simcom_Send("AT+CSOCKAUTH=1,1,\"3gprs\",\"3gprs\"\r", 0);
 800e3b4:	2100      	movs	r1, #0
 800e3b6:	4825      	ldr	r0, [pc, #148]	; (800e44c <Simcom_Init+0x1b0>)
 800e3b8:	f7ff fdf6 	bl	800dfa8 <Simcom_Send>
 800e3bc:	4603      	mov	r3, r0
 800e3be:	73fb      	strb	r3, [r7, #15]
		}
		//Select TCPIP application mode (0: Non Transparent (command mode), 1: Transparent (data mode))
		if(p){
 800e3c0:	7bfb      	ldrb	r3, [r7, #15]
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d005      	beq.n	800e3d2 <Simcom_Init+0x136>
			p = Simcom_Send("AT+CIPMODE=0\r", 0);
 800e3c6:	2100      	movs	r1, #0
 800e3c8:	4821      	ldr	r0, [pc, #132]	; (800e450 <Simcom_Init+0x1b4>)
 800e3ca:	f7ff fded 	bl	800dfa8 <Simcom_Send>
 800e3ce:	4603      	mov	r3, r0
 800e3d0:	73fb      	strb	r3, [r7, #15]
		}
		//Open network
		if(p){
 800e3d2:	7bfb      	ldrb	r3, [r7, #15]
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d006      	beq.n	800e3e6 <Simcom_Init+0x14a>
			p = Simcom_Send("AT+NETOPEN\r", 500);
 800e3d8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800e3dc:	481d      	ldr	r0, [pc, #116]	; (800e454 <Simcom_Init+0x1b8>)
 800e3de:	f7ff fde3 	bl	800dfa8 <Simcom_Send>
 800e3e2:	4603      	mov	r3, r0
 800e3e4:	73fb      	strb	r3, [r7, #15]
		}
		//Open local UDP Connection
		if(p){
 800e3e6:	7bfb      	ldrb	r3, [r7, #15]
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d00e      	beq.n	800e40a <Simcom_Init+0x16e>
			p = Simcom_Send_Repeat(CIPOPEN, 500, SIMCOM_STATUS_OK);
 800e3ec:	4a1a      	ldr	r2, [pc, #104]	; (800e458 <Simcom_Init+0x1bc>)
 800e3ee:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800e3f2:	481a      	ldr	r0, [pc, #104]	; (800e45c <Simcom_Init+0x1c0>)
 800e3f4:	f7ff fe78 	bl	800e0e8 <Simcom_Send_Repeat>
 800e3f8:	4603      	mov	r3, r0
 800e3fa:	73fb      	strb	r3, [r7, #15]
			// restart module to fix it
			boot = !p;
 800e3fc:	7bfb      	ldrb	r3, [r7, #15]
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	bf0c      	ite	eq
 800e402:	2301      	moveq	r3, #1
 800e404:	2300      	movne	r3, #0
 800e406:	b2db      	uxtb	r3, r3
 800e408:	73bb      	strb	r3, [r7, #14]
		}
	} while(p == 0);
 800e40a:	7bfb      	ldrb	r3, [r7, #15]
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	f43f af51 	beq.w	800e2b4 <Simcom_Init+0x18>
}
 800e412:	bf00      	nop
 800e414:	3710      	adds	r7, #16
 800e416:	46bd      	mov	sp, r7
 800e418:	bd80      	pop	{r7, pc}
 800e41a:	bf00      	nop
 800e41c:	08014e20 	.word	0x08014e20
 800e420:	08014e2c 	.word	0x08014e2c
 800e424:	08014e34 	.word	0x08014e34
 800e428:	08014e44 	.word	0x08014e44
 800e42c:	08014e4c 	.word	0x08014e4c
 800e430:	08014e58 	.word	0x08014e58
 800e434:	08014e68 	.word	0x08014e68
 800e438:	08014e78 	.word	0x08014e78
 800e43c:	08014e88 	.word	0x08014e88
 800e440:	08014e94 	.word	0x08014e94
 800e444:	08014ea0 	.word	0x08014ea0
 800e448:	08014ec0 	.word	0x08014ec0
 800e44c:	08014ed4 	.word	0x08014ed4
 800e450:	08014ef8 	.word	0x08014ef8
 800e454:	08014f08 	.word	0x08014f08
 800e458:	08014d9c 	.word	0x08014d9c
 800e45c:	20008214 	.word	0x20008214

0800e460 <Simcom_Set_Message>:

void Simcom_Set_Message(char* msg){
 800e460:	b580      	push	{r7, lr}
 800e462:	b082      	sub	sp, #8
 800e464:	af00      	add	r7, sp, #0
 800e466:	6078      	str	r0, [r7, #4]
	sprintf(sim.data.message, "%s\x1E", msg);
 800e468:	687a      	ldr	r2, [r7, #4]
 800e46a:	4904      	ldr	r1, [pc, #16]	; (800e47c <Simcom_Set_Message+0x1c>)
 800e46c:	4804      	ldr	r0, [pc, #16]	; (800e480 <Simcom_Set_Message+0x20>)
 800e46e:	f002 ff5f 	bl	8011330 <siprintf>
}
 800e472:	bf00      	nop
 800e474:	3708      	adds	r7, #8
 800e476:	46bd      	mov	sp, r7
 800e478:	bd80      	pop	{r7, pc}
 800e47a:	bf00      	nop
 800e47c:	08014f14 	.word	0x08014f14
 800e480:	20007fdc 	.word	0x20007fdc

0800e484 <Simcom_Convert_GPS>:

void Simcom_Convert_GPS(gps_t *hgps){
 800e484:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e486:	ed2d 8b02 	vpush	{d8}
 800e48a:	b087      	sub	sp, #28
 800e48c:	af04      	add	r7, sp, #16
 800e48e:	6078      	str	r0, [r7, #4]
	// parse gps data
	if(hgps->fix > 0){
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	7c5b      	ldrb	r3, [r3, #17]
 800e494:	2b00      	cmp	r3, #0
 800e496:	d069      	beq.n	800e56c <Simcom_Convert_GPS+0xe8>
		Simcom_Set_Odometer(sim.data.odometer + ( gps_to_speed(hgps->speed, gps_speed_mps) * REPORT_INTERVAL ));
 800e498:	4b37      	ldr	r3, [pc, #220]	; (800e578 <Simcom_Convert_GPS+0xf4>)
 800e49a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e49c:	ee07 3a90 	vmov	s15, r3
 800e4a0:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800e4aa:	2002      	movs	r0, #2
 800e4ac:	eeb0 0a67 	vmov.f32	s0, s15
 800e4b0:	f7ff fc2c 	bl	800dd0c <gps_to_speed>
 800e4b4:	eeb0 7a40 	vmov.f32	s14, s0
 800e4b8:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 800e4bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e4c0:	ee78 7a27 	vadd.f32	s15, s16, s15
 800e4c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e4c8:	ee17 0a90 	vmov	r0, s15
 800e4cc:	f000 f9fc 	bl	800e8c8 <Simcom_Set_Odometer>
		ftoa(hgps->latitude, sim.data.gps.latitude, 6);
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	edd3 7a00 	vldr	s15, [r3]
 800e4d6:	2106      	movs	r1, #6
 800e4d8:	4828      	ldr	r0, [pc, #160]	; (800e57c <Simcom_Convert_GPS+0xf8>)
 800e4da:	eeb0 0a67 	vmov.f32	s0, s15
 800e4de:	f7fd f887 	bl	800b5f0 <ftoa>
		ftoa(hgps->longitude, sim.data.gps.longitude, 6);
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	edd3 7a01 	vldr	s15, [r3, #4]
 800e4e8:	2106      	movs	r1, #6
 800e4ea:	4825      	ldr	r0, [pc, #148]	; (800e580 <Simcom_Convert_GPS+0xfc>)
 800e4ec:	eeb0 0a67 	vmov.f32	s0, s15
 800e4f0:	f7fd f87e 	bl	800b5f0 <ftoa>
		ftoa(hgps->dop_h, sim.data.gps.hdop, 3);
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	edd3 7a06 	vldr	s15, [r3, #24]
 800e4fa:	2103      	movs	r1, #3
 800e4fc:	4821      	ldr	r0, [pc, #132]	; (800e584 <Simcom_Convert_GPS+0x100>)
 800e4fe:	eeb0 0a67 	vmov.f32	s0, s15
 800e502:	f7fd f875 	bl	800b5f0 <ftoa>
		ftoa(gps_to_speed(hgps->speed, gps_speed_kph), sim.data.speed, 1);
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800e50c:	2001      	movs	r0, #1
 800e50e:	eeb0 0a67 	vmov.f32	s0, s15
 800e512:	f7ff fbfb 	bl	800dd0c <gps_to_speed>
 800e516:	eef0 7a40 	vmov.f32	s15, s0
 800e51a:	2101      	movs	r1, #1
 800e51c:	481a      	ldr	r0, [pc, #104]	; (800e588 <Simcom_Convert_GPS+0x104>)
 800e51e:	eeb0 0a67 	vmov.f32	s0, s15
 800e522:	f7fd f865 	bl	800b5f0 <ftoa>
		sprintf(sim.data.gps.datetime, "20%02d%02d%02d%02d%02d%02d", hgps->year, hgps->month, hgps->date, convertHourTo(hgps->hours, GMT_TIME), hgps->minutes, hgps->seconds);
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e52c:	461d      	mov	r5, r3
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e534:	461e      	mov	r6, r3
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e53c:	461c      	mov	r4, r3
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	7c9b      	ldrb	r3, [r3, #18]
 800e542:	2107      	movs	r1, #7
 800e544:	4618      	mov	r0, r3
 800e546:	f7fd f8c7 	bl	800b6d8 <convertHourTo>
 800e54a:	4603      	mov	r3, r0
 800e54c:	461a      	mov	r2, r3
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	7cdb      	ldrb	r3, [r3, #19]
 800e552:	4619      	mov	r1, r3
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	7d1b      	ldrb	r3, [r3, #20]
 800e558:	9303      	str	r3, [sp, #12]
 800e55a:	9102      	str	r1, [sp, #8]
 800e55c:	9201      	str	r2, [sp, #4]
 800e55e:	9400      	str	r4, [sp, #0]
 800e560:	4633      	mov	r3, r6
 800e562:	462a      	mov	r2, r5
 800e564:	4909      	ldr	r1, [pc, #36]	; (800e58c <Simcom_Convert_GPS+0x108>)
 800e566:	480a      	ldr	r0, [pc, #40]	; (800e590 <Simcom_Convert_GPS+0x10c>)
 800e568:	f002 fee2 	bl	8011330 <siprintf>
	}
}
 800e56c:	bf00      	nop
 800e56e:	370c      	adds	r7, #12
 800e570:	46bd      	mov	sp, r7
 800e572:	ecbd 8b02 	vpop	{d8}
 800e576:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e578:	20007f94 	.word	0x20007f94
 800e57c:	200081f3 	.word	0x200081f3
 800e580:	200081df 	.word	0x200081df
 800e584:	2000820c 	.word	0x2000820c
 800e588:	20007fbd 	.word	0x20007fbd
 800e58c:	08014f18 	.word	0x08014f18
 800e590:	200081d0 	.word	0x200081d0

0800e594 <Simcom_Set_Payload>:

void Simcom_Set_Payload(void)
{
 800e594:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e596:	b093      	sub	sp, #76	; 0x4c
 800e598:	af10      	add	r7, sp, #64	; 0x40
	// parse rtc datetime
	Get_RTC(sim.data.datetime_rtc);
 800e59a:	4832      	ldr	r0, [pc, #200]	; (800e664 <Simcom_Set_Payload+0xd0>)
 800e59c:	f7fd f8fc 	bl	800b798 <Get_RTC>
			"%s,%s,%s,%s,%s,"
			"%s,%d,%lu,%s,%d,"
			"%s,%d,%d,%s,%d,"
			"%d,%s\r\n",
			sim.data.gps.datetime, sim.data.datetime_rtc, sim.data.datetime_rtc, sim.data.gps.longitude, sim.data.gps.latitude,
			sim.data.gps.heading, sim.data.reportd_id, sim.data.odometer, sim.data.gps.hdop, sim.data.status_input,
 800e5a0:	4b31      	ldr	r3, [pc, #196]	; (800e668 <Simcom_Set_Payload+0xd4>)
 800e5a2:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
	sprintf(
 800e5a6:	4619      	mov	r1, r3
 800e5a8:	4b2f      	ldr	r3, [pc, #188]	; (800e668 <Simcom_Set_Payload+0xd4>)
 800e5aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
			sim.data.gps.heading, sim.data.reportd_id, sim.data.odometer, sim.data.gps.hdop, sim.data.status_input,
 800e5ac:	4a2e      	ldr	r2, [pc, #184]	; (800e668 <Simcom_Set_Payload+0xd4>)
 800e5ae:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
	sprintf(
 800e5b2:	4610      	mov	r0, r2
			sim.data.speed,	sim.data.status_output,	sim.data.analog_input, sim.data.driver_id, sim.data.temp_sensor1,
 800e5b4:	4a2c      	ldr	r2, [pc, #176]	; (800e668 <Simcom_Set_Payload+0xd4>)
 800e5b6:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
	sprintf(
 800e5ba:	4614      	mov	r4, r2
			sim.data.speed,	sim.data.status_output,	sim.data.analog_input, sim.data.driver_id, sim.data.temp_sensor1,
 800e5bc:	4a2a      	ldr	r2, [pc, #168]	; (800e668 <Simcom_Set_Payload+0xd4>)
 800e5be:	8e12      	ldrh	r2, [r2, #48]	; 0x30
	sprintf(
 800e5c0:	4615      	mov	r5, r2
			sim.data.speed,	sim.data.status_output,	sim.data.analog_input, sim.data.driver_id, sim.data.temp_sensor1,
 800e5c2:	4a29      	ldr	r2, [pc, #164]	; (800e668 <Simcom_Set_Payload+0xd4>)
 800e5c4:	f9b2 2044 	ldrsh.w	r2, [r2, #68]	; 0x44
	sprintf(
 800e5c8:	4616      	mov	r6, r2
			sim.data.temp_sensor2, sim.data.message);
 800e5ca:	4a27      	ldr	r2, [pc, #156]	; (800e668 <Simcom_Set_Payload+0xd4>)
 800e5cc:	f9b2 2046 	ldrsh.w	r2, [r2, #70]	; 0x46
	sprintf(
 800e5d0:	607a      	str	r2, [r7, #4]
 800e5d2:	4a26      	ldr	r2, [pc, #152]	; (800e66c <Simcom_Set_Payload+0xd8>)
 800e5d4:	920e      	str	r2, [sp, #56]	; 0x38
 800e5d6:	687a      	ldr	r2, [r7, #4]
 800e5d8:	920d      	str	r2, [sp, #52]	; 0x34
 800e5da:	960c      	str	r6, [sp, #48]	; 0x30
 800e5dc:	4a24      	ldr	r2, [pc, #144]	; (800e670 <Simcom_Set_Payload+0xdc>)
 800e5de:	920b      	str	r2, [sp, #44]	; 0x2c
 800e5e0:	950a      	str	r5, [sp, #40]	; 0x28
 800e5e2:	9409      	str	r4, [sp, #36]	; 0x24
 800e5e4:	4a23      	ldr	r2, [pc, #140]	; (800e674 <Simcom_Set_Payload+0xe0>)
 800e5e6:	9208      	str	r2, [sp, #32]
 800e5e8:	9007      	str	r0, [sp, #28]
 800e5ea:	4a23      	ldr	r2, [pc, #140]	; (800e678 <Simcom_Set_Payload+0xe4>)
 800e5ec:	9206      	str	r2, [sp, #24]
 800e5ee:	9305      	str	r3, [sp, #20]
 800e5f0:	9104      	str	r1, [sp, #16]
 800e5f2:	4b22      	ldr	r3, [pc, #136]	; (800e67c <Simcom_Set_Payload+0xe8>)
 800e5f4:	9303      	str	r3, [sp, #12]
 800e5f6:	4b22      	ldr	r3, [pc, #136]	; (800e680 <Simcom_Set_Payload+0xec>)
 800e5f8:	9302      	str	r3, [sp, #8]
 800e5fa:	4b22      	ldr	r3, [pc, #136]	; (800e684 <Simcom_Set_Payload+0xf0>)
 800e5fc:	9301      	str	r3, [sp, #4]
 800e5fe:	4b19      	ldr	r3, [pc, #100]	; (800e664 <Simcom_Set_Payload+0xd0>)
 800e600:	9300      	str	r3, [sp, #0]
 800e602:	4b18      	ldr	r3, [pc, #96]	; (800e664 <Simcom_Set_Payload+0xd0>)
 800e604:	4a20      	ldr	r2, [pc, #128]	; (800e688 <Simcom_Set_Payload+0xf4>)
 800e606:	4921      	ldr	r1, [pc, #132]	; (800e68c <Simcom_Set_Payload+0xf8>)
 800e608:	4821      	ldr	r0, [pc, #132]	; (800e690 <Simcom_Set_Payload+0xfc>)
 800e60a:	f002 fe91 	bl	8011330 <siprintf>
	//Reconstruct the header
	sim.header.length = strlen(POSITION_DATA);
 800e60e:	4820      	ldr	r0, [pc, #128]	; (800e690 <Simcom_Set_Payload+0xfc>)
 800e610:	f7f1 fde8 	bl	80001e4 <strlen>
 800e614:	4603      	mov	r3, r0
 800e616:	b29a      	uxth	r2, r3
 800e618:	4b13      	ldr	r3, [pc, #76]	; (800e668 <Simcom_Set_Payload+0xd4>)
 800e61a:	80da      	strh	r2, [r3, #6]
	sim.header.seq_id++;
 800e61c:	4b12      	ldr	r3, [pc, #72]	; (800e668 <Simcom_Set_Payload+0xd4>)
 800e61e:	891b      	ldrh	r3, [r3, #8]
 800e620:	3301      	adds	r3, #1
 800e622:	b29a      	uxth	r2, r3
 800e624:	4b10      	ldr	r3, [pc, #64]	; (800e668 <Simcom_Set_Payload+0xd4>)
 800e626:	811a      	strh	r2, [r3, #8]
	sprintf(
			POSITION_HEADER,
			"%s,%d,%d,%d,%s",
			sim.header.prefix, sim.header.crc, sim.header.length, sim.header.seq_id, sim.header.unit_id);
 800e628:	4b0f      	ldr	r3, [pc, #60]	; (800e668 <Simcom_Set_Payload+0xd4>)
 800e62a:	889b      	ldrh	r3, [r3, #4]
	sprintf(
 800e62c:	4618      	mov	r0, r3
			sim.header.prefix, sim.header.crc, sim.header.length, sim.header.seq_id, sim.header.unit_id);
 800e62e:	4b0e      	ldr	r3, [pc, #56]	; (800e668 <Simcom_Set_Payload+0xd4>)
 800e630:	88db      	ldrh	r3, [r3, #6]
	sprintf(
 800e632:	461a      	mov	r2, r3
			sim.header.prefix, sim.header.crc, sim.header.length, sim.header.seq_id, sim.header.unit_id);
 800e634:	4b0c      	ldr	r3, [pc, #48]	; (800e668 <Simcom_Set_Payload+0xd4>)
 800e636:	891b      	ldrh	r3, [r3, #8]
	sprintf(
 800e638:	4619      	mov	r1, r3
 800e63a:	4b16      	ldr	r3, [pc, #88]	; (800e694 <Simcom_Set_Payload+0x100>)
 800e63c:	9302      	str	r3, [sp, #8]
 800e63e:	9101      	str	r1, [sp, #4]
 800e640:	9200      	str	r2, [sp, #0]
 800e642:	4603      	mov	r3, r0
 800e644:	4a08      	ldr	r2, [pc, #32]	; (800e668 <Simcom_Set_Payload+0xd4>)
 800e646:	4914      	ldr	r1, [pc, #80]	; (800e698 <Simcom_Set_Payload+0x104>)
 800e648:	4814      	ldr	r0, [pc, #80]	; (800e69c <Simcom_Set_Payload+0x108>)
 800e64a:	f002 fe71 	bl	8011330 <siprintf>
	//Reconstruct the position
	sprintf(PAYLOAD, "%s,%s", POSITION_HEADER, POSITION_DATA);
 800e64e:	4b10      	ldr	r3, [pc, #64]	; (800e690 <Simcom_Set_Payload+0xfc>)
 800e650:	4a12      	ldr	r2, [pc, #72]	; (800e69c <Simcom_Set_Payload+0x108>)
 800e652:	4913      	ldr	r1, [pc, #76]	; (800e6a0 <Simcom_Set_Payload+0x10c>)
 800e654:	4813      	ldr	r0, [pc, #76]	; (800e6a4 <Simcom_Set_Payload+0x110>)
 800e656:	f002 fe6b 	bl	8011330 <siprintf>
}
 800e65a:	bf00      	nop
 800e65c:	370c      	adds	r7, #12
 800e65e:	46bd      	mov	sp, r7
 800e660:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e662:	bf00      	nop
 800e664:	20007fa8 	.word	0x20007fa8
 800e668:	20007f94 	.word	0x20007f94
 800e66c:	20007fdc 	.word	0x20007fdc
 800e670:	20007fc6 	.word	0x20007fc6
 800e674:	20007fbd 	.word	0x20007fbd
 800e678:	2000820c 	.word	0x2000820c
 800e67c:	20008207 	.word	0x20008207
 800e680:	200081f3 	.word	0x200081f3
 800e684:	200081df 	.word	0x200081df
 800e688:	200081d0 	.word	0x200081d0
 800e68c:	08014f34 	.word	0x08014f34
 800e690:	200078c8 	.word	0x200078c8
 800e694:	20007f9e 	.word	0x20007f9e
 800e698:	08014f6c 	.word	0x08014f6c
 800e69c:	200078a8 	.word	0x200078a8
 800e6a0:	08014f7c 	.word	0x08014f7c
 800e6a4:	200075f0 	.word	0x200075f0

0800e6a8 <Simcom_Send_Payload>:

uint8_t Simcom_Send_Payload(void){
 800e6a8:	b580      	push	{r7, lr}
 800e6aa:	af00      	add	r7, sp, #0
	return Simcom_To_Server(PAYLOAD, strlen(PAYLOAD));
 800e6ac:	4805      	ldr	r0, [pc, #20]	; (800e6c4 <Simcom_Send_Payload+0x1c>)
 800e6ae:	f7f1 fd99 	bl	80001e4 <strlen>
 800e6b2:	4603      	mov	r3, r0
 800e6b4:	b29b      	uxth	r3, r3
 800e6b6:	4619      	mov	r1, r3
 800e6b8:	4802      	ldr	r0, [pc, #8]	; (800e6c4 <Simcom_Send_Payload+0x1c>)
 800e6ba:	f000 f805 	bl	800e6c8 <Simcom_To_Server>
 800e6be:	4603      	mov	r3, r0
}
 800e6c0:	4618      	mov	r0, r3
 800e6c2:	bd80      	pop	{r7, pc}
 800e6c4:	200075f0 	.word	0x200075f0

0800e6c8 <Simcom_To_Server>:

uint8_t Simcom_To_Server(char *message, uint16_t length) {
 800e6c8:	b5b0      	push	{r4, r5, r7, lr}
 800e6ca:	b086      	sub	sp, #24
 800e6cc:	af00      	add	r7, sp, #0
 800e6ce:	6078      	str	r0, [r7, #4]
 800e6d0:	460b      	mov	r3, r1
 800e6d2:	807b      	strh	r3, [r7, #2]
 800e6d4:	466b      	mov	r3, sp
 800e6d6:	461d      	mov	r5, r3
	osRecursiveMutexWait(SimcomRecMutexHandle, osWaitForever);
 800e6d8:	4b27      	ldr	r3, [pc, #156]	; (800e778 <Simcom_To_Server+0xb0>)
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	f04f 31ff 	mov.w	r1, #4294967295
 800e6e0:	4618      	mov	r0, r3
 800e6e2:	f7f9 f8a4 	bl	800782e <osRecursiveMutexWait>

	uint8_t ret = 0;
 800e6e6:	2300      	movs	r3, #0
 800e6e8:	75fb      	strb	r3, [r7, #23]
	char str[length+1];
 800e6ea:	887b      	ldrh	r3, [r7, #2]
 800e6ec:	1c58      	adds	r0, r3, #1
 800e6ee:	1e43      	subs	r3, r0, #1
 800e6f0:	613b      	str	r3, [r7, #16]
 800e6f2:	4603      	mov	r3, r0
 800e6f4:	4619      	mov	r1, r3
 800e6f6:	f04f 0200 	mov.w	r2, #0
 800e6fa:	f04f 0300 	mov.w	r3, #0
 800e6fe:	f04f 0400 	mov.w	r4, #0
 800e702:	00d4      	lsls	r4, r2, #3
 800e704:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800e708:	00cb      	lsls	r3, r1, #3
 800e70a:	4603      	mov	r3, r0
 800e70c:	4619      	mov	r1, r3
 800e70e:	f04f 0200 	mov.w	r2, #0
 800e712:	f04f 0300 	mov.w	r3, #0
 800e716:	f04f 0400 	mov.w	r4, #0
 800e71a:	00d4      	lsls	r4, r2, #3
 800e71c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800e720:	00cb      	lsls	r3, r1, #3
 800e722:	4603      	mov	r3, r0
 800e724:	3307      	adds	r3, #7
 800e726:	08db      	lsrs	r3, r3, #3
 800e728:	00db      	lsls	r3, r3, #3
 800e72a:	ebad 0d03 	sub.w	sp, sp, r3
 800e72e:	466b      	mov	r3, sp
 800e730:	3300      	adds	r3, #0
 800e732:	60fb      	str	r3, [r7, #12]
	// add message end character
	sprintf(str, "%s%s", message, SIMCOM_MESSAGE_END);
 800e734:	68f8      	ldr	r0, [r7, #12]
 800e736:	4b11      	ldr	r3, [pc, #68]	; (800e77c <Simcom_To_Server+0xb4>)
 800e738:	687a      	ldr	r2, [r7, #4]
 800e73a:	4911      	ldr	r1, [pc, #68]	; (800e780 <Simcom_To_Server+0xb8>)
 800e73c:	f002 fdf8 	bl	8011330 <siprintf>
	// confirm to server that command is executed
	if (Simcom_Send(CIPSEND, 0)) {
 800e740:	2100      	movs	r1, #0
 800e742:	4810      	ldr	r0, [pc, #64]	; (800e784 <Simcom_To_Server+0xbc>)
 800e744:	f7ff fc30 	bl	800dfa8 <Simcom_Send>
 800e748:	4603      	mov	r3, r0
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d009      	beq.n	800e762 <Simcom_To_Server+0x9a>
		// send response
		if(Simcom_Send(str, 0)){
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	2100      	movs	r1, #0
 800e752:	4618      	mov	r0, r3
 800e754:	f7ff fc28 	bl	800dfa8 <Simcom_Send>
 800e758:	4603      	mov	r3, r0
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d001      	beq.n	800e762 <Simcom_To_Server+0x9a>
			ret = 1;
 800e75e:	2301      	movs	r3, #1
 800e760:	75fb      	strb	r3, [r7, #23]
		}
	}

	osRecursiveMutexRelease(SimcomRecMutexHandle);
 800e762:	4b05      	ldr	r3, [pc, #20]	; (800e778 <Simcom_To_Server+0xb0>)
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	4618      	mov	r0, r3
 800e768:	f7f9 f84e 	bl	8007808 <osRecursiveMutexRelease>
	return ret;
 800e76c:	7dfb      	ldrb	r3, [r7, #23]
 800e76e:	46ad      	mov	sp, r5
}
 800e770:	4618      	mov	r0, r3
 800e772:	3718      	adds	r7, #24
 800e774:	46bd      	mov	sp, r7
 800e776:	bdb0      	pop	{r4, r5, r7, pc}
 800e778:	20008648 	.word	0x20008648
 800e77c:	08014f84 	.word	0x08014f84
 800e780:	08014f88 	.word	0x08014f88
 800e784:	20007b60 	.word	0x20007b60

0800e788 <Simcom_Check_Command>:

uint8_t Simcom_Check_Command(void)
{
 800e788:	b580      	push	{r7, lr}
 800e78a:	af00      	add	r7, sp, #0
	// check if it has new command
	if (strstr(SIMCOM_UART_RX_Buffer, "+CIPRXGET: 1") != NULL){
 800e78c:	4905      	ldr	r1, [pc, #20]	; (800e7a4 <Simcom_Check_Command+0x1c>)
 800e78e:	4806      	ldr	r0, [pc, #24]	; (800e7a8 <Simcom_Check_Command+0x20>)
 800e790:	f002 fe2a 	bl	80113e8 <strstr>
 800e794:	4603      	mov	r3, r0
 800e796:	2b00      	cmp	r3, #0
 800e798:	d001      	beq.n	800e79e <Simcom_Check_Command+0x16>
		// hand over command to CommandTask
		return 1;
 800e79a:	2301      	movs	r3, #1
 800e79c:	e000      	b.n	800e7a0 <Simcom_Check_Command+0x18>
	}
	return 0;
 800e79e:	2300      	movs	r3, #0
}
 800e7a0:	4618      	mov	r0, r3
 800e7a2:	bd80      	pop	{r7, pc}
 800e7a4:	08014f90 	.word	0x08014f90
 800e7a8:	20006900 	.word	0x20006900

0800e7ac <Simcom_Get_Command>:

uint8_t Simcom_Get_Command(command_t *command){
 800e7ac:	b580      	push	{r7, lr}
 800e7ae:	b086      	sub	sp, #24
 800e7b0:	af00      	add	r7, sp, #0
 800e7b2:	6078      	str	r0, [r7, #4]
	osRecursiveMutexWait(SimcomRecMutexHandle, osWaitForever);
 800e7b4:	4b3f      	ldr	r3, [pc, #252]	; (800e8b4 <Simcom_Get_Command+0x108>)
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	f04f 31ff 	mov.w	r1, #4294967295
 800e7bc:	4618      	mov	r0, r3
 800e7be:	f7f9 f836 	bl	800782e <osRecursiveMutexWait>

	uint8_t ret = 0;
 800e7c2:	2300      	movs	r3, #0
 800e7c4:	75fb      	strb	r3, [r7, #23]
	char *start, *delim, *end;

	if(Simcom_Send("AT+CIPRXGET=2,0\r", 0)){
 800e7c6:	2100      	movs	r1, #0
 800e7c8:	483b      	ldr	r0, [pc, #236]	; (800e8b8 <Simcom_Get_Command+0x10c>)
 800e7ca:	f7ff fbed 	bl	800dfa8 <Simcom_Send>
 800e7ce:	4603      	mov	r3, r0
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d065      	beq.n	800e8a0 <Simcom_Get_Command+0xf4>
		// get pointer reference
		start = strstr(SIMCOM_UART_RX_Buffer, "AT$");
 800e7d4:	4939      	ldr	r1, [pc, #228]	; (800e8bc <Simcom_Get_Command+0x110>)
 800e7d6:	483a      	ldr	r0, [pc, #232]	; (800e8c0 <Simcom_Get_Command+0x114>)
 800e7d8:	f002 fe06 	bl	80113e8 <strstr>
 800e7dc:	6138      	str	r0, [r7, #16]
		end   = strstr(start, "\r\n\r\n");
 800e7de:	4939      	ldr	r1, [pc, #228]	; (800e8c4 <Simcom_Get_Command+0x118>)
 800e7e0:	6938      	ldr	r0, [r7, #16]
 800e7e2:	f002 fe01 	bl	80113e8 <strstr>
 800e7e6:	60f8      	str	r0, [r7, #12]
		delim = strchr(start, '=');
 800e7e8:	213d      	movs	r1, #61	; 0x3d
 800e7ea:	6938      	ldr	r0, [r7, #16]
 800e7ec:	f002 fdc0 	bl	8011370 <strchr>
 800e7f0:	60b8      	str	r0, [r7, #8]

		// check if command has value
		if(delim != NULL){
 800e7f2:	68bb      	ldr	r3, [r7, #8]
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d025      	beq.n	800e844 <Simcom_Get_Command+0x98>
			// get command
			strncpy(command->var, start + 3, delim - (start + 3));
 800e7f8:	6878      	ldr	r0, [r7, #4]
 800e7fa:	693b      	ldr	r3, [r7, #16]
 800e7fc:	1cd9      	adds	r1, r3, #3
 800e7fe:	68bb      	ldr	r3, [r7, #8]
 800e800:	693a      	ldr	r2, [r7, #16]
 800e802:	3203      	adds	r2, #3
 800e804:	1a9b      	subs	r3, r3, r2
 800e806:	461a      	mov	r2, r3
 800e808:	f002 fdd9 	bl	80113be <strncpy>
			*(command->var + (delim - (start + 3))) = '\0';
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	68ba      	ldr	r2, [r7, #8]
 800e810:	6939      	ldr	r1, [r7, #16]
 800e812:	3103      	adds	r1, #3
 800e814:	1a52      	subs	r2, r2, r1
 800e816:	4413      	add	r3, r2
 800e818:	2200      	movs	r2, #0
 800e81a:	701a      	strb	r2, [r3, #0]
			// get value
			strncpy(command->val, delim + 1, end - delim);
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	f103 0014 	add.w	r0, r3, #20
 800e822:	68bb      	ldr	r3, [r7, #8]
 800e824:	1c59      	adds	r1, r3, #1
 800e826:	68fa      	ldr	r2, [r7, #12]
 800e828:	68bb      	ldr	r3, [r7, #8]
 800e82a:	1ad3      	subs	r3, r2, r3
 800e82c:	461a      	mov	r2, r3
 800e82e:	f002 fdc6 	bl	80113be <strncpy>
			*(command->val + (end - delim)) = '\0';
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	3314      	adds	r3, #20
 800e836:	68f9      	ldr	r1, [r7, #12]
 800e838:	68ba      	ldr	r2, [r7, #8]
 800e83a:	1a8a      	subs	r2, r1, r2
 800e83c:	4413      	add	r3, r2
 800e83e:	2200      	movs	r2, #0
 800e840:	701a      	strb	r2, [r3, #0]
 800e842:	e014      	b.n	800e86e <Simcom_Get_Command+0xc2>
		} else {
			// get command
			strncpy(command->var, start + 3, end - (start + 3));
 800e844:	6878      	ldr	r0, [r7, #4]
 800e846:	693b      	ldr	r3, [r7, #16]
 800e848:	1cd9      	adds	r1, r3, #3
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	693a      	ldr	r2, [r7, #16]
 800e84e:	3203      	adds	r2, #3
 800e850:	1a9b      	subs	r3, r3, r2
 800e852:	461a      	mov	r2, r3
 800e854:	f002 fdb3 	bl	80113be <strncpy>
			*(command->var + (end - (start + 3))) = '\0';
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	68fa      	ldr	r2, [r7, #12]
 800e85c:	6939      	ldr	r1, [r7, #16]
 800e85e:	3103      	adds	r1, #3
 800e860:	1a52      	subs	r2, r2, r1
 800e862:	4413      	add	r3, r2
 800e864:	2200      	movs	r2, #0
 800e866:	701a      	strb	r2, [r3, #0]
			// set value
			*(command->val) = '\0';
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	2200      	movs	r2, #0
 800e86c:	751a      	strb	r2, [r3, #20]
		}

		// get full command
		strncpy(command->cmd, start + 3, end - (start + 3));
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	f103 0028 	add.w	r0, r3, #40	; 0x28
 800e874:	693b      	ldr	r3, [r7, #16]
 800e876:	1cd9      	adds	r1, r3, #3
 800e878:	68fb      	ldr	r3, [r7, #12]
 800e87a:	693a      	ldr	r2, [r7, #16]
 800e87c:	3203      	adds	r2, #3
 800e87e:	1a9b      	subs	r3, r3, r2
 800e880:	461a      	mov	r2, r3
 800e882:	f002 fd9c 	bl	80113be <strncpy>
		*(command->cmd + (end - (start + 3))) = '\0';
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	3328      	adds	r3, #40	; 0x28
 800e88a:	68fa      	ldr	r2, [r7, #12]
 800e88c:	6939      	ldr	r1, [r7, #16]
 800e88e:	3103      	adds	r1, #3
 800e890:	1a52      	subs	r2, r2, r1
 800e892:	4413      	add	r3, r2
 800e894:	2200      	movs	r2, #0
 800e896:	701a      	strb	r2, [r3, #0]

		// reset rx buffer
		SIMCOM_Reset_Buffer();
 800e898:	f7fc fb6c 	bl	800af74 <SIMCOM_Reset_Buffer>

		ret = 1;
 800e89c:	2301      	movs	r3, #1
 800e89e:	75fb      	strb	r3, [r7, #23]
	}

	osRecursiveMutexRelease(SimcomRecMutexHandle);
 800e8a0:	4b04      	ldr	r3, [pc, #16]	; (800e8b4 <Simcom_Get_Command+0x108>)
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	4618      	mov	r0, r3
 800e8a6:	f7f8 ffaf 	bl	8007808 <osRecursiveMutexRelease>
	return ret;
 800e8aa:	7dfb      	ldrb	r3, [r7, #23]
}
 800e8ac:	4618      	mov	r0, r3
 800e8ae:	3718      	adds	r7, #24
 800e8b0:	46bd      	mov	sp, r7
 800e8b2:	bd80      	pop	{r7, pc}
 800e8b4:	20008648 	.word	0x20008648
 800e8b8:	08014fa0 	.word	0x08014fa0
 800e8bc:	08014fb4 	.word	0x08014fb4
 800e8c0:	20006900 	.word	0x20006900
 800e8c4:	08014fb8 	.word	0x08014fb8

0800e8c8 <Simcom_Set_Odometer>:

void Simcom_Set_Odometer(uint32_t odom){
 800e8c8:	b580      	push	{r7, lr}
 800e8ca:	b082      	sub	sp, #8
 800e8cc:	af00      	add	r7, sp, #0
 800e8ce:	6078      	str	r0, [r7, #4]
	sim.data.odometer = odom;
 800e8d0:	4a04      	ldr	r2, [pc, #16]	; (800e8e4 <Simcom_Set_Odometer+0x1c>)
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	6253      	str	r3, [r2, #36]	; 0x24
	Flash_Save_Odometer(odom);
 800e8d6:	6878      	ldr	r0, [r7, #4]
 800e8d8:	f7fd fef6 	bl	800c6c8 <Flash_Save_Odometer>
}
 800e8dc:	bf00      	nop
 800e8de:	3708      	adds	r7, #8
 800e8e0:	46bd      	mov	sp, r7
 800e8e2:	bd80      	pop	{r7, pc}
 800e8e4:	20007f94 	.word	0x20007f94

0800e8e8 <cs43l22_Init>:
 * @param OutputDevice: can be OUTPUT_DEVICE_SPEAKER, OUTPUT_DEVICE_HEADPHONE,
 *                       OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO .
 * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
 * @retval 0 if correct communication, else wrong communication
 */
uint32_t cs43l22_Init(uint16_t DeviceAddr, uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq) {
 800e8e8:	b580      	push	{r7, lr}
 800e8ea:	b086      	sub	sp, #24
 800e8ec:	af00      	add	r7, sp, #0
 800e8ee:	607b      	str	r3, [r7, #4]
 800e8f0:	4603      	mov	r3, r0
 800e8f2:	81fb      	strh	r3, [r7, #14]
 800e8f4:	460b      	mov	r3, r1
 800e8f6:	81bb      	strh	r3, [r7, #12]
 800e8f8:	4613      	mov	r3, r2
 800e8fa:	72fb      	strb	r3, [r7, #11]
	uint32_t counter = 0;
 800e8fc:	2300      	movs	r3, #0
 800e8fe:	617b      	str	r3, [r7, #20]

	/* Initialize the Control interface of the Audio Codec */
	AUDIO_IO_Init();
 800e900:	f001 fbfa 	bl	80100f8 <AUDIO_IO_Init>

	/* Keep Codec powered OFF */
	counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);
 800e904:	89fb      	ldrh	r3, [r7, #14]
 800e906:	b2db      	uxtb	r3, r3
 800e908:	2201      	movs	r2, #1
 800e90a:	2102      	movs	r1, #2
 800e90c:	4618      	mov	r0, r3
 800e90e:	f000 fb60 	bl	800efd2 <CODEC_IO_Write>
 800e912:	4603      	mov	r3, r0
 800e914:	461a      	mov	r2, r3
 800e916:	697b      	ldr	r3, [r7, #20]
 800e918:	4413      	add	r3, r2
 800e91a:	617b      	str	r3, [r7, #20]

	/*Save Output device for mute ON/OFF procedure*/
	switch (OutputDevice) {
 800e91c:	89bb      	ldrh	r3, [r7, #12]
 800e91e:	3b01      	subs	r3, #1
 800e920:	2b03      	cmp	r3, #3
 800e922:	d81b      	bhi.n	800e95c <cs43l22_Init+0x74>
 800e924:	a201      	add	r2, pc, #4	; (adr r2, 800e92c <cs43l22_Init+0x44>)
 800e926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e92a:	bf00      	nop
 800e92c:	0800e93d 	.word	0x0800e93d
 800e930:	0800e945 	.word	0x0800e945
 800e934:	0800e94d 	.word	0x0800e94d
 800e938:	0800e955 	.word	0x0800e955
		case OUTPUT_DEVICE_SPEAKER:
			OutputDev = 0xFA;
 800e93c:	4b5b      	ldr	r3, [pc, #364]	; (800eaac <cs43l22_Init+0x1c4>)
 800e93e:	22fa      	movs	r2, #250	; 0xfa
 800e940:	701a      	strb	r2, [r3, #0]
			break;
 800e942:	e00f      	b.n	800e964 <cs43l22_Init+0x7c>

		case OUTPUT_DEVICE_HEADPHONE:
			OutputDev = 0xAF;
 800e944:	4b59      	ldr	r3, [pc, #356]	; (800eaac <cs43l22_Init+0x1c4>)
 800e946:	22af      	movs	r2, #175	; 0xaf
 800e948:	701a      	strb	r2, [r3, #0]
			break;
 800e94a:	e00b      	b.n	800e964 <cs43l22_Init+0x7c>

		case OUTPUT_DEVICE_BOTH:
			OutputDev = 0xAA;
 800e94c:	4b57      	ldr	r3, [pc, #348]	; (800eaac <cs43l22_Init+0x1c4>)
 800e94e:	22aa      	movs	r2, #170	; 0xaa
 800e950:	701a      	strb	r2, [r3, #0]
			break;
 800e952:	e007      	b.n	800e964 <cs43l22_Init+0x7c>

		case OUTPUT_DEVICE_AUTO:
			OutputDev = 0x05;
 800e954:	4b55      	ldr	r3, [pc, #340]	; (800eaac <cs43l22_Init+0x1c4>)
 800e956:	2205      	movs	r2, #5
 800e958:	701a      	strb	r2, [r3, #0]
			break;
 800e95a:	e003      	b.n	800e964 <cs43l22_Init+0x7c>

		default:
			OutputDev = 0x05;
 800e95c:	4b53      	ldr	r3, [pc, #332]	; (800eaac <cs43l22_Init+0x1c4>)
 800e95e:	2205      	movs	r2, #5
 800e960:	701a      	strb	r2, [r3, #0]
			break;
 800e962:	bf00      	nop
	}

	counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 800e964:	89fb      	ldrh	r3, [r7, #14]
 800e966:	b2d8      	uxtb	r0, r3
 800e968:	4b50      	ldr	r3, [pc, #320]	; (800eaac <cs43l22_Init+0x1c4>)
 800e96a:	781b      	ldrb	r3, [r3, #0]
 800e96c:	b2db      	uxtb	r3, r3
 800e96e:	461a      	mov	r2, r3
 800e970:	2104      	movs	r1, #4
 800e972:	f000 fb2e 	bl	800efd2 <CODEC_IO_Write>
 800e976:	4603      	mov	r3, r0
 800e978:	461a      	mov	r2, r3
 800e97a:	697b      	ldr	r3, [r7, #20]
 800e97c:	4413      	add	r3, r2
 800e97e:	617b      	str	r3, [r7, #20]

	/* Clock configuration: Auto detection */
	counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_CLOCKING_CTL, 0x81);
 800e980:	89fb      	ldrh	r3, [r7, #14]
 800e982:	b2db      	uxtb	r3, r3
 800e984:	2281      	movs	r2, #129	; 0x81
 800e986:	2105      	movs	r1, #5
 800e988:	4618      	mov	r0, r3
 800e98a:	f000 fb22 	bl	800efd2 <CODEC_IO_Write>
 800e98e:	4603      	mov	r3, r0
 800e990:	461a      	mov	r2, r3
 800e992:	697b      	ldr	r3, [r7, #20]
 800e994:	4413      	add	r3, r2
 800e996:	617b      	str	r3, [r7, #20]

	/* Set the Slave Mode and the audio Standard */
	counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_INTERFACE_CTL1, CODEC_STANDARD);
 800e998:	89fb      	ldrh	r3, [r7, #14]
 800e99a:	b2db      	uxtb	r3, r3
 800e99c:	2204      	movs	r2, #4
 800e99e:	2106      	movs	r1, #6
 800e9a0:	4618      	mov	r0, r3
 800e9a2:	f000 fb16 	bl	800efd2 <CODEC_IO_Write>
 800e9a6:	4603      	mov	r3, r0
 800e9a8:	461a      	mov	r2, r3
 800e9aa:	697b      	ldr	r3, [r7, #20]
 800e9ac:	4413      	add	r3, r2
 800e9ae:	617b      	str	r3, [r7, #20]

	/* Set the Master volume */
	counter += cs43l22_SetVolume(DeviceAddr, Volume);
 800e9b0:	7afa      	ldrb	r2, [r7, #11]
 800e9b2:	89fb      	ldrh	r3, [r7, #14]
 800e9b4:	4611      	mov	r1, r2
 800e9b6:	4618      	mov	r0, r3
 800e9b8:	f000 f964 	bl	800ec84 <cs43l22_SetVolume>
 800e9bc:	4602      	mov	r2, r0
 800e9be:	697b      	ldr	r3, [r7, #20]
 800e9c0:	4413      	add	r3, r2
 800e9c2:	617b      	str	r3, [r7, #20]

	/* If the Speaker is enabled, set the Mono mode and volume attenuation level */
	if (OutputDevice != OUTPUT_DEVICE_HEADPHONE) {
 800e9c4:	89bb      	ldrh	r3, [r7, #12]
 800e9c6:	2b02      	cmp	r3, #2
 800e9c8:	d023      	beq.n	800ea12 <cs43l22_Init+0x12a>
		/* Set the Speaker Mono mode */
		counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PLAYBACK_CTL2, 0x06);
 800e9ca:	89fb      	ldrh	r3, [r7, #14]
 800e9cc:	b2db      	uxtb	r3, r3
 800e9ce:	2206      	movs	r2, #6
 800e9d0:	210f      	movs	r1, #15
 800e9d2:	4618      	mov	r0, r3
 800e9d4:	f000 fafd 	bl	800efd2 <CODEC_IO_Write>
 800e9d8:	4603      	mov	r3, r0
 800e9da:	461a      	mov	r2, r3
 800e9dc:	697b      	ldr	r3, [r7, #20]
 800e9de:	4413      	add	r3, r2
 800e9e0:	617b      	str	r3, [r7, #20]

		/* Set the Speaker attenuation level */
		counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_A_VOL, 0x00);
 800e9e2:	89fb      	ldrh	r3, [r7, #14]
 800e9e4:	b2db      	uxtb	r3, r3
 800e9e6:	2200      	movs	r2, #0
 800e9e8:	2124      	movs	r1, #36	; 0x24
 800e9ea:	4618      	mov	r0, r3
 800e9ec:	f000 faf1 	bl	800efd2 <CODEC_IO_Write>
 800e9f0:	4603      	mov	r3, r0
 800e9f2:	461a      	mov	r2, r3
 800e9f4:	697b      	ldr	r3, [r7, #20]
 800e9f6:	4413      	add	r3, r2
 800e9f8:	617b      	str	r3, [r7, #20]
		counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_B_VOL, 0x00);
 800e9fa:	89fb      	ldrh	r3, [r7, #14]
 800e9fc:	b2db      	uxtb	r3, r3
 800e9fe:	2200      	movs	r2, #0
 800ea00:	2125      	movs	r1, #37	; 0x25
 800ea02:	4618      	mov	r0, r3
 800ea04:	f000 fae5 	bl	800efd2 <CODEC_IO_Write>
 800ea08:	4603      	mov	r3, r0
 800ea0a:	461a      	mov	r2, r3
 800ea0c:	697b      	ldr	r3, [r7, #20]
 800ea0e:	4413      	add	r3, r2
 800ea10:	617b      	str	r3, [r7, #20]
	 off the I2S peripheral MCLK clock (which is the operating clock for Codec).
	 If this delay is not inserted, then the codec will not shut down properly and
	 it results in high noise after shut down. */

	/* Disable the analog soft ramp */
	counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_ANALOG_ZC_SR_SETT, 0x00);
 800ea12:	89fb      	ldrh	r3, [r7, #14]
 800ea14:	b2db      	uxtb	r3, r3
 800ea16:	2200      	movs	r2, #0
 800ea18:	210a      	movs	r1, #10
 800ea1a:	4618      	mov	r0, r3
 800ea1c:	f000 fad9 	bl	800efd2 <CODEC_IO_Write>
 800ea20:	4603      	mov	r3, r0
 800ea22:	461a      	mov	r2, r3
 800ea24:	697b      	ldr	r3, [r7, #20]
 800ea26:	4413      	add	r3, r2
 800ea28:	617b      	str	r3, [r7, #20]
	/* Disable the digital soft ramp */
	counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 800ea2a:	89fb      	ldrh	r3, [r7, #14]
 800ea2c:	b2db      	uxtb	r3, r3
 800ea2e:	2204      	movs	r2, #4
 800ea30:	210e      	movs	r1, #14
 800ea32:	4618      	mov	r0, r3
 800ea34:	f000 facd 	bl	800efd2 <CODEC_IO_Write>
 800ea38:	4603      	mov	r3, r0
 800ea3a:	461a      	mov	r2, r3
 800ea3c:	697b      	ldr	r3, [r7, #20]
 800ea3e:	4413      	add	r3, r2
 800ea40:	617b      	str	r3, [r7, #20]
	/* Disable the limiter attack level */
	counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_LIMIT_CTL1, 0x00);
 800ea42:	89fb      	ldrh	r3, [r7, #14]
 800ea44:	b2db      	uxtb	r3, r3
 800ea46:	2200      	movs	r2, #0
 800ea48:	2127      	movs	r1, #39	; 0x27
 800ea4a:	4618      	mov	r0, r3
 800ea4c:	f000 fac1 	bl	800efd2 <CODEC_IO_Write>
 800ea50:	4603      	mov	r3, r0
 800ea52:	461a      	mov	r2, r3
 800ea54:	697b      	ldr	r3, [r7, #20]
 800ea56:	4413      	add	r3, r2
 800ea58:	617b      	str	r3, [r7, #20]
	/* Adjust Bass and Treble levels */
	counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_TONE_CTL, 0x0F);
 800ea5a:	89fb      	ldrh	r3, [r7, #14]
 800ea5c:	b2db      	uxtb	r3, r3
 800ea5e:	220f      	movs	r2, #15
 800ea60:	211f      	movs	r1, #31
 800ea62:	4618      	mov	r0, r3
 800ea64:	f000 fab5 	bl	800efd2 <CODEC_IO_Write>
 800ea68:	4603      	mov	r3, r0
 800ea6a:	461a      	mov	r2, r3
 800ea6c:	697b      	ldr	r3, [r7, #20]
 800ea6e:	4413      	add	r3, r2
 800ea70:	617b      	str	r3, [r7, #20]
	/* Adjust PCM volume level */
	counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMA_VOL, 0x0A);
 800ea72:	89fb      	ldrh	r3, [r7, #14]
 800ea74:	b2db      	uxtb	r3, r3
 800ea76:	220a      	movs	r2, #10
 800ea78:	211a      	movs	r1, #26
 800ea7a:	4618      	mov	r0, r3
 800ea7c:	f000 faa9 	bl	800efd2 <CODEC_IO_Write>
 800ea80:	4603      	mov	r3, r0
 800ea82:	461a      	mov	r2, r3
 800ea84:	697b      	ldr	r3, [r7, #20]
 800ea86:	4413      	add	r3, r2
 800ea88:	617b      	str	r3, [r7, #20]
	counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMB_VOL, 0x0A);
 800ea8a:	89fb      	ldrh	r3, [r7, #14]
 800ea8c:	b2db      	uxtb	r3, r3
 800ea8e:	220a      	movs	r2, #10
 800ea90:	211b      	movs	r1, #27
 800ea92:	4618      	mov	r0, r3
 800ea94:	f000 fa9d 	bl	800efd2 <CODEC_IO_Write>
 800ea98:	4603      	mov	r3, r0
 800ea9a:	461a      	mov	r2, r3
 800ea9c:	697b      	ldr	r3, [r7, #20]
 800ea9e:	4413      	add	r3, r2
 800eaa0:	617b      	str	r3, [r7, #20]

	/* Return communication control value */
	return counter;
 800eaa2:	697b      	ldr	r3, [r7, #20]
}
 800eaa4:	4618      	mov	r0, r3
 800eaa6:	3718      	adds	r7, #24
 800eaa8:	46bd      	mov	sp, r7
 800eaaa:	bd80      	pop	{r7, pc}
 800eaac:	2000653a 	.word	0x2000653a

0800eab0 <cs43l22_DeInit>:
/**
 * @brief  Deinitializes the audio codec.
 * @param  None
 * @retval  None
 */
void cs43l22_DeInit(void) {
 800eab0:	b580      	push	{r7, lr}
 800eab2:	af00      	add	r7, sp, #0
	/* Deinitialize Audio Codec interface */
	AUDIO_IO_DeInit();
 800eab4:	f001 fb58 	bl	8010168 <AUDIO_IO_DeInit>
}
 800eab8:	bf00      	nop
 800eaba:	bd80      	pop	{r7, pc}

0800eabc <cs43l22_ReadID>:
/**
 * @brief  Get the CS43L22 ID.
 * @param DeviceAddr: Device address on communication Bus.   
 * @retval The CS43L22 ID 
 */
uint32_t cs43l22_ReadID(uint16_t DeviceAddr) {
 800eabc:	b580      	push	{r7, lr}
 800eabe:	b084      	sub	sp, #16
 800eac0:	af00      	add	r7, sp, #0
 800eac2:	4603      	mov	r3, r0
 800eac4:	80fb      	strh	r3, [r7, #6]
	uint8_t Value;
	/* Initialize the Control interface of the Audio Codec */
	AUDIO_IO_Init();
 800eac6:	f001 fb17 	bl	80100f8 <AUDIO_IO_Init>

	Value = AUDIO_IO_Read(DeviceAddr, CS43L22_CHIPID_ADDR);
 800eaca:	88fb      	ldrh	r3, [r7, #6]
 800eacc:	b2db      	uxtb	r3, r3
 800eace:	2101      	movs	r1, #1
 800ead0:	4618      	mov	r0, r3
 800ead2:	f001 fb63 	bl	801019c <AUDIO_IO_Read>
 800ead6:	4603      	mov	r3, r0
 800ead8:	73fb      	strb	r3, [r7, #15]
	Value = (Value & CS43L22_ID_MASK);
 800eada:	7bfb      	ldrb	r3, [r7, #15]
 800eadc:	f023 0307 	bic.w	r3, r3, #7
 800eae0:	73fb      	strb	r3, [r7, #15]

	return ((uint32_t) Value);
 800eae2:	7bfb      	ldrb	r3, [r7, #15]
}
 800eae4:	4618      	mov	r0, r3
 800eae6:	3710      	adds	r7, #16
 800eae8:	46bd      	mov	sp, r7
 800eaea:	bd80      	pop	{r7, pc}

0800eaec <cs43l22_Play>:
 * @brief Start the audio Codec play feature.
 * @note For this codec no Play options are required.
 * @param DeviceAddr: Device address on communication Bus.   
 * @retval 0 if correct communication, else wrong communication
 */
uint32_t cs43l22_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size) {
 800eaec:	b580      	push	{r7, lr}
 800eaee:	b084      	sub	sp, #16
 800eaf0:	af00      	add	r7, sp, #0
 800eaf2:	4603      	mov	r3, r0
 800eaf4:	6039      	str	r1, [r7, #0]
 800eaf6:	80fb      	strh	r3, [r7, #6]
 800eaf8:	4613      	mov	r3, r2
 800eafa:	80bb      	strh	r3, [r7, #4]
	uint32_t counter = 0;
 800eafc:	2300      	movs	r3, #0
 800eafe:	60fb      	str	r3, [r7, #12]

	if (Is_cs43l22_Stop == 1) {
 800eb00:	4b16      	ldr	r3, [pc, #88]	; (800eb5c <cs43l22_Play+0x70>)
 800eb02:	781b      	ldrb	r3, [r3, #0]
 800eb04:	2b01      	cmp	r3, #1
 800eb06:	d123      	bne.n	800eb50 <cs43l22_Play+0x64>
		/* Enable the digital soft ramp */
		counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x06);
 800eb08:	88fb      	ldrh	r3, [r7, #6]
 800eb0a:	b2db      	uxtb	r3, r3
 800eb0c:	2206      	movs	r2, #6
 800eb0e:	210e      	movs	r1, #14
 800eb10:	4618      	mov	r0, r3
 800eb12:	f000 fa5e 	bl	800efd2 <CODEC_IO_Write>
 800eb16:	4603      	mov	r3, r0
 800eb18:	461a      	mov	r2, r3
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	4413      	add	r3, r2
 800eb1e:	60fb      	str	r3, [r7, #12]

		/* Enable Output device */
		counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 800eb20:	88fb      	ldrh	r3, [r7, #6]
 800eb22:	2100      	movs	r1, #0
 800eb24:	4618      	mov	r0, r3
 800eb26:	f000 f919 	bl	800ed5c <cs43l22_SetMute>
 800eb2a:	4602      	mov	r2, r0
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	4413      	add	r3, r2
 800eb30:	60fb      	str	r3, [r7, #12]

		/* Power on the Codec */
		counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E);
 800eb32:	88fb      	ldrh	r3, [r7, #6]
 800eb34:	b2db      	uxtb	r3, r3
 800eb36:	229e      	movs	r2, #158	; 0x9e
 800eb38:	2102      	movs	r1, #2
 800eb3a:	4618      	mov	r0, r3
 800eb3c:	f000 fa49 	bl	800efd2 <CODEC_IO_Write>
 800eb40:	4603      	mov	r3, r0
 800eb42:	461a      	mov	r2, r3
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	4413      	add	r3, r2
 800eb48:	60fb      	str	r3, [r7, #12]
		Is_cs43l22_Stop = 0;
 800eb4a:	4b04      	ldr	r3, [pc, #16]	; (800eb5c <cs43l22_Play+0x70>)
 800eb4c:	2200      	movs	r2, #0
 800eb4e:	701a      	strb	r2, [r3, #0]
	}

	/* Return communication control value */
	return counter;
 800eb50:	68fb      	ldr	r3, [r7, #12]
}
 800eb52:	4618      	mov	r0, r3
 800eb54:	3710      	adds	r7, #16
 800eb56:	46bd      	mov	sp, r7
 800eb58:	bd80      	pop	{r7, pc}
 800eb5a:	bf00      	nop
 800eb5c:	20000044 	.word	0x20000044

0800eb60 <cs43l22_Pause>:
/**
 * @brief Pauses playing on the audio codec.
 * @param DeviceAddr: Device address on communication Bus. 
 * @retval 0 if correct communication, else wrong communication
 */
uint32_t cs43l22_Pause(uint16_t DeviceAddr) {
 800eb60:	b580      	push	{r7, lr}
 800eb62:	b084      	sub	sp, #16
 800eb64:	af00      	add	r7, sp, #0
 800eb66:	4603      	mov	r3, r0
 800eb68:	80fb      	strh	r3, [r7, #6]
	uint32_t counter = 0;
 800eb6a:	2300      	movs	r3, #0
 800eb6c:	60fb      	str	r3, [r7, #12]

	/* Pause the audio file playing */
	/* Mute the output first */
	counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 800eb6e:	88fb      	ldrh	r3, [r7, #6]
 800eb70:	2101      	movs	r1, #1
 800eb72:	4618      	mov	r0, r3
 800eb74:	f000 f8f2 	bl	800ed5c <cs43l22_SetMute>
 800eb78:	4602      	mov	r2, r0
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	4413      	add	r3, r2
 800eb7e:	60fb      	str	r3, [r7, #12]

	/* Put the Codec in Power save mode */
	counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);
 800eb80:	88fb      	ldrh	r3, [r7, #6]
 800eb82:	b2db      	uxtb	r3, r3
 800eb84:	2201      	movs	r2, #1
 800eb86:	2102      	movs	r1, #2
 800eb88:	4618      	mov	r0, r3
 800eb8a:	f000 fa22 	bl	800efd2 <CODEC_IO_Write>
 800eb8e:	4603      	mov	r3, r0
 800eb90:	461a      	mov	r2, r3
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	4413      	add	r3, r2
 800eb96:	60fb      	str	r3, [r7, #12]

	return counter;
 800eb98:	68fb      	ldr	r3, [r7, #12]
}
 800eb9a:	4618      	mov	r0, r3
 800eb9c:	3710      	adds	r7, #16
 800eb9e:	46bd      	mov	sp, r7
 800eba0:	bd80      	pop	{r7, pc}
	...

0800eba4 <cs43l22_Resume>:
/**
 * @brief Resumes playing on the audio codec.
 * @param DeviceAddr: Device address on communication Bus. 
 * @retval 0 if correct communication, else wrong communication
 */
uint32_t cs43l22_Resume(uint16_t DeviceAddr) {
 800eba4:	b580      	push	{r7, lr}
 800eba6:	b084      	sub	sp, #16
 800eba8:	af00      	add	r7, sp, #0
 800ebaa:	4603      	mov	r3, r0
 800ebac:	80fb      	strh	r3, [r7, #6]
	uint32_t counter = 0;
 800ebae:	2300      	movs	r3, #0
 800ebb0:	60fb      	str	r3, [r7, #12]
	volatile uint32_t index = 0x00;
 800ebb2:	2300      	movs	r3, #0
 800ebb4:	60bb      	str	r3, [r7, #8]
	/* Resumes the audio file playing */
	/* Unmute the output first */
	counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 800ebb6:	88fb      	ldrh	r3, [r7, #6]
 800ebb8:	2100      	movs	r1, #0
 800ebba:	4618      	mov	r0, r3
 800ebbc:	f000 f8ce 	bl	800ed5c <cs43l22_SetMute>
 800ebc0:	4602      	mov	r2, r0
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	4413      	add	r3, r2
 800ebc6:	60fb      	str	r3, [r7, #12]

	for (index = 0x00; index < 0xFF; index++)
 800ebc8:	2300      	movs	r3, #0
 800ebca:	60bb      	str	r3, [r7, #8]
 800ebcc:	e002      	b.n	800ebd4 <cs43l22_Resume+0x30>
 800ebce:	68bb      	ldr	r3, [r7, #8]
 800ebd0:	3301      	adds	r3, #1
 800ebd2:	60bb      	str	r3, [r7, #8]
 800ebd4:	68bb      	ldr	r3, [r7, #8]
 800ebd6:	2bfe      	cmp	r3, #254	; 0xfe
 800ebd8:	d9f9      	bls.n	800ebce <cs43l22_Resume+0x2a>
		;

	counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 800ebda:	88fb      	ldrh	r3, [r7, #6]
 800ebdc:	b2d8      	uxtb	r0, r3
 800ebde:	4b0e      	ldr	r3, [pc, #56]	; (800ec18 <cs43l22_Resume+0x74>)
 800ebe0:	781b      	ldrb	r3, [r3, #0]
 800ebe2:	b2db      	uxtb	r3, r3
 800ebe4:	461a      	mov	r2, r3
 800ebe6:	2104      	movs	r1, #4
 800ebe8:	f000 f9f3 	bl	800efd2 <CODEC_IO_Write>
 800ebec:	4603      	mov	r3, r0
 800ebee:	461a      	mov	r2, r3
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	4413      	add	r3, r2
 800ebf4:	60fb      	str	r3, [r7, #12]

	/* Exit the Power save mode */
	counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E);
 800ebf6:	88fb      	ldrh	r3, [r7, #6]
 800ebf8:	b2db      	uxtb	r3, r3
 800ebfa:	229e      	movs	r2, #158	; 0x9e
 800ebfc:	2102      	movs	r1, #2
 800ebfe:	4618      	mov	r0, r3
 800ec00:	f000 f9e7 	bl	800efd2 <CODEC_IO_Write>
 800ec04:	4603      	mov	r3, r0
 800ec06:	461a      	mov	r2, r3
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	4413      	add	r3, r2
 800ec0c:	60fb      	str	r3, [r7, #12]

	return counter;
 800ec0e:	68fb      	ldr	r3, [r7, #12]
}
 800ec10:	4618      	mov	r0, r3
 800ec12:	3710      	adds	r7, #16
 800ec14:	46bd      	mov	sp, r7
 800ec16:	bd80      	pop	{r7, pc}
 800ec18:	2000653a 	.word	0x2000653a

0800ec1c <cs43l22_Stop>:
 *                           mode, the codec is set to default configuration 
 *                           (user should re-Initialize the codec in order to 
 *                            play again the audio stream).
 * @retval 0 if correct communication, else wrong communication
 */
uint32_t cs43l22_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode) {
 800ec1c:	b580      	push	{r7, lr}
 800ec1e:	b084      	sub	sp, #16
 800ec20:	af00      	add	r7, sp, #0
 800ec22:	4603      	mov	r3, r0
 800ec24:	6039      	str	r1, [r7, #0]
 800ec26:	80fb      	strh	r3, [r7, #6]
	uint32_t counter = 0;
 800ec28:	2300      	movs	r3, #0
 800ec2a:	60fb      	str	r3, [r7, #12]

	/* Mute the output first */
	counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 800ec2c:	88fb      	ldrh	r3, [r7, #6]
 800ec2e:	2101      	movs	r1, #1
 800ec30:	4618      	mov	r0, r3
 800ec32:	f000 f893 	bl	800ed5c <cs43l22_SetMute>
 800ec36:	4602      	mov	r2, r0
 800ec38:	68fb      	ldr	r3, [r7, #12]
 800ec3a:	4413      	add	r3, r2
 800ec3c:	60fb      	str	r3, [r7, #12]

	/* Disable the digital soft ramp */
	counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 800ec3e:	88fb      	ldrh	r3, [r7, #6]
 800ec40:	b2db      	uxtb	r3, r3
 800ec42:	2204      	movs	r2, #4
 800ec44:	210e      	movs	r1, #14
 800ec46:	4618      	mov	r0, r3
 800ec48:	f000 f9c3 	bl	800efd2 <CODEC_IO_Write>
 800ec4c:	4603      	mov	r3, r0
 800ec4e:	461a      	mov	r2, r3
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	4413      	add	r3, r2
 800ec54:	60fb      	str	r3, [r7, #12]

	/* Power down the DAC and the speaker (PMDAC and PMSPK bits)*/
	counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9F);
 800ec56:	88fb      	ldrh	r3, [r7, #6]
 800ec58:	b2db      	uxtb	r3, r3
 800ec5a:	229f      	movs	r2, #159	; 0x9f
 800ec5c:	2102      	movs	r1, #2
 800ec5e:	4618      	mov	r0, r3
 800ec60:	f000 f9b7 	bl	800efd2 <CODEC_IO_Write>
 800ec64:	4603      	mov	r3, r0
 800ec66:	461a      	mov	r2, r3
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	4413      	add	r3, r2
 800ec6c:	60fb      	str	r3, [r7, #12]

	Is_cs43l22_Stop = 1;
 800ec6e:	4b04      	ldr	r3, [pc, #16]	; (800ec80 <cs43l22_Stop+0x64>)
 800ec70:	2201      	movs	r2, #1
 800ec72:	701a      	strb	r2, [r3, #0]
	return counter;
 800ec74:	68fb      	ldr	r3, [r7, #12]
}
 800ec76:	4618      	mov	r0, r3
 800ec78:	3710      	adds	r7, #16
 800ec7a:	46bd      	mov	sp, r7
 800ec7c:	bd80      	pop	{r7, pc}
 800ec7e:	bf00      	nop
 800ec80:	20000044 	.word	0x20000044

0800ec84 <cs43l22_SetVolume>:
 * @param Volume: a byte value from 0 to 255 (refer to codec registers 
 *                description for more details).
 *         
 * @retval 0 if correct communication, else wrong communication
 */
uint32_t cs43l22_SetVolume(uint16_t DeviceAddr, uint8_t Volume) {
 800ec84:	b580      	push	{r7, lr}
 800ec86:	b084      	sub	sp, #16
 800ec88:	af00      	add	r7, sp, #0
 800ec8a:	4603      	mov	r3, r0
 800ec8c:	460a      	mov	r2, r1
 800ec8e:	80fb      	strh	r3, [r7, #6]
 800ec90:	4613      	mov	r3, r2
 800ec92:	717b      	strb	r3, [r7, #5]
	uint32_t counter = 0;
 800ec94:	2300      	movs	r3, #0
 800ec96:	60fb      	str	r3, [r7, #12]
	uint8_t convertedvol = VOLUME_CONVERT(Volume);
 800ec98:	797b      	ldrb	r3, [r7, #5]
 800ec9a:	2b64      	cmp	r3, #100	; 0x64
 800ec9c:	d80b      	bhi.n	800ecb6 <cs43l22_SetVolume+0x32>
 800ec9e:	797a      	ldrb	r2, [r7, #5]
 800eca0:	4613      	mov	r3, r2
 800eca2:	021b      	lsls	r3, r3, #8
 800eca4:	1a9b      	subs	r3, r3, r2
 800eca6:	4a25      	ldr	r2, [pc, #148]	; (800ed3c <cs43l22_SetVolume+0xb8>)
 800eca8:	fb82 1203 	smull	r1, r2, r2, r3
 800ecac:	1152      	asrs	r2, r2, #5
 800ecae:	17db      	asrs	r3, r3, #31
 800ecb0:	1ad3      	subs	r3, r2, r3
 800ecb2:	b2db      	uxtb	r3, r3
 800ecb4:	e000      	b.n	800ecb8 <cs43l22_SetVolume+0x34>
 800ecb6:	23ff      	movs	r3, #255	; 0xff
 800ecb8:	72fb      	strb	r3, [r7, #11]

	if (convertedvol > 0xE6) {
 800ecba:	7afb      	ldrb	r3, [r7, #11]
 800ecbc:	2be6      	cmp	r3, #230	; 0xe6
 800ecbe:	d91c      	bls.n	800ecfa <cs43l22_SetVolume+0x76>
		/* Set the Master volume */
		counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol - 0xE7);
 800ecc0:	88fb      	ldrh	r3, [r7, #6]
 800ecc2:	b2d8      	uxtb	r0, r3
 800ecc4:	7afb      	ldrb	r3, [r7, #11]
 800ecc6:	3319      	adds	r3, #25
 800ecc8:	b2db      	uxtb	r3, r3
 800ecca:	461a      	mov	r2, r3
 800eccc:	2120      	movs	r1, #32
 800ecce:	f000 f980 	bl	800efd2 <CODEC_IO_Write>
 800ecd2:	4603      	mov	r3, r0
 800ecd4:	461a      	mov	r2, r3
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	4413      	add	r3, r2
 800ecda:	60fb      	str	r3, [r7, #12]
		counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol - 0xE7);
 800ecdc:	88fb      	ldrh	r3, [r7, #6]
 800ecde:	b2d8      	uxtb	r0, r3
 800ece0:	7afb      	ldrb	r3, [r7, #11]
 800ece2:	3319      	adds	r3, #25
 800ece4:	b2db      	uxtb	r3, r3
 800ece6:	461a      	mov	r2, r3
 800ece8:	2121      	movs	r1, #33	; 0x21
 800ecea:	f000 f972 	bl	800efd2 <CODEC_IO_Write>
 800ecee:	4603      	mov	r3, r0
 800ecf0:	461a      	mov	r2, r3
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	4413      	add	r3, r2
 800ecf6:	60fb      	str	r3, [r7, #12]
 800ecf8:	e01b      	b.n	800ed32 <cs43l22_SetVolume+0xae>
	} else {
		/* Set the Master volume */
		counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol + 0x19);
 800ecfa:	88fb      	ldrh	r3, [r7, #6]
 800ecfc:	b2d8      	uxtb	r0, r3
 800ecfe:	7afb      	ldrb	r3, [r7, #11]
 800ed00:	3319      	adds	r3, #25
 800ed02:	b2db      	uxtb	r3, r3
 800ed04:	461a      	mov	r2, r3
 800ed06:	2120      	movs	r1, #32
 800ed08:	f000 f963 	bl	800efd2 <CODEC_IO_Write>
 800ed0c:	4603      	mov	r3, r0
 800ed0e:	461a      	mov	r2, r3
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	4413      	add	r3, r2
 800ed14:	60fb      	str	r3, [r7, #12]
		counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol + 0x19);
 800ed16:	88fb      	ldrh	r3, [r7, #6]
 800ed18:	b2d8      	uxtb	r0, r3
 800ed1a:	7afb      	ldrb	r3, [r7, #11]
 800ed1c:	3319      	adds	r3, #25
 800ed1e:	b2db      	uxtb	r3, r3
 800ed20:	461a      	mov	r2, r3
 800ed22:	2121      	movs	r1, #33	; 0x21
 800ed24:	f000 f955 	bl	800efd2 <CODEC_IO_Write>
 800ed28:	4603      	mov	r3, r0
 800ed2a:	461a      	mov	r2, r3
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	4413      	add	r3, r2
 800ed30:	60fb      	str	r3, [r7, #12]
	}

	return counter;
 800ed32:	68fb      	ldr	r3, [r7, #12]
}
 800ed34:	4618      	mov	r0, r3
 800ed36:	3710      	adds	r7, #16
 800ed38:	46bd      	mov	sp, r7
 800ed3a:	bd80      	pop	{r7, pc}
 800ed3c:	51eb851f 	.word	0x51eb851f

0800ed40 <cs43l22_SetFrequency>:
 * @brief Sets new frequency.
 * @param DeviceAddr: Device address on communication Bus.   
 * @param AudioFreq: Audio frequency used to play the audio stream.
 * @retval 0 if correct communication, else wrong communication
 */
uint32_t cs43l22_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq) {
 800ed40:	b480      	push	{r7}
 800ed42:	b083      	sub	sp, #12
 800ed44:	af00      	add	r7, sp, #0
 800ed46:	4603      	mov	r3, r0
 800ed48:	6039      	str	r1, [r7, #0]
 800ed4a:	80fb      	strh	r3, [r7, #6]
	return 0;
 800ed4c:	2300      	movs	r3, #0
}
 800ed4e:	4618      	mov	r0, r3
 800ed50:	370c      	adds	r7, #12
 800ed52:	46bd      	mov	sp, r7
 800ed54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed58:	4770      	bx	lr
	...

0800ed5c <cs43l22_SetMute>:
 * @param DeviceAddr: Device address on communication Bus.   
 * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
 *             mute mode.
 * @retval 0 if correct communication, else wrong communication
 */
uint32_t cs43l22_SetMute(uint16_t DeviceAddr, uint32_t Cmd) {
 800ed5c:	b580      	push	{r7, lr}
 800ed5e:	b084      	sub	sp, #16
 800ed60:	af00      	add	r7, sp, #0
 800ed62:	4603      	mov	r3, r0
 800ed64:	6039      	str	r1, [r7, #0]
 800ed66:	80fb      	strh	r3, [r7, #6]
	uint32_t counter = 0;
 800ed68:	2300      	movs	r3, #0
 800ed6a:	60fb      	str	r3, [r7, #12]

	/* Set the Mute mode */
	if (Cmd == AUDIO_MUTE_ON) {
 800ed6c:	683b      	ldr	r3, [r7, #0]
 800ed6e:	2b01      	cmp	r3, #1
 800ed70:	d124      	bne.n	800edbc <cs43l22_SetMute+0x60>
		counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFF);
 800ed72:	88fb      	ldrh	r3, [r7, #6]
 800ed74:	b2db      	uxtb	r3, r3
 800ed76:	22ff      	movs	r2, #255	; 0xff
 800ed78:	2104      	movs	r1, #4
 800ed7a:	4618      	mov	r0, r3
 800ed7c:	f000 f929 	bl	800efd2 <CODEC_IO_Write>
 800ed80:	4603      	mov	r3, r0
 800ed82:	461a      	mov	r2, r3
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	4413      	add	r3, r2
 800ed88:	60fb      	str	r3, [r7, #12]
		counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x01);
 800ed8a:	88fb      	ldrh	r3, [r7, #6]
 800ed8c:	b2db      	uxtb	r3, r3
 800ed8e:	2201      	movs	r2, #1
 800ed90:	2122      	movs	r1, #34	; 0x22
 800ed92:	4618      	mov	r0, r3
 800ed94:	f000 f91d 	bl	800efd2 <CODEC_IO_Write>
 800ed98:	4603      	mov	r3, r0
 800ed9a:	461a      	mov	r2, r3
 800ed9c:	68fb      	ldr	r3, [r7, #12]
 800ed9e:	4413      	add	r3, r2
 800eda0:	60fb      	str	r3, [r7, #12]
		counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x01);
 800eda2:	88fb      	ldrh	r3, [r7, #6]
 800eda4:	b2db      	uxtb	r3, r3
 800eda6:	2201      	movs	r2, #1
 800eda8:	2123      	movs	r1, #35	; 0x23
 800edaa:	4618      	mov	r0, r3
 800edac:	f000 f911 	bl	800efd2 <CODEC_IO_Write>
 800edb0:	4603      	mov	r3, r0
 800edb2:	461a      	mov	r2, r3
 800edb4:	68fb      	ldr	r3, [r7, #12]
 800edb6:	4413      	add	r3, r2
 800edb8:	60fb      	str	r3, [r7, #12]
 800edba:	e025      	b.n	800ee08 <cs43l22_SetMute+0xac>
	} else /* AUDIO_MUTE_OFF Disable the Mute */
	{
		counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x00);
 800edbc:	88fb      	ldrh	r3, [r7, #6]
 800edbe:	b2db      	uxtb	r3, r3
 800edc0:	2200      	movs	r2, #0
 800edc2:	2122      	movs	r1, #34	; 0x22
 800edc4:	4618      	mov	r0, r3
 800edc6:	f000 f904 	bl	800efd2 <CODEC_IO_Write>
 800edca:	4603      	mov	r3, r0
 800edcc:	461a      	mov	r2, r3
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	4413      	add	r3, r2
 800edd2:	60fb      	str	r3, [r7, #12]
		counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x00);
 800edd4:	88fb      	ldrh	r3, [r7, #6]
 800edd6:	b2db      	uxtb	r3, r3
 800edd8:	2200      	movs	r2, #0
 800edda:	2123      	movs	r1, #35	; 0x23
 800eddc:	4618      	mov	r0, r3
 800edde:	f000 f8f8 	bl	800efd2 <CODEC_IO_Write>
 800ede2:	4603      	mov	r3, r0
 800ede4:	461a      	mov	r2, r3
 800ede6:	68fb      	ldr	r3, [r7, #12]
 800ede8:	4413      	add	r3, r2
 800edea:	60fb      	str	r3, [r7, #12]
		counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 800edec:	88fb      	ldrh	r3, [r7, #6]
 800edee:	b2d8      	uxtb	r0, r3
 800edf0:	4b08      	ldr	r3, [pc, #32]	; (800ee14 <cs43l22_SetMute+0xb8>)
 800edf2:	781b      	ldrb	r3, [r3, #0]
 800edf4:	b2db      	uxtb	r3, r3
 800edf6:	461a      	mov	r2, r3
 800edf8:	2104      	movs	r1, #4
 800edfa:	f000 f8ea 	bl	800efd2 <CODEC_IO_Write>
 800edfe:	4603      	mov	r3, r0
 800ee00:	461a      	mov	r2, r3
 800ee02:	68fb      	ldr	r3, [r7, #12]
 800ee04:	4413      	add	r3, r2
 800ee06:	60fb      	str	r3, [r7, #12]
	}
	return counter;
 800ee08:	68fb      	ldr	r3, [r7, #12]
}
 800ee0a:	4618      	mov	r0, r3
 800ee0c:	3710      	adds	r7, #16
 800ee0e:	46bd      	mov	sp, r7
 800ee10:	bd80      	pop	{r7, pc}
 800ee12:	bf00      	nop
 800ee14:	2000653a 	.word	0x2000653a

0800ee18 <cs43l22_SetOutputMode>:
 * @param DeviceAddr: Device address on communication Bus.
 * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
 *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO 
 * @retval 0 if correct communication, else wrong communication
 */
uint32_t cs43l22_SetOutputMode(uint16_t DeviceAddr, uint8_t Output) {
 800ee18:	b580      	push	{r7, lr}
 800ee1a:	b084      	sub	sp, #16
 800ee1c:	af00      	add	r7, sp, #0
 800ee1e:	4603      	mov	r3, r0
 800ee20:	460a      	mov	r2, r1
 800ee22:	80fb      	strh	r3, [r7, #6]
 800ee24:	4613      	mov	r3, r2
 800ee26:	717b      	strb	r3, [r7, #5]
	uint32_t counter = 0;
 800ee28:	2300      	movs	r3, #0
 800ee2a:	60fb      	str	r3, [r7, #12]

	switch (Output) {
 800ee2c:	797b      	ldrb	r3, [r7, #5]
 800ee2e:	3b01      	subs	r3, #1
 800ee30:	2b03      	cmp	r3, #3
 800ee32:	d84b      	bhi.n	800eecc <cs43l22_SetOutputMode+0xb4>
 800ee34:	a201      	add	r2, pc, #4	; (adr r2, 800ee3c <cs43l22_SetOutputMode+0x24>)
 800ee36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee3a:	bf00      	nop
 800ee3c:	0800ee4d 	.word	0x0800ee4d
 800ee40:	0800ee6d 	.word	0x0800ee6d
 800ee44:	0800ee8d 	.word	0x0800ee8d
 800ee48:	0800eead 	.word	0x0800eead
		case OUTPUT_DEVICE_SPEAKER:
			counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFA); /* SPK always ON & HP always OFF */
 800ee4c:	88fb      	ldrh	r3, [r7, #6]
 800ee4e:	b2db      	uxtb	r3, r3
 800ee50:	22fa      	movs	r2, #250	; 0xfa
 800ee52:	2104      	movs	r1, #4
 800ee54:	4618      	mov	r0, r3
 800ee56:	f000 f8bc 	bl	800efd2 <CODEC_IO_Write>
 800ee5a:	4603      	mov	r3, r0
 800ee5c:	461a      	mov	r2, r3
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	4413      	add	r3, r2
 800ee62:	60fb      	str	r3, [r7, #12]
			OutputDev = 0xFA;
 800ee64:	4b24      	ldr	r3, [pc, #144]	; (800eef8 <cs43l22_SetOutputMode+0xe0>)
 800ee66:	22fa      	movs	r2, #250	; 0xfa
 800ee68:	701a      	strb	r2, [r3, #0]
			break;
 800ee6a:	e03f      	b.n	800eeec <cs43l22_SetOutputMode+0xd4>

		case OUTPUT_DEVICE_HEADPHONE:
			counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xAF); /* SPK always OFF & HP always ON */
 800ee6c:	88fb      	ldrh	r3, [r7, #6]
 800ee6e:	b2db      	uxtb	r3, r3
 800ee70:	22af      	movs	r2, #175	; 0xaf
 800ee72:	2104      	movs	r1, #4
 800ee74:	4618      	mov	r0, r3
 800ee76:	f000 f8ac 	bl	800efd2 <CODEC_IO_Write>
 800ee7a:	4603      	mov	r3, r0
 800ee7c:	461a      	mov	r2, r3
 800ee7e:	68fb      	ldr	r3, [r7, #12]
 800ee80:	4413      	add	r3, r2
 800ee82:	60fb      	str	r3, [r7, #12]
			OutputDev = 0xAF;
 800ee84:	4b1c      	ldr	r3, [pc, #112]	; (800eef8 <cs43l22_SetOutputMode+0xe0>)
 800ee86:	22af      	movs	r2, #175	; 0xaf
 800ee88:	701a      	strb	r2, [r3, #0]
			break;
 800ee8a:	e02f      	b.n	800eeec <cs43l22_SetOutputMode+0xd4>

		case OUTPUT_DEVICE_BOTH:
			counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xAA); /* SPK always ON & HP always ON */
 800ee8c:	88fb      	ldrh	r3, [r7, #6]
 800ee8e:	b2db      	uxtb	r3, r3
 800ee90:	22aa      	movs	r2, #170	; 0xaa
 800ee92:	2104      	movs	r1, #4
 800ee94:	4618      	mov	r0, r3
 800ee96:	f000 f89c 	bl	800efd2 <CODEC_IO_Write>
 800ee9a:	4603      	mov	r3, r0
 800ee9c:	461a      	mov	r2, r3
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	4413      	add	r3, r2
 800eea2:	60fb      	str	r3, [r7, #12]
			OutputDev = 0xAA;
 800eea4:	4b14      	ldr	r3, [pc, #80]	; (800eef8 <cs43l22_SetOutputMode+0xe0>)
 800eea6:	22aa      	movs	r2, #170	; 0xaa
 800eea8:	701a      	strb	r2, [r3, #0]
			break;
 800eeaa:	e01f      	b.n	800eeec <cs43l22_SetOutputMode+0xd4>

		case OUTPUT_DEVICE_AUTO:
			counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0x05); /* Detect the HP or the SPK automatically */
 800eeac:	88fb      	ldrh	r3, [r7, #6]
 800eeae:	b2db      	uxtb	r3, r3
 800eeb0:	2205      	movs	r2, #5
 800eeb2:	2104      	movs	r1, #4
 800eeb4:	4618      	mov	r0, r3
 800eeb6:	f000 f88c 	bl	800efd2 <CODEC_IO_Write>
 800eeba:	4603      	mov	r3, r0
 800eebc:	461a      	mov	r2, r3
 800eebe:	68fb      	ldr	r3, [r7, #12]
 800eec0:	4413      	add	r3, r2
 800eec2:	60fb      	str	r3, [r7, #12]
			OutputDev = 0x05;
 800eec4:	4b0c      	ldr	r3, [pc, #48]	; (800eef8 <cs43l22_SetOutputMode+0xe0>)
 800eec6:	2205      	movs	r2, #5
 800eec8:	701a      	strb	r2, [r3, #0]
			break;
 800eeca:	e00f      	b.n	800eeec <cs43l22_SetOutputMode+0xd4>

		default:
			counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0x05); /* Detect the HP or the SPK automatically */
 800eecc:	88fb      	ldrh	r3, [r7, #6]
 800eece:	b2db      	uxtb	r3, r3
 800eed0:	2205      	movs	r2, #5
 800eed2:	2104      	movs	r1, #4
 800eed4:	4618      	mov	r0, r3
 800eed6:	f000 f87c 	bl	800efd2 <CODEC_IO_Write>
 800eeda:	4603      	mov	r3, r0
 800eedc:	461a      	mov	r2, r3
 800eede:	68fb      	ldr	r3, [r7, #12]
 800eee0:	4413      	add	r3, r2
 800eee2:	60fb      	str	r3, [r7, #12]
			OutputDev = 0x05;
 800eee4:	4b04      	ldr	r3, [pc, #16]	; (800eef8 <cs43l22_SetOutputMode+0xe0>)
 800eee6:	2205      	movs	r2, #5
 800eee8:	701a      	strb	r2, [r3, #0]
			break;
 800eeea:	bf00      	nop
	}
	return counter;
 800eeec:	68fb      	ldr	r3, [r7, #12]
}
 800eeee:	4618      	mov	r0, r3
 800eef0:	3710      	adds	r7, #16
 800eef2:	46bd      	mov	sp, r7
 800eef4:	bd80      	pop	{r7, pc}
 800eef6:	bf00      	nop
 800eef8:	2000653a 	.word	0x2000653a

0800eefc <cs43l22_Reset>:
/**
 * @brief Resets cs43l22 registers.
 * @param DeviceAddr: Device address on communication Bus. 
 * @retval 0 if correct communication, else wrong communication
 */
uint32_t cs43l22_Reset(uint16_t DeviceAddr) {
 800eefc:	b480      	push	{r7}
 800eefe:	b083      	sub	sp, #12
 800ef00:	af00      	add	r7, sp, #0
 800ef02:	4603      	mov	r3, r0
 800ef04:	80fb      	strh	r3, [r7, #6]
	return 0;
 800ef06:	2300      	movs	r3, #0
}
 800ef08:	4618      	mov	r0, r3
 800ef0a:	370c      	adds	r7, #12
 800ef0c:	46bd      	mov	sp, r7
 800ef0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef12:	4770      	bx	lr

0800ef14 <cs43l22_SetBeep>:

uint32_t cs43l22_SetBeep(uint16_t DeviceAddr, uint8_t Frequency, uint8_t OnTime, uint8_t OffTime) {
 800ef14:	b590      	push	{r4, r7, lr}
 800ef16:	b085      	sub	sp, #20
 800ef18:	af00      	add	r7, sp, #0
 800ef1a:	4604      	mov	r4, r0
 800ef1c:	4608      	mov	r0, r1
 800ef1e:	4611      	mov	r1, r2
 800ef20:	461a      	mov	r2, r3
 800ef22:	4623      	mov	r3, r4
 800ef24:	80fb      	strh	r3, [r7, #6]
 800ef26:	4603      	mov	r3, r0
 800ef28:	717b      	strb	r3, [r7, #5]
 800ef2a:	460b      	mov	r3, r1
 800ef2c:	713b      	strb	r3, [r7, #4]
 800ef2e:	4613      	mov	r3, r2
 800ef30:	70fb      	strb	r3, [r7, #3]
	uint32_t counter = 0;
 800ef32:	2300      	movs	r3, #0
 800ef34:	60fb      	str	r3, [r7, #12]

	/* Set frequency of beep and on time */
	counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_BEEP_FREQ_ON_TIME, (Frequency << 4) | OnTime);
 800ef36:	88fb      	ldrh	r3, [r7, #6]
 800ef38:	b2d8      	uxtb	r0, r3
 800ef3a:	797b      	ldrb	r3, [r7, #5]
 800ef3c:	011b      	lsls	r3, r3, #4
 800ef3e:	b25a      	sxtb	r2, r3
 800ef40:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800ef44:	4313      	orrs	r3, r2
 800ef46:	b25b      	sxtb	r3, r3
 800ef48:	b2db      	uxtb	r3, r3
 800ef4a:	461a      	mov	r2, r3
 800ef4c:	211c      	movs	r1, #28
 800ef4e:	f000 f840 	bl	800efd2 <CODEC_IO_Write>
 800ef52:	4603      	mov	r3, r0
 800ef54:	461a      	mov	r2, r3
 800ef56:	68fb      	ldr	r3, [r7, #12]
 800ef58:	4413      	add	r3, r2
 800ef5a:	60fb      	str	r3, [r7, #12]
	/* Set volume of beep (max), and off time */
	counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_BEEP_VOL_OFF_TIME, (OffTime << 5) | 0x06);
 800ef5c:	88fb      	ldrh	r3, [r7, #6]
 800ef5e:	b2d8      	uxtb	r0, r3
 800ef60:	78fb      	ldrb	r3, [r7, #3]
 800ef62:	015b      	lsls	r3, r3, #5
 800ef64:	b25b      	sxtb	r3, r3
 800ef66:	f043 0306 	orr.w	r3, r3, #6
 800ef6a:	b25b      	sxtb	r3, r3
 800ef6c:	b2db      	uxtb	r3, r3
 800ef6e:	461a      	mov	r2, r3
 800ef70:	211d      	movs	r1, #29
 800ef72:	f000 f82e 	bl	800efd2 <CODEC_IO_Write>
 800ef76:	4603      	mov	r3, r0
 800ef78:	461a      	mov	r2, r3
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	4413      	add	r3, r2
 800ef7e:	60fb      	str	r3, [r7, #12]

	return counter;
 800ef80:	68fb      	ldr	r3, [r7, #12]
}
 800ef82:	4618      	mov	r0, r3
 800ef84:	3714      	adds	r7, #20
 800ef86:	46bd      	mov	sp, r7
 800ef88:	bd90      	pop	{r4, r7, pc}

0800ef8a <cs43l22_Beep>:

uint32_t cs43l22_Beep(uint16_t DeviceAddr, uint8_t Mode, uint8_t Mix) {
 800ef8a:	b580      	push	{r7, lr}
 800ef8c:	b084      	sub	sp, #16
 800ef8e:	af00      	add	r7, sp, #0
 800ef90:	4603      	mov	r3, r0
 800ef92:	80fb      	strh	r3, [r7, #6]
 800ef94:	460b      	mov	r3, r1
 800ef96:	717b      	strb	r3, [r7, #5]
 800ef98:	4613      	mov	r3, r2
 800ef9a:	713b      	strb	r3, [r7, #4]
	uint32_t counter = 0;
 800ef9c:	2300      	movs	r3, #0
 800ef9e:	60fb      	str	r3, [r7, #12]

	/* Set mode beep play and mix with serial sound*/
	counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_BEEP_TONE_CFG, (Mode << 6) | (Mix << 5));
 800efa0:	88fb      	ldrh	r3, [r7, #6]
 800efa2:	b2d8      	uxtb	r0, r3
 800efa4:	797b      	ldrb	r3, [r7, #5]
 800efa6:	019b      	lsls	r3, r3, #6
 800efa8:	b25a      	sxtb	r2, r3
 800efaa:	793b      	ldrb	r3, [r7, #4]
 800efac:	015b      	lsls	r3, r3, #5
 800efae:	b25b      	sxtb	r3, r3
 800efb0:	4313      	orrs	r3, r2
 800efb2:	b25b      	sxtb	r3, r3
 800efb4:	b2db      	uxtb	r3, r3
 800efb6:	461a      	mov	r2, r3
 800efb8:	211e      	movs	r1, #30
 800efba:	f000 f80a 	bl	800efd2 <CODEC_IO_Write>
 800efbe:	4603      	mov	r3, r0
 800efc0:	461a      	mov	r2, r3
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	4413      	add	r3, r2
 800efc6:	60fb      	str	r3, [r7, #12]

	return counter;
 800efc8:	68fb      	ldr	r3, [r7, #12]
}
 800efca:	4618      	mov	r0, r3
 800efcc:	3710      	adds	r7, #16
 800efce:	46bd      	mov	sp, r7
 800efd0:	bd80      	pop	{r7, pc}

0800efd2 <CODEC_IO_Write>:
 * @param  Addr: I2C address
 * @param  Reg: Reg address 
 * @param  Value: Data to be written
 * @retval None
 */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value) {
 800efd2:	b580      	push	{r7, lr}
 800efd4:	b084      	sub	sp, #16
 800efd6:	af00      	add	r7, sp, #0
 800efd8:	4603      	mov	r3, r0
 800efda:	71fb      	strb	r3, [r7, #7]
 800efdc:	460b      	mov	r3, r1
 800efde:	71bb      	strb	r3, [r7, #6]
 800efe0:	4613      	mov	r3, r2
 800efe2:	717b      	strb	r3, [r7, #5]
	uint32_t result = 0;
 800efe4:	2300      	movs	r3, #0
 800efe6:	60fb      	str	r3, [r7, #12]

	AUDIO_IO_Write(Addr, Reg, Value);
 800efe8:	797a      	ldrb	r2, [r7, #5]
 800efea:	79b9      	ldrb	r1, [r7, #6]
 800efec:	79fb      	ldrb	r3, [r7, #7]
 800efee:	4618      	mov	r0, r3
 800eff0:	f001 f8c1 	bl	8010176 <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
	/* Verify that the data has been correctly written */
	result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */

	return result;
 800eff4:	68fb      	ldr	r3, [r7, #12]
 800eff6:	b2db      	uxtb	r3, r3
}
 800eff8:	4618      	mov	r0, r3
 800effa:	3710      	adds	r7, #16
 800effc:	46bd      	mov	sp, r7
 800effe:	bd80      	pop	{r7, pc}

0800f000 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 800f000:	b480      	push	{r7}
 800f002:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 800f004:	bf00      	nop
 800f006:	46bd      	mov	sp, r7
 800f008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f00c:	4770      	bx	lr

0800f00e <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 800f00e:	b480      	push	{r7}
 800f010:	b083      	sub	sp, #12
 800f012:	af00      	add	r7, sp, #0
 800f014:	6078      	str	r0, [r7, #4]
 800f016:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 800f018:	bf00      	nop
 800f01a:	370c      	adds	r7, #12
 800f01c:	46bd      	mov	sp, r7
 800f01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f022:	4770      	bx	lr

0800f024 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 800f024:	b480      	push	{r7}
 800f026:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 800f028:	bf00      	nop
 800f02a:	46bd      	mov	sp, r7
 800f02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f030:	4770      	bx	lr
	...

0800f034 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800f034:	b480      	push	{r7}
 800f036:	b085      	sub	sp, #20
 800f038:	af00      	add	r7, sp, #0
 800f03a:	60f8      	str	r0, [r7, #12]
 800f03c:	60b9      	str	r1, [r7, #8]
 800f03e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800f040:	68fb      	ldr	r3, [r7, #12]
 800f042:	4a07      	ldr	r2, [pc, #28]	; (800f060 <vApplicationGetIdleTaskMemory+0x2c>)
 800f044:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800f046:	68bb      	ldr	r3, [r7, #8]
 800f048:	4a06      	ldr	r2, [pc, #24]	; (800f064 <vApplicationGetIdleTaskMemory+0x30>)
 800f04a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	2280      	movs	r2, #128	; 0x80
 800f050:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 800f052:	bf00      	nop
 800f054:	3714      	adds	r7, #20
 800f056:	46bd      	mov	sp, r7
 800f058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f05c:	4770      	bx	lr
 800f05e:	bf00      	nop
 800f060:	2000653c 	.word	0x2000653c
 800f064:	20006590 	.word	0x20006590

0800f068 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800f068:	b5b0      	push	{r4, r5, r7, lr}
 800f06a:	b0c2      	sub	sp, #264	; 0x108
 800f06c:	af00      	add	r7, sp, #0


	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800f06e:	f7f1 ff9b 	bl	8000fa8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800f072:	f000 f91d 	bl	800f2b0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800f076:	f000 fb13 	bl	800f6a0 <MX_GPIO_Init>
	MX_DMA_Init();
 800f07a:	f000 fad9 	bl	800f630 <MX_DMA_Init>
	MX_CAN1_Init();
 800f07e:	f000 f99d 	bl	800f3bc <MX_CAN1_Init>
	MX_I2C3_Init();
 800f082:	f000 f9cf 	bl	800f424 <MX_I2C3_Init>
	MX_USART3_UART_Init();
 800f086:	f000 faa9 	bl	800f5dc <MX_USART3_UART_Init>
	MX_USART2_UART_Init();
 800f08a:	f000 fa7d 	bl	800f588 <MX_USART2_UART_Init>
	MX_UART4_Init();
 800f08e:	f000 fa51 	bl	800f534 <MX_UART4_Init>
	MX_RTC_Init();
 800f092:	f000 f9f5 	bl	800f480 <MX_RTC_Init>
	/* USER CODE BEGIN 2 */
	// NOTED: SPI1 is not being used, just for CubeMX to generate HAL Library SPI for I2S3
	EE_Init();
 800f096:	f7fc fc27 	bl	800b8e8 <EE_Init>
	/* USER CODE END 2 */

	/* Create the mutex(es) */
	/* definition and creation of SwvMutex */
	osMutexDef(SwvMutex);
 800f09a:	2300      	movs	r3, #0
 800f09c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800f0a0:	2300      	movs	r3, #0
 800f0a2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	SwvMutexHandle = osMutexCreate(osMutex(SwvMutex));
 800f0a6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800f0aa:	4618      	mov	r0, r3
 800f0ac:	f7f8 f8b3 	bl	8007216 <osMutexCreate>
 800f0b0:	4602      	mov	r2, r0
 800f0b2:	4b6a      	ldr	r3, [pc, #424]	; (800f25c <main+0x1f4>)
 800f0b4:	601a      	str	r2, [r3, #0]

	/* definition and creation of AudioBeepMutex */
	osMutexDef(AudioBeepMutex);
 800f0b6:	2300      	movs	r3, #0
 800f0b8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800f0bc:	2300      	movs	r3, #0
 800f0be:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
	AudioBeepMutexHandle = osMutexCreate(osMutex(AudioBeepMutex));
 800f0c2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800f0c6:	4618      	mov	r0, r3
 800f0c8:	f7f8 f8a5 	bl	8007216 <osMutexCreate>
 800f0cc:	4602      	mov	r2, r0
 800f0ce:	4b64      	ldr	r3, [pc, #400]	; (800f260 <main+0x1f8>)
 800f0d0:	601a      	str	r2, [r3, #0]

	/* Create the recursive mutex(es) */
	/* definition and creation of SimcomRecMutex */
	osMutexDef(SimcomRecMutex);
 800f0d2:	2300      	movs	r3, #0
 800f0d4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800f0d8:	2300      	movs	r3, #0
 800f0da:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	SimcomRecMutexHandle = osRecursiveMutexCreate(osMutex(SimcomRecMutex));
 800f0de:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800f0e2:	4618      	mov	r0, r3
 800f0e4:	f7f8 fb78 	bl	80077d8 <osRecursiveMutexCreate>
 800f0e8:	4602      	mov	r2, r0
 800f0ea:	4b5e      	ldr	r3, [pc, #376]	; (800f264 <main+0x1fc>)
 800f0ec:	601a      	str	r2, [r3, #0]

	/* definition and creation of FingerRecMutex */
	osMutexDef(FingerRecMutex);
 800f0ee:	2300      	movs	r3, #0
 800f0f0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800f0f4:	2300      	movs	r3, #0
 800f0f6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	FingerRecMutexHandle = osRecursiveMutexCreate(osMutex(FingerRecMutex));
 800f0fa:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800f0fe:	4618      	mov	r0, r3
 800f100:	f7f8 fb6a 	bl	80077d8 <osRecursiveMutexCreate>
 800f104:	4602      	mov	r2, r0
 800f106:	4b58      	ldr	r3, [pc, #352]	; (800f268 <main+0x200>)
 800f108:	601a      	str	r2, [r3, #0]
	/* start timers, add new ones, ... */
	/* USER CODE END RTOS_TIMERS */

	/* Create the queue(s) */
	/* definition and creation of AudioVolQueue */
	osMessageQDef(AudioVolQueue, 1, uint8_t);
 800f10a:	4b58      	ldr	r3, [pc, #352]	; (800f26c <main+0x204>)
 800f10c:	f107 04d8 	add.w	r4, r7, #216	; 0xd8
 800f110:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f112:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	AudioVolQueueHandle = osMessageCreate(osMessageQ(AudioVolQueue), NULL);
 800f116:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800f11a:	2100      	movs	r1, #0
 800f11c:	4618      	mov	r0, r3
 800f11e:	f7f8 f974 	bl	800740a <osMessageCreate>
 800f122:	4602      	mov	r2, r0
 800f124:	4b52      	ldr	r3, [pc, #328]	; (800f270 <main+0x208>)
 800f126:	601a      	str	r2, [r3, #0]

	/* USER CODE BEGIN RTOS_QUEUES */
	/* add queues, ... */
	osMailQDef(GpsMail, 1, gps_t);
 800f128:	2301      	movs	r3, #1
 800f12a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800f12e:	2374      	movs	r3, #116	; 0x74
 800f130:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800f134:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800f138:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	GpsMailHandle = osMailCreate(osMailQ(GpsMail), NULL);
 800f13c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800f140:	2100      	movs	r1, #0
 800f142:	4618      	mov	r0, r3
 800f144:	f7f8 fa3e 	bl	80075c4 <osMailCreate>
 800f148:	4602      	mov	r2, r0
 800f14a:	4b4a      	ldr	r3, [pc, #296]	; (800f274 <main+0x20c>)
 800f14c:	601a      	str	r2, [r3, #0]
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of IotTask */
	osThreadDef(IotTask, StartIotTask, osPriorityNormal, 0, 512);
 800f14e:	4b4a      	ldr	r3, [pc, #296]	; (800f278 <main+0x210>)
 800f150:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 800f154:	461d      	mov	r5, r3
 800f156:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f158:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f15a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800f15e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	IotTaskHandle = osThreadCreate(osThread(IotTask), NULL);
 800f162:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800f166:	2100      	movs	r1, #0
 800f168:	4618      	mov	r0, r3
 800f16a:	f7f7 fff4 	bl	8007156 <osThreadCreate>
 800f16e:	4602      	mov	r2, r0
 800f170:	4b42      	ldr	r3, [pc, #264]	; (800f27c <main+0x214>)
 800f172:	601a      	str	r2, [r3, #0]

	/* definition and creation of CanTask */
	osThreadDef(CanTask, StartCanTask, osPriorityNormal, 0, 128);
 800f174:	4b42      	ldr	r3, [pc, #264]	; (800f280 <main+0x218>)
 800f176:	f107 0490 	add.w	r4, r7, #144	; 0x90
 800f17a:	461d      	mov	r5, r3
 800f17c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f17e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f180:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800f184:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	CanTaskHandle = osThreadCreate(osThread(CanTask), NULL);
 800f188:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800f18c:	2100      	movs	r1, #0
 800f18e:	4618      	mov	r0, r3
 800f190:	f7f7 ffe1 	bl	8007156 <osThreadCreate>
 800f194:	4602      	mov	r2, r0
 800f196:	4b3b      	ldr	r3, [pc, #236]	; (800f284 <main+0x21c>)
 800f198:	601a      	str	r2, [r3, #0]

	/* definition and creation of GyroTask */
	osThreadDef(GyroTask, StartGyroTask, osPriorityNormal, 0, 512);
 800f19a:	4b3b      	ldr	r3, [pc, #236]	; (800f288 <main+0x220>)
 800f19c:	f107 0474 	add.w	r4, r7, #116	; 0x74
 800f1a0:	461d      	mov	r5, r3
 800f1a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f1a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f1a6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800f1aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	GyroTaskHandle = osThreadCreate(osThread(GyroTask), NULL);
 800f1ae:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800f1b2:	2100      	movs	r1, #0
 800f1b4:	4618      	mov	r0, r3
 800f1b6:	f7f7 ffce 	bl	8007156 <osThreadCreate>
 800f1ba:	4602      	mov	r2, r0
 800f1bc:	4b33      	ldr	r3, [pc, #204]	; (800f28c <main+0x224>)
 800f1be:	601a      	str	r2, [r3, #0]

	/* definition and creation of CommandTask */
	osThreadDef(CommandTask, StartCommandTask, osPriorityHigh, 0, 256);
 800f1c0:	4b33      	ldr	r3, [pc, #204]	; (800f290 <main+0x228>)
 800f1c2:	f107 0458 	add.w	r4, r7, #88	; 0x58
 800f1c6:	461d      	mov	r5, r3
 800f1c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f1ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f1cc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800f1d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	CommandTaskHandle = osThreadCreate(osThread(CommandTask), NULL);
 800f1d4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f1d8:	2100      	movs	r1, #0
 800f1da:	4618      	mov	r0, r3
 800f1dc:	f7f7 ffbb 	bl	8007156 <osThreadCreate>
 800f1e0:	4602      	mov	r2, r0
 800f1e2:	4b2c      	ldr	r3, [pc, #176]	; (800f294 <main+0x22c>)
 800f1e4:	601a      	str	r2, [r3, #0]

	/* definition and creation of GpsTask */
	osThreadDef(GpsTask, StartGpsTask, osPriorityNormal, 0, 256);
 800f1e6:	4b2c      	ldr	r3, [pc, #176]	; (800f298 <main+0x230>)
 800f1e8:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800f1ec:	461d      	mov	r5, r3
 800f1ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f1f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f1f2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800f1f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	GpsTaskHandle = osThreadCreate(osThread(GpsTask), NULL);
 800f1fa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800f1fe:	2100      	movs	r1, #0
 800f200:	4618      	mov	r0, r3
 800f202:	f7f7 ffa8 	bl	8007156 <osThreadCreate>
 800f206:	4602      	mov	r2, r0
 800f208:	4b24      	ldr	r3, [pc, #144]	; (800f29c <main+0x234>)
 800f20a:	601a      	str	r2, [r3, #0]

	/* definition and creation of FingerTask */
	osThreadDef(FingerTask, StartFingerTask, osPriorityNormal, 0, 256);
 800f20c:	4b24      	ldr	r3, [pc, #144]	; (800f2a0 <main+0x238>)
 800f20e:	f107 0420 	add.w	r4, r7, #32
 800f212:	461d      	mov	r5, r3
 800f214:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f216:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f218:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800f21c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	FingerTaskHandle = osThreadCreate(osThread(FingerTask), NULL);
 800f220:	f107 0320 	add.w	r3, r7, #32
 800f224:	2100      	movs	r1, #0
 800f226:	4618      	mov	r0, r3
 800f228:	f7f7 ff95 	bl	8007156 <osThreadCreate>
 800f22c:	4602      	mov	r2, r0
 800f22e:	4b1d      	ldr	r3, [pc, #116]	; (800f2a4 <main+0x23c>)
 800f230:	601a      	str	r2, [r3, #0]

	/* definition and creation of AudioTask */
	osThreadDef(AudioTask, StartAudioTask, osPriorityNormal, 0, 128);
 800f232:	1d3b      	adds	r3, r7, #4
 800f234:	4a1c      	ldr	r2, [pc, #112]	; (800f2a8 <main+0x240>)
 800f236:	461c      	mov	r4, r3
 800f238:	4615      	mov	r5, r2
 800f23a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f23c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f23e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800f242:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	AudioTaskHandle = osThreadCreate(osThread(AudioTask), NULL);
 800f246:	1d3b      	adds	r3, r7, #4
 800f248:	2100      	movs	r1, #0
 800f24a:	4618      	mov	r0, r3
 800f24c:	f7f7 ff83 	bl	8007156 <osThreadCreate>
 800f250:	4602      	mov	r2, r0
 800f252:	4b16      	ldr	r3, [pc, #88]	; (800f2ac <main+0x244>)
 800f254:	601a      	str	r2, [r3, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 800f256:	f7f7 ff67 	bl	8007128 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 800f25a:	e7fe      	b.n	800f25a <main+0x1f2>
 800f25c:	200084e4 	.word	0x200084e4
 800f260:	20008458 	.word	0x20008458
 800f264:	20008648 	.word	0x20008648
 800f268:	20008644 	.word	0x20008644
 800f26c:	08014fc0 	.word	0x08014fc0
 800f270:	200085f4 	.word	0x200085f4
 800f274:	20008248 	.word	0x20008248
 800f278:	08014fd8 	.word	0x08014fd8
 800f27c:	20008588 	.word	0x20008588
 800f280:	08014ffc 	.word	0x08014ffc
 800f284:	20008360 	.word	0x20008360
 800f288:	08015024 	.word	0x08015024
 800f28c:	200084c0 	.word	0x200084c0
 800f290:	0801504c 	.word	0x0801504c
 800f294:	200084ec 	.word	0x200084ec
 800f298:	08015070 	.word	0x08015070
 800f29c:	200084e8 	.word	0x200084e8
 800f2a0:	08015098 	.word	0x08015098
 800f2a4:	2000845c 	.word	0x2000845c
 800f2a8:	080150c0 	.word	0x080150c0
 800f2ac:	20008640 	.word	0x20008640

0800f2b0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800f2b0:	b580      	push	{r7, lr}
 800f2b2:	b098      	sub	sp, #96	; 0x60
 800f2b4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800f2b6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f2ba:	2230      	movs	r2, #48	; 0x30
 800f2bc:	2100      	movs	r1, #0
 800f2be:	4618      	mov	r0, r3
 800f2c0:	f002 f82d 	bl	801131e <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800f2c4:	f107 031c 	add.w	r3, r7, #28
 800f2c8:	2200      	movs	r2, #0
 800f2ca:	601a      	str	r2, [r3, #0]
 800f2cc:	605a      	str	r2, [r3, #4]
 800f2ce:	609a      	str	r2, [r3, #8]
 800f2d0:	60da      	str	r2, [r3, #12]
 800f2d2:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 800f2d4:	f107 030c 	add.w	r3, r7, #12
 800f2d8:	2200      	movs	r2, #0
 800f2da:	601a      	str	r2, [r3, #0]
 800f2dc:	605a      	str	r2, [r3, #4]
 800f2de:	609a      	str	r2, [r3, #8]
 800f2e0:	60da      	str	r2, [r3, #12]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE()
 800f2e2:	2300      	movs	r3, #0
 800f2e4:	60bb      	str	r3, [r7, #8]
 800f2e6:	4b33      	ldr	r3, [pc, #204]	; (800f3b4 <SystemClock_Config+0x104>)
 800f2e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f2ea:	4a32      	ldr	r2, [pc, #200]	; (800f3b4 <SystemClock_Config+0x104>)
 800f2ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f2f0:	6413      	str	r3, [r2, #64]	; 0x40
 800f2f2:	4b30      	ldr	r3, [pc, #192]	; (800f3b4 <SystemClock_Config+0x104>)
 800f2f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f2f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f2fa:	60bb      	str	r3, [r7, #8]
 800f2fc:	68bb      	ldr	r3, [r7, #8]
	;
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800f2fe:	2300      	movs	r3, #0
 800f300:	607b      	str	r3, [r7, #4]
 800f302:	4b2d      	ldr	r3, [pc, #180]	; (800f3b8 <SystemClock_Config+0x108>)
 800f304:	681b      	ldr	r3, [r3, #0]
 800f306:	4a2c      	ldr	r2, [pc, #176]	; (800f3b8 <SystemClock_Config+0x108>)
 800f308:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f30c:	6013      	str	r3, [r2, #0]
 800f30e:	4b2a      	ldr	r3, [pc, #168]	; (800f3b8 <SystemClock_Config+0x108>)
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f316:	607b      	str	r3, [r7, #4]
 800f318:	687b      	ldr	r3, [r7, #4]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_HSE;
 800f31a:	2309      	movs	r3, #9
 800f31c:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800f31e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800f322:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800f324:	2301      	movs	r3, #1
 800f326:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800f328:	2302      	movs	r3, #2
 800f32a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800f32c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800f330:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 8;
 800f332:	2308      	movs	r3, #8
 800f334:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 336;
 800f336:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800f33a:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800f33c:	2302      	movs	r3, #2
 800f33e:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 7;
 800f340:	2307      	movs	r3, #7
 800f342:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800f344:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f348:	4618      	mov	r0, r3
 800f34a:	f7f5 fce5 	bl	8004d18 <HAL_RCC_OscConfig>
 800f34e:	4603      	mov	r3, r0
 800f350:	2b00      	cmp	r3, #0
 800f352:	d001      	beq.n	800f358 <SystemClock_Config+0xa8>
		Error_Handler();
 800f354:	f000 fde2 	bl	800ff1c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800f358:	230f      	movs	r3, #15
 800f35a:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800f35c:	2302      	movs	r3, #2
 800f35e:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800f360:	2300      	movs	r3, #0
 800f362:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800f364:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800f368:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800f36a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f36e:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 800f370:	f107 031c 	add.w	r3, r7, #28
 800f374:	2105      	movs	r1, #5
 800f376:	4618      	mov	r0, r3
 800f378:	f7f5 ff10 	bl	800519c <HAL_RCC_ClockConfig>
 800f37c:	4603      	mov	r3, r0
 800f37e:	2b00      	cmp	r3, #0
 800f380:	d001      	beq.n	800f386 <SystemClock_Config+0xd6>
		Error_Handler();
 800f382:	f000 fdcb 	bl	800ff1c <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
 800f386:	2303      	movs	r3, #3
 800f388:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800f38a:	23c0      	movs	r3, #192	; 0xc0
 800f38c:	613b      	str	r3, [r7, #16]
	PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800f38e:	2302      	movs	r3, #2
 800f390:	617b      	str	r3, [r7, #20]
	PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800f392:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f396:	61bb      	str	r3, [r7, #24]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 800f398:	f107 030c 	add.w	r3, r7, #12
 800f39c:	4618      	mov	r0, r3
 800f39e:	f7f6 f91d 	bl	80055dc <HAL_RCCEx_PeriphCLKConfig>
 800f3a2:	4603      	mov	r3, r0
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	d001      	beq.n	800f3ac <SystemClock_Config+0xfc>
		Error_Handler();
 800f3a8:	f000 fdb8 	bl	800ff1c <Error_Handler>
	}
}
 800f3ac:	bf00      	nop
 800f3ae:	3760      	adds	r7, #96	; 0x60
 800f3b0:	46bd      	mov	sp, r7
 800f3b2:	bd80      	pop	{r7, pc}
 800f3b4:	40023800 	.word	0x40023800
 800f3b8:	40007000 	.word	0x40007000

0800f3bc <MX_CAN1_Init>:
 * @brief CAN1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN1_Init(void)
{
 800f3bc:	b580      	push	{r7, lr}
 800f3be:	af00      	add	r7, sp, #0
	/* USER CODE END CAN1_Init 0 */

	/* USER CODE BEGIN CAN1_Init 1 */

	/* USER CODE END CAN1_Init 1 */
	hcan1.Instance = CAN1;
 800f3c0:	4b16      	ldr	r3, [pc, #88]	; (800f41c <MX_CAN1_Init+0x60>)
 800f3c2:	4a17      	ldr	r2, [pc, #92]	; (800f420 <MX_CAN1_Init+0x64>)
 800f3c4:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 16;
 800f3c6:	4b15      	ldr	r3, [pc, #84]	; (800f41c <MX_CAN1_Init+0x60>)
 800f3c8:	2210      	movs	r2, #16
 800f3ca:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 800f3cc:	4b13      	ldr	r3, [pc, #76]	; (800f41c <MX_CAN1_Init+0x60>)
 800f3ce:	2200      	movs	r2, #0
 800f3d0:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800f3d2:	4b12      	ldr	r3, [pc, #72]	; (800f41c <MX_CAN1_Init+0x60>)
 800f3d4:	2200      	movs	r2, #0
 800f3d6:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 800f3d8:	4b10      	ldr	r3, [pc, #64]	; (800f41c <MX_CAN1_Init+0x60>)
 800f3da:	2200      	movs	r2, #0
 800f3dc:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800f3de:	4b0f      	ldr	r3, [pc, #60]	; (800f41c <MX_CAN1_Init+0x60>)
 800f3e0:	2200      	movs	r2, #0
 800f3e2:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 800f3e4:	4b0d      	ldr	r3, [pc, #52]	; (800f41c <MX_CAN1_Init+0x60>)
 800f3e6:	2200      	movs	r2, #0
 800f3e8:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = DISABLE;
 800f3ea:	4b0c      	ldr	r3, [pc, #48]	; (800f41c <MX_CAN1_Init+0x60>)
 800f3ec:	2200      	movs	r2, #0
 800f3ee:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 800f3f0:	4b0a      	ldr	r3, [pc, #40]	; (800f41c <MX_CAN1_Init+0x60>)
 800f3f2:	2200      	movs	r2, #0
 800f3f4:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = DISABLE;
 800f3f6:	4b09      	ldr	r3, [pc, #36]	; (800f41c <MX_CAN1_Init+0x60>)
 800f3f8:	2200      	movs	r2, #0
 800f3fa:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 800f3fc:	4b07      	ldr	r3, [pc, #28]	; (800f41c <MX_CAN1_Init+0x60>)
 800f3fe:	2200      	movs	r2, #0
 800f400:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 800f402:	4b06      	ldr	r3, [pc, #24]	; (800f41c <MX_CAN1_Init+0x60>)
 800f404:	2200      	movs	r2, #0
 800f406:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK) {
 800f408:	4804      	ldr	r0, [pc, #16]	; (800f41c <MX_CAN1_Init+0x60>)
 800f40a:	f7f1 fe31 	bl	8001070 <HAL_CAN_Init>
 800f40e:	4603      	mov	r3, r0
 800f410:	2b00      	cmp	r3, #0
 800f412:	d001      	beq.n	800f418 <MX_CAN1_Init+0x5c>
		Error_Handler();
 800f414:	f000 fd82 	bl	800ff1c <Error_Handler>
	}
	/* USER CODE BEGIN CAN1_Init 2 */

	/* USER CODE END CAN1_Init 2 */

}
 800f418:	bf00      	nop
 800f41a:	bd80      	pop	{r7, pc}
 800f41c:	200085cc 	.word	0x200085cc
 800f420:	40006400 	.word	0x40006400

0800f424 <MX_I2C3_Init>:
 * @brief I2C3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C3_Init(void)
{
 800f424:	b580      	push	{r7, lr}
 800f426:	af00      	add	r7, sp, #0
	/* USER CODE END I2C3_Init 0 */

	/* USER CODE BEGIN I2C3_Init 1 */

	/* USER CODE END I2C3_Init 1 */
	hi2c3.Instance = I2C3;
 800f428:	4b12      	ldr	r3, [pc, #72]	; (800f474 <MX_I2C3_Init+0x50>)
 800f42a:	4a13      	ldr	r2, [pc, #76]	; (800f478 <MX_I2C3_Init+0x54>)
 800f42c:	601a      	str	r2, [r3, #0]
	hi2c3.Init.ClockSpeed = 100000;
 800f42e:	4b11      	ldr	r3, [pc, #68]	; (800f474 <MX_I2C3_Init+0x50>)
 800f430:	4a12      	ldr	r2, [pc, #72]	; (800f47c <MX_I2C3_Init+0x58>)
 800f432:	605a      	str	r2, [r3, #4]
	hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800f434:	4b0f      	ldr	r3, [pc, #60]	; (800f474 <MX_I2C3_Init+0x50>)
 800f436:	2200      	movs	r2, #0
 800f438:	609a      	str	r2, [r3, #8]
	hi2c3.Init.OwnAddress1 = 0;
 800f43a:	4b0e      	ldr	r3, [pc, #56]	; (800f474 <MX_I2C3_Init+0x50>)
 800f43c:	2200      	movs	r2, #0
 800f43e:	60da      	str	r2, [r3, #12]
	hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800f440:	4b0c      	ldr	r3, [pc, #48]	; (800f474 <MX_I2C3_Init+0x50>)
 800f442:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800f446:	611a      	str	r2, [r3, #16]
	hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800f448:	4b0a      	ldr	r3, [pc, #40]	; (800f474 <MX_I2C3_Init+0x50>)
 800f44a:	2200      	movs	r2, #0
 800f44c:	615a      	str	r2, [r3, #20]
	hi2c3.Init.OwnAddress2 = 0;
 800f44e:	4b09      	ldr	r3, [pc, #36]	; (800f474 <MX_I2C3_Init+0x50>)
 800f450:	2200      	movs	r2, #0
 800f452:	619a      	str	r2, [r3, #24]
	hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800f454:	4b07      	ldr	r3, [pc, #28]	; (800f474 <MX_I2C3_Init+0x50>)
 800f456:	2200      	movs	r2, #0
 800f458:	61da      	str	r2, [r3, #28]
	hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800f45a:	4b06      	ldr	r3, [pc, #24]	; (800f474 <MX_I2C3_Init+0x50>)
 800f45c:	2200      	movs	r2, #0
 800f45e:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c3) != HAL_OK) {
 800f460:	4804      	ldr	r0, [pc, #16]	; (800f474 <MX_I2C3_Init+0x50>)
 800f462:	f7f3 f97d 	bl	8002760 <HAL_I2C_Init>
 800f466:	4603      	mov	r3, r0
 800f468:	2b00      	cmp	r3, #0
 800f46a:	d001      	beq.n	800f470 <MX_I2C3_Init+0x4c>
		Error_Handler();
 800f46c:	f000 fd56 	bl	800ff1c <Error_Handler>
	}
	/* USER CODE BEGIN I2C3_Init 2 */

	/* USER CODE END I2C3_Init 2 */

}
 800f470:	bf00      	nop
 800f472:	bd80      	pop	{r7, pc}
 800f474:	2000830c 	.word	0x2000830c
 800f478:	40005c00 	.word	0x40005c00
 800f47c:	000186a0 	.word	0x000186a0

0800f480 <MX_RTC_Init>:
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void)
{
 800f480:	b580      	push	{r7, lr}
 800f482:	b086      	sub	sp, #24
 800f484:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RTC_Init 0 */

	/* USER CODE END RTC_Init 0 */

	RTC_TimeTypeDef sTime = { 0 };
 800f486:	1d3b      	adds	r3, r7, #4
 800f488:	2200      	movs	r2, #0
 800f48a:	601a      	str	r2, [r3, #0]
 800f48c:	605a      	str	r2, [r3, #4]
 800f48e:	609a      	str	r2, [r3, #8]
 800f490:	60da      	str	r2, [r3, #12]
 800f492:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = { 0 };
 800f494:	2300      	movs	r3, #0
 800f496:	603b      	str	r3, [r7, #0]
	/* USER CODE BEGIN RTC_Init 1 */

	/* USER CODE END RTC_Init 1 */
	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 800f498:	4b24      	ldr	r3, [pc, #144]	; (800f52c <MX_RTC_Init+0xac>)
 800f49a:	4a25      	ldr	r2, [pc, #148]	; (800f530 <MX_RTC_Init+0xb0>)
 800f49c:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800f49e:	4b23      	ldr	r3, [pc, #140]	; (800f52c <MX_RTC_Init+0xac>)
 800f4a0:	2200      	movs	r2, #0
 800f4a2:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 800f4a4:	4b21      	ldr	r3, [pc, #132]	; (800f52c <MX_RTC_Init+0xac>)
 800f4a6:	227f      	movs	r2, #127	; 0x7f
 800f4a8:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 800f4aa:	4b20      	ldr	r3, [pc, #128]	; (800f52c <MX_RTC_Init+0xac>)
 800f4ac:	22ff      	movs	r2, #255	; 0xff
 800f4ae:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800f4b0:	4b1e      	ldr	r3, [pc, #120]	; (800f52c <MX_RTC_Init+0xac>)
 800f4b2:	2200      	movs	r2, #0
 800f4b4:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800f4b6:	4b1d      	ldr	r3, [pc, #116]	; (800f52c <MX_RTC_Init+0xac>)
 800f4b8:	2200      	movs	r2, #0
 800f4ba:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800f4bc:	4b1b      	ldr	r3, [pc, #108]	; (800f52c <MX_RTC_Init+0xac>)
 800f4be:	2200      	movs	r2, #0
 800f4c0:	619a      	str	r2, [r3, #24]
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 800f4c2:	481a      	ldr	r0, [pc, #104]	; (800f52c <MX_RTC_Init+0xac>)
 800f4c4:	f7f6 f9f4 	bl	80058b0 <HAL_RTC_Init>
 800f4c8:	4603      	mov	r3, r0
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d001      	beq.n	800f4d2 <MX_RTC_Init+0x52>
		Error_Handler();
 800f4ce:	f000 fd25 	bl	800ff1c <Error_Handler>

	/* USER CODE END Check_RTC_BKUP */

	/** Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 0x0;
 800f4d2:	2300      	movs	r3, #0
 800f4d4:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = 0x0;
 800f4d6:	2300      	movs	r3, #0
 800f4d8:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = 0x0;
 800f4da:	2300      	movs	r3, #0
 800f4dc:	71bb      	strb	r3, [r7, #6]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800f4de:	2300      	movs	r3, #0
 800f4e0:	613b      	str	r3, [r7, #16]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800f4e2:	2300      	movs	r3, #0
 800f4e4:	617b      	str	r3, [r7, #20]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK) {
 800f4e6:	1d3b      	adds	r3, r7, #4
 800f4e8:	2201      	movs	r2, #1
 800f4ea:	4619      	mov	r1, r3
 800f4ec:	480f      	ldr	r0, [pc, #60]	; (800f52c <MX_RTC_Init+0xac>)
 800f4ee:	f7f6 fa70 	bl	80059d2 <HAL_RTC_SetTime>
 800f4f2:	4603      	mov	r3, r0
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d001      	beq.n	800f4fc <MX_RTC_Init+0x7c>
		Error_Handler();
 800f4f8:	f000 fd10 	bl	800ff1c <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 800f4fc:	2305      	movs	r3, #5
 800f4fe:	703b      	strb	r3, [r7, #0]
	sDate.Month = RTC_MONTH_SEPTEMBER;
 800f500:	2309      	movs	r3, #9
 800f502:	707b      	strb	r3, [r7, #1]
	sDate.Date = 0x13;
 800f504:	2313      	movs	r3, #19
 800f506:	70bb      	strb	r3, [r7, #2]
	sDate.Year = 0x19;
 800f508:	2319      	movs	r3, #25
 800f50a:	70fb      	strb	r3, [r7, #3]

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK) {
 800f50c:	463b      	mov	r3, r7
 800f50e:	2201      	movs	r2, #1
 800f510:	4619      	mov	r1, r3
 800f512:	4806      	ldr	r0, [pc, #24]	; (800f52c <MX_RTC_Init+0xac>)
 800f514:	f7f6 fb78 	bl	8005c08 <HAL_RTC_SetDate>
 800f518:	4603      	mov	r3, r0
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d001      	beq.n	800f522 <MX_RTC_Init+0xa2>
		Error_Handler();
 800f51e:	f000 fcfd 	bl	800ff1c <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 800f522:	bf00      	nop
 800f524:	3718      	adds	r7, #24
 800f526:	46bd      	mov	sp, r7
 800f528:	bd80      	pop	{r7, pc}
 800f52a:	bf00      	nop
 800f52c:	200084c4 	.word	0x200084c4
 800f530:	40002800 	.word	0x40002800

0800f534 <MX_UART4_Init>:
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void)
{
 800f534:	b580      	push	{r7, lr}
 800f536:	af00      	add	r7, sp, #0
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 800f538:	4b11      	ldr	r3, [pc, #68]	; (800f580 <MX_UART4_Init+0x4c>)
 800f53a:	4a12      	ldr	r2, [pc, #72]	; (800f584 <MX_UART4_Init+0x50>)
 800f53c:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = 57600;
 800f53e:	4b10      	ldr	r3, [pc, #64]	; (800f580 <MX_UART4_Init+0x4c>)
 800f540:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 800f544:	605a      	str	r2, [r3, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800f546:	4b0e      	ldr	r3, [pc, #56]	; (800f580 <MX_UART4_Init+0x4c>)
 800f548:	2200      	movs	r2, #0
 800f54a:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 800f54c:	4b0c      	ldr	r3, [pc, #48]	; (800f580 <MX_UART4_Init+0x4c>)
 800f54e:	2200      	movs	r2, #0
 800f550:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 800f552:	4b0b      	ldr	r3, [pc, #44]	; (800f580 <MX_UART4_Init+0x4c>)
 800f554:	2200      	movs	r2, #0
 800f556:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 800f558:	4b09      	ldr	r3, [pc, #36]	; (800f580 <MX_UART4_Init+0x4c>)
 800f55a:	220c      	movs	r2, #12
 800f55c:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800f55e:	4b08      	ldr	r3, [pc, #32]	; (800f580 <MX_UART4_Init+0x4c>)
 800f560:	2200      	movs	r2, #0
 800f562:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800f564:	4b06      	ldr	r3, [pc, #24]	; (800f580 <MX_UART4_Init+0x4c>)
 800f566:	2200      	movs	r2, #0
 800f568:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart4) != HAL_OK) {
 800f56a:	4805      	ldr	r0, [pc, #20]	; (800f580 <MX_UART4_Init+0x4c>)
 800f56c:	f7f6 ff10 	bl	8006390 <HAL_UART_Init>
 800f570:	4603      	mov	r3, r0
 800f572:	2b00      	cmp	r3, #0
 800f574:	d001      	beq.n	800f57a <MX_UART4_Init+0x46>
		Error_Handler();
 800f576:	f000 fcd1 	bl	800ff1c <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */

	/* USER CODE END UART4_Init 2 */

}
 800f57a:	bf00      	nop
 800f57c:	bd80      	pop	{r7, pc}
 800f57e:	bf00      	nop
 800f580:	200084f0 	.word	0x200084f0
 800f584:	40004c00 	.word	0x40004c00

0800f588 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 800f588:	b580      	push	{r7, lr}
 800f58a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 800f58c:	4b11      	ldr	r3, [pc, #68]	; (800f5d4 <MX_USART2_UART_Init+0x4c>)
 800f58e:	4a12      	ldr	r2, [pc, #72]	; (800f5d8 <MX_USART2_UART_Init+0x50>)
 800f590:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 9600;
 800f592:	4b10      	ldr	r3, [pc, #64]	; (800f5d4 <MX_USART2_UART_Init+0x4c>)
 800f594:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800f598:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800f59a:	4b0e      	ldr	r3, [pc, #56]	; (800f5d4 <MX_USART2_UART_Init+0x4c>)
 800f59c:	2200      	movs	r2, #0
 800f59e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800f5a0:	4b0c      	ldr	r3, [pc, #48]	; (800f5d4 <MX_USART2_UART_Init+0x4c>)
 800f5a2:	2200      	movs	r2, #0
 800f5a4:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800f5a6:	4b0b      	ldr	r3, [pc, #44]	; (800f5d4 <MX_USART2_UART_Init+0x4c>)
 800f5a8:	2200      	movs	r2, #0
 800f5aa:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_RX;
 800f5ac:	4b09      	ldr	r3, [pc, #36]	; (800f5d4 <MX_USART2_UART_Init+0x4c>)
 800f5ae:	2204      	movs	r2, #4
 800f5b0:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800f5b2:	4b08      	ldr	r3, [pc, #32]	; (800f5d4 <MX_USART2_UART_Init+0x4c>)
 800f5b4:	2200      	movs	r2, #0
 800f5b6:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800f5b8:	4b06      	ldr	r3, [pc, #24]	; (800f5d4 <MX_USART2_UART_Init+0x4c>)
 800f5ba:	2200      	movs	r2, #0
 800f5bc:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 800f5be:	4805      	ldr	r0, [pc, #20]	; (800f5d4 <MX_USART2_UART_Init+0x4c>)
 800f5c0:	f7f6 fee6 	bl	8006390 <HAL_UART_Init>
 800f5c4:	4603      	mov	r3, r0
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d001      	beq.n	800f5ce <MX_USART2_UART_Init+0x46>
		Error_Handler();
 800f5ca:	f000 fca7 	bl	800ff1c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800f5ce:	bf00      	nop
 800f5d0:	bd80      	pop	{r7, pc}
 800f5d2:	bf00      	nop
 800f5d4:	2000858c 	.word	0x2000858c
 800f5d8:	40004400 	.word	0x40004400

0800f5dc <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 800f5dc:	b580      	push	{r7, lr}
 800f5de:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN USART3_Init 1 */

	//  huart3.Init.BaudRate = 115200;
	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 800f5e0:	4b11      	ldr	r3, [pc, #68]	; (800f628 <MX_USART3_UART_Init+0x4c>)
 800f5e2:	4a12      	ldr	r2, [pc, #72]	; (800f62c <MX_USART3_UART_Init+0x50>)
 800f5e4:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 9600;
 800f5e6:	4b10      	ldr	r3, [pc, #64]	; (800f628 <MX_USART3_UART_Init+0x4c>)
 800f5e8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800f5ec:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800f5ee:	4b0e      	ldr	r3, [pc, #56]	; (800f628 <MX_USART3_UART_Init+0x4c>)
 800f5f0:	2200      	movs	r2, #0
 800f5f2:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 800f5f4:	4b0c      	ldr	r3, [pc, #48]	; (800f628 <MX_USART3_UART_Init+0x4c>)
 800f5f6:	2200      	movs	r2, #0
 800f5f8:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 800f5fa:	4b0b      	ldr	r3, [pc, #44]	; (800f628 <MX_USART3_UART_Init+0x4c>)
 800f5fc:	2200      	movs	r2, #0
 800f5fe:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 800f600:	4b09      	ldr	r3, [pc, #36]	; (800f628 <MX_USART3_UART_Init+0x4c>)
 800f602:	220c      	movs	r2, #12
 800f604:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800f606:	4b08      	ldr	r3, [pc, #32]	; (800f628 <MX_USART3_UART_Init+0x4c>)
 800f608:	2200      	movs	r2, #0
 800f60a:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800f60c:	4b06      	ldr	r3, [pc, #24]	; (800f628 <MX_USART3_UART_Init+0x4c>)
 800f60e:	2200      	movs	r2, #0
 800f610:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 800f612:	4805      	ldr	r0, [pc, #20]	; (800f628 <MX_USART3_UART_Init+0x4c>)
 800f614:	f7f6 febc 	bl	8006390 <HAL_UART_Init>
 800f618:	4603      	mov	r3, r0
 800f61a:	2b00      	cmp	r3, #0
 800f61c:	d001      	beq.n	800f622 <MX_USART3_UART_Init+0x46>
		Error_Handler();
 800f61e:	f000 fc7d 	bl	800ff1c <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 800f622:	bf00      	nop
 800f624:	bd80      	pop	{r7, pc}
 800f626:	bf00      	nop
 800f628:	200083c4 	.word	0x200083c4
 800f62c:	40004800 	.word	0x40004800

0800f630 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 800f630:	b580      	push	{r7, lr}
 800f632:	b082      	sub	sp, #8
 800f634:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE()
 800f636:	2300      	movs	r3, #0
 800f638:	607b      	str	r3, [r7, #4]
 800f63a:	4b18      	ldr	r3, [pc, #96]	; (800f69c <MX_DMA_Init+0x6c>)
 800f63c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f63e:	4a17      	ldr	r2, [pc, #92]	; (800f69c <MX_DMA_Init+0x6c>)
 800f640:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f644:	6313      	str	r3, [r2, #48]	; 0x30
 800f646:	4b15      	ldr	r3, [pc, #84]	; (800f69c <MX_DMA_Init+0x6c>)
 800f648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f64a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800f64e:	607b      	str	r3, [r7, #4]
 800f650:	687b      	ldr	r3, [r7, #4]
	;

	/* DMA interrupt init */
	/* DMA1_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 800f652:	2200      	movs	r2, #0
 800f654:	2105      	movs	r1, #5
 800f656:	200c      	movs	r0, #12
 800f658:	f7f1 febe 	bl	80013d8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800f65c:	200c      	movs	r0, #12
 800f65e:	f7f1 fed7 	bl	8001410 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 800f662:	2200      	movs	r2, #0
 800f664:	2105      	movs	r1, #5
 800f666:	200d      	movs	r0, #13
 800f668:	f7f1 feb6 	bl	80013d8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800f66c:	200d      	movs	r0, #13
 800f66e:	f7f1 fecf 	bl	8001410 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 800f672:	2200      	movs	r2, #0
 800f674:	2105      	movs	r1, #5
 800f676:	2010      	movs	r0, #16
 800f678:	f7f1 feae 	bl	80013d8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800f67c:	2010      	movs	r0, #16
 800f67e:	f7f1 fec7 	bl	8001410 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream7_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 800f682:	2200      	movs	r2, #0
 800f684:	2105      	movs	r1, #5
 800f686:	202f      	movs	r0, #47	; 0x2f
 800f688:	f7f1 fea6 	bl	80013d8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 800f68c:	202f      	movs	r0, #47	; 0x2f
 800f68e:	f7f1 febf 	bl	8001410 <HAL_NVIC_EnableIRQ>

}
 800f692:	bf00      	nop
 800f694:	3708      	adds	r7, #8
 800f696:	46bd      	mov	sp, r7
 800f698:	bd80      	pop	{r7, pc}
 800f69a:	bf00      	nop
 800f69c:	40023800 	.word	0x40023800

0800f6a0 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800f6a0:	b580      	push	{r7, lr}
 800f6a2:	b08c      	sub	sp, #48	; 0x30
 800f6a4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800f6a6:	f107 031c 	add.w	r3, r7, #28
 800f6aa:	2200      	movs	r2, #0
 800f6ac:	601a      	str	r2, [r3, #0]
 800f6ae:	605a      	str	r2, [r3, #4]
 800f6b0:	609a      	str	r2, [r3, #8]
 800f6b2:	60da      	str	r2, [r3, #12]
 800f6b4:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE()
 800f6b6:	2300      	movs	r3, #0
 800f6b8:	61bb      	str	r3, [r7, #24]
 800f6ba:	4b90      	ldr	r3, [pc, #576]	; (800f8fc <MX_GPIO_Init+0x25c>)
 800f6bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f6be:	4a8f      	ldr	r2, [pc, #572]	; (800f8fc <MX_GPIO_Init+0x25c>)
 800f6c0:	f043 0310 	orr.w	r3, r3, #16
 800f6c4:	6313      	str	r3, [r2, #48]	; 0x30
 800f6c6:	4b8d      	ldr	r3, [pc, #564]	; (800f8fc <MX_GPIO_Init+0x25c>)
 800f6c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f6ca:	f003 0310 	and.w	r3, r3, #16
 800f6ce:	61bb      	str	r3, [r7, #24]
 800f6d0:	69bb      	ldr	r3, [r7, #24]
	;
	__HAL_RCC_GPIOC_CLK_ENABLE()
 800f6d2:	2300      	movs	r3, #0
 800f6d4:	617b      	str	r3, [r7, #20]
 800f6d6:	4b89      	ldr	r3, [pc, #548]	; (800f8fc <MX_GPIO_Init+0x25c>)
 800f6d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f6da:	4a88      	ldr	r2, [pc, #544]	; (800f8fc <MX_GPIO_Init+0x25c>)
 800f6dc:	f043 0304 	orr.w	r3, r3, #4
 800f6e0:	6313      	str	r3, [r2, #48]	; 0x30
 800f6e2:	4b86      	ldr	r3, [pc, #536]	; (800f8fc <MX_GPIO_Init+0x25c>)
 800f6e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f6e6:	f003 0304 	and.w	r3, r3, #4
 800f6ea:	617b      	str	r3, [r7, #20]
 800f6ec:	697b      	ldr	r3, [r7, #20]
	;
	__HAL_RCC_GPIOH_CLK_ENABLE()
 800f6ee:	2300      	movs	r3, #0
 800f6f0:	613b      	str	r3, [r7, #16]
 800f6f2:	4b82      	ldr	r3, [pc, #520]	; (800f8fc <MX_GPIO_Init+0x25c>)
 800f6f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f6f6:	4a81      	ldr	r2, [pc, #516]	; (800f8fc <MX_GPIO_Init+0x25c>)
 800f6f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f6fc:	6313      	str	r3, [r2, #48]	; 0x30
 800f6fe:	4b7f      	ldr	r3, [pc, #508]	; (800f8fc <MX_GPIO_Init+0x25c>)
 800f700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f702:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f706:	613b      	str	r3, [r7, #16]
 800f708:	693b      	ldr	r3, [r7, #16]
	;
	__HAL_RCC_GPIOA_CLK_ENABLE()
 800f70a:	2300      	movs	r3, #0
 800f70c:	60fb      	str	r3, [r7, #12]
 800f70e:	4b7b      	ldr	r3, [pc, #492]	; (800f8fc <MX_GPIO_Init+0x25c>)
 800f710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f712:	4a7a      	ldr	r2, [pc, #488]	; (800f8fc <MX_GPIO_Init+0x25c>)
 800f714:	f043 0301 	orr.w	r3, r3, #1
 800f718:	6313      	str	r3, [r2, #48]	; 0x30
 800f71a:	4b78      	ldr	r3, [pc, #480]	; (800f8fc <MX_GPIO_Init+0x25c>)
 800f71c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f71e:	f003 0301 	and.w	r3, r3, #1
 800f722:	60fb      	str	r3, [r7, #12]
 800f724:	68fb      	ldr	r3, [r7, #12]
	;
	__HAL_RCC_GPIOB_CLK_ENABLE()
 800f726:	2300      	movs	r3, #0
 800f728:	60bb      	str	r3, [r7, #8]
 800f72a:	4b74      	ldr	r3, [pc, #464]	; (800f8fc <MX_GPIO_Init+0x25c>)
 800f72c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f72e:	4a73      	ldr	r2, [pc, #460]	; (800f8fc <MX_GPIO_Init+0x25c>)
 800f730:	f043 0302 	orr.w	r3, r3, #2
 800f734:	6313      	str	r3, [r2, #48]	; 0x30
 800f736:	4b71      	ldr	r3, [pc, #452]	; (800f8fc <MX_GPIO_Init+0x25c>)
 800f738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f73a:	f003 0302 	and.w	r3, r3, #2
 800f73e:	60bb      	str	r3, [r7, #8]
 800f740:	68bb      	ldr	r3, [r7, #8]
	;
	__HAL_RCC_GPIOD_CLK_ENABLE()
 800f742:	2300      	movs	r3, #0
 800f744:	607b      	str	r3, [r7, #4]
 800f746:	4b6d      	ldr	r3, [pc, #436]	; (800f8fc <MX_GPIO_Init+0x25c>)
 800f748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f74a:	4a6c      	ldr	r2, [pc, #432]	; (800f8fc <MX_GPIO_Init+0x25c>)
 800f74c:	f043 0308 	orr.w	r3, r3, #8
 800f750:	6313      	str	r3, [r2, #48]	; 0x30
 800f752:	4b6a      	ldr	r3, [pc, #424]	; (800f8fc <MX_GPIO_Init+0x25c>)
 800f754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f756:	f003 0308 	and.w	r3, r3, #8
 800f75a:	607b      	str	r3, [r7, #4]
 800f75c:	687b      	ldr	r3, [r7, #4]
	;

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800f75e:	2200      	movs	r2, #0
 800f760:	2108      	movs	r1, #8
 800f762:	4867      	ldr	r0, [pc, #412]	; (800f900 <MX_GPIO_Init+0x260>)
 800f764:	f7f2 ffc8 	bl	80026f8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, OTG_FS_PowerSwitchOn_Pin | FINGER_PWR_Pin, GPIO_PIN_SET);
 800f768:	2201      	movs	r2, #1
 800f76a:	2105      	movs	r1, #5
 800f76c:	4865      	ldr	r0, [pc, #404]	; (800f904 <MX_GPIO_Init+0x264>)
 800f76e:	f7f2 ffc3 	bl	80026f8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, UBLOX_PWR_Pin | MEMS_PWR_Pin, GPIO_PIN_RESET);
 800f772:	2200      	movs	r2, #0
 800f774:	2142      	movs	r1, #66	; 0x42
 800f776:	4863      	ldr	r0, [pc, #396]	; (800f904 <MX_GPIO_Init+0x264>)
 800f778:	f7f2 ffbe 	bl	80026f8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SIMCOM_RST_GPIO_Port, SIMCOM_RST_Pin, GPIO_PIN_SET);
 800f77c:	2201      	movs	r2, #1
 800f77e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800f782:	4861      	ldr	r0, [pc, #388]	; (800f908 <MX_GPIO_Init+0x268>)
 800f784:	f7f2 ffb8 	bl	80026f8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SIMCOM_PWR_GPIO_Port, SIMCOM_PWR_Pin, GPIO_PIN_SET);
 800f788:	2201      	movs	r2, #1
 800f78a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800f78e:	485f      	ldr	r0, [pc, #380]	; (800f90c <MX_GPIO_Init+0x26c>)
 800f790:	f7f2 ffb2 	bl	80026f8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin, GPIO_PIN_RESET);
 800f794:	2200      	movs	r2, #0
 800f796:	f24f 0110 	movw	r1, #61456	; 0xf010
 800f79a:	485c      	ldr	r0, [pc, #368]	; (800f90c <MX_GPIO_Init+0x26c>)
 800f79c:	f7f2 ffac 	bl	80026f8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : CS_I2C_SPI_Pin */
	GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800f7a0:	2308      	movs	r3, #8
 800f7a2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800f7a4:	2301      	movs	r3, #1
 800f7a6:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f7a8:	2300      	movs	r3, #0
 800f7aa:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f7ac:	2300      	movs	r3, #0
 800f7ae:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800f7b0:	f107 031c 	add.w	r3, r7, #28
 800f7b4:	4619      	mov	r1, r3
 800f7b6:	4852      	ldr	r0, [pc, #328]	; (800f900 <MX_GPIO_Init+0x260>)
 800f7b8:	f7f2 fcf2 	bl	80021a0 <HAL_GPIO_Init>

	/*Configure GPIO pin : FINGER_IRQ_Pin */
	GPIO_InitStruct.Pin = FINGER_IRQ_Pin;
 800f7bc:	2340      	movs	r3, #64	; 0x40
 800f7be:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800f7c0:	2300      	movs	r3, #0
 800f7c2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f7c4:	2300      	movs	r3, #0
 800f7c6:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(FINGER_IRQ_GPIO_Port, &GPIO_InitStruct);
 800f7c8:	f107 031c 	add.w	r3, r7, #28
 800f7cc:	4619      	mov	r1, r3
 800f7ce:	484c      	ldr	r0, [pc, #304]	; (800f900 <MX_GPIO_Init+0x260>)
 800f7d0:	f7f2 fce6 	bl	80021a0 <HAL_GPIO_Init>

	/*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin UBLOX_PWR_Pin FINGER_PWR_Pin MEMS_PWR_Pin */
	GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin | UBLOX_PWR_Pin | FINGER_PWR_Pin | MEMS_PWR_Pin;
 800f7d4:	2347      	movs	r3, #71	; 0x47
 800f7d6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800f7d8:	2301      	movs	r3, #1
 800f7da:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f7dc:	2300      	movs	r3, #0
 800f7de:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f7e0:	2300      	movs	r3, #0
 800f7e2:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f7e4:	f107 031c 	add.w	r3, r7, #28
 800f7e8:	4619      	mov	r1, r3
 800f7ea:	4846      	ldr	r0, [pc, #280]	; (800f904 <MX_GPIO_Init+0x264>)
 800f7ec:	f7f2 fcd8 	bl	80021a0 <HAL_GPIO_Init>

	/*Configure GPIO pin : PDM_OUT_Pin */
	GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800f7f0:	2308      	movs	r3, #8
 800f7f2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f7f4:	2302      	movs	r3, #2
 800f7f6:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f7f8:	2300      	movs	r3, #0
 800f7fa:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f7fc:	2300      	movs	r3, #0
 800f7fe:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800f800:	2305      	movs	r3, #5
 800f802:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800f804:	f107 031c 	add.w	r3, r7, #28
 800f808:	4619      	mov	r1, r3
 800f80a:	483e      	ldr	r0, [pc, #248]	; (800f904 <MX_GPIO_Init+0x264>)
 800f80c:	f7f2 fcc8 	bl	80021a0 <HAL_GPIO_Init>

	/*Configure GPIO pin : BOOT1_Pin */
	GPIO_InitStruct.Pin = BOOT1_Pin;
 800f810:	2304      	movs	r3, #4
 800f812:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800f814:	2300      	movs	r3, #0
 800f816:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f818:	2300      	movs	r3, #0
 800f81a:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800f81c:	f107 031c 	add.w	r3, r7, #28
 800f820:	4619      	mov	r1, r3
 800f822:	4839      	ldr	r0, [pc, #228]	; (800f908 <MX_GPIO_Init+0x268>)
 800f824:	f7f2 fcbc 	bl	80021a0 <HAL_GPIO_Init>

	/*Configure GPIO pin : CLK_IN_Pin */
	GPIO_InitStruct.Pin = CLK_IN_Pin;
 800f828:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f82c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f82e:	2302      	movs	r3, #2
 800f830:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f832:	2300      	movs	r3, #0
 800f834:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f836:	2300      	movs	r3, #0
 800f838:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800f83a:	2305      	movs	r3, #5
 800f83c:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800f83e:	f107 031c 	add.w	r3, r7, #28
 800f842:	4619      	mov	r1, r3
 800f844:	4830      	ldr	r0, [pc, #192]	; (800f908 <MX_GPIO_Init+0x268>)
 800f846:	f7f2 fcab 	bl	80021a0 <HAL_GPIO_Init>

	/*Configure GPIO pin : SIMCOM_RST_Pin */
	GPIO_InitStruct.Pin = SIMCOM_RST_Pin;
 800f84a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f84e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800f850:	2301      	movs	r3, #1
 800f852:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f854:	2300      	movs	r3, #0
 800f856:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f858:	2300      	movs	r3, #0
 800f85a:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(SIMCOM_RST_GPIO_Port, &GPIO_InitStruct);
 800f85c:	f107 031c 	add.w	r3, r7, #28
 800f860:	4619      	mov	r1, r3
 800f862:	4829      	ldr	r0, [pc, #164]	; (800f908 <MX_GPIO_Init+0x268>)
 800f864:	f7f2 fc9c 	bl	80021a0 <HAL_GPIO_Init>

	/*Configure GPIO pins : SIMCOM_PWR_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD6_Pin Audio_RST_Pin */
	GPIO_InitStruct.Pin = SIMCOM_PWR_Pin | LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin;
 800f868:	f24f 4310 	movw	r3, #62480	; 0xf410
 800f86c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800f86e:	2301      	movs	r3, #1
 800f870:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f872:	2300      	movs	r3, #0
 800f874:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f876:	2300      	movs	r3, #0
 800f878:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800f87a:	f107 031c 	add.w	r3, r7, #28
 800f87e:	4619      	mov	r1, r3
 800f880:	4822      	ldr	r0, [pc, #136]	; (800f90c <MX_GPIO_Init+0x26c>)
 800f882:	f7f2 fc8d 	bl	80021a0 <HAL_GPIO_Init>

	/*Configure GPIO pin : VBUS_FS_Pin */
	GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800f886:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f88a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800f88c:	2300      	movs	r3, #0
 800f88e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f890:	2300      	movs	r3, #0
 800f892:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800f894:	f107 031c 	add.w	r3, r7, #28
 800f898:	4619      	mov	r1, r3
 800f89a:	481d      	ldr	r0, [pc, #116]	; (800f910 <MX_GPIO_Init+0x270>)
 800f89c:	f7f2 fc80 	bl	80021a0 <HAL_GPIO_Init>

	/*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
	GPIO_InitStruct.Pin = OTG_FS_ID_Pin | OTG_FS_DM_Pin | OTG_FS_DP_Pin;
 800f8a0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800f8a4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f8a6:	2302      	movs	r3, #2
 800f8a8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f8aa:	2300      	movs	r3, #0
 800f8ac:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f8ae:	2300      	movs	r3, #0
 800f8b0:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800f8b2:	230a      	movs	r3, #10
 800f8b4:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f8b6:	f107 031c 	add.w	r3, r7, #28
 800f8ba:	4619      	mov	r1, r3
 800f8bc:	4814      	ldr	r0, [pc, #80]	; (800f910 <MX_GPIO_Init+0x270>)
 800f8be:	f7f2 fc6f 	bl	80021a0 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800f8c2:	2320      	movs	r3, #32
 800f8c4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800f8c6:	2300      	movs	r3, #0
 800f8c8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f8ca:	2300      	movs	r3, #0
 800f8cc:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800f8ce:	f107 031c 	add.w	r3, r7, #28
 800f8d2:	4619      	mov	r1, r3
 800f8d4:	480d      	ldr	r0, [pc, #52]	; (800f90c <MX_GPIO_Init+0x26c>)
 800f8d6:	f7f2 fc63 	bl	80021a0 <HAL_GPIO_Init>

	/*Configure GPIO pin : MEMS_INT2_Pin */
	GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800f8da:	2302      	movs	r3, #2
 800f8dc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800f8de:	4b0d      	ldr	r3, [pc, #52]	; (800f914 <MX_GPIO_Init+0x274>)
 800f8e0:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f8e2:	2300      	movs	r3, #0
 800f8e4:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800f8e6:	f107 031c 	add.w	r3, r7, #28
 800f8ea:	4619      	mov	r1, r3
 800f8ec:	4804      	ldr	r0, [pc, #16]	; (800f900 <MX_GPIO_Init+0x260>)
 800f8ee:	f7f2 fc57 	bl	80021a0 <HAL_GPIO_Init>

}
 800f8f2:	bf00      	nop
 800f8f4:	3730      	adds	r7, #48	; 0x30
 800f8f6:	46bd      	mov	sp, r7
 800f8f8:	bd80      	pop	{r7, pc}
 800f8fa:	bf00      	nop
 800f8fc:	40023800 	.word	0x40023800
 800f900:	40021000 	.word	0x40021000
 800f904:	40020800 	.word	0x40020800
 800f908:	40020400 	.word	0x40020400
 800f90c:	40020c00 	.word	0x40020c00
 800f910:	40020000 	.word	0x40020000
 800f914:	10120000 	.word	0x10120000

0800f918 <StartIotTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartIotTask */
void StartIotTask(void const * argument)
{
 800f918:	b580      	push	{r7, lr}
 800f91a:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 800f91e:	af00      	add	r7, sp, #0
 800f920:	1d3b      	adds	r3, r7, #4
 800f922:	6018      	str	r0, [r3, #0]

	/* USER CODE BEGIN 5 */
	const TickType_t xDelay_ms = pdMS_TO_TICKS(REPORT_INTERVAL*1000);
 800f924:	f241 3388 	movw	r3, #5000	; 0x1388
 800f928:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	uint32_t ulNotifiedValue;
	osEvent evt;
	char msg[SIMCOM_MESSAGE_LENGTH];

	// Start simcom module
	SIMCOM_DMA_Init();
 800f92c:	f7fb fafa 	bl	800af24 <SIMCOM_DMA_Init>
	Simcom_Init(0);
 800f930:	2000      	movs	r0, #0
 800f932:	f7fe fcb3 	bl	800e29c <Simcom_Init>
	/* Infinite loop */
	xLastWakeTime = xTaskGetTickCount();
 800f936:	f7f9 fb31 	bl	8008f9c <xTaskGetTickCount>
 800f93a:	4603      	mov	r3, r0
 800f93c:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
	for (;;) {
		// get event data
		xResult = xTaskNotifyWait(0x00, ULONG_MAX, &ulNotifiedValue, 0);
 800f940:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800f944:	2300      	movs	r3, #0
 800f946:	f04f 31ff 	mov.w	r1, #4294967295
 800f94a:	2000      	movs	r0, #0
 800f94c:	f7fa f850 	bl	80099f0 <xTaskNotifyWait>
 800f950:	f8c7 0210 	str.w	r0, [r7, #528]	; 0x210
		// reset msg event
		sprintf(msg, "%s", "");
 800f954:	f107 0308 	add.w	r3, r7, #8
 800f958:	2200      	movs	r2, #0
 800f95a:	701a      	strb	r2, [r3, #0]
		// do this if events occurred
		if (xResult == pdTRUE) {
 800f95c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800f960:	2b01      	cmp	r3, #1
 800f962:	d121      	bne.n	800f9a8 <StartIotTask+0x90>
			// check every event
			if (ulNotifiedValue & EVENT_IOT_CRASH) {
 800f964:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800f968:	f003 0301 	and.w	r3, r3, #1
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	d007      	beq.n	800f980 <StartIotTask+0x68>
				sprintf(msg, "%s%s", msg, "TABRAKAN! ");
 800f970:	f107 0208 	add.w	r2, r7, #8
 800f974:	f107 0008 	add.w	r0, r7, #8
 800f978:	4b1f      	ldr	r3, [pc, #124]	; (800f9f8 <StartIotTask+0xe0>)
 800f97a:	4920      	ldr	r1, [pc, #128]	; (800f9fc <StartIotTask+0xe4>)
 800f97c:	f001 fcd8 	bl	8011330 <siprintf>
			}
			if ((ulNotifiedValue & EVENT_IOT_FALL) && !(ulNotifiedValue & EVENT_IOT_FALL_N)) {
 800f980:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800f984:	f003 0302 	and.w	r3, r3, #2
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d00d      	beq.n	800f9a8 <StartIotTask+0x90>
 800f98c:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800f990:	f003 0304 	and.w	r3, r3, #4
 800f994:	2b00      	cmp	r3, #0
 800f996:	d107      	bne.n	800f9a8 <StartIotTask+0x90>
				sprintf(msg, "%s%s", msg, "JATUH! ");
 800f998:	f107 0208 	add.w	r2, r7, #8
 800f99c:	f107 0008 	add.w	r0, r7, #8
 800f9a0:	4b17      	ldr	r3, [pc, #92]	; (800fa00 <StartIotTask+0xe8>)
 800f9a2:	4916      	ldr	r1, [pc, #88]	; (800f9fc <StartIotTask+0xe4>)
 800f9a4:	f001 fcc4 	bl	8011330 <siprintf>
			}
		}
		// send full msg event
		Simcom_Set_Message(msg);
 800f9a8:	f107 0308 	add.w	r3, r7, #8
 800f9ac:	4618      	mov	r0, r3
 800f9ae:	f7fe fd57 	bl	800e460 <Simcom_Set_Message>

		// get processed gps data
		evt = osMailGet(GpsMailHandle, 0);
 800f9b2:	4b14      	ldr	r3, [pc, #80]	; (800fa04 <StartIotTask+0xec>)
 800f9b4:	6819      	ldr	r1, [r3, #0]
 800f9b6:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 800f9ba:	2200      	movs	r2, #0
 800f9bc:	4618      	mov	r0, r3
 800f9be:	f7f7 fe97 	bl	80076f0 <osMailGet>
		// Set payload GPS
		if (evt.status == osEventMail) {
 800f9c2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800f9c6:	2b20      	cmp	r3, #32
 800f9c8:	d104      	bne.n	800f9d4 <StartIotTask+0xbc>
			Simcom_Convert_GPS(evt.value.p);
 800f9ca:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800f9ce:	4618      	mov	r0, r3
 800f9d0:	f7fe fd58 	bl	800e484 <Simcom_Convert_GPS>
		}
		// Set payload
		Simcom_Set_Payload();
 800f9d4:	f7fe fdde 	bl	800e594 <Simcom_Set_Payload>
		// Send payload
		if (!Simcom_Send_Payload()) {
 800f9d8:	f7fe fe66 	bl	800e6a8 <Simcom_Send_Payload>
 800f9dc:	4603      	mov	r3, r0
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	d102      	bne.n	800f9e8 <StartIotTask+0xd0>
			Simcom_Init(1);
 800f9e2:	2001      	movs	r0, #1
 800f9e4:	f7fe fc5a 	bl	800e29c <Simcom_Init>
		}
		// Report interval in second
		vTaskDelayUntil(&xLastWakeTime, xDelay_ms);
 800f9e8:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 800f9ec:	f8d7 1214 	ldr.w	r1, [r7, #532]	; 0x214
 800f9f0:	4618      	mov	r0, r3
 800f9f2:	f7f9 f91d 	bl	8008c30 <vTaskDelayUntil>
		xResult = xTaskNotifyWait(0x00, ULONG_MAX, &ulNotifiedValue, 0);
 800f9f6:	e7a3      	b.n	800f940 <StartIotTask+0x28>
 800f9f8:	080150dc 	.word	0x080150dc
 800f9fc:	080150e8 	.word	0x080150e8
 800fa00:	080150f0 	.word	0x080150f0
 800fa04:	20008248 	.word	0x20008248

0800fa08 <StartCanTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartCanTask */
void StartCanTask(void const * argument)
{
 800fa08:	b580      	push	{r7, lr}
 800fa0a:	b082      	sub	sp, #8
 800fa0c:	af00      	add	r7, sp, #0
 800fa0e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartCanTask */
	/* Infinite loop */
	for (;;) {
		//		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
		osDelay(500);
 800fa10:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800fa14:	f7f7 fbeb 	bl	80071ee <osDelay>
 800fa18:	e7fa      	b.n	800fa10 <StartCanTask+0x8>
	...

0800fa1c <StartGyroTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartGyroTask */
void StartGyroTask(void const * argument)
{
 800fa1c:	b5b0      	push	{r4, r5, r7, lr}
 800fa1e:	b098      	sub	sp, #96	; 0x60
 800fa20:	af02      	add	r7, sp, #8
 800fa22:	61f8      	str	r0, [r7, #28]
	/* USER CODE BEGIN StartGyroTask */
	mems_t mems_calibration;
	mems_decision_t mems_decision;
	SD_MPU6050 mpu;
	/* MPU6050 Initialization*/
	MEMS_Init(&hi2c3, &mpu);
 800fa24:	f107 0320 	add.w	r3, r7, #32
 800fa28:	4619      	mov	r1, r3
 800fa2a:	4821      	ldr	r0, [pc, #132]	; (800fab0 <StartGyroTask+0x94>)
 800fa2c:	f7fd f8f4 	bl	800cc18 <MEMS_Init>
	// Set calibrator
	mems_calibration = MEMS_Average(&hi2c3, &mpu, NULL, 500);
 800fa30:	4638      	mov	r0, r7
 800fa32:	f107 0220 	add.w	r2, r7, #32
 800fa36:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800fa3a:	9300      	str	r3, [sp, #0]
 800fa3c:	2300      	movs	r3, #0
 800fa3e:	491c      	ldr	r1, [pc, #112]	; (800fab0 <StartGyroTask+0x94>)
 800fa40:	f7fd f91c 	bl	800cc7c <MEMS_Average>
 800fa44:	f107 0440 	add.w	r4, r7, #64	; 0x40
 800fa48:	463d      	mov	r5, r7
 800fa4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fa4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fa4e:	e895 0003 	ldmia.w	r5, {r0, r1}
 800fa52:	e884 0003 	stmia.w	r4, {r0, r1}
	//	BSP_Led_Write(1);
	//	osDelay(100);
	/* Infinite loop */
	for (;;) {
		// Read all accelerometer, gyroscope (average)
		mems_decision = MEMS_Decision(&hi2c3, &mpu, &mems_calibration, 25);
 800fa56:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800fa5a:	f107 0120 	add.w	r1, r7, #32
 800fa5e:	2319      	movs	r3, #25
 800fa60:	4813      	ldr	r0, [pc, #76]	; (800fab0 <StartGyroTask+0x94>)
 800fa62:	f7fd f9a5 	bl	800cdb0 <MEMS_Decision>
 800fa66:	4603      	mov	r3, r0
 800fa68:	87bb      	strh	r3, [r7, #60]	; 0x3c
		// Check accelerometer, happens when impact detected
		if (mems_decision.crash) {
 800fa6a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	d006      	beq.n	800fa80 <StartGyroTask+0x64>
			xTaskNotify(IotTaskHandle, EVENT_IOT_CRASH, eSetBits);
 800fa72:	4b10      	ldr	r3, [pc, #64]	; (800fab4 <StartGyroTask+0x98>)
 800fa74:	6818      	ldr	r0, [r3, #0]
 800fa76:	2300      	movs	r3, #0
 800fa78:	2201      	movs	r2, #1
 800fa7a:	2101      	movs	r1, #1
 800fa7c:	f7fa f812 	bl	8009aa4 <xTaskGenericNotify>
			//				BSP_Led_Toggle();
			//				osDelay(100);
			//			}
		}
		// Check gyroscope, happens when fall detected
		if (mems_decision.fall) {
 800fa80:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d007      	beq.n	800fa98 <StartGyroTask+0x7c>
			xTaskNotify(IotTaskHandle, EVENT_IOT_FALL, eSetBits);
 800fa88:	4b0a      	ldr	r3, [pc, #40]	; (800fab4 <StartGyroTask+0x98>)
 800fa8a:	6818      	ldr	r0, [r3, #0]
 800fa8c:	2300      	movs	r3, #0
 800fa8e:	2201      	movs	r2, #1
 800fa90:	2102      	movs	r1, #2
 800fa92:	f7fa f807 	bl	8009aa4 <xTaskGenericNotify>
 800fa96:	e006      	b.n	800faa6 <StartGyroTask+0x8a>
			//			BSP_Led_Write(1);
		} else {
			xTaskNotify(IotTaskHandle, EVENT_IOT_FALL_N, eSetBits);
 800fa98:	4b06      	ldr	r3, [pc, #24]	; (800fab4 <StartGyroTask+0x98>)
 800fa9a:	6818      	ldr	r0, [r3, #0]
 800fa9c:	2300      	movs	r3, #0
 800fa9e:	2201      	movs	r2, #1
 800faa0:	2104      	movs	r1, #4
 800faa2:	f7f9 ffff 	bl	8009aa4 <xTaskGenericNotify>
			//			BSP_Led_Write(0);
		}
		// delay because it's priority is higher
		osDelay(50);
 800faa6:	2032      	movs	r0, #50	; 0x32
 800faa8:	f7f7 fba1 	bl	80071ee <osDelay>
		mems_decision = MEMS_Decision(&hi2c3, &mpu, &mems_calibration, 25);
 800faac:	e7d3      	b.n	800fa56 <StartGyroTask+0x3a>
 800faae:	bf00      	nop
 800fab0:	2000830c 	.word	0x2000830c
 800fab4:	20008588 	.word	0x20008588

0800fab8 <StartCommandTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartCommandTask */
void StartCommandTask(void const * argument)
{
 800fab8:	b5b0      	push	{r4, r5, r7, lr}
 800faba:	b0b2      	sub	sp, #200	; 0xc8
 800fabc:	af00      	add	r7, sp, #0
 800fabe:	6078      	str	r0, [r7, #4]
	int p;
	uint32_t val;
	/* Infinite loop */
	for (;;) {

		if (Simcom_Check_Command()) {
 800fac0:	f7fe fe62 	bl	800e788 <Simcom_Check_Command>
 800fac4:	4603      	mov	r3, r0
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	f000 813e 	beq.w	800fd48 <StartCommandTask+0x290>
			// read the command & execute
			if (Simcom_Get_Command(&command)) {
 800facc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800fad0:	4618      	mov	r0, r3
 800fad2:	f7fe fe6b 	bl	800e7ac <Simcom_Get_Command>
 800fad6:	4603      	mov	r3, r0
 800fad8:	2b00      	cmp	r3, #0
 800fada:	f000 8135 	beq.w	800fd48 <StartCommandTask+0x290>
				// generic command response
				sprintf(response, "%s executed.", command.cmd);
 800fade:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800fae2:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800fae6:	f107 030c 	add.w	r3, r7, #12
 800faea:	4999      	ldr	r1, [pc, #612]	; (800fd50 <StartCommandTask+0x298>)
 800faec:	4618      	mov	r0, r3
 800faee:	f001 fc1f 	bl	8011330 <siprintf>

				// BSP Led configuration
				if (strstr(command.var, "LED") != NULL) {
 800faf2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800faf6:	4997      	ldr	r1, [pc, #604]	; (800fd54 <StartCommandTask+0x29c>)
 800faf8:	4618      	mov	r0, r3
 800fafa:	f001 fc75 	bl	80113e8 <strstr>
 800fafe:	4603      	mov	r3, r0
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	d02f      	beq.n	800fb64 <StartCommandTask+0xac>
					val = atoi(command.val);
 800fb04:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800fb08:	3314      	adds	r3, #20
 800fb0a:	4618      	mov	r0, r3
 800fb0c:	f001 fbb3 	bl	8011276 <atoi>
 800fb10:	4603      	mov	r3, r0
 800fb12:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
					if (strcmp(command.var, "LED1") == 0) {
 800fb16:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800fb1a:	498f      	ldr	r1, [pc, #572]	; (800fd58 <StartCommandTask+0x2a0>)
 800fb1c:	4618      	mov	r0, r3
 800fb1e:	f7f0 fb57 	bl	80001d0 <strcmp>
 800fb22:	4603      	mov	r3, r0
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	d109      	bne.n	800fb3c <StartCommandTask+0x84>
						HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, val);
 800fb28:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800fb2c:	b2db      	uxtb	r3, r3
 800fb2e:	461a      	mov	r2, r3
 800fb30:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800fb34:	4889      	ldr	r0, [pc, #548]	; (800fd5c <StartCommandTask+0x2a4>)
 800fb36:	f7f2 fddf 	bl	80026f8 <HAL_GPIO_WritePin>
 800fb3a:	e0f8      	b.n	800fd2e <StartCommandTask+0x276>
					} else if (strcmp(command.var, "LED2") == 0) {
 800fb3c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800fb40:	4987      	ldr	r1, [pc, #540]	; (800fd60 <StartCommandTask+0x2a8>)
 800fb42:	4618      	mov	r0, r3
 800fb44:	f7f0 fb44 	bl	80001d0 <strcmp>
 800fb48:	4603      	mov	r3, r0
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	f040 80ef 	bne.w	800fd2e <StartCommandTask+0x276>
						HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, val);
 800fb50:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800fb54:	b2db      	uxtb	r3, r3
 800fb56:	461a      	mov	r2, r3
 800fb58:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800fb5c:	487f      	ldr	r0, [pc, #508]	; (800fd5c <StartCommandTask+0x2a4>)
 800fb5e:	f7f2 fdcb 	bl	80026f8 <HAL_GPIO_WritePin>
 800fb62:	e0e4      	b.n	800fd2e <StartCommandTask+0x276>
					}
				}

				// RTC configuration
				else if (strcmp(command.var, "RTC") == 0) {
 800fb64:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800fb68:	497e      	ldr	r1, [pc, #504]	; (800fd64 <StartCommandTask+0x2ac>)
 800fb6a:	4618      	mov	r0, r3
 800fb6c:	f7f0 fb30 	bl	80001d0 <strcmp>
 800fb70:	4603      	mov	r3, r0
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d106      	bne.n	800fb84 <StartCommandTask+0xcc>
					Set_RTC(command.val);
 800fb76:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800fb7a:	3314      	adds	r3, #20
 800fb7c:	4618      	mov	r0, r3
 800fb7e:	f7fb fe37 	bl	800b7f0 <Set_RTC>
 800fb82:	e0d4      	b.n	800fd2e <StartCommandTask+0x276>
				}

				// Odometer configuration
				else if (strcmp(command.var, "ODOM") == 0) {
 800fb84:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800fb88:	4977      	ldr	r1, [pc, #476]	; (800fd68 <StartCommandTask+0x2b0>)
 800fb8a:	4618      	mov	r0, r3
 800fb8c:	f7f0 fb20 	bl	80001d0 <strcmp>
 800fb90:	4603      	mov	r3, r0
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	d10d      	bne.n	800fbb2 <StartCommandTask+0xfa>
					val = atoi(command.val);
 800fb96:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800fb9a:	3314      	adds	r3, #20
 800fb9c:	4618      	mov	r0, r3
 800fb9e:	f001 fb6a 	bl	8011276 <atoi>
 800fba2:	4603      	mov	r3, r0
 800fba4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
					Simcom_Set_Odometer(val);
 800fba8:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 800fbac:	f7fe fe8c 	bl	800e8c8 <Simcom_Set_Odometer>
 800fbb0:	e0bd      	b.n	800fd2e <StartCommandTask+0x276>
				}

				// Information detail
				else if (strcmp(command.var, "INFO") == 0) {
 800fbb2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800fbb6:	496d      	ldr	r1, [pc, #436]	; (800fd6c <StartCommandTask+0x2b4>)
 800fbb8:	4618      	mov	r0, r3
 800fbba:	f7f0 fb09 	bl	80001d0 <strcmp>
 800fbbe:	4603      	mov	r3, r0
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	d10b      	bne.n	800fbdc <StartCommandTask+0x124>
					sprintf(response, "HUB v.1.0\nGEN Indonesia @ 2019\n");
 800fbc4:	f107 030c 	add.w	r3, r7, #12
 800fbc8:	4a69      	ldr	r2, [pc, #420]	; (800fd70 <StartCommandTask+0x2b8>)
 800fbca:	461c      	mov	r4, r3
 800fbcc:	4615      	mov	r5, r2
 800fbce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fbd0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fbd2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800fbd6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800fbda:	e0a8      	b.n	800fd2e <StartCommandTask+0x276>
				}

				// Audio configuration
				else if (strstr(command.var, "AUDIO_") != NULL) {
 800fbdc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800fbe0:	4964      	ldr	r1, [pc, #400]	; (800fd74 <StartCommandTask+0x2bc>)
 800fbe2:	4618      	mov	r0, r3
 800fbe4:	f001 fc00 	bl	80113e8 <strstr>
 800fbe8:	4603      	mov	r3, r0
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	d02f      	beq.n	800fc4e <StartCommandTask+0x196>
					if (strcmp(command.var, "AUDIO_BEEP") == 0) {
 800fbee:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800fbf2:	4961      	ldr	r1, [pc, #388]	; (800fd78 <StartCommandTask+0x2c0>)
 800fbf4:	4618      	mov	r0, r3
 800fbf6:	f7f0 faeb 	bl	80001d0 <strcmp>
 800fbfa:	4603      	mov	r3, r0
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d107      	bne.n	800fc10 <StartCommandTask+0x158>
						xTaskNotify(AudioTaskHandle, EVENT_AUDIO_BEEP, eSetBits);
 800fc00:	4b5e      	ldr	r3, [pc, #376]	; (800fd7c <StartCommandTask+0x2c4>)
 800fc02:	6818      	ldr	r0, [r3, #0]
 800fc04:	2300      	movs	r3, #0
 800fc06:	2201      	movs	r2, #1
 800fc08:	2101      	movs	r1, #1
 800fc0a:	f7f9 ff4b 	bl	8009aa4 <xTaskGenericNotify>
 800fc0e:	e08e      	b.n	800fd2e <StartCommandTask+0x276>
					}

					else if (strcmp(command.var, "AUDIO_VOL") == 0) {
 800fc10:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800fc14:	495a      	ldr	r1, [pc, #360]	; (800fd80 <StartCommandTask+0x2c8>)
 800fc16:	4618      	mov	r0, r3
 800fc18:	f7f0 fada 	bl	80001d0 <strcmp>
 800fc1c:	4603      	mov	r3, r0
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	f040 8085 	bne.w	800fd2e <StartCommandTask+0x276>
						val = atoi(command.val);
 800fc24:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800fc28:	3314      	adds	r3, #20
 800fc2a:	4618      	mov	r0, r3
 800fc2c:	f001 fb23 	bl	8011276 <atoi>
 800fc30:	4603      	mov	r3, r0
 800fc32:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

						osMessagePut(AudioVolQueueHandle, (uint8_t) val, osWaitForever);
 800fc36:	4b53      	ldr	r3, [pc, #332]	; (800fd84 <StartCommandTask+0x2cc>)
 800fc38:	681b      	ldr	r3, [r3, #0]
 800fc3a:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800fc3e:	b2d2      	uxtb	r2, r2
 800fc40:	4611      	mov	r1, r2
 800fc42:	f04f 32ff 	mov.w	r2, #4294967295
 800fc46:	4618      	mov	r0, r3
 800fc48:	f7f7 fc08 	bl	800745c <osMessagePut>
 800fc4c:	e06f      	b.n	800fd2e <StartCommandTask+0x276>
					}
				}

				// Finger print configuration
				else if (strstr(command.var, "USER_") != NULL) {
 800fc4e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800fc52:	494d      	ldr	r1, [pc, #308]	; (800fd88 <StartCommandTask+0x2d0>)
 800fc54:	4618      	mov	r0, r3
 800fc56:	f001 fbc7 	bl	80113e8 <strstr>
 800fc5a:	4603      	mov	r3, r0
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	d05c      	beq.n	800fd1a <StartCommandTask+0x262>
					val = atoi(command.val);
 800fc60:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800fc64:	3314      	adds	r3, #20
 800fc66:	4618      	mov	r0, r3
 800fc68:	f001 fb05 	bl	8011276 <atoi>
 800fc6c:	4603      	mov	r3, r0
 800fc6e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

					if (strcmp(command.var, "USER_ADD") == 0) {
 800fc72:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800fc76:	4945      	ldr	r1, [pc, #276]	; (800fd8c <StartCommandTask+0x2d4>)
 800fc78:	4618      	mov	r0, r3
 800fc7a:	f7f0 faa9 	bl	80001d0 <strcmp>
 800fc7e:	4603      	mov	r3, r0
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d109      	bne.n	800fc98 <StartCommandTask+0x1e0>
						p = Finger_Enroll(val);
 800fc84:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800fc88:	b2db      	uxtb	r3, r3
 800fc8a:	4618      	mov	r0, r3
 800fc8c:	f7fc fa90 	bl	800c1b0 <Finger_Enroll>
 800fc90:	4603      	mov	r3, r0
 800fc92:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800fc96:	e020      	b.n	800fcda <StartCommandTask+0x222>
					}

					else if (strcmp(command.var, "USER_DELETE") == 0) {
 800fc98:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800fc9c:	493c      	ldr	r1, [pc, #240]	; (800fd90 <StartCommandTask+0x2d8>)
 800fc9e:	4618      	mov	r0, r3
 800fca0:	f7f0 fa96 	bl	80001d0 <strcmp>
 800fca4:	4603      	mov	r3, r0
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	d109      	bne.n	800fcbe <StartCommandTask+0x206>
						p = Finger_Delete_ID(val);
 800fcaa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800fcae:	b2db      	uxtb	r3, r3
 800fcb0:	4618      	mov	r0, r3
 800fcb2:	f7fc fc71 	bl	800c598 <Finger_Delete_ID>
 800fcb6:	4603      	mov	r3, r0
 800fcb8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800fcbc:	e00d      	b.n	800fcda <StartCommandTask+0x222>
					}

					else if (strcmp(command.var, "USER_RESET") == 0) {
 800fcbe:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800fcc2:	4934      	ldr	r1, [pc, #208]	; (800fd94 <StartCommandTask+0x2dc>)
 800fcc4:	4618      	mov	r0, r3
 800fcc6:	f7f0 fa83 	bl	80001d0 <strcmp>
 800fcca:	4603      	mov	r3, r0
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	d104      	bne.n	800fcda <StartCommandTask+0x222>
						p = Finger_Empty_Database();
 800fcd0:	f7fc fcaa 	bl	800c628 <Finger_Empty_Database>
 800fcd4:	4603      	mov	r3, r0
 800fcd6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
					}

					sprintf(response, "%s", command.cmd);
 800fcda:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800fcde:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800fce2:	f107 030c 	add.w	r3, r7, #12
 800fce6:	4611      	mov	r1, r2
 800fce8:	4618      	mov	r0, r3
 800fcea:	f001 fb4e 	bl	801138a <strcpy>
					if (p == FINGERPRINT_OK) {
 800fcee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d108      	bne.n	800fd08 <StartCommandTask+0x250>
						sprintf(response, "%s OK", response);
 800fcf6:	f107 020c 	add.w	r2, r7, #12
 800fcfa:	f107 030c 	add.w	r3, r7, #12
 800fcfe:	4926      	ldr	r1, [pc, #152]	; (800fd98 <StartCommandTask+0x2e0>)
 800fd00:	4618      	mov	r0, r3
 800fd02:	f001 fb15 	bl	8011330 <siprintf>
 800fd06:	e012      	b.n	800fd2e <StartCommandTask+0x276>
					} else {
						sprintf(response, "%s ERROR", response);
 800fd08:	f107 020c 	add.w	r2, r7, #12
 800fd0c:	f107 030c 	add.w	r3, r7, #12
 800fd10:	4922      	ldr	r1, [pc, #136]	; (800fd9c <StartCommandTask+0x2e4>)
 800fd12:	4618      	mov	r0, r3
 800fd14:	f001 fb0c 	bl	8011330 <siprintf>
 800fd18:	e009      	b.n	800fd2e <StartCommandTask+0x276>
					}
				}

				else {
					sprintf(response, "%s not found.", command.cmd);
 800fd1a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800fd1e:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800fd22:	f107 030c 	add.w	r3, r7, #12
 800fd26:	491e      	ldr	r1, [pc, #120]	; (800fda0 <StartCommandTask+0x2e8>)
 800fd28:	4618      	mov	r0, r3
 800fd2a:	f001 fb01 	bl	8011330 <siprintf>
				}

				// send confirmation
				Simcom_To_Server(response, strlen(response));
 800fd2e:	f107 030c 	add.w	r3, r7, #12
 800fd32:	4618      	mov	r0, r3
 800fd34:	f7f0 fa56 	bl	80001e4 <strlen>
 800fd38:	4603      	mov	r3, r0
 800fd3a:	b29a      	uxth	r2, r3
 800fd3c:	f107 030c 	add.w	r3, r7, #12
 800fd40:	4611      	mov	r1, r2
 800fd42:	4618      	mov	r0, r3
 800fd44:	f7fe fcc0 	bl	800e6c8 <Simcom_To_Server>
			}
		}
		osDelay(100);
 800fd48:	2064      	movs	r0, #100	; 0x64
 800fd4a:	f7f7 fa50 	bl	80071ee <osDelay>
		if (Simcom_Check_Command()) {
 800fd4e:	e6b7      	b.n	800fac0 <StartCommandTask+0x8>
 800fd50:	080150f8 	.word	0x080150f8
 800fd54:	08015108 	.word	0x08015108
 800fd58:	0801510c 	.word	0x0801510c
 800fd5c:	40020c00 	.word	0x40020c00
 800fd60:	08015114 	.word	0x08015114
 800fd64:	0801511c 	.word	0x0801511c
 800fd68:	08015120 	.word	0x08015120
 800fd6c:	08015128 	.word	0x08015128
 800fd70:	08015130 	.word	0x08015130
 800fd74:	08015150 	.word	0x08015150
 800fd78:	08015158 	.word	0x08015158
 800fd7c:	20008640 	.word	0x20008640
 800fd80:	08015164 	.word	0x08015164
 800fd84:	200085f4 	.word	0x200085f4
 800fd88:	08015170 	.word	0x08015170
 800fd8c:	08015178 	.word	0x08015178
 800fd90:	08015184 	.word	0x08015184
 800fd94:	08015190 	.word	0x08015190
 800fd98:	0801519c 	.word	0x0801519c
 800fd9c:	080151a4 	.word	0x080151a4
 800fda0:	080151b0 	.word	0x080151b0

0800fda4 <StartGpsTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartGpsTask */
void StartGpsTask(void const * argument)
{
 800fda4:	b580      	push	{r7, lr}
 800fda6:	b0a2      	sub	sp, #136	; 0x88
 800fda8:	af00      	add	r7, sp, #0
 800fdaa:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartGpsTask */
	extern char UBLOX_UART_RX_Buffer[UBLOX_UART_RX_BUFFER_SIZE];
	const TickType_t xDelay_ms = pdMS_TO_TICKS(REPORT_INTERVAL*1000);
 800fdac:	f241 3388 	movw	r3, #5000	; 0x1388
 800fdb0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	TickType_t xLastWakeTime;
	gps_t hgps;
	// Start GPS module
	UBLOX_DMA_Init();
 800fdb4:	f7fb fb7c 	bl	800b4b0 <UBLOX_DMA_Init>
	Ublox_Init(&hgps);
 800fdb8:	f107 030c 	add.w	r3, r7, #12
 800fdbc:	4618      	mov	r0, r3
 800fdbe:	f7fe f85d 	bl	800de7c <Ublox_Init>
	/* Infinite loop */
	xLastWakeTime = xTaskGetTickCount();
 800fdc2:	f7f9 f8eb 	bl	8008f9c <xTaskGetTickCount>
 800fdc6:	4603      	mov	r3, r0
 800fdc8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	for (;;) {
		// get gps info
		gps_process(&hgps, UBLOX_UART_RX_Buffer, strlen(UBLOX_UART_RX_Buffer));
 800fdcc:	480c      	ldr	r0, [pc, #48]	; (800fe00 <StartGpsTask+0x5c>)
 800fdce:	f7f0 fa09 	bl	80001e4 <strlen>
 800fdd2:	4602      	mov	r2, r0
 800fdd4:	f107 030c 	add.w	r3, r7, #12
 800fdd8:	4909      	ldr	r1, [pc, #36]	; (800fe00 <StartGpsTask+0x5c>)
 800fdda:	4618      	mov	r0, r3
 800fddc:	f7fd fedd 	bl	800db9a <gps_process>
		// handover data to IOT_Task
		osMailPut(GpsMailHandle, &hgps);
 800fde0:	4b08      	ldr	r3, [pc, #32]	; (800fe04 <StartGpsTask+0x60>)
 800fde2:	681b      	ldr	r3, [r3, #0]
 800fde4:	f107 020c 	add.w	r2, r7, #12
 800fde8:	4611      	mov	r1, r2
 800fdea:	4618      	mov	r0, r3
 800fdec:	f7f7 fc42 	bl	8007674 <osMailPut>

		// Report interval in second
		vTaskDelayUntil(&xLastWakeTime, xDelay_ms);
 800fdf0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800fdf4:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800fdf8:	4618      	mov	r0, r3
 800fdfa:	f7f8 ff19 	bl	8008c30 <vTaskDelayUntil>
		gps_process(&hgps, UBLOX_UART_RX_Buffer, strlen(UBLOX_UART_RX_Buffer));
 800fdfe:	e7e5      	b.n	800fdcc <StartGpsTask+0x28>
 800fe00:	2000719c 	.word	0x2000719c
 800fe04:	20008248 	.word	0x20008248

0800fe08 <StartFingerTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartFingerTask */
void StartFingerTask(void const * argument)
{
 800fe08:	b580      	push	{r7, lr}
 800fe0a:	b086      	sub	sp, #24
 800fe0c:	af00      	add	r7, sp, #0
 800fe0e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartFingerTask */
	int p, firstOn = 1, firstOff = 1;
 800fe10:	2301      	movs	r3, #1
 800fe12:	617b      	str	r3, [r7, #20]
 800fe14:	2301      	movs	r3, #1
 800fe16:	613b      	str	r3, [r7, #16]
	// Initialization
	FINGER_DMA_Init();
 800fe18:	f7fa fddc 	bl	800a9d4 <FINGER_DMA_Init>
	Finger_Init();
 800fe1c:	f7fc f9aa 	bl	800c174 <Finger_Init>
	/* Infinite loop */
	for (;;) {
		if (HAL_GPIO_ReadPin(FINGER_IRQ_GPIO_Port, FINGER_IRQ_Pin)) {
 800fe20:	2140      	movs	r1, #64	; 0x40
 800fe22:	4816      	ldr	r0, [pc, #88]	; (800fe7c <StartFingerTask+0x74>)
 800fe24:	f7f2 fc50 	bl	80026c8 <HAL_GPIO_ReadPin>
 800fe28:	4603      	mov	r3, r0
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	d016      	beq.n	800fe5c <StartFingerTask+0x54>
			// there is finger on module
			if (firstOn) {
 800fe2e:	697b      	ldr	r3, [r7, #20]
 800fe30:	2b00      	cmp	r3, #0
 800fe32:	d005      	beq.n	800fe40 <StartFingerTask+0x38>
				// get mutex
				Finger_On();
 800fe34:	f7fc f97c 	bl	800c130 <Finger_On>
				firstOff = 1;
 800fe38:	2301      	movs	r3, #1
 800fe3a:	613b      	str	r3, [r7, #16]
				firstOn = 0;
 800fe3c:	2300      	movs	r3, #0
 800fe3e:	617b      	str	r3, [r7, #20]
			}
			// scanning
			p = Finger_Auth_Fast();
 800fe40:	f7fc fc04 	bl	800c64c <Finger_Auth_Fast>
 800fe44:	4603      	mov	r3, r0
 800fe46:	60fb      	str	r3, [r7, #12]
			// indicator
			BSP_Led_Write((p > 0));
 800fe48:	68fb      	ldr	r3, [r7, #12]
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	bfcc      	ite	gt
 800fe4e:	2301      	movgt	r3, #1
 800fe50:	2300      	movle	r3, #0
 800fe52:	b2db      	uxtb	r3, r3
 800fe54:	4618      	mov	r0, r3
 800fe56:	f7fb fc5d 	bl	800b714 <BSP_Led_Write>
 800fe5a:	e00b      	b.n	800fe74 <StartFingerTask+0x6c>
		} else {
			// no finger on module
			if (firstOff) {
 800fe5c:	693b      	ldr	r3, [r7, #16]
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	d008      	beq.n	800fe74 <StartFingerTask+0x6c>
				firstOn = 1;
 800fe62:	2301      	movs	r3, #1
 800fe64:	617b      	str	r3, [r7, #20]
				firstOff = 0;
 800fe66:	2300      	movs	r3, #0
 800fe68:	613b      	str	r3, [r7, #16]
				// indicator
				BSP_Led_Write(0);
 800fe6a:	2000      	movs	r0, #0
 800fe6c:	f7fb fc52 	bl	800b714 <BSP_Led_Write>
				// release mutex
				Finger_Off();
 800fe70:	f7fc f96e 	bl	800c150 <Finger_Off>
			}
		}
		osDelay(50);
 800fe74:	2032      	movs	r0, #50	; 0x32
 800fe76:	f7f7 f9ba 	bl	80071ee <osDelay>
		if (HAL_GPIO_ReadPin(FINGER_IRQ_GPIO_Port, FINGER_IRQ_Pin)) {
 800fe7a:	e7d1      	b.n	800fe20 <StartFingerTask+0x18>
 800fe7c:	40021000 	.word	0x40021000

0800fe80 <StartAudioTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartAudioTask */
void StartAudioTask(void const * argument)
{
 800fe80:	b580      	push	{r7, lr}
 800fe82:	b088      	sub	sp, #32
 800fe84:	af00      	add	r7, sp, #0
 800fe86:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartAudioTask */
	uint32_t ulNotifiedValue;
	BaseType_t xResult;
	osEvent evt;
	/* Initialize Wave player (Codec, DMA, I2C) */
	WaveInit();
 800fe88:	f000 f99c 	bl	80101c4 <WaveInit>
	// Play wave loop forever, handover to DMA, so CPU is free
	WavePlay();
 800fe8c:	f000 f9bc 	bl	8010208 <WavePlay>
	/* Infinite loop */
	for (;;) {
		// check if get volume message
		evt = osMessageGet(AudioVolQueueHandle, 0);
 800fe90:	4b18      	ldr	r3, [pc, #96]	; (800fef4 <StartAudioTask+0x74>)
 800fe92:	6819      	ldr	r1, [r3, #0]
 800fe94:	f107 030c 	add.w	r3, r7, #12
 800fe98:	2200      	movs	r2, #0
 800fe9a:	4618      	mov	r0, r3
 800fe9c:	f7f7 fb1e 	bl	80074dc <osMessageGet>
		// do this if message arrived
		if (evt.status == osEventMessage) {
 800fea0:	68fb      	ldr	r3, [r7, #12]
 800fea2:	2b10      	cmp	r3, #16
 800fea4:	d104      	bne.n	800feb0 <StartAudioTask+0x30>
			BSP_AUDIO_OUT_SetVolume((uint8_t) evt.value.v);
 800fea6:	693b      	ldr	r3, [r7, #16]
 800fea8:	b2db      	uxtb	r3, r3
 800feaa:	4618      	mov	r0, r3
 800feac:	f000 faa2 	bl	80103f4 <BSP_AUDIO_OUT_SetVolume>
		}

		// check if event happen
		xResult = xTaskNotifyWait(0x00, ULONG_MAX, &ulNotifiedValue, 0);
 800feb0:	f107 0218 	add.w	r2, r7, #24
 800feb4:	2300      	movs	r3, #0
 800feb6:	f04f 31ff 	mov.w	r1, #4294967295
 800feba:	2000      	movs	r0, #0
 800febc:	f7f9 fd98 	bl	80099f0 <xTaskNotifyWait>
 800fec0:	61f8      	str	r0, [r7, #28]
		// do this if events occurred
		if (xResult == pdTRUE) {
 800fec2:	69fb      	ldr	r3, [r7, #28]
 800fec4:	2b01      	cmp	r3, #1
 800fec6:	d10f      	bne.n	800fee8 <StartAudioTask+0x68>
			if ((ulNotifiedValue & EVENT_AUDIO_BEEP)) {
 800fec8:	69bb      	ldr	r3, [r7, #24]
 800feca:	f003 0301 	and.w	r3, r3, #1
 800fece:	2b00      	cmp	r3, #0
 800fed0:	d00a      	beq.n	800fee8 <StartAudioTask+0x68>
				// Beep
				WaveBeepPlay(BEEP_FREQ_2000_HZ, 250);
 800fed2:	21fa      	movs	r1, #250	; 0xfa
 800fed4:	200e      	movs	r0, #14
 800fed6:	f000 f9bd 	bl	8010254 <WaveBeepPlay>
				osDelay(250);
 800feda:	20fa      	movs	r0, #250	; 0xfa
 800fedc:	f7f7 f987 	bl	80071ee <osDelay>
				WaveBeepPlay(BEEP_FREQ_2000_HZ, 250);
 800fee0:	21fa      	movs	r1, #250	; 0xfa
 800fee2:	200e      	movs	r0, #14
 800fee4:	f000 f9b6 	bl	8010254 <WaveBeepPlay>
			}
		}

		osDelay(500);
 800fee8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800feec:	f7f7 f97f 	bl	80071ee <osDelay>
		evt = osMessageGet(AudioVolQueueHandle, 0);
 800fef0:	e7ce      	b.n	800fe90 <StartAudioTask+0x10>
 800fef2:	bf00      	nop
 800fef4:	200085f4 	.word	0x200085f4

0800fef8 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800fef8:	b580      	push	{r7, lr}
 800fefa:	b082      	sub	sp, #8
 800fefc:	af00      	add	r7, sp, #0
 800fefe:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	681b      	ldr	r3, [r3, #0]
 800ff04:	4a04      	ldr	r2, [pc, #16]	; (800ff18 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800ff06:	4293      	cmp	r3, r2
 800ff08:	d101      	bne.n	800ff0e <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 800ff0a:	f7f1 f86f 	bl	8000fec <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 800ff0e:	bf00      	nop
 800ff10:	3708      	adds	r7, #8
 800ff12:	46bd      	mov	sp, r7
 800ff14:	bd80      	pop	{r7, pc}
 800ff16:	bf00      	nop
 800ff18:	40010000 	.word	0x40010000

0800ff1c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800ff1c:	b580      	push	{r7, lr}
 800ff1e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	swvPrint("Error occurrence.\n");
 800ff20:	4802      	ldr	r0, [pc, #8]	; (800ff2c <Error_Handler+0x10>)
 800ff22:	f7fb fb1d 	bl	800b560 <swvPrint>
	/* USER CODE END Error_Handler_Debug */
}
 800ff26:	bf00      	nop
 800ff28:	bd80      	pop	{r7, pc}
 800ff2a:	bf00      	nop
 800ff2c:	080151c0 	.word	0x080151c0

0800ff30 <I2Cx_Init>:

/******************************* I2C Routines**********************************/
/**
 * @brief  Configures I2C interface.
 */
static void I2Cx_Init(void) {
 800ff30:	b580      	push	{r7, lr}
 800ff32:	af00      	add	r7, sp, #0
	if (HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET) {
 800ff34:	480e      	ldr	r0, [pc, #56]	; (800ff70 <I2Cx_Init+0x40>)
 800ff36:	f7f3 fcd1 	bl	80038dc <HAL_I2C_GetState>
 800ff3a:	4603      	mov	r3, r0
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	d114      	bne.n	800ff6a <I2Cx_Init+0x3a>
		/* DISCOVERY_I2Cx peripheral configuration */
		I2cHandle.Init.ClockSpeed = BSP_I2C_SPEED;
 800ff40:	4b0b      	ldr	r3, [pc, #44]	; (800ff70 <I2Cx_Init+0x40>)
 800ff42:	4a0c      	ldr	r2, [pc, #48]	; (800ff74 <I2Cx_Init+0x44>)
 800ff44:	605a      	str	r2, [r3, #4]
		I2cHandle.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800ff46:	4b0a      	ldr	r3, [pc, #40]	; (800ff70 <I2Cx_Init+0x40>)
 800ff48:	2200      	movs	r2, #0
 800ff4a:	609a      	str	r2, [r3, #8]
		I2cHandle.Init.OwnAddress1 = 0x33;
 800ff4c:	4b08      	ldr	r3, [pc, #32]	; (800ff70 <I2Cx_Init+0x40>)
 800ff4e:	2233      	movs	r2, #51	; 0x33
 800ff50:	60da      	str	r2, [r3, #12]
		I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800ff52:	4b07      	ldr	r3, [pc, #28]	; (800ff70 <I2Cx_Init+0x40>)
 800ff54:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800ff58:	611a      	str	r2, [r3, #16]
		I2cHandle.Instance = DISCOVERY_I2Cx;
 800ff5a:	4b05      	ldr	r3, [pc, #20]	; (800ff70 <I2Cx_Init+0x40>)
 800ff5c:	4a06      	ldr	r2, [pc, #24]	; (800ff78 <I2Cx_Init+0x48>)
 800ff5e:	601a      	str	r2, [r3, #0]

		/* Init the I2C */
		I2Cx_MspInit();
 800ff60:	f000 f876 	bl	8010050 <I2Cx_MspInit>
		HAL_I2C_Init(&I2cHandle);
 800ff64:	4802      	ldr	r0, [pc, #8]	; (800ff70 <I2Cx_Init+0x40>)
 800ff66:	f7f2 fbfb 	bl	8002760 <HAL_I2C_Init>
	}
}
 800ff6a:	bf00      	nop
 800ff6c:	bd80      	pop	{r7, pc}
 800ff6e:	bf00      	nop
 800ff70:	20006790 	.word	0x20006790
 800ff74:	000186a0 	.word	0x000186a0
 800ff78:	40005400 	.word	0x40005400

0800ff7c <I2Cx_WriteData>:
 * @param  Addr: Device address on BUS Bus.
 * @param  Reg: The target register address to write
 * @param  Value: The target register value to be written
 * @retval HAL status
 */
static void I2Cx_WriteData(uint8_t Addr, uint8_t Reg, uint8_t Value) {
 800ff7c:	b580      	push	{r7, lr}
 800ff7e:	b088      	sub	sp, #32
 800ff80:	af04      	add	r7, sp, #16
 800ff82:	4603      	mov	r3, r0
 800ff84:	71fb      	strb	r3, [r7, #7]
 800ff86:	460b      	mov	r3, r1
 800ff88:	71bb      	strb	r3, [r7, #6]
 800ff8a:	4613      	mov	r3, r2
 800ff8c:	717b      	strb	r3, [r7, #5]
	HAL_StatusTypeDef status = HAL_OK;
 800ff8e:	2300      	movs	r3, #0
 800ff90:	73fb      	strb	r3, [r7, #15]

	status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t) Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 800ff92:	79fb      	ldrb	r3, [r7, #7]
 800ff94:	b299      	uxth	r1, r3
 800ff96:	79bb      	ldrb	r3, [r7, #6]
 800ff98:	b29a      	uxth	r2, r3
 800ff9a:	4b0c      	ldr	r3, [pc, #48]	; (800ffcc <I2Cx_WriteData+0x50>)
 800ff9c:	681b      	ldr	r3, [r3, #0]
 800ff9e:	9302      	str	r3, [sp, #8]
 800ffa0:	2301      	movs	r3, #1
 800ffa2:	9301      	str	r3, [sp, #4]
 800ffa4:	1d7b      	adds	r3, r7, #5
 800ffa6:	9300      	str	r3, [sp, #0]
 800ffa8:	2301      	movs	r3, #1
 800ffaa:	4809      	ldr	r0, [pc, #36]	; (800ffd0 <I2Cx_WriteData+0x54>)
 800ffac:	f7f3 f854 	bl	8003058 <HAL_I2C_Mem_Write>
 800ffb0:	4603      	mov	r3, r0
 800ffb2:	73fb      	strb	r3, [r7, #15]

	/* Check the communication status */
	if (status != HAL_OK) {
 800ffb4:	7bfb      	ldrb	r3, [r7, #15]
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d003      	beq.n	800ffc2 <I2Cx_WriteData+0x46>
		/* Execute user timeout callback */
		I2Cx_Error(Addr);
 800ffba:	79fb      	ldrb	r3, [r7, #7]
 800ffbc:	4618      	mov	r0, r3
 800ffbe:	f000 f837 	bl	8010030 <I2Cx_Error>
	}
}
 800ffc2:	bf00      	nop
 800ffc4:	3710      	adds	r7, #16
 800ffc6:	46bd      	mov	sp, r7
 800ffc8:	bd80      	pop	{r7, pc}
 800ffca:	bf00      	nop
 800ffcc:	20000048 	.word	0x20000048
 800ffd0:	20006790 	.word	0x20006790

0800ffd4 <I2Cx_ReadData>:
 * @brief  Read a register of the device through BUS
 * @param  Addr: Device address on BUS
 * @param  Reg: The target register address to read
 * @retval HAL status
 */
static uint8_t I2Cx_ReadData(uint8_t Addr, uint8_t Reg) {
 800ffd4:	b580      	push	{r7, lr}
 800ffd6:	b088      	sub	sp, #32
 800ffd8:	af04      	add	r7, sp, #16
 800ffda:	4603      	mov	r3, r0
 800ffdc:	460a      	mov	r2, r1
 800ffde:	71fb      	strb	r3, [r7, #7]
 800ffe0:	4613      	mov	r3, r2
 800ffe2:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef status = HAL_OK;
 800ffe4:	2300      	movs	r3, #0
 800ffe6:	73fb      	strb	r3, [r7, #15]
	uint8_t value = 0;
 800ffe8:	2300      	movs	r3, #0
 800ffea:	73bb      	strb	r3, [r7, #14]

	status = HAL_I2C_Mem_Read(&I2cHandle, Addr, (uint16_t) Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 800ffec:	79fb      	ldrb	r3, [r7, #7]
 800ffee:	b299      	uxth	r1, r3
 800fff0:	79bb      	ldrb	r3, [r7, #6]
 800fff2:	b29a      	uxth	r2, r3
 800fff4:	4b0c      	ldr	r3, [pc, #48]	; (8010028 <I2Cx_ReadData+0x54>)
 800fff6:	681b      	ldr	r3, [r3, #0]
 800fff8:	9302      	str	r3, [sp, #8]
 800fffa:	2301      	movs	r3, #1
 800fffc:	9301      	str	r3, [sp, #4]
 800fffe:	f107 030e 	add.w	r3, r7, #14
 8010002:	9300      	str	r3, [sp, #0]
 8010004:	2301      	movs	r3, #1
 8010006:	4809      	ldr	r0, [pc, #36]	; (801002c <I2Cx_ReadData+0x58>)
 8010008:	f7f3 f920 	bl	800324c <HAL_I2C_Mem_Read>
 801000c:	4603      	mov	r3, r0
 801000e:	73fb      	strb	r3, [r7, #15]

	/* Check the communication status */
	if (status != HAL_OK) {
 8010010:	7bfb      	ldrb	r3, [r7, #15]
 8010012:	2b00      	cmp	r3, #0
 8010014:	d003      	beq.n	801001e <I2Cx_ReadData+0x4a>
		/* Execute user timeout callback */
		I2Cx_Error(Addr);
 8010016:	79fb      	ldrb	r3, [r7, #7]
 8010018:	4618      	mov	r0, r3
 801001a:	f000 f809 	bl	8010030 <I2Cx_Error>
	}
	return value;
 801001e:	7bbb      	ldrb	r3, [r7, #14]
}
 8010020:	4618      	mov	r0, r3
 8010022:	3710      	adds	r7, #16
 8010024:	46bd      	mov	sp, r7
 8010026:	bd80      	pop	{r7, pc}
 8010028:	20000048 	.word	0x20000048
 801002c:	20006790 	.word	0x20006790

08010030 <I2Cx_Error>:

/**
 * @brief  Manages error callback by re-initializing I2C.
 * @param  Addr: I2C Address
 */
static void I2Cx_Error(uint8_t Addr) {
 8010030:	b580      	push	{r7, lr}
 8010032:	b082      	sub	sp, #8
 8010034:	af00      	add	r7, sp, #0
 8010036:	4603      	mov	r3, r0
 8010038:	71fb      	strb	r3, [r7, #7]
	/* De-initialize the I2C communication bus */
	HAL_I2C_DeInit(&I2cHandle);
 801003a:	4804      	ldr	r0, [pc, #16]	; (801004c <I2Cx_Error+0x1c>)
 801003c:	f7f2 fcb8 	bl	80029b0 <HAL_I2C_DeInit>

	/* Re-Initialize the I2C communication bus */
	I2Cx_Init();
 8010040:	f7ff ff76 	bl	800ff30 <I2Cx_Init>
}
 8010044:	bf00      	nop
 8010046:	3708      	adds	r7, #8
 8010048:	46bd      	mov	sp, r7
 801004a:	bd80      	pop	{r7, pc}
 801004c:	20006790 	.word	0x20006790

08010050 <I2Cx_MspInit>:

/**
 * @brief I2C MSP Initialization
 */
static void I2Cx_MspInit(void) {
 8010050:	b580      	push	{r7, lr}
 8010052:	b088      	sub	sp, #32
 8010054:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;

	/* Enable I2C GPIO clocks */
	DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE()
 8010056:	2300      	movs	r3, #0
 8010058:	60bb      	str	r3, [r7, #8]
 801005a:	4b25      	ldr	r3, [pc, #148]	; (80100f0 <I2Cx_MspInit+0xa0>)
 801005c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801005e:	4a24      	ldr	r2, [pc, #144]	; (80100f0 <I2Cx_MspInit+0xa0>)
 8010060:	f043 0302 	orr.w	r3, r3, #2
 8010064:	6313      	str	r3, [r2, #48]	; 0x30
 8010066:	4b22      	ldr	r3, [pc, #136]	; (80100f0 <I2Cx_MspInit+0xa0>)
 8010068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801006a:	f003 0302 	and.w	r3, r3, #2
 801006e:	60bb      	str	r3, [r7, #8]
 8010070:	68bb      	ldr	r3, [r7, #8]
	;

	/* DISCOVERY_I2Cx SCL and SDA pins configuration ---------------------------*/
	GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8010072:	f44f 7310 	mov.w	r3, #576	; 0x240
 8010076:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8010078:	2312      	movs	r3, #18
 801007a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 801007c:	2302      	movs	r3, #2
 801007e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010080:	2300      	movs	r3, #0
 8010082:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8010084:	2304      	movs	r3, #4
 8010086:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &GPIO_InitStruct);
 8010088:	f107 030c 	add.w	r3, r7, #12
 801008c:	4619      	mov	r1, r3
 801008e:	4819      	ldr	r0, [pc, #100]	; (80100f4 <I2Cx_MspInit+0xa4>)
 8010090:	f7f2 f886 	bl	80021a0 <HAL_GPIO_Init>

	/* Enable the DISCOVERY_I2Cx peripheral clock */
	DISCOVERY_I2Cx_CLK_ENABLE()
 8010094:	2300      	movs	r3, #0
 8010096:	607b      	str	r3, [r7, #4]
 8010098:	4b15      	ldr	r3, [pc, #84]	; (80100f0 <I2Cx_MspInit+0xa0>)
 801009a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801009c:	4a14      	ldr	r2, [pc, #80]	; (80100f0 <I2Cx_MspInit+0xa0>)
 801009e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80100a2:	6413      	str	r3, [r2, #64]	; 0x40
 80100a4:	4b12      	ldr	r3, [pc, #72]	; (80100f0 <I2Cx_MspInit+0xa0>)
 80100a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80100a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80100ac:	607b      	str	r3, [r7, #4]
 80100ae:	687b      	ldr	r3, [r7, #4]
	;

	/* Force the I2C peripheral clock reset */
	DISCOVERY_I2Cx_FORCE_RESET();
 80100b0:	4b0f      	ldr	r3, [pc, #60]	; (80100f0 <I2Cx_MspInit+0xa0>)
 80100b2:	6a1b      	ldr	r3, [r3, #32]
 80100b4:	4a0e      	ldr	r2, [pc, #56]	; (80100f0 <I2Cx_MspInit+0xa0>)
 80100b6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80100ba:	6213      	str	r3, [r2, #32]

	/* Release the I2C peripheral clock reset */
	DISCOVERY_I2Cx_RELEASE_RESET();
 80100bc:	4b0c      	ldr	r3, [pc, #48]	; (80100f0 <I2Cx_MspInit+0xa0>)
 80100be:	6a1b      	ldr	r3, [r3, #32]
 80100c0:	4a0b      	ldr	r2, [pc, #44]	; (80100f0 <I2Cx_MspInit+0xa0>)
 80100c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80100c6:	6213      	str	r3, [r2, #32]

	/* Enable and set I2Cx Interrupt to the highest priority */
	HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0, 0);
 80100c8:	2200      	movs	r2, #0
 80100ca:	2100      	movs	r1, #0
 80100cc:	201f      	movs	r0, #31
 80100ce:	f7f1 f983 	bl	80013d8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 80100d2:	201f      	movs	r0, #31
 80100d4:	f7f1 f99c 	bl	8001410 <HAL_NVIC_EnableIRQ>

	/* Enable and set I2Cx Interrupt to the highest priority */
	HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0, 0);
 80100d8:	2200      	movs	r2, #0
 80100da:	2100      	movs	r1, #0
 80100dc:	2020      	movs	r0, #32
 80100de:	f7f1 f97b 	bl	80013d8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 80100e2:	2020      	movs	r0, #32
 80100e4:	f7f1 f994 	bl	8001410 <HAL_NVIC_EnableIRQ>
}
 80100e8:	bf00      	nop
 80100ea:	3720      	adds	r7, #32
 80100ec:	46bd      	mov	sp, r7
 80100ee:	bd80      	pop	{r7, pc}
 80100f0:	40023800 	.word	0x40023800
 80100f4:	40020400 	.word	0x40020400

080100f8 <AUDIO_IO_Init>:
/********************************* LINK AUDIO *********************************/

/**
 * @brief  Initializes Audio low level.
 */
void AUDIO_IO_Init(void) {
 80100f8:	b580      	push	{r7, lr}
 80100fa:	b086      	sub	sp, #24
 80100fc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;

	/* Enable Reset GPIO Clock */
	AUDIO_RESET_GPIO_CLK_ENABLE()
 80100fe:	2300      	movs	r3, #0
 8010100:	603b      	str	r3, [r7, #0]
 8010102:	4b17      	ldr	r3, [pc, #92]	; (8010160 <AUDIO_IO_Init+0x68>)
 8010104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010106:	4a16      	ldr	r2, [pc, #88]	; (8010160 <AUDIO_IO_Init+0x68>)
 8010108:	f043 0308 	orr.w	r3, r3, #8
 801010c:	6313      	str	r3, [r2, #48]	; 0x30
 801010e:	4b14      	ldr	r3, [pc, #80]	; (8010160 <AUDIO_IO_Init+0x68>)
 8010110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010112:	f003 0308 	and.w	r3, r3, #8
 8010116:	603b      	str	r3, [r7, #0]
 8010118:	683b      	ldr	r3, [r7, #0]
	;

	/* Audio reset pin configuration */
	GPIO_InitStruct.Pin = AUDIO_RESET_PIN;
 801011a:	2310      	movs	r3, #16
 801011c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801011e:	2301      	movs	r3, #1
 8010120:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8010122:	2302      	movs	r3, #2
 8010124:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010126:	2300      	movs	r3, #0
 8010128:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStruct);
 801012a:	1d3b      	adds	r3, r7, #4
 801012c:	4619      	mov	r1, r3
 801012e:	480d      	ldr	r0, [pc, #52]	; (8010164 <AUDIO_IO_Init+0x6c>)
 8010130:	f7f2 f836 	bl	80021a0 <HAL_GPIO_Init>

	I2Cx_Init();
 8010134:	f7ff fefc 	bl	800ff30 <I2Cx_Init>

	/* Power Down the codec */
	HAL_GPIO_WritePin(AUDIO_RESET_GPIO, AUDIO_RESET_PIN, GPIO_PIN_RESET);
 8010138:	2200      	movs	r2, #0
 801013a:	2110      	movs	r1, #16
 801013c:	4809      	ldr	r0, [pc, #36]	; (8010164 <AUDIO_IO_Init+0x6c>)
 801013e:	f7f2 fadb 	bl	80026f8 <HAL_GPIO_WritePin>

	/* Wait for a delay to insure registers erasing */
	HAL_Delay(5);
 8010142:	2005      	movs	r0, #5
 8010144:	f7f0 ff72 	bl	800102c <HAL_Delay>

	/* Power on the codec */
	HAL_GPIO_WritePin(AUDIO_RESET_GPIO, AUDIO_RESET_PIN, GPIO_PIN_SET);
 8010148:	2201      	movs	r2, #1
 801014a:	2110      	movs	r1, #16
 801014c:	4805      	ldr	r0, [pc, #20]	; (8010164 <AUDIO_IO_Init+0x6c>)
 801014e:	f7f2 fad3 	bl	80026f8 <HAL_GPIO_WritePin>

	/* Wait for a delay to insure registers erasing */
	HAL_Delay(5);
 8010152:	2005      	movs	r0, #5
 8010154:	f7f0 ff6a 	bl	800102c <HAL_Delay>
}
 8010158:	bf00      	nop
 801015a:	3718      	adds	r7, #24
 801015c:	46bd      	mov	sp, r7
 801015e:	bd80      	pop	{r7, pc}
 8010160:	40023800 	.word	0x40023800
 8010164:	40020c00 	.word	0x40020c00

08010168 <AUDIO_IO_DeInit>:

/**
 * @brief  DeInitializes Audio low level.
 */
void AUDIO_IO_DeInit(void) {
 8010168:	b480      	push	{r7}
 801016a:	af00      	add	r7, sp, #0

}
 801016c:	bf00      	nop
 801016e:	46bd      	mov	sp, r7
 8010170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010174:	4770      	bx	lr

08010176 <AUDIO_IO_Write>:
 * @brief  Writes a single data.
 * @param  Addr: I2C address
 * @param  Reg: Reg address
 * @param  Value: Data to be written
 */
void AUDIO_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value) {
 8010176:	b580      	push	{r7, lr}
 8010178:	b082      	sub	sp, #8
 801017a:	af00      	add	r7, sp, #0
 801017c:	4603      	mov	r3, r0
 801017e:	71fb      	strb	r3, [r7, #7]
 8010180:	460b      	mov	r3, r1
 8010182:	71bb      	strb	r3, [r7, #6]
 8010184:	4613      	mov	r3, r2
 8010186:	717b      	strb	r3, [r7, #5]
	I2Cx_WriteData(Addr, Reg, Value);
 8010188:	797a      	ldrb	r2, [r7, #5]
 801018a:	79b9      	ldrb	r1, [r7, #6]
 801018c:	79fb      	ldrb	r3, [r7, #7]
 801018e:	4618      	mov	r0, r3
 8010190:	f7ff fef4 	bl	800ff7c <I2Cx_WriteData>
}
 8010194:	bf00      	nop
 8010196:	3708      	adds	r7, #8
 8010198:	46bd      	mov	sp, r7
 801019a:	bd80      	pop	{r7, pc}

0801019c <AUDIO_IO_Read>:
 * @brief  Reads a single data.
 * @param  Addr: I2C address
 * @param  Reg: Reg address
 * @retval Data to be read
 */
uint8_t AUDIO_IO_Read(uint8_t Addr, uint8_t Reg) {
 801019c:	b580      	push	{r7, lr}
 801019e:	b082      	sub	sp, #8
 80101a0:	af00      	add	r7, sp, #0
 80101a2:	4603      	mov	r3, r0
 80101a4:	460a      	mov	r2, r1
 80101a6:	71fb      	strb	r3, [r7, #7]
 80101a8:	4613      	mov	r3, r2
 80101aa:	71bb      	strb	r3, [r7, #6]
	return I2Cx_ReadData(Addr, Reg);
 80101ac:	79ba      	ldrb	r2, [r7, #6]
 80101ae:	79fb      	ldrb	r3, [r7, #7]
 80101b0:	4611      	mov	r1, r2
 80101b2:	4618      	mov	r0, r3
 80101b4:	f7ff ff0e 	bl	800ffd4 <I2Cx_ReadData>
 80101b8:	4603      	mov	r3, r0
}
 80101ba:	4618      	mov	r0, r3
 80101bc:	3708      	adds	r7, #8
 80101be:	46bd      	mov	sp, r7
 80101c0:	bd80      	pop	{r7, pc}
	...

080101c4 <WaveInit>:
static uint16_t AudioPlaySize;
/* Re-play Wave file status on/off. */
volatile uint32_t RepeatState = REPEAT_ON;


void WaveInit(void) {
 80101c4:	b580      	push	{r7, lr}
 80101c6:	b082      	sub	sp, #8
 80101c8:	af00      	add	r7, sp, #0
	uint8_t ret;
	do {
		swvPrintLn("WaveInit");
 80101ca:	480c      	ldr	r0, [pc, #48]	; (80101fc <WaveInit+0x38>)
 80101cc:	f7fb f9ea 	bl	800b5a4 <swvPrintLn>

		/* Initialize Wave player (Codec, DMA, I2C) */
		ret = BSP_AUDIO_OUT_Init(OUTPUT_DEVICE_AUTO, Volume, AUDIO_SAMPLE_FREQ);
 80101d0:	4b0b      	ldr	r3, [pc, #44]	; (8010200 <WaveInit+0x3c>)
 80101d2:	7819      	ldrb	r1, [r3, #0]
 80101d4:	4b0b      	ldr	r3, [pc, #44]	; (8010204 <WaveInit+0x40>)
 80101d6:	681b      	ldr	r3, [r3, #0]
 80101d8:	461a      	mov	r2, r3
 80101da:	2004      	movs	r0, #4
 80101dc:	f000 f870 	bl	80102c0 <BSP_AUDIO_OUT_Init>
 80101e0:	4603      	mov	r3, r0
 80101e2:	71fb      	strb	r3, [r7, #7]

		osDelay(500);
 80101e4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80101e8:	f7f7 f801 	bl	80071ee <osDelay>
	} while (ret != 0);
 80101ec:	79fb      	ldrb	r3, [r7, #7]
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	d1eb      	bne.n	80101ca <WaveInit+0x6>
}
 80101f2:	bf00      	nop
 80101f4:	3708      	adds	r7, #8
 80101f6:	46bd      	mov	sp, r7
 80101f8:	bd80      	pop	{r7, pc}
 80101fa:	bf00      	nop
 80101fc:	080151d4 	.word	0x080151d4
 8010200:	2000004c 	.word	0x2000004c
 8010204:	08015270 	.word	0x08015270

08010208 <WavePlay>:

void WavePlay(void) {
 8010208:	b580      	push	{r7, lr}
 801020a:	af00      	add	r7, sp, #0
	/* Get data size from audio file */
	AudioRemSize = AUDIO_SAMPLE_SIZE;
 801020c:	4b0d      	ldr	r3, [pc, #52]	; (8010244 <WavePlay+0x3c>)
 801020e:	681b      	ldr	r3, [r3, #0]
 8010210:	4a0d      	ldr	r2, [pc, #52]	; (8010248 <WavePlay+0x40>)
 8010212:	6013      	str	r3, [r2, #0]
	/* Get total data to be played */
	if (AUDIO_SAMPLE_SIZE > AUDIO_BUFFER_SIZE) {
 8010214:	4b0b      	ldr	r3, [pc, #44]	; (8010244 <WavePlay+0x3c>)
 8010216:	681b      	ldr	r3, [r3, #0]
 8010218:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801021c:	d904      	bls.n	8010228 <WavePlay+0x20>
		AudioPlaySize = AUDIO_BUFFER_SIZE;
 801021e:	4b0b      	ldr	r3, [pc, #44]	; (801024c <WavePlay+0x44>)
 8010220:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8010224:	801a      	strh	r2, [r3, #0]
 8010226:	e004      	b.n	8010232 <WavePlay+0x2a>
	} else {
		AudioPlaySize = AUDIO_SAMPLE_SIZE;
 8010228:	4b06      	ldr	r3, [pc, #24]	; (8010244 <WavePlay+0x3c>)
 801022a:	681b      	ldr	r3, [r3, #0]
 801022c:	b29a      	uxth	r2, r3
 801022e:	4b07      	ldr	r3, [pc, #28]	; (801024c <WavePlay+0x44>)
 8010230:	801a      	strh	r2, [r3, #0]
	}

	/* Start playing Wave */
	BSP_AUDIO_OUT_Play((uint16_t*) AUDIO_SAMPLE, AudioPlaySize);
 8010232:	4b06      	ldr	r3, [pc, #24]	; (801024c <WavePlay+0x44>)
 8010234:	881b      	ldrh	r3, [r3, #0]
 8010236:	4619      	mov	r1, r3
 8010238:	4805      	ldr	r0, [pc, #20]	; (8010250 <WavePlay+0x48>)
 801023a:	f000 f89d 	bl	8010378 <BSP_AUDIO_OUT_Play>
}
 801023e:	bf00      	nop
 8010240:	bd80      	pop	{r7, pc}
 8010242:	bf00      	nop
 8010244:	08015274 	.word	0x08015274
 8010248:	200067ec 	.word	0x200067ec
 801024c:	200067f0 	.word	0x200067f0
 8010250:	08015278 	.word	0x08015278

08010254 <WaveBeepPlay>:

void WaveBeepPlay(uint8_t Frequency, uint16_t TimeMS) {
 8010254:	b590      	push	{r4, r7, lr}
 8010256:	b083      	sub	sp, #12
 8010258:	af00      	add	r7, sp, #0
 801025a:	4603      	mov	r3, r0
 801025c:	460a      	mov	r2, r1
 801025e:	71fb      	strb	r3, [r7, #7]
 8010260:	4613      	mov	r3, r2
 8010262:	80bb      	strh	r3, [r7, #4]
	osRecursiveMutexWait(AudioBeepMutexHandle, osWaitForever);
 8010264:	4b14      	ldr	r3, [pc, #80]	; (80102b8 <WaveBeepPlay+0x64>)
 8010266:	681b      	ldr	r3, [r3, #0]
 8010268:	f04f 31ff 	mov.w	r1, #4294967295
 801026c:	4618      	mov	r0, r3
 801026e:	f7f7 fade 	bl	800782e <osRecursiveMutexWait>
	pAudioDrv->SetBeep(AUDIO_I2C_ADDRESS, Frequency, 0, 0);
 8010272:	4b12      	ldr	r3, [pc, #72]	; (80102bc <WaveBeepPlay+0x68>)
 8010274:	681b      	ldr	r3, [r3, #0]
 8010276:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8010278:	79f9      	ldrb	r1, [r7, #7]
 801027a:	2300      	movs	r3, #0
 801027c:	2200      	movs	r2, #0
 801027e:	2094      	movs	r0, #148	; 0x94
 8010280:	47a0      	blx	r4
	pAudioDrv->Beep(AUDIO_I2C_ADDRESS, BEEP_MODE_CONTINUOUS, BEEP_MIX_OFF);
 8010282:	4b0e      	ldr	r3, [pc, #56]	; (80102bc <WaveBeepPlay+0x68>)
 8010284:	681b      	ldr	r3, [r3, #0]
 8010286:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010288:	2201      	movs	r2, #1
 801028a:	2103      	movs	r1, #3
 801028c:	2094      	movs	r0, #148	; 0x94
 801028e:	4798      	blx	r3
	// delay with RTOS
	osDelay(TimeMS);
 8010290:	88bb      	ldrh	r3, [r7, #4]
 8010292:	4618      	mov	r0, r3
 8010294:	f7f6 ffab 	bl	80071ee <osDelay>
	// than stop
	pAudioDrv->Beep(AUDIO_I2C_ADDRESS, BEEP_MODE_OFF, BEEP_MIX_OFF);
 8010298:	4b08      	ldr	r3, [pc, #32]	; (80102bc <WaveBeepPlay+0x68>)
 801029a:	681b      	ldr	r3, [r3, #0]
 801029c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801029e:	2201      	movs	r2, #1
 80102a0:	2100      	movs	r1, #0
 80102a2:	2094      	movs	r0, #148	; 0x94
 80102a4:	4798      	blx	r3
	osRecursiveMutexRelease(AudioBeepMutexHandle);
 80102a6:	4b04      	ldr	r3, [pc, #16]	; (80102b8 <WaveBeepPlay+0x64>)
 80102a8:	681b      	ldr	r3, [r3, #0]
 80102aa:	4618      	mov	r0, r3
 80102ac:	f7f7 faac 	bl	8007808 <osRecursiveMutexRelease>
}
 80102b0:	bf00      	nop
 80102b2:	370c      	adds	r7, #12
 80102b4:	46bd      	mov	sp, r7
 80102b6:	bd90      	pop	{r4, r7, pc}
 80102b8:	20008458 	.word	0x20008458
 80102bc:	200067e4 	.word	0x200067e4

080102c0 <BSP_AUDIO_OUT_Init>:
 *                       OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO .
 * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
 * @param  AudioFreq: Audio frequency used to play the audio stream.
 * @retval AUDIO_OK if correct communication, else wrong communication
 */
uint8_t BSP_AUDIO_OUT_Init(uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq) {
 80102c0:	b590      	push	{r4, r7, lr}
 80102c2:	b085      	sub	sp, #20
 80102c4:	af00      	add	r7, sp, #0
 80102c6:	4603      	mov	r3, r0
 80102c8:	603a      	str	r2, [r7, #0]
 80102ca:	80fb      	strh	r3, [r7, #6]
 80102cc:	460b      	mov	r3, r1
 80102ce:	717b      	strb	r3, [r7, #5]
	uint8_t ret = AUDIO_OK;
 80102d0:	2300      	movs	r3, #0
 80102d2:	73fb      	strb	r3, [r7, #15]

	/* PLL clock is set depending by the AudioFreq (44.1khz vs 48khz groups) */
	BSP_AUDIO_OUT_ClockConfig(&hi2s3, AudioFreq, NULL);
 80102d4:	2200      	movs	r2, #0
 80102d6:	6839      	ldr	r1, [r7, #0]
 80102d8:	4822      	ldr	r0, [pc, #136]	; (8010364 <BSP_AUDIO_OUT_Init+0xa4>)
 80102da:	f000 f8d5 	bl	8010488 <BSP_AUDIO_OUT_ClockConfig>

	/* I2S data transfer preparation:
	 Prepare the Media to be used for the audio transfer from memory to I2S peripheral */
	hi2s3.Instance = I2S3;
 80102de:	4b21      	ldr	r3, [pc, #132]	; (8010364 <BSP_AUDIO_OUT_Init+0xa4>)
 80102e0:	4a21      	ldr	r2, [pc, #132]	; (8010368 <BSP_AUDIO_OUT_Init+0xa8>)
 80102e2:	601a      	str	r2, [r3, #0]
	if (HAL_I2S_GetState(&hi2s3) == HAL_I2S_STATE_RESET) {
 80102e4:	481f      	ldr	r0, [pc, #124]	; (8010364 <BSP_AUDIO_OUT_Init+0xa4>)
 80102e6:	f7f4 f973 	bl	80045d0 <HAL_I2S_GetState>
 80102ea:	4603      	mov	r3, r0
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	d103      	bne.n	80102f8 <BSP_AUDIO_OUT_Init+0x38>
		/* Init the I2S MSP: this __weak function can be redefined by the application*/
		BSP_AUDIO_OUT_MspInit(&hi2s3, NULL);
 80102f0:	2100      	movs	r1, #0
 80102f2:	481c      	ldr	r0, [pc, #112]	; (8010364 <BSP_AUDIO_OUT_Init+0xa4>)
 80102f4:	f000 f920 	bl	8010538 <BSP_AUDIO_OUT_MspInit>
	}

	/* I2S data transfer preparation:
	 Prepare the Media to be used for the audio transfer from memory to I2S peripheral */
	/* Configure the I2S peripheral */
	if (I2S3_Init(AudioFreq) != AUDIO_OK) {
 80102f8:	6838      	ldr	r0, [r7, #0]
 80102fa:	f000 fa59 	bl	80107b0 <I2S3_Init>
 80102fe:	4603      	mov	r3, r0
 8010300:	2b00      	cmp	r3, #0
 8010302:	d001      	beq.n	8010308 <BSP_AUDIO_OUT_Init+0x48>
		ret = AUDIO_ERROR;
 8010304:	2301      	movs	r3, #1
 8010306:	73fb      	strb	r3, [r7, #15]
	}

	if (ret == AUDIO_OK) {
 8010308:	7bfb      	ldrb	r3, [r7, #15]
 801030a:	2b00      	cmp	r3, #0
 801030c:	d10e      	bne.n	801032c <BSP_AUDIO_OUT_Init+0x6c>
		/* Retieve audio codec identifier */
		if (((cs43l22_drv.ReadID(AUDIO_I2C_ADDRESS)) & CS43L22_ID_MASK) == CS43L22_ID) {
 801030e:	4b17      	ldr	r3, [pc, #92]	; (801036c <BSP_AUDIO_OUT_Init+0xac>)
 8010310:	689b      	ldr	r3, [r3, #8]
 8010312:	2094      	movs	r0, #148	; 0x94
 8010314:	4798      	blx	r3
 8010316:	4603      	mov	r3, r0
 8010318:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801031c:	2be0      	cmp	r3, #224	; 0xe0
 801031e:	d103      	bne.n	8010328 <BSP_AUDIO_OUT_Init+0x68>
			/* Initialize the audio driver structure */
			pAudioDrv = &cs43l22_drv;
 8010320:	4b13      	ldr	r3, [pc, #76]	; (8010370 <BSP_AUDIO_OUT_Init+0xb0>)
 8010322:	4a12      	ldr	r2, [pc, #72]	; (801036c <BSP_AUDIO_OUT_Init+0xac>)
 8010324:	601a      	str	r2, [r3, #0]
 8010326:	e001      	b.n	801032c <BSP_AUDIO_OUT_Init+0x6c>
		} else {
			ret = AUDIO_ERROR;
 8010328:	2301      	movs	r3, #1
 801032a:	73fb      	strb	r3, [r7, #15]
		}
	}

	if (ret == AUDIO_OK) {
 801032c:	7bfb      	ldrb	r3, [r7, #15]
 801032e:	2b00      	cmp	r3, #0
 8010330:	d113      	bne.n	801035a <BSP_AUDIO_OUT_Init+0x9a>
		pAudioDrv->Init(AUDIO_I2C_ADDRESS, OutputDevice, VOLUME_CALIBRATOR(Volume), AudioFreq);
 8010332:	4b0f      	ldr	r3, [pc, #60]	; (8010370 <BSP_AUDIO_OUT_Init+0xb0>)
 8010334:	681b      	ldr	r3, [r3, #0]
 8010336:	681c      	ldr	r4, [r3, #0]
 8010338:	797a      	ldrb	r2, [r7, #5]
 801033a:	4613      	mov	r3, r2
 801033c:	019b      	lsls	r3, r3, #6
 801033e:	4413      	add	r3, r2
 8010340:	4a0c      	ldr	r2, [pc, #48]	; (8010374 <BSP_AUDIO_OUT_Init+0xb4>)
 8010342:	fb82 1203 	smull	r1, r2, r2, r3
 8010346:	1152      	asrs	r2, r2, #5
 8010348:	17db      	asrs	r3, r3, #31
 801034a:	1ad3      	subs	r3, r2, r3
 801034c:	b2db      	uxtb	r3, r3
 801034e:	3341      	adds	r3, #65	; 0x41
 8010350:	b2da      	uxtb	r2, r3
 8010352:	88f9      	ldrh	r1, [r7, #6]
 8010354:	683b      	ldr	r3, [r7, #0]
 8010356:	2094      	movs	r0, #148	; 0x94
 8010358:	47a0      	blx	r4
	}

	return ret;
 801035a:	7bfb      	ldrb	r3, [r7, #15]
}
 801035c:	4618      	mov	r0, r3
 801035e:	3714      	adds	r7, #20
 8010360:	46bd      	mov	sp, r7
 8010362:	bd90      	pop	{r4, r7, pc}
 8010364:	200085f8 	.word	0x200085f8
 8010368:	40003c00 	.word	0x40003c00
 801036c:	2000000c 	.word	0x2000000c
 8010370:	200067e4 	.word	0x200067e4
 8010374:	51eb851f 	.word	0x51eb851f

08010378 <BSP_AUDIO_OUT_Play>:
 * @brief  Starts playing audio stream from a data buffer for a determined size.
 * @param  pBuffer: Pointer to the buffer
 * @param  Size: Number of audio data BYTES.
 * @retval AUDIO_OK if correct communication, else wrong communication
 */
uint8_t BSP_AUDIO_OUT_Play(uint16_t* pBuffer, uint32_t Size) {
 8010378:	b580      	push	{r7, lr}
 801037a:	b082      	sub	sp, #8
 801037c:	af00      	add	r7, sp, #0
 801037e:	6078      	str	r0, [r7, #4]
 8010380:	6039      	str	r1, [r7, #0]
	/* Call the audio Codec Play function */
	if (pAudioDrv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0) {
 8010382:	4b10      	ldr	r3, [pc, #64]	; (80103c4 <BSP_AUDIO_OUT_Play+0x4c>)
 8010384:	681b      	ldr	r3, [r3, #0]
 8010386:	68db      	ldr	r3, [r3, #12]
 8010388:	683a      	ldr	r2, [r7, #0]
 801038a:	b292      	uxth	r2, r2
 801038c:	6879      	ldr	r1, [r7, #4]
 801038e:	2094      	movs	r0, #148	; 0x94
 8010390:	4798      	blx	r3
 8010392:	4603      	mov	r3, r0
 8010394:	2b00      	cmp	r3, #0
 8010396:	d001      	beq.n	801039c <BSP_AUDIO_OUT_Play+0x24>
		return AUDIO_ERROR;
 8010398:	2301      	movs	r3, #1
 801039a:	e00f      	b.n	80103bc <BSP_AUDIO_OUT_Play+0x44>
	} else {
		/* Update the Media layer and enable it for play */
		HAL_I2S_Transmit_DMA(&hi2s3, pBuffer, DMA_MAX(Size/AUDIODATA_SIZE));
 801039c:	683b      	ldr	r3, [r7, #0]
 801039e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80103a2:	d203      	bcs.n	80103ac <BSP_AUDIO_OUT_Play+0x34>
 80103a4:	683b      	ldr	r3, [r7, #0]
 80103a6:	085b      	lsrs	r3, r3, #1
 80103a8:	b29b      	uxth	r3, r3
 80103aa:	e001      	b.n	80103b0 <BSP_AUDIO_OUT_Play+0x38>
 80103ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80103b0:	461a      	mov	r2, r3
 80103b2:	6879      	ldr	r1, [r7, #4]
 80103b4:	4804      	ldr	r0, [pc, #16]	; (80103c8 <BSP_AUDIO_OUT_Play+0x50>)
 80103b6:	f7f4 f843 	bl	8004440 <HAL_I2S_Transmit_DMA>

		/* Return AUDIO_OK when all operations are correctly done */
		return AUDIO_OK;
 80103ba:	2300      	movs	r3, #0
	}
}
 80103bc:	4618      	mov	r0, r3
 80103be:	3708      	adds	r7, #8
 80103c0:	46bd      	mov	sp, r7
 80103c2:	bd80      	pop	{r7, pc}
 80103c4:	200067e4 	.word	0x200067e4
 80103c8:	200085f8 	.word	0x200085f8

080103cc <BSP_AUDIO_OUT_ChangeBuffer>:
/**
 * @brief  Sends n-Bytes on the I2S interface.
 * @param  pData: Pointer to data address
 * @param  Size: Number of data to be written
 */
void BSP_AUDIO_OUT_ChangeBuffer(uint16_t *pData, uint16_t Size) {
 80103cc:	b580      	push	{r7, lr}
 80103ce:	b082      	sub	sp, #8
 80103d0:	af00      	add	r7, sp, #0
 80103d2:	6078      	str	r0, [r7, #4]
 80103d4:	460b      	mov	r3, r1
 80103d6:	807b      	strh	r3, [r7, #2]
	HAL_I2S_Transmit_DMA(&hi2s3, pData, DMA_MAX(Size/AUDIODATA_SIZE));
 80103d8:	887b      	ldrh	r3, [r7, #2]
 80103da:	085b      	lsrs	r3, r3, #1
 80103dc:	b29b      	uxth	r3, r3
 80103de:	461a      	mov	r2, r3
 80103e0:	6879      	ldr	r1, [r7, #4]
 80103e2:	4803      	ldr	r0, [pc, #12]	; (80103f0 <BSP_AUDIO_OUT_ChangeBuffer+0x24>)
 80103e4:	f7f4 f82c 	bl	8004440 <HAL_I2S_Transmit_DMA>
}
 80103e8:	bf00      	nop
 80103ea:	3708      	adds	r7, #8
 80103ec:	46bd      	mov	sp, r7
 80103ee:	bd80      	pop	{r7, pc}
 80103f0:	200085f8 	.word	0x200085f8

080103f4 <BSP_AUDIO_OUT_SetVolume>:
 * @brief  Controls the current audio volume level.
 * @param  Volume: Volume level to be set in percentage from 0% to 100% (0 for
 *         Mute and 100 for Max volume level).
 * @retval AUDIO_OK if correct communication, else wrong communication
 */
uint8_t BSP_AUDIO_OUT_SetVolume(uint8_t Volume) {
 80103f4:	b590      	push	{r4, r7, lr}
 80103f6:	b083      	sub	sp, #12
 80103f8:	af00      	add	r7, sp, #0
 80103fa:	4603      	mov	r3, r0
 80103fc:	71fb      	strb	r3, [r7, #7]
	/* Call the codec volume control function with converted volume value */
	if (pAudioDrv->SetVolume(AUDIO_I2C_ADDRESS, VOLUME_CALIBRATOR(Volume)) != 0) {
 80103fe:	4b0e      	ldr	r3, [pc, #56]	; (8010438 <BSP_AUDIO_OUT_SetVolume+0x44>)
 8010400:	681b      	ldr	r3, [r3, #0]
 8010402:	6a1c      	ldr	r4, [r3, #32]
 8010404:	79fa      	ldrb	r2, [r7, #7]
 8010406:	4613      	mov	r3, r2
 8010408:	019b      	lsls	r3, r3, #6
 801040a:	4413      	add	r3, r2
 801040c:	4a0b      	ldr	r2, [pc, #44]	; (801043c <BSP_AUDIO_OUT_SetVolume+0x48>)
 801040e:	fb82 1203 	smull	r1, r2, r2, r3
 8010412:	1152      	asrs	r2, r2, #5
 8010414:	17db      	asrs	r3, r3, #31
 8010416:	1ad3      	subs	r3, r2, r3
 8010418:	b2db      	uxtb	r3, r3
 801041a:	3341      	adds	r3, #65	; 0x41
 801041c:	b2db      	uxtb	r3, r3
 801041e:	4619      	mov	r1, r3
 8010420:	2094      	movs	r0, #148	; 0x94
 8010422:	47a0      	blx	r4
 8010424:	4603      	mov	r3, r0
 8010426:	2b00      	cmp	r3, #0
 8010428:	d001      	beq.n	801042e <BSP_AUDIO_OUT_SetVolume+0x3a>
		return AUDIO_ERROR;
 801042a:	2301      	movs	r3, #1
 801042c:	e000      	b.n	8010430 <BSP_AUDIO_OUT_SetVolume+0x3c>
	} else {
		/* Return AUDIO_OK when all operations are correctly done */
		return AUDIO_OK;
 801042e:	2300      	movs	r3, #0
	}
}
 8010430:	4618      	mov	r0, r3
 8010432:	370c      	adds	r7, #12
 8010434:	46bd      	mov	sp, r7
 8010436:	bd90      	pop	{r4, r7, pc}
 8010438:	200067e4 	.word	0x200067e4
 801043c:	51eb851f 	.word	0x51eb851f

08010440 <HAL_I2S_TxCpltCallback>:

/**
 * @brief  Tx Transfer completed callbacks.
 * @param  hi2s: I2S handle
 */
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s) {
 8010440:	b580      	push	{r7, lr}
 8010442:	b082      	sub	sp, #8
 8010444:	af00      	add	r7, sp, #0
 8010446:	6078      	str	r0, [r7, #4]
	if (hi2s->Instance == I2S3) {
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	681b      	ldr	r3, [r3, #0]
 801044c:	4a04      	ldr	r2, [pc, #16]	; (8010460 <HAL_I2S_TxCpltCallback+0x20>)
 801044e:	4293      	cmp	r3, r2
 8010450:	d101      	bne.n	8010456 <HAL_I2S_TxCpltCallback+0x16>
		/* Call the user function which will manage directly transfer complete */
		BSP_AUDIO_OUT_TransferComplete_CallBack();
 8010452:	f000 f931 	bl	80106b8 <BSP_AUDIO_OUT_TransferComplete_CallBack>
	}
}
 8010456:	bf00      	nop
 8010458:	3708      	adds	r7, #8
 801045a:	46bd      	mov	sp, r7
 801045c:	bd80      	pop	{r7, pc}
 801045e:	bf00      	nop
 8010460:	40003c00 	.word	0x40003c00

08010464 <HAL_I2S_TxHalfCpltCallback>:

/**
 * @brief  Tx Half Transfer completed callbacks.
 * @param  hi2s: I2S handle
 */
void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s) {
 8010464:	b580      	push	{r7, lr}
 8010466:	b082      	sub	sp, #8
 8010468:	af00      	add	r7, sp, #0
 801046a:	6078      	str	r0, [r7, #4]
	if (hi2s->Instance == I2S3) {
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	681b      	ldr	r3, [r3, #0]
 8010470:	4a04      	ldr	r2, [pc, #16]	; (8010484 <HAL_I2S_TxHalfCpltCallback+0x20>)
 8010472:	4293      	cmp	r3, r2
 8010474:	d101      	bne.n	801047a <HAL_I2S_TxHalfCpltCallback+0x16>
		/* Manage the remaining file size and new address offset: This function should
		 be coded by user (its prototype is already declared in stm32f4_discovery_audio.h) */
		BSP_AUDIO_OUT_HalfTransfer_CallBack();
 8010476:	f000 f96f 	bl	8010758 <BSP_AUDIO_OUT_HalfTransfer_CallBack>
	}
}
 801047a:	bf00      	nop
 801047c:	3708      	adds	r7, #8
 801047e:	46bd      	mov	sp, r7
 8010480:	bd80      	pop	{r7, pc}
 8010482:	bf00      	nop
 8010484:	40003c00 	.word	0x40003c00

08010488 <BSP_AUDIO_OUT_ClockConfig>:
 * @param  AudioFreq: Audio frequency used to play the audio stream.
 * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
 *         Being __weak it can be overwritten by the application
 * @param  Params : pointer on additional configuration parameters, can be NULL.
 */
__weak void BSP_AUDIO_OUT_ClockConfig(I2S_HandleTypeDef *hi2s, uint32_t AudioFreq, void *Params) {
 8010488:	b580      	push	{r7, lr}
 801048a:	b08a      	sub	sp, #40	; 0x28
 801048c:	af00      	add	r7, sp, #0
 801048e:	60f8      	str	r0, [r7, #12]
 8010490:	60b9      	str	r1, [r7, #8]
 8010492:	607a      	str	r2, [r7, #4]
	RCC_PeriphCLKInitTypeDef rccclkinit;
	uint8_t index = 0, freqindex = 0xFF;
 8010494:	2300      	movs	r3, #0
 8010496:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801049a:	23ff      	movs	r3, #255	; 0xff
 801049c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	for (index = 0; index < 8; index++) {
 80104a0:	2300      	movs	r3, #0
 80104a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80104a6:	e010      	b.n	80104ca <BSP_AUDIO_OUT_ClockConfig+0x42>
		if (I2SFreq[index] == AudioFreq) {
 80104a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80104ac:	4a1f      	ldr	r2, [pc, #124]	; (801052c <BSP_AUDIO_OUT_ClockConfig+0xa4>)
 80104ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80104b2:	68ba      	ldr	r2, [r7, #8]
 80104b4:	429a      	cmp	r2, r3
 80104b6:	d103      	bne.n	80104c0 <BSP_AUDIO_OUT_ClockConfig+0x38>
			freqindex = index;
 80104b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80104bc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	for (index = 0; index < 8; index++) {
 80104c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80104c4:	3301      	adds	r3, #1
 80104c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80104ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80104ce:	2b07      	cmp	r3, #7
 80104d0:	d9ea      	bls.n	80104a8 <BSP_AUDIO_OUT_ClockConfig+0x20>
		}
	}
	/* Enable PLLI2S clock */
	HAL_RCCEx_GetPeriphCLKConfig(&rccclkinit);
 80104d2:	f107 0314 	add.w	r3, r7, #20
 80104d6:	4618      	mov	r0, r3
 80104d8:	f7f5 f962 	bl	80057a0 <HAL_RCCEx_GetPeriphCLKConfig>
	/* PLLI2S_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	// FIXME: why this bellow code unlogicable
//	if ((freqindex & 0x7) == 0) {
	if (freqindex != 0xFF) {
 80104dc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80104e0:	2bff      	cmp	r3, #255	; 0xff
 80104e2:	d013      	beq.n	801050c <BSP_AUDIO_OUT_ClockConfig+0x84>
		/* I2S clock config
		 PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) � (PLLI2SN/PLLM)
		 I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
		rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80104e4:	2301      	movs	r3, #1
 80104e6:	617b      	str	r3, [r7, #20]
		rccclkinit.PLLI2S.PLLI2SN = I2SPLLN[freqindex];
 80104e8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80104ec:	4a10      	ldr	r2, [pc, #64]	; (8010530 <BSP_AUDIO_OUT_ClockConfig+0xa8>)
 80104ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80104f2:	61bb      	str	r3, [r7, #24]
		rccclkinit.PLLI2S.PLLI2SR = I2SPLLR[freqindex];
 80104f4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80104f8:	4a0e      	ldr	r2, [pc, #56]	; (8010534 <BSP_AUDIO_OUT_ClockConfig+0xac>)
 80104fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80104fe:	61fb      	str	r3, [r7, #28]
		HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8010500:	f107 0314 	add.w	r3, r7, #20
 8010504:	4618      	mov	r0, r3
 8010506:	f7f5 f869 	bl	80055dc <HAL_RCCEx_PeriphCLKConfig>
		rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
		rccclkinit.PLLI2S.PLLI2SN = 258;
		rccclkinit.PLLI2S.PLLI2SR = 3;
		HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
	}
}
 801050a:	e00b      	b.n	8010524 <BSP_AUDIO_OUT_ClockConfig+0x9c>
		rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 801050c:	2301      	movs	r3, #1
 801050e:	617b      	str	r3, [r7, #20]
		rccclkinit.PLLI2S.PLLI2SN = 258;
 8010510:	f44f 7381 	mov.w	r3, #258	; 0x102
 8010514:	61bb      	str	r3, [r7, #24]
		rccclkinit.PLLI2S.PLLI2SR = 3;
 8010516:	2303      	movs	r3, #3
 8010518:	61fb      	str	r3, [r7, #28]
		HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 801051a:	f107 0314 	add.w	r3, r7, #20
 801051e:	4618      	mov	r0, r3
 8010520:	f7f5 f85c 	bl	80055dc <HAL_RCCEx_PeriphCLKConfig>
}
 8010524:	bf00      	nop
 8010526:	3728      	adds	r7, #40	; 0x28
 8010528:	46bd      	mov	sp, r7
 801052a:	bd80      	pop	{r7, pc}
 801052c:	08027230 	.word	0x08027230
 8010530:	08027250 	.word	0x08027250
 8010534:	08027270 	.word	0x08027270

08010538 <BSP_AUDIO_OUT_MspInit>:
/**
 * @brief  AUDIO OUT I2S MSP Init.
 * @param  hi2s: might be required to set audio peripheral predivider if any.
 * @param  Params : pointer on additional configuration parameters, can be NULL.
 */
__weak void BSP_AUDIO_OUT_MspInit(I2S_HandleTypeDef *hi2s, void *Params) {
 8010538:	b580      	push	{r7, lr}
 801053a:	b08c      	sub	sp, #48	; 0x30
 801053c:	af00      	add	r7, sp, #0
 801053e:	6078      	str	r0, [r7, #4]
 8010540:	6039      	str	r1, [r7, #0]
	static DMA_HandleTypeDef hdma_i2sTx;
	GPIO_InitTypeDef GPIO_InitStruct;

	/* Enable I2S3 clock */
	I2S3_CLK_ENABLE()
 8010542:	2300      	movs	r3, #0
 8010544:	61bb      	str	r3, [r7, #24]
 8010546:	4b56      	ldr	r3, [pc, #344]	; (80106a0 <BSP_AUDIO_OUT_MspInit+0x168>)
 8010548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801054a:	4a55      	ldr	r2, [pc, #340]	; (80106a0 <BSP_AUDIO_OUT_MspInit+0x168>)
 801054c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010550:	6413      	str	r3, [r2, #64]	; 0x40
 8010552:	4b53      	ldr	r3, [pc, #332]	; (80106a0 <BSP_AUDIO_OUT_MspInit+0x168>)
 8010554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010556:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801055a:	61bb      	str	r3, [r7, #24]
 801055c:	69bb      	ldr	r3, [r7, #24]
	;

	/*** Configure the GPIOs ***/
	/* Enable I2S GPIO clocks */
	I2S3_SCK_SD_CLK_ENABLE()
 801055e:	2300      	movs	r3, #0
 8010560:	617b      	str	r3, [r7, #20]
 8010562:	4b4f      	ldr	r3, [pc, #316]	; (80106a0 <BSP_AUDIO_OUT_MspInit+0x168>)
 8010564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010566:	4a4e      	ldr	r2, [pc, #312]	; (80106a0 <BSP_AUDIO_OUT_MspInit+0x168>)
 8010568:	f043 0304 	orr.w	r3, r3, #4
 801056c:	6313      	str	r3, [r2, #48]	; 0x30
 801056e:	4b4c      	ldr	r3, [pc, #304]	; (80106a0 <BSP_AUDIO_OUT_MspInit+0x168>)
 8010570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010572:	f003 0304 	and.w	r3, r3, #4
 8010576:	617b      	str	r3, [r7, #20]
 8010578:	697b      	ldr	r3, [r7, #20]
	;
	I2S3_WS_CLK_ENABLE()
 801057a:	2300      	movs	r3, #0
 801057c:	613b      	str	r3, [r7, #16]
 801057e:	4b48      	ldr	r3, [pc, #288]	; (80106a0 <BSP_AUDIO_OUT_MspInit+0x168>)
 8010580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010582:	4a47      	ldr	r2, [pc, #284]	; (80106a0 <BSP_AUDIO_OUT_MspInit+0x168>)
 8010584:	f043 0301 	orr.w	r3, r3, #1
 8010588:	6313      	str	r3, [r2, #48]	; 0x30
 801058a:	4b45      	ldr	r3, [pc, #276]	; (80106a0 <BSP_AUDIO_OUT_MspInit+0x168>)
 801058c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801058e:	f003 0301 	and.w	r3, r3, #1
 8010592:	613b      	str	r3, [r7, #16]
 8010594:	693b      	ldr	r3, [r7, #16]
	;

	/* I2S3 pins configuration: WS, SCK and SD pins ----------------------------*/
	GPIO_InitStruct.Pin = I2S3_SCK_PIN | I2S3_SD_PIN;
 8010596:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 801059a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801059c:	2302      	movs	r3, #2
 801059e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80105a0:	2300      	movs	r3, #0
 80105a2:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80105a4:	2302      	movs	r3, #2
 80105a6:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = I2S3_SCK_SD_WS_AF;
 80105a8:	2306      	movs	r3, #6
 80105aa:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(I2S3_SCK_SD_GPIO_PORT, &GPIO_InitStruct);
 80105ac:	f107 031c 	add.w	r3, r7, #28
 80105b0:	4619      	mov	r1, r3
 80105b2:	483c      	ldr	r0, [pc, #240]	; (80106a4 <BSP_AUDIO_OUT_MspInit+0x16c>)
 80105b4:	f7f1 fdf4 	bl	80021a0 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = I2S3_WS_PIN;
 80105b8:	2310      	movs	r3, #16
 80105ba:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(I2S3_WS_GPIO_PORT, &GPIO_InitStruct);
 80105bc:	f107 031c 	add.w	r3, r7, #28
 80105c0:	4619      	mov	r1, r3
 80105c2:	4839      	ldr	r0, [pc, #228]	; (80106a8 <BSP_AUDIO_OUT_MspInit+0x170>)
 80105c4:	f7f1 fdec 	bl	80021a0 <HAL_GPIO_Init>

	/* I2S3 pins configuration: MCK pin */
	I2S3_MCK_CLK_ENABLE()
 80105c8:	2300      	movs	r3, #0
 80105ca:	60fb      	str	r3, [r7, #12]
 80105cc:	4b34      	ldr	r3, [pc, #208]	; (80106a0 <BSP_AUDIO_OUT_MspInit+0x168>)
 80105ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80105d0:	4a33      	ldr	r2, [pc, #204]	; (80106a0 <BSP_AUDIO_OUT_MspInit+0x168>)
 80105d2:	f043 0304 	orr.w	r3, r3, #4
 80105d6:	6313      	str	r3, [r2, #48]	; 0x30
 80105d8:	4b31      	ldr	r3, [pc, #196]	; (80106a0 <BSP_AUDIO_OUT_MspInit+0x168>)
 80105da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80105dc:	f003 0304 	and.w	r3, r3, #4
 80105e0:	60fb      	str	r3, [r7, #12]
 80105e2:	68fb      	ldr	r3, [r7, #12]
	;
	GPIO_InitStruct.Pin = I2S3_MCK_PIN;
 80105e4:	2380      	movs	r3, #128	; 0x80
 80105e6:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(I2S3_MCK_GPIO_PORT, &GPIO_InitStruct);
 80105e8:	f107 031c 	add.w	r3, r7, #28
 80105ec:	4619      	mov	r1, r3
 80105ee:	482d      	ldr	r0, [pc, #180]	; (80106a4 <BSP_AUDIO_OUT_MspInit+0x16c>)
 80105f0:	f7f1 fdd6 	bl	80021a0 <HAL_GPIO_Init>

	/* Enable the I2S DMA clock */
	I2S3_DMAx_CLK_ENABLE()
 80105f4:	2300      	movs	r3, #0
 80105f6:	60bb      	str	r3, [r7, #8]
 80105f8:	4b29      	ldr	r3, [pc, #164]	; (80106a0 <BSP_AUDIO_OUT_MspInit+0x168>)
 80105fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80105fc:	4a28      	ldr	r2, [pc, #160]	; (80106a0 <BSP_AUDIO_OUT_MspInit+0x168>)
 80105fe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8010602:	6313      	str	r3, [r2, #48]	; 0x30
 8010604:	4b26      	ldr	r3, [pc, #152]	; (80106a0 <BSP_AUDIO_OUT_MspInit+0x168>)
 8010606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010608:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801060c:	60bb      	str	r3, [r7, #8]
 801060e:	68bb      	ldr	r3, [r7, #8]
	;

	if (hi2s->Instance == I2S3) {
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	681b      	ldr	r3, [r3, #0]
 8010614:	4a25      	ldr	r2, [pc, #148]	; (80106ac <BSP_AUDIO_OUT_MspInit+0x174>)
 8010616:	4293      	cmp	r3, r2
 8010618:	d136      	bne.n	8010688 <BSP_AUDIO_OUT_MspInit+0x150>
		/* Configure the hdma_i2sTx handle parameters */
		hdma_i2sTx.Init.Channel = I2S3_DMAx_CHANNEL;
 801061a:	4b25      	ldr	r3, [pc, #148]	; (80106b0 <BSP_AUDIO_OUT_MspInit+0x178>)
 801061c:	2200      	movs	r2, #0
 801061e:	605a      	str	r2, [r3, #4]
		hdma_i2sTx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8010620:	4b23      	ldr	r3, [pc, #140]	; (80106b0 <BSP_AUDIO_OUT_MspInit+0x178>)
 8010622:	2240      	movs	r2, #64	; 0x40
 8010624:	609a      	str	r2, [r3, #8]
		hdma_i2sTx.Init.PeriphInc = DMA_PINC_DISABLE;
 8010626:	4b22      	ldr	r3, [pc, #136]	; (80106b0 <BSP_AUDIO_OUT_MspInit+0x178>)
 8010628:	2200      	movs	r2, #0
 801062a:	60da      	str	r2, [r3, #12]
		hdma_i2sTx.Init.MemInc = DMA_MINC_ENABLE;
 801062c:	4b20      	ldr	r3, [pc, #128]	; (80106b0 <BSP_AUDIO_OUT_MspInit+0x178>)
 801062e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8010632:	611a      	str	r2, [r3, #16]
		hdma_i2sTx.Init.PeriphDataAlignment = I2S3_DMAx_PERIPH_DATA_SIZE;
 8010634:	4b1e      	ldr	r3, [pc, #120]	; (80106b0 <BSP_AUDIO_OUT_MspInit+0x178>)
 8010636:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801063a:	615a      	str	r2, [r3, #20]
		hdma_i2sTx.Init.MemDataAlignment = I2S3_DMAx_MEM_DATA_SIZE;
 801063c:	4b1c      	ldr	r3, [pc, #112]	; (80106b0 <BSP_AUDIO_OUT_MspInit+0x178>)
 801063e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8010642:	619a      	str	r2, [r3, #24]
		hdma_i2sTx.Init.Mode = DMA_NORMAL;
 8010644:	4b1a      	ldr	r3, [pc, #104]	; (80106b0 <BSP_AUDIO_OUT_MspInit+0x178>)
 8010646:	2200      	movs	r2, #0
 8010648:	61da      	str	r2, [r3, #28]
		hdma_i2sTx.Init.Priority = DMA_PRIORITY_HIGH;
 801064a:	4b19      	ldr	r3, [pc, #100]	; (80106b0 <BSP_AUDIO_OUT_MspInit+0x178>)
 801064c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8010650:	621a      	str	r2, [r3, #32]
		hdma_i2sTx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8010652:	4b17      	ldr	r3, [pc, #92]	; (80106b0 <BSP_AUDIO_OUT_MspInit+0x178>)
 8010654:	2204      	movs	r2, #4
 8010656:	625a      	str	r2, [r3, #36]	; 0x24
		hdma_i2sTx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8010658:	4b15      	ldr	r3, [pc, #84]	; (80106b0 <BSP_AUDIO_OUT_MspInit+0x178>)
 801065a:	2203      	movs	r2, #3
 801065c:	629a      	str	r2, [r3, #40]	; 0x28
		hdma_i2sTx.Init.MemBurst = DMA_MBURST_SINGLE;
 801065e:	4b14      	ldr	r3, [pc, #80]	; (80106b0 <BSP_AUDIO_OUT_MspInit+0x178>)
 8010660:	2200      	movs	r2, #0
 8010662:	62da      	str	r2, [r3, #44]	; 0x2c
		hdma_i2sTx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8010664:	4b12      	ldr	r3, [pc, #72]	; (80106b0 <BSP_AUDIO_OUT_MspInit+0x178>)
 8010666:	2200      	movs	r2, #0
 8010668:	631a      	str	r2, [r3, #48]	; 0x30

		hdma_i2sTx.Instance = I2S3_DMAx_STREAM;
 801066a:	4b11      	ldr	r3, [pc, #68]	; (80106b0 <BSP_AUDIO_OUT_MspInit+0x178>)
 801066c:	4a11      	ldr	r2, [pc, #68]	; (80106b4 <BSP_AUDIO_OUT_MspInit+0x17c>)
 801066e:	601a      	str	r2, [r3, #0]

		/* Associate the DMA handle */
		__HAL_LINKDMA(hi2s, hdmatx, hdma_i2sTx);
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	4a0f      	ldr	r2, [pc, #60]	; (80106b0 <BSP_AUDIO_OUT_MspInit+0x178>)
 8010674:	639a      	str	r2, [r3, #56]	; 0x38
 8010676:	4a0e      	ldr	r2, [pc, #56]	; (80106b0 <BSP_AUDIO_OUT_MspInit+0x178>)
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	6393      	str	r3, [r2, #56]	; 0x38

		/* Deinitialize the Stream for new transfer */
		HAL_DMA_DeInit(&hdma_i2sTx);
 801067c:	480c      	ldr	r0, [pc, #48]	; (80106b0 <BSP_AUDIO_OUT_MspInit+0x178>)
 801067e:	f7f0 ff83 	bl	8001588 <HAL_DMA_DeInit>

		/* Configure the DMA Stream */
		HAL_DMA_Init(&hdma_i2sTx);
 8010682:	480b      	ldr	r0, [pc, #44]	; (80106b0 <BSP_AUDIO_OUT_MspInit+0x178>)
 8010684:	f7f0 fed2 	bl	800142c <HAL_DMA_Init>
	}

	/* I2S DMA IRQ Channel configuration */
	HAL_NVIC_SetPriority(I2S3_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 8010688:	2200      	movs	r2, #0
 801068a:	210e      	movs	r1, #14
 801068c:	202f      	movs	r0, #47	; 0x2f
 801068e:	f7f0 fea3 	bl	80013d8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(I2S3_DMAx_IRQ);
 8010692:	202f      	movs	r0, #47	; 0x2f
 8010694:	f7f0 febc 	bl	8001410 <HAL_NVIC_EnableIRQ>
}
 8010698:	bf00      	nop
 801069a:	3730      	adds	r7, #48	; 0x30
 801069c:	46bd      	mov	sp, r7
 801069e:	bd80      	pop	{r7, pc}
 80106a0:	40023800 	.word	0x40023800
 80106a4:	40020800 	.word	0x40020800
 80106a8:	40020000 	.word	0x40020000
 80106ac:	40003c00 	.word	0x40003c00
 80106b0:	200067f4 	.word	0x200067f4
 80106b4:	400260b8 	.word	0x400260b8

080106b8 <BSP_AUDIO_OUT_TransferComplete_CallBack>:
}

/**
 * @brief  Manages the DMA full Transfer complete event.
 */
__weak void BSP_AUDIO_OUT_TransferComplete_CallBack(void) {
 80106b8:	b580      	push	{r7, lr}
 80106ba:	af00      	add	r7, sp, #0
	buffer_offset = BUFFER_OFFSET_FULL;
 80106bc:	4b20      	ldr	r3, [pc, #128]	; (8010740 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x88>)
 80106be:	2202      	movs	r2, #2
 80106c0:	701a      	strb	r2, [r3, #0]

	if (!AudioPlayDone) {
 80106c2:	4b20      	ldr	r3, [pc, #128]	; (8010744 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x8c>)
 80106c4:	781b      	ldrb	r3, [r3, #0]
 80106c6:	b2db      	uxtb	r3, r3
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	d10f      	bne.n	80106ec <BSP_AUDIO_OUT_TransferComplete_CallBack+0x34>
		BSP_AUDIO_OUT_ChangeBuffer(
				(uint16_t*) (AUDIO_SAMPLE + ((AUDIO_SAMPLE_SIZE - AudioRemSize) / AUDIODATA_SIZE)),
 80106cc:	4b1e      	ldr	r3, [pc, #120]	; (8010748 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x90>)
 80106ce:	681a      	ldr	r2, [r3, #0]
 80106d0:	4b1e      	ldr	r3, [pc, #120]	; (801074c <BSP_AUDIO_OUT_TransferComplete_CallBack+0x94>)
 80106d2:	681b      	ldr	r3, [r3, #0]
 80106d4:	1ad3      	subs	r3, r2, r3
 80106d6:	f023 0301 	bic.w	r3, r3, #1
		BSP_AUDIO_OUT_ChangeBuffer(
 80106da:	4a1d      	ldr	r2, [pc, #116]	; (8010750 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x98>)
 80106dc:	441a      	add	r2, r3
 80106de:	4b1d      	ldr	r3, [pc, #116]	; (8010754 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x9c>)
 80106e0:	881b      	ldrh	r3, [r3, #0]
 80106e2:	4619      	mov	r1, r3
 80106e4:	4610      	mov	r0, r2
 80106e6:	f7ff fe71 	bl	80103cc <BSP_AUDIO_OUT_ChangeBuffer>
 80106ea:	e01a      	b.n	8010722 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x6a>
				AudioPlaySize);
	} else {
		/* Get data size from audio file */
		AudioRemSize = AUDIO_SAMPLE_SIZE;
 80106ec:	4b16      	ldr	r3, [pc, #88]	; (8010748 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x90>)
 80106ee:	681b      	ldr	r3, [r3, #0]
 80106f0:	4a16      	ldr	r2, [pc, #88]	; (801074c <BSP_AUDIO_OUT_TransferComplete_CallBack+0x94>)
 80106f2:	6013      	str	r3, [r2, #0]
		/* Get total data to be played */
		if (AUDIO_SAMPLE_SIZE > AUDIO_BUFFER_SIZE) {
 80106f4:	4b14      	ldr	r3, [pc, #80]	; (8010748 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x90>)
 80106f6:	681b      	ldr	r3, [r3, #0]
 80106f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80106fc:	d904      	bls.n	8010708 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x50>
			AudioPlaySize = AUDIO_BUFFER_SIZE;
 80106fe:	4b15      	ldr	r3, [pc, #84]	; (8010754 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x9c>)
 8010700:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8010704:	801a      	strh	r2, [r3, #0]
 8010706:	e004      	b.n	8010712 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x5a>
		} else {
			AudioPlaySize = AUDIO_SAMPLE_SIZE;
 8010708:	4b0f      	ldr	r3, [pc, #60]	; (8010748 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x90>)
 801070a:	681b      	ldr	r3, [r3, #0]
 801070c:	b29a      	uxth	r2, r3
 801070e:	4b11      	ldr	r3, [pc, #68]	; (8010754 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x9c>)
 8010710:	801a      	strh	r2, [r3, #0]
		}

		/* Start playing Wave again*/
		BSP_AUDIO_OUT_ChangeBuffer((uint16_t*) AUDIO_SAMPLE, AudioPlaySize);
 8010712:	4b10      	ldr	r3, [pc, #64]	; (8010754 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x9c>)
 8010714:	881b      	ldrh	r3, [r3, #0]
 8010716:	4619      	mov	r1, r3
 8010718:	480d      	ldr	r0, [pc, #52]	; (8010750 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x98>)
 801071a:	f7ff fe57 	bl	80103cc <BSP_AUDIO_OUT_ChangeBuffer>
		BSP_Led_Toggle();
 801071e:	f7fb f821 	bl	800b764 <BSP_Led_Toggle>
	}

	AudioPlayDone = (AudioPlaySize == AudioRemSize);
 8010722:	4b0c      	ldr	r3, [pc, #48]	; (8010754 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x9c>)
 8010724:	881b      	ldrh	r3, [r3, #0]
 8010726:	461a      	mov	r2, r3
 8010728:	4b08      	ldr	r3, [pc, #32]	; (801074c <BSP_AUDIO_OUT_TransferComplete_CallBack+0x94>)
 801072a:	681b      	ldr	r3, [r3, #0]
 801072c:	429a      	cmp	r2, r3
 801072e:	bf0c      	ite	eq
 8010730:	2301      	moveq	r3, #1
 8010732:	2300      	movne	r3, #0
 8010734:	b2db      	uxtb	r3, r3
 8010736:	461a      	mov	r2, r3
 8010738:	4b02      	ldr	r3, [pc, #8]	; (8010744 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x8c>)
 801073a:	701a      	strb	r2, [r3, #0]
}
 801073c:	bf00      	nop
 801073e:	bd80      	pop	{r7, pc}
 8010740:	200067e8 	.word	0x200067e8
 8010744:	200067e9 	.word	0x200067e9
 8010748:	08015274 	.word	0x08015274
 801074c:	200067ec 	.word	0x200067ec
 8010750:	08015278 	.word	0x08015278
 8010754:	200067f0 	.word	0x200067f0

08010758 <BSP_AUDIO_OUT_HalfTransfer_CallBack>:

/**
 * @brief  Manages the DMA Half Transfer complete event.
 */
__weak void BSP_AUDIO_OUT_HalfTransfer_CallBack(void) {
 8010758:	b580      	push	{r7, lr}
 801075a:	af00      	add	r7, sp, #0
	buffer_offset = BUFFER_OFFSET_HALF;
 801075c:	4b10      	ldr	r3, [pc, #64]	; (80107a0 <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x48>)
 801075e:	2201      	movs	r2, #1
 8010760:	701a      	strb	r2, [r3, #0]

	// check remaining data
	if (AudioRemSize > AUDIO_BUFFER_SIZE) {
 8010762:	4b10      	ldr	r3, [pc, #64]	; (80107a4 <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x4c>)
 8010764:	681b      	ldr	r3, [r3, #0]
 8010766:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801076a:	d90a      	bls.n	8010782 <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x2a>
		/* Get total data to be played */
		AudioPlaySize = AUDIO_BUFFER_SIZE;
 801076c:	4b0e      	ldr	r3, [pc, #56]	; (80107a8 <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x50>)
 801076e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8010772:	801a      	strh	r2, [r3, #0]
		/* Get remaining data */
		AudioRemSize -= AUDIO_BUFFER_SIZE;
 8010774:	4b0b      	ldr	r3, [pc, #44]	; (80107a4 <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x4c>)
 8010776:	681b      	ldr	r3, [r3, #0]
 8010778:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 801077c:	4a09      	ldr	r2, [pc, #36]	; (80107a4 <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x4c>)
 801077e:	6013      	str	r3, [r2, #0]
		if (!AudioPlayDone) {
			BSP_Led_Toggle();
			AudioPlaySize = AudioRemSize;
		}
	}
}
 8010780:	e00b      	b.n	801079a <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x42>
		if (!AudioPlayDone) {
 8010782:	4b0a      	ldr	r3, [pc, #40]	; (80107ac <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x54>)
 8010784:	781b      	ldrb	r3, [r3, #0]
 8010786:	b2db      	uxtb	r3, r3
 8010788:	2b00      	cmp	r3, #0
 801078a:	d106      	bne.n	801079a <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x42>
			BSP_Led_Toggle();
 801078c:	f7fa ffea 	bl	800b764 <BSP_Led_Toggle>
			AudioPlaySize = AudioRemSize;
 8010790:	4b04      	ldr	r3, [pc, #16]	; (80107a4 <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x4c>)
 8010792:	681b      	ldr	r3, [r3, #0]
 8010794:	b29a      	uxth	r2, r3
 8010796:	4b04      	ldr	r3, [pc, #16]	; (80107a8 <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x50>)
 8010798:	801a      	strh	r2, [r3, #0]
}
 801079a:	bf00      	nop
 801079c:	bd80      	pop	{r7, pc}
 801079e:	bf00      	nop
 80107a0:	200067e8 	.word	0x200067e8
 80107a4:	200067ec 	.word	0x200067ec
 80107a8:	200067f0 	.word	0x200067f0
 80107ac:	200067e9 	.word	0x200067e9

080107b0 <I2S3_Init>:

/**
 * @brief  Initializes the Audio Codec audio interface (I2S).
 * @param  AudioFreq: Audio frequency to be configured for the I2S peripheral.
 */
static uint8_t I2S3_Init(uint32_t AudioFreq) {
 80107b0:	b580      	push	{r7, lr}
 80107b2:	b082      	sub	sp, #8
 80107b4:	af00      	add	r7, sp, #0
 80107b6:	6078      	str	r0, [r7, #4]
	/* Initialize the hi2s3 Instance parameter */
	hi2s3.Instance = I2S3;
 80107b8:	4b17      	ldr	r3, [pc, #92]	; (8010818 <I2S3_Init+0x68>)
 80107ba:	4a18      	ldr	r2, [pc, #96]	; (801081c <I2S3_Init+0x6c>)
 80107bc:	601a      	str	r2, [r3, #0]

	/* Disable I2S block */
	__HAL_I2S_DISABLE(&hi2s3);
 80107be:	4b16      	ldr	r3, [pc, #88]	; (8010818 <I2S3_Init+0x68>)
 80107c0:	681b      	ldr	r3, [r3, #0]
 80107c2:	69da      	ldr	r2, [r3, #28]
 80107c4:	4b14      	ldr	r3, [pc, #80]	; (8010818 <I2S3_Init+0x68>)
 80107c6:	681b      	ldr	r3, [r3, #0]
 80107c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80107cc:	61da      	str	r2, [r3, #28]

	/* I2S3 peripheral configuration */
	hi2s3.Init.AudioFreq = AudioFreq;
 80107ce:	4a12      	ldr	r2, [pc, #72]	; (8010818 <I2S3_Init+0x68>)
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	6153      	str	r3, [r2, #20]
	hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80107d4:	4b10      	ldr	r3, [pc, #64]	; (8010818 <I2S3_Init+0x68>)
 80107d6:	2200      	movs	r2, #0
 80107d8:	61da      	str	r2, [r3, #28]
	hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80107da:	4b0f      	ldr	r3, [pc, #60]	; (8010818 <I2S3_Init+0x68>)
 80107dc:	2200      	movs	r2, #0
 80107de:	619a      	str	r2, [r3, #24]
	// FIXME: Why it works on I2S_DATAFORMAT_32B? It should be I2S_DATAFORMAT_16B
//	hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
	hi2s3.Init.DataFormat = I2S_DATAFORMAT_32B;
 80107e0:	4b0d      	ldr	r3, [pc, #52]	; (8010818 <I2S3_Init+0x68>)
 80107e2:	2205      	movs	r2, #5
 80107e4:	60da      	str	r2, [r3, #12]
	hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80107e6:	4b0c      	ldr	r3, [pc, #48]	; (8010818 <I2S3_Init+0x68>)
 80107e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80107ec:	611a      	str	r2, [r3, #16]
	hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80107ee:	4b0a      	ldr	r3, [pc, #40]	; (8010818 <I2S3_Init+0x68>)
 80107f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80107f4:	605a      	str	r2, [r3, #4]
	hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80107f6:	4b08      	ldr	r3, [pc, #32]	; (8010818 <I2S3_Init+0x68>)
 80107f8:	2200      	movs	r2, #0
 80107fa:	609a      	str	r2, [r3, #8]
	/* Initialize the I2S peripheral with the structure above */
	if (HAL_I2S_Init(&hi2s3) != HAL_OK) {
 80107fc:	4806      	ldr	r0, [pc, #24]	; (8010818 <I2S3_Init+0x68>)
 80107fe:	f7f3 fcdf 	bl	80041c0 <HAL_I2S_Init>
 8010802:	4603      	mov	r3, r0
 8010804:	2b00      	cmp	r3, #0
 8010806:	d001      	beq.n	801080c <I2S3_Init+0x5c>
		return AUDIO_ERROR;
 8010808:	2301      	movs	r3, #1
 801080a:	e000      	b.n	801080e <I2S3_Init+0x5e>
	} else {
		return AUDIO_OK;
 801080c:	2300      	movs	r3, #0
	}
}
 801080e:	4618      	mov	r0, r3
 8010810:	3708      	adds	r7, #8
 8010812:	46bd      	mov	sp, r7
 8010814:	bd80      	pop	{r7, pc}
 8010816:	bf00      	nop
 8010818:	200085f8 	.word	0x200085f8
 801081c:	40003c00 	.word	0x40003c00

08010820 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8010820:	b580      	push	{r7, lr}
 8010822:	b082      	sub	sp, #8
 8010824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010826:	2300      	movs	r3, #0
 8010828:	607b      	str	r3, [r7, #4]
 801082a:	4b12      	ldr	r3, [pc, #72]	; (8010874 <HAL_MspInit+0x54>)
 801082c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801082e:	4a11      	ldr	r2, [pc, #68]	; (8010874 <HAL_MspInit+0x54>)
 8010830:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010834:	6453      	str	r3, [r2, #68]	; 0x44
 8010836:	4b0f      	ldr	r3, [pc, #60]	; (8010874 <HAL_MspInit+0x54>)
 8010838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801083a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801083e:	607b      	str	r3, [r7, #4]
 8010840:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8010842:	2300      	movs	r3, #0
 8010844:	603b      	str	r3, [r7, #0]
 8010846:	4b0b      	ldr	r3, [pc, #44]	; (8010874 <HAL_MspInit+0x54>)
 8010848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801084a:	4a0a      	ldr	r2, [pc, #40]	; (8010874 <HAL_MspInit+0x54>)
 801084c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010850:	6413      	str	r3, [r2, #64]	; 0x40
 8010852:	4b08      	ldr	r3, [pc, #32]	; (8010874 <HAL_MspInit+0x54>)
 8010854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801085a:	603b      	str	r3, [r7, #0]
 801085c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 801085e:	2200      	movs	r2, #0
 8010860:	210f      	movs	r1, #15
 8010862:	f06f 0001 	mvn.w	r0, #1
 8010866:	f7f0 fdb7 	bl	80013d8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 801086a:	bf00      	nop
 801086c:	3708      	adds	r7, #8
 801086e:	46bd      	mov	sp, r7
 8010870:	bd80      	pop	{r7, pc}
 8010872:	bf00      	nop
 8010874:	40023800 	.word	0x40023800

08010878 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8010878:	b580      	push	{r7, lr}
 801087a:	b08a      	sub	sp, #40	; 0x28
 801087c:	af00      	add	r7, sp, #0
 801087e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010880:	f107 0314 	add.w	r3, r7, #20
 8010884:	2200      	movs	r2, #0
 8010886:	601a      	str	r2, [r3, #0]
 8010888:	605a      	str	r2, [r3, #4]
 801088a:	609a      	str	r2, [r3, #8]
 801088c:	60da      	str	r2, [r3, #12]
 801088e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	681b      	ldr	r3, [r3, #0]
 8010894:	4a19      	ldr	r2, [pc, #100]	; (80108fc <HAL_CAN_MspInit+0x84>)
 8010896:	4293      	cmp	r3, r2
 8010898:	d12b      	bne.n	80108f2 <HAL_CAN_MspInit+0x7a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 801089a:	2300      	movs	r3, #0
 801089c:	613b      	str	r3, [r7, #16]
 801089e:	4b18      	ldr	r3, [pc, #96]	; (8010900 <HAL_CAN_MspInit+0x88>)
 80108a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80108a2:	4a17      	ldr	r2, [pc, #92]	; (8010900 <HAL_CAN_MspInit+0x88>)
 80108a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80108a8:	6413      	str	r3, [r2, #64]	; 0x40
 80108aa:	4b15      	ldr	r3, [pc, #84]	; (8010900 <HAL_CAN_MspInit+0x88>)
 80108ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80108ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80108b2:	613b      	str	r3, [r7, #16]
 80108b4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80108b6:	2300      	movs	r3, #0
 80108b8:	60fb      	str	r3, [r7, #12]
 80108ba:	4b11      	ldr	r3, [pc, #68]	; (8010900 <HAL_CAN_MspInit+0x88>)
 80108bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80108be:	4a10      	ldr	r2, [pc, #64]	; (8010900 <HAL_CAN_MspInit+0x88>)
 80108c0:	f043 0308 	orr.w	r3, r3, #8
 80108c4:	6313      	str	r3, [r2, #48]	; 0x30
 80108c6:	4b0e      	ldr	r3, [pc, #56]	; (8010900 <HAL_CAN_MspInit+0x88>)
 80108c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80108ca:	f003 0308 	and.w	r3, r3, #8
 80108ce:	60fb      	str	r3, [r7, #12]
 80108d0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80108d2:	2303      	movs	r3, #3
 80108d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80108d6:	2302      	movs	r3, #2
 80108d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80108da:	2300      	movs	r3, #0
 80108dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80108de:	2303      	movs	r3, #3
 80108e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80108e2:	2309      	movs	r3, #9
 80108e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80108e6:	f107 0314 	add.w	r3, r7, #20
 80108ea:	4619      	mov	r1, r3
 80108ec:	4805      	ldr	r0, [pc, #20]	; (8010904 <HAL_CAN_MspInit+0x8c>)
 80108ee:	f7f1 fc57 	bl	80021a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80108f2:	bf00      	nop
 80108f4:	3728      	adds	r7, #40	; 0x28
 80108f6:	46bd      	mov	sp, r7
 80108f8:	bd80      	pop	{r7, pc}
 80108fa:	bf00      	nop
 80108fc:	40006400 	.word	0x40006400
 8010900:	40023800 	.word	0x40023800
 8010904:	40020c00 	.word	0x40020c00

08010908 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8010908:	b580      	push	{r7, lr}
 801090a:	b08c      	sub	sp, #48	; 0x30
 801090c:	af00      	add	r7, sp, #0
 801090e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010910:	f107 031c 	add.w	r3, r7, #28
 8010914:	2200      	movs	r2, #0
 8010916:	601a      	str	r2, [r3, #0]
 8010918:	605a      	str	r2, [r3, #4]
 801091a:	609a      	str	r2, [r3, #8]
 801091c:	60da      	str	r2, [r3, #12]
 801091e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	681b      	ldr	r3, [r3, #0]
 8010924:	4a42      	ldr	r2, [pc, #264]	; (8010a30 <HAL_I2C_MspInit+0x128>)
 8010926:	4293      	cmp	r3, r2
 8010928:	d12d      	bne.n	8010986 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801092a:	2300      	movs	r3, #0
 801092c:	61bb      	str	r3, [r7, #24]
 801092e:	4b41      	ldr	r3, [pc, #260]	; (8010a34 <HAL_I2C_MspInit+0x12c>)
 8010930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010932:	4a40      	ldr	r2, [pc, #256]	; (8010a34 <HAL_I2C_MspInit+0x12c>)
 8010934:	f043 0302 	orr.w	r3, r3, #2
 8010938:	6313      	str	r3, [r2, #48]	; 0x30
 801093a:	4b3e      	ldr	r3, [pc, #248]	; (8010a34 <HAL_I2C_MspInit+0x12c>)
 801093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801093e:	f003 0302 	and.w	r3, r3, #2
 8010942:	61bb      	str	r3, [r7, #24]
 8010944:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8010946:	f44f 7310 	mov.w	r3, #576	; 0x240
 801094a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 801094c:	2312      	movs	r3, #18
 801094e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8010950:	2301      	movs	r3, #1
 8010952:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010954:	2300      	movs	r3, #0
 8010956:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8010958:	2304      	movs	r3, #4
 801095a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801095c:	f107 031c 	add.w	r3, r7, #28
 8010960:	4619      	mov	r1, r3
 8010962:	4835      	ldr	r0, [pc, #212]	; (8010a38 <HAL_I2C_MspInit+0x130>)
 8010964:	f7f1 fc1c 	bl	80021a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8010968:	2300      	movs	r3, #0
 801096a:	617b      	str	r3, [r7, #20]
 801096c:	4b31      	ldr	r3, [pc, #196]	; (8010a34 <HAL_I2C_MspInit+0x12c>)
 801096e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010970:	4a30      	ldr	r2, [pc, #192]	; (8010a34 <HAL_I2C_MspInit+0x12c>)
 8010972:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8010976:	6413      	str	r3, [r2, #64]	; 0x40
 8010978:	4b2e      	ldr	r3, [pc, #184]	; (8010a34 <HAL_I2C_MspInit+0x12c>)
 801097a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801097c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8010980:	617b      	str	r3, [r7, #20]
 8010982:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8010984:	e050      	b.n	8010a28 <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C3)
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	681b      	ldr	r3, [r3, #0]
 801098a:	4a2c      	ldr	r2, [pc, #176]	; (8010a3c <HAL_I2C_MspInit+0x134>)
 801098c:	4293      	cmp	r3, r2
 801098e:	d14b      	bne.n	8010a28 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8010990:	2300      	movs	r3, #0
 8010992:	613b      	str	r3, [r7, #16]
 8010994:	4b27      	ldr	r3, [pc, #156]	; (8010a34 <HAL_I2C_MspInit+0x12c>)
 8010996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010998:	4a26      	ldr	r2, [pc, #152]	; (8010a34 <HAL_I2C_MspInit+0x12c>)
 801099a:	f043 0304 	orr.w	r3, r3, #4
 801099e:	6313      	str	r3, [r2, #48]	; 0x30
 80109a0:	4b24      	ldr	r3, [pc, #144]	; (8010a34 <HAL_I2C_MspInit+0x12c>)
 80109a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80109a4:	f003 0304 	and.w	r3, r3, #4
 80109a8:	613b      	str	r3, [r7, #16]
 80109aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80109ac:	2300      	movs	r3, #0
 80109ae:	60fb      	str	r3, [r7, #12]
 80109b0:	4b20      	ldr	r3, [pc, #128]	; (8010a34 <HAL_I2C_MspInit+0x12c>)
 80109b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80109b4:	4a1f      	ldr	r2, [pc, #124]	; (8010a34 <HAL_I2C_MspInit+0x12c>)
 80109b6:	f043 0301 	orr.w	r3, r3, #1
 80109ba:	6313      	str	r3, [r2, #48]	; 0x30
 80109bc:	4b1d      	ldr	r3, [pc, #116]	; (8010a34 <HAL_I2C_MspInit+0x12c>)
 80109be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80109c0:	f003 0301 	and.w	r3, r3, #1
 80109c4:	60fb      	str	r3, [r7, #12]
 80109c6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80109c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80109cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80109ce:	2312      	movs	r3, #18
 80109d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80109d2:	2301      	movs	r3, #1
 80109d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80109d6:	2303      	movs	r3, #3
 80109d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80109da:	2304      	movs	r3, #4
 80109dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80109de:	f107 031c 	add.w	r3, r7, #28
 80109e2:	4619      	mov	r1, r3
 80109e4:	4816      	ldr	r0, [pc, #88]	; (8010a40 <HAL_I2C_MspInit+0x138>)
 80109e6:	f7f1 fbdb 	bl	80021a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80109ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80109ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80109f0:	2312      	movs	r3, #18
 80109f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80109f4:	2301      	movs	r3, #1
 80109f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80109f8:	2303      	movs	r3, #3
 80109fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80109fc:	2304      	movs	r3, #4
 80109fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010a00:	f107 031c 	add.w	r3, r7, #28
 8010a04:	4619      	mov	r1, r3
 8010a06:	480f      	ldr	r0, [pc, #60]	; (8010a44 <HAL_I2C_MspInit+0x13c>)
 8010a08:	f7f1 fbca 	bl	80021a0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8010a0c:	2300      	movs	r3, #0
 8010a0e:	60bb      	str	r3, [r7, #8]
 8010a10:	4b08      	ldr	r3, [pc, #32]	; (8010a34 <HAL_I2C_MspInit+0x12c>)
 8010a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a14:	4a07      	ldr	r2, [pc, #28]	; (8010a34 <HAL_I2C_MspInit+0x12c>)
 8010a16:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8010a1a:	6413      	str	r3, [r2, #64]	; 0x40
 8010a1c:	4b05      	ldr	r3, [pc, #20]	; (8010a34 <HAL_I2C_MspInit+0x12c>)
 8010a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a20:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010a24:	60bb      	str	r3, [r7, #8]
 8010a26:	68bb      	ldr	r3, [r7, #8]
}
 8010a28:	bf00      	nop
 8010a2a:	3730      	adds	r7, #48	; 0x30
 8010a2c:	46bd      	mov	sp, r7
 8010a2e:	bd80      	pop	{r7, pc}
 8010a30:	40005400 	.word	0x40005400
 8010a34:	40023800 	.word	0x40023800
 8010a38:	40020400 	.word	0x40020400
 8010a3c:	40005c00 	.word	0x40005c00
 8010a40:	40020800 	.word	0x40020800
 8010a44:	40020000 	.word	0x40020000

08010a48 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8010a48:	b580      	push	{r7, lr}
 8010a4a:	b082      	sub	sp, #8
 8010a4c:	af00      	add	r7, sp, #0
 8010a4e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	681b      	ldr	r3, [r3, #0]
 8010a54:	4a13      	ldr	r2, [pc, #76]	; (8010aa4 <HAL_I2C_MspDeInit+0x5c>)
 8010a56:	4293      	cmp	r3, r2
 8010a58:	d10b      	bne.n	8010a72 <HAL_I2C_MspDeInit+0x2a>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8010a5a:	4b13      	ldr	r3, [pc, #76]	; (8010aa8 <HAL_I2C_MspDeInit+0x60>)
 8010a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a5e:	4a12      	ldr	r2, [pc, #72]	; (8010aa8 <HAL_I2C_MspDeInit+0x60>)
 8010a60:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8010a64:	6413      	str	r3, [r2, #64]	; 0x40
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, Audio_SCL_Pin|Audio_SDA_Pin);
 8010a66:	f44f 7110 	mov.w	r1, #576	; 0x240
 8010a6a:	4810      	ldr	r0, [pc, #64]	; (8010aac <HAL_I2C_MspDeInit+0x64>)
 8010a6c:	f7f1 fd32 	bl	80024d4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8010a70:	e014      	b.n	8010a9c <HAL_I2C_MspDeInit+0x54>
  else if(hi2c->Instance==I2C3)
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	681b      	ldr	r3, [r3, #0]
 8010a76:	4a0e      	ldr	r2, [pc, #56]	; (8010ab0 <HAL_I2C_MspDeInit+0x68>)
 8010a78:	4293      	cmp	r3, r2
 8010a7a:	d10f      	bne.n	8010a9c <HAL_I2C_MspDeInit+0x54>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8010a7c:	4b0a      	ldr	r3, [pc, #40]	; (8010aa8 <HAL_I2C_MspDeInit+0x60>)
 8010a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a80:	4a09      	ldr	r2, [pc, #36]	; (8010aa8 <HAL_I2C_MspDeInit+0x60>)
 8010a82:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8010a86:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_9);
 8010a88:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010a8c:	4809      	ldr	r0, [pc, #36]	; (8010ab4 <HAL_I2C_MspDeInit+0x6c>)
 8010a8e:	f7f1 fd21 	bl	80024d4 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_8);
 8010a92:	f44f 7180 	mov.w	r1, #256	; 0x100
 8010a96:	4808      	ldr	r0, [pc, #32]	; (8010ab8 <HAL_I2C_MspDeInit+0x70>)
 8010a98:	f7f1 fd1c 	bl	80024d4 <HAL_GPIO_DeInit>
}
 8010a9c:	bf00      	nop
 8010a9e:	3708      	adds	r7, #8
 8010aa0:	46bd      	mov	sp, r7
 8010aa2:	bd80      	pop	{r7, pc}
 8010aa4:	40005400 	.word	0x40005400
 8010aa8:	40023800 	.word	0x40023800
 8010aac:	40020400 	.word	0x40020400
 8010ab0:	40005c00 	.word	0x40005c00
 8010ab4:	40020800 	.word	0x40020800
 8010ab8:	40020000 	.word	0x40020000

08010abc <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8010abc:	b580      	push	{r7, lr}
 8010abe:	b08a      	sub	sp, #40	; 0x28
 8010ac0:	af00      	add	r7, sp, #0
 8010ac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010ac4:	f107 0314 	add.w	r3, r7, #20
 8010ac8:	2200      	movs	r2, #0
 8010aca:	601a      	str	r2, [r3, #0]
 8010acc:	605a      	str	r2, [r3, #4]
 8010ace:	609a      	str	r2, [r3, #8]
 8010ad0:	60da      	str	r2, [r3, #12]
 8010ad2:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	681b      	ldr	r3, [r3, #0]
 8010ad8:	4a48      	ldr	r2, [pc, #288]	; (8010bfc <HAL_I2S_MspInit+0x140>)
 8010ada:	4293      	cmp	r3, r2
 8010adc:	f040 808a 	bne.w	8010bf4 <HAL_I2S_MspInit+0x138>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8010ae0:	2300      	movs	r3, #0
 8010ae2:	613b      	str	r3, [r7, #16]
 8010ae4:	4b46      	ldr	r3, [pc, #280]	; (8010c00 <HAL_I2S_MspInit+0x144>)
 8010ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ae8:	4a45      	ldr	r2, [pc, #276]	; (8010c00 <HAL_I2S_MspInit+0x144>)
 8010aea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010aee:	6413      	str	r3, [r2, #64]	; 0x40
 8010af0:	4b43      	ldr	r3, [pc, #268]	; (8010c00 <HAL_I2S_MspInit+0x144>)
 8010af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010af4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010af8:	613b      	str	r3, [r7, #16]
 8010afa:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010afc:	2300      	movs	r3, #0
 8010afe:	60fb      	str	r3, [r7, #12]
 8010b00:	4b3f      	ldr	r3, [pc, #252]	; (8010c00 <HAL_I2S_MspInit+0x144>)
 8010b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010b04:	4a3e      	ldr	r2, [pc, #248]	; (8010c00 <HAL_I2S_MspInit+0x144>)
 8010b06:	f043 0301 	orr.w	r3, r3, #1
 8010b0a:	6313      	str	r3, [r2, #48]	; 0x30
 8010b0c:	4b3c      	ldr	r3, [pc, #240]	; (8010c00 <HAL_I2S_MspInit+0x144>)
 8010b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010b10:	f003 0301 	and.w	r3, r3, #1
 8010b14:	60fb      	str	r3, [r7, #12]
 8010b16:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8010b18:	2300      	movs	r3, #0
 8010b1a:	60bb      	str	r3, [r7, #8]
 8010b1c:	4b38      	ldr	r3, [pc, #224]	; (8010c00 <HAL_I2S_MspInit+0x144>)
 8010b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010b20:	4a37      	ldr	r2, [pc, #220]	; (8010c00 <HAL_I2S_MspInit+0x144>)
 8010b22:	f043 0304 	orr.w	r3, r3, #4
 8010b26:	6313      	str	r3, [r2, #48]	; 0x30
 8010b28:	4b35      	ldr	r3, [pc, #212]	; (8010c00 <HAL_I2S_MspInit+0x144>)
 8010b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010b2c:	f003 0304 	and.w	r3, r3, #4
 8010b30:	60bb      	str	r3, [r7, #8]
 8010b32:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD 
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8010b34:	2310      	movs	r3, #16
 8010b36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010b38:	2302      	movs	r3, #2
 8010b3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010b3c:	2300      	movs	r3, #0
 8010b3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010b40:	2300      	movs	r3, #0
 8010b42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8010b44:	2306      	movs	r3, #6
 8010b46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8010b48:	f107 0314 	add.w	r3, r7, #20
 8010b4c:	4619      	mov	r1, r3
 8010b4e:	482d      	ldr	r0, [pc, #180]	; (8010c04 <HAL_I2S_MspInit+0x148>)
 8010b50:	f7f1 fb26 	bl	80021a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8010b54:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8010b58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010b5a:	2302      	movs	r3, #2
 8010b5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010b5e:	2300      	movs	r3, #0
 8010b60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010b62:	2300      	movs	r3, #0
 8010b64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8010b66:	2306      	movs	r3, #6
 8010b68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8010b6a:	f107 0314 	add.w	r3, r7, #20
 8010b6e:	4619      	mov	r1, r3
 8010b70:	4825      	ldr	r0, [pc, #148]	; (8010c08 <HAL_I2S_MspInit+0x14c>)
 8010b72:	f7f1 fb15 	bl	80021a0 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream7;
 8010b76:	4b25      	ldr	r3, [pc, #148]	; (8010c0c <HAL_I2S_MspInit+0x150>)
 8010b78:	4a25      	ldr	r2, [pc, #148]	; (8010c10 <HAL_I2S_MspInit+0x154>)
 8010b7a:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8010b7c:	4b23      	ldr	r3, [pc, #140]	; (8010c0c <HAL_I2S_MspInit+0x150>)
 8010b7e:	2200      	movs	r2, #0
 8010b80:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8010b82:	4b22      	ldr	r3, [pc, #136]	; (8010c0c <HAL_I2S_MspInit+0x150>)
 8010b84:	2240      	movs	r2, #64	; 0x40
 8010b86:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8010b88:	4b20      	ldr	r3, [pc, #128]	; (8010c0c <HAL_I2S_MspInit+0x150>)
 8010b8a:	2200      	movs	r2, #0
 8010b8c:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8010b8e:	4b1f      	ldr	r3, [pc, #124]	; (8010c0c <HAL_I2S_MspInit+0x150>)
 8010b90:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8010b94:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8010b96:	4b1d      	ldr	r3, [pc, #116]	; (8010c0c <HAL_I2S_MspInit+0x150>)
 8010b98:	2200      	movs	r2, #0
 8010b9a:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8010b9c:	4b1b      	ldr	r3, [pc, #108]	; (8010c0c <HAL_I2S_MspInit+0x150>)
 8010b9e:	2200      	movs	r2, #0
 8010ba0:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 8010ba2:	4b1a      	ldr	r3, [pc, #104]	; (8010c0c <HAL_I2S_MspInit+0x150>)
 8010ba4:	2200      	movs	r2, #0
 8010ba6:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8010ba8:	4b18      	ldr	r3, [pc, #96]	; (8010c0c <HAL_I2S_MspInit+0x150>)
 8010baa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8010bae:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8010bb0:	4b16      	ldr	r3, [pc, #88]	; (8010c0c <HAL_I2S_MspInit+0x150>)
 8010bb2:	2204      	movs	r2, #4
 8010bb4:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8010bb6:	4b15      	ldr	r3, [pc, #84]	; (8010c0c <HAL_I2S_MspInit+0x150>)
 8010bb8:	2203      	movs	r2, #3
 8010bba:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8010bbc:	4b13      	ldr	r3, [pc, #76]	; (8010c0c <HAL_I2S_MspInit+0x150>)
 8010bbe:	2200      	movs	r2, #0
 8010bc0:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8010bc2:	4b12      	ldr	r3, [pc, #72]	; (8010c0c <HAL_I2S_MspInit+0x150>)
 8010bc4:	2200      	movs	r2, #0
 8010bc6:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8010bc8:	4810      	ldr	r0, [pc, #64]	; (8010c0c <HAL_I2S_MspInit+0x150>)
 8010bca:	f7f0 fc2f 	bl	800142c <HAL_DMA_Init>
 8010bce:	4603      	mov	r3, r0
 8010bd0:	2b00      	cmp	r3, #0
 8010bd2:	d001      	beq.n	8010bd8 <HAL_I2S_MspInit+0x11c>
    {
      Error_Handler();
 8010bd4:	f7ff f9a2 	bl	800ff1c <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	4a0c      	ldr	r2, [pc, #48]	; (8010c0c <HAL_I2S_MspInit+0x150>)
 8010bdc:	639a      	str	r2, [r3, #56]	; 0x38
 8010bde:	4a0b      	ldr	r2, [pc, #44]	; (8010c0c <HAL_I2S_MspInit+0x150>)
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2S3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 8010be4:	2200      	movs	r2, #0
 8010be6:	2105      	movs	r1, #5
 8010be8:	2033      	movs	r0, #51	; 0x33
 8010bea:	f7f0 fbf5 	bl	80013d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8010bee:	2033      	movs	r0, #51	; 0x33
 8010bf0:	f7f0 fc0e 	bl	8001410 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8010bf4:	bf00      	nop
 8010bf6:	3728      	adds	r7, #40	; 0x28
 8010bf8:	46bd      	mov	sp, r7
 8010bfa:	bd80      	pop	{r7, pc}
 8010bfc:	40003c00 	.word	0x40003c00
 8010c00:	40023800 	.word	0x40023800
 8010c04:	40020000 	.word	0x40020000
 8010c08:	40020800 	.word	0x40020800
 8010c0c:	20008460 	.word	0x20008460
 8010c10:	400260b8 	.word	0x400260b8

08010c14 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8010c14:	b480      	push	{r7}
 8010c16:	b083      	sub	sp, #12
 8010c18:	af00      	add	r7, sp, #0
 8010c1a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	681b      	ldr	r3, [r3, #0]
 8010c20:	4a05      	ldr	r2, [pc, #20]	; (8010c38 <HAL_RTC_MspInit+0x24>)
 8010c22:	4293      	cmp	r3, r2
 8010c24:	d102      	bne.n	8010c2c <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8010c26:	4b05      	ldr	r3, [pc, #20]	; (8010c3c <HAL_RTC_MspInit+0x28>)
 8010c28:	2201      	movs	r2, #1
 8010c2a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8010c2c:	bf00      	nop
 8010c2e:	370c      	adds	r7, #12
 8010c30:	46bd      	mov	sp, r7
 8010c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c36:	4770      	bx	lr
 8010c38:	40002800 	.word	0x40002800
 8010c3c:	42470e3c 	.word	0x42470e3c

08010c40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8010c40:	b580      	push	{r7, lr}
 8010c42:	b08e      	sub	sp, #56	; 0x38
 8010c44:	af00      	add	r7, sp, #0
 8010c46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010c48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010c4c:	2200      	movs	r2, #0
 8010c4e:	601a      	str	r2, [r3, #0]
 8010c50:	605a      	str	r2, [r3, #4]
 8010c52:	609a      	str	r2, [r3, #8]
 8010c54:	60da      	str	r2, [r3, #12]
 8010c56:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	681b      	ldr	r3, [r3, #0]
 8010c5c:	4a67      	ldr	r2, [pc, #412]	; (8010dfc <HAL_UART_MspInit+0x1bc>)
 8010c5e:	4293      	cmp	r3, r2
 8010c60:	d163      	bne.n	8010d2a <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8010c62:	2300      	movs	r3, #0
 8010c64:	623b      	str	r3, [r7, #32]
 8010c66:	4b66      	ldr	r3, [pc, #408]	; (8010e00 <HAL_UART_MspInit+0x1c0>)
 8010c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c6a:	4a65      	ldr	r2, [pc, #404]	; (8010e00 <HAL_UART_MspInit+0x1c0>)
 8010c6c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010c70:	6413      	str	r3, [r2, #64]	; 0x40
 8010c72:	4b63      	ldr	r3, [pc, #396]	; (8010e00 <HAL_UART_MspInit+0x1c0>)
 8010c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8010c7a:	623b      	str	r3, [r7, #32]
 8010c7c:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010c7e:	2300      	movs	r3, #0
 8010c80:	61fb      	str	r3, [r7, #28]
 8010c82:	4b5f      	ldr	r3, [pc, #380]	; (8010e00 <HAL_UART_MspInit+0x1c0>)
 8010c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010c86:	4a5e      	ldr	r2, [pc, #376]	; (8010e00 <HAL_UART_MspInit+0x1c0>)
 8010c88:	f043 0301 	orr.w	r3, r3, #1
 8010c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8010c8e:	4b5c      	ldr	r3, [pc, #368]	; (8010e00 <HAL_UART_MspInit+0x1c0>)
 8010c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010c92:	f003 0301 	and.w	r3, r3, #1
 8010c96:	61fb      	str	r3, [r7, #28]
 8010c98:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration    
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8010c9a:	2303      	movs	r3, #3
 8010c9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010c9e:	2302      	movs	r3, #2
 8010ca0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8010ca2:	2301      	movs	r3, #1
 8010ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010ca6:	2303      	movs	r3, #3
 8010ca8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8010caa:	2308      	movs	r3, #8
 8010cac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010cae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010cb2:	4619      	mov	r1, r3
 8010cb4:	4853      	ldr	r0, [pc, #332]	; (8010e04 <HAL_UART_MspInit+0x1c4>)
 8010cb6:	f7f1 fa73 	bl	80021a0 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8010cba:	4b53      	ldr	r3, [pc, #332]	; (8010e08 <HAL_UART_MspInit+0x1c8>)
 8010cbc:	4a53      	ldr	r2, [pc, #332]	; (8010e0c <HAL_UART_MspInit+0x1cc>)
 8010cbe:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8010cc0:	4b51      	ldr	r3, [pc, #324]	; (8010e08 <HAL_UART_MspInit+0x1c8>)
 8010cc2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8010cc6:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8010cc8:	4b4f      	ldr	r3, [pc, #316]	; (8010e08 <HAL_UART_MspInit+0x1c8>)
 8010cca:	2200      	movs	r2, #0
 8010ccc:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8010cce:	4b4e      	ldr	r3, [pc, #312]	; (8010e08 <HAL_UART_MspInit+0x1c8>)
 8010cd0:	2200      	movs	r2, #0
 8010cd2:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8010cd4:	4b4c      	ldr	r3, [pc, #304]	; (8010e08 <HAL_UART_MspInit+0x1c8>)
 8010cd6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8010cda:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8010cdc:	4b4a      	ldr	r3, [pc, #296]	; (8010e08 <HAL_UART_MspInit+0x1c8>)
 8010cde:	2200      	movs	r2, #0
 8010ce0:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8010ce2:	4b49      	ldr	r3, [pc, #292]	; (8010e08 <HAL_UART_MspInit+0x1c8>)
 8010ce4:	2200      	movs	r2, #0
 8010ce6:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8010ce8:	4b47      	ldr	r3, [pc, #284]	; (8010e08 <HAL_UART_MspInit+0x1c8>)
 8010cea:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010cee:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8010cf0:	4b45      	ldr	r3, [pc, #276]	; (8010e08 <HAL_UART_MspInit+0x1c8>)
 8010cf2:	2200      	movs	r2, #0
 8010cf4:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8010cf6:	4b44      	ldr	r3, [pc, #272]	; (8010e08 <HAL_UART_MspInit+0x1c8>)
 8010cf8:	2200      	movs	r2, #0
 8010cfa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8010cfc:	4842      	ldr	r0, [pc, #264]	; (8010e08 <HAL_UART_MspInit+0x1c8>)
 8010cfe:	f7f0 fb95 	bl	800142c <HAL_DMA_Init>
 8010d02:	4603      	mov	r3, r0
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	d001      	beq.n	8010d0c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8010d08:	f7ff f908 	bl	800ff1c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	4a3e      	ldr	r2, [pc, #248]	; (8010e08 <HAL_UART_MspInit+0x1c8>)
 8010d10:	635a      	str	r2, [r3, #52]	; 0x34
 8010d12:	4a3d      	ldr	r2, [pc, #244]	; (8010e08 <HAL_UART_MspInit+0x1c8>)
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8010d18:	2200      	movs	r2, #0
 8010d1a:	2105      	movs	r1, #5
 8010d1c:	2034      	movs	r0, #52	; 0x34
 8010d1e:	f7f0 fb5b 	bl	80013d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8010d22:	2034      	movs	r0, #52	; 0x34
 8010d24:	f7f0 fb74 	bl	8001410 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8010d28:	e101      	b.n	8010f2e <HAL_UART_MspInit+0x2ee>
  else if(huart->Instance==USART2)
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	681b      	ldr	r3, [r3, #0]
 8010d2e:	4a38      	ldr	r2, [pc, #224]	; (8010e10 <HAL_UART_MspInit+0x1d0>)
 8010d30:	4293      	cmp	r3, r2
 8010d32:	d173      	bne.n	8010e1c <HAL_UART_MspInit+0x1dc>
    __HAL_RCC_USART2_CLK_ENABLE();
 8010d34:	2300      	movs	r3, #0
 8010d36:	61bb      	str	r3, [r7, #24]
 8010d38:	4b31      	ldr	r3, [pc, #196]	; (8010e00 <HAL_UART_MspInit+0x1c0>)
 8010d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d3c:	4a30      	ldr	r2, [pc, #192]	; (8010e00 <HAL_UART_MspInit+0x1c0>)
 8010d3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010d42:	6413      	str	r3, [r2, #64]	; 0x40
 8010d44:	4b2e      	ldr	r3, [pc, #184]	; (8010e00 <HAL_UART_MspInit+0x1c0>)
 8010d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010d4c:	61bb      	str	r3, [r7, #24]
 8010d4e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010d50:	2300      	movs	r3, #0
 8010d52:	617b      	str	r3, [r7, #20]
 8010d54:	4b2a      	ldr	r3, [pc, #168]	; (8010e00 <HAL_UART_MspInit+0x1c0>)
 8010d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010d58:	4a29      	ldr	r2, [pc, #164]	; (8010e00 <HAL_UART_MspInit+0x1c0>)
 8010d5a:	f043 0301 	orr.w	r3, r3, #1
 8010d5e:	6313      	str	r3, [r2, #48]	; 0x30
 8010d60:	4b27      	ldr	r3, [pc, #156]	; (8010e00 <HAL_UART_MspInit+0x1c0>)
 8010d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010d64:	f003 0301 	and.w	r3, r3, #1
 8010d68:	617b      	str	r3, [r7, #20]
 8010d6a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8010d6c:	230c      	movs	r3, #12
 8010d6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010d70:	2302      	movs	r3, #2
 8010d72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8010d74:	2301      	movs	r3, #1
 8010d76:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010d78:	2303      	movs	r3, #3
 8010d7a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8010d7c:	2307      	movs	r3, #7
 8010d7e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010d80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010d84:	4619      	mov	r1, r3
 8010d86:	481f      	ldr	r0, [pc, #124]	; (8010e04 <HAL_UART_MspInit+0x1c4>)
 8010d88:	f7f1 fa0a 	bl	80021a0 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8010d8c:	4b21      	ldr	r3, [pc, #132]	; (8010e14 <HAL_UART_MspInit+0x1d4>)
 8010d8e:	4a22      	ldr	r2, [pc, #136]	; (8010e18 <HAL_UART_MspInit+0x1d8>)
 8010d90:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8010d92:	4b20      	ldr	r3, [pc, #128]	; (8010e14 <HAL_UART_MspInit+0x1d4>)
 8010d94:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8010d98:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8010d9a:	4b1e      	ldr	r3, [pc, #120]	; (8010e14 <HAL_UART_MspInit+0x1d4>)
 8010d9c:	2200      	movs	r2, #0
 8010d9e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8010da0:	4b1c      	ldr	r3, [pc, #112]	; (8010e14 <HAL_UART_MspInit+0x1d4>)
 8010da2:	2200      	movs	r2, #0
 8010da4:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8010da6:	4b1b      	ldr	r3, [pc, #108]	; (8010e14 <HAL_UART_MspInit+0x1d4>)
 8010da8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8010dac:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8010dae:	4b19      	ldr	r3, [pc, #100]	; (8010e14 <HAL_UART_MspInit+0x1d4>)
 8010db0:	2200      	movs	r2, #0
 8010db2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8010db4:	4b17      	ldr	r3, [pc, #92]	; (8010e14 <HAL_UART_MspInit+0x1d4>)
 8010db6:	2200      	movs	r2, #0
 8010db8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8010dba:	4b16      	ldr	r3, [pc, #88]	; (8010e14 <HAL_UART_MspInit+0x1d4>)
 8010dbc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010dc0:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8010dc2:	4b14      	ldr	r3, [pc, #80]	; (8010e14 <HAL_UART_MspInit+0x1d4>)
 8010dc4:	2200      	movs	r2, #0
 8010dc6:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8010dc8:	4b12      	ldr	r3, [pc, #72]	; (8010e14 <HAL_UART_MspInit+0x1d4>)
 8010dca:	2200      	movs	r2, #0
 8010dcc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8010dce:	4811      	ldr	r0, [pc, #68]	; (8010e14 <HAL_UART_MspInit+0x1d4>)
 8010dd0:	f7f0 fb2c 	bl	800142c <HAL_DMA_Init>
 8010dd4:	4603      	mov	r3, r0
 8010dd6:	2b00      	cmp	r3, #0
 8010dd8:	d001      	beq.n	8010dde <HAL_UART_MspInit+0x19e>
      Error_Handler();
 8010dda:	f7ff f89f 	bl	800ff1c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	4a0c      	ldr	r2, [pc, #48]	; (8010e14 <HAL_UART_MspInit+0x1d4>)
 8010de2:	635a      	str	r2, [r3, #52]	; 0x34
 8010de4:	4a0b      	ldr	r2, [pc, #44]	; (8010e14 <HAL_UART_MspInit+0x1d4>)
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8010dea:	2200      	movs	r2, #0
 8010dec:	2105      	movs	r1, #5
 8010dee:	2026      	movs	r0, #38	; 0x26
 8010df0:	f7f0 faf2 	bl	80013d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8010df4:	2026      	movs	r0, #38	; 0x26
 8010df6:	f7f0 fb0b 	bl	8001410 <HAL_NVIC_EnableIRQ>
}
 8010dfa:	e098      	b.n	8010f2e <HAL_UART_MspInit+0x2ee>
 8010dfc:	40004c00 	.word	0x40004c00
 8010e00:	40023800 	.word	0x40023800
 8010e04:	40020000 	.word	0x40020000
 8010e08:	2000824c 	.word	0x2000824c
 8010e0c:	40026040 	.word	0x40026040
 8010e10:	40004400 	.word	0x40004400
 8010e14:	200082ac 	.word	0x200082ac
 8010e18:	40026088 	.word	0x40026088
  else if(huart->Instance==USART3)
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	681b      	ldr	r3, [r3, #0]
 8010e20:	4a45      	ldr	r2, [pc, #276]	; (8010f38 <HAL_UART_MspInit+0x2f8>)
 8010e22:	4293      	cmp	r3, r2
 8010e24:	f040 8083 	bne.w	8010f2e <HAL_UART_MspInit+0x2ee>
    __HAL_RCC_USART3_CLK_ENABLE();
 8010e28:	2300      	movs	r3, #0
 8010e2a:	613b      	str	r3, [r7, #16]
 8010e2c:	4b43      	ldr	r3, [pc, #268]	; (8010f3c <HAL_UART_MspInit+0x2fc>)
 8010e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e30:	4a42      	ldr	r2, [pc, #264]	; (8010f3c <HAL_UART_MspInit+0x2fc>)
 8010e32:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8010e36:	6413      	str	r3, [r2, #64]	; 0x40
 8010e38:	4b40      	ldr	r3, [pc, #256]	; (8010f3c <HAL_UART_MspInit+0x2fc>)
 8010e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010e40:	613b      	str	r3, [r7, #16]
 8010e42:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8010e44:	2300      	movs	r3, #0
 8010e46:	60fb      	str	r3, [r7, #12]
 8010e48:	4b3c      	ldr	r3, [pc, #240]	; (8010f3c <HAL_UART_MspInit+0x2fc>)
 8010e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010e4c:	4a3b      	ldr	r2, [pc, #236]	; (8010f3c <HAL_UART_MspInit+0x2fc>)
 8010e4e:	f043 0302 	orr.w	r3, r3, #2
 8010e52:	6313      	str	r3, [r2, #48]	; 0x30
 8010e54:	4b39      	ldr	r3, [pc, #228]	; (8010f3c <HAL_UART_MspInit+0x2fc>)
 8010e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010e58:	f003 0302 	and.w	r3, r3, #2
 8010e5c:	60fb      	str	r3, [r7, #12]
 8010e5e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8010e60:	2300      	movs	r3, #0
 8010e62:	60bb      	str	r3, [r7, #8]
 8010e64:	4b35      	ldr	r3, [pc, #212]	; (8010f3c <HAL_UART_MspInit+0x2fc>)
 8010e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010e68:	4a34      	ldr	r2, [pc, #208]	; (8010f3c <HAL_UART_MspInit+0x2fc>)
 8010e6a:	f043 0308 	orr.w	r3, r3, #8
 8010e6e:	6313      	str	r3, [r2, #48]	; 0x30
 8010e70:	4b32      	ldr	r3, [pc, #200]	; (8010f3c <HAL_UART_MspInit+0x2fc>)
 8010e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010e74:	f003 0308 	and.w	r3, r3, #8
 8010e78:	60bb      	str	r3, [r7, #8]
 8010e7a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8010e7c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010e80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010e82:	2302      	movs	r3, #2
 8010e84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8010e86:	2301      	movs	r3, #1
 8010e88:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010e8a:	2303      	movs	r3, #3
 8010e8c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8010e8e:	2307      	movs	r3, #7
 8010e90:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8010e92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010e96:	4619      	mov	r1, r3
 8010e98:	4829      	ldr	r0, [pc, #164]	; (8010f40 <HAL_UART_MspInit+0x300>)
 8010e9a:	f7f1 f981 	bl	80021a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8010e9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010ea2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010ea4:	2302      	movs	r3, #2
 8010ea6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8010ea8:	2301      	movs	r3, #1
 8010eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010eac:	2303      	movs	r3, #3
 8010eae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8010eb0:	2307      	movs	r3, #7
 8010eb2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8010eb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010eb8:	4619      	mov	r1, r3
 8010eba:	4822      	ldr	r0, [pc, #136]	; (8010f44 <HAL_UART_MspInit+0x304>)
 8010ebc:	f7f1 f970 	bl	80021a0 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8010ec0:	4b21      	ldr	r3, [pc, #132]	; (8010f48 <HAL_UART_MspInit+0x308>)
 8010ec2:	4a22      	ldr	r2, [pc, #136]	; (8010f4c <HAL_UART_MspInit+0x30c>)
 8010ec4:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8010ec6:	4b20      	ldr	r3, [pc, #128]	; (8010f48 <HAL_UART_MspInit+0x308>)
 8010ec8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8010ecc:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8010ece:	4b1e      	ldr	r3, [pc, #120]	; (8010f48 <HAL_UART_MspInit+0x308>)
 8010ed0:	2200      	movs	r2, #0
 8010ed2:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8010ed4:	4b1c      	ldr	r3, [pc, #112]	; (8010f48 <HAL_UART_MspInit+0x308>)
 8010ed6:	2200      	movs	r2, #0
 8010ed8:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8010eda:	4b1b      	ldr	r3, [pc, #108]	; (8010f48 <HAL_UART_MspInit+0x308>)
 8010edc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8010ee0:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8010ee2:	4b19      	ldr	r3, [pc, #100]	; (8010f48 <HAL_UART_MspInit+0x308>)
 8010ee4:	2200      	movs	r2, #0
 8010ee6:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8010ee8:	4b17      	ldr	r3, [pc, #92]	; (8010f48 <HAL_UART_MspInit+0x308>)
 8010eea:	2200      	movs	r2, #0
 8010eec:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8010eee:	4b16      	ldr	r3, [pc, #88]	; (8010f48 <HAL_UART_MspInit+0x308>)
 8010ef0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010ef4:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8010ef6:	4b14      	ldr	r3, [pc, #80]	; (8010f48 <HAL_UART_MspInit+0x308>)
 8010ef8:	2200      	movs	r2, #0
 8010efa:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8010efc:	4b12      	ldr	r3, [pc, #72]	; (8010f48 <HAL_UART_MspInit+0x308>)
 8010efe:	2200      	movs	r2, #0
 8010f00:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8010f02:	4811      	ldr	r0, [pc, #68]	; (8010f48 <HAL_UART_MspInit+0x308>)
 8010f04:	f7f0 fa92 	bl	800142c <HAL_DMA_Init>
 8010f08:	4603      	mov	r3, r0
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	d001      	beq.n	8010f12 <HAL_UART_MspInit+0x2d2>
      Error_Handler();
 8010f0e:	f7ff f805 	bl	800ff1c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	4a0c      	ldr	r2, [pc, #48]	; (8010f48 <HAL_UART_MspInit+0x308>)
 8010f16:	635a      	str	r2, [r3, #52]	; 0x34
 8010f18:	4a0b      	ldr	r2, [pc, #44]	; (8010f48 <HAL_UART_MspInit+0x308>)
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8010f1e:	2200      	movs	r2, #0
 8010f20:	2105      	movs	r1, #5
 8010f22:	2027      	movs	r0, #39	; 0x27
 8010f24:	f7f0 fa58 	bl	80013d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8010f28:	2027      	movs	r0, #39	; 0x27
 8010f2a:	f7f0 fa71 	bl	8001410 <HAL_NVIC_EnableIRQ>
}
 8010f2e:	bf00      	nop
 8010f30:	3738      	adds	r7, #56	; 0x38
 8010f32:	46bd      	mov	sp, r7
 8010f34:	bd80      	pop	{r7, pc}
 8010f36:	bf00      	nop
 8010f38:	40004800 	.word	0x40004800
 8010f3c:	40023800 	.word	0x40023800
 8010f40:	40020400 	.word	0x40020400
 8010f44:	40020c00 	.word	0x40020c00
 8010f48:	20008364 	.word	0x20008364
 8010f4c:	40026028 	.word	0x40026028

08010f50 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8010f50:	b580      	push	{r7, lr}
 8010f52:	b08c      	sub	sp, #48	; 0x30
 8010f54:	af00      	add	r7, sp, #0
 8010f56:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8010f58:	2300      	movs	r3, #0
 8010f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8010f5c:	2300      	movs	r3, #0
 8010f5e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8010f60:	2200      	movs	r2, #0
 8010f62:	6879      	ldr	r1, [r7, #4]
 8010f64:	2019      	movs	r0, #25
 8010f66:	f7f0 fa37 	bl	80013d8 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8010f6a:	2019      	movs	r0, #25
 8010f6c:	f7f0 fa50 	bl	8001410 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8010f70:	2300      	movs	r3, #0
 8010f72:	60fb      	str	r3, [r7, #12]
 8010f74:	4b1f      	ldr	r3, [pc, #124]	; (8010ff4 <HAL_InitTick+0xa4>)
 8010f76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010f78:	4a1e      	ldr	r2, [pc, #120]	; (8010ff4 <HAL_InitTick+0xa4>)
 8010f7a:	f043 0301 	orr.w	r3, r3, #1
 8010f7e:	6453      	str	r3, [r2, #68]	; 0x44
 8010f80:	4b1c      	ldr	r3, [pc, #112]	; (8010ff4 <HAL_InitTick+0xa4>)
 8010f82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010f84:	f003 0301 	and.w	r3, r3, #1
 8010f88:	60fb      	str	r3, [r7, #12]
 8010f8a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8010f8c:	f107 0210 	add.w	r2, r7, #16
 8010f90:	f107 0314 	add.w	r3, r7, #20
 8010f94:	4611      	mov	r1, r2
 8010f96:	4618      	mov	r0, r3
 8010f98:	f7f4 faee 	bl	8005578 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8010f9c:	f7f4 fad8 	bl	8005550 <HAL_RCC_GetPCLK2Freq>
 8010fa0:	4603      	mov	r3, r0
 8010fa2:	005b      	lsls	r3, r3, #1
 8010fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8010fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fa8:	4a13      	ldr	r2, [pc, #76]	; (8010ff8 <HAL_InitTick+0xa8>)
 8010faa:	fba2 2303 	umull	r2, r3, r2, r3
 8010fae:	0c9b      	lsrs	r3, r3, #18
 8010fb0:	3b01      	subs	r3, #1
 8010fb2:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8010fb4:	4b11      	ldr	r3, [pc, #68]	; (8010ffc <HAL_InitTick+0xac>)
 8010fb6:	4a12      	ldr	r2, [pc, #72]	; (8011000 <HAL_InitTick+0xb0>)
 8010fb8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8010fba:	4b10      	ldr	r3, [pc, #64]	; (8010ffc <HAL_InitTick+0xac>)
 8010fbc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8010fc0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8010fc2:	4a0e      	ldr	r2, [pc, #56]	; (8010ffc <HAL_InitTick+0xac>)
 8010fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fc6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8010fc8:	4b0c      	ldr	r3, [pc, #48]	; (8010ffc <HAL_InitTick+0xac>)
 8010fca:	2200      	movs	r2, #0
 8010fcc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8010fce:	4b0b      	ldr	r3, [pc, #44]	; (8010ffc <HAL_InitTick+0xac>)
 8010fd0:	2200      	movs	r2, #0
 8010fd2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8010fd4:	4809      	ldr	r0, [pc, #36]	; (8010ffc <HAL_InitTick+0xac>)
 8010fd6:	f7f4 ff9d 	bl	8005f14 <HAL_TIM_Base_Init>
 8010fda:	4603      	mov	r3, r0
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	d104      	bne.n	8010fea <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8010fe0:	4806      	ldr	r0, [pc, #24]	; (8010ffc <HAL_InitTick+0xac>)
 8010fe2:	f7f4 ffcc 	bl	8005f7e <HAL_TIM_Base_Start_IT>
 8010fe6:	4603      	mov	r3, r0
 8010fe8:	e000      	b.n	8010fec <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8010fea:	2301      	movs	r3, #1
}
 8010fec:	4618      	mov	r0, r3
 8010fee:	3730      	adds	r7, #48	; 0x30
 8010ff0:	46bd      	mov	sp, r7
 8010ff2:	bd80      	pop	{r7, pc}
 8010ff4:	40023800 	.word	0x40023800
 8010ff8:	431bde83 	.word	0x431bde83
 8010ffc:	2000864c 	.word	0x2000864c
 8011000:	40010000 	.word	0x40010000

08011004 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8011004:	b480      	push	{r7}
 8011006:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8011008:	bf00      	nop
 801100a:	46bd      	mov	sp, r7
 801100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011010:	4770      	bx	lr
	...

08011014 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8011014:	b580      	push	{r7, lr}
 8011016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	swvPrint("Hard fault interrupt.\n");
 8011018:	4801      	ldr	r0, [pc, #4]	; (8011020 <HardFault_Handler+0xc>)
 801101a:	f7fa faa1 	bl	800b560 <swvPrint>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 801101e:	e7fe      	b.n	801101e <HardFault_Handler+0xa>
 8011020:	080151e0 	.word	0x080151e0

08011024 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8011024:	b580      	push	{r7, lr}
 8011026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
	swvPrint("Memory management fault.\n");
 8011028:	4801      	ldr	r0, [pc, #4]	; (8011030 <MemManage_Handler+0xc>)
 801102a:	f7fa fa99 	bl	800b560 <swvPrint>
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 801102e:	e7fe      	b.n	801102e <MemManage_Handler+0xa>
 8011030:	080151f8 	.word	0x080151f8

08011034 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8011034:	b580      	push	{r7, lr}
 8011036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
	swvPrint("Pre-fetch fault, memory access fault.\n");
 8011038:	4801      	ldr	r0, [pc, #4]	; (8011040 <BusFault_Handler+0xc>)
 801103a:	f7fa fa91 	bl	800b560 <swvPrint>
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 801103e:	e7fe      	b.n	801103e <BusFault_Handler+0xa>
 8011040:	08015214 	.word	0x08015214

08011044 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8011044:	b580      	push	{r7, lr}
 8011046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
	swvPrint("Undefined instruction or illegal state.\n");
 8011048:	4801      	ldr	r0, [pc, #4]	; (8011050 <UsageFault_Handler+0xc>)
 801104a:	f7fa fa89 	bl	800b560 <swvPrint>
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 801104e:	e7fe      	b.n	801104e <UsageFault_Handler+0xa>
 8011050:	0801523c 	.word	0x0801523c

08011054 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8011054:	b480      	push	{r7}
 8011056:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8011058:	bf00      	nop
 801105a:	46bd      	mov	sp, r7
 801105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011060:	4770      	bx	lr
	...

08011064 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8011064:	b580      	push	{r7, lr}
 8011066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */
  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8011068:	4804      	ldr	r0, [pc, #16]	; (801107c <DMA1_Stream1_IRQHandler+0x18>)
 801106a:	f7f0 fb6d 	bl	8001748 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */
	SIMCOM_DMA_IrqHandler(&hdma_usart3_rx, &huart3);
 801106e:	4904      	ldr	r1, [pc, #16]	; (8011080 <DMA1_Stream1_IRQHandler+0x1c>)
 8011070:	4802      	ldr	r0, [pc, #8]	; (801107c <DMA1_Stream1_IRQHandler+0x18>)
 8011072:	f7f9 fd0f 	bl	800aa94 <SIMCOM_DMA_IrqHandler>
  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8011076:	bf00      	nop
 8011078:	bd80      	pop	{r7, pc}
 801107a:	bf00      	nop
 801107c:	20008364 	.word	0x20008364
 8011080:	200083c4 	.word	0x200083c4

08011084 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8011084:	b580      	push	{r7, lr}
 8011086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8011088:	4804      	ldr	r0, [pc, #16]	; (801109c <DMA1_Stream2_IRQHandler+0x18>)
 801108a:	f7f0 fb5d 	bl	8001748 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */
	FINGER_DMA_IrqHandler(&hdma_uart4_rx, &huart4);
 801108e:	4904      	ldr	r1, [pc, #16]	; (80110a0 <DMA1_Stream2_IRQHandler+0x1c>)
 8011090:	4802      	ldr	r0, [pc, #8]	; (801109c <DMA1_Stream2_IRQHandler+0x18>)
 8011092:	f7f9 fa57 	bl	800a544 <FINGER_DMA_IrqHandler>
  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8011096:	bf00      	nop
 8011098:	bd80      	pop	{r7, pc}
 801109a:	bf00      	nop
 801109c:	2000824c 	.word	0x2000824c
 80110a0:	200084f0 	.word	0x200084f0

080110a4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80110a4:	b580      	push	{r7, lr}
 80110a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80110a8:	4804      	ldr	r0, [pc, #16]	; (80110bc <DMA1_Stream5_IRQHandler+0x18>)
 80110aa:	f7f0 fb4d 	bl	8001748 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */
	UBLOX_DMA_IrqHandler(&hdma_usart2_rx, &huart2);
 80110ae:	4904      	ldr	r1, [pc, #16]	; (80110c0 <DMA1_Stream5_IRQHandler+0x1c>)
 80110b0:	4802      	ldr	r0, [pc, #8]	; (80110bc <DMA1_Stream5_IRQHandler+0x18>)
 80110b2:	f7f9 ffaf 	bl	800b014 <UBLOX_DMA_IrqHandler>
  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80110b6:	bf00      	nop
 80110b8:	bd80      	pop	{r7, pc}
 80110ba:	bf00      	nop
 80110bc:	200082ac 	.word	0x200082ac
 80110c0:	2000858c 	.word	0x2000858c

080110c4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80110c4:	b580      	push	{r7, lr}
 80110c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80110c8:	4802      	ldr	r0, [pc, #8]	; (80110d4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80110ca:	f7f4 ff7c 	bl	8005fc6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80110ce:	bf00      	nop
 80110d0:	bd80      	pop	{r7, pc}
 80110d2:	bf00      	nop
 80110d4:	2000864c 	.word	0x2000864c

080110d8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80110d8:	b580      	push	{r7, lr}
 80110da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80110dc:	4804      	ldr	r0, [pc, #16]	; (80110f0 <USART2_IRQHandler+0x18>)
 80110de:	f7f5 fabd 	bl	800665c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
	UBLOX_USART_IrqHandler(&huart2, &hdma_usart2_rx);
 80110e2:	4904      	ldr	r1, [pc, #16]	; (80110f4 <USART2_IRQHandler+0x1c>)
 80110e4:	4802      	ldr	r0, [pc, #8]	; (80110f0 <USART2_IRQHandler+0x18>)
 80110e6:	f7f9 ff6d 	bl	800afc4 <UBLOX_USART_IrqHandler>
  /* USER CODE END USART2_IRQn 1 */
}
 80110ea:	bf00      	nop
 80110ec:	bd80      	pop	{r7, pc}
 80110ee:	bf00      	nop
 80110f0:	2000858c 	.word	0x2000858c
 80110f4:	200082ac 	.word	0x200082ac

080110f8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80110f8:	b580      	push	{r7, lr}
 80110fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80110fc:	4804      	ldr	r0, [pc, #16]	; (8011110 <USART3_IRQHandler+0x18>)
 80110fe:	f7f5 faad 	bl	800665c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */
	SIMCOM_USART_IrqHandler(&huart3, &hdma_usart3_rx);
 8011102:	4904      	ldr	r1, [pc, #16]	; (8011114 <USART3_IRQHandler+0x1c>)
 8011104:	4802      	ldr	r0, [pc, #8]	; (8011110 <USART3_IRQHandler+0x18>)
 8011106:	f7f9 fc9d 	bl	800aa44 <SIMCOM_USART_IrqHandler>
  /* USER CODE END USART3_IRQn 1 */
}
 801110a:	bf00      	nop
 801110c:	bd80      	pop	{r7, pc}
 801110e:	bf00      	nop
 8011110:	200083c4 	.word	0x200083c4
 8011114:	20008364 	.word	0x20008364

08011118 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8011118:	b580      	push	{r7, lr}
 801111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 801111c:	4802      	ldr	r0, [pc, #8]	; (8011128 <DMA1_Stream7_IRQHandler+0x10>)
 801111e:	f7f0 fb13 	bl	8001748 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8011122:	bf00      	nop
 8011124:	bd80      	pop	{r7, pc}
 8011126:	bf00      	nop
 8011128:	20008460 	.word	0x20008460

0801112c <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 801112c:	b580      	push	{r7, lr}
 801112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s3);
 8011130:	4802      	ldr	r0, [pc, #8]	; (801113c <SPI3_IRQHandler+0x10>)
 8011132:	f7f3 fa2d 	bl	8004590 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8011136:	bf00      	nop
 8011138:	bd80      	pop	{r7, pc}
 801113a:	bf00      	nop
 801113c:	200085f8 	.word	0x200085f8

08011140 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8011140:	b580      	push	{r7, lr}
 8011142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8011144:	4804      	ldr	r0, [pc, #16]	; (8011158 <UART4_IRQHandler+0x18>)
 8011146:	f7f5 fa89 	bl	800665c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */
	FINGER_USART_IrqHandler(&huart4, &hdma_uart4_rx);
 801114a:	4904      	ldr	r1, [pc, #16]	; (801115c <UART4_IRQHandler+0x1c>)
 801114c:	4802      	ldr	r0, [pc, #8]	; (8011158 <UART4_IRQHandler+0x18>)
 801114e:	f7f9 f9d1 	bl	800a4f4 <FINGER_USART_IrqHandler>
  /* USER CODE END UART4_IRQn 1 */
}
 8011152:	bf00      	nop
 8011154:	bd80      	pop	{r7, pc}
 8011156:	bf00      	nop
 8011158:	200084f0 	.word	0x200084f0
 801115c:	2000824c 	.word	0x2000824c

08011160 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8011160:	b580      	push	{r7, lr}
 8011162:	b084      	sub	sp, #16
 8011164:	af00      	add	r7, sp, #0
 8011166:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8011168:	4b11      	ldr	r3, [pc, #68]	; (80111b0 <_sbrk+0x50>)
 801116a:	681b      	ldr	r3, [r3, #0]
 801116c:	2b00      	cmp	r3, #0
 801116e:	d102      	bne.n	8011176 <_sbrk+0x16>
		heap_end = &end;
 8011170:	4b0f      	ldr	r3, [pc, #60]	; (80111b0 <_sbrk+0x50>)
 8011172:	4a10      	ldr	r2, [pc, #64]	; (80111b4 <_sbrk+0x54>)
 8011174:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8011176:	4b0e      	ldr	r3, [pc, #56]	; (80111b0 <_sbrk+0x50>)
 8011178:	681b      	ldr	r3, [r3, #0]
 801117a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 801117c:	4b0c      	ldr	r3, [pc, #48]	; (80111b0 <_sbrk+0x50>)
 801117e:	681a      	ldr	r2, [r3, #0]
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	4413      	add	r3, r2
 8011184:	466a      	mov	r2, sp
 8011186:	4293      	cmp	r3, r2
 8011188:	d907      	bls.n	801119a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 801118a:	f000 f879 	bl	8011280 <__errno>
 801118e:	4602      	mov	r2, r0
 8011190:	230c      	movs	r3, #12
 8011192:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8011194:	f04f 33ff 	mov.w	r3, #4294967295
 8011198:	e006      	b.n	80111a8 <_sbrk+0x48>
	}

	heap_end += incr;
 801119a:	4b05      	ldr	r3, [pc, #20]	; (80111b0 <_sbrk+0x50>)
 801119c:	681a      	ldr	r2, [r3, #0]
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	4413      	add	r3, r2
 80111a2:	4a03      	ldr	r2, [pc, #12]	; (80111b0 <_sbrk+0x50>)
 80111a4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80111a6:	68fb      	ldr	r3, [r7, #12]
}
 80111a8:	4618      	mov	r0, r3
 80111aa:	3710      	adds	r7, #16
 80111ac:	46bd      	mov	sp, r7
 80111ae:	bd80      	pop	{r7, pc}
 80111b0:	20006854 	.word	0x20006854
 80111b4:	20008690 	.word	0x20008690

080111b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80111b8:	b480      	push	{r7}
 80111ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80111bc:	4b16      	ldr	r3, [pc, #88]	; (8011218 <SystemInit+0x60>)
 80111be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80111c2:	4a15      	ldr	r2, [pc, #84]	; (8011218 <SystemInit+0x60>)
 80111c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80111c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80111cc:	4b13      	ldr	r3, [pc, #76]	; (801121c <SystemInit+0x64>)
 80111ce:	681b      	ldr	r3, [r3, #0]
 80111d0:	4a12      	ldr	r2, [pc, #72]	; (801121c <SystemInit+0x64>)
 80111d2:	f043 0301 	orr.w	r3, r3, #1
 80111d6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80111d8:	4b10      	ldr	r3, [pc, #64]	; (801121c <SystemInit+0x64>)
 80111da:	2200      	movs	r2, #0
 80111dc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80111de:	4b0f      	ldr	r3, [pc, #60]	; (801121c <SystemInit+0x64>)
 80111e0:	681b      	ldr	r3, [r3, #0]
 80111e2:	4a0e      	ldr	r2, [pc, #56]	; (801121c <SystemInit+0x64>)
 80111e4:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80111e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80111ec:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80111ee:	4b0b      	ldr	r3, [pc, #44]	; (801121c <SystemInit+0x64>)
 80111f0:	4a0b      	ldr	r2, [pc, #44]	; (8011220 <SystemInit+0x68>)
 80111f2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80111f4:	4b09      	ldr	r3, [pc, #36]	; (801121c <SystemInit+0x64>)
 80111f6:	681b      	ldr	r3, [r3, #0]
 80111f8:	4a08      	ldr	r2, [pc, #32]	; (801121c <SystemInit+0x64>)
 80111fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80111fe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8011200:	4b06      	ldr	r3, [pc, #24]	; (801121c <SystemInit+0x64>)
 8011202:	2200      	movs	r2, #0
 8011204:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8011206:	4b04      	ldr	r3, [pc, #16]	; (8011218 <SystemInit+0x60>)
 8011208:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 801120c:	609a      	str	r2, [r3, #8]
#endif
}
 801120e:	bf00      	nop
 8011210:	46bd      	mov	sp, r7
 8011212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011216:	4770      	bx	lr
 8011218:	e000ed00 	.word	0xe000ed00
 801121c:	40023800 	.word	0x40023800
 8011220:	24003010 	.word	0x24003010

08011224 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8011224:	f8df d034 	ldr.w	sp, [pc, #52]	; 801125c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8011228:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 801122a:	e003      	b.n	8011234 <LoopCopyDataInit>

0801122c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 801122c:	4b0c      	ldr	r3, [pc, #48]	; (8011260 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 801122e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8011230:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8011232:	3104      	adds	r1, #4

08011234 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8011234:	480b      	ldr	r0, [pc, #44]	; (8011264 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8011236:	4b0c      	ldr	r3, [pc, #48]	; (8011268 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8011238:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 801123a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 801123c:	d3f6      	bcc.n	801122c <CopyDataInit>
  ldr  r2, =_sbss
 801123e:	4a0b      	ldr	r2, [pc, #44]	; (801126c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8011240:	e002      	b.n	8011248 <LoopFillZerobss>

08011242 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8011242:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8011244:	f842 3b04 	str.w	r3, [r2], #4

08011248 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8011248:	4b09      	ldr	r3, [pc, #36]	; (8011270 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 801124a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 801124c:	d3f9      	bcc.n	8011242 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 801124e:	f7ff ffb3 	bl	80111b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8011252:	f000 f81b 	bl	801128c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8011256:	f7fd ff07 	bl	800f068 <main>
  bx  lr    
 801125a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 801125c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8011260:	080275c8 	.word	0x080275c8
  ldr  r0, =_sdata
 8011264:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8011268:	20000228 	.word	0x20000228
  ldr  r2, =_sbss
 801126c:	20000228 	.word	0x20000228
  ldr  r3, = _ebss
 8011270:	20008690 	.word	0x20008690

08011274 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8011274:	e7fe      	b.n	8011274 <ADC_IRQHandler>

08011276 <atoi>:
 8011276:	220a      	movs	r2, #10
 8011278:	2100      	movs	r1, #0
 801127a:	f000 bfb1 	b.w	80121e0 <strtol>
	...

08011280 <__errno>:
 8011280:	4b01      	ldr	r3, [pc, #4]	; (8011288 <__errno+0x8>)
 8011282:	6818      	ldr	r0, [r3, #0]
 8011284:	4770      	bx	lr
 8011286:	bf00      	nop
 8011288:	20000054 	.word	0x20000054

0801128c <__libc_init_array>:
 801128c:	b570      	push	{r4, r5, r6, lr}
 801128e:	4e0d      	ldr	r6, [pc, #52]	; (80112c4 <__libc_init_array+0x38>)
 8011290:	4c0d      	ldr	r4, [pc, #52]	; (80112c8 <__libc_init_array+0x3c>)
 8011292:	1ba4      	subs	r4, r4, r6
 8011294:	10a4      	asrs	r4, r4, #2
 8011296:	2500      	movs	r5, #0
 8011298:	42a5      	cmp	r5, r4
 801129a:	d109      	bne.n	80112b0 <__libc_init_array+0x24>
 801129c:	4e0b      	ldr	r6, [pc, #44]	; (80112cc <__libc_init_array+0x40>)
 801129e:	4c0c      	ldr	r4, [pc, #48]	; (80112d0 <__libc_init_array+0x44>)
 80112a0:	f003 fbe4 	bl	8014a6c <_init>
 80112a4:	1ba4      	subs	r4, r4, r6
 80112a6:	10a4      	asrs	r4, r4, #2
 80112a8:	2500      	movs	r5, #0
 80112aa:	42a5      	cmp	r5, r4
 80112ac:	d105      	bne.n	80112ba <__libc_init_array+0x2e>
 80112ae:	bd70      	pop	{r4, r5, r6, pc}
 80112b0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80112b4:	4798      	blx	r3
 80112b6:	3501      	adds	r5, #1
 80112b8:	e7ee      	b.n	8011298 <__libc_init_array+0xc>
 80112ba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80112be:	4798      	blx	r3
 80112c0:	3501      	adds	r5, #1
 80112c2:	e7f2      	b.n	80112aa <__libc_init_array+0x1e>
 80112c4:	080275c0 	.word	0x080275c0
 80112c8:	080275c0 	.word	0x080275c0
 80112cc:	080275c0 	.word	0x080275c0
 80112d0:	080275c4 	.word	0x080275c4

080112d4 <__itoa>:
 80112d4:	1e93      	subs	r3, r2, #2
 80112d6:	2b22      	cmp	r3, #34	; 0x22
 80112d8:	b510      	push	{r4, lr}
 80112da:	460c      	mov	r4, r1
 80112dc:	d904      	bls.n	80112e8 <__itoa+0x14>
 80112de:	2300      	movs	r3, #0
 80112e0:	700b      	strb	r3, [r1, #0]
 80112e2:	461c      	mov	r4, r3
 80112e4:	4620      	mov	r0, r4
 80112e6:	bd10      	pop	{r4, pc}
 80112e8:	2a0a      	cmp	r2, #10
 80112ea:	d109      	bne.n	8011300 <__itoa+0x2c>
 80112ec:	2800      	cmp	r0, #0
 80112ee:	da07      	bge.n	8011300 <__itoa+0x2c>
 80112f0:	232d      	movs	r3, #45	; 0x2d
 80112f2:	700b      	strb	r3, [r1, #0]
 80112f4:	4240      	negs	r0, r0
 80112f6:	2101      	movs	r1, #1
 80112f8:	4421      	add	r1, r4
 80112fa:	f000 ff87 	bl	801220c <__utoa>
 80112fe:	e7f1      	b.n	80112e4 <__itoa+0x10>
 8011300:	2100      	movs	r1, #0
 8011302:	e7f9      	b.n	80112f8 <__itoa+0x24>

08011304 <itoa>:
 8011304:	f7ff bfe6 	b.w	80112d4 <__itoa>

08011308 <memcpy>:
 8011308:	b510      	push	{r4, lr}
 801130a:	1e43      	subs	r3, r0, #1
 801130c:	440a      	add	r2, r1
 801130e:	4291      	cmp	r1, r2
 8011310:	d100      	bne.n	8011314 <memcpy+0xc>
 8011312:	bd10      	pop	{r4, pc}
 8011314:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011318:	f803 4f01 	strb.w	r4, [r3, #1]!
 801131c:	e7f7      	b.n	801130e <memcpy+0x6>

0801131e <memset>:
 801131e:	4402      	add	r2, r0
 8011320:	4603      	mov	r3, r0
 8011322:	4293      	cmp	r3, r2
 8011324:	d100      	bne.n	8011328 <memset+0xa>
 8011326:	4770      	bx	lr
 8011328:	f803 1b01 	strb.w	r1, [r3], #1
 801132c:	e7f9      	b.n	8011322 <memset+0x4>
	...

08011330 <siprintf>:
 8011330:	b40e      	push	{r1, r2, r3}
 8011332:	b500      	push	{lr}
 8011334:	b09c      	sub	sp, #112	; 0x70
 8011336:	ab1d      	add	r3, sp, #116	; 0x74
 8011338:	9002      	str	r0, [sp, #8]
 801133a:	9006      	str	r0, [sp, #24]
 801133c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011340:	4809      	ldr	r0, [pc, #36]	; (8011368 <siprintf+0x38>)
 8011342:	9107      	str	r1, [sp, #28]
 8011344:	9104      	str	r1, [sp, #16]
 8011346:	4909      	ldr	r1, [pc, #36]	; (801136c <siprintf+0x3c>)
 8011348:	f853 2b04 	ldr.w	r2, [r3], #4
 801134c:	9105      	str	r1, [sp, #20]
 801134e:	6800      	ldr	r0, [r0, #0]
 8011350:	9301      	str	r3, [sp, #4]
 8011352:	a902      	add	r1, sp, #8
 8011354:	f001 ff96 	bl	8013284 <_svfiprintf_r>
 8011358:	9b02      	ldr	r3, [sp, #8]
 801135a:	2200      	movs	r2, #0
 801135c:	701a      	strb	r2, [r3, #0]
 801135e:	b01c      	add	sp, #112	; 0x70
 8011360:	f85d eb04 	ldr.w	lr, [sp], #4
 8011364:	b003      	add	sp, #12
 8011366:	4770      	bx	lr
 8011368:	20000054 	.word	0x20000054
 801136c:	ffff0208 	.word	0xffff0208

08011370 <strchr>:
 8011370:	b2c9      	uxtb	r1, r1
 8011372:	4603      	mov	r3, r0
 8011374:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011378:	b11a      	cbz	r2, 8011382 <strchr+0x12>
 801137a:	428a      	cmp	r2, r1
 801137c:	d1f9      	bne.n	8011372 <strchr+0x2>
 801137e:	4618      	mov	r0, r3
 8011380:	4770      	bx	lr
 8011382:	2900      	cmp	r1, #0
 8011384:	bf18      	it	ne
 8011386:	2300      	movne	r3, #0
 8011388:	e7f9      	b.n	801137e <strchr+0xe>

0801138a <strcpy>:
 801138a:	4603      	mov	r3, r0
 801138c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011390:	f803 2b01 	strb.w	r2, [r3], #1
 8011394:	2a00      	cmp	r2, #0
 8011396:	d1f9      	bne.n	801138c <strcpy+0x2>
 8011398:	4770      	bx	lr

0801139a <strncmp>:
 801139a:	b510      	push	{r4, lr}
 801139c:	b16a      	cbz	r2, 80113ba <strncmp+0x20>
 801139e:	3901      	subs	r1, #1
 80113a0:	1884      	adds	r4, r0, r2
 80113a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80113a6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80113aa:	4293      	cmp	r3, r2
 80113ac:	d103      	bne.n	80113b6 <strncmp+0x1c>
 80113ae:	42a0      	cmp	r0, r4
 80113b0:	d001      	beq.n	80113b6 <strncmp+0x1c>
 80113b2:	2b00      	cmp	r3, #0
 80113b4:	d1f5      	bne.n	80113a2 <strncmp+0x8>
 80113b6:	1a98      	subs	r0, r3, r2
 80113b8:	bd10      	pop	{r4, pc}
 80113ba:	4610      	mov	r0, r2
 80113bc:	e7fc      	b.n	80113b8 <strncmp+0x1e>

080113be <strncpy>:
 80113be:	b570      	push	{r4, r5, r6, lr}
 80113c0:	3901      	subs	r1, #1
 80113c2:	4604      	mov	r4, r0
 80113c4:	b902      	cbnz	r2, 80113c8 <strncpy+0xa>
 80113c6:	bd70      	pop	{r4, r5, r6, pc}
 80113c8:	4623      	mov	r3, r4
 80113ca:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 80113ce:	f803 5b01 	strb.w	r5, [r3], #1
 80113d2:	1e56      	subs	r6, r2, #1
 80113d4:	b92d      	cbnz	r5, 80113e2 <strncpy+0x24>
 80113d6:	4414      	add	r4, r2
 80113d8:	42a3      	cmp	r3, r4
 80113da:	d0f4      	beq.n	80113c6 <strncpy+0x8>
 80113dc:	f803 5b01 	strb.w	r5, [r3], #1
 80113e0:	e7fa      	b.n	80113d8 <strncpy+0x1a>
 80113e2:	461c      	mov	r4, r3
 80113e4:	4632      	mov	r2, r6
 80113e6:	e7ed      	b.n	80113c4 <strncpy+0x6>

080113e8 <strstr>:
 80113e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80113ea:	7803      	ldrb	r3, [r0, #0]
 80113ec:	b17b      	cbz	r3, 801140e <strstr+0x26>
 80113ee:	4604      	mov	r4, r0
 80113f0:	7823      	ldrb	r3, [r4, #0]
 80113f2:	4620      	mov	r0, r4
 80113f4:	1c66      	adds	r6, r4, #1
 80113f6:	b17b      	cbz	r3, 8011418 <strstr+0x30>
 80113f8:	1e4a      	subs	r2, r1, #1
 80113fa:	1e63      	subs	r3, r4, #1
 80113fc:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8011400:	b14d      	cbz	r5, 8011416 <strstr+0x2e>
 8011402:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8011406:	42af      	cmp	r7, r5
 8011408:	4634      	mov	r4, r6
 801140a:	d0f7      	beq.n	80113fc <strstr+0x14>
 801140c:	e7f0      	b.n	80113f0 <strstr+0x8>
 801140e:	780b      	ldrb	r3, [r1, #0]
 8011410:	2b00      	cmp	r3, #0
 8011412:	bf18      	it	ne
 8011414:	2000      	movne	r0, #0
 8011416:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011418:	4618      	mov	r0, r3
 801141a:	e7fc      	b.n	8011416 <strstr+0x2e>

0801141c <sulp>:
 801141c:	b570      	push	{r4, r5, r6, lr}
 801141e:	4604      	mov	r4, r0
 8011420:	460d      	mov	r5, r1
 8011422:	ec45 4b10 	vmov	d0, r4, r5
 8011426:	4616      	mov	r6, r2
 8011428:	f001 fd36 	bl	8012e98 <__ulp>
 801142c:	ec51 0b10 	vmov	r0, r1, d0
 8011430:	b17e      	cbz	r6, 8011452 <sulp+0x36>
 8011432:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8011436:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801143a:	2b00      	cmp	r3, #0
 801143c:	dd09      	ble.n	8011452 <sulp+0x36>
 801143e:	051b      	lsls	r3, r3, #20
 8011440:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8011444:	2400      	movs	r4, #0
 8011446:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801144a:	4622      	mov	r2, r4
 801144c:	462b      	mov	r3, r5
 801144e:	f7ef f8e3 	bl	8000618 <__aeabi_dmul>
 8011452:	bd70      	pop	{r4, r5, r6, pc}
 8011454:	0000      	movs	r0, r0
	...

08011458 <_strtod_l>:
 8011458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801145c:	461f      	mov	r7, r3
 801145e:	b0a1      	sub	sp, #132	; 0x84
 8011460:	2300      	movs	r3, #0
 8011462:	4681      	mov	r9, r0
 8011464:	4638      	mov	r0, r7
 8011466:	460e      	mov	r6, r1
 8011468:	9217      	str	r2, [sp, #92]	; 0x5c
 801146a:	931c      	str	r3, [sp, #112]	; 0x70
 801146c:	f001 fa35 	bl	80128da <__localeconv_l>
 8011470:	4680      	mov	r8, r0
 8011472:	6800      	ldr	r0, [r0, #0]
 8011474:	f7ee feb6 	bl	80001e4 <strlen>
 8011478:	f04f 0a00 	mov.w	sl, #0
 801147c:	4604      	mov	r4, r0
 801147e:	f04f 0b00 	mov.w	fp, #0
 8011482:	961b      	str	r6, [sp, #108]	; 0x6c
 8011484:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011486:	781a      	ldrb	r2, [r3, #0]
 8011488:	2a0d      	cmp	r2, #13
 801148a:	d832      	bhi.n	80114f2 <_strtod_l+0x9a>
 801148c:	2a09      	cmp	r2, #9
 801148e:	d236      	bcs.n	80114fe <_strtod_l+0xa6>
 8011490:	2a00      	cmp	r2, #0
 8011492:	d03e      	beq.n	8011512 <_strtod_l+0xba>
 8011494:	2300      	movs	r3, #0
 8011496:	930d      	str	r3, [sp, #52]	; 0x34
 8011498:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 801149a:	782b      	ldrb	r3, [r5, #0]
 801149c:	2b30      	cmp	r3, #48	; 0x30
 801149e:	f040 80ac 	bne.w	80115fa <_strtod_l+0x1a2>
 80114a2:	786b      	ldrb	r3, [r5, #1]
 80114a4:	2b58      	cmp	r3, #88	; 0x58
 80114a6:	d001      	beq.n	80114ac <_strtod_l+0x54>
 80114a8:	2b78      	cmp	r3, #120	; 0x78
 80114aa:	d167      	bne.n	801157c <_strtod_l+0x124>
 80114ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80114ae:	9301      	str	r3, [sp, #4]
 80114b0:	ab1c      	add	r3, sp, #112	; 0x70
 80114b2:	9300      	str	r3, [sp, #0]
 80114b4:	9702      	str	r7, [sp, #8]
 80114b6:	ab1d      	add	r3, sp, #116	; 0x74
 80114b8:	4a88      	ldr	r2, [pc, #544]	; (80116dc <_strtod_l+0x284>)
 80114ba:	a91b      	add	r1, sp, #108	; 0x6c
 80114bc:	4648      	mov	r0, r9
 80114be:	f000 ff32 	bl	8012326 <__gethex>
 80114c2:	f010 0407 	ands.w	r4, r0, #7
 80114c6:	4606      	mov	r6, r0
 80114c8:	d005      	beq.n	80114d6 <_strtod_l+0x7e>
 80114ca:	2c06      	cmp	r4, #6
 80114cc:	d12b      	bne.n	8011526 <_strtod_l+0xce>
 80114ce:	3501      	adds	r5, #1
 80114d0:	2300      	movs	r3, #0
 80114d2:	951b      	str	r5, [sp, #108]	; 0x6c
 80114d4:	930d      	str	r3, [sp, #52]	; 0x34
 80114d6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80114d8:	2b00      	cmp	r3, #0
 80114da:	f040 859a 	bne.w	8012012 <_strtod_l+0xbba>
 80114de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80114e0:	b1e3      	cbz	r3, 801151c <_strtod_l+0xc4>
 80114e2:	4652      	mov	r2, sl
 80114e4:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80114e8:	ec43 2b10 	vmov	d0, r2, r3
 80114ec:	b021      	add	sp, #132	; 0x84
 80114ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80114f2:	2a2b      	cmp	r2, #43	; 0x2b
 80114f4:	d015      	beq.n	8011522 <_strtod_l+0xca>
 80114f6:	2a2d      	cmp	r2, #45	; 0x2d
 80114f8:	d004      	beq.n	8011504 <_strtod_l+0xac>
 80114fa:	2a20      	cmp	r2, #32
 80114fc:	d1ca      	bne.n	8011494 <_strtod_l+0x3c>
 80114fe:	3301      	adds	r3, #1
 8011500:	931b      	str	r3, [sp, #108]	; 0x6c
 8011502:	e7bf      	b.n	8011484 <_strtod_l+0x2c>
 8011504:	2201      	movs	r2, #1
 8011506:	920d      	str	r2, [sp, #52]	; 0x34
 8011508:	1c5a      	adds	r2, r3, #1
 801150a:	921b      	str	r2, [sp, #108]	; 0x6c
 801150c:	785b      	ldrb	r3, [r3, #1]
 801150e:	2b00      	cmp	r3, #0
 8011510:	d1c2      	bne.n	8011498 <_strtod_l+0x40>
 8011512:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011514:	961b      	str	r6, [sp, #108]	; 0x6c
 8011516:	2b00      	cmp	r3, #0
 8011518:	f040 8579 	bne.w	801200e <_strtod_l+0xbb6>
 801151c:	4652      	mov	r2, sl
 801151e:	465b      	mov	r3, fp
 8011520:	e7e2      	b.n	80114e8 <_strtod_l+0x90>
 8011522:	2200      	movs	r2, #0
 8011524:	e7ef      	b.n	8011506 <_strtod_l+0xae>
 8011526:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8011528:	b13a      	cbz	r2, 801153a <_strtod_l+0xe2>
 801152a:	2135      	movs	r1, #53	; 0x35
 801152c:	a81e      	add	r0, sp, #120	; 0x78
 801152e:	f001 fdab 	bl	8013088 <__copybits>
 8011532:	991c      	ldr	r1, [sp, #112]	; 0x70
 8011534:	4648      	mov	r0, r9
 8011536:	f001 fa18 	bl	801296a <_Bfree>
 801153a:	3c01      	subs	r4, #1
 801153c:	2c04      	cmp	r4, #4
 801153e:	d806      	bhi.n	801154e <_strtod_l+0xf6>
 8011540:	e8df f004 	tbb	[pc, r4]
 8011544:	1714030a 	.word	0x1714030a
 8011548:	0a          	.byte	0x0a
 8011549:	00          	.byte	0x00
 801154a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 801154e:	0730      	lsls	r0, r6, #28
 8011550:	d5c1      	bpl.n	80114d6 <_strtod_l+0x7e>
 8011552:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8011556:	e7be      	b.n	80114d6 <_strtod_l+0x7e>
 8011558:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 801155c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801155e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8011562:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8011566:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801156a:	e7f0      	b.n	801154e <_strtod_l+0xf6>
 801156c:	f8df b170 	ldr.w	fp, [pc, #368]	; 80116e0 <_strtod_l+0x288>
 8011570:	e7ed      	b.n	801154e <_strtod_l+0xf6>
 8011572:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8011576:	f04f 3aff 	mov.w	sl, #4294967295
 801157a:	e7e8      	b.n	801154e <_strtod_l+0xf6>
 801157c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801157e:	1c5a      	adds	r2, r3, #1
 8011580:	921b      	str	r2, [sp, #108]	; 0x6c
 8011582:	785b      	ldrb	r3, [r3, #1]
 8011584:	2b30      	cmp	r3, #48	; 0x30
 8011586:	d0f9      	beq.n	801157c <_strtod_l+0x124>
 8011588:	2b00      	cmp	r3, #0
 801158a:	d0a4      	beq.n	80114d6 <_strtod_l+0x7e>
 801158c:	2301      	movs	r3, #1
 801158e:	2500      	movs	r5, #0
 8011590:	9306      	str	r3, [sp, #24]
 8011592:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011594:	9308      	str	r3, [sp, #32]
 8011596:	9507      	str	r5, [sp, #28]
 8011598:	9505      	str	r5, [sp, #20]
 801159a:	220a      	movs	r2, #10
 801159c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801159e:	7807      	ldrb	r7, [r0, #0]
 80115a0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80115a4:	b2d9      	uxtb	r1, r3
 80115a6:	2909      	cmp	r1, #9
 80115a8:	d929      	bls.n	80115fe <_strtod_l+0x1a6>
 80115aa:	4622      	mov	r2, r4
 80115ac:	f8d8 1000 	ldr.w	r1, [r8]
 80115b0:	f7ff fef3 	bl	801139a <strncmp>
 80115b4:	2800      	cmp	r0, #0
 80115b6:	d031      	beq.n	801161c <_strtod_l+0x1c4>
 80115b8:	2000      	movs	r0, #0
 80115ba:	9c05      	ldr	r4, [sp, #20]
 80115bc:	9004      	str	r0, [sp, #16]
 80115be:	463b      	mov	r3, r7
 80115c0:	4602      	mov	r2, r0
 80115c2:	2b65      	cmp	r3, #101	; 0x65
 80115c4:	d001      	beq.n	80115ca <_strtod_l+0x172>
 80115c6:	2b45      	cmp	r3, #69	; 0x45
 80115c8:	d114      	bne.n	80115f4 <_strtod_l+0x19c>
 80115ca:	b924      	cbnz	r4, 80115d6 <_strtod_l+0x17e>
 80115cc:	b910      	cbnz	r0, 80115d4 <_strtod_l+0x17c>
 80115ce:	9b06      	ldr	r3, [sp, #24]
 80115d0:	2b00      	cmp	r3, #0
 80115d2:	d09e      	beq.n	8011512 <_strtod_l+0xba>
 80115d4:	2400      	movs	r4, #0
 80115d6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80115d8:	1c73      	adds	r3, r6, #1
 80115da:	931b      	str	r3, [sp, #108]	; 0x6c
 80115dc:	7873      	ldrb	r3, [r6, #1]
 80115de:	2b2b      	cmp	r3, #43	; 0x2b
 80115e0:	d078      	beq.n	80116d4 <_strtod_l+0x27c>
 80115e2:	2b2d      	cmp	r3, #45	; 0x2d
 80115e4:	d070      	beq.n	80116c8 <_strtod_l+0x270>
 80115e6:	f04f 0c00 	mov.w	ip, #0
 80115ea:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 80115ee:	2f09      	cmp	r7, #9
 80115f0:	d97c      	bls.n	80116ec <_strtod_l+0x294>
 80115f2:	961b      	str	r6, [sp, #108]	; 0x6c
 80115f4:	f04f 0e00 	mov.w	lr, #0
 80115f8:	e09a      	b.n	8011730 <_strtod_l+0x2d8>
 80115fa:	2300      	movs	r3, #0
 80115fc:	e7c7      	b.n	801158e <_strtod_l+0x136>
 80115fe:	9905      	ldr	r1, [sp, #20]
 8011600:	2908      	cmp	r1, #8
 8011602:	bfdd      	ittte	le
 8011604:	9907      	ldrle	r1, [sp, #28]
 8011606:	fb02 3301 	mlale	r3, r2, r1, r3
 801160a:	9307      	strle	r3, [sp, #28]
 801160c:	fb02 3505 	mlagt	r5, r2, r5, r3
 8011610:	9b05      	ldr	r3, [sp, #20]
 8011612:	3001      	adds	r0, #1
 8011614:	3301      	adds	r3, #1
 8011616:	9305      	str	r3, [sp, #20]
 8011618:	901b      	str	r0, [sp, #108]	; 0x6c
 801161a:	e7bf      	b.n	801159c <_strtod_l+0x144>
 801161c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801161e:	191a      	adds	r2, r3, r4
 8011620:	921b      	str	r2, [sp, #108]	; 0x6c
 8011622:	9a05      	ldr	r2, [sp, #20]
 8011624:	5d1b      	ldrb	r3, [r3, r4]
 8011626:	2a00      	cmp	r2, #0
 8011628:	d037      	beq.n	801169a <_strtod_l+0x242>
 801162a:	9c05      	ldr	r4, [sp, #20]
 801162c:	4602      	mov	r2, r0
 801162e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8011632:	2909      	cmp	r1, #9
 8011634:	d913      	bls.n	801165e <_strtod_l+0x206>
 8011636:	2101      	movs	r1, #1
 8011638:	9104      	str	r1, [sp, #16]
 801163a:	e7c2      	b.n	80115c2 <_strtod_l+0x16a>
 801163c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801163e:	1c5a      	adds	r2, r3, #1
 8011640:	921b      	str	r2, [sp, #108]	; 0x6c
 8011642:	785b      	ldrb	r3, [r3, #1]
 8011644:	3001      	adds	r0, #1
 8011646:	2b30      	cmp	r3, #48	; 0x30
 8011648:	d0f8      	beq.n	801163c <_strtod_l+0x1e4>
 801164a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801164e:	2a08      	cmp	r2, #8
 8011650:	f200 84e4 	bhi.w	801201c <_strtod_l+0xbc4>
 8011654:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8011656:	9208      	str	r2, [sp, #32]
 8011658:	4602      	mov	r2, r0
 801165a:	2000      	movs	r0, #0
 801165c:	4604      	mov	r4, r0
 801165e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8011662:	f100 0101 	add.w	r1, r0, #1
 8011666:	d012      	beq.n	801168e <_strtod_l+0x236>
 8011668:	440a      	add	r2, r1
 801166a:	eb00 0c04 	add.w	ip, r0, r4
 801166e:	4621      	mov	r1, r4
 8011670:	270a      	movs	r7, #10
 8011672:	458c      	cmp	ip, r1
 8011674:	d113      	bne.n	801169e <_strtod_l+0x246>
 8011676:	1821      	adds	r1, r4, r0
 8011678:	2908      	cmp	r1, #8
 801167a:	f104 0401 	add.w	r4, r4, #1
 801167e:	4404      	add	r4, r0
 8011680:	dc19      	bgt.n	80116b6 <_strtod_l+0x25e>
 8011682:	9b07      	ldr	r3, [sp, #28]
 8011684:	210a      	movs	r1, #10
 8011686:	fb01 e303 	mla	r3, r1, r3, lr
 801168a:	9307      	str	r3, [sp, #28]
 801168c:	2100      	movs	r1, #0
 801168e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011690:	1c58      	adds	r0, r3, #1
 8011692:	901b      	str	r0, [sp, #108]	; 0x6c
 8011694:	785b      	ldrb	r3, [r3, #1]
 8011696:	4608      	mov	r0, r1
 8011698:	e7c9      	b.n	801162e <_strtod_l+0x1d6>
 801169a:	9805      	ldr	r0, [sp, #20]
 801169c:	e7d3      	b.n	8011646 <_strtod_l+0x1ee>
 801169e:	2908      	cmp	r1, #8
 80116a0:	f101 0101 	add.w	r1, r1, #1
 80116a4:	dc03      	bgt.n	80116ae <_strtod_l+0x256>
 80116a6:	9b07      	ldr	r3, [sp, #28]
 80116a8:	437b      	muls	r3, r7
 80116aa:	9307      	str	r3, [sp, #28]
 80116ac:	e7e1      	b.n	8011672 <_strtod_l+0x21a>
 80116ae:	2910      	cmp	r1, #16
 80116b0:	bfd8      	it	le
 80116b2:	437d      	mulle	r5, r7
 80116b4:	e7dd      	b.n	8011672 <_strtod_l+0x21a>
 80116b6:	2c10      	cmp	r4, #16
 80116b8:	bfdc      	itt	le
 80116ba:	210a      	movle	r1, #10
 80116bc:	fb01 e505 	mlale	r5, r1, r5, lr
 80116c0:	e7e4      	b.n	801168c <_strtod_l+0x234>
 80116c2:	2301      	movs	r3, #1
 80116c4:	9304      	str	r3, [sp, #16]
 80116c6:	e781      	b.n	80115cc <_strtod_l+0x174>
 80116c8:	f04f 0c01 	mov.w	ip, #1
 80116cc:	1cb3      	adds	r3, r6, #2
 80116ce:	931b      	str	r3, [sp, #108]	; 0x6c
 80116d0:	78b3      	ldrb	r3, [r6, #2]
 80116d2:	e78a      	b.n	80115ea <_strtod_l+0x192>
 80116d4:	f04f 0c00 	mov.w	ip, #0
 80116d8:	e7f8      	b.n	80116cc <_strtod_l+0x274>
 80116da:	bf00      	nop
 80116dc:	080272b4 	.word	0x080272b4
 80116e0:	7ff00000 	.word	0x7ff00000
 80116e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80116e6:	1c5f      	adds	r7, r3, #1
 80116e8:	971b      	str	r7, [sp, #108]	; 0x6c
 80116ea:	785b      	ldrb	r3, [r3, #1]
 80116ec:	2b30      	cmp	r3, #48	; 0x30
 80116ee:	d0f9      	beq.n	80116e4 <_strtod_l+0x28c>
 80116f0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80116f4:	2f08      	cmp	r7, #8
 80116f6:	f63f af7d 	bhi.w	80115f4 <_strtod_l+0x19c>
 80116fa:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80116fe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011700:	930a      	str	r3, [sp, #40]	; 0x28
 8011702:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011704:	1c5f      	adds	r7, r3, #1
 8011706:	971b      	str	r7, [sp, #108]	; 0x6c
 8011708:	785b      	ldrb	r3, [r3, #1]
 801170a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 801170e:	f1b8 0f09 	cmp.w	r8, #9
 8011712:	d937      	bls.n	8011784 <_strtod_l+0x32c>
 8011714:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011716:	1a7f      	subs	r7, r7, r1
 8011718:	2f08      	cmp	r7, #8
 801171a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 801171e:	dc37      	bgt.n	8011790 <_strtod_l+0x338>
 8011720:	45be      	cmp	lr, r7
 8011722:	bfa8      	it	ge
 8011724:	46be      	movge	lr, r7
 8011726:	f1bc 0f00 	cmp.w	ip, #0
 801172a:	d001      	beq.n	8011730 <_strtod_l+0x2d8>
 801172c:	f1ce 0e00 	rsb	lr, lr, #0
 8011730:	2c00      	cmp	r4, #0
 8011732:	d151      	bne.n	80117d8 <_strtod_l+0x380>
 8011734:	2800      	cmp	r0, #0
 8011736:	f47f aece 	bne.w	80114d6 <_strtod_l+0x7e>
 801173a:	9a06      	ldr	r2, [sp, #24]
 801173c:	2a00      	cmp	r2, #0
 801173e:	f47f aeca 	bne.w	80114d6 <_strtod_l+0x7e>
 8011742:	9a04      	ldr	r2, [sp, #16]
 8011744:	2a00      	cmp	r2, #0
 8011746:	f47f aee4 	bne.w	8011512 <_strtod_l+0xba>
 801174a:	2b4e      	cmp	r3, #78	; 0x4e
 801174c:	d027      	beq.n	801179e <_strtod_l+0x346>
 801174e:	dc21      	bgt.n	8011794 <_strtod_l+0x33c>
 8011750:	2b49      	cmp	r3, #73	; 0x49
 8011752:	f47f aede 	bne.w	8011512 <_strtod_l+0xba>
 8011756:	49a0      	ldr	r1, [pc, #640]	; (80119d8 <_strtod_l+0x580>)
 8011758:	a81b      	add	r0, sp, #108	; 0x6c
 801175a:	f001 f817 	bl	801278c <__match>
 801175e:	2800      	cmp	r0, #0
 8011760:	f43f aed7 	beq.w	8011512 <_strtod_l+0xba>
 8011764:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011766:	499d      	ldr	r1, [pc, #628]	; (80119dc <_strtod_l+0x584>)
 8011768:	3b01      	subs	r3, #1
 801176a:	a81b      	add	r0, sp, #108	; 0x6c
 801176c:	931b      	str	r3, [sp, #108]	; 0x6c
 801176e:	f001 f80d 	bl	801278c <__match>
 8011772:	b910      	cbnz	r0, 801177a <_strtod_l+0x322>
 8011774:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011776:	3301      	adds	r3, #1
 8011778:	931b      	str	r3, [sp, #108]	; 0x6c
 801177a:	f8df b274 	ldr.w	fp, [pc, #628]	; 80119f0 <_strtod_l+0x598>
 801177e:	f04f 0a00 	mov.w	sl, #0
 8011782:	e6a8      	b.n	80114d6 <_strtod_l+0x7e>
 8011784:	210a      	movs	r1, #10
 8011786:	fb01 3e0e 	mla	lr, r1, lr, r3
 801178a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801178e:	e7b8      	b.n	8011702 <_strtod_l+0x2aa>
 8011790:	46be      	mov	lr, r7
 8011792:	e7c8      	b.n	8011726 <_strtod_l+0x2ce>
 8011794:	2b69      	cmp	r3, #105	; 0x69
 8011796:	d0de      	beq.n	8011756 <_strtod_l+0x2fe>
 8011798:	2b6e      	cmp	r3, #110	; 0x6e
 801179a:	f47f aeba 	bne.w	8011512 <_strtod_l+0xba>
 801179e:	4990      	ldr	r1, [pc, #576]	; (80119e0 <_strtod_l+0x588>)
 80117a0:	a81b      	add	r0, sp, #108	; 0x6c
 80117a2:	f000 fff3 	bl	801278c <__match>
 80117a6:	2800      	cmp	r0, #0
 80117a8:	f43f aeb3 	beq.w	8011512 <_strtod_l+0xba>
 80117ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80117ae:	781b      	ldrb	r3, [r3, #0]
 80117b0:	2b28      	cmp	r3, #40	; 0x28
 80117b2:	d10e      	bne.n	80117d2 <_strtod_l+0x37a>
 80117b4:	aa1e      	add	r2, sp, #120	; 0x78
 80117b6:	498b      	ldr	r1, [pc, #556]	; (80119e4 <_strtod_l+0x58c>)
 80117b8:	a81b      	add	r0, sp, #108	; 0x6c
 80117ba:	f000 fffb 	bl	80127b4 <__hexnan>
 80117be:	2805      	cmp	r0, #5
 80117c0:	d107      	bne.n	80117d2 <_strtod_l+0x37a>
 80117c2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80117c4:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 80117c8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80117cc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80117d0:	e681      	b.n	80114d6 <_strtod_l+0x7e>
 80117d2:	f8df b224 	ldr.w	fp, [pc, #548]	; 80119f8 <_strtod_l+0x5a0>
 80117d6:	e7d2      	b.n	801177e <_strtod_l+0x326>
 80117d8:	ebae 0302 	sub.w	r3, lr, r2
 80117dc:	9306      	str	r3, [sp, #24]
 80117de:	9b05      	ldr	r3, [sp, #20]
 80117e0:	9807      	ldr	r0, [sp, #28]
 80117e2:	2b00      	cmp	r3, #0
 80117e4:	bf08      	it	eq
 80117e6:	4623      	moveq	r3, r4
 80117e8:	2c10      	cmp	r4, #16
 80117ea:	9305      	str	r3, [sp, #20]
 80117ec:	46a0      	mov	r8, r4
 80117ee:	bfa8      	it	ge
 80117f0:	f04f 0810 	movge.w	r8, #16
 80117f4:	f7ee fe96 	bl	8000524 <__aeabi_ui2d>
 80117f8:	2c09      	cmp	r4, #9
 80117fa:	4682      	mov	sl, r0
 80117fc:	468b      	mov	fp, r1
 80117fe:	dc13      	bgt.n	8011828 <_strtod_l+0x3d0>
 8011800:	9b06      	ldr	r3, [sp, #24]
 8011802:	2b00      	cmp	r3, #0
 8011804:	f43f ae67 	beq.w	80114d6 <_strtod_l+0x7e>
 8011808:	9b06      	ldr	r3, [sp, #24]
 801180a:	dd7a      	ble.n	8011902 <_strtod_l+0x4aa>
 801180c:	2b16      	cmp	r3, #22
 801180e:	dc61      	bgt.n	80118d4 <_strtod_l+0x47c>
 8011810:	4a75      	ldr	r2, [pc, #468]	; (80119e8 <_strtod_l+0x590>)
 8011812:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8011816:	e9de 0100 	ldrd	r0, r1, [lr]
 801181a:	4652      	mov	r2, sl
 801181c:	465b      	mov	r3, fp
 801181e:	f7ee fefb 	bl	8000618 <__aeabi_dmul>
 8011822:	4682      	mov	sl, r0
 8011824:	468b      	mov	fp, r1
 8011826:	e656      	b.n	80114d6 <_strtod_l+0x7e>
 8011828:	4b6f      	ldr	r3, [pc, #444]	; (80119e8 <_strtod_l+0x590>)
 801182a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801182e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8011832:	f7ee fef1 	bl	8000618 <__aeabi_dmul>
 8011836:	4606      	mov	r6, r0
 8011838:	4628      	mov	r0, r5
 801183a:	460f      	mov	r7, r1
 801183c:	f7ee fe72 	bl	8000524 <__aeabi_ui2d>
 8011840:	4602      	mov	r2, r0
 8011842:	460b      	mov	r3, r1
 8011844:	4630      	mov	r0, r6
 8011846:	4639      	mov	r1, r7
 8011848:	f7ee fd30 	bl	80002ac <__adddf3>
 801184c:	2c0f      	cmp	r4, #15
 801184e:	4682      	mov	sl, r0
 8011850:	468b      	mov	fp, r1
 8011852:	ddd5      	ble.n	8011800 <_strtod_l+0x3a8>
 8011854:	9b06      	ldr	r3, [sp, #24]
 8011856:	eba4 0808 	sub.w	r8, r4, r8
 801185a:	4498      	add	r8, r3
 801185c:	f1b8 0f00 	cmp.w	r8, #0
 8011860:	f340 8096 	ble.w	8011990 <_strtod_l+0x538>
 8011864:	f018 030f 	ands.w	r3, r8, #15
 8011868:	d00a      	beq.n	8011880 <_strtod_l+0x428>
 801186a:	495f      	ldr	r1, [pc, #380]	; (80119e8 <_strtod_l+0x590>)
 801186c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011870:	4652      	mov	r2, sl
 8011872:	465b      	mov	r3, fp
 8011874:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011878:	f7ee fece 	bl	8000618 <__aeabi_dmul>
 801187c:	4682      	mov	sl, r0
 801187e:	468b      	mov	fp, r1
 8011880:	f038 080f 	bics.w	r8, r8, #15
 8011884:	d073      	beq.n	801196e <_strtod_l+0x516>
 8011886:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801188a:	dd47      	ble.n	801191c <_strtod_l+0x4c4>
 801188c:	2400      	movs	r4, #0
 801188e:	46a0      	mov	r8, r4
 8011890:	9407      	str	r4, [sp, #28]
 8011892:	9405      	str	r4, [sp, #20]
 8011894:	2322      	movs	r3, #34	; 0x22
 8011896:	f8df b158 	ldr.w	fp, [pc, #344]	; 80119f0 <_strtod_l+0x598>
 801189a:	f8c9 3000 	str.w	r3, [r9]
 801189e:	f04f 0a00 	mov.w	sl, #0
 80118a2:	9b07      	ldr	r3, [sp, #28]
 80118a4:	2b00      	cmp	r3, #0
 80118a6:	f43f ae16 	beq.w	80114d6 <_strtod_l+0x7e>
 80118aa:	991c      	ldr	r1, [sp, #112]	; 0x70
 80118ac:	4648      	mov	r0, r9
 80118ae:	f001 f85c 	bl	801296a <_Bfree>
 80118b2:	9905      	ldr	r1, [sp, #20]
 80118b4:	4648      	mov	r0, r9
 80118b6:	f001 f858 	bl	801296a <_Bfree>
 80118ba:	4641      	mov	r1, r8
 80118bc:	4648      	mov	r0, r9
 80118be:	f001 f854 	bl	801296a <_Bfree>
 80118c2:	9907      	ldr	r1, [sp, #28]
 80118c4:	4648      	mov	r0, r9
 80118c6:	f001 f850 	bl	801296a <_Bfree>
 80118ca:	4621      	mov	r1, r4
 80118cc:	4648      	mov	r0, r9
 80118ce:	f001 f84c 	bl	801296a <_Bfree>
 80118d2:	e600      	b.n	80114d6 <_strtod_l+0x7e>
 80118d4:	9a06      	ldr	r2, [sp, #24]
 80118d6:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80118da:	4293      	cmp	r3, r2
 80118dc:	dbba      	blt.n	8011854 <_strtod_l+0x3fc>
 80118de:	4d42      	ldr	r5, [pc, #264]	; (80119e8 <_strtod_l+0x590>)
 80118e0:	f1c4 040f 	rsb	r4, r4, #15
 80118e4:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80118e8:	4652      	mov	r2, sl
 80118ea:	465b      	mov	r3, fp
 80118ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80118f0:	f7ee fe92 	bl	8000618 <__aeabi_dmul>
 80118f4:	9b06      	ldr	r3, [sp, #24]
 80118f6:	1b1c      	subs	r4, r3, r4
 80118f8:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80118fc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011900:	e78d      	b.n	801181e <_strtod_l+0x3c6>
 8011902:	f113 0f16 	cmn.w	r3, #22
 8011906:	dba5      	blt.n	8011854 <_strtod_l+0x3fc>
 8011908:	4a37      	ldr	r2, [pc, #220]	; (80119e8 <_strtod_l+0x590>)
 801190a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 801190e:	e9d2 2300 	ldrd	r2, r3, [r2]
 8011912:	4650      	mov	r0, sl
 8011914:	4659      	mov	r1, fp
 8011916:	f7ee ffa9 	bl	800086c <__aeabi_ddiv>
 801191a:	e782      	b.n	8011822 <_strtod_l+0x3ca>
 801191c:	2300      	movs	r3, #0
 801191e:	4e33      	ldr	r6, [pc, #204]	; (80119ec <_strtod_l+0x594>)
 8011920:	ea4f 1828 	mov.w	r8, r8, asr #4
 8011924:	4650      	mov	r0, sl
 8011926:	4659      	mov	r1, fp
 8011928:	461d      	mov	r5, r3
 801192a:	f1b8 0f01 	cmp.w	r8, #1
 801192e:	dc21      	bgt.n	8011974 <_strtod_l+0x51c>
 8011930:	b10b      	cbz	r3, 8011936 <_strtod_l+0x4de>
 8011932:	4682      	mov	sl, r0
 8011934:	468b      	mov	fp, r1
 8011936:	4b2d      	ldr	r3, [pc, #180]	; (80119ec <_strtod_l+0x594>)
 8011938:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801193c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8011940:	4652      	mov	r2, sl
 8011942:	465b      	mov	r3, fp
 8011944:	e9d5 0100 	ldrd	r0, r1, [r5]
 8011948:	f7ee fe66 	bl	8000618 <__aeabi_dmul>
 801194c:	4b28      	ldr	r3, [pc, #160]	; (80119f0 <_strtod_l+0x598>)
 801194e:	460a      	mov	r2, r1
 8011950:	400b      	ands	r3, r1
 8011952:	4928      	ldr	r1, [pc, #160]	; (80119f4 <_strtod_l+0x59c>)
 8011954:	428b      	cmp	r3, r1
 8011956:	4682      	mov	sl, r0
 8011958:	d898      	bhi.n	801188c <_strtod_l+0x434>
 801195a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801195e:	428b      	cmp	r3, r1
 8011960:	bf86      	itte	hi
 8011962:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80119fc <_strtod_l+0x5a4>
 8011966:	f04f 3aff 	movhi.w	sl, #4294967295
 801196a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801196e:	2300      	movs	r3, #0
 8011970:	9304      	str	r3, [sp, #16]
 8011972:	e077      	b.n	8011a64 <_strtod_l+0x60c>
 8011974:	f018 0f01 	tst.w	r8, #1
 8011978:	d006      	beq.n	8011988 <_strtod_l+0x530>
 801197a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 801197e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011982:	f7ee fe49 	bl	8000618 <__aeabi_dmul>
 8011986:	2301      	movs	r3, #1
 8011988:	3501      	adds	r5, #1
 801198a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801198e:	e7cc      	b.n	801192a <_strtod_l+0x4d2>
 8011990:	d0ed      	beq.n	801196e <_strtod_l+0x516>
 8011992:	f1c8 0800 	rsb	r8, r8, #0
 8011996:	f018 020f 	ands.w	r2, r8, #15
 801199a:	d00a      	beq.n	80119b2 <_strtod_l+0x55a>
 801199c:	4b12      	ldr	r3, [pc, #72]	; (80119e8 <_strtod_l+0x590>)
 801199e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80119a2:	4650      	mov	r0, sl
 80119a4:	4659      	mov	r1, fp
 80119a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119aa:	f7ee ff5f 	bl	800086c <__aeabi_ddiv>
 80119ae:	4682      	mov	sl, r0
 80119b0:	468b      	mov	fp, r1
 80119b2:	ea5f 1828 	movs.w	r8, r8, asr #4
 80119b6:	d0da      	beq.n	801196e <_strtod_l+0x516>
 80119b8:	f1b8 0f1f 	cmp.w	r8, #31
 80119bc:	dd20      	ble.n	8011a00 <_strtod_l+0x5a8>
 80119be:	2400      	movs	r4, #0
 80119c0:	46a0      	mov	r8, r4
 80119c2:	9407      	str	r4, [sp, #28]
 80119c4:	9405      	str	r4, [sp, #20]
 80119c6:	2322      	movs	r3, #34	; 0x22
 80119c8:	f04f 0a00 	mov.w	sl, #0
 80119cc:	f04f 0b00 	mov.w	fp, #0
 80119d0:	f8c9 3000 	str.w	r3, [r9]
 80119d4:	e765      	b.n	80118a2 <_strtod_l+0x44a>
 80119d6:	bf00      	nop
 80119d8:	080272a8 	.word	0x080272a8
 80119dc:	080272ab 	.word	0x080272ab
 80119e0:	080272b1 	.word	0x080272b1
 80119e4:	080272c8 	.word	0x080272c8
 80119e8:	08027360 	.word	0x08027360
 80119ec:	08027338 	.word	0x08027338
 80119f0:	7ff00000 	.word	0x7ff00000
 80119f4:	7ca00000 	.word	0x7ca00000
 80119f8:	fff80000 	.word	0xfff80000
 80119fc:	7fefffff 	.word	0x7fefffff
 8011a00:	f018 0310 	ands.w	r3, r8, #16
 8011a04:	bf18      	it	ne
 8011a06:	236a      	movne	r3, #106	; 0x6a
 8011a08:	4da0      	ldr	r5, [pc, #640]	; (8011c8c <_strtod_l+0x834>)
 8011a0a:	9304      	str	r3, [sp, #16]
 8011a0c:	4650      	mov	r0, sl
 8011a0e:	4659      	mov	r1, fp
 8011a10:	2300      	movs	r3, #0
 8011a12:	f1b8 0f00 	cmp.w	r8, #0
 8011a16:	f300 810a 	bgt.w	8011c2e <_strtod_l+0x7d6>
 8011a1a:	b10b      	cbz	r3, 8011a20 <_strtod_l+0x5c8>
 8011a1c:	4682      	mov	sl, r0
 8011a1e:	468b      	mov	fp, r1
 8011a20:	9b04      	ldr	r3, [sp, #16]
 8011a22:	b1bb      	cbz	r3, 8011a54 <_strtod_l+0x5fc>
 8011a24:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8011a28:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8011a2c:	2b00      	cmp	r3, #0
 8011a2e:	4659      	mov	r1, fp
 8011a30:	dd10      	ble.n	8011a54 <_strtod_l+0x5fc>
 8011a32:	2b1f      	cmp	r3, #31
 8011a34:	f340 8107 	ble.w	8011c46 <_strtod_l+0x7ee>
 8011a38:	2b34      	cmp	r3, #52	; 0x34
 8011a3a:	bfde      	ittt	le
 8011a3c:	3b20      	suble	r3, #32
 8011a3e:	f04f 32ff 	movle.w	r2, #4294967295
 8011a42:	fa02 f303 	lslle.w	r3, r2, r3
 8011a46:	f04f 0a00 	mov.w	sl, #0
 8011a4a:	bfcc      	ite	gt
 8011a4c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8011a50:	ea03 0b01 	andle.w	fp, r3, r1
 8011a54:	2200      	movs	r2, #0
 8011a56:	2300      	movs	r3, #0
 8011a58:	4650      	mov	r0, sl
 8011a5a:	4659      	mov	r1, fp
 8011a5c:	f7ef f844 	bl	8000ae8 <__aeabi_dcmpeq>
 8011a60:	2800      	cmp	r0, #0
 8011a62:	d1ac      	bne.n	80119be <_strtod_l+0x566>
 8011a64:	9b07      	ldr	r3, [sp, #28]
 8011a66:	9300      	str	r3, [sp, #0]
 8011a68:	9a05      	ldr	r2, [sp, #20]
 8011a6a:	9908      	ldr	r1, [sp, #32]
 8011a6c:	4623      	mov	r3, r4
 8011a6e:	4648      	mov	r0, r9
 8011a70:	f000 ffcd 	bl	8012a0e <__s2b>
 8011a74:	9007      	str	r0, [sp, #28]
 8011a76:	2800      	cmp	r0, #0
 8011a78:	f43f af08 	beq.w	801188c <_strtod_l+0x434>
 8011a7c:	9a06      	ldr	r2, [sp, #24]
 8011a7e:	9b06      	ldr	r3, [sp, #24]
 8011a80:	2a00      	cmp	r2, #0
 8011a82:	f1c3 0300 	rsb	r3, r3, #0
 8011a86:	bfa8      	it	ge
 8011a88:	2300      	movge	r3, #0
 8011a8a:	930e      	str	r3, [sp, #56]	; 0x38
 8011a8c:	2400      	movs	r4, #0
 8011a8e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8011a92:	9316      	str	r3, [sp, #88]	; 0x58
 8011a94:	46a0      	mov	r8, r4
 8011a96:	9b07      	ldr	r3, [sp, #28]
 8011a98:	4648      	mov	r0, r9
 8011a9a:	6859      	ldr	r1, [r3, #4]
 8011a9c:	f000 ff31 	bl	8012902 <_Balloc>
 8011aa0:	9005      	str	r0, [sp, #20]
 8011aa2:	2800      	cmp	r0, #0
 8011aa4:	f43f aef6 	beq.w	8011894 <_strtod_l+0x43c>
 8011aa8:	9b07      	ldr	r3, [sp, #28]
 8011aaa:	691a      	ldr	r2, [r3, #16]
 8011aac:	3202      	adds	r2, #2
 8011aae:	f103 010c 	add.w	r1, r3, #12
 8011ab2:	0092      	lsls	r2, r2, #2
 8011ab4:	300c      	adds	r0, #12
 8011ab6:	f7ff fc27 	bl	8011308 <memcpy>
 8011aba:	aa1e      	add	r2, sp, #120	; 0x78
 8011abc:	a91d      	add	r1, sp, #116	; 0x74
 8011abe:	ec4b ab10 	vmov	d0, sl, fp
 8011ac2:	4648      	mov	r0, r9
 8011ac4:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8011ac8:	f001 fa5c 	bl	8012f84 <__d2b>
 8011acc:	901c      	str	r0, [sp, #112]	; 0x70
 8011ace:	2800      	cmp	r0, #0
 8011ad0:	f43f aee0 	beq.w	8011894 <_strtod_l+0x43c>
 8011ad4:	2101      	movs	r1, #1
 8011ad6:	4648      	mov	r0, r9
 8011ad8:	f001 f825 	bl	8012b26 <__i2b>
 8011adc:	4680      	mov	r8, r0
 8011ade:	2800      	cmp	r0, #0
 8011ae0:	f43f aed8 	beq.w	8011894 <_strtod_l+0x43c>
 8011ae4:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8011ae6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8011ae8:	2e00      	cmp	r6, #0
 8011aea:	bfab      	itete	ge
 8011aec:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8011aee:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8011af0:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8011af2:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8011af4:	bfac      	ite	ge
 8011af6:	18f7      	addge	r7, r6, r3
 8011af8:	1b9d      	sublt	r5, r3, r6
 8011afa:	9b04      	ldr	r3, [sp, #16]
 8011afc:	1af6      	subs	r6, r6, r3
 8011afe:	4416      	add	r6, r2
 8011b00:	4b63      	ldr	r3, [pc, #396]	; (8011c90 <_strtod_l+0x838>)
 8011b02:	3e01      	subs	r6, #1
 8011b04:	429e      	cmp	r6, r3
 8011b06:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8011b0a:	f280 80af 	bge.w	8011c6c <_strtod_l+0x814>
 8011b0e:	1b9b      	subs	r3, r3, r6
 8011b10:	2b1f      	cmp	r3, #31
 8011b12:	eba2 0203 	sub.w	r2, r2, r3
 8011b16:	f04f 0101 	mov.w	r1, #1
 8011b1a:	f300 809b 	bgt.w	8011c54 <_strtod_l+0x7fc>
 8011b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8011b22:	930f      	str	r3, [sp, #60]	; 0x3c
 8011b24:	2300      	movs	r3, #0
 8011b26:	930a      	str	r3, [sp, #40]	; 0x28
 8011b28:	18be      	adds	r6, r7, r2
 8011b2a:	9b04      	ldr	r3, [sp, #16]
 8011b2c:	42b7      	cmp	r7, r6
 8011b2e:	4415      	add	r5, r2
 8011b30:	441d      	add	r5, r3
 8011b32:	463b      	mov	r3, r7
 8011b34:	bfa8      	it	ge
 8011b36:	4633      	movge	r3, r6
 8011b38:	42ab      	cmp	r3, r5
 8011b3a:	bfa8      	it	ge
 8011b3c:	462b      	movge	r3, r5
 8011b3e:	2b00      	cmp	r3, #0
 8011b40:	bfc2      	ittt	gt
 8011b42:	1af6      	subgt	r6, r6, r3
 8011b44:	1aed      	subgt	r5, r5, r3
 8011b46:	1aff      	subgt	r7, r7, r3
 8011b48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011b4a:	b1bb      	cbz	r3, 8011b7c <_strtod_l+0x724>
 8011b4c:	4641      	mov	r1, r8
 8011b4e:	461a      	mov	r2, r3
 8011b50:	4648      	mov	r0, r9
 8011b52:	f001 f887 	bl	8012c64 <__pow5mult>
 8011b56:	4680      	mov	r8, r0
 8011b58:	2800      	cmp	r0, #0
 8011b5a:	f43f ae9b 	beq.w	8011894 <_strtod_l+0x43c>
 8011b5e:	4601      	mov	r1, r0
 8011b60:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8011b62:	4648      	mov	r0, r9
 8011b64:	f000 ffe8 	bl	8012b38 <__multiply>
 8011b68:	900c      	str	r0, [sp, #48]	; 0x30
 8011b6a:	2800      	cmp	r0, #0
 8011b6c:	f43f ae92 	beq.w	8011894 <_strtod_l+0x43c>
 8011b70:	991c      	ldr	r1, [sp, #112]	; 0x70
 8011b72:	4648      	mov	r0, r9
 8011b74:	f000 fef9 	bl	801296a <_Bfree>
 8011b78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011b7a:	931c      	str	r3, [sp, #112]	; 0x70
 8011b7c:	2e00      	cmp	r6, #0
 8011b7e:	dc7a      	bgt.n	8011c76 <_strtod_l+0x81e>
 8011b80:	9b06      	ldr	r3, [sp, #24]
 8011b82:	2b00      	cmp	r3, #0
 8011b84:	dd08      	ble.n	8011b98 <_strtod_l+0x740>
 8011b86:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8011b88:	9905      	ldr	r1, [sp, #20]
 8011b8a:	4648      	mov	r0, r9
 8011b8c:	f001 f86a 	bl	8012c64 <__pow5mult>
 8011b90:	9005      	str	r0, [sp, #20]
 8011b92:	2800      	cmp	r0, #0
 8011b94:	f43f ae7e 	beq.w	8011894 <_strtod_l+0x43c>
 8011b98:	2d00      	cmp	r5, #0
 8011b9a:	dd08      	ble.n	8011bae <_strtod_l+0x756>
 8011b9c:	462a      	mov	r2, r5
 8011b9e:	9905      	ldr	r1, [sp, #20]
 8011ba0:	4648      	mov	r0, r9
 8011ba2:	f001 f8ad 	bl	8012d00 <__lshift>
 8011ba6:	9005      	str	r0, [sp, #20]
 8011ba8:	2800      	cmp	r0, #0
 8011baa:	f43f ae73 	beq.w	8011894 <_strtod_l+0x43c>
 8011bae:	2f00      	cmp	r7, #0
 8011bb0:	dd08      	ble.n	8011bc4 <_strtod_l+0x76c>
 8011bb2:	4641      	mov	r1, r8
 8011bb4:	463a      	mov	r2, r7
 8011bb6:	4648      	mov	r0, r9
 8011bb8:	f001 f8a2 	bl	8012d00 <__lshift>
 8011bbc:	4680      	mov	r8, r0
 8011bbe:	2800      	cmp	r0, #0
 8011bc0:	f43f ae68 	beq.w	8011894 <_strtod_l+0x43c>
 8011bc4:	9a05      	ldr	r2, [sp, #20]
 8011bc6:	991c      	ldr	r1, [sp, #112]	; 0x70
 8011bc8:	4648      	mov	r0, r9
 8011bca:	f001 f907 	bl	8012ddc <__mdiff>
 8011bce:	4604      	mov	r4, r0
 8011bd0:	2800      	cmp	r0, #0
 8011bd2:	f43f ae5f 	beq.w	8011894 <_strtod_l+0x43c>
 8011bd6:	68c3      	ldr	r3, [r0, #12]
 8011bd8:	930c      	str	r3, [sp, #48]	; 0x30
 8011bda:	2300      	movs	r3, #0
 8011bdc:	60c3      	str	r3, [r0, #12]
 8011bde:	4641      	mov	r1, r8
 8011be0:	f001 f8e2 	bl	8012da8 <__mcmp>
 8011be4:	2800      	cmp	r0, #0
 8011be6:	da55      	bge.n	8011c94 <_strtod_l+0x83c>
 8011be8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011bea:	b9e3      	cbnz	r3, 8011c26 <_strtod_l+0x7ce>
 8011bec:	f1ba 0f00 	cmp.w	sl, #0
 8011bf0:	d119      	bne.n	8011c26 <_strtod_l+0x7ce>
 8011bf2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011bf6:	b9b3      	cbnz	r3, 8011c26 <_strtod_l+0x7ce>
 8011bf8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011bfc:	0d1b      	lsrs	r3, r3, #20
 8011bfe:	051b      	lsls	r3, r3, #20
 8011c00:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8011c04:	d90f      	bls.n	8011c26 <_strtod_l+0x7ce>
 8011c06:	6963      	ldr	r3, [r4, #20]
 8011c08:	b913      	cbnz	r3, 8011c10 <_strtod_l+0x7b8>
 8011c0a:	6923      	ldr	r3, [r4, #16]
 8011c0c:	2b01      	cmp	r3, #1
 8011c0e:	dd0a      	ble.n	8011c26 <_strtod_l+0x7ce>
 8011c10:	4621      	mov	r1, r4
 8011c12:	2201      	movs	r2, #1
 8011c14:	4648      	mov	r0, r9
 8011c16:	f001 f873 	bl	8012d00 <__lshift>
 8011c1a:	4641      	mov	r1, r8
 8011c1c:	4604      	mov	r4, r0
 8011c1e:	f001 f8c3 	bl	8012da8 <__mcmp>
 8011c22:	2800      	cmp	r0, #0
 8011c24:	dc67      	bgt.n	8011cf6 <_strtod_l+0x89e>
 8011c26:	9b04      	ldr	r3, [sp, #16]
 8011c28:	2b00      	cmp	r3, #0
 8011c2a:	d171      	bne.n	8011d10 <_strtod_l+0x8b8>
 8011c2c:	e63d      	b.n	80118aa <_strtod_l+0x452>
 8011c2e:	f018 0f01 	tst.w	r8, #1
 8011c32:	d004      	beq.n	8011c3e <_strtod_l+0x7e6>
 8011c34:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011c38:	f7ee fcee 	bl	8000618 <__aeabi_dmul>
 8011c3c:	2301      	movs	r3, #1
 8011c3e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8011c42:	3508      	adds	r5, #8
 8011c44:	e6e5      	b.n	8011a12 <_strtod_l+0x5ba>
 8011c46:	f04f 32ff 	mov.w	r2, #4294967295
 8011c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8011c4e:	ea03 0a0a 	and.w	sl, r3, sl
 8011c52:	e6ff      	b.n	8011a54 <_strtod_l+0x5fc>
 8011c54:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8011c58:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8011c5c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8011c60:	36e2      	adds	r6, #226	; 0xe2
 8011c62:	fa01 f306 	lsl.w	r3, r1, r6
 8011c66:	930a      	str	r3, [sp, #40]	; 0x28
 8011c68:	910f      	str	r1, [sp, #60]	; 0x3c
 8011c6a:	e75d      	b.n	8011b28 <_strtod_l+0x6d0>
 8011c6c:	2300      	movs	r3, #0
 8011c6e:	930a      	str	r3, [sp, #40]	; 0x28
 8011c70:	2301      	movs	r3, #1
 8011c72:	930f      	str	r3, [sp, #60]	; 0x3c
 8011c74:	e758      	b.n	8011b28 <_strtod_l+0x6d0>
 8011c76:	4632      	mov	r2, r6
 8011c78:	991c      	ldr	r1, [sp, #112]	; 0x70
 8011c7a:	4648      	mov	r0, r9
 8011c7c:	f001 f840 	bl	8012d00 <__lshift>
 8011c80:	901c      	str	r0, [sp, #112]	; 0x70
 8011c82:	2800      	cmp	r0, #0
 8011c84:	f47f af7c 	bne.w	8011b80 <_strtod_l+0x728>
 8011c88:	e604      	b.n	8011894 <_strtod_l+0x43c>
 8011c8a:	bf00      	nop
 8011c8c:	080272e0 	.word	0x080272e0
 8011c90:	fffffc02 	.word	0xfffffc02
 8011c94:	465d      	mov	r5, fp
 8011c96:	f040 8086 	bne.w	8011da6 <_strtod_l+0x94e>
 8011c9a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011c9c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011ca0:	b32a      	cbz	r2, 8011cee <_strtod_l+0x896>
 8011ca2:	4aaf      	ldr	r2, [pc, #700]	; (8011f60 <_strtod_l+0xb08>)
 8011ca4:	4293      	cmp	r3, r2
 8011ca6:	d153      	bne.n	8011d50 <_strtod_l+0x8f8>
 8011ca8:	9b04      	ldr	r3, [sp, #16]
 8011caa:	4650      	mov	r0, sl
 8011cac:	b1d3      	cbz	r3, 8011ce4 <_strtod_l+0x88c>
 8011cae:	4aad      	ldr	r2, [pc, #692]	; (8011f64 <_strtod_l+0xb0c>)
 8011cb0:	402a      	ands	r2, r5
 8011cb2:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8011cb6:	f04f 31ff 	mov.w	r1, #4294967295
 8011cba:	d816      	bhi.n	8011cea <_strtod_l+0x892>
 8011cbc:	0d12      	lsrs	r2, r2, #20
 8011cbe:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8011cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8011cc6:	4298      	cmp	r0, r3
 8011cc8:	d142      	bne.n	8011d50 <_strtod_l+0x8f8>
 8011cca:	4ba7      	ldr	r3, [pc, #668]	; (8011f68 <_strtod_l+0xb10>)
 8011ccc:	429d      	cmp	r5, r3
 8011cce:	d102      	bne.n	8011cd6 <_strtod_l+0x87e>
 8011cd0:	3001      	adds	r0, #1
 8011cd2:	f43f addf 	beq.w	8011894 <_strtod_l+0x43c>
 8011cd6:	4ba3      	ldr	r3, [pc, #652]	; (8011f64 <_strtod_l+0xb0c>)
 8011cd8:	402b      	ands	r3, r5
 8011cda:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8011cde:	f04f 0a00 	mov.w	sl, #0
 8011ce2:	e7a0      	b.n	8011c26 <_strtod_l+0x7ce>
 8011ce4:	f04f 33ff 	mov.w	r3, #4294967295
 8011ce8:	e7ed      	b.n	8011cc6 <_strtod_l+0x86e>
 8011cea:	460b      	mov	r3, r1
 8011cec:	e7eb      	b.n	8011cc6 <_strtod_l+0x86e>
 8011cee:	bb7b      	cbnz	r3, 8011d50 <_strtod_l+0x8f8>
 8011cf0:	f1ba 0f00 	cmp.w	sl, #0
 8011cf4:	d12c      	bne.n	8011d50 <_strtod_l+0x8f8>
 8011cf6:	9904      	ldr	r1, [sp, #16]
 8011cf8:	4a9a      	ldr	r2, [pc, #616]	; (8011f64 <_strtod_l+0xb0c>)
 8011cfa:	465b      	mov	r3, fp
 8011cfc:	b1f1      	cbz	r1, 8011d3c <_strtod_l+0x8e4>
 8011cfe:	ea02 010b 	and.w	r1, r2, fp
 8011d02:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8011d06:	dc19      	bgt.n	8011d3c <_strtod_l+0x8e4>
 8011d08:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8011d0c:	f77f ae5b 	ble.w	80119c6 <_strtod_l+0x56e>
 8011d10:	4a96      	ldr	r2, [pc, #600]	; (8011f6c <_strtod_l+0xb14>)
 8011d12:	2300      	movs	r3, #0
 8011d14:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8011d18:	4650      	mov	r0, sl
 8011d1a:	4659      	mov	r1, fp
 8011d1c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8011d20:	f7ee fc7a 	bl	8000618 <__aeabi_dmul>
 8011d24:	4682      	mov	sl, r0
 8011d26:	468b      	mov	fp, r1
 8011d28:	2900      	cmp	r1, #0
 8011d2a:	f47f adbe 	bne.w	80118aa <_strtod_l+0x452>
 8011d2e:	2800      	cmp	r0, #0
 8011d30:	f47f adbb 	bne.w	80118aa <_strtod_l+0x452>
 8011d34:	2322      	movs	r3, #34	; 0x22
 8011d36:	f8c9 3000 	str.w	r3, [r9]
 8011d3a:	e5b6      	b.n	80118aa <_strtod_l+0x452>
 8011d3c:	4013      	ands	r3, r2
 8011d3e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8011d42:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8011d46:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8011d4a:	f04f 3aff 	mov.w	sl, #4294967295
 8011d4e:	e76a      	b.n	8011c26 <_strtod_l+0x7ce>
 8011d50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011d52:	b193      	cbz	r3, 8011d7a <_strtod_l+0x922>
 8011d54:	422b      	tst	r3, r5
 8011d56:	f43f af66 	beq.w	8011c26 <_strtod_l+0x7ce>
 8011d5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011d5c:	9a04      	ldr	r2, [sp, #16]
 8011d5e:	4650      	mov	r0, sl
 8011d60:	4659      	mov	r1, fp
 8011d62:	b173      	cbz	r3, 8011d82 <_strtod_l+0x92a>
 8011d64:	f7ff fb5a 	bl	801141c <sulp>
 8011d68:	4602      	mov	r2, r0
 8011d6a:	460b      	mov	r3, r1
 8011d6c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8011d70:	f7ee fa9c 	bl	80002ac <__adddf3>
 8011d74:	4682      	mov	sl, r0
 8011d76:	468b      	mov	fp, r1
 8011d78:	e755      	b.n	8011c26 <_strtod_l+0x7ce>
 8011d7a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011d7c:	ea13 0f0a 	tst.w	r3, sl
 8011d80:	e7e9      	b.n	8011d56 <_strtod_l+0x8fe>
 8011d82:	f7ff fb4b 	bl	801141c <sulp>
 8011d86:	4602      	mov	r2, r0
 8011d88:	460b      	mov	r3, r1
 8011d8a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8011d8e:	f7ee fa8b 	bl	80002a8 <__aeabi_dsub>
 8011d92:	2200      	movs	r2, #0
 8011d94:	2300      	movs	r3, #0
 8011d96:	4682      	mov	sl, r0
 8011d98:	468b      	mov	fp, r1
 8011d9a:	f7ee fea5 	bl	8000ae8 <__aeabi_dcmpeq>
 8011d9e:	2800      	cmp	r0, #0
 8011da0:	f47f ae11 	bne.w	80119c6 <_strtod_l+0x56e>
 8011da4:	e73f      	b.n	8011c26 <_strtod_l+0x7ce>
 8011da6:	4641      	mov	r1, r8
 8011da8:	4620      	mov	r0, r4
 8011daa:	f001 f93a 	bl	8013022 <__ratio>
 8011dae:	ec57 6b10 	vmov	r6, r7, d0
 8011db2:	2200      	movs	r2, #0
 8011db4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011db8:	ee10 0a10 	vmov	r0, s0
 8011dbc:	4639      	mov	r1, r7
 8011dbe:	f7ee fea7 	bl	8000b10 <__aeabi_dcmple>
 8011dc2:	2800      	cmp	r0, #0
 8011dc4:	d077      	beq.n	8011eb6 <_strtod_l+0xa5e>
 8011dc6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011dc8:	2b00      	cmp	r3, #0
 8011dca:	d04a      	beq.n	8011e62 <_strtod_l+0xa0a>
 8011dcc:	4b68      	ldr	r3, [pc, #416]	; (8011f70 <_strtod_l+0xb18>)
 8011dce:	2200      	movs	r2, #0
 8011dd0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8011dd4:	4f66      	ldr	r7, [pc, #408]	; (8011f70 <_strtod_l+0xb18>)
 8011dd6:	2600      	movs	r6, #0
 8011dd8:	4b62      	ldr	r3, [pc, #392]	; (8011f64 <_strtod_l+0xb0c>)
 8011dda:	402b      	ands	r3, r5
 8011ddc:	930f      	str	r3, [sp, #60]	; 0x3c
 8011dde:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011de0:	4b64      	ldr	r3, [pc, #400]	; (8011f74 <_strtod_l+0xb1c>)
 8011de2:	429a      	cmp	r2, r3
 8011de4:	f040 80ce 	bne.w	8011f84 <_strtod_l+0xb2c>
 8011de8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8011dec:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8011df0:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8011df4:	ec4b ab10 	vmov	d0, sl, fp
 8011df8:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8011dfc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8011e00:	f001 f84a 	bl	8012e98 <__ulp>
 8011e04:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8011e08:	ec53 2b10 	vmov	r2, r3, d0
 8011e0c:	f7ee fc04 	bl	8000618 <__aeabi_dmul>
 8011e10:	4652      	mov	r2, sl
 8011e12:	465b      	mov	r3, fp
 8011e14:	f7ee fa4a 	bl	80002ac <__adddf3>
 8011e18:	460b      	mov	r3, r1
 8011e1a:	4952      	ldr	r1, [pc, #328]	; (8011f64 <_strtod_l+0xb0c>)
 8011e1c:	4a56      	ldr	r2, [pc, #344]	; (8011f78 <_strtod_l+0xb20>)
 8011e1e:	4019      	ands	r1, r3
 8011e20:	4291      	cmp	r1, r2
 8011e22:	4682      	mov	sl, r0
 8011e24:	d95b      	bls.n	8011ede <_strtod_l+0xa86>
 8011e26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011e28:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8011e2c:	4293      	cmp	r3, r2
 8011e2e:	d103      	bne.n	8011e38 <_strtod_l+0x9e0>
 8011e30:	9b08      	ldr	r3, [sp, #32]
 8011e32:	3301      	adds	r3, #1
 8011e34:	f43f ad2e 	beq.w	8011894 <_strtod_l+0x43c>
 8011e38:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8011f68 <_strtod_l+0xb10>
 8011e3c:	f04f 3aff 	mov.w	sl, #4294967295
 8011e40:	991c      	ldr	r1, [sp, #112]	; 0x70
 8011e42:	4648      	mov	r0, r9
 8011e44:	f000 fd91 	bl	801296a <_Bfree>
 8011e48:	9905      	ldr	r1, [sp, #20]
 8011e4a:	4648      	mov	r0, r9
 8011e4c:	f000 fd8d 	bl	801296a <_Bfree>
 8011e50:	4641      	mov	r1, r8
 8011e52:	4648      	mov	r0, r9
 8011e54:	f000 fd89 	bl	801296a <_Bfree>
 8011e58:	4621      	mov	r1, r4
 8011e5a:	4648      	mov	r0, r9
 8011e5c:	f000 fd85 	bl	801296a <_Bfree>
 8011e60:	e619      	b.n	8011a96 <_strtod_l+0x63e>
 8011e62:	f1ba 0f00 	cmp.w	sl, #0
 8011e66:	d11a      	bne.n	8011e9e <_strtod_l+0xa46>
 8011e68:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011e6c:	b9eb      	cbnz	r3, 8011eaa <_strtod_l+0xa52>
 8011e6e:	2200      	movs	r2, #0
 8011e70:	4b3f      	ldr	r3, [pc, #252]	; (8011f70 <_strtod_l+0xb18>)
 8011e72:	4630      	mov	r0, r6
 8011e74:	4639      	mov	r1, r7
 8011e76:	f7ee fe41 	bl	8000afc <__aeabi_dcmplt>
 8011e7a:	b9c8      	cbnz	r0, 8011eb0 <_strtod_l+0xa58>
 8011e7c:	4630      	mov	r0, r6
 8011e7e:	4639      	mov	r1, r7
 8011e80:	2200      	movs	r2, #0
 8011e82:	4b3e      	ldr	r3, [pc, #248]	; (8011f7c <_strtod_l+0xb24>)
 8011e84:	f7ee fbc8 	bl	8000618 <__aeabi_dmul>
 8011e88:	4606      	mov	r6, r0
 8011e8a:	460f      	mov	r7, r1
 8011e8c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8011e90:	9618      	str	r6, [sp, #96]	; 0x60
 8011e92:	9319      	str	r3, [sp, #100]	; 0x64
 8011e94:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8011e98:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8011e9c:	e79c      	b.n	8011dd8 <_strtod_l+0x980>
 8011e9e:	f1ba 0f01 	cmp.w	sl, #1
 8011ea2:	d102      	bne.n	8011eaa <_strtod_l+0xa52>
 8011ea4:	2d00      	cmp	r5, #0
 8011ea6:	f43f ad8e 	beq.w	80119c6 <_strtod_l+0x56e>
 8011eaa:	2200      	movs	r2, #0
 8011eac:	4b34      	ldr	r3, [pc, #208]	; (8011f80 <_strtod_l+0xb28>)
 8011eae:	e78f      	b.n	8011dd0 <_strtod_l+0x978>
 8011eb0:	2600      	movs	r6, #0
 8011eb2:	4f32      	ldr	r7, [pc, #200]	; (8011f7c <_strtod_l+0xb24>)
 8011eb4:	e7ea      	b.n	8011e8c <_strtod_l+0xa34>
 8011eb6:	4b31      	ldr	r3, [pc, #196]	; (8011f7c <_strtod_l+0xb24>)
 8011eb8:	4630      	mov	r0, r6
 8011eba:	4639      	mov	r1, r7
 8011ebc:	2200      	movs	r2, #0
 8011ebe:	f7ee fbab 	bl	8000618 <__aeabi_dmul>
 8011ec2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011ec4:	4606      	mov	r6, r0
 8011ec6:	460f      	mov	r7, r1
 8011ec8:	b933      	cbnz	r3, 8011ed8 <_strtod_l+0xa80>
 8011eca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011ece:	9010      	str	r0, [sp, #64]	; 0x40
 8011ed0:	9311      	str	r3, [sp, #68]	; 0x44
 8011ed2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8011ed6:	e7df      	b.n	8011e98 <_strtod_l+0xa40>
 8011ed8:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8011edc:	e7f9      	b.n	8011ed2 <_strtod_l+0xa7a>
 8011ede:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8011ee2:	9b04      	ldr	r3, [sp, #16]
 8011ee4:	2b00      	cmp	r3, #0
 8011ee6:	d1ab      	bne.n	8011e40 <_strtod_l+0x9e8>
 8011ee8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011eec:	0d1b      	lsrs	r3, r3, #20
 8011eee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011ef0:	051b      	lsls	r3, r3, #20
 8011ef2:	429a      	cmp	r2, r3
 8011ef4:	465d      	mov	r5, fp
 8011ef6:	d1a3      	bne.n	8011e40 <_strtod_l+0x9e8>
 8011ef8:	4639      	mov	r1, r7
 8011efa:	4630      	mov	r0, r6
 8011efc:	f7ee fe3c 	bl	8000b78 <__aeabi_d2iz>
 8011f00:	f7ee fb20 	bl	8000544 <__aeabi_i2d>
 8011f04:	460b      	mov	r3, r1
 8011f06:	4602      	mov	r2, r0
 8011f08:	4639      	mov	r1, r7
 8011f0a:	4630      	mov	r0, r6
 8011f0c:	f7ee f9cc 	bl	80002a8 <__aeabi_dsub>
 8011f10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011f12:	4606      	mov	r6, r0
 8011f14:	460f      	mov	r7, r1
 8011f16:	b933      	cbnz	r3, 8011f26 <_strtod_l+0xace>
 8011f18:	f1ba 0f00 	cmp.w	sl, #0
 8011f1c:	d103      	bne.n	8011f26 <_strtod_l+0xace>
 8011f1e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8011f22:	2d00      	cmp	r5, #0
 8011f24:	d06d      	beq.n	8012002 <_strtod_l+0xbaa>
 8011f26:	a30a      	add	r3, pc, #40	; (adr r3, 8011f50 <_strtod_l+0xaf8>)
 8011f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f2c:	4630      	mov	r0, r6
 8011f2e:	4639      	mov	r1, r7
 8011f30:	f7ee fde4 	bl	8000afc <__aeabi_dcmplt>
 8011f34:	2800      	cmp	r0, #0
 8011f36:	f47f acb8 	bne.w	80118aa <_strtod_l+0x452>
 8011f3a:	a307      	add	r3, pc, #28	; (adr r3, 8011f58 <_strtod_l+0xb00>)
 8011f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f40:	4630      	mov	r0, r6
 8011f42:	4639      	mov	r1, r7
 8011f44:	f7ee fdf8 	bl	8000b38 <__aeabi_dcmpgt>
 8011f48:	2800      	cmp	r0, #0
 8011f4a:	f43f af79 	beq.w	8011e40 <_strtod_l+0x9e8>
 8011f4e:	e4ac      	b.n	80118aa <_strtod_l+0x452>
 8011f50:	94a03595 	.word	0x94a03595
 8011f54:	3fdfffff 	.word	0x3fdfffff
 8011f58:	35afe535 	.word	0x35afe535
 8011f5c:	3fe00000 	.word	0x3fe00000
 8011f60:	000fffff 	.word	0x000fffff
 8011f64:	7ff00000 	.word	0x7ff00000
 8011f68:	7fefffff 	.word	0x7fefffff
 8011f6c:	39500000 	.word	0x39500000
 8011f70:	3ff00000 	.word	0x3ff00000
 8011f74:	7fe00000 	.word	0x7fe00000
 8011f78:	7c9fffff 	.word	0x7c9fffff
 8011f7c:	3fe00000 	.word	0x3fe00000
 8011f80:	bff00000 	.word	0xbff00000
 8011f84:	9b04      	ldr	r3, [sp, #16]
 8011f86:	b333      	cbz	r3, 8011fd6 <_strtod_l+0xb7e>
 8011f88:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011f8a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8011f8e:	d822      	bhi.n	8011fd6 <_strtod_l+0xb7e>
 8011f90:	a327      	add	r3, pc, #156	; (adr r3, 8012030 <_strtod_l+0xbd8>)
 8011f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f96:	4630      	mov	r0, r6
 8011f98:	4639      	mov	r1, r7
 8011f9a:	f7ee fdb9 	bl	8000b10 <__aeabi_dcmple>
 8011f9e:	b1a0      	cbz	r0, 8011fca <_strtod_l+0xb72>
 8011fa0:	4639      	mov	r1, r7
 8011fa2:	4630      	mov	r0, r6
 8011fa4:	f7ee fe10 	bl	8000bc8 <__aeabi_d2uiz>
 8011fa8:	2800      	cmp	r0, #0
 8011faa:	bf08      	it	eq
 8011fac:	2001      	moveq	r0, #1
 8011fae:	f7ee fab9 	bl	8000524 <__aeabi_ui2d>
 8011fb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011fb4:	4606      	mov	r6, r0
 8011fb6:	460f      	mov	r7, r1
 8011fb8:	bb03      	cbnz	r3, 8011ffc <_strtod_l+0xba4>
 8011fba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011fbe:	9012      	str	r0, [sp, #72]	; 0x48
 8011fc0:	9313      	str	r3, [sp, #76]	; 0x4c
 8011fc2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8011fc6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8011fca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011fcc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011fce:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8011fd2:	1a9b      	subs	r3, r3, r2
 8011fd4:	930b      	str	r3, [sp, #44]	; 0x2c
 8011fd6:	ed9d 0b08 	vldr	d0, [sp, #32]
 8011fda:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8011fde:	f000 ff5b 	bl	8012e98 <__ulp>
 8011fe2:	4650      	mov	r0, sl
 8011fe4:	ec53 2b10 	vmov	r2, r3, d0
 8011fe8:	4659      	mov	r1, fp
 8011fea:	f7ee fb15 	bl	8000618 <__aeabi_dmul>
 8011fee:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8011ff2:	f7ee f95b 	bl	80002ac <__adddf3>
 8011ff6:	4682      	mov	sl, r0
 8011ff8:	468b      	mov	fp, r1
 8011ffa:	e772      	b.n	8011ee2 <_strtod_l+0xa8a>
 8011ffc:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8012000:	e7df      	b.n	8011fc2 <_strtod_l+0xb6a>
 8012002:	a30d      	add	r3, pc, #52	; (adr r3, 8012038 <_strtod_l+0xbe0>)
 8012004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012008:	f7ee fd78 	bl	8000afc <__aeabi_dcmplt>
 801200c:	e79c      	b.n	8011f48 <_strtod_l+0xaf0>
 801200e:	2300      	movs	r3, #0
 8012010:	930d      	str	r3, [sp, #52]	; 0x34
 8012012:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8012014:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012016:	6013      	str	r3, [r2, #0]
 8012018:	f7ff ba61 	b.w	80114de <_strtod_l+0x86>
 801201c:	2b65      	cmp	r3, #101	; 0x65
 801201e:	f04f 0200 	mov.w	r2, #0
 8012022:	f43f ab4e 	beq.w	80116c2 <_strtod_l+0x26a>
 8012026:	2101      	movs	r1, #1
 8012028:	4614      	mov	r4, r2
 801202a:	9104      	str	r1, [sp, #16]
 801202c:	f7ff bacb 	b.w	80115c6 <_strtod_l+0x16e>
 8012030:	ffc00000 	.word	0xffc00000
 8012034:	41dfffff 	.word	0x41dfffff
 8012038:	94a03595 	.word	0x94a03595
 801203c:	3fcfffff 	.word	0x3fcfffff

08012040 <strtof>:
 8012040:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8012044:	4e24      	ldr	r6, [pc, #144]	; (80120d8 <strtof+0x98>)
 8012046:	4a25      	ldr	r2, [pc, #148]	; (80120dc <strtof+0x9c>)
 8012048:	6834      	ldr	r4, [r6, #0]
 801204a:	6a23      	ldr	r3, [r4, #32]
 801204c:	ed2d 8b02 	vpush	{d8}
 8012050:	2b00      	cmp	r3, #0
 8012052:	bf08      	it	eq
 8012054:	4613      	moveq	r3, r2
 8012056:	460a      	mov	r2, r1
 8012058:	4601      	mov	r1, r0
 801205a:	4620      	mov	r0, r4
 801205c:	f7ff f9fc 	bl	8011458 <_strtod_l>
 8012060:	ec55 4b10 	vmov	r4, r5, d0
 8012064:	ee10 2a10 	vmov	r2, s0
 8012068:	462b      	mov	r3, r5
 801206a:	ee10 0a10 	vmov	r0, s0
 801206e:	4629      	mov	r1, r5
 8012070:	f7ee fd6c 	bl	8000b4c <__aeabi_dcmpun>
 8012074:	b130      	cbz	r0, 8012084 <strtof+0x44>
 8012076:	ecbd 8b02 	vpop	{d8}
 801207a:	2000      	movs	r0, #0
 801207c:	e8bd 4370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, lr}
 8012080:	f001 bb90 	b.w	80137a4 <nanf>
 8012084:	4620      	mov	r0, r4
 8012086:	4629      	mov	r1, r5
 8012088:	f7ee fdbe 	bl	8000c08 <__aeabi_d2f>
 801208c:	ee08 0a10 	vmov	s16, r0
 8012090:	eddf 7a13 	vldr	s15, [pc, #76]	; 80120e0 <strtof+0xa0>
 8012094:	eeb0 7ac8 	vabs.f32	s14, s16
 8012098:	eeb4 7a67 	vcmp.f32	s14, s15
 801209c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120a0:	dd14      	ble.n	80120cc <strtof+0x8c>
 80120a2:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
 80120a6:	f04f 32ff 	mov.w	r2, #4294967295
 80120aa:	4b0e      	ldr	r3, [pc, #56]	; (80120e4 <strtof+0xa4>)
 80120ac:	4620      	mov	r0, r4
 80120ae:	4649      	mov	r1, r9
 80120b0:	f7ee fd4c 	bl	8000b4c <__aeabi_dcmpun>
 80120b4:	b938      	cbnz	r0, 80120c6 <strtof+0x86>
 80120b6:	f04f 32ff 	mov.w	r2, #4294967295
 80120ba:	4b0a      	ldr	r3, [pc, #40]	; (80120e4 <strtof+0xa4>)
 80120bc:	4620      	mov	r0, r4
 80120be:	4649      	mov	r1, r9
 80120c0:	f7ee fd26 	bl	8000b10 <__aeabi_dcmple>
 80120c4:	b110      	cbz	r0, 80120cc <strtof+0x8c>
 80120c6:	6833      	ldr	r3, [r6, #0]
 80120c8:	2222      	movs	r2, #34	; 0x22
 80120ca:	601a      	str	r2, [r3, #0]
 80120cc:	eeb0 0a48 	vmov.f32	s0, s16
 80120d0:	ecbd 8b02 	vpop	{d8}
 80120d4:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80120d8:	20000054 	.word	0x20000054
 80120dc:	200000b8 	.word	0x200000b8
 80120e0:	7f7fffff 	.word	0x7f7fffff
 80120e4:	7fefffff 	.word	0x7fefffff

080120e8 <_strtol_l.isra.0>:
 80120e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80120ec:	4680      	mov	r8, r0
 80120ee:	4689      	mov	r9, r1
 80120f0:	4692      	mov	sl, r2
 80120f2:	461e      	mov	r6, r3
 80120f4:	460f      	mov	r7, r1
 80120f6:	463d      	mov	r5, r7
 80120f8:	9808      	ldr	r0, [sp, #32]
 80120fa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80120fe:	f000 fbe9 	bl	80128d4 <__locale_ctype_ptr_l>
 8012102:	4420      	add	r0, r4
 8012104:	7843      	ldrb	r3, [r0, #1]
 8012106:	f013 0308 	ands.w	r3, r3, #8
 801210a:	d132      	bne.n	8012172 <_strtol_l.isra.0+0x8a>
 801210c:	2c2d      	cmp	r4, #45	; 0x2d
 801210e:	d132      	bne.n	8012176 <_strtol_l.isra.0+0x8e>
 8012110:	787c      	ldrb	r4, [r7, #1]
 8012112:	1cbd      	adds	r5, r7, #2
 8012114:	2201      	movs	r2, #1
 8012116:	2e00      	cmp	r6, #0
 8012118:	d05d      	beq.n	80121d6 <_strtol_l.isra.0+0xee>
 801211a:	2e10      	cmp	r6, #16
 801211c:	d109      	bne.n	8012132 <_strtol_l.isra.0+0x4a>
 801211e:	2c30      	cmp	r4, #48	; 0x30
 8012120:	d107      	bne.n	8012132 <_strtol_l.isra.0+0x4a>
 8012122:	782b      	ldrb	r3, [r5, #0]
 8012124:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8012128:	2b58      	cmp	r3, #88	; 0x58
 801212a:	d14f      	bne.n	80121cc <_strtol_l.isra.0+0xe4>
 801212c:	786c      	ldrb	r4, [r5, #1]
 801212e:	2610      	movs	r6, #16
 8012130:	3502      	adds	r5, #2
 8012132:	2a00      	cmp	r2, #0
 8012134:	bf14      	ite	ne
 8012136:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 801213a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 801213e:	2700      	movs	r7, #0
 8012140:	fbb1 fcf6 	udiv	ip, r1, r6
 8012144:	4638      	mov	r0, r7
 8012146:	fb06 1e1c 	mls	lr, r6, ip, r1
 801214a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801214e:	2b09      	cmp	r3, #9
 8012150:	d817      	bhi.n	8012182 <_strtol_l.isra.0+0x9a>
 8012152:	461c      	mov	r4, r3
 8012154:	42a6      	cmp	r6, r4
 8012156:	dd23      	ble.n	80121a0 <_strtol_l.isra.0+0xb8>
 8012158:	1c7b      	adds	r3, r7, #1
 801215a:	d007      	beq.n	801216c <_strtol_l.isra.0+0x84>
 801215c:	4584      	cmp	ip, r0
 801215e:	d31c      	bcc.n	801219a <_strtol_l.isra.0+0xb2>
 8012160:	d101      	bne.n	8012166 <_strtol_l.isra.0+0x7e>
 8012162:	45a6      	cmp	lr, r4
 8012164:	db19      	blt.n	801219a <_strtol_l.isra.0+0xb2>
 8012166:	fb00 4006 	mla	r0, r0, r6, r4
 801216a:	2701      	movs	r7, #1
 801216c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012170:	e7eb      	b.n	801214a <_strtol_l.isra.0+0x62>
 8012172:	462f      	mov	r7, r5
 8012174:	e7bf      	b.n	80120f6 <_strtol_l.isra.0+0xe>
 8012176:	2c2b      	cmp	r4, #43	; 0x2b
 8012178:	bf04      	itt	eq
 801217a:	1cbd      	addeq	r5, r7, #2
 801217c:	787c      	ldrbeq	r4, [r7, #1]
 801217e:	461a      	mov	r2, r3
 8012180:	e7c9      	b.n	8012116 <_strtol_l.isra.0+0x2e>
 8012182:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8012186:	2b19      	cmp	r3, #25
 8012188:	d801      	bhi.n	801218e <_strtol_l.isra.0+0xa6>
 801218a:	3c37      	subs	r4, #55	; 0x37
 801218c:	e7e2      	b.n	8012154 <_strtol_l.isra.0+0x6c>
 801218e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8012192:	2b19      	cmp	r3, #25
 8012194:	d804      	bhi.n	80121a0 <_strtol_l.isra.0+0xb8>
 8012196:	3c57      	subs	r4, #87	; 0x57
 8012198:	e7dc      	b.n	8012154 <_strtol_l.isra.0+0x6c>
 801219a:	f04f 37ff 	mov.w	r7, #4294967295
 801219e:	e7e5      	b.n	801216c <_strtol_l.isra.0+0x84>
 80121a0:	1c7b      	adds	r3, r7, #1
 80121a2:	d108      	bne.n	80121b6 <_strtol_l.isra.0+0xce>
 80121a4:	2322      	movs	r3, #34	; 0x22
 80121a6:	f8c8 3000 	str.w	r3, [r8]
 80121aa:	4608      	mov	r0, r1
 80121ac:	f1ba 0f00 	cmp.w	sl, #0
 80121b0:	d107      	bne.n	80121c2 <_strtol_l.isra.0+0xda>
 80121b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80121b6:	b102      	cbz	r2, 80121ba <_strtol_l.isra.0+0xd2>
 80121b8:	4240      	negs	r0, r0
 80121ba:	f1ba 0f00 	cmp.w	sl, #0
 80121be:	d0f8      	beq.n	80121b2 <_strtol_l.isra.0+0xca>
 80121c0:	b10f      	cbz	r7, 80121c6 <_strtol_l.isra.0+0xde>
 80121c2:	f105 39ff 	add.w	r9, r5, #4294967295
 80121c6:	f8ca 9000 	str.w	r9, [sl]
 80121ca:	e7f2      	b.n	80121b2 <_strtol_l.isra.0+0xca>
 80121cc:	2430      	movs	r4, #48	; 0x30
 80121ce:	2e00      	cmp	r6, #0
 80121d0:	d1af      	bne.n	8012132 <_strtol_l.isra.0+0x4a>
 80121d2:	2608      	movs	r6, #8
 80121d4:	e7ad      	b.n	8012132 <_strtol_l.isra.0+0x4a>
 80121d6:	2c30      	cmp	r4, #48	; 0x30
 80121d8:	d0a3      	beq.n	8012122 <_strtol_l.isra.0+0x3a>
 80121da:	260a      	movs	r6, #10
 80121dc:	e7a9      	b.n	8012132 <_strtol_l.isra.0+0x4a>
	...

080121e0 <strtol>:
 80121e0:	4b08      	ldr	r3, [pc, #32]	; (8012204 <strtol+0x24>)
 80121e2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80121e4:	681c      	ldr	r4, [r3, #0]
 80121e6:	4d08      	ldr	r5, [pc, #32]	; (8012208 <strtol+0x28>)
 80121e8:	6a23      	ldr	r3, [r4, #32]
 80121ea:	2b00      	cmp	r3, #0
 80121ec:	bf08      	it	eq
 80121ee:	462b      	moveq	r3, r5
 80121f0:	9300      	str	r3, [sp, #0]
 80121f2:	4613      	mov	r3, r2
 80121f4:	460a      	mov	r2, r1
 80121f6:	4601      	mov	r1, r0
 80121f8:	4620      	mov	r0, r4
 80121fa:	f7ff ff75 	bl	80120e8 <_strtol_l.isra.0>
 80121fe:	b003      	add	sp, #12
 8012200:	bd30      	pop	{r4, r5, pc}
 8012202:	bf00      	nop
 8012204:	20000054 	.word	0x20000054
 8012208:	200000b8 	.word	0x200000b8

0801220c <__utoa>:
 801220c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801220e:	4b1d      	ldr	r3, [pc, #116]	; (8012284 <__utoa+0x78>)
 8012210:	b08b      	sub	sp, #44	; 0x2c
 8012212:	4605      	mov	r5, r0
 8012214:	460c      	mov	r4, r1
 8012216:	466e      	mov	r6, sp
 8012218:	f103 0c20 	add.w	ip, r3, #32
 801221c:	6818      	ldr	r0, [r3, #0]
 801221e:	6859      	ldr	r1, [r3, #4]
 8012220:	4637      	mov	r7, r6
 8012222:	c703      	stmia	r7!, {r0, r1}
 8012224:	3308      	adds	r3, #8
 8012226:	4563      	cmp	r3, ip
 8012228:	463e      	mov	r6, r7
 801222a:	d1f7      	bne.n	801221c <__utoa+0x10>
 801222c:	6818      	ldr	r0, [r3, #0]
 801222e:	791b      	ldrb	r3, [r3, #4]
 8012230:	713b      	strb	r3, [r7, #4]
 8012232:	1e93      	subs	r3, r2, #2
 8012234:	2b22      	cmp	r3, #34	; 0x22
 8012236:	6038      	str	r0, [r7, #0]
 8012238:	f04f 0300 	mov.w	r3, #0
 801223c:	d904      	bls.n	8012248 <__utoa+0x3c>
 801223e:	7023      	strb	r3, [r4, #0]
 8012240:	461c      	mov	r4, r3
 8012242:	4620      	mov	r0, r4
 8012244:	b00b      	add	sp, #44	; 0x2c
 8012246:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012248:	1e66      	subs	r6, r4, #1
 801224a:	fbb5 f0f2 	udiv	r0, r5, r2
 801224e:	af0a      	add	r7, sp, #40	; 0x28
 8012250:	fb02 5510 	mls	r5, r2, r0, r5
 8012254:	443d      	add	r5, r7
 8012256:	1c59      	adds	r1, r3, #1
 8012258:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 801225c:	f806 5f01 	strb.w	r5, [r6, #1]!
 8012260:	4605      	mov	r5, r0
 8012262:	b968      	cbnz	r0, 8012280 <__utoa+0x74>
 8012264:	5460      	strb	r0, [r4, r1]
 8012266:	4423      	add	r3, r4
 8012268:	4622      	mov	r2, r4
 801226a:	1b19      	subs	r1, r3, r4
 801226c:	1b10      	subs	r0, r2, r4
 801226e:	4281      	cmp	r1, r0
 8012270:	dde7      	ble.n	8012242 <__utoa+0x36>
 8012272:	7811      	ldrb	r1, [r2, #0]
 8012274:	7818      	ldrb	r0, [r3, #0]
 8012276:	f802 0b01 	strb.w	r0, [r2], #1
 801227a:	f803 1901 	strb.w	r1, [r3], #-1
 801227e:	e7f4      	b.n	801226a <__utoa+0x5e>
 8012280:	460b      	mov	r3, r1
 8012282:	e7e2      	b.n	801224a <__utoa+0x3e>
 8012284:	08027308 	.word	0x08027308

08012288 <rshift>:
 8012288:	b5f0      	push	{r4, r5, r6, r7, lr}
 801228a:	6906      	ldr	r6, [r0, #16]
 801228c:	114b      	asrs	r3, r1, #5
 801228e:	429e      	cmp	r6, r3
 8012290:	f100 0414 	add.w	r4, r0, #20
 8012294:	dd30      	ble.n	80122f8 <rshift+0x70>
 8012296:	f011 011f 	ands.w	r1, r1, #31
 801229a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 801229e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80122a2:	d108      	bne.n	80122b6 <rshift+0x2e>
 80122a4:	4621      	mov	r1, r4
 80122a6:	42b2      	cmp	r2, r6
 80122a8:	460b      	mov	r3, r1
 80122aa:	d211      	bcs.n	80122d0 <rshift+0x48>
 80122ac:	f852 3b04 	ldr.w	r3, [r2], #4
 80122b0:	f841 3b04 	str.w	r3, [r1], #4
 80122b4:	e7f7      	b.n	80122a6 <rshift+0x1e>
 80122b6:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 80122ba:	f1c1 0c20 	rsb	ip, r1, #32
 80122be:	40cd      	lsrs	r5, r1
 80122c0:	3204      	adds	r2, #4
 80122c2:	4623      	mov	r3, r4
 80122c4:	42b2      	cmp	r2, r6
 80122c6:	4617      	mov	r7, r2
 80122c8:	d30c      	bcc.n	80122e4 <rshift+0x5c>
 80122ca:	601d      	str	r5, [r3, #0]
 80122cc:	b105      	cbz	r5, 80122d0 <rshift+0x48>
 80122ce:	3304      	adds	r3, #4
 80122d0:	1b1a      	subs	r2, r3, r4
 80122d2:	42a3      	cmp	r3, r4
 80122d4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80122d8:	bf08      	it	eq
 80122da:	2300      	moveq	r3, #0
 80122dc:	6102      	str	r2, [r0, #16]
 80122de:	bf08      	it	eq
 80122e0:	6143      	streq	r3, [r0, #20]
 80122e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80122e4:	683f      	ldr	r7, [r7, #0]
 80122e6:	fa07 f70c 	lsl.w	r7, r7, ip
 80122ea:	433d      	orrs	r5, r7
 80122ec:	f843 5b04 	str.w	r5, [r3], #4
 80122f0:	f852 5b04 	ldr.w	r5, [r2], #4
 80122f4:	40cd      	lsrs	r5, r1
 80122f6:	e7e5      	b.n	80122c4 <rshift+0x3c>
 80122f8:	4623      	mov	r3, r4
 80122fa:	e7e9      	b.n	80122d0 <rshift+0x48>

080122fc <__hexdig_fun>:
 80122fc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8012300:	2b09      	cmp	r3, #9
 8012302:	d802      	bhi.n	801230a <__hexdig_fun+0xe>
 8012304:	3820      	subs	r0, #32
 8012306:	b2c0      	uxtb	r0, r0
 8012308:	4770      	bx	lr
 801230a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801230e:	2b05      	cmp	r3, #5
 8012310:	d801      	bhi.n	8012316 <__hexdig_fun+0x1a>
 8012312:	3847      	subs	r0, #71	; 0x47
 8012314:	e7f7      	b.n	8012306 <__hexdig_fun+0xa>
 8012316:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801231a:	2b05      	cmp	r3, #5
 801231c:	d801      	bhi.n	8012322 <__hexdig_fun+0x26>
 801231e:	3827      	subs	r0, #39	; 0x27
 8012320:	e7f1      	b.n	8012306 <__hexdig_fun+0xa>
 8012322:	2000      	movs	r0, #0
 8012324:	4770      	bx	lr

08012326 <__gethex>:
 8012326:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801232a:	b08b      	sub	sp, #44	; 0x2c
 801232c:	468a      	mov	sl, r1
 801232e:	9002      	str	r0, [sp, #8]
 8012330:	9816      	ldr	r0, [sp, #88]	; 0x58
 8012332:	9306      	str	r3, [sp, #24]
 8012334:	4690      	mov	r8, r2
 8012336:	f000 fad0 	bl	80128da <__localeconv_l>
 801233a:	6803      	ldr	r3, [r0, #0]
 801233c:	9303      	str	r3, [sp, #12]
 801233e:	4618      	mov	r0, r3
 8012340:	f7ed ff50 	bl	80001e4 <strlen>
 8012344:	9b03      	ldr	r3, [sp, #12]
 8012346:	9001      	str	r0, [sp, #4]
 8012348:	4403      	add	r3, r0
 801234a:	f04f 0b00 	mov.w	fp, #0
 801234e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8012352:	9307      	str	r3, [sp, #28]
 8012354:	f8da 3000 	ldr.w	r3, [sl]
 8012358:	3302      	adds	r3, #2
 801235a:	461f      	mov	r7, r3
 801235c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8012360:	2830      	cmp	r0, #48	; 0x30
 8012362:	d06c      	beq.n	801243e <__gethex+0x118>
 8012364:	f7ff ffca 	bl	80122fc <__hexdig_fun>
 8012368:	4604      	mov	r4, r0
 801236a:	2800      	cmp	r0, #0
 801236c:	d16a      	bne.n	8012444 <__gethex+0x11e>
 801236e:	9a01      	ldr	r2, [sp, #4]
 8012370:	9903      	ldr	r1, [sp, #12]
 8012372:	4638      	mov	r0, r7
 8012374:	f7ff f811 	bl	801139a <strncmp>
 8012378:	2800      	cmp	r0, #0
 801237a:	d166      	bne.n	801244a <__gethex+0x124>
 801237c:	9b01      	ldr	r3, [sp, #4]
 801237e:	5cf8      	ldrb	r0, [r7, r3]
 8012380:	18fe      	adds	r6, r7, r3
 8012382:	f7ff ffbb 	bl	80122fc <__hexdig_fun>
 8012386:	2800      	cmp	r0, #0
 8012388:	d062      	beq.n	8012450 <__gethex+0x12a>
 801238a:	4633      	mov	r3, r6
 801238c:	7818      	ldrb	r0, [r3, #0]
 801238e:	2830      	cmp	r0, #48	; 0x30
 8012390:	461f      	mov	r7, r3
 8012392:	f103 0301 	add.w	r3, r3, #1
 8012396:	d0f9      	beq.n	801238c <__gethex+0x66>
 8012398:	f7ff ffb0 	bl	80122fc <__hexdig_fun>
 801239c:	fab0 f580 	clz	r5, r0
 80123a0:	096d      	lsrs	r5, r5, #5
 80123a2:	4634      	mov	r4, r6
 80123a4:	f04f 0b01 	mov.w	fp, #1
 80123a8:	463a      	mov	r2, r7
 80123aa:	4616      	mov	r6, r2
 80123ac:	3201      	adds	r2, #1
 80123ae:	7830      	ldrb	r0, [r6, #0]
 80123b0:	f7ff ffa4 	bl	80122fc <__hexdig_fun>
 80123b4:	2800      	cmp	r0, #0
 80123b6:	d1f8      	bne.n	80123aa <__gethex+0x84>
 80123b8:	9a01      	ldr	r2, [sp, #4]
 80123ba:	9903      	ldr	r1, [sp, #12]
 80123bc:	4630      	mov	r0, r6
 80123be:	f7fe ffec 	bl	801139a <strncmp>
 80123c2:	b950      	cbnz	r0, 80123da <__gethex+0xb4>
 80123c4:	b954      	cbnz	r4, 80123dc <__gethex+0xb6>
 80123c6:	9b01      	ldr	r3, [sp, #4]
 80123c8:	18f4      	adds	r4, r6, r3
 80123ca:	4622      	mov	r2, r4
 80123cc:	4616      	mov	r6, r2
 80123ce:	3201      	adds	r2, #1
 80123d0:	7830      	ldrb	r0, [r6, #0]
 80123d2:	f7ff ff93 	bl	80122fc <__hexdig_fun>
 80123d6:	2800      	cmp	r0, #0
 80123d8:	d1f8      	bne.n	80123cc <__gethex+0xa6>
 80123da:	b10c      	cbz	r4, 80123e0 <__gethex+0xba>
 80123dc:	1ba4      	subs	r4, r4, r6
 80123de:	00a4      	lsls	r4, r4, #2
 80123e0:	7833      	ldrb	r3, [r6, #0]
 80123e2:	2b50      	cmp	r3, #80	; 0x50
 80123e4:	d001      	beq.n	80123ea <__gethex+0xc4>
 80123e6:	2b70      	cmp	r3, #112	; 0x70
 80123e8:	d140      	bne.n	801246c <__gethex+0x146>
 80123ea:	7873      	ldrb	r3, [r6, #1]
 80123ec:	2b2b      	cmp	r3, #43	; 0x2b
 80123ee:	d031      	beq.n	8012454 <__gethex+0x12e>
 80123f0:	2b2d      	cmp	r3, #45	; 0x2d
 80123f2:	d033      	beq.n	801245c <__gethex+0x136>
 80123f4:	1c71      	adds	r1, r6, #1
 80123f6:	f04f 0900 	mov.w	r9, #0
 80123fa:	7808      	ldrb	r0, [r1, #0]
 80123fc:	f7ff ff7e 	bl	80122fc <__hexdig_fun>
 8012400:	1e43      	subs	r3, r0, #1
 8012402:	b2db      	uxtb	r3, r3
 8012404:	2b18      	cmp	r3, #24
 8012406:	d831      	bhi.n	801246c <__gethex+0x146>
 8012408:	f1a0 0210 	sub.w	r2, r0, #16
 801240c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8012410:	f7ff ff74 	bl	80122fc <__hexdig_fun>
 8012414:	1e43      	subs	r3, r0, #1
 8012416:	b2db      	uxtb	r3, r3
 8012418:	2b18      	cmp	r3, #24
 801241a:	d922      	bls.n	8012462 <__gethex+0x13c>
 801241c:	f1b9 0f00 	cmp.w	r9, #0
 8012420:	d000      	beq.n	8012424 <__gethex+0xfe>
 8012422:	4252      	negs	r2, r2
 8012424:	4414      	add	r4, r2
 8012426:	f8ca 1000 	str.w	r1, [sl]
 801242a:	b30d      	cbz	r5, 8012470 <__gethex+0x14a>
 801242c:	f1bb 0f00 	cmp.w	fp, #0
 8012430:	bf0c      	ite	eq
 8012432:	2706      	moveq	r7, #6
 8012434:	2700      	movne	r7, #0
 8012436:	4638      	mov	r0, r7
 8012438:	b00b      	add	sp, #44	; 0x2c
 801243a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801243e:	f10b 0b01 	add.w	fp, fp, #1
 8012442:	e78a      	b.n	801235a <__gethex+0x34>
 8012444:	2500      	movs	r5, #0
 8012446:	462c      	mov	r4, r5
 8012448:	e7ae      	b.n	80123a8 <__gethex+0x82>
 801244a:	463e      	mov	r6, r7
 801244c:	2501      	movs	r5, #1
 801244e:	e7c7      	b.n	80123e0 <__gethex+0xba>
 8012450:	4604      	mov	r4, r0
 8012452:	e7fb      	b.n	801244c <__gethex+0x126>
 8012454:	f04f 0900 	mov.w	r9, #0
 8012458:	1cb1      	adds	r1, r6, #2
 801245a:	e7ce      	b.n	80123fa <__gethex+0xd4>
 801245c:	f04f 0901 	mov.w	r9, #1
 8012460:	e7fa      	b.n	8012458 <__gethex+0x132>
 8012462:	230a      	movs	r3, #10
 8012464:	fb03 0202 	mla	r2, r3, r2, r0
 8012468:	3a10      	subs	r2, #16
 801246a:	e7cf      	b.n	801240c <__gethex+0xe6>
 801246c:	4631      	mov	r1, r6
 801246e:	e7da      	b.n	8012426 <__gethex+0x100>
 8012470:	1bf3      	subs	r3, r6, r7
 8012472:	3b01      	subs	r3, #1
 8012474:	4629      	mov	r1, r5
 8012476:	2b07      	cmp	r3, #7
 8012478:	dc49      	bgt.n	801250e <__gethex+0x1e8>
 801247a:	9802      	ldr	r0, [sp, #8]
 801247c:	f000 fa41 	bl	8012902 <_Balloc>
 8012480:	9b01      	ldr	r3, [sp, #4]
 8012482:	f100 0914 	add.w	r9, r0, #20
 8012486:	f04f 0b00 	mov.w	fp, #0
 801248a:	f1c3 0301 	rsb	r3, r3, #1
 801248e:	4605      	mov	r5, r0
 8012490:	f8cd 9010 	str.w	r9, [sp, #16]
 8012494:	46da      	mov	sl, fp
 8012496:	9308      	str	r3, [sp, #32]
 8012498:	42b7      	cmp	r7, r6
 801249a:	d33b      	bcc.n	8012514 <__gethex+0x1ee>
 801249c:	9804      	ldr	r0, [sp, #16]
 801249e:	f840 ab04 	str.w	sl, [r0], #4
 80124a2:	eba0 0009 	sub.w	r0, r0, r9
 80124a6:	1080      	asrs	r0, r0, #2
 80124a8:	6128      	str	r0, [r5, #16]
 80124aa:	0147      	lsls	r7, r0, #5
 80124ac:	4650      	mov	r0, sl
 80124ae:	f000 faec 	bl	8012a8a <__hi0bits>
 80124b2:	f8d8 6000 	ldr.w	r6, [r8]
 80124b6:	1a3f      	subs	r7, r7, r0
 80124b8:	42b7      	cmp	r7, r6
 80124ba:	dd64      	ble.n	8012586 <__gethex+0x260>
 80124bc:	1bbf      	subs	r7, r7, r6
 80124be:	4639      	mov	r1, r7
 80124c0:	4628      	mov	r0, r5
 80124c2:	f000 fdfb 	bl	80130bc <__any_on>
 80124c6:	4682      	mov	sl, r0
 80124c8:	b178      	cbz	r0, 80124ea <__gethex+0x1c4>
 80124ca:	1e7b      	subs	r3, r7, #1
 80124cc:	1159      	asrs	r1, r3, #5
 80124ce:	f003 021f 	and.w	r2, r3, #31
 80124d2:	f04f 0a01 	mov.w	sl, #1
 80124d6:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80124da:	fa0a f202 	lsl.w	r2, sl, r2
 80124de:	420a      	tst	r2, r1
 80124e0:	d003      	beq.n	80124ea <__gethex+0x1c4>
 80124e2:	4553      	cmp	r3, sl
 80124e4:	dc46      	bgt.n	8012574 <__gethex+0x24e>
 80124e6:	f04f 0a02 	mov.w	sl, #2
 80124ea:	4639      	mov	r1, r7
 80124ec:	4628      	mov	r0, r5
 80124ee:	f7ff fecb 	bl	8012288 <rshift>
 80124f2:	443c      	add	r4, r7
 80124f4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80124f8:	42a3      	cmp	r3, r4
 80124fa:	da52      	bge.n	80125a2 <__gethex+0x27c>
 80124fc:	4629      	mov	r1, r5
 80124fe:	9802      	ldr	r0, [sp, #8]
 8012500:	f000 fa33 	bl	801296a <_Bfree>
 8012504:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012506:	2300      	movs	r3, #0
 8012508:	6013      	str	r3, [r2, #0]
 801250a:	27a3      	movs	r7, #163	; 0xa3
 801250c:	e793      	b.n	8012436 <__gethex+0x110>
 801250e:	3101      	adds	r1, #1
 8012510:	105b      	asrs	r3, r3, #1
 8012512:	e7b0      	b.n	8012476 <__gethex+0x150>
 8012514:	1e73      	subs	r3, r6, #1
 8012516:	9305      	str	r3, [sp, #20]
 8012518:	9a07      	ldr	r2, [sp, #28]
 801251a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801251e:	4293      	cmp	r3, r2
 8012520:	d018      	beq.n	8012554 <__gethex+0x22e>
 8012522:	f1bb 0f20 	cmp.w	fp, #32
 8012526:	d107      	bne.n	8012538 <__gethex+0x212>
 8012528:	9b04      	ldr	r3, [sp, #16]
 801252a:	f8c3 a000 	str.w	sl, [r3]
 801252e:	3304      	adds	r3, #4
 8012530:	f04f 0a00 	mov.w	sl, #0
 8012534:	9304      	str	r3, [sp, #16]
 8012536:	46d3      	mov	fp, sl
 8012538:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801253c:	f7ff fede 	bl	80122fc <__hexdig_fun>
 8012540:	f000 000f 	and.w	r0, r0, #15
 8012544:	fa00 f00b 	lsl.w	r0, r0, fp
 8012548:	ea4a 0a00 	orr.w	sl, sl, r0
 801254c:	f10b 0b04 	add.w	fp, fp, #4
 8012550:	9b05      	ldr	r3, [sp, #20]
 8012552:	e00d      	b.n	8012570 <__gethex+0x24a>
 8012554:	9b05      	ldr	r3, [sp, #20]
 8012556:	9a08      	ldr	r2, [sp, #32]
 8012558:	4413      	add	r3, r2
 801255a:	42bb      	cmp	r3, r7
 801255c:	d3e1      	bcc.n	8012522 <__gethex+0x1fc>
 801255e:	4618      	mov	r0, r3
 8012560:	9a01      	ldr	r2, [sp, #4]
 8012562:	9903      	ldr	r1, [sp, #12]
 8012564:	9309      	str	r3, [sp, #36]	; 0x24
 8012566:	f7fe ff18 	bl	801139a <strncmp>
 801256a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801256c:	2800      	cmp	r0, #0
 801256e:	d1d8      	bne.n	8012522 <__gethex+0x1fc>
 8012570:	461e      	mov	r6, r3
 8012572:	e791      	b.n	8012498 <__gethex+0x172>
 8012574:	1eb9      	subs	r1, r7, #2
 8012576:	4628      	mov	r0, r5
 8012578:	f000 fda0 	bl	80130bc <__any_on>
 801257c:	2800      	cmp	r0, #0
 801257e:	d0b2      	beq.n	80124e6 <__gethex+0x1c0>
 8012580:	f04f 0a03 	mov.w	sl, #3
 8012584:	e7b1      	b.n	80124ea <__gethex+0x1c4>
 8012586:	da09      	bge.n	801259c <__gethex+0x276>
 8012588:	1bf7      	subs	r7, r6, r7
 801258a:	4629      	mov	r1, r5
 801258c:	463a      	mov	r2, r7
 801258e:	9802      	ldr	r0, [sp, #8]
 8012590:	f000 fbb6 	bl	8012d00 <__lshift>
 8012594:	1be4      	subs	r4, r4, r7
 8012596:	4605      	mov	r5, r0
 8012598:	f100 0914 	add.w	r9, r0, #20
 801259c:	f04f 0a00 	mov.w	sl, #0
 80125a0:	e7a8      	b.n	80124f4 <__gethex+0x1ce>
 80125a2:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80125a6:	42a0      	cmp	r0, r4
 80125a8:	dd6a      	ble.n	8012680 <__gethex+0x35a>
 80125aa:	1b04      	subs	r4, r0, r4
 80125ac:	42a6      	cmp	r6, r4
 80125ae:	dc2e      	bgt.n	801260e <__gethex+0x2e8>
 80125b0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80125b4:	2b02      	cmp	r3, #2
 80125b6:	d022      	beq.n	80125fe <__gethex+0x2d8>
 80125b8:	2b03      	cmp	r3, #3
 80125ba:	d024      	beq.n	8012606 <__gethex+0x2e0>
 80125bc:	2b01      	cmp	r3, #1
 80125be:	d115      	bne.n	80125ec <__gethex+0x2c6>
 80125c0:	42a6      	cmp	r6, r4
 80125c2:	d113      	bne.n	80125ec <__gethex+0x2c6>
 80125c4:	2e01      	cmp	r6, #1
 80125c6:	dc0b      	bgt.n	80125e0 <__gethex+0x2ba>
 80125c8:	9a06      	ldr	r2, [sp, #24]
 80125ca:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80125ce:	6013      	str	r3, [r2, #0]
 80125d0:	2301      	movs	r3, #1
 80125d2:	612b      	str	r3, [r5, #16]
 80125d4:	f8c9 3000 	str.w	r3, [r9]
 80125d8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80125da:	2762      	movs	r7, #98	; 0x62
 80125dc:	601d      	str	r5, [r3, #0]
 80125de:	e72a      	b.n	8012436 <__gethex+0x110>
 80125e0:	1e71      	subs	r1, r6, #1
 80125e2:	4628      	mov	r0, r5
 80125e4:	f000 fd6a 	bl	80130bc <__any_on>
 80125e8:	2800      	cmp	r0, #0
 80125ea:	d1ed      	bne.n	80125c8 <__gethex+0x2a2>
 80125ec:	4629      	mov	r1, r5
 80125ee:	9802      	ldr	r0, [sp, #8]
 80125f0:	f000 f9bb 	bl	801296a <_Bfree>
 80125f4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80125f6:	2300      	movs	r3, #0
 80125f8:	6013      	str	r3, [r2, #0]
 80125fa:	2750      	movs	r7, #80	; 0x50
 80125fc:	e71b      	b.n	8012436 <__gethex+0x110>
 80125fe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012600:	2b00      	cmp	r3, #0
 8012602:	d0e1      	beq.n	80125c8 <__gethex+0x2a2>
 8012604:	e7f2      	b.n	80125ec <__gethex+0x2c6>
 8012606:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012608:	2b00      	cmp	r3, #0
 801260a:	d1dd      	bne.n	80125c8 <__gethex+0x2a2>
 801260c:	e7ee      	b.n	80125ec <__gethex+0x2c6>
 801260e:	1e67      	subs	r7, r4, #1
 8012610:	f1ba 0f00 	cmp.w	sl, #0
 8012614:	d131      	bne.n	801267a <__gethex+0x354>
 8012616:	b127      	cbz	r7, 8012622 <__gethex+0x2fc>
 8012618:	4639      	mov	r1, r7
 801261a:	4628      	mov	r0, r5
 801261c:	f000 fd4e 	bl	80130bc <__any_on>
 8012620:	4682      	mov	sl, r0
 8012622:	117a      	asrs	r2, r7, #5
 8012624:	2301      	movs	r3, #1
 8012626:	f007 071f 	and.w	r7, r7, #31
 801262a:	fa03 f707 	lsl.w	r7, r3, r7
 801262e:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8012632:	4621      	mov	r1, r4
 8012634:	421f      	tst	r7, r3
 8012636:	4628      	mov	r0, r5
 8012638:	bf18      	it	ne
 801263a:	f04a 0a02 	orrne.w	sl, sl, #2
 801263e:	1b36      	subs	r6, r6, r4
 8012640:	f7ff fe22 	bl	8012288 <rshift>
 8012644:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8012648:	2702      	movs	r7, #2
 801264a:	f1ba 0f00 	cmp.w	sl, #0
 801264e:	d048      	beq.n	80126e2 <__gethex+0x3bc>
 8012650:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012654:	2b02      	cmp	r3, #2
 8012656:	d015      	beq.n	8012684 <__gethex+0x35e>
 8012658:	2b03      	cmp	r3, #3
 801265a:	d017      	beq.n	801268c <__gethex+0x366>
 801265c:	2b01      	cmp	r3, #1
 801265e:	d109      	bne.n	8012674 <__gethex+0x34e>
 8012660:	f01a 0f02 	tst.w	sl, #2
 8012664:	d006      	beq.n	8012674 <__gethex+0x34e>
 8012666:	f8d9 3000 	ldr.w	r3, [r9]
 801266a:	ea4a 0a03 	orr.w	sl, sl, r3
 801266e:	f01a 0f01 	tst.w	sl, #1
 8012672:	d10e      	bne.n	8012692 <__gethex+0x36c>
 8012674:	f047 0710 	orr.w	r7, r7, #16
 8012678:	e033      	b.n	80126e2 <__gethex+0x3bc>
 801267a:	f04f 0a01 	mov.w	sl, #1
 801267e:	e7d0      	b.n	8012622 <__gethex+0x2fc>
 8012680:	2701      	movs	r7, #1
 8012682:	e7e2      	b.n	801264a <__gethex+0x324>
 8012684:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012686:	f1c3 0301 	rsb	r3, r3, #1
 801268a:	9315      	str	r3, [sp, #84]	; 0x54
 801268c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801268e:	2b00      	cmp	r3, #0
 8012690:	d0f0      	beq.n	8012674 <__gethex+0x34e>
 8012692:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8012696:	f105 0314 	add.w	r3, r5, #20
 801269a:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 801269e:	eb03 010a 	add.w	r1, r3, sl
 80126a2:	f04f 0c00 	mov.w	ip, #0
 80126a6:	4618      	mov	r0, r3
 80126a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80126ac:	f1b2 3fff 	cmp.w	r2, #4294967295
 80126b0:	d01c      	beq.n	80126ec <__gethex+0x3c6>
 80126b2:	3201      	adds	r2, #1
 80126b4:	6002      	str	r2, [r0, #0]
 80126b6:	2f02      	cmp	r7, #2
 80126b8:	f105 0314 	add.w	r3, r5, #20
 80126bc:	d138      	bne.n	8012730 <__gethex+0x40a>
 80126be:	f8d8 2000 	ldr.w	r2, [r8]
 80126c2:	3a01      	subs	r2, #1
 80126c4:	42b2      	cmp	r2, r6
 80126c6:	d10a      	bne.n	80126de <__gethex+0x3b8>
 80126c8:	1171      	asrs	r1, r6, #5
 80126ca:	2201      	movs	r2, #1
 80126cc:	f006 061f 	and.w	r6, r6, #31
 80126d0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80126d4:	fa02 f606 	lsl.w	r6, r2, r6
 80126d8:	421e      	tst	r6, r3
 80126da:	bf18      	it	ne
 80126dc:	4617      	movne	r7, r2
 80126de:	f047 0720 	orr.w	r7, r7, #32
 80126e2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80126e4:	601d      	str	r5, [r3, #0]
 80126e6:	9b06      	ldr	r3, [sp, #24]
 80126e8:	601c      	str	r4, [r3, #0]
 80126ea:	e6a4      	b.n	8012436 <__gethex+0x110>
 80126ec:	4299      	cmp	r1, r3
 80126ee:	f843 cc04 	str.w	ip, [r3, #-4]
 80126f2:	d8d8      	bhi.n	80126a6 <__gethex+0x380>
 80126f4:	68ab      	ldr	r3, [r5, #8]
 80126f6:	4599      	cmp	r9, r3
 80126f8:	db12      	blt.n	8012720 <__gethex+0x3fa>
 80126fa:	6869      	ldr	r1, [r5, #4]
 80126fc:	9802      	ldr	r0, [sp, #8]
 80126fe:	3101      	adds	r1, #1
 8012700:	f000 f8ff 	bl	8012902 <_Balloc>
 8012704:	692a      	ldr	r2, [r5, #16]
 8012706:	3202      	adds	r2, #2
 8012708:	f105 010c 	add.w	r1, r5, #12
 801270c:	4683      	mov	fp, r0
 801270e:	0092      	lsls	r2, r2, #2
 8012710:	300c      	adds	r0, #12
 8012712:	f7fe fdf9 	bl	8011308 <memcpy>
 8012716:	4629      	mov	r1, r5
 8012718:	9802      	ldr	r0, [sp, #8]
 801271a:	f000 f926 	bl	801296a <_Bfree>
 801271e:	465d      	mov	r5, fp
 8012720:	692b      	ldr	r3, [r5, #16]
 8012722:	1c5a      	adds	r2, r3, #1
 8012724:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8012728:	612a      	str	r2, [r5, #16]
 801272a:	2201      	movs	r2, #1
 801272c:	615a      	str	r2, [r3, #20]
 801272e:	e7c2      	b.n	80126b6 <__gethex+0x390>
 8012730:	692a      	ldr	r2, [r5, #16]
 8012732:	454a      	cmp	r2, r9
 8012734:	dd0b      	ble.n	801274e <__gethex+0x428>
 8012736:	2101      	movs	r1, #1
 8012738:	4628      	mov	r0, r5
 801273a:	f7ff fda5 	bl	8012288 <rshift>
 801273e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012742:	3401      	adds	r4, #1
 8012744:	42a3      	cmp	r3, r4
 8012746:	f6ff aed9 	blt.w	80124fc <__gethex+0x1d6>
 801274a:	2701      	movs	r7, #1
 801274c:	e7c7      	b.n	80126de <__gethex+0x3b8>
 801274e:	f016 061f 	ands.w	r6, r6, #31
 8012752:	d0fa      	beq.n	801274a <__gethex+0x424>
 8012754:	449a      	add	sl, r3
 8012756:	f1c6 0620 	rsb	r6, r6, #32
 801275a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801275e:	f000 f994 	bl	8012a8a <__hi0bits>
 8012762:	42b0      	cmp	r0, r6
 8012764:	dbe7      	blt.n	8012736 <__gethex+0x410>
 8012766:	e7f0      	b.n	801274a <__gethex+0x424>

08012768 <L_shift>:
 8012768:	f1c2 0208 	rsb	r2, r2, #8
 801276c:	0092      	lsls	r2, r2, #2
 801276e:	b570      	push	{r4, r5, r6, lr}
 8012770:	f1c2 0620 	rsb	r6, r2, #32
 8012774:	6843      	ldr	r3, [r0, #4]
 8012776:	6804      	ldr	r4, [r0, #0]
 8012778:	fa03 f506 	lsl.w	r5, r3, r6
 801277c:	432c      	orrs	r4, r5
 801277e:	40d3      	lsrs	r3, r2
 8012780:	6004      	str	r4, [r0, #0]
 8012782:	f840 3f04 	str.w	r3, [r0, #4]!
 8012786:	4288      	cmp	r0, r1
 8012788:	d3f4      	bcc.n	8012774 <L_shift+0xc>
 801278a:	bd70      	pop	{r4, r5, r6, pc}

0801278c <__match>:
 801278c:	b530      	push	{r4, r5, lr}
 801278e:	6803      	ldr	r3, [r0, #0]
 8012790:	3301      	adds	r3, #1
 8012792:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012796:	b914      	cbnz	r4, 801279e <__match+0x12>
 8012798:	6003      	str	r3, [r0, #0]
 801279a:	2001      	movs	r0, #1
 801279c:	bd30      	pop	{r4, r5, pc}
 801279e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80127a2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80127a6:	2d19      	cmp	r5, #25
 80127a8:	bf98      	it	ls
 80127aa:	3220      	addls	r2, #32
 80127ac:	42a2      	cmp	r2, r4
 80127ae:	d0f0      	beq.n	8012792 <__match+0x6>
 80127b0:	2000      	movs	r0, #0
 80127b2:	e7f3      	b.n	801279c <__match+0x10>

080127b4 <__hexnan>:
 80127b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127b8:	680b      	ldr	r3, [r1, #0]
 80127ba:	6801      	ldr	r1, [r0, #0]
 80127bc:	115f      	asrs	r7, r3, #5
 80127be:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80127c2:	f013 031f 	ands.w	r3, r3, #31
 80127c6:	b087      	sub	sp, #28
 80127c8:	bf18      	it	ne
 80127ca:	3704      	addne	r7, #4
 80127cc:	2500      	movs	r5, #0
 80127ce:	1f3e      	subs	r6, r7, #4
 80127d0:	4682      	mov	sl, r0
 80127d2:	4690      	mov	r8, r2
 80127d4:	9301      	str	r3, [sp, #4]
 80127d6:	f847 5c04 	str.w	r5, [r7, #-4]
 80127da:	46b1      	mov	r9, r6
 80127dc:	4634      	mov	r4, r6
 80127de:	9502      	str	r5, [sp, #8]
 80127e0:	46ab      	mov	fp, r5
 80127e2:	784a      	ldrb	r2, [r1, #1]
 80127e4:	1c4b      	adds	r3, r1, #1
 80127e6:	9303      	str	r3, [sp, #12]
 80127e8:	b342      	cbz	r2, 801283c <__hexnan+0x88>
 80127ea:	4610      	mov	r0, r2
 80127ec:	9105      	str	r1, [sp, #20]
 80127ee:	9204      	str	r2, [sp, #16]
 80127f0:	f7ff fd84 	bl	80122fc <__hexdig_fun>
 80127f4:	2800      	cmp	r0, #0
 80127f6:	d143      	bne.n	8012880 <__hexnan+0xcc>
 80127f8:	9a04      	ldr	r2, [sp, #16]
 80127fa:	9905      	ldr	r1, [sp, #20]
 80127fc:	2a20      	cmp	r2, #32
 80127fe:	d818      	bhi.n	8012832 <__hexnan+0x7e>
 8012800:	9b02      	ldr	r3, [sp, #8]
 8012802:	459b      	cmp	fp, r3
 8012804:	dd13      	ble.n	801282e <__hexnan+0x7a>
 8012806:	454c      	cmp	r4, r9
 8012808:	d206      	bcs.n	8012818 <__hexnan+0x64>
 801280a:	2d07      	cmp	r5, #7
 801280c:	dc04      	bgt.n	8012818 <__hexnan+0x64>
 801280e:	462a      	mov	r2, r5
 8012810:	4649      	mov	r1, r9
 8012812:	4620      	mov	r0, r4
 8012814:	f7ff ffa8 	bl	8012768 <L_shift>
 8012818:	4544      	cmp	r4, r8
 801281a:	d944      	bls.n	80128a6 <__hexnan+0xf2>
 801281c:	2300      	movs	r3, #0
 801281e:	f1a4 0904 	sub.w	r9, r4, #4
 8012822:	f844 3c04 	str.w	r3, [r4, #-4]
 8012826:	f8cd b008 	str.w	fp, [sp, #8]
 801282a:	464c      	mov	r4, r9
 801282c:	461d      	mov	r5, r3
 801282e:	9903      	ldr	r1, [sp, #12]
 8012830:	e7d7      	b.n	80127e2 <__hexnan+0x2e>
 8012832:	2a29      	cmp	r2, #41	; 0x29
 8012834:	d14a      	bne.n	80128cc <__hexnan+0x118>
 8012836:	3102      	adds	r1, #2
 8012838:	f8ca 1000 	str.w	r1, [sl]
 801283c:	f1bb 0f00 	cmp.w	fp, #0
 8012840:	d044      	beq.n	80128cc <__hexnan+0x118>
 8012842:	454c      	cmp	r4, r9
 8012844:	d206      	bcs.n	8012854 <__hexnan+0xa0>
 8012846:	2d07      	cmp	r5, #7
 8012848:	dc04      	bgt.n	8012854 <__hexnan+0xa0>
 801284a:	462a      	mov	r2, r5
 801284c:	4649      	mov	r1, r9
 801284e:	4620      	mov	r0, r4
 8012850:	f7ff ff8a 	bl	8012768 <L_shift>
 8012854:	4544      	cmp	r4, r8
 8012856:	d928      	bls.n	80128aa <__hexnan+0xf6>
 8012858:	4643      	mov	r3, r8
 801285a:	f854 2b04 	ldr.w	r2, [r4], #4
 801285e:	f843 2b04 	str.w	r2, [r3], #4
 8012862:	42a6      	cmp	r6, r4
 8012864:	d2f9      	bcs.n	801285a <__hexnan+0xa6>
 8012866:	2200      	movs	r2, #0
 8012868:	f843 2b04 	str.w	r2, [r3], #4
 801286c:	429e      	cmp	r6, r3
 801286e:	d2fb      	bcs.n	8012868 <__hexnan+0xb4>
 8012870:	6833      	ldr	r3, [r6, #0]
 8012872:	b91b      	cbnz	r3, 801287c <__hexnan+0xc8>
 8012874:	4546      	cmp	r6, r8
 8012876:	d127      	bne.n	80128c8 <__hexnan+0x114>
 8012878:	2301      	movs	r3, #1
 801287a:	6033      	str	r3, [r6, #0]
 801287c:	2005      	movs	r0, #5
 801287e:	e026      	b.n	80128ce <__hexnan+0x11a>
 8012880:	3501      	adds	r5, #1
 8012882:	2d08      	cmp	r5, #8
 8012884:	f10b 0b01 	add.w	fp, fp, #1
 8012888:	dd06      	ble.n	8012898 <__hexnan+0xe4>
 801288a:	4544      	cmp	r4, r8
 801288c:	d9cf      	bls.n	801282e <__hexnan+0x7a>
 801288e:	2300      	movs	r3, #0
 8012890:	f844 3c04 	str.w	r3, [r4, #-4]
 8012894:	2501      	movs	r5, #1
 8012896:	3c04      	subs	r4, #4
 8012898:	6822      	ldr	r2, [r4, #0]
 801289a:	f000 000f 	and.w	r0, r0, #15
 801289e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80128a2:	6020      	str	r0, [r4, #0]
 80128a4:	e7c3      	b.n	801282e <__hexnan+0x7a>
 80128a6:	2508      	movs	r5, #8
 80128a8:	e7c1      	b.n	801282e <__hexnan+0x7a>
 80128aa:	9b01      	ldr	r3, [sp, #4]
 80128ac:	2b00      	cmp	r3, #0
 80128ae:	d0df      	beq.n	8012870 <__hexnan+0xbc>
 80128b0:	f04f 32ff 	mov.w	r2, #4294967295
 80128b4:	f1c3 0320 	rsb	r3, r3, #32
 80128b8:	fa22 f303 	lsr.w	r3, r2, r3
 80128bc:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80128c0:	401a      	ands	r2, r3
 80128c2:	f847 2c04 	str.w	r2, [r7, #-4]
 80128c6:	e7d3      	b.n	8012870 <__hexnan+0xbc>
 80128c8:	3e04      	subs	r6, #4
 80128ca:	e7d1      	b.n	8012870 <__hexnan+0xbc>
 80128cc:	2004      	movs	r0, #4
 80128ce:	b007      	add	sp, #28
 80128d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080128d4 <__locale_ctype_ptr_l>:
 80128d4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80128d8:	4770      	bx	lr

080128da <__localeconv_l>:
 80128da:	30f0      	adds	r0, #240	; 0xf0
 80128dc:	4770      	bx	lr

080128de <__ascii_mbtowc>:
 80128de:	b082      	sub	sp, #8
 80128e0:	b901      	cbnz	r1, 80128e4 <__ascii_mbtowc+0x6>
 80128e2:	a901      	add	r1, sp, #4
 80128e4:	b142      	cbz	r2, 80128f8 <__ascii_mbtowc+0x1a>
 80128e6:	b14b      	cbz	r3, 80128fc <__ascii_mbtowc+0x1e>
 80128e8:	7813      	ldrb	r3, [r2, #0]
 80128ea:	600b      	str	r3, [r1, #0]
 80128ec:	7812      	ldrb	r2, [r2, #0]
 80128ee:	1c10      	adds	r0, r2, #0
 80128f0:	bf18      	it	ne
 80128f2:	2001      	movne	r0, #1
 80128f4:	b002      	add	sp, #8
 80128f6:	4770      	bx	lr
 80128f8:	4610      	mov	r0, r2
 80128fa:	e7fb      	b.n	80128f4 <__ascii_mbtowc+0x16>
 80128fc:	f06f 0001 	mvn.w	r0, #1
 8012900:	e7f8      	b.n	80128f4 <__ascii_mbtowc+0x16>

08012902 <_Balloc>:
 8012902:	b570      	push	{r4, r5, r6, lr}
 8012904:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8012906:	4604      	mov	r4, r0
 8012908:	460e      	mov	r6, r1
 801290a:	b93d      	cbnz	r5, 801291c <_Balloc+0x1a>
 801290c:	2010      	movs	r0, #16
 801290e:	f000 ff5d 	bl	80137cc <malloc>
 8012912:	6260      	str	r0, [r4, #36]	; 0x24
 8012914:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8012918:	6005      	str	r5, [r0, #0]
 801291a:	60c5      	str	r5, [r0, #12]
 801291c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801291e:	68eb      	ldr	r3, [r5, #12]
 8012920:	b183      	cbz	r3, 8012944 <_Balloc+0x42>
 8012922:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012924:	68db      	ldr	r3, [r3, #12]
 8012926:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801292a:	b9b8      	cbnz	r0, 801295c <_Balloc+0x5a>
 801292c:	2101      	movs	r1, #1
 801292e:	fa01 f506 	lsl.w	r5, r1, r6
 8012932:	1d6a      	adds	r2, r5, #5
 8012934:	0092      	lsls	r2, r2, #2
 8012936:	4620      	mov	r0, r4
 8012938:	f000 fbe1 	bl	80130fe <_calloc_r>
 801293c:	b160      	cbz	r0, 8012958 <_Balloc+0x56>
 801293e:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8012942:	e00e      	b.n	8012962 <_Balloc+0x60>
 8012944:	2221      	movs	r2, #33	; 0x21
 8012946:	2104      	movs	r1, #4
 8012948:	4620      	mov	r0, r4
 801294a:	f000 fbd8 	bl	80130fe <_calloc_r>
 801294e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012950:	60e8      	str	r0, [r5, #12]
 8012952:	68db      	ldr	r3, [r3, #12]
 8012954:	2b00      	cmp	r3, #0
 8012956:	d1e4      	bne.n	8012922 <_Balloc+0x20>
 8012958:	2000      	movs	r0, #0
 801295a:	bd70      	pop	{r4, r5, r6, pc}
 801295c:	6802      	ldr	r2, [r0, #0]
 801295e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8012962:	2300      	movs	r3, #0
 8012964:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012968:	e7f7      	b.n	801295a <_Balloc+0x58>

0801296a <_Bfree>:
 801296a:	b570      	push	{r4, r5, r6, lr}
 801296c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 801296e:	4606      	mov	r6, r0
 8012970:	460d      	mov	r5, r1
 8012972:	b93c      	cbnz	r4, 8012984 <_Bfree+0x1a>
 8012974:	2010      	movs	r0, #16
 8012976:	f000 ff29 	bl	80137cc <malloc>
 801297a:	6270      	str	r0, [r6, #36]	; 0x24
 801297c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012980:	6004      	str	r4, [r0, #0]
 8012982:	60c4      	str	r4, [r0, #12]
 8012984:	b13d      	cbz	r5, 8012996 <_Bfree+0x2c>
 8012986:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8012988:	686a      	ldr	r2, [r5, #4]
 801298a:	68db      	ldr	r3, [r3, #12]
 801298c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012990:	6029      	str	r1, [r5, #0]
 8012992:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8012996:	bd70      	pop	{r4, r5, r6, pc}

08012998 <__multadd>:
 8012998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801299c:	690d      	ldr	r5, [r1, #16]
 801299e:	461f      	mov	r7, r3
 80129a0:	4606      	mov	r6, r0
 80129a2:	460c      	mov	r4, r1
 80129a4:	f101 0c14 	add.w	ip, r1, #20
 80129a8:	2300      	movs	r3, #0
 80129aa:	f8dc 0000 	ldr.w	r0, [ip]
 80129ae:	b281      	uxth	r1, r0
 80129b0:	fb02 7101 	mla	r1, r2, r1, r7
 80129b4:	0c0f      	lsrs	r7, r1, #16
 80129b6:	0c00      	lsrs	r0, r0, #16
 80129b8:	fb02 7000 	mla	r0, r2, r0, r7
 80129bc:	b289      	uxth	r1, r1
 80129be:	3301      	adds	r3, #1
 80129c0:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80129c4:	429d      	cmp	r5, r3
 80129c6:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80129ca:	f84c 1b04 	str.w	r1, [ip], #4
 80129ce:	dcec      	bgt.n	80129aa <__multadd+0x12>
 80129d0:	b1d7      	cbz	r7, 8012a08 <__multadd+0x70>
 80129d2:	68a3      	ldr	r3, [r4, #8]
 80129d4:	42ab      	cmp	r3, r5
 80129d6:	dc12      	bgt.n	80129fe <__multadd+0x66>
 80129d8:	6861      	ldr	r1, [r4, #4]
 80129da:	4630      	mov	r0, r6
 80129dc:	3101      	adds	r1, #1
 80129de:	f7ff ff90 	bl	8012902 <_Balloc>
 80129e2:	6922      	ldr	r2, [r4, #16]
 80129e4:	3202      	adds	r2, #2
 80129e6:	f104 010c 	add.w	r1, r4, #12
 80129ea:	4680      	mov	r8, r0
 80129ec:	0092      	lsls	r2, r2, #2
 80129ee:	300c      	adds	r0, #12
 80129f0:	f7fe fc8a 	bl	8011308 <memcpy>
 80129f4:	4621      	mov	r1, r4
 80129f6:	4630      	mov	r0, r6
 80129f8:	f7ff ffb7 	bl	801296a <_Bfree>
 80129fc:	4644      	mov	r4, r8
 80129fe:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012a02:	3501      	adds	r5, #1
 8012a04:	615f      	str	r7, [r3, #20]
 8012a06:	6125      	str	r5, [r4, #16]
 8012a08:	4620      	mov	r0, r4
 8012a0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012a0e <__s2b>:
 8012a0e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012a12:	460c      	mov	r4, r1
 8012a14:	4615      	mov	r5, r2
 8012a16:	461f      	mov	r7, r3
 8012a18:	2209      	movs	r2, #9
 8012a1a:	3308      	adds	r3, #8
 8012a1c:	4606      	mov	r6, r0
 8012a1e:	fb93 f3f2 	sdiv	r3, r3, r2
 8012a22:	2100      	movs	r1, #0
 8012a24:	2201      	movs	r2, #1
 8012a26:	429a      	cmp	r2, r3
 8012a28:	db20      	blt.n	8012a6c <__s2b+0x5e>
 8012a2a:	4630      	mov	r0, r6
 8012a2c:	f7ff ff69 	bl	8012902 <_Balloc>
 8012a30:	9b08      	ldr	r3, [sp, #32]
 8012a32:	6143      	str	r3, [r0, #20]
 8012a34:	2d09      	cmp	r5, #9
 8012a36:	f04f 0301 	mov.w	r3, #1
 8012a3a:	6103      	str	r3, [r0, #16]
 8012a3c:	dd19      	ble.n	8012a72 <__s2b+0x64>
 8012a3e:	f104 0809 	add.w	r8, r4, #9
 8012a42:	46c1      	mov	r9, r8
 8012a44:	442c      	add	r4, r5
 8012a46:	f819 3b01 	ldrb.w	r3, [r9], #1
 8012a4a:	4601      	mov	r1, r0
 8012a4c:	3b30      	subs	r3, #48	; 0x30
 8012a4e:	220a      	movs	r2, #10
 8012a50:	4630      	mov	r0, r6
 8012a52:	f7ff ffa1 	bl	8012998 <__multadd>
 8012a56:	45a1      	cmp	r9, r4
 8012a58:	d1f5      	bne.n	8012a46 <__s2b+0x38>
 8012a5a:	eb08 0405 	add.w	r4, r8, r5
 8012a5e:	3c08      	subs	r4, #8
 8012a60:	1b2d      	subs	r5, r5, r4
 8012a62:	1963      	adds	r3, r4, r5
 8012a64:	42bb      	cmp	r3, r7
 8012a66:	db07      	blt.n	8012a78 <__s2b+0x6a>
 8012a68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012a6c:	0052      	lsls	r2, r2, #1
 8012a6e:	3101      	adds	r1, #1
 8012a70:	e7d9      	b.n	8012a26 <__s2b+0x18>
 8012a72:	340a      	adds	r4, #10
 8012a74:	2509      	movs	r5, #9
 8012a76:	e7f3      	b.n	8012a60 <__s2b+0x52>
 8012a78:	f814 3b01 	ldrb.w	r3, [r4], #1
 8012a7c:	4601      	mov	r1, r0
 8012a7e:	3b30      	subs	r3, #48	; 0x30
 8012a80:	220a      	movs	r2, #10
 8012a82:	4630      	mov	r0, r6
 8012a84:	f7ff ff88 	bl	8012998 <__multadd>
 8012a88:	e7eb      	b.n	8012a62 <__s2b+0x54>

08012a8a <__hi0bits>:
 8012a8a:	0c02      	lsrs	r2, r0, #16
 8012a8c:	0412      	lsls	r2, r2, #16
 8012a8e:	4603      	mov	r3, r0
 8012a90:	b9b2      	cbnz	r2, 8012ac0 <__hi0bits+0x36>
 8012a92:	0403      	lsls	r3, r0, #16
 8012a94:	2010      	movs	r0, #16
 8012a96:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8012a9a:	bf04      	itt	eq
 8012a9c:	021b      	lsleq	r3, r3, #8
 8012a9e:	3008      	addeq	r0, #8
 8012aa0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8012aa4:	bf04      	itt	eq
 8012aa6:	011b      	lsleq	r3, r3, #4
 8012aa8:	3004      	addeq	r0, #4
 8012aaa:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8012aae:	bf04      	itt	eq
 8012ab0:	009b      	lsleq	r3, r3, #2
 8012ab2:	3002      	addeq	r0, #2
 8012ab4:	2b00      	cmp	r3, #0
 8012ab6:	db06      	blt.n	8012ac6 <__hi0bits+0x3c>
 8012ab8:	005b      	lsls	r3, r3, #1
 8012aba:	d503      	bpl.n	8012ac4 <__hi0bits+0x3a>
 8012abc:	3001      	adds	r0, #1
 8012abe:	4770      	bx	lr
 8012ac0:	2000      	movs	r0, #0
 8012ac2:	e7e8      	b.n	8012a96 <__hi0bits+0xc>
 8012ac4:	2020      	movs	r0, #32
 8012ac6:	4770      	bx	lr

08012ac8 <__lo0bits>:
 8012ac8:	6803      	ldr	r3, [r0, #0]
 8012aca:	f013 0207 	ands.w	r2, r3, #7
 8012ace:	4601      	mov	r1, r0
 8012ad0:	d00b      	beq.n	8012aea <__lo0bits+0x22>
 8012ad2:	07da      	lsls	r2, r3, #31
 8012ad4:	d423      	bmi.n	8012b1e <__lo0bits+0x56>
 8012ad6:	0798      	lsls	r0, r3, #30
 8012ad8:	bf49      	itett	mi
 8012ada:	085b      	lsrmi	r3, r3, #1
 8012adc:	089b      	lsrpl	r3, r3, #2
 8012ade:	2001      	movmi	r0, #1
 8012ae0:	600b      	strmi	r3, [r1, #0]
 8012ae2:	bf5c      	itt	pl
 8012ae4:	600b      	strpl	r3, [r1, #0]
 8012ae6:	2002      	movpl	r0, #2
 8012ae8:	4770      	bx	lr
 8012aea:	b298      	uxth	r0, r3
 8012aec:	b9a8      	cbnz	r0, 8012b1a <__lo0bits+0x52>
 8012aee:	0c1b      	lsrs	r3, r3, #16
 8012af0:	2010      	movs	r0, #16
 8012af2:	f013 0fff 	tst.w	r3, #255	; 0xff
 8012af6:	bf04      	itt	eq
 8012af8:	0a1b      	lsreq	r3, r3, #8
 8012afa:	3008      	addeq	r0, #8
 8012afc:	071a      	lsls	r2, r3, #28
 8012afe:	bf04      	itt	eq
 8012b00:	091b      	lsreq	r3, r3, #4
 8012b02:	3004      	addeq	r0, #4
 8012b04:	079a      	lsls	r2, r3, #30
 8012b06:	bf04      	itt	eq
 8012b08:	089b      	lsreq	r3, r3, #2
 8012b0a:	3002      	addeq	r0, #2
 8012b0c:	07da      	lsls	r2, r3, #31
 8012b0e:	d402      	bmi.n	8012b16 <__lo0bits+0x4e>
 8012b10:	085b      	lsrs	r3, r3, #1
 8012b12:	d006      	beq.n	8012b22 <__lo0bits+0x5a>
 8012b14:	3001      	adds	r0, #1
 8012b16:	600b      	str	r3, [r1, #0]
 8012b18:	4770      	bx	lr
 8012b1a:	4610      	mov	r0, r2
 8012b1c:	e7e9      	b.n	8012af2 <__lo0bits+0x2a>
 8012b1e:	2000      	movs	r0, #0
 8012b20:	4770      	bx	lr
 8012b22:	2020      	movs	r0, #32
 8012b24:	4770      	bx	lr

08012b26 <__i2b>:
 8012b26:	b510      	push	{r4, lr}
 8012b28:	460c      	mov	r4, r1
 8012b2a:	2101      	movs	r1, #1
 8012b2c:	f7ff fee9 	bl	8012902 <_Balloc>
 8012b30:	2201      	movs	r2, #1
 8012b32:	6144      	str	r4, [r0, #20]
 8012b34:	6102      	str	r2, [r0, #16]
 8012b36:	bd10      	pop	{r4, pc}

08012b38 <__multiply>:
 8012b38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b3c:	4614      	mov	r4, r2
 8012b3e:	690a      	ldr	r2, [r1, #16]
 8012b40:	6923      	ldr	r3, [r4, #16]
 8012b42:	429a      	cmp	r2, r3
 8012b44:	bfb8      	it	lt
 8012b46:	460b      	movlt	r3, r1
 8012b48:	4688      	mov	r8, r1
 8012b4a:	bfbc      	itt	lt
 8012b4c:	46a0      	movlt	r8, r4
 8012b4e:	461c      	movlt	r4, r3
 8012b50:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8012b54:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8012b58:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012b5c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8012b60:	eb07 0609 	add.w	r6, r7, r9
 8012b64:	42b3      	cmp	r3, r6
 8012b66:	bfb8      	it	lt
 8012b68:	3101      	addlt	r1, #1
 8012b6a:	f7ff feca 	bl	8012902 <_Balloc>
 8012b6e:	f100 0514 	add.w	r5, r0, #20
 8012b72:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8012b76:	462b      	mov	r3, r5
 8012b78:	2200      	movs	r2, #0
 8012b7a:	4573      	cmp	r3, lr
 8012b7c:	d316      	bcc.n	8012bac <__multiply+0x74>
 8012b7e:	f104 0214 	add.w	r2, r4, #20
 8012b82:	f108 0114 	add.w	r1, r8, #20
 8012b86:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8012b8a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8012b8e:	9300      	str	r3, [sp, #0]
 8012b90:	9b00      	ldr	r3, [sp, #0]
 8012b92:	9201      	str	r2, [sp, #4]
 8012b94:	4293      	cmp	r3, r2
 8012b96:	d80c      	bhi.n	8012bb2 <__multiply+0x7a>
 8012b98:	2e00      	cmp	r6, #0
 8012b9a:	dd03      	ble.n	8012ba4 <__multiply+0x6c>
 8012b9c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8012ba0:	2b00      	cmp	r3, #0
 8012ba2:	d05d      	beq.n	8012c60 <__multiply+0x128>
 8012ba4:	6106      	str	r6, [r0, #16]
 8012ba6:	b003      	add	sp, #12
 8012ba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012bac:	f843 2b04 	str.w	r2, [r3], #4
 8012bb0:	e7e3      	b.n	8012b7a <__multiply+0x42>
 8012bb2:	f8b2 b000 	ldrh.w	fp, [r2]
 8012bb6:	f1bb 0f00 	cmp.w	fp, #0
 8012bba:	d023      	beq.n	8012c04 <__multiply+0xcc>
 8012bbc:	4689      	mov	r9, r1
 8012bbe:	46ac      	mov	ip, r5
 8012bc0:	f04f 0800 	mov.w	r8, #0
 8012bc4:	f859 4b04 	ldr.w	r4, [r9], #4
 8012bc8:	f8dc a000 	ldr.w	sl, [ip]
 8012bcc:	b2a3      	uxth	r3, r4
 8012bce:	fa1f fa8a 	uxth.w	sl, sl
 8012bd2:	fb0b a303 	mla	r3, fp, r3, sl
 8012bd6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8012bda:	f8dc 4000 	ldr.w	r4, [ip]
 8012bde:	4443      	add	r3, r8
 8012be0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8012be4:	fb0b 840a 	mla	r4, fp, sl, r8
 8012be8:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8012bec:	46e2      	mov	sl, ip
 8012bee:	b29b      	uxth	r3, r3
 8012bf0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8012bf4:	454f      	cmp	r7, r9
 8012bf6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8012bfa:	f84a 3b04 	str.w	r3, [sl], #4
 8012bfe:	d82b      	bhi.n	8012c58 <__multiply+0x120>
 8012c00:	f8cc 8004 	str.w	r8, [ip, #4]
 8012c04:	9b01      	ldr	r3, [sp, #4]
 8012c06:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8012c0a:	3204      	adds	r2, #4
 8012c0c:	f1ba 0f00 	cmp.w	sl, #0
 8012c10:	d020      	beq.n	8012c54 <__multiply+0x11c>
 8012c12:	682b      	ldr	r3, [r5, #0]
 8012c14:	4689      	mov	r9, r1
 8012c16:	46a8      	mov	r8, r5
 8012c18:	f04f 0b00 	mov.w	fp, #0
 8012c1c:	f8b9 c000 	ldrh.w	ip, [r9]
 8012c20:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8012c24:	fb0a 440c 	mla	r4, sl, ip, r4
 8012c28:	445c      	add	r4, fp
 8012c2a:	46c4      	mov	ip, r8
 8012c2c:	b29b      	uxth	r3, r3
 8012c2e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8012c32:	f84c 3b04 	str.w	r3, [ip], #4
 8012c36:	f859 3b04 	ldr.w	r3, [r9], #4
 8012c3a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8012c3e:	0c1b      	lsrs	r3, r3, #16
 8012c40:	fb0a b303 	mla	r3, sl, r3, fp
 8012c44:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8012c48:	454f      	cmp	r7, r9
 8012c4a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8012c4e:	d805      	bhi.n	8012c5c <__multiply+0x124>
 8012c50:	f8c8 3004 	str.w	r3, [r8, #4]
 8012c54:	3504      	adds	r5, #4
 8012c56:	e79b      	b.n	8012b90 <__multiply+0x58>
 8012c58:	46d4      	mov	ip, sl
 8012c5a:	e7b3      	b.n	8012bc4 <__multiply+0x8c>
 8012c5c:	46e0      	mov	r8, ip
 8012c5e:	e7dd      	b.n	8012c1c <__multiply+0xe4>
 8012c60:	3e01      	subs	r6, #1
 8012c62:	e799      	b.n	8012b98 <__multiply+0x60>

08012c64 <__pow5mult>:
 8012c64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012c68:	4615      	mov	r5, r2
 8012c6a:	f012 0203 	ands.w	r2, r2, #3
 8012c6e:	4606      	mov	r6, r0
 8012c70:	460f      	mov	r7, r1
 8012c72:	d007      	beq.n	8012c84 <__pow5mult+0x20>
 8012c74:	3a01      	subs	r2, #1
 8012c76:	4c21      	ldr	r4, [pc, #132]	; (8012cfc <__pow5mult+0x98>)
 8012c78:	2300      	movs	r3, #0
 8012c7a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012c7e:	f7ff fe8b 	bl	8012998 <__multadd>
 8012c82:	4607      	mov	r7, r0
 8012c84:	10ad      	asrs	r5, r5, #2
 8012c86:	d035      	beq.n	8012cf4 <__pow5mult+0x90>
 8012c88:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8012c8a:	b93c      	cbnz	r4, 8012c9c <__pow5mult+0x38>
 8012c8c:	2010      	movs	r0, #16
 8012c8e:	f000 fd9d 	bl	80137cc <malloc>
 8012c92:	6270      	str	r0, [r6, #36]	; 0x24
 8012c94:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012c98:	6004      	str	r4, [r0, #0]
 8012c9a:	60c4      	str	r4, [r0, #12]
 8012c9c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8012ca0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012ca4:	b94c      	cbnz	r4, 8012cba <__pow5mult+0x56>
 8012ca6:	f240 2171 	movw	r1, #625	; 0x271
 8012caa:	4630      	mov	r0, r6
 8012cac:	f7ff ff3b 	bl	8012b26 <__i2b>
 8012cb0:	2300      	movs	r3, #0
 8012cb2:	f8c8 0008 	str.w	r0, [r8, #8]
 8012cb6:	4604      	mov	r4, r0
 8012cb8:	6003      	str	r3, [r0, #0]
 8012cba:	f04f 0800 	mov.w	r8, #0
 8012cbe:	07eb      	lsls	r3, r5, #31
 8012cc0:	d50a      	bpl.n	8012cd8 <__pow5mult+0x74>
 8012cc2:	4639      	mov	r1, r7
 8012cc4:	4622      	mov	r2, r4
 8012cc6:	4630      	mov	r0, r6
 8012cc8:	f7ff ff36 	bl	8012b38 <__multiply>
 8012ccc:	4639      	mov	r1, r7
 8012cce:	4681      	mov	r9, r0
 8012cd0:	4630      	mov	r0, r6
 8012cd2:	f7ff fe4a 	bl	801296a <_Bfree>
 8012cd6:	464f      	mov	r7, r9
 8012cd8:	106d      	asrs	r5, r5, #1
 8012cda:	d00b      	beq.n	8012cf4 <__pow5mult+0x90>
 8012cdc:	6820      	ldr	r0, [r4, #0]
 8012cde:	b938      	cbnz	r0, 8012cf0 <__pow5mult+0x8c>
 8012ce0:	4622      	mov	r2, r4
 8012ce2:	4621      	mov	r1, r4
 8012ce4:	4630      	mov	r0, r6
 8012ce6:	f7ff ff27 	bl	8012b38 <__multiply>
 8012cea:	6020      	str	r0, [r4, #0]
 8012cec:	f8c0 8000 	str.w	r8, [r0]
 8012cf0:	4604      	mov	r4, r0
 8012cf2:	e7e4      	b.n	8012cbe <__pow5mult+0x5a>
 8012cf4:	4638      	mov	r0, r7
 8012cf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012cfa:	bf00      	nop
 8012cfc:	08027428 	.word	0x08027428

08012d00 <__lshift>:
 8012d00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012d04:	460c      	mov	r4, r1
 8012d06:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012d0a:	6923      	ldr	r3, [r4, #16]
 8012d0c:	6849      	ldr	r1, [r1, #4]
 8012d0e:	eb0a 0903 	add.w	r9, sl, r3
 8012d12:	68a3      	ldr	r3, [r4, #8]
 8012d14:	4607      	mov	r7, r0
 8012d16:	4616      	mov	r6, r2
 8012d18:	f109 0501 	add.w	r5, r9, #1
 8012d1c:	42ab      	cmp	r3, r5
 8012d1e:	db32      	blt.n	8012d86 <__lshift+0x86>
 8012d20:	4638      	mov	r0, r7
 8012d22:	f7ff fdee 	bl	8012902 <_Balloc>
 8012d26:	2300      	movs	r3, #0
 8012d28:	4680      	mov	r8, r0
 8012d2a:	f100 0114 	add.w	r1, r0, #20
 8012d2e:	461a      	mov	r2, r3
 8012d30:	4553      	cmp	r3, sl
 8012d32:	db2b      	blt.n	8012d8c <__lshift+0x8c>
 8012d34:	6920      	ldr	r0, [r4, #16]
 8012d36:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012d3a:	f104 0314 	add.w	r3, r4, #20
 8012d3e:	f016 021f 	ands.w	r2, r6, #31
 8012d42:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012d46:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8012d4a:	d025      	beq.n	8012d98 <__lshift+0x98>
 8012d4c:	f1c2 0e20 	rsb	lr, r2, #32
 8012d50:	2000      	movs	r0, #0
 8012d52:	681e      	ldr	r6, [r3, #0]
 8012d54:	468a      	mov	sl, r1
 8012d56:	4096      	lsls	r6, r2
 8012d58:	4330      	orrs	r0, r6
 8012d5a:	f84a 0b04 	str.w	r0, [sl], #4
 8012d5e:	f853 0b04 	ldr.w	r0, [r3], #4
 8012d62:	459c      	cmp	ip, r3
 8012d64:	fa20 f00e 	lsr.w	r0, r0, lr
 8012d68:	d814      	bhi.n	8012d94 <__lshift+0x94>
 8012d6a:	6048      	str	r0, [r1, #4]
 8012d6c:	b108      	cbz	r0, 8012d72 <__lshift+0x72>
 8012d6e:	f109 0502 	add.w	r5, r9, #2
 8012d72:	3d01      	subs	r5, #1
 8012d74:	4638      	mov	r0, r7
 8012d76:	f8c8 5010 	str.w	r5, [r8, #16]
 8012d7a:	4621      	mov	r1, r4
 8012d7c:	f7ff fdf5 	bl	801296a <_Bfree>
 8012d80:	4640      	mov	r0, r8
 8012d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012d86:	3101      	adds	r1, #1
 8012d88:	005b      	lsls	r3, r3, #1
 8012d8a:	e7c7      	b.n	8012d1c <__lshift+0x1c>
 8012d8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8012d90:	3301      	adds	r3, #1
 8012d92:	e7cd      	b.n	8012d30 <__lshift+0x30>
 8012d94:	4651      	mov	r1, sl
 8012d96:	e7dc      	b.n	8012d52 <__lshift+0x52>
 8012d98:	3904      	subs	r1, #4
 8012d9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8012d9e:	f841 2f04 	str.w	r2, [r1, #4]!
 8012da2:	459c      	cmp	ip, r3
 8012da4:	d8f9      	bhi.n	8012d9a <__lshift+0x9a>
 8012da6:	e7e4      	b.n	8012d72 <__lshift+0x72>

08012da8 <__mcmp>:
 8012da8:	6903      	ldr	r3, [r0, #16]
 8012daa:	690a      	ldr	r2, [r1, #16]
 8012dac:	1a9b      	subs	r3, r3, r2
 8012dae:	b530      	push	{r4, r5, lr}
 8012db0:	d10c      	bne.n	8012dcc <__mcmp+0x24>
 8012db2:	0092      	lsls	r2, r2, #2
 8012db4:	3014      	adds	r0, #20
 8012db6:	3114      	adds	r1, #20
 8012db8:	1884      	adds	r4, r0, r2
 8012dba:	4411      	add	r1, r2
 8012dbc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8012dc0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8012dc4:	4295      	cmp	r5, r2
 8012dc6:	d003      	beq.n	8012dd0 <__mcmp+0x28>
 8012dc8:	d305      	bcc.n	8012dd6 <__mcmp+0x2e>
 8012dca:	2301      	movs	r3, #1
 8012dcc:	4618      	mov	r0, r3
 8012dce:	bd30      	pop	{r4, r5, pc}
 8012dd0:	42a0      	cmp	r0, r4
 8012dd2:	d3f3      	bcc.n	8012dbc <__mcmp+0x14>
 8012dd4:	e7fa      	b.n	8012dcc <__mcmp+0x24>
 8012dd6:	f04f 33ff 	mov.w	r3, #4294967295
 8012dda:	e7f7      	b.n	8012dcc <__mcmp+0x24>

08012ddc <__mdiff>:
 8012ddc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012de0:	460d      	mov	r5, r1
 8012de2:	4607      	mov	r7, r0
 8012de4:	4611      	mov	r1, r2
 8012de6:	4628      	mov	r0, r5
 8012de8:	4614      	mov	r4, r2
 8012dea:	f7ff ffdd 	bl	8012da8 <__mcmp>
 8012dee:	1e06      	subs	r6, r0, #0
 8012df0:	d108      	bne.n	8012e04 <__mdiff+0x28>
 8012df2:	4631      	mov	r1, r6
 8012df4:	4638      	mov	r0, r7
 8012df6:	f7ff fd84 	bl	8012902 <_Balloc>
 8012dfa:	2301      	movs	r3, #1
 8012dfc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8012e00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012e04:	bfa4      	itt	ge
 8012e06:	4623      	movge	r3, r4
 8012e08:	462c      	movge	r4, r5
 8012e0a:	4638      	mov	r0, r7
 8012e0c:	6861      	ldr	r1, [r4, #4]
 8012e0e:	bfa6      	itte	ge
 8012e10:	461d      	movge	r5, r3
 8012e12:	2600      	movge	r6, #0
 8012e14:	2601      	movlt	r6, #1
 8012e16:	f7ff fd74 	bl	8012902 <_Balloc>
 8012e1a:	692b      	ldr	r3, [r5, #16]
 8012e1c:	60c6      	str	r6, [r0, #12]
 8012e1e:	6926      	ldr	r6, [r4, #16]
 8012e20:	f105 0914 	add.w	r9, r5, #20
 8012e24:	f104 0214 	add.w	r2, r4, #20
 8012e28:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8012e2c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8012e30:	f100 0514 	add.w	r5, r0, #20
 8012e34:	f04f 0e00 	mov.w	lr, #0
 8012e38:	f852 ab04 	ldr.w	sl, [r2], #4
 8012e3c:	f859 4b04 	ldr.w	r4, [r9], #4
 8012e40:	fa1e f18a 	uxtah	r1, lr, sl
 8012e44:	b2a3      	uxth	r3, r4
 8012e46:	1ac9      	subs	r1, r1, r3
 8012e48:	0c23      	lsrs	r3, r4, #16
 8012e4a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8012e4e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8012e52:	b289      	uxth	r1, r1
 8012e54:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8012e58:	45c8      	cmp	r8, r9
 8012e5a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8012e5e:	4694      	mov	ip, r2
 8012e60:	f845 3b04 	str.w	r3, [r5], #4
 8012e64:	d8e8      	bhi.n	8012e38 <__mdiff+0x5c>
 8012e66:	45bc      	cmp	ip, r7
 8012e68:	d304      	bcc.n	8012e74 <__mdiff+0x98>
 8012e6a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8012e6e:	b183      	cbz	r3, 8012e92 <__mdiff+0xb6>
 8012e70:	6106      	str	r6, [r0, #16]
 8012e72:	e7c5      	b.n	8012e00 <__mdiff+0x24>
 8012e74:	f85c 1b04 	ldr.w	r1, [ip], #4
 8012e78:	fa1e f381 	uxtah	r3, lr, r1
 8012e7c:	141a      	asrs	r2, r3, #16
 8012e7e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8012e82:	b29b      	uxth	r3, r3
 8012e84:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012e88:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8012e8c:	f845 3b04 	str.w	r3, [r5], #4
 8012e90:	e7e9      	b.n	8012e66 <__mdiff+0x8a>
 8012e92:	3e01      	subs	r6, #1
 8012e94:	e7e9      	b.n	8012e6a <__mdiff+0x8e>
	...

08012e98 <__ulp>:
 8012e98:	4b12      	ldr	r3, [pc, #72]	; (8012ee4 <__ulp+0x4c>)
 8012e9a:	ee10 2a90 	vmov	r2, s1
 8012e9e:	401a      	ands	r2, r3
 8012ea0:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8012ea4:	2b00      	cmp	r3, #0
 8012ea6:	dd04      	ble.n	8012eb2 <__ulp+0x1a>
 8012ea8:	2000      	movs	r0, #0
 8012eaa:	4619      	mov	r1, r3
 8012eac:	ec41 0b10 	vmov	d0, r0, r1
 8012eb0:	4770      	bx	lr
 8012eb2:	425b      	negs	r3, r3
 8012eb4:	151b      	asrs	r3, r3, #20
 8012eb6:	2b13      	cmp	r3, #19
 8012eb8:	f04f 0000 	mov.w	r0, #0
 8012ebc:	f04f 0100 	mov.w	r1, #0
 8012ec0:	dc04      	bgt.n	8012ecc <__ulp+0x34>
 8012ec2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8012ec6:	fa42 f103 	asr.w	r1, r2, r3
 8012eca:	e7ef      	b.n	8012eac <__ulp+0x14>
 8012ecc:	3b14      	subs	r3, #20
 8012ece:	2b1e      	cmp	r3, #30
 8012ed0:	f04f 0201 	mov.w	r2, #1
 8012ed4:	bfda      	itte	le
 8012ed6:	f1c3 031f 	rsble	r3, r3, #31
 8012eda:	fa02 f303 	lslle.w	r3, r2, r3
 8012ede:	4613      	movgt	r3, r2
 8012ee0:	4618      	mov	r0, r3
 8012ee2:	e7e3      	b.n	8012eac <__ulp+0x14>
 8012ee4:	7ff00000 	.word	0x7ff00000

08012ee8 <__b2d>:
 8012ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012eea:	6905      	ldr	r5, [r0, #16]
 8012eec:	f100 0714 	add.w	r7, r0, #20
 8012ef0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8012ef4:	1f2e      	subs	r6, r5, #4
 8012ef6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8012efa:	4620      	mov	r0, r4
 8012efc:	f7ff fdc5 	bl	8012a8a <__hi0bits>
 8012f00:	f1c0 0320 	rsb	r3, r0, #32
 8012f04:	280a      	cmp	r0, #10
 8012f06:	600b      	str	r3, [r1, #0]
 8012f08:	f8df c074 	ldr.w	ip, [pc, #116]	; 8012f80 <__b2d+0x98>
 8012f0c:	dc14      	bgt.n	8012f38 <__b2d+0x50>
 8012f0e:	f1c0 0e0b 	rsb	lr, r0, #11
 8012f12:	fa24 f10e 	lsr.w	r1, r4, lr
 8012f16:	42b7      	cmp	r7, r6
 8012f18:	ea41 030c 	orr.w	r3, r1, ip
 8012f1c:	bf34      	ite	cc
 8012f1e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8012f22:	2100      	movcs	r1, #0
 8012f24:	3015      	adds	r0, #21
 8012f26:	fa04 f000 	lsl.w	r0, r4, r0
 8012f2a:	fa21 f10e 	lsr.w	r1, r1, lr
 8012f2e:	ea40 0201 	orr.w	r2, r0, r1
 8012f32:	ec43 2b10 	vmov	d0, r2, r3
 8012f36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012f38:	42b7      	cmp	r7, r6
 8012f3a:	bf3a      	itte	cc
 8012f3c:	f1a5 0608 	subcc.w	r6, r5, #8
 8012f40:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8012f44:	2100      	movcs	r1, #0
 8012f46:	380b      	subs	r0, #11
 8012f48:	d015      	beq.n	8012f76 <__b2d+0x8e>
 8012f4a:	4084      	lsls	r4, r0
 8012f4c:	f1c0 0520 	rsb	r5, r0, #32
 8012f50:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8012f54:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8012f58:	42be      	cmp	r6, r7
 8012f5a:	fa21 fc05 	lsr.w	ip, r1, r5
 8012f5e:	ea44 030c 	orr.w	r3, r4, ip
 8012f62:	bf8c      	ite	hi
 8012f64:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8012f68:	2400      	movls	r4, #0
 8012f6a:	fa01 f000 	lsl.w	r0, r1, r0
 8012f6e:	40ec      	lsrs	r4, r5
 8012f70:	ea40 0204 	orr.w	r2, r0, r4
 8012f74:	e7dd      	b.n	8012f32 <__b2d+0x4a>
 8012f76:	ea44 030c 	orr.w	r3, r4, ip
 8012f7a:	460a      	mov	r2, r1
 8012f7c:	e7d9      	b.n	8012f32 <__b2d+0x4a>
 8012f7e:	bf00      	nop
 8012f80:	3ff00000 	.word	0x3ff00000

08012f84 <__d2b>:
 8012f84:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012f88:	460e      	mov	r6, r1
 8012f8a:	2101      	movs	r1, #1
 8012f8c:	ec59 8b10 	vmov	r8, r9, d0
 8012f90:	4615      	mov	r5, r2
 8012f92:	f7ff fcb6 	bl	8012902 <_Balloc>
 8012f96:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8012f9a:	4607      	mov	r7, r0
 8012f9c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012fa0:	bb34      	cbnz	r4, 8012ff0 <__d2b+0x6c>
 8012fa2:	9301      	str	r3, [sp, #4]
 8012fa4:	f1b8 0300 	subs.w	r3, r8, #0
 8012fa8:	d027      	beq.n	8012ffa <__d2b+0x76>
 8012faa:	a802      	add	r0, sp, #8
 8012fac:	f840 3d08 	str.w	r3, [r0, #-8]!
 8012fb0:	f7ff fd8a 	bl	8012ac8 <__lo0bits>
 8012fb4:	9900      	ldr	r1, [sp, #0]
 8012fb6:	b1f0      	cbz	r0, 8012ff6 <__d2b+0x72>
 8012fb8:	9a01      	ldr	r2, [sp, #4]
 8012fba:	f1c0 0320 	rsb	r3, r0, #32
 8012fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8012fc2:	430b      	orrs	r3, r1
 8012fc4:	40c2      	lsrs	r2, r0
 8012fc6:	617b      	str	r3, [r7, #20]
 8012fc8:	9201      	str	r2, [sp, #4]
 8012fca:	9b01      	ldr	r3, [sp, #4]
 8012fcc:	61bb      	str	r3, [r7, #24]
 8012fce:	2b00      	cmp	r3, #0
 8012fd0:	bf14      	ite	ne
 8012fd2:	2102      	movne	r1, #2
 8012fd4:	2101      	moveq	r1, #1
 8012fd6:	6139      	str	r1, [r7, #16]
 8012fd8:	b1c4      	cbz	r4, 801300c <__d2b+0x88>
 8012fda:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8012fde:	4404      	add	r4, r0
 8012fe0:	6034      	str	r4, [r6, #0]
 8012fe2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012fe6:	6028      	str	r0, [r5, #0]
 8012fe8:	4638      	mov	r0, r7
 8012fea:	b003      	add	sp, #12
 8012fec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012ff0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012ff4:	e7d5      	b.n	8012fa2 <__d2b+0x1e>
 8012ff6:	6179      	str	r1, [r7, #20]
 8012ff8:	e7e7      	b.n	8012fca <__d2b+0x46>
 8012ffa:	a801      	add	r0, sp, #4
 8012ffc:	f7ff fd64 	bl	8012ac8 <__lo0bits>
 8013000:	9b01      	ldr	r3, [sp, #4]
 8013002:	617b      	str	r3, [r7, #20]
 8013004:	2101      	movs	r1, #1
 8013006:	6139      	str	r1, [r7, #16]
 8013008:	3020      	adds	r0, #32
 801300a:	e7e5      	b.n	8012fd8 <__d2b+0x54>
 801300c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8013010:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8013014:	6030      	str	r0, [r6, #0]
 8013016:	6918      	ldr	r0, [r3, #16]
 8013018:	f7ff fd37 	bl	8012a8a <__hi0bits>
 801301c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8013020:	e7e1      	b.n	8012fe6 <__d2b+0x62>

08013022 <__ratio>:
 8013022:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013026:	4688      	mov	r8, r1
 8013028:	4669      	mov	r1, sp
 801302a:	4681      	mov	r9, r0
 801302c:	f7ff ff5c 	bl	8012ee8 <__b2d>
 8013030:	a901      	add	r1, sp, #4
 8013032:	4640      	mov	r0, r8
 8013034:	ec57 6b10 	vmov	r6, r7, d0
 8013038:	f7ff ff56 	bl	8012ee8 <__b2d>
 801303c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013040:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8013044:	eba3 0c02 	sub.w	ip, r3, r2
 8013048:	e9dd 3200 	ldrd	r3, r2, [sp]
 801304c:	1a9b      	subs	r3, r3, r2
 801304e:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8013052:	ec5b ab10 	vmov	sl, fp, d0
 8013056:	2b00      	cmp	r3, #0
 8013058:	bfce      	itee	gt
 801305a:	463a      	movgt	r2, r7
 801305c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8013060:	465a      	movle	r2, fp
 8013062:	4659      	mov	r1, fp
 8013064:	463d      	mov	r5, r7
 8013066:	bfd4      	ite	le
 8013068:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 801306c:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8013070:	4630      	mov	r0, r6
 8013072:	ee10 2a10 	vmov	r2, s0
 8013076:	460b      	mov	r3, r1
 8013078:	4629      	mov	r1, r5
 801307a:	f7ed fbf7 	bl	800086c <__aeabi_ddiv>
 801307e:	ec41 0b10 	vmov	d0, r0, r1
 8013082:	b003      	add	sp, #12
 8013084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013088 <__copybits>:
 8013088:	3901      	subs	r1, #1
 801308a:	b510      	push	{r4, lr}
 801308c:	1149      	asrs	r1, r1, #5
 801308e:	6914      	ldr	r4, [r2, #16]
 8013090:	3101      	adds	r1, #1
 8013092:	f102 0314 	add.w	r3, r2, #20
 8013096:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801309a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801309e:	42a3      	cmp	r3, r4
 80130a0:	4602      	mov	r2, r0
 80130a2:	d303      	bcc.n	80130ac <__copybits+0x24>
 80130a4:	2300      	movs	r3, #0
 80130a6:	428a      	cmp	r2, r1
 80130a8:	d305      	bcc.n	80130b6 <__copybits+0x2e>
 80130aa:	bd10      	pop	{r4, pc}
 80130ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80130b0:	f840 2b04 	str.w	r2, [r0], #4
 80130b4:	e7f3      	b.n	801309e <__copybits+0x16>
 80130b6:	f842 3b04 	str.w	r3, [r2], #4
 80130ba:	e7f4      	b.n	80130a6 <__copybits+0x1e>

080130bc <__any_on>:
 80130bc:	f100 0214 	add.w	r2, r0, #20
 80130c0:	6900      	ldr	r0, [r0, #16]
 80130c2:	114b      	asrs	r3, r1, #5
 80130c4:	4298      	cmp	r0, r3
 80130c6:	b510      	push	{r4, lr}
 80130c8:	db11      	blt.n	80130ee <__any_on+0x32>
 80130ca:	dd0a      	ble.n	80130e2 <__any_on+0x26>
 80130cc:	f011 011f 	ands.w	r1, r1, #31
 80130d0:	d007      	beq.n	80130e2 <__any_on+0x26>
 80130d2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80130d6:	fa24 f001 	lsr.w	r0, r4, r1
 80130da:	fa00 f101 	lsl.w	r1, r0, r1
 80130de:	428c      	cmp	r4, r1
 80130e0:	d10b      	bne.n	80130fa <__any_on+0x3e>
 80130e2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80130e6:	4293      	cmp	r3, r2
 80130e8:	d803      	bhi.n	80130f2 <__any_on+0x36>
 80130ea:	2000      	movs	r0, #0
 80130ec:	bd10      	pop	{r4, pc}
 80130ee:	4603      	mov	r3, r0
 80130f0:	e7f7      	b.n	80130e2 <__any_on+0x26>
 80130f2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80130f6:	2900      	cmp	r1, #0
 80130f8:	d0f5      	beq.n	80130e6 <__any_on+0x2a>
 80130fa:	2001      	movs	r0, #1
 80130fc:	e7f6      	b.n	80130ec <__any_on+0x30>

080130fe <_calloc_r>:
 80130fe:	b538      	push	{r3, r4, r5, lr}
 8013100:	fb02 f401 	mul.w	r4, r2, r1
 8013104:	4621      	mov	r1, r4
 8013106:	f000 f809 	bl	801311c <_malloc_r>
 801310a:	4605      	mov	r5, r0
 801310c:	b118      	cbz	r0, 8013116 <_calloc_r+0x18>
 801310e:	4622      	mov	r2, r4
 8013110:	2100      	movs	r1, #0
 8013112:	f7fe f904 	bl	801131e <memset>
 8013116:	4628      	mov	r0, r5
 8013118:	bd38      	pop	{r3, r4, r5, pc}
	...

0801311c <_malloc_r>:
 801311c:	b570      	push	{r4, r5, r6, lr}
 801311e:	1ccd      	adds	r5, r1, #3
 8013120:	f025 0503 	bic.w	r5, r5, #3
 8013124:	3508      	adds	r5, #8
 8013126:	2d0c      	cmp	r5, #12
 8013128:	bf38      	it	cc
 801312a:	250c      	movcc	r5, #12
 801312c:	2d00      	cmp	r5, #0
 801312e:	4606      	mov	r6, r0
 8013130:	db01      	blt.n	8013136 <_malloc_r+0x1a>
 8013132:	42a9      	cmp	r1, r5
 8013134:	d903      	bls.n	801313e <_malloc_r+0x22>
 8013136:	230c      	movs	r3, #12
 8013138:	6033      	str	r3, [r6, #0]
 801313a:	2000      	movs	r0, #0
 801313c:	bd70      	pop	{r4, r5, r6, pc}
 801313e:	f000 fb66 	bl	801380e <__malloc_lock>
 8013142:	4a21      	ldr	r2, [pc, #132]	; (80131c8 <_malloc_r+0xac>)
 8013144:	6814      	ldr	r4, [r2, #0]
 8013146:	4621      	mov	r1, r4
 8013148:	b991      	cbnz	r1, 8013170 <_malloc_r+0x54>
 801314a:	4c20      	ldr	r4, [pc, #128]	; (80131cc <_malloc_r+0xb0>)
 801314c:	6823      	ldr	r3, [r4, #0]
 801314e:	b91b      	cbnz	r3, 8013158 <_malloc_r+0x3c>
 8013150:	4630      	mov	r0, r6
 8013152:	f000 fb17 	bl	8013784 <_sbrk_r>
 8013156:	6020      	str	r0, [r4, #0]
 8013158:	4629      	mov	r1, r5
 801315a:	4630      	mov	r0, r6
 801315c:	f000 fb12 	bl	8013784 <_sbrk_r>
 8013160:	1c43      	adds	r3, r0, #1
 8013162:	d124      	bne.n	80131ae <_malloc_r+0x92>
 8013164:	230c      	movs	r3, #12
 8013166:	6033      	str	r3, [r6, #0]
 8013168:	4630      	mov	r0, r6
 801316a:	f000 fb51 	bl	8013810 <__malloc_unlock>
 801316e:	e7e4      	b.n	801313a <_malloc_r+0x1e>
 8013170:	680b      	ldr	r3, [r1, #0]
 8013172:	1b5b      	subs	r3, r3, r5
 8013174:	d418      	bmi.n	80131a8 <_malloc_r+0x8c>
 8013176:	2b0b      	cmp	r3, #11
 8013178:	d90f      	bls.n	801319a <_malloc_r+0x7e>
 801317a:	600b      	str	r3, [r1, #0]
 801317c:	50cd      	str	r5, [r1, r3]
 801317e:	18cc      	adds	r4, r1, r3
 8013180:	4630      	mov	r0, r6
 8013182:	f000 fb45 	bl	8013810 <__malloc_unlock>
 8013186:	f104 000b 	add.w	r0, r4, #11
 801318a:	1d23      	adds	r3, r4, #4
 801318c:	f020 0007 	bic.w	r0, r0, #7
 8013190:	1ac3      	subs	r3, r0, r3
 8013192:	d0d3      	beq.n	801313c <_malloc_r+0x20>
 8013194:	425a      	negs	r2, r3
 8013196:	50e2      	str	r2, [r4, r3]
 8013198:	e7d0      	b.n	801313c <_malloc_r+0x20>
 801319a:	428c      	cmp	r4, r1
 801319c:	684b      	ldr	r3, [r1, #4]
 801319e:	bf16      	itet	ne
 80131a0:	6063      	strne	r3, [r4, #4]
 80131a2:	6013      	streq	r3, [r2, #0]
 80131a4:	460c      	movne	r4, r1
 80131a6:	e7eb      	b.n	8013180 <_malloc_r+0x64>
 80131a8:	460c      	mov	r4, r1
 80131aa:	6849      	ldr	r1, [r1, #4]
 80131ac:	e7cc      	b.n	8013148 <_malloc_r+0x2c>
 80131ae:	1cc4      	adds	r4, r0, #3
 80131b0:	f024 0403 	bic.w	r4, r4, #3
 80131b4:	42a0      	cmp	r0, r4
 80131b6:	d005      	beq.n	80131c4 <_malloc_r+0xa8>
 80131b8:	1a21      	subs	r1, r4, r0
 80131ba:	4630      	mov	r0, r6
 80131bc:	f000 fae2 	bl	8013784 <_sbrk_r>
 80131c0:	3001      	adds	r0, #1
 80131c2:	d0cf      	beq.n	8013164 <_malloc_r+0x48>
 80131c4:	6025      	str	r5, [r4, #0]
 80131c6:	e7db      	b.n	8013180 <_malloc_r+0x64>
 80131c8:	20006858 	.word	0x20006858
 80131cc:	2000685c 	.word	0x2000685c

080131d0 <__ssputs_r>:
 80131d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80131d4:	688e      	ldr	r6, [r1, #8]
 80131d6:	429e      	cmp	r6, r3
 80131d8:	4682      	mov	sl, r0
 80131da:	460c      	mov	r4, r1
 80131dc:	4690      	mov	r8, r2
 80131de:	4699      	mov	r9, r3
 80131e0:	d837      	bhi.n	8013252 <__ssputs_r+0x82>
 80131e2:	898a      	ldrh	r2, [r1, #12]
 80131e4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80131e8:	d031      	beq.n	801324e <__ssputs_r+0x7e>
 80131ea:	6825      	ldr	r5, [r4, #0]
 80131ec:	6909      	ldr	r1, [r1, #16]
 80131ee:	1a6f      	subs	r7, r5, r1
 80131f0:	6965      	ldr	r5, [r4, #20]
 80131f2:	2302      	movs	r3, #2
 80131f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80131f8:	fb95 f5f3 	sdiv	r5, r5, r3
 80131fc:	f109 0301 	add.w	r3, r9, #1
 8013200:	443b      	add	r3, r7
 8013202:	429d      	cmp	r5, r3
 8013204:	bf38      	it	cc
 8013206:	461d      	movcc	r5, r3
 8013208:	0553      	lsls	r3, r2, #21
 801320a:	d530      	bpl.n	801326e <__ssputs_r+0x9e>
 801320c:	4629      	mov	r1, r5
 801320e:	f7ff ff85 	bl	801311c <_malloc_r>
 8013212:	4606      	mov	r6, r0
 8013214:	b950      	cbnz	r0, 801322c <__ssputs_r+0x5c>
 8013216:	230c      	movs	r3, #12
 8013218:	f8ca 3000 	str.w	r3, [sl]
 801321c:	89a3      	ldrh	r3, [r4, #12]
 801321e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013222:	81a3      	strh	r3, [r4, #12]
 8013224:	f04f 30ff 	mov.w	r0, #4294967295
 8013228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801322c:	463a      	mov	r2, r7
 801322e:	6921      	ldr	r1, [r4, #16]
 8013230:	f7fe f86a 	bl	8011308 <memcpy>
 8013234:	89a3      	ldrh	r3, [r4, #12]
 8013236:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801323a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801323e:	81a3      	strh	r3, [r4, #12]
 8013240:	6126      	str	r6, [r4, #16]
 8013242:	6165      	str	r5, [r4, #20]
 8013244:	443e      	add	r6, r7
 8013246:	1bed      	subs	r5, r5, r7
 8013248:	6026      	str	r6, [r4, #0]
 801324a:	60a5      	str	r5, [r4, #8]
 801324c:	464e      	mov	r6, r9
 801324e:	454e      	cmp	r6, r9
 8013250:	d900      	bls.n	8013254 <__ssputs_r+0x84>
 8013252:	464e      	mov	r6, r9
 8013254:	4632      	mov	r2, r6
 8013256:	4641      	mov	r1, r8
 8013258:	6820      	ldr	r0, [r4, #0]
 801325a:	f000 fabf 	bl	80137dc <memmove>
 801325e:	68a3      	ldr	r3, [r4, #8]
 8013260:	1b9b      	subs	r3, r3, r6
 8013262:	60a3      	str	r3, [r4, #8]
 8013264:	6823      	ldr	r3, [r4, #0]
 8013266:	441e      	add	r6, r3
 8013268:	6026      	str	r6, [r4, #0]
 801326a:	2000      	movs	r0, #0
 801326c:	e7dc      	b.n	8013228 <__ssputs_r+0x58>
 801326e:	462a      	mov	r2, r5
 8013270:	f000 fb1e 	bl	80138b0 <_realloc_r>
 8013274:	4606      	mov	r6, r0
 8013276:	2800      	cmp	r0, #0
 8013278:	d1e2      	bne.n	8013240 <__ssputs_r+0x70>
 801327a:	6921      	ldr	r1, [r4, #16]
 801327c:	4650      	mov	r0, sl
 801327e:	f000 fac9 	bl	8013814 <_free_r>
 8013282:	e7c8      	b.n	8013216 <__ssputs_r+0x46>

08013284 <_svfiprintf_r>:
 8013284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013288:	461d      	mov	r5, r3
 801328a:	898b      	ldrh	r3, [r1, #12]
 801328c:	061f      	lsls	r7, r3, #24
 801328e:	b09d      	sub	sp, #116	; 0x74
 8013290:	4680      	mov	r8, r0
 8013292:	460c      	mov	r4, r1
 8013294:	4616      	mov	r6, r2
 8013296:	d50f      	bpl.n	80132b8 <_svfiprintf_r+0x34>
 8013298:	690b      	ldr	r3, [r1, #16]
 801329a:	b96b      	cbnz	r3, 80132b8 <_svfiprintf_r+0x34>
 801329c:	2140      	movs	r1, #64	; 0x40
 801329e:	f7ff ff3d 	bl	801311c <_malloc_r>
 80132a2:	6020      	str	r0, [r4, #0]
 80132a4:	6120      	str	r0, [r4, #16]
 80132a6:	b928      	cbnz	r0, 80132b4 <_svfiprintf_r+0x30>
 80132a8:	230c      	movs	r3, #12
 80132aa:	f8c8 3000 	str.w	r3, [r8]
 80132ae:	f04f 30ff 	mov.w	r0, #4294967295
 80132b2:	e0c8      	b.n	8013446 <_svfiprintf_r+0x1c2>
 80132b4:	2340      	movs	r3, #64	; 0x40
 80132b6:	6163      	str	r3, [r4, #20]
 80132b8:	2300      	movs	r3, #0
 80132ba:	9309      	str	r3, [sp, #36]	; 0x24
 80132bc:	2320      	movs	r3, #32
 80132be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80132c2:	2330      	movs	r3, #48	; 0x30
 80132c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80132c8:	9503      	str	r5, [sp, #12]
 80132ca:	f04f 0b01 	mov.w	fp, #1
 80132ce:	4637      	mov	r7, r6
 80132d0:	463d      	mov	r5, r7
 80132d2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80132d6:	b10b      	cbz	r3, 80132dc <_svfiprintf_r+0x58>
 80132d8:	2b25      	cmp	r3, #37	; 0x25
 80132da:	d13e      	bne.n	801335a <_svfiprintf_r+0xd6>
 80132dc:	ebb7 0a06 	subs.w	sl, r7, r6
 80132e0:	d00b      	beq.n	80132fa <_svfiprintf_r+0x76>
 80132e2:	4653      	mov	r3, sl
 80132e4:	4632      	mov	r2, r6
 80132e6:	4621      	mov	r1, r4
 80132e8:	4640      	mov	r0, r8
 80132ea:	f7ff ff71 	bl	80131d0 <__ssputs_r>
 80132ee:	3001      	adds	r0, #1
 80132f0:	f000 80a4 	beq.w	801343c <_svfiprintf_r+0x1b8>
 80132f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80132f6:	4453      	add	r3, sl
 80132f8:	9309      	str	r3, [sp, #36]	; 0x24
 80132fa:	783b      	ldrb	r3, [r7, #0]
 80132fc:	2b00      	cmp	r3, #0
 80132fe:	f000 809d 	beq.w	801343c <_svfiprintf_r+0x1b8>
 8013302:	2300      	movs	r3, #0
 8013304:	f04f 32ff 	mov.w	r2, #4294967295
 8013308:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801330c:	9304      	str	r3, [sp, #16]
 801330e:	9307      	str	r3, [sp, #28]
 8013310:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013314:	931a      	str	r3, [sp, #104]	; 0x68
 8013316:	462f      	mov	r7, r5
 8013318:	2205      	movs	r2, #5
 801331a:	f817 1b01 	ldrb.w	r1, [r7], #1
 801331e:	4850      	ldr	r0, [pc, #320]	; (8013460 <_svfiprintf_r+0x1dc>)
 8013320:	f7ec ff6e 	bl	8000200 <memchr>
 8013324:	9b04      	ldr	r3, [sp, #16]
 8013326:	b9d0      	cbnz	r0, 801335e <_svfiprintf_r+0xda>
 8013328:	06d9      	lsls	r1, r3, #27
 801332a:	bf44      	itt	mi
 801332c:	2220      	movmi	r2, #32
 801332e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8013332:	071a      	lsls	r2, r3, #28
 8013334:	bf44      	itt	mi
 8013336:	222b      	movmi	r2, #43	; 0x2b
 8013338:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801333c:	782a      	ldrb	r2, [r5, #0]
 801333e:	2a2a      	cmp	r2, #42	; 0x2a
 8013340:	d015      	beq.n	801336e <_svfiprintf_r+0xea>
 8013342:	9a07      	ldr	r2, [sp, #28]
 8013344:	462f      	mov	r7, r5
 8013346:	2000      	movs	r0, #0
 8013348:	250a      	movs	r5, #10
 801334a:	4639      	mov	r1, r7
 801334c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013350:	3b30      	subs	r3, #48	; 0x30
 8013352:	2b09      	cmp	r3, #9
 8013354:	d94d      	bls.n	80133f2 <_svfiprintf_r+0x16e>
 8013356:	b1b8      	cbz	r0, 8013388 <_svfiprintf_r+0x104>
 8013358:	e00f      	b.n	801337a <_svfiprintf_r+0xf6>
 801335a:	462f      	mov	r7, r5
 801335c:	e7b8      	b.n	80132d0 <_svfiprintf_r+0x4c>
 801335e:	4a40      	ldr	r2, [pc, #256]	; (8013460 <_svfiprintf_r+0x1dc>)
 8013360:	1a80      	subs	r0, r0, r2
 8013362:	fa0b f000 	lsl.w	r0, fp, r0
 8013366:	4318      	orrs	r0, r3
 8013368:	9004      	str	r0, [sp, #16]
 801336a:	463d      	mov	r5, r7
 801336c:	e7d3      	b.n	8013316 <_svfiprintf_r+0x92>
 801336e:	9a03      	ldr	r2, [sp, #12]
 8013370:	1d11      	adds	r1, r2, #4
 8013372:	6812      	ldr	r2, [r2, #0]
 8013374:	9103      	str	r1, [sp, #12]
 8013376:	2a00      	cmp	r2, #0
 8013378:	db01      	blt.n	801337e <_svfiprintf_r+0xfa>
 801337a:	9207      	str	r2, [sp, #28]
 801337c:	e004      	b.n	8013388 <_svfiprintf_r+0x104>
 801337e:	4252      	negs	r2, r2
 8013380:	f043 0302 	orr.w	r3, r3, #2
 8013384:	9207      	str	r2, [sp, #28]
 8013386:	9304      	str	r3, [sp, #16]
 8013388:	783b      	ldrb	r3, [r7, #0]
 801338a:	2b2e      	cmp	r3, #46	; 0x2e
 801338c:	d10c      	bne.n	80133a8 <_svfiprintf_r+0x124>
 801338e:	787b      	ldrb	r3, [r7, #1]
 8013390:	2b2a      	cmp	r3, #42	; 0x2a
 8013392:	d133      	bne.n	80133fc <_svfiprintf_r+0x178>
 8013394:	9b03      	ldr	r3, [sp, #12]
 8013396:	1d1a      	adds	r2, r3, #4
 8013398:	681b      	ldr	r3, [r3, #0]
 801339a:	9203      	str	r2, [sp, #12]
 801339c:	2b00      	cmp	r3, #0
 801339e:	bfb8      	it	lt
 80133a0:	f04f 33ff 	movlt.w	r3, #4294967295
 80133a4:	3702      	adds	r7, #2
 80133a6:	9305      	str	r3, [sp, #20]
 80133a8:	4d2e      	ldr	r5, [pc, #184]	; (8013464 <_svfiprintf_r+0x1e0>)
 80133aa:	7839      	ldrb	r1, [r7, #0]
 80133ac:	2203      	movs	r2, #3
 80133ae:	4628      	mov	r0, r5
 80133b0:	f7ec ff26 	bl	8000200 <memchr>
 80133b4:	b138      	cbz	r0, 80133c6 <_svfiprintf_r+0x142>
 80133b6:	2340      	movs	r3, #64	; 0x40
 80133b8:	1b40      	subs	r0, r0, r5
 80133ba:	fa03 f000 	lsl.w	r0, r3, r0
 80133be:	9b04      	ldr	r3, [sp, #16]
 80133c0:	4303      	orrs	r3, r0
 80133c2:	3701      	adds	r7, #1
 80133c4:	9304      	str	r3, [sp, #16]
 80133c6:	7839      	ldrb	r1, [r7, #0]
 80133c8:	4827      	ldr	r0, [pc, #156]	; (8013468 <_svfiprintf_r+0x1e4>)
 80133ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80133ce:	2206      	movs	r2, #6
 80133d0:	1c7e      	adds	r6, r7, #1
 80133d2:	f7ec ff15 	bl	8000200 <memchr>
 80133d6:	2800      	cmp	r0, #0
 80133d8:	d038      	beq.n	801344c <_svfiprintf_r+0x1c8>
 80133da:	4b24      	ldr	r3, [pc, #144]	; (801346c <_svfiprintf_r+0x1e8>)
 80133dc:	bb13      	cbnz	r3, 8013424 <_svfiprintf_r+0x1a0>
 80133de:	9b03      	ldr	r3, [sp, #12]
 80133e0:	3307      	adds	r3, #7
 80133e2:	f023 0307 	bic.w	r3, r3, #7
 80133e6:	3308      	adds	r3, #8
 80133e8:	9303      	str	r3, [sp, #12]
 80133ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80133ec:	444b      	add	r3, r9
 80133ee:	9309      	str	r3, [sp, #36]	; 0x24
 80133f0:	e76d      	b.n	80132ce <_svfiprintf_r+0x4a>
 80133f2:	fb05 3202 	mla	r2, r5, r2, r3
 80133f6:	2001      	movs	r0, #1
 80133f8:	460f      	mov	r7, r1
 80133fa:	e7a6      	b.n	801334a <_svfiprintf_r+0xc6>
 80133fc:	2300      	movs	r3, #0
 80133fe:	3701      	adds	r7, #1
 8013400:	9305      	str	r3, [sp, #20]
 8013402:	4619      	mov	r1, r3
 8013404:	250a      	movs	r5, #10
 8013406:	4638      	mov	r0, r7
 8013408:	f810 2b01 	ldrb.w	r2, [r0], #1
 801340c:	3a30      	subs	r2, #48	; 0x30
 801340e:	2a09      	cmp	r2, #9
 8013410:	d903      	bls.n	801341a <_svfiprintf_r+0x196>
 8013412:	2b00      	cmp	r3, #0
 8013414:	d0c8      	beq.n	80133a8 <_svfiprintf_r+0x124>
 8013416:	9105      	str	r1, [sp, #20]
 8013418:	e7c6      	b.n	80133a8 <_svfiprintf_r+0x124>
 801341a:	fb05 2101 	mla	r1, r5, r1, r2
 801341e:	2301      	movs	r3, #1
 8013420:	4607      	mov	r7, r0
 8013422:	e7f0      	b.n	8013406 <_svfiprintf_r+0x182>
 8013424:	ab03      	add	r3, sp, #12
 8013426:	9300      	str	r3, [sp, #0]
 8013428:	4622      	mov	r2, r4
 801342a:	4b11      	ldr	r3, [pc, #68]	; (8013470 <_svfiprintf_r+0x1ec>)
 801342c:	a904      	add	r1, sp, #16
 801342e:	4640      	mov	r0, r8
 8013430:	f3af 8000 	nop.w
 8013434:	f1b0 3fff 	cmp.w	r0, #4294967295
 8013438:	4681      	mov	r9, r0
 801343a:	d1d6      	bne.n	80133ea <_svfiprintf_r+0x166>
 801343c:	89a3      	ldrh	r3, [r4, #12]
 801343e:	065b      	lsls	r3, r3, #25
 8013440:	f53f af35 	bmi.w	80132ae <_svfiprintf_r+0x2a>
 8013444:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013446:	b01d      	add	sp, #116	; 0x74
 8013448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801344c:	ab03      	add	r3, sp, #12
 801344e:	9300      	str	r3, [sp, #0]
 8013450:	4622      	mov	r2, r4
 8013452:	4b07      	ldr	r3, [pc, #28]	; (8013470 <_svfiprintf_r+0x1ec>)
 8013454:	a904      	add	r1, sp, #16
 8013456:	4640      	mov	r0, r8
 8013458:	f000 f882 	bl	8013560 <_printf_i>
 801345c:	e7ea      	b.n	8013434 <_svfiprintf_r+0x1b0>
 801345e:	bf00      	nop
 8013460:	08027434 	.word	0x08027434
 8013464:	0802743a 	.word	0x0802743a
 8013468:	0802743e 	.word	0x0802743e
 801346c:	00000000 	.word	0x00000000
 8013470:	080131d1 	.word	0x080131d1

08013474 <_printf_common>:
 8013474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013478:	4691      	mov	r9, r2
 801347a:	461f      	mov	r7, r3
 801347c:	688a      	ldr	r2, [r1, #8]
 801347e:	690b      	ldr	r3, [r1, #16]
 8013480:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013484:	4293      	cmp	r3, r2
 8013486:	bfb8      	it	lt
 8013488:	4613      	movlt	r3, r2
 801348a:	f8c9 3000 	str.w	r3, [r9]
 801348e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013492:	4606      	mov	r6, r0
 8013494:	460c      	mov	r4, r1
 8013496:	b112      	cbz	r2, 801349e <_printf_common+0x2a>
 8013498:	3301      	adds	r3, #1
 801349a:	f8c9 3000 	str.w	r3, [r9]
 801349e:	6823      	ldr	r3, [r4, #0]
 80134a0:	0699      	lsls	r1, r3, #26
 80134a2:	bf42      	ittt	mi
 80134a4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80134a8:	3302      	addmi	r3, #2
 80134aa:	f8c9 3000 	strmi.w	r3, [r9]
 80134ae:	6825      	ldr	r5, [r4, #0]
 80134b0:	f015 0506 	ands.w	r5, r5, #6
 80134b4:	d107      	bne.n	80134c6 <_printf_common+0x52>
 80134b6:	f104 0a19 	add.w	sl, r4, #25
 80134ba:	68e3      	ldr	r3, [r4, #12]
 80134bc:	f8d9 2000 	ldr.w	r2, [r9]
 80134c0:	1a9b      	subs	r3, r3, r2
 80134c2:	42ab      	cmp	r3, r5
 80134c4:	dc28      	bgt.n	8013518 <_printf_common+0xa4>
 80134c6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80134ca:	6822      	ldr	r2, [r4, #0]
 80134cc:	3300      	adds	r3, #0
 80134ce:	bf18      	it	ne
 80134d0:	2301      	movne	r3, #1
 80134d2:	0692      	lsls	r2, r2, #26
 80134d4:	d42d      	bmi.n	8013532 <_printf_common+0xbe>
 80134d6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80134da:	4639      	mov	r1, r7
 80134dc:	4630      	mov	r0, r6
 80134de:	47c0      	blx	r8
 80134e0:	3001      	adds	r0, #1
 80134e2:	d020      	beq.n	8013526 <_printf_common+0xb2>
 80134e4:	6823      	ldr	r3, [r4, #0]
 80134e6:	68e5      	ldr	r5, [r4, #12]
 80134e8:	f8d9 2000 	ldr.w	r2, [r9]
 80134ec:	f003 0306 	and.w	r3, r3, #6
 80134f0:	2b04      	cmp	r3, #4
 80134f2:	bf08      	it	eq
 80134f4:	1aad      	subeq	r5, r5, r2
 80134f6:	68a3      	ldr	r3, [r4, #8]
 80134f8:	6922      	ldr	r2, [r4, #16]
 80134fa:	bf0c      	ite	eq
 80134fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013500:	2500      	movne	r5, #0
 8013502:	4293      	cmp	r3, r2
 8013504:	bfc4      	itt	gt
 8013506:	1a9b      	subgt	r3, r3, r2
 8013508:	18ed      	addgt	r5, r5, r3
 801350a:	f04f 0900 	mov.w	r9, #0
 801350e:	341a      	adds	r4, #26
 8013510:	454d      	cmp	r5, r9
 8013512:	d11a      	bne.n	801354a <_printf_common+0xd6>
 8013514:	2000      	movs	r0, #0
 8013516:	e008      	b.n	801352a <_printf_common+0xb6>
 8013518:	2301      	movs	r3, #1
 801351a:	4652      	mov	r2, sl
 801351c:	4639      	mov	r1, r7
 801351e:	4630      	mov	r0, r6
 8013520:	47c0      	blx	r8
 8013522:	3001      	adds	r0, #1
 8013524:	d103      	bne.n	801352e <_printf_common+0xba>
 8013526:	f04f 30ff 	mov.w	r0, #4294967295
 801352a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801352e:	3501      	adds	r5, #1
 8013530:	e7c3      	b.n	80134ba <_printf_common+0x46>
 8013532:	18e1      	adds	r1, r4, r3
 8013534:	1c5a      	adds	r2, r3, #1
 8013536:	2030      	movs	r0, #48	; 0x30
 8013538:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801353c:	4422      	add	r2, r4
 801353e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013542:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013546:	3302      	adds	r3, #2
 8013548:	e7c5      	b.n	80134d6 <_printf_common+0x62>
 801354a:	2301      	movs	r3, #1
 801354c:	4622      	mov	r2, r4
 801354e:	4639      	mov	r1, r7
 8013550:	4630      	mov	r0, r6
 8013552:	47c0      	blx	r8
 8013554:	3001      	adds	r0, #1
 8013556:	d0e6      	beq.n	8013526 <_printf_common+0xb2>
 8013558:	f109 0901 	add.w	r9, r9, #1
 801355c:	e7d8      	b.n	8013510 <_printf_common+0x9c>
	...

08013560 <_printf_i>:
 8013560:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013564:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8013568:	460c      	mov	r4, r1
 801356a:	7e09      	ldrb	r1, [r1, #24]
 801356c:	b085      	sub	sp, #20
 801356e:	296e      	cmp	r1, #110	; 0x6e
 8013570:	4617      	mov	r7, r2
 8013572:	4606      	mov	r6, r0
 8013574:	4698      	mov	r8, r3
 8013576:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013578:	f000 80b3 	beq.w	80136e2 <_printf_i+0x182>
 801357c:	d822      	bhi.n	80135c4 <_printf_i+0x64>
 801357e:	2963      	cmp	r1, #99	; 0x63
 8013580:	d036      	beq.n	80135f0 <_printf_i+0x90>
 8013582:	d80a      	bhi.n	801359a <_printf_i+0x3a>
 8013584:	2900      	cmp	r1, #0
 8013586:	f000 80b9 	beq.w	80136fc <_printf_i+0x19c>
 801358a:	2958      	cmp	r1, #88	; 0x58
 801358c:	f000 8083 	beq.w	8013696 <_printf_i+0x136>
 8013590:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013594:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8013598:	e032      	b.n	8013600 <_printf_i+0xa0>
 801359a:	2964      	cmp	r1, #100	; 0x64
 801359c:	d001      	beq.n	80135a2 <_printf_i+0x42>
 801359e:	2969      	cmp	r1, #105	; 0x69
 80135a0:	d1f6      	bne.n	8013590 <_printf_i+0x30>
 80135a2:	6820      	ldr	r0, [r4, #0]
 80135a4:	6813      	ldr	r3, [r2, #0]
 80135a6:	0605      	lsls	r5, r0, #24
 80135a8:	f103 0104 	add.w	r1, r3, #4
 80135ac:	d52a      	bpl.n	8013604 <_printf_i+0xa4>
 80135ae:	681b      	ldr	r3, [r3, #0]
 80135b0:	6011      	str	r1, [r2, #0]
 80135b2:	2b00      	cmp	r3, #0
 80135b4:	da03      	bge.n	80135be <_printf_i+0x5e>
 80135b6:	222d      	movs	r2, #45	; 0x2d
 80135b8:	425b      	negs	r3, r3
 80135ba:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80135be:	486f      	ldr	r0, [pc, #444]	; (801377c <_printf_i+0x21c>)
 80135c0:	220a      	movs	r2, #10
 80135c2:	e039      	b.n	8013638 <_printf_i+0xd8>
 80135c4:	2973      	cmp	r1, #115	; 0x73
 80135c6:	f000 809d 	beq.w	8013704 <_printf_i+0x1a4>
 80135ca:	d808      	bhi.n	80135de <_printf_i+0x7e>
 80135cc:	296f      	cmp	r1, #111	; 0x6f
 80135ce:	d020      	beq.n	8013612 <_printf_i+0xb2>
 80135d0:	2970      	cmp	r1, #112	; 0x70
 80135d2:	d1dd      	bne.n	8013590 <_printf_i+0x30>
 80135d4:	6823      	ldr	r3, [r4, #0]
 80135d6:	f043 0320 	orr.w	r3, r3, #32
 80135da:	6023      	str	r3, [r4, #0]
 80135dc:	e003      	b.n	80135e6 <_printf_i+0x86>
 80135de:	2975      	cmp	r1, #117	; 0x75
 80135e0:	d017      	beq.n	8013612 <_printf_i+0xb2>
 80135e2:	2978      	cmp	r1, #120	; 0x78
 80135e4:	d1d4      	bne.n	8013590 <_printf_i+0x30>
 80135e6:	2378      	movs	r3, #120	; 0x78
 80135e8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80135ec:	4864      	ldr	r0, [pc, #400]	; (8013780 <_printf_i+0x220>)
 80135ee:	e055      	b.n	801369c <_printf_i+0x13c>
 80135f0:	6813      	ldr	r3, [r2, #0]
 80135f2:	1d19      	adds	r1, r3, #4
 80135f4:	681b      	ldr	r3, [r3, #0]
 80135f6:	6011      	str	r1, [r2, #0]
 80135f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80135fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013600:	2301      	movs	r3, #1
 8013602:	e08c      	b.n	801371e <_printf_i+0x1be>
 8013604:	681b      	ldr	r3, [r3, #0]
 8013606:	6011      	str	r1, [r2, #0]
 8013608:	f010 0f40 	tst.w	r0, #64	; 0x40
 801360c:	bf18      	it	ne
 801360e:	b21b      	sxthne	r3, r3
 8013610:	e7cf      	b.n	80135b2 <_printf_i+0x52>
 8013612:	6813      	ldr	r3, [r2, #0]
 8013614:	6825      	ldr	r5, [r4, #0]
 8013616:	1d18      	adds	r0, r3, #4
 8013618:	6010      	str	r0, [r2, #0]
 801361a:	0628      	lsls	r0, r5, #24
 801361c:	d501      	bpl.n	8013622 <_printf_i+0xc2>
 801361e:	681b      	ldr	r3, [r3, #0]
 8013620:	e002      	b.n	8013628 <_printf_i+0xc8>
 8013622:	0668      	lsls	r0, r5, #25
 8013624:	d5fb      	bpl.n	801361e <_printf_i+0xbe>
 8013626:	881b      	ldrh	r3, [r3, #0]
 8013628:	4854      	ldr	r0, [pc, #336]	; (801377c <_printf_i+0x21c>)
 801362a:	296f      	cmp	r1, #111	; 0x6f
 801362c:	bf14      	ite	ne
 801362e:	220a      	movne	r2, #10
 8013630:	2208      	moveq	r2, #8
 8013632:	2100      	movs	r1, #0
 8013634:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013638:	6865      	ldr	r5, [r4, #4]
 801363a:	60a5      	str	r5, [r4, #8]
 801363c:	2d00      	cmp	r5, #0
 801363e:	f2c0 8095 	blt.w	801376c <_printf_i+0x20c>
 8013642:	6821      	ldr	r1, [r4, #0]
 8013644:	f021 0104 	bic.w	r1, r1, #4
 8013648:	6021      	str	r1, [r4, #0]
 801364a:	2b00      	cmp	r3, #0
 801364c:	d13d      	bne.n	80136ca <_printf_i+0x16a>
 801364e:	2d00      	cmp	r5, #0
 8013650:	f040 808e 	bne.w	8013770 <_printf_i+0x210>
 8013654:	4665      	mov	r5, ip
 8013656:	2a08      	cmp	r2, #8
 8013658:	d10b      	bne.n	8013672 <_printf_i+0x112>
 801365a:	6823      	ldr	r3, [r4, #0]
 801365c:	07db      	lsls	r3, r3, #31
 801365e:	d508      	bpl.n	8013672 <_printf_i+0x112>
 8013660:	6923      	ldr	r3, [r4, #16]
 8013662:	6862      	ldr	r2, [r4, #4]
 8013664:	429a      	cmp	r2, r3
 8013666:	bfde      	ittt	le
 8013668:	2330      	movle	r3, #48	; 0x30
 801366a:	f805 3c01 	strble.w	r3, [r5, #-1]
 801366e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8013672:	ebac 0305 	sub.w	r3, ip, r5
 8013676:	6123      	str	r3, [r4, #16]
 8013678:	f8cd 8000 	str.w	r8, [sp]
 801367c:	463b      	mov	r3, r7
 801367e:	aa03      	add	r2, sp, #12
 8013680:	4621      	mov	r1, r4
 8013682:	4630      	mov	r0, r6
 8013684:	f7ff fef6 	bl	8013474 <_printf_common>
 8013688:	3001      	adds	r0, #1
 801368a:	d14d      	bne.n	8013728 <_printf_i+0x1c8>
 801368c:	f04f 30ff 	mov.w	r0, #4294967295
 8013690:	b005      	add	sp, #20
 8013692:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013696:	4839      	ldr	r0, [pc, #228]	; (801377c <_printf_i+0x21c>)
 8013698:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 801369c:	6813      	ldr	r3, [r2, #0]
 801369e:	6821      	ldr	r1, [r4, #0]
 80136a0:	1d1d      	adds	r5, r3, #4
 80136a2:	681b      	ldr	r3, [r3, #0]
 80136a4:	6015      	str	r5, [r2, #0]
 80136a6:	060a      	lsls	r2, r1, #24
 80136a8:	d50b      	bpl.n	80136c2 <_printf_i+0x162>
 80136aa:	07ca      	lsls	r2, r1, #31
 80136ac:	bf44      	itt	mi
 80136ae:	f041 0120 	orrmi.w	r1, r1, #32
 80136b2:	6021      	strmi	r1, [r4, #0]
 80136b4:	b91b      	cbnz	r3, 80136be <_printf_i+0x15e>
 80136b6:	6822      	ldr	r2, [r4, #0]
 80136b8:	f022 0220 	bic.w	r2, r2, #32
 80136bc:	6022      	str	r2, [r4, #0]
 80136be:	2210      	movs	r2, #16
 80136c0:	e7b7      	b.n	8013632 <_printf_i+0xd2>
 80136c2:	064d      	lsls	r5, r1, #25
 80136c4:	bf48      	it	mi
 80136c6:	b29b      	uxthmi	r3, r3
 80136c8:	e7ef      	b.n	80136aa <_printf_i+0x14a>
 80136ca:	4665      	mov	r5, ip
 80136cc:	fbb3 f1f2 	udiv	r1, r3, r2
 80136d0:	fb02 3311 	mls	r3, r2, r1, r3
 80136d4:	5cc3      	ldrb	r3, [r0, r3]
 80136d6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80136da:	460b      	mov	r3, r1
 80136dc:	2900      	cmp	r1, #0
 80136de:	d1f5      	bne.n	80136cc <_printf_i+0x16c>
 80136e0:	e7b9      	b.n	8013656 <_printf_i+0xf6>
 80136e2:	6813      	ldr	r3, [r2, #0]
 80136e4:	6825      	ldr	r5, [r4, #0]
 80136e6:	6961      	ldr	r1, [r4, #20]
 80136e8:	1d18      	adds	r0, r3, #4
 80136ea:	6010      	str	r0, [r2, #0]
 80136ec:	0628      	lsls	r0, r5, #24
 80136ee:	681b      	ldr	r3, [r3, #0]
 80136f0:	d501      	bpl.n	80136f6 <_printf_i+0x196>
 80136f2:	6019      	str	r1, [r3, #0]
 80136f4:	e002      	b.n	80136fc <_printf_i+0x19c>
 80136f6:	066a      	lsls	r2, r5, #25
 80136f8:	d5fb      	bpl.n	80136f2 <_printf_i+0x192>
 80136fa:	8019      	strh	r1, [r3, #0]
 80136fc:	2300      	movs	r3, #0
 80136fe:	6123      	str	r3, [r4, #16]
 8013700:	4665      	mov	r5, ip
 8013702:	e7b9      	b.n	8013678 <_printf_i+0x118>
 8013704:	6813      	ldr	r3, [r2, #0]
 8013706:	1d19      	adds	r1, r3, #4
 8013708:	6011      	str	r1, [r2, #0]
 801370a:	681d      	ldr	r5, [r3, #0]
 801370c:	6862      	ldr	r2, [r4, #4]
 801370e:	2100      	movs	r1, #0
 8013710:	4628      	mov	r0, r5
 8013712:	f7ec fd75 	bl	8000200 <memchr>
 8013716:	b108      	cbz	r0, 801371c <_printf_i+0x1bc>
 8013718:	1b40      	subs	r0, r0, r5
 801371a:	6060      	str	r0, [r4, #4]
 801371c:	6863      	ldr	r3, [r4, #4]
 801371e:	6123      	str	r3, [r4, #16]
 8013720:	2300      	movs	r3, #0
 8013722:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013726:	e7a7      	b.n	8013678 <_printf_i+0x118>
 8013728:	6923      	ldr	r3, [r4, #16]
 801372a:	462a      	mov	r2, r5
 801372c:	4639      	mov	r1, r7
 801372e:	4630      	mov	r0, r6
 8013730:	47c0      	blx	r8
 8013732:	3001      	adds	r0, #1
 8013734:	d0aa      	beq.n	801368c <_printf_i+0x12c>
 8013736:	6823      	ldr	r3, [r4, #0]
 8013738:	079b      	lsls	r3, r3, #30
 801373a:	d413      	bmi.n	8013764 <_printf_i+0x204>
 801373c:	68e0      	ldr	r0, [r4, #12]
 801373e:	9b03      	ldr	r3, [sp, #12]
 8013740:	4298      	cmp	r0, r3
 8013742:	bfb8      	it	lt
 8013744:	4618      	movlt	r0, r3
 8013746:	e7a3      	b.n	8013690 <_printf_i+0x130>
 8013748:	2301      	movs	r3, #1
 801374a:	464a      	mov	r2, r9
 801374c:	4639      	mov	r1, r7
 801374e:	4630      	mov	r0, r6
 8013750:	47c0      	blx	r8
 8013752:	3001      	adds	r0, #1
 8013754:	d09a      	beq.n	801368c <_printf_i+0x12c>
 8013756:	3501      	adds	r5, #1
 8013758:	68e3      	ldr	r3, [r4, #12]
 801375a:	9a03      	ldr	r2, [sp, #12]
 801375c:	1a9b      	subs	r3, r3, r2
 801375e:	42ab      	cmp	r3, r5
 8013760:	dcf2      	bgt.n	8013748 <_printf_i+0x1e8>
 8013762:	e7eb      	b.n	801373c <_printf_i+0x1dc>
 8013764:	2500      	movs	r5, #0
 8013766:	f104 0919 	add.w	r9, r4, #25
 801376a:	e7f5      	b.n	8013758 <_printf_i+0x1f8>
 801376c:	2b00      	cmp	r3, #0
 801376e:	d1ac      	bne.n	80136ca <_printf_i+0x16a>
 8013770:	7803      	ldrb	r3, [r0, #0]
 8013772:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013776:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801377a:	e76c      	b.n	8013656 <_printf_i+0xf6>
 801377c:	08027445 	.word	0x08027445
 8013780:	08027456 	.word	0x08027456

08013784 <_sbrk_r>:
 8013784:	b538      	push	{r3, r4, r5, lr}
 8013786:	4c06      	ldr	r4, [pc, #24]	; (80137a0 <_sbrk_r+0x1c>)
 8013788:	2300      	movs	r3, #0
 801378a:	4605      	mov	r5, r0
 801378c:	4608      	mov	r0, r1
 801378e:	6023      	str	r3, [r4, #0]
 8013790:	f7fd fce6 	bl	8011160 <_sbrk>
 8013794:	1c43      	adds	r3, r0, #1
 8013796:	d102      	bne.n	801379e <_sbrk_r+0x1a>
 8013798:	6823      	ldr	r3, [r4, #0]
 801379a:	b103      	cbz	r3, 801379e <_sbrk_r+0x1a>
 801379c:	602b      	str	r3, [r5, #0]
 801379e:	bd38      	pop	{r3, r4, r5, pc}
 80137a0:	2000868c 	.word	0x2000868c

080137a4 <nanf>:
 80137a4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80137ac <nanf+0x8>
 80137a8:	4770      	bx	lr
 80137aa:	bf00      	nop
 80137ac:	7fc00000 	.word	0x7fc00000

080137b0 <__ascii_wctomb>:
 80137b0:	b149      	cbz	r1, 80137c6 <__ascii_wctomb+0x16>
 80137b2:	2aff      	cmp	r2, #255	; 0xff
 80137b4:	bf85      	ittet	hi
 80137b6:	238a      	movhi	r3, #138	; 0x8a
 80137b8:	6003      	strhi	r3, [r0, #0]
 80137ba:	700a      	strbls	r2, [r1, #0]
 80137bc:	f04f 30ff 	movhi.w	r0, #4294967295
 80137c0:	bf98      	it	ls
 80137c2:	2001      	movls	r0, #1
 80137c4:	4770      	bx	lr
 80137c6:	4608      	mov	r0, r1
 80137c8:	4770      	bx	lr
	...

080137cc <malloc>:
 80137cc:	4b02      	ldr	r3, [pc, #8]	; (80137d8 <malloc+0xc>)
 80137ce:	4601      	mov	r1, r0
 80137d0:	6818      	ldr	r0, [r3, #0]
 80137d2:	f7ff bca3 	b.w	801311c <_malloc_r>
 80137d6:	bf00      	nop
 80137d8:	20000054 	.word	0x20000054

080137dc <memmove>:
 80137dc:	4288      	cmp	r0, r1
 80137de:	b510      	push	{r4, lr}
 80137e0:	eb01 0302 	add.w	r3, r1, r2
 80137e4:	d807      	bhi.n	80137f6 <memmove+0x1a>
 80137e6:	1e42      	subs	r2, r0, #1
 80137e8:	4299      	cmp	r1, r3
 80137ea:	d00a      	beq.n	8013802 <memmove+0x26>
 80137ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 80137f0:	f802 4f01 	strb.w	r4, [r2, #1]!
 80137f4:	e7f8      	b.n	80137e8 <memmove+0xc>
 80137f6:	4283      	cmp	r3, r0
 80137f8:	d9f5      	bls.n	80137e6 <memmove+0xa>
 80137fa:	1881      	adds	r1, r0, r2
 80137fc:	1ad2      	subs	r2, r2, r3
 80137fe:	42d3      	cmn	r3, r2
 8013800:	d100      	bne.n	8013804 <memmove+0x28>
 8013802:	bd10      	pop	{r4, pc}
 8013804:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013808:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801380c:	e7f7      	b.n	80137fe <memmove+0x22>

0801380e <__malloc_lock>:
 801380e:	4770      	bx	lr

08013810 <__malloc_unlock>:
 8013810:	4770      	bx	lr
	...

08013814 <_free_r>:
 8013814:	b538      	push	{r3, r4, r5, lr}
 8013816:	4605      	mov	r5, r0
 8013818:	2900      	cmp	r1, #0
 801381a:	d045      	beq.n	80138a8 <_free_r+0x94>
 801381c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013820:	1f0c      	subs	r4, r1, #4
 8013822:	2b00      	cmp	r3, #0
 8013824:	bfb8      	it	lt
 8013826:	18e4      	addlt	r4, r4, r3
 8013828:	f7ff fff1 	bl	801380e <__malloc_lock>
 801382c:	4a1f      	ldr	r2, [pc, #124]	; (80138ac <_free_r+0x98>)
 801382e:	6813      	ldr	r3, [r2, #0]
 8013830:	4610      	mov	r0, r2
 8013832:	b933      	cbnz	r3, 8013842 <_free_r+0x2e>
 8013834:	6063      	str	r3, [r4, #4]
 8013836:	6014      	str	r4, [r2, #0]
 8013838:	4628      	mov	r0, r5
 801383a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801383e:	f7ff bfe7 	b.w	8013810 <__malloc_unlock>
 8013842:	42a3      	cmp	r3, r4
 8013844:	d90c      	bls.n	8013860 <_free_r+0x4c>
 8013846:	6821      	ldr	r1, [r4, #0]
 8013848:	1862      	adds	r2, r4, r1
 801384a:	4293      	cmp	r3, r2
 801384c:	bf04      	itt	eq
 801384e:	681a      	ldreq	r2, [r3, #0]
 8013850:	685b      	ldreq	r3, [r3, #4]
 8013852:	6063      	str	r3, [r4, #4]
 8013854:	bf04      	itt	eq
 8013856:	1852      	addeq	r2, r2, r1
 8013858:	6022      	streq	r2, [r4, #0]
 801385a:	6004      	str	r4, [r0, #0]
 801385c:	e7ec      	b.n	8013838 <_free_r+0x24>
 801385e:	4613      	mov	r3, r2
 8013860:	685a      	ldr	r2, [r3, #4]
 8013862:	b10a      	cbz	r2, 8013868 <_free_r+0x54>
 8013864:	42a2      	cmp	r2, r4
 8013866:	d9fa      	bls.n	801385e <_free_r+0x4a>
 8013868:	6819      	ldr	r1, [r3, #0]
 801386a:	1858      	adds	r0, r3, r1
 801386c:	42a0      	cmp	r0, r4
 801386e:	d10b      	bne.n	8013888 <_free_r+0x74>
 8013870:	6820      	ldr	r0, [r4, #0]
 8013872:	4401      	add	r1, r0
 8013874:	1858      	adds	r0, r3, r1
 8013876:	4282      	cmp	r2, r0
 8013878:	6019      	str	r1, [r3, #0]
 801387a:	d1dd      	bne.n	8013838 <_free_r+0x24>
 801387c:	6810      	ldr	r0, [r2, #0]
 801387e:	6852      	ldr	r2, [r2, #4]
 8013880:	605a      	str	r2, [r3, #4]
 8013882:	4401      	add	r1, r0
 8013884:	6019      	str	r1, [r3, #0]
 8013886:	e7d7      	b.n	8013838 <_free_r+0x24>
 8013888:	d902      	bls.n	8013890 <_free_r+0x7c>
 801388a:	230c      	movs	r3, #12
 801388c:	602b      	str	r3, [r5, #0]
 801388e:	e7d3      	b.n	8013838 <_free_r+0x24>
 8013890:	6820      	ldr	r0, [r4, #0]
 8013892:	1821      	adds	r1, r4, r0
 8013894:	428a      	cmp	r2, r1
 8013896:	bf04      	itt	eq
 8013898:	6811      	ldreq	r1, [r2, #0]
 801389a:	6852      	ldreq	r2, [r2, #4]
 801389c:	6062      	str	r2, [r4, #4]
 801389e:	bf04      	itt	eq
 80138a0:	1809      	addeq	r1, r1, r0
 80138a2:	6021      	streq	r1, [r4, #0]
 80138a4:	605c      	str	r4, [r3, #4]
 80138a6:	e7c7      	b.n	8013838 <_free_r+0x24>
 80138a8:	bd38      	pop	{r3, r4, r5, pc}
 80138aa:	bf00      	nop
 80138ac:	20006858 	.word	0x20006858

080138b0 <_realloc_r>:
 80138b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80138b2:	4607      	mov	r7, r0
 80138b4:	4614      	mov	r4, r2
 80138b6:	460e      	mov	r6, r1
 80138b8:	b921      	cbnz	r1, 80138c4 <_realloc_r+0x14>
 80138ba:	4611      	mov	r1, r2
 80138bc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80138c0:	f7ff bc2c 	b.w	801311c <_malloc_r>
 80138c4:	b922      	cbnz	r2, 80138d0 <_realloc_r+0x20>
 80138c6:	f7ff ffa5 	bl	8013814 <_free_r>
 80138ca:	4625      	mov	r5, r4
 80138cc:	4628      	mov	r0, r5
 80138ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80138d0:	f000 f814 	bl	80138fc <_malloc_usable_size_r>
 80138d4:	42a0      	cmp	r0, r4
 80138d6:	d20f      	bcs.n	80138f8 <_realloc_r+0x48>
 80138d8:	4621      	mov	r1, r4
 80138da:	4638      	mov	r0, r7
 80138dc:	f7ff fc1e 	bl	801311c <_malloc_r>
 80138e0:	4605      	mov	r5, r0
 80138e2:	2800      	cmp	r0, #0
 80138e4:	d0f2      	beq.n	80138cc <_realloc_r+0x1c>
 80138e6:	4631      	mov	r1, r6
 80138e8:	4622      	mov	r2, r4
 80138ea:	f7fd fd0d 	bl	8011308 <memcpy>
 80138ee:	4631      	mov	r1, r6
 80138f0:	4638      	mov	r0, r7
 80138f2:	f7ff ff8f 	bl	8013814 <_free_r>
 80138f6:	e7e9      	b.n	80138cc <_realloc_r+0x1c>
 80138f8:	4635      	mov	r5, r6
 80138fa:	e7e7      	b.n	80138cc <_realloc_r+0x1c>

080138fc <_malloc_usable_size_r>:
 80138fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013900:	1f18      	subs	r0, r3, #4
 8013902:	2b00      	cmp	r3, #0
 8013904:	bfbc      	itt	lt
 8013906:	580b      	ldrlt	r3, [r1, r0]
 8013908:	18c0      	addlt	r0, r0, r3
 801390a:	4770      	bx	lr

0801390c <pow>:
 801390c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013910:	ed2d 8b04 	vpush	{d8-d9}
 8013914:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8013be8 <pow+0x2dc>
 8013918:	b08d      	sub	sp, #52	; 0x34
 801391a:	ec57 6b10 	vmov	r6, r7, d0
 801391e:	ec55 4b11 	vmov	r4, r5, d1
 8013922:	f000 f9bd 	bl	8013ca0 <__ieee754_pow>
 8013926:	f999 3000 	ldrsb.w	r3, [r9]
 801392a:	9300      	str	r3, [sp, #0]
 801392c:	3301      	adds	r3, #1
 801392e:	eeb0 8a40 	vmov.f32	s16, s0
 8013932:	eef0 8a60 	vmov.f32	s17, s1
 8013936:	46c8      	mov	r8, r9
 8013938:	d05f      	beq.n	80139fa <pow+0xee>
 801393a:	4622      	mov	r2, r4
 801393c:	462b      	mov	r3, r5
 801393e:	4620      	mov	r0, r4
 8013940:	4629      	mov	r1, r5
 8013942:	f7ed f903 	bl	8000b4c <__aeabi_dcmpun>
 8013946:	4683      	mov	fp, r0
 8013948:	2800      	cmp	r0, #0
 801394a:	d156      	bne.n	80139fa <pow+0xee>
 801394c:	4632      	mov	r2, r6
 801394e:	463b      	mov	r3, r7
 8013950:	4630      	mov	r0, r6
 8013952:	4639      	mov	r1, r7
 8013954:	f7ed f8fa 	bl	8000b4c <__aeabi_dcmpun>
 8013958:	9001      	str	r0, [sp, #4]
 801395a:	b1e8      	cbz	r0, 8013998 <pow+0x8c>
 801395c:	2200      	movs	r2, #0
 801395e:	2300      	movs	r3, #0
 8013960:	4620      	mov	r0, r4
 8013962:	4629      	mov	r1, r5
 8013964:	f7ed f8c0 	bl	8000ae8 <__aeabi_dcmpeq>
 8013968:	2800      	cmp	r0, #0
 801396a:	d046      	beq.n	80139fa <pow+0xee>
 801396c:	2301      	movs	r3, #1
 801396e:	9302      	str	r3, [sp, #8]
 8013970:	4b96      	ldr	r3, [pc, #600]	; (8013bcc <pow+0x2c0>)
 8013972:	9303      	str	r3, [sp, #12]
 8013974:	4b96      	ldr	r3, [pc, #600]	; (8013bd0 <pow+0x2c4>)
 8013976:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 801397a:	2200      	movs	r2, #0
 801397c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8013980:	9b00      	ldr	r3, [sp, #0]
 8013982:	2b02      	cmp	r3, #2
 8013984:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8013988:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801398c:	d033      	beq.n	80139f6 <pow+0xea>
 801398e:	a802      	add	r0, sp, #8
 8013990:	f000 ff55 	bl	801483e <matherr>
 8013994:	bb48      	cbnz	r0, 80139ea <pow+0xde>
 8013996:	e05d      	b.n	8013a54 <pow+0x148>
 8013998:	f04f 0a00 	mov.w	sl, #0
 801399c:	f04f 0b00 	mov.w	fp, #0
 80139a0:	4652      	mov	r2, sl
 80139a2:	465b      	mov	r3, fp
 80139a4:	4630      	mov	r0, r6
 80139a6:	4639      	mov	r1, r7
 80139a8:	f7ed f89e 	bl	8000ae8 <__aeabi_dcmpeq>
 80139ac:	ec4b ab19 	vmov	d9, sl, fp
 80139b0:	2800      	cmp	r0, #0
 80139b2:	d054      	beq.n	8013a5e <pow+0x152>
 80139b4:	4652      	mov	r2, sl
 80139b6:	465b      	mov	r3, fp
 80139b8:	4620      	mov	r0, r4
 80139ba:	4629      	mov	r1, r5
 80139bc:	f7ed f894 	bl	8000ae8 <__aeabi_dcmpeq>
 80139c0:	4680      	mov	r8, r0
 80139c2:	b318      	cbz	r0, 8013a0c <pow+0x100>
 80139c4:	2301      	movs	r3, #1
 80139c6:	9302      	str	r3, [sp, #8]
 80139c8:	4b80      	ldr	r3, [pc, #512]	; (8013bcc <pow+0x2c0>)
 80139ca:	9303      	str	r3, [sp, #12]
 80139cc:	9b01      	ldr	r3, [sp, #4]
 80139ce:	930a      	str	r3, [sp, #40]	; 0x28
 80139d0:	9b00      	ldr	r3, [sp, #0]
 80139d2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80139d6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80139da:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80139de:	2b00      	cmp	r3, #0
 80139e0:	d0d5      	beq.n	801398e <pow+0x82>
 80139e2:	4b7b      	ldr	r3, [pc, #492]	; (8013bd0 <pow+0x2c4>)
 80139e4:	2200      	movs	r2, #0
 80139e6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80139ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80139ec:	b11b      	cbz	r3, 80139f6 <pow+0xea>
 80139ee:	f7fd fc47 	bl	8011280 <__errno>
 80139f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80139f4:	6003      	str	r3, [r0, #0]
 80139f6:	ed9d 8b08 	vldr	d8, [sp, #32]
 80139fa:	eeb0 0a48 	vmov.f32	s0, s16
 80139fe:	eef0 0a68 	vmov.f32	s1, s17
 8013a02:	b00d      	add	sp, #52	; 0x34
 8013a04:	ecbd 8b04 	vpop	{d8-d9}
 8013a08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a0c:	ec45 4b10 	vmov	d0, r4, r5
 8013a10:	f000 ff0d 	bl	801482e <finite>
 8013a14:	2800      	cmp	r0, #0
 8013a16:	d0f0      	beq.n	80139fa <pow+0xee>
 8013a18:	4652      	mov	r2, sl
 8013a1a:	465b      	mov	r3, fp
 8013a1c:	4620      	mov	r0, r4
 8013a1e:	4629      	mov	r1, r5
 8013a20:	f7ed f86c 	bl	8000afc <__aeabi_dcmplt>
 8013a24:	2800      	cmp	r0, #0
 8013a26:	d0e8      	beq.n	80139fa <pow+0xee>
 8013a28:	2301      	movs	r3, #1
 8013a2a:	9302      	str	r3, [sp, #8]
 8013a2c:	4b67      	ldr	r3, [pc, #412]	; (8013bcc <pow+0x2c0>)
 8013a2e:	9303      	str	r3, [sp, #12]
 8013a30:	f999 3000 	ldrsb.w	r3, [r9]
 8013a34:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8013a38:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8013a3c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8013a40:	b913      	cbnz	r3, 8013a48 <pow+0x13c>
 8013a42:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8013a46:	e7a2      	b.n	801398e <pow+0x82>
 8013a48:	4962      	ldr	r1, [pc, #392]	; (8013bd4 <pow+0x2c8>)
 8013a4a:	2000      	movs	r0, #0
 8013a4c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8013a50:	2b02      	cmp	r3, #2
 8013a52:	d19c      	bne.n	801398e <pow+0x82>
 8013a54:	f7fd fc14 	bl	8011280 <__errno>
 8013a58:	2321      	movs	r3, #33	; 0x21
 8013a5a:	6003      	str	r3, [r0, #0]
 8013a5c:	e7c5      	b.n	80139ea <pow+0xde>
 8013a5e:	eeb0 0a48 	vmov.f32	s0, s16
 8013a62:	eef0 0a68 	vmov.f32	s1, s17
 8013a66:	f000 fee2 	bl	801482e <finite>
 8013a6a:	9000      	str	r0, [sp, #0]
 8013a6c:	2800      	cmp	r0, #0
 8013a6e:	f040 8081 	bne.w	8013b74 <pow+0x268>
 8013a72:	ec47 6b10 	vmov	d0, r6, r7
 8013a76:	f000 feda 	bl	801482e <finite>
 8013a7a:	2800      	cmp	r0, #0
 8013a7c:	d07a      	beq.n	8013b74 <pow+0x268>
 8013a7e:	ec45 4b10 	vmov	d0, r4, r5
 8013a82:	f000 fed4 	bl	801482e <finite>
 8013a86:	2800      	cmp	r0, #0
 8013a88:	d074      	beq.n	8013b74 <pow+0x268>
 8013a8a:	ec53 2b18 	vmov	r2, r3, d8
 8013a8e:	ee18 0a10 	vmov	r0, s16
 8013a92:	4619      	mov	r1, r3
 8013a94:	f7ed f85a 	bl	8000b4c <__aeabi_dcmpun>
 8013a98:	f999 9000 	ldrsb.w	r9, [r9]
 8013a9c:	4b4b      	ldr	r3, [pc, #300]	; (8013bcc <pow+0x2c0>)
 8013a9e:	b1b0      	cbz	r0, 8013ace <pow+0x1c2>
 8013aa0:	2201      	movs	r2, #1
 8013aa2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8013aa6:	9b00      	ldr	r3, [sp, #0]
 8013aa8:	930a      	str	r3, [sp, #40]	; 0x28
 8013aaa:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8013aae:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8013ab2:	f1b9 0f00 	cmp.w	r9, #0
 8013ab6:	d0c4      	beq.n	8013a42 <pow+0x136>
 8013ab8:	4652      	mov	r2, sl
 8013aba:	465b      	mov	r3, fp
 8013abc:	4650      	mov	r0, sl
 8013abe:	4659      	mov	r1, fp
 8013ac0:	f7ec fed4 	bl	800086c <__aeabi_ddiv>
 8013ac4:	f1b9 0f02 	cmp.w	r9, #2
 8013ac8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8013acc:	e7c1      	b.n	8013a52 <pow+0x146>
 8013ace:	2203      	movs	r2, #3
 8013ad0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8013ad4:	900a      	str	r0, [sp, #40]	; 0x28
 8013ad6:	4629      	mov	r1, r5
 8013ad8:	4620      	mov	r0, r4
 8013ada:	2200      	movs	r2, #0
 8013adc:	4b3e      	ldr	r3, [pc, #248]	; (8013bd8 <pow+0x2cc>)
 8013ade:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8013ae2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8013ae6:	f7ec fd97 	bl	8000618 <__aeabi_dmul>
 8013aea:	4604      	mov	r4, r0
 8013aec:	460d      	mov	r5, r1
 8013aee:	f1b9 0f00 	cmp.w	r9, #0
 8013af2:	d124      	bne.n	8013b3e <pow+0x232>
 8013af4:	4b39      	ldr	r3, [pc, #228]	; (8013bdc <pow+0x2d0>)
 8013af6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8013afa:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8013afe:	4630      	mov	r0, r6
 8013b00:	4652      	mov	r2, sl
 8013b02:	465b      	mov	r3, fp
 8013b04:	4639      	mov	r1, r7
 8013b06:	f7ec fff9 	bl	8000afc <__aeabi_dcmplt>
 8013b0a:	2800      	cmp	r0, #0
 8013b0c:	d056      	beq.n	8013bbc <pow+0x2b0>
 8013b0e:	ec45 4b10 	vmov	d0, r4, r5
 8013b12:	f000 fea1 	bl	8014858 <rint>
 8013b16:	4622      	mov	r2, r4
 8013b18:	462b      	mov	r3, r5
 8013b1a:	ec51 0b10 	vmov	r0, r1, d0
 8013b1e:	f7ec ffe3 	bl	8000ae8 <__aeabi_dcmpeq>
 8013b22:	b920      	cbnz	r0, 8013b2e <pow+0x222>
 8013b24:	4b2e      	ldr	r3, [pc, #184]	; (8013be0 <pow+0x2d4>)
 8013b26:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8013b2a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8013b2e:	f998 3000 	ldrsb.w	r3, [r8]
 8013b32:	2b02      	cmp	r3, #2
 8013b34:	d142      	bne.n	8013bbc <pow+0x2b0>
 8013b36:	f7fd fba3 	bl	8011280 <__errno>
 8013b3a:	2322      	movs	r3, #34	; 0x22
 8013b3c:	e78d      	b.n	8013a5a <pow+0x14e>
 8013b3e:	4b29      	ldr	r3, [pc, #164]	; (8013be4 <pow+0x2d8>)
 8013b40:	2200      	movs	r2, #0
 8013b42:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8013b46:	4630      	mov	r0, r6
 8013b48:	4652      	mov	r2, sl
 8013b4a:	465b      	mov	r3, fp
 8013b4c:	4639      	mov	r1, r7
 8013b4e:	f7ec ffd5 	bl	8000afc <__aeabi_dcmplt>
 8013b52:	2800      	cmp	r0, #0
 8013b54:	d0eb      	beq.n	8013b2e <pow+0x222>
 8013b56:	ec45 4b10 	vmov	d0, r4, r5
 8013b5a:	f000 fe7d 	bl	8014858 <rint>
 8013b5e:	4622      	mov	r2, r4
 8013b60:	462b      	mov	r3, r5
 8013b62:	ec51 0b10 	vmov	r0, r1, d0
 8013b66:	f7ec ffbf 	bl	8000ae8 <__aeabi_dcmpeq>
 8013b6a:	2800      	cmp	r0, #0
 8013b6c:	d1df      	bne.n	8013b2e <pow+0x222>
 8013b6e:	2200      	movs	r2, #0
 8013b70:	4b18      	ldr	r3, [pc, #96]	; (8013bd4 <pow+0x2c8>)
 8013b72:	e7da      	b.n	8013b2a <pow+0x21e>
 8013b74:	2200      	movs	r2, #0
 8013b76:	2300      	movs	r3, #0
 8013b78:	ec51 0b18 	vmov	r0, r1, d8
 8013b7c:	f7ec ffb4 	bl	8000ae8 <__aeabi_dcmpeq>
 8013b80:	2800      	cmp	r0, #0
 8013b82:	f43f af3a 	beq.w	80139fa <pow+0xee>
 8013b86:	ec47 6b10 	vmov	d0, r6, r7
 8013b8a:	f000 fe50 	bl	801482e <finite>
 8013b8e:	2800      	cmp	r0, #0
 8013b90:	f43f af33 	beq.w	80139fa <pow+0xee>
 8013b94:	ec45 4b10 	vmov	d0, r4, r5
 8013b98:	f000 fe49 	bl	801482e <finite>
 8013b9c:	2800      	cmp	r0, #0
 8013b9e:	f43f af2c 	beq.w	80139fa <pow+0xee>
 8013ba2:	2304      	movs	r3, #4
 8013ba4:	9302      	str	r3, [sp, #8]
 8013ba6:	4b09      	ldr	r3, [pc, #36]	; (8013bcc <pow+0x2c0>)
 8013ba8:	9303      	str	r3, [sp, #12]
 8013baa:	2300      	movs	r3, #0
 8013bac:	930a      	str	r3, [sp, #40]	; 0x28
 8013bae:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8013bb2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8013bb6:	ed8d 9b08 	vstr	d9, [sp, #32]
 8013bba:	e7b8      	b.n	8013b2e <pow+0x222>
 8013bbc:	a802      	add	r0, sp, #8
 8013bbe:	f000 fe3e 	bl	801483e <matherr>
 8013bc2:	2800      	cmp	r0, #0
 8013bc4:	f47f af11 	bne.w	80139ea <pow+0xde>
 8013bc8:	e7b5      	b.n	8013b36 <pow+0x22a>
 8013bca:	bf00      	nop
 8013bcc:	08027568 	.word	0x08027568
 8013bd0:	3ff00000 	.word	0x3ff00000
 8013bd4:	fff00000 	.word	0xfff00000
 8013bd8:	3fe00000 	.word	0x3fe00000
 8013bdc:	47efffff 	.word	0x47efffff
 8013be0:	c7efffff 	.word	0xc7efffff
 8013be4:	7ff00000 	.word	0x7ff00000
 8013be8:	20000224 	.word	0x20000224

08013bec <sqrt>:
 8013bec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013bf0:	ed2d 8b02 	vpush	{d8}
 8013bf4:	b08b      	sub	sp, #44	; 0x2c
 8013bf6:	ec55 4b10 	vmov	r4, r5, d0
 8013bfa:	f000 fd5f 	bl	80146bc <__ieee754_sqrt>
 8013bfe:	4b26      	ldr	r3, [pc, #152]	; (8013c98 <sqrt+0xac>)
 8013c00:	eeb0 8a40 	vmov.f32	s16, s0
 8013c04:	eef0 8a60 	vmov.f32	s17, s1
 8013c08:	f993 6000 	ldrsb.w	r6, [r3]
 8013c0c:	1c73      	adds	r3, r6, #1
 8013c0e:	d02a      	beq.n	8013c66 <sqrt+0x7a>
 8013c10:	4622      	mov	r2, r4
 8013c12:	462b      	mov	r3, r5
 8013c14:	4620      	mov	r0, r4
 8013c16:	4629      	mov	r1, r5
 8013c18:	f7ec ff98 	bl	8000b4c <__aeabi_dcmpun>
 8013c1c:	4607      	mov	r7, r0
 8013c1e:	bb10      	cbnz	r0, 8013c66 <sqrt+0x7a>
 8013c20:	f04f 0800 	mov.w	r8, #0
 8013c24:	f04f 0900 	mov.w	r9, #0
 8013c28:	4642      	mov	r2, r8
 8013c2a:	464b      	mov	r3, r9
 8013c2c:	4620      	mov	r0, r4
 8013c2e:	4629      	mov	r1, r5
 8013c30:	f7ec ff64 	bl	8000afc <__aeabi_dcmplt>
 8013c34:	b1b8      	cbz	r0, 8013c66 <sqrt+0x7a>
 8013c36:	2301      	movs	r3, #1
 8013c38:	9300      	str	r3, [sp, #0]
 8013c3a:	4b18      	ldr	r3, [pc, #96]	; (8013c9c <sqrt+0xb0>)
 8013c3c:	9301      	str	r3, [sp, #4]
 8013c3e:	9708      	str	r7, [sp, #32]
 8013c40:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8013c44:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8013c48:	b9b6      	cbnz	r6, 8013c78 <sqrt+0x8c>
 8013c4a:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8013c4e:	4668      	mov	r0, sp
 8013c50:	f000 fdf5 	bl	801483e <matherr>
 8013c54:	b1d0      	cbz	r0, 8013c8c <sqrt+0xa0>
 8013c56:	9b08      	ldr	r3, [sp, #32]
 8013c58:	b11b      	cbz	r3, 8013c62 <sqrt+0x76>
 8013c5a:	f7fd fb11 	bl	8011280 <__errno>
 8013c5e:	9b08      	ldr	r3, [sp, #32]
 8013c60:	6003      	str	r3, [r0, #0]
 8013c62:	ed9d 8b06 	vldr	d8, [sp, #24]
 8013c66:	eeb0 0a48 	vmov.f32	s0, s16
 8013c6a:	eef0 0a68 	vmov.f32	s1, s17
 8013c6e:	b00b      	add	sp, #44	; 0x2c
 8013c70:	ecbd 8b02 	vpop	{d8}
 8013c74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013c78:	4642      	mov	r2, r8
 8013c7a:	464b      	mov	r3, r9
 8013c7c:	4640      	mov	r0, r8
 8013c7e:	4649      	mov	r1, r9
 8013c80:	f7ec fdf4 	bl	800086c <__aeabi_ddiv>
 8013c84:	2e02      	cmp	r6, #2
 8013c86:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8013c8a:	d1e0      	bne.n	8013c4e <sqrt+0x62>
 8013c8c:	f7fd faf8 	bl	8011280 <__errno>
 8013c90:	2321      	movs	r3, #33	; 0x21
 8013c92:	6003      	str	r3, [r0, #0]
 8013c94:	e7df      	b.n	8013c56 <sqrt+0x6a>
 8013c96:	bf00      	nop
 8013c98:	20000224 	.word	0x20000224
 8013c9c:	0802756c 	.word	0x0802756c

08013ca0 <__ieee754_pow>:
 8013ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ca4:	b091      	sub	sp, #68	; 0x44
 8013ca6:	ed8d 1b00 	vstr	d1, [sp]
 8013caa:	e9dd 2900 	ldrd	r2, r9, [sp]
 8013cae:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8013cb2:	ea58 0302 	orrs.w	r3, r8, r2
 8013cb6:	ec57 6b10 	vmov	r6, r7, d0
 8013cba:	f000 84be 	beq.w	801463a <__ieee754_pow+0x99a>
 8013cbe:	4b7a      	ldr	r3, [pc, #488]	; (8013ea8 <__ieee754_pow+0x208>)
 8013cc0:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8013cc4:	429c      	cmp	r4, r3
 8013cc6:	463d      	mov	r5, r7
 8013cc8:	ee10 aa10 	vmov	sl, s0
 8013ccc:	dc09      	bgt.n	8013ce2 <__ieee754_pow+0x42>
 8013cce:	d103      	bne.n	8013cd8 <__ieee754_pow+0x38>
 8013cd0:	b93e      	cbnz	r6, 8013ce2 <__ieee754_pow+0x42>
 8013cd2:	45a0      	cmp	r8, r4
 8013cd4:	dc0d      	bgt.n	8013cf2 <__ieee754_pow+0x52>
 8013cd6:	e001      	b.n	8013cdc <__ieee754_pow+0x3c>
 8013cd8:	4598      	cmp	r8, r3
 8013cda:	dc02      	bgt.n	8013ce2 <__ieee754_pow+0x42>
 8013cdc:	4598      	cmp	r8, r3
 8013cde:	d10e      	bne.n	8013cfe <__ieee754_pow+0x5e>
 8013ce0:	b16a      	cbz	r2, 8013cfe <__ieee754_pow+0x5e>
 8013ce2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8013ce6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8013cea:	ea54 030a 	orrs.w	r3, r4, sl
 8013cee:	f000 84a4 	beq.w	801463a <__ieee754_pow+0x99a>
 8013cf2:	486e      	ldr	r0, [pc, #440]	; (8013eac <__ieee754_pow+0x20c>)
 8013cf4:	b011      	add	sp, #68	; 0x44
 8013cf6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013cfa:	f000 bda5 	b.w	8014848 <nan>
 8013cfe:	2d00      	cmp	r5, #0
 8013d00:	da53      	bge.n	8013daa <__ieee754_pow+0x10a>
 8013d02:	4b6b      	ldr	r3, [pc, #428]	; (8013eb0 <__ieee754_pow+0x210>)
 8013d04:	4598      	cmp	r8, r3
 8013d06:	dc4d      	bgt.n	8013da4 <__ieee754_pow+0x104>
 8013d08:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8013d0c:	4598      	cmp	r8, r3
 8013d0e:	dd4c      	ble.n	8013daa <__ieee754_pow+0x10a>
 8013d10:	ea4f 5328 	mov.w	r3, r8, asr #20
 8013d14:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8013d18:	2b14      	cmp	r3, #20
 8013d1a:	dd26      	ble.n	8013d6a <__ieee754_pow+0xca>
 8013d1c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8013d20:	fa22 f103 	lsr.w	r1, r2, r3
 8013d24:	fa01 f303 	lsl.w	r3, r1, r3
 8013d28:	4293      	cmp	r3, r2
 8013d2a:	d13e      	bne.n	8013daa <__ieee754_pow+0x10a>
 8013d2c:	f001 0101 	and.w	r1, r1, #1
 8013d30:	f1c1 0b02 	rsb	fp, r1, #2
 8013d34:	2a00      	cmp	r2, #0
 8013d36:	d15b      	bne.n	8013df0 <__ieee754_pow+0x150>
 8013d38:	4b5b      	ldr	r3, [pc, #364]	; (8013ea8 <__ieee754_pow+0x208>)
 8013d3a:	4598      	cmp	r8, r3
 8013d3c:	d124      	bne.n	8013d88 <__ieee754_pow+0xe8>
 8013d3e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8013d42:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8013d46:	ea53 030a 	orrs.w	r3, r3, sl
 8013d4a:	f000 8476 	beq.w	801463a <__ieee754_pow+0x99a>
 8013d4e:	4b59      	ldr	r3, [pc, #356]	; (8013eb4 <__ieee754_pow+0x214>)
 8013d50:	429c      	cmp	r4, r3
 8013d52:	dd2d      	ble.n	8013db0 <__ieee754_pow+0x110>
 8013d54:	f1b9 0f00 	cmp.w	r9, #0
 8013d58:	f280 8473 	bge.w	8014642 <__ieee754_pow+0x9a2>
 8013d5c:	2000      	movs	r0, #0
 8013d5e:	2100      	movs	r1, #0
 8013d60:	ec41 0b10 	vmov	d0, r0, r1
 8013d64:	b011      	add	sp, #68	; 0x44
 8013d66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d6a:	2a00      	cmp	r2, #0
 8013d6c:	d13e      	bne.n	8013dec <__ieee754_pow+0x14c>
 8013d6e:	f1c3 0314 	rsb	r3, r3, #20
 8013d72:	fa48 f103 	asr.w	r1, r8, r3
 8013d76:	fa01 f303 	lsl.w	r3, r1, r3
 8013d7a:	4543      	cmp	r3, r8
 8013d7c:	f040 8469 	bne.w	8014652 <__ieee754_pow+0x9b2>
 8013d80:	f001 0101 	and.w	r1, r1, #1
 8013d84:	f1c1 0b02 	rsb	fp, r1, #2
 8013d88:	4b4b      	ldr	r3, [pc, #300]	; (8013eb8 <__ieee754_pow+0x218>)
 8013d8a:	4598      	cmp	r8, r3
 8013d8c:	d118      	bne.n	8013dc0 <__ieee754_pow+0x120>
 8013d8e:	f1b9 0f00 	cmp.w	r9, #0
 8013d92:	f280 845a 	bge.w	801464a <__ieee754_pow+0x9aa>
 8013d96:	4948      	ldr	r1, [pc, #288]	; (8013eb8 <__ieee754_pow+0x218>)
 8013d98:	4632      	mov	r2, r6
 8013d9a:	463b      	mov	r3, r7
 8013d9c:	2000      	movs	r0, #0
 8013d9e:	f7ec fd65 	bl	800086c <__aeabi_ddiv>
 8013da2:	e7dd      	b.n	8013d60 <__ieee754_pow+0xc0>
 8013da4:	f04f 0b02 	mov.w	fp, #2
 8013da8:	e7c4      	b.n	8013d34 <__ieee754_pow+0x94>
 8013daa:	f04f 0b00 	mov.w	fp, #0
 8013dae:	e7c1      	b.n	8013d34 <__ieee754_pow+0x94>
 8013db0:	f1b9 0f00 	cmp.w	r9, #0
 8013db4:	dad2      	bge.n	8013d5c <__ieee754_pow+0xbc>
 8013db6:	e9dd 0300 	ldrd	r0, r3, [sp]
 8013dba:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8013dbe:	e7cf      	b.n	8013d60 <__ieee754_pow+0xc0>
 8013dc0:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8013dc4:	d106      	bne.n	8013dd4 <__ieee754_pow+0x134>
 8013dc6:	4632      	mov	r2, r6
 8013dc8:	463b      	mov	r3, r7
 8013dca:	4610      	mov	r0, r2
 8013dcc:	4619      	mov	r1, r3
 8013dce:	f7ec fc23 	bl	8000618 <__aeabi_dmul>
 8013dd2:	e7c5      	b.n	8013d60 <__ieee754_pow+0xc0>
 8013dd4:	4b39      	ldr	r3, [pc, #228]	; (8013ebc <__ieee754_pow+0x21c>)
 8013dd6:	4599      	cmp	r9, r3
 8013dd8:	d10a      	bne.n	8013df0 <__ieee754_pow+0x150>
 8013dda:	2d00      	cmp	r5, #0
 8013ddc:	db08      	blt.n	8013df0 <__ieee754_pow+0x150>
 8013dde:	ec47 6b10 	vmov	d0, r6, r7
 8013de2:	b011      	add	sp, #68	; 0x44
 8013de4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013de8:	f000 bc68 	b.w	80146bc <__ieee754_sqrt>
 8013dec:	f04f 0b00 	mov.w	fp, #0
 8013df0:	ec47 6b10 	vmov	d0, r6, r7
 8013df4:	f000 fd12 	bl	801481c <fabs>
 8013df8:	ec51 0b10 	vmov	r0, r1, d0
 8013dfc:	f1ba 0f00 	cmp.w	sl, #0
 8013e00:	d127      	bne.n	8013e52 <__ieee754_pow+0x1b2>
 8013e02:	b124      	cbz	r4, 8013e0e <__ieee754_pow+0x16e>
 8013e04:	4b2c      	ldr	r3, [pc, #176]	; (8013eb8 <__ieee754_pow+0x218>)
 8013e06:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8013e0a:	429a      	cmp	r2, r3
 8013e0c:	d121      	bne.n	8013e52 <__ieee754_pow+0x1b2>
 8013e0e:	f1b9 0f00 	cmp.w	r9, #0
 8013e12:	da05      	bge.n	8013e20 <__ieee754_pow+0x180>
 8013e14:	4602      	mov	r2, r0
 8013e16:	460b      	mov	r3, r1
 8013e18:	2000      	movs	r0, #0
 8013e1a:	4927      	ldr	r1, [pc, #156]	; (8013eb8 <__ieee754_pow+0x218>)
 8013e1c:	f7ec fd26 	bl	800086c <__aeabi_ddiv>
 8013e20:	2d00      	cmp	r5, #0
 8013e22:	da9d      	bge.n	8013d60 <__ieee754_pow+0xc0>
 8013e24:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8013e28:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8013e2c:	ea54 030b 	orrs.w	r3, r4, fp
 8013e30:	d108      	bne.n	8013e44 <__ieee754_pow+0x1a4>
 8013e32:	4602      	mov	r2, r0
 8013e34:	460b      	mov	r3, r1
 8013e36:	4610      	mov	r0, r2
 8013e38:	4619      	mov	r1, r3
 8013e3a:	f7ec fa35 	bl	80002a8 <__aeabi_dsub>
 8013e3e:	4602      	mov	r2, r0
 8013e40:	460b      	mov	r3, r1
 8013e42:	e7ac      	b.n	8013d9e <__ieee754_pow+0xfe>
 8013e44:	f1bb 0f01 	cmp.w	fp, #1
 8013e48:	d18a      	bne.n	8013d60 <__ieee754_pow+0xc0>
 8013e4a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013e4e:	4619      	mov	r1, r3
 8013e50:	e786      	b.n	8013d60 <__ieee754_pow+0xc0>
 8013e52:	0fed      	lsrs	r5, r5, #31
 8013e54:	1e6b      	subs	r3, r5, #1
 8013e56:	930d      	str	r3, [sp, #52]	; 0x34
 8013e58:	ea5b 0303 	orrs.w	r3, fp, r3
 8013e5c:	d102      	bne.n	8013e64 <__ieee754_pow+0x1c4>
 8013e5e:	4632      	mov	r2, r6
 8013e60:	463b      	mov	r3, r7
 8013e62:	e7e8      	b.n	8013e36 <__ieee754_pow+0x196>
 8013e64:	4b16      	ldr	r3, [pc, #88]	; (8013ec0 <__ieee754_pow+0x220>)
 8013e66:	4598      	cmp	r8, r3
 8013e68:	f340 80fe 	ble.w	8014068 <__ieee754_pow+0x3c8>
 8013e6c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8013e70:	4598      	cmp	r8, r3
 8013e72:	dd0a      	ble.n	8013e8a <__ieee754_pow+0x1ea>
 8013e74:	4b0f      	ldr	r3, [pc, #60]	; (8013eb4 <__ieee754_pow+0x214>)
 8013e76:	429c      	cmp	r4, r3
 8013e78:	dc0d      	bgt.n	8013e96 <__ieee754_pow+0x1f6>
 8013e7a:	f1b9 0f00 	cmp.w	r9, #0
 8013e7e:	f6bf af6d 	bge.w	8013d5c <__ieee754_pow+0xbc>
 8013e82:	a307      	add	r3, pc, #28	; (adr r3, 8013ea0 <__ieee754_pow+0x200>)
 8013e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e88:	e79f      	b.n	8013dca <__ieee754_pow+0x12a>
 8013e8a:	4b0e      	ldr	r3, [pc, #56]	; (8013ec4 <__ieee754_pow+0x224>)
 8013e8c:	429c      	cmp	r4, r3
 8013e8e:	ddf4      	ble.n	8013e7a <__ieee754_pow+0x1da>
 8013e90:	4b09      	ldr	r3, [pc, #36]	; (8013eb8 <__ieee754_pow+0x218>)
 8013e92:	429c      	cmp	r4, r3
 8013e94:	dd18      	ble.n	8013ec8 <__ieee754_pow+0x228>
 8013e96:	f1b9 0f00 	cmp.w	r9, #0
 8013e9a:	dcf2      	bgt.n	8013e82 <__ieee754_pow+0x1e2>
 8013e9c:	e75e      	b.n	8013d5c <__ieee754_pow+0xbc>
 8013e9e:	bf00      	nop
 8013ea0:	8800759c 	.word	0x8800759c
 8013ea4:	7e37e43c 	.word	0x7e37e43c
 8013ea8:	7ff00000 	.word	0x7ff00000
 8013eac:	08027439 	.word	0x08027439
 8013eb0:	433fffff 	.word	0x433fffff
 8013eb4:	3fefffff 	.word	0x3fefffff
 8013eb8:	3ff00000 	.word	0x3ff00000
 8013ebc:	3fe00000 	.word	0x3fe00000
 8013ec0:	41e00000 	.word	0x41e00000
 8013ec4:	3feffffe 	.word	0x3feffffe
 8013ec8:	2200      	movs	r2, #0
 8013eca:	4b63      	ldr	r3, [pc, #396]	; (8014058 <__ieee754_pow+0x3b8>)
 8013ecc:	f7ec f9ec 	bl	80002a8 <__aeabi_dsub>
 8013ed0:	a355      	add	r3, pc, #340	; (adr r3, 8014028 <__ieee754_pow+0x388>)
 8013ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ed6:	4604      	mov	r4, r0
 8013ed8:	460d      	mov	r5, r1
 8013eda:	f7ec fb9d 	bl	8000618 <__aeabi_dmul>
 8013ede:	a354      	add	r3, pc, #336	; (adr r3, 8014030 <__ieee754_pow+0x390>)
 8013ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ee4:	4606      	mov	r6, r0
 8013ee6:	460f      	mov	r7, r1
 8013ee8:	4620      	mov	r0, r4
 8013eea:	4629      	mov	r1, r5
 8013eec:	f7ec fb94 	bl	8000618 <__aeabi_dmul>
 8013ef0:	2200      	movs	r2, #0
 8013ef2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013ef6:	4b59      	ldr	r3, [pc, #356]	; (801405c <__ieee754_pow+0x3bc>)
 8013ef8:	4620      	mov	r0, r4
 8013efa:	4629      	mov	r1, r5
 8013efc:	f7ec fb8c 	bl	8000618 <__aeabi_dmul>
 8013f00:	4602      	mov	r2, r0
 8013f02:	460b      	mov	r3, r1
 8013f04:	a14c      	add	r1, pc, #304	; (adr r1, 8014038 <__ieee754_pow+0x398>)
 8013f06:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013f0a:	f7ec f9cd 	bl	80002a8 <__aeabi_dsub>
 8013f0e:	4622      	mov	r2, r4
 8013f10:	462b      	mov	r3, r5
 8013f12:	f7ec fb81 	bl	8000618 <__aeabi_dmul>
 8013f16:	4602      	mov	r2, r0
 8013f18:	460b      	mov	r3, r1
 8013f1a:	2000      	movs	r0, #0
 8013f1c:	4950      	ldr	r1, [pc, #320]	; (8014060 <__ieee754_pow+0x3c0>)
 8013f1e:	f7ec f9c3 	bl	80002a8 <__aeabi_dsub>
 8013f22:	4622      	mov	r2, r4
 8013f24:	462b      	mov	r3, r5
 8013f26:	4680      	mov	r8, r0
 8013f28:	4689      	mov	r9, r1
 8013f2a:	4620      	mov	r0, r4
 8013f2c:	4629      	mov	r1, r5
 8013f2e:	f7ec fb73 	bl	8000618 <__aeabi_dmul>
 8013f32:	4602      	mov	r2, r0
 8013f34:	460b      	mov	r3, r1
 8013f36:	4640      	mov	r0, r8
 8013f38:	4649      	mov	r1, r9
 8013f3a:	f7ec fb6d 	bl	8000618 <__aeabi_dmul>
 8013f3e:	a340      	add	r3, pc, #256	; (adr r3, 8014040 <__ieee754_pow+0x3a0>)
 8013f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f44:	f7ec fb68 	bl	8000618 <__aeabi_dmul>
 8013f48:	4602      	mov	r2, r0
 8013f4a:	460b      	mov	r3, r1
 8013f4c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013f50:	f7ec f9aa 	bl	80002a8 <__aeabi_dsub>
 8013f54:	4602      	mov	r2, r0
 8013f56:	460b      	mov	r3, r1
 8013f58:	4604      	mov	r4, r0
 8013f5a:	460d      	mov	r5, r1
 8013f5c:	4630      	mov	r0, r6
 8013f5e:	4639      	mov	r1, r7
 8013f60:	f7ec f9a4 	bl	80002ac <__adddf3>
 8013f64:	2000      	movs	r0, #0
 8013f66:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013f6a:	4632      	mov	r2, r6
 8013f6c:	463b      	mov	r3, r7
 8013f6e:	f7ec f99b 	bl	80002a8 <__aeabi_dsub>
 8013f72:	4602      	mov	r2, r0
 8013f74:	460b      	mov	r3, r1
 8013f76:	4620      	mov	r0, r4
 8013f78:	4629      	mov	r1, r5
 8013f7a:	f7ec f995 	bl	80002a8 <__aeabi_dsub>
 8013f7e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013f80:	f10b 33ff 	add.w	r3, fp, #4294967295
 8013f84:	4313      	orrs	r3, r2
 8013f86:	4606      	mov	r6, r0
 8013f88:	460f      	mov	r7, r1
 8013f8a:	f040 81eb 	bne.w	8014364 <__ieee754_pow+0x6c4>
 8013f8e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8014048 <__ieee754_pow+0x3a8>
 8013f92:	e9dd 4500 	ldrd	r4, r5, [sp]
 8013f96:	2400      	movs	r4, #0
 8013f98:	4622      	mov	r2, r4
 8013f9a:	462b      	mov	r3, r5
 8013f9c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013fa0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013fa4:	f7ec f980 	bl	80002a8 <__aeabi_dsub>
 8013fa8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013fac:	f7ec fb34 	bl	8000618 <__aeabi_dmul>
 8013fb0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013fb4:	4680      	mov	r8, r0
 8013fb6:	4689      	mov	r9, r1
 8013fb8:	4630      	mov	r0, r6
 8013fba:	4639      	mov	r1, r7
 8013fbc:	f7ec fb2c 	bl	8000618 <__aeabi_dmul>
 8013fc0:	4602      	mov	r2, r0
 8013fc2:	460b      	mov	r3, r1
 8013fc4:	4640      	mov	r0, r8
 8013fc6:	4649      	mov	r1, r9
 8013fc8:	f7ec f970 	bl	80002ac <__adddf3>
 8013fcc:	4622      	mov	r2, r4
 8013fce:	462b      	mov	r3, r5
 8013fd0:	4680      	mov	r8, r0
 8013fd2:	4689      	mov	r9, r1
 8013fd4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013fd8:	f7ec fb1e 	bl	8000618 <__aeabi_dmul>
 8013fdc:	460b      	mov	r3, r1
 8013fde:	4604      	mov	r4, r0
 8013fe0:	460d      	mov	r5, r1
 8013fe2:	4602      	mov	r2, r0
 8013fe4:	4649      	mov	r1, r9
 8013fe6:	4640      	mov	r0, r8
 8013fe8:	e9cd 4500 	strd	r4, r5, [sp]
 8013fec:	f7ec f95e 	bl	80002ac <__adddf3>
 8013ff0:	4b1c      	ldr	r3, [pc, #112]	; (8014064 <__ieee754_pow+0x3c4>)
 8013ff2:	4299      	cmp	r1, r3
 8013ff4:	4606      	mov	r6, r0
 8013ff6:	460f      	mov	r7, r1
 8013ff8:	468b      	mov	fp, r1
 8013ffa:	f340 82f7 	ble.w	80145ec <__ieee754_pow+0x94c>
 8013ffe:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8014002:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8014006:	4303      	orrs	r3, r0
 8014008:	f000 81ea 	beq.w	80143e0 <__ieee754_pow+0x740>
 801400c:	a310      	add	r3, pc, #64	; (adr r3, 8014050 <__ieee754_pow+0x3b0>)
 801400e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014012:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014016:	f7ec faff 	bl	8000618 <__aeabi_dmul>
 801401a:	a30d      	add	r3, pc, #52	; (adr r3, 8014050 <__ieee754_pow+0x3b0>)
 801401c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014020:	e6d5      	b.n	8013dce <__ieee754_pow+0x12e>
 8014022:	bf00      	nop
 8014024:	f3af 8000 	nop.w
 8014028:	60000000 	.word	0x60000000
 801402c:	3ff71547 	.word	0x3ff71547
 8014030:	f85ddf44 	.word	0xf85ddf44
 8014034:	3e54ae0b 	.word	0x3e54ae0b
 8014038:	55555555 	.word	0x55555555
 801403c:	3fd55555 	.word	0x3fd55555
 8014040:	652b82fe 	.word	0x652b82fe
 8014044:	3ff71547 	.word	0x3ff71547
 8014048:	00000000 	.word	0x00000000
 801404c:	bff00000 	.word	0xbff00000
 8014050:	8800759c 	.word	0x8800759c
 8014054:	7e37e43c 	.word	0x7e37e43c
 8014058:	3ff00000 	.word	0x3ff00000
 801405c:	3fd00000 	.word	0x3fd00000
 8014060:	3fe00000 	.word	0x3fe00000
 8014064:	408fffff 	.word	0x408fffff
 8014068:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 801406c:	f04f 0200 	mov.w	r2, #0
 8014070:	da05      	bge.n	801407e <__ieee754_pow+0x3de>
 8014072:	4bd3      	ldr	r3, [pc, #844]	; (80143c0 <__ieee754_pow+0x720>)
 8014074:	f7ec fad0 	bl	8000618 <__aeabi_dmul>
 8014078:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801407c:	460c      	mov	r4, r1
 801407e:	1523      	asrs	r3, r4, #20
 8014080:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8014084:	4413      	add	r3, r2
 8014086:	9309      	str	r3, [sp, #36]	; 0x24
 8014088:	4bce      	ldr	r3, [pc, #824]	; (80143c4 <__ieee754_pow+0x724>)
 801408a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801408e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8014092:	429c      	cmp	r4, r3
 8014094:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8014098:	dd08      	ble.n	80140ac <__ieee754_pow+0x40c>
 801409a:	4bcb      	ldr	r3, [pc, #812]	; (80143c8 <__ieee754_pow+0x728>)
 801409c:	429c      	cmp	r4, r3
 801409e:	f340 815e 	ble.w	801435e <__ieee754_pow+0x6be>
 80140a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80140a4:	3301      	adds	r3, #1
 80140a6:	9309      	str	r3, [sp, #36]	; 0x24
 80140a8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80140ac:	f04f 0a00 	mov.w	sl, #0
 80140b0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80140b4:	930c      	str	r3, [sp, #48]	; 0x30
 80140b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80140b8:	4bc4      	ldr	r3, [pc, #784]	; (80143cc <__ieee754_pow+0x72c>)
 80140ba:	4413      	add	r3, r2
 80140bc:	ed93 7b00 	vldr	d7, [r3]
 80140c0:	4629      	mov	r1, r5
 80140c2:	ec53 2b17 	vmov	r2, r3, d7
 80140c6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80140ca:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80140ce:	f7ec f8eb 	bl	80002a8 <__aeabi_dsub>
 80140d2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80140d6:	4606      	mov	r6, r0
 80140d8:	460f      	mov	r7, r1
 80140da:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80140de:	f7ec f8e5 	bl	80002ac <__adddf3>
 80140e2:	4602      	mov	r2, r0
 80140e4:	460b      	mov	r3, r1
 80140e6:	2000      	movs	r0, #0
 80140e8:	49b9      	ldr	r1, [pc, #740]	; (80143d0 <__ieee754_pow+0x730>)
 80140ea:	f7ec fbbf 	bl	800086c <__aeabi_ddiv>
 80140ee:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80140f2:	4602      	mov	r2, r0
 80140f4:	460b      	mov	r3, r1
 80140f6:	4630      	mov	r0, r6
 80140f8:	4639      	mov	r1, r7
 80140fa:	f7ec fa8d 	bl	8000618 <__aeabi_dmul>
 80140fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014102:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8014106:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801410a:	2300      	movs	r3, #0
 801410c:	9302      	str	r3, [sp, #8]
 801410e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8014112:	106d      	asrs	r5, r5, #1
 8014114:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8014118:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801411c:	2200      	movs	r2, #0
 801411e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8014122:	4640      	mov	r0, r8
 8014124:	4649      	mov	r1, r9
 8014126:	4614      	mov	r4, r2
 8014128:	461d      	mov	r5, r3
 801412a:	f7ec fa75 	bl	8000618 <__aeabi_dmul>
 801412e:	4602      	mov	r2, r0
 8014130:	460b      	mov	r3, r1
 8014132:	4630      	mov	r0, r6
 8014134:	4639      	mov	r1, r7
 8014136:	f7ec f8b7 	bl	80002a8 <__aeabi_dsub>
 801413a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801413e:	4606      	mov	r6, r0
 8014140:	460f      	mov	r7, r1
 8014142:	4620      	mov	r0, r4
 8014144:	4629      	mov	r1, r5
 8014146:	f7ec f8af 	bl	80002a8 <__aeabi_dsub>
 801414a:	4602      	mov	r2, r0
 801414c:	460b      	mov	r3, r1
 801414e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8014152:	f7ec f8a9 	bl	80002a8 <__aeabi_dsub>
 8014156:	4642      	mov	r2, r8
 8014158:	464b      	mov	r3, r9
 801415a:	f7ec fa5d 	bl	8000618 <__aeabi_dmul>
 801415e:	4602      	mov	r2, r0
 8014160:	460b      	mov	r3, r1
 8014162:	4630      	mov	r0, r6
 8014164:	4639      	mov	r1, r7
 8014166:	f7ec f89f 	bl	80002a8 <__aeabi_dsub>
 801416a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801416e:	f7ec fa53 	bl	8000618 <__aeabi_dmul>
 8014172:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014176:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801417a:	4610      	mov	r0, r2
 801417c:	4619      	mov	r1, r3
 801417e:	f7ec fa4b 	bl	8000618 <__aeabi_dmul>
 8014182:	a37b      	add	r3, pc, #492	; (adr r3, 8014370 <__ieee754_pow+0x6d0>)
 8014184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014188:	4604      	mov	r4, r0
 801418a:	460d      	mov	r5, r1
 801418c:	f7ec fa44 	bl	8000618 <__aeabi_dmul>
 8014190:	a379      	add	r3, pc, #484	; (adr r3, 8014378 <__ieee754_pow+0x6d8>)
 8014192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014196:	f7ec f889 	bl	80002ac <__adddf3>
 801419a:	4622      	mov	r2, r4
 801419c:	462b      	mov	r3, r5
 801419e:	f7ec fa3b 	bl	8000618 <__aeabi_dmul>
 80141a2:	a377      	add	r3, pc, #476	; (adr r3, 8014380 <__ieee754_pow+0x6e0>)
 80141a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141a8:	f7ec f880 	bl	80002ac <__adddf3>
 80141ac:	4622      	mov	r2, r4
 80141ae:	462b      	mov	r3, r5
 80141b0:	f7ec fa32 	bl	8000618 <__aeabi_dmul>
 80141b4:	a374      	add	r3, pc, #464	; (adr r3, 8014388 <__ieee754_pow+0x6e8>)
 80141b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141ba:	f7ec f877 	bl	80002ac <__adddf3>
 80141be:	4622      	mov	r2, r4
 80141c0:	462b      	mov	r3, r5
 80141c2:	f7ec fa29 	bl	8000618 <__aeabi_dmul>
 80141c6:	a372      	add	r3, pc, #456	; (adr r3, 8014390 <__ieee754_pow+0x6f0>)
 80141c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141cc:	f7ec f86e 	bl	80002ac <__adddf3>
 80141d0:	4622      	mov	r2, r4
 80141d2:	462b      	mov	r3, r5
 80141d4:	f7ec fa20 	bl	8000618 <__aeabi_dmul>
 80141d8:	a36f      	add	r3, pc, #444	; (adr r3, 8014398 <__ieee754_pow+0x6f8>)
 80141da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141de:	f7ec f865 	bl	80002ac <__adddf3>
 80141e2:	4622      	mov	r2, r4
 80141e4:	4606      	mov	r6, r0
 80141e6:	460f      	mov	r7, r1
 80141e8:	462b      	mov	r3, r5
 80141ea:	4620      	mov	r0, r4
 80141ec:	4629      	mov	r1, r5
 80141ee:	f7ec fa13 	bl	8000618 <__aeabi_dmul>
 80141f2:	4602      	mov	r2, r0
 80141f4:	460b      	mov	r3, r1
 80141f6:	4630      	mov	r0, r6
 80141f8:	4639      	mov	r1, r7
 80141fa:	f7ec fa0d 	bl	8000618 <__aeabi_dmul>
 80141fe:	4642      	mov	r2, r8
 8014200:	4604      	mov	r4, r0
 8014202:	460d      	mov	r5, r1
 8014204:	464b      	mov	r3, r9
 8014206:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801420a:	f7ec f84f 	bl	80002ac <__adddf3>
 801420e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014212:	f7ec fa01 	bl	8000618 <__aeabi_dmul>
 8014216:	4622      	mov	r2, r4
 8014218:	462b      	mov	r3, r5
 801421a:	f7ec f847 	bl	80002ac <__adddf3>
 801421e:	4642      	mov	r2, r8
 8014220:	4606      	mov	r6, r0
 8014222:	460f      	mov	r7, r1
 8014224:	464b      	mov	r3, r9
 8014226:	4640      	mov	r0, r8
 8014228:	4649      	mov	r1, r9
 801422a:	f7ec f9f5 	bl	8000618 <__aeabi_dmul>
 801422e:	2200      	movs	r2, #0
 8014230:	4b68      	ldr	r3, [pc, #416]	; (80143d4 <__ieee754_pow+0x734>)
 8014232:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8014236:	f7ec f839 	bl	80002ac <__adddf3>
 801423a:	4632      	mov	r2, r6
 801423c:	463b      	mov	r3, r7
 801423e:	f7ec f835 	bl	80002ac <__adddf3>
 8014242:	9802      	ldr	r0, [sp, #8]
 8014244:	460d      	mov	r5, r1
 8014246:	4604      	mov	r4, r0
 8014248:	4602      	mov	r2, r0
 801424a:	460b      	mov	r3, r1
 801424c:	4640      	mov	r0, r8
 801424e:	4649      	mov	r1, r9
 8014250:	f7ec f9e2 	bl	8000618 <__aeabi_dmul>
 8014254:	2200      	movs	r2, #0
 8014256:	4680      	mov	r8, r0
 8014258:	4689      	mov	r9, r1
 801425a:	4b5e      	ldr	r3, [pc, #376]	; (80143d4 <__ieee754_pow+0x734>)
 801425c:	4620      	mov	r0, r4
 801425e:	4629      	mov	r1, r5
 8014260:	f7ec f822 	bl	80002a8 <__aeabi_dsub>
 8014264:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8014268:	f7ec f81e 	bl	80002a8 <__aeabi_dsub>
 801426c:	4602      	mov	r2, r0
 801426e:	460b      	mov	r3, r1
 8014270:	4630      	mov	r0, r6
 8014272:	4639      	mov	r1, r7
 8014274:	f7ec f818 	bl	80002a8 <__aeabi_dsub>
 8014278:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801427c:	f7ec f9cc 	bl	8000618 <__aeabi_dmul>
 8014280:	4622      	mov	r2, r4
 8014282:	4606      	mov	r6, r0
 8014284:	460f      	mov	r7, r1
 8014286:	462b      	mov	r3, r5
 8014288:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801428c:	f7ec f9c4 	bl	8000618 <__aeabi_dmul>
 8014290:	4602      	mov	r2, r0
 8014292:	460b      	mov	r3, r1
 8014294:	4630      	mov	r0, r6
 8014296:	4639      	mov	r1, r7
 8014298:	f7ec f808 	bl	80002ac <__adddf3>
 801429c:	4606      	mov	r6, r0
 801429e:	460f      	mov	r7, r1
 80142a0:	4602      	mov	r2, r0
 80142a2:	460b      	mov	r3, r1
 80142a4:	4640      	mov	r0, r8
 80142a6:	4649      	mov	r1, r9
 80142a8:	f7ec f800 	bl	80002ac <__adddf3>
 80142ac:	9802      	ldr	r0, [sp, #8]
 80142ae:	a33c      	add	r3, pc, #240	; (adr r3, 80143a0 <__ieee754_pow+0x700>)
 80142b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142b4:	4604      	mov	r4, r0
 80142b6:	460d      	mov	r5, r1
 80142b8:	f7ec f9ae 	bl	8000618 <__aeabi_dmul>
 80142bc:	4642      	mov	r2, r8
 80142be:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80142c2:	464b      	mov	r3, r9
 80142c4:	4620      	mov	r0, r4
 80142c6:	4629      	mov	r1, r5
 80142c8:	f7eb ffee 	bl	80002a8 <__aeabi_dsub>
 80142cc:	4602      	mov	r2, r0
 80142ce:	460b      	mov	r3, r1
 80142d0:	4630      	mov	r0, r6
 80142d2:	4639      	mov	r1, r7
 80142d4:	f7eb ffe8 	bl	80002a8 <__aeabi_dsub>
 80142d8:	a333      	add	r3, pc, #204	; (adr r3, 80143a8 <__ieee754_pow+0x708>)
 80142da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142de:	f7ec f99b 	bl	8000618 <__aeabi_dmul>
 80142e2:	a333      	add	r3, pc, #204	; (adr r3, 80143b0 <__ieee754_pow+0x710>)
 80142e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142e8:	4606      	mov	r6, r0
 80142ea:	460f      	mov	r7, r1
 80142ec:	4620      	mov	r0, r4
 80142ee:	4629      	mov	r1, r5
 80142f0:	f7ec f992 	bl	8000618 <__aeabi_dmul>
 80142f4:	4602      	mov	r2, r0
 80142f6:	460b      	mov	r3, r1
 80142f8:	4630      	mov	r0, r6
 80142fa:	4639      	mov	r1, r7
 80142fc:	f7eb ffd6 	bl	80002ac <__adddf3>
 8014300:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014302:	4b35      	ldr	r3, [pc, #212]	; (80143d8 <__ieee754_pow+0x738>)
 8014304:	4413      	add	r3, r2
 8014306:	e9d3 2300 	ldrd	r2, r3, [r3]
 801430a:	f7eb ffcf 	bl	80002ac <__adddf3>
 801430e:	4604      	mov	r4, r0
 8014310:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014312:	460d      	mov	r5, r1
 8014314:	f7ec f916 	bl	8000544 <__aeabi_i2d>
 8014318:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801431a:	4b30      	ldr	r3, [pc, #192]	; (80143dc <__ieee754_pow+0x73c>)
 801431c:	4413      	add	r3, r2
 801431e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8014322:	4606      	mov	r6, r0
 8014324:	460f      	mov	r7, r1
 8014326:	4622      	mov	r2, r4
 8014328:	462b      	mov	r3, r5
 801432a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801432e:	f7eb ffbd 	bl	80002ac <__adddf3>
 8014332:	4642      	mov	r2, r8
 8014334:	464b      	mov	r3, r9
 8014336:	f7eb ffb9 	bl	80002ac <__adddf3>
 801433a:	4632      	mov	r2, r6
 801433c:	463b      	mov	r3, r7
 801433e:	f7eb ffb5 	bl	80002ac <__adddf3>
 8014342:	9802      	ldr	r0, [sp, #8]
 8014344:	4632      	mov	r2, r6
 8014346:	463b      	mov	r3, r7
 8014348:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801434c:	f7eb ffac 	bl	80002a8 <__aeabi_dsub>
 8014350:	4642      	mov	r2, r8
 8014352:	464b      	mov	r3, r9
 8014354:	f7eb ffa8 	bl	80002a8 <__aeabi_dsub>
 8014358:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801435c:	e607      	b.n	8013f6e <__ieee754_pow+0x2ce>
 801435e:	f04f 0a01 	mov.w	sl, #1
 8014362:	e6a5      	b.n	80140b0 <__ieee754_pow+0x410>
 8014364:	ed9f 7b14 	vldr	d7, [pc, #80]	; 80143b8 <__ieee754_pow+0x718>
 8014368:	e613      	b.n	8013f92 <__ieee754_pow+0x2f2>
 801436a:	bf00      	nop
 801436c:	f3af 8000 	nop.w
 8014370:	4a454eef 	.word	0x4a454eef
 8014374:	3fca7e28 	.word	0x3fca7e28
 8014378:	93c9db65 	.word	0x93c9db65
 801437c:	3fcd864a 	.word	0x3fcd864a
 8014380:	a91d4101 	.word	0xa91d4101
 8014384:	3fd17460 	.word	0x3fd17460
 8014388:	518f264d 	.word	0x518f264d
 801438c:	3fd55555 	.word	0x3fd55555
 8014390:	db6fabff 	.word	0xdb6fabff
 8014394:	3fdb6db6 	.word	0x3fdb6db6
 8014398:	33333303 	.word	0x33333303
 801439c:	3fe33333 	.word	0x3fe33333
 80143a0:	e0000000 	.word	0xe0000000
 80143a4:	3feec709 	.word	0x3feec709
 80143a8:	dc3a03fd 	.word	0xdc3a03fd
 80143ac:	3feec709 	.word	0x3feec709
 80143b0:	145b01f5 	.word	0x145b01f5
 80143b4:	be3e2fe0 	.word	0xbe3e2fe0
 80143b8:	00000000 	.word	0x00000000
 80143bc:	3ff00000 	.word	0x3ff00000
 80143c0:	43400000 	.word	0x43400000
 80143c4:	0003988e 	.word	0x0003988e
 80143c8:	000bb679 	.word	0x000bb679
 80143cc:	08027578 	.word	0x08027578
 80143d0:	3ff00000 	.word	0x3ff00000
 80143d4:	40080000 	.word	0x40080000
 80143d8:	08027598 	.word	0x08027598
 80143dc:	08027588 	.word	0x08027588
 80143e0:	a3b4      	add	r3, pc, #720	; (adr r3, 80146b4 <__ieee754_pow+0xa14>)
 80143e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143e6:	4640      	mov	r0, r8
 80143e8:	4649      	mov	r1, r9
 80143ea:	f7eb ff5f 	bl	80002ac <__adddf3>
 80143ee:	4622      	mov	r2, r4
 80143f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80143f4:	462b      	mov	r3, r5
 80143f6:	4630      	mov	r0, r6
 80143f8:	4639      	mov	r1, r7
 80143fa:	f7eb ff55 	bl	80002a8 <__aeabi_dsub>
 80143fe:	4602      	mov	r2, r0
 8014400:	460b      	mov	r3, r1
 8014402:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014406:	f7ec fb97 	bl	8000b38 <__aeabi_dcmpgt>
 801440a:	2800      	cmp	r0, #0
 801440c:	f47f adfe 	bne.w	801400c <__ieee754_pow+0x36c>
 8014410:	4aa3      	ldr	r2, [pc, #652]	; (80146a0 <__ieee754_pow+0xa00>)
 8014412:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8014416:	4293      	cmp	r3, r2
 8014418:	f340 810a 	ble.w	8014630 <__ieee754_pow+0x990>
 801441c:	151b      	asrs	r3, r3, #20
 801441e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8014422:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8014426:	fa4a f303 	asr.w	r3, sl, r3
 801442a:	445b      	add	r3, fp
 801442c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8014430:	4e9c      	ldr	r6, [pc, #624]	; (80146a4 <__ieee754_pow+0xa04>)
 8014432:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8014436:	4116      	asrs	r6, r2
 8014438:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 801443c:	2000      	movs	r0, #0
 801443e:	ea23 0106 	bic.w	r1, r3, r6
 8014442:	f1c2 0214 	rsb	r2, r2, #20
 8014446:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801444a:	fa4a fa02 	asr.w	sl, sl, r2
 801444e:	f1bb 0f00 	cmp.w	fp, #0
 8014452:	4602      	mov	r2, r0
 8014454:	460b      	mov	r3, r1
 8014456:	4620      	mov	r0, r4
 8014458:	4629      	mov	r1, r5
 801445a:	bfb8      	it	lt
 801445c:	f1ca 0a00 	rsblt	sl, sl, #0
 8014460:	f7eb ff22 	bl	80002a8 <__aeabi_dsub>
 8014464:	e9cd 0100 	strd	r0, r1, [sp]
 8014468:	4642      	mov	r2, r8
 801446a:	464b      	mov	r3, r9
 801446c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014470:	f7eb ff1c 	bl	80002ac <__adddf3>
 8014474:	2000      	movs	r0, #0
 8014476:	a378      	add	r3, pc, #480	; (adr r3, 8014658 <__ieee754_pow+0x9b8>)
 8014478:	e9d3 2300 	ldrd	r2, r3, [r3]
 801447c:	4604      	mov	r4, r0
 801447e:	460d      	mov	r5, r1
 8014480:	f7ec f8ca 	bl	8000618 <__aeabi_dmul>
 8014484:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014488:	4606      	mov	r6, r0
 801448a:	460f      	mov	r7, r1
 801448c:	4620      	mov	r0, r4
 801448e:	4629      	mov	r1, r5
 8014490:	f7eb ff0a 	bl	80002a8 <__aeabi_dsub>
 8014494:	4602      	mov	r2, r0
 8014496:	460b      	mov	r3, r1
 8014498:	4640      	mov	r0, r8
 801449a:	4649      	mov	r1, r9
 801449c:	f7eb ff04 	bl	80002a8 <__aeabi_dsub>
 80144a0:	a36f      	add	r3, pc, #444	; (adr r3, 8014660 <__ieee754_pow+0x9c0>)
 80144a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144a6:	f7ec f8b7 	bl	8000618 <__aeabi_dmul>
 80144aa:	a36f      	add	r3, pc, #444	; (adr r3, 8014668 <__ieee754_pow+0x9c8>)
 80144ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144b0:	4680      	mov	r8, r0
 80144b2:	4689      	mov	r9, r1
 80144b4:	4620      	mov	r0, r4
 80144b6:	4629      	mov	r1, r5
 80144b8:	f7ec f8ae 	bl	8000618 <__aeabi_dmul>
 80144bc:	4602      	mov	r2, r0
 80144be:	460b      	mov	r3, r1
 80144c0:	4640      	mov	r0, r8
 80144c2:	4649      	mov	r1, r9
 80144c4:	f7eb fef2 	bl	80002ac <__adddf3>
 80144c8:	4604      	mov	r4, r0
 80144ca:	460d      	mov	r5, r1
 80144cc:	4602      	mov	r2, r0
 80144ce:	460b      	mov	r3, r1
 80144d0:	4630      	mov	r0, r6
 80144d2:	4639      	mov	r1, r7
 80144d4:	f7eb feea 	bl	80002ac <__adddf3>
 80144d8:	4632      	mov	r2, r6
 80144da:	463b      	mov	r3, r7
 80144dc:	4680      	mov	r8, r0
 80144de:	4689      	mov	r9, r1
 80144e0:	f7eb fee2 	bl	80002a8 <__aeabi_dsub>
 80144e4:	4602      	mov	r2, r0
 80144e6:	460b      	mov	r3, r1
 80144e8:	4620      	mov	r0, r4
 80144ea:	4629      	mov	r1, r5
 80144ec:	f7eb fedc 	bl	80002a8 <__aeabi_dsub>
 80144f0:	4642      	mov	r2, r8
 80144f2:	4606      	mov	r6, r0
 80144f4:	460f      	mov	r7, r1
 80144f6:	464b      	mov	r3, r9
 80144f8:	4640      	mov	r0, r8
 80144fa:	4649      	mov	r1, r9
 80144fc:	f7ec f88c 	bl	8000618 <__aeabi_dmul>
 8014500:	a35b      	add	r3, pc, #364	; (adr r3, 8014670 <__ieee754_pow+0x9d0>)
 8014502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014506:	4604      	mov	r4, r0
 8014508:	460d      	mov	r5, r1
 801450a:	f7ec f885 	bl	8000618 <__aeabi_dmul>
 801450e:	a35a      	add	r3, pc, #360	; (adr r3, 8014678 <__ieee754_pow+0x9d8>)
 8014510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014514:	f7eb fec8 	bl	80002a8 <__aeabi_dsub>
 8014518:	4622      	mov	r2, r4
 801451a:	462b      	mov	r3, r5
 801451c:	f7ec f87c 	bl	8000618 <__aeabi_dmul>
 8014520:	a357      	add	r3, pc, #348	; (adr r3, 8014680 <__ieee754_pow+0x9e0>)
 8014522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014526:	f7eb fec1 	bl	80002ac <__adddf3>
 801452a:	4622      	mov	r2, r4
 801452c:	462b      	mov	r3, r5
 801452e:	f7ec f873 	bl	8000618 <__aeabi_dmul>
 8014532:	a355      	add	r3, pc, #340	; (adr r3, 8014688 <__ieee754_pow+0x9e8>)
 8014534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014538:	f7eb feb6 	bl	80002a8 <__aeabi_dsub>
 801453c:	4622      	mov	r2, r4
 801453e:	462b      	mov	r3, r5
 8014540:	f7ec f86a 	bl	8000618 <__aeabi_dmul>
 8014544:	a352      	add	r3, pc, #328	; (adr r3, 8014690 <__ieee754_pow+0x9f0>)
 8014546:	e9d3 2300 	ldrd	r2, r3, [r3]
 801454a:	f7eb feaf 	bl	80002ac <__adddf3>
 801454e:	4622      	mov	r2, r4
 8014550:	462b      	mov	r3, r5
 8014552:	f7ec f861 	bl	8000618 <__aeabi_dmul>
 8014556:	4602      	mov	r2, r0
 8014558:	460b      	mov	r3, r1
 801455a:	4640      	mov	r0, r8
 801455c:	4649      	mov	r1, r9
 801455e:	f7eb fea3 	bl	80002a8 <__aeabi_dsub>
 8014562:	4604      	mov	r4, r0
 8014564:	460d      	mov	r5, r1
 8014566:	4602      	mov	r2, r0
 8014568:	460b      	mov	r3, r1
 801456a:	4640      	mov	r0, r8
 801456c:	4649      	mov	r1, r9
 801456e:	f7ec f853 	bl	8000618 <__aeabi_dmul>
 8014572:	2200      	movs	r2, #0
 8014574:	e9cd 0100 	strd	r0, r1, [sp]
 8014578:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801457c:	4620      	mov	r0, r4
 801457e:	4629      	mov	r1, r5
 8014580:	f7eb fe92 	bl	80002a8 <__aeabi_dsub>
 8014584:	4602      	mov	r2, r0
 8014586:	460b      	mov	r3, r1
 8014588:	e9dd 0100 	ldrd	r0, r1, [sp]
 801458c:	f7ec f96e 	bl	800086c <__aeabi_ddiv>
 8014590:	4632      	mov	r2, r6
 8014592:	4604      	mov	r4, r0
 8014594:	460d      	mov	r5, r1
 8014596:	463b      	mov	r3, r7
 8014598:	4640      	mov	r0, r8
 801459a:	4649      	mov	r1, r9
 801459c:	f7ec f83c 	bl	8000618 <__aeabi_dmul>
 80145a0:	4632      	mov	r2, r6
 80145a2:	463b      	mov	r3, r7
 80145a4:	f7eb fe82 	bl	80002ac <__adddf3>
 80145a8:	4602      	mov	r2, r0
 80145aa:	460b      	mov	r3, r1
 80145ac:	4620      	mov	r0, r4
 80145ae:	4629      	mov	r1, r5
 80145b0:	f7eb fe7a 	bl	80002a8 <__aeabi_dsub>
 80145b4:	4642      	mov	r2, r8
 80145b6:	464b      	mov	r3, r9
 80145b8:	f7eb fe76 	bl	80002a8 <__aeabi_dsub>
 80145bc:	4602      	mov	r2, r0
 80145be:	460b      	mov	r3, r1
 80145c0:	2000      	movs	r0, #0
 80145c2:	4939      	ldr	r1, [pc, #228]	; (80146a8 <__ieee754_pow+0xa08>)
 80145c4:	f7eb fe70 	bl	80002a8 <__aeabi_dsub>
 80145c8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80145cc:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80145d0:	4602      	mov	r2, r0
 80145d2:	460b      	mov	r3, r1
 80145d4:	da2f      	bge.n	8014636 <__ieee754_pow+0x996>
 80145d6:	4650      	mov	r0, sl
 80145d8:	ec43 2b10 	vmov	d0, r2, r3
 80145dc:	f000 f9c0 	bl	8014960 <scalbn>
 80145e0:	ec51 0b10 	vmov	r0, r1, d0
 80145e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80145e8:	f7ff bbf1 	b.w	8013dce <__ieee754_pow+0x12e>
 80145ec:	4b2f      	ldr	r3, [pc, #188]	; (80146ac <__ieee754_pow+0xa0c>)
 80145ee:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80145f2:	429e      	cmp	r6, r3
 80145f4:	f77f af0c 	ble.w	8014410 <__ieee754_pow+0x770>
 80145f8:	4b2d      	ldr	r3, [pc, #180]	; (80146b0 <__ieee754_pow+0xa10>)
 80145fa:	440b      	add	r3, r1
 80145fc:	4303      	orrs	r3, r0
 80145fe:	d00b      	beq.n	8014618 <__ieee754_pow+0x978>
 8014600:	a325      	add	r3, pc, #148	; (adr r3, 8014698 <__ieee754_pow+0x9f8>)
 8014602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014606:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801460a:	f7ec f805 	bl	8000618 <__aeabi_dmul>
 801460e:	a322      	add	r3, pc, #136	; (adr r3, 8014698 <__ieee754_pow+0x9f8>)
 8014610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014614:	f7ff bbdb 	b.w	8013dce <__ieee754_pow+0x12e>
 8014618:	4622      	mov	r2, r4
 801461a:	462b      	mov	r3, r5
 801461c:	f7eb fe44 	bl	80002a8 <__aeabi_dsub>
 8014620:	4642      	mov	r2, r8
 8014622:	464b      	mov	r3, r9
 8014624:	f7ec fa7e 	bl	8000b24 <__aeabi_dcmpge>
 8014628:	2800      	cmp	r0, #0
 801462a:	f43f aef1 	beq.w	8014410 <__ieee754_pow+0x770>
 801462e:	e7e7      	b.n	8014600 <__ieee754_pow+0x960>
 8014630:	f04f 0a00 	mov.w	sl, #0
 8014634:	e718      	b.n	8014468 <__ieee754_pow+0x7c8>
 8014636:	4621      	mov	r1, r4
 8014638:	e7d4      	b.n	80145e4 <__ieee754_pow+0x944>
 801463a:	2000      	movs	r0, #0
 801463c:	491a      	ldr	r1, [pc, #104]	; (80146a8 <__ieee754_pow+0xa08>)
 801463e:	f7ff bb8f 	b.w	8013d60 <__ieee754_pow+0xc0>
 8014642:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014646:	f7ff bb8b 	b.w	8013d60 <__ieee754_pow+0xc0>
 801464a:	4630      	mov	r0, r6
 801464c:	4639      	mov	r1, r7
 801464e:	f7ff bb87 	b.w	8013d60 <__ieee754_pow+0xc0>
 8014652:	4693      	mov	fp, r2
 8014654:	f7ff bb98 	b.w	8013d88 <__ieee754_pow+0xe8>
 8014658:	00000000 	.word	0x00000000
 801465c:	3fe62e43 	.word	0x3fe62e43
 8014660:	fefa39ef 	.word	0xfefa39ef
 8014664:	3fe62e42 	.word	0x3fe62e42
 8014668:	0ca86c39 	.word	0x0ca86c39
 801466c:	be205c61 	.word	0xbe205c61
 8014670:	72bea4d0 	.word	0x72bea4d0
 8014674:	3e663769 	.word	0x3e663769
 8014678:	c5d26bf1 	.word	0xc5d26bf1
 801467c:	3ebbbd41 	.word	0x3ebbbd41
 8014680:	af25de2c 	.word	0xaf25de2c
 8014684:	3f11566a 	.word	0x3f11566a
 8014688:	16bebd93 	.word	0x16bebd93
 801468c:	3f66c16c 	.word	0x3f66c16c
 8014690:	5555553e 	.word	0x5555553e
 8014694:	3fc55555 	.word	0x3fc55555
 8014698:	c2f8f359 	.word	0xc2f8f359
 801469c:	01a56e1f 	.word	0x01a56e1f
 80146a0:	3fe00000 	.word	0x3fe00000
 80146a4:	000fffff 	.word	0x000fffff
 80146a8:	3ff00000 	.word	0x3ff00000
 80146ac:	4090cbff 	.word	0x4090cbff
 80146b0:	3f6f3400 	.word	0x3f6f3400
 80146b4:	652b82fe 	.word	0x652b82fe
 80146b8:	3c971547 	.word	0x3c971547

080146bc <__ieee754_sqrt>:
 80146bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80146c0:	4955      	ldr	r1, [pc, #340]	; (8014818 <__ieee754_sqrt+0x15c>)
 80146c2:	ec55 4b10 	vmov	r4, r5, d0
 80146c6:	43a9      	bics	r1, r5
 80146c8:	462b      	mov	r3, r5
 80146ca:	462a      	mov	r2, r5
 80146cc:	d112      	bne.n	80146f4 <__ieee754_sqrt+0x38>
 80146ce:	ee10 2a10 	vmov	r2, s0
 80146d2:	ee10 0a10 	vmov	r0, s0
 80146d6:	4629      	mov	r1, r5
 80146d8:	f7eb ff9e 	bl	8000618 <__aeabi_dmul>
 80146dc:	4602      	mov	r2, r0
 80146de:	460b      	mov	r3, r1
 80146e0:	4620      	mov	r0, r4
 80146e2:	4629      	mov	r1, r5
 80146e4:	f7eb fde2 	bl	80002ac <__adddf3>
 80146e8:	4604      	mov	r4, r0
 80146ea:	460d      	mov	r5, r1
 80146ec:	ec45 4b10 	vmov	d0, r4, r5
 80146f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80146f4:	2d00      	cmp	r5, #0
 80146f6:	ee10 0a10 	vmov	r0, s0
 80146fa:	4621      	mov	r1, r4
 80146fc:	dc0f      	bgt.n	801471e <__ieee754_sqrt+0x62>
 80146fe:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8014702:	4330      	orrs	r0, r6
 8014704:	d0f2      	beq.n	80146ec <__ieee754_sqrt+0x30>
 8014706:	b155      	cbz	r5, 801471e <__ieee754_sqrt+0x62>
 8014708:	ee10 2a10 	vmov	r2, s0
 801470c:	4620      	mov	r0, r4
 801470e:	4629      	mov	r1, r5
 8014710:	f7eb fdca 	bl	80002a8 <__aeabi_dsub>
 8014714:	4602      	mov	r2, r0
 8014716:	460b      	mov	r3, r1
 8014718:	f7ec f8a8 	bl	800086c <__aeabi_ddiv>
 801471c:	e7e4      	b.n	80146e8 <__ieee754_sqrt+0x2c>
 801471e:	151b      	asrs	r3, r3, #20
 8014720:	d073      	beq.n	801480a <__ieee754_sqrt+0x14e>
 8014722:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8014726:	07dd      	lsls	r5, r3, #31
 8014728:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801472c:	bf48      	it	mi
 801472e:	0fc8      	lsrmi	r0, r1, #31
 8014730:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8014734:	bf44      	itt	mi
 8014736:	0049      	lslmi	r1, r1, #1
 8014738:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 801473c:	2500      	movs	r5, #0
 801473e:	1058      	asrs	r0, r3, #1
 8014740:	0fcb      	lsrs	r3, r1, #31
 8014742:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8014746:	0049      	lsls	r1, r1, #1
 8014748:	2316      	movs	r3, #22
 801474a:	462c      	mov	r4, r5
 801474c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8014750:	19a7      	adds	r7, r4, r6
 8014752:	4297      	cmp	r7, r2
 8014754:	bfde      	ittt	le
 8014756:	19bc      	addle	r4, r7, r6
 8014758:	1bd2      	suble	r2, r2, r7
 801475a:	19ad      	addle	r5, r5, r6
 801475c:	0fcf      	lsrs	r7, r1, #31
 801475e:	3b01      	subs	r3, #1
 8014760:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8014764:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8014768:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801476c:	d1f0      	bne.n	8014750 <__ieee754_sqrt+0x94>
 801476e:	f04f 0c20 	mov.w	ip, #32
 8014772:	469e      	mov	lr, r3
 8014774:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8014778:	42a2      	cmp	r2, r4
 801477a:	eb06 070e 	add.w	r7, r6, lr
 801477e:	dc02      	bgt.n	8014786 <__ieee754_sqrt+0xca>
 8014780:	d112      	bne.n	80147a8 <__ieee754_sqrt+0xec>
 8014782:	428f      	cmp	r7, r1
 8014784:	d810      	bhi.n	80147a8 <__ieee754_sqrt+0xec>
 8014786:	2f00      	cmp	r7, #0
 8014788:	eb07 0e06 	add.w	lr, r7, r6
 801478c:	da42      	bge.n	8014814 <__ieee754_sqrt+0x158>
 801478e:	f1be 0f00 	cmp.w	lr, #0
 8014792:	db3f      	blt.n	8014814 <__ieee754_sqrt+0x158>
 8014794:	f104 0801 	add.w	r8, r4, #1
 8014798:	1b12      	subs	r2, r2, r4
 801479a:	428f      	cmp	r7, r1
 801479c:	bf88      	it	hi
 801479e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80147a2:	1bc9      	subs	r1, r1, r7
 80147a4:	4433      	add	r3, r6
 80147a6:	4644      	mov	r4, r8
 80147a8:	0052      	lsls	r2, r2, #1
 80147aa:	f1bc 0c01 	subs.w	ip, ip, #1
 80147ae:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 80147b2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80147b6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80147ba:	d1dd      	bne.n	8014778 <__ieee754_sqrt+0xbc>
 80147bc:	430a      	orrs	r2, r1
 80147be:	d006      	beq.n	80147ce <__ieee754_sqrt+0x112>
 80147c0:	1c5c      	adds	r4, r3, #1
 80147c2:	bf13      	iteet	ne
 80147c4:	3301      	addne	r3, #1
 80147c6:	3501      	addeq	r5, #1
 80147c8:	4663      	moveq	r3, ip
 80147ca:	f023 0301 	bicne.w	r3, r3, #1
 80147ce:	106a      	asrs	r2, r5, #1
 80147d0:	085b      	lsrs	r3, r3, #1
 80147d2:	07e9      	lsls	r1, r5, #31
 80147d4:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80147d8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80147dc:	bf48      	it	mi
 80147de:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80147e2:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 80147e6:	461c      	mov	r4, r3
 80147e8:	e780      	b.n	80146ec <__ieee754_sqrt+0x30>
 80147ea:	0aca      	lsrs	r2, r1, #11
 80147ec:	3815      	subs	r0, #21
 80147ee:	0549      	lsls	r1, r1, #21
 80147f0:	2a00      	cmp	r2, #0
 80147f2:	d0fa      	beq.n	80147ea <__ieee754_sqrt+0x12e>
 80147f4:	02d6      	lsls	r6, r2, #11
 80147f6:	d50a      	bpl.n	801480e <__ieee754_sqrt+0x152>
 80147f8:	f1c3 0420 	rsb	r4, r3, #32
 80147fc:	fa21 f404 	lsr.w	r4, r1, r4
 8014800:	1e5d      	subs	r5, r3, #1
 8014802:	4099      	lsls	r1, r3
 8014804:	4322      	orrs	r2, r4
 8014806:	1b43      	subs	r3, r0, r5
 8014808:	e78b      	b.n	8014722 <__ieee754_sqrt+0x66>
 801480a:	4618      	mov	r0, r3
 801480c:	e7f0      	b.n	80147f0 <__ieee754_sqrt+0x134>
 801480e:	0052      	lsls	r2, r2, #1
 8014810:	3301      	adds	r3, #1
 8014812:	e7ef      	b.n	80147f4 <__ieee754_sqrt+0x138>
 8014814:	46a0      	mov	r8, r4
 8014816:	e7bf      	b.n	8014798 <__ieee754_sqrt+0xdc>
 8014818:	7ff00000 	.word	0x7ff00000

0801481c <fabs>:
 801481c:	ec51 0b10 	vmov	r0, r1, d0
 8014820:	ee10 2a10 	vmov	r2, s0
 8014824:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014828:	ec43 2b10 	vmov	d0, r2, r3
 801482c:	4770      	bx	lr

0801482e <finite>:
 801482e:	ee10 3a90 	vmov	r3, s1
 8014832:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8014836:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801483a:	0fc0      	lsrs	r0, r0, #31
 801483c:	4770      	bx	lr

0801483e <matherr>:
 801483e:	2000      	movs	r0, #0
 8014840:	4770      	bx	lr
 8014842:	0000      	movs	r0, r0
 8014844:	0000      	movs	r0, r0
	...

08014848 <nan>:
 8014848:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8014850 <nan+0x8>
 801484c:	4770      	bx	lr
 801484e:	bf00      	nop
 8014850:	00000000 	.word	0x00000000
 8014854:	7ff80000 	.word	0x7ff80000

08014858 <rint>:
 8014858:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801485a:	ec51 0b10 	vmov	r0, r1, d0
 801485e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8014862:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8014866:	2e13      	cmp	r6, #19
 8014868:	460b      	mov	r3, r1
 801486a:	ee10 4a10 	vmov	r4, s0
 801486e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8014872:	dc56      	bgt.n	8014922 <rint+0xca>
 8014874:	2e00      	cmp	r6, #0
 8014876:	da2b      	bge.n	80148d0 <rint+0x78>
 8014878:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 801487c:	4302      	orrs	r2, r0
 801487e:	d023      	beq.n	80148c8 <rint+0x70>
 8014880:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8014884:	4302      	orrs	r2, r0
 8014886:	4254      	negs	r4, r2
 8014888:	4314      	orrs	r4, r2
 801488a:	0c4b      	lsrs	r3, r1, #17
 801488c:	0b24      	lsrs	r4, r4, #12
 801488e:	045b      	lsls	r3, r3, #17
 8014890:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8014894:	ea44 0103 	orr.w	r1, r4, r3
 8014898:	460b      	mov	r3, r1
 801489a:	492f      	ldr	r1, [pc, #188]	; (8014958 <rint+0x100>)
 801489c:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 80148a0:	e9d1 6700 	ldrd	r6, r7, [r1]
 80148a4:	4602      	mov	r2, r0
 80148a6:	4639      	mov	r1, r7
 80148a8:	4630      	mov	r0, r6
 80148aa:	f7eb fcff 	bl	80002ac <__adddf3>
 80148ae:	e9cd 0100 	strd	r0, r1, [sp]
 80148b2:	463b      	mov	r3, r7
 80148b4:	4632      	mov	r2, r6
 80148b6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80148ba:	f7eb fcf5 	bl	80002a8 <__aeabi_dsub>
 80148be:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80148c2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 80148c6:	4639      	mov	r1, r7
 80148c8:	ec41 0b10 	vmov	d0, r0, r1
 80148cc:	b003      	add	sp, #12
 80148ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80148d0:	4a22      	ldr	r2, [pc, #136]	; (801495c <rint+0x104>)
 80148d2:	4132      	asrs	r2, r6
 80148d4:	ea01 0702 	and.w	r7, r1, r2
 80148d8:	4307      	orrs	r7, r0
 80148da:	d0f5      	beq.n	80148c8 <rint+0x70>
 80148dc:	0852      	lsrs	r2, r2, #1
 80148de:	4011      	ands	r1, r2
 80148e0:	430c      	orrs	r4, r1
 80148e2:	d00b      	beq.n	80148fc <rint+0xa4>
 80148e4:	ea23 0202 	bic.w	r2, r3, r2
 80148e8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80148ec:	2e13      	cmp	r6, #19
 80148ee:	fa43 f306 	asr.w	r3, r3, r6
 80148f2:	bf0c      	ite	eq
 80148f4:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 80148f8:	2400      	movne	r4, #0
 80148fa:	4313      	orrs	r3, r2
 80148fc:	4916      	ldr	r1, [pc, #88]	; (8014958 <rint+0x100>)
 80148fe:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8014902:	4622      	mov	r2, r4
 8014904:	e9d5 4500 	ldrd	r4, r5, [r5]
 8014908:	4620      	mov	r0, r4
 801490a:	4629      	mov	r1, r5
 801490c:	f7eb fcce 	bl	80002ac <__adddf3>
 8014910:	e9cd 0100 	strd	r0, r1, [sp]
 8014914:	4622      	mov	r2, r4
 8014916:	462b      	mov	r3, r5
 8014918:	e9dd 0100 	ldrd	r0, r1, [sp]
 801491c:	f7eb fcc4 	bl	80002a8 <__aeabi_dsub>
 8014920:	e7d2      	b.n	80148c8 <rint+0x70>
 8014922:	2e33      	cmp	r6, #51	; 0x33
 8014924:	dd07      	ble.n	8014936 <rint+0xde>
 8014926:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801492a:	d1cd      	bne.n	80148c8 <rint+0x70>
 801492c:	ee10 2a10 	vmov	r2, s0
 8014930:	f7eb fcbc 	bl	80002ac <__adddf3>
 8014934:	e7c8      	b.n	80148c8 <rint+0x70>
 8014936:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 801493a:	f04f 32ff 	mov.w	r2, #4294967295
 801493e:	40f2      	lsrs	r2, r6
 8014940:	4210      	tst	r0, r2
 8014942:	d0c1      	beq.n	80148c8 <rint+0x70>
 8014944:	0852      	lsrs	r2, r2, #1
 8014946:	4210      	tst	r0, r2
 8014948:	bf1f      	itttt	ne
 801494a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 801494e:	ea20 0202 	bicne.w	r2, r0, r2
 8014952:	4134      	asrne	r4, r6
 8014954:	4314      	orrne	r4, r2
 8014956:	e7d1      	b.n	80148fc <rint+0xa4>
 8014958:	080275a8 	.word	0x080275a8
 801495c:	000fffff 	.word	0x000fffff

08014960 <scalbn>:
 8014960:	b570      	push	{r4, r5, r6, lr}
 8014962:	ec55 4b10 	vmov	r4, r5, d0
 8014966:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801496a:	4606      	mov	r6, r0
 801496c:	462b      	mov	r3, r5
 801496e:	b9aa      	cbnz	r2, 801499c <scalbn+0x3c>
 8014970:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8014974:	4323      	orrs	r3, r4
 8014976:	d03b      	beq.n	80149f0 <scalbn+0x90>
 8014978:	4b31      	ldr	r3, [pc, #196]	; (8014a40 <scalbn+0xe0>)
 801497a:	4629      	mov	r1, r5
 801497c:	2200      	movs	r2, #0
 801497e:	ee10 0a10 	vmov	r0, s0
 8014982:	f7eb fe49 	bl	8000618 <__aeabi_dmul>
 8014986:	4b2f      	ldr	r3, [pc, #188]	; (8014a44 <scalbn+0xe4>)
 8014988:	429e      	cmp	r6, r3
 801498a:	4604      	mov	r4, r0
 801498c:	460d      	mov	r5, r1
 801498e:	da12      	bge.n	80149b6 <scalbn+0x56>
 8014990:	a327      	add	r3, pc, #156	; (adr r3, 8014a30 <scalbn+0xd0>)
 8014992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014996:	f7eb fe3f 	bl	8000618 <__aeabi_dmul>
 801499a:	e009      	b.n	80149b0 <scalbn+0x50>
 801499c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80149a0:	428a      	cmp	r2, r1
 80149a2:	d10c      	bne.n	80149be <scalbn+0x5e>
 80149a4:	ee10 2a10 	vmov	r2, s0
 80149a8:	4620      	mov	r0, r4
 80149aa:	4629      	mov	r1, r5
 80149ac:	f7eb fc7e 	bl	80002ac <__adddf3>
 80149b0:	4604      	mov	r4, r0
 80149b2:	460d      	mov	r5, r1
 80149b4:	e01c      	b.n	80149f0 <scalbn+0x90>
 80149b6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80149ba:	460b      	mov	r3, r1
 80149bc:	3a36      	subs	r2, #54	; 0x36
 80149be:	4432      	add	r2, r6
 80149c0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80149c4:	428a      	cmp	r2, r1
 80149c6:	dd0b      	ble.n	80149e0 <scalbn+0x80>
 80149c8:	ec45 4b11 	vmov	d1, r4, r5
 80149cc:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8014a38 <scalbn+0xd8>
 80149d0:	f000 f83c 	bl	8014a4c <copysign>
 80149d4:	a318      	add	r3, pc, #96	; (adr r3, 8014a38 <scalbn+0xd8>)
 80149d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149da:	ec51 0b10 	vmov	r0, r1, d0
 80149de:	e7da      	b.n	8014996 <scalbn+0x36>
 80149e0:	2a00      	cmp	r2, #0
 80149e2:	dd08      	ble.n	80149f6 <scalbn+0x96>
 80149e4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80149e8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80149ec:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80149f0:	ec45 4b10 	vmov	d0, r4, r5
 80149f4:	bd70      	pop	{r4, r5, r6, pc}
 80149f6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80149fa:	da0d      	bge.n	8014a18 <scalbn+0xb8>
 80149fc:	f24c 3350 	movw	r3, #50000	; 0xc350
 8014a00:	429e      	cmp	r6, r3
 8014a02:	ec45 4b11 	vmov	d1, r4, r5
 8014a06:	dce1      	bgt.n	80149cc <scalbn+0x6c>
 8014a08:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8014a30 <scalbn+0xd0>
 8014a0c:	f000 f81e 	bl	8014a4c <copysign>
 8014a10:	a307      	add	r3, pc, #28	; (adr r3, 8014a30 <scalbn+0xd0>)
 8014a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a16:	e7e0      	b.n	80149da <scalbn+0x7a>
 8014a18:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014a1c:	3236      	adds	r2, #54	; 0x36
 8014a1e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8014a22:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8014a26:	4620      	mov	r0, r4
 8014a28:	4629      	mov	r1, r5
 8014a2a:	2200      	movs	r2, #0
 8014a2c:	4b06      	ldr	r3, [pc, #24]	; (8014a48 <scalbn+0xe8>)
 8014a2e:	e7b2      	b.n	8014996 <scalbn+0x36>
 8014a30:	c2f8f359 	.word	0xc2f8f359
 8014a34:	01a56e1f 	.word	0x01a56e1f
 8014a38:	8800759c 	.word	0x8800759c
 8014a3c:	7e37e43c 	.word	0x7e37e43c
 8014a40:	43500000 	.word	0x43500000
 8014a44:	ffff3cb0 	.word	0xffff3cb0
 8014a48:	3c900000 	.word	0x3c900000

08014a4c <copysign>:
 8014a4c:	ec51 0b10 	vmov	r0, r1, d0
 8014a50:	ee11 0a90 	vmov	r0, s3
 8014a54:	ee10 2a10 	vmov	r2, s0
 8014a58:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8014a5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8014a60:	ea41 0300 	orr.w	r3, r1, r0
 8014a64:	ec43 2b10 	vmov	d0, r2, r3
 8014a68:	4770      	bx	lr
	...

08014a6c <_init>:
 8014a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014a6e:	bf00      	nop
 8014a70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014a72:	bc08      	pop	{r3}
 8014a74:	469e      	mov	lr, r3
 8014a76:	4770      	bx	lr

08014a78 <_fini>:
 8014a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014a7a:	bf00      	nop
 8014a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014a7e:	bc08      	pop	{r3}
 8014a80:	469e      	mov	lr, r3
 8014a82:	4770      	bx	lr
