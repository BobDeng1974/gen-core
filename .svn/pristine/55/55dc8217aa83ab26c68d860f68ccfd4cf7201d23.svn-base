/*
 * _finger.c
 *
 *  Created on: Aug 28, 2019
 *      Author: Puja
 */

#include "_finger.h"

/* External variable ---------------------------------------------------------*/
extern uint16_t fingerID;
extern uint16_t fingerConfidence;
/* Private variable ---------------------------------------------------------*/
char str[50];

void Finger_On(void){
	FZ3387_SET_POWER(0);
}

void Finger_Off(void){
	FZ3387_SET_POWER(1);
	osDelay(50);
}

void Finger_Init(void){
	Finger_On();
	//	 verify password and check hardware
	if(!FZ3387_verifyPassword()){
		swvPrintLn("FZ3387_verifyPassword error.");
	}
	Finger_Off();
}

uint8_t Finger_Enroll(uint8_t id) {
	uint32_t tick, timeout_tick;
	int p = -1;

	// convert time to tick
	timeout_tick = osKernelSysTickMicroSec(FINGER_SCAN_TIMEOUT*1000*1000);
	//	Take Image
	sprintf(str, "Waiting for valid finger to enroll as # %d", id);
	swvPrintLn(str);

	// set timeout guard
	tick = osKernelSysTick();
	while (p != FINGERPRINT_OK) {
		BSP_Led_Toggle();
		p = FZ3387_getImage();
		switch (p) {
		case FINGERPRINT_OK:
			swvPrintLn("Image taken");
			break;
		case FINGERPRINT_NOFINGER:
			if((osKernelSysTick() - tick) > timeout_tick){
				return p;
			}
			swvPrintLn(".");
			break;
		case FINGERPRINT_PACKETRECIEVEERR:
			swvPrintLn("Communication error");
			break;
		case FINGERPRINT_IMAGEFAIL:
			swvPrintLn("Imaging error");
			break;
		default:
			swvPrintLn("Unknown error");
			break;
		}
	}

	//	put image to buffer 1
	p = FZ3387_image2Tz(1);
	switch (p) {
	case FINGERPRINT_OK:
		swvPrintLn("Image converted");
		break;
	case FINGERPRINT_IMAGEMESS:
		swvPrintLn("Image too messy");
		return p;
	case FINGERPRINT_PACKETRECIEVEERR:
		swvPrintLn("Communication error");
		return p;
	case FINGERPRINT_FEATUREFAIL:
		swvPrintLn("Could not find fingerprint features");
		return p;
	case FINGERPRINT_INVALIDIMAGE:
		swvPrintLn("Could not find fingerprint features");
		return p;
	default:
		swvPrintLn("Unknown error");
		return p;
	}

	//	 Wait for put your finger up
	BSP_Led_Write(0);
	swvPrintLn("Remove finger");
	osDelay(2000);

	p = 0;
	while (p != FINGERPRINT_NOFINGER) {
		p = FZ3387_getImage();
	}

	//	Take Image again
	sprintf(str, "ID %d", id);
	swvPrintLn(str);

	p = -1;
	swvPrintLn("Place same finger again");
	// set timeout guard
	tick = osKernelSysTick();
	while (p != FINGERPRINT_OK) {
		BSP_Led_Toggle();
		p = FZ3387_getImage();
		switch (p) {
		case FINGERPRINT_OK:
			swvPrintLn("Image taken");
			break;
		case FINGERPRINT_NOFINGER:
			if((osKernelSysTick() - tick) > timeout_tick){
				return p;
			}
			swvPrint(".");
			break;
		case FINGERPRINT_PACKETRECIEVEERR:
			swvPrintLn("Communication error");
			break;
		case FINGERPRINT_IMAGEFAIL:
			swvPrintLn("Imaging error");
			break;
		default:
			swvPrintLn("Unknown error");
			break;
		}
	}

	//	put image to buffer 2
	p = FZ3387_image2Tz(2);
	switch (p) {
	case FINGERPRINT_OK:
		swvPrintLn("Image converted");
		break;
	case FINGERPRINT_IMAGEMESS:
		swvPrintLn("Image too messy");
		return p;
	case FINGERPRINT_PACKETRECIEVEERR:
		swvPrintLn("Communication error");
		return p;
	case FINGERPRINT_FEATUREFAIL:
		swvPrintLn("Could not find fingerprint features");
		return p;
	case FINGERPRINT_INVALIDIMAGE:
		swvPrintLn("Could not find fingerprint features");
		return p;
	default:
		swvPrintLn("Unknown error");
		return p;
	}

	//	 Wait for put your finger up
	BSP_Led_Write(0);
	swvPrintLn("Remove finger");
	osDelay(2000);

	p = 0;
	while (p != FINGERPRINT_NOFINGER) {
		p = FZ3387_getImage();
	}

	//	Create Register model
	sprintf(str, "Creating model for #%d", id);
	swvPrintLn(str);
	p = FZ3387_createModel();
	if (p == FINGERPRINT_OK) {
		swvPrintLn("Prints matched!");
	} else if (p == FINGERPRINT_PACKETRECIEVEERR) {
		swvPrintLn("Communication error");
		return p;
	} else if (p == FINGERPRINT_ENROLLMISMATCH) {
		swvPrintLn("Fingerprints did not match");
		return p;
	} else {
		swvPrintLn("Unknown error");
		return p;
	}

	//	Store in memory
	sprintf(str, "ID %d", id);
	swvPrintLn(str);

	p = FZ3387_storeModel(id);
	if (p == FINGERPRINT_OK) {
		swvPrintLn("Stored!");
	} else if (p == FINGERPRINT_PACKETRECIEVEERR) {
		swvPrintLn("Communication error");
		return p;
	} else if (p == FINGERPRINT_BADLOCATION) {
		swvPrintLn("Could not store in that location");
		return p;
	} else if (p == FINGERPRINT_FLASHERR) {
		swvPrintLn("Error writing to flash");
		return p;
	} else {
		swvPrintLn("Unknown error");
		return p;
	}
	return p;
}

uint8_t Finger_Delete_ID(uint8_t id) {
	uint8_t p = -1;

	p = FZ3387_deleteModel(id);

	if (p == FINGERPRINT_OK) {
		swvPrintLn("Deleted!");
	} else if (p == FINGERPRINT_PACKETRECIEVEERR) {
		swvPrintLn("Communication error");
		return p;
	} else if (p == FINGERPRINT_BADLOCATION) {
		swvPrintLn("Could not delete in that location");
		return p;
	} else if (p == FINGERPRINT_FLASHERR) {
		swvPrintLn("Error writing to flash");
		return p;
	} else {
		sprintf(str, "Unknown error: 0x%02x", p);
		swvPrintLn(str);
		return p;
	}
	return p;
}

uint8_t Finger_Empty_Database(void) {
	return FZ3387_emptyDatabase();
}

uint8_t Finger_Set_Password(uint32_t password) {
	if (FZ3387_setPassword(password) == FINGERPRINT_OK) {
		return 1;
	}
	return 0;
}

int8_t Finger_Auth(void) {
	uint8_t p = FZ3387_getImage();
	switch (p) {
	case FINGERPRINT_OK:
		swvPrintLn("Image taken");
		break;
	case FINGERPRINT_NOFINGER:
		swvPrintLn("No finger detected");
		return -1;
	case FINGERPRINT_PACKETRECIEVEERR:
		swvPrintLn("Communication error");
		return -1;
	case FINGERPRINT_IMAGEFAIL:
		swvPrintLn("Imaging error");
		return -1;
	default:
		swvPrintLn("Unknown error");
		return -1;
	}

	// OK success!
	p = FZ3387_image2Tz(1);
	switch (p) {
	case FINGERPRINT_OK:
		swvPrintLn("Image converted");
		break;
	case FINGERPRINT_IMAGEMESS:
		swvPrintLn("Image too messy");
		return -1;
	case FINGERPRINT_PACKETRECIEVEERR:
		swvPrintLn("Communication error");
		return -1;
	case FINGERPRINT_FEATUREFAIL:
		swvPrintLn("Could not find fingerprint features");
		return -1;
	case FINGERPRINT_INVALIDIMAGE:
		swvPrintLn("Could not find fingerprint features");
		return -1;
	default:
		swvPrintLn("Unknown error");
		return -1;
	}

	// OK converted!
	p = FZ3387_fingerFastSearch();
	if (p == FINGERPRINT_OK) {
		swvPrintLn("Found a print match!");
	} else if (p == FINGERPRINT_PACKETRECIEVEERR) {
		swvPrintLn("Communication error");
		return -1;
	} else if (p == FINGERPRINT_NOTFOUND) {
		swvPrintLn("Did not find a match");
		return -1;
	} else {
		swvPrintLn("Unknown error");
		return -1;
	}

	// found a match!
	sprintf(str, "Found ID #%d  with confidence of %d", fingerID, fingerConfidence);
	swvPrintLn(str);

	if(fingerConfidence < FINGER_CONFIDENCE_MIN){
		return -1;
	}
	return fingerID;
}

int8_t Finger_Auth_Fast(void) {
	uint8_t p = FZ3387_getImage();
	if (p != FINGERPRINT_OK)  return -1;

	p = FZ3387_image2Tz(1);
	if (p != FINGERPRINT_OK)  return -1;

	p = FZ3387_fingerFastSearch();
	if (p != FINGERPRINT_OK)  return -1;

	// found a match!
	sprintf(str, "Found ID #%d  with confidence of %d", fingerID, fingerConfidence);
	swvPrintLn(str);

	if(fingerConfidence < FINGER_CONFIDENCE_MIN){
		return -1;
	}
	return fingerID;
}

