
HUB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015b44  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00012bf8  08015cd8  08015cd8  00025cd8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080288d0  080288d0  00040224  2**0
                  CONTENTS
  4 .ARM          00000008  080288d0  080288d0  000388d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080288d8  080288d8  00040224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080288d8  080288d8  000388d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080288dc  080288dc  000388dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000224  20000000  080288e0  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000084a4  20000224  08028b04  00040224  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200086c8  08028b04  000486c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040224  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002f80b  00000000  00000000  00040254  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000064e7  00000000  00000000  0006fa5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000022a8  00000000  00000000  00075f48  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001fd8  00000000  00000000  000781f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002b0f2  00000000  00000000  0007a1c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000223df  00000000  00000000  000a52ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e5915  00000000  00000000  000c7699  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001acfae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009dac  00000000  00000000  001ad02c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000224 	.word	0x20000224
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08015cbc 	.word	0x08015cbc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000228 	.word	0x20000228
 80001cc:	08015cbc 	.word	0x08015cbc

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b972 	b.w	8000fa4 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9e08      	ldr	r6, [sp, #32]
 8000cde:	4604      	mov	r4, r0
 8000ce0:	4688      	mov	r8, r1
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d14b      	bne.n	8000d7e <__udivmoddi4+0xa6>
 8000ce6:	428a      	cmp	r2, r1
 8000ce8:	4615      	mov	r5, r2
 8000cea:	d967      	bls.n	8000dbc <__udivmoddi4+0xe4>
 8000cec:	fab2 f282 	clz	r2, r2
 8000cf0:	b14a      	cbz	r2, 8000d06 <__udivmoddi4+0x2e>
 8000cf2:	f1c2 0720 	rsb	r7, r2, #32
 8000cf6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cfa:	fa20 f707 	lsr.w	r7, r0, r7
 8000cfe:	4095      	lsls	r5, r2
 8000d00:	ea47 0803 	orr.w	r8, r7, r3
 8000d04:	4094      	lsls	r4, r2
 8000d06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d0a:	0c23      	lsrs	r3, r4, #16
 8000d0c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d10:	fa1f fc85 	uxth.w	ip, r5
 8000d14:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d18:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d1c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d20:	4299      	cmp	r1, r3
 8000d22:	d909      	bls.n	8000d38 <__udivmoddi4+0x60>
 8000d24:	18eb      	adds	r3, r5, r3
 8000d26:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d2a:	f080 811b 	bcs.w	8000f64 <__udivmoddi4+0x28c>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 8118 	bls.w	8000f64 <__udivmoddi4+0x28c>
 8000d34:	3f02      	subs	r7, #2
 8000d36:	442b      	add	r3, r5
 8000d38:	1a5b      	subs	r3, r3, r1
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d48:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d4c:	45a4      	cmp	ip, r4
 8000d4e:	d909      	bls.n	8000d64 <__udivmoddi4+0x8c>
 8000d50:	192c      	adds	r4, r5, r4
 8000d52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d56:	f080 8107 	bcs.w	8000f68 <__udivmoddi4+0x290>
 8000d5a:	45a4      	cmp	ip, r4
 8000d5c:	f240 8104 	bls.w	8000f68 <__udivmoddi4+0x290>
 8000d60:	3802      	subs	r0, #2
 8000d62:	442c      	add	r4, r5
 8000d64:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d68:	eba4 040c 	sub.w	r4, r4, ip
 8000d6c:	2700      	movs	r7, #0
 8000d6e:	b11e      	cbz	r6, 8000d78 <__udivmoddi4+0xa0>
 8000d70:	40d4      	lsrs	r4, r2
 8000d72:	2300      	movs	r3, #0
 8000d74:	e9c6 4300 	strd	r4, r3, [r6]
 8000d78:	4639      	mov	r1, r7
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0xbe>
 8000d82:	2e00      	cmp	r6, #0
 8000d84:	f000 80eb 	beq.w	8000f5e <__udivmoddi4+0x286>
 8000d88:	2700      	movs	r7, #0
 8000d8a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d8e:	4638      	mov	r0, r7
 8000d90:	4639      	mov	r1, r7
 8000d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d96:	fab3 f783 	clz	r7, r3
 8000d9a:	2f00      	cmp	r7, #0
 8000d9c:	d147      	bne.n	8000e2e <__udivmoddi4+0x156>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d302      	bcc.n	8000da8 <__udivmoddi4+0xd0>
 8000da2:	4282      	cmp	r2, r0
 8000da4:	f200 80fa 	bhi.w	8000f9c <__udivmoddi4+0x2c4>
 8000da8:	1a84      	subs	r4, r0, r2
 8000daa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dae:	2001      	movs	r0, #1
 8000db0:	4698      	mov	r8, r3
 8000db2:	2e00      	cmp	r6, #0
 8000db4:	d0e0      	beq.n	8000d78 <__udivmoddi4+0xa0>
 8000db6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dba:	e7dd      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000dbc:	b902      	cbnz	r2, 8000dc0 <__udivmoddi4+0xe8>
 8000dbe:	deff      	udf	#255	; 0xff
 8000dc0:	fab2 f282 	clz	r2, r2
 8000dc4:	2a00      	cmp	r2, #0
 8000dc6:	f040 808f 	bne.w	8000ee8 <__udivmoddi4+0x210>
 8000dca:	1b49      	subs	r1, r1, r5
 8000dcc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dd0:	fa1f f885 	uxth.w	r8, r5
 8000dd4:	2701      	movs	r7, #1
 8000dd6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dda:	0c23      	lsrs	r3, r4, #16
 8000ddc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000de0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000de4:	fb08 f10c 	mul.w	r1, r8, ip
 8000de8:	4299      	cmp	r1, r3
 8000dea:	d907      	bls.n	8000dfc <__udivmoddi4+0x124>
 8000dec:	18eb      	adds	r3, r5, r3
 8000dee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000df2:	d202      	bcs.n	8000dfa <__udivmoddi4+0x122>
 8000df4:	4299      	cmp	r1, r3
 8000df6:	f200 80cd 	bhi.w	8000f94 <__udivmoddi4+0x2bc>
 8000dfa:	4684      	mov	ip, r0
 8000dfc:	1a59      	subs	r1, r3, r1
 8000dfe:	b2a3      	uxth	r3, r4
 8000e00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e04:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e08:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e0c:	fb08 f800 	mul.w	r8, r8, r0
 8000e10:	45a0      	cmp	r8, r4
 8000e12:	d907      	bls.n	8000e24 <__udivmoddi4+0x14c>
 8000e14:	192c      	adds	r4, r5, r4
 8000e16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e1a:	d202      	bcs.n	8000e22 <__udivmoddi4+0x14a>
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	f200 80b6 	bhi.w	8000f8e <__udivmoddi4+0x2b6>
 8000e22:	4618      	mov	r0, r3
 8000e24:	eba4 0408 	sub.w	r4, r4, r8
 8000e28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e2c:	e79f      	b.n	8000d6e <__udivmoddi4+0x96>
 8000e2e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e32:	40bb      	lsls	r3, r7
 8000e34:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e38:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e3c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e40:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e44:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e48:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e4c:	4325      	orrs	r5, r4
 8000e4e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e52:	0c2c      	lsrs	r4, r5, #16
 8000e54:	fb08 3319 	mls	r3, r8, r9, r3
 8000e58:	fa1f fa8e 	uxth.w	sl, lr
 8000e5c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e60:	fb09 f40a 	mul.w	r4, r9, sl
 8000e64:	429c      	cmp	r4, r3
 8000e66:	fa02 f207 	lsl.w	r2, r2, r7
 8000e6a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e6e:	d90b      	bls.n	8000e88 <__udivmoddi4+0x1b0>
 8000e70:	eb1e 0303 	adds.w	r3, lr, r3
 8000e74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e78:	f080 8087 	bcs.w	8000f8a <__udivmoddi4+0x2b2>
 8000e7c:	429c      	cmp	r4, r3
 8000e7e:	f240 8084 	bls.w	8000f8a <__udivmoddi4+0x2b2>
 8000e82:	f1a9 0902 	sub.w	r9, r9, #2
 8000e86:	4473      	add	r3, lr
 8000e88:	1b1b      	subs	r3, r3, r4
 8000e8a:	b2ad      	uxth	r5, r5
 8000e8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e90:	fb08 3310 	mls	r3, r8, r0, r3
 8000e94:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e98:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e9c:	45a2      	cmp	sl, r4
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x1da>
 8000ea0:	eb1e 0404 	adds.w	r4, lr, r4
 8000ea4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ea8:	d26b      	bcs.n	8000f82 <__udivmoddi4+0x2aa>
 8000eaa:	45a2      	cmp	sl, r4
 8000eac:	d969      	bls.n	8000f82 <__udivmoddi4+0x2aa>
 8000eae:	3802      	subs	r0, #2
 8000eb0:	4474      	add	r4, lr
 8000eb2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eb6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eba:	eba4 040a 	sub.w	r4, r4, sl
 8000ebe:	454c      	cmp	r4, r9
 8000ec0:	46c2      	mov	sl, r8
 8000ec2:	464b      	mov	r3, r9
 8000ec4:	d354      	bcc.n	8000f70 <__udivmoddi4+0x298>
 8000ec6:	d051      	beq.n	8000f6c <__udivmoddi4+0x294>
 8000ec8:	2e00      	cmp	r6, #0
 8000eca:	d069      	beq.n	8000fa0 <__udivmoddi4+0x2c8>
 8000ecc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ed0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ed4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ed8:	40fd      	lsrs	r5, r7
 8000eda:	40fc      	lsrs	r4, r7
 8000edc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ee0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ee4:	2700      	movs	r7, #0
 8000ee6:	e747      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000ee8:	f1c2 0320 	rsb	r3, r2, #32
 8000eec:	fa20 f703 	lsr.w	r7, r0, r3
 8000ef0:	4095      	lsls	r5, r2
 8000ef2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ef6:	fa21 f303 	lsr.w	r3, r1, r3
 8000efa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000efe:	4338      	orrs	r0, r7
 8000f00:	0c01      	lsrs	r1, r0, #16
 8000f02:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f06:	fa1f f885 	uxth.w	r8, r5
 8000f0a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f12:	fb07 f308 	mul.w	r3, r7, r8
 8000f16:	428b      	cmp	r3, r1
 8000f18:	fa04 f402 	lsl.w	r4, r4, r2
 8000f1c:	d907      	bls.n	8000f2e <__udivmoddi4+0x256>
 8000f1e:	1869      	adds	r1, r5, r1
 8000f20:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f24:	d22f      	bcs.n	8000f86 <__udivmoddi4+0x2ae>
 8000f26:	428b      	cmp	r3, r1
 8000f28:	d92d      	bls.n	8000f86 <__udivmoddi4+0x2ae>
 8000f2a:	3f02      	subs	r7, #2
 8000f2c:	4429      	add	r1, r5
 8000f2e:	1acb      	subs	r3, r1, r3
 8000f30:	b281      	uxth	r1, r0
 8000f32:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f36:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f3e:	fb00 f308 	mul.w	r3, r0, r8
 8000f42:	428b      	cmp	r3, r1
 8000f44:	d907      	bls.n	8000f56 <__udivmoddi4+0x27e>
 8000f46:	1869      	adds	r1, r5, r1
 8000f48:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f4c:	d217      	bcs.n	8000f7e <__udivmoddi4+0x2a6>
 8000f4e:	428b      	cmp	r3, r1
 8000f50:	d915      	bls.n	8000f7e <__udivmoddi4+0x2a6>
 8000f52:	3802      	subs	r0, #2
 8000f54:	4429      	add	r1, r5
 8000f56:	1ac9      	subs	r1, r1, r3
 8000f58:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f5c:	e73b      	b.n	8000dd6 <__udivmoddi4+0xfe>
 8000f5e:	4637      	mov	r7, r6
 8000f60:	4630      	mov	r0, r6
 8000f62:	e709      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000f64:	4607      	mov	r7, r0
 8000f66:	e6e7      	b.n	8000d38 <__udivmoddi4+0x60>
 8000f68:	4618      	mov	r0, r3
 8000f6a:	e6fb      	b.n	8000d64 <__udivmoddi4+0x8c>
 8000f6c:	4541      	cmp	r1, r8
 8000f6e:	d2ab      	bcs.n	8000ec8 <__udivmoddi4+0x1f0>
 8000f70:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f74:	eb69 020e 	sbc.w	r2, r9, lr
 8000f78:	3801      	subs	r0, #1
 8000f7a:	4613      	mov	r3, r2
 8000f7c:	e7a4      	b.n	8000ec8 <__udivmoddi4+0x1f0>
 8000f7e:	4660      	mov	r0, ip
 8000f80:	e7e9      	b.n	8000f56 <__udivmoddi4+0x27e>
 8000f82:	4618      	mov	r0, r3
 8000f84:	e795      	b.n	8000eb2 <__udivmoddi4+0x1da>
 8000f86:	4667      	mov	r7, ip
 8000f88:	e7d1      	b.n	8000f2e <__udivmoddi4+0x256>
 8000f8a:	4681      	mov	r9, r0
 8000f8c:	e77c      	b.n	8000e88 <__udivmoddi4+0x1b0>
 8000f8e:	3802      	subs	r0, #2
 8000f90:	442c      	add	r4, r5
 8000f92:	e747      	b.n	8000e24 <__udivmoddi4+0x14c>
 8000f94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f98:	442b      	add	r3, r5
 8000f9a:	e72f      	b.n	8000dfc <__udivmoddi4+0x124>
 8000f9c:	4638      	mov	r0, r7
 8000f9e:	e708      	b.n	8000db2 <__udivmoddi4+0xda>
 8000fa0:	4637      	mov	r7, r6
 8000fa2:	e6e9      	b.n	8000d78 <__udivmoddi4+0xa0>

08000fa4 <__aeabi_idiv0>:
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop

08000fa8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fac:	4b0e      	ldr	r3, [pc, #56]	; (8000fe8 <HAL_Init+0x40>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a0d      	ldr	r2, [pc, #52]	; (8000fe8 <HAL_Init+0x40>)
 8000fb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fb6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fb8:	4b0b      	ldr	r3, [pc, #44]	; (8000fe8 <HAL_Init+0x40>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a0a      	ldr	r2, [pc, #40]	; (8000fe8 <HAL_Init+0x40>)
 8000fbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fc2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fc4:	4b08      	ldr	r3, [pc, #32]	; (8000fe8 <HAL_Init+0x40>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a07      	ldr	r2, [pc, #28]	; (8000fe8 <HAL_Init+0x40>)
 8000fca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fd0:	2003      	movs	r0, #3
 8000fd2:	f000 f8fa 	bl	80011ca <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fd6:	2000      	movs	r0, #0
 8000fd8:	f011 f8d6 	bl	8012188 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fdc:	f010 fd3c 	bl	8011a58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fe0:	2300      	movs	r3, #0
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40023c00 	.word	0x40023c00

08000fec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ff0:	4b06      	ldr	r3, [pc, #24]	; (800100c <HAL_IncTick+0x20>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	4b06      	ldr	r3, [pc, #24]	; (8001010 <HAL_IncTick+0x24>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	4a04      	ldr	r2, [pc, #16]	; (8001010 <HAL_IncTick+0x24>)
 8000ffe:	6013      	str	r3, [r2, #0]
}
 8001000:	bf00      	nop
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	20000000 	.word	0x20000000
 8001010:	2000685c 	.word	0x2000685c

08001014 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  return uwTick;
 8001018:	4b03      	ldr	r3, [pc, #12]	; (8001028 <HAL_GetTick+0x14>)
 800101a:	681b      	ldr	r3, [r3, #0]
}
 800101c:	4618      	mov	r0, r3
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	2000685c 	.word	0x2000685c

0800102c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001034:	f7ff ffee 	bl	8001014 <HAL_GetTick>
 8001038:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001044:	d005      	beq.n	8001052 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001046:	4b09      	ldr	r3, [pc, #36]	; (800106c <HAL_Delay+0x40>)
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	461a      	mov	r2, r3
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	4413      	add	r3, r2
 8001050:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001052:	bf00      	nop
 8001054:	f7ff ffde 	bl	8001014 <HAL_GetTick>
 8001058:	4602      	mov	r2, r0
 800105a:	68bb      	ldr	r3, [r7, #8]
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	68fa      	ldr	r2, [r7, #12]
 8001060:	429a      	cmp	r2, r3
 8001062:	d8f7      	bhi.n	8001054 <HAL_Delay+0x28>
  {
  }
}
 8001064:	bf00      	nop
 8001066:	3710      	adds	r7, #16
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	20000000 	.word	0x20000000

08001070 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001070:	b480      	push	{r7}
 8001072:	b085      	sub	sp, #20
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	f003 0307 	and.w	r3, r3, #7
 800107e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001080:	4b0c      	ldr	r3, [pc, #48]	; (80010b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001086:	68ba      	ldr	r2, [r7, #8]
 8001088:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800108c:	4013      	ands	r3, r2
 800108e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001098:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800109c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010a2:	4a04      	ldr	r2, [pc, #16]	; (80010b4 <__NVIC_SetPriorityGrouping+0x44>)
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	60d3      	str	r3, [r2, #12]
}
 80010a8:	bf00      	nop
 80010aa:	3714      	adds	r7, #20
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr
 80010b4:	e000ed00 	.word	0xe000ed00

080010b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010bc:	4b04      	ldr	r3, [pc, #16]	; (80010d0 <__NVIC_GetPriorityGrouping+0x18>)
 80010be:	68db      	ldr	r3, [r3, #12]
 80010c0:	0a1b      	lsrs	r3, r3, #8
 80010c2:	f003 0307 	and.w	r3, r3, #7
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr
 80010d0:	e000ed00 	.word	0xe000ed00

080010d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	4603      	mov	r3, r0
 80010dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	db0b      	blt.n	80010fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010e6:	79fb      	ldrb	r3, [r7, #7]
 80010e8:	f003 021f 	and.w	r2, r3, #31
 80010ec:	4907      	ldr	r1, [pc, #28]	; (800110c <__NVIC_EnableIRQ+0x38>)
 80010ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f2:	095b      	lsrs	r3, r3, #5
 80010f4:	2001      	movs	r0, #1
 80010f6:	fa00 f202 	lsl.w	r2, r0, r2
 80010fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010fe:	bf00      	nop
 8001100:	370c      	adds	r7, #12
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	e000e100 	.word	0xe000e100

08001110 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	6039      	str	r1, [r7, #0]
 800111a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800111c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001120:	2b00      	cmp	r3, #0
 8001122:	db0a      	blt.n	800113a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	b2da      	uxtb	r2, r3
 8001128:	490c      	ldr	r1, [pc, #48]	; (800115c <__NVIC_SetPriority+0x4c>)
 800112a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112e:	0112      	lsls	r2, r2, #4
 8001130:	b2d2      	uxtb	r2, r2
 8001132:	440b      	add	r3, r1
 8001134:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001138:	e00a      	b.n	8001150 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	b2da      	uxtb	r2, r3
 800113e:	4908      	ldr	r1, [pc, #32]	; (8001160 <__NVIC_SetPriority+0x50>)
 8001140:	79fb      	ldrb	r3, [r7, #7]
 8001142:	f003 030f 	and.w	r3, r3, #15
 8001146:	3b04      	subs	r3, #4
 8001148:	0112      	lsls	r2, r2, #4
 800114a:	b2d2      	uxtb	r2, r2
 800114c:	440b      	add	r3, r1
 800114e:	761a      	strb	r2, [r3, #24]
}
 8001150:	bf00      	nop
 8001152:	370c      	adds	r7, #12
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr
 800115c:	e000e100 	.word	0xe000e100
 8001160:	e000ed00 	.word	0xe000ed00

08001164 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001164:	b480      	push	{r7}
 8001166:	b089      	sub	sp, #36	; 0x24
 8001168:	af00      	add	r7, sp, #0
 800116a:	60f8      	str	r0, [r7, #12]
 800116c:	60b9      	str	r1, [r7, #8]
 800116e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	f003 0307 	and.w	r3, r3, #7
 8001176:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	f1c3 0307 	rsb	r3, r3, #7
 800117e:	2b04      	cmp	r3, #4
 8001180:	bf28      	it	cs
 8001182:	2304      	movcs	r3, #4
 8001184:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	3304      	adds	r3, #4
 800118a:	2b06      	cmp	r3, #6
 800118c:	d902      	bls.n	8001194 <NVIC_EncodePriority+0x30>
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	3b03      	subs	r3, #3
 8001192:	e000      	b.n	8001196 <NVIC_EncodePriority+0x32>
 8001194:	2300      	movs	r3, #0
 8001196:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001198:	f04f 32ff 	mov.w	r2, #4294967295
 800119c:	69bb      	ldr	r3, [r7, #24]
 800119e:	fa02 f303 	lsl.w	r3, r2, r3
 80011a2:	43da      	mvns	r2, r3
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	401a      	ands	r2, r3
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011ac:	f04f 31ff 	mov.w	r1, #4294967295
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	fa01 f303 	lsl.w	r3, r1, r3
 80011b6:	43d9      	mvns	r1, r3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011bc:	4313      	orrs	r3, r2
         );
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3724      	adds	r7, #36	; 0x24
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr

080011ca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b082      	sub	sp, #8
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011d2:	6878      	ldr	r0, [r7, #4]
 80011d4:	f7ff ff4c 	bl	8001070 <__NVIC_SetPriorityGrouping>
}
 80011d8:	bf00      	nop
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}

080011e0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b086      	sub	sp, #24
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	4603      	mov	r3, r0
 80011e8:	60b9      	str	r1, [r7, #8]
 80011ea:	607a      	str	r2, [r7, #4]
 80011ec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011ee:	2300      	movs	r3, #0
 80011f0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011f2:	f7ff ff61 	bl	80010b8 <__NVIC_GetPriorityGrouping>
 80011f6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011f8:	687a      	ldr	r2, [r7, #4]
 80011fa:	68b9      	ldr	r1, [r7, #8]
 80011fc:	6978      	ldr	r0, [r7, #20]
 80011fe:	f7ff ffb1 	bl	8001164 <NVIC_EncodePriority>
 8001202:	4602      	mov	r2, r0
 8001204:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001208:	4611      	mov	r1, r2
 800120a:	4618      	mov	r0, r3
 800120c:	f7ff ff80 	bl	8001110 <__NVIC_SetPriority>
}
 8001210:	bf00      	nop
 8001212:	3718      	adds	r7, #24
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}

08001218 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	4603      	mov	r3, r0
 8001220:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff ff54 	bl	80010d4 <__NVIC_EnableIRQ>
}
 800122c:	bf00      	nop
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}

08001234 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b086      	sub	sp, #24
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800123c:	2300      	movs	r3, #0
 800123e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001240:	f7ff fee8 	bl	8001014 <HAL_GetTick>
 8001244:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d101      	bne.n	8001250 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800124c:	2301      	movs	r3, #1
 800124e:	e099      	b.n	8001384 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2200      	movs	r2, #0
 8001254:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2202      	movs	r2, #2
 800125c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f022 0201 	bic.w	r2, r2, #1
 800126e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001270:	e00f      	b.n	8001292 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001272:	f7ff fecf 	bl	8001014 <HAL_GetTick>
 8001276:	4602      	mov	r2, r0
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	1ad3      	subs	r3, r2, r3
 800127c:	2b05      	cmp	r3, #5
 800127e:	d908      	bls.n	8001292 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2220      	movs	r2, #32
 8001284:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2203      	movs	r2, #3
 800128a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800128e:	2303      	movs	r3, #3
 8001290:	e078      	b.n	8001384 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f003 0301 	and.w	r3, r3, #1
 800129c:	2b00      	cmp	r3, #0
 800129e:	d1e8      	bne.n	8001272 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80012a8:	697a      	ldr	r2, [r7, #20]
 80012aa:	4b38      	ldr	r3, [pc, #224]	; (800138c <HAL_DMA_Init+0x158>)
 80012ac:	4013      	ands	r3, r2
 80012ae:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	685a      	ldr	r2, [r3, #4]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	689b      	ldr	r3, [r3, #8]
 80012b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80012be:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	691b      	ldr	r3, [r3, #16]
 80012c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	699b      	ldr	r3, [r3, #24]
 80012d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6a1b      	ldr	r3, [r3, #32]
 80012dc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80012de:	697a      	ldr	r2, [r7, #20]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e8:	2b04      	cmp	r3, #4
 80012ea:	d107      	bne.n	80012fc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f4:	4313      	orrs	r3, r2
 80012f6:	697a      	ldr	r2, [r7, #20]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	697a      	ldr	r2, [r7, #20]
 8001302:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	695b      	ldr	r3, [r3, #20]
 800130a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	f023 0307 	bic.w	r3, r3, #7
 8001312:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001318:	697a      	ldr	r2, [r7, #20]
 800131a:	4313      	orrs	r3, r2
 800131c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001322:	2b04      	cmp	r3, #4
 8001324:	d117      	bne.n	8001356 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800132a:	697a      	ldr	r2, [r7, #20]
 800132c:	4313      	orrs	r3, r2
 800132e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001334:	2b00      	cmp	r3, #0
 8001336:	d00e      	beq.n	8001356 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001338:	6878      	ldr	r0, [r7, #4]
 800133a:	f000 faf7 	bl	800192c <DMA_CheckFifoParam>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d008      	beq.n	8001356 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2240      	movs	r2, #64	; 0x40
 8001348:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2201      	movs	r2, #1
 800134e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001352:	2301      	movs	r3, #1
 8001354:	e016      	b.n	8001384 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	697a      	ldr	r2, [r7, #20]
 800135c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f000 faae 	bl	80018c0 <DMA_CalcBaseAndBitshift>
 8001364:	4603      	mov	r3, r0
 8001366:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800136c:	223f      	movs	r2, #63	; 0x3f
 800136e:	409a      	lsls	r2, r3
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2200      	movs	r2, #0
 8001378:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2201      	movs	r2, #1
 800137e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001382:	2300      	movs	r3, #0
}
 8001384:	4618      	mov	r0, r3
 8001386:	3718      	adds	r7, #24
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	f010803f 	.word	0xf010803f

08001390 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d101      	bne.n	80013a2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	e050      	b.n	8001444 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	2b02      	cmp	r3, #2
 80013ac:	d101      	bne.n	80013b2 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80013ae:	2302      	movs	r3, #2
 80013b0:	e048      	b.n	8001444 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f022 0201 	bic.w	r2, r2, #1
 80013c0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	2200      	movs	r2, #0
 80013d0:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	2200      	movs	r2, #0
 80013d8:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	2200      	movs	r2, #0
 80013e0:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	2200      	movs	r2, #0
 80013e8:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	2221      	movs	r2, #33	; 0x21
 80013f0:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	f000 fa64 	bl	80018c0 <DMA_CalcBaseAndBitshift>
 80013f8:	4603      	mov	r3, r0
 80013fa:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2200      	movs	r2, #0
 8001400:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2200      	movs	r2, #0
 8001406:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2200      	movs	r2, #0
 800140c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2200      	movs	r2, #0
 8001412:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2200      	movs	r2, #0
 8001418:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2200      	movs	r2, #0
 800141e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001424:	223f      	movs	r2, #63	; 0x3f
 8001426:	409a      	lsls	r2, r3
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2200      	movs	r2, #0
 8001430:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2200      	movs	r2, #0
 8001436:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2200      	movs	r2, #0
 800143e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001442:	2300      	movs	r3, #0
}
 8001444:	4618      	mov	r0, r3
 8001446:	3710      	adds	r7, #16
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}

0800144c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b086      	sub	sp, #24
 8001450:	af00      	add	r7, sp, #0
 8001452:	60f8      	str	r0, [r7, #12]
 8001454:	60b9      	str	r1, [r7, #8]
 8001456:	607a      	str	r2, [r7, #4]
 8001458:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800145a:	2300      	movs	r3, #0
 800145c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001462:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800146a:	2b01      	cmp	r3, #1
 800146c:	d101      	bne.n	8001472 <HAL_DMA_Start_IT+0x26>
 800146e:	2302      	movs	r3, #2
 8001470:	e048      	b.n	8001504 <HAL_DMA_Start_IT+0xb8>
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	2201      	movs	r2, #1
 8001476:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001480:	b2db      	uxtb	r3, r3
 8001482:	2b01      	cmp	r3, #1
 8001484:	d137      	bne.n	80014f6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	2202      	movs	r2, #2
 800148a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	2200      	movs	r2, #0
 8001492:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	687a      	ldr	r2, [r7, #4]
 8001498:	68b9      	ldr	r1, [r7, #8]
 800149a:	68f8      	ldr	r0, [r7, #12]
 800149c:	f000 f9e2 	bl	8001864 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014a4:	223f      	movs	r2, #63	; 0x3f
 80014a6:	409a      	lsls	r2, r3
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f042 0216 	orr.w	r2, r2, #22
 80014ba:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	695a      	ldr	r2, [r3, #20]
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80014ca:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d007      	beq.n	80014e4 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f042 0208 	orr.w	r2, r2, #8
 80014e2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f042 0201 	orr.w	r2, r2, #1
 80014f2:	601a      	str	r2, [r3, #0]
 80014f4:	e005      	b.n	8001502 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	2200      	movs	r2, #0
 80014fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80014fe:	2302      	movs	r3, #2
 8001500:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001502:	7dfb      	ldrb	r3, [r7, #23]
}
 8001504:	4618      	mov	r0, r3
 8001506:	3718      	adds	r7, #24
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}

0800150c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800151a:	b2db      	uxtb	r3, r3
 800151c:	2b02      	cmp	r3, #2
 800151e:	d004      	beq.n	800152a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2280      	movs	r2, #128	; 0x80
 8001524:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e00c      	b.n	8001544 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2205      	movs	r2, #5
 800152e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f022 0201 	bic.w	r2, r2, #1
 8001540:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001542:	2300      	movs	r3, #0
}
 8001544:	4618      	mov	r0, r3
 8001546:	370c      	adds	r7, #12
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr

08001550 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b086      	sub	sp, #24
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001558:	2300      	movs	r3, #0
 800155a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800155c:	4b92      	ldr	r3, [pc, #584]	; (80017a8 <HAL_DMA_IRQHandler+0x258>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a92      	ldr	r2, [pc, #584]	; (80017ac <HAL_DMA_IRQHandler+0x25c>)
 8001562:	fba2 2303 	umull	r2, r3, r2, r3
 8001566:	0a9b      	lsrs	r3, r3, #10
 8001568:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800156e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800157a:	2208      	movs	r2, #8
 800157c:	409a      	lsls	r2, r3
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	4013      	ands	r3, r2
 8001582:	2b00      	cmp	r3, #0
 8001584:	d01a      	beq.n	80015bc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f003 0304 	and.w	r3, r3, #4
 8001590:	2b00      	cmp	r3, #0
 8001592:	d013      	beq.n	80015bc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f022 0204 	bic.w	r2, r2, #4
 80015a2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015a8:	2208      	movs	r2, #8
 80015aa:	409a      	lsls	r2, r3
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015b4:	f043 0201 	orr.w	r2, r3, #1
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015c0:	2201      	movs	r2, #1
 80015c2:	409a      	lsls	r2, r3
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	4013      	ands	r3, r2
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d012      	beq.n	80015f2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	695b      	ldr	r3, [r3, #20]
 80015d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d00b      	beq.n	80015f2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015de:	2201      	movs	r2, #1
 80015e0:	409a      	lsls	r2, r3
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015ea:	f043 0202 	orr.w	r2, r3, #2
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015f6:	2204      	movs	r2, #4
 80015f8:	409a      	lsls	r2, r3
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	4013      	ands	r3, r2
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d012      	beq.n	8001628 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 0302 	and.w	r3, r3, #2
 800160c:	2b00      	cmp	r3, #0
 800160e:	d00b      	beq.n	8001628 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001614:	2204      	movs	r2, #4
 8001616:	409a      	lsls	r2, r3
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001620:	f043 0204 	orr.w	r2, r3, #4
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800162c:	2210      	movs	r2, #16
 800162e:	409a      	lsls	r2, r3
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	4013      	ands	r3, r2
 8001634:	2b00      	cmp	r3, #0
 8001636:	d043      	beq.n	80016c0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 0308 	and.w	r3, r3, #8
 8001642:	2b00      	cmp	r3, #0
 8001644:	d03c      	beq.n	80016c0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800164a:	2210      	movs	r2, #16
 800164c:	409a      	lsls	r2, r3
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800165c:	2b00      	cmp	r3, #0
 800165e:	d018      	beq.n	8001692 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d108      	bne.n	8001680 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001672:	2b00      	cmp	r3, #0
 8001674:	d024      	beq.n	80016c0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	4798      	blx	r3
 800167e:	e01f      	b.n	80016c0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001684:	2b00      	cmp	r3, #0
 8001686:	d01b      	beq.n	80016c0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	4798      	blx	r3
 8001690:	e016      	b.n	80016c0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800169c:	2b00      	cmp	r3, #0
 800169e:	d107      	bne.n	80016b0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f022 0208 	bic.w	r2, r2, #8
 80016ae:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d003      	beq.n	80016c0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016bc:	6878      	ldr	r0, [r7, #4]
 80016be:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016c4:	2220      	movs	r2, #32
 80016c6:	409a      	lsls	r2, r3
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	4013      	ands	r3, r2
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	f000 808e 	beq.w	80017ee <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f003 0310 	and.w	r3, r3, #16
 80016dc:	2b00      	cmp	r3, #0
 80016de:	f000 8086 	beq.w	80017ee <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016e6:	2220      	movs	r2, #32
 80016e8:	409a      	lsls	r2, r3
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	2b05      	cmp	r3, #5
 80016f8:	d136      	bne.n	8001768 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f022 0216 	bic.w	r2, r2, #22
 8001708:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	695a      	ldr	r2, [r3, #20]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001718:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171e:	2b00      	cmp	r3, #0
 8001720:	d103      	bne.n	800172a <HAL_DMA_IRQHandler+0x1da>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001726:	2b00      	cmp	r3, #0
 8001728:	d007      	beq.n	800173a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f022 0208 	bic.w	r2, r2, #8
 8001738:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800173e:	223f      	movs	r2, #63	; 0x3f
 8001740:	409a      	lsls	r2, r3
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2200      	movs	r2, #0
 800174a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2201      	movs	r2, #1
 8001752:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800175a:	2b00      	cmp	r3, #0
 800175c:	d07d      	beq.n	800185a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	4798      	blx	r3
        }
        return;
 8001766:	e078      	b.n	800185a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d01c      	beq.n	80017b0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001780:	2b00      	cmp	r3, #0
 8001782:	d108      	bne.n	8001796 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001788:	2b00      	cmp	r3, #0
 800178a:	d030      	beq.n	80017ee <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	4798      	blx	r3
 8001794:	e02b      	b.n	80017ee <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800179a:	2b00      	cmp	r3, #0
 800179c:	d027      	beq.n	80017ee <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	4798      	blx	r3
 80017a6:	e022      	b.n	80017ee <HAL_DMA_IRQHandler+0x29e>
 80017a8:	2000004c 	.word	0x2000004c
 80017ac:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d10f      	bne.n	80017de <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f022 0210 	bic.w	r2, r2, #16
 80017cc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2200      	movs	r2, #0
 80017d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2201      	movs	r2, #1
 80017da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d003      	beq.n	80017ee <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d032      	beq.n	800185c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017fa:	f003 0301 	and.w	r3, r3, #1
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d022      	beq.n	8001848 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2205      	movs	r2, #5
 8001806:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f022 0201 	bic.w	r2, r2, #1
 8001818:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	3301      	adds	r3, #1
 800181e:	60bb      	str	r3, [r7, #8]
 8001820:	697a      	ldr	r2, [r7, #20]
 8001822:	429a      	cmp	r2, r3
 8001824:	d307      	bcc.n	8001836 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 0301 	and.w	r3, r3, #1
 8001830:	2b00      	cmp	r3, #0
 8001832:	d1f2      	bne.n	800181a <HAL_DMA_IRQHandler+0x2ca>
 8001834:	e000      	b.n	8001838 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001836:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2200      	movs	r2, #0
 800183c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2201      	movs	r2, #1
 8001844:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800184c:	2b00      	cmp	r3, #0
 800184e:	d005      	beq.n	800185c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	4798      	blx	r3
 8001858:	e000      	b.n	800185c <HAL_DMA_IRQHandler+0x30c>
        return;
 800185a:	bf00      	nop
    }
  }
}
 800185c:	3718      	adds	r7, #24
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop

08001864 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001864:	b480      	push	{r7}
 8001866:	b085      	sub	sp, #20
 8001868:	af00      	add	r7, sp, #0
 800186a:	60f8      	str	r0, [r7, #12]
 800186c:	60b9      	str	r1, [r7, #8]
 800186e:	607a      	str	r2, [r7, #4]
 8001870:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001880:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	683a      	ldr	r2, [r7, #0]
 8001888:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	2b40      	cmp	r3, #64	; 0x40
 8001890:	d108      	bne.n	80018a4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	687a      	ldr	r2, [r7, #4]
 8001898:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	68ba      	ldr	r2, [r7, #8]
 80018a0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80018a2:	e007      	b.n	80018b4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	68ba      	ldr	r2, [r7, #8]
 80018aa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	687a      	ldr	r2, [r7, #4]
 80018b2:	60da      	str	r2, [r3, #12]
}
 80018b4:	bf00      	nop
 80018b6:	3714      	adds	r7, #20
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr

080018c0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b085      	sub	sp, #20
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	3b10      	subs	r3, #16
 80018d0:	4a14      	ldr	r2, [pc, #80]	; (8001924 <DMA_CalcBaseAndBitshift+0x64>)
 80018d2:	fba2 2303 	umull	r2, r3, r2, r3
 80018d6:	091b      	lsrs	r3, r3, #4
 80018d8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80018da:	4a13      	ldr	r2, [pc, #76]	; (8001928 <DMA_CalcBaseAndBitshift+0x68>)
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	4413      	add	r3, r2
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	461a      	mov	r2, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	2b03      	cmp	r3, #3
 80018ec:	d909      	bls.n	8001902 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80018f6:	f023 0303 	bic.w	r3, r3, #3
 80018fa:	1d1a      	adds	r2, r3, #4
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	659a      	str	r2, [r3, #88]	; 0x58
 8001900:	e007      	b.n	8001912 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800190a:	f023 0303 	bic.w	r3, r3, #3
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001916:	4618      	mov	r0, r3
 8001918:	3714      	adds	r7, #20
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	aaaaaaab 	.word	0xaaaaaaab
 8001928:	08016574 	.word	0x08016574

0800192c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800192c:	b480      	push	{r7}
 800192e:	b085      	sub	sp, #20
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001934:	2300      	movs	r3, #0
 8001936:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800193c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	699b      	ldr	r3, [r3, #24]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d11f      	bne.n	8001986 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	2b03      	cmp	r3, #3
 800194a:	d855      	bhi.n	80019f8 <DMA_CheckFifoParam+0xcc>
 800194c:	a201      	add	r2, pc, #4	; (adr r2, 8001954 <DMA_CheckFifoParam+0x28>)
 800194e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001952:	bf00      	nop
 8001954:	08001965 	.word	0x08001965
 8001958:	08001977 	.word	0x08001977
 800195c:	08001965 	.word	0x08001965
 8001960:	080019f9 	.word	0x080019f9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001968:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800196c:	2b00      	cmp	r3, #0
 800196e:	d045      	beq.n	80019fc <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001974:	e042      	b.n	80019fc <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800197a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800197e:	d13f      	bne.n	8001a00 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001980:	2301      	movs	r3, #1
 8001982:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001984:	e03c      	b.n	8001a00 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	699b      	ldr	r3, [r3, #24]
 800198a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800198e:	d121      	bne.n	80019d4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	2b03      	cmp	r3, #3
 8001994:	d836      	bhi.n	8001a04 <DMA_CheckFifoParam+0xd8>
 8001996:	a201      	add	r2, pc, #4	; (adr r2, 800199c <DMA_CheckFifoParam+0x70>)
 8001998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800199c:	080019ad 	.word	0x080019ad
 80019a0:	080019b3 	.word	0x080019b3
 80019a4:	080019ad 	.word	0x080019ad
 80019a8:	080019c5 	.word	0x080019c5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	73fb      	strb	r3, [r7, #15]
      break;
 80019b0:	e02f      	b.n	8001a12 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d024      	beq.n	8001a08 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019c2:	e021      	b.n	8001a08 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019c8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80019cc:	d11e      	bne.n	8001a0c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80019d2:	e01b      	b.n	8001a0c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d902      	bls.n	80019e0 <DMA_CheckFifoParam+0xb4>
 80019da:	2b03      	cmp	r3, #3
 80019dc:	d003      	beq.n	80019e6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80019de:	e018      	b.n	8001a12 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	73fb      	strb	r3, [r7, #15]
      break;
 80019e4:	e015      	b.n	8001a12 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d00e      	beq.n	8001a10 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	73fb      	strb	r3, [r7, #15]
      break;
 80019f6:	e00b      	b.n	8001a10 <DMA_CheckFifoParam+0xe4>
      break;
 80019f8:	bf00      	nop
 80019fa:	e00a      	b.n	8001a12 <DMA_CheckFifoParam+0xe6>
      break;
 80019fc:	bf00      	nop
 80019fe:	e008      	b.n	8001a12 <DMA_CheckFifoParam+0xe6>
      break;
 8001a00:	bf00      	nop
 8001a02:	e006      	b.n	8001a12 <DMA_CheckFifoParam+0xe6>
      break;
 8001a04:	bf00      	nop
 8001a06:	e004      	b.n	8001a12 <DMA_CheckFifoParam+0xe6>
      break;
 8001a08:	bf00      	nop
 8001a0a:	e002      	b.n	8001a12 <DMA_CheckFifoParam+0xe6>
      break;   
 8001a0c:	bf00      	nop
 8001a0e:	e000      	b.n	8001a12 <DMA_CheckFifoParam+0xe6>
      break;
 8001a10:	bf00      	nop
    }
  } 
  
  return status; 
 8001a12:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3714      	adds	r7, #20
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr

08001a20 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b086      	sub	sp, #24
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	60f8      	str	r0, [r7, #12]
 8001a28:	60b9      	str	r1, [r7, #8]
 8001a2a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001a32:	4b23      	ldr	r3, [pc, #140]	; (8001ac0 <HAL_FLASH_Program+0xa0>)
 8001a34:	7e1b      	ldrb	r3, [r3, #24]
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d101      	bne.n	8001a3e <HAL_FLASH_Program+0x1e>
 8001a3a:	2302      	movs	r3, #2
 8001a3c:	e03b      	b.n	8001ab6 <HAL_FLASH_Program+0x96>
 8001a3e:	4b20      	ldr	r3, [pc, #128]	; (8001ac0 <HAL_FLASH_Program+0xa0>)
 8001a40:	2201      	movs	r2, #1
 8001a42:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001a44:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001a48:	f000 f860 	bl	8001b0c <FLASH_WaitForLastOperation>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8001a50:	7dfb      	ldrb	r3, [r7, #23]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d12b      	bne.n	8001aae <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d105      	bne.n	8001a68 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001a5c:	783b      	ldrb	r3, [r7, #0]
 8001a5e:	4619      	mov	r1, r3
 8001a60:	68b8      	ldr	r0, [r7, #8]
 8001a62:	f000 f907 	bl	8001c74 <FLASH_Program_Byte>
 8001a66:	e016      	b.n	8001a96 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d105      	bne.n	8001a7a <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001a6e:	883b      	ldrh	r3, [r7, #0]
 8001a70:	4619      	mov	r1, r3
 8001a72:	68b8      	ldr	r0, [r7, #8]
 8001a74:	f000 f8da 	bl	8001c2c <FLASH_Program_HalfWord>
 8001a78:	e00d      	b.n	8001a96 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d105      	bne.n	8001a8c <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	4619      	mov	r1, r3
 8001a84:	68b8      	ldr	r0, [r7, #8]
 8001a86:	f000 f8af 	bl	8001be8 <FLASH_Program_Word>
 8001a8a:	e004      	b.n	8001a96 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001a8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a90:	68b8      	ldr	r0, [r7, #8]
 8001a92:	f000 f87b 	bl	8001b8c <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001a96:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001a9a:	f000 f837 	bl	8001b0c <FLASH_WaitForLastOperation>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8001aa2:	4b08      	ldr	r3, [pc, #32]	; (8001ac4 <HAL_FLASH_Program+0xa4>)
 8001aa4:	691b      	ldr	r3, [r3, #16]
 8001aa6:	4a07      	ldr	r2, [pc, #28]	; (8001ac4 <HAL_FLASH_Program+0xa4>)
 8001aa8:	f023 0301 	bic.w	r3, r3, #1
 8001aac:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001aae:	4b04      	ldr	r3, [pc, #16]	; (8001ac0 <HAL_FLASH_Program+0xa0>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	761a      	strb	r2, [r3, #24]
  
  return status;
 8001ab4:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3718      	adds	r7, #24
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	20006860 	.word	0x20006860
 8001ac4:	40023c00 	.word	0x40023c00

08001ac8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001ad2:	4b0b      	ldr	r3, [pc, #44]	; (8001b00 <HAL_FLASH_Unlock+0x38>)
 8001ad4:	691b      	ldr	r3, [r3, #16]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	da0b      	bge.n	8001af2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001ada:	4b09      	ldr	r3, [pc, #36]	; (8001b00 <HAL_FLASH_Unlock+0x38>)
 8001adc:	4a09      	ldr	r2, [pc, #36]	; (8001b04 <HAL_FLASH_Unlock+0x3c>)
 8001ade:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001ae0:	4b07      	ldr	r3, [pc, #28]	; (8001b00 <HAL_FLASH_Unlock+0x38>)
 8001ae2:	4a09      	ldr	r2, [pc, #36]	; (8001b08 <HAL_FLASH_Unlock+0x40>)
 8001ae4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001ae6:	4b06      	ldr	r3, [pc, #24]	; (8001b00 <HAL_FLASH_Unlock+0x38>)
 8001ae8:	691b      	ldr	r3, [r3, #16]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	da01      	bge.n	8001af2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001af2:	79fb      	ldrb	r3, [r7, #7]
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	370c      	adds	r7, #12
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr
 8001b00:	40023c00 	.word	0x40023c00
 8001b04:	45670123 	.word	0x45670123
 8001b08:	cdef89ab 	.word	0xcdef89ab

08001b0c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b14:	2300      	movs	r3, #0
 8001b16:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001b18:	4b1a      	ldr	r3, [pc, #104]	; (8001b84 <FLASH_WaitForLastOperation+0x78>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001b1e:	f7ff fa79 	bl	8001014 <HAL_GetTick>
 8001b22:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001b24:	e010      	b.n	8001b48 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b2c:	d00c      	beq.n	8001b48 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d007      	beq.n	8001b44 <FLASH_WaitForLastOperation+0x38>
 8001b34:	f7ff fa6e 	bl	8001014 <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d201      	bcs.n	8001b48 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001b44:	2303      	movs	r3, #3
 8001b46:	e019      	b.n	8001b7c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001b48:	4b0f      	ldr	r3, [pc, #60]	; (8001b88 <FLASH_WaitForLastOperation+0x7c>)
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d1e8      	bne.n	8001b26 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001b54:	4b0c      	ldr	r3, [pc, #48]	; (8001b88 <FLASH_WaitForLastOperation+0x7c>)
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	f003 0301 	and.w	r3, r3, #1
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d002      	beq.n	8001b66 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001b60:	4b09      	ldr	r3, [pc, #36]	; (8001b88 <FLASH_WaitForLastOperation+0x7c>)
 8001b62:	2201      	movs	r2, #1
 8001b64:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001b66:	4b08      	ldr	r3, [pc, #32]	; (8001b88 <FLASH_WaitForLastOperation+0x7c>)
 8001b68:	68db      	ldr	r3, [r3, #12]
 8001b6a:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d003      	beq.n	8001b7a <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001b72:	f000 f8a1 	bl	8001cb8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e000      	b.n	8001b7c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8001b7a:	2300      	movs	r3, #0
  
}  
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3710      	adds	r7, #16
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	20006860 	.word	0x20006860
 8001b88:	40023c00 	.word	0x40023c00

08001b8c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001b8c:	b490      	push	{r4, r7}
 8001b8e:	b084      	sub	sp, #16
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	60f8      	str	r0, [r7, #12]
 8001b94:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001b98:	4b12      	ldr	r3, [pc, #72]	; (8001be4 <FLASH_Program_DoubleWord+0x58>)
 8001b9a:	691b      	ldr	r3, [r3, #16]
 8001b9c:	4a11      	ldr	r2, [pc, #68]	; (8001be4 <FLASH_Program_DoubleWord+0x58>)
 8001b9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ba2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001ba4:	4b0f      	ldr	r3, [pc, #60]	; (8001be4 <FLASH_Program_DoubleWord+0x58>)
 8001ba6:	691b      	ldr	r3, [r3, #16]
 8001ba8:	4a0e      	ldr	r2, [pc, #56]	; (8001be4 <FLASH_Program_DoubleWord+0x58>)
 8001baa:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001bae:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001bb0:	4b0c      	ldr	r3, [pc, #48]	; (8001be4 <FLASH_Program_DoubleWord+0x58>)
 8001bb2:	691b      	ldr	r3, [r3, #16]
 8001bb4:	4a0b      	ldr	r2, [pc, #44]	; (8001be4 <FLASH_Program_DoubleWord+0x58>)
 8001bb6:	f043 0301 	orr.w	r3, r3, #1
 8001bba:	6113      	str	r3, [r2, #16]

  /* Program the double-word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	683a      	ldr	r2, [r7, #0]
 8001bc0:	601a      	str	r2, [r3, #0]
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8001bc2:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001bc6:	f04f 0300 	mov.w	r3, #0
 8001bca:	f04f 0400 	mov.w	r4, #0
 8001bce:	0013      	movs	r3, r2
 8001bd0:	2400      	movs	r4, #0
 8001bd2:	68fa      	ldr	r2, [r7, #12]
 8001bd4:	3204      	adds	r2, #4
 8001bd6:	6013      	str	r3, [r2, #0]
}
 8001bd8:	bf00      	nop
 8001bda:	3710      	adds	r7, #16
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bc90      	pop	{r4, r7}
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	40023c00 	.word	0x40023c00

08001be8 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001bf2:	4b0d      	ldr	r3, [pc, #52]	; (8001c28 <FLASH_Program_Word+0x40>)
 8001bf4:	691b      	ldr	r3, [r3, #16]
 8001bf6:	4a0c      	ldr	r2, [pc, #48]	; (8001c28 <FLASH_Program_Word+0x40>)
 8001bf8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001bfc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001bfe:	4b0a      	ldr	r3, [pc, #40]	; (8001c28 <FLASH_Program_Word+0x40>)
 8001c00:	691b      	ldr	r3, [r3, #16]
 8001c02:	4a09      	ldr	r2, [pc, #36]	; (8001c28 <FLASH_Program_Word+0x40>)
 8001c04:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c08:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001c0a:	4b07      	ldr	r3, [pc, #28]	; (8001c28 <FLASH_Program_Word+0x40>)
 8001c0c:	691b      	ldr	r3, [r3, #16]
 8001c0e:	4a06      	ldr	r2, [pc, #24]	; (8001c28 <FLASH_Program_Word+0x40>)
 8001c10:	f043 0301 	orr.w	r3, r3, #1
 8001c14:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	683a      	ldr	r2, [r7, #0]
 8001c1a:	601a      	str	r2, [r3, #0]
}
 8001c1c:	bf00      	nop
 8001c1e:	370c      	adds	r7, #12
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr
 8001c28:	40023c00 	.word	0x40023c00

08001c2c <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	460b      	mov	r3, r1
 8001c36:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001c38:	4b0d      	ldr	r3, [pc, #52]	; (8001c70 <FLASH_Program_HalfWord+0x44>)
 8001c3a:	691b      	ldr	r3, [r3, #16]
 8001c3c:	4a0c      	ldr	r2, [pc, #48]	; (8001c70 <FLASH_Program_HalfWord+0x44>)
 8001c3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c42:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001c44:	4b0a      	ldr	r3, [pc, #40]	; (8001c70 <FLASH_Program_HalfWord+0x44>)
 8001c46:	691b      	ldr	r3, [r3, #16]
 8001c48:	4a09      	ldr	r2, [pc, #36]	; (8001c70 <FLASH_Program_HalfWord+0x44>)
 8001c4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c4e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001c50:	4b07      	ldr	r3, [pc, #28]	; (8001c70 <FLASH_Program_HalfWord+0x44>)
 8001c52:	691b      	ldr	r3, [r3, #16]
 8001c54:	4a06      	ldr	r2, [pc, #24]	; (8001c70 <FLASH_Program_HalfWord+0x44>)
 8001c56:	f043 0301 	orr.w	r3, r3, #1
 8001c5a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	887a      	ldrh	r2, [r7, #2]
 8001c60:	801a      	strh	r2, [r3, #0]
}
 8001c62:	bf00      	nop
 8001c64:	370c      	adds	r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	40023c00 	.word	0x40023c00

08001c74 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001c80:	4b0c      	ldr	r3, [pc, #48]	; (8001cb4 <FLASH_Program_Byte+0x40>)
 8001c82:	691b      	ldr	r3, [r3, #16]
 8001c84:	4a0b      	ldr	r2, [pc, #44]	; (8001cb4 <FLASH_Program_Byte+0x40>)
 8001c86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c8a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001c8c:	4b09      	ldr	r3, [pc, #36]	; (8001cb4 <FLASH_Program_Byte+0x40>)
 8001c8e:	4a09      	ldr	r2, [pc, #36]	; (8001cb4 <FLASH_Program_Byte+0x40>)
 8001c90:	691b      	ldr	r3, [r3, #16]
 8001c92:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001c94:	4b07      	ldr	r3, [pc, #28]	; (8001cb4 <FLASH_Program_Byte+0x40>)
 8001c96:	691b      	ldr	r3, [r3, #16]
 8001c98:	4a06      	ldr	r2, [pc, #24]	; (8001cb4 <FLASH_Program_Byte+0x40>)
 8001c9a:	f043 0301 	orr.w	r3, r3, #1
 8001c9e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	78fa      	ldrb	r2, [r7, #3]
 8001ca4:	701a      	strb	r2, [r3, #0]
}
 8001ca6:	bf00      	nop
 8001ca8:	370c      	adds	r7, #12
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	40023c00 	.word	0x40023c00

08001cb8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001cbc:	4b27      	ldr	r3, [pc, #156]	; (8001d5c <FLASH_SetErrorCode+0xa4>)
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	f003 0310 	and.w	r3, r3, #16
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d008      	beq.n	8001cda <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001cc8:	4b25      	ldr	r3, [pc, #148]	; (8001d60 <FLASH_SetErrorCode+0xa8>)
 8001cca:	69db      	ldr	r3, [r3, #28]
 8001ccc:	f043 0310 	orr.w	r3, r3, #16
 8001cd0:	4a23      	ldr	r2, [pc, #140]	; (8001d60 <FLASH_SetErrorCode+0xa8>)
 8001cd2:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001cd4:	4b21      	ldr	r3, [pc, #132]	; (8001d5c <FLASH_SetErrorCode+0xa4>)
 8001cd6:	2210      	movs	r2, #16
 8001cd8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001cda:	4b20      	ldr	r3, [pc, #128]	; (8001d5c <FLASH_SetErrorCode+0xa4>)
 8001cdc:	68db      	ldr	r3, [r3, #12]
 8001cde:	f003 0320 	and.w	r3, r3, #32
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d008      	beq.n	8001cf8 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001ce6:	4b1e      	ldr	r3, [pc, #120]	; (8001d60 <FLASH_SetErrorCode+0xa8>)
 8001ce8:	69db      	ldr	r3, [r3, #28]
 8001cea:	f043 0308 	orr.w	r3, r3, #8
 8001cee:	4a1c      	ldr	r2, [pc, #112]	; (8001d60 <FLASH_SetErrorCode+0xa8>)
 8001cf0:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8001cf2:	4b1a      	ldr	r3, [pc, #104]	; (8001d5c <FLASH_SetErrorCode+0xa4>)
 8001cf4:	2220      	movs	r2, #32
 8001cf6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001cf8:	4b18      	ldr	r3, [pc, #96]	; (8001d5c <FLASH_SetErrorCode+0xa4>)
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d008      	beq.n	8001d16 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001d04:	4b16      	ldr	r3, [pc, #88]	; (8001d60 <FLASH_SetErrorCode+0xa8>)
 8001d06:	69db      	ldr	r3, [r3, #28]
 8001d08:	f043 0304 	orr.w	r3, r3, #4
 8001d0c:	4a14      	ldr	r2, [pc, #80]	; (8001d60 <FLASH_SetErrorCode+0xa8>)
 8001d0e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001d10:	4b12      	ldr	r3, [pc, #72]	; (8001d5c <FLASH_SetErrorCode+0xa4>)
 8001d12:	2240      	movs	r2, #64	; 0x40
 8001d14:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8001d16:	4b11      	ldr	r3, [pc, #68]	; (8001d5c <FLASH_SetErrorCode+0xa4>)
 8001d18:	68db      	ldr	r3, [r3, #12]
 8001d1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d008      	beq.n	8001d34 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8001d22:	4b0f      	ldr	r3, [pc, #60]	; (8001d60 <FLASH_SetErrorCode+0xa8>)
 8001d24:	69db      	ldr	r3, [r3, #28]
 8001d26:	f043 0302 	orr.w	r3, r3, #2
 8001d2a:	4a0d      	ldr	r2, [pc, #52]	; (8001d60 <FLASH_SetErrorCode+0xa8>)
 8001d2c:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001d2e:	4b0b      	ldr	r3, [pc, #44]	; (8001d5c <FLASH_SetErrorCode+0xa4>)
 8001d30:	2280      	movs	r2, #128	; 0x80
 8001d32:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001d34:	4b09      	ldr	r3, [pc, #36]	; (8001d5c <FLASH_SetErrorCode+0xa4>)
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	f003 0302 	and.w	r3, r3, #2
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d008      	beq.n	8001d52 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001d40:	4b07      	ldr	r3, [pc, #28]	; (8001d60 <FLASH_SetErrorCode+0xa8>)
 8001d42:	69db      	ldr	r3, [r3, #28]
 8001d44:	f043 0320 	orr.w	r3, r3, #32
 8001d48:	4a05      	ldr	r2, [pc, #20]	; (8001d60 <FLASH_SetErrorCode+0xa8>)
 8001d4a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001d4c:	4b03      	ldr	r3, [pc, #12]	; (8001d5c <FLASH_SetErrorCode+0xa4>)
 8001d4e:	2202      	movs	r2, #2
 8001d50:	60da      	str	r2, [r3, #12]
  }
}
 8001d52:	bf00      	nop
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr
 8001d5c:	40023c00 	.word	0x40023c00
 8001d60:	20006860 	.word	0x20006860

08001d64 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b084      	sub	sp, #16
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8001d72:	2300      	movs	r3, #0
 8001d74:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001d76:	4b31      	ldr	r3, [pc, #196]	; (8001e3c <HAL_FLASHEx_Erase+0xd8>)
 8001d78:	7e1b      	ldrb	r3, [r3, #24]
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d101      	bne.n	8001d82 <HAL_FLASHEx_Erase+0x1e>
 8001d7e:	2302      	movs	r3, #2
 8001d80:	e058      	b.n	8001e34 <HAL_FLASHEx_Erase+0xd0>
 8001d82:	4b2e      	ldr	r3, [pc, #184]	; (8001e3c <HAL_FLASHEx_Erase+0xd8>)
 8001d84:	2201      	movs	r2, #1
 8001d86:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001d88:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001d8c:	f7ff febe 	bl	8001b0c <FLASH_WaitForLastOperation>
 8001d90:	4603      	mov	r3, r0
 8001d92:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8001d94:	7bfb      	ldrb	r3, [r7, #15]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d148      	bne.n	8001e2c <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	f04f 32ff 	mov.w	r2, #4294967295
 8001da0:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d115      	bne.n	8001dd6 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	691b      	ldr	r3, [r3, #16]
 8001dae:	b2da      	uxtb	r2, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	4619      	mov	r1, r3
 8001db6:	4610      	mov	r0, r2
 8001db8:	f000 f844 	bl	8001e44 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001dbc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001dc0:	f7ff fea4 	bl	8001b0c <FLASH_WaitForLastOperation>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8001dc8:	4b1d      	ldr	r3, [pc, #116]	; (8001e40 <HAL_FLASHEx_Erase+0xdc>)
 8001dca:	691b      	ldr	r3, [r3, #16]
 8001dcc:	4a1c      	ldr	r2, [pc, #112]	; (8001e40 <HAL_FLASHEx_Erase+0xdc>)
 8001dce:	f023 0304 	bic.w	r3, r3, #4
 8001dd2:	6113      	str	r3, [r2, #16]
 8001dd4:	e028      	b.n	8001e28 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	60bb      	str	r3, [r7, #8]
 8001ddc:	e01c      	b.n	8001e18 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	691b      	ldr	r3, [r3, #16]
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	4619      	mov	r1, r3
 8001de6:	68b8      	ldr	r0, [r7, #8]
 8001de8:	f000 f850 	bl	8001e8c <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001dec:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001df0:	f7ff fe8c 	bl	8001b0c <FLASH_WaitForLastOperation>
 8001df4:	4603      	mov	r3, r0
 8001df6:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8001df8:	4b11      	ldr	r3, [pc, #68]	; (8001e40 <HAL_FLASHEx_Erase+0xdc>)
 8001dfa:	691b      	ldr	r3, [r3, #16]
 8001dfc:	4a10      	ldr	r2, [pc, #64]	; (8001e40 <HAL_FLASHEx_Erase+0xdc>)
 8001dfe:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8001e02:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8001e04:	7bfb      	ldrb	r3, [r7, #15]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d003      	beq.n	8001e12 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	68ba      	ldr	r2, [r7, #8]
 8001e0e:	601a      	str	r2, [r3, #0]
          break;
 8001e10:	e00a      	b.n	8001e28 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	3301      	adds	r3, #1
 8001e16:	60bb      	str	r3, [r7, #8]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	68da      	ldr	r2, [r3, #12]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	4413      	add	r3, r2
 8001e22:	68ba      	ldr	r2, [r7, #8]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d3da      	bcc.n	8001dde <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8001e28:	f000 f878 	bl	8001f1c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001e2c:	4b03      	ldr	r3, [pc, #12]	; (8001e3c <HAL_FLASHEx_Erase+0xd8>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	761a      	strb	r2, [r3, #24]

  return status;
 8001e32:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3710      	adds	r7, #16
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	20006860 	.word	0x20006860
 8001e40:	40023c00 	.word	0x40023c00

08001e44 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	6039      	str	r1, [r7, #0]
 8001e4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001e50:	4b0d      	ldr	r3, [pc, #52]	; (8001e88 <FLASH_MassErase+0x44>)
 8001e52:	691b      	ldr	r3, [r3, #16]
 8001e54:	4a0c      	ldr	r2, [pc, #48]	; (8001e88 <FLASH_MassErase+0x44>)
 8001e56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e5a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8001e5c:	4b0a      	ldr	r3, [pc, #40]	; (8001e88 <FLASH_MassErase+0x44>)
 8001e5e:	691b      	ldr	r3, [r3, #16]
 8001e60:	4a09      	ldr	r2, [pc, #36]	; (8001e88 <FLASH_MassErase+0x44>)
 8001e62:	f043 0304 	orr.w	r3, r3, #4
 8001e66:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8001e68:	4b07      	ldr	r3, [pc, #28]	; (8001e88 <FLASH_MassErase+0x44>)
 8001e6a:	691a      	ldr	r2, [r3, #16]
 8001e6c:	79fb      	ldrb	r3, [r7, #7]
 8001e6e:	021b      	lsls	r3, r3, #8
 8001e70:	4313      	orrs	r3, r2
 8001e72:	4a05      	ldr	r2, [pc, #20]	; (8001e88 <FLASH_MassErase+0x44>)
 8001e74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e78:	6113      	str	r3, [r2, #16]
}
 8001e7a:	bf00      	nop
 8001e7c:	370c      	adds	r7, #12
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	40023c00 	.word	0x40023c00

08001e8c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b085      	sub	sp, #20
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	460b      	mov	r3, r1
 8001e96:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001e9c:	78fb      	ldrb	r3, [r7, #3]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d102      	bne.n	8001ea8 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	60fb      	str	r3, [r7, #12]
 8001ea6:	e010      	b.n	8001eca <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001ea8:	78fb      	ldrb	r3, [r7, #3]
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d103      	bne.n	8001eb6 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8001eae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001eb2:	60fb      	str	r3, [r7, #12]
 8001eb4:	e009      	b.n	8001eca <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8001eb6:	78fb      	ldrb	r3, [r7, #3]
 8001eb8:	2b02      	cmp	r3, #2
 8001eba:	d103      	bne.n	8001ec4 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001ebc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ec0:	60fb      	str	r3, [r7, #12]
 8001ec2:	e002      	b.n	8001eca <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001ec4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ec8:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001eca:	4b13      	ldr	r3, [pc, #76]	; (8001f18 <FLASH_Erase_Sector+0x8c>)
 8001ecc:	691b      	ldr	r3, [r3, #16]
 8001ece:	4a12      	ldr	r2, [pc, #72]	; (8001f18 <FLASH_Erase_Sector+0x8c>)
 8001ed0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ed4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8001ed6:	4b10      	ldr	r3, [pc, #64]	; (8001f18 <FLASH_Erase_Sector+0x8c>)
 8001ed8:	691a      	ldr	r2, [r3, #16]
 8001eda:	490f      	ldr	r1, [pc, #60]	; (8001f18 <FLASH_Erase_Sector+0x8c>)
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8001ee2:	4b0d      	ldr	r3, [pc, #52]	; (8001f18 <FLASH_Erase_Sector+0x8c>)
 8001ee4:	691b      	ldr	r3, [r3, #16]
 8001ee6:	4a0c      	ldr	r2, [pc, #48]	; (8001f18 <FLASH_Erase_Sector+0x8c>)
 8001ee8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001eec:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8001eee:	4b0a      	ldr	r3, [pc, #40]	; (8001f18 <FLASH_Erase_Sector+0x8c>)
 8001ef0:	691a      	ldr	r2, [r3, #16]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	00db      	lsls	r3, r3, #3
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	4a07      	ldr	r2, [pc, #28]	; (8001f18 <FLASH_Erase_Sector+0x8c>)
 8001efa:	f043 0302 	orr.w	r3, r3, #2
 8001efe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001f00:	4b05      	ldr	r3, [pc, #20]	; (8001f18 <FLASH_Erase_Sector+0x8c>)
 8001f02:	691b      	ldr	r3, [r3, #16]
 8001f04:	4a04      	ldr	r2, [pc, #16]	; (8001f18 <FLASH_Erase_Sector+0x8c>)
 8001f06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f0a:	6113      	str	r3, [r2, #16]
}
 8001f0c:	bf00      	nop
 8001f0e:	3714      	adds	r7, #20
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr
 8001f18:	40023c00 	.word	0x40023c00

08001f1c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8001f20:	4b20      	ldr	r3, [pc, #128]	; (8001fa4 <FLASH_FlushCaches+0x88>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d017      	beq.n	8001f5c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001f2c:	4b1d      	ldr	r3, [pc, #116]	; (8001fa4 <FLASH_FlushCaches+0x88>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a1c      	ldr	r2, [pc, #112]	; (8001fa4 <FLASH_FlushCaches+0x88>)
 8001f32:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001f36:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001f38:	4b1a      	ldr	r3, [pc, #104]	; (8001fa4 <FLASH_FlushCaches+0x88>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a19      	ldr	r2, [pc, #100]	; (8001fa4 <FLASH_FlushCaches+0x88>)
 8001f3e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f42:	6013      	str	r3, [r2, #0]
 8001f44:	4b17      	ldr	r3, [pc, #92]	; (8001fa4 <FLASH_FlushCaches+0x88>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a16      	ldr	r2, [pc, #88]	; (8001fa4 <FLASH_FlushCaches+0x88>)
 8001f4a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001f4e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f50:	4b14      	ldr	r3, [pc, #80]	; (8001fa4 <FLASH_FlushCaches+0x88>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a13      	ldr	r2, [pc, #76]	; (8001fa4 <FLASH_FlushCaches+0x88>)
 8001f56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f5a:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8001f5c:	4b11      	ldr	r3, [pc, #68]	; (8001fa4 <FLASH_FlushCaches+0x88>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d017      	beq.n	8001f98 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8001f68:	4b0e      	ldr	r3, [pc, #56]	; (8001fa4 <FLASH_FlushCaches+0x88>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a0d      	ldr	r2, [pc, #52]	; (8001fa4 <FLASH_FlushCaches+0x88>)
 8001f6e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001f72:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001f74:	4b0b      	ldr	r3, [pc, #44]	; (8001fa4 <FLASH_FlushCaches+0x88>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a0a      	ldr	r2, [pc, #40]	; (8001fa4 <FLASH_FlushCaches+0x88>)
 8001f7a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f7e:	6013      	str	r3, [r2, #0]
 8001f80:	4b08      	ldr	r3, [pc, #32]	; (8001fa4 <FLASH_FlushCaches+0x88>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a07      	ldr	r2, [pc, #28]	; (8001fa4 <FLASH_FlushCaches+0x88>)
 8001f86:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f8a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f8c:	4b05      	ldr	r3, [pc, #20]	; (8001fa4 <FLASH_FlushCaches+0x88>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a04      	ldr	r2, [pc, #16]	; (8001fa4 <FLASH_FlushCaches+0x88>)
 8001f92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f96:	6013      	str	r3, [r2, #0]
  }
}
 8001f98:	bf00      	nop
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	40023c00 	.word	0x40023c00

08001fa8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b089      	sub	sp, #36	; 0x24
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	61fb      	str	r3, [r7, #28]
 8001fc2:	e16b      	b.n	800229c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fcc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	697a      	ldr	r2, [r7, #20]
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fd8:	693a      	ldr	r2, [r7, #16]
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	f040 815a 	bne.w	8002296 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d003      	beq.n	8001ff2 <HAL_GPIO_Init+0x4a>
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	2b12      	cmp	r3, #18
 8001ff0:	d123      	bne.n	800203a <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	08da      	lsrs	r2, r3, #3
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	3208      	adds	r2, #8
 8001ffa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	f003 0307 	and.w	r3, r3, #7
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	220f      	movs	r2, #15
 800200a:	fa02 f303 	lsl.w	r3, r2, r3
 800200e:	43db      	mvns	r3, r3
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	4013      	ands	r3, r2
 8002014:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	691a      	ldr	r2, [r3, #16]
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	f003 0307 	and.w	r3, r3, #7
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	fa02 f303 	lsl.w	r3, r2, r3
 8002026:	69ba      	ldr	r2, [r7, #24]
 8002028:	4313      	orrs	r3, r2
 800202a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	08da      	lsrs	r2, r3, #3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	3208      	adds	r2, #8
 8002034:	69b9      	ldr	r1, [r7, #24]
 8002036:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	005b      	lsls	r3, r3, #1
 8002044:	2203      	movs	r2, #3
 8002046:	fa02 f303 	lsl.w	r3, r2, r3
 800204a:	43db      	mvns	r3, r3
 800204c:	69ba      	ldr	r2, [r7, #24]
 800204e:	4013      	ands	r3, r2
 8002050:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	f003 0203 	and.w	r2, r3, #3
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	005b      	lsls	r3, r3, #1
 800205e:	fa02 f303 	lsl.w	r3, r2, r3
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	4313      	orrs	r3, r2
 8002066:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	69ba      	ldr	r2, [r7, #24]
 800206c:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	2b01      	cmp	r3, #1
 8002074:	d00b      	beq.n	800208e <HAL_GPIO_Init+0xe6>
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	2b02      	cmp	r3, #2
 800207c:	d007      	beq.n	800208e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002082:	2b11      	cmp	r3, #17
 8002084:	d003      	beq.n	800208e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	2b12      	cmp	r3, #18
 800208c:	d130      	bne.n	80020f0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	005b      	lsls	r3, r3, #1
 8002098:	2203      	movs	r2, #3
 800209a:	fa02 f303 	lsl.w	r3, r2, r3
 800209e:	43db      	mvns	r3, r3
 80020a0:	69ba      	ldr	r2, [r7, #24]
 80020a2:	4013      	ands	r3, r2
 80020a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	68da      	ldr	r2, [r3, #12]
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	005b      	lsls	r3, r3, #1
 80020ae:	fa02 f303 	lsl.w	r3, r2, r3
 80020b2:	69ba      	ldr	r2, [r7, #24]
 80020b4:	4313      	orrs	r3, r2
 80020b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	69ba      	ldr	r2, [r7, #24]
 80020bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020c4:	2201      	movs	r2, #1
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	fa02 f303 	lsl.w	r3, r2, r3
 80020cc:	43db      	mvns	r3, r3
 80020ce:	69ba      	ldr	r2, [r7, #24]
 80020d0:	4013      	ands	r3, r2
 80020d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	091b      	lsrs	r3, r3, #4
 80020da:	f003 0201 	and.w	r2, r3, #1
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	fa02 f303 	lsl.w	r3, r2, r3
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	005b      	lsls	r3, r3, #1
 80020fa:	2203      	movs	r2, #3
 80020fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002100:	43db      	mvns	r3, r3
 8002102:	69ba      	ldr	r2, [r7, #24]
 8002104:	4013      	ands	r3, r2
 8002106:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	689a      	ldr	r2, [r3, #8]
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	005b      	lsls	r3, r3, #1
 8002110:	fa02 f303 	lsl.w	r3, r2, r3
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	4313      	orrs	r3, r2
 8002118:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002128:	2b00      	cmp	r3, #0
 800212a:	f000 80b4 	beq.w	8002296 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800212e:	2300      	movs	r3, #0
 8002130:	60fb      	str	r3, [r7, #12]
 8002132:	4b5f      	ldr	r3, [pc, #380]	; (80022b0 <HAL_GPIO_Init+0x308>)
 8002134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002136:	4a5e      	ldr	r2, [pc, #376]	; (80022b0 <HAL_GPIO_Init+0x308>)
 8002138:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800213c:	6453      	str	r3, [r2, #68]	; 0x44
 800213e:	4b5c      	ldr	r3, [pc, #368]	; (80022b0 <HAL_GPIO_Init+0x308>)
 8002140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002142:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002146:	60fb      	str	r3, [r7, #12]
 8002148:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800214a:	4a5a      	ldr	r2, [pc, #360]	; (80022b4 <HAL_GPIO_Init+0x30c>)
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	089b      	lsrs	r3, r3, #2
 8002150:	3302      	adds	r3, #2
 8002152:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002156:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002158:	69fb      	ldr	r3, [r7, #28]
 800215a:	f003 0303 	and.w	r3, r3, #3
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	220f      	movs	r2, #15
 8002162:	fa02 f303 	lsl.w	r3, r2, r3
 8002166:	43db      	mvns	r3, r3
 8002168:	69ba      	ldr	r2, [r7, #24]
 800216a:	4013      	ands	r3, r2
 800216c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a51      	ldr	r2, [pc, #324]	; (80022b8 <HAL_GPIO_Init+0x310>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d02b      	beq.n	80021ce <HAL_GPIO_Init+0x226>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a50      	ldr	r2, [pc, #320]	; (80022bc <HAL_GPIO_Init+0x314>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d025      	beq.n	80021ca <HAL_GPIO_Init+0x222>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a4f      	ldr	r2, [pc, #316]	; (80022c0 <HAL_GPIO_Init+0x318>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d01f      	beq.n	80021c6 <HAL_GPIO_Init+0x21e>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a4e      	ldr	r2, [pc, #312]	; (80022c4 <HAL_GPIO_Init+0x31c>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d019      	beq.n	80021c2 <HAL_GPIO_Init+0x21a>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a4d      	ldr	r2, [pc, #308]	; (80022c8 <HAL_GPIO_Init+0x320>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d013      	beq.n	80021be <HAL_GPIO_Init+0x216>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a4c      	ldr	r2, [pc, #304]	; (80022cc <HAL_GPIO_Init+0x324>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d00d      	beq.n	80021ba <HAL_GPIO_Init+0x212>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a4b      	ldr	r2, [pc, #300]	; (80022d0 <HAL_GPIO_Init+0x328>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d007      	beq.n	80021b6 <HAL_GPIO_Init+0x20e>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a4a      	ldr	r2, [pc, #296]	; (80022d4 <HAL_GPIO_Init+0x32c>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d101      	bne.n	80021b2 <HAL_GPIO_Init+0x20a>
 80021ae:	2307      	movs	r3, #7
 80021b0:	e00e      	b.n	80021d0 <HAL_GPIO_Init+0x228>
 80021b2:	2308      	movs	r3, #8
 80021b4:	e00c      	b.n	80021d0 <HAL_GPIO_Init+0x228>
 80021b6:	2306      	movs	r3, #6
 80021b8:	e00a      	b.n	80021d0 <HAL_GPIO_Init+0x228>
 80021ba:	2305      	movs	r3, #5
 80021bc:	e008      	b.n	80021d0 <HAL_GPIO_Init+0x228>
 80021be:	2304      	movs	r3, #4
 80021c0:	e006      	b.n	80021d0 <HAL_GPIO_Init+0x228>
 80021c2:	2303      	movs	r3, #3
 80021c4:	e004      	b.n	80021d0 <HAL_GPIO_Init+0x228>
 80021c6:	2302      	movs	r3, #2
 80021c8:	e002      	b.n	80021d0 <HAL_GPIO_Init+0x228>
 80021ca:	2301      	movs	r3, #1
 80021cc:	e000      	b.n	80021d0 <HAL_GPIO_Init+0x228>
 80021ce:	2300      	movs	r3, #0
 80021d0:	69fa      	ldr	r2, [r7, #28]
 80021d2:	f002 0203 	and.w	r2, r2, #3
 80021d6:	0092      	lsls	r2, r2, #2
 80021d8:	4093      	lsls	r3, r2
 80021da:	69ba      	ldr	r2, [r7, #24]
 80021dc:	4313      	orrs	r3, r2
 80021de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021e0:	4934      	ldr	r1, [pc, #208]	; (80022b4 <HAL_GPIO_Init+0x30c>)
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	089b      	lsrs	r3, r3, #2
 80021e6:	3302      	adds	r3, #2
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021ee:	4b3a      	ldr	r3, [pc, #232]	; (80022d8 <HAL_GPIO_Init+0x330>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	43db      	mvns	r3, r3
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	4013      	ands	r3, r2
 80021fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d003      	beq.n	8002212 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800220a:	69ba      	ldr	r2, [r7, #24]
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	4313      	orrs	r3, r2
 8002210:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002212:	4a31      	ldr	r2, [pc, #196]	; (80022d8 <HAL_GPIO_Init+0x330>)
 8002214:	69bb      	ldr	r3, [r7, #24]
 8002216:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002218:	4b2f      	ldr	r3, [pc, #188]	; (80022d8 <HAL_GPIO_Init+0x330>)
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	43db      	mvns	r3, r3
 8002222:	69ba      	ldr	r2, [r7, #24]
 8002224:	4013      	ands	r3, r2
 8002226:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002230:	2b00      	cmp	r3, #0
 8002232:	d003      	beq.n	800223c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002234:	69ba      	ldr	r2, [r7, #24]
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	4313      	orrs	r3, r2
 800223a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800223c:	4a26      	ldr	r2, [pc, #152]	; (80022d8 <HAL_GPIO_Init+0x330>)
 800223e:	69bb      	ldr	r3, [r7, #24]
 8002240:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002242:	4b25      	ldr	r3, [pc, #148]	; (80022d8 <HAL_GPIO_Init+0x330>)
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	43db      	mvns	r3, r3
 800224c:	69ba      	ldr	r2, [r7, #24]
 800224e:	4013      	ands	r3, r2
 8002250:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d003      	beq.n	8002266 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800225e:	69ba      	ldr	r2, [r7, #24]
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	4313      	orrs	r3, r2
 8002264:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002266:	4a1c      	ldr	r2, [pc, #112]	; (80022d8 <HAL_GPIO_Init+0x330>)
 8002268:	69bb      	ldr	r3, [r7, #24]
 800226a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800226c:	4b1a      	ldr	r3, [pc, #104]	; (80022d8 <HAL_GPIO_Init+0x330>)
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	43db      	mvns	r3, r3
 8002276:	69ba      	ldr	r2, [r7, #24]
 8002278:	4013      	ands	r3, r2
 800227a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002284:	2b00      	cmp	r3, #0
 8002286:	d003      	beq.n	8002290 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002288:	69ba      	ldr	r2, [r7, #24]
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	4313      	orrs	r3, r2
 800228e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002290:	4a11      	ldr	r2, [pc, #68]	; (80022d8 <HAL_GPIO_Init+0x330>)
 8002292:	69bb      	ldr	r3, [r7, #24]
 8002294:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	3301      	adds	r3, #1
 800229a:	61fb      	str	r3, [r7, #28]
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	2b0f      	cmp	r3, #15
 80022a0:	f67f ae90 	bls.w	8001fc4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022a4:	bf00      	nop
 80022a6:	3724      	adds	r7, #36	; 0x24
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr
 80022b0:	40023800 	.word	0x40023800
 80022b4:	40013800 	.word	0x40013800
 80022b8:	40020000 	.word	0x40020000
 80022bc:	40020400 	.word	0x40020400
 80022c0:	40020800 	.word	0x40020800
 80022c4:	40020c00 	.word	0x40020c00
 80022c8:	40021000 	.word	0x40021000
 80022cc:	40021400 	.word	0x40021400
 80022d0:	40021800 	.word	0x40021800
 80022d4:	40021c00 	.word	0x40021c00
 80022d8:	40013c00 	.word	0x40013c00

080022dc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80022dc:	b480      	push	{r7}
 80022de:	b087      	sub	sp, #28
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022e6:	2300      	movs	r3, #0
 80022e8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80022ea:	2300      	movs	r3, #0
 80022ec:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80022ee:	2300      	movs	r3, #0
 80022f0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022f2:	2300      	movs	r3, #0
 80022f4:	617b      	str	r3, [r7, #20]
 80022f6:	e0cd      	b.n	8002494 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022f8:	2201      	movs	r2, #1
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002300:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002302:	683a      	ldr	r2, [r7, #0]
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	4013      	ands	r3, r2
 8002308:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800230a:	68fa      	ldr	r2, [r7, #12]
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	429a      	cmp	r2, r3
 8002310:	f040 80bd 	bne.w	800248e <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002314:	4a64      	ldr	r2, [pc, #400]	; (80024a8 <HAL_GPIO_DeInit+0x1cc>)
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	089b      	lsrs	r3, r3, #2
 800231a:	3302      	adds	r3, #2
 800231c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002320:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	f003 0303 	and.w	r3, r3, #3
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	220f      	movs	r2, #15
 800232c:	fa02 f303 	lsl.w	r3, r2, r3
 8002330:	68ba      	ldr	r2, [r7, #8]
 8002332:	4013      	ands	r3, r2
 8002334:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a5c      	ldr	r2, [pc, #368]	; (80024ac <HAL_GPIO_DeInit+0x1d0>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d02b      	beq.n	8002396 <HAL_GPIO_DeInit+0xba>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a5b      	ldr	r2, [pc, #364]	; (80024b0 <HAL_GPIO_DeInit+0x1d4>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d025      	beq.n	8002392 <HAL_GPIO_DeInit+0xb6>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4a5a      	ldr	r2, [pc, #360]	; (80024b4 <HAL_GPIO_DeInit+0x1d8>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d01f      	beq.n	800238e <HAL_GPIO_DeInit+0xb2>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4a59      	ldr	r2, [pc, #356]	; (80024b8 <HAL_GPIO_DeInit+0x1dc>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d019      	beq.n	800238a <HAL_GPIO_DeInit+0xae>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a58      	ldr	r2, [pc, #352]	; (80024bc <HAL_GPIO_DeInit+0x1e0>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d013      	beq.n	8002386 <HAL_GPIO_DeInit+0xaa>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4a57      	ldr	r2, [pc, #348]	; (80024c0 <HAL_GPIO_DeInit+0x1e4>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d00d      	beq.n	8002382 <HAL_GPIO_DeInit+0xa6>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4a56      	ldr	r2, [pc, #344]	; (80024c4 <HAL_GPIO_DeInit+0x1e8>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d007      	beq.n	800237e <HAL_GPIO_DeInit+0xa2>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a55      	ldr	r2, [pc, #340]	; (80024c8 <HAL_GPIO_DeInit+0x1ec>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d101      	bne.n	800237a <HAL_GPIO_DeInit+0x9e>
 8002376:	2307      	movs	r3, #7
 8002378:	e00e      	b.n	8002398 <HAL_GPIO_DeInit+0xbc>
 800237a:	2308      	movs	r3, #8
 800237c:	e00c      	b.n	8002398 <HAL_GPIO_DeInit+0xbc>
 800237e:	2306      	movs	r3, #6
 8002380:	e00a      	b.n	8002398 <HAL_GPIO_DeInit+0xbc>
 8002382:	2305      	movs	r3, #5
 8002384:	e008      	b.n	8002398 <HAL_GPIO_DeInit+0xbc>
 8002386:	2304      	movs	r3, #4
 8002388:	e006      	b.n	8002398 <HAL_GPIO_DeInit+0xbc>
 800238a:	2303      	movs	r3, #3
 800238c:	e004      	b.n	8002398 <HAL_GPIO_DeInit+0xbc>
 800238e:	2302      	movs	r3, #2
 8002390:	e002      	b.n	8002398 <HAL_GPIO_DeInit+0xbc>
 8002392:	2301      	movs	r3, #1
 8002394:	e000      	b.n	8002398 <HAL_GPIO_DeInit+0xbc>
 8002396:	2300      	movs	r3, #0
 8002398:	697a      	ldr	r2, [r7, #20]
 800239a:	f002 0203 	and.w	r2, r2, #3
 800239e:	0092      	lsls	r2, r2, #2
 80023a0:	4093      	lsls	r3, r2
 80023a2:	68ba      	ldr	r2, [r7, #8]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d132      	bne.n	800240e <HAL_GPIO_DeInit+0x132>
      {
        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	f003 0303 	and.w	r3, r3, #3
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	220f      	movs	r2, #15
 80023b2:	fa02 f303 	lsl.w	r3, r2, r3
 80023b6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80023b8:	4a3b      	ldr	r2, [pc, #236]	; (80024a8 <HAL_GPIO_DeInit+0x1cc>)
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	089b      	lsrs	r3, r3, #2
 80023be:	3302      	adds	r3, #2
 80023c0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	43da      	mvns	r2, r3
 80023c8:	4837      	ldr	r0, [pc, #220]	; (80024a8 <HAL_GPIO_DeInit+0x1cc>)
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	089b      	lsrs	r3, r3, #2
 80023ce:	400a      	ands	r2, r1
 80023d0:	3302      	adds	r3, #2
 80023d2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80023d6:	4b3d      	ldr	r3, [pc, #244]	; (80024cc <HAL_GPIO_DeInit+0x1f0>)
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	43db      	mvns	r3, r3
 80023de:	493b      	ldr	r1, [pc, #236]	; (80024cc <HAL_GPIO_DeInit+0x1f0>)
 80023e0:	4013      	ands	r3, r2
 80023e2:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80023e4:	4b39      	ldr	r3, [pc, #228]	; (80024cc <HAL_GPIO_DeInit+0x1f0>)
 80023e6:	685a      	ldr	r2, [r3, #4]
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	43db      	mvns	r3, r3
 80023ec:	4937      	ldr	r1, [pc, #220]	; (80024cc <HAL_GPIO_DeInit+0x1f0>)
 80023ee:	4013      	ands	r3, r2
 80023f0:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80023f2:	4b36      	ldr	r3, [pc, #216]	; (80024cc <HAL_GPIO_DeInit+0x1f0>)
 80023f4:	689a      	ldr	r2, [r3, #8]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	43db      	mvns	r3, r3
 80023fa:	4934      	ldr	r1, [pc, #208]	; (80024cc <HAL_GPIO_DeInit+0x1f0>)
 80023fc:	4013      	ands	r3, r2
 80023fe:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002400:	4b32      	ldr	r3, [pc, #200]	; (80024cc <HAL_GPIO_DeInit+0x1f0>)
 8002402:	68da      	ldr	r2, [r3, #12]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	43db      	mvns	r3, r3
 8002408:	4930      	ldr	r1, [pc, #192]	; (80024cc <HAL_GPIO_DeInit+0x1f0>)
 800240a:	4013      	ands	r3, r2
 800240c:	60cb      	str	r3, [r1, #12]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	005b      	lsls	r3, r3, #1
 8002416:	2103      	movs	r1, #3
 8002418:	fa01 f303 	lsl.w	r3, r1, r3
 800241c:	43db      	mvns	r3, r3
 800241e:	401a      	ands	r2, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	08da      	lsrs	r2, r3, #3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	3208      	adds	r2, #8
 800242c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	f003 0307 	and.w	r3, r3, #7
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	220f      	movs	r2, #15
 800243a:	fa02 f303 	lsl.w	r3, r2, r3
 800243e:	43db      	mvns	r3, r3
 8002440:	697a      	ldr	r2, [r7, #20]
 8002442:	08d2      	lsrs	r2, r2, #3
 8002444:	4019      	ands	r1, r3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	3208      	adds	r2, #8
 800244a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	689a      	ldr	r2, [r3, #8]
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	005b      	lsls	r3, r3, #1
 8002456:	2103      	movs	r1, #3
 8002458:	fa01 f303 	lsl.w	r3, r1, r3
 800245c:	43db      	mvns	r3, r3
 800245e:	401a      	ands	r2, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685a      	ldr	r2, [r3, #4]
 8002468:	2101      	movs	r1, #1
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	fa01 f303 	lsl.w	r3, r1, r3
 8002470:	43db      	mvns	r3, r3
 8002472:	401a      	ands	r2, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	68da      	ldr	r2, [r3, #12]
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	005b      	lsls	r3, r3, #1
 8002480:	2103      	movs	r1, #3
 8002482:	fa01 f303 	lsl.w	r3, r1, r3
 8002486:	43db      	mvns	r3, r3
 8002488:	401a      	ands	r2, r3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	60da      	str	r2, [r3, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	3301      	adds	r3, #1
 8002492:	617b      	str	r3, [r7, #20]
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	2b0f      	cmp	r3, #15
 8002498:	f67f af2e 	bls.w	80022f8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800249c:	bf00      	nop
 800249e:	371c      	adds	r7, #28
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr
 80024a8:	40013800 	.word	0x40013800
 80024ac:	40020000 	.word	0x40020000
 80024b0:	40020400 	.word	0x40020400
 80024b4:	40020800 	.word	0x40020800
 80024b8:	40020c00 	.word	0x40020c00
 80024bc:	40021000 	.word	0x40021000
 80024c0:	40021400 	.word	0x40021400
 80024c4:	40021800 	.word	0x40021800
 80024c8:	40021c00 	.word	0x40021c00
 80024cc:	40013c00 	.word	0x40013c00

080024d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b085      	sub	sp, #20
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	460b      	mov	r3, r1
 80024da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	691a      	ldr	r2, [r3, #16]
 80024e0:	887b      	ldrh	r3, [r7, #2]
 80024e2:	4013      	ands	r3, r2
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d002      	beq.n	80024ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80024e8:	2301      	movs	r3, #1
 80024ea:	73fb      	strb	r3, [r7, #15]
 80024ec:	e001      	b.n	80024f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80024ee:	2300      	movs	r3, #0
 80024f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80024f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3714      	adds	r7, #20
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr

08002500 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	460b      	mov	r3, r1
 800250a:	807b      	strh	r3, [r7, #2]
 800250c:	4613      	mov	r3, r2
 800250e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002510:	787b      	ldrb	r3, [r7, #1]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d003      	beq.n	800251e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002516:	887a      	ldrh	r2, [r7, #2]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800251c:	e003      	b.n	8002526 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800251e:	887b      	ldrh	r3, [r7, #2]
 8002520:	041a      	lsls	r2, r3, #16
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	619a      	str	r2, [r3, #24]
}
 8002526:	bf00      	nop
 8002528:	370c      	adds	r7, #12
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr

08002532 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002532:	b480      	push	{r7}
 8002534:	b083      	sub	sp, #12
 8002536:	af00      	add	r7, sp, #0
 8002538:	6078      	str	r0, [r7, #4]
 800253a:	460b      	mov	r3, r1
 800253c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	695a      	ldr	r2, [r3, #20]
 8002542:	887b      	ldrh	r3, [r7, #2]
 8002544:	401a      	ands	r2, r3
 8002546:	887b      	ldrh	r3, [r7, #2]
 8002548:	429a      	cmp	r2, r3
 800254a:	d104      	bne.n	8002556 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800254c:	887b      	ldrh	r3, [r7, #2]
 800254e:	041a      	lsls	r2, r3, #16
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002554:	e002      	b.n	800255c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002556:	887a      	ldrh	r2, [r7, #2]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	619a      	str	r2, [r3, #24]
}
 800255c:	bf00      	nop
 800255e:	370c      	adds	r7, #12
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
 800256e:	4603      	mov	r3, r0
 8002570:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002572:	4b08      	ldr	r3, [pc, #32]	; (8002594 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002574:	695a      	ldr	r2, [r3, #20]
 8002576:	88fb      	ldrh	r3, [r7, #6]
 8002578:	4013      	ands	r3, r2
 800257a:	2b00      	cmp	r3, #0
 800257c:	d006      	beq.n	800258c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800257e:	4a05      	ldr	r2, [pc, #20]	; (8002594 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002580:	88fb      	ldrh	r3, [r7, #6]
 8002582:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002584:	88fb      	ldrh	r3, [r7, #6]
 8002586:	4618      	mov	r0, r3
 8002588:	f00c fd2e 	bl	800efe8 <HAL_GPIO_EXTI_Callback>
  }
}
 800258c:	bf00      	nop
 800258e:	3708      	adds	r7, #8
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	40013c00 	.word	0x40013c00

08002598 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b084      	sub	sp, #16
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d101      	bne.n	80025aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e10f      	b.n	80027ca <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d106      	bne.n	80025c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f00f fa76 	bl	8011ab0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2224      	movs	r2, #36	; 0x24
 80025c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f022 0201 	bic.w	r2, r2, #1
 80025da:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80025dc:	f002 fec0 	bl	8005360 <HAL_RCC_GetPCLK1Freq>
 80025e0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	4a7b      	ldr	r2, [pc, #492]	; (80027d4 <HAL_I2C_Init+0x23c>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d807      	bhi.n	80025fc <HAL_I2C_Init+0x64>
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	4a7a      	ldr	r2, [pc, #488]	; (80027d8 <HAL_I2C_Init+0x240>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	bf94      	ite	ls
 80025f4:	2301      	movls	r3, #1
 80025f6:	2300      	movhi	r3, #0
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	e006      	b.n	800260a <HAL_I2C_Init+0x72>
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	4a77      	ldr	r2, [pc, #476]	; (80027dc <HAL_I2C_Init+0x244>)
 8002600:	4293      	cmp	r3, r2
 8002602:	bf94      	ite	ls
 8002604:	2301      	movls	r3, #1
 8002606:	2300      	movhi	r3, #0
 8002608:	b2db      	uxtb	r3, r3
 800260a:	2b00      	cmp	r3, #0
 800260c:	d001      	beq.n	8002612 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e0db      	b.n	80027ca <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	4a72      	ldr	r2, [pc, #456]	; (80027e0 <HAL_I2C_Init+0x248>)
 8002616:	fba2 2303 	umull	r2, r3, r2, r3
 800261a:	0c9b      	lsrs	r3, r3, #18
 800261c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	68ba      	ldr	r2, [r7, #8]
 800262e:	430a      	orrs	r2, r1
 8002630:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	6a1b      	ldr	r3, [r3, #32]
 8002638:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	4a64      	ldr	r2, [pc, #400]	; (80027d4 <HAL_I2C_Init+0x23c>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d802      	bhi.n	800264c <HAL_I2C_Init+0xb4>
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	3301      	adds	r3, #1
 800264a:	e009      	b.n	8002660 <HAL_I2C_Init+0xc8>
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002652:	fb02 f303 	mul.w	r3, r2, r3
 8002656:	4a63      	ldr	r2, [pc, #396]	; (80027e4 <HAL_I2C_Init+0x24c>)
 8002658:	fba2 2303 	umull	r2, r3, r2, r3
 800265c:	099b      	lsrs	r3, r3, #6
 800265e:	3301      	adds	r3, #1
 8002660:	687a      	ldr	r2, [r7, #4]
 8002662:	6812      	ldr	r2, [r2, #0]
 8002664:	430b      	orrs	r3, r1
 8002666:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	69db      	ldr	r3, [r3, #28]
 800266e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002672:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	4956      	ldr	r1, [pc, #344]	; (80027d4 <HAL_I2C_Init+0x23c>)
 800267c:	428b      	cmp	r3, r1
 800267e:	d80d      	bhi.n	800269c <HAL_I2C_Init+0x104>
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	1e59      	subs	r1, r3, #1
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	005b      	lsls	r3, r3, #1
 800268a:	fbb1 f3f3 	udiv	r3, r1, r3
 800268e:	3301      	adds	r3, #1
 8002690:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002694:	2b04      	cmp	r3, #4
 8002696:	bf38      	it	cc
 8002698:	2304      	movcc	r3, #4
 800269a:	e04f      	b.n	800273c <HAL_I2C_Init+0x1a4>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d111      	bne.n	80026c8 <HAL_I2C_Init+0x130>
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	1e58      	subs	r0, r3, #1
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6859      	ldr	r1, [r3, #4]
 80026ac:	460b      	mov	r3, r1
 80026ae:	005b      	lsls	r3, r3, #1
 80026b0:	440b      	add	r3, r1
 80026b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80026b6:	3301      	adds	r3, #1
 80026b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026bc:	2b00      	cmp	r3, #0
 80026be:	bf0c      	ite	eq
 80026c0:	2301      	moveq	r3, #1
 80026c2:	2300      	movne	r3, #0
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	e012      	b.n	80026ee <HAL_I2C_Init+0x156>
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	1e58      	subs	r0, r3, #1
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6859      	ldr	r1, [r3, #4]
 80026d0:	460b      	mov	r3, r1
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	440b      	add	r3, r1
 80026d6:	0099      	lsls	r1, r3, #2
 80026d8:	440b      	add	r3, r1
 80026da:	fbb0 f3f3 	udiv	r3, r0, r3
 80026de:	3301      	adds	r3, #1
 80026e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	bf0c      	ite	eq
 80026e8:	2301      	moveq	r3, #1
 80026ea:	2300      	movne	r3, #0
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d001      	beq.n	80026f6 <HAL_I2C_Init+0x15e>
 80026f2:	2301      	movs	r3, #1
 80026f4:	e022      	b.n	800273c <HAL_I2C_Init+0x1a4>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d10e      	bne.n	800271c <HAL_I2C_Init+0x184>
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	1e58      	subs	r0, r3, #1
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6859      	ldr	r1, [r3, #4]
 8002706:	460b      	mov	r3, r1
 8002708:	005b      	lsls	r3, r3, #1
 800270a:	440b      	add	r3, r1
 800270c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002710:	3301      	adds	r3, #1
 8002712:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002716:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800271a:	e00f      	b.n	800273c <HAL_I2C_Init+0x1a4>
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	1e58      	subs	r0, r3, #1
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6859      	ldr	r1, [r3, #4]
 8002724:	460b      	mov	r3, r1
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	440b      	add	r3, r1
 800272a:	0099      	lsls	r1, r3, #2
 800272c:	440b      	add	r3, r1
 800272e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002732:	3301      	adds	r3, #1
 8002734:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002738:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800273c:	6879      	ldr	r1, [r7, #4]
 800273e:	6809      	ldr	r1, [r1, #0]
 8002740:	4313      	orrs	r3, r2
 8002742:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	69da      	ldr	r2, [r3, #28]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6a1b      	ldr	r3, [r3, #32]
 8002756:	431a      	orrs	r2, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	430a      	orrs	r2, r1
 800275e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800276a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	6911      	ldr	r1, [r2, #16]
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	68d2      	ldr	r2, [r2, #12]
 8002776:	4311      	orrs	r1, r2
 8002778:	687a      	ldr	r2, [r7, #4]
 800277a:	6812      	ldr	r2, [r2, #0]
 800277c:	430b      	orrs	r3, r1
 800277e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	695a      	ldr	r2, [r3, #20]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	699b      	ldr	r3, [r3, #24]
 8002792:	431a      	orrs	r2, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	430a      	orrs	r2, r1
 800279a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f042 0201 	orr.w	r2, r2, #1
 80027aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2200      	movs	r2, #0
 80027b0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2220      	movs	r2, #32
 80027b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2200      	movs	r2, #0
 80027be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80027c8:	2300      	movs	r3, #0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3710      	adds	r7, #16
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	000186a0 	.word	0x000186a0
 80027d8:	001e847f 	.word	0x001e847f
 80027dc:	003d08ff 	.word	0x003d08ff
 80027e0:	431bde83 	.word	0x431bde83
 80027e4:	10624dd3 	.word	0x10624dd3

080027e8 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d101      	bne.n	80027fa <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e021      	b.n	800283e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2224      	movs	r2, #36	; 0x24
 80027fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f022 0201 	bic.w	r2, r2, #1
 8002810:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f00f f9ec 	bl	8011bf0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2200      	movs	r2, #0
 800281c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2200      	movs	r2, #0
 8002822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2200      	movs	r2, #0
 800282a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800283c:	2300      	movs	r3, #0
}
 800283e:	4618      	mov	r0, r3
 8002840:	3708      	adds	r7, #8
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
	...

08002848 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b088      	sub	sp, #32
 800284c:	af02      	add	r7, sp, #8
 800284e:	60f8      	str	r0, [r7, #12]
 8002850:	607a      	str	r2, [r7, #4]
 8002852:	461a      	mov	r2, r3
 8002854:	460b      	mov	r3, r1
 8002856:	817b      	strh	r3, [r7, #10]
 8002858:	4613      	mov	r3, r2
 800285a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800285c:	f7fe fbda 	bl	8001014 <HAL_GetTick>
 8002860:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002868:	b2db      	uxtb	r3, r3
 800286a:	2b20      	cmp	r3, #32
 800286c:	f040 80e0 	bne.w	8002a30 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	9300      	str	r3, [sp, #0]
 8002874:	2319      	movs	r3, #25
 8002876:	2201      	movs	r2, #1
 8002878:	4970      	ldr	r1, [pc, #448]	; (8002a3c <HAL_I2C_Master_Transmit+0x1f4>)
 800287a:	68f8      	ldr	r0, [r7, #12]
 800287c:	f001 f9de 	bl	8003c3c <I2C_WaitOnFlagUntilTimeout>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d001      	beq.n	800288a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002886:	2302      	movs	r3, #2
 8002888:	e0d3      	b.n	8002a32 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002890:	2b01      	cmp	r3, #1
 8002892:	d101      	bne.n	8002898 <HAL_I2C_Master_Transmit+0x50>
 8002894:	2302      	movs	r3, #2
 8002896:	e0cc      	b.n	8002a32 <HAL_I2C_Master_Transmit+0x1ea>
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0301 	and.w	r3, r3, #1
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d007      	beq.n	80028be <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f042 0201 	orr.w	r2, r2, #1
 80028bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028cc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2221      	movs	r2, #33	; 0x21
 80028d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2210      	movs	r2, #16
 80028da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2200      	movs	r2, #0
 80028e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	893a      	ldrh	r2, [r7, #8]
 80028ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028f4:	b29a      	uxth	r2, r3
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	4a50      	ldr	r2, [pc, #320]	; (8002a40 <HAL_I2C_Master_Transmit+0x1f8>)
 80028fe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002900:	8979      	ldrh	r1, [r7, #10]
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	6a3a      	ldr	r2, [r7, #32]
 8002906:	68f8      	ldr	r0, [r7, #12]
 8002908:	f000 ff12 	bl	8003730 <I2C_MasterRequestWrite>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d001      	beq.n	8002916 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e08d      	b.n	8002a32 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002916:	2300      	movs	r3, #0
 8002918:	613b      	str	r3, [r7, #16]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	695b      	ldr	r3, [r3, #20]
 8002920:	613b      	str	r3, [r7, #16]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	699b      	ldr	r3, [r3, #24]
 8002928:	613b      	str	r3, [r7, #16]
 800292a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800292c:	e066      	b.n	80029fc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800292e:	697a      	ldr	r2, [r7, #20]
 8002930:	6a39      	ldr	r1, [r7, #32]
 8002932:	68f8      	ldr	r0, [r7, #12]
 8002934:	f001 fa58 	bl	8003de8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d00d      	beq.n	800295a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002942:	2b04      	cmp	r3, #4
 8002944:	d107      	bne.n	8002956 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002954:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e06b      	b.n	8002a32 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295e:	781a      	ldrb	r2, [r3, #0]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296a:	1c5a      	adds	r2, r3, #1
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002974:	b29b      	uxth	r3, r3
 8002976:	3b01      	subs	r3, #1
 8002978:	b29a      	uxth	r2, r3
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002982:	3b01      	subs	r3, #1
 8002984:	b29a      	uxth	r2, r3
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	695b      	ldr	r3, [r3, #20]
 8002990:	f003 0304 	and.w	r3, r3, #4
 8002994:	2b04      	cmp	r3, #4
 8002996:	d11b      	bne.n	80029d0 <HAL_I2C_Master_Transmit+0x188>
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800299c:	2b00      	cmp	r3, #0
 800299e:	d017      	beq.n	80029d0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a4:	781a      	ldrb	r2, [r3, #0]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b0:	1c5a      	adds	r2, r3, #1
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029ba:	b29b      	uxth	r3, r3
 80029bc:	3b01      	subs	r3, #1
 80029be:	b29a      	uxth	r2, r3
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029c8:	3b01      	subs	r3, #1
 80029ca:	b29a      	uxth	r2, r3
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029d0:	697a      	ldr	r2, [r7, #20]
 80029d2:	6a39      	ldr	r1, [r7, #32]
 80029d4:	68f8      	ldr	r0, [r7, #12]
 80029d6:	f001 fa48 	bl	8003e6a <I2C_WaitOnBTFFlagUntilTimeout>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d00d      	beq.n	80029fc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e4:	2b04      	cmp	r3, #4
 80029e6:	d107      	bne.n	80029f8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029f6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e01a      	b.n	8002a32 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d194      	bne.n	800292e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2220      	movs	r2, #32
 8002a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2200      	movs	r2, #0
 8002a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	e000      	b.n	8002a32 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002a30:	2302      	movs	r3, #2
  }
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3718      	adds	r7, #24
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	00100002 	.word	0x00100002
 8002a40:	ffff0000 	.word	0xffff0000

08002a44 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b08c      	sub	sp, #48	; 0x30
 8002a48:	af02      	add	r7, sp, #8
 8002a4a:	60f8      	str	r0, [r7, #12]
 8002a4c:	607a      	str	r2, [r7, #4]
 8002a4e:	461a      	mov	r2, r3
 8002a50:	460b      	mov	r3, r1
 8002a52:	817b      	strh	r3, [r7, #10]
 8002a54:	4613      	mov	r3, r2
 8002a56:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a58:	f7fe fadc 	bl	8001014 <HAL_GetTick>
 8002a5c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	2b20      	cmp	r3, #32
 8002a68:	f040 820b 	bne.w	8002e82 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6e:	9300      	str	r3, [sp, #0]
 8002a70:	2319      	movs	r3, #25
 8002a72:	2201      	movs	r2, #1
 8002a74:	497c      	ldr	r1, [pc, #496]	; (8002c68 <HAL_I2C_Master_Receive+0x224>)
 8002a76:	68f8      	ldr	r0, [r7, #12]
 8002a78:	f001 f8e0 	bl	8003c3c <I2C_WaitOnFlagUntilTimeout>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d001      	beq.n	8002a86 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002a82:	2302      	movs	r3, #2
 8002a84:	e1fe      	b.n	8002e84 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d101      	bne.n	8002a94 <HAL_I2C_Master_Receive+0x50>
 8002a90:	2302      	movs	r3, #2
 8002a92:	e1f7      	b.n	8002e84 <HAL_I2C_Master_Receive+0x440>
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2201      	movs	r2, #1
 8002a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 0301 	and.w	r3, r3, #1
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d007      	beq.n	8002aba <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f042 0201 	orr.w	r2, r2, #1
 8002ab8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ac8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2222      	movs	r2, #34	; 0x22
 8002ace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2210      	movs	r2, #16
 8002ad6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2200      	movs	r2, #0
 8002ade:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	893a      	ldrh	r2, [r7, #8]
 8002aea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002af0:	b29a      	uxth	r2, r3
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	4a5c      	ldr	r2, [pc, #368]	; (8002c6c <HAL_I2C_Master_Receive+0x228>)
 8002afa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002afc:	8979      	ldrh	r1, [r7, #10]
 8002afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b02:	68f8      	ldr	r0, [r7, #12]
 8002b04:	f000 fe8a 	bl	800381c <I2C_MasterRequestRead>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d001      	beq.n	8002b12 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e1b8      	b.n	8002e84 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d113      	bne.n	8002b42 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	623b      	str	r3, [r7, #32]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	695b      	ldr	r3, [r3, #20]
 8002b24:	623b      	str	r3, [r7, #32]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	699b      	ldr	r3, [r3, #24]
 8002b2c:	623b      	str	r3, [r7, #32]
 8002b2e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b3e:	601a      	str	r2, [r3, #0]
 8002b40:	e18c      	b.n	8002e5c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d11b      	bne.n	8002b82 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b58:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	61fb      	str	r3, [r7, #28]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	695b      	ldr	r3, [r3, #20]
 8002b64:	61fb      	str	r3, [r7, #28]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	699b      	ldr	r3, [r3, #24]
 8002b6c:	61fb      	str	r3, [r7, #28]
 8002b6e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b7e:	601a      	str	r2, [r3, #0]
 8002b80:	e16c      	b.n	8002e5c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d11b      	bne.n	8002bc2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b98:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ba8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002baa:	2300      	movs	r3, #0
 8002bac:	61bb      	str	r3, [r7, #24]
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	695b      	ldr	r3, [r3, #20]
 8002bb4:	61bb      	str	r3, [r7, #24]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	699b      	ldr	r3, [r3, #24]
 8002bbc:	61bb      	str	r3, [r7, #24]
 8002bbe:	69bb      	ldr	r3, [r7, #24]
 8002bc0:	e14c      	b.n	8002e5c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002bd0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	617b      	str	r3, [r7, #20]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	695b      	ldr	r3, [r3, #20]
 8002bdc:	617b      	str	r3, [r7, #20]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	699b      	ldr	r3, [r3, #24]
 8002be4:	617b      	str	r3, [r7, #20]
 8002be6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002be8:	e138      	b.n	8002e5c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bee:	2b03      	cmp	r3, #3
 8002bf0:	f200 80f1 	bhi.w	8002dd6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d123      	bne.n	8002c44 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bfe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002c00:	68f8      	ldr	r0, [r7, #12]
 8002c02:	f001 f973 	bl	8003eec <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c06:	4603      	mov	r3, r0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d001      	beq.n	8002c10 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e139      	b.n	8002e84 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	691a      	ldr	r2, [r3, #16]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1a:	b2d2      	uxtb	r2, r2
 8002c1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c22:	1c5a      	adds	r2, r3, #1
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c2c:	3b01      	subs	r3, #1
 8002c2e:	b29a      	uxth	r2, r3
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c38:	b29b      	uxth	r3, r3
 8002c3a:	3b01      	subs	r3, #1
 8002c3c:	b29a      	uxth	r2, r3
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c42:	e10b      	b.n	8002e5c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	d14e      	bne.n	8002cea <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4e:	9300      	str	r3, [sp, #0]
 8002c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c52:	2200      	movs	r2, #0
 8002c54:	4906      	ldr	r1, [pc, #24]	; (8002c70 <HAL_I2C_Master_Receive+0x22c>)
 8002c56:	68f8      	ldr	r0, [r7, #12]
 8002c58:	f000 fff0 	bl	8003c3c <I2C_WaitOnFlagUntilTimeout>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d008      	beq.n	8002c74 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e10e      	b.n	8002e84 <HAL_I2C_Master_Receive+0x440>
 8002c66:	bf00      	nop
 8002c68:	00100002 	.word	0x00100002
 8002c6c:	ffff0000 	.word	0xffff0000
 8002c70:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c82:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	691a      	ldr	r2, [r3, #16]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8e:	b2d2      	uxtb	r2, r2
 8002c90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c96:	1c5a      	adds	r2, r3, #1
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ca0:	3b01      	subs	r3, #1
 8002ca2:	b29a      	uxth	r2, r3
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cac:	b29b      	uxth	r3, r3
 8002cae:	3b01      	subs	r3, #1
 8002cb0:	b29a      	uxth	r2, r3
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	691a      	ldr	r2, [r3, #16]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc0:	b2d2      	uxtb	r2, r2
 8002cc2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc8:	1c5a      	adds	r2, r3, #1
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cd2:	3b01      	subs	r3, #1
 8002cd4:	b29a      	uxth	r2, r3
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	3b01      	subs	r3, #1
 8002ce2:	b29a      	uxth	r2, r3
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002ce8:	e0b8      	b.n	8002e5c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cec:	9300      	str	r3, [sp, #0]
 8002cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	4966      	ldr	r1, [pc, #408]	; (8002e8c <HAL_I2C_Master_Receive+0x448>)
 8002cf4:	68f8      	ldr	r0, [r7, #12]
 8002cf6:	f000 ffa1 	bl	8003c3c <I2C_WaitOnFlagUntilTimeout>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d001      	beq.n	8002d04 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e0bf      	b.n	8002e84 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d12:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	691a      	ldr	r2, [r3, #16]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1e:	b2d2      	uxtb	r2, r2
 8002d20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d26:	1c5a      	adds	r2, r3, #1
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d30:	3b01      	subs	r3, #1
 8002d32:	b29a      	uxth	r2, r3
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	3b01      	subs	r3, #1
 8002d40:	b29a      	uxth	r2, r3
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d48:	9300      	str	r3, [sp, #0]
 8002d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	494f      	ldr	r1, [pc, #316]	; (8002e8c <HAL_I2C_Master_Receive+0x448>)
 8002d50:	68f8      	ldr	r0, [r7, #12]
 8002d52:	f000 ff73 	bl	8003c3c <I2C_WaitOnFlagUntilTimeout>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d001      	beq.n	8002d60 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e091      	b.n	8002e84 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d6e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	691a      	ldr	r2, [r3, #16]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7a:	b2d2      	uxtb	r2, r2
 8002d7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d82:	1c5a      	adds	r2, r3, #1
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d8c:	3b01      	subs	r3, #1
 8002d8e:	b29a      	uxth	r2, r3
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	3b01      	subs	r3, #1
 8002d9c:	b29a      	uxth	r2, r3
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	691a      	ldr	r2, [r3, #16]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dac:	b2d2      	uxtb	r2, r2
 8002dae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db4:	1c5a      	adds	r2, r3, #1
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dbe:	3b01      	subs	r3, #1
 8002dc0:	b29a      	uxth	r2, r3
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dca:	b29b      	uxth	r3, r3
 8002dcc:	3b01      	subs	r3, #1
 8002dce:	b29a      	uxth	r2, r3
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002dd4:	e042      	b.n	8002e5c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dd8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002dda:	68f8      	ldr	r0, [r7, #12]
 8002ddc:	f001 f886 	bl	8003eec <I2C_WaitOnRXNEFlagUntilTimeout>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d001      	beq.n	8002dea <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e04c      	b.n	8002e84 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	691a      	ldr	r2, [r3, #16]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df4:	b2d2      	uxtb	r2, r2
 8002df6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dfc:	1c5a      	adds	r2, r3, #1
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e06:	3b01      	subs	r3, #1
 8002e08:	b29a      	uxth	r2, r3
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	3b01      	subs	r3, #1
 8002e16:	b29a      	uxth	r2, r3
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	695b      	ldr	r3, [r3, #20]
 8002e22:	f003 0304 	and.w	r3, r3, #4
 8002e26:	2b04      	cmp	r3, #4
 8002e28:	d118      	bne.n	8002e5c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	691a      	ldr	r2, [r3, #16]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e34:	b2d2      	uxtb	r2, r2
 8002e36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3c:	1c5a      	adds	r2, r3, #1
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e46:	3b01      	subs	r3, #1
 8002e48:	b29a      	uxth	r2, r3
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	3b01      	subs	r3, #1
 8002e56:	b29a      	uxth	r2, r3
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	f47f aec2 	bne.w	8002bea <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2220      	movs	r2, #32
 8002e6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2200      	movs	r2, #0
 8002e72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	e000      	b.n	8002e84 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002e82:	2302      	movs	r3, #2
  }
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3728      	adds	r7, #40	; 0x28
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	00010004 	.word	0x00010004

08002e90 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b088      	sub	sp, #32
 8002e94:	af02      	add	r7, sp, #8
 8002e96:	60f8      	str	r0, [r7, #12]
 8002e98:	4608      	mov	r0, r1
 8002e9a:	4611      	mov	r1, r2
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	817b      	strh	r3, [r7, #10]
 8002ea2:	460b      	mov	r3, r1
 8002ea4:	813b      	strh	r3, [r7, #8]
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002eaa:	f7fe f8b3 	bl	8001014 <HAL_GetTick>
 8002eae:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	2b20      	cmp	r3, #32
 8002eba:	f040 80d9 	bne.w	8003070 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	9300      	str	r3, [sp, #0]
 8002ec2:	2319      	movs	r3, #25
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	496d      	ldr	r1, [pc, #436]	; (800307c <HAL_I2C_Mem_Write+0x1ec>)
 8002ec8:	68f8      	ldr	r0, [r7, #12]
 8002eca:	f000 feb7 	bl	8003c3c <I2C_WaitOnFlagUntilTimeout>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d001      	beq.n	8002ed8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002ed4:	2302      	movs	r3, #2
 8002ed6:	e0cc      	b.n	8003072 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d101      	bne.n	8002ee6 <HAL_I2C_Mem_Write+0x56>
 8002ee2:	2302      	movs	r3, #2
 8002ee4:	e0c5      	b.n	8003072 <HAL_I2C_Mem_Write+0x1e2>
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2201      	movs	r2, #1
 8002eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0301 	and.w	r3, r3, #1
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d007      	beq.n	8002f0c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f042 0201 	orr.w	r2, r2, #1
 8002f0a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f1a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2221      	movs	r2, #33	; 0x21
 8002f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2240      	movs	r2, #64	; 0x40
 8002f28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	6a3a      	ldr	r2, [r7, #32]
 8002f36:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002f3c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f42:	b29a      	uxth	r2, r3
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	4a4d      	ldr	r2, [pc, #308]	; (8003080 <HAL_I2C_Mem_Write+0x1f0>)
 8002f4c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f4e:	88f8      	ldrh	r0, [r7, #6]
 8002f50:	893a      	ldrh	r2, [r7, #8]
 8002f52:	8979      	ldrh	r1, [r7, #10]
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	9301      	str	r3, [sp, #4]
 8002f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f5a:	9300      	str	r3, [sp, #0]
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	68f8      	ldr	r0, [r7, #12]
 8002f60:	f000 fd12 	bl	8003988 <I2C_RequestMemoryWrite>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d052      	beq.n	8003010 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e081      	b.n	8003072 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f6e:	697a      	ldr	r2, [r7, #20]
 8002f70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f72:	68f8      	ldr	r0, [r7, #12]
 8002f74:	f000 ff38 	bl	8003de8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d00d      	beq.n	8002f9a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f82:	2b04      	cmp	r3, #4
 8002f84:	d107      	bne.n	8002f96 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f94:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e06b      	b.n	8003072 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9e:	781a      	ldrb	r2, [r3, #0]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002faa:	1c5a      	adds	r2, r3, #1
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fb4:	3b01      	subs	r3, #1
 8002fb6:	b29a      	uxth	r2, r3
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	3b01      	subs	r3, #1
 8002fc4:	b29a      	uxth	r2, r3
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	695b      	ldr	r3, [r3, #20]
 8002fd0:	f003 0304 	and.w	r3, r3, #4
 8002fd4:	2b04      	cmp	r3, #4
 8002fd6:	d11b      	bne.n	8003010 <HAL_I2C_Mem_Write+0x180>
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d017      	beq.n	8003010 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe4:	781a      	ldrb	r2, [r3, #0]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff0:	1c5a      	adds	r2, r3, #1
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ffa:	3b01      	subs	r3, #1
 8002ffc:	b29a      	uxth	r2, r3
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003006:	b29b      	uxth	r3, r3
 8003008:	3b01      	subs	r3, #1
 800300a:	b29a      	uxth	r2, r3
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003014:	2b00      	cmp	r3, #0
 8003016:	d1aa      	bne.n	8002f6e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003018:	697a      	ldr	r2, [r7, #20]
 800301a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800301c:	68f8      	ldr	r0, [r7, #12]
 800301e:	f000 ff24 	bl	8003e6a <I2C_WaitOnBTFFlagUntilTimeout>
 8003022:	4603      	mov	r3, r0
 8003024:	2b00      	cmp	r3, #0
 8003026:	d00d      	beq.n	8003044 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302c:	2b04      	cmp	r3, #4
 800302e:	d107      	bne.n	8003040 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800303e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e016      	b.n	8003072 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003052:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2220      	movs	r2, #32
 8003058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2200      	movs	r2, #0
 8003060:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2200      	movs	r2, #0
 8003068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800306c:	2300      	movs	r3, #0
 800306e:	e000      	b.n	8003072 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003070:	2302      	movs	r3, #2
  }
}
 8003072:	4618      	mov	r0, r3
 8003074:	3718      	adds	r7, #24
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	00100002 	.word	0x00100002
 8003080:	ffff0000 	.word	0xffff0000

08003084 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b08c      	sub	sp, #48	; 0x30
 8003088:	af02      	add	r7, sp, #8
 800308a:	60f8      	str	r0, [r7, #12]
 800308c:	4608      	mov	r0, r1
 800308e:	4611      	mov	r1, r2
 8003090:	461a      	mov	r2, r3
 8003092:	4603      	mov	r3, r0
 8003094:	817b      	strh	r3, [r7, #10]
 8003096:	460b      	mov	r3, r1
 8003098:	813b      	strh	r3, [r7, #8]
 800309a:	4613      	mov	r3, r2
 800309c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800309e:	f7fd ffb9 	bl	8001014 <HAL_GetTick>
 80030a2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	2b20      	cmp	r3, #32
 80030ae:	f040 8208 	bne.w	80034c2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b4:	9300      	str	r3, [sp, #0]
 80030b6:	2319      	movs	r3, #25
 80030b8:	2201      	movs	r2, #1
 80030ba:	497b      	ldr	r1, [pc, #492]	; (80032a8 <HAL_I2C_Mem_Read+0x224>)
 80030bc:	68f8      	ldr	r0, [r7, #12]
 80030be:	f000 fdbd 	bl	8003c3c <I2C_WaitOnFlagUntilTimeout>
 80030c2:	4603      	mov	r3, r0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d001      	beq.n	80030cc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80030c8:	2302      	movs	r3, #2
 80030ca:	e1fb      	b.n	80034c4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d101      	bne.n	80030da <HAL_I2C_Mem_Read+0x56>
 80030d6:	2302      	movs	r3, #2
 80030d8:	e1f4      	b.n	80034c4 <HAL_I2C_Mem_Read+0x440>
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2201      	movs	r2, #1
 80030de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0301 	and.w	r3, r3, #1
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d007      	beq.n	8003100 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f042 0201 	orr.w	r2, r2, #1
 80030fe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800310e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2222      	movs	r2, #34	; 0x22
 8003114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2240      	movs	r2, #64	; 0x40
 800311c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2200      	movs	r2, #0
 8003124:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800312a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003130:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003136:	b29a      	uxth	r2, r3
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	4a5b      	ldr	r2, [pc, #364]	; (80032ac <HAL_I2C_Mem_Read+0x228>)
 8003140:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003142:	88f8      	ldrh	r0, [r7, #6]
 8003144:	893a      	ldrh	r2, [r7, #8]
 8003146:	8979      	ldrh	r1, [r7, #10]
 8003148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314a:	9301      	str	r3, [sp, #4]
 800314c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800314e:	9300      	str	r3, [sp, #0]
 8003150:	4603      	mov	r3, r0
 8003152:	68f8      	ldr	r0, [r7, #12]
 8003154:	f000 fca2 	bl	8003a9c <I2C_RequestMemoryRead>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d001      	beq.n	8003162 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e1b0      	b.n	80034c4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003166:	2b00      	cmp	r3, #0
 8003168:	d113      	bne.n	8003192 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800316a:	2300      	movs	r3, #0
 800316c:	623b      	str	r3, [r7, #32]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	695b      	ldr	r3, [r3, #20]
 8003174:	623b      	str	r3, [r7, #32]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	699b      	ldr	r3, [r3, #24]
 800317c:	623b      	str	r3, [r7, #32]
 800317e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800318e:	601a      	str	r2, [r3, #0]
 8003190:	e184      	b.n	800349c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003196:	2b01      	cmp	r3, #1
 8003198:	d11b      	bne.n	80031d2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031a8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031aa:	2300      	movs	r3, #0
 80031ac:	61fb      	str	r3, [r7, #28]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	695b      	ldr	r3, [r3, #20]
 80031b4:	61fb      	str	r3, [r7, #28]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	699b      	ldr	r3, [r3, #24]
 80031bc:	61fb      	str	r3, [r7, #28]
 80031be:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031ce:	601a      	str	r2, [r3, #0]
 80031d0:	e164      	b.n	800349c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d11b      	bne.n	8003212 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031e8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031f8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031fa:	2300      	movs	r3, #0
 80031fc:	61bb      	str	r3, [r7, #24]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	695b      	ldr	r3, [r3, #20]
 8003204:	61bb      	str	r3, [r7, #24]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	699b      	ldr	r3, [r3, #24]
 800320c:	61bb      	str	r3, [r7, #24]
 800320e:	69bb      	ldr	r3, [r7, #24]
 8003210:	e144      	b.n	800349c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003212:	2300      	movs	r3, #0
 8003214:	617b      	str	r3, [r7, #20]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	695b      	ldr	r3, [r3, #20]
 800321c:	617b      	str	r3, [r7, #20]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	699b      	ldr	r3, [r3, #24]
 8003224:	617b      	str	r3, [r7, #20]
 8003226:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003228:	e138      	b.n	800349c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800322e:	2b03      	cmp	r3, #3
 8003230:	f200 80f1 	bhi.w	8003416 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003238:	2b01      	cmp	r3, #1
 800323a:	d123      	bne.n	8003284 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800323c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800323e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003240:	68f8      	ldr	r0, [r7, #12]
 8003242:	f000 fe53 	bl	8003eec <I2C_WaitOnRXNEFlagUntilTimeout>
 8003246:	4603      	mov	r3, r0
 8003248:	2b00      	cmp	r3, #0
 800324a:	d001      	beq.n	8003250 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e139      	b.n	80034c4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	691a      	ldr	r2, [r3, #16]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325a:	b2d2      	uxtb	r2, r2
 800325c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003262:	1c5a      	adds	r2, r3, #1
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800326c:	3b01      	subs	r3, #1
 800326e:	b29a      	uxth	r2, r3
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003278:	b29b      	uxth	r3, r3
 800327a:	3b01      	subs	r3, #1
 800327c:	b29a      	uxth	r2, r3
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003282:	e10b      	b.n	800349c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003288:	2b02      	cmp	r3, #2
 800328a:	d14e      	bne.n	800332a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800328c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328e:	9300      	str	r3, [sp, #0]
 8003290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003292:	2200      	movs	r2, #0
 8003294:	4906      	ldr	r1, [pc, #24]	; (80032b0 <HAL_I2C_Mem_Read+0x22c>)
 8003296:	68f8      	ldr	r0, [r7, #12]
 8003298:	f000 fcd0 	bl	8003c3c <I2C_WaitOnFlagUntilTimeout>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d008      	beq.n	80032b4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e10e      	b.n	80034c4 <HAL_I2C_Mem_Read+0x440>
 80032a6:	bf00      	nop
 80032a8:	00100002 	.word	0x00100002
 80032ac:	ffff0000 	.word	0xffff0000
 80032b0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	691a      	ldr	r2, [r3, #16]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ce:	b2d2      	uxtb	r2, r2
 80032d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d6:	1c5a      	adds	r2, r3, #1
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032e0:	3b01      	subs	r3, #1
 80032e2:	b29a      	uxth	r2, r3
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	3b01      	subs	r3, #1
 80032f0:	b29a      	uxth	r2, r3
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	691a      	ldr	r2, [r3, #16]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003300:	b2d2      	uxtb	r2, r2
 8003302:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003308:	1c5a      	adds	r2, r3, #1
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003312:	3b01      	subs	r3, #1
 8003314:	b29a      	uxth	r2, r3
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800331e:	b29b      	uxth	r3, r3
 8003320:	3b01      	subs	r3, #1
 8003322:	b29a      	uxth	r2, r3
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003328:	e0b8      	b.n	800349c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800332a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332c:	9300      	str	r3, [sp, #0]
 800332e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003330:	2200      	movs	r2, #0
 8003332:	4966      	ldr	r1, [pc, #408]	; (80034cc <HAL_I2C_Mem_Read+0x448>)
 8003334:	68f8      	ldr	r0, [r7, #12]
 8003336:	f000 fc81 	bl	8003c3c <I2C_WaitOnFlagUntilTimeout>
 800333a:	4603      	mov	r3, r0
 800333c:	2b00      	cmp	r3, #0
 800333e:	d001      	beq.n	8003344 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e0bf      	b.n	80034c4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003352:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	691a      	ldr	r2, [r3, #16]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335e:	b2d2      	uxtb	r2, r2
 8003360:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003366:	1c5a      	adds	r2, r3, #1
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003370:	3b01      	subs	r3, #1
 8003372:	b29a      	uxth	r2, r3
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800337c:	b29b      	uxth	r3, r3
 800337e:	3b01      	subs	r3, #1
 8003380:	b29a      	uxth	r2, r3
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003388:	9300      	str	r3, [sp, #0]
 800338a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800338c:	2200      	movs	r2, #0
 800338e:	494f      	ldr	r1, [pc, #316]	; (80034cc <HAL_I2C_Mem_Read+0x448>)
 8003390:	68f8      	ldr	r0, [r7, #12]
 8003392:	f000 fc53 	bl	8003c3c <I2C_WaitOnFlagUntilTimeout>
 8003396:	4603      	mov	r3, r0
 8003398:	2b00      	cmp	r3, #0
 800339a:	d001      	beq.n	80033a0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e091      	b.n	80034c4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	691a      	ldr	r2, [r3, #16]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ba:	b2d2      	uxtb	r2, r2
 80033bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c2:	1c5a      	adds	r2, r3, #1
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033cc:	3b01      	subs	r3, #1
 80033ce:	b29a      	uxth	r2, r3
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033d8:	b29b      	uxth	r3, r3
 80033da:	3b01      	subs	r3, #1
 80033dc:	b29a      	uxth	r2, r3
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	691a      	ldr	r2, [r3, #16]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ec:	b2d2      	uxtb	r2, r2
 80033ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f4:	1c5a      	adds	r2, r3, #1
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033fe:	3b01      	subs	r3, #1
 8003400:	b29a      	uxth	r2, r3
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800340a:	b29b      	uxth	r3, r3
 800340c:	3b01      	subs	r3, #1
 800340e:	b29a      	uxth	r2, r3
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003414:	e042      	b.n	800349c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003416:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003418:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800341a:	68f8      	ldr	r0, [r7, #12]
 800341c:	f000 fd66 	bl	8003eec <I2C_WaitOnRXNEFlagUntilTimeout>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d001      	beq.n	800342a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e04c      	b.n	80034c4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	691a      	ldr	r2, [r3, #16]
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003434:	b2d2      	uxtb	r2, r2
 8003436:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343c:	1c5a      	adds	r2, r3, #1
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003446:	3b01      	subs	r3, #1
 8003448:	b29a      	uxth	r2, r3
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003452:	b29b      	uxth	r3, r3
 8003454:	3b01      	subs	r3, #1
 8003456:	b29a      	uxth	r2, r3
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	695b      	ldr	r3, [r3, #20]
 8003462:	f003 0304 	and.w	r3, r3, #4
 8003466:	2b04      	cmp	r3, #4
 8003468:	d118      	bne.n	800349c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	691a      	ldr	r2, [r3, #16]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003474:	b2d2      	uxtb	r2, r2
 8003476:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347c:	1c5a      	adds	r2, r3, #1
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003486:	3b01      	subs	r3, #1
 8003488:	b29a      	uxth	r2, r3
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003492:	b29b      	uxth	r3, r3
 8003494:	3b01      	subs	r3, #1
 8003496:	b29a      	uxth	r2, r3
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	f47f aec2 	bne.w	800322a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2220      	movs	r2, #32
 80034aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2200      	movs	r2, #0
 80034b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2200      	movs	r2, #0
 80034ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80034be:	2300      	movs	r3, #0
 80034c0:	e000      	b.n	80034c4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80034c2:	2302      	movs	r3, #2
  }
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3728      	adds	r7, #40	; 0x28
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	00010004 	.word	0x00010004

080034d0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b08a      	sub	sp, #40	; 0x28
 80034d4:	af02      	add	r7, sp, #8
 80034d6:	60f8      	str	r0, [r7, #12]
 80034d8:	607a      	str	r2, [r7, #4]
 80034da:	603b      	str	r3, [r7, #0]
 80034dc:	460b      	mov	r3, r1
 80034de:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80034e0:	f7fd fd98 	bl	8001014 <HAL_GetTick>
 80034e4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80034e6:	2301      	movs	r3, #1
 80034e8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	2b20      	cmp	r3, #32
 80034f4:	f040 8105 	bne.w	8003702 <HAL_I2C_IsDeviceReady+0x232>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	9300      	str	r3, [sp, #0]
 80034fc:	2319      	movs	r3, #25
 80034fe:	2201      	movs	r2, #1
 8003500:	4982      	ldr	r1, [pc, #520]	; (800370c <HAL_I2C_IsDeviceReady+0x23c>)
 8003502:	68f8      	ldr	r0, [r7, #12]
 8003504:	f000 fb9a 	bl	8003c3c <I2C_WaitOnFlagUntilTimeout>
 8003508:	4603      	mov	r3, r0
 800350a:	2b00      	cmp	r3, #0
 800350c:	d001      	beq.n	8003512 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800350e:	2302      	movs	r3, #2
 8003510:	e0f8      	b.n	8003704 <HAL_I2C_IsDeviceReady+0x234>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003518:	2b01      	cmp	r3, #1
 800351a:	d101      	bne.n	8003520 <HAL_I2C_IsDeviceReady+0x50>
 800351c:	2302      	movs	r3, #2
 800351e:	e0f1      	b.n	8003704 <HAL_I2C_IsDeviceReady+0x234>
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2201      	movs	r2, #1
 8003524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0301 	and.w	r3, r3, #1
 8003532:	2b01      	cmp	r3, #1
 8003534:	d007      	beq.n	8003546 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f042 0201 	orr.w	r2, r2, #1
 8003544:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003554:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2224      	movs	r2, #36	; 0x24
 800355a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2200      	movs	r2, #0
 8003562:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	4a6a      	ldr	r2, [pc, #424]	; (8003710 <HAL_I2C_IsDeviceReady+0x240>)
 8003568:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003578:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800357a:	69fb      	ldr	r3, [r7, #28]
 800357c:	9300      	str	r3, [sp, #0]
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	2200      	movs	r2, #0
 8003582:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003586:	68f8      	ldr	r0, [r7, #12]
 8003588:	f000 fb58 	bl	8003c3c <I2C_WaitOnFlagUntilTimeout>
 800358c:	4603      	mov	r3, r0
 800358e:	2b00      	cmp	r3, #0
 8003590:	d001      	beq.n	8003596 <HAL_I2C_IsDeviceReady+0xc6>
      {
        return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e0b6      	b.n	8003704 <HAL_I2C_IsDeviceReady+0x234>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003596:	897b      	ldrh	r3, [r7, #10]
 8003598:	b2db      	uxtb	r3, r3
 800359a:	461a      	mov	r2, r3
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80035a4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80035a6:	f7fd fd35 	bl	8001014 <HAL_GetTick>
 80035aa:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	695b      	ldr	r3, [r3, #20]
 80035b2:	f003 0302 	and.w	r3, r3, #2
 80035b6:	2b02      	cmp	r3, #2
 80035b8:	bf0c      	ite	eq
 80035ba:	2301      	moveq	r3, #1
 80035bc:	2300      	movne	r3, #0
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	695b      	ldr	r3, [r3, #20]
 80035c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035d0:	bf0c      	ite	eq
 80035d2:	2301      	moveq	r3, #1
 80035d4:	2300      	movne	r3, #0
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80035da:	e025      	b.n	8003628 <HAL_I2C_IsDeviceReady+0x158>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80035dc:	f7fd fd1a 	bl	8001014 <HAL_GetTick>
 80035e0:	4602      	mov	r2, r0
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	683a      	ldr	r2, [r7, #0]
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d302      	bcc.n	80035f2 <HAL_I2C_IsDeviceReady+0x122>
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d103      	bne.n	80035fa <HAL_I2C_IsDeviceReady+0x12a>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	22a0      	movs	r2, #160	; 0xa0
 80035f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	695b      	ldr	r3, [r3, #20]
 8003600:	f003 0302 	and.w	r3, r3, #2
 8003604:	2b02      	cmp	r3, #2
 8003606:	bf0c      	ite	eq
 8003608:	2301      	moveq	r3, #1
 800360a:	2300      	movne	r3, #0
 800360c:	b2db      	uxtb	r3, r3
 800360e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	695b      	ldr	r3, [r3, #20]
 8003616:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800361a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800361e:	bf0c      	ite	eq
 8003620:	2301      	moveq	r3, #1
 8003622:	2300      	movne	r3, #0
 8003624:	b2db      	uxtb	r3, r3
 8003626:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800362e:	b2db      	uxtb	r3, r3
 8003630:	2ba0      	cmp	r3, #160	; 0xa0
 8003632:	d005      	beq.n	8003640 <HAL_I2C_IsDeviceReady+0x170>
 8003634:	7dfb      	ldrb	r3, [r7, #23]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d102      	bne.n	8003640 <HAL_I2C_IsDeviceReady+0x170>
 800363a:	7dbb      	ldrb	r3, [r7, #22]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d0cd      	beq.n	80035dc <HAL_I2C_IsDeviceReady+0x10c>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2220      	movs	r2, #32
 8003644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	695b      	ldr	r3, [r3, #20]
 800364e:	f003 0302 	and.w	r3, r3, #2
 8003652:	2b02      	cmp	r3, #2
 8003654:	d129      	bne.n	80036aa <HAL_I2C_IsDeviceReady+0x1da>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003664:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003666:	2300      	movs	r3, #0
 8003668:	613b      	str	r3, [r7, #16]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	695b      	ldr	r3, [r3, #20]
 8003670:	613b      	str	r3, [r7, #16]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	699b      	ldr	r3, [r3, #24]
 8003678:	613b      	str	r3, [r7, #16]
 800367a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	9300      	str	r3, [sp, #0]
 8003680:	2319      	movs	r3, #25
 8003682:	2201      	movs	r2, #1
 8003684:	4921      	ldr	r1, [pc, #132]	; (800370c <HAL_I2C_IsDeviceReady+0x23c>)
 8003686:	68f8      	ldr	r0, [r7, #12]
 8003688:	f000 fad8 	bl	8003c3c <I2C_WaitOnFlagUntilTimeout>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d001      	beq.n	8003696 <HAL_I2C_IsDeviceReady+0x1c6>
        {
          return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e036      	b.n	8003704 <HAL_I2C_IsDeviceReady+0x234>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2220      	movs	r2, #32
 800369a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2200      	movs	r2, #0
 80036a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80036a6:	2300      	movs	r3, #0
 80036a8:	e02c      	b.n	8003704 <HAL_I2C_IsDeviceReady+0x234>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036b8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80036c2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80036c4:	69fb      	ldr	r3, [r7, #28]
 80036c6:	9300      	str	r3, [sp, #0]
 80036c8:	2319      	movs	r3, #25
 80036ca:	2201      	movs	r2, #1
 80036cc:	490f      	ldr	r1, [pc, #60]	; (800370c <HAL_I2C_IsDeviceReady+0x23c>)
 80036ce:	68f8      	ldr	r0, [r7, #12]
 80036d0:	f000 fab4 	bl	8003c3c <I2C_WaitOnFlagUntilTimeout>
 80036d4:	4603      	mov	r3, r0
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d001      	beq.n	80036de <HAL_I2C_IsDeviceReady+0x20e>
        {
          return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e012      	b.n	8003704 <HAL_I2C_IsDeviceReady+0x234>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80036de:	69bb      	ldr	r3, [r7, #24]
 80036e0:	3301      	adds	r3, #1
 80036e2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80036e4:	69ba      	ldr	r2, [r7, #24]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	429a      	cmp	r2, r3
 80036ea:	f4ff af3e 	bcc.w	800356a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2220      	movs	r2, #32
 80036f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2200      	movs	r2, #0
 80036fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e000      	b.n	8003704 <HAL_I2C_IsDeviceReady+0x234>
  }
  else
  {
    return HAL_BUSY;
 8003702:	2302      	movs	r3, #2
  }
}
 8003704:	4618      	mov	r0, r3
 8003706:	3720      	adds	r7, #32
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}
 800370c:	00100002 	.word	0x00100002
 8003710:	ffff0000 	.word	0xffff0000

08003714 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8003714:	b480      	push	{r7}
 8003716:	b083      	sub	sp, #12
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003722:	b2db      	uxtb	r3, r3
}
 8003724:	4618      	mov	r0, r3
 8003726:	370c      	adds	r7, #12
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr

08003730 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b088      	sub	sp, #32
 8003734:	af02      	add	r7, sp, #8
 8003736:	60f8      	str	r0, [r7, #12]
 8003738:	607a      	str	r2, [r7, #4]
 800373a:	603b      	str	r3, [r7, #0]
 800373c:	460b      	mov	r3, r1
 800373e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003744:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	2b08      	cmp	r3, #8
 800374a:	d006      	beq.n	800375a <I2C_MasterRequestWrite+0x2a>
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	2b01      	cmp	r3, #1
 8003750:	d003      	beq.n	800375a <I2C_MasterRequestWrite+0x2a>
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003758:	d108      	bne.n	800376c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003768:	601a      	str	r2, [r3, #0]
 800376a:	e00b      	b.n	8003784 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003770:	2b12      	cmp	r3, #18
 8003772:	d107      	bne.n	8003784 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003782:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	9300      	str	r3, [sp, #0]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003790:	68f8      	ldr	r0, [r7, #12]
 8003792:	f000 fa53 	bl	8003c3c <I2C_WaitOnFlagUntilTimeout>
 8003796:	4603      	mov	r3, r0
 8003798:	2b00      	cmp	r3, #0
 800379a:	d001      	beq.n	80037a0 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e035      	b.n	800380c <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	691b      	ldr	r3, [r3, #16]
 80037a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80037a8:	d108      	bne.n	80037bc <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80037aa:	897b      	ldrh	r3, [r7, #10]
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	461a      	mov	r2, r3
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80037b8:	611a      	str	r2, [r3, #16]
 80037ba:	e01b      	b.n	80037f4 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80037bc:	897b      	ldrh	r3, [r7, #10]
 80037be:	11db      	asrs	r3, r3, #7
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	f003 0306 	and.w	r3, r3, #6
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	f063 030f 	orn	r3, r3, #15
 80037cc:	b2da      	uxtb	r2, r3
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	687a      	ldr	r2, [r7, #4]
 80037d8:	490e      	ldr	r1, [pc, #56]	; (8003814 <I2C_MasterRequestWrite+0xe4>)
 80037da:	68f8      	ldr	r0, [r7, #12]
 80037dc:	f000 fa85 	bl	8003cea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037e0:	4603      	mov	r3, r0
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d001      	beq.n	80037ea <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e010      	b.n	800380c <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80037ea:	897b      	ldrh	r3, [r7, #10]
 80037ec:	b2da      	uxtb	r2, r3
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	4907      	ldr	r1, [pc, #28]	; (8003818 <I2C_MasterRequestWrite+0xe8>)
 80037fa:	68f8      	ldr	r0, [r7, #12]
 80037fc:	f000 fa75 	bl	8003cea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d001      	beq.n	800380a <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e000      	b.n	800380c <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 800380a:	2300      	movs	r3, #0
}
 800380c:	4618      	mov	r0, r3
 800380e:	3718      	adds	r7, #24
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}
 8003814:	00010008 	.word	0x00010008
 8003818:	00010002 	.word	0x00010002

0800381c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b088      	sub	sp, #32
 8003820:	af02      	add	r7, sp, #8
 8003822:	60f8      	str	r0, [r7, #12]
 8003824:	607a      	str	r2, [r7, #4]
 8003826:	603b      	str	r3, [r7, #0]
 8003828:	460b      	mov	r3, r1
 800382a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003830:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003840:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	2b08      	cmp	r3, #8
 8003846:	d006      	beq.n	8003856 <I2C_MasterRequestRead+0x3a>
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	2b01      	cmp	r3, #1
 800384c:	d003      	beq.n	8003856 <I2C_MasterRequestRead+0x3a>
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003854:	d108      	bne.n	8003868 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003864:	601a      	str	r2, [r3, #0]
 8003866:	e00b      	b.n	8003880 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386c:	2b11      	cmp	r3, #17
 800386e:	d107      	bne.n	8003880 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800387e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	9300      	str	r3, [sp, #0]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800388c:	68f8      	ldr	r0, [r7, #12]
 800388e:	f000 f9d5 	bl	8003c3c <I2C_WaitOnFlagUntilTimeout>
 8003892:	4603      	mov	r3, r0
 8003894:	2b00      	cmp	r3, #0
 8003896:	d001      	beq.n	800389c <I2C_MasterRequestRead+0x80>
  {
    return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e06d      	b.n	8003978 <I2C_MasterRequestRead+0x15c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	691b      	ldr	r3, [r3, #16]
 80038a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80038a4:	d108      	bne.n	80038b8 <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80038a6:	897b      	ldrh	r3, [r7, #10]
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	f043 0301 	orr.w	r3, r3, #1
 80038ae:	b2da      	uxtb	r2, r3
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	611a      	str	r2, [r3, #16]
 80038b6:	e053      	b.n	8003960 <I2C_MasterRequestRead+0x144>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80038b8:	897b      	ldrh	r3, [r7, #10]
 80038ba:	11db      	asrs	r3, r3, #7
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	f003 0306 	and.w	r3, r3, #6
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	f063 030f 	orn	r3, r3, #15
 80038c8:	b2da      	uxtb	r2, r3
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	492a      	ldr	r1, [pc, #168]	; (8003980 <I2C_MasterRequestRead+0x164>)
 80038d6:	68f8      	ldr	r0, [r7, #12]
 80038d8:	f000 fa07 	bl	8003cea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d001      	beq.n	80038e6 <I2C_MasterRequestRead+0xca>
    {
      return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e048      	b.n	8003978 <I2C_MasterRequestRead+0x15c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80038e6:	897b      	ldrh	r3, [r7, #10]
 80038e8:	b2da      	uxtb	r2, r3
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	4923      	ldr	r1, [pc, #140]	; (8003984 <I2C_MasterRequestRead+0x168>)
 80038f6:	68f8      	ldr	r0, [r7, #12]
 80038f8:	f000 f9f7 	bl	8003cea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d001      	beq.n	8003906 <I2C_MasterRequestRead+0xea>
    {
      return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e038      	b.n	8003978 <I2C_MasterRequestRead+0x15c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003906:	2300      	movs	r3, #0
 8003908:	613b      	str	r3, [r7, #16]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	695b      	ldr	r3, [r3, #20]
 8003910:	613b      	str	r3, [r7, #16]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	699b      	ldr	r3, [r3, #24]
 8003918:	613b      	str	r3, [r7, #16]
 800391a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800392a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	9300      	str	r3, [sp, #0]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003938:	68f8      	ldr	r0, [r7, #12]
 800393a:	f000 f97f 	bl	8003c3c <I2C_WaitOnFlagUntilTimeout>
 800393e:	4603      	mov	r3, r0
 8003940:	2b00      	cmp	r3, #0
 8003942:	d001      	beq.n	8003948 <I2C_MasterRequestRead+0x12c>
    {
      return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e017      	b.n	8003978 <I2C_MasterRequestRead+0x15c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003948:	897b      	ldrh	r3, [r7, #10]
 800394a:	11db      	asrs	r3, r3, #7
 800394c:	b2db      	uxtb	r3, r3
 800394e:	f003 0306 	and.w	r3, r3, #6
 8003952:	b2db      	uxtb	r3, r3
 8003954:	f063 030e 	orn	r3, r3, #14
 8003958:	b2da      	uxtb	r2, r3
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	4907      	ldr	r1, [pc, #28]	; (8003984 <I2C_MasterRequestRead+0x168>)
 8003966:	68f8      	ldr	r0, [r7, #12]
 8003968:	f000 f9bf 	bl	8003cea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800396c:	4603      	mov	r3, r0
 800396e:	2b00      	cmp	r3, #0
 8003970:	d001      	beq.n	8003976 <I2C_MasterRequestRead+0x15a>
  {
    return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e000      	b.n	8003978 <I2C_MasterRequestRead+0x15c>
  }

  return HAL_OK;
 8003976:	2300      	movs	r3, #0
}
 8003978:	4618      	mov	r0, r3
 800397a:	3718      	adds	r7, #24
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}
 8003980:	00010008 	.word	0x00010008
 8003984:	00010002 	.word	0x00010002

08003988 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b088      	sub	sp, #32
 800398c:	af02      	add	r7, sp, #8
 800398e:	60f8      	str	r0, [r7, #12]
 8003990:	4608      	mov	r0, r1
 8003992:	4611      	mov	r1, r2
 8003994:	461a      	mov	r2, r3
 8003996:	4603      	mov	r3, r0
 8003998:	817b      	strh	r3, [r7, #10]
 800399a:	460b      	mov	r3, r1
 800399c:	813b      	strh	r3, [r7, #8]
 800399e:	4613      	mov	r3, r2
 80039a0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039b0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80039b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b4:	9300      	str	r3, [sp, #0]
 80039b6:	6a3b      	ldr	r3, [r7, #32]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80039be:	68f8      	ldr	r0, [r7, #12]
 80039c0:	f000 f93c 	bl	8003c3c <I2C_WaitOnFlagUntilTimeout>
 80039c4:	4603      	mov	r3, r0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d001      	beq.n	80039ce <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e05f      	b.n	8003a8e <I2C_RequestMemoryWrite+0x106>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80039ce:	897b      	ldrh	r3, [r7, #10]
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	461a      	mov	r2, r3
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80039dc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80039de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e0:	6a3a      	ldr	r2, [r7, #32]
 80039e2:	492d      	ldr	r1, [pc, #180]	; (8003a98 <I2C_RequestMemoryWrite+0x110>)
 80039e4:	68f8      	ldr	r0, [r7, #12]
 80039e6:	f000 f980 	bl	8003cea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d001      	beq.n	80039f4 <I2C_RequestMemoryWrite+0x6c>
  {
    return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e04c      	b.n	8003a8e <I2C_RequestMemoryWrite+0x106>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039f4:	2300      	movs	r3, #0
 80039f6:	617b      	str	r3, [r7, #20]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	695b      	ldr	r3, [r3, #20]
 80039fe:	617b      	str	r3, [r7, #20]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	699b      	ldr	r3, [r3, #24]
 8003a06:	617b      	str	r3, [r7, #20]
 8003a08:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a0c:	6a39      	ldr	r1, [r7, #32]
 8003a0e:	68f8      	ldr	r0, [r7, #12]
 8003a10:	f000 f9ea 	bl	8003de8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d00d      	beq.n	8003a36 <I2C_RequestMemoryWrite+0xae>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1e:	2b04      	cmp	r3, #4
 8003a20:	d107      	bne.n	8003a32 <I2C_RequestMemoryWrite+0xaa>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a30:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e02b      	b.n	8003a8e <I2C_RequestMemoryWrite+0x106>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a36:	88fb      	ldrh	r3, [r7, #6]
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d105      	bne.n	8003a48 <I2C_RequestMemoryWrite+0xc0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a3c:	893b      	ldrh	r3, [r7, #8]
 8003a3e:	b2da      	uxtb	r2, r3
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	611a      	str	r2, [r3, #16]
 8003a46:	e021      	b.n	8003a8c <I2C_RequestMemoryWrite+0x104>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003a48:	893b      	ldrh	r3, [r7, #8]
 8003a4a:	0a1b      	lsrs	r3, r3, #8
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	b2da      	uxtb	r2, r3
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a58:	6a39      	ldr	r1, [r7, #32]
 8003a5a:	68f8      	ldr	r0, [r7, #12]
 8003a5c:	f000 f9c4 	bl	8003de8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d00d      	beq.n	8003a82 <I2C_RequestMemoryWrite+0xfa>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6a:	2b04      	cmp	r3, #4
 8003a6c:	d107      	bne.n	8003a7e <I2C_RequestMemoryWrite+0xf6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a7c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e005      	b.n	8003a8e <I2C_RequestMemoryWrite+0x106>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a82:	893b      	ldrh	r3, [r7, #8]
 8003a84:	b2da      	uxtb	r2, r3
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003a8c:	2300      	movs	r3, #0
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3718      	adds	r7, #24
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	00010002 	.word	0x00010002

08003a9c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b088      	sub	sp, #32
 8003aa0:	af02      	add	r7, sp, #8
 8003aa2:	60f8      	str	r0, [r7, #12]
 8003aa4:	4608      	mov	r0, r1
 8003aa6:	4611      	mov	r1, r2
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	4603      	mov	r3, r0
 8003aac:	817b      	strh	r3, [r7, #10]
 8003aae:	460b      	mov	r3, r1
 8003ab0:	813b      	strh	r3, [r7, #8]
 8003ab2:	4613      	mov	r3, r2
 8003ab4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ac4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ad4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad8:	9300      	str	r3, [sp, #0]
 8003ada:	6a3b      	ldr	r3, [r7, #32]
 8003adc:	2200      	movs	r2, #0
 8003ade:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003ae2:	68f8      	ldr	r0, [r7, #12]
 8003ae4:	f000 f8aa 	bl	8003c3c <I2C_WaitOnFlagUntilTimeout>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d001      	beq.n	8003af2 <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e09e      	b.n	8003c30 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003af2:	897b      	ldrh	r3, [r7, #10]
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	461a      	mov	r2, r3
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003b00:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b04:	6a3a      	ldr	r2, [r7, #32]
 8003b06:	494c      	ldr	r1, [pc, #304]	; (8003c38 <I2C_RequestMemoryRead+0x19c>)
 8003b08:	68f8      	ldr	r0, [r7, #12]
 8003b0a:	f000 f8ee 	bl	8003cea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d001      	beq.n	8003b18 <I2C_RequestMemoryRead+0x7c>
  {
    return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e08b      	b.n	8003c30 <I2C_RequestMemoryRead+0x194>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b18:	2300      	movs	r3, #0
 8003b1a:	617b      	str	r3, [r7, #20]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	695b      	ldr	r3, [r3, #20]
 8003b22:	617b      	str	r3, [r7, #20]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	699b      	ldr	r3, [r3, #24]
 8003b2a:	617b      	str	r3, [r7, #20]
 8003b2c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b30:	6a39      	ldr	r1, [r7, #32]
 8003b32:	68f8      	ldr	r0, [r7, #12]
 8003b34:	f000 f958 	bl	8003de8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d00d      	beq.n	8003b5a <I2C_RequestMemoryRead+0xbe>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b42:	2b04      	cmp	r3, #4
 8003b44:	d107      	bne.n	8003b56 <I2C_RequestMemoryRead+0xba>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b54:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e06a      	b.n	8003c30 <I2C_RequestMemoryRead+0x194>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003b5a:	88fb      	ldrh	r3, [r7, #6]
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d105      	bne.n	8003b6c <I2C_RequestMemoryRead+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003b60:	893b      	ldrh	r3, [r7, #8]
 8003b62:	b2da      	uxtb	r2, r3
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	611a      	str	r2, [r3, #16]
 8003b6a:	e021      	b.n	8003bb0 <I2C_RequestMemoryRead+0x114>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003b6c:	893b      	ldrh	r3, [r7, #8]
 8003b6e:	0a1b      	lsrs	r3, r3, #8
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	b2da      	uxtb	r2, r3
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b7c:	6a39      	ldr	r1, [r7, #32]
 8003b7e:	68f8      	ldr	r0, [r7, #12]
 8003b80:	f000 f932 	bl	8003de8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b84:	4603      	mov	r3, r0
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d00d      	beq.n	8003ba6 <I2C_RequestMemoryRead+0x10a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8e:	2b04      	cmp	r3, #4
 8003b90:	d107      	bne.n	8003ba2 <I2C_RequestMemoryRead+0x106>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ba0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e044      	b.n	8003c30 <I2C_RequestMemoryRead+0x194>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ba6:	893b      	ldrh	r3, [r7, #8]
 8003ba8:	b2da      	uxtb	r2, r3
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bb2:	6a39      	ldr	r1, [r7, #32]
 8003bb4:	68f8      	ldr	r0, [r7, #12]
 8003bb6:	f000 f917 	bl	8003de8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d00d      	beq.n	8003bdc <I2C_RequestMemoryRead+0x140>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc4:	2b04      	cmp	r3, #4
 8003bc6:	d107      	bne.n	8003bd8 <I2C_RequestMemoryRead+0x13c>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bd6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e029      	b.n	8003c30 <I2C_RequestMemoryRead+0x194>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bea:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bee:	9300      	str	r3, [sp, #0]
 8003bf0:	6a3b      	ldr	r3, [r7, #32]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003bf8:	68f8      	ldr	r0, [r7, #12]
 8003bfa:	f000 f81f 	bl	8003c3c <I2C_WaitOnFlagUntilTimeout>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d001      	beq.n	8003c08 <I2C_RequestMemoryRead+0x16c>
  {
    return HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	e013      	b.n	8003c30 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003c08:	897b      	ldrh	r3, [r7, #10]
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	f043 0301 	orr.w	r3, r3, #1
 8003c10:	b2da      	uxtb	r2, r3
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1a:	6a3a      	ldr	r2, [r7, #32]
 8003c1c:	4906      	ldr	r1, [pc, #24]	; (8003c38 <I2C_RequestMemoryRead+0x19c>)
 8003c1e:	68f8      	ldr	r0, [r7, #12]
 8003c20:	f000 f863 	bl	8003cea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c24:	4603      	mov	r3, r0
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d001      	beq.n	8003c2e <I2C_RequestMemoryRead+0x192>
  {
    return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e000      	b.n	8003c30 <I2C_RequestMemoryRead+0x194>
  }

  return HAL_OK;
 8003c2e:	2300      	movs	r3, #0
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3718      	adds	r7, #24
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	00010002 	.word	0x00010002

08003c3c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	60b9      	str	r1, [r7, #8]
 8003c46:	603b      	str	r3, [r7, #0]
 8003c48:	4613      	mov	r3, r2
 8003c4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c4c:	e025      	b.n	8003c9a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c54:	d021      	beq.n	8003c9a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c56:	f7fd f9dd 	bl	8001014 <HAL_GetTick>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	69bb      	ldr	r3, [r7, #24]
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	683a      	ldr	r2, [r7, #0]
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d302      	bcc.n	8003c6c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d116      	bne.n	8003c9a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2220      	movs	r2, #32
 8003c76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c86:	f043 0220 	orr.w	r2, r3, #32
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2200      	movs	r2, #0
 8003c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e023      	b.n	8003ce2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	0c1b      	lsrs	r3, r3, #16
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d10d      	bne.n	8003cc0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	695b      	ldr	r3, [r3, #20]
 8003caa:	43da      	mvns	r2, r3
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	4013      	ands	r3, r2
 8003cb0:	b29b      	uxth	r3, r3
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	bf0c      	ite	eq
 8003cb6:	2301      	moveq	r3, #1
 8003cb8:	2300      	movne	r3, #0
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	e00c      	b.n	8003cda <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	699b      	ldr	r3, [r3, #24]
 8003cc6:	43da      	mvns	r2, r3
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	4013      	ands	r3, r2
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	bf0c      	ite	eq
 8003cd2:	2301      	moveq	r3, #1
 8003cd4:	2300      	movne	r3, #0
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	461a      	mov	r2, r3
 8003cda:	79fb      	ldrb	r3, [r7, #7]
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d0b6      	beq.n	8003c4e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ce0:	2300      	movs	r3, #0
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3710      	adds	r7, #16
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}

08003cea <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003cea:	b580      	push	{r7, lr}
 8003cec:	b084      	sub	sp, #16
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	60f8      	str	r0, [r7, #12]
 8003cf2:	60b9      	str	r1, [r7, #8]
 8003cf4:	607a      	str	r2, [r7, #4]
 8003cf6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003cf8:	e051      	b.n	8003d9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	695b      	ldr	r3, [r3, #20]
 8003d00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d08:	d123      	bne.n	8003d52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d18:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d22:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2200      	movs	r2, #0
 8003d28:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2220      	movs	r2, #32
 8003d2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3e:	f043 0204 	orr.w	r2, r3, #4
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e046      	b.n	8003de0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d58:	d021      	beq.n	8003d9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d5a:	f7fd f95b 	bl	8001014 <HAL_GetTick>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	1ad3      	subs	r3, r2, r3
 8003d64:	687a      	ldr	r2, [r7, #4]
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d302      	bcc.n	8003d70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d116      	bne.n	8003d9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2200      	movs	r2, #0
 8003d74:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2220      	movs	r2, #32
 8003d7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2200      	movs	r2, #0
 8003d82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8a:	f043 0220 	orr.w	r2, r3, #32
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2200      	movs	r2, #0
 8003d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e020      	b.n	8003de0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	0c1b      	lsrs	r3, r3, #16
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d10c      	bne.n	8003dc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	695b      	ldr	r3, [r3, #20]
 8003dae:	43da      	mvns	r2, r3
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	4013      	ands	r3, r2
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	bf14      	ite	ne
 8003dba:	2301      	movne	r3, #1
 8003dbc:	2300      	moveq	r3, #0
 8003dbe:	b2db      	uxtb	r3, r3
 8003dc0:	e00b      	b.n	8003dda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	699b      	ldr	r3, [r3, #24]
 8003dc8:	43da      	mvns	r2, r3
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	4013      	ands	r3, r2
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	bf14      	ite	ne
 8003dd4:	2301      	movne	r3, #1
 8003dd6:	2300      	moveq	r3, #0
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d18d      	bne.n	8003cfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003dde:	2300      	movs	r3, #0
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3710      	adds	r7, #16
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}

08003de8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b084      	sub	sp, #16
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	60f8      	str	r0, [r7, #12]
 8003df0:	60b9      	str	r1, [r7, #8]
 8003df2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003df4:	e02d      	b.n	8003e52 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003df6:	68f8      	ldr	r0, [r7, #12]
 8003df8:	f000 f8ce 	bl	8003f98 <I2C_IsAcknowledgeFailed>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d001      	beq.n	8003e06 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e02d      	b.n	8003e62 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e0c:	d021      	beq.n	8003e52 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e0e:	f7fd f901 	bl	8001014 <HAL_GetTick>
 8003e12:	4602      	mov	r2, r0
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	1ad3      	subs	r3, r2, r3
 8003e18:	68ba      	ldr	r2, [r7, #8]
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	d302      	bcc.n	8003e24 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d116      	bne.n	8003e52 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2200      	movs	r2, #0
 8003e28:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2220      	movs	r2, #32
 8003e2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2200      	movs	r2, #0
 8003e36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3e:	f043 0220 	orr.w	r2, r3, #32
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e007      	b.n	8003e62 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	695b      	ldr	r3, [r3, #20]
 8003e58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e5c:	2b80      	cmp	r3, #128	; 0x80
 8003e5e:	d1ca      	bne.n	8003df6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003e60:	2300      	movs	r3, #0
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3710      	adds	r7, #16
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}

08003e6a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e6a:	b580      	push	{r7, lr}
 8003e6c:	b084      	sub	sp, #16
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	60f8      	str	r0, [r7, #12]
 8003e72:	60b9      	str	r1, [r7, #8]
 8003e74:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003e76:	e02d      	b.n	8003ed4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003e78:	68f8      	ldr	r0, [r7, #12]
 8003e7a:	f000 f88d 	bl	8003f98 <I2C_IsAcknowledgeFailed>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d001      	beq.n	8003e88 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	e02d      	b.n	8003ee4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e8e:	d021      	beq.n	8003ed4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e90:	f7fd f8c0 	bl	8001014 <HAL_GetTick>
 8003e94:	4602      	mov	r2, r0
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	68ba      	ldr	r2, [r7, #8]
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d302      	bcc.n	8003ea6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d116      	bne.n	8003ed4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2220      	movs	r2, #32
 8003eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec0:	f043 0220 	orr.w	r2, r3, #32
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e007      	b.n	8003ee4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	695b      	ldr	r3, [r3, #20]
 8003eda:	f003 0304 	and.w	r3, r3, #4
 8003ede:	2b04      	cmp	r3, #4
 8003ee0:	d1ca      	bne.n	8003e78 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ee2:	2300      	movs	r3, #0
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	3710      	adds	r7, #16
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}

08003eec <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b084      	sub	sp, #16
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	60f8      	str	r0, [r7, #12]
 8003ef4:	60b9      	str	r1, [r7, #8]
 8003ef6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ef8:	e042      	b.n	8003f80 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	695b      	ldr	r3, [r3, #20]
 8003f00:	f003 0310 	and.w	r3, r3, #16
 8003f04:	2b10      	cmp	r3, #16
 8003f06:	d119      	bne.n	8003f3c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f06f 0210 	mvn.w	r2, #16
 8003f10:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2200      	movs	r2, #0
 8003f16:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2220      	movs	r2, #32
 8003f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2200      	movs	r2, #0
 8003f24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2200      	movs	r2, #0
 8003f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e029      	b.n	8003f90 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f3c:	f7fd f86a 	bl	8001014 <HAL_GetTick>
 8003f40:	4602      	mov	r2, r0
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	68ba      	ldr	r2, [r7, #8]
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d302      	bcc.n	8003f52 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d116      	bne.n	8003f80 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2200      	movs	r2, #0
 8003f56:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2220      	movs	r2, #32
 8003f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2200      	movs	r2, #0
 8003f64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6c:	f043 0220 	orr.w	r2, r3, #32
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2200      	movs	r2, #0
 8003f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e007      	b.n	8003f90 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	695b      	ldr	r3, [r3, #20]
 8003f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f8a:	2b40      	cmp	r3, #64	; 0x40
 8003f8c:	d1b5      	bne.n	8003efa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003f8e:	2300      	movs	r3, #0
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	3710      	adds	r7, #16
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}

08003f98 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b083      	sub	sp, #12
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	695b      	ldr	r3, [r3, #20]
 8003fa6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003faa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fae:	d11b      	bne.n	8003fe8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003fb8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2220      	movs	r2, #32
 8003fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd4:	f043 0204 	orr.w	r2, r3, #4
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e000      	b.n	8003fea <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003fe8:	2300      	movs	r3, #0
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	370c      	adds	r7, #12
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr
	...

08003ff8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b088      	sub	sp, #32
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d101      	bne.n	800400a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e128      	b.n	800425c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004010:	b2db      	uxtb	r3, r3
 8004012:	2b00      	cmp	r3, #0
 8004014:	d109      	bne.n	800402a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4a90      	ldr	r2, [pc, #576]	; (8004264 <HAL_I2S_Init+0x26c>)
 8004022:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f00d fe1d 	bl	8011c64 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2202      	movs	r2, #2
 800402e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	69db      	ldr	r3, [r3, #28]
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	6812      	ldr	r2, [r2, #0]
 800403c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004040:	f023 030f 	bic.w	r3, r3, #15
 8004044:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	2202      	movs	r2, #2
 800404c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	695b      	ldr	r3, [r3, #20]
 8004052:	2b02      	cmp	r3, #2
 8004054:	d060      	beq.n	8004118 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d102      	bne.n	8004064 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800405e:	2310      	movs	r3, #16
 8004060:	617b      	str	r3, [r7, #20]
 8004062:	e001      	b.n	8004068 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004064:	2320      	movs	r3, #32
 8004066:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	2b20      	cmp	r3, #32
 800406e:	d802      	bhi.n	8004076 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	005b      	lsls	r3, r3, #1
 8004074:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004076:	2001      	movs	r0, #1
 8004078:	f001 fada 	bl	8005630 <HAL_RCCEx_GetPeriphCLKFreq>
 800407c:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	691b      	ldr	r3, [r3, #16]
 8004082:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004086:	d125      	bne.n	80040d4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d010      	beq.n	80040b2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	68fa      	ldr	r2, [r7, #12]
 8004096:	fbb2 f2f3 	udiv	r2, r2, r3
 800409a:	4613      	mov	r3, r2
 800409c:	009b      	lsls	r3, r3, #2
 800409e:	4413      	add	r3, r2
 80040a0:	005b      	lsls	r3, r3, #1
 80040a2:	461a      	mov	r2, r3
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	695b      	ldr	r3, [r3, #20]
 80040a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ac:	3305      	adds	r3, #5
 80040ae:	613b      	str	r3, [r7, #16]
 80040b0:	e01f      	b.n	80040f2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	00db      	lsls	r3, r3, #3
 80040b6:	68fa      	ldr	r2, [r7, #12]
 80040b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80040bc:	4613      	mov	r3, r2
 80040be:	009b      	lsls	r3, r3, #2
 80040c0:	4413      	add	r3, r2
 80040c2:	005b      	lsls	r3, r3, #1
 80040c4:	461a      	mov	r2, r3
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	695b      	ldr	r3, [r3, #20]
 80040ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ce:	3305      	adds	r3, #5
 80040d0:	613b      	str	r3, [r7, #16]
 80040d2:	e00e      	b.n	80040f2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80040d4:	68fa      	ldr	r2, [r7, #12]
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80040dc:	4613      	mov	r3, r2
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	4413      	add	r3, r2
 80040e2:	005b      	lsls	r3, r3, #1
 80040e4:	461a      	mov	r2, r3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	695b      	ldr	r3, [r3, #20]
 80040ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ee:	3305      	adds	r3, #5
 80040f0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	4a5c      	ldr	r2, [pc, #368]	; (8004268 <HAL_I2S_Init+0x270>)
 80040f6:	fba2 2303 	umull	r2, r3, r2, r3
 80040fa:	08db      	lsrs	r3, r3, #3
 80040fc:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	f003 0301 	and.w	r3, r3, #1
 8004104:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004106:	693a      	ldr	r2, [r7, #16]
 8004108:	69bb      	ldr	r3, [r7, #24]
 800410a:	1ad3      	subs	r3, r2, r3
 800410c:	085b      	lsrs	r3, r3, #1
 800410e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004110:	69bb      	ldr	r3, [r7, #24]
 8004112:	021b      	lsls	r3, r3, #8
 8004114:	61bb      	str	r3, [r7, #24]
 8004116:	e003      	b.n	8004120 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004118:	2302      	movs	r3, #2
 800411a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800411c:	2300      	movs	r3, #0
 800411e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004120:	69fb      	ldr	r3, [r7, #28]
 8004122:	2b01      	cmp	r3, #1
 8004124:	d902      	bls.n	800412c <HAL_I2S_Init+0x134>
 8004126:	69fb      	ldr	r3, [r7, #28]
 8004128:	2bff      	cmp	r3, #255	; 0xff
 800412a:	d907      	bls.n	800413c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004130:	f043 0210 	orr.w	r2, r3, #16
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	e08f      	b.n	800425c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	691a      	ldr	r2, [r3, #16]
 8004140:	69bb      	ldr	r3, [r7, #24]
 8004142:	ea42 0103 	orr.w	r1, r2, r3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	69fa      	ldr	r2, [r7, #28]
 800414c:	430a      	orrs	r2, r1
 800414e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	69db      	ldr	r3, [r3, #28]
 8004156:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800415a:	f023 030f 	bic.w	r3, r3, #15
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	6851      	ldr	r1, [r2, #4]
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	6892      	ldr	r2, [r2, #8]
 8004166:	4311      	orrs	r1, r2
 8004168:	687a      	ldr	r2, [r7, #4]
 800416a:	68d2      	ldr	r2, [r2, #12]
 800416c:	4311      	orrs	r1, r2
 800416e:	687a      	ldr	r2, [r7, #4]
 8004170:	6992      	ldr	r2, [r2, #24]
 8004172:	430a      	orrs	r2, r1
 8004174:	431a      	orrs	r2, r3
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800417e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6a1b      	ldr	r3, [r3, #32]
 8004184:	2b01      	cmp	r3, #1
 8004186:	d161      	bne.n	800424c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	4a38      	ldr	r2, [pc, #224]	; (800426c <HAL_I2S_Init+0x274>)
 800418c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a37      	ldr	r2, [pc, #220]	; (8004270 <HAL_I2S_Init+0x278>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d101      	bne.n	800419c <HAL_I2S_Init+0x1a4>
 8004198:	4b36      	ldr	r3, [pc, #216]	; (8004274 <HAL_I2S_Init+0x27c>)
 800419a:	e001      	b.n	80041a0 <HAL_I2S_Init+0x1a8>
 800419c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80041a0:	69db      	ldr	r3, [r3, #28]
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	6812      	ldr	r2, [r2, #0]
 80041a6:	4932      	ldr	r1, [pc, #200]	; (8004270 <HAL_I2S_Init+0x278>)
 80041a8:	428a      	cmp	r2, r1
 80041aa:	d101      	bne.n	80041b0 <HAL_I2S_Init+0x1b8>
 80041ac:	4a31      	ldr	r2, [pc, #196]	; (8004274 <HAL_I2S_Init+0x27c>)
 80041ae:	e001      	b.n	80041b4 <HAL_I2S_Init+0x1bc>
 80041b0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80041b4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80041b8:	f023 030f 	bic.w	r3, r3, #15
 80041bc:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a2b      	ldr	r2, [pc, #172]	; (8004270 <HAL_I2S_Init+0x278>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d101      	bne.n	80041cc <HAL_I2S_Init+0x1d4>
 80041c8:	4b2a      	ldr	r3, [pc, #168]	; (8004274 <HAL_I2S_Init+0x27c>)
 80041ca:	e001      	b.n	80041d0 <HAL_I2S_Init+0x1d8>
 80041cc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80041d0:	2202      	movs	r2, #2
 80041d2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a25      	ldr	r2, [pc, #148]	; (8004270 <HAL_I2S_Init+0x278>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d101      	bne.n	80041e2 <HAL_I2S_Init+0x1ea>
 80041de:	4b25      	ldr	r3, [pc, #148]	; (8004274 <HAL_I2S_Init+0x27c>)
 80041e0:	e001      	b.n	80041e6 <HAL_I2S_Init+0x1ee>
 80041e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80041e6:	69db      	ldr	r3, [r3, #28]
 80041e8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041f2:	d003      	beq.n	80041fc <HAL_I2S_Init+0x204>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d103      	bne.n	8004204 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80041fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004200:	613b      	str	r3, [r7, #16]
 8004202:	e001      	b.n	8004208 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004204:	2300      	movs	r3, #0
 8004206:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	b299      	uxth	r1, r3
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	68db      	ldr	r3, [r3, #12]
 8004216:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	699b      	ldr	r3, [r3, #24]
 800421c:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800421e:	4303      	orrs	r3, r0
 8004220:	b29b      	uxth	r3, r3
 8004222:	430b      	orrs	r3, r1
 8004224:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8004226:	4313      	orrs	r3, r2
 8004228:	b29a      	uxth	r2, r3
 800422a:	897b      	ldrh	r3, [r7, #10]
 800422c:	4313      	orrs	r3, r2
 800422e:	b29b      	uxth	r3, r3
 8004230:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004234:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a0d      	ldr	r2, [pc, #52]	; (8004270 <HAL_I2S_Init+0x278>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d101      	bne.n	8004244 <HAL_I2S_Init+0x24c>
 8004240:	4b0c      	ldr	r3, [pc, #48]	; (8004274 <HAL_I2S_Init+0x27c>)
 8004242:	e001      	b.n	8004248 <HAL_I2S_Init+0x250>
 8004244:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004248:	897a      	ldrh	r2, [r7, #10]
 800424a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2200      	movs	r2, #0
 8004250:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2201      	movs	r2, #1
 8004256:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800425a:	2300      	movs	r3, #0
}
 800425c:	4618      	mov	r0, r3
 800425e:	3720      	adds	r7, #32
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}
 8004264:	08004589 	.word	0x08004589
 8004268:	cccccccd 	.word	0xcccccccd
 800426c:	0800469d 	.word	0x0800469d
 8004270:	40003800 	.word	0x40003800
 8004274:	40003400 	.word	0x40003400

08004278 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b086      	sub	sp, #24
 800427c:	af00      	add	r7, sp, #0
 800427e:	60f8      	str	r0, [r7, #12]
 8004280:	60b9      	str	r1, [r7, #8]
 8004282:	4613      	mov	r3, r2
 8004284:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d002      	beq.n	8004292 <HAL_I2S_Transmit_DMA+0x1a>
 800428c:	88fb      	ldrh	r3, [r7, #6]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d101      	bne.n	8004296 <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e08e      	b.n	80043b4 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800429c:	b2db      	uxtb	r3, r3
 800429e:	2b01      	cmp	r3, #1
 80042a0:	d101      	bne.n	80042a6 <HAL_I2S_Transmit_DMA+0x2e>
 80042a2:	2302      	movs	r3, #2
 80042a4:	e086      	b.n	80043b4 <HAL_I2S_Transmit_DMA+0x13c>
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2201      	movs	r2, #1
 80042aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d005      	beq.n	80042c6 <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2200      	movs	r2, #0
 80042be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 80042c2:	2302      	movs	r3, #2
 80042c4:	e076      	b.n	80043b4 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2203      	movs	r2, #3
 80042ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2200      	movs	r2, #0
 80042d2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	68ba      	ldr	r2, [r7, #8]
 80042d8:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	69db      	ldr	r3, [r3, #28]
 80042e0:	f003 0307 	and.w	r3, r3, #7
 80042e4:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	2b03      	cmp	r3, #3
 80042ea:	d002      	beq.n	80042f2 <HAL_I2S_Transmit_DMA+0x7a>
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	2b05      	cmp	r3, #5
 80042f0:	d10a      	bne.n	8004308 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 80042f2:	88fb      	ldrh	r3, [r7, #6]
 80042f4:	005b      	lsls	r3, r3, #1
 80042f6:	b29a      	uxth	r2, r3
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 80042fc:	88fb      	ldrh	r3, [r7, #6]
 80042fe:	005b      	lsls	r3, r3, #1
 8004300:	b29a      	uxth	r2, r3
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004306:	e005      	b.n	8004314 <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	88fa      	ldrh	r2, [r7, #6]
 800430c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	88fa      	ldrh	r2, [r7, #6]
 8004312:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004318:	4a28      	ldr	r2, [pc, #160]	; (80043bc <HAL_I2S_Transmit_DMA+0x144>)
 800431a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004320:	4a27      	ldr	r2, [pc, #156]	; (80043c0 <HAL_I2S_Transmit_DMA+0x148>)
 8004322:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004328:	4a26      	ldr	r2, [pc, #152]	; (80043c4 <HAL_I2S_Transmit_DMA+0x14c>)
 800432a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx, (uint32_t)hi2s->pTxBuffPtr, (uint32_t)&hi2s->Instance->DR, hi2s->TxXferSize))
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004334:	4619      	mov	r1, r3
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	330c      	adds	r3, #12
 800433c:	461a      	mov	r2, r3
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004342:	b29b      	uxth	r3, r3
 8004344:	f7fd f882 	bl	800144c <HAL_DMA_Start_IT>
 8004348:	4603      	mov	r3, r0
 800434a:	2b00      	cmp	r3, #0
 800434c:	d00f      	beq.n	800436e <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004352:	f043 0208 	orr.w	r2, r3, #8
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2201      	movs	r2, #1
 800435e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2200      	movs	r2, #0
 8004366:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e022      	b.n	80043b4 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	69db      	ldr	r3, [r3, #28]
 8004374:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004378:	2b00      	cmp	r3, #0
 800437a:	d107      	bne.n	800438c <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	69da      	ldr	r2, [r3, #28]
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800438a:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	f003 0302 	and.w	r3, r3, #2
 8004396:	2b00      	cmp	r3, #0
 8004398:	d107      	bne.n	80043aa <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	685a      	ldr	r2, [r3, #4]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f042 0202 	orr.w	r2, r2, #2
 80043a8:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2200      	movs	r2, #0
 80043ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 80043b2:	2300      	movs	r3, #0
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3718      	adds	r7, #24
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}
 80043bc:	08004467 	.word	0x08004467
 80043c0:	08004425 	.word	0x08004425
 80043c4:	08004483 	.word	0x08004483

080043c8 <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b082      	sub	sp, #8
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  /* Call the IrqHandler ISR set during HAL_I2S_INIT */
  hi2s->IrqHandlerISR(hi2s);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	4798      	blx	r3
}
 80043d8:	bf00      	nop
 80043da:	3708      	adds	r7, #8
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}

080043e0 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b083      	sub	sp, #12
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80043e8:	bf00      	nop
 80043ea:	370c      	adds	r7, #12
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr

080043f4 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b083      	sub	sp, #12
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80043fc:	bf00      	nop
 80043fe:	370c      	adds	r7, #12
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr

08004408 <HAL_I2S_GetState>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL state
  */
HAL_I2S_StateTypeDef HAL_I2S_GetState(I2S_HandleTypeDef *hi2s)
{
 8004408:	b480      	push	{r7}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  return hi2s->State;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004416:	b2db      	uxtb	r3, r3
}
 8004418:	4618      	mov	r0, r3
 800441a:	370c      	adds	r7, #12
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b084      	sub	sp, #16
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004430:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	69db      	ldr	r3, [r3, #28]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d10e      	bne.n	8004458 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	685a      	ldr	r2, [r3, #4]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f022 0202 	bic.w	r2, r2, #2
 8004448:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2200      	movs	r2, #0
 800444e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2201      	movs	r2, #1
 8004454:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8004458:	68f8      	ldr	r0, [r7, #12]
 800445a:	f00d f917 	bl	801168c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800445e:	bf00      	nop
 8004460:	3710      	adds	r7, #16
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}

08004466 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004466:	b580      	push	{r7, lr}
 8004468:	b084      	sub	sp, #16
 800446a:	af00      	add	r7, sp, #0
 800446c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004472:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8004474:	68f8      	ldr	r0, [r7, #12]
 8004476:	f00d f91b 	bl	80116b0 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800447a:	bf00      	nop
 800447c:	3710      	adds	r7, #16
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}

08004482 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8004482:	b580      	push	{r7, lr}
 8004484:	b084      	sub	sp, #16
 8004486:	af00      	add	r7, sp, #0
 8004488:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800448e:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	685a      	ldr	r2, [r3, #4]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f022 0203 	bic.w	r2, r2, #3
 800449e:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2200      	movs	r2, #0
 80044a4:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2200      	movs	r2, #0
 80044aa:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044b8:	f043 0208 	orr.w	r2, r3, #8
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80044c0:	68f8      	ldr	r0, [r7, #12]
 80044c2:	f7ff ff97 	bl	80043f4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80044c6:	bf00      	nop
 80044c8:	3710      	adds	r7, #16
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}

080044ce <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80044ce:	b580      	push	{r7, lr}
 80044d0:	b082      	sub	sp, #8
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044da:	881a      	ldrh	r2, [r3, #0]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e6:	1c9a      	adds	r2, r3, #2
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	3b01      	subs	r3, #1
 80044f4:	b29a      	uxth	r2, r3
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044fe:	b29b      	uxth	r3, r3
 8004500:	2b00      	cmp	r3, #0
 8004502:	d10e      	bne.n	8004522 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	685a      	ldr	r2, [r3, #4]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004512:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2201      	movs	r2, #1
 8004518:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f00d f8b5 	bl	801168c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004522:	bf00      	nop
 8004524:	3708      	adds	r7, #8
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}

0800452a <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800452a:	b580      	push	{r7, lr}
 800452c:	b082      	sub	sp, #8
 800452e:	af00      	add	r7, sp, #0
 8004530:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	68da      	ldr	r2, [r3, #12]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800453c:	b292      	uxth	r2, r2
 800453e:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004544:	1c9a      	adds	r2, r3, #2
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800454e:	b29b      	uxth	r3, r3
 8004550:	3b01      	subs	r3, #1
 8004552:	b29a      	uxth	r2, r3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800455c:	b29b      	uxth	r3, r3
 800455e:	2b00      	cmp	r3, #0
 8004560:	d10e      	bne.n	8004580 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	685a      	ldr	r2, [r3, #4]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004570:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2201      	movs	r2, #1
 8004576:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f7ff ff30 	bl	80043e0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004580:	bf00      	nop
 8004582:	3708      	adds	r7, #8
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}

08004588 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b086      	sub	sp, #24
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	2b04      	cmp	r3, #4
 80045a2:	d13a      	bne.n	800461a <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	f003 0301 	and.w	r3, r3, #1
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d109      	bne.n	80045c2 <I2S_IRQHandler+0x3a>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045b8:	2b40      	cmp	r3, #64	; 0x40
 80045ba:	d102      	bne.n	80045c2 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f7ff ffb4 	bl	800452a <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045c8:	2b40      	cmp	r3, #64	; 0x40
 80045ca:	d126      	bne.n	800461a <I2S_IRQHandler+0x92>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	f003 0320 	and.w	r3, r3, #32
 80045d6:	2b20      	cmp	r3, #32
 80045d8:	d11f      	bne.n	800461a <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	685a      	ldr	r2, [r3, #4]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80045e8:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80045ea:	2300      	movs	r3, #0
 80045ec:	613b      	str	r3, [r7, #16]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	68db      	ldr	r3, [r3, #12]
 80045f4:	613b      	str	r3, [r7, #16]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	613b      	str	r3, [r7, #16]
 80045fe:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2201      	movs	r2, #1
 8004604:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800460c:	f043 0202 	orr.w	r2, r3, #2
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f7ff feed 	bl	80043f4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004620:	b2db      	uxtb	r3, r3
 8004622:	2b03      	cmp	r3, #3
 8004624:	d136      	bne.n	8004694 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	f003 0302 	and.w	r3, r3, #2
 800462c:	2b02      	cmp	r3, #2
 800462e:	d109      	bne.n	8004644 <I2S_IRQHandler+0xbc>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800463a:	2b80      	cmp	r3, #128	; 0x80
 800463c:	d102      	bne.n	8004644 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f7ff ff45 	bl	80044ce <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	f003 0308 	and.w	r3, r3, #8
 800464a:	2b08      	cmp	r3, #8
 800464c:	d122      	bne.n	8004694 <I2S_IRQHandler+0x10c>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	f003 0320 	and.w	r3, r3, #32
 8004658:	2b20      	cmp	r3, #32
 800465a:	d11b      	bne.n	8004694 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	685a      	ldr	r2, [r3, #4]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800466a:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800466c:	2300      	movs	r3, #0
 800466e:	60fb      	str	r3, [r7, #12]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	60fb      	str	r3, [r7, #12]
 8004678:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2201      	movs	r2, #1
 800467e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004686:	f043 0204 	orr.w	r2, r3, #4
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f7ff feb0 	bl	80043f4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004694:	bf00      	nop
 8004696:	3718      	adds	r7, #24
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}

0800469c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b088      	sub	sp, #32
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4aa2      	ldr	r2, [pc, #648]	; (800493c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d101      	bne.n	80046ba <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80046b6:	4ba2      	ldr	r3, [pc, #648]	; (8004940 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80046b8:	e001      	b.n	80046be <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80046ba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a9b      	ldr	r2, [pc, #620]	; (800493c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d101      	bne.n	80046d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80046d4:	4b9a      	ldr	r3, [pc, #616]	; (8004940 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80046d6:	e001      	b.n	80046dc <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80046d8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046e8:	d004      	beq.n	80046f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	f040 8099 	bne.w	8004826 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80046f4:	69fb      	ldr	r3, [r7, #28]
 80046f6:	f003 0302 	and.w	r3, r3, #2
 80046fa:	2b02      	cmp	r3, #2
 80046fc:	d107      	bne.n	800470e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004704:	2b00      	cmp	r3, #0
 8004706:	d002      	beq.n	800470e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f000 f925 	bl	8004958 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800470e:	69bb      	ldr	r3, [r7, #24]
 8004710:	f003 0301 	and.w	r3, r3, #1
 8004714:	2b01      	cmp	r3, #1
 8004716:	d107      	bne.n	8004728 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800471e:	2b00      	cmp	r3, #0
 8004720:	d002      	beq.n	8004728 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f000 f9c8 	bl	8004ab8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004728:	69bb      	ldr	r3, [r7, #24]
 800472a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800472e:	2b40      	cmp	r3, #64	; 0x40
 8004730:	d13a      	bne.n	80047a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	f003 0320 	and.w	r3, r3, #32
 8004738:	2b00      	cmp	r3, #0
 800473a:	d035      	beq.n	80047a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a7e      	ldr	r2, [pc, #504]	; (800493c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d101      	bne.n	800474a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004746:	4b7e      	ldr	r3, [pc, #504]	; (8004940 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004748:	e001      	b.n	800474e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800474a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800474e:	685a      	ldr	r2, [r3, #4]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4979      	ldr	r1, [pc, #484]	; (800493c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004756:	428b      	cmp	r3, r1
 8004758:	d101      	bne.n	800475e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800475a:	4b79      	ldr	r3, [pc, #484]	; (8004940 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800475c:	e001      	b.n	8004762 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800475e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004762:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004766:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	685a      	ldr	r2, [r3, #4]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004776:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004778:	2300      	movs	r3, #0
 800477a:	60fb      	str	r3, [r7, #12]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	60fb      	str	r3, [r7, #12]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	60fb      	str	r3, [r7, #12]
 800478c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2201      	movs	r2, #1
 8004792:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800479a:	f043 0202 	orr.w	r2, r3, #2
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f7ff fe26 	bl	80043f4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80047a8:	69fb      	ldr	r3, [r7, #28]
 80047aa:	f003 0308 	and.w	r3, r3, #8
 80047ae:	2b08      	cmp	r3, #8
 80047b0:	f040 80be 	bne.w	8004930 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	f003 0320 	and.w	r3, r3, #32
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	f000 80b8 	beq.w	8004930 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	685a      	ldr	r2, [r3, #4]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80047ce:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a59      	ldr	r2, [pc, #356]	; (800493c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d101      	bne.n	80047de <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80047da:	4b59      	ldr	r3, [pc, #356]	; (8004940 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80047dc:	e001      	b.n	80047e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80047de:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80047e2:	685a      	ldr	r2, [r3, #4]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4954      	ldr	r1, [pc, #336]	; (800493c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80047ea:	428b      	cmp	r3, r1
 80047ec:	d101      	bne.n	80047f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80047ee:	4b54      	ldr	r3, [pc, #336]	; (8004940 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80047f0:	e001      	b.n	80047f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80047f2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80047f6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80047fa:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80047fc:	2300      	movs	r3, #0
 80047fe:	60bb      	str	r3, [r7, #8]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	60bb      	str	r3, [r7, #8]
 8004808:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2201      	movs	r2, #1
 800480e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004816:	f043 0204 	orr.w	r2, r3, #4
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f7ff fde8 	bl	80043f4 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004824:	e084      	b.n	8004930 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004826:	69bb      	ldr	r3, [r7, #24]
 8004828:	f003 0302 	and.w	r3, r3, #2
 800482c:	2b02      	cmp	r3, #2
 800482e:	d107      	bne.n	8004840 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004836:	2b00      	cmp	r3, #0
 8004838:	d002      	beq.n	8004840 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f000 f8be 	bl	80049bc <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004840:	69fb      	ldr	r3, [r7, #28]
 8004842:	f003 0301 	and.w	r3, r3, #1
 8004846:	2b01      	cmp	r3, #1
 8004848:	d107      	bne.n	800485a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004850:	2b00      	cmp	r3, #0
 8004852:	d002      	beq.n	800485a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f000 f8fd 	bl	8004a54 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800485a:	69fb      	ldr	r3, [r7, #28]
 800485c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004860:	2b40      	cmp	r3, #64	; 0x40
 8004862:	d12f      	bne.n	80048c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	f003 0320 	and.w	r3, r3, #32
 800486a:	2b00      	cmp	r3, #0
 800486c:	d02a      	beq.n	80048c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	685a      	ldr	r2, [r3, #4]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800487c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a2e      	ldr	r2, [pc, #184]	; (800493c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d101      	bne.n	800488c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004888:	4b2d      	ldr	r3, [pc, #180]	; (8004940 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800488a:	e001      	b.n	8004890 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800488c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004890:	685a      	ldr	r2, [r3, #4]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4929      	ldr	r1, [pc, #164]	; (800493c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004898:	428b      	cmp	r3, r1
 800489a:	d101      	bne.n	80048a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800489c:	4b28      	ldr	r3, [pc, #160]	; (8004940 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800489e:	e001      	b.n	80048a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80048a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80048a4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80048a8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2201      	movs	r2, #1
 80048ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048b6:	f043 0202 	orr.w	r2, r3, #2
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f7ff fd98 	bl	80043f4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80048c4:	69bb      	ldr	r3, [r7, #24]
 80048c6:	f003 0308 	and.w	r3, r3, #8
 80048ca:	2b08      	cmp	r3, #8
 80048cc:	d131      	bne.n	8004932 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	f003 0320 	and.w	r3, r3, #32
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d02c      	beq.n	8004932 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a17      	ldr	r2, [pc, #92]	; (800493c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d101      	bne.n	80048e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80048e2:	4b17      	ldr	r3, [pc, #92]	; (8004940 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80048e4:	e001      	b.n	80048ea <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80048e6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80048ea:	685a      	ldr	r2, [r3, #4]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4912      	ldr	r1, [pc, #72]	; (800493c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80048f2:	428b      	cmp	r3, r1
 80048f4:	d101      	bne.n	80048fa <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80048f6:	4b12      	ldr	r3, [pc, #72]	; (8004940 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80048f8:	e001      	b.n	80048fe <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80048fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80048fe:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004902:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	685a      	ldr	r2, [r3, #4]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004912:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2201      	movs	r2, #1
 8004918:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004920:	f043 0204 	orr.w	r2, r3, #4
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	f7ff fd63 	bl	80043f4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800492e:	e000      	b.n	8004932 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004930:	bf00      	nop
}
 8004932:	bf00      	nop
 8004934:	3720      	adds	r7, #32
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}
 800493a:	bf00      	nop
 800493c:	40003800 	.word	0x40003800
 8004940:	40003400 	.word	0x40003400

08004944 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004944:	b480      	push	{r7}
 8004946:	b083      	sub	sp, #12
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800494c:	bf00      	nop
 800494e:	370c      	adds	r7, #12
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr

08004958 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b082      	sub	sp, #8
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004964:	1c99      	adds	r1, r3, #2
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	6251      	str	r1, [r2, #36]	; 0x24
 800496a:	881a      	ldrh	r2, [r3, #0]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004976:	b29b      	uxth	r3, r3
 8004978:	3b01      	subs	r3, #1
 800497a:	b29a      	uxth	r2, r3
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004984:	b29b      	uxth	r3, r3
 8004986:	2b00      	cmp	r3, #0
 8004988:	d113      	bne.n	80049b2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	685a      	ldr	r2, [r3, #4]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004998:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800499e:	b29b      	uxth	r3, r3
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d106      	bne.n	80049b2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2201      	movs	r2, #1
 80049a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80049ac:	6878      	ldr	r0, [r7, #4]
 80049ae:	f7ff ffc9 	bl	8004944 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80049b2:	bf00      	nop
 80049b4:	3708      	adds	r7, #8
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}
	...

080049bc <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b082      	sub	sp, #8
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c8:	1c99      	adds	r1, r3, #2
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	6251      	str	r1, [r2, #36]	; 0x24
 80049ce:	8819      	ldrh	r1, [r3, #0]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a1d      	ldr	r2, [pc, #116]	; (8004a4c <I2SEx_TxISR_I2SExt+0x90>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d101      	bne.n	80049de <I2SEx_TxISR_I2SExt+0x22>
 80049da:	4b1d      	ldr	r3, [pc, #116]	; (8004a50 <I2SEx_TxISR_I2SExt+0x94>)
 80049dc:	e001      	b.n	80049e2 <I2SEx_TxISR_I2SExt+0x26>
 80049de:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80049e2:	460a      	mov	r2, r1
 80049e4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	3b01      	subs	r3, #1
 80049ee:	b29a      	uxth	r2, r3
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049f8:	b29b      	uxth	r3, r3
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d121      	bne.n	8004a42 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a12      	ldr	r2, [pc, #72]	; (8004a4c <I2SEx_TxISR_I2SExt+0x90>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d101      	bne.n	8004a0c <I2SEx_TxISR_I2SExt+0x50>
 8004a08:	4b11      	ldr	r3, [pc, #68]	; (8004a50 <I2SEx_TxISR_I2SExt+0x94>)
 8004a0a:	e001      	b.n	8004a10 <I2SEx_TxISR_I2SExt+0x54>
 8004a0c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a10:	685a      	ldr	r2, [r3, #4]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	490d      	ldr	r1, [pc, #52]	; (8004a4c <I2SEx_TxISR_I2SExt+0x90>)
 8004a18:	428b      	cmp	r3, r1
 8004a1a:	d101      	bne.n	8004a20 <I2SEx_TxISR_I2SExt+0x64>
 8004a1c:	4b0c      	ldr	r3, [pc, #48]	; (8004a50 <I2SEx_TxISR_I2SExt+0x94>)
 8004a1e:	e001      	b.n	8004a24 <I2SEx_TxISR_I2SExt+0x68>
 8004a20:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a24:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004a28:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d106      	bne.n	8004a42 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f7ff ff81 	bl	8004944 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004a42:	bf00      	nop
 8004a44:	3708      	adds	r7, #8
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}
 8004a4a:	bf00      	nop
 8004a4c:	40003800 	.word	0x40003800
 8004a50:	40003400 	.word	0x40003400

08004a54 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b082      	sub	sp, #8
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	68d8      	ldr	r0, [r3, #12]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a66:	1c99      	adds	r1, r3, #2
 8004a68:	687a      	ldr	r2, [r7, #4]
 8004a6a:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004a6c:	b282      	uxth	r2, r0
 8004a6e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	3b01      	subs	r3, #1
 8004a78:	b29a      	uxth	r2, r3
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004a82:	b29b      	uxth	r3, r3
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d113      	bne.n	8004ab0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	685a      	ldr	r2, [r3, #4]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004a96:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d106      	bne.n	8004ab0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f7ff ff4a 	bl	8004944 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004ab0:	bf00      	nop
 8004ab2:	3708      	adds	r7, #8
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}

08004ab8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b082      	sub	sp, #8
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a20      	ldr	r2, [pc, #128]	; (8004b48 <I2SEx_RxISR_I2SExt+0x90>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d101      	bne.n	8004ace <I2SEx_RxISR_I2SExt+0x16>
 8004aca:	4b20      	ldr	r3, [pc, #128]	; (8004b4c <I2SEx_RxISR_I2SExt+0x94>)
 8004acc:	e001      	b.n	8004ad2 <I2SEx_RxISR_I2SExt+0x1a>
 8004ace:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ad2:	68d8      	ldr	r0, [r3, #12]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad8:	1c99      	adds	r1, r3, #2
 8004ada:	687a      	ldr	r2, [r7, #4]
 8004adc:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004ade:	b282      	uxth	r2, r0
 8004ae0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	3b01      	subs	r3, #1
 8004aea:	b29a      	uxth	r2, r3
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d121      	bne.n	8004b3e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a12      	ldr	r2, [pc, #72]	; (8004b48 <I2SEx_RxISR_I2SExt+0x90>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d101      	bne.n	8004b08 <I2SEx_RxISR_I2SExt+0x50>
 8004b04:	4b11      	ldr	r3, [pc, #68]	; (8004b4c <I2SEx_RxISR_I2SExt+0x94>)
 8004b06:	e001      	b.n	8004b0c <I2SEx_RxISR_I2SExt+0x54>
 8004b08:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b0c:	685a      	ldr	r2, [r3, #4]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	490d      	ldr	r1, [pc, #52]	; (8004b48 <I2SEx_RxISR_I2SExt+0x90>)
 8004b14:	428b      	cmp	r3, r1
 8004b16:	d101      	bne.n	8004b1c <I2SEx_RxISR_I2SExt+0x64>
 8004b18:	4b0c      	ldr	r3, [pc, #48]	; (8004b4c <I2SEx_RxISR_I2SExt+0x94>)
 8004b1a:	e001      	b.n	8004b20 <I2SEx_RxISR_I2SExt+0x68>
 8004b1c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b20:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004b24:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d106      	bne.n	8004b3e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2201      	movs	r2, #1
 8004b34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	f7ff ff03 	bl	8004944 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004b3e:	bf00      	nop
 8004b40:	3708      	adds	r7, #8
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}
 8004b46:	bf00      	nop
 8004b48:	40003800 	.word	0x40003800
 8004b4c:	40003400 	.word	0x40003400

08004b50 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b086      	sub	sp, #24
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d101      	bne.n	8004b62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e22d      	b.n	8004fbe <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f003 0301 	and.w	r3, r3, #1
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d075      	beq.n	8004c5a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004b6e:	4ba3      	ldr	r3, [pc, #652]	; (8004dfc <HAL_RCC_OscConfig+0x2ac>)
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	f003 030c 	and.w	r3, r3, #12
 8004b76:	2b04      	cmp	r3, #4
 8004b78:	d00c      	beq.n	8004b94 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b7a:	4ba0      	ldr	r3, [pc, #640]	; (8004dfc <HAL_RCC_OscConfig+0x2ac>)
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004b82:	2b08      	cmp	r3, #8
 8004b84:	d112      	bne.n	8004bac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b86:	4b9d      	ldr	r3, [pc, #628]	; (8004dfc <HAL_RCC_OscConfig+0x2ac>)
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b92:	d10b      	bne.n	8004bac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b94:	4b99      	ldr	r3, [pc, #612]	; (8004dfc <HAL_RCC_OscConfig+0x2ac>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d05b      	beq.n	8004c58 <HAL_RCC_OscConfig+0x108>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d157      	bne.n	8004c58 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	e208      	b.n	8004fbe <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bb4:	d106      	bne.n	8004bc4 <HAL_RCC_OscConfig+0x74>
 8004bb6:	4b91      	ldr	r3, [pc, #580]	; (8004dfc <HAL_RCC_OscConfig+0x2ac>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a90      	ldr	r2, [pc, #576]	; (8004dfc <HAL_RCC_OscConfig+0x2ac>)
 8004bbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bc0:	6013      	str	r3, [r2, #0]
 8004bc2:	e01d      	b.n	8004c00 <HAL_RCC_OscConfig+0xb0>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004bcc:	d10c      	bne.n	8004be8 <HAL_RCC_OscConfig+0x98>
 8004bce:	4b8b      	ldr	r3, [pc, #556]	; (8004dfc <HAL_RCC_OscConfig+0x2ac>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a8a      	ldr	r2, [pc, #552]	; (8004dfc <HAL_RCC_OscConfig+0x2ac>)
 8004bd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004bd8:	6013      	str	r3, [r2, #0]
 8004bda:	4b88      	ldr	r3, [pc, #544]	; (8004dfc <HAL_RCC_OscConfig+0x2ac>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a87      	ldr	r2, [pc, #540]	; (8004dfc <HAL_RCC_OscConfig+0x2ac>)
 8004be0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004be4:	6013      	str	r3, [r2, #0]
 8004be6:	e00b      	b.n	8004c00 <HAL_RCC_OscConfig+0xb0>
 8004be8:	4b84      	ldr	r3, [pc, #528]	; (8004dfc <HAL_RCC_OscConfig+0x2ac>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a83      	ldr	r2, [pc, #524]	; (8004dfc <HAL_RCC_OscConfig+0x2ac>)
 8004bee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bf2:	6013      	str	r3, [r2, #0]
 8004bf4:	4b81      	ldr	r3, [pc, #516]	; (8004dfc <HAL_RCC_OscConfig+0x2ac>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a80      	ldr	r2, [pc, #512]	; (8004dfc <HAL_RCC_OscConfig+0x2ac>)
 8004bfa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004bfe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d013      	beq.n	8004c30 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c08:	f7fc fa04 	bl	8001014 <HAL_GetTick>
 8004c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c0e:	e008      	b.n	8004c22 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c10:	f7fc fa00 	bl	8001014 <HAL_GetTick>
 8004c14:	4602      	mov	r2, r0
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	2b64      	cmp	r3, #100	; 0x64
 8004c1c:	d901      	bls.n	8004c22 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004c1e:	2303      	movs	r3, #3
 8004c20:	e1cd      	b.n	8004fbe <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c22:	4b76      	ldr	r3, [pc, #472]	; (8004dfc <HAL_RCC_OscConfig+0x2ac>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d0f0      	beq.n	8004c10 <HAL_RCC_OscConfig+0xc0>
 8004c2e:	e014      	b.n	8004c5a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c30:	f7fc f9f0 	bl	8001014 <HAL_GetTick>
 8004c34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c36:	e008      	b.n	8004c4a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c38:	f7fc f9ec 	bl	8001014 <HAL_GetTick>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	1ad3      	subs	r3, r2, r3
 8004c42:	2b64      	cmp	r3, #100	; 0x64
 8004c44:	d901      	bls.n	8004c4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004c46:	2303      	movs	r3, #3
 8004c48:	e1b9      	b.n	8004fbe <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c4a:	4b6c      	ldr	r3, [pc, #432]	; (8004dfc <HAL_RCC_OscConfig+0x2ac>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d1f0      	bne.n	8004c38 <HAL_RCC_OscConfig+0xe8>
 8004c56:	e000      	b.n	8004c5a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f003 0302 	and.w	r3, r3, #2
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d063      	beq.n	8004d2e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004c66:	4b65      	ldr	r3, [pc, #404]	; (8004dfc <HAL_RCC_OscConfig+0x2ac>)
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	f003 030c 	and.w	r3, r3, #12
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d00b      	beq.n	8004c8a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c72:	4b62      	ldr	r3, [pc, #392]	; (8004dfc <HAL_RCC_OscConfig+0x2ac>)
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004c7a:	2b08      	cmp	r3, #8
 8004c7c:	d11c      	bne.n	8004cb8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c7e:	4b5f      	ldr	r3, [pc, #380]	; (8004dfc <HAL_RCC_OscConfig+0x2ac>)
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d116      	bne.n	8004cb8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c8a:	4b5c      	ldr	r3, [pc, #368]	; (8004dfc <HAL_RCC_OscConfig+0x2ac>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 0302 	and.w	r3, r3, #2
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d005      	beq.n	8004ca2 <HAL_RCC_OscConfig+0x152>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d001      	beq.n	8004ca2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e18d      	b.n	8004fbe <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ca2:	4b56      	ldr	r3, [pc, #344]	; (8004dfc <HAL_RCC_OscConfig+0x2ac>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	691b      	ldr	r3, [r3, #16]
 8004cae:	00db      	lsls	r3, r3, #3
 8004cb0:	4952      	ldr	r1, [pc, #328]	; (8004dfc <HAL_RCC_OscConfig+0x2ac>)
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cb6:	e03a      	b.n	8004d2e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d020      	beq.n	8004d02 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004cc0:	4b4f      	ldr	r3, [pc, #316]	; (8004e00 <HAL_RCC_OscConfig+0x2b0>)
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cc6:	f7fc f9a5 	bl	8001014 <HAL_GetTick>
 8004cca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ccc:	e008      	b.n	8004ce0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004cce:	f7fc f9a1 	bl	8001014 <HAL_GetTick>
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	1ad3      	subs	r3, r2, r3
 8004cd8:	2b02      	cmp	r3, #2
 8004cda:	d901      	bls.n	8004ce0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004cdc:	2303      	movs	r3, #3
 8004cde:	e16e      	b.n	8004fbe <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ce0:	4b46      	ldr	r3, [pc, #280]	; (8004dfc <HAL_RCC_OscConfig+0x2ac>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 0302 	and.w	r3, r3, #2
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d0f0      	beq.n	8004cce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cec:	4b43      	ldr	r3, [pc, #268]	; (8004dfc <HAL_RCC_OscConfig+0x2ac>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	691b      	ldr	r3, [r3, #16]
 8004cf8:	00db      	lsls	r3, r3, #3
 8004cfa:	4940      	ldr	r1, [pc, #256]	; (8004dfc <HAL_RCC_OscConfig+0x2ac>)
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	600b      	str	r3, [r1, #0]
 8004d00:	e015      	b.n	8004d2e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d02:	4b3f      	ldr	r3, [pc, #252]	; (8004e00 <HAL_RCC_OscConfig+0x2b0>)
 8004d04:	2200      	movs	r2, #0
 8004d06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d08:	f7fc f984 	bl	8001014 <HAL_GetTick>
 8004d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d0e:	e008      	b.n	8004d22 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d10:	f7fc f980 	bl	8001014 <HAL_GetTick>
 8004d14:	4602      	mov	r2, r0
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	2b02      	cmp	r3, #2
 8004d1c:	d901      	bls.n	8004d22 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004d1e:	2303      	movs	r3, #3
 8004d20:	e14d      	b.n	8004fbe <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d22:	4b36      	ldr	r3, [pc, #216]	; (8004dfc <HAL_RCC_OscConfig+0x2ac>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 0302 	and.w	r3, r3, #2
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d1f0      	bne.n	8004d10 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f003 0308 	and.w	r3, r3, #8
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d030      	beq.n	8004d9c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	695b      	ldr	r3, [r3, #20]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d016      	beq.n	8004d70 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d42:	4b30      	ldr	r3, [pc, #192]	; (8004e04 <HAL_RCC_OscConfig+0x2b4>)
 8004d44:	2201      	movs	r2, #1
 8004d46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d48:	f7fc f964 	bl	8001014 <HAL_GetTick>
 8004d4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d4e:	e008      	b.n	8004d62 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d50:	f7fc f960 	bl	8001014 <HAL_GetTick>
 8004d54:	4602      	mov	r2, r0
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	1ad3      	subs	r3, r2, r3
 8004d5a:	2b02      	cmp	r3, #2
 8004d5c:	d901      	bls.n	8004d62 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004d5e:	2303      	movs	r3, #3
 8004d60:	e12d      	b.n	8004fbe <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d62:	4b26      	ldr	r3, [pc, #152]	; (8004dfc <HAL_RCC_OscConfig+0x2ac>)
 8004d64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d66:	f003 0302 	and.w	r3, r3, #2
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d0f0      	beq.n	8004d50 <HAL_RCC_OscConfig+0x200>
 8004d6e:	e015      	b.n	8004d9c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d70:	4b24      	ldr	r3, [pc, #144]	; (8004e04 <HAL_RCC_OscConfig+0x2b4>)
 8004d72:	2200      	movs	r2, #0
 8004d74:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d76:	f7fc f94d 	bl	8001014 <HAL_GetTick>
 8004d7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d7c:	e008      	b.n	8004d90 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d7e:	f7fc f949 	bl	8001014 <HAL_GetTick>
 8004d82:	4602      	mov	r2, r0
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	1ad3      	subs	r3, r2, r3
 8004d88:	2b02      	cmp	r3, #2
 8004d8a:	d901      	bls.n	8004d90 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004d8c:	2303      	movs	r3, #3
 8004d8e:	e116      	b.n	8004fbe <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d90:	4b1a      	ldr	r3, [pc, #104]	; (8004dfc <HAL_RCC_OscConfig+0x2ac>)
 8004d92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d94:	f003 0302 	and.w	r3, r3, #2
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d1f0      	bne.n	8004d7e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f003 0304 	and.w	r3, r3, #4
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	f000 80a0 	beq.w	8004eea <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004daa:	2300      	movs	r3, #0
 8004dac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004dae:	4b13      	ldr	r3, [pc, #76]	; (8004dfc <HAL_RCC_OscConfig+0x2ac>)
 8004db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d10f      	bne.n	8004dda <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004dba:	2300      	movs	r3, #0
 8004dbc:	60fb      	str	r3, [r7, #12]
 8004dbe:	4b0f      	ldr	r3, [pc, #60]	; (8004dfc <HAL_RCC_OscConfig+0x2ac>)
 8004dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc2:	4a0e      	ldr	r2, [pc, #56]	; (8004dfc <HAL_RCC_OscConfig+0x2ac>)
 8004dc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dc8:	6413      	str	r3, [r2, #64]	; 0x40
 8004dca:	4b0c      	ldr	r3, [pc, #48]	; (8004dfc <HAL_RCC_OscConfig+0x2ac>)
 8004dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dd2:	60fb      	str	r3, [r7, #12]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dda:	4b0b      	ldr	r3, [pc, #44]	; (8004e08 <HAL_RCC_OscConfig+0x2b8>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d121      	bne.n	8004e2a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004de6:	4b08      	ldr	r3, [pc, #32]	; (8004e08 <HAL_RCC_OscConfig+0x2b8>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a07      	ldr	r2, [pc, #28]	; (8004e08 <HAL_RCC_OscConfig+0x2b8>)
 8004dec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004df0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004df2:	f7fc f90f 	bl	8001014 <HAL_GetTick>
 8004df6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004df8:	e011      	b.n	8004e1e <HAL_RCC_OscConfig+0x2ce>
 8004dfa:	bf00      	nop
 8004dfc:	40023800 	.word	0x40023800
 8004e00:	42470000 	.word	0x42470000
 8004e04:	42470e80 	.word	0x42470e80
 8004e08:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e0c:	f7fc f902 	bl	8001014 <HAL_GetTick>
 8004e10:	4602      	mov	r2, r0
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	1ad3      	subs	r3, r2, r3
 8004e16:	2b02      	cmp	r3, #2
 8004e18:	d901      	bls.n	8004e1e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004e1a:	2303      	movs	r3, #3
 8004e1c:	e0cf      	b.n	8004fbe <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e1e:	4b6a      	ldr	r3, [pc, #424]	; (8004fc8 <HAL_RCC_OscConfig+0x478>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d0f0      	beq.n	8004e0c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d106      	bne.n	8004e40 <HAL_RCC_OscConfig+0x2f0>
 8004e32:	4b66      	ldr	r3, [pc, #408]	; (8004fcc <HAL_RCC_OscConfig+0x47c>)
 8004e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e36:	4a65      	ldr	r2, [pc, #404]	; (8004fcc <HAL_RCC_OscConfig+0x47c>)
 8004e38:	f043 0301 	orr.w	r3, r3, #1
 8004e3c:	6713      	str	r3, [r2, #112]	; 0x70
 8004e3e:	e01c      	b.n	8004e7a <HAL_RCC_OscConfig+0x32a>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	2b05      	cmp	r3, #5
 8004e46:	d10c      	bne.n	8004e62 <HAL_RCC_OscConfig+0x312>
 8004e48:	4b60      	ldr	r3, [pc, #384]	; (8004fcc <HAL_RCC_OscConfig+0x47c>)
 8004e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e4c:	4a5f      	ldr	r2, [pc, #380]	; (8004fcc <HAL_RCC_OscConfig+0x47c>)
 8004e4e:	f043 0304 	orr.w	r3, r3, #4
 8004e52:	6713      	str	r3, [r2, #112]	; 0x70
 8004e54:	4b5d      	ldr	r3, [pc, #372]	; (8004fcc <HAL_RCC_OscConfig+0x47c>)
 8004e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e58:	4a5c      	ldr	r2, [pc, #368]	; (8004fcc <HAL_RCC_OscConfig+0x47c>)
 8004e5a:	f043 0301 	orr.w	r3, r3, #1
 8004e5e:	6713      	str	r3, [r2, #112]	; 0x70
 8004e60:	e00b      	b.n	8004e7a <HAL_RCC_OscConfig+0x32a>
 8004e62:	4b5a      	ldr	r3, [pc, #360]	; (8004fcc <HAL_RCC_OscConfig+0x47c>)
 8004e64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e66:	4a59      	ldr	r2, [pc, #356]	; (8004fcc <HAL_RCC_OscConfig+0x47c>)
 8004e68:	f023 0301 	bic.w	r3, r3, #1
 8004e6c:	6713      	str	r3, [r2, #112]	; 0x70
 8004e6e:	4b57      	ldr	r3, [pc, #348]	; (8004fcc <HAL_RCC_OscConfig+0x47c>)
 8004e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e72:	4a56      	ldr	r2, [pc, #344]	; (8004fcc <HAL_RCC_OscConfig+0x47c>)
 8004e74:	f023 0304 	bic.w	r3, r3, #4
 8004e78:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d015      	beq.n	8004eae <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e82:	f7fc f8c7 	bl	8001014 <HAL_GetTick>
 8004e86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e88:	e00a      	b.n	8004ea0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e8a:	f7fc f8c3 	bl	8001014 <HAL_GetTick>
 8004e8e:	4602      	mov	r2, r0
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	1ad3      	subs	r3, r2, r3
 8004e94:	f643 2298 	movw	r2, #15000	; 0x3a98
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d901      	bls.n	8004ea0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004e9c:	2303      	movs	r3, #3
 8004e9e:	e08e      	b.n	8004fbe <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ea0:	4b4a      	ldr	r3, [pc, #296]	; (8004fcc <HAL_RCC_OscConfig+0x47c>)
 8004ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ea4:	f003 0302 	and.w	r3, r3, #2
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d0ee      	beq.n	8004e8a <HAL_RCC_OscConfig+0x33a>
 8004eac:	e014      	b.n	8004ed8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004eae:	f7fc f8b1 	bl	8001014 <HAL_GetTick>
 8004eb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004eb4:	e00a      	b.n	8004ecc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004eb6:	f7fc f8ad 	bl	8001014 <HAL_GetTick>
 8004eba:	4602      	mov	r2, r0
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	1ad3      	subs	r3, r2, r3
 8004ec0:	f643 2298 	movw	r2, #15000	; 0x3a98
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d901      	bls.n	8004ecc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004ec8:	2303      	movs	r3, #3
 8004eca:	e078      	b.n	8004fbe <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ecc:	4b3f      	ldr	r3, [pc, #252]	; (8004fcc <HAL_RCC_OscConfig+0x47c>)
 8004ece:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ed0:	f003 0302 	and.w	r3, r3, #2
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d1ee      	bne.n	8004eb6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ed8:	7dfb      	ldrb	r3, [r7, #23]
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d105      	bne.n	8004eea <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ede:	4b3b      	ldr	r3, [pc, #236]	; (8004fcc <HAL_RCC_OscConfig+0x47c>)
 8004ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee2:	4a3a      	ldr	r2, [pc, #232]	; (8004fcc <HAL_RCC_OscConfig+0x47c>)
 8004ee4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ee8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	699b      	ldr	r3, [r3, #24]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d064      	beq.n	8004fbc <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004ef2:	4b36      	ldr	r3, [pc, #216]	; (8004fcc <HAL_RCC_OscConfig+0x47c>)
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	f003 030c 	and.w	r3, r3, #12
 8004efa:	2b08      	cmp	r3, #8
 8004efc:	d05c      	beq.n	8004fb8 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	699b      	ldr	r3, [r3, #24]
 8004f02:	2b02      	cmp	r3, #2
 8004f04:	d141      	bne.n	8004f8a <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f06:	4b32      	ldr	r3, [pc, #200]	; (8004fd0 <HAL_RCC_OscConfig+0x480>)
 8004f08:	2200      	movs	r2, #0
 8004f0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f0c:	f7fc f882 	bl	8001014 <HAL_GetTick>
 8004f10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f12:	e008      	b.n	8004f26 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f14:	f7fc f87e 	bl	8001014 <HAL_GetTick>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	1ad3      	subs	r3, r2, r3
 8004f1e:	2b02      	cmp	r3, #2
 8004f20:	d901      	bls.n	8004f26 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8004f22:	2303      	movs	r3, #3
 8004f24:	e04b      	b.n	8004fbe <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f26:	4b29      	ldr	r3, [pc, #164]	; (8004fcc <HAL_RCC_OscConfig+0x47c>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d1f0      	bne.n	8004f14 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	69da      	ldr	r2, [r3, #28]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6a1b      	ldr	r3, [r3, #32]
 8004f3a:	431a      	orrs	r2, r3
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f40:	019b      	lsls	r3, r3, #6
 8004f42:	431a      	orrs	r2, r3
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f48:	085b      	lsrs	r3, r3, #1
 8004f4a:	3b01      	subs	r3, #1
 8004f4c:	041b      	lsls	r3, r3, #16
 8004f4e:	431a      	orrs	r2, r3
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f54:	061b      	lsls	r3, r3, #24
 8004f56:	491d      	ldr	r1, [pc, #116]	; (8004fcc <HAL_RCC_OscConfig+0x47c>)
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f5c:	4b1c      	ldr	r3, [pc, #112]	; (8004fd0 <HAL_RCC_OscConfig+0x480>)
 8004f5e:	2201      	movs	r2, #1
 8004f60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f62:	f7fc f857 	bl	8001014 <HAL_GetTick>
 8004f66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f68:	e008      	b.n	8004f7c <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f6a:	f7fc f853 	bl	8001014 <HAL_GetTick>
 8004f6e:	4602      	mov	r2, r0
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	1ad3      	subs	r3, r2, r3
 8004f74:	2b02      	cmp	r3, #2
 8004f76:	d901      	bls.n	8004f7c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8004f78:	2303      	movs	r3, #3
 8004f7a:	e020      	b.n	8004fbe <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f7c:	4b13      	ldr	r3, [pc, #76]	; (8004fcc <HAL_RCC_OscConfig+0x47c>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d0f0      	beq.n	8004f6a <HAL_RCC_OscConfig+0x41a>
 8004f88:	e018      	b.n	8004fbc <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f8a:	4b11      	ldr	r3, [pc, #68]	; (8004fd0 <HAL_RCC_OscConfig+0x480>)
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f90:	f7fc f840 	bl	8001014 <HAL_GetTick>
 8004f94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f96:	e008      	b.n	8004faa <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f98:	f7fc f83c 	bl	8001014 <HAL_GetTick>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	1ad3      	subs	r3, r2, r3
 8004fa2:	2b02      	cmp	r3, #2
 8004fa4:	d901      	bls.n	8004faa <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8004fa6:	2303      	movs	r3, #3
 8004fa8:	e009      	b.n	8004fbe <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004faa:	4b08      	ldr	r3, [pc, #32]	; (8004fcc <HAL_RCC_OscConfig+0x47c>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d1f0      	bne.n	8004f98 <HAL_RCC_OscConfig+0x448>
 8004fb6:	e001      	b.n	8004fbc <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	e000      	b.n	8004fbe <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8004fbc:	2300      	movs	r3, #0
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3718      	adds	r7, #24
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
 8004fc6:	bf00      	nop
 8004fc8:	40007000 	.word	0x40007000
 8004fcc:	40023800 	.word	0x40023800
 8004fd0:	42470060 	.word	0x42470060

08004fd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b084      	sub	sp, #16
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d101      	bne.n	8004fe8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	e0ca      	b.n	800517e <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004fe8:	4b67      	ldr	r3, [pc, #412]	; (8005188 <HAL_RCC_ClockConfig+0x1b4>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f003 030f 	and.w	r3, r3, #15
 8004ff0:	683a      	ldr	r2, [r7, #0]
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	d90c      	bls.n	8005010 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ff6:	4b64      	ldr	r3, [pc, #400]	; (8005188 <HAL_RCC_ClockConfig+0x1b4>)
 8004ff8:	683a      	ldr	r2, [r7, #0]
 8004ffa:	b2d2      	uxtb	r2, r2
 8004ffc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ffe:	4b62      	ldr	r3, [pc, #392]	; (8005188 <HAL_RCC_ClockConfig+0x1b4>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 030f 	and.w	r3, r3, #15
 8005006:	683a      	ldr	r2, [r7, #0]
 8005008:	429a      	cmp	r2, r3
 800500a:	d001      	beq.n	8005010 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800500c:	2301      	movs	r3, #1
 800500e:	e0b6      	b.n	800517e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f003 0302 	and.w	r3, r3, #2
 8005018:	2b00      	cmp	r3, #0
 800501a:	d020      	beq.n	800505e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f003 0304 	and.w	r3, r3, #4
 8005024:	2b00      	cmp	r3, #0
 8005026:	d005      	beq.n	8005034 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005028:	4b58      	ldr	r3, [pc, #352]	; (800518c <HAL_RCC_ClockConfig+0x1b8>)
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	4a57      	ldr	r2, [pc, #348]	; (800518c <HAL_RCC_ClockConfig+0x1b8>)
 800502e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005032:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f003 0308 	and.w	r3, r3, #8
 800503c:	2b00      	cmp	r3, #0
 800503e:	d005      	beq.n	800504c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005040:	4b52      	ldr	r3, [pc, #328]	; (800518c <HAL_RCC_ClockConfig+0x1b8>)
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	4a51      	ldr	r2, [pc, #324]	; (800518c <HAL_RCC_ClockConfig+0x1b8>)
 8005046:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800504a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800504c:	4b4f      	ldr	r3, [pc, #316]	; (800518c <HAL_RCC_ClockConfig+0x1b8>)
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	494c      	ldr	r1, [pc, #304]	; (800518c <HAL_RCC_ClockConfig+0x1b8>)
 800505a:	4313      	orrs	r3, r2
 800505c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f003 0301 	and.w	r3, r3, #1
 8005066:	2b00      	cmp	r3, #0
 8005068:	d044      	beq.n	80050f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	2b01      	cmp	r3, #1
 8005070:	d107      	bne.n	8005082 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005072:	4b46      	ldr	r3, [pc, #280]	; (800518c <HAL_RCC_ClockConfig+0x1b8>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800507a:	2b00      	cmp	r3, #0
 800507c:	d119      	bne.n	80050b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e07d      	b.n	800517e <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	2b02      	cmp	r3, #2
 8005088:	d003      	beq.n	8005092 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800508e:	2b03      	cmp	r3, #3
 8005090:	d107      	bne.n	80050a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005092:	4b3e      	ldr	r3, [pc, #248]	; (800518c <HAL_RCC_ClockConfig+0x1b8>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800509a:	2b00      	cmp	r3, #0
 800509c:	d109      	bne.n	80050b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	e06d      	b.n	800517e <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050a2:	4b3a      	ldr	r3, [pc, #232]	; (800518c <HAL_RCC_ClockConfig+0x1b8>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f003 0302 	and.w	r3, r3, #2
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d101      	bne.n	80050b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	e065      	b.n	800517e <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050b2:	4b36      	ldr	r3, [pc, #216]	; (800518c <HAL_RCC_ClockConfig+0x1b8>)
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	f023 0203 	bic.w	r2, r3, #3
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	4933      	ldr	r1, [pc, #204]	; (800518c <HAL_RCC_ClockConfig+0x1b8>)
 80050c0:	4313      	orrs	r3, r2
 80050c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80050c4:	f7fb ffa6 	bl	8001014 <HAL_GetTick>
 80050c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050ca:	e00a      	b.n	80050e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050cc:	f7fb ffa2 	bl	8001014 <HAL_GetTick>
 80050d0:	4602      	mov	r2, r0
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	1ad3      	subs	r3, r2, r3
 80050d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80050da:	4293      	cmp	r3, r2
 80050dc:	d901      	bls.n	80050e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80050de:	2303      	movs	r3, #3
 80050e0:	e04d      	b.n	800517e <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050e2:	4b2a      	ldr	r3, [pc, #168]	; (800518c <HAL_RCC_ClockConfig+0x1b8>)
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	f003 020c 	and.w	r2, r3, #12
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	009b      	lsls	r3, r3, #2
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d1eb      	bne.n	80050cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80050f4:	4b24      	ldr	r3, [pc, #144]	; (8005188 <HAL_RCC_ClockConfig+0x1b4>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f003 030f 	and.w	r3, r3, #15
 80050fc:	683a      	ldr	r2, [r7, #0]
 80050fe:	429a      	cmp	r2, r3
 8005100:	d20c      	bcs.n	800511c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005102:	4b21      	ldr	r3, [pc, #132]	; (8005188 <HAL_RCC_ClockConfig+0x1b4>)
 8005104:	683a      	ldr	r2, [r7, #0]
 8005106:	b2d2      	uxtb	r2, r2
 8005108:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800510a:	4b1f      	ldr	r3, [pc, #124]	; (8005188 <HAL_RCC_ClockConfig+0x1b4>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f003 030f 	and.w	r3, r3, #15
 8005112:	683a      	ldr	r2, [r7, #0]
 8005114:	429a      	cmp	r2, r3
 8005116:	d001      	beq.n	800511c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005118:	2301      	movs	r3, #1
 800511a:	e030      	b.n	800517e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f003 0304 	and.w	r3, r3, #4
 8005124:	2b00      	cmp	r3, #0
 8005126:	d008      	beq.n	800513a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005128:	4b18      	ldr	r3, [pc, #96]	; (800518c <HAL_RCC_ClockConfig+0x1b8>)
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	68db      	ldr	r3, [r3, #12]
 8005134:	4915      	ldr	r1, [pc, #84]	; (800518c <HAL_RCC_ClockConfig+0x1b8>)
 8005136:	4313      	orrs	r3, r2
 8005138:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f003 0308 	and.w	r3, r3, #8
 8005142:	2b00      	cmp	r3, #0
 8005144:	d009      	beq.n	800515a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005146:	4b11      	ldr	r3, [pc, #68]	; (800518c <HAL_RCC_ClockConfig+0x1b8>)
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	691b      	ldr	r3, [r3, #16]
 8005152:	00db      	lsls	r3, r3, #3
 8005154:	490d      	ldr	r1, [pc, #52]	; (800518c <HAL_RCC_ClockConfig+0x1b8>)
 8005156:	4313      	orrs	r3, r2
 8005158:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800515a:	f000 f81d 	bl	8005198 <HAL_RCC_GetSysClockFreq>
 800515e:	4601      	mov	r1, r0
 8005160:	4b0a      	ldr	r3, [pc, #40]	; (800518c <HAL_RCC_ClockConfig+0x1b8>)
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	091b      	lsrs	r3, r3, #4
 8005166:	f003 030f 	and.w	r3, r3, #15
 800516a:	4a09      	ldr	r2, [pc, #36]	; (8005190 <HAL_RCC_ClockConfig+0x1bc>)
 800516c:	5cd3      	ldrb	r3, [r2, r3]
 800516e:	fa21 f303 	lsr.w	r3, r1, r3
 8005172:	4a08      	ldr	r2, [pc, #32]	; (8005194 <HAL_RCC_ClockConfig+0x1c0>)
 8005174:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8005176:	2000      	movs	r0, #0
 8005178:	f00d f806 	bl	8012188 <HAL_InitTick>

  return HAL_OK;
 800517c:	2300      	movs	r3, #0
}
 800517e:	4618      	mov	r0, r3
 8005180:	3710      	adds	r7, #16
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}
 8005186:	bf00      	nop
 8005188:	40023c00 	.word	0x40023c00
 800518c:	40023800 	.word	0x40023800
 8005190:	080285ac 	.word	0x080285ac
 8005194:	2000004c 	.word	0x2000004c

08005198 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005198:	b5f0      	push	{r4, r5, r6, r7, lr}
 800519a:	b085      	sub	sp, #20
 800519c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800519e:	2300      	movs	r3, #0
 80051a0:	607b      	str	r3, [r7, #4]
 80051a2:	2300      	movs	r3, #0
 80051a4:	60fb      	str	r3, [r7, #12]
 80051a6:	2300      	movs	r3, #0
 80051a8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80051aa:	2300      	movs	r3, #0
 80051ac:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80051ae:	4b63      	ldr	r3, [pc, #396]	; (800533c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	f003 030c 	and.w	r3, r3, #12
 80051b6:	2b04      	cmp	r3, #4
 80051b8:	d007      	beq.n	80051ca <HAL_RCC_GetSysClockFreq+0x32>
 80051ba:	2b08      	cmp	r3, #8
 80051bc:	d008      	beq.n	80051d0 <HAL_RCC_GetSysClockFreq+0x38>
 80051be:	2b00      	cmp	r3, #0
 80051c0:	f040 80b4 	bne.w	800532c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80051c4:	4b5e      	ldr	r3, [pc, #376]	; (8005340 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80051c6:	60bb      	str	r3, [r7, #8]
       break;
 80051c8:	e0b3      	b.n	8005332 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80051ca:	4b5e      	ldr	r3, [pc, #376]	; (8005344 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80051cc:	60bb      	str	r3, [r7, #8]
      break;
 80051ce:	e0b0      	b.n	8005332 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80051d0:	4b5a      	ldr	r3, [pc, #360]	; (800533c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051d8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80051da:	4b58      	ldr	r3, [pc, #352]	; (800533c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d04a      	beq.n	800527c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051e6:	4b55      	ldr	r3, [pc, #340]	; (800533c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	099b      	lsrs	r3, r3, #6
 80051ec:	f04f 0400 	mov.w	r4, #0
 80051f0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80051f4:	f04f 0200 	mov.w	r2, #0
 80051f8:	ea03 0501 	and.w	r5, r3, r1
 80051fc:	ea04 0602 	and.w	r6, r4, r2
 8005200:	4629      	mov	r1, r5
 8005202:	4632      	mov	r2, r6
 8005204:	f04f 0300 	mov.w	r3, #0
 8005208:	f04f 0400 	mov.w	r4, #0
 800520c:	0154      	lsls	r4, r2, #5
 800520e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005212:	014b      	lsls	r3, r1, #5
 8005214:	4619      	mov	r1, r3
 8005216:	4622      	mov	r2, r4
 8005218:	1b49      	subs	r1, r1, r5
 800521a:	eb62 0206 	sbc.w	r2, r2, r6
 800521e:	f04f 0300 	mov.w	r3, #0
 8005222:	f04f 0400 	mov.w	r4, #0
 8005226:	0194      	lsls	r4, r2, #6
 8005228:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800522c:	018b      	lsls	r3, r1, #6
 800522e:	1a5b      	subs	r3, r3, r1
 8005230:	eb64 0402 	sbc.w	r4, r4, r2
 8005234:	f04f 0100 	mov.w	r1, #0
 8005238:	f04f 0200 	mov.w	r2, #0
 800523c:	00e2      	lsls	r2, r4, #3
 800523e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005242:	00d9      	lsls	r1, r3, #3
 8005244:	460b      	mov	r3, r1
 8005246:	4614      	mov	r4, r2
 8005248:	195b      	adds	r3, r3, r5
 800524a:	eb44 0406 	adc.w	r4, r4, r6
 800524e:	f04f 0100 	mov.w	r1, #0
 8005252:	f04f 0200 	mov.w	r2, #0
 8005256:	0262      	lsls	r2, r4, #9
 8005258:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800525c:	0259      	lsls	r1, r3, #9
 800525e:	460b      	mov	r3, r1
 8005260:	4614      	mov	r4, r2
 8005262:	4618      	mov	r0, r3
 8005264:	4621      	mov	r1, r4
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f04f 0400 	mov.w	r4, #0
 800526c:	461a      	mov	r2, r3
 800526e:	4623      	mov	r3, r4
 8005270:	f7fb fd1a 	bl	8000ca8 <__aeabi_uldivmod>
 8005274:	4603      	mov	r3, r0
 8005276:	460c      	mov	r4, r1
 8005278:	60fb      	str	r3, [r7, #12]
 800527a:	e049      	b.n	8005310 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800527c:	4b2f      	ldr	r3, [pc, #188]	; (800533c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	099b      	lsrs	r3, r3, #6
 8005282:	f04f 0400 	mov.w	r4, #0
 8005286:	f240 11ff 	movw	r1, #511	; 0x1ff
 800528a:	f04f 0200 	mov.w	r2, #0
 800528e:	ea03 0501 	and.w	r5, r3, r1
 8005292:	ea04 0602 	and.w	r6, r4, r2
 8005296:	4629      	mov	r1, r5
 8005298:	4632      	mov	r2, r6
 800529a:	f04f 0300 	mov.w	r3, #0
 800529e:	f04f 0400 	mov.w	r4, #0
 80052a2:	0154      	lsls	r4, r2, #5
 80052a4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80052a8:	014b      	lsls	r3, r1, #5
 80052aa:	4619      	mov	r1, r3
 80052ac:	4622      	mov	r2, r4
 80052ae:	1b49      	subs	r1, r1, r5
 80052b0:	eb62 0206 	sbc.w	r2, r2, r6
 80052b4:	f04f 0300 	mov.w	r3, #0
 80052b8:	f04f 0400 	mov.w	r4, #0
 80052bc:	0194      	lsls	r4, r2, #6
 80052be:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80052c2:	018b      	lsls	r3, r1, #6
 80052c4:	1a5b      	subs	r3, r3, r1
 80052c6:	eb64 0402 	sbc.w	r4, r4, r2
 80052ca:	f04f 0100 	mov.w	r1, #0
 80052ce:	f04f 0200 	mov.w	r2, #0
 80052d2:	00e2      	lsls	r2, r4, #3
 80052d4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80052d8:	00d9      	lsls	r1, r3, #3
 80052da:	460b      	mov	r3, r1
 80052dc:	4614      	mov	r4, r2
 80052de:	195b      	adds	r3, r3, r5
 80052e0:	eb44 0406 	adc.w	r4, r4, r6
 80052e4:	f04f 0100 	mov.w	r1, #0
 80052e8:	f04f 0200 	mov.w	r2, #0
 80052ec:	02a2      	lsls	r2, r4, #10
 80052ee:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80052f2:	0299      	lsls	r1, r3, #10
 80052f4:	460b      	mov	r3, r1
 80052f6:	4614      	mov	r4, r2
 80052f8:	4618      	mov	r0, r3
 80052fa:	4621      	mov	r1, r4
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f04f 0400 	mov.w	r4, #0
 8005302:	461a      	mov	r2, r3
 8005304:	4623      	mov	r3, r4
 8005306:	f7fb fccf 	bl	8000ca8 <__aeabi_uldivmod>
 800530a:	4603      	mov	r3, r0
 800530c:	460c      	mov	r4, r1
 800530e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005310:	4b0a      	ldr	r3, [pc, #40]	; (800533c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	0c1b      	lsrs	r3, r3, #16
 8005316:	f003 0303 	and.w	r3, r3, #3
 800531a:	3301      	adds	r3, #1
 800531c:	005b      	lsls	r3, r3, #1
 800531e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005320:	68fa      	ldr	r2, [r7, #12]
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	fbb2 f3f3 	udiv	r3, r2, r3
 8005328:	60bb      	str	r3, [r7, #8]
      break;
 800532a:	e002      	b.n	8005332 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800532c:	4b04      	ldr	r3, [pc, #16]	; (8005340 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800532e:	60bb      	str	r3, [r7, #8]
      break;
 8005330:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005332:	68bb      	ldr	r3, [r7, #8]
}
 8005334:	4618      	mov	r0, r3
 8005336:	3714      	adds	r7, #20
 8005338:	46bd      	mov	sp, r7
 800533a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800533c:	40023800 	.word	0x40023800
 8005340:	00f42400 	.word	0x00f42400
 8005344:	007a1200 	.word	0x007a1200

08005348 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005348:	b480      	push	{r7}
 800534a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800534c:	4b03      	ldr	r3, [pc, #12]	; (800535c <HAL_RCC_GetHCLKFreq+0x14>)
 800534e:	681b      	ldr	r3, [r3, #0]
}
 8005350:	4618      	mov	r0, r3
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr
 800535a:	bf00      	nop
 800535c:	2000004c 	.word	0x2000004c

08005360 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005364:	f7ff fff0 	bl	8005348 <HAL_RCC_GetHCLKFreq>
 8005368:	4601      	mov	r1, r0
 800536a:	4b05      	ldr	r3, [pc, #20]	; (8005380 <HAL_RCC_GetPCLK1Freq+0x20>)
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	0a9b      	lsrs	r3, r3, #10
 8005370:	f003 0307 	and.w	r3, r3, #7
 8005374:	4a03      	ldr	r2, [pc, #12]	; (8005384 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005376:	5cd3      	ldrb	r3, [r2, r3]
 8005378:	fa21 f303 	lsr.w	r3, r1, r3
}
 800537c:	4618      	mov	r0, r3
 800537e:	bd80      	pop	{r7, pc}
 8005380:	40023800 	.word	0x40023800
 8005384:	080285bc 	.word	0x080285bc

08005388 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800538c:	f7ff ffdc 	bl	8005348 <HAL_RCC_GetHCLKFreq>
 8005390:	4601      	mov	r1, r0
 8005392:	4b05      	ldr	r3, [pc, #20]	; (80053a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	0b5b      	lsrs	r3, r3, #13
 8005398:	f003 0307 	and.w	r3, r3, #7
 800539c:	4a03      	ldr	r2, [pc, #12]	; (80053ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800539e:	5cd3      	ldrb	r3, [r2, r3]
 80053a0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	bd80      	pop	{r7, pc}
 80053a8:	40023800 	.word	0x40023800
 80053ac:	080285bc 	.word	0x080285bc

080053b0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b083      	sub	sp, #12
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
 80053b8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	220f      	movs	r2, #15
 80053be:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80053c0:	4b12      	ldr	r3, [pc, #72]	; (800540c <HAL_RCC_GetClockConfig+0x5c>)
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	f003 0203 	and.w	r2, r3, #3
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80053cc:	4b0f      	ldr	r3, [pc, #60]	; (800540c <HAL_RCC_GetClockConfig+0x5c>)
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80053d8:	4b0c      	ldr	r3, [pc, #48]	; (800540c <HAL_RCC_GetClockConfig+0x5c>)
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80053e4:	4b09      	ldr	r3, [pc, #36]	; (800540c <HAL_RCC_GetClockConfig+0x5c>)
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	08db      	lsrs	r3, r3, #3
 80053ea:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80053f2:	4b07      	ldr	r3, [pc, #28]	; (8005410 <HAL_RCC_GetClockConfig+0x60>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f003 020f 	and.w	r2, r3, #15
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	601a      	str	r2, [r3, #0]
}
 80053fe:	bf00      	nop
 8005400:	370c      	adds	r7, #12
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr
 800540a:	bf00      	nop
 800540c:	40023800 	.word	0x40023800
 8005410:	40023c00 	.word	0x40023c00

08005414 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b086      	sub	sp, #24
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800541c:	2300      	movs	r3, #0
 800541e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005420:	2300      	movs	r3, #0
 8005422:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f003 0301 	and.w	r3, r3, #1
 800542c:	2b00      	cmp	r3, #0
 800542e:	d105      	bne.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005438:	2b00      	cmp	r3, #0
 800543a:	d035      	beq.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800543c:	4b62      	ldr	r3, [pc, #392]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800543e:	2200      	movs	r2, #0
 8005440:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005442:	f7fb fde7 	bl	8001014 <HAL_GetTick>
 8005446:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005448:	e008      	b.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800544a:	f7fb fde3 	bl	8001014 <HAL_GetTick>
 800544e:	4602      	mov	r2, r0
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	1ad3      	subs	r3, r2, r3
 8005454:	2b02      	cmp	r3, #2
 8005456:	d901      	bls.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005458:	2303      	movs	r3, #3
 800545a:	e0b0      	b.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800545c:	4b5b      	ldr	r3, [pc, #364]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005464:	2b00      	cmp	r3, #0
 8005466:	d1f0      	bne.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	019a      	lsls	r2, r3, #6
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	071b      	lsls	r3, r3, #28
 8005474:	4955      	ldr	r1, [pc, #340]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005476:	4313      	orrs	r3, r2
 8005478:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800547c:	4b52      	ldr	r3, [pc, #328]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800547e:	2201      	movs	r2, #1
 8005480:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005482:	f7fb fdc7 	bl	8001014 <HAL_GetTick>
 8005486:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005488:	e008      	b.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800548a:	f7fb fdc3 	bl	8001014 <HAL_GetTick>
 800548e:	4602      	mov	r2, r0
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	1ad3      	subs	r3, r2, r3
 8005494:	2b02      	cmp	r3, #2
 8005496:	d901      	bls.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005498:	2303      	movs	r3, #3
 800549a:	e090      	b.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800549c:	4b4b      	ldr	r3, [pc, #300]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d0f0      	beq.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f003 0302 	and.w	r3, r3, #2
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	f000 8083 	beq.w	80055bc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80054b6:	2300      	movs	r3, #0
 80054b8:	60fb      	str	r3, [r7, #12]
 80054ba:	4b44      	ldr	r3, [pc, #272]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80054bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054be:	4a43      	ldr	r2, [pc, #268]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80054c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054c4:	6413      	str	r3, [r2, #64]	; 0x40
 80054c6:	4b41      	ldr	r3, [pc, #260]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80054c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054ce:	60fb      	str	r3, [r7, #12]
 80054d0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80054d2:	4b3f      	ldr	r3, [pc, #252]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a3e      	ldr	r2, [pc, #248]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80054d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054dc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80054de:	f7fb fd99 	bl	8001014 <HAL_GetTick>
 80054e2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80054e4:	e008      	b.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80054e6:	f7fb fd95 	bl	8001014 <HAL_GetTick>
 80054ea:	4602      	mov	r2, r0
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	1ad3      	subs	r3, r2, r3
 80054f0:	2b02      	cmp	r3, #2
 80054f2:	d901      	bls.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80054f4:	2303      	movs	r3, #3
 80054f6:	e062      	b.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80054f8:	4b35      	ldr	r3, [pc, #212]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005500:	2b00      	cmp	r3, #0
 8005502:	d0f0      	beq.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005504:	4b31      	ldr	r3, [pc, #196]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005508:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800550c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d02f      	beq.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	68db      	ldr	r3, [r3, #12]
 8005518:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800551c:	693a      	ldr	r2, [r7, #16]
 800551e:	429a      	cmp	r2, r3
 8005520:	d028      	beq.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005522:	4b2a      	ldr	r3, [pc, #168]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005526:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800552a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800552c:	4b29      	ldr	r3, [pc, #164]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800552e:	2201      	movs	r2, #1
 8005530:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005532:	4b28      	ldr	r3, [pc, #160]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005534:	2200      	movs	r2, #0
 8005536:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005538:	4a24      	ldr	r2, [pc, #144]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800553e:	4b23      	ldr	r3, [pc, #140]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005542:	f003 0301 	and.w	r3, r3, #1
 8005546:	2b01      	cmp	r3, #1
 8005548:	d114      	bne.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800554a:	f7fb fd63 	bl	8001014 <HAL_GetTick>
 800554e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005550:	e00a      	b.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005552:	f7fb fd5f 	bl	8001014 <HAL_GetTick>
 8005556:	4602      	mov	r2, r0
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	1ad3      	subs	r3, r2, r3
 800555c:	f643 2298 	movw	r2, #15000	; 0x3a98
 8005560:	4293      	cmp	r3, r2
 8005562:	d901      	bls.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005564:	2303      	movs	r3, #3
 8005566:	e02a      	b.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005568:	4b18      	ldr	r3, [pc, #96]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800556a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800556c:	f003 0302 	and.w	r3, r3, #2
 8005570:	2b00      	cmp	r3, #0
 8005572:	d0ee      	beq.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	68db      	ldr	r3, [r3, #12]
 8005578:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800557c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005580:	d10d      	bne.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005582:	4b12      	ldr	r3, [pc, #72]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	68db      	ldr	r3, [r3, #12]
 800558e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005592:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005596:	490d      	ldr	r1, [pc, #52]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005598:	4313      	orrs	r3, r2
 800559a:	608b      	str	r3, [r1, #8]
 800559c:	e005      	b.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0x196>
 800559e:	4b0b      	ldr	r3, [pc, #44]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80055a0:	689b      	ldr	r3, [r3, #8]
 80055a2:	4a0a      	ldr	r2, [pc, #40]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80055a4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80055a8:	6093      	str	r3, [r2, #8]
 80055aa:	4b08      	ldr	r3, [pc, #32]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80055ac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	68db      	ldr	r3, [r3, #12]
 80055b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055b6:	4905      	ldr	r1, [pc, #20]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80055b8:	4313      	orrs	r3, r2
 80055ba:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80055bc:	2300      	movs	r3, #0
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3718      	adds	r7, #24
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}
 80055c6:	bf00      	nop
 80055c8:	42470068 	.word	0x42470068
 80055cc:	40023800 	.word	0x40023800
 80055d0:	40007000 	.word	0x40007000
 80055d4:	42470e40 	.word	0x42470e40

080055d8 <HAL_RCCEx_GetPeriphCLKConfig>:
  * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
  * will be configured.
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80055d8:	b480      	push	{r7}
 80055da:	b085      	sub	sp, #20
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  uint32_t tempreg;

  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2203      	movs	r2, #3
 80055e4:	601a      	str	r2, [r3, #0]

  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 80055e6:	4b11      	ldr	r3, [pc, #68]	; (800562c <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 80055e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055ec:	099b      	lsrs	r3, r3, #6
 80055ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80055f6:	4b0d      	ldr	r3, [pc, #52]	; (800562c <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 80055f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055fc:	0f1b      	lsrs	r3, r3, #28
 80055fe:	f003 0207 	and.w	r2, r3, #7
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	609a      	str	r2, [r3, #8]
#if defined(STM32F411xE)
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM);
#endif /* STM32F411xE */
  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8005606:	4b09      	ldr	r3, [pc, #36]	; (800562c <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8005608:	689b      	ldr	r3, [r3, #8]
 800560a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800560e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8005610:	4b06      	ldr	r3, [pc, #24]	; (800562c <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8005612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005614:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	431a      	orrs	r2, r3
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	60da      	str	r2, [r3, #12]
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
}
 8005620:	bf00      	nop
 8005622:	3714      	adds	r7, #20
 8005624:	46bd      	mov	sp, r7
 8005626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562a:	4770      	bx	lr
 800562c:	40023800 	.word	0x40023800

08005630 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005630:	b480      	push	{r7}
 8005632:	b087      	sub	sp, #28
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005638:	2300      	movs	r3, #0
 800563a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800563c:	2300      	movs	r3, #0
 800563e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005640:	2300      	movs	r3, #0
 8005642:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005644:	2300      	movs	r3, #0
 8005646:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2b01      	cmp	r3, #1
 800564c:	d13d      	bne.n	80056ca <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800564e:	4b22      	ldr	r3, [pc, #136]	; (80056d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8005650:	689b      	ldr	r3, [r3, #8]
 8005652:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005656:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d004      	beq.n	8005668 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800565e:	2b01      	cmp	r3, #1
 8005660:	d12f      	bne.n	80056c2 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005662:	4b1e      	ldr	r3, [pc, #120]	; (80056dc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005664:	617b      	str	r3, [r7, #20]
          break;
 8005666:	e02f      	b.n	80056c8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005668:	4b1b      	ldr	r3, [pc, #108]	; (80056d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005670:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005674:	d108      	bne.n	8005688 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005676:	4b18      	ldr	r3, [pc, #96]	; (80056d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800567e:	4a18      	ldr	r2, [pc, #96]	; (80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005680:	fbb2 f3f3 	udiv	r3, r2, r3
 8005684:	613b      	str	r3, [r7, #16]
 8005686:	e007      	b.n	8005698 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005688:	4b13      	ldr	r3, [pc, #76]	; (80056d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005690:	4a14      	ldr	r2, [pc, #80]	; (80056e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005692:	fbb2 f3f3 	udiv	r3, r2, r3
 8005696:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005698:	4b0f      	ldr	r3, [pc, #60]	; (80056d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800569a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800569e:	099b      	lsrs	r3, r3, #6
 80056a0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	fb02 f303 	mul.w	r3, r2, r3
 80056aa:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80056ac:	4b0a      	ldr	r3, [pc, #40]	; (80056d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80056ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056b2:	0f1b      	lsrs	r3, r3, #28
 80056b4:	f003 0307 	and.w	r3, r3, #7
 80056b8:	68ba      	ldr	r2, [r7, #8]
 80056ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80056be:	617b      	str	r3, [r7, #20]
          break;
 80056c0:	e002      	b.n	80056c8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80056c2:	2300      	movs	r3, #0
 80056c4:	617b      	str	r3, [r7, #20]
          break;
 80056c6:	bf00      	nop
        }
      }
      break;
 80056c8:	bf00      	nop
    }
  }
  return frequency;
 80056ca:	697b      	ldr	r3, [r7, #20]
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	371c      	adds	r7, #28
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr
 80056d8:	40023800 	.word	0x40023800
 80056dc:	00bb8000 	.word	0x00bb8000
 80056e0:	007a1200 	.word	0x007a1200
 80056e4:	00f42400 	.word	0x00f42400

080056e8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b082      	sub	sp, #8
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d101      	bne.n	80056fa <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80056f6:	2301      	movs	r3, #1
 80056f8:	e083      	b.n	8005802 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	7f5b      	ldrb	r3, [r3, #29]
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	2b00      	cmp	r3, #0
 8005702:	d105      	bne.n	8005710 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2200      	movs	r2, #0
 8005708:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f00c fb56 	bl	8011dbc <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2202      	movs	r2, #2
 8005714:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	22ca      	movs	r2, #202	; 0xca
 800571c:	625a      	str	r2, [r3, #36]	; 0x24
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	2253      	movs	r2, #83	; 0x53
 8005724:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f000 faa8 	bl	8005c7c <RTC_EnterInitMode>
 800572c:	4603      	mov	r3, r0
 800572e:	2b00      	cmp	r3, #0
 8005730:	d008      	beq.n	8005744 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	22ff      	movs	r2, #255	; 0xff
 8005738:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2204      	movs	r2, #4
 800573e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8005740:	2301      	movs	r3, #1
 8005742:	e05e      	b.n	8005802 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	687a      	ldr	r2, [r7, #4]
 800574c:	6812      	ldr	r2, [r2, #0]
 800574e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005752:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005756:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	6899      	ldr	r1, [r3, #8]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	685a      	ldr	r2, [r3, #4]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	691b      	ldr	r3, [r3, #16]
 8005766:	431a      	orrs	r2, r3
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	695b      	ldr	r3, [r3, #20]
 800576c:	431a      	orrs	r2, r3
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	430a      	orrs	r2, r1
 8005774:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	687a      	ldr	r2, [r7, #4]
 800577c:	68d2      	ldr	r2, [r2, #12]
 800577e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	6919      	ldr	r1, [r3, #16]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	041a      	lsls	r2, r3, #16
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	430a      	orrs	r2, r1
 8005792:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	68da      	ldr	r2, [r3, #12]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80057a2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	f003 0320 	and.w	r3, r3, #32
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d10e      	bne.n	80057d0 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f000 fa3a 	bl	8005c2c <HAL_RTC_WaitForSynchro>
 80057b8:	4603      	mov	r3, r0
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d008      	beq.n	80057d0 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	22ff      	movs	r2, #255	; 0xff
 80057c4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2204      	movs	r2, #4
 80057ca:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80057cc:	2301      	movs	r3, #1
 80057ce:	e018      	b.n	8005802 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80057de:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	699a      	ldr	r2, [r3, #24]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	430a      	orrs	r2, r1
 80057f0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	22ff      	movs	r2, #255	; 0xff
 80057f8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2201      	movs	r2, #1
 80057fe:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8005800:	2300      	movs	r3, #0
  }
}
 8005802:	4618      	mov	r0, r3
 8005804:	3708      	adds	r7, #8
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}

0800580a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800580a:	b590      	push	{r4, r7, lr}
 800580c:	b087      	sub	sp, #28
 800580e:	af00      	add	r7, sp, #0
 8005810:	60f8      	str	r0, [r7, #12]
 8005812:	60b9      	str	r1, [r7, #8]
 8005814:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005816:	2300      	movs	r3, #0
 8005818:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	7f1b      	ldrb	r3, [r3, #28]
 800581e:	2b01      	cmp	r3, #1
 8005820:	d101      	bne.n	8005826 <HAL_RTC_SetTime+0x1c>
 8005822:	2302      	movs	r3, #2
 8005824:	e0aa      	b.n	800597c <HAL_RTC_SetTime+0x172>
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2201      	movs	r2, #1
 800582a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2202      	movs	r2, #2
 8005830:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d126      	bne.n	8005886 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005842:	2b00      	cmp	r3, #0
 8005844:	d102      	bne.n	800584c <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	2200      	movs	r2, #0
 800584a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	781b      	ldrb	r3, [r3, #0]
 8005850:	4618      	mov	r0, r3
 8005852:	f000 fa3f 	bl	8005cd4 <RTC_ByteToBcd2>
 8005856:	4603      	mov	r3, r0
 8005858:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	785b      	ldrb	r3, [r3, #1]
 800585e:	4618      	mov	r0, r3
 8005860:	f000 fa38 	bl	8005cd4 <RTC_ByteToBcd2>
 8005864:	4603      	mov	r3, r0
 8005866:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005868:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	789b      	ldrb	r3, [r3, #2]
 800586e:	4618      	mov	r0, r3
 8005870:	f000 fa30 	bl	8005cd4 <RTC_ByteToBcd2>
 8005874:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005876:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	78db      	ldrb	r3, [r3, #3]
 800587e:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005880:	4313      	orrs	r3, r2
 8005882:	617b      	str	r3, [r7, #20]
 8005884:	e018      	b.n	80058b8 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	689b      	ldr	r3, [r3, #8]
 800588c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005890:	2b00      	cmp	r3, #0
 8005892:	d102      	bne.n	800589a <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	2200      	movs	r2, #0
 8005898:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	781b      	ldrb	r3, [r3, #0]
 800589e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	785b      	ldrb	r3, [r3, #1]
 80058a4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80058a6:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80058a8:	68ba      	ldr	r2, [r7, #8]
 80058aa:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80058ac:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	78db      	ldrb	r3, [r3, #3]
 80058b2:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80058b4:	4313      	orrs	r3, r2
 80058b6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	22ca      	movs	r2, #202	; 0xca
 80058be:	625a      	str	r2, [r3, #36]	; 0x24
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	2253      	movs	r2, #83	; 0x53
 80058c6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80058c8:	68f8      	ldr	r0, [r7, #12]
 80058ca:	f000 f9d7 	bl	8005c7c <RTC_EnterInitMode>
 80058ce:	4603      	mov	r3, r0
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d00b      	beq.n	80058ec <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	22ff      	movs	r2, #255	; 0xff
 80058da:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	2204      	movs	r2, #4
 80058e0:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2200      	movs	r2, #0
 80058e6:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80058e8:	2301      	movs	r3, #1
 80058ea:	e047      	b.n	800597c <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80058f6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80058fa:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	689a      	ldr	r2, [r3, #8]
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800590a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	6899      	ldr	r1, [r3, #8]
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	68da      	ldr	r2, [r3, #12]
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	691b      	ldr	r3, [r3, #16]
 800591a:	431a      	orrs	r2, r3
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	430a      	orrs	r2, r1
 8005922:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	68da      	ldr	r2, [r3, #12]
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005932:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	689b      	ldr	r3, [r3, #8]
 800593a:	f003 0320 	and.w	r3, r3, #32
 800593e:	2b00      	cmp	r3, #0
 8005940:	d111      	bne.n	8005966 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005942:	68f8      	ldr	r0, [r7, #12]
 8005944:	f000 f972 	bl	8005c2c <HAL_RTC_WaitForSynchro>
 8005948:	4603      	mov	r3, r0
 800594a:	2b00      	cmp	r3, #0
 800594c:	d00b      	beq.n	8005966 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	22ff      	movs	r2, #255	; 0xff
 8005954:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2204      	movs	r2, #4
 800595a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	2200      	movs	r2, #0
 8005960:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8005962:	2301      	movs	r3, #1
 8005964:	e00a      	b.n	800597c <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	22ff      	movs	r2, #255	; 0xff
 800596c:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2201      	movs	r2, #1
 8005972:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2200      	movs	r2, #0
 8005978:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800597a:	2300      	movs	r3, #0
  }
}
 800597c:	4618      	mov	r0, r3
 800597e:	371c      	adds	r7, #28
 8005980:	46bd      	mov	sp, r7
 8005982:	bd90      	pop	{r4, r7, pc}

08005984 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b086      	sub	sp, #24
 8005988:	af00      	add	r7, sp, #0
 800598a:	60f8      	str	r0, [r7, #12]
 800598c:	60b9      	str	r1, [r7, #8]
 800598e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005990:	2300      	movs	r3, #0
 8005992:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	691b      	ldr	r3, [r3, #16]
 80059a4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80059b6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80059ba:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	0c1b      	lsrs	r3, r3, #16
 80059c0:	b2db      	uxtb	r3, r3
 80059c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80059c6:	b2da      	uxtb	r2, r3
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	0a1b      	lsrs	r3, r3, #8
 80059d0:	b2db      	uxtb	r3, r3
 80059d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059d6:	b2da      	uxtb	r2, r3
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	b2db      	uxtb	r3, r3
 80059e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059e4:	b2da      	uxtb	r2, r3
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	0c1b      	lsrs	r3, r3, #16
 80059ee:	b2db      	uxtb	r3, r3
 80059f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059f4:	b2da      	uxtb	r2, r3
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d11a      	bne.n	8005a36 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	781b      	ldrb	r3, [r3, #0]
 8005a04:	4618      	mov	r0, r3
 8005a06:	f000 f983 	bl	8005d10 <RTC_Bcd2ToByte>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	461a      	mov	r2, r3
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	785b      	ldrb	r3, [r3, #1]
 8005a16:	4618      	mov	r0, r3
 8005a18:	f000 f97a 	bl	8005d10 <RTC_Bcd2ToByte>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	461a      	mov	r2, r3
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	789b      	ldrb	r3, [r3, #2]
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f000 f971 	bl	8005d10 <RTC_Bcd2ToByte>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	461a      	mov	r2, r3
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005a36:	2300      	movs	r3, #0
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	3718      	adds	r7, #24
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}

08005a40 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005a40:	b590      	push	{r4, r7, lr}
 8005a42:	b087      	sub	sp, #28
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	60f8      	str	r0, [r7, #12]
 8005a48:	60b9      	str	r1, [r7, #8]
 8005a4a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	7f1b      	ldrb	r3, [r3, #28]
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	d101      	bne.n	8005a5c <HAL_RTC_SetDate+0x1c>
 8005a58:	2302      	movs	r3, #2
 8005a5a:	e094      	b.n	8005b86 <HAL_RTC_SetDate+0x146>
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2202      	movs	r2, #2
 8005a66:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d10e      	bne.n	8005a8c <HAL_RTC_SetDate+0x4c>
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	785b      	ldrb	r3, [r3, #1]
 8005a72:	f003 0310 	and.w	r3, r3, #16
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d008      	beq.n	8005a8c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	785b      	ldrb	r3, [r3, #1]
 8005a7e:	f023 0310 	bic.w	r3, r3, #16
 8005a82:	b2db      	uxtb	r3, r3
 8005a84:	330a      	adds	r3, #10
 8005a86:	b2da      	uxtb	r2, r3
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d11c      	bne.n	8005acc <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	78db      	ldrb	r3, [r3, #3]
 8005a96:	4618      	mov	r0, r3
 8005a98:	f000 f91c 	bl	8005cd4 <RTC_ByteToBcd2>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	785b      	ldrb	r3, [r3, #1]
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	f000 f915 	bl	8005cd4 <RTC_ByteToBcd2>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005aae:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	789b      	ldrb	r3, [r3, #2]
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f000 f90d 	bl	8005cd4 <RTC_ByteToBcd2>
 8005aba:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005abc:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	781b      	ldrb	r3, [r3, #0]
 8005ac4:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	617b      	str	r3, [r7, #20]
 8005aca:	e00e      	b.n	8005aea <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	78db      	ldrb	r3, [r3, #3]
 8005ad0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	785b      	ldrb	r3, [r3, #1]
 8005ad6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005ad8:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8005ada:	68ba      	ldr	r2, [r7, #8]
 8005adc:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8005ade:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	781b      	ldrb	r3, [r3, #0]
 8005ae4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	22ca      	movs	r2, #202	; 0xca
 8005af0:	625a      	str	r2, [r3, #36]	; 0x24
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	2253      	movs	r2, #83	; 0x53
 8005af8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005afa:	68f8      	ldr	r0, [r7, #12]
 8005afc:	f000 f8be 	bl	8005c7c <RTC_EnterInitMode>
 8005b00:	4603      	mov	r3, r0
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d00b      	beq.n	8005b1e <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	22ff      	movs	r2, #255	; 0xff
 8005b0c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2204      	movs	r2, #4
 8005b12:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2200      	movs	r2, #0
 8005b18:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	e033      	b.n	8005b86 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681a      	ldr	r2, [r3, #0]
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005b28:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005b2c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	68da      	ldr	r2, [r3, #12]
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b3c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	f003 0320 	and.w	r3, r3, #32
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d111      	bne.n	8005b70 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005b4c:	68f8      	ldr	r0, [r7, #12]
 8005b4e:	f000 f86d 	bl	8005c2c <HAL_RTC_WaitForSynchro>
 8005b52:	4603      	mov	r3, r0
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d00b      	beq.n	8005b70 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	22ff      	movs	r2, #255	; 0xff
 8005b5e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2204      	movs	r2, #4
 8005b64:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	e00a      	b.n	8005b86 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	22ff      	movs	r2, #255	; 0xff
 8005b76:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2200      	movs	r2, #0
 8005b82:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8005b84:	2300      	movs	r3, #0
  }
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	371c      	adds	r7, #28
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd90      	pop	{r4, r7, pc}

08005b8e <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005b8e:	b580      	push	{r7, lr}
 8005b90:	b086      	sub	sp, #24
 8005b92:	af00      	add	r7, sp, #0
 8005b94:	60f8      	str	r0, [r7, #12]
 8005b96:	60b9      	str	r1, [r7, #8]
 8005b98:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005ba8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005bac:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	0c1b      	lsrs	r3, r3, #16
 8005bb2:	b2da      	uxtb	r2, r3
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	0a1b      	lsrs	r3, r3, #8
 8005bbc:	b2db      	uxtb	r3, r3
 8005bbe:	f003 031f 	and.w	r3, r3, #31
 8005bc2:	b2da      	uxtb	r2, r3
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	b2db      	uxtb	r3, r3
 8005bcc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005bd0:	b2da      	uxtb	r2, r3
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	0b5b      	lsrs	r3, r3, #13
 8005bda:	b2db      	uxtb	r3, r3
 8005bdc:	f003 0307 	and.w	r3, r3, #7
 8005be0:	b2da      	uxtb	r2, r3
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d11a      	bne.n	8005c22 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	78db      	ldrb	r3, [r3, #3]
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	f000 f88d 	bl	8005d10 <RTC_Bcd2ToByte>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	461a      	mov	r2, r3
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	785b      	ldrb	r3, [r3, #1]
 8005c02:	4618      	mov	r0, r3
 8005c04:	f000 f884 	bl	8005d10 <RTC_Bcd2ToByte>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	789b      	ldrb	r3, [r3, #2]
 8005c14:	4618      	mov	r0, r3
 8005c16:	f000 f87b 	bl	8005d10 <RTC_Bcd2ToByte>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	461a      	mov	r2, r3
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005c22:	2300      	movs	r3, #0
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	3718      	adds	r7, #24
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}

08005c2c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b084      	sub	sp, #16
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005c34:	2300      	movs	r3, #0
 8005c36:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	68da      	ldr	r2, [r3, #12]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005c46:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005c48:	f7fb f9e4 	bl	8001014 <HAL_GetTick>
 8005c4c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005c4e:	e009      	b.n	8005c64 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005c50:	f7fb f9e0 	bl	8001014 <HAL_GetTick>
 8005c54:	4602      	mov	r2, r0
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	1ad3      	subs	r3, r2, r3
 8005c5a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c5e:	d901      	bls.n	8005c64 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005c60:	2303      	movs	r3, #3
 8005c62:	e007      	b.n	8005c74 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	68db      	ldr	r3, [r3, #12]
 8005c6a:	f003 0320 	and.w	r3, r3, #32
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d0ee      	beq.n	8005c50 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005c72:	2300      	movs	r3, #0
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3710      	adds	r7, #16
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}

08005c7c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b084      	sub	sp, #16
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005c84:	2300      	movs	r3, #0
 8005c86:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	68db      	ldr	r3, [r3, #12]
 8005c8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d119      	bne.n	8005cca <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f04f 32ff 	mov.w	r2, #4294967295
 8005c9e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005ca0:	f7fb f9b8 	bl	8001014 <HAL_GetTick>
 8005ca4:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005ca6:	e009      	b.n	8005cbc <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005ca8:	f7fb f9b4 	bl	8001014 <HAL_GetTick>
 8005cac:	4602      	mov	r2, r0
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	1ad3      	subs	r3, r2, r3
 8005cb2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005cb6:	d901      	bls.n	8005cbc <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8005cb8:	2303      	movs	r3, #3
 8005cba:	e007      	b.n	8005ccc <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	68db      	ldr	r3, [r3, #12]
 8005cc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d0ee      	beq.n	8005ca8 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8005cca:	2300      	movs	r3, #0
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	3710      	adds	r7, #16
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bd80      	pop	{r7, pc}

08005cd4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b085      	sub	sp, #20
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	4603      	mov	r3, r0
 8005cdc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8005ce2:	e005      	b.n	8005cf0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	3301      	adds	r3, #1
 8005ce8:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8005cea:	79fb      	ldrb	r3, [r7, #7]
 8005cec:	3b0a      	subs	r3, #10
 8005cee:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8005cf0:	79fb      	ldrb	r3, [r7, #7]
 8005cf2:	2b09      	cmp	r3, #9
 8005cf4:	d8f6      	bhi.n	8005ce4 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	b2db      	uxtb	r3, r3
 8005cfa:	011b      	lsls	r3, r3, #4
 8005cfc:	b2da      	uxtb	r2, r3
 8005cfe:	79fb      	ldrb	r3, [r7, #7]
 8005d00:	4313      	orrs	r3, r2
 8005d02:	b2db      	uxtb	r3, r3
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	3714      	adds	r7, #20
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0e:	4770      	bx	lr

08005d10 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b085      	sub	sp, #20
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	4603      	mov	r3, r0
 8005d18:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8005d1e:	79fb      	ldrb	r3, [r7, #7]
 8005d20:	091b      	lsrs	r3, r3, #4
 8005d22:	b2db      	uxtb	r3, r3
 8005d24:	461a      	mov	r2, r3
 8005d26:	4613      	mov	r3, r2
 8005d28:	009b      	lsls	r3, r3, #2
 8005d2a:	4413      	add	r3, r2
 8005d2c:	005b      	lsls	r3, r3, #1
 8005d2e:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8005d30:	79fb      	ldrb	r3, [r7, #7]
 8005d32:	f003 030f 	and.w	r3, r3, #15
 8005d36:	b2da      	uxtb	r2, r3
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	b2db      	uxtb	r3, r3
 8005d3c:	4413      	add	r3, r2
 8005d3e:	b2db      	uxtb	r3, r3
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3714      	adds	r7, #20
 8005d44:	46bd      	mov	sp, r7
 8005d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4a:	4770      	bx	lr

08005d4c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b082      	sub	sp, #8
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d101      	bne.n	8005d5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	e056      	b.n	8005e0c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2200      	movs	r2, #0
 8005d62:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d6a:	b2db      	uxtb	r3, r3
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d106      	bne.n	8005d7e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2200      	movs	r2, #0
 8005d74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	f00c f835 	bl	8011de8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2202      	movs	r2, #2
 8005d82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d94:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	685a      	ldr	r2, [r3, #4]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	689b      	ldr	r3, [r3, #8]
 8005d9e:	431a      	orrs	r2, r3
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	68db      	ldr	r3, [r3, #12]
 8005da4:	431a      	orrs	r2, r3
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	691b      	ldr	r3, [r3, #16]
 8005daa:	431a      	orrs	r2, r3
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	695b      	ldr	r3, [r3, #20]
 8005db0:	431a      	orrs	r2, r3
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	699b      	ldr	r3, [r3, #24]
 8005db6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005dba:	431a      	orrs	r2, r3
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	69db      	ldr	r3, [r3, #28]
 8005dc0:	431a      	orrs	r2, r3
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6a1b      	ldr	r3, [r3, #32]
 8005dc6:	ea42 0103 	orr.w	r1, r2, r3
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	430a      	orrs	r2, r1
 8005dd4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	699b      	ldr	r3, [r3, #24]
 8005dda:	0c1b      	lsrs	r3, r3, #16
 8005ddc:	f003 0104 	and.w	r1, r3, #4
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	430a      	orrs	r2, r1
 8005dea:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	69da      	ldr	r2, [r3, #28]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005dfa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2201      	movs	r2, #1
 8005e06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005e0a:	2300      	movs	r3, #0
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	3708      	adds	r7, #8
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd80      	pop	{r7, pc}

08005e14 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b08c      	sub	sp, #48	; 0x30
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	60f8      	str	r0, [r7, #12]
 8005e1c:	60b9      	str	r1, [r7, #8]
 8005e1e:	607a      	str	r2, [r7, #4]
 8005e20:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005e22:	2301      	movs	r3, #1
 8005e24:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005e26:	2300      	movs	r3, #0
 8005e28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005e32:	2b01      	cmp	r3, #1
 8005e34:	d101      	bne.n	8005e3a <HAL_SPI_TransmitReceive+0x26>
 8005e36:	2302      	movs	r3, #2
 8005e38:	e18a      	b.n	8006150 <HAL_SPI_TransmitReceive+0x33c>
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e42:	f7fb f8e7 	bl	8001014 <HAL_GetTick>
 8005e46:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005e58:	887b      	ldrh	r3, [r7, #2]
 8005e5a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005e5c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	d00f      	beq.n	8005e84 <HAL_SPI_TransmitReceive+0x70>
 8005e64:	69fb      	ldr	r3, [r7, #28]
 8005e66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e6a:	d107      	bne.n	8005e7c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	689b      	ldr	r3, [r3, #8]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d103      	bne.n	8005e7c <HAL_SPI_TransmitReceive+0x68>
 8005e74:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005e78:	2b04      	cmp	r3, #4
 8005e7a:	d003      	beq.n	8005e84 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005e7c:	2302      	movs	r3, #2
 8005e7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005e82:	e15b      	b.n	800613c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d005      	beq.n	8005e96 <HAL_SPI_TransmitReceive+0x82>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d002      	beq.n	8005e96 <HAL_SPI_TransmitReceive+0x82>
 8005e90:	887b      	ldrh	r3, [r7, #2]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d103      	bne.n	8005e9e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005e96:	2301      	movs	r3, #1
 8005e98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005e9c:	e14e      	b.n	800613c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ea4:	b2db      	uxtb	r3, r3
 8005ea6:	2b04      	cmp	r3, #4
 8005ea8:	d003      	beq.n	8005eb2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	2205      	movs	r2, #5
 8005eae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	687a      	ldr	r2, [r7, #4]
 8005ebc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	887a      	ldrh	r2, [r7, #2]
 8005ec2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	887a      	ldrh	r2, [r7, #2]
 8005ec8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	68ba      	ldr	r2, [r7, #8]
 8005ece:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	887a      	ldrh	r2, [r7, #2]
 8005ed4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	887a      	ldrh	r2, [r7, #2]
 8005eda:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ef2:	2b40      	cmp	r3, #64	; 0x40
 8005ef4:	d007      	beq.n	8005f06 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	681a      	ldr	r2, [r3, #0]
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f04:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	68db      	ldr	r3, [r3, #12]
 8005f0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f0e:	d178      	bne.n	8006002 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d002      	beq.n	8005f1e <HAL_SPI_TransmitReceive+0x10a>
 8005f18:	8b7b      	ldrh	r3, [r7, #26]
 8005f1a:	2b01      	cmp	r3, #1
 8005f1c:	d166      	bne.n	8005fec <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f22:	881a      	ldrh	r2, [r3, #0]
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f2e:	1c9a      	adds	r2, r3, #2
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f38:	b29b      	uxth	r3, r3
 8005f3a:	3b01      	subs	r3, #1
 8005f3c:	b29a      	uxth	r2, r3
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f42:	e053      	b.n	8005fec <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	689b      	ldr	r3, [r3, #8]
 8005f4a:	f003 0302 	and.w	r3, r3, #2
 8005f4e:	2b02      	cmp	r3, #2
 8005f50:	d11b      	bne.n	8005f8a <HAL_SPI_TransmitReceive+0x176>
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f56:	b29b      	uxth	r3, r3
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d016      	beq.n	8005f8a <HAL_SPI_TransmitReceive+0x176>
 8005f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f5e:	2b01      	cmp	r3, #1
 8005f60:	d113      	bne.n	8005f8a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f66:	881a      	ldrh	r2, [r3, #0]
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f72:	1c9a      	adds	r2, r3, #2
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	3b01      	subs	r3, #1
 8005f80:	b29a      	uxth	r2, r3
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005f86:	2300      	movs	r3, #0
 8005f88:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	689b      	ldr	r3, [r3, #8]
 8005f90:	f003 0301 	and.w	r3, r3, #1
 8005f94:	2b01      	cmp	r3, #1
 8005f96:	d119      	bne.n	8005fcc <HAL_SPI_TransmitReceive+0x1b8>
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d014      	beq.n	8005fcc <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	68da      	ldr	r2, [r3, #12]
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fac:	b292      	uxth	r2, r2
 8005fae:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fb4:	1c9a      	adds	r2, r3, #2
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fbe:	b29b      	uxth	r3, r3
 8005fc0:	3b01      	subs	r3, #1
 8005fc2:	b29a      	uxth	r2, r3
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005fcc:	f7fb f822 	bl	8001014 <HAL_GetTick>
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd4:	1ad3      	subs	r3, r2, r3
 8005fd6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005fd8:	429a      	cmp	r2, r3
 8005fda:	d807      	bhi.n	8005fec <HAL_SPI_TransmitReceive+0x1d8>
 8005fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fe2:	d003      	beq.n	8005fec <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005fe4:	2303      	movs	r3, #3
 8005fe6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005fea:	e0a7      	b.n	800613c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ff0:	b29b      	uxth	r3, r3
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d1a6      	bne.n	8005f44 <HAL_SPI_TransmitReceive+0x130>
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ffa:	b29b      	uxth	r3, r3
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d1a1      	bne.n	8005f44 <HAL_SPI_TransmitReceive+0x130>
 8006000:	e07c      	b.n	80060fc <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d002      	beq.n	8006010 <HAL_SPI_TransmitReceive+0x1fc>
 800600a:	8b7b      	ldrh	r3, [r7, #26]
 800600c:	2b01      	cmp	r3, #1
 800600e:	d16b      	bne.n	80060e8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	330c      	adds	r3, #12
 800601a:	7812      	ldrb	r2, [r2, #0]
 800601c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006022:	1c5a      	adds	r2, r3, #1
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800602c:	b29b      	uxth	r3, r3
 800602e:	3b01      	subs	r3, #1
 8006030:	b29a      	uxth	r2, r3
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006036:	e057      	b.n	80060e8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	689b      	ldr	r3, [r3, #8]
 800603e:	f003 0302 	and.w	r3, r3, #2
 8006042:	2b02      	cmp	r3, #2
 8006044:	d11c      	bne.n	8006080 <HAL_SPI_TransmitReceive+0x26c>
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800604a:	b29b      	uxth	r3, r3
 800604c:	2b00      	cmp	r3, #0
 800604e:	d017      	beq.n	8006080 <HAL_SPI_TransmitReceive+0x26c>
 8006050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006052:	2b01      	cmp	r3, #1
 8006054:	d114      	bne.n	8006080 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	330c      	adds	r3, #12
 8006060:	7812      	ldrb	r2, [r2, #0]
 8006062:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006068:	1c5a      	adds	r2, r3, #1
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006072:	b29b      	uxth	r3, r3
 8006074:	3b01      	subs	r3, #1
 8006076:	b29a      	uxth	r2, r3
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800607c:	2300      	movs	r3, #0
 800607e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	689b      	ldr	r3, [r3, #8]
 8006086:	f003 0301 	and.w	r3, r3, #1
 800608a:	2b01      	cmp	r3, #1
 800608c:	d119      	bne.n	80060c2 <HAL_SPI_TransmitReceive+0x2ae>
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006092:	b29b      	uxth	r3, r3
 8006094:	2b00      	cmp	r3, #0
 8006096:	d014      	beq.n	80060c2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	68da      	ldr	r2, [r3, #12]
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060a2:	b2d2      	uxtb	r2, r2
 80060a4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060aa:	1c5a      	adds	r2, r3, #1
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060b4:	b29b      	uxth	r3, r3
 80060b6:	3b01      	subs	r3, #1
 80060b8:	b29a      	uxth	r2, r3
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80060be:	2301      	movs	r3, #1
 80060c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80060c2:	f7fa ffa7 	bl	8001014 <HAL_GetTick>
 80060c6:	4602      	mov	r2, r0
 80060c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ca:	1ad3      	subs	r3, r2, r3
 80060cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80060ce:	429a      	cmp	r2, r3
 80060d0:	d803      	bhi.n	80060da <HAL_SPI_TransmitReceive+0x2c6>
 80060d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060d8:	d102      	bne.n	80060e0 <HAL_SPI_TransmitReceive+0x2cc>
 80060da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d103      	bne.n	80060e8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80060e0:	2303      	movs	r3, #3
 80060e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80060e6:	e029      	b.n	800613c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060ec:	b29b      	uxth	r3, r3
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d1a2      	bne.n	8006038 <HAL_SPI_TransmitReceive+0x224>
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060f6:	b29b      	uxth	r3, r3
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d19d      	bne.n	8006038 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80060fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060fe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006100:	68f8      	ldr	r0, [r7, #12]
 8006102:	f000 f893 	bl	800622c <SPI_EndRxTxTransaction>
 8006106:	4603      	mov	r3, r0
 8006108:	2b00      	cmp	r3, #0
 800610a:	d006      	beq.n	800611a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800610c:	2301      	movs	r3, #1
 800610e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2220      	movs	r2, #32
 8006116:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006118:	e010      	b.n	800613c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	689b      	ldr	r3, [r3, #8]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d10b      	bne.n	800613a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006122:	2300      	movs	r3, #0
 8006124:	617b      	str	r3, [r7, #20]
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	68db      	ldr	r3, [r3, #12]
 800612c:	617b      	str	r3, [r7, #20]
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	689b      	ldr	r3, [r3, #8]
 8006134:	617b      	str	r3, [r7, #20]
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	e000      	b.n	800613c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800613a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2201      	movs	r2, #1
 8006140:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2200      	movs	r2, #0
 8006148:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800614c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006150:	4618      	mov	r0, r3
 8006152:	3730      	adds	r7, #48	; 0x30
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}

08006158 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b084      	sub	sp, #16
 800615c:	af00      	add	r7, sp, #0
 800615e:	60f8      	str	r0, [r7, #12]
 8006160:	60b9      	str	r1, [r7, #8]
 8006162:	603b      	str	r3, [r7, #0]
 8006164:	4613      	mov	r3, r2
 8006166:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006168:	e04c      	b.n	8006204 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006170:	d048      	beq.n	8006204 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006172:	f7fa ff4f 	bl	8001014 <HAL_GetTick>
 8006176:	4602      	mov	r2, r0
 8006178:	69bb      	ldr	r3, [r7, #24]
 800617a:	1ad3      	subs	r3, r2, r3
 800617c:	683a      	ldr	r2, [r7, #0]
 800617e:	429a      	cmp	r2, r3
 8006180:	d902      	bls.n	8006188 <SPI_WaitFlagStateUntilTimeout+0x30>
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d13d      	bne.n	8006204 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	685a      	ldr	r2, [r3, #4]
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006196:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80061a0:	d111      	bne.n	80061c6 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	689b      	ldr	r3, [r3, #8]
 80061a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061aa:	d004      	beq.n	80061b6 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	689b      	ldr	r3, [r3, #8]
 80061b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061b4:	d107      	bne.n	80061c6 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	681a      	ldr	r2, [r3, #0]
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80061c4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061ce:	d10f      	bne.n	80061f0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	681a      	ldr	r2, [r3, #0]
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80061de:	601a      	str	r2, [r3, #0]
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	681a      	ldr	r2, [r3, #0]
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80061ee:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	2201      	movs	r2, #1
 80061f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	2200      	movs	r2, #0
 80061fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006200:	2303      	movs	r3, #3
 8006202:	e00f      	b.n	8006224 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	689a      	ldr	r2, [r3, #8]
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	4013      	ands	r3, r2
 800620e:	68ba      	ldr	r2, [r7, #8]
 8006210:	429a      	cmp	r2, r3
 8006212:	bf0c      	ite	eq
 8006214:	2301      	moveq	r3, #1
 8006216:	2300      	movne	r3, #0
 8006218:	b2db      	uxtb	r3, r3
 800621a:	461a      	mov	r2, r3
 800621c:	79fb      	ldrb	r3, [r7, #7]
 800621e:	429a      	cmp	r2, r3
 8006220:	d1a3      	bne.n	800616a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8006222:	2300      	movs	r3, #0
}
 8006224:	4618      	mov	r0, r3
 8006226:	3710      	adds	r7, #16
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}

0800622c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b088      	sub	sp, #32
 8006230:	af02      	add	r7, sp, #8
 8006232:	60f8      	str	r0, [r7, #12]
 8006234:	60b9      	str	r1, [r7, #8]
 8006236:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006238:	4b1b      	ldr	r3, [pc, #108]	; (80062a8 <SPI_EndRxTxTransaction+0x7c>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a1b      	ldr	r2, [pc, #108]	; (80062ac <SPI_EndRxTxTransaction+0x80>)
 800623e:	fba2 2303 	umull	r2, r3, r2, r3
 8006242:	0d5b      	lsrs	r3, r3, #21
 8006244:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006248:	fb02 f303 	mul.w	r3, r2, r3
 800624c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006256:	d112      	bne.n	800627e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	9300      	str	r3, [sp, #0]
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	2200      	movs	r2, #0
 8006260:	2180      	movs	r1, #128	; 0x80
 8006262:	68f8      	ldr	r0, [r7, #12]
 8006264:	f7ff ff78 	bl	8006158 <SPI_WaitFlagStateUntilTimeout>
 8006268:	4603      	mov	r3, r0
 800626a:	2b00      	cmp	r3, #0
 800626c:	d016      	beq.n	800629c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006272:	f043 0220 	orr.w	r2, r3, #32
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800627a:	2303      	movs	r3, #3
 800627c:	e00f      	b.n	800629e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d00a      	beq.n	800629a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	3b01      	subs	r3, #1
 8006288:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	689b      	ldr	r3, [r3, #8]
 8006290:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006294:	2b80      	cmp	r3, #128	; 0x80
 8006296:	d0f2      	beq.n	800627e <SPI_EndRxTxTransaction+0x52>
 8006298:	e000      	b.n	800629c <SPI_EndRxTxTransaction+0x70>
        break;
 800629a:	bf00      	nop
  }

  return HAL_OK;
 800629c:	2300      	movs	r3, #0
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3718      	adds	r7, #24
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}
 80062a6:	bf00      	nop
 80062a8:	2000004c 	.word	0x2000004c
 80062ac:	165e9f81 	.word	0x165e9f81

080062b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b082      	sub	sp, #8
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d101      	bne.n	80062c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80062be:	2301      	movs	r3, #1
 80062c0:	e01d      	b.n	80062fe <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062c8:	b2db      	uxtb	r3, r3
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d106      	bne.n	80062dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2200      	movs	r2, #0
 80062d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f000 f815 	bl	8006306 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2202      	movs	r2, #2
 80062e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681a      	ldr	r2, [r3, #0]
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	3304      	adds	r3, #4
 80062ec:	4619      	mov	r1, r3
 80062ee:	4610      	mov	r0, r2
 80062f0:	f000 f968 	bl	80065c4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2201      	movs	r2, #1
 80062f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80062fc:	2300      	movs	r3, #0
}
 80062fe:	4618      	mov	r0, r3
 8006300:	3708      	adds	r7, #8
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}

08006306 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006306:	b480      	push	{r7}
 8006308:	b083      	sub	sp, #12
 800630a:	af00      	add	r7, sp, #0
 800630c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800630e:	bf00      	nop
 8006310:	370c      	adds	r7, #12
 8006312:	46bd      	mov	sp, r7
 8006314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006318:	4770      	bx	lr

0800631a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800631a:	b480      	push	{r7}
 800631c:	b085      	sub	sp, #20
 800631e:	af00      	add	r7, sp, #0
 8006320:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	68da      	ldr	r2, [r3, #12]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f042 0201 	orr.w	r2, r2, #1
 8006330:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	689b      	ldr	r3, [r3, #8]
 8006338:	f003 0307 	and.w	r3, r3, #7
 800633c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2b06      	cmp	r3, #6
 8006342:	d007      	beq.n	8006354 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	681a      	ldr	r2, [r3, #0]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f042 0201 	orr.w	r2, r2, #1
 8006352:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006354:	2300      	movs	r3, #0
}
 8006356:	4618      	mov	r0, r3
 8006358:	3714      	adds	r7, #20
 800635a:	46bd      	mov	sp, r7
 800635c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006360:	4770      	bx	lr

08006362 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006362:	b580      	push	{r7, lr}
 8006364:	b082      	sub	sp, #8
 8006366:	af00      	add	r7, sp, #0
 8006368:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	691b      	ldr	r3, [r3, #16]
 8006370:	f003 0302 	and.w	r3, r3, #2
 8006374:	2b02      	cmp	r3, #2
 8006376:	d122      	bne.n	80063be <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	68db      	ldr	r3, [r3, #12]
 800637e:	f003 0302 	and.w	r3, r3, #2
 8006382:	2b02      	cmp	r3, #2
 8006384:	d11b      	bne.n	80063be <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f06f 0202 	mvn.w	r2, #2
 800638e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2201      	movs	r2, #1
 8006394:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	699b      	ldr	r3, [r3, #24]
 800639c:	f003 0303 	and.w	r3, r3, #3
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d003      	beq.n	80063ac <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80063a4:	6878      	ldr	r0, [r7, #4]
 80063a6:	f000 f8ee 	bl	8006586 <HAL_TIM_IC_CaptureCallback>
 80063aa:	e005      	b.n	80063b8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	f000 f8e0 	bl	8006572 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f000 f8f1 	bl	800659a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2200      	movs	r2, #0
 80063bc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	691b      	ldr	r3, [r3, #16]
 80063c4:	f003 0304 	and.w	r3, r3, #4
 80063c8:	2b04      	cmp	r3, #4
 80063ca:	d122      	bne.n	8006412 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	68db      	ldr	r3, [r3, #12]
 80063d2:	f003 0304 	and.w	r3, r3, #4
 80063d6:	2b04      	cmp	r3, #4
 80063d8:	d11b      	bne.n	8006412 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f06f 0204 	mvn.w	r2, #4
 80063e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2202      	movs	r2, #2
 80063e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	699b      	ldr	r3, [r3, #24]
 80063f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d003      	beq.n	8006400 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f000 f8c4 	bl	8006586 <HAL_TIM_IC_CaptureCallback>
 80063fe:	e005      	b.n	800640c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f000 f8b6 	bl	8006572 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f000 f8c7 	bl	800659a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2200      	movs	r2, #0
 8006410:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	691b      	ldr	r3, [r3, #16]
 8006418:	f003 0308 	and.w	r3, r3, #8
 800641c:	2b08      	cmp	r3, #8
 800641e:	d122      	bne.n	8006466 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	68db      	ldr	r3, [r3, #12]
 8006426:	f003 0308 	and.w	r3, r3, #8
 800642a:	2b08      	cmp	r3, #8
 800642c:	d11b      	bne.n	8006466 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f06f 0208 	mvn.w	r2, #8
 8006436:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2204      	movs	r2, #4
 800643c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	69db      	ldr	r3, [r3, #28]
 8006444:	f003 0303 	and.w	r3, r3, #3
 8006448:	2b00      	cmp	r3, #0
 800644a:	d003      	beq.n	8006454 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f000 f89a 	bl	8006586 <HAL_TIM_IC_CaptureCallback>
 8006452:	e005      	b.n	8006460 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f000 f88c 	bl	8006572 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f000 f89d 	bl	800659a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2200      	movs	r2, #0
 8006464:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	691b      	ldr	r3, [r3, #16]
 800646c:	f003 0310 	and.w	r3, r3, #16
 8006470:	2b10      	cmp	r3, #16
 8006472:	d122      	bne.n	80064ba <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	68db      	ldr	r3, [r3, #12]
 800647a:	f003 0310 	and.w	r3, r3, #16
 800647e:	2b10      	cmp	r3, #16
 8006480:	d11b      	bne.n	80064ba <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f06f 0210 	mvn.w	r2, #16
 800648a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2208      	movs	r2, #8
 8006490:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	69db      	ldr	r3, [r3, #28]
 8006498:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800649c:	2b00      	cmp	r3, #0
 800649e:	d003      	beq.n	80064a8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	f000 f870 	bl	8006586 <HAL_TIM_IC_CaptureCallback>
 80064a6:	e005      	b.n	80064b4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f000 f862 	bl	8006572 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f000 f873 	bl	800659a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2200      	movs	r2, #0
 80064b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	691b      	ldr	r3, [r3, #16]
 80064c0:	f003 0301 	and.w	r3, r3, #1
 80064c4:	2b01      	cmp	r3, #1
 80064c6:	d10e      	bne.n	80064e6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	68db      	ldr	r3, [r3, #12]
 80064ce:	f003 0301 	and.w	r3, r3, #1
 80064d2:	2b01      	cmp	r3, #1
 80064d4:	d107      	bne.n	80064e6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f06f 0201 	mvn.w	r2, #1
 80064de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f00a fe15 	bl	8011110 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	691b      	ldr	r3, [r3, #16]
 80064ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064f0:	2b80      	cmp	r3, #128	; 0x80
 80064f2:	d10e      	bne.n	8006512 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	68db      	ldr	r3, [r3, #12]
 80064fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064fe:	2b80      	cmp	r3, #128	; 0x80
 8006500:	d107      	bne.n	8006512 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800650a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f000 f903 	bl	8006718 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	691b      	ldr	r3, [r3, #16]
 8006518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800651c:	2b40      	cmp	r3, #64	; 0x40
 800651e:	d10e      	bne.n	800653e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	68db      	ldr	r3, [r3, #12]
 8006526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800652a:	2b40      	cmp	r3, #64	; 0x40
 800652c:	d107      	bne.n	800653e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006536:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f000 f838 	bl	80065ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	691b      	ldr	r3, [r3, #16]
 8006544:	f003 0320 	and.w	r3, r3, #32
 8006548:	2b20      	cmp	r3, #32
 800654a:	d10e      	bne.n	800656a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	68db      	ldr	r3, [r3, #12]
 8006552:	f003 0320 	and.w	r3, r3, #32
 8006556:	2b20      	cmp	r3, #32
 8006558:	d107      	bne.n	800656a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f06f 0220 	mvn.w	r2, #32
 8006562:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f000 f8cd 	bl	8006704 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800656a:	bf00      	nop
 800656c:	3708      	adds	r7, #8
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}

08006572 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006572:	b480      	push	{r7}
 8006574:	b083      	sub	sp, #12
 8006576:	af00      	add	r7, sp, #0
 8006578:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800657a:	bf00      	nop
 800657c:	370c      	adds	r7, #12
 800657e:	46bd      	mov	sp, r7
 8006580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006584:	4770      	bx	lr

08006586 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006586:	b480      	push	{r7}
 8006588:	b083      	sub	sp, #12
 800658a:	af00      	add	r7, sp, #0
 800658c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800658e:	bf00      	nop
 8006590:	370c      	adds	r7, #12
 8006592:	46bd      	mov	sp, r7
 8006594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006598:	4770      	bx	lr

0800659a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800659a:	b480      	push	{r7}
 800659c:	b083      	sub	sp, #12
 800659e:	af00      	add	r7, sp, #0
 80065a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80065a2:	bf00      	nop
 80065a4:	370c      	adds	r7, #12
 80065a6:	46bd      	mov	sp, r7
 80065a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ac:	4770      	bx	lr

080065ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80065ae:	b480      	push	{r7}
 80065b0:	b083      	sub	sp, #12
 80065b2:	af00      	add	r7, sp, #0
 80065b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80065b6:	bf00      	nop
 80065b8:	370c      	adds	r7, #12
 80065ba:	46bd      	mov	sp, r7
 80065bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c0:	4770      	bx	lr
	...

080065c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b085      	sub	sp, #20
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
 80065cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	4a40      	ldr	r2, [pc, #256]	; (80066d8 <TIM_Base_SetConfig+0x114>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d013      	beq.n	8006604 <TIM_Base_SetConfig+0x40>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065e2:	d00f      	beq.n	8006604 <TIM_Base_SetConfig+0x40>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	4a3d      	ldr	r2, [pc, #244]	; (80066dc <TIM_Base_SetConfig+0x118>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d00b      	beq.n	8006604 <TIM_Base_SetConfig+0x40>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	4a3c      	ldr	r2, [pc, #240]	; (80066e0 <TIM_Base_SetConfig+0x11c>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d007      	beq.n	8006604 <TIM_Base_SetConfig+0x40>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	4a3b      	ldr	r2, [pc, #236]	; (80066e4 <TIM_Base_SetConfig+0x120>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d003      	beq.n	8006604 <TIM_Base_SetConfig+0x40>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	4a3a      	ldr	r2, [pc, #232]	; (80066e8 <TIM_Base_SetConfig+0x124>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d108      	bne.n	8006616 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800660a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	68fa      	ldr	r2, [r7, #12]
 8006612:	4313      	orrs	r3, r2
 8006614:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	4a2f      	ldr	r2, [pc, #188]	; (80066d8 <TIM_Base_SetConfig+0x114>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d02b      	beq.n	8006676 <TIM_Base_SetConfig+0xb2>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006624:	d027      	beq.n	8006676 <TIM_Base_SetConfig+0xb2>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	4a2c      	ldr	r2, [pc, #176]	; (80066dc <TIM_Base_SetConfig+0x118>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d023      	beq.n	8006676 <TIM_Base_SetConfig+0xb2>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	4a2b      	ldr	r2, [pc, #172]	; (80066e0 <TIM_Base_SetConfig+0x11c>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d01f      	beq.n	8006676 <TIM_Base_SetConfig+0xb2>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	4a2a      	ldr	r2, [pc, #168]	; (80066e4 <TIM_Base_SetConfig+0x120>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d01b      	beq.n	8006676 <TIM_Base_SetConfig+0xb2>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	4a29      	ldr	r2, [pc, #164]	; (80066e8 <TIM_Base_SetConfig+0x124>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d017      	beq.n	8006676 <TIM_Base_SetConfig+0xb2>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	4a28      	ldr	r2, [pc, #160]	; (80066ec <TIM_Base_SetConfig+0x128>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d013      	beq.n	8006676 <TIM_Base_SetConfig+0xb2>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	4a27      	ldr	r2, [pc, #156]	; (80066f0 <TIM_Base_SetConfig+0x12c>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d00f      	beq.n	8006676 <TIM_Base_SetConfig+0xb2>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	4a26      	ldr	r2, [pc, #152]	; (80066f4 <TIM_Base_SetConfig+0x130>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d00b      	beq.n	8006676 <TIM_Base_SetConfig+0xb2>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	4a25      	ldr	r2, [pc, #148]	; (80066f8 <TIM_Base_SetConfig+0x134>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d007      	beq.n	8006676 <TIM_Base_SetConfig+0xb2>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	4a24      	ldr	r2, [pc, #144]	; (80066fc <TIM_Base_SetConfig+0x138>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d003      	beq.n	8006676 <TIM_Base_SetConfig+0xb2>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	4a23      	ldr	r2, [pc, #140]	; (8006700 <TIM_Base_SetConfig+0x13c>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d108      	bne.n	8006688 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800667c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	68db      	ldr	r3, [r3, #12]
 8006682:	68fa      	ldr	r2, [r7, #12]
 8006684:	4313      	orrs	r3, r2
 8006686:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	695b      	ldr	r3, [r3, #20]
 8006692:	4313      	orrs	r3, r2
 8006694:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	68fa      	ldr	r2, [r7, #12]
 800669a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	689a      	ldr	r2, [r3, #8]
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	681a      	ldr	r2, [r3, #0]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	4a0a      	ldr	r2, [pc, #40]	; (80066d8 <TIM_Base_SetConfig+0x114>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d003      	beq.n	80066bc <TIM_Base_SetConfig+0xf8>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	4a0c      	ldr	r2, [pc, #48]	; (80066e8 <TIM_Base_SetConfig+0x124>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d103      	bne.n	80066c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	691a      	ldr	r2, [r3, #16]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2201      	movs	r2, #1
 80066c8:	615a      	str	r2, [r3, #20]
}
 80066ca:	bf00      	nop
 80066cc:	3714      	adds	r7, #20
 80066ce:	46bd      	mov	sp, r7
 80066d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d4:	4770      	bx	lr
 80066d6:	bf00      	nop
 80066d8:	40010000 	.word	0x40010000
 80066dc:	40000400 	.word	0x40000400
 80066e0:	40000800 	.word	0x40000800
 80066e4:	40000c00 	.word	0x40000c00
 80066e8:	40010400 	.word	0x40010400
 80066ec:	40014000 	.word	0x40014000
 80066f0:	40014400 	.word	0x40014400
 80066f4:	40014800 	.word	0x40014800
 80066f8:	40001800 	.word	0x40001800
 80066fc:	40001c00 	.word	0x40001c00
 8006700:	40002000 	.word	0x40002000

08006704 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006704:	b480      	push	{r7}
 8006706:	b083      	sub	sp, #12
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800670c:	bf00      	nop
 800670e:	370c      	adds	r7, #12
 8006710:	46bd      	mov	sp, r7
 8006712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006716:	4770      	bx	lr

08006718 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006718:	b480      	push	{r7}
 800671a:	b083      	sub	sp, #12
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006720:	bf00      	nop
 8006722:	370c      	adds	r7, #12
 8006724:	46bd      	mov	sp, r7
 8006726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672a:	4770      	bx	lr

0800672c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b082      	sub	sp, #8
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d101      	bne.n	800673e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800673a:	2301      	movs	r3, #1
 800673c:	e03f      	b.n	80067be <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006744:	b2db      	uxtb	r3, r3
 8006746:	2b00      	cmp	r3, #0
 8006748:	d106      	bne.n	8006758 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2200      	movs	r2, #0
 800674e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f00b fb90 	bl	8011e78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2224      	movs	r2, #36	; 0x24
 800675c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	68da      	ldr	r2, [r3, #12]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800676e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006770:	6878      	ldr	r0, [r7, #4]
 8006772:	f000 fc73 	bl	800705c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	691a      	ldr	r2, [r3, #16]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006784:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	695a      	ldr	r2, [r3, #20]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006794:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	68da      	ldr	r2, [r3, #12]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80067a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2200      	movs	r2, #0
 80067aa:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2220      	movs	r2, #32
 80067b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2220      	movs	r2, #32
 80067b8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80067bc:	2300      	movs	r3, #0
}
 80067be:	4618      	mov	r0, r3
 80067c0:	3708      	adds	r7, #8
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}

080067c6 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067c6:	b580      	push	{r7, lr}
 80067c8:	b088      	sub	sp, #32
 80067ca:	af02      	add	r7, sp, #8
 80067cc:	60f8      	str	r0, [r7, #12]
 80067ce:	60b9      	str	r1, [r7, #8]
 80067d0:	603b      	str	r3, [r7, #0]
 80067d2:	4613      	mov	r3, r2
 80067d4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80067d6:	2300      	movs	r3, #0
 80067d8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80067e0:	b2db      	uxtb	r3, r3
 80067e2:	2b20      	cmp	r3, #32
 80067e4:	f040 8083 	bne.w	80068ee <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d002      	beq.n	80067f4 <HAL_UART_Transmit+0x2e>
 80067ee:	88fb      	ldrh	r3, [r7, #6]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d101      	bne.n	80067f8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80067f4:	2301      	movs	r3, #1
 80067f6:	e07b      	b.n	80068f0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80067fe:	2b01      	cmp	r3, #1
 8006800:	d101      	bne.n	8006806 <HAL_UART_Transmit+0x40>
 8006802:	2302      	movs	r3, #2
 8006804:	e074      	b.n	80068f0 <HAL_UART_Transmit+0x12a>
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2201      	movs	r2, #1
 800680a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2200      	movs	r2, #0
 8006812:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	2221      	movs	r2, #33	; 0x21
 8006818:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800681c:	f7fa fbfa 	bl	8001014 <HAL_GetTick>
 8006820:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	88fa      	ldrh	r2, [r7, #6]
 8006826:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	88fa      	ldrh	r2, [r7, #6]
 800682c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800682e:	e042      	b.n	80068b6 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006834:	b29b      	uxth	r3, r3
 8006836:	3b01      	subs	r3, #1
 8006838:	b29a      	uxth	r2, r3
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	689b      	ldr	r3, [r3, #8]
 8006842:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006846:	d122      	bne.n	800688e <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	9300      	str	r3, [sp, #0]
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	2200      	movs	r2, #0
 8006850:	2180      	movs	r1, #128	; 0x80
 8006852:	68f8      	ldr	r0, [r7, #12]
 8006854:	f000 fa80 	bl	8006d58 <UART_WaitOnFlagUntilTimeout>
 8006858:	4603      	mov	r3, r0
 800685a:	2b00      	cmp	r3, #0
 800685c:	d001      	beq.n	8006862 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 800685e:	2303      	movs	r3, #3
 8006860:	e046      	b.n	80068f0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8006866:	693b      	ldr	r3, [r7, #16]
 8006868:	881b      	ldrh	r3, [r3, #0]
 800686a:	461a      	mov	r2, r3
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006874:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	691b      	ldr	r3, [r3, #16]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d103      	bne.n	8006886 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	3302      	adds	r3, #2
 8006882:	60bb      	str	r3, [r7, #8]
 8006884:	e017      	b.n	80068b6 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	3301      	adds	r3, #1
 800688a:	60bb      	str	r3, [r7, #8]
 800688c:	e013      	b.n	80068b6 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	9300      	str	r3, [sp, #0]
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	2200      	movs	r2, #0
 8006896:	2180      	movs	r1, #128	; 0x80
 8006898:	68f8      	ldr	r0, [r7, #12]
 800689a:	f000 fa5d 	bl	8006d58 <UART_WaitOnFlagUntilTimeout>
 800689e:	4603      	mov	r3, r0
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d001      	beq.n	80068a8 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 80068a4:	2303      	movs	r3, #3
 80068a6:	e023      	b.n	80068f0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	1c5a      	adds	r2, r3, #1
 80068ac:	60ba      	str	r2, [r7, #8]
 80068ae:	781a      	ldrb	r2, [r3, #0]
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80068ba:	b29b      	uxth	r3, r3
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d1b7      	bne.n	8006830 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	9300      	str	r3, [sp, #0]
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	2200      	movs	r2, #0
 80068c8:	2140      	movs	r1, #64	; 0x40
 80068ca:	68f8      	ldr	r0, [r7, #12]
 80068cc:	f000 fa44 	bl	8006d58 <UART_WaitOnFlagUntilTimeout>
 80068d0:	4603      	mov	r3, r0
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d001      	beq.n	80068da <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80068d6:	2303      	movs	r3, #3
 80068d8:	e00a      	b.n	80068f0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	2220      	movs	r2, #32
 80068de:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2200      	movs	r2, #0
 80068e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80068ea:	2300      	movs	r3, #0
 80068ec:	e000      	b.n	80068f0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80068ee:	2302      	movs	r3, #2
  }
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	3718      	adds	r7, #24
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}

080068f8 <HAL_UART_Receive_DMA>:
  * @param  Size Amount of data to be received
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b086      	sub	sp, #24
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	60f8      	str	r0, [r7, #12]
 8006900:	60b9      	str	r1, [r7, #8]
 8006902:	4613      	mov	r3, r2
 8006904:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800690c:	b2db      	uxtb	r3, r3
 800690e:	2b20      	cmp	r3, #32
 8006910:	d166      	bne.n	80069e0 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d002      	beq.n	800691e <HAL_UART_Receive_DMA+0x26>
 8006918:	88fb      	ldrh	r3, [r7, #6]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d101      	bne.n	8006922 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800691e:	2301      	movs	r3, #1
 8006920:	e05f      	b.n	80069e2 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006928:	2b01      	cmp	r3, #1
 800692a:	d101      	bne.n	8006930 <HAL_UART_Receive_DMA+0x38>
 800692c:	2302      	movs	r3, #2
 800692e:	e058      	b.n	80069e2 <HAL_UART_Receive_DMA+0xea>
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	2201      	movs	r2, #1
 8006934:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8006938:	68ba      	ldr	r2, [r7, #8]
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	88fa      	ldrh	r2, [r7, #6]
 8006942:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	2200      	movs	r2, #0
 8006948:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	2222      	movs	r2, #34	; 0x22
 800694e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006956:	4a25      	ldr	r2, [pc, #148]	; (80069ec <HAL_UART_Receive_DMA+0xf4>)
 8006958:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800695e:	4a24      	ldr	r2, [pc, #144]	; (80069f0 <HAL_UART_Receive_DMA+0xf8>)
 8006960:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006966:	4a23      	ldr	r2, [pc, #140]	; (80069f4 <HAL_UART_Receive_DMA+0xfc>)
 8006968:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800696e:	2200      	movs	r2, #0
 8006970:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8006972:	f107 0308 	add.w	r3, r7, #8
 8006976:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	3304      	adds	r3, #4
 8006982:	4619      	mov	r1, r3
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	681a      	ldr	r2, [r3, #0]
 8006988:	88fb      	ldrh	r3, [r7, #6]
 800698a:	f7fa fd5f 	bl	800144c <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 800698e:	2300      	movs	r3, #0
 8006990:	613b      	str	r3, [r7, #16]
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	613b      	str	r3, [r7, #16]
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	613b      	str	r3, [r7, #16]
 80069a2:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2200      	movs	r2, #0
 80069a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	68da      	ldr	r2, [r3, #12]
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80069ba:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	695a      	ldr	r2, [r3, #20]
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f042 0201 	orr.w	r2, r2, #1
 80069ca:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	695a      	ldr	r2, [r3, #20]
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80069da:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80069dc:	2300      	movs	r3, #0
 80069de:	e000      	b.n	80069e2 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80069e0:	2302      	movs	r3, #2
  }
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	3718      	adds	r7, #24
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd80      	pop	{r7, pc}
 80069ea:	bf00      	nop
 80069ec:	08006c41 	.word	0x08006c41
 80069f0:	08006ca9 	.word	0x08006ca9
 80069f4:	08006cc5 	.word	0x08006cc5

080069f8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b088      	sub	sp, #32
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	68db      	ldr	r3, [r3, #12]
 8006a0e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	695b      	ldr	r3, [r3, #20]
 8006a16:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8006a18:	2300      	movs	r3, #0
 8006a1a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006a20:	69fb      	ldr	r3, [r7, #28]
 8006a22:	f003 030f 	and.w	r3, r3, #15
 8006a26:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d10d      	bne.n	8006a4a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006a2e:	69fb      	ldr	r3, [r7, #28]
 8006a30:	f003 0320 	and.w	r3, r3, #32
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d008      	beq.n	8006a4a <HAL_UART_IRQHandler+0x52>
 8006a38:	69bb      	ldr	r3, [r7, #24]
 8006a3a:	f003 0320 	and.w	r3, r3, #32
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d003      	beq.n	8006a4a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f000 fa88 	bl	8006f58 <UART_Receive_IT>
      return;
 8006a48:	e0cc      	b.n	8006be4 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	f000 80ab 	beq.w	8006ba8 <HAL_UART_IRQHandler+0x1b0>
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	f003 0301 	and.w	r3, r3, #1
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d105      	bne.n	8006a68 <HAL_UART_IRQHandler+0x70>
 8006a5c:	69bb      	ldr	r3, [r7, #24]
 8006a5e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	f000 80a0 	beq.w	8006ba8 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006a68:	69fb      	ldr	r3, [r7, #28]
 8006a6a:	f003 0301 	and.w	r3, r3, #1
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d00a      	beq.n	8006a88 <HAL_UART_IRQHandler+0x90>
 8006a72:	69bb      	ldr	r3, [r7, #24]
 8006a74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d005      	beq.n	8006a88 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a80:	f043 0201 	orr.w	r2, r3, #1
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006a88:	69fb      	ldr	r3, [r7, #28]
 8006a8a:	f003 0304 	and.w	r3, r3, #4
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d00a      	beq.n	8006aa8 <HAL_UART_IRQHandler+0xb0>
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	f003 0301 	and.w	r3, r3, #1
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d005      	beq.n	8006aa8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006aa0:	f043 0202 	orr.w	r2, r3, #2
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006aa8:	69fb      	ldr	r3, [r7, #28]
 8006aaa:	f003 0302 	and.w	r3, r3, #2
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d00a      	beq.n	8006ac8 <HAL_UART_IRQHandler+0xd0>
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	f003 0301 	and.w	r3, r3, #1
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d005      	beq.n	8006ac8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ac0:	f043 0204 	orr.w	r2, r3, #4
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006ac8:	69fb      	ldr	r3, [r7, #28]
 8006aca:	f003 0308 	and.w	r3, r3, #8
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d00a      	beq.n	8006ae8 <HAL_UART_IRQHandler+0xf0>
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	f003 0301 	and.w	r3, r3, #1
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d005      	beq.n	8006ae8 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ae0:	f043 0208 	orr.w	r2, r3, #8
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d078      	beq.n	8006be2 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006af0:	69fb      	ldr	r3, [r7, #28]
 8006af2:	f003 0320 	and.w	r3, r3, #32
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d007      	beq.n	8006b0a <HAL_UART_IRQHandler+0x112>
 8006afa:	69bb      	ldr	r3, [r7, #24]
 8006afc:	f003 0320 	and.w	r3, r3, #32
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d002      	beq.n	8006b0a <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	f000 fa27 	bl	8006f58 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	695b      	ldr	r3, [r3, #20]
 8006b10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b14:	2b40      	cmp	r3, #64	; 0x40
 8006b16:	bf0c      	ite	eq
 8006b18:	2301      	moveq	r3, #1
 8006b1a:	2300      	movne	r3, #0
 8006b1c:	b2db      	uxtb	r3, r3
 8006b1e:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b24:	f003 0308 	and.w	r3, r3, #8
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d102      	bne.n	8006b32 <HAL_UART_IRQHandler+0x13a>
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d031      	beq.n	8006b96 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f000 f970 	bl	8006e18 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	695b      	ldr	r3, [r3, #20]
 8006b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b42:	2b40      	cmp	r3, #64	; 0x40
 8006b44:	d123      	bne.n	8006b8e <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	695a      	ldr	r2, [r3, #20]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b54:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d013      	beq.n	8006b86 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b62:	4a22      	ldr	r2, [pc, #136]	; (8006bec <HAL_UART_IRQHandler+0x1f4>)
 8006b64:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f7fa fcce 	bl	800150c <HAL_DMA_Abort_IT>
 8006b70:	4603      	mov	r3, r0
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d016      	beq.n	8006ba4 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b7c:	687a      	ldr	r2, [r7, #4]
 8006b7e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006b80:	4610      	mov	r0, r2
 8006b82:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b84:	e00e      	b.n	8006ba4 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f000 f850 	bl	8006c2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b8c:	e00a      	b.n	8006ba4 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f000 f84c 	bl	8006c2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b94:	e006      	b.n	8006ba4 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f000 f848 	bl	8006c2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8006ba2:	e01e      	b.n	8006be2 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ba4:	bf00      	nop
    return;
 8006ba6:	e01c      	b.n	8006be2 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006ba8:	69fb      	ldr	r3, [r7, #28]
 8006baa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d008      	beq.n	8006bc4 <HAL_UART_IRQHandler+0x1cc>
 8006bb2:	69bb      	ldr	r3, [r7, #24]
 8006bb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d003      	beq.n	8006bc4 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	f000 f95d 	bl	8006e7c <UART_Transmit_IT>
    return;
 8006bc2:	e00f      	b.n	8006be4 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006bc4:	69fb      	ldr	r3, [r7, #28]
 8006bc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d00a      	beq.n	8006be4 <HAL_UART_IRQHandler+0x1ec>
 8006bce:	69bb      	ldr	r3, [r7, #24]
 8006bd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d005      	beq.n	8006be4 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f000 f9a5 	bl	8006f28 <UART_EndTransmit_IT>
    return;
 8006bde:	bf00      	nop
 8006be0:	e000      	b.n	8006be4 <HAL_UART_IRQHandler+0x1ec>
    return;
 8006be2:	bf00      	nop
  }
}
 8006be4:	3720      	adds	r7, #32
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}
 8006bea:	bf00      	nop
 8006bec:	08006e55 	.word	0x08006e55

08006bf0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b083      	sub	sp, #12
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006bf8:	bf00      	nop
 8006bfa:	370c      	adds	r7, #12
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c02:	4770      	bx	lr

08006c04 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006c04:	b480      	push	{r7}
 8006c06:	b083      	sub	sp, #12
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006c0c:	bf00      	nop
 8006c0e:	370c      	adds	r7, #12
 8006c10:	46bd      	mov	sp, r7
 8006c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c16:	4770      	bx	lr

08006c18 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b083      	sub	sp, #12
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006c20:	bf00      	nop
 8006c22:	370c      	adds	r7, #12
 8006c24:	46bd      	mov	sp, r7
 8006c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2a:	4770      	bx	lr

08006c2c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b083      	sub	sp, #12
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006c34:	bf00      	nop
 8006c36:	370c      	adds	r7, #12
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3e:	4770      	bx	lr

08006c40 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b084      	sub	sp, #16
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c4c:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d11e      	bne.n	8006c9a <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	68da      	ldr	r2, [r3, #12]
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006c70:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	695a      	ldr	r2, [r3, #20]
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f022 0201 	bic.w	r2, r2, #1
 8006c80:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	695a      	ldr	r2, [r3, #20]
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c90:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	2220      	movs	r2, #32
 8006c96:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8006c9a:	68f8      	ldr	r0, [r7, #12]
 8006c9c:	f7ff ffb2 	bl	8006c04 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ca0:	bf00      	nop
 8006ca2:	3710      	adds	r7, #16
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bd80      	pop	{r7, pc}

08006ca8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b084      	sub	sp, #16
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cb4:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8006cb6:	68f8      	ldr	r0, [r7, #12]
 8006cb8:	f7ff ffae 	bl	8006c18 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006cbc:	bf00      	nop
 8006cbe:	3710      	adds	r7, #16
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bd80      	pop	{r7, pc}

08006cc4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b084      	sub	sp, #16
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006ccc:	2300      	movs	r3, #0
 8006cce:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cd4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	695b      	ldr	r3, [r3, #20]
 8006cdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ce0:	2b80      	cmp	r3, #128	; 0x80
 8006ce2:	bf0c      	ite	eq
 8006ce4:	2301      	moveq	r3, #1
 8006ce6:	2300      	movne	r3, #0
 8006ce8:	b2db      	uxtb	r3, r3
 8006cea:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006cf2:	b2db      	uxtb	r3, r3
 8006cf4:	2b21      	cmp	r3, #33	; 0x21
 8006cf6:	d108      	bne.n	8006d0a <UART_DMAError+0x46>
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d005      	beq.n	8006d0a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	2200      	movs	r2, #0
 8006d02:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006d04:	68b8      	ldr	r0, [r7, #8]
 8006d06:	f000 f871 	bl	8006dec <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	695b      	ldr	r3, [r3, #20]
 8006d10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d14:	2b40      	cmp	r3, #64	; 0x40
 8006d16:	bf0c      	ite	eq
 8006d18:	2301      	moveq	r3, #1
 8006d1a:	2300      	movne	r3, #0
 8006d1c:	b2db      	uxtb	r3, r3
 8006d1e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006d26:	b2db      	uxtb	r3, r3
 8006d28:	2b22      	cmp	r3, #34	; 0x22
 8006d2a:	d108      	bne.n	8006d3e <UART_DMAError+0x7a>
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d005      	beq.n	8006d3e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	2200      	movs	r2, #0
 8006d36:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006d38:	68b8      	ldr	r0, [r7, #8]
 8006d3a:	f000 f86d 	bl	8006e18 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d42:	f043 0210 	orr.w	r2, r3, #16
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006d4a:	68b8      	ldr	r0, [r7, #8]
 8006d4c:	f7ff ff6e 	bl	8006c2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d50:	bf00      	nop
 8006d52:	3710      	adds	r7, #16
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}

08006d58 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b084      	sub	sp, #16
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	60f8      	str	r0, [r7, #12]
 8006d60:	60b9      	str	r1, [r7, #8]
 8006d62:	603b      	str	r3, [r7, #0]
 8006d64:	4613      	mov	r3, r2
 8006d66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d68:	e02c      	b.n	8006dc4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d6a:	69bb      	ldr	r3, [r7, #24]
 8006d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d70:	d028      	beq.n	8006dc4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006d72:	69bb      	ldr	r3, [r7, #24]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d007      	beq.n	8006d88 <UART_WaitOnFlagUntilTimeout+0x30>
 8006d78:	f7fa f94c 	bl	8001014 <HAL_GetTick>
 8006d7c:	4602      	mov	r2, r0
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	1ad3      	subs	r3, r2, r3
 8006d82:	69ba      	ldr	r2, [r7, #24]
 8006d84:	429a      	cmp	r2, r3
 8006d86:	d21d      	bcs.n	8006dc4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	68da      	ldr	r2, [r3, #12]
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006d96:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	695a      	ldr	r2, [r3, #20]
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f022 0201 	bic.w	r2, r2, #1
 8006da6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	2220      	movs	r2, #32
 8006dac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	2220      	movs	r2, #32
 8006db4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8006dc0:	2303      	movs	r3, #3
 8006dc2:	e00f      	b.n	8006de4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	681a      	ldr	r2, [r3, #0]
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	4013      	ands	r3, r2
 8006dce:	68ba      	ldr	r2, [r7, #8]
 8006dd0:	429a      	cmp	r2, r3
 8006dd2:	bf0c      	ite	eq
 8006dd4:	2301      	moveq	r3, #1
 8006dd6:	2300      	movne	r3, #0
 8006dd8:	b2db      	uxtb	r3, r3
 8006dda:	461a      	mov	r2, r3
 8006ddc:	79fb      	ldrb	r3, [r7, #7]
 8006dde:	429a      	cmp	r2, r3
 8006de0:	d0c3      	beq.n	8006d6a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006de2:	2300      	movs	r3, #0
}
 8006de4:	4618      	mov	r0, r3
 8006de6:	3710      	adds	r7, #16
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bd80      	pop	{r7, pc}

08006dec <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b083      	sub	sp, #12
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	68da      	ldr	r2, [r3, #12]
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8006e02:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2220      	movs	r2, #32
 8006e08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8006e0c:	bf00      	nop
 8006e0e:	370c      	adds	r7, #12
 8006e10:	46bd      	mov	sp, r7
 8006e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e16:	4770      	bx	lr

08006e18 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b083      	sub	sp, #12
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	68da      	ldr	r2, [r3, #12]
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006e2e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	695a      	ldr	r2, [r3, #20]
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f022 0201 	bic.w	r2, r2, #1
 8006e3e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2220      	movs	r2, #32
 8006e44:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8006e48:	bf00      	nop
 8006e4a:	370c      	adds	r7, #12
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e52:	4770      	bx	lr

08006e54 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b084      	sub	sp, #16
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e60:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	2200      	movs	r2, #0
 8006e66:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006e6e:	68f8      	ldr	r0, [r7, #12]
 8006e70:	f7ff fedc 	bl	8006c2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e74:	bf00      	nop
 8006e76:	3710      	adds	r7, #16
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bd80      	pop	{r7, pc}

08006e7c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b085      	sub	sp, #20
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006e8a:	b2db      	uxtb	r3, r3
 8006e8c:	2b21      	cmp	r3, #33	; 0x21
 8006e8e:	d144      	bne.n	8006f1a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	689b      	ldr	r3, [r3, #8]
 8006e94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e98:	d11a      	bne.n	8006ed0 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6a1b      	ldr	r3, [r3, #32]
 8006e9e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	881b      	ldrh	r3, [r3, #0]
 8006ea4:	461a      	mov	r2, r3
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006eae:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	691b      	ldr	r3, [r3, #16]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d105      	bne.n	8006ec4 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6a1b      	ldr	r3, [r3, #32]
 8006ebc:	1c9a      	adds	r2, r3, #2
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	621a      	str	r2, [r3, #32]
 8006ec2:	e00e      	b.n	8006ee2 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6a1b      	ldr	r3, [r3, #32]
 8006ec8:	1c5a      	adds	r2, r3, #1
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	621a      	str	r2, [r3, #32]
 8006ece:	e008      	b.n	8006ee2 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6a1b      	ldr	r3, [r3, #32]
 8006ed4:	1c59      	adds	r1, r3, #1
 8006ed6:	687a      	ldr	r2, [r7, #4]
 8006ed8:	6211      	str	r1, [r2, #32]
 8006eda:	781a      	ldrb	r2, [r3, #0]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006ee6:	b29b      	uxth	r3, r3
 8006ee8:	3b01      	subs	r3, #1
 8006eea:	b29b      	uxth	r3, r3
 8006eec:	687a      	ldr	r2, [r7, #4]
 8006eee:	4619      	mov	r1, r3
 8006ef0:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d10f      	bne.n	8006f16 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	68da      	ldr	r2, [r3, #12]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f04:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	68da      	ldr	r2, [r3, #12]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f14:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006f16:	2300      	movs	r3, #0
 8006f18:	e000      	b.n	8006f1c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006f1a:	2302      	movs	r3, #2
  }
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	3714      	adds	r7, #20
 8006f20:	46bd      	mov	sp, r7
 8006f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f26:	4770      	bx	lr

08006f28 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b082      	sub	sp, #8
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	68da      	ldr	r2, [r3, #12]
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f3e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2220      	movs	r2, #32
 8006f44:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f7ff fe51 	bl	8006bf0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006f4e:	2300      	movs	r3, #0
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	3708      	adds	r7, #8
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bd80      	pop	{r7, pc}

08006f58 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b084      	sub	sp, #16
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006f66:	b2db      	uxtb	r3, r3
 8006f68:	2b22      	cmp	r3, #34	; 0x22
 8006f6a:	d171      	bne.n	8007050 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	689b      	ldr	r3, [r3, #8]
 8006f70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f74:	d123      	bne.n	8006fbe <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f7a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	691b      	ldr	r3, [r3, #16]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d10e      	bne.n	8006fa2 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	685b      	ldr	r3, [r3, #4]
 8006f8a:	b29b      	uxth	r3, r3
 8006f8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f90:	b29a      	uxth	r2, r3
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f9a:	1c9a      	adds	r2, r3, #2
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	629a      	str	r2, [r3, #40]	; 0x28
 8006fa0:	e029      	b.n	8006ff6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	685b      	ldr	r3, [r3, #4]
 8006fa8:	b29b      	uxth	r3, r3
 8006faa:	b2db      	uxtb	r3, r3
 8006fac:	b29a      	uxth	r2, r3
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fb6:	1c5a      	adds	r2, r3, #1
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	629a      	str	r2, [r3, #40]	; 0x28
 8006fbc:	e01b      	b.n	8006ff6 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	691b      	ldr	r3, [r3, #16]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d10a      	bne.n	8006fdc <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	6858      	ldr	r0, [r3, #4]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fd0:	1c59      	adds	r1, r3, #1
 8006fd2:	687a      	ldr	r2, [r7, #4]
 8006fd4:	6291      	str	r1, [r2, #40]	; 0x28
 8006fd6:	b2c2      	uxtb	r2, r0
 8006fd8:	701a      	strb	r2, [r3, #0]
 8006fda:	e00c      	b.n	8006ff6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	685b      	ldr	r3, [r3, #4]
 8006fe2:	b2da      	uxtb	r2, r3
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fe8:	1c58      	adds	r0, r3, #1
 8006fea:	6879      	ldr	r1, [r7, #4]
 8006fec:	6288      	str	r0, [r1, #40]	; 0x28
 8006fee:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006ff2:	b2d2      	uxtb	r2, r2
 8006ff4:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006ffa:	b29b      	uxth	r3, r3
 8006ffc:	3b01      	subs	r3, #1
 8006ffe:	b29b      	uxth	r3, r3
 8007000:	687a      	ldr	r2, [r7, #4]
 8007002:	4619      	mov	r1, r3
 8007004:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007006:	2b00      	cmp	r3, #0
 8007008:	d120      	bne.n	800704c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	68da      	ldr	r2, [r3, #12]
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f022 0220 	bic.w	r2, r2, #32
 8007018:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	68da      	ldr	r2, [r3, #12]
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007028:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	695a      	ldr	r2, [r3, #20]
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f022 0201 	bic.w	r2, r2, #1
 8007038:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2220      	movs	r2, #32
 800703e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f7ff fdde 	bl	8006c04 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8007048:	2300      	movs	r3, #0
 800704a:	e002      	b.n	8007052 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800704c:	2300      	movs	r3, #0
 800704e:	e000      	b.n	8007052 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8007050:	2302      	movs	r3, #2
  }
}
 8007052:	4618      	mov	r0, r3
 8007054:	3710      	adds	r7, #16
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}
	...

0800705c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800705c:	b5b0      	push	{r4, r5, r7, lr}
 800705e:	b084      	sub	sp, #16
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	691b      	ldr	r3, [r3, #16]
 800706a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	68da      	ldr	r2, [r3, #12]
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	430a      	orrs	r2, r1
 8007078:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	689a      	ldr	r2, [r3, #8]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	691b      	ldr	r3, [r3, #16]
 8007082:	431a      	orrs	r2, r3
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	695b      	ldr	r3, [r3, #20]
 8007088:	431a      	orrs	r2, r3
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	69db      	ldr	r3, [r3, #28]
 800708e:	4313      	orrs	r3, r2
 8007090:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	68db      	ldr	r3, [r3, #12]
 8007098:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800709c:	f023 030c 	bic.w	r3, r3, #12
 80070a0:	687a      	ldr	r2, [r7, #4]
 80070a2:	6812      	ldr	r2, [r2, #0]
 80070a4:	68f9      	ldr	r1, [r7, #12]
 80070a6:	430b      	orrs	r3, r1
 80070a8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	695b      	ldr	r3, [r3, #20]
 80070b0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	699a      	ldr	r2, [r3, #24]
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	430a      	orrs	r2, r1
 80070be:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	69db      	ldr	r3, [r3, #28]
 80070c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070c8:	f040 80e4 	bne.w	8007294 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4aab      	ldr	r2, [pc, #684]	; (8007380 <UART_SetConfig+0x324>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d004      	beq.n	80070e0 <UART_SetConfig+0x84>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4aaa      	ldr	r2, [pc, #680]	; (8007384 <UART_SetConfig+0x328>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d16c      	bne.n	80071ba <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80070e0:	f7fe f952 	bl	8005388 <HAL_RCC_GetPCLK2Freq>
 80070e4:	4602      	mov	r2, r0
 80070e6:	4613      	mov	r3, r2
 80070e8:	009b      	lsls	r3, r3, #2
 80070ea:	4413      	add	r3, r2
 80070ec:	009a      	lsls	r2, r3, #2
 80070ee:	441a      	add	r2, r3
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	685b      	ldr	r3, [r3, #4]
 80070f4:	005b      	lsls	r3, r3, #1
 80070f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80070fa:	4aa3      	ldr	r2, [pc, #652]	; (8007388 <UART_SetConfig+0x32c>)
 80070fc:	fba2 2303 	umull	r2, r3, r2, r3
 8007100:	095b      	lsrs	r3, r3, #5
 8007102:	011c      	lsls	r4, r3, #4
 8007104:	f7fe f940 	bl	8005388 <HAL_RCC_GetPCLK2Freq>
 8007108:	4602      	mov	r2, r0
 800710a:	4613      	mov	r3, r2
 800710c:	009b      	lsls	r3, r3, #2
 800710e:	4413      	add	r3, r2
 8007110:	009a      	lsls	r2, r3, #2
 8007112:	441a      	add	r2, r3
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	685b      	ldr	r3, [r3, #4]
 8007118:	005b      	lsls	r3, r3, #1
 800711a:	fbb2 f5f3 	udiv	r5, r2, r3
 800711e:	f7fe f933 	bl	8005388 <HAL_RCC_GetPCLK2Freq>
 8007122:	4602      	mov	r2, r0
 8007124:	4613      	mov	r3, r2
 8007126:	009b      	lsls	r3, r3, #2
 8007128:	4413      	add	r3, r2
 800712a:	009a      	lsls	r2, r3, #2
 800712c:	441a      	add	r2, r3
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	685b      	ldr	r3, [r3, #4]
 8007132:	005b      	lsls	r3, r3, #1
 8007134:	fbb2 f3f3 	udiv	r3, r2, r3
 8007138:	4a93      	ldr	r2, [pc, #588]	; (8007388 <UART_SetConfig+0x32c>)
 800713a:	fba2 2303 	umull	r2, r3, r2, r3
 800713e:	095b      	lsrs	r3, r3, #5
 8007140:	2264      	movs	r2, #100	; 0x64
 8007142:	fb02 f303 	mul.w	r3, r2, r3
 8007146:	1aeb      	subs	r3, r5, r3
 8007148:	00db      	lsls	r3, r3, #3
 800714a:	3332      	adds	r3, #50	; 0x32
 800714c:	4a8e      	ldr	r2, [pc, #568]	; (8007388 <UART_SetConfig+0x32c>)
 800714e:	fba2 2303 	umull	r2, r3, r2, r3
 8007152:	095b      	lsrs	r3, r3, #5
 8007154:	005b      	lsls	r3, r3, #1
 8007156:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800715a:	441c      	add	r4, r3
 800715c:	f7fe f914 	bl	8005388 <HAL_RCC_GetPCLK2Freq>
 8007160:	4602      	mov	r2, r0
 8007162:	4613      	mov	r3, r2
 8007164:	009b      	lsls	r3, r3, #2
 8007166:	4413      	add	r3, r2
 8007168:	009a      	lsls	r2, r3, #2
 800716a:	441a      	add	r2, r3
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	685b      	ldr	r3, [r3, #4]
 8007170:	005b      	lsls	r3, r3, #1
 8007172:	fbb2 f5f3 	udiv	r5, r2, r3
 8007176:	f7fe f907 	bl	8005388 <HAL_RCC_GetPCLK2Freq>
 800717a:	4602      	mov	r2, r0
 800717c:	4613      	mov	r3, r2
 800717e:	009b      	lsls	r3, r3, #2
 8007180:	4413      	add	r3, r2
 8007182:	009a      	lsls	r2, r3, #2
 8007184:	441a      	add	r2, r3
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	685b      	ldr	r3, [r3, #4]
 800718a:	005b      	lsls	r3, r3, #1
 800718c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007190:	4a7d      	ldr	r2, [pc, #500]	; (8007388 <UART_SetConfig+0x32c>)
 8007192:	fba2 2303 	umull	r2, r3, r2, r3
 8007196:	095b      	lsrs	r3, r3, #5
 8007198:	2264      	movs	r2, #100	; 0x64
 800719a:	fb02 f303 	mul.w	r3, r2, r3
 800719e:	1aeb      	subs	r3, r5, r3
 80071a0:	00db      	lsls	r3, r3, #3
 80071a2:	3332      	adds	r3, #50	; 0x32
 80071a4:	4a78      	ldr	r2, [pc, #480]	; (8007388 <UART_SetConfig+0x32c>)
 80071a6:	fba2 2303 	umull	r2, r3, r2, r3
 80071aa:	095b      	lsrs	r3, r3, #5
 80071ac:	f003 0207 	and.w	r2, r3, #7
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4422      	add	r2, r4
 80071b6:	609a      	str	r2, [r3, #8]
 80071b8:	e154      	b.n	8007464 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80071ba:	f7fe f8d1 	bl	8005360 <HAL_RCC_GetPCLK1Freq>
 80071be:	4602      	mov	r2, r0
 80071c0:	4613      	mov	r3, r2
 80071c2:	009b      	lsls	r3, r3, #2
 80071c4:	4413      	add	r3, r2
 80071c6:	009a      	lsls	r2, r3, #2
 80071c8:	441a      	add	r2, r3
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	685b      	ldr	r3, [r3, #4]
 80071ce:	005b      	lsls	r3, r3, #1
 80071d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80071d4:	4a6c      	ldr	r2, [pc, #432]	; (8007388 <UART_SetConfig+0x32c>)
 80071d6:	fba2 2303 	umull	r2, r3, r2, r3
 80071da:	095b      	lsrs	r3, r3, #5
 80071dc:	011c      	lsls	r4, r3, #4
 80071de:	f7fe f8bf 	bl	8005360 <HAL_RCC_GetPCLK1Freq>
 80071e2:	4602      	mov	r2, r0
 80071e4:	4613      	mov	r3, r2
 80071e6:	009b      	lsls	r3, r3, #2
 80071e8:	4413      	add	r3, r2
 80071ea:	009a      	lsls	r2, r3, #2
 80071ec:	441a      	add	r2, r3
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	685b      	ldr	r3, [r3, #4]
 80071f2:	005b      	lsls	r3, r3, #1
 80071f4:	fbb2 f5f3 	udiv	r5, r2, r3
 80071f8:	f7fe f8b2 	bl	8005360 <HAL_RCC_GetPCLK1Freq>
 80071fc:	4602      	mov	r2, r0
 80071fe:	4613      	mov	r3, r2
 8007200:	009b      	lsls	r3, r3, #2
 8007202:	4413      	add	r3, r2
 8007204:	009a      	lsls	r2, r3, #2
 8007206:	441a      	add	r2, r3
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	685b      	ldr	r3, [r3, #4]
 800720c:	005b      	lsls	r3, r3, #1
 800720e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007212:	4a5d      	ldr	r2, [pc, #372]	; (8007388 <UART_SetConfig+0x32c>)
 8007214:	fba2 2303 	umull	r2, r3, r2, r3
 8007218:	095b      	lsrs	r3, r3, #5
 800721a:	2264      	movs	r2, #100	; 0x64
 800721c:	fb02 f303 	mul.w	r3, r2, r3
 8007220:	1aeb      	subs	r3, r5, r3
 8007222:	00db      	lsls	r3, r3, #3
 8007224:	3332      	adds	r3, #50	; 0x32
 8007226:	4a58      	ldr	r2, [pc, #352]	; (8007388 <UART_SetConfig+0x32c>)
 8007228:	fba2 2303 	umull	r2, r3, r2, r3
 800722c:	095b      	lsrs	r3, r3, #5
 800722e:	005b      	lsls	r3, r3, #1
 8007230:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007234:	441c      	add	r4, r3
 8007236:	f7fe f893 	bl	8005360 <HAL_RCC_GetPCLK1Freq>
 800723a:	4602      	mov	r2, r0
 800723c:	4613      	mov	r3, r2
 800723e:	009b      	lsls	r3, r3, #2
 8007240:	4413      	add	r3, r2
 8007242:	009a      	lsls	r2, r3, #2
 8007244:	441a      	add	r2, r3
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	685b      	ldr	r3, [r3, #4]
 800724a:	005b      	lsls	r3, r3, #1
 800724c:	fbb2 f5f3 	udiv	r5, r2, r3
 8007250:	f7fe f886 	bl	8005360 <HAL_RCC_GetPCLK1Freq>
 8007254:	4602      	mov	r2, r0
 8007256:	4613      	mov	r3, r2
 8007258:	009b      	lsls	r3, r3, #2
 800725a:	4413      	add	r3, r2
 800725c:	009a      	lsls	r2, r3, #2
 800725e:	441a      	add	r2, r3
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	685b      	ldr	r3, [r3, #4]
 8007264:	005b      	lsls	r3, r3, #1
 8007266:	fbb2 f3f3 	udiv	r3, r2, r3
 800726a:	4a47      	ldr	r2, [pc, #284]	; (8007388 <UART_SetConfig+0x32c>)
 800726c:	fba2 2303 	umull	r2, r3, r2, r3
 8007270:	095b      	lsrs	r3, r3, #5
 8007272:	2264      	movs	r2, #100	; 0x64
 8007274:	fb02 f303 	mul.w	r3, r2, r3
 8007278:	1aeb      	subs	r3, r5, r3
 800727a:	00db      	lsls	r3, r3, #3
 800727c:	3332      	adds	r3, #50	; 0x32
 800727e:	4a42      	ldr	r2, [pc, #264]	; (8007388 <UART_SetConfig+0x32c>)
 8007280:	fba2 2303 	umull	r2, r3, r2, r3
 8007284:	095b      	lsrs	r3, r3, #5
 8007286:	f003 0207 	and.w	r2, r3, #7
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4422      	add	r2, r4
 8007290:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8007292:	e0e7      	b.n	8007464 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4a39      	ldr	r2, [pc, #228]	; (8007380 <UART_SetConfig+0x324>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d004      	beq.n	80072a8 <UART_SetConfig+0x24c>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4a38      	ldr	r2, [pc, #224]	; (8007384 <UART_SetConfig+0x328>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d171      	bne.n	800738c <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80072a8:	f7fe f86e 	bl	8005388 <HAL_RCC_GetPCLK2Freq>
 80072ac:	4602      	mov	r2, r0
 80072ae:	4613      	mov	r3, r2
 80072b0:	009b      	lsls	r3, r3, #2
 80072b2:	4413      	add	r3, r2
 80072b4:	009a      	lsls	r2, r3, #2
 80072b6:	441a      	add	r2, r3
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	685b      	ldr	r3, [r3, #4]
 80072bc:	009b      	lsls	r3, r3, #2
 80072be:	fbb2 f3f3 	udiv	r3, r2, r3
 80072c2:	4a31      	ldr	r2, [pc, #196]	; (8007388 <UART_SetConfig+0x32c>)
 80072c4:	fba2 2303 	umull	r2, r3, r2, r3
 80072c8:	095b      	lsrs	r3, r3, #5
 80072ca:	011c      	lsls	r4, r3, #4
 80072cc:	f7fe f85c 	bl	8005388 <HAL_RCC_GetPCLK2Freq>
 80072d0:	4602      	mov	r2, r0
 80072d2:	4613      	mov	r3, r2
 80072d4:	009b      	lsls	r3, r3, #2
 80072d6:	4413      	add	r3, r2
 80072d8:	009a      	lsls	r2, r3, #2
 80072da:	441a      	add	r2, r3
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	009b      	lsls	r3, r3, #2
 80072e2:	fbb2 f5f3 	udiv	r5, r2, r3
 80072e6:	f7fe f84f 	bl	8005388 <HAL_RCC_GetPCLK2Freq>
 80072ea:	4602      	mov	r2, r0
 80072ec:	4613      	mov	r3, r2
 80072ee:	009b      	lsls	r3, r3, #2
 80072f0:	4413      	add	r3, r2
 80072f2:	009a      	lsls	r2, r3, #2
 80072f4:	441a      	add	r2, r3
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	685b      	ldr	r3, [r3, #4]
 80072fa:	009b      	lsls	r3, r3, #2
 80072fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007300:	4a21      	ldr	r2, [pc, #132]	; (8007388 <UART_SetConfig+0x32c>)
 8007302:	fba2 2303 	umull	r2, r3, r2, r3
 8007306:	095b      	lsrs	r3, r3, #5
 8007308:	2264      	movs	r2, #100	; 0x64
 800730a:	fb02 f303 	mul.w	r3, r2, r3
 800730e:	1aeb      	subs	r3, r5, r3
 8007310:	011b      	lsls	r3, r3, #4
 8007312:	3332      	adds	r3, #50	; 0x32
 8007314:	4a1c      	ldr	r2, [pc, #112]	; (8007388 <UART_SetConfig+0x32c>)
 8007316:	fba2 2303 	umull	r2, r3, r2, r3
 800731a:	095b      	lsrs	r3, r3, #5
 800731c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007320:	441c      	add	r4, r3
 8007322:	f7fe f831 	bl	8005388 <HAL_RCC_GetPCLK2Freq>
 8007326:	4602      	mov	r2, r0
 8007328:	4613      	mov	r3, r2
 800732a:	009b      	lsls	r3, r3, #2
 800732c:	4413      	add	r3, r2
 800732e:	009a      	lsls	r2, r3, #2
 8007330:	441a      	add	r2, r3
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	685b      	ldr	r3, [r3, #4]
 8007336:	009b      	lsls	r3, r3, #2
 8007338:	fbb2 f5f3 	udiv	r5, r2, r3
 800733c:	f7fe f824 	bl	8005388 <HAL_RCC_GetPCLK2Freq>
 8007340:	4602      	mov	r2, r0
 8007342:	4613      	mov	r3, r2
 8007344:	009b      	lsls	r3, r3, #2
 8007346:	4413      	add	r3, r2
 8007348:	009a      	lsls	r2, r3, #2
 800734a:	441a      	add	r2, r3
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	685b      	ldr	r3, [r3, #4]
 8007350:	009b      	lsls	r3, r3, #2
 8007352:	fbb2 f3f3 	udiv	r3, r2, r3
 8007356:	4a0c      	ldr	r2, [pc, #48]	; (8007388 <UART_SetConfig+0x32c>)
 8007358:	fba2 2303 	umull	r2, r3, r2, r3
 800735c:	095b      	lsrs	r3, r3, #5
 800735e:	2264      	movs	r2, #100	; 0x64
 8007360:	fb02 f303 	mul.w	r3, r2, r3
 8007364:	1aeb      	subs	r3, r5, r3
 8007366:	011b      	lsls	r3, r3, #4
 8007368:	3332      	adds	r3, #50	; 0x32
 800736a:	4a07      	ldr	r2, [pc, #28]	; (8007388 <UART_SetConfig+0x32c>)
 800736c:	fba2 2303 	umull	r2, r3, r2, r3
 8007370:	095b      	lsrs	r3, r3, #5
 8007372:	f003 020f 	and.w	r2, r3, #15
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4422      	add	r2, r4
 800737c:	609a      	str	r2, [r3, #8]
 800737e:	e071      	b.n	8007464 <UART_SetConfig+0x408>
 8007380:	40011000 	.word	0x40011000
 8007384:	40011400 	.word	0x40011400
 8007388:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800738c:	f7fd ffe8 	bl	8005360 <HAL_RCC_GetPCLK1Freq>
 8007390:	4602      	mov	r2, r0
 8007392:	4613      	mov	r3, r2
 8007394:	009b      	lsls	r3, r3, #2
 8007396:	4413      	add	r3, r2
 8007398:	009a      	lsls	r2, r3, #2
 800739a:	441a      	add	r2, r3
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	685b      	ldr	r3, [r3, #4]
 80073a0:	009b      	lsls	r3, r3, #2
 80073a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80073a6:	4a31      	ldr	r2, [pc, #196]	; (800746c <UART_SetConfig+0x410>)
 80073a8:	fba2 2303 	umull	r2, r3, r2, r3
 80073ac:	095b      	lsrs	r3, r3, #5
 80073ae:	011c      	lsls	r4, r3, #4
 80073b0:	f7fd ffd6 	bl	8005360 <HAL_RCC_GetPCLK1Freq>
 80073b4:	4602      	mov	r2, r0
 80073b6:	4613      	mov	r3, r2
 80073b8:	009b      	lsls	r3, r3, #2
 80073ba:	4413      	add	r3, r2
 80073bc:	009a      	lsls	r2, r3, #2
 80073be:	441a      	add	r2, r3
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	685b      	ldr	r3, [r3, #4]
 80073c4:	009b      	lsls	r3, r3, #2
 80073c6:	fbb2 f5f3 	udiv	r5, r2, r3
 80073ca:	f7fd ffc9 	bl	8005360 <HAL_RCC_GetPCLK1Freq>
 80073ce:	4602      	mov	r2, r0
 80073d0:	4613      	mov	r3, r2
 80073d2:	009b      	lsls	r3, r3, #2
 80073d4:	4413      	add	r3, r2
 80073d6:	009a      	lsls	r2, r3, #2
 80073d8:	441a      	add	r2, r3
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	685b      	ldr	r3, [r3, #4]
 80073de:	009b      	lsls	r3, r3, #2
 80073e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80073e4:	4a21      	ldr	r2, [pc, #132]	; (800746c <UART_SetConfig+0x410>)
 80073e6:	fba2 2303 	umull	r2, r3, r2, r3
 80073ea:	095b      	lsrs	r3, r3, #5
 80073ec:	2264      	movs	r2, #100	; 0x64
 80073ee:	fb02 f303 	mul.w	r3, r2, r3
 80073f2:	1aeb      	subs	r3, r5, r3
 80073f4:	011b      	lsls	r3, r3, #4
 80073f6:	3332      	adds	r3, #50	; 0x32
 80073f8:	4a1c      	ldr	r2, [pc, #112]	; (800746c <UART_SetConfig+0x410>)
 80073fa:	fba2 2303 	umull	r2, r3, r2, r3
 80073fe:	095b      	lsrs	r3, r3, #5
 8007400:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007404:	441c      	add	r4, r3
 8007406:	f7fd ffab 	bl	8005360 <HAL_RCC_GetPCLK1Freq>
 800740a:	4602      	mov	r2, r0
 800740c:	4613      	mov	r3, r2
 800740e:	009b      	lsls	r3, r3, #2
 8007410:	4413      	add	r3, r2
 8007412:	009a      	lsls	r2, r3, #2
 8007414:	441a      	add	r2, r3
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	685b      	ldr	r3, [r3, #4]
 800741a:	009b      	lsls	r3, r3, #2
 800741c:	fbb2 f5f3 	udiv	r5, r2, r3
 8007420:	f7fd ff9e 	bl	8005360 <HAL_RCC_GetPCLK1Freq>
 8007424:	4602      	mov	r2, r0
 8007426:	4613      	mov	r3, r2
 8007428:	009b      	lsls	r3, r3, #2
 800742a:	4413      	add	r3, r2
 800742c:	009a      	lsls	r2, r3, #2
 800742e:	441a      	add	r2, r3
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	685b      	ldr	r3, [r3, #4]
 8007434:	009b      	lsls	r3, r3, #2
 8007436:	fbb2 f3f3 	udiv	r3, r2, r3
 800743a:	4a0c      	ldr	r2, [pc, #48]	; (800746c <UART_SetConfig+0x410>)
 800743c:	fba2 2303 	umull	r2, r3, r2, r3
 8007440:	095b      	lsrs	r3, r3, #5
 8007442:	2264      	movs	r2, #100	; 0x64
 8007444:	fb02 f303 	mul.w	r3, r2, r3
 8007448:	1aeb      	subs	r3, r5, r3
 800744a:	011b      	lsls	r3, r3, #4
 800744c:	3332      	adds	r3, #50	; 0x32
 800744e:	4a07      	ldr	r2, [pc, #28]	; (800746c <UART_SetConfig+0x410>)
 8007450:	fba2 2303 	umull	r2, r3, r2, r3
 8007454:	095b      	lsrs	r3, r3, #5
 8007456:	f003 020f 	and.w	r2, r3, #15
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	4422      	add	r2, r4
 8007460:	609a      	str	r2, [r3, #8]
}
 8007462:	e7ff      	b.n	8007464 <UART_SetConfig+0x408>
 8007464:	bf00      	nop
 8007466:	3710      	adds	r7, #16
 8007468:	46bd      	mov	sp, r7
 800746a:	bdb0      	pop	{r4, r5, r7, pc}
 800746c:	51eb851f 	.word	0x51eb851f

08007470 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007470:	b480      	push	{r7}
 8007472:	b085      	sub	sp, #20
 8007474:	af00      	add	r7, sp, #0
 8007476:	4603      	mov	r3, r0
 8007478:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800747a:	2300      	movs	r3, #0
 800747c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800747e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007482:	2b84      	cmp	r3, #132	; 0x84
 8007484:	d005      	beq.n	8007492 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007486:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	4413      	add	r3, r2
 800748e:	3303      	adds	r3, #3
 8007490:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007492:	68fb      	ldr	r3, [r7, #12]
}
 8007494:	4618      	mov	r0, r3
 8007496:	3714      	adds	r7, #20
 8007498:	46bd      	mov	sp, r7
 800749a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749e:	4770      	bx	lr

080074a0 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80074a0:	b480      	push	{r7}
 80074a2:	b083      	sub	sp, #12
 80074a4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80074a6:	f3ef 8305 	mrs	r3, IPSR
 80074aa:	607b      	str	r3, [r7, #4]
  return(result);
 80074ac:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	bf14      	ite	ne
 80074b2:	2301      	movne	r3, #1
 80074b4:	2300      	moveq	r3, #0
 80074b6:	b2db      	uxtb	r3, r3
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	370c      	adds	r7, #12
 80074bc:	46bd      	mov	sp, r7
 80074be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c2:	4770      	bx	lr

080074c4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80074c8:	f001 fe2e 	bl	8009128 <vTaskStartScheduler>
  
  return osOK;
 80074cc:	2300      	movs	r3, #0
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	bd80      	pop	{r7, pc}

080074d2 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 80074d2:	b580      	push	{r7, lr}
 80074d4:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 80074d6:	f7ff ffe3 	bl	80074a0 <inHandlerMode>
 80074da:	4603      	mov	r3, r0
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d003      	beq.n	80074e8 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 80074e0:	f001 ff3a 	bl	8009358 <xTaskGetTickCountFromISR>
 80074e4:	4603      	mov	r3, r0
 80074e6:	e002      	b.n	80074ee <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 80074e8:	f001 ff26 	bl	8009338 <xTaskGetTickCount>
 80074ec:	4603      	mov	r3, r0
  }
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	bd80      	pop	{r7, pc}

080074f2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80074f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80074f4:	b089      	sub	sp, #36	; 0x24
 80074f6:	af04      	add	r7, sp, #16
 80074f8:	6078      	str	r0, [r7, #4]
 80074fa:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	695b      	ldr	r3, [r3, #20]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d020      	beq.n	8007546 <osThreadCreate+0x54>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	699b      	ldr	r3, [r3, #24]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d01c      	beq.n	8007546 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	685c      	ldr	r4, [r3, #4]
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681d      	ldr	r5, [r3, #0]
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	691e      	ldr	r6, [r3, #16]
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800751e:	4618      	mov	r0, r3
 8007520:	f7ff ffa6 	bl	8007470 <makeFreeRtosPriority>
 8007524:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	695b      	ldr	r3, [r3, #20]
 800752a:	687a      	ldr	r2, [r7, #4]
 800752c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800752e:	9202      	str	r2, [sp, #8]
 8007530:	9301      	str	r3, [sp, #4]
 8007532:	9100      	str	r1, [sp, #0]
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	4632      	mov	r2, r6
 8007538:	4629      	mov	r1, r5
 800753a:	4620      	mov	r0, r4
 800753c:	f001 fbb3 	bl	8008ca6 <xTaskCreateStatic>
 8007540:	4603      	mov	r3, r0
 8007542:	60fb      	str	r3, [r7, #12]
 8007544:	e01c      	b.n	8007580 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	685c      	ldr	r4, [r3, #4]
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007552:	b29e      	uxth	r6, r3
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800755a:	4618      	mov	r0, r3
 800755c:	f7ff ff88 	bl	8007470 <makeFreeRtosPriority>
 8007560:	4602      	mov	r2, r0
 8007562:	f107 030c 	add.w	r3, r7, #12
 8007566:	9301      	str	r3, [sp, #4]
 8007568:	9200      	str	r2, [sp, #0]
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	4632      	mov	r2, r6
 800756e:	4629      	mov	r1, r5
 8007570:	4620      	mov	r0, r4
 8007572:	f001 fbf1 	bl	8008d58 <xTaskCreate>
 8007576:	4603      	mov	r3, r0
 8007578:	2b01      	cmp	r3, #1
 800757a:	d001      	beq.n	8007580 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800757c:	2300      	movs	r3, #0
 800757e:	e000      	b.n	8007582 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007580:	68fb      	ldr	r3, [r7, #12]
}
 8007582:	4618      	mov	r0, r3
 8007584:	3714      	adds	r7, #20
 8007586:	46bd      	mov	sp, r7
 8007588:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800758a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800758a:	b580      	push	{r7, lr}
 800758c:	b084      	sub	sp, #16
 800758e:	af00      	add	r7, sp, #0
 8007590:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d001      	beq.n	80075a0 <osDelay+0x16>
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	e000      	b.n	80075a2 <osDelay+0x18>
 80075a0:	2301      	movs	r3, #1
 80075a2:	4618      	mov	r0, r3
 80075a4:	f001 fd8c 	bl	80090c0 <vTaskDelay>
  
  return osOK;
 80075a8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	3710      	adds	r7, #16
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}

080075b2 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80075b2:	b580      	push	{r7, lr}
 80075b4:	b082      	sub	sp, #8
 80075b6:	af00      	add	r7, sp, #0
 80075b8:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	685b      	ldr	r3, [r3, #4]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d007      	beq.n	80075d2 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	685b      	ldr	r3, [r3, #4]
 80075c6:	4619      	mov	r1, r3
 80075c8:	2001      	movs	r0, #1
 80075ca:	f000 fd47 	bl	800805c <xQueueCreateMutexStatic>
 80075ce:	4603      	mov	r3, r0
 80075d0:	e003      	b.n	80075da <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80075d2:	2001      	movs	r0, #1
 80075d4:	f000 fd2a 	bl	800802c <xQueueCreateMutex>
 80075d8:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80075da:	4618      	mov	r0, r3
 80075dc:	3708      	adds	r7, #8
 80075de:	46bd      	mov	sp, r7
 80075e0:	bd80      	pop	{r7, pc}
	...

080075e4 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b084      	sub	sp, #16
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
 80075ec:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80075ee:	2300      	movs	r3, #0
 80075f0:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d101      	bne.n	80075fc <osMutexWait+0x18>
    return osErrorParameter;
 80075f8:	2380      	movs	r3, #128	; 0x80
 80075fa:	e03a      	b.n	8007672 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 80075fc:	2300      	movs	r3, #0
 80075fe:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007606:	d103      	bne.n	8007610 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8007608:	f04f 33ff 	mov.w	r3, #4294967295
 800760c:	60fb      	str	r3, [r7, #12]
 800760e:	e009      	b.n	8007624 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d006      	beq.n	8007624 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d101      	bne.n	8007624 <osMutexWait+0x40>
      ticks = 1;
 8007620:	2301      	movs	r3, #1
 8007622:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8007624:	f7ff ff3c 	bl	80074a0 <inHandlerMode>
 8007628:	4603      	mov	r3, r0
 800762a:	2b00      	cmp	r3, #0
 800762c:	d017      	beq.n	800765e <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800762e:	f107 0308 	add.w	r3, r7, #8
 8007632:	461a      	mov	r2, r3
 8007634:	2100      	movs	r1, #0
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f001 f990 	bl	800895c <xQueueReceiveFromISR>
 800763c:	4603      	mov	r3, r0
 800763e:	2b01      	cmp	r3, #1
 8007640:	d001      	beq.n	8007646 <osMutexWait+0x62>
      return osErrorOS;
 8007642:	23ff      	movs	r3, #255	; 0xff
 8007644:	e015      	b.n	8007672 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d011      	beq.n	8007670 <osMutexWait+0x8c>
 800764c:	4b0b      	ldr	r3, [pc, #44]	; (800767c <osMutexWait+0x98>)
 800764e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007652:	601a      	str	r2, [r3, #0]
 8007654:	f3bf 8f4f 	dsb	sy
 8007658:	f3bf 8f6f 	isb	sy
 800765c:	e008      	b.n	8007670 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800765e:	68f9      	ldr	r1, [r7, #12]
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	f001 f873 	bl	800874c <xQueueSemaphoreTake>
 8007666:	4603      	mov	r3, r0
 8007668:	2b01      	cmp	r3, #1
 800766a:	d001      	beq.n	8007670 <osMutexWait+0x8c>
    return osErrorOS;
 800766c:	23ff      	movs	r3, #255	; 0xff
 800766e:	e000      	b.n	8007672 <osMutexWait+0x8e>
  }
  
  return osOK;
 8007670:	2300      	movs	r3, #0
}
 8007672:	4618      	mov	r0, r3
 8007674:	3710      	adds	r7, #16
 8007676:	46bd      	mov	sp, r7
 8007678:	bd80      	pop	{r7, pc}
 800767a:	bf00      	nop
 800767c:	e000ed04 	.word	0xe000ed04

08007680 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b084      	sub	sp, #16
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8007688:	2300      	movs	r3, #0
 800768a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800768c:	2300      	movs	r3, #0
 800768e:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8007690:	f7ff ff06 	bl	80074a0 <inHandlerMode>
 8007694:	4603      	mov	r3, r0
 8007696:	2b00      	cmp	r3, #0
 8007698:	d016      	beq.n	80076c8 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800769a:	f107 0308 	add.w	r3, r7, #8
 800769e:	4619      	mov	r1, r3
 80076a0:	6878      	ldr	r0, [r7, #4]
 80076a2:	f000 feed 	bl	8008480 <xQueueGiveFromISR>
 80076a6:	4603      	mov	r3, r0
 80076a8:	2b01      	cmp	r3, #1
 80076aa:	d001      	beq.n	80076b0 <osMutexRelease+0x30>
      return osErrorOS;
 80076ac:	23ff      	movs	r3, #255	; 0xff
 80076ae:	e017      	b.n	80076e0 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d013      	beq.n	80076de <osMutexRelease+0x5e>
 80076b6:	4b0c      	ldr	r3, [pc, #48]	; (80076e8 <osMutexRelease+0x68>)
 80076b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076bc:	601a      	str	r2, [r3, #0]
 80076be:	f3bf 8f4f 	dsb	sy
 80076c2:	f3bf 8f6f 	isb	sy
 80076c6:	e00a      	b.n	80076de <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 80076c8:	2300      	movs	r3, #0
 80076ca:	2200      	movs	r2, #0
 80076cc:	2100      	movs	r1, #0
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f000 fd48 	bl	8008164 <xQueueGenericSend>
 80076d4:	4603      	mov	r3, r0
 80076d6:	2b01      	cmp	r3, #1
 80076d8:	d001      	beq.n	80076de <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 80076da:	23ff      	movs	r3, #255	; 0xff
 80076dc:	60fb      	str	r3, [r7, #12]
  }
  return result;
 80076de:	68fb      	ldr	r3, [r7, #12]
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	3710      	adds	r7, #16
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}
 80076e8:	e000ed04 	.word	0xe000ed04

080076ec <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b086      	sub	sp, #24
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	685b      	ldr	r3, [r3, #4]
 80076f8:	3303      	adds	r3, #3
 80076fa:	f023 0303 	bic.w	r3, r3, #3
 80076fe:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 8007700:	2014      	movs	r0, #20
 8007702:	f002 fee5 	bl	800a4d0 <pvPortMalloc>
 8007706:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 8007708:	697b      	ldr	r3, [r7, #20]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d046      	beq.n	800779c <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681a      	ldr	r2, [r3, #0]
 8007712:	697b      	ldr	r3, [r7, #20]
 8007714:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 8007716:	68fa      	ldr	r2, [r7, #12]
 8007718:	697b      	ldr	r3, [r7, #20]
 800771a:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 800771c:	697b      	ldr	r3, [r7, #20]
 800771e:	2200      	movs	r2, #0
 8007720:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	4618      	mov	r0, r3
 8007728:	f002 fed2 	bl	800a4d0 <pvPortMalloc>
 800772c:	4602      	mov	r2, r0
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 8007732:	697b      	ldr	r3, [r7, #20]
 8007734:	685b      	ldr	r3, [r3, #4]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d02b      	beq.n	8007792 <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	68fa      	ldr	r2, [r7, #12]
 8007740:	fb02 f303 	mul.w	r3, r2, r3
 8007744:	4618      	mov	r0, r3
 8007746:	f002 fec3 	bl	800a4d0 <pvPortMalloc>
 800774a:	4602      	mov	r2, r0
 800774c:	697b      	ldr	r3, [r7, #20]
 800774e:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 8007750:	697b      	ldr	r3, [r7, #20]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d011      	beq.n	800777c <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 8007758:	2300      	movs	r3, #0
 800775a:	613b      	str	r3, [r7, #16]
 800775c:	e008      	b.n	8007770 <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	685a      	ldr	r2, [r3, #4]
 8007762:	693b      	ldr	r3, [r7, #16]
 8007764:	4413      	add	r3, r2
 8007766:	2200      	movs	r2, #0
 8007768:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 800776a:	693b      	ldr	r3, [r7, #16]
 800776c:	3301      	adds	r3, #1
 800776e:	613b      	str	r3, [r7, #16]
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	693a      	ldr	r2, [r7, #16]
 8007776:	429a      	cmp	r2, r3
 8007778:	d3f1      	bcc.n	800775e <osPoolCreate+0x72>
 800777a:	e00f      	b.n	800779c <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 800777c:	697b      	ldr	r3, [r7, #20]
 800777e:	685b      	ldr	r3, [r3, #4]
 8007780:	4618      	mov	r0, r3
 8007782:	f002 ff6b 	bl	800a65c <vPortFree>
        vPortFree(thePool);
 8007786:	6978      	ldr	r0, [r7, #20]
 8007788:	f002 ff68 	bl	800a65c <vPortFree>
        thePool = NULL;
 800778c:	2300      	movs	r3, #0
 800778e:	617b      	str	r3, [r7, #20]
 8007790:	e004      	b.n	800779c <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 8007792:	6978      	ldr	r0, [r7, #20]
 8007794:	f002 ff62 	bl	800a65c <vPortFree>
      thePool = NULL;
 8007798:	2300      	movs	r3, #0
 800779a:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 800779c:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 800779e:	4618      	mov	r0, r3
 80077a0:	3718      	adds	r7, #24
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}

080077a6 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80077a6:	b590      	push	{r4, r7, lr}
 80077a8:	b085      	sub	sp, #20
 80077aa:	af02      	add	r7, sp, #8
 80077ac:	6078      	str	r0, [r7, #4]
 80077ae:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	689b      	ldr	r3, [r3, #8]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d012      	beq.n	80077de <osMessageCreate+0x38>
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	68db      	ldr	r3, [r3, #12]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d00e      	beq.n	80077de <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6818      	ldr	r0, [r3, #0]
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6859      	ldr	r1, [r3, #4]
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	689a      	ldr	r2, [r3, #8]
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	68dc      	ldr	r4, [r3, #12]
 80077d0:	2300      	movs	r3, #0
 80077d2:	9300      	str	r3, [sp, #0]
 80077d4:	4623      	mov	r3, r4
 80077d6:	f000 fb41 	bl	8007e5c <xQueueGenericCreateStatic>
 80077da:	4603      	mov	r3, r0
 80077dc:	e008      	b.n	80077f0 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6818      	ldr	r0, [r3, #0]
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	685b      	ldr	r3, [r3, #4]
 80077e6:	2200      	movs	r2, #0
 80077e8:	4619      	mov	r1, r3
 80077ea:	f000 fba9 	bl	8007f40 <xQueueGenericCreate>
 80077ee:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	370c      	adds	r7, #12
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bd90      	pop	{r4, r7, pc}

080077f8 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b086      	sub	sp, #24
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	60f8      	str	r0, [r7, #12]
 8007800:	60b9      	str	r1, [r7, #8]
 8007802:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8007804:	2300      	movs	r3, #0
 8007806:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800780c:	697b      	ldr	r3, [r7, #20]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d101      	bne.n	8007816 <osMessagePut+0x1e>
    ticks = 1;
 8007812:	2301      	movs	r3, #1
 8007814:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8007816:	f7ff fe43 	bl	80074a0 <inHandlerMode>
 800781a:	4603      	mov	r3, r0
 800781c:	2b00      	cmp	r3, #0
 800781e:	d018      	beq.n	8007852 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8007820:	f107 0210 	add.w	r2, r7, #16
 8007824:	f107 0108 	add.w	r1, r7, #8
 8007828:	2300      	movs	r3, #0
 800782a:	68f8      	ldr	r0, [r7, #12]
 800782c:	f000 fd94 	bl	8008358 <xQueueGenericSendFromISR>
 8007830:	4603      	mov	r3, r0
 8007832:	2b01      	cmp	r3, #1
 8007834:	d001      	beq.n	800783a <osMessagePut+0x42>
      return osErrorOS;
 8007836:	23ff      	movs	r3, #255	; 0xff
 8007838:	e018      	b.n	800786c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800783a:	693b      	ldr	r3, [r7, #16]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d014      	beq.n	800786a <osMessagePut+0x72>
 8007840:	4b0c      	ldr	r3, [pc, #48]	; (8007874 <osMessagePut+0x7c>)
 8007842:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007846:	601a      	str	r2, [r3, #0]
 8007848:	f3bf 8f4f 	dsb	sy
 800784c:	f3bf 8f6f 	isb	sy
 8007850:	e00b      	b.n	800786a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8007852:	f107 0108 	add.w	r1, r7, #8
 8007856:	2300      	movs	r3, #0
 8007858:	697a      	ldr	r2, [r7, #20]
 800785a:	68f8      	ldr	r0, [r7, #12]
 800785c:	f000 fc82 	bl	8008164 <xQueueGenericSend>
 8007860:	4603      	mov	r3, r0
 8007862:	2b01      	cmp	r3, #1
 8007864:	d001      	beq.n	800786a <osMessagePut+0x72>
      return osErrorOS;
 8007866:	23ff      	movs	r3, #255	; 0xff
 8007868:	e000      	b.n	800786c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800786a:	2300      	movs	r3, #0
}
 800786c:	4618      	mov	r0, r3
 800786e:	3718      	adds	r7, #24
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}
 8007874:	e000ed04 	.word	0xe000ed04

08007878 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8007878:	b590      	push	{r4, r7, lr}
 800787a:	b08b      	sub	sp, #44	; 0x2c
 800787c:	af00      	add	r7, sp, #0
 800787e:	60f8      	str	r0, [r7, #12]
 8007880:	60b9      	str	r1, [r7, #8]
 8007882:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8007888:	2300      	movs	r3, #0
 800788a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d10a      	bne.n	80078a8 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8007892:	2380      	movs	r3, #128	; 0x80
 8007894:	617b      	str	r3, [r7, #20]
    return event;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	461c      	mov	r4, r3
 800789a:	f107 0314 	add.w	r3, r7, #20
 800789e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80078a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80078a6:	e054      	b.n	8007952 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80078a8:	2300      	movs	r3, #0
 80078aa:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80078ac:	2300      	movs	r3, #0
 80078ae:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078b6:	d103      	bne.n	80078c0 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80078b8:	f04f 33ff 	mov.w	r3, #4294967295
 80078bc:	627b      	str	r3, [r7, #36]	; 0x24
 80078be:	e009      	b.n	80078d4 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d006      	beq.n	80078d4 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80078ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d101      	bne.n	80078d4 <osMessageGet+0x5c>
      ticks = 1;
 80078d0:	2301      	movs	r3, #1
 80078d2:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80078d4:	f7ff fde4 	bl	80074a0 <inHandlerMode>
 80078d8:	4603      	mov	r3, r0
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d01c      	beq.n	8007918 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80078de:	f107 0220 	add.w	r2, r7, #32
 80078e2:	f107 0314 	add.w	r3, r7, #20
 80078e6:	3304      	adds	r3, #4
 80078e8:	4619      	mov	r1, r3
 80078ea:	68b8      	ldr	r0, [r7, #8]
 80078ec:	f001 f836 	bl	800895c <xQueueReceiveFromISR>
 80078f0:	4603      	mov	r3, r0
 80078f2:	2b01      	cmp	r3, #1
 80078f4:	d102      	bne.n	80078fc <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80078f6:	2310      	movs	r3, #16
 80078f8:	617b      	str	r3, [r7, #20]
 80078fa:	e001      	b.n	8007900 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80078fc:	2300      	movs	r3, #0
 80078fe:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007900:	6a3b      	ldr	r3, [r7, #32]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d01d      	beq.n	8007942 <osMessageGet+0xca>
 8007906:	4b15      	ldr	r3, [pc, #84]	; (800795c <osMessageGet+0xe4>)
 8007908:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800790c:	601a      	str	r2, [r3, #0]
 800790e:	f3bf 8f4f 	dsb	sy
 8007912:	f3bf 8f6f 	isb	sy
 8007916:	e014      	b.n	8007942 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8007918:	f107 0314 	add.w	r3, r7, #20
 800791c:	3304      	adds	r3, #4
 800791e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007920:	4619      	mov	r1, r3
 8007922:	68b8      	ldr	r0, [r7, #8]
 8007924:	f000 fe36 	bl	8008594 <xQueueReceive>
 8007928:	4603      	mov	r3, r0
 800792a:	2b01      	cmp	r3, #1
 800792c:	d102      	bne.n	8007934 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800792e:	2310      	movs	r3, #16
 8007930:	617b      	str	r3, [r7, #20]
 8007932:	e006      	b.n	8007942 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8007934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007936:	2b00      	cmp	r3, #0
 8007938:	d101      	bne.n	800793e <osMessageGet+0xc6>
 800793a:	2300      	movs	r3, #0
 800793c:	e000      	b.n	8007940 <osMessageGet+0xc8>
 800793e:	2340      	movs	r3, #64	; 0x40
 8007940:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	461c      	mov	r4, r3
 8007946:	f107 0314 	add.w	r3, r7, #20
 800794a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800794e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8007952:	68f8      	ldr	r0, [r7, #12]
 8007954:	372c      	adds	r7, #44	; 0x2c
 8007956:	46bd      	mov	sp, r7
 8007958:	bd90      	pop	{r4, r7, pc}
 800795a:	bf00      	nop
 800795c:	e000ed04 	.word	0xe000ed04

08007960 <osMailCreate>:
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 8007960:	b590      	push	{r4, r7, lr}
 8007962:	b087      	sub	sp, #28
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
 8007968:	6039      	str	r1, [r7, #0]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	60fb      	str	r3, [r7, #12]
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	685b      	ldr	r3, [r3, #4]
 8007974:	613b      	str	r3, [r7, #16]
 8007976:	2300      	movs	r3, #0
 8007978:	617b      	str	r3, [r7, #20]
  
  /* Create a mail queue control block */

  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	689c      	ldr	r4, [r3, #8]
 800797e:	200c      	movs	r0, #12
 8007980:	f002 fda6 	bl	800a4d0 <pvPortMalloc>
 8007984:	4603      	mov	r3, r0
 8007986:	6023      	str	r3, [r4, #0]

  if (*(queue_def->cb) == NULL) {
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	689b      	ldr	r3, [r3, #8]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d101      	bne.n	8007996 <osMailCreate+0x36>
    return NULL;
 8007992:	2300      	movs	r3, #0
 8007994:	e038      	b.n	8007a08 <osMailCreate+0xa8>
  }
  (*(queue_def->cb))->queue_def = queue_def;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	689b      	ldr	r3, [r3, #8]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	687a      	ldr	r2, [r7, #4]
 800799e:	601a      	str	r2, [r3, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6818      	ldr	r0, [r3, #0]
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	689b      	ldr	r3, [r3, #8]
 80079a8:	681c      	ldr	r4, [r3, #0]
 80079aa:	2200      	movs	r2, #0
 80079ac:	2104      	movs	r1, #4
 80079ae:	f000 fac7 	bl	8007f40 <xQueueGenericCreate>
 80079b2:	4603      	mov	r3, r0
 80079b4:	6063      	str	r3, [r4, #4]


  if ((*(queue_def->cb))->handle == NULL) {
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	689b      	ldr	r3, [r3, #8]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	685b      	ldr	r3, [r3, #4]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d107      	bne.n	80079d2 <osMailCreate+0x72>
    vPortFree(*(queue_def->cb));
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	689b      	ldr	r3, [r3, #8]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	4618      	mov	r0, r3
 80079ca:	f002 fe47 	bl	800a65c <vPortFree>
    return NULL;
 80079ce:	2300      	movs	r3, #0
 80079d0:	e01a      	b.n	8007a08 <osMailCreate+0xa8>
  }
  
  /* Create a mail pool */
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	689b      	ldr	r3, [r3, #8]
 80079d6:	681c      	ldr	r4, [r3, #0]
 80079d8:	f107 030c 	add.w	r3, r7, #12
 80079dc:	4618      	mov	r0, r3
 80079de:	f7ff fe85 	bl	80076ec <osPoolCreate>
 80079e2:	4603      	mov	r3, r0
 80079e4:	60a3      	str	r3, [r4, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	689b      	ldr	r3, [r3, #8]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	689b      	ldr	r3, [r3, #8]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d107      	bne.n	8007a02 <osMailCreate+0xa2>
    //TODO: Delete queue. How to do it in FreeRTOS?
    vPortFree(*(queue_def->cb));
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	689b      	ldr	r3, [r3, #8]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	4618      	mov	r0, r3
 80079fa:	f002 fe2f 	bl	800a65c <vPortFree>
    return NULL;
 80079fe:	2300      	movs	r3, #0
 8007a00:	e002      	b.n	8007a08 <osMailCreate+0xa8>
  }
  
  return *(queue_def->cb);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	689b      	ldr	r3, [r3, #8]
 8007a06:	681b      	ldr	r3, [r3, #0]
#else
  return NULL;
#endif
}
 8007a08:	4618      	mov	r0, r3
 8007a0a:	371c      	adds	r7, #28
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bd90      	pop	{r4, r7, pc}

08007a10 <osMailPut>:
* @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAlloc.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailPut (osMailQId queue_id, void *mail)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b084      	sub	sp, #16
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
 8007a18:	6039      	str	r1, [r7, #0]
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d101      	bne.n	8007a24 <osMailPut+0x14>
    return osErrorParameter;
 8007a20:	2380      	movs	r3, #128	; 0x80
 8007a22:	e02c      	b.n	8007a7e <osMailPut+0x6e>
  }
  
  taskWoken = pdFALSE;
 8007a24:	2300      	movs	r3, #0
 8007a26:	60fb      	str	r3, [r7, #12]
  
  if (inHandlerMode()) {
 8007a28:	f7ff fd3a 	bl	80074a0 <inHandlerMode>
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d018      	beq.n	8007a64 <osMailPut+0x54>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6858      	ldr	r0, [r3, #4]
 8007a36:	f107 020c 	add.w	r2, r7, #12
 8007a3a:	4639      	mov	r1, r7
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	f000 fc8b 	bl	8008358 <xQueueGenericSendFromISR>
 8007a42:	4603      	mov	r3, r0
 8007a44:	2b01      	cmp	r3, #1
 8007a46:	d001      	beq.n	8007a4c <osMailPut+0x3c>
      return osErrorOS;
 8007a48:	23ff      	movs	r3, #255	; 0xff
 8007a4a:	e018      	b.n	8007a7e <osMailPut+0x6e>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d014      	beq.n	8007a7c <osMailPut+0x6c>
 8007a52:	4b0d      	ldr	r3, [pc, #52]	; (8007a88 <osMailPut+0x78>)
 8007a54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a58:	601a      	str	r2, [r3, #0]
 8007a5a:	f3bf 8f4f 	dsb	sy
 8007a5e:	f3bf 8f6f 	isb	sy
 8007a62:	e00b      	b.n	8007a7c <osMailPut+0x6c>
  }
  else {
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6858      	ldr	r0, [r3, #4]
 8007a68:	4639      	mov	r1, r7
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	f000 fb79 	bl	8008164 <xQueueGenericSend>
 8007a72:	4603      	mov	r3, r0
 8007a74:	2b01      	cmp	r3, #1
 8007a76:	d001      	beq.n	8007a7c <osMailPut+0x6c>
      return osErrorOS;
 8007a78:	23ff      	movs	r3, #255	; 0xff
 8007a7a:	e000      	b.n	8007a7e <osMailPut+0x6e>
    }
  }
  
  return osOK;
 8007a7c:	2300      	movs	r3, #0
}
 8007a7e:	4618      	mov	r0, r3
 8007a80:	3710      	adds	r7, #16
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bd80      	pop	{r7, pc}
 8007a86:	bf00      	nop
 8007a88:	e000ed04 	.word	0xe000ed04

08007a8c <osMailGet>:
* @param millisec    timeout value or 0 in case of no time-out
* @retval event that contains mail information or error code.
* @note   MUST REMAIN UNCHANGED: \b osMailGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMailGet (osMailQId queue_id, uint32_t millisec)
{
 8007a8c:	b590      	push	{r4, r7, lr}
 8007a8e:	b08b      	sub	sp, #44	; 0x2c
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	60f8      	str	r0, [r7, #12]
 8007a94:	60b9      	str	r1, [r7, #8]
 8007a96:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.mail_id = queue_id;
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	61fb      	str	r3, [r7, #28]
  
  if (queue_id == NULL) {
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d10a      	bne.n	8007ab8 <osMailGet+0x2c>
    event.status = osErrorParameter;
 8007aa2:	2380      	movs	r3, #128	; 0x80
 8007aa4:	617b      	str	r3, [r7, #20]
    return event;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	461c      	mov	r4, r3
 8007aaa:	f107 0314 	add.w	r3, r7, #20
 8007aae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007ab2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007ab6:	e056      	b.n	8007b66 <osMailGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8007ab8:	2300      	movs	r3, #0
 8007aba:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8007abc:	2300      	movs	r3, #0
 8007abe:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ac6:	d103      	bne.n	8007ad0 <osMailGet+0x44>
    ticks = portMAX_DELAY;
 8007ac8:	f04f 33ff 	mov.w	r3, #4294967295
 8007acc:	627b      	str	r3, [r7, #36]	; 0x24
 8007ace:	e009      	b.n	8007ae4 <osMailGet+0x58>
  }
  else if (millisec != 0) {
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d006      	beq.n	8007ae4 <osMailGet+0x58>
    ticks = millisec / portTICK_PERIOD_MS;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8007ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d101      	bne.n	8007ae4 <osMailGet+0x58>
      ticks = 1;
 8007ae0:	2301      	movs	r3, #1
 8007ae2:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8007ae4:	f7ff fcdc 	bl	80074a0 <inHandlerMode>
 8007ae8:	4603      	mov	r3, r0
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d01d      	beq.n	8007b2a <osMailGet+0x9e>
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	6858      	ldr	r0, [r3, #4]
 8007af2:	f107 0220 	add.w	r2, r7, #32
 8007af6:	f107 0314 	add.w	r3, r7, #20
 8007afa:	3304      	adds	r3, #4
 8007afc:	4619      	mov	r1, r3
 8007afe:	f000 ff2d 	bl	800895c <xQueueReceiveFromISR>
 8007b02:	4603      	mov	r3, r0
 8007b04:	2b01      	cmp	r3, #1
 8007b06:	d102      	bne.n	8007b0e <osMailGet+0x82>
      /* We have mail */
      event.status = osEventMail;
 8007b08:	2320      	movs	r3, #32
 8007b0a:	617b      	str	r3, [r7, #20]
 8007b0c:	e001      	b.n	8007b12 <osMailGet+0x86>
    }
    else {
      event.status = osOK;
 8007b0e:	2300      	movs	r3, #0
 8007b10:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007b12:	6a3b      	ldr	r3, [r7, #32]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d01e      	beq.n	8007b56 <osMailGet+0xca>
 8007b18:	4b15      	ldr	r3, [pc, #84]	; (8007b70 <osMailGet+0xe4>)
 8007b1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b1e:	601a      	str	r2, [r3, #0]
 8007b20:	f3bf 8f4f 	dsb	sy
 8007b24:	f3bf 8f6f 	isb	sy
 8007b28:	e015      	b.n	8007b56 <osMailGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	6858      	ldr	r0, [r3, #4]
 8007b2e:	f107 0314 	add.w	r3, r7, #20
 8007b32:	3304      	adds	r3, #4
 8007b34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b36:	4619      	mov	r1, r3
 8007b38:	f000 fd2c 	bl	8008594 <xQueueReceive>
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	2b01      	cmp	r3, #1
 8007b40:	d102      	bne.n	8007b48 <osMailGet+0xbc>
      /* We have mail */
      event.status = osEventMail;
 8007b42:	2320      	movs	r3, #32
 8007b44:	617b      	str	r3, [r7, #20]
 8007b46:	e006      	b.n	8007b56 <osMailGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8007b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d101      	bne.n	8007b52 <osMailGet+0xc6>
 8007b4e:	2300      	movs	r3, #0
 8007b50:	e000      	b.n	8007b54 <osMailGet+0xc8>
 8007b52:	2340      	movs	r3, #64	; 0x40
 8007b54:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	461c      	mov	r4, r3
 8007b5a:	f107 0314 	add.w	r3, r7, #20
 8007b5e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007b62:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8007b66:	68f8      	ldr	r0, [r7, #12]
 8007b68:	372c      	adds	r7, #44	; 0x2c
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	bd90      	pop	{r4, r7, pc}
 8007b6e:	bf00      	nop
 8007b70:	e000ed04 	.word	0xe000ed04

08007b74 <osRecursiveMutexCreate>:
* @brief  Create and Initialize a Recursive Mutex
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error..
*/
osMutexId osRecursiveMutexCreate (const osMutexDef_t *mutex_def)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b082      	sub	sp, #8
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
#if (configUSE_RECURSIVE_MUTEXES == 1)
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL){
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	685b      	ldr	r3, [r3, #4]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d007      	beq.n	8007b94 <osRecursiveMutexCreate+0x20>
    return xSemaphoreCreateRecursiveMutexStatic( mutex_def->controlblock );
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	685b      	ldr	r3, [r3, #4]
 8007b88:	4619      	mov	r1, r3
 8007b8a:	2004      	movs	r0, #4
 8007b8c:	f000 fa66 	bl	800805c <xQueueCreateMutexStatic>
 8007b90:	4603      	mov	r3, r0
 8007b92:	e003      	b.n	8007b9c <osRecursiveMutexCreate+0x28>
  }
  else {
    return xSemaphoreCreateRecursiveMutex();
 8007b94:	2004      	movs	r0, #4
 8007b96:	f000 fa49 	bl	800802c <xQueueCreateMutex>
 8007b9a:	4603      	mov	r3, r0
  return xSemaphoreCreateRecursiveMutex();
#endif
#else
  return NULL;
#endif	
}
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	3708      	adds	r7, #8
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	bd80      	pop	{r7, pc}

08007ba4 <osRecursiveMutexRelease>:
* @brief  Release a Recursive Mutex
* @param   mutex_id      mutex ID obtained by \ref osRecursiveMutexCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osRecursiveMutexRelease (osMutexId mutex_id)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b084      	sub	sp, #16
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
#if (configUSE_RECURSIVE_MUTEXES == 1)
  osStatus result = osOK;
 8007bac:	2300      	movs	r3, #0
 8007bae:	60fb      	str	r3, [r7, #12]
 
  if (xSemaphoreGiveRecursive(mutex_id) != pdTRUE) 
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	f000 fa6e 	bl	8008092 <xQueueGiveMutexRecursive>
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	2b01      	cmp	r3, #1
 8007bba:	d001      	beq.n	8007bc0 <osRecursiveMutexRelease+0x1c>
  {
    result = osErrorOS;
 8007bbc:	23ff      	movs	r3, #255	; 0xff
 8007bbe:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
#else
	return osErrorResource;
#endif
}
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	3710      	adds	r7, #16
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	bd80      	pop	{r7, pc}

08007bca <osRecursiveMutexWait>:
* @param   mutex_id    mutex ID obtained by \ref osRecursiveMutexCreate.
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osRecursiveMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8007bca:	b580      	push	{r7, lr}
 8007bcc:	b084      	sub	sp, #16
 8007bce:	af00      	add	r7, sp, #0
 8007bd0:	6078      	str	r0, [r7, #4]
 8007bd2:	6039      	str	r1, [r7, #0]
#if (configUSE_RECURSIVE_MUTEXES == 1)
  TickType_t ticks;
  
  if (mutex_id == NULL)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d101      	bne.n	8007bde <osRecursiveMutexWait+0x14>
  {
    return osErrorParameter;
 8007bda:	2380      	movs	r3, #128	; 0x80
 8007bdc:	e01d      	b.n	8007c1a <osRecursiveMutexWait+0x50>
  }
  
  ticks = 0;
 8007bde:	2300      	movs	r3, #0
 8007be0:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) 
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007be8:	d103      	bne.n	8007bf2 <osRecursiveMutexWait+0x28>
  {
    ticks = portMAX_DELAY;
 8007bea:	f04f 33ff 	mov.w	r3, #4294967295
 8007bee:	60fb      	str	r3, [r7, #12]
 8007bf0:	e009      	b.n	8007c06 <osRecursiveMutexWait+0x3c>
  }
  else if (millisec != 0) 
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d006      	beq.n	8007c06 <osRecursiveMutexWait+0x3c>
  {
    ticks = millisec / portTICK_PERIOD_MS;
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) 
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d101      	bne.n	8007c06 <osRecursiveMutexWait+0x3c>
    {
      ticks = 1;
 8007c02:	2301      	movs	r3, #1
 8007c04:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (xSemaphoreTakeRecursive(mutex_id, ticks) != pdTRUE) 
 8007c06:	68f9      	ldr	r1, [r7, #12]
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f000 fa75 	bl	80080f8 <xQueueTakeMutexRecursive>
 8007c0e:	4603      	mov	r3, r0
 8007c10:	2b01      	cmp	r3, #1
 8007c12:	d001      	beq.n	8007c18 <osRecursiveMutexWait+0x4e>
  {
    return osErrorOS;
 8007c14:	23ff      	movs	r3, #255	; 0xff
 8007c16:	e000      	b.n	8007c1a <osRecursiveMutexWait+0x50>
  }
  return osOK;
 8007c18:	2300      	movs	r3, #0
#else
	return osErrorResource;
#endif
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	3710      	adds	r7, #16
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}

08007c22 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007c22:	b480      	push	{r7}
 8007c24:	b083      	sub	sp, #12
 8007c26:	af00      	add	r7, sp, #0
 8007c28:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	f103 0208 	add.w	r2, r3, #8
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f04f 32ff 	mov.w	r2, #4294967295
 8007c3a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f103 0208 	add.w	r2, r3, #8
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f103 0208 	add.w	r2, r3, #8
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2200      	movs	r2, #0
 8007c54:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007c56:	bf00      	nop
 8007c58:	370c      	adds	r7, #12
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c60:	4770      	bx	lr

08007c62 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007c62:	b480      	push	{r7}
 8007c64:	b083      	sub	sp, #12
 8007c66:	af00      	add	r7, sp, #0
 8007c68:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007c70:	bf00      	nop
 8007c72:	370c      	adds	r7, #12
 8007c74:	46bd      	mov	sp, r7
 8007c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7a:	4770      	bx	lr

08007c7c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	b085      	sub	sp, #20
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
 8007c84:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	685b      	ldr	r3, [r3, #4]
 8007c8a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	68fa      	ldr	r2, [r7, #12]
 8007c90:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	689a      	ldr	r2, [r3, #8]
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	689b      	ldr	r3, [r3, #8]
 8007c9e:	683a      	ldr	r2, [r7, #0]
 8007ca0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	683a      	ldr	r2, [r7, #0]
 8007ca6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	687a      	ldr	r2, [r7, #4]
 8007cac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	1c5a      	adds	r2, r3, #1
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	601a      	str	r2, [r3, #0]
}
 8007cb8:	bf00      	nop
 8007cba:	3714      	adds	r7, #20
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc2:	4770      	bx	lr

08007cc4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b085      	sub	sp, #20
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
 8007ccc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cda:	d103      	bne.n	8007ce4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	691b      	ldr	r3, [r3, #16]
 8007ce0:	60fb      	str	r3, [r7, #12]
 8007ce2:	e00c      	b.n	8007cfe <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	3308      	adds	r3, #8
 8007ce8:	60fb      	str	r3, [r7, #12]
 8007cea:	e002      	b.n	8007cf2 <vListInsert+0x2e>
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	685b      	ldr	r3, [r3, #4]
 8007cf0:	60fb      	str	r3, [r7, #12]
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	685b      	ldr	r3, [r3, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	68ba      	ldr	r2, [r7, #8]
 8007cfa:	429a      	cmp	r2, r3
 8007cfc:	d2f6      	bcs.n	8007cec <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	685a      	ldr	r2, [r3, #4]
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	685b      	ldr	r3, [r3, #4]
 8007d0a:	683a      	ldr	r2, [r7, #0]
 8007d0c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	68fa      	ldr	r2, [r7, #12]
 8007d12:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	683a      	ldr	r2, [r7, #0]
 8007d18:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	687a      	ldr	r2, [r7, #4]
 8007d1e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	1c5a      	adds	r2, r3, #1
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	601a      	str	r2, [r3, #0]
}
 8007d2a:	bf00      	nop
 8007d2c:	3714      	adds	r7, #20
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d34:	4770      	bx	lr

08007d36 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007d36:	b480      	push	{r7}
 8007d38:	b085      	sub	sp, #20
 8007d3a:	af00      	add	r7, sp, #0
 8007d3c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	691b      	ldr	r3, [r3, #16]
 8007d42:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	685b      	ldr	r3, [r3, #4]
 8007d48:	687a      	ldr	r2, [r7, #4]
 8007d4a:	6892      	ldr	r2, [r2, #8]
 8007d4c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	689b      	ldr	r3, [r3, #8]
 8007d52:	687a      	ldr	r2, [r7, #4]
 8007d54:	6852      	ldr	r2, [r2, #4]
 8007d56:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	685b      	ldr	r3, [r3, #4]
 8007d5c:	687a      	ldr	r2, [r7, #4]
 8007d5e:	429a      	cmp	r2, r3
 8007d60:	d103      	bne.n	8007d6a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	689a      	ldr	r2, [r3, #8]
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	1e5a      	subs	r2, r3, #1
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	681b      	ldr	r3, [r3, #0]
}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	3714      	adds	r7, #20
 8007d82:	46bd      	mov	sp, r7
 8007d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d88:	4770      	bx	lr
	...

08007d8c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b084      	sub	sp, #16
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
 8007d94:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d109      	bne.n	8007db4 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007da4:	f383 8811 	msr	BASEPRI, r3
 8007da8:	f3bf 8f6f 	isb	sy
 8007dac:	f3bf 8f4f 	dsb	sy
 8007db0:	60bb      	str	r3, [r7, #8]
 8007db2:	e7fe      	b.n	8007db2 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8007db4:	f002 fa72 	bl	800a29c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681a      	ldr	r2, [r3, #0]
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dc0:	68f9      	ldr	r1, [r7, #12]
 8007dc2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007dc4:	fb01 f303 	mul.w	r3, r1, r3
 8007dc8:	441a      	add	r2, r3
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681a      	ldr	r2, [r3, #0]
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	681a      	ldr	r2, [r3, #0]
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007de4:	3b01      	subs	r3, #1
 8007de6:	68f9      	ldr	r1, [r7, #12]
 8007de8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007dea:	fb01 f303 	mul.w	r3, r1, r3
 8007dee:	441a      	add	r2, r3
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	22ff      	movs	r2, #255	; 0xff
 8007df8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	22ff      	movs	r2, #255	; 0xff
 8007e00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d114      	bne.n	8007e34 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	691b      	ldr	r3, [r3, #16]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d01a      	beq.n	8007e48 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	3310      	adds	r3, #16
 8007e16:	4618      	mov	r0, r3
 8007e18:	f001 fc10 	bl	800963c <xTaskRemoveFromEventList>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d012      	beq.n	8007e48 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007e22:	4b0d      	ldr	r3, [pc, #52]	; (8007e58 <xQueueGenericReset+0xcc>)
 8007e24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e28:	601a      	str	r2, [r3, #0]
 8007e2a:	f3bf 8f4f 	dsb	sy
 8007e2e:	f3bf 8f6f 	isb	sy
 8007e32:	e009      	b.n	8007e48 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	3310      	adds	r3, #16
 8007e38:	4618      	mov	r0, r3
 8007e3a:	f7ff fef2 	bl	8007c22 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	3324      	adds	r3, #36	; 0x24
 8007e42:	4618      	mov	r0, r3
 8007e44:	f7ff feed 	bl	8007c22 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007e48:	f002 fa56 	bl	800a2f8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007e4c:	2301      	movs	r3, #1
}
 8007e4e:	4618      	mov	r0, r3
 8007e50:	3710      	adds	r7, #16
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd80      	pop	{r7, pc}
 8007e56:	bf00      	nop
 8007e58:	e000ed04 	.word	0xe000ed04

08007e5c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b08e      	sub	sp, #56	; 0x38
 8007e60:	af02      	add	r7, sp, #8
 8007e62:	60f8      	str	r0, [r7, #12]
 8007e64:	60b9      	str	r1, [r7, #8]
 8007e66:	607a      	str	r2, [r7, #4]
 8007e68:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d109      	bne.n	8007e84 <xQueueGenericCreateStatic+0x28>
 8007e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e74:	f383 8811 	msr	BASEPRI, r3
 8007e78:	f3bf 8f6f 	isb	sy
 8007e7c:	f3bf 8f4f 	dsb	sy
 8007e80:	62bb      	str	r3, [r7, #40]	; 0x28
 8007e82:	e7fe      	b.n	8007e82 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d109      	bne.n	8007e9e <xQueueGenericCreateStatic+0x42>
 8007e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e8e:	f383 8811 	msr	BASEPRI, r3
 8007e92:	f3bf 8f6f 	isb	sy
 8007e96:	f3bf 8f4f 	dsb	sy
 8007e9a:	627b      	str	r3, [r7, #36]	; 0x24
 8007e9c:	e7fe      	b.n	8007e9c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d002      	beq.n	8007eaa <xQueueGenericCreateStatic+0x4e>
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d001      	beq.n	8007eae <xQueueGenericCreateStatic+0x52>
 8007eaa:	2301      	movs	r3, #1
 8007eac:	e000      	b.n	8007eb0 <xQueueGenericCreateStatic+0x54>
 8007eae:	2300      	movs	r3, #0
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d109      	bne.n	8007ec8 <xQueueGenericCreateStatic+0x6c>
 8007eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eb8:	f383 8811 	msr	BASEPRI, r3
 8007ebc:	f3bf 8f6f 	isb	sy
 8007ec0:	f3bf 8f4f 	dsb	sy
 8007ec4:	623b      	str	r3, [r7, #32]
 8007ec6:	e7fe      	b.n	8007ec6 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d102      	bne.n	8007ed4 <xQueueGenericCreateStatic+0x78>
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d101      	bne.n	8007ed8 <xQueueGenericCreateStatic+0x7c>
 8007ed4:	2301      	movs	r3, #1
 8007ed6:	e000      	b.n	8007eda <xQueueGenericCreateStatic+0x7e>
 8007ed8:	2300      	movs	r3, #0
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d109      	bne.n	8007ef2 <xQueueGenericCreateStatic+0x96>
 8007ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ee2:	f383 8811 	msr	BASEPRI, r3
 8007ee6:	f3bf 8f6f 	isb	sy
 8007eea:	f3bf 8f4f 	dsb	sy
 8007eee:	61fb      	str	r3, [r7, #28]
 8007ef0:	e7fe      	b.n	8007ef0 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007ef2:	2348      	movs	r3, #72	; 0x48
 8007ef4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007ef6:	697b      	ldr	r3, [r7, #20]
 8007ef8:	2b48      	cmp	r3, #72	; 0x48
 8007efa:	d009      	beq.n	8007f10 <xQueueGenericCreateStatic+0xb4>
 8007efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f00:	f383 8811 	msr	BASEPRI, r3
 8007f04:	f3bf 8f6f 	isb	sy
 8007f08:	f3bf 8f4f 	dsb	sy
 8007f0c:	61bb      	str	r3, [r7, #24]
 8007f0e:	e7fe      	b.n	8007f0e <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d00d      	beq.n	8007f36 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f1c:	2201      	movs	r2, #1
 8007f1e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007f22:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f28:	9300      	str	r3, [sp, #0]
 8007f2a:	4613      	mov	r3, r2
 8007f2c:	687a      	ldr	r2, [r7, #4]
 8007f2e:	68b9      	ldr	r1, [r7, #8]
 8007f30:	68f8      	ldr	r0, [r7, #12]
 8007f32:	f000 f842 	bl	8007fba <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8007f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	3730      	adds	r7, #48	; 0x30
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bd80      	pop	{r7, pc}

08007f40 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b08a      	sub	sp, #40	; 0x28
 8007f44:	af02      	add	r7, sp, #8
 8007f46:	60f8      	str	r0, [r7, #12]
 8007f48:	60b9      	str	r1, [r7, #8]
 8007f4a:	4613      	mov	r3, r2
 8007f4c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d109      	bne.n	8007f68 <xQueueGenericCreate+0x28>
 8007f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f58:	f383 8811 	msr	BASEPRI, r3
 8007f5c:	f3bf 8f6f 	isb	sy
 8007f60:	f3bf 8f4f 	dsb	sy
 8007f64:	613b      	str	r3, [r7, #16]
 8007f66:	e7fe      	b.n	8007f66 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d102      	bne.n	8007f74 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8007f6e:	2300      	movs	r3, #0
 8007f70:	61fb      	str	r3, [r7, #28]
 8007f72:	e004      	b.n	8007f7e <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	68ba      	ldr	r2, [r7, #8]
 8007f78:	fb02 f303 	mul.w	r3, r2, r3
 8007f7c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8007f7e:	69fb      	ldr	r3, [r7, #28]
 8007f80:	3348      	adds	r3, #72	; 0x48
 8007f82:	4618      	mov	r0, r3
 8007f84:	f002 faa4 	bl	800a4d0 <pvPortMalloc>
 8007f88:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007f8a:	69bb      	ldr	r3, [r7, #24]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d00f      	beq.n	8007fb0 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8007f90:	69bb      	ldr	r3, [r7, #24]
 8007f92:	3348      	adds	r3, #72	; 0x48
 8007f94:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007f96:	69bb      	ldr	r3, [r7, #24]
 8007f98:	2200      	movs	r2, #0
 8007f9a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007f9e:	79fa      	ldrb	r2, [r7, #7]
 8007fa0:	69bb      	ldr	r3, [r7, #24]
 8007fa2:	9300      	str	r3, [sp, #0]
 8007fa4:	4613      	mov	r3, r2
 8007fa6:	697a      	ldr	r2, [r7, #20]
 8007fa8:	68b9      	ldr	r1, [r7, #8]
 8007faa:	68f8      	ldr	r0, [r7, #12]
 8007fac:	f000 f805 	bl	8007fba <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8007fb0:	69bb      	ldr	r3, [r7, #24]
	}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	3720      	adds	r7, #32
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bd80      	pop	{r7, pc}

08007fba <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007fba:	b580      	push	{r7, lr}
 8007fbc:	b084      	sub	sp, #16
 8007fbe:	af00      	add	r7, sp, #0
 8007fc0:	60f8      	str	r0, [r7, #12]
 8007fc2:	60b9      	str	r1, [r7, #8]
 8007fc4:	607a      	str	r2, [r7, #4]
 8007fc6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007fc8:	68bb      	ldr	r3, [r7, #8]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d103      	bne.n	8007fd6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007fce:	69bb      	ldr	r3, [r7, #24]
 8007fd0:	69ba      	ldr	r2, [r7, #24]
 8007fd2:	601a      	str	r2, [r3, #0]
 8007fd4:	e002      	b.n	8007fdc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007fd6:	69bb      	ldr	r3, [r7, #24]
 8007fd8:	687a      	ldr	r2, [r7, #4]
 8007fda:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007fdc:	69bb      	ldr	r3, [r7, #24]
 8007fde:	68fa      	ldr	r2, [r7, #12]
 8007fe0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007fe2:	69bb      	ldr	r3, [r7, #24]
 8007fe4:	68ba      	ldr	r2, [r7, #8]
 8007fe6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007fe8:	2101      	movs	r1, #1
 8007fea:	69b8      	ldr	r0, [r7, #24]
 8007fec:	f7ff fece 	bl	8007d8c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007ff0:	bf00      	nop
 8007ff2:	3710      	adds	r7, #16
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bd80      	pop	{r7, pc}

08007ff8 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b082      	sub	sp, #8
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d00e      	beq.n	8008024 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2200      	movs	r2, #0
 800800a:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2200      	movs	r2, #0
 8008010:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2200      	movs	r2, #0
 8008016:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8008018:	2300      	movs	r3, #0
 800801a:	2200      	movs	r2, #0
 800801c:	2100      	movs	r1, #0
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f000 f8a0 	bl	8008164 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8008024:	bf00      	nop
 8008026:	3708      	adds	r7, #8
 8008028:	46bd      	mov	sp, r7
 800802a:	bd80      	pop	{r7, pc}

0800802c <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800802c:	b580      	push	{r7, lr}
 800802e:	b086      	sub	sp, #24
 8008030:	af00      	add	r7, sp, #0
 8008032:	4603      	mov	r3, r0
 8008034:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008036:	2301      	movs	r3, #1
 8008038:	617b      	str	r3, [r7, #20]
 800803a:	2300      	movs	r3, #0
 800803c:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800803e:	79fb      	ldrb	r3, [r7, #7]
 8008040:	461a      	mov	r2, r3
 8008042:	6939      	ldr	r1, [r7, #16]
 8008044:	6978      	ldr	r0, [r7, #20]
 8008046:	f7ff ff7b 	bl	8007f40 <xQueueGenericCreate>
 800804a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800804c:	68f8      	ldr	r0, [r7, #12]
 800804e:	f7ff ffd3 	bl	8007ff8 <prvInitialiseMutex>

		return pxNewQueue;
 8008052:	68fb      	ldr	r3, [r7, #12]
	}
 8008054:	4618      	mov	r0, r3
 8008056:	3718      	adds	r7, #24
 8008058:	46bd      	mov	sp, r7
 800805a:	bd80      	pop	{r7, pc}

0800805c <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800805c:	b580      	push	{r7, lr}
 800805e:	b088      	sub	sp, #32
 8008060:	af02      	add	r7, sp, #8
 8008062:	4603      	mov	r3, r0
 8008064:	6039      	str	r1, [r7, #0]
 8008066:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008068:	2301      	movs	r3, #1
 800806a:	617b      	str	r3, [r7, #20]
 800806c:	2300      	movs	r3, #0
 800806e:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8008070:	79fb      	ldrb	r3, [r7, #7]
 8008072:	9300      	str	r3, [sp, #0]
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	2200      	movs	r2, #0
 8008078:	6939      	ldr	r1, [r7, #16]
 800807a:	6978      	ldr	r0, [r7, #20]
 800807c:	f7ff feee 	bl	8007e5c <xQueueGenericCreateStatic>
 8008080:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8008082:	68f8      	ldr	r0, [r7, #12]
 8008084:	f7ff ffb8 	bl	8007ff8 <prvInitialiseMutex>

		return pxNewQueue;
 8008088:	68fb      	ldr	r3, [r7, #12]
	}
 800808a:	4618      	mov	r0, r3
 800808c:	3718      	adds	r7, #24
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}

08008092 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8008092:	b590      	push	{r4, r7, lr}
 8008094:	b087      	sub	sp, #28
 8008096:	af00      	add	r7, sp, #0
 8008098:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800809e:	693b      	ldr	r3, [r7, #16]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d109      	bne.n	80080b8 <xQueueGiveMutexRecursive+0x26>
 80080a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080a8:	f383 8811 	msr	BASEPRI, r3
 80080ac:	f3bf 8f6f 	isb	sy
 80080b0:	f3bf 8f4f 	dsb	sy
 80080b4:	60fb      	str	r3, [r7, #12]
 80080b6:	e7fe      	b.n	80080b6 <xQueueGiveMutexRecursive+0x24>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
 80080b8:	693b      	ldr	r3, [r7, #16]
 80080ba:	685c      	ldr	r4, [r3, #4]
 80080bc:	f001 fc7c 	bl	80099b8 <xTaskGetCurrentTaskHandle>
 80080c0:	4603      	mov	r3, r0
 80080c2:	429c      	cmp	r4, r3
 80080c4:	d111      	bne.n	80080ea <xQueueGiveMutexRecursive+0x58>
			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.uxRecursiveCallCount )--;
 80080c6:	693b      	ldr	r3, [r7, #16]
 80080c8:	68db      	ldr	r3, [r3, #12]
 80080ca:	1e5a      	subs	r2, r3, #1
 80080cc:	693b      	ldr	r3, [r7, #16]
 80080ce:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80080d0:	693b      	ldr	r3, [r7, #16]
 80080d2:	68db      	ldr	r3, [r3, #12]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d105      	bne.n	80080e4 <xQueueGiveMutexRecursive+0x52>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80080d8:	2300      	movs	r3, #0
 80080da:	2200      	movs	r2, #0
 80080dc:	2100      	movs	r1, #0
 80080de:	6938      	ldr	r0, [r7, #16]
 80080e0:	f000 f840 	bl	8008164 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80080e4:	2301      	movs	r3, #1
 80080e6:	617b      	str	r3, [r7, #20]
 80080e8:	e001      	b.n	80080ee <xQueueGiveMutexRecursive+0x5c>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80080ea:	2300      	movs	r3, #0
 80080ec:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80080ee:	697b      	ldr	r3, [r7, #20]
	}
 80080f0:	4618      	mov	r0, r3
 80080f2:	371c      	adds	r7, #28
 80080f4:	46bd      	mov	sp, r7
 80080f6:	bd90      	pop	{r4, r7, pc}

080080f8 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80080f8:	b590      	push	{r4, r7, lr}
 80080fa:	b087      	sub	sp, #28
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
 8008100:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8008106:	693b      	ldr	r3, [r7, #16]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d109      	bne.n	8008120 <xQueueTakeMutexRecursive+0x28>
 800810c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008110:	f383 8811 	msr	BASEPRI, r3
 8008114:	f3bf 8f6f 	isb	sy
 8008118:	f3bf 8f4f 	dsb	sy
 800811c:	60fb      	str	r3, [r7, #12]
 800811e:	e7fe      	b.n	800811e <xQueueTakeMutexRecursive+0x26>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8008120:	693b      	ldr	r3, [r7, #16]
 8008122:	685c      	ldr	r4, [r3, #4]
 8008124:	f001 fc48 	bl	80099b8 <xTaskGetCurrentTaskHandle>
 8008128:	4603      	mov	r3, r0
 800812a:	429c      	cmp	r4, r3
 800812c:	d107      	bne.n	800813e <xQueueTakeMutexRecursive+0x46>
		{
			( pxMutex->u.uxRecursiveCallCount )++;
 800812e:	693b      	ldr	r3, [r7, #16]
 8008130:	68db      	ldr	r3, [r3, #12]
 8008132:	1c5a      	adds	r2, r3, #1
 8008134:	693b      	ldr	r3, [r7, #16]
 8008136:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8008138:	2301      	movs	r3, #1
 800813a:	617b      	str	r3, [r7, #20]
 800813c:	e00c      	b.n	8008158 <xQueueTakeMutexRecursive+0x60>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800813e:	6839      	ldr	r1, [r7, #0]
 8008140:	6938      	ldr	r0, [r7, #16]
 8008142:	f000 fb03 	bl	800874c <xQueueSemaphoreTake>
 8008146:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8008148:	697b      	ldr	r3, [r7, #20]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d004      	beq.n	8008158 <xQueueTakeMutexRecursive+0x60>
			{
				( pxMutex->u.uxRecursiveCallCount )++;
 800814e:	693b      	ldr	r3, [r7, #16]
 8008150:	68db      	ldr	r3, [r3, #12]
 8008152:	1c5a      	adds	r2, r3, #1
 8008154:	693b      	ldr	r3, [r7, #16]
 8008156:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8008158:	697b      	ldr	r3, [r7, #20]
	}
 800815a:	4618      	mov	r0, r3
 800815c:	371c      	adds	r7, #28
 800815e:	46bd      	mov	sp, r7
 8008160:	bd90      	pop	{r4, r7, pc}
	...

08008164 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b08e      	sub	sp, #56	; 0x38
 8008168:	af00      	add	r7, sp, #0
 800816a:	60f8      	str	r0, [r7, #12]
 800816c:	60b9      	str	r1, [r7, #8]
 800816e:	607a      	str	r2, [r7, #4]
 8008170:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008172:	2300      	movs	r3, #0
 8008174:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800817a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800817c:	2b00      	cmp	r3, #0
 800817e:	d109      	bne.n	8008194 <xQueueGenericSend+0x30>
 8008180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008184:	f383 8811 	msr	BASEPRI, r3
 8008188:	f3bf 8f6f 	isb	sy
 800818c:	f3bf 8f4f 	dsb	sy
 8008190:	62bb      	str	r3, [r7, #40]	; 0x28
 8008192:	e7fe      	b.n	8008192 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d103      	bne.n	80081a2 <xQueueGenericSend+0x3e>
 800819a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800819c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d101      	bne.n	80081a6 <xQueueGenericSend+0x42>
 80081a2:	2301      	movs	r3, #1
 80081a4:	e000      	b.n	80081a8 <xQueueGenericSend+0x44>
 80081a6:	2300      	movs	r3, #0
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d109      	bne.n	80081c0 <xQueueGenericSend+0x5c>
 80081ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081b0:	f383 8811 	msr	BASEPRI, r3
 80081b4:	f3bf 8f6f 	isb	sy
 80081b8:	f3bf 8f4f 	dsb	sy
 80081bc:	627b      	str	r3, [r7, #36]	; 0x24
 80081be:	e7fe      	b.n	80081be <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	2b02      	cmp	r3, #2
 80081c4:	d103      	bne.n	80081ce <xQueueGenericSend+0x6a>
 80081c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081ca:	2b01      	cmp	r3, #1
 80081cc:	d101      	bne.n	80081d2 <xQueueGenericSend+0x6e>
 80081ce:	2301      	movs	r3, #1
 80081d0:	e000      	b.n	80081d4 <xQueueGenericSend+0x70>
 80081d2:	2300      	movs	r3, #0
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d109      	bne.n	80081ec <xQueueGenericSend+0x88>
 80081d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081dc:	f383 8811 	msr	BASEPRI, r3
 80081e0:	f3bf 8f6f 	isb	sy
 80081e4:	f3bf 8f4f 	dsb	sy
 80081e8:	623b      	str	r3, [r7, #32]
 80081ea:	e7fe      	b.n	80081ea <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80081ec:	f001 fbf4 	bl	80099d8 <xTaskGetSchedulerState>
 80081f0:	4603      	mov	r3, r0
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d102      	bne.n	80081fc <xQueueGenericSend+0x98>
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d101      	bne.n	8008200 <xQueueGenericSend+0x9c>
 80081fc:	2301      	movs	r3, #1
 80081fe:	e000      	b.n	8008202 <xQueueGenericSend+0x9e>
 8008200:	2300      	movs	r3, #0
 8008202:	2b00      	cmp	r3, #0
 8008204:	d109      	bne.n	800821a <xQueueGenericSend+0xb6>
 8008206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800820a:	f383 8811 	msr	BASEPRI, r3
 800820e:	f3bf 8f6f 	isb	sy
 8008212:	f3bf 8f4f 	dsb	sy
 8008216:	61fb      	str	r3, [r7, #28]
 8008218:	e7fe      	b.n	8008218 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800821a:	f002 f83f 	bl	800a29c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800821e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008220:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008226:	429a      	cmp	r2, r3
 8008228:	d302      	bcc.n	8008230 <xQueueGenericSend+0xcc>
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	2b02      	cmp	r3, #2
 800822e:	d129      	bne.n	8008284 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008230:	683a      	ldr	r2, [r7, #0]
 8008232:	68b9      	ldr	r1, [r7, #8]
 8008234:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008236:	f000 fc26 	bl	8008a86 <prvCopyDataToQueue>
 800823a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800823c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800823e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008240:	2b00      	cmp	r3, #0
 8008242:	d010      	beq.n	8008266 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008246:	3324      	adds	r3, #36	; 0x24
 8008248:	4618      	mov	r0, r3
 800824a:	f001 f9f7 	bl	800963c <xTaskRemoveFromEventList>
 800824e:	4603      	mov	r3, r0
 8008250:	2b00      	cmp	r3, #0
 8008252:	d013      	beq.n	800827c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008254:	4b3f      	ldr	r3, [pc, #252]	; (8008354 <xQueueGenericSend+0x1f0>)
 8008256:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800825a:	601a      	str	r2, [r3, #0]
 800825c:	f3bf 8f4f 	dsb	sy
 8008260:	f3bf 8f6f 	isb	sy
 8008264:	e00a      	b.n	800827c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008268:	2b00      	cmp	r3, #0
 800826a:	d007      	beq.n	800827c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800826c:	4b39      	ldr	r3, [pc, #228]	; (8008354 <xQueueGenericSend+0x1f0>)
 800826e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008272:	601a      	str	r2, [r3, #0]
 8008274:	f3bf 8f4f 	dsb	sy
 8008278:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800827c:	f002 f83c 	bl	800a2f8 <vPortExitCritical>
				return pdPASS;
 8008280:	2301      	movs	r3, #1
 8008282:	e063      	b.n	800834c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d103      	bne.n	8008292 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800828a:	f002 f835 	bl	800a2f8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800828e:	2300      	movs	r3, #0
 8008290:	e05c      	b.n	800834c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008292:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008294:	2b00      	cmp	r3, #0
 8008296:	d106      	bne.n	80082a6 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008298:	f107 0314 	add.w	r3, r7, #20
 800829c:	4618      	mov	r0, r3
 800829e:	f001 fa2f 	bl	8009700 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80082a2:	2301      	movs	r3, #1
 80082a4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80082a6:	f002 f827 	bl	800a2f8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80082aa:	f000 ff9b 	bl	80091e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80082ae:	f001 fff5 	bl	800a29c <vPortEnterCritical>
 80082b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80082b8:	b25b      	sxtb	r3, r3
 80082ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082be:	d103      	bne.n	80082c8 <xQueueGenericSend+0x164>
 80082c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082c2:	2200      	movs	r2, #0
 80082c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80082c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80082ce:	b25b      	sxtb	r3, r3
 80082d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082d4:	d103      	bne.n	80082de <xQueueGenericSend+0x17a>
 80082d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082d8:	2200      	movs	r2, #0
 80082da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80082de:	f002 f80b 	bl	800a2f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80082e2:	1d3a      	adds	r2, r7, #4
 80082e4:	f107 0314 	add.w	r3, r7, #20
 80082e8:	4611      	mov	r1, r2
 80082ea:	4618      	mov	r0, r3
 80082ec:	f001 fa1e 	bl	800972c <xTaskCheckForTimeOut>
 80082f0:	4603      	mov	r3, r0
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d124      	bne.n	8008340 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80082f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80082f8:	f000 fcbd 	bl	8008c76 <prvIsQueueFull>
 80082fc:	4603      	mov	r3, r0
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d018      	beq.n	8008334 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008304:	3310      	adds	r3, #16
 8008306:	687a      	ldr	r2, [r7, #4]
 8008308:	4611      	mov	r1, r2
 800830a:	4618      	mov	r0, r3
 800830c:	f001 f972 	bl	80095f4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008310:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008312:	f000 fc48 	bl	8008ba6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008316:	f000 ff73 	bl	8009200 <xTaskResumeAll>
 800831a:	4603      	mov	r3, r0
 800831c:	2b00      	cmp	r3, #0
 800831e:	f47f af7c 	bne.w	800821a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8008322:	4b0c      	ldr	r3, [pc, #48]	; (8008354 <xQueueGenericSend+0x1f0>)
 8008324:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008328:	601a      	str	r2, [r3, #0]
 800832a:	f3bf 8f4f 	dsb	sy
 800832e:	f3bf 8f6f 	isb	sy
 8008332:	e772      	b.n	800821a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008334:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008336:	f000 fc36 	bl	8008ba6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800833a:	f000 ff61 	bl	8009200 <xTaskResumeAll>
 800833e:	e76c      	b.n	800821a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008340:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008342:	f000 fc30 	bl	8008ba6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008346:	f000 ff5b 	bl	8009200 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800834a:	2300      	movs	r3, #0
		}
	}
}
 800834c:	4618      	mov	r0, r3
 800834e:	3738      	adds	r7, #56	; 0x38
 8008350:	46bd      	mov	sp, r7
 8008352:	bd80      	pop	{r7, pc}
 8008354:	e000ed04 	.word	0xe000ed04

08008358 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b08e      	sub	sp, #56	; 0x38
 800835c:	af00      	add	r7, sp, #0
 800835e:	60f8      	str	r0, [r7, #12]
 8008360:	60b9      	str	r1, [r7, #8]
 8008362:	607a      	str	r2, [r7, #4]
 8008364:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800836a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800836c:	2b00      	cmp	r3, #0
 800836e:	d109      	bne.n	8008384 <xQueueGenericSendFromISR+0x2c>
 8008370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008374:	f383 8811 	msr	BASEPRI, r3
 8008378:	f3bf 8f6f 	isb	sy
 800837c:	f3bf 8f4f 	dsb	sy
 8008380:	627b      	str	r3, [r7, #36]	; 0x24
 8008382:	e7fe      	b.n	8008382 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d103      	bne.n	8008392 <xQueueGenericSendFromISR+0x3a>
 800838a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800838c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800838e:	2b00      	cmp	r3, #0
 8008390:	d101      	bne.n	8008396 <xQueueGenericSendFromISR+0x3e>
 8008392:	2301      	movs	r3, #1
 8008394:	e000      	b.n	8008398 <xQueueGenericSendFromISR+0x40>
 8008396:	2300      	movs	r3, #0
 8008398:	2b00      	cmp	r3, #0
 800839a:	d109      	bne.n	80083b0 <xQueueGenericSendFromISR+0x58>
 800839c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083a0:	f383 8811 	msr	BASEPRI, r3
 80083a4:	f3bf 8f6f 	isb	sy
 80083a8:	f3bf 8f4f 	dsb	sy
 80083ac:	623b      	str	r3, [r7, #32]
 80083ae:	e7fe      	b.n	80083ae <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	2b02      	cmp	r3, #2
 80083b4:	d103      	bne.n	80083be <xQueueGenericSendFromISR+0x66>
 80083b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083ba:	2b01      	cmp	r3, #1
 80083bc:	d101      	bne.n	80083c2 <xQueueGenericSendFromISR+0x6a>
 80083be:	2301      	movs	r3, #1
 80083c0:	e000      	b.n	80083c4 <xQueueGenericSendFromISR+0x6c>
 80083c2:	2300      	movs	r3, #0
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d109      	bne.n	80083dc <xQueueGenericSendFromISR+0x84>
 80083c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083cc:	f383 8811 	msr	BASEPRI, r3
 80083d0:	f3bf 8f6f 	isb	sy
 80083d4:	f3bf 8f4f 	dsb	sy
 80083d8:	61fb      	str	r3, [r7, #28]
 80083da:	e7fe      	b.n	80083da <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80083dc:	f002 f83a 	bl	800a454 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80083e0:	f3ef 8211 	mrs	r2, BASEPRI
 80083e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083e8:	f383 8811 	msr	BASEPRI, r3
 80083ec:	f3bf 8f6f 	isb	sy
 80083f0:	f3bf 8f4f 	dsb	sy
 80083f4:	61ba      	str	r2, [r7, #24]
 80083f6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80083f8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80083fa:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80083fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008402:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008404:	429a      	cmp	r2, r3
 8008406:	d302      	bcc.n	800840e <xQueueGenericSendFromISR+0xb6>
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	2b02      	cmp	r3, #2
 800840c:	d12c      	bne.n	8008468 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800840e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008410:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008414:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008418:	683a      	ldr	r2, [r7, #0]
 800841a:	68b9      	ldr	r1, [r7, #8]
 800841c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800841e:	f000 fb32 	bl	8008a86 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008422:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8008426:	f1b3 3fff 	cmp.w	r3, #4294967295
 800842a:	d112      	bne.n	8008452 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800842c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800842e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008430:	2b00      	cmp	r3, #0
 8008432:	d016      	beq.n	8008462 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008436:	3324      	adds	r3, #36	; 0x24
 8008438:	4618      	mov	r0, r3
 800843a:	f001 f8ff 	bl	800963c <xTaskRemoveFromEventList>
 800843e:	4603      	mov	r3, r0
 8008440:	2b00      	cmp	r3, #0
 8008442:	d00e      	beq.n	8008462 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d00b      	beq.n	8008462 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2201      	movs	r2, #1
 800844e:	601a      	str	r2, [r3, #0]
 8008450:	e007      	b.n	8008462 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008452:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008456:	3301      	adds	r3, #1
 8008458:	b2db      	uxtb	r3, r3
 800845a:	b25a      	sxtb	r2, r3
 800845c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800845e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008462:	2301      	movs	r3, #1
 8008464:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8008466:	e001      	b.n	800846c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008468:	2300      	movs	r3, #0
 800846a:	637b      	str	r3, [r7, #52]	; 0x34
 800846c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800846e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008470:	693b      	ldr	r3, [r7, #16]
 8008472:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008478:	4618      	mov	r0, r3
 800847a:	3738      	adds	r7, #56	; 0x38
 800847c:	46bd      	mov	sp, r7
 800847e:	bd80      	pop	{r7, pc}

08008480 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b08e      	sub	sp, #56	; 0x38
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
 8008488:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800848e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008490:	2b00      	cmp	r3, #0
 8008492:	d109      	bne.n	80084a8 <xQueueGiveFromISR+0x28>
	__asm volatile
 8008494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008498:	f383 8811 	msr	BASEPRI, r3
 800849c:	f3bf 8f6f 	isb	sy
 80084a0:	f3bf 8f4f 	dsb	sy
 80084a4:	623b      	str	r3, [r7, #32]
 80084a6:	e7fe      	b.n	80084a6 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80084a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d009      	beq.n	80084c4 <xQueueGiveFromISR+0x44>
 80084b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084b4:	f383 8811 	msr	BASEPRI, r3
 80084b8:	f3bf 8f6f 	isb	sy
 80084bc:	f3bf 8f4f 	dsb	sy
 80084c0:	61fb      	str	r3, [r7, #28]
 80084c2:	e7fe      	b.n	80084c2 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80084c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d103      	bne.n	80084d4 <xQueueGiveFromISR+0x54>
 80084cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084ce:	685b      	ldr	r3, [r3, #4]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d101      	bne.n	80084d8 <xQueueGiveFromISR+0x58>
 80084d4:	2301      	movs	r3, #1
 80084d6:	e000      	b.n	80084da <xQueueGiveFromISR+0x5a>
 80084d8:	2300      	movs	r3, #0
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d109      	bne.n	80084f2 <xQueueGiveFromISR+0x72>
 80084de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084e2:	f383 8811 	msr	BASEPRI, r3
 80084e6:	f3bf 8f6f 	isb	sy
 80084ea:	f3bf 8f4f 	dsb	sy
 80084ee:	61bb      	str	r3, [r7, #24]
 80084f0:	e7fe      	b.n	80084f0 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80084f2:	f001 ffaf 	bl	800a454 <vPortValidateInterruptPriority>
	__asm volatile
 80084f6:	f3ef 8211 	mrs	r2, BASEPRI
 80084fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084fe:	f383 8811 	msr	BASEPRI, r3
 8008502:	f3bf 8f6f 	isb	sy
 8008506:	f3bf 8f4f 	dsb	sy
 800850a:	617a      	str	r2, [r7, #20]
 800850c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800850e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008510:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008516:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800851a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800851c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800851e:	429a      	cmp	r2, r3
 8008520:	d22b      	bcs.n	800857a <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008524:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008528:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800852c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800852e:	1c5a      	adds	r2, r3, #1
 8008530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008532:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008534:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800853c:	d112      	bne.n	8008564 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800853e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008542:	2b00      	cmp	r3, #0
 8008544:	d016      	beq.n	8008574 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008548:	3324      	adds	r3, #36	; 0x24
 800854a:	4618      	mov	r0, r3
 800854c:	f001 f876 	bl	800963c <xTaskRemoveFromEventList>
 8008550:	4603      	mov	r3, r0
 8008552:	2b00      	cmp	r3, #0
 8008554:	d00e      	beq.n	8008574 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d00b      	beq.n	8008574 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	2201      	movs	r2, #1
 8008560:	601a      	str	r2, [r3, #0]
 8008562:	e007      	b.n	8008574 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008564:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008568:	3301      	adds	r3, #1
 800856a:	b2db      	uxtb	r3, r3
 800856c:	b25a      	sxtb	r2, r3
 800856e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008570:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008574:	2301      	movs	r3, #1
 8008576:	637b      	str	r3, [r7, #52]	; 0x34
 8008578:	e001      	b.n	800857e <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800857a:	2300      	movs	r3, #0
 800857c:	637b      	str	r3, [r7, #52]	; 0x34
 800857e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008580:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008588:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800858a:	4618      	mov	r0, r3
 800858c:	3738      	adds	r7, #56	; 0x38
 800858e:	46bd      	mov	sp, r7
 8008590:	bd80      	pop	{r7, pc}
	...

08008594 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b08c      	sub	sp, #48	; 0x30
 8008598:	af00      	add	r7, sp, #0
 800859a:	60f8      	str	r0, [r7, #12]
 800859c:	60b9      	str	r1, [r7, #8]
 800859e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80085a0:	2300      	movs	r3, #0
 80085a2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80085a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d109      	bne.n	80085c2 <xQueueReceive+0x2e>
	__asm volatile
 80085ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085b2:	f383 8811 	msr	BASEPRI, r3
 80085b6:	f3bf 8f6f 	isb	sy
 80085ba:	f3bf 8f4f 	dsb	sy
 80085be:	623b      	str	r3, [r7, #32]
 80085c0:	e7fe      	b.n	80085c0 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d103      	bne.n	80085d0 <xQueueReceive+0x3c>
 80085c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d101      	bne.n	80085d4 <xQueueReceive+0x40>
 80085d0:	2301      	movs	r3, #1
 80085d2:	e000      	b.n	80085d6 <xQueueReceive+0x42>
 80085d4:	2300      	movs	r3, #0
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d109      	bne.n	80085ee <xQueueReceive+0x5a>
 80085da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085de:	f383 8811 	msr	BASEPRI, r3
 80085e2:	f3bf 8f6f 	isb	sy
 80085e6:	f3bf 8f4f 	dsb	sy
 80085ea:	61fb      	str	r3, [r7, #28]
 80085ec:	e7fe      	b.n	80085ec <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80085ee:	f001 f9f3 	bl	80099d8 <xTaskGetSchedulerState>
 80085f2:	4603      	mov	r3, r0
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d102      	bne.n	80085fe <xQueueReceive+0x6a>
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d101      	bne.n	8008602 <xQueueReceive+0x6e>
 80085fe:	2301      	movs	r3, #1
 8008600:	e000      	b.n	8008604 <xQueueReceive+0x70>
 8008602:	2300      	movs	r3, #0
 8008604:	2b00      	cmp	r3, #0
 8008606:	d109      	bne.n	800861c <xQueueReceive+0x88>
 8008608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800860c:	f383 8811 	msr	BASEPRI, r3
 8008610:	f3bf 8f6f 	isb	sy
 8008614:	f3bf 8f4f 	dsb	sy
 8008618:	61bb      	str	r3, [r7, #24]
 800861a:	e7fe      	b.n	800861a <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800861c:	f001 fe3e 	bl	800a29c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008624:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008628:	2b00      	cmp	r3, #0
 800862a:	d01f      	beq.n	800866c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800862c:	68b9      	ldr	r1, [r7, #8]
 800862e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008630:	f000 fa93 	bl	8008b5a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008636:	1e5a      	subs	r2, r3, #1
 8008638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800863a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800863c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800863e:	691b      	ldr	r3, [r3, #16]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d00f      	beq.n	8008664 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008646:	3310      	adds	r3, #16
 8008648:	4618      	mov	r0, r3
 800864a:	f000 fff7 	bl	800963c <xTaskRemoveFromEventList>
 800864e:	4603      	mov	r3, r0
 8008650:	2b00      	cmp	r3, #0
 8008652:	d007      	beq.n	8008664 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008654:	4b3c      	ldr	r3, [pc, #240]	; (8008748 <xQueueReceive+0x1b4>)
 8008656:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800865a:	601a      	str	r2, [r3, #0]
 800865c:	f3bf 8f4f 	dsb	sy
 8008660:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008664:	f001 fe48 	bl	800a2f8 <vPortExitCritical>
				return pdPASS;
 8008668:	2301      	movs	r3, #1
 800866a:	e069      	b.n	8008740 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d103      	bne.n	800867a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008672:	f001 fe41 	bl	800a2f8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008676:	2300      	movs	r3, #0
 8008678:	e062      	b.n	8008740 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800867a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800867c:	2b00      	cmp	r3, #0
 800867e:	d106      	bne.n	800868e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008680:	f107 0310 	add.w	r3, r7, #16
 8008684:	4618      	mov	r0, r3
 8008686:	f001 f83b 	bl	8009700 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800868a:	2301      	movs	r3, #1
 800868c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800868e:	f001 fe33 	bl	800a2f8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008692:	f000 fda7 	bl	80091e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008696:	f001 fe01 	bl	800a29c <vPortEnterCritical>
 800869a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800869c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80086a0:	b25b      	sxtb	r3, r3
 80086a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086a6:	d103      	bne.n	80086b0 <xQueueReceive+0x11c>
 80086a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086aa:	2200      	movs	r2, #0
 80086ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80086b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80086b6:	b25b      	sxtb	r3, r3
 80086b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086bc:	d103      	bne.n	80086c6 <xQueueReceive+0x132>
 80086be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086c0:	2200      	movs	r2, #0
 80086c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80086c6:	f001 fe17 	bl	800a2f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80086ca:	1d3a      	adds	r2, r7, #4
 80086cc:	f107 0310 	add.w	r3, r7, #16
 80086d0:	4611      	mov	r1, r2
 80086d2:	4618      	mov	r0, r3
 80086d4:	f001 f82a 	bl	800972c <xTaskCheckForTimeOut>
 80086d8:	4603      	mov	r3, r0
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d123      	bne.n	8008726 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80086de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80086e0:	f000 fab3 	bl	8008c4a <prvIsQueueEmpty>
 80086e4:	4603      	mov	r3, r0
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d017      	beq.n	800871a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80086ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ec:	3324      	adds	r3, #36	; 0x24
 80086ee:	687a      	ldr	r2, [r7, #4]
 80086f0:	4611      	mov	r1, r2
 80086f2:	4618      	mov	r0, r3
 80086f4:	f000 ff7e 	bl	80095f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80086f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80086fa:	f000 fa54 	bl	8008ba6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80086fe:	f000 fd7f 	bl	8009200 <xTaskResumeAll>
 8008702:	4603      	mov	r3, r0
 8008704:	2b00      	cmp	r3, #0
 8008706:	d189      	bne.n	800861c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8008708:	4b0f      	ldr	r3, [pc, #60]	; (8008748 <xQueueReceive+0x1b4>)
 800870a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800870e:	601a      	str	r2, [r3, #0]
 8008710:	f3bf 8f4f 	dsb	sy
 8008714:	f3bf 8f6f 	isb	sy
 8008718:	e780      	b.n	800861c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800871a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800871c:	f000 fa43 	bl	8008ba6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008720:	f000 fd6e 	bl	8009200 <xTaskResumeAll>
 8008724:	e77a      	b.n	800861c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008726:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008728:	f000 fa3d 	bl	8008ba6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800872c:	f000 fd68 	bl	8009200 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008730:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008732:	f000 fa8a 	bl	8008c4a <prvIsQueueEmpty>
 8008736:	4603      	mov	r3, r0
 8008738:	2b00      	cmp	r3, #0
 800873a:	f43f af6f 	beq.w	800861c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800873e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8008740:	4618      	mov	r0, r3
 8008742:	3730      	adds	r7, #48	; 0x30
 8008744:	46bd      	mov	sp, r7
 8008746:	bd80      	pop	{r7, pc}
 8008748:	e000ed04 	.word	0xe000ed04

0800874c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b08e      	sub	sp, #56	; 0x38
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
 8008754:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008756:	2300      	movs	r3, #0
 8008758:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800875e:	2300      	movs	r3, #0
 8008760:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008764:	2b00      	cmp	r3, #0
 8008766:	d109      	bne.n	800877c <xQueueSemaphoreTake+0x30>
 8008768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800876c:	f383 8811 	msr	BASEPRI, r3
 8008770:	f3bf 8f6f 	isb	sy
 8008774:	f3bf 8f4f 	dsb	sy
 8008778:	623b      	str	r3, [r7, #32]
 800877a:	e7fe      	b.n	800877a <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800877c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800877e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008780:	2b00      	cmp	r3, #0
 8008782:	d009      	beq.n	8008798 <xQueueSemaphoreTake+0x4c>
 8008784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008788:	f383 8811 	msr	BASEPRI, r3
 800878c:	f3bf 8f6f 	isb	sy
 8008790:	f3bf 8f4f 	dsb	sy
 8008794:	61fb      	str	r3, [r7, #28]
 8008796:	e7fe      	b.n	8008796 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008798:	f001 f91e 	bl	80099d8 <xTaskGetSchedulerState>
 800879c:	4603      	mov	r3, r0
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d102      	bne.n	80087a8 <xQueueSemaphoreTake+0x5c>
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d101      	bne.n	80087ac <xQueueSemaphoreTake+0x60>
 80087a8:	2301      	movs	r3, #1
 80087aa:	e000      	b.n	80087ae <xQueueSemaphoreTake+0x62>
 80087ac:	2300      	movs	r3, #0
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d109      	bne.n	80087c6 <xQueueSemaphoreTake+0x7a>
 80087b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087b6:	f383 8811 	msr	BASEPRI, r3
 80087ba:	f3bf 8f6f 	isb	sy
 80087be:	f3bf 8f4f 	dsb	sy
 80087c2:	61bb      	str	r3, [r7, #24]
 80087c4:	e7fe      	b.n	80087c4 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80087c6:	f001 fd69 	bl	800a29c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80087ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087ce:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80087d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d024      	beq.n	8008820 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80087d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087d8:	1e5a      	subs	r2, r3, #1
 80087da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087dc:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80087de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d104      	bne.n	80087f0 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80087e6:	f001 fabd 	bl	8009d64 <pvTaskIncrementMutexHeldCount>
 80087ea:	4602      	mov	r2, r0
 80087ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087ee:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80087f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087f2:	691b      	ldr	r3, [r3, #16]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d00f      	beq.n	8008818 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80087f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087fa:	3310      	adds	r3, #16
 80087fc:	4618      	mov	r0, r3
 80087fe:	f000 ff1d 	bl	800963c <xTaskRemoveFromEventList>
 8008802:	4603      	mov	r3, r0
 8008804:	2b00      	cmp	r3, #0
 8008806:	d007      	beq.n	8008818 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008808:	4b53      	ldr	r3, [pc, #332]	; (8008958 <xQueueSemaphoreTake+0x20c>)
 800880a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800880e:	601a      	str	r2, [r3, #0]
 8008810:	f3bf 8f4f 	dsb	sy
 8008814:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008818:	f001 fd6e 	bl	800a2f8 <vPortExitCritical>
				return pdPASS;
 800881c:	2301      	movs	r3, #1
 800881e:	e096      	b.n	800894e <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d110      	bne.n	8008848 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008828:	2b00      	cmp	r3, #0
 800882a:	d009      	beq.n	8008840 <xQueueSemaphoreTake+0xf4>
 800882c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008830:	f383 8811 	msr	BASEPRI, r3
 8008834:	f3bf 8f6f 	isb	sy
 8008838:	f3bf 8f4f 	dsb	sy
 800883c:	617b      	str	r3, [r7, #20]
 800883e:	e7fe      	b.n	800883e <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008840:	f001 fd5a 	bl	800a2f8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008844:	2300      	movs	r3, #0
 8008846:	e082      	b.n	800894e <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008848:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800884a:	2b00      	cmp	r3, #0
 800884c:	d106      	bne.n	800885c <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800884e:	f107 030c 	add.w	r3, r7, #12
 8008852:	4618      	mov	r0, r3
 8008854:	f000 ff54 	bl	8009700 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008858:	2301      	movs	r3, #1
 800885a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800885c:	f001 fd4c 	bl	800a2f8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008860:	f000 fcc0 	bl	80091e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008864:	f001 fd1a 	bl	800a29c <vPortEnterCritical>
 8008868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800886a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800886e:	b25b      	sxtb	r3, r3
 8008870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008874:	d103      	bne.n	800887e <xQueueSemaphoreTake+0x132>
 8008876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008878:	2200      	movs	r2, #0
 800887a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800887e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008880:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008884:	b25b      	sxtb	r3, r3
 8008886:	f1b3 3fff 	cmp.w	r3, #4294967295
 800888a:	d103      	bne.n	8008894 <xQueueSemaphoreTake+0x148>
 800888c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800888e:	2200      	movs	r2, #0
 8008890:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008894:	f001 fd30 	bl	800a2f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008898:	463a      	mov	r2, r7
 800889a:	f107 030c 	add.w	r3, r7, #12
 800889e:	4611      	mov	r1, r2
 80088a0:	4618      	mov	r0, r3
 80088a2:	f000 ff43 	bl	800972c <xTaskCheckForTimeOut>
 80088a6:	4603      	mov	r3, r0
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d132      	bne.n	8008912 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80088ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80088ae:	f000 f9cc 	bl	8008c4a <prvIsQueueEmpty>
 80088b2:	4603      	mov	r3, r0
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d026      	beq.n	8008906 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80088b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d109      	bne.n	80088d4 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 80088c0:	f001 fcec 	bl	800a29c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80088c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088c6:	685b      	ldr	r3, [r3, #4]
 80088c8:	4618      	mov	r0, r3
 80088ca:	f001 f8a3 	bl	8009a14 <xTaskPriorityInherit>
 80088ce:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80088d0:	f001 fd12 	bl	800a2f8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80088d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088d6:	3324      	adds	r3, #36	; 0x24
 80088d8:	683a      	ldr	r2, [r7, #0]
 80088da:	4611      	mov	r1, r2
 80088dc:	4618      	mov	r0, r3
 80088de:	f000 fe89 	bl	80095f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80088e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80088e4:	f000 f95f 	bl	8008ba6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80088e8:	f000 fc8a 	bl	8009200 <xTaskResumeAll>
 80088ec:	4603      	mov	r3, r0
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	f47f af69 	bne.w	80087c6 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 80088f4:	4b18      	ldr	r3, [pc, #96]	; (8008958 <xQueueSemaphoreTake+0x20c>)
 80088f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088fa:	601a      	str	r2, [r3, #0]
 80088fc:	f3bf 8f4f 	dsb	sy
 8008900:	f3bf 8f6f 	isb	sy
 8008904:	e75f      	b.n	80087c6 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008906:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008908:	f000 f94d 	bl	8008ba6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800890c:	f000 fc78 	bl	8009200 <xTaskResumeAll>
 8008910:	e759      	b.n	80087c6 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008912:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008914:	f000 f947 	bl	8008ba6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008918:	f000 fc72 	bl	8009200 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800891c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800891e:	f000 f994 	bl	8008c4a <prvIsQueueEmpty>
 8008922:	4603      	mov	r3, r0
 8008924:	2b00      	cmp	r3, #0
 8008926:	f43f af4e 	beq.w	80087c6 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800892a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800892c:	2b00      	cmp	r3, #0
 800892e:	d00d      	beq.n	800894c <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8008930:	f001 fcb4 	bl	800a29c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008934:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008936:	f000 f88e 	bl	8008a56 <prvGetDisinheritPriorityAfterTimeout>
 800893a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800893c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800893e:	685b      	ldr	r3, [r3, #4]
 8008940:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008942:	4618      	mov	r0, r3
 8008944:	f001 f970 	bl	8009c28 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008948:	f001 fcd6 	bl	800a2f8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800894c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800894e:	4618      	mov	r0, r3
 8008950:	3738      	adds	r7, #56	; 0x38
 8008952:	46bd      	mov	sp, r7
 8008954:	bd80      	pop	{r7, pc}
 8008956:	bf00      	nop
 8008958:	e000ed04 	.word	0xe000ed04

0800895c <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b08e      	sub	sp, #56	; 0x38
 8008960:	af00      	add	r7, sp, #0
 8008962:	60f8      	str	r0, [r7, #12]
 8008964:	60b9      	str	r1, [r7, #8]
 8008966:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800896c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800896e:	2b00      	cmp	r3, #0
 8008970:	d109      	bne.n	8008986 <xQueueReceiveFromISR+0x2a>
 8008972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008976:	f383 8811 	msr	BASEPRI, r3
 800897a:	f3bf 8f6f 	isb	sy
 800897e:	f3bf 8f4f 	dsb	sy
 8008982:	623b      	str	r3, [r7, #32]
 8008984:	e7fe      	b.n	8008984 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008986:	68bb      	ldr	r3, [r7, #8]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d103      	bne.n	8008994 <xQueueReceiveFromISR+0x38>
 800898c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800898e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008990:	2b00      	cmp	r3, #0
 8008992:	d101      	bne.n	8008998 <xQueueReceiveFromISR+0x3c>
 8008994:	2301      	movs	r3, #1
 8008996:	e000      	b.n	800899a <xQueueReceiveFromISR+0x3e>
 8008998:	2300      	movs	r3, #0
 800899a:	2b00      	cmp	r3, #0
 800899c:	d109      	bne.n	80089b2 <xQueueReceiveFromISR+0x56>
 800899e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089a2:	f383 8811 	msr	BASEPRI, r3
 80089a6:	f3bf 8f6f 	isb	sy
 80089aa:	f3bf 8f4f 	dsb	sy
 80089ae:	61fb      	str	r3, [r7, #28]
 80089b0:	e7fe      	b.n	80089b0 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80089b2:	f001 fd4f 	bl	800a454 <vPortValidateInterruptPriority>
	__asm volatile
 80089b6:	f3ef 8211 	mrs	r2, BASEPRI
 80089ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089be:	f383 8811 	msr	BASEPRI, r3
 80089c2:	f3bf 8f6f 	isb	sy
 80089c6:	f3bf 8f4f 	dsb	sy
 80089ca:	61ba      	str	r2, [r7, #24]
 80089cc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80089ce:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80089d0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80089d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089d6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80089d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d02f      	beq.n	8008a3e <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80089de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80089e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80089e8:	68b9      	ldr	r1, [r7, #8]
 80089ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80089ec:	f000 f8b5 	bl	8008b5a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80089f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089f2:	1e5a      	subs	r2, r3, #1
 80089f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089f6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80089f8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80089fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a00:	d112      	bne.n	8008a28 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a04:	691b      	ldr	r3, [r3, #16]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d016      	beq.n	8008a38 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a0c:	3310      	adds	r3, #16
 8008a0e:	4618      	mov	r0, r3
 8008a10:	f000 fe14 	bl	800963c <xTaskRemoveFromEventList>
 8008a14:	4603      	mov	r3, r0
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d00e      	beq.n	8008a38 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d00b      	beq.n	8008a38 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2201      	movs	r2, #1
 8008a24:	601a      	str	r2, [r3, #0]
 8008a26:	e007      	b.n	8008a38 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008a28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008a2c:	3301      	adds	r3, #1
 8008a2e:	b2db      	uxtb	r3, r3
 8008a30:	b25a      	sxtb	r2, r3
 8008a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8008a38:	2301      	movs	r3, #1
 8008a3a:	637b      	str	r3, [r7, #52]	; 0x34
 8008a3c:	e001      	b.n	8008a42 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8008a3e:	2300      	movs	r3, #0
 8008a40:	637b      	str	r3, [r7, #52]	; 0x34
 8008a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a44:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008a46:	693b      	ldr	r3, [r7, #16]
 8008a48:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008a4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	3738      	adds	r7, #56	; 0x38
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}

08008a56 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008a56:	b480      	push	{r7}
 8008a58:	b085      	sub	sp, #20
 8008a5a:	af00      	add	r7, sp, #0
 8008a5c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d006      	beq.n	8008a74 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f1c3 0307 	rsb	r3, r3, #7
 8008a70:	60fb      	str	r3, [r7, #12]
 8008a72:	e001      	b.n	8008a78 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008a74:	2300      	movs	r3, #0
 8008a76:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008a78:	68fb      	ldr	r3, [r7, #12]
	}
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	3714      	adds	r7, #20
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a84:	4770      	bx	lr

08008a86 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008a86:	b580      	push	{r7, lr}
 8008a88:	b086      	sub	sp, #24
 8008a8a:	af00      	add	r7, sp, #0
 8008a8c:	60f8      	str	r0, [r7, #12]
 8008a8e:	60b9      	str	r1, [r7, #8]
 8008a90:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008a92:	2300      	movs	r3, #0
 8008a94:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a9a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d10d      	bne.n	8008ac0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d14d      	bne.n	8008b48 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	685b      	ldr	r3, [r3, #4]
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	f001 f835 	bl	8009b20 <xTaskPriorityDisinherit>
 8008ab6:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	2200      	movs	r2, #0
 8008abc:	605a      	str	r2, [r3, #4]
 8008abe:	e043      	b.n	8008b48 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d119      	bne.n	8008afa <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	6898      	ldr	r0, [r3, #8]
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ace:	461a      	mov	r2, r3
 8008ad0:	68b9      	ldr	r1, [r7, #8]
 8008ad2:	f009 fd41 	bl	8012558 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	689a      	ldr	r2, [r3, #8]
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ade:	441a      	add	r2, r3
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	689a      	ldr	r2, [r3, #8]
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	685b      	ldr	r3, [r3, #4]
 8008aec:	429a      	cmp	r2, r3
 8008aee:	d32b      	bcc.n	8008b48 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	681a      	ldr	r2, [r3, #0]
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	609a      	str	r2, [r3, #8]
 8008af8:	e026      	b.n	8008b48 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	68d8      	ldr	r0, [r3, #12]
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b02:	461a      	mov	r2, r3
 8008b04:	68b9      	ldr	r1, [r7, #8]
 8008b06:	f009 fd27 	bl	8012558 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	68da      	ldr	r2, [r3, #12]
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b12:	425b      	negs	r3, r3
 8008b14:	441a      	add	r2, r3
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	68da      	ldr	r2, [r3, #12]
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	429a      	cmp	r2, r3
 8008b24:	d207      	bcs.n	8008b36 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	685a      	ldr	r2, [r3, #4]
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b2e:	425b      	negs	r3, r3
 8008b30:	441a      	add	r2, r3
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	2b02      	cmp	r3, #2
 8008b3a:	d105      	bne.n	8008b48 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008b3c:	693b      	ldr	r3, [r7, #16]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d002      	beq.n	8008b48 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008b42:	693b      	ldr	r3, [r7, #16]
 8008b44:	3b01      	subs	r3, #1
 8008b46:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008b48:	693b      	ldr	r3, [r7, #16]
 8008b4a:	1c5a      	adds	r2, r3, #1
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008b50:	697b      	ldr	r3, [r7, #20]
}
 8008b52:	4618      	mov	r0, r3
 8008b54:	3718      	adds	r7, #24
 8008b56:	46bd      	mov	sp, r7
 8008b58:	bd80      	pop	{r7, pc}

08008b5a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008b5a:	b580      	push	{r7, lr}
 8008b5c:	b082      	sub	sp, #8
 8008b5e:	af00      	add	r7, sp, #0
 8008b60:	6078      	str	r0, [r7, #4]
 8008b62:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d018      	beq.n	8008b9e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	68da      	ldr	r2, [r3, #12]
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b74:	441a      	add	r2, r3
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	68da      	ldr	r2, [r3, #12]
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	685b      	ldr	r3, [r3, #4]
 8008b82:	429a      	cmp	r2, r3
 8008b84:	d303      	bcc.n	8008b8e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681a      	ldr	r2, [r3, #0]
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	68d9      	ldr	r1, [r3, #12]
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b96:	461a      	mov	r2, r3
 8008b98:	6838      	ldr	r0, [r7, #0]
 8008b9a:	f009 fcdd 	bl	8012558 <memcpy>
	}
}
 8008b9e:	bf00      	nop
 8008ba0:	3708      	adds	r7, #8
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	bd80      	pop	{r7, pc}

08008ba6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008ba6:	b580      	push	{r7, lr}
 8008ba8:	b084      	sub	sp, #16
 8008baa:	af00      	add	r7, sp, #0
 8008bac:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008bae:	f001 fb75 	bl	800a29c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008bb8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008bba:	e011      	b.n	8008be0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d012      	beq.n	8008bea <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	3324      	adds	r3, #36	; 0x24
 8008bc8:	4618      	mov	r0, r3
 8008bca:	f000 fd37 	bl	800963c <xTaskRemoveFromEventList>
 8008bce:	4603      	mov	r3, r0
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d001      	beq.n	8008bd8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008bd4:	f000 fe1a 	bl	800980c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008bd8:	7bfb      	ldrb	r3, [r7, #15]
 8008bda:	3b01      	subs	r3, #1
 8008bdc:	b2db      	uxtb	r3, r3
 8008bde:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008be0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	dce9      	bgt.n	8008bbc <prvUnlockQueue+0x16>
 8008be8:	e000      	b.n	8008bec <prvUnlockQueue+0x46>
					break;
 8008bea:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	22ff      	movs	r2, #255	; 0xff
 8008bf0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008bf4:	f001 fb80 	bl	800a2f8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008bf8:	f001 fb50 	bl	800a29c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008c02:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008c04:	e011      	b.n	8008c2a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	691b      	ldr	r3, [r3, #16]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d012      	beq.n	8008c34 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	3310      	adds	r3, #16
 8008c12:	4618      	mov	r0, r3
 8008c14:	f000 fd12 	bl	800963c <xTaskRemoveFromEventList>
 8008c18:	4603      	mov	r3, r0
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d001      	beq.n	8008c22 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008c1e:	f000 fdf5 	bl	800980c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008c22:	7bbb      	ldrb	r3, [r7, #14]
 8008c24:	3b01      	subs	r3, #1
 8008c26:	b2db      	uxtb	r3, r3
 8008c28:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008c2a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	dce9      	bgt.n	8008c06 <prvUnlockQueue+0x60>
 8008c32:	e000      	b.n	8008c36 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008c34:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	22ff      	movs	r2, #255	; 0xff
 8008c3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008c3e:	f001 fb5b 	bl	800a2f8 <vPortExitCritical>
}
 8008c42:	bf00      	nop
 8008c44:	3710      	adds	r7, #16
 8008c46:	46bd      	mov	sp, r7
 8008c48:	bd80      	pop	{r7, pc}

08008c4a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008c4a:	b580      	push	{r7, lr}
 8008c4c:	b084      	sub	sp, #16
 8008c4e:	af00      	add	r7, sp, #0
 8008c50:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008c52:	f001 fb23 	bl	800a29c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d102      	bne.n	8008c64 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008c5e:	2301      	movs	r3, #1
 8008c60:	60fb      	str	r3, [r7, #12]
 8008c62:	e001      	b.n	8008c68 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008c64:	2300      	movs	r3, #0
 8008c66:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008c68:	f001 fb46 	bl	800a2f8 <vPortExitCritical>

	return xReturn;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
}
 8008c6e:	4618      	mov	r0, r3
 8008c70:	3710      	adds	r7, #16
 8008c72:	46bd      	mov	sp, r7
 8008c74:	bd80      	pop	{r7, pc}

08008c76 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008c76:	b580      	push	{r7, lr}
 8008c78:	b084      	sub	sp, #16
 8008c7a:	af00      	add	r7, sp, #0
 8008c7c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008c7e:	f001 fb0d 	bl	800a29c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c8a:	429a      	cmp	r2, r3
 8008c8c:	d102      	bne.n	8008c94 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008c8e:	2301      	movs	r3, #1
 8008c90:	60fb      	str	r3, [r7, #12]
 8008c92:	e001      	b.n	8008c98 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008c94:	2300      	movs	r3, #0
 8008c96:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008c98:	f001 fb2e 	bl	800a2f8 <vPortExitCritical>

	return xReturn;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
}
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	3710      	adds	r7, #16
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	bd80      	pop	{r7, pc}

08008ca6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008ca6:	b580      	push	{r7, lr}
 8008ca8:	b08e      	sub	sp, #56	; 0x38
 8008caa:	af04      	add	r7, sp, #16
 8008cac:	60f8      	str	r0, [r7, #12]
 8008cae:	60b9      	str	r1, [r7, #8]
 8008cb0:	607a      	str	r2, [r7, #4]
 8008cb2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008cb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d109      	bne.n	8008cce <xTaskCreateStatic+0x28>
	__asm volatile
 8008cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cbe:	f383 8811 	msr	BASEPRI, r3
 8008cc2:	f3bf 8f6f 	isb	sy
 8008cc6:	f3bf 8f4f 	dsb	sy
 8008cca:	623b      	str	r3, [r7, #32]
 8008ccc:	e7fe      	b.n	8008ccc <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8008cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d109      	bne.n	8008ce8 <xTaskCreateStatic+0x42>
 8008cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cd8:	f383 8811 	msr	BASEPRI, r3
 8008cdc:	f3bf 8f6f 	isb	sy
 8008ce0:	f3bf 8f4f 	dsb	sy
 8008ce4:	61fb      	str	r3, [r7, #28]
 8008ce6:	e7fe      	b.n	8008ce6 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008ce8:	2354      	movs	r3, #84	; 0x54
 8008cea:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008cec:	693b      	ldr	r3, [r7, #16]
 8008cee:	2b54      	cmp	r3, #84	; 0x54
 8008cf0:	d009      	beq.n	8008d06 <xTaskCreateStatic+0x60>
 8008cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cf6:	f383 8811 	msr	BASEPRI, r3
 8008cfa:	f3bf 8f6f 	isb	sy
 8008cfe:	f3bf 8f4f 	dsb	sy
 8008d02:	61bb      	str	r3, [r7, #24]
 8008d04:	e7fe      	b.n	8008d04 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d01e      	beq.n	8008d4a <xTaskCreateStatic+0xa4>
 8008d0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d01b      	beq.n	8008d4a <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d14:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008d1a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d1e:	2202      	movs	r2, #2
 8008d20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008d24:	2300      	movs	r3, #0
 8008d26:	9303      	str	r3, [sp, #12]
 8008d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d2a:	9302      	str	r3, [sp, #8]
 8008d2c:	f107 0314 	add.w	r3, r7, #20
 8008d30:	9301      	str	r3, [sp, #4]
 8008d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d34:	9300      	str	r3, [sp, #0]
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	687a      	ldr	r2, [r7, #4]
 8008d3a:	68b9      	ldr	r1, [r7, #8]
 8008d3c:	68f8      	ldr	r0, [r7, #12]
 8008d3e:	f000 f850 	bl	8008de2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008d42:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008d44:	f000 f8d8 	bl	8008ef8 <prvAddNewTaskToReadyList>
 8008d48:	e001      	b.n	8008d4e <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008d4e:	697b      	ldr	r3, [r7, #20]
	}
 8008d50:	4618      	mov	r0, r3
 8008d52:	3728      	adds	r7, #40	; 0x28
 8008d54:	46bd      	mov	sp, r7
 8008d56:	bd80      	pop	{r7, pc}

08008d58 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b08c      	sub	sp, #48	; 0x30
 8008d5c:	af04      	add	r7, sp, #16
 8008d5e:	60f8      	str	r0, [r7, #12]
 8008d60:	60b9      	str	r1, [r7, #8]
 8008d62:	603b      	str	r3, [r7, #0]
 8008d64:	4613      	mov	r3, r2
 8008d66:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d68:	88fb      	ldrh	r3, [r7, #6]
 8008d6a:	009b      	lsls	r3, r3, #2
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	f001 fbaf 	bl	800a4d0 <pvPortMalloc>
 8008d72:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008d74:	697b      	ldr	r3, [r7, #20]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d00e      	beq.n	8008d98 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8008d7a:	2054      	movs	r0, #84	; 0x54
 8008d7c:	f001 fba8 	bl	800a4d0 <pvPortMalloc>
 8008d80:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008d82:	69fb      	ldr	r3, [r7, #28]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d003      	beq.n	8008d90 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008d88:	69fb      	ldr	r3, [r7, #28]
 8008d8a:	697a      	ldr	r2, [r7, #20]
 8008d8c:	631a      	str	r2, [r3, #48]	; 0x30
 8008d8e:	e005      	b.n	8008d9c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008d90:	6978      	ldr	r0, [r7, #20]
 8008d92:	f001 fc63 	bl	800a65c <vPortFree>
 8008d96:	e001      	b.n	8008d9c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008d98:	2300      	movs	r3, #0
 8008d9a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008d9c:	69fb      	ldr	r3, [r7, #28]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d017      	beq.n	8008dd2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008da2:	69fb      	ldr	r3, [r7, #28]
 8008da4:	2200      	movs	r2, #0
 8008da6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008daa:	88fa      	ldrh	r2, [r7, #6]
 8008dac:	2300      	movs	r3, #0
 8008dae:	9303      	str	r3, [sp, #12]
 8008db0:	69fb      	ldr	r3, [r7, #28]
 8008db2:	9302      	str	r3, [sp, #8]
 8008db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008db6:	9301      	str	r3, [sp, #4]
 8008db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dba:	9300      	str	r3, [sp, #0]
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	68b9      	ldr	r1, [r7, #8]
 8008dc0:	68f8      	ldr	r0, [r7, #12]
 8008dc2:	f000 f80e 	bl	8008de2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008dc6:	69f8      	ldr	r0, [r7, #28]
 8008dc8:	f000 f896 	bl	8008ef8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008dcc:	2301      	movs	r3, #1
 8008dce:	61bb      	str	r3, [r7, #24]
 8008dd0:	e002      	b.n	8008dd8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8008dd6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008dd8:	69bb      	ldr	r3, [r7, #24]
	}
 8008dda:	4618      	mov	r0, r3
 8008ddc:	3720      	adds	r7, #32
 8008dde:	46bd      	mov	sp, r7
 8008de0:	bd80      	pop	{r7, pc}

08008de2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008de2:	b580      	push	{r7, lr}
 8008de4:	b088      	sub	sp, #32
 8008de6:	af00      	add	r7, sp, #0
 8008de8:	60f8      	str	r0, [r7, #12]
 8008dea:	60b9      	str	r1, [r7, #8]
 8008dec:	607a      	str	r2, [r7, #4]
 8008dee:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008df2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	009b      	lsls	r3, r3, #2
 8008df8:	461a      	mov	r2, r3
 8008dfa:	21a5      	movs	r1, #165	; 0xa5
 8008dfc:	f009 fbb7 	bl	801256e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8008e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008e0a:	3b01      	subs	r3, #1
 8008e0c:	009b      	lsls	r3, r3, #2
 8008e0e:	4413      	add	r3, r2
 8008e10:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8008e12:	69bb      	ldr	r3, [r7, #24]
 8008e14:	f023 0307 	bic.w	r3, r3, #7
 8008e18:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008e1a:	69bb      	ldr	r3, [r7, #24]
 8008e1c:	f003 0307 	and.w	r3, r3, #7
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d009      	beq.n	8008e38 <prvInitialiseNewTask+0x56>
 8008e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e28:	f383 8811 	msr	BASEPRI, r3
 8008e2c:	f3bf 8f6f 	isb	sy
 8008e30:	f3bf 8f4f 	dsb	sy
 8008e34:	617b      	str	r3, [r7, #20]
 8008e36:	e7fe      	b.n	8008e36 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008e38:	2300      	movs	r3, #0
 8008e3a:	61fb      	str	r3, [r7, #28]
 8008e3c:	e012      	b.n	8008e64 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008e3e:	68ba      	ldr	r2, [r7, #8]
 8008e40:	69fb      	ldr	r3, [r7, #28]
 8008e42:	4413      	add	r3, r2
 8008e44:	7819      	ldrb	r1, [r3, #0]
 8008e46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e48:	69fb      	ldr	r3, [r7, #28]
 8008e4a:	4413      	add	r3, r2
 8008e4c:	3334      	adds	r3, #52	; 0x34
 8008e4e:	460a      	mov	r2, r1
 8008e50:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8008e52:	68ba      	ldr	r2, [r7, #8]
 8008e54:	69fb      	ldr	r3, [r7, #28]
 8008e56:	4413      	add	r3, r2
 8008e58:	781b      	ldrb	r3, [r3, #0]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d006      	beq.n	8008e6c <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008e5e:	69fb      	ldr	r3, [r7, #28]
 8008e60:	3301      	adds	r3, #1
 8008e62:	61fb      	str	r3, [r7, #28]
 8008e64:	69fb      	ldr	r3, [r7, #28]
 8008e66:	2b0f      	cmp	r3, #15
 8008e68:	d9e9      	bls.n	8008e3e <prvInitialiseNewTask+0x5c>
 8008e6a:	e000      	b.n	8008e6e <prvInitialiseNewTask+0x8c>
		{
			break;
 8008e6c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e70:	2200      	movs	r2, #0
 8008e72:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e78:	2b06      	cmp	r3, #6
 8008e7a:	d901      	bls.n	8008e80 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008e7c:	2306      	movs	r3, #6
 8008e7e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e84:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e8a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e8e:	2200      	movs	r2, #0
 8008e90:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e94:	3304      	adds	r3, #4
 8008e96:	4618      	mov	r0, r3
 8008e98:	f7fe fee3 	bl	8007c62 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e9e:	3318      	adds	r3, #24
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	f7fe fede 	bl	8007c62 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ea8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008eaa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eae:	f1c3 0207 	rsb	r2, r3, #7
 8008eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eb4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008eba:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	}
	#endif

	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		pxNewTCB->ucDelayAborted = pdFALSE;
 8008eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ecc:	2200      	movs	r2, #0
 8008ece:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008ed2:	683a      	ldr	r2, [r7, #0]
 8008ed4:	68f9      	ldr	r1, [r7, #12]
 8008ed6:	69b8      	ldr	r0, [r7, #24]
 8008ed8:	f001 f8bc 	bl	800a054 <pxPortInitialiseStack>
 8008edc:	4602      	mov	r2, r0
 8008ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ee0:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8008ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d002      	beq.n	8008eee <prvInitialiseNewTask+0x10c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008eec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008eee:	bf00      	nop
 8008ef0:	3720      	adds	r7, #32
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	bd80      	pop	{r7, pc}
	...

08008ef8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b082      	sub	sp, #8
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008f00:	f001 f9cc 	bl	800a29c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008f04:	4b2a      	ldr	r3, [pc, #168]	; (8008fb0 <prvAddNewTaskToReadyList+0xb8>)
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	3301      	adds	r3, #1
 8008f0a:	4a29      	ldr	r2, [pc, #164]	; (8008fb0 <prvAddNewTaskToReadyList+0xb8>)
 8008f0c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008f0e:	4b29      	ldr	r3, [pc, #164]	; (8008fb4 <prvAddNewTaskToReadyList+0xbc>)
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d109      	bne.n	8008f2a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008f16:	4a27      	ldr	r2, [pc, #156]	; (8008fb4 <prvAddNewTaskToReadyList+0xbc>)
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008f1c:	4b24      	ldr	r3, [pc, #144]	; (8008fb0 <prvAddNewTaskToReadyList+0xb8>)
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	2b01      	cmp	r3, #1
 8008f22:	d110      	bne.n	8008f46 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008f24:	f000 fc88 	bl	8009838 <prvInitialiseTaskLists>
 8008f28:	e00d      	b.n	8008f46 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008f2a:	4b23      	ldr	r3, [pc, #140]	; (8008fb8 <prvAddNewTaskToReadyList+0xc0>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d109      	bne.n	8008f46 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008f32:	4b20      	ldr	r3, [pc, #128]	; (8008fb4 <prvAddNewTaskToReadyList+0xbc>)
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f3c:	429a      	cmp	r2, r3
 8008f3e:	d802      	bhi.n	8008f46 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008f40:	4a1c      	ldr	r2, [pc, #112]	; (8008fb4 <prvAddNewTaskToReadyList+0xbc>)
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008f46:	4b1d      	ldr	r3, [pc, #116]	; (8008fbc <prvAddNewTaskToReadyList+0xc4>)
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	3301      	adds	r3, #1
 8008f4c:	4a1b      	ldr	r2, [pc, #108]	; (8008fbc <prvAddNewTaskToReadyList+0xc4>)
 8008f4e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f54:	2201      	movs	r2, #1
 8008f56:	409a      	lsls	r2, r3
 8008f58:	4b19      	ldr	r3, [pc, #100]	; (8008fc0 <prvAddNewTaskToReadyList+0xc8>)
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	4313      	orrs	r3, r2
 8008f5e:	4a18      	ldr	r2, [pc, #96]	; (8008fc0 <prvAddNewTaskToReadyList+0xc8>)
 8008f60:	6013      	str	r3, [r2, #0]
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f66:	4613      	mov	r3, r2
 8008f68:	009b      	lsls	r3, r3, #2
 8008f6a:	4413      	add	r3, r2
 8008f6c:	009b      	lsls	r3, r3, #2
 8008f6e:	4a15      	ldr	r2, [pc, #84]	; (8008fc4 <prvAddNewTaskToReadyList+0xcc>)
 8008f70:	441a      	add	r2, r3
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	3304      	adds	r3, #4
 8008f76:	4619      	mov	r1, r3
 8008f78:	4610      	mov	r0, r2
 8008f7a:	f7fe fe7f 	bl	8007c7c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008f7e:	f001 f9bb 	bl	800a2f8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008f82:	4b0d      	ldr	r3, [pc, #52]	; (8008fb8 <prvAddNewTaskToReadyList+0xc0>)
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d00e      	beq.n	8008fa8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008f8a:	4b0a      	ldr	r3, [pc, #40]	; (8008fb4 <prvAddNewTaskToReadyList+0xbc>)
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f94:	429a      	cmp	r2, r3
 8008f96:	d207      	bcs.n	8008fa8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008f98:	4b0b      	ldr	r3, [pc, #44]	; (8008fc8 <prvAddNewTaskToReadyList+0xd0>)
 8008f9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f9e:	601a      	str	r2, [r3, #0]
 8008fa0:	f3bf 8f4f 	dsb	sy
 8008fa4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008fa8:	bf00      	nop
 8008faa:	3708      	adds	r7, #8
 8008fac:	46bd      	mov	sp, r7
 8008fae:	bd80      	pop	{r7, pc}
 8008fb0:	20000340 	.word	0x20000340
 8008fb4:	20000240 	.word	0x20000240
 8008fb8:	2000034c 	.word	0x2000034c
 8008fbc:	2000035c 	.word	0x2000035c
 8008fc0:	20000348 	.word	0x20000348
 8008fc4:	20000244 	.word	0x20000244
 8008fc8:	e000ed04 	.word	0xe000ed04

08008fcc <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b08a      	sub	sp, #40	; 0x28
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
 8008fd4:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d109      	bne.n	8008ff4 <vTaskDelayUntil+0x28>
 8008fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fe4:	f383 8811 	msr	BASEPRI, r3
 8008fe8:	f3bf 8f6f 	isb	sy
 8008fec:	f3bf 8f4f 	dsb	sy
 8008ff0:	617b      	str	r3, [r7, #20]
 8008ff2:	e7fe      	b.n	8008ff2 <vTaskDelayUntil+0x26>
		configASSERT( ( xTimeIncrement > 0U ) );
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d109      	bne.n	800900e <vTaskDelayUntil+0x42>
 8008ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ffe:	f383 8811 	msr	BASEPRI, r3
 8009002:	f3bf 8f6f 	isb	sy
 8009006:	f3bf 8f4f 	dsb	sy
 800900a:	613b      	str	r3, [r7, #16]
 800900c:	e7fe      	b.n	800900c <vTaskDelayUntil+0x40>
		configASSERT( uxSchedulerSuspended == 0 );
 800900e:	4b29      	ldr	r3, [pc, #164]	; (80090b4 <vTaskDelayUntil+0xe8>)
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d009      	beq.n	800902a <vTaskDelayUntil+0x5e>
 8009016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800901a:	f383 8811 	msr	BASEPRI, r3
 800901e:	f3bf 8f6f 	isb	sy
 8009022:	f3bf 8f4f 	dsb	sy
 8009026:	60fb      	str	r3, [r7, #12]
 8009028:	e7fe      	b.n	8009028 <vTaskDelayUntil+0x5c>

		vTaskSuspendAll();
 800902a:	f000 f8db 	bl	80091e4 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800902e:	4b22      	ldr	r3, [pc, #136]	; (80090b8 <vTaskDelayUntil+0xec>)
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	683a      	ldr	r2, [r7, #0]
 800903a:	4413      	add	r3, r2
 800903c:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	6a3a      	ldr	r2, [r7, #32]
 8009044:	429a      	cmp	r2, r3
 8009046:	d20b      	bcs.n	8009060 <vTaskDelayUntil+0x94>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	69fa      	ldr	r2, [r7, #28]
 800904e:	429a      	cmp	r2, r3
 8009050:	d211      	bcs.n	8009076 <vTaskDelayUntil+0xaa>
 8009052:	69fa      	ldr	r2, [r7, #28]
 8009054:	6a3b      	ldr	r3, [r7, #32]
 8009056:	429a      	cmp	r2, r3
 8009058:	d90d      	bls.n	8009076 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 800905a:	2301      	movs	r3, #1
 800905c:	627b      	str	r3, [r7, #36]	; 0x24
 800905e:	e00a      	b.n	8009076 <vTaskDelayUntil+0xaa>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	69fa      	ldr	r2, [r7, #28]
 8009066:	429a      	cmp	r2, r3
 8009068:	d303      	bcc.n	8009072 <vTaskDelayUntil+0xa6>
 800906a:	69fa      	ldr	r2, [r7, #28]
 800906c:	6a3b      	ldr	r3, [r7, #32]
 800906e:	429a      	cmp	r2, r3
 8009070:	d901      	bls.n	8009076 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 8009072:	2301      	movs	r3, #1
 8009074:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	69fa      	ldr	r2, [r7, #28]
 800907a:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800907c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800907e:	2b00      	cmp	r3, #0
 8009080:	d006      	beq.n	8009090 <vTaskDelayUntil+0xc4>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8009082:	69fa      	ldr	r2, [r7, #28]
 8009084:	6a3b      	ldr	r3, [r7, #32]
 8009086:	1ad3      	subs	r3, r2, r3
 8009088:	2100      	movs	r1, #0
 800908a:	4618      	mov	r0, r3
 800908c:	f000 ff78 	bl	8009f80 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8009090:	f000 f8b6 	bl	8009200 <xTaskResumeAll>
 8009094:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009096:	69bb      	ldr	r3, [r7, #24]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d107      	bne.n	80090ac <vTaskDelayUntil+0xe0>
		{
			portYIELD_WITHIN_API();
 800909c:	4b07      	ldr	r3, [pc, #28]	; (80090bc <vTaskDelayUntil+0xf0>)
 800909e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090a2:	601a      	str	r2, [r3, #0]
 80090a4:	f3bf 8f4f 	dsb	sy
 80090a8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80090ac:	bf00      	nop
 80090ae:	3728      	adds	r7, #40	; 0x28
 80090b0:	46bd      	mov	sp, r7
 80090b2:	bd80      	pop	{r7, pc}
 80090b4:	20000368 	.word	0x20000368
 80090b8:	20000344 	.word	0x20000344
 80090bc:	e000ed04 	.word	0xe000ed04

080090c0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b084      	sub	sp, #16
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80090c8:	2300      	movs	r3, #0
 80090ca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d016      	beq.n	8009100 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80090d2:	4b13      	ldr	r3, [pc, #76]	; (8009120 <vTaskDelay+0x60>)
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d009      	beq.n	80090ee <vTaskDelay+0x2e>
 80090da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090de:	f383 8811 	msr	BASEPRI, r3
 80090e2:	f3bf 8f6f 	isb	sy
 80090e6:	f3bf 8f4f 	dsb	sy
 80090ea:	60bb      	str	r3, [r7, #8]
 80090ec:	e7fe      	b.n	80090ec <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80090ee:	f000 f879 	bl	80091e4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80090f2:	2100      	movs	r1, #0
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	f000 ff43 	bl	8009f80 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80090fa:	f000 f881 	bl	8009200 <xTaskResumeAll>
 80090fe:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d107      	bne.n	8009116 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8009106:	4b07      	ldr	r3, [pc, #28]	; (8009124 <vTaskDelay+0x64>)
 8009108:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800910c:	601a      	str	r2, [r3, #0]
 800910e:	f3bf 8f4f 	dsb	sy
 8009112:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009116:	bf00      	nop
 8009118:	3710      	adds	r7, #16
 800911a:	46bd      	mov	sp, r7
 800911c:	bd80      	pop	{r7, pc}
 800911e:	bf00      	nop
 8009120:	20000368 	.word	0x20000368
 8009124:	e000ed04 	.word	0xe000ed04

08009128 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b08a      	sub	sp, #40	; 0x28
 800912c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800912e:	2300      	movs	r3, #0
 8009130:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009132:	2300      	movs	r3, #0
 8009134:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009136:	463a      	mov	r2, r7
 8009138:	1d39      	adds	r1, r7, #4
 800913a:	f107 0308 	add.w	r3, r7, #8
 800913e:	4618      	mov	r0, r3
 8009140:	f007 f818 	bl	8010174 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009144:	6839      	ldr	r1, [r7, #0]
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	68ba      	ldr	r2, [r7, #8]
 800914a:	9202      	str	r2, [sp, #8]
 800914c:	9301      	str	r3, [sp, #4]
 800914e:	2300      	movs	r3, #0
 8009150:	9300      	str	r3, [sp, #0]
 8009152:	2300      	movs	r3, #0
 8009154:	460a      	mov	r2, r1
 8009156:	491d      	ldr	r1, [pc, #116]	; (80091cc <vTaskStartScheduler+0xa4>)
 8009158:	481d      	ldr	r0, [pc, #116]	; (80091d0 <vTaskStartScheduler+0xa8>)
 800915a:	f7ff fda4 	bl	8008ca6 <xTaskCreateStatic>
 800915e:	4602      	mov	r2, r0
 8009160:	4b1c      	ldr	r3, [pc, #112]	; (80091d4 <vTaskStartScheduler+0xac>)
 8009162:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009164:	4b1b      	ldr	r3, [pc, #108]	; (80091d4 <vTaskStartScheduler+0xac>)
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d002      	beq.n	8009172 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800916c:	2301      	movs	r3, #1
 800916e:	617b      	str	r3, [r7, #20]
 8009170:	e001      	b.n	8009176 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009172:	2300      	movs	r3, #0
 8009174:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009176:	697b      	ldr	r3, [r7, #20]
 8009178:	2b01      	cmp	r3, #1
 800917a:	d115      	bne.n	80091a8 <vTaskStartScheduler+0x80>
 800917c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009180:	f383 8811 	msr	BASEPRI, r3
 8009184:	f3bf 8f6f 	isb	sy
 8009188:	f3bf 8f4f 	dsb	sy
 800918c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800918e:	4b12      	ldr	r3, [pc, #72]	; (80091d8 <vTaskStartScheduler+0xb0>)
 8009190:	f04f 32ff 	mov.w	r2, #4294967295
 8009194:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009196:	4b11      	ldr	r3, [pc, #68]	; (80091dc <vTaskStartScheduler+0xb4>)
 8009198:	2201      	movs	r2, #1
 800919a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800919c:	4b10      	ldr	r3, [pc, #64]	; (80091e0 <vTaskStartScheduler+0xb8>)
 800919e:	2200      	movs	r2, #0
 80091a0:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80091a2:	f000 ffdd 	bl	800a160 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80091a6:	e00d      	b.n	80091c4 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80091a8:	697b      	ldr	r3, [r7, #20]
 80091aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091ae:	d109      	bne.n	80091c4 <vTaskStartScheduler+0x9c>
 80091b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091b4:	f383 8811 	msr	BASEPRI, r3
 80091b8:	f3bf 8f6f 	isb	sy
 80091bc:	f3bf 8f4f 	dsb	sy
 80091c0:	60fb      	str	r3, [r7, #12]
 80091c2:	e7fe      	b.n	80091c2 <vTaskStartScheduler+0x9a>
}
 80091c4:	bf00      	nop
 80091c6:	3718      	adds	r7, #24
 80091c8:	46bd      	mov	sp, r7
 80091ca:	bd80      	pop	{r7, pc}
 80091cc:	08015cd8 	.word	0x08015cd8
 80091d0:	08009825 	.word	0x08009825
 80091d4:	20000364 	.word	0x20000364
 80091d8:	20000360 	.word	0x20000360
 80091dc:	2000034c 	.word	0x2000034c
 80091e0:	20000344 	.word	0x20000344

080091e4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80091e4:	b480      	push	{r7}
 80091e6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80091e8:	4b04      	ldr	r3, [pc, #16]	; (80091fc <vTaskSuspendAll+0x18>)
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	3301      	adds	r3, #1
 80091ee:	4a03      	ldr	r2, [pc, #12]	; (80091fc <vTaskSuspendAll+0x18>)
 80091f0:	6013      	str	r3, [r2, #0]
}
 80091f2:	bf00      	nop
 80091f4:	46bd      	mov	sp, r7
 80091f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fa:	4770      	bx	lr
 80091fc:	20000368 	.word	0x20000368

08009200 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b084      	sub	sp, #16
 8009204:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009206:	2300      	movs	r3, #0
 8009208:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800920a:	2300      	movs	r3, #0
 800920c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800920e:	4b41      	ldr	r3, [pc, #260]	; (8009314 <xTaskResumeAll+0x114>)
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d109      	bne.n	800922a <xTaskResumeAll+0x2a>
 8009216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800921a:	f383 8811 	msr	BASEPRI, r3
 800921e:	f3bf 8f6f 	isb	sy
 8009222:	f3bf 8f4f 	dsb	sy
 8009226:	603b      	str	r3, [r7, #0]
 8009228:	e7fe      	b.n	8009228 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800922a:	f001 f837 	bl	800a29c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800922e:	4b39      	ldr	r3, [pc, #228]	; (8009314 <xTaskResumeAll+0x114>)
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	3b01      	subs	r3, #1
 8009234:	4a37      	ldr	r2, [pc, #220]	; (8009314 <xTaskResumeAll+0x114>)
 8009236:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009238:	4b36      	ldr	r3, [pc, #216]	; (8009314 <xTaskResumeAll+0x114>)
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d161      	bne.n	8009304 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009240:	4b35      	ldr	r3, [pc, #212]	; (8009318 <xTaskResumeAll+0x118>)
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d05d      	beq.n	8009304 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009248:	e02e      	b.n	80092a8 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800924a:	4b34      	ldr	r3, [pc, #208]	; (800931c <xTaskResumeAll+0x11c>)
 800924c:	68db      	ldr	r3, [r3, #12]
 800924e:	68db      	ldr	r3, [r3, #12]
 8009250:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	3318      	adds	r3, #24
 8009256:	4618      	mov	r0, r3
 8009258:	f7fe fd6d 	bl	8007d36 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	3304      	adds	r3, #4
 8009260:	4618      	mov	r0, r3
 8009262:	f7fe fd68 	bl	8007d36 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800926a:	2201      	movs	r2, #1
 800926c:	409a      	lsls	r2, r3
 800926e:	4b2c      	ldr	r3, [pc, #176]	; (8009320 <xTaskResumeAll+0x120>)
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	4313      	orrs	r3, r2
 8009274:	4a2a      	ldr	r2, [pc, #168]	; (8009320 <xTaskResumeAll+0x120>)
 8009276:	6013      	str	r3, [r2, #0]
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800927c:	4613      	mov	r3, r2
 800927e:	009b      	lsls	r3, r3, #2
 8009280:	4413      	add	r3, r2
 8009282:	009b      	lsls	r3, r3, #2
 8009284:	4a27      	ldr	r2, [pc, #156]	; (8009324 <xTaskResumeAll+0x124>)
 8009286:	441a      	add	r2, r3
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	3304      	adds	r3, #4
 800928c:	4619      	mov	r1, r3
 800928e:	4610      	mov	r0, r2
 8009290:	f7fe fcf4 	bl	8007c7c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009298:	4b23      	ldr	r3, [pc, #140]	; (8009328 <xTaskResumeAll+0x128>)
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800929e:	429a      	cmp	r2, r3
 80092a0:	d302      	bcc.n	80092a8 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80092a2:	4b22      	ldr	r3, [pc, #136]	; (800932c <xTaskResumeAll+0x12c>)
 80092a4:	2201      	movs	r2, #1
 80092a6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80092a8:	4b1c      	ldr	r3, [pc, #112]	; (800931c <xTaskResumeAll+0x11c>)
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d1cc      	bne.n	800924a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d001      	beq.n	80092ba <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80092b6:	f000 fb59 	bl	800996c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80092ba:	4b1d      	ldr	r3, [pc, #116]	; (8009330 <xTaskResumeAll+0x130>)
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d010      	beq.n	80092e8 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80092c6:	f000 f859 	bl	800937c <xTaskIncrementTick>
 80092ca:	4603      	mov	r3, r0
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d002      	beq.n	80092d6 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80092d0:	4b16      	ldr	r3, [pc, #88]	; (800932c <xTaskResumeAll+0x12c>)
 80092d2:	2201      	movs	r2, #1
 80092d4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	3b01      	subs	r3, #1
 80092da:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d1f1      	bne.n	80092c6 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80092e2:	4b13      	ldr	r3, [pc, #76]	; (8009330 <xTaskResumeAll+0x130>)
 80092e4:	2200      	movs	r2, #0
 80092e6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80092e8:	4b10      	ldr	r3, [pc, #64]	; (800932c <xTaskResumeAll+0x12c>)
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d009      	beq.n	8009304 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80092f0:	2301      	movs	r3, #1
 80092f2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80092f4:	4b0f      	ldr	r3, [pc, #60]	; (8009334 <xTaskResumeAll+0x134>)
 80092f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092fa:	601a      	str	r2, [r3, #0]
 80092fc:	f3bf 8f4f 	dsb	sy
 8009300:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009304:	f000 fff8 	bl	800a2f8 <vPortExitCritical>

	return xAlreadyYielded;
 8009308:	68bb      	ldr	r3, [r7, #8]
}
 800930a:	4618      	mov	r0, r3
 800930c:	3710      	adds	r7, #16
 800930e:	46bd      	mov	sp, r7
 8009310:	bd80      	pop	{r7, pc}
 8009312:	bf00      	nop
 8009314:	20000368 	.word	0x20000368
 8009318:	20000340 	.word	0x20000340
 800931c:	20000300 	.word	0x20000300
 8009320:	20000348 	.word	0x20000348
 8009324:	20000244 	.word	0x20000244
 8009328:	20000240 	.word	0x20000240
 800932c:	20000354 	.word	0x20000354
 8009330:	20000350 	.word	0x20000350
 8009334:	e000ed04 	.word	0xe000ed04

08009338 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009338:	b480      	push	{r7}
 800933a:	b083      	sub	sp, #12
 800933c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800933e:	4b05      	ldr	r3, [pc, #20]	; (8009354 <xTaskGetTickCount+0x1c>)
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009344:	687b      	ldr	r3, [r7, #4]
}
 8009346:	4618      	mov	r0, r3
 8009348:	370c      	adds	r7, #12
 800934a:	46bd      	mov	sp, r7
 800934c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009350:	4770      	bx	lr
 8009352:	bf00      	nop
 8009354:	20000344 	.word	0x20000344

08009358 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b082      	sub	sp, #8
 800935c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800935e:	f001 f879 	bl	800a454 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8009362:	2300      	movs	r3, #0
 8009364:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8009366:	4b04      	ldr	r3, [pc, #16]	; (8009378 <xTaskGetTickCountFromISR+0x20>)
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800936c:	683b      	ldr	r3, [r7, #0]
}
 800936e:	4618      	mov	r0, r3
 8009370:	3708      	adds	r7, #8
 8009372:	46bd      	mov	sp, r7
 8009374:	bd80      	pop	{r7, pc}
 8009376:	bf00      	nop
 8009378:	20000344 	.word	0x20000344

0800937c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b086      	sub	sp, #24
 8009380:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009382:	2300      	movs	r3, #0
 8009384:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009386:	4b50      	ldr	r3, [pc, #320]	; (80094c8 <xTaskIncrementTick+0x14c>)
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	2b00      	cmp	r3, #0
 800938c:	f040 808c 	bne.w	80094a8 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009390:	4b4e      	ldr	r3, [pc, #312]	; (80094cc <xTaskIncrementTick+0x150>)
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	3301      	adds	r3, #1
 8009396:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009398:	4a4c      	ldr	r2, [pc, #304]	; (80094cc <xTaskIncrementTick+0x150>)
 800939a:	693b      	ldr	r3, [r7, #16]
 800939c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800939e:	693b      	ldr	r3, [r7, #16]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d11f      	bne.n	80093e4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80093a4:	4b4a      	ldr	r3, [pc, #296]	; (80094d0 <xTaskIncrementTick+0x154>)
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d009      	beq.n	80093c2 <xTaskIncrementTick+0x46>
 80093ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093b2:	f383 8811 	msr	BASEPRI, r3
 80093b6:	f3bf 8f6f 	isb	sy
 80093ba:	f3bf 8f4f 	dsb	sy
 80093be:	603b      	str	r3, [r7, #0]
 80093c0:	e7fe      	b.n	80093c0 <xTaskIncrementTick+0x44>
 80093c2:	4b43      	ldr	r3, [pc, #268]	; (80094d0 <xTaskIncrementTick+0x154>)
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	60fb      	str	r3, [r7, #12]
 80093c8:	4b42      	ldr	r3, [pc, #264]	; (80094d4 <xTaskIncrementTick+0x158>)
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	4a40      	ldr	r2, [pc, #256]	; (80094d0 <xTaskIncrementTick+0x154>)
 80093ce:	6013      	str	r3, [r2, #0]
 80093d0:	4a40      	ldr	r2, [pc, #256]	; (80094d4 <xTaskIncrementTick+0x158>)
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	6013      	str	r3, [r2, #0]
 80093d6:	4b40      	ldr	r3, [pc, #256]	; (80094d8 <xTaskIncrementTick+0x15c>)
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	3301      	adds	r3, #1
 80093dc:	4a3e      	ldr	r2, [pc, #248]	; (80094d8 <xTaskIncrementTick+0x15c>)
 80093de:	6013      	str	r3, [r2, #0]
 80093e0:	f000 fac4 	bl	800996c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80093e4:	4b3d      	ldr	r3, [pc, #244]	; (80094dc <xTaskIncrementTick+0x160>)
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	693a      	ldr	r2, [r7, #16]
 80093ea:	429a      	cmp	r2, r3
 80093ec:	d34d      	bcc.n	800948a <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80093ee:	4b38      	ldr	r3, [pc, #224]	; (80094d0 <xTaskIncrementTick+0x154>)
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d101      	bne.n	80093fc <xTaskIncrementTick+0x80>
 80093f8:	2301      	movs	r3, #1
 80093fa:	e000      	b.n	80093fe <xTaskIncrementTick+0x82>
 80093fc:	2300      	movs	r3, #0
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d004      	beq.n	800940c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009402:	4b36      	ldr	r3, [pc, #216]	; (80094dc <xTaskIncrementTick+0x160>)
 8009404:	f04f 32ff 	mov.w	r2, #4294967295
 8009408:	601a      	str	r2, [r3, #0]
					break;
 800940a:	e03e      	b.n	800948a <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800940c:	4b30      	ldr	r3, [pc, #192]	; (80094d0 <xTaskIncrementTick+0x154>)
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	68db      	ldr	r3, [r3, #12]
 8009412:	68db      	ldr	r3, [r3, #12]
 8009414:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009416:	68bb      	ldr	r3, [r7, #8]
 8009418:	685b      	ldr	r3, [r3, #4]
 800941a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800941c:	693a      	ldr	r2, [r7, #16]
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	429a      	cmp	r2, r3
 8009422:	d203      	bcs.n	800942c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009424:	4a2d      	ldr	r2, [pc, #180]	; (80094dc <xTaskIncrementTick+0x160>)
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	6013      	str	r3, [r2, #0]
						break;
 800942a:	e02e      	b.n	800948a <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800942c:	68bb      	ldr	r3, [r7, #8]
 800942e:	3304      	adds	r3, #4
 8009430:	4618      	mov	r0, r3
 8009432:	f7fe fc80 	bl	8007d36 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009436:	68bb      	ldr	r3, [r7, #8]
 8009438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800943a:	2b00      	cmp	r3, #0
 800943c:	d004      	beq.n	8009448 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800943e:	68bb      	ldr	r3, [r7, #8]
 8009440:	3318      	adds	r3, #24
 8009442:	4618      	mov	r0, r3
 8009444:	f7fe fc77 	bl	8007d36 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009448:	68bb      	ldr	r3, [r7, #8]
 800944a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800944c:	2201      	movs	r2, #1
 800944e:	409a      	lsls	r2, r3
 8009450:	4b23      	ldr	r3, [pc, #140]	; (80094e0 <xTaskIncrementTick+0x164>)
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	4313      	orrs	r3, r2
 8009456:	4a22      	ldr	r2, [pc, #136]	; (80094e0 <xTaskIncrementTick+0x164>)
 8009458:	6013      	str	r3, [r2, #0]
 800945a:	68bb      	ldr	r3, [r7, #8]
 800945c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800945e:	4613      	mov	r3, r2
 8009460:	009b      	lsls	r3, r3, #2
 8009462:	4413      	add	r3, r2
 8009464:	009b      	lsls	r3, r3, #2
 8009466:	4a1f      	ldr	r2, [pc, #124]	; (80094e4 <xTaskIncrementTick+0x168>)
 8009468:	441a      	add	r2, r3
 800946a:	68bb      	ldr	r3, [r7, #8]
 800946c:	3304      	adds	r3, #4
 800946e:	4619      	mov	r1, r3
 8009470:	4610      	mov	r0, r2
 8009472:	f7fe fc03 	bl	8007c7c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009476:	68bb      	ldr	r3, [r7, #8]
 8009478:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800947a:	4b1b      	ldr	r3, [pc, #108]	; (80094e8 <xTaskIncrementTick+0x16c>)
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009480:	429a      	cmp	r2, r3
 8009482:	d3b4      	bcc.n	80093ee <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8009484:	2301      	movs	r3, #1
 8009486:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009488:	e7b1      	b.n	80093ee <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800948a:	4b17      	ldr	r3, [pc, #92]	; (80094e8 <xTaskIncrementTick+0x16c>)
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009490:	4914      	ldr	r1, [pc, #80]	; (80094e4 <xTaskIncrementTick+0x168>)
 8009492:	4613      	mov	r3, r2
 8009494:	009b      	lsls	r3, r3, #2
 8009496:	4413      	add	r3, r2
 8009498:	009b      	lsls	r3, r3, #2
 800949a:	440b      	add	r3, r1
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	2b01      	cmp	r3, #1
 80094a0:	d907      	bls.n	80094b2 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 80094a2:	2301      	movs	r3, #1
 80094a4:	617b      	str	r3, [r7, #20]
 80094a6:	e004      	b.n	80094b2 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80094a8:	4b10      	ldr	r3, [pc, #64]	; (80094ec <xTaskIncrementTick+0x170>)
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	3301      	adds	r3, #1
 80094ae:	4a0f      	ldr	r2, [pc, #60]	; (80094ec <xTaskIncrementTick+0x170>)
 80094b0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80094b2:	4b0f      	ldr	r3, [pc, #60]	; (80094f0 <xTaskIncrementTick+0x174>)
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d001      	beq.n	80094be <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 80094ba:	2301      	movs	r3, #1
 80094bc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80094be:	697b      	ldr	r3, [r7, #20]
}
 80094c0:	4618      	mov	r0, r3
 80094c2:	3718      	adds	r7, #24
 80094c4:	46bd      	mov	sp, r7
 80094c6:	bd80      	pop	{r7, pc}
 80094c8:	20000368 	.word	0x20000368
 80094cc:	20000344 	.word	0x20000344
 80094d0:	200002f8 	.word	0x200002f8
 80094d4:	200002fc 	.word	0x200002fc
 80094d8:	20000358 	.word	0x20000358
 80094dc:	20000360 	.word	0x20000360
 80094e0:	20000348 	.word	0x20000348
 80094e4:	20000244 	.word	0x20000244
 80094e8:	20000240 	.word	0x20000240
 80094ec:	20000350 	.word	0x20000350
 80094f0:	20000354 	.word	0x20000354

080094f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b088      	sub	sp, #32
 80094f8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80094fa:	4b39      	ldr	r3, [pc, #228]	; (80095e0 <vTaskSwitchContext+0xec>)
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d003      	beq.n	800950a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009502:	4b38      	ldr	r3, [pc, #224]	; (80095e4 <vTaskSwitchContext+0xf0>)
 8009504:	2201      	movs	r2, #1
 8009506:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009508:	e065      	b.n	80095d6 <vTaskSwitchContext+0xe2>
		xYieldPending = pdFALSE;
 800950a:	4b36      	ldr	r3, [pc, #216]	; (80095e4 <vTaskSwitchContext+0xf0>)
 800950c:	2200      	movs	r2, #0
 800950e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8009510:	4b35      	ldr	r3, [pc, #212]	; (80095e8 <vTaskSwitchContext+0xf4>)
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009516:	61fb      	str	r3, [r7, #28]
 8009518:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800951c:	61bb      	str	r3, [r7, #24]
 800951e:	69fb      	ldr	r3, [r7, #28]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	69ba      	ldr	r2, [r7, #24]
 8009524:	429a      	cmp	r2, r3
 8009526:	d111      	bne.n	800954c <vTaskSwitchContext+0x58>
 8009528:	69fb      	ldr	r3, [r7, #28]
 800952a:	3304      	adds	r3, #4
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	69ba      	ldr	r2, [r7, #24]
 8009530:	429a      	cmp	r2, r3
 8009532:	d10b      	bne.n	800954c <vTaskSwitchContext+0x58>
 8009534:	69fb      	ldr	r3, [r7, #28]
 8009536:	3308      	adds	r3, #8
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	69ba      	ldr	r2, [r7, #24]
 800953c:	429a      	cmp	r2, r3
 800953e:	d105      	bne.n	800954c <vTaskSwitchContext+0x58>
 8009540:	69fb      	ldr	r3, [r7, #28]
 8009542:	330c      	adds	r3, #12
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	69ba      	ldr	r2, [r7, #24]
 8009548:	429a      	cmp	r2, r3
 800954a:	d008      	beq.n	800955e <vTaskSwitchContext+0x6a>
 800954c:	4b26      	ldr	r3, [pc, #152]	; (80095e8 <vTaskSwitchContext+0xf4>)
 800954e:	681a      	ldr	r2, [r3, #0]
 8009550:	4b25      	ldr	r3, [pc, #148]	; (80095e8 <vTaskSwitchContext+0xf4>)
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	3334      	adds	r3, #52	; 0x34
 8009556:	4619      	mov	r1, r3
 8009558:	4610      	mov	r0, r2
 800955a:	f006 fdf9 	bl	8010150 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800955e:	4b23      	ldr	r3, [pc, #140]	; (80095ec <vTaskSwitchContext+0xf8>)
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	fab3 f383 	clz	r3, r3
 800956a:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800956c:	7afb      	ldrb	r3, [r7, #11]
 800956e:	f1c3 031f 	rsb	r3, r3, #31
 8009572:	617b      	str	r3, [r7, #20]
 8009574:	491e      	ldr	r1, [pc, #120]	; (80095f0 <vTaskSwitchContext+0xfc>)
 8009576:	697a      	ldr	r2, [r7, #20]
 8009578:	4613      	mov	r3, r2
 800957a:	009b      	lsls	r3, r3, #2
 800957c:	4413      	add	r3, r2
 800957e:	009b      	lsls	r3, r3, #2
 8009580:	440b      	add	r3, r1
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d109      	bne.n	800959c <vTaskSwitchContext+0xa8>
	__asm volatile
 8009588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800958c:	f383 8811 	msr	BASEPRI, r3
 8009590:	f3bf 8f6f 	isb	sy
 8009594:	f3bf 8f4f 	dsb	sy
 8009598:	607b      	str	r3, [r7, #4]
 800959a:	e7fe      	b.n	800959a <vTaskSwitchContext+0xa6>
 800959c:	697a      	ldr	r2, [r7, #20]
 800959e:	4613      	mov	r3, r2
 80095a0:	009b      	lsls	r3, r3, #2
 80095a2:	4413      	add	r3, r2
 80095a4:	009b      	lsls	r3, r3, #2
 80095a6:	4a12      	ldr	r2, [pc, #72]	; (80095f0 <vTaskSwitchContext+0xfc>)
 80095a8:	4413      	add	r3, r2
 80095aa:	613b      	str	r3, [r7, #16]
 80095ac:	693b      	ldr	r3, [r7, #16]
 80095ae:	685b      	ldr	r3, [r3, #4]
 80095b0:	685a      	ldr	r2, [r3, #4]
 80095b2:	693b      	ldr	r3, [r7, #16]
 80095b4:	605a      	str	r2, [r3, #4]
 80095b6:	693b      	ldr	r3, [r7, #16]
 80095b8:	685a      	ldr	r2, [r3, #4]
 80095ba:	693b      	ldr	r3, [r7, #16]
 80095bc:	3308      	adds	r3, #8
 80095be:	429a      	cmp	r2, r3
 80095c0:	d104      	bne.n	80095cc <vTaskSwitchContext+0xd8>
 80095c2:	693b      	ldr	r3, [r7, #16]
 80095c4:	685b      	ldr	r3, [r3, #4]
 80095c6:	685a      	ldr	r2, [r3, #4]
 80095c8:	693b      	ldr	r3, [r7, #16]
 80095ca:	605a      	str	r2, [r3, #4]
 80095cc:	693b      	ldr	r3, [r7, #16]
 80095ce:	685b      	ldr	r3, [r3, #4]
 80095d0:	68db      	ldr	r3, [r3, #12]
 80095d2:	4a05      	ldr	r2, [pc, #20]	; (80095e8 <vTaskSwitchContext+0xf4>)
 80095d4:	6013      	str	r3, [r2, #0]
}
 80095d6:	bf00      	nop
 80095d8:	3720      	adds	r7, #32
 80095da:	46bd      	mov	sp, r7
 80095dc:	bd80      	pop	{r7, pc}
 80095de:	bf00      	nop
 80095e0:	20000368 	.word	0x20000368
 80095e4:	20000354 	.word	0x20000354
 80095e8:	20000240 	.word	0x20000240
 80095ec:	20000348 	.word	0x20000348
 80095f0:	20000244 	.word	0x20000244

080095f4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b084      	sub	sp, #16
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
 80095fc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d109      	bne.n	8009618 <vTaskPlaceOnEventList+0x24>
 8009604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009608:	f383 8811 	msr	BASEPRI, r3
 800960c:	f3bf 8f6f 	isb	sy
 8009610:	f3bf 8f4f 	dsb	sy
 8009614:	60fb      	str	r3, [r7, #12]
 8009616:	e7fe      	b.n	8009616 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009618:	4b07      	ldr	r3, [pc, #28]	; (8009638 <vTaskPlaceOnEventList+0x44>)
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	3318      	adds	r3, #24
 800961e:	4619      	mov	r1, r3
 8009620:	6878      	ldr	r0, [r7, #4]
 8009622:	f7fe fb4f 	bl	8007cc4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009626:	2101      	movs	r1, #1
 8009628:	6838      	ldr	r0, [r7, #0]
 800962a:	f000 fca9 	bl	8009f80 <prvAddCurrentTaskToDelayedList>
}
 800962e:	bf00      	nop
 8009630:	3710      	adds	r7, #16
 8009632:	46bd      	mov	sp, r7
 8009634:	bd80      	pop	{r7, pc}
 8009636:	bf00      	nop
 8009638:	20000240 	.word	0x20000240

0800963c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b086      	sub	sp, #24
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	68db      	ldr	r3, [r3, #12]
 8009648:	68db      	ldr	r3, [r3, #12]
 800964a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800964c:	693b      	ldr	r3, [r7, #16]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d109      	bne.n	8009666 <xTaskRemoveFromEventList+0x2a>
 8009652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009656:	f383 8811 	msr	BASEPRI, r3
 800965a:	f3bf 8f6f 	isb	sy
 800965e:	f3bf 8f4f 	dsb	sy
 8009662:	60fb      	str	r3, [r7, #12]
 8009664:	e7fe      	b.n	8009664 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009666:	693b      	ldr	r3, [r7, #16]
 8009668:	3318      	adds	r3, #24
 800966a:	4618      	mov	r0, r3
 800966c:	f7fe fb63 	bl	8007d36 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009670:	4b1d      	ldr	r3, [pc, #116]	; (80096e8 <xTaskRemoveFromEventList+0xac>)
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d11c      	bne.n	80096b2 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009678:	693b      	ldr	r3, [r7, #16]
 800967a:	3304      	adds	r3, #4
 800967c:	4618      	mov	r0, r3
 800967e:	f7fe fb5a 	bl	8007d36 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009682:	693b      	ldr	r3, [r7, #16]
 8009684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009686:	2201      	movs	r2, #1
 8009688:	409a      	lsls	r2, r3
 800968a:	4b18      	ldr	r3, [pc, #96]	; (80096ec <xTaskRemoveFromEventList+0xb0>)
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	4313      	orrs	r3, r2
 8009690:	4a16      	ldr	r2, [pc, #88]	; (80096ec <xTaskRemoveFromEventList+0xb0>)
 8009692:	6013      	str	r3, [r2, #0]
 8009694:	693b      	ldr	r3, [r7, #16]
 8009696:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009698:	4613      	mov	r3, r2
 800969a:	009b      	lsls	r3, r3, #2
 800969c:	4413      	add	r3, r2
 800969e:	009b      	lsls	r3, r3, #2
 80096a0:	4a13      	ldr	r2, [pc, #76]	; (80096f0 <xTaskRemoveFromEventList+0xb4>)
 80096a2:	441a      	add	r2, r3
 80096a4:	693b      	ldr	r3, [r7, #16]
 80096a6:	3304      	adds	r3, #4
 80096a8:	4619      	mov	r1, r3
 80096aa:	4610      	mov	r0, r2
 80096ac:	f7fe fae6 	bl	8007c7c <vListInsertEnd>
 80096b0:	e005      	b.n	80096be <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80096b2:	693b      	ldr	r3, [r7, #16]
 80096b4:	3318      	adds	r3, #24
 80096b6:	4619      	mov	r1, r3
 80096b8:	480e      	ldr	r0, [pc, #56]	; (80096f4 <xTaskRemoveFromEventList+0xb8>)
 80096ba:	f7fe fadf 	bl	8007c7c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80096be:	693b      	ldr	r3, [r7, #16]
 80096c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096c2:	4b0d      	ldr	r3, [pc, #52]	; (80096f8 <xTaskRemoveFromEventList+0xbc>)
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096c8:	429a      	cmp	r2, r3
 80096ca:	d905      	bls.n	80096d8 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80096cc:	2301      	movs	r3, #1
 80096ce:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80096d0:	4b0a      	ldr	r3, [pc, #40]	; (80096fc <xTaskRemoveFromEventList+0xc0>)
 80096d2:	2201      	movs	r2, #1
 80096d4:	601a      	str	r2, [r3, #0]
 80096d6:	e001      	b.n	80096dc <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 80096d8:	2300      	movs	r3, #0
 80096da:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80096dc:	697b      	ldr	r3, [r7, #20]
}
 80096de:	4618      	mov	r0, r3
 80096e0:	3718      	adds	r7, #24
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bd80      	pop	{r7, pc}
 80096e6:	bf00      	nop
 80096e8:	20000368 	.word	0x20000368
 80096ec:	20000348 	.word	0x20000348
 80096f0:	20000244 	.word	0x20000244
 80096f4:	20000300 	.word	0x20000300
 80096f8:	20000240 	.word	0x20000240
 80096fc:	20000354 	.word	0x20000354

08009700 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009700:	b480      	push	{r7}
 8009702:	b083      	sub	sp, #12
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009708:	4b06      	ldr	r3, [pc, #24]	; (8009724 <vTaskInternalSetTimeOutState+0x24>)
 800970a:	681a      	ldr	r2, [r3, #0]
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009710:	4b05      	ldr	r3, [pc, #20]	; (8009728 <vTaskInternalSetTimeOutState+0x28>)
 8009712:	681a      	ldr	r2, [r3, #0]
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	605a      	str	r2, [r3, #4]
}
 8009718:	bf00      	nop
 800971a:	370c      	adds	r7, #12
 800971c:	46bd      	mov	sp, r7
 800971e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009722:	4770      	bx	lr
 8009724:	20000358 	.word	0x20000358
 8009728:	20000344 	.word	0x20000344

0800972c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b088      	sub	sp, #32
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
 8009734:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d109      	bne.n	8009750 <xTaskCheckForTimeOut+0x24>
 800973c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009740:	f383 8811 	msr	BASEPRI, r3
 8009744:	f3bf 8f6f 	isb	sy
 8009748:	f3bf 8f4f 	dsb	sy
 800974c:	613b      	str	r3, [r7, #16]
 800974e:	e7fe      	b.n	800974e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d109      	bne.n	800976a <xTaskCheckForTimeOut+0x3e>
 8009756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800975a:	f383 8811 	msr	BASEPRI, r3
 800975e:	f3bf 8f6f 	isb	sy
 8009762:	f3bf 8f4f 	dsb	sy
 8009766:	60fb      	str	r3, [r7, #12]
 8009768:	e7fe      	b.n	8009768 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800976a:	f000 fd97 	bl	800a29c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800976e:	4b24      	ldr	r3, [pc, #144]	; (8009800 <xTaskCheckForTimeOut+0xd4>)
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	685b      	ldr	r3, [r3, #4]
 8009778:	69ba      	ldr	r2, [r7, #24]
 800977a:	1ad3      	subs	r3, r2, r3
 800977c:	617b      	str	r3, [r7, #20]

		#if( INCLUDE_xTaskAbortDelay == 1 )
			if( pxCurrentTCB->ucDelayAborted != pdFALSE )
 800977e:	4b21      	ldr	r3, [pc, #132]	; (8009804 <xTaskCheckForTimeOut+0xd8>)
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009786:	2b00      	cmp	r3, #0
 8009788:	d007      	beq.n	800979a <xTaskCheckForTimeOut+0x6e>
			{
				/* The delay was aborted, which is not the same as a time out,
				but has the same result. */
				pxCurrentTCB->ucDelayAborted = pdFALSE;
 800978a:	4b1e      	ldr	r3, [pc, #120]	; (8009804 <xTaskCheckForTimeOut+0xd8>)
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	2200      	movs	r2, #0
 8009790:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
				xReturn = pdTRUE;
 8009794:	2301      	movs	r3, #1
 8009796:	61fb      	str	r3, [r7, #28]
 8009798:	e02b      	b.n	80097f2 <xTaskCheckForTimeOut+0xc6>
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800979a:	683b      	ldr	r3, [r7, #0]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097a2:	d102      	bne.n	80097aa <xTaskCheckForTimeOut+0x7e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80097a4:	2300      	movs	r3, #0
 80097a6:	61fb      	str	r3, [r7, #28]
 80097a8:	e023      	b.n	80097f2 <xTaskCheckForTimeOut+0xc6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681a      	ldr	r2, [r3, #0]
 80097ae:	4b16      	ldr	r3, [pc, #88]	; (8009808 <xTaskCheckForTimeOut+0xdc>)
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	429a      	cmp	r2, r3
 80097b4:	d007      	beq.n	80097c6 <xTaskCheckForTimeOut+0x9a>
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	685b      	ldr	r3, [r3, #4]
 80097ba:	69ba      	ldr	r2, [r7, #24]
 80097bc:	429a      	cmp	r2, r3
 80097be:	d302      	bcc.n	80097c6 <xTaskCheckForTimeOut+0x9a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80097c0:	2301      	movs	r3, #1
 80097c2:	61fb      	str	r3, [r7, #28]
 80097c4:	e015      	b.n	80097f2 <xTaskCheckForTimeOut+0xc6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	697a      	ldr	r2, [r7, #20]
 80097cc:	429a      	cmp	r2, r3
 80097ce:	d20b      	bcs.n	80097e8 <xTaskCheckForTimeOut+0xbc>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	681a      	ldr	r2, [r3, #0]
 80097d4:	697b      	ldr	r3, [r7, #20]
 80097d6:	1ad2      	subs	r2, r2, r3
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80097dc:	6878      	ldr	r0, [r7, #4]
 80097de:	f7ff ff8f 	bl	8009700 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80097e2:	2300      	movs	r3, #0
 80097e4:	61fb      	str	r3, [r7, #28]
 80097e6:	e004      	b.n	80097f2 <xTaskCheckForTimeOut+0xc6>
		}
		else
		{
			*pxTicksToWait = 0;
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	2200      	movs	r2, #0
 80097ec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80097ee:	2301      	movs	r3, #1
 80097f0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80097f2:	f000 fd81 	bl	800a2f8 <vPortExitCritical>

	return xReturn;
 80097f6:	69fb      	ldr	r3, [r7, #28]
}
 80097f8:	4618      	mov	r0, r3
 80097fa:	3720      	adds	r7, #32
 80097fc:	46bd      	mov	sp, r7
 80097fe:	bd80      	pop	{r7, pc}
 8009800:	20000344 	.word	0x20000344
 8009804:	20000240 	.word	0x20000240
 8009808:	20000358 	.word	0x20000358

0800980c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800980c:	b480      	push	{r7}
 800980e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009810:	4b03      	ldr	r3, [pc, #12]	; (8009820 <vTaskMissedYield+0x14>)
 8009812:	2201      	movs	r2, #1
 8009814:	601a      	str	r2, [r3, #0]
}
 8009816:	bf00      	nop
 8009818:	46bd      	mov	sp, r7
 800981a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981e:	4770      	bx	lr
 8009820:	20000354 	.word	0x20000354

08009824 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009824:	b580      	push	{r7, lr}
 8009826:	b082      	sub	sp, #8
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800982c:	f000 f844 	bl	80098b8 <prvCheckTasksWaitingTermination>
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8009830:	f007 f8ea 	bl	8010a08 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8009834:	e7fa      	b.n	800982c <prvIdleTask+0x8>
	...

08009838 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009838:	b580      	push	{r7, lr}
 800983a:	b082      	sub	sp, #8
 800983c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800983e:	2300      	movs	r3, #0
 8009840:	607b      	str	r3, [r7, #4]
 8009842:	e00c      	b.n	800985e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009844:	687a      	ldr	r2, [r7, #4]
 8009846:	4613      	mov	r3, r2
 8009848:	009b      	lsls	r3, r3, #2
 800984a:	4413      	add	r3, r2
 800984c:	009b      	lsls	r3, r3, #2
 800984e:	4a12      	ldr	r2, [pc, #72]	; (8009898 <prvInitialiseTaskLists+0x60>)
 8009850:	4413      	add	r3, r2
 8009852:	4618      	mov	r0, r3
 8009854:	f7fe f9e5 	bl	8007c22 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	3301      	adds	r3, #1
 800985c:	607b      	str	r3, [r7, #4]
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	2b06      	cmp	r3, #6
 8009862:	d9ef      	bls.n	8009844 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009864:	480d      	ldr	r0, [pc, #52]	; (800989c <prvInitialiseTaskLists+0x64>)
 8009866:	f7fe f9dc 	bl	8007c22 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800986a:	480d      	ldr	r0, [pc, #52]	; (80098a0 <prvInitialiseTaskLists+0x68>)
 800986c:	f7fe f9d9 	bl	8007c22 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009870:	480c      	ldr	r0, [pc, #48]	; (80098a4 <prvInitialiseTaskLists+0x6c>)
 8009872:	f7fe f9d6 	bl	8007c22 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009876:	480c      	ldr	r0, [pc, #48]	; (80098a8 <prvInitialiseTaskLists+0x70>)
 8009878:	f7fe f9d3 	bl	8007c22 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800987c:	480b      	ldr	r0, [pc, #44]	; (80098ac <prvInitialiseTaskLists+0x74>)
 800987e:	f7fe f9d0 	bl	8007c22 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009882:	4b0b      	ldr	r3, [pc, #44]	; (80098b0 <prvInitialiseTaskLists+0x78>)
 8009884:	4a05      	ldr	r2, [pc, #20]	; (800989c <prvInitialiseTaskLists+0x64>)
 8009886:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009888:	4b0a      	ldr	r3, [pc, #40]	; (80098b4 <prvInitialiseTaskLists+0x7c>)
 800988a:	4a05      	ldr	r2, [pc, #20]	; (80098a0 <prvInitialiseTaskLists+0x68>)
 800988c:	601a      	str	r2, [r3, #0]
}
 800988e:	bf00      	nop
 8009890:	3708      	adds	r7, #8
 8009892:	46bd      	mov	sp, r7
 8009894:	bd80      	pop	{r7, pc}
 8009896:	bf00      	nop
 8009898:	20000244 	.word	0x20000244
 800989c:	200002d0 	.word	0x200002d0
 80098a0:	200002e4 	.word	0x200002e4
 80098a4:	20000300 	.word	0x20000300
 80098a8:	20000314 	.word	0x20000314
 80098ac:	2000032c 	.word	0x2000032c
 80098b0:	200002f8 	.word	0x200002f8
 80098b4:	200002fc 	.word	0x200002fc

080098b8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b082      	sub	sp, #8
 80098bc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80098be:	e019      	b.n	80098f4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80098c0:	f000 fcec 	bl	800a29c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80098c4:	4b0f      	ldr	r3, [pc, #60]	; (8009904 <prvCheckTasksWaitingTermination+0x4c>)
 80098c6:	68db      	ldr	r3, [r3, #12]
 80098c8:	68db      	ldr	r3, [r3, #12]
 80098ca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	3304      	adds	r3, #4
 80098d0:	4618      	mov	r0, r3
 80098d2:	f7fe fa30 	bl	8007d36 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80098d6:	4b0c      	ldr	r3, [pc, #48]	; (8009908 <prvCheckTasksWaitingTermination+0x50>)
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	3b01      	subs	r3, #1
 80098dc:	4a0a      	ldr	r2, [pc, #40]	; (8009908 <prvCheckTasksWaitingTermination+0x50>)
 80098de:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80098e0:	4b0a      	ldr	r3, [pc, #40]	; (800990c <prvCheckTasksWaitingTermination+0x54>)
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	3b01      	subs	r3, #1
 80098e6:	4a09      	ldr	r2, [pc, #36]	; (800990c <prvCheckTasksWaitingTermination+0x54>)
 80098e8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80098ea:	f000 fd05 	bl	800a2f8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80098ee:	6878      	ldr	r0, [r7, #4]
 80098f0:	f000 f80e 	bl	8009910 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80098f4:	4b05      	ldr	r3, [pc, #20]	; (800990c <prvCheckTasksWaitingTermination+0x54>)
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d1e1      	bne.n	80098c0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80098fc:	bf00      	nop
 80098fe:	3708      	adds	r7, #8
 8009900:	46bd      	mov	sp, r7
 8009902:	bd80      	pop	{r7, pc}
 8009904:	20000314 	.word	0x20000314
 8009908:	20000340 	.word	0x20000340
 800990c:	20000328 	.word	0x20000328

08009910 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009910:	b580      	push	{r7, lr}
 8009912:	b084      	sub	sp, #16
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800991e:	2b00      	cmp	r3, #0
 8009920:	d108      	bne.n	8009934 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009926:	4618      	mov	r0, r3
 8009928:	f000 fe98 	bl	800a65c <vPortFree>
				vPortFree( pxTCB );
 800992c:	6878      	ldr	r0, [r7, #4]
 800992e:	f000 fe95 	bl	800a65c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009932:	e017      	b.n	8009964 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800993a:	2b01      	cmp	r3, #1
 800993c:	d103      	bne.n	8009946 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800993e:	6878      	ldr	r0, [r7, #4]
 8009940:	f000 fe8c 	bl	800a65c <vPortFree>
	}
 8009944:	e00e      	b.n	8009964 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800994c:	2b02      	cmp	r3, #2
 800994e:	d009      	beq.n	8009964 <prvDeleteTCB+0x54>
 8009950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009954:	f383 8811 	msr	BASEPRI, r3
 8009958:	f3bf 8f6f 	isb	sy
 800995c:	f3bf 8f4f 	dsb	sy
 8009960:	60fb      	str	r3, [r7, #12]
 8009962:	e7fe      	b.n	8009962 <prvDeleteTCB+0x52>
	}
 8009964:	bf00      	nop
 8009966:	3710      	adds	r7, #16
 8009968:	46bd      	mov	sp, r7
 800996a:	bd80      	pop	{r7, pc}

0800996c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800996c:	b480      	push	{r7}
 800996e:	b083      	sub	sp, #12
 8009970:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009972:	4b0f      	ldr	r3, [pc, #60]	; (80099b0 <prvResetNextTaskUnblockTime+0x44>)
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d101      	bne.n	8009980 <prvResetNextTaskUnblockTime+0x14>
 800997c:	2301      	movs	r3, #1
 800997e:	e000      	b.n	8009982 <prvResetNextTaskUnblockTime+0x16>
 8009980:	2300      	movs	r3, #0
 8009982:	2b00      	cmp	r3, #0
 8009984:	d004      	beq.n	8009990 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009986:	4b0b      	ldr	r3, [pc, #44]	; (80099b4 <prvResetNextTaskUnblockTime+0x48>)
 8009988:	f04f 32ff 	mov.w	r2, #4294967295
 800998c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800998e:	e008      	b.n	80099a2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009990:	4b07      	ldr	r3, [pc, #28]	; (80099b0 <prvResetNextTaskUnblockTime+0x44>)
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	68db      	ldr	r3, [r3, #12]
 8009996:	68db      	ldr	r3, [r3, #12]
 8009998:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	685b      	ldr	r3, [r3, #4]
 800999e:	4a05      	ldr	r2, [pc, #20]	; (80099b4 <prvResetNextTaskUnblockTime+0x48>)
 80099a0:	6013      	str	r3, [r2, #0]
}
 80099a2:	bf00      	nop
 80099a4:	370c      	adds	r7, #12
 80099a6:	46bd      	mov	sp, r7
 80099a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ac:	4770      	bx	lr
 80099ae:	bf00      	nop
 80099b0:	200002f8 	.word	0x200002f8
 80099b4:	20000360 	.word	0x20000360

080099b8 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80099b8:	b480      	push	{r7}
 80099ba:	b083      	sub	sp, #12
 80099bc:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80099be:	4b05      	ldr	r3, [pc, #20]	; (80099d4 <xTaskGetCurrentTaskHandle+0x1c>)
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	607b      	str	r3, [r7, #4]

		return xReturn;
 80099c4:	687b      	ldr	r3, [r7, #4]
	}
 80099c6:	4618      	mov	r0, r3
 80099c8:	370c      	adds	r7, #12
 80099ca:	46bd      	mov	sp, r7
 80099cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d0:	4770      	bx	lr
 80099d2:	bf00      	nop
 80099d4:	20000240 	.word	0x20000240

080099d8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80099d8:	b480      	push	{r7}
 80099da:	b083      	sub	sp, #12
 80099dc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80099de:	4b0b      	ldr	r3, [pc, #44]	; (8009a0c <xTaskGetSchedulerState+0x34>)
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d102      	bne.n	80099ec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80099e6:	2301      	movs	r3, #1
 80099e8:	607b      	str	r3, [r7, #4]
 80099ea:	e008      	b.n	80099fe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80099ec:	4b08      	ldr	r3, [pc, #32]	; (8009a10 <xTaskGetSchedulerState+0x38>)
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d102      	bne.n	80099fa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80099f4:	2302      	movs	r3, #2
 80099f6:	607b      	str	r3, [r7, #4]
 80099f8:	e001      	b.n	80099fe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80099fa:	2300      	movs	r3, #0
 80099fc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80099fe:	687b      	ldr	r3, [r7, #4]
	}
 8009a00:	4618      	mov	r0, r3
 8009a02:	370c      	adds	r7, #12
 8009a04:	46bd      	mov	sp, r7
 8009a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0a:	4770      	bx	lr
 8009a0c:	2000034c 	.word	0x2000034c
 8009a10:	20000368 	.word	0x20000368

08009a14 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b084      	sub	sp, #16
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009a20:	2300      	movs	r3, #0
 8009a22:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d06e      	beq.n	8009b08 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009a2a:	68bb      	ldr	r3, [r7, #8]
 8009a2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a2e:	4b39      	ldr	r3, [pc, #228]	; (8009b14 <xTaskPriorityInherit+0x100>)
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a34:	429a      	cmp	r2, r3
 8009a36:	d25e      	bcs.n	8009af6 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009a38:	68bb      	ldr	r3, [r7, #8]
 8009a3a:	699b      	ldr	r3, [r3, #24]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	db06      	blt.n	8009a4e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a40:	4b34      	ldr	r3, [pc, #208]	; (8009b14 <xTaskPriorityInherit+0x100>)
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a46:	f1c3 0207 	rsb	r2, r3, #7
 8009a4a:	68bb      	ldr	r3, [r7, #8]
 8009a4c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009a4e:	68bb      	ldr	r3, [r7, #8]
 8009a50:	6959      	ldr	r1, [r3, #20]
 8009a52:	68bb      	ldr	r3, [r7, #8]
 8009a54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a56:	4613      	mov	r3, r2
 8009a58:	009b      	lsls	r3, r3, #2
 8009a5a:	4413      	add	r3, r2
 8009a5c:	009b      	lsls	r3, r3, #2
 8009a5e:	4a2e      	ldr	r2, [pc, #184]	; (8009b18 <xTaskPriorityInherit+0x104>)
 8009a60:	4413      	add	r3, r2
 8009a62:	4299      	cmp	r1, r3
 8009a64:	d101      	bne.n	8009a6a <xTaskPriorityInherit+0x56>
 8009a66:	2301      	movs	r3, #1
 8009a68:	e000      	b.n	8009a6c <xTaskPriorityInherit+0x58>
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d03a      	beq.n	8009ae6 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009a70:	68bb      	ldr	r3, [r7, #8]
 8009a72:	3304      	adds	r3, #4
 8009a74:	4618      	mov	r0, r3
 8009a76:	f7fe f95e 	bl	8007d36 <uxListRemove>
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d115      	bne.n	8009aac <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8009a80:	68bb      	ldr	r3, [r7, #8]
 8009a82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a84:	4924      	ldr	r1, [pc, #144]	; (8009b18 <xTaskPriorityInherit+0x104>)
 8009a86:	4613      	mov	r3, r2
 8009a88:	009b      	lsls	r3, r3, #2
 8009a8a:	4413      	add	r3, r2
 8009a8c:	009b      	lsls	r3, r3, #2
 8009a8e:	440b      	add	r3, r1
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d10a      	bne.n	8009aac <xTaskPriorityInherit+0x98>
 8009a96:	68bb      	ldr	r3, [r7, #8]
 8009a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a9a:	2201      	movs	r2, #1
 8009a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8009aa0:	43da      	mvns	r2, r3
 8009aa2:	4b1e      	ldr	r3, [pc, #120]	; (8009b1c <xTaskPriorityInherit+0x108>)
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	4013      	ands	r3, r2
 8009aa8:	4a1c      	ldr	r2, [pc, #112]	; (8009b1c <xTaskPriorityInherit+0x108>)
 8009aaa:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009aac:	4b19      	ldr	r3, [pc, #100]	; (8009b14 <xTaskPriorityInherit+0x100>)
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ab2:	68bb      	ldr	r3, [r7, #8]
 8009ab4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009ab6:	68bb      	ldr	r3, [r7, #8]
 8009ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aba:	2201      	movs	r2, #1
 8009abc:	409a      	lsls	r2, r3
 8009abe:	4b17      	ldr	r3, [pc, #92]	; (8009b1c <xTaskPriorityInherit+0x108>)
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	4313      	orrs	r3, r2
 8009ac4:	4a15      	ldr	r2, [pc, #84]	; (8009b1c <xTaskPriorityInherit+0x108>)
 8009ac6:	6013      	str	r3, [r2, #0]
 8009ac8:	68bb      	ldr	r3, [r7, #8]
 8009aca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009acc:	4613      	mov	r3, r2
 8009ace:	009b      	lsls	r3, r3, #2
 8009ad0:	4413      	add	r3, r2
 8009ad2:	009b      	lsls	r3, r3, #2
 8009ad4:	4a10      	ldr	r2, [pc, #64]	; (8009b18 <xTaskPriorityInherit+0x104>)
 8009ad6:	441a      	add	r2, r3
 8009ad8:	68bb      	ldr	r3, [r7, #8]
 8009ada:	3304      	adds	r3, #4
 8009adc:	4619      	mov	r1, r3
 8009ade:	4610      	mov	r0, r2
 8009ae0:	f7fe f8cc 	bl	8007c7c <vListInsertEnd>
 8009ae4:	e004      	b.n	8009af0 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009ae6:	4b0b      	ldr	r3, [pc, #44]	; (8009b14 <xTaskPriorityInherit+0x100>)
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009aec:	68bb      	ldr	r3, [r7, #8]
 8009aee:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009af0:	2301      	movs	r3, #1
 8009af2:	60fb      	str	r3, [r7, #12]
 8009af4:	e008      	b.n	8009b08 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009af6:	68bb      	ldr	r3, [r7, #8]
 8009af8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009afa:	4b06      	ldr	r3, [pc, #24]	; (8009b14 <xTaskPriorityInherit+0x100>)
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b00:	429a      	cmp	r2, r3
 8009b02:	d201      	bcs.n	8009b08 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009b04:	2301      	movs	r3, #1
 8009b06:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009b08:	68fb      	ldr	r3, [r7, #12]
	}
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	3710      	adds	r7, #16
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	bd80      	pop	{r7, pc}
 8009b12:	bf00      	nop
 8009b14:	20000240 	.word	0x20000240
 8009b18:	20000244 	.word	0x20000244
 8009b1c:	20000348 	.word	0x20000348

08009b20 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b086      	sub	sp, #24
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d06c      	beq.n	8009c10 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009b36:	4b39      	ldr	r3, [pc, #228]	; (8009c1c <xTaskPriorityDisinherit+0xfc>)
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	693a      	ldr	r2, [r7, #16]
 8009b3c:	429a      	cmp	r2, r3
 8009b3e:	d009      	beq.n	8009b54 <xTaskPriorityDisinherit+0x34>
 8009b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b44:	f383 8811 	msr	BASEPRI, r3
 8009b48:	f3bf 8f6f 	isb	sy
 8009b4c:	f3bf 8f4f 	dsb	sy
 8009b50:	60fb      	str	r3, [r7, #12]
 8009b52:	e7fe      	b.n	8009b52 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8009b54:	693b      	ldr	r3, [r7, #16]
 8009b56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d109      	bne.n	8009b70 <xTaskPriorityDisinherit+0x50>
 8009b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b60:	f383 8811 	msr	BASEPRI, r3
 8009b64:	f3bf 8f6f 	isb	sy
 8009b68:	f3bf 8f4f 	dsb	sy
 8009b6c:	60bb      	str	r3, [r7, #8]
 8009b6e:	e7fe      	b.n	8009b6e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8009b70:	693b      	ldr	r3, [r7, #16]
 8009b72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b74:	1e5a      	subs	r2, r3, #1
 8009b76:	693b      	ldr	r3, [r7, #16]
 8009b78:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009b7a:	693b      	ldr	r3, [r7, #16]
 8009b7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b7e:	693b      	ldr	r3, [r7, #16]
 8009b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b82:	429a      	cmp	r2, r3
 8009b84:	d044      	beq.n	8009c10 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009b86:	693b      	ldr	r3, [r7, #16]
 8009b88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d140      	bne.n	8009c10 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009b8e:	693b      	ldr	r3, [r7, #16]
 8009b90:	3304      	adds	r3, #4
 8009b92:	4618      	mov	r0, r3
 8009b94:	f7fe f8cf 	bl	8007d36 <uxListRemove>
 8009b98:	4603      	mov	r3, r0
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d115      	bne.n	8009bca <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009b9e:	693b      	ldr	r3, [r7, #16]
 8009ba0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ba2:	491f      	ldr	r1, [pc, #124]	; (8009c20 <xTaskPriorityDisinherit+0x100>)
 8009ba4:	4613      	mov	r3, r2
 8009ba6:	009b      	lsls	r3, r3, #2
 8009ba8:	4413      	add	r3, r2
 8009baa:	009b      	lsls	r3, r3, #2
 8009bac:	440b      	add	r3, r1
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d10a      	bne.n	8009bca <xTaskPriorityDisinherit+0xaa>
 8009bb4:	693b      	ldr	r3, [r7, #16]
 8009bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bb8:	2201      	movs	r2, #1
 8009bba:	fa02 f303 	lsl.w	r3, r2, r3
 8009bbe:	43da      	mvns	r2, r3
 8009bc0:	4b18      	ldr	r3, [pc, #96]	; (8009c24 <xTaskPriorityDisinherit+0x104>)
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	4013      	ands	r3, r2
 8009bc6:	4a17      	ldr	r2, [pc, #92]	; (8009c24 <xTaskPriorityDisinherit+0x104>)
 8009bc8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009bca:	693b      	ldr	r3, [r7, #16]
 8009bcc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009bce:	693b      	ldr	r3, [r7, #16]
 8009bd0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009bd2:	693b      	ldr	r3, [r7, #16]
 8009bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bd6:	f1c3 0207 	rsb	r2, r3, #7
 8009bda:	693b      	ldr	r3, [r7, #16]
 8009bdc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009bde:	693b      	ldr	r3, [r7, #16]
 8009be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009be2:	2201      	movs	r2, #1
 8009be4:	409a      	lsls	r2, r3
 8009be6:	4b0f      	ldr	r3, [pc, #60]	; (8009c24 <xTaskPriorityDisinherit+0x104>)
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	4313      	orrs	r3, r2
 8009bec:	4a0d      	ldr	r2, [pc, #52]	; (8009c24 <xTaskPriorityDisinherit+0x104>)
 8009bee:	6013      	str	r3, [r2, #0]
 8009bf0:	693b      	ldr	r3, [r7, #16]
 8009bf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bf4:	4613      	mov	r3, r2
 8009bf6:	009b      	lsls	r3, r3, #2
 8009bf8:	4413      	add	r3, r2
 8009bfa:	009b      	lsls	r3, r3, #2
 8009bfc:	4a08      	ldr	r2, [pc, #32]	; (8009c20 <xTaskPriorityDisinherit+0x100>)
 8009bfe:	441a      	add	r2, r3
 8009c00:	693b      	ldr	r3, [r7, #16]
 8009c02:	3304      	adds	r3, #4
 8009c04:	4619      	mov	r1, r3
 8009c06:	4610      	mov	r0, r2
 8009c08:	f7fe f838 	bl	8007c7c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009c0c:	2301      	movs	r3, #1
 8009c0e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009c10:	697b      	ldr	r3, [r7, #20]
	}
 8009c12:	4618      	mov	r0, r3
 8009c14:	3718      	adds	r7, #24
 8009c16:	46bd      	mov	sp, r7
 8009c18:	bd80      	pop	{r7, pc}
 8009c1a:	bf00      	nop
 8009c1c:	20000240 	.word	0x20000240
 8009c20:	20000244 	.word	0x20000244
 8009c24:	20000348 	.word	0x20000348

08009c28 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b088      	sub	sp, #32
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
 8009c30:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009c36:	2301      	movs	r3, #1
 8009c38:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	f000 8086 	beq.w	8009d4e <vTaskPriorityDisinheritAfterTimeout+0x126>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009c42:	69bb      	ldr	r3, [r7, #24]
 8009c44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d109      	bne.n	8009c5e <vTaskPriorityDisinheritAfterTimeout+0x36>
 8009c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c4e:	f383 8811 	msr	BASEPRI, r3
 8009c52:	f3bf 8f6f 	isb	sy
 8009c56:	f3bf 8f4f 	dsb	sy
 8009c5a:	60fb      	str	r3, [r7, #12]
 8009c5c:	e7fe      	b.n	8009c5c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009c5e:	69bb      	ldr	r3, [r7, #24]
 8009c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c62:	683a      	ldr	r2, [r7, #0]
 8009c64:	429a      	cmp	r2, r3
 8009c66:	d902      	bls.n	8009c6e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009c68:	683b      	ldr	r3, [r7, #0]
 8009c6a:	61fb      	str	r3, [r7, #28]
 8009c6c:	e002      	b.n	8009c74 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009c6e:	69bb      	ldr	r3, [r7, #24]
 8009c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c72:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009c74:	69bb      	ldr	r3, [r7, #24]
 8009c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c78:	69fa      	ldr	r2, [r7, #28]
 8009c7a:	429a      	cmp	r2, r3
 8009c7c:	d067      	beq.n	8009d4e <vTaskPriorityDisinheritAfterTimeout+0x126>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009c7e:	69bb      	ldr	r3, [r7, #24]
 8009c80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c82:	697a      	ldr	r2, [r7, #20]
 8009c84:	429a      	cmp	r2, r3
 8009c86:	d162      	bne.n	8009d4e <vTaskPriorityDisinheritAfterTimeout+0x126>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009c88:	4b33      	ldr	r3, [pc, #204]	; (8009d58 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	69ba      	ldr	r2, [r7, #24]
 8009c8e:	429a      	cmp	r2, r3
 8009c90:	d109      	bne.n	8009ca6 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 8009c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c96:	f383 8811 	msr	BASEPRI, r3
 8009c9a:	f3bf 8f6f 	isb	sy
 8009c9e:	f3bf 8f4f 	dsb	sy
 8009ca2:	60bb      	str	r3, [r7, #8]
 8009ca4:	e7fe      	b.n	8009ca4 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009ca6:	69bb      	ldr	r3, [r7, #24]
 8009ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009caa:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009cac:	69bb      	ldr	r3, [r7, #24]
 8009cae:	69fa      	ldr	r2, [r7, #28]
 8009cb0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009cb2:	69bb      	ldr	r3, [r7, #24]
 8009cb4:	699b      	ldr	r3, [r3, #24]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	db04      	blt.n	8009cc4 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009cba:	69fb      	ldr	r3, [r7, #28]
 8009cbc:	f1c3 0207 	rsb	r2, r3, #7
 8009cc0:	69bb      	ldr	r3, [r7, #24]
 8009cc2:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009cc4:	69bb      	ldr	r3, [r7, #24]
 8009cc6:	6959      	ldr	r1, [r3, #20]
 8009cc8:	693a      	ldr	r2, [r7, #16]
 8009cca:	4613      	mov	r3, r2
 8009ccc:	009b      	lsls	r3, r3, #2
 8009cce:	4413      	add	r3, r2
 8009cd0:	009b      	lsls	r3, r3, #2
 8009cd2:	4a22      	ldr	r2, [pc, #136]	; (8009d5c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8009cd4:	4413      	add	r3, r2
 8009cd6:	4299      	cmp	r1, r3
 8009cd8:	d101      	bne.n	8009cde <vTaskPriorityDisinheritAfterTimeout+0xb6>
 8009cda:	2301      	movs	r3, #1
 8009cdc:	e000      	b.n	8009ce0 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8009cde:	2300      	movs	r3, #0
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d034      	beq.n	8009d4e <vTaskPriorityDisinheritAfterTimeout+0x126>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009ce4:	69bb      	ldr	r3, [r7, #24]
 8009ce6:	3304      	adds	r3, #4
 8009ce8:	4618      	mov	r0, r3
 8009cea:	f7fe f824 	bl	8007d36 <uxListRemove>
 8009cee:	4603      	mov	r3, r0
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d115      	bne.n	8009d20 <vTaskPriorityDisinheritAfterTimeout+0xf8>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009cf4:	69bb      	ldr	r3, [r7, #24]
 8009cf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cf8:	4918      	ldr	r1, [pc, #96]	; (8009d5c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8009cfa:	4613      	mov	r3, r2
 8009cfc:	009b      	lsls	r3, r3, #2
 8009cfe:	4413      	add	r3, r2
 8009d00:	009b      	lsls	r3, r3, #2
 8009d02:	440b      	add	r3, r1
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d10a      	bne.n	8009d20 <vTaskPriorityDisinheritAfterTimeout+0xf8>
 8009d0a:	69bb      	ldr	r3, [r7, #24]
 8009d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d0e:	2201      	movs	r2, #1
 8009d10:	fa02 f303 	lsl.w	r3, r2, r3
 8009d14:	43da      	mvns	r2, r3
 8009d16:	4b12      	ldr	r3, [pc, #72]	; (8009d60 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	4013      	ands	r3, r2
 8009d1c:	4a10      	ldr	r2, [pc, #64]	; (8009d60 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8009d1e:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009d20:	69bb      	ldr	r3, [r7, #24]
 8009d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d24:	2201      	movs	r2, #1
 8009d26:	409a      	lsls	r2, r3
 8009d28:	4b0d      	ldr	r3, [pc, #52]	; (8009d60 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	4313      	orrs	r3, r2
 8009d2e:	4a0c      	ldr	r2, [pc, #48]	; (8009d60 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8009d30:	6013      	str	r3, [r2, #0]
 8009d32:	69bb      	ldr	r3, [r7, #24]
 8009d34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d36:	4613      	mov	r3, r2
 8009d38:	009b      	lsls	r3, r3, #2
 8009d3a:	4413      	add	r3, r2
 8009d3c:	009b      	lsls	r3, r3, #2
 8009d3e:	4a07      	ldr	r2, [pc, #28]	; (8009d5c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8009d40:	441a      	add	r2, r3
 8009d42:	69bb      	ldr	r3, [r7, #24]
 8009d44:	3304      	adds	r3, #4
 8009d46:	4619      	mov	r1, r3
 8009d48:	4610      	mov	r0, r2
 8009d4a:	f7fd ff97 	bl	8007c7c <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009d4e:	bf00      	nop
 8009d50:	3720      	adds	r7, #32
 8009d52:	46bd      	mov	sp, r7
 8009d54:	bd80      	pop	{r7, pc}
 8009d56:	bf00      	nop
 8009d58:	20000240 	.word	0x20000240
 8009d5c:	20000244 	.word	0x20000244
 8009d60:	20000348 	.word	0x20000348

08009d64 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8009d64:	b480      	push	{r7}
 8009d66:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009d68:	4b07      	ldr	r3, [pc, #28]	; (8009d88 <pvTaskIncrementMutexHeldCount+0x24>)
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d004      	beq.n	8009d7a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009d70:	4b05      	ldr	r3, [pc, #20]	; (8009d88 <pvTaskIncrementMutexHeldCount+0x24>)
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009d76:	3201      	adds	r2, #1
 8009d78:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8009d7a:	4b03      	ldr	r3, [pc, #12]	; (8009d88 <pvTaskIncrementMutexHeldCount+0x24>)
 8009d7c:	681b      	ldr	r3, [r3, #0]
	}
 8009d7e:	4618      	mov	r0, r3
 8009d80:	46bd      	mov	sp, r7
 8009d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d86:	4770      	bx	lr
 8009d88:	20000240 	.word	0x20000240

08009d8c <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b086      	sub	sp, #24
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	60f8      	str	r0, [r7, #12]
 8009d94:	60b9      	str	r1, [r7, #8]
 8009d96:	607a      	str	r2, [r7, #4]
 8009d98:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8009d9a:	f000 fa7f 	bl	800a29c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8009d9e:	4b26      	ldr	r3, [pc, #152]	; (8009e38 <xTaskNotifyWait+0xac>)
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009da6:	b2db      	uxtb	r3, r3
 8009da8:	2b02      	cmp	r3, #2
 8009daa:	d01a      	beq.n	8009de2 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8009dac:	4b22      	ldr	r3, [pc, #136]	; (8009e38 <xTaskNotifyWait+0xac>)
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8009db2:	68fa      	ldr	r2, [r7, #12]
 8009db4:	43d2      	mvns	r2, r2
 8009db6:	400a      	ands	r2, r1
 8009db8:	64da      	str	r2, [r3, #76]	; 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8009dba:	4b1f      	ldr	r3, [pc, #124]	; (8009e38 <xTaskNotifyWait+0xac>)
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	2201      	movs	r2, #1
 8009dc0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 8009dc4:	683b      	ldr	r3, [r7, #0]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d00b      	beq.n	8009de2 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009dca:	2101      	movs	r1, #1
 8009dcc:	6838      	ldr	r0, [r7, #0]
 8009dce:	f000 f8d7 	bl	8009f80 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8009dd2:	4b1a      	ldr	r3, [pc, #104]	; (8009e3c <xTaskNotifyWait+0xb0>)
 8009dd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009dd8:	601a      	str	r2, [r3, #0]
 8009dda:	f3bf 8f4f 	dsb	sy
 8009dde:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8009de2:	f000 fa89 	bl	800a2f8 <vPortExitCritical>

		taskENTER_CRITICAL();
 8009de6:	f000 fa59 	bl	800a29c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d004      	beq.n	8009dfa <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8009df0:	4b11      	ldr	r3, [pc, #68]	; (8009e38 <xTaskNotifyWait+0xac>)
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8009dfa:	4b0f      	ldr	r3, [pc, #60]	; (8009e38 <xTaskNotifyWait+0xac>)
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009e02:	b2db      	uxtb	r3, r3
 8009e04:	2b02      	cmp	r3, #2
 8009e06:	d002      	beq.n	8009e0e <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8009e08:	2300      	movs	r3, #0
 8009e0a:	617b      	str	r3, [r7, #20]
 8009e0c:	e008      	b.n	8009e20 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8009e0e:	4b0a      	ldr	r3, [pc, #40]	; (8009e38 <xTaskNotifyWait+0xac>)
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8009e14:	68ba      	ldr	r2, [r7, #8]
 8009e16:	43d2      	mvns	r2, r2
 8009e18:	400a      	ands	r2, r1
 8009e1a:	64da      	str	r2, [r3, #76]	; 0x4c
				xReturn = pdTRUE;
 8009e1c:	2301      	movs	r3, #1
 8009e1e:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009e20:	4b05      	ldr	r3, [pc, #20]	; (8009e38 <xTaskNotifyWait+0xac>)
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	2200      	movs	r2, #0
 8009e26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 8009e2a:	f000 fa65 	bl	800a2f8 <vPortExitCritical>

		return xReturn;
 8009e2e:	697b      	ldr	r3, [r7, #20]
	}
 8009e30:	4618      	mov	r0, r3
 8009e32:	3718      	adds	r7, #24
 8009e34:	46bd      	mov	sp, r7
 8009e36:	bd80      	pop	{r7, pc}
 8009e38:	20000240 	.word	0x20000240
 8009e3c:	e000ed04 	.word	0xe000ed04

08009e40 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b08a      	sub	sp, #40	; 0x28
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	60f8      	str	r0, [r7, #12]
 8009e48:	60b9      	str	r1, [r7, #8]
 8009e4a:	603b      	str	r3, [r7, #0]
 8009e4c:	4613      	mov	r3, r2
 8009e4e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8009e50:	2301      	movs	r3, #1
 8009e52:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d109      	bne.n	8009e6e <xTaskGenericNotify+0x2e>
 8009e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e5e:	f383 8811 	msr	BASEPRI, r3
 8009e62:	f3bf 8f6f 	isb	sy
 8009e66:	f3bf 8f4f 	dsb	sy
 8009e6a:	61bb      	str	r3, [r7, #24]
 8009e6c:	e7fe      	b.n	8009e6c <xTaskGenericNotify+0x2c>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8009e72:	f000 fa13 	bl	800a29c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d003      	beq.n	8009e84 <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8009e7c:	6a3b      	ldr	r3, [r7, #32]
 8009e7e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009e80:	683b      	ldr	r3, [r7, #0]
 8009e82:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8009e84:	6a3b      	ldr	r3, [r7, #32]
 8009e86:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009e8a:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8009e8c:	6a3b      	ldr	r3, [r7, #32]
 8009e8e:	2202      	movs	r2, #2
 8009e90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 8009e94:	79fb      	ldrb	r3, [r7, #7]
 8009e96:	2b04      	cmp	r3, #4
 8009e98:	d827      	bhi.n	8009eea <xTaskGenericNotify+0xaa>
 8009e9a:	a201      	add	r2, pc, #4	; (adr r2, 8009ea0 <xTaskGenericNotify+0x60>)
 8009e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ea0:	08009eeb 	.word	0x08009eeb
 8009ea4:	08009eb5 	.word	0x08009eb5
 8009ea8:	08009ec3 	.word	0x08009ec3
 8009eac:	08009ecf 	.word	0x08009ecf
 8009eb0:	08009ed7 	.word	0x08009ed7
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8009eb4:	6a3b      	ldr	r3, [r7, #32]
 8009eb6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009eb8:	68bb      	ldr	r3, [r7, #8]
 8009eba:	431a      	orrs	r2, r3
 8009ebc:	6a3b      	ldr	r3, [r7, #32]
 8009ebe:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8009ec0:	e013      	b.n	8009eea <xTaskGenericNotify+0xaa>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8009ec2:	6a3b      	ldr	r3, [r7, #32]
 8009ec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ec6:	1c5a      	adds	r2, r3, #1
 8009ec8:	6a3b      	ldr	r3, [r7, #32]
 8009eca:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8009ecc:	e00d      	b.n	8009eea <xTaskGenericNotify+0xaa>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8009ece:	6a3b      	ldr	r3, [r7, #32]
 8009ed0:	68ba      	ldr	r2, [r7, #8]
 8009ed2:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8009ed4:	e009      	b.n	8009eea <xTaskGenericNotify+0xaa>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8009ed6:	7ffb      	ldrb	r3, [r7, #31]
 8009ed8:	2b02      	cmp	r3, #2
 8009eda:	d003      	beq.n	8009ee4 <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8009edc:	6a3b      	ldr	r3, [r7, #32]
 8009ede:	68ba      	ldr	r2, [r7, #8]
 8009ee0:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8009ee2:	e001      	b.n	8009ee8 <xTaskGenericNotify+0xa8>
						xReturn = pdFAIL;
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8009ee8:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8009eea:	7ffb      	ldrb	r3, [r7, #31]
 8009eec:	2b01      	cmp	r3, #1
 8009eee:	d138      	bne.n	8009f62 <xTaskGenericNotify+0x122>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009ef0:	6a3b      	ldr	r3, [r7, #32]
 8009ef2:	3304      	adds	r3, #4
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	f7fd ff1e 	bl	8007d36 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8009efa:	6a3b      	ldr	r3, [r7, #32]
 8009efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009efe:	2201      	movs	r2, #1
 8009f00:	409a      	lsls	r2, r3
 8009f02:	4b1b      	ldr	r3, [pc, #108]	; (8009f70 <xTaskGenericNotify+0x130>)
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	4313      	orrs	r3, r2
 8009f08:	4a19      	ldr	r2, [pc, #100]	; (8009f70 <xTaskGenericNotify+0x130>)
 8009f0a:	6013      	str	r3, [r2, #0]
 8009f0c:	6a3b      	ldr	r3, [r7, #32]
 8009f0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f10:	4613      	mov	r3, r2
 8009f12:	009b      	lsls	r3, r3, #2
 8009f14:	4413      	add	r3, r2
 8009f16:	009b      	lsls	r3, r3, #2
 8009f18:	4a16      	ldr	r2, [pc, #88]	; (8009f74 <xTaskGenericNotify+0x134>)
 8009f1a:	441a      	add	r2, r3
 8009f1c:	6a3b      	ldr	r3, [r7, #32]
 8009f1e:	3304      	adds	r3, #4
 8009f20:	4619      	mov	r1, r3
 8009f22:	4610      	mov	r0, r2
 8009f24:	f7fd feaa 	bl	8007c7c <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8009f28:	6a3b      	ldr	r3, [r7, #32]
 8009f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d009      	beq.n	8009f44 <xTaskGenericNotify+0x104>
 8009f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f34:	f383 8811 	msr	BASEPRI, r3
 8009f38:	f3bf 8f6f 	isb	sy
 8009f3c:	f3bf 8f4f 	dsb	sy
 8009f40:	617b      	str	r3, [r7, #20]
 8009f42:	e7fe      	b.n	8009f42 <xTaskGenericNotify+0x102>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009f44:	6a3b      	ldr	r3, [r7, #32]
 8009f46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f48:	4b0b      	ldr	r3, [pc, #44]	; (8009f78 <xTaskGenericNotify+0x138>)
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f4e:	429a      	cmp	r2, r3
 8009f50:	d907      	bls.n	8009f62 <xTaskGenericNotify+0x122>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8009f52:	4b0a      	ldr	r3, [pc, #40]	; (8009f7c <xTaskGenericNotify+0x13c>)
 8009f54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f58:	601a      	str	r2, [r3, #0]
 8009f5a:	f3bf 8f4f 	dsb	sy
 8009f5e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8009f62:	f000 f9c9 	bl	800a2f8 <vPortExitCritical>

		return xReturn;
 8009f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8009f68:	4618      	mov	r0, r3
 8009f6a:	3728      	adds	r7, #40	; 0x28
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	bd80      	pop	{r7, pc}
 8009f70:	20000348 	.word	0x20000348
 8009f74:	20000244 	.word	0x20000244
 8009f78:	20000240 	.word	0x20000240
 8009f7c:	e000ed04 	.word	0xe000ed04

08009f80 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b084      	sub	sp, #16
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
 8009f88:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009f8a:	4b2b      	ldr	r3, [pc, #172]	; (800a038 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	60fb      	str	r3, [r7, #12]
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 8009f90:	4b2a      	ldr	r3, [pc, #168]	; (800a03c <prvAddCurrentTaskToDelayedList+0xbc>)
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	2200      	movs	r2, #0
 8009f96:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009f9a:	4b28      	ldr	r3, [pc, #160]	; (800a03c <prvAddCurrentTaskToDelayedList+0xbc>)
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	3304      	adds	r3, #4
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	f7fd fec8 	bl	8007d36 <uxListRemove>
 8009fa6:	4603      	mov	r3, r0
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d10b      	bne.n	8009fc4 <prvAddCurrentTaskToDelayedList+0x44>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8009fac:	4b23      	ldr	r3, [pc, #140]	; (800a03c <prvAddCurrentTaskToDelayedList+0xbc>)
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fb2:	2201      	movs	r2, #1
 8009fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8009fb8:	43da      	mvns	r2, r3
 8009fba:	4b21      	ldr	r3, [pc, #132]	; (800a040 <prvAddCurrentTaskToDelayedList+0xc0>)
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	4013      	ands	r3, r2
 8009fc0:	4a1f      	ldr	r2, [pc, #124]	; (800a040 <prvAddCurrentTaskToDelayedList+0xc0>)
 8009fc2:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fca:	d10a      	bne.n	8009fe2 <prvAddCurrentTaskToDelayedList+0x62>
 8009fcc:	683b      	ldr	r3, [r7, #0]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d007      	beq.n	8009fe2 <prvAddCurrentTaskToDelayedList+0x62>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009fd2:	4b1a      	ldr	r3, [pc, #104]	; (800a03c <prvAddCurrentTaskToDelayedList+0xbc>)
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	3304      	adds	r3, #4
 8009fd8:	4619      	mov	r1, r3
 8009fda:	481a      	ldr	r0, [pc, #104]	; (800a044 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009fdc:	f7fd fe4e 	bl	8007c7c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009fe0:	e026      	b.n	800a030 <prvAddCurrentTaskToDelayedList+0xb0>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009fe2:	68fa      	ldr	r2, [r7, #12]
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	4413      	add	r3, r2
 8009fe8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009fea:	4b14      	ldr	r3, [pc, #80]	; (800a03c <prvAddCurrentTaskToDelayedList+0xbc>)
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	68ba      	ldr	r2, [r7, #8]
 8009ff0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009ff2:	68ba      	ldr	r2, [r7, #8]
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	429a      	cmp	r2, r3
 8009ff8:	d209      	bcs.n	800a00e <prvAddCurrentTaskToDelayedList+0x8e>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009ffa:	4b13      	ldr	r3, [pc, #76]	; (800a048 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009ffc:	681a      	ldr	r2, [r3, #0]
 8009ffe:	4b0f      	ldr	r3, [pc, #60]	; (800a03c <prvAddCurrentTaskToDelayedList+0xbc>)
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	3304      	adds	r3, #4
 800a004:	4619      	mov	r1, r3
 800a006:	4610      	mov	r0, r2
 800a008:	f7fd fe5c 	bl	8007cc4 <vListInsert>
}
 800a00c:	e010      	b.n	800a030 <prvAddCurrentTaskToDelayedList+0xb0>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a00e:	4b0f      	ldr	r3, [pc, #60]	; (800a04c <prvAddCurrentTaskToDelayedList+0xcc>)
 800a010:	681a      	ldr	r2, [r3, #0]
 800a012:	4b0a      	ldr	r3, [pc, #40]	; (800a03c <prvAddCurrentTaskToDelayedList+0xbc>)
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	3304      	adds	r3, #4
 800a018:	4619      	mov	r1, r3
 800a01a:	4610      	mov	r0, r2
 800a01c:	f7fd fe52 	bl	8007cc4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a020:	4b0b      	ldr	r3, [pc, #44]	; (800a050 <prvAddCurrentTaskToDelayedList+0xd0>)
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	68ba      	ldr	r2, [r7, #8]
 800a026:	429a      	cmp	r2, r3
 800a028:	d202      	bcs.n	800a030 <prvAddCurrentTaskToDelayedList+0xb0>
					xNextTaskUnblockTime = xTimeToWake;
 800a02a:	4a09      	ldr	r2, [pc, #36]	; (800a050 <prvAddCurrentTaskToDelayedList+0xd0>)
 800a02c:	68bb      	ldr	r3, [r7, #8]
 800a02e:	6013      	str	r3, [r2, #0]
}
 800a030:	bf00      	nop
 800a032:	3710      	adds	r7, #16
 800a034:	46bd      	mov	sp, r7
 800a036:	bd80      	pop	{r7, pc}
 800a038:	20000344 	.word	0x20000344
 800a03c:	20000240 	.word	0x20000240
 800a040:	20000348 	.word	0x20000348
 800a044:	2000032c 	.word	0x2000032c
 800a048:	200002fc 	.word	0x200002fc
 800a04c:	200002f8 	.word	0x200002f8
 800a050:	20000360 	.word	0x20000360

0800a054 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a054:	b480      	push	{r7}
 800a056:	b085      	sub	sp, #20
 800a058:	af00      	add	r7, sp, #0
 800a05a:	60f8      	str	r0, [r7, #12]
 800a05c:	60b9      	str	r1, [r7, #8]
 800a05e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	3b04      	subs	r3, #4
 800a064:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a06c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	3b04      	subs	r3, #4
 800a072:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a074:	68bb      	ldr	r3, [r7, #8]
 800a076:	f023 0201 	bic.w	r2, r3, #1
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	3b04      	subs	r3, #4
 800a082:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a084:	4a0c      	ldr	r2, [pc, #48]	; (800a0b8 <pxPortInitialiseStack+0x64>)
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	3b14      	subs	r3, #20
 800a08e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a090:	687a      	ldr	r2, [r7, #4]
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	3b04      	subs	r3, #4
 800a09a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	f06f 0202 	mvn.w	r2, #2
 800a0a2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	3b20      	subs	r3, #32
 800a0a8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a0aa:	68fb      	ldr	r3, [r7, #12]
}
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	3714      	adds	r7, #20
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b6:	4770      	bx	lr
 800a0b8:	0800a0bd 	.word	0x0800a0bd

0800a0bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a0bc:	b480      	push	{r7}
 800a0be:	b085      	sub	sp, #20
 800a0c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a0c6:	4b11      	ldr	r3, [pc, #68]	; (800a10c <prvTaskExitError+0x50>)
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0ce:	d009      	beq.n	800a0e4 <prvTaskExitError+0x28>
 800a0d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0d4:	f383 8811 	msr	BASEPRI, r3
 800a0d8:	f3bf 8f6f 	isb	sy
 800a0dc:	f3bf 8f4f 	dsb	sy
 800a0e0:	60fb      	str	r3, [r7, #12]
 800a0e2:	e7fe      	b.n	800a0e2 <prvTaskExitError+0x26>
 800a0e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0e8:	f383 8811 	msr	BASEPRI, r3
 800a0ec:	f3bf 8f6f 	isb	sy
 800a0f0:	f3bf 8f4f 	dsb	sy
 800a0f4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a0f6:	bf00      	nop
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d0fc      	beq.n	800a0f8 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a0fe:	bf00      	nop
 800a100:	3714      	adds	r7, #20
 800a102:	46bd      	mov	sp, r7
 800a104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a108:	4770      	bx	lr
 800a10a:	bf00      	nop
 800a10c:	20000004 	.word	0x20000004

0800a110 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a110:	4b07      	ldr	r3, [pc, #28]	; (800a130 <pxCurrentTCBConst2>)
 800a112:	6819      	ldr	r1, [r3, #0]
 800a114:	6808      	ldr	r0, [r1, #0]
 800a116:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a11a:	f380 8809 	msr	PSP, r0
 800a11e:	f3bf 8f6f 	isb	sy
 800a122:	f04f 0000 	mov.w	r0, #0
 800a126:	f380 8811 	msr	BASEPRI, r0
 800a12a:	4770      	bx	lr
 800a12c:	f3af 8000 	nop.w

0800a130 <pxCurrentTCBConst2>:
 800a130:	20000240 	.word	0x20000240
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a134:	bf00      	nop
 800a136:	bf00      	nop

0800a138 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a138:	4808      	ldr	r0, [pc, #32]	; (800a15c <prvPortStartFirstTask+0x24>)
 800a13a:	6800      	ldr	r0, [r0, #0]
 800a13c:	6800      	ldr	r0, [r0, #0]
 800a13e:	f380 8808 	msr	MSP, r0
 800a142:	f04f 0000 	mov.w	r0, #0
 800a146:	f380 8814 	msr	CONTROL, r0
 800a14a:	b662      	cpsie	i
 800a14c:	b661      	cpsie	f
 800a14e:	f3bf 8f4f 	dsb	sy
 800a152:	f3bf 8f6f 	isb	sy
 800a156:	df00      	svc	0
 800a158:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a15a:	bf00      	nop
 800a15c:	e000ed08 	.word	0xe000ed08

0800a160 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b086      	sub	sp, #24
 800a164:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a166:	4b44      	ldr	r3, [pc, #272]	; (800a278 <xPortStartScheduler+0x118>)
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	4a44      	ldr	r2, [pc, #272]	; (800a27c <xPortStartScheduler+0x11c>)
 800a16c:	4293      	cmp	r3, r2
 800a16e:	d109      	bne.n	800a184 <xPortStartScheduler+0x24>
 800a170:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a174:	f383 8811 	msr	BASEPRI, r3
 800a178:	f3bf 8f6f 	isb	sy
 800a17c:	f3bf 8f4f 	dsb	sy
 800a180:	613b      	str	r3, [r7, #16]
 800a182:	e7fe      	b.n	800a182 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a184:	4b3c      	ldr	r3, [pc, #240]	; (800a278 <xPortStartScheduler+0x118>)
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	4a3d      	ldr	r2, [pc, #244]	; (800a280 <xPortStartScheduler+0x120>)
 800a18a:	4293      	cmp	r3, r2
 800a18c:	d109      	bne.n	800a1a2 <xPortStartScheduler+0x42>
 800a18e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a192:	f383 8811 	msr	BASEPRI, r3
 800a196:	f3bf 8f6f 	isb	sy
 800a19a:	f3bf 8f4f 	dsb	sy
 800a19e:	60fb      	str	r3, [r7, #12]
 800a1a0:	e7fe      	b.n	800a1a0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a1a2:	4b38      	ldr	r3, [pc, #224]	; (800a284 <xPortStartScheduler+0x124>)
 800a1a4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a1a6:	697b      	ldr	r3, [r7, #20]
 800a1a8:	781b      	ldrb	r3, [r3, #0]
 800a1aa:	b2db      	uxtb	r3, r3
 800a1ac:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a1ae:	697b      	ldr	r3, [r7, #20]
 800a1b0:	22ff      	movs	r2, #255	; 0xff
 800a1b2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a1b4:	697b      	ldr	r3, [r7, #20]
 800a1b6:	781b      	ldrb	r3, [r3, #0]
 800a1b8:	b2db      	uxtb	r3, r3
 800a1ba:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a1bc:	78fb      	ldrb	r3, [r7, #3]
 800a1be:	b2db      	uxtb	r3, r3
 800a1c0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a1c4:	b2da      	uxtb	r2, r3
 800a1c6:	4b30      	ldr	r3, [pc, #192]	; (800a288 <xPortStartScheduler+0x128>)
 800a1c8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a1ca:	4b30      	ldr	r3, [pc, #192]	; (800a28c <xPortStartScheduler+0x12c>)
 800a1cc:	2207      	movs	r2, #7
 800a1ce:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a1d0:	e009      	b.n	800a1e6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800a1d2:	4b2e      	ldr	r3, [pc, #184]	; (800a28c <xPortStartScheduler+0x12c>)
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	3b01      	subs	r3, #1
 800a1d8:	4a2c      	ldr	r2, [pc, #176]	; (800a28c <xPortStartScheduler+0x12c>)
 800a1da:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a1dc:	78fb      	ldrb	r3, [r7, #3]
 800a1de:	b2db      	uxtb	r3, r3
 800a1e0:	005b      	lsls	r3, r3, #1
 800a1e2:	b2db      	uxtb	r3, r3
 800a1e4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a1e6:	78fb      	ldrb	r3, [r7, #3]
 800a1e8:	b2db      	uxtb	r3, r3
 800a1ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1ee:	2b80      	cmp	r3, #128	; 0x80
 800a1f0:	d0ef      	beq.n	800a1d2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a1f2:	4b26      	ldr	r3, [pc, #152]	; (800a28c <xPortStartScheduler+0x12c>)
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	f1c3 0307 	rsb	r3, r3, #7
 800a1fa:	2b04      	cmp	r3, #4
 800a1fc:	d009      	beq.n	800a212 <xPortStartScheduler+0xb2>
 800a1fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a202:	f383 8811 	msr	BASEPRI, r3
 800a206:	f3bf 8f6f 	isb	sy
 800a20a:	f3bf 8f4f 	dsb	sy
 800a20e:	60bb      	str	r3, [r7, #8]
 800a210:	e7fe      	b.n	800a210 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a212:	4b1e      	ldr	r3, [pc, #120]	; (800a28c <xPortStartScheduler+0x12c>)
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	021b      	lsls	r3, r3, #8
 800a218:	4a1c      	ldr	r2, [pc, #112]	; (800a28c <xPortStartScheduler+0x12c>)
 800a21a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a21c:	4b1b      	ldr	r3, [pc, #108]	; (800a28c <xPortStartScheduler+0x12c>)
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a224:	4a19      	ldr	r2, [pc, #100]	; (800a28c <xPortStartScheduler+0x12c>)
 800a226:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	b2da      	uxtb	r2, r3
 800a22c:	697b      	ldr	r3, [r7, #20]
 800a22e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a230:	4b17      	ldr	r3, [pc, #92]	; (800a290 <xPortStartScheduler+0x130>)
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	4a16      	ldr	r2, [pc, #88]	; (800a290 <xPortStartScheduler+0x130>)
 800a236:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a23a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a23c:	4b14      	ldr	r3, [pc, #80]	; (800a290 <xPortStartScheduler+0x130>)
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	4a13      	ldr	r2, [pc, #76]	; (800a290 <xPortStartScheduler+0x130>)
 800a242:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a246:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a248:	f000 f8d6 	bl	800a3f8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a24c:	4b11      	ldr	r3, [pc, #68]	; (800a294 <xPortStartScheduler+0x134>)
 800a24e:	2200      	movs	r2, #0
 800a250:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a252:	f000 f8f5 	bl	800a440 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a256:	4b10      	ldr	r3, [pc, #64]	; (800a298 <xPortStartScheduler+0x138>)
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	4a0f      	ldr	r2, [pc, #60]	; (800a298 <xPortStartScheduler+0x138>)
 800a25c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a260:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a262:	f7ff ff69 	bl	800a138 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a266:	f7ff f945 	bl	80094f4 <vTaskSwitchContext>
	prvTaskExitError();
 800a26a:	f7ff ff27 	bl	800a0bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a26e:	2300      	movs	r3, #0
}
 800a270:	4618      	mov	r0, r3
 800a272:	3718      	adds	r7, #24
 800a274:	46bd      	mov	sp, r7
 800a276:	bd80      	pop	{r7, pc}
 800a278:	e000ed00 	.word	0xe000ed00
 800a27c:	410fc271 	.word	0x410fc271
 800a280:	410fc270 	.word	0x410fc270
 800a284:	e000e400 	.word	0xe000e400
 800a288:	2000036c 	.word	0x2000036c
 800a28c:	20000370 	.word	0x20000370
 800a290:	e000ed20 	.word	0xe000ed20
 800a294:	20000004 	.word	0x20000004
 800a298:	e000ef34 	.word	0xe000ef34

0800a29c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a29c:	b480      	push	{r7}
 800a29e:	b083      	sub	sp, #12
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2a6:	f383 8811 	msr	BASEPRI, r3
 800a2aa:	f3bf 8f6f 	isb	sy
 800a2ae:	f3bf 8f4f 	dsb	sy
 800a2b2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a2b4:	4b0e      	ldr	r3, [pc, #56]	; (800a2f0 <vPortEnterCritical+0x54>)
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	3301      	adds	r3, #1
 800a2ba:	4a0d      	ldr	r2, [pc, #52]	; (800a2f0 <vPortEnterCritical+0x54>)
 800a2bc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a2be:	4b0c      	ldr	r3, [pc, #48]	; (800a2f0 <vPortEnterCritical+0x54>)
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	2b01      	cmp	r3, #1
 800a2c4:	d10e      	bne.n	800a2e4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a2c6:	4b0b      	ldr	r3, [pc, #44]	; (800a2f4 <vPortEnterCritical+0x58>)
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	b2db      	uxtb	r3, r3
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d009      	beq.n	800a2e4 <vPortEnterCritical+0x48>
 800a2d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2d4:	f383 8811 	msr	BASEPRI, r3
 800a2d8:	f3bf 8f6f 	isb	sy
 800a2dc:	f3bf 8f4f 	dsb	sy
 800a2e0:	603b      	str	r3, [r7, #0]
 800a2e2:	e7fe      	b.n	800a2e2 <vPortEnterCritical+0x46>
	}
}
 800a2e4:	bf00      	nop
 800a2e6:	370c      	adds	r7, #12
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ee:	4770      	bx	lr
 800a2f0:	20000004 	.word	0x20000004
 800a2f4:	e000ed04 	.word	0xe000ed04

0800a2f8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a2f8:	b480      	push	{r7}
 800a2fa:	b083      	sub	sp, #12
 800a2fc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a2fe:	4b11      	ldr	r3, [pc, #68]	; (800a344 <vPortExitCritical+0x4c>)
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d109      	bne.n	800a31a <vPortExitCritical+0x22>
 800a306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a30a:	f383 8811 	msr	BASEPRI, r3
 800a30e:	f3bf 8f6f 	isb	sy
 800a312:	f3bf 8f4f 	dsb	sy
 800a316:	607b      	str	r3, [r7, #4]
 800a318:	e7fe      	b.n	800a318 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800a31a:	4b0a      	ldr	r3, [pc, #40]	; (800a344 <vPortExitCritical+0x4c>)
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	3b01      	subs	r3, #1
 800a320:	4a08      	ldr	r2, [pc, #32]	; (800a344 <vPortExitCritical+0x4c>)
 800a322:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a324:	4b07      	ldr	r3, [pc, #28]	; (800a344 <vPortExitCritical+0x4c>)
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d104      	bne.n	800a336 <vPortExitCritical+0x3e>
 800a32c:	2300      	movs	r3, #0
 800a32e:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a330:	683b      	ldr	r3, [r7, #0]
 800a332:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800a336:	bf00      	nop
 800a338:	370c      	adds	r7, #12
 800a33a:	46bd      	mov	sp, r7
 800a33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a340:	4770      	bx	lr
 800a342:	bf00      	nop
 800a344:	20000004 	.word	0x20000004
	...

0800a350 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a350:	f3ef 8009 	mrs	r0, PSP
 800a354:	f3bf 8f6f 	isb	sy
 800a358:	4b15      	ldr	r3, [pc, #84]	; (800a3b0 <pxCurrentTCBConst>)
 800a35a:	681a      	ldr	r2, [r3, #0]
 800a35c:	f01e 0f10 	tst.w	lr, #16
 800a360:	bf08      	it	eq
 800a362:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a366:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a36a:	6010      	str	r0, [r2, #0]
 800a36c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a370:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a374:	f380 8811 	msr	BASEPRI, r0
 800a378:	f3bf 8f4f 	dsb	sy
 800a37c:	f3bf 8f6f 	isb	sy
 800a380:	f7ff f8b8 	bl	80094f4 <vTaskSwitchContext>
 800a384:	f04f 0000 	mov.w	r0, #0
 800a388:	f380 8811 	msr	BASEPRI, r0
 800a38c:	bc09      	pop	{r0, r3}
 800a38e:	6819      	ldr	r1, [r3, #0]
 800a390:	6808      	ldr	r0, [r1, #0]
 800a392:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a396:	f01e 0f10 	tst.w	lr, #16
 800a39a:	bf08      	it	eq
 800a39c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a3a0:	f380 8809 	msr	PSP, r0
 800a3a4:	f3bf 8f6f 	isb	sy
 800a3a8:	4770      	bx	lr
 800a3aa:	bf00      	nop
 800a3ac:	f3af 8000 	nop.w

0800a3b0 <pxCurrentTCBConst>:
 800a3b0:	20000240 	.word	0x20000240
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a3b4:	bf00      	nop
 800a3b6:	bf00      	nop

0800a3b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b082      	sub	sp, #8
 800a3bc:	af00      	add	r7, sp, #0
	__asm volatile
 800a3be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3c2:	f383 8811 	msr	BASEPRI, r3
 800a3c6:	f3bf 8f6f 	isb	sy
 800a3ca:	f3bf 8f4f 	dsb	sy
 800a3ce:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a3d0:	f7fe ffd4 	bl	800937c <xTaskIncrementTick>
 800a3d4:	4603      	mov	r3, r0
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d003      	beq.n	800a3e2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a3da:	4b06      	ldr	r3, [pc, #24]	; (800a3f4 <SysTick_Handler+0x3c>)
 800a3dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3e0:	601a      	str	r2, [r3, #0]
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a3e6:	683b      	ldr	r3, [r7, #0]
 800a3e8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800a3ec:	bf00      	nop
 800a3ee:	3708      	adds	r7, #8
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	bd80      	pop	{r7, pc}
 800a3f4:	e000ed04 	.word	0xe000ed04

0800a3f8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a3f8:	b480      	push	{r7}
 800a3fa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a3fc:	4b0b      	ldr	r3, [pc, #44]	; (800a42c <vPortSetupTimerInterrupt+0x34>)
 800a3fe:	2200      	movs	r2, #0
 800a400:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a402:	4b0b      	ldr	r3, [pc, #44]	; (800a430 <vPortSetupTimerInterrupt+0x38>)
 800a404:	2200      	movs	r2, #0
 800a406:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a408:	4b0a      	ldr	r3, [pc, #40]	; (800a434 <vPortSetupTimerInterrupt+0x3c>)
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	4a0a      	ldr	r2, [pc, #40]	; (800a438 <vPortSetupTimerInterrupt+0x40>)
 800a40e:	fba2 2303 	umull	r2, r3, r2, r3
 800a412:	099b      	lsrs	r3, r3, #6
 800a414:	4a09      	ldr	r2, [pc, #36]	; (800a43c <vPortSetupTimerInterrupt+0x44>)
 800a416:	3b01      	subs	r3, #1
 800a418:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a41a:	4b04      	ldr	r3, [pc, #16]	; (800a42c <vPortSetupTimerInterrupt+0x34>)
 800a41c:	2207      	movs	r2, #7
 800a41e:	601a      	str	r2, [r3, #0]
}
 800a420:	bf00      	nop
 800a422:	46bd      	mov	sp, r7
 800a424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a428:	4770      	bx	lr
 800a42a:	bf00      	nop
 800a42c:	e000e010 	.word	0xe000e010
 800a430:	e000e018 	.word	0xe000e018
 800a434:	2000004c 	.word	0x2000004c
 800a438:	10624dd3 	.word	0x10624dd3
 800a43c:	e000e014 	.word	0xe000e014

0800a440 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a440:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a450 <vPortEnableVFP+0x10>
 800a444:	6801      	ldr	r1, [r0, #0]
 800a446:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a44a:	6001      	str	r1, [r0, #0]
 800a44c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a44e:	bf00      	nop
 800a450:	e000ed88 	.word	0xe000ed88

0800a454 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a454:	b480      	push	{r7}
 800a456:	b085      	sub	sp, #20
 800a458:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a45a:	f3ef 8305 	mrs	r3, IPSR
 800a45e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	2b0f      	cmp	r3, #15
 800a464:	d913      	bls.n	800a48e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a466:	4a16      	ldr	r2, [pc, #88]	; (800a4c0 <vPortValidateInterruptPriority+0x6c>)
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	4413      	add	r3, r2
 800a46c:	781b      	ldrb	r3, [r3, #0]
 800a46e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a470:	4b14      	ldr	r3, [pc, #80]	; (800a4c4 <vPortValidateInterruptPriority+0x70>)
 800a472:	781b      	ldrb	r3, [r3, #0]
 800a474:	7afa      	ldrb	r2, [r7, #11]
 800a476:	429a      	cmp	r2, r3
 800a478:	d209      	bcs.n	800a48e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800a47a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a47e:	f383 8811 	msr	BASEPRI, r3
 800a482:	f3bf 8f6f 	isb	sy
 800a486:	f3bf 8f4f 	dsb	sy
 800a48a:	607b      	str	r3, [r7, #4]
 800a48c:	e7fe      	b.n	800a48c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a48e:	4b0e      	ldr	r3, [pc, #56]	; (800a4c8 <vPortValidateInterruptPriority+0x74>)
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a496:	4b0d      	ldr	r3, [pc, #52]	; (800a4cc <vPortValidateInterruptPriority+0x78>)
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	429a      	cmp	r2, r3
 800a49c:	d909      	bls.n	800a4b2 <vPortValidateInterruptPriority+0x5e>
 800a49e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4a2:	f383 8811 	msr	BASEPRI, r3
 800a4a6:	f3bf 8f6f 	isb	sy
 800a4aa:	f3bf 8f4f 	dsb	sy
 800a4ae:	603b      	str	r3, [r7, #0]
 800a4b0:	e7fe      	b.n	800a4b0 <vPortValidateInterruptPriority+0x5c>
	}
 800a4b2:	bf00      	nop
 800a4b4:	3714      	adds	r7, #20
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4bc:	4770      	bx	lr
 800a4be:	bf00      	nop
 800a4c0:	e000e3f0 	.word	0xe000e3f0
 800a4c4:	2000036c 	.word	0x2000036c
 800a4c8:	e000ed0c 	.word	0xe000ed0c
 800a4cc:	20000370 	.word	0x20000370

0800a4d0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b08a      	sub	sp, #40	; 0x28
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a4d8:	2300      	movs	r3, #0
 800a4da:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a4dc:	f7fe fe82 	bl	80091e4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a4e0:	4b59      	ldr	r3, [pc, #356]	; (800a648 <pvPortMalloc+0x178>)
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d101      	bne.n	800a4ec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a4e8:	f000 f910 	bl	800a70c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a4ec:	4b57      	ldr	r3, [pc, #348]	; (800a64c <pvPortMalloc+0x17c>)
 800a4ee:	681a      	ldr	r2, [r3, #0]
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	4013      	ands	r3, r2
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	f040 808c 	bne.w	800a612 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d01c      	beq.n	800a53a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800a500:	2208      	movs	r2, #8
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	4413      	add	r3, r2
 800a506:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	f003 0307 	and.w	r3, r3, #7
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d013      	beq.n	800a53a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	f023 0307 	bic.w	r3, r3, #7
 800a518:	3308      	adds	r3, #8
 800a51a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	f003 0307 	and.w	r3, r3, #7
 800a522:	2b00      	cmp	r3, #0
 800a524:	d009      	beq.n	800a53a <pvPortMalloc+0x6a>
 800a526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a52a:	f383 8811 	msr	BASEPRI, r3
 800a52e:	f3bf 8f6f 	isb	sy
 800a532:	f3bf 8f4f 	dsb	sy
 800a536:	617b      	str	r3, [r7, #20]
 800a538:	e7fe      	b.n	800a538 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d068      	beq.n	800a612 <pvPortMalloc+0x142>
 800a540:	4b43      	ldr	r3, [pc, #268]	; (800a650 <pvPortMalloc+0x180>)
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	687a      	ldr	r2, [r7, #4]
 800a546:	429a      	cmp	r2, r3
 800a548:	d863      	bhi.n	800a612 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a54a:	4b42      	ldr	r3, [pc, #264]	; (800a654 <pvPortMalloc+0x184>)
 800a54c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a54e:	4b41      	ldr	r3, [pc, #260]	; (800a654 <pvPortMalloc+0x184>)
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a554:	e004      	b.n	800a560 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800a556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a558:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a55a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a562:	685b      	ldr	r3, [r3, #4]
 800a564:	687a      	ldr	r2, [r7, #4]
 800a566:	429a      	cmp	r2, r3
 800a568:	d903      	bls.n	800a572 <pvPortMalloc+0xa2>
 800a56a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d1f1      	bne.n	800a556 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a572:	4b35      	ldr	r3, [pc, #212]	; (800a648 <pvPortMalloc+0x178>)
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a578:	429a      	cmp	r2, r3
 800a57a:	d04a      	beq.n	800a612 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a57c:	6a3b      	ldr	r3, [r7, #32]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	2208      	movs	r2, #8
 800a582:	4413      	add	r3, r2
 800a584:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a588:	681a      	ldr	r2, [r3, #0]
 800a58a:	6a3b      	ldr	r3, [r7, #32]
 800a58c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a58e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a590:	685a      	ldr	r2, [r3, #4]
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	1ad2      	subs	r2, r2, r3
 800a596:	2308      	movs	r3, #8
 800a598:	005b      	lsls	r3, r3, #1
 800a59a:	429a      	cmp	r2, r3
 800a59c:	d91e      	bls.n	800a5dc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a59e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	4413      	add	r3, r2
 800a5a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a5a6:	69bb      	ldr	r3, [r7, #24]
 800a5a8:	f003 0307 	and.w	r3, r3, #7
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d009      	beq.n	800a5c4 <pvPortMalloc+0xf4>
 800a5b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5b4:	f383 8811 	msr	BASEPRI, r3
 800a5b8:	f3bf 8f6f 	isb	sy
 800a5bc:	f3bf 8f4f 	dsb	sy
 800a5c0:	613b      	str	r3, [r7, #16]
 800a5c2:	e7fe      	b.n	800a5c2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a5c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5c6:	685a      	ldr	r2, [r3, #4]
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	1ad2      	subs	r2, r2, r3
 800a5cc:	69bb      	ldr	r3, [r7, #24]
 800a5ce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a5d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5d2:	687a      	ldr	r2, [r7, #4]
 800a5d4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a5d6:	69b8      	ldr	r0, [r7, #24]
 800a5d8:	f000 f8fa 	bl	800a7d0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a5dc:	4b1c      	ldr	r3, [pc, #112]	; (800a650 <pvPortMalloc+0x180>)
 800a5de:	681a      	ldr	r2, [r3, #0]
 800a5e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5e2:	685b      	ldr	r3, [r3, #4]
 800a5e4:	1ad3      	subs	r3, r2, r3
 800a5e6:	4a1a      	ldr	r2, [pc, #104]	; (800a650 <pvPortMalloc+0x180>)
 800a5e8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a5ea:	4b19      	ldr	r3, [pc, #100]	; (800a650 <pvPortMalloc+0x180>)
 800a5ec:	681a      	ldr	r2, [r3, #0]
 800a5ee:	4b1a      	ldr	r3, [pc, #104]	; (800a658 <pvPortMalloc+0x188>)
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	429a      	cmp	r2, r3
 800a5f4:	d203      	bcs.n	800a5fe <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a5f6:	4b16      	ldr	r3, [pc, #88]	; (800a650 <pvPortMalloc+0x180>)
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	4a17      	ldr	r2, [pc, #92]	; (800a658 <pvPortMalloc+0x188>)
 800a5fc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a5fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a600:	685a      	ldr	r2, [r3, #4]
 800a602:	4b12      	ldr	r3, [pc, #72]	; (800a64c <pvPortMalloc+0x17c>)
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	431a      	orrs	r2, r3
 800a608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a60a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a60c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a60e:	2200      	movs	r2, #0
 800a610:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a612:	f7fe fdf5 	bl	8009200 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800a616:	69fb      	ldr	r3, [r7, #28]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d101      	bne.n	800a620 <pvPortMalloc+0x150>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800a61c:	f005 fda3 	bl	8010166 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a620:	69fb      	ldr	r3, [r7, #28]
 800a622:	f003 0307 	and.w	r3, r3, #7
 800a626:	2b00      	cmp	r3, #0
 800a628:	d009      	beq.n	800a63e <pvPortMalloc+0x16e>
 800a62a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a62e:	f383 8811 	msr	BASEPRI, r3
 800a632:	f3bf 8f6f 	isb	sy
 800a636:	f3bf 8f4f 	dsb	sy
 800a63a:	60fb      	str	r3, [r7, #12]
 800a63c:	e7fe      	b.n	800a63c <pvPortMalloc+0x16c>
	return pvReturn;
 800a63e:	69fb      	ldr	r3, [r7, #28]
}
 800a640:	4618      	mov	r0, r3
 800a642:	3728      	adds	r7, #40	; 0x28
 800a644:	46bd      	mov	sp, r7
 800a646:	bd80      	pop	{r7, pc}
 800a648:	20006524 	.word	0x20006524
 800a64c:	20006530 	.word	0x20006530
 800a650:	20006528 	.word	0x20006528
 800a654:	2000651c 	.word	0x2000651c
 800a658:	2000652c 	.word	0x2000652c

0800a65c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b086      	sub	sp, #24
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d046      	beq.n	800a6fc <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a66e:	2308      	movs	r3, #8
 800a670:	425b      	negs	r3, r3
 800a672:	697a      	ldr	r2, [r7, #20]
 800a674:	4413      	add	r3, r2
 800a676:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a678:	697b      	ldr	r3, [r7, #20]
 800a67a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a67c:	693b      	ldr	r3, [r7, #16]
 800a67e:	685a      	ldr	r2, [r3, #4]
 800a680:	4b20      	ldr	r3, [pc, #128]	; (800a704 <vPortFree+0xa8>)
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	4013      	ands	r3, r2
 800a686:	2b00      	cmp	r3, #0
 800a688:	d109      	bne.n	800a69e <vPortFree+0x42>
 800a68a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a68e:	f383 8811 	msr	BASEPRI, r3
 800a692:	f3bf 8f6f 	isb	sy
 800a696:	f3bf 8f4f 	dsb	sy
 800a69a:	60fb      	str	r3, [r7, #12]
 800a69c:	e7fe      	b.n	800a69c <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a69e:	693b      	ldr	r3, [r7, #16]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d009      	beq.n	800a6ba <vPortFree+0x5e>
 800a6a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6aa:	f383 8811 	msr	BASEPRI, r3
 800a6ae:	f3bf 8f6f 	isb	sy
 800a6b2:	f3bf 8f4f 	dsb	sy
 800a6b6:	60bb      	str	r3, [r7, #8]
 800a6b8:	e7fe      	b.n	800a6b8 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a6ba:	693b      	ldr	r3, [r7, #16]
 800a6bc:	685a      	ldr	r2, [r3, #4]
 800a6be:	4b11      	ldr	r3, [pc, #68]	; (800a704 <vPortFree+0xa8>)
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	4013      	ands	r3, r2
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d019      	beq.n	800a6fc <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a6c8:	693b      	ldr	r3, [r7, #16]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d115      	bne.n	800a6fc <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a6d0:	693b      	ldr	r3, [r7, #16]
 800a6d2:	685a      	ldr	r2, [r3, #4]
 800a6d4:	4b0b      	ldr	r3, [pc, #44]	; (800a704 <vPortFree+0xa8>)
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	43db      	mvns	r3, r3
 800a6da:	401a      	ands	r2, r3
 800a6dc:	693b      	ldr	r3, [r7, #16]
 800a6de:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a6e0:	f7fe fd80 	bl	80091e4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a6e4:	693b      	ldr	r3, [r7, #16]
 800a6e6:	685a      	ldr	r2, [r3, #4]
 800a6e8:	4b07      	ldr	r3, [pc, #28]	; (800a708 <vPortFree+0xac>)
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	4413      	add	r3, r2
 800a6ee:	4a06      	ldr	r2, [pc, #24]	; (800a708 <vPortFree+0xac>)
 800a6f0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a6f2:	6938      	ldr	r0, [r7, #16]
 800a6f4:	f000 f86c 	bl	800a7d0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a6f8:	f7fe fd82 	bl	8009200 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a6fc:	bf00      	nop
 800a6fe:	3718      	adds	r7, #24
 800a700:	46bd      	mov	sp, r7
 800a702:	bd80      	pop	{r7, pc}
 800a704:	20006530 	.word	0x20006530
 800a708:	20006528 	.word	0x20006528

0800a70c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a70c:	b480      	push	{r7}
 800a70e:	b085      	sub	sp, #20
 800a710:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a712:	f246 13a8 	movw	r3, #25000	; 0x61a8
 800a716:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a718:	4b27      	ldr	r3, [pc, #156]	; (800a7b8 <prvHeapInit+0xac>)
 800a71a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	f003 0307 	and.w	r3, r3, #7
 800a722:	2b00      	cmp	r3, #0
 800a724:	d00c      	beq.n	800a740 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	3307      	adds	r3, #7
 800a72a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	f023 0307 	bic.w	r3, r3, #7
 800a732:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a734:	68ba      	ldr	r2, [r7, #8]
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	1ad3      	subs	r3, r2, r3
 800a73a:	4a1f      	ldr	r2, [pc, #124]	; (800a7b8 <prvHeapInit+0xac>)
 800a73c:	4413      	add	r3, r2
 800a73e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a744:	4a1d      	ldr	r2, [pc, #116]	; (800a7bc <prvHeapInit+0xb0>)
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a74a:	4b1c      	ldr	r3, [pc, #112]	; (800a7bc <prvHeapInit+0xb0>)
 800a74c:	2200      	movs	r2, #0
 800a74e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	68ba      	ldr	r2, [r7, #8]
 800a754:	4413      	add	r3, r2
 800a756:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a758:	2208      	movs	r2, #8
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	1a9b      	subs	r3, r3, r2
 800a75e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	f023 0307 	bic.w	r3, r3, #7
 800a766:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	4a15      	ldr	r2, [pc, #84]	; (800a7c0 <prvHeapInit+0xb4>)
 800a76c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a76e:	4b14      	ldr	r3, [pc, #80]	; (800a7c0 <prvHeapInit+0xb4>)
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	2200      	movs	r2, #0
 800a774:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a776:	4b12      	ldr	r3, [pc, #72]	; (800a7c0 <prvHeapInit+0xb4>)
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	2200      	movs	r2, #0
 800a77c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a782:	683b      	ldr	r3, [r7, #0]
 800a784:	68fa      	ldr	r2, [r7, #12]
 800a786:	1ad2      	subs	r2, r2, r3
 800a788:	683b      	ldr	r3, [r7, #0]
 800a78a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a78c:	4b0c      	ldr	r3, [pc, #48]	; (800a7c0 <prvHeapInit+0xb4>)
 800a78e:	681a      	ldr	r2, [r3, #0]
 800a790:	683b      	ldr	r3, [r7, #0]
 800a792:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a794:	683b      	ldr	r3, [r7, #0]
 800a796:	685b      	ldr	r3, [r3, #4]
 800a798:	4a0a      	ldr	r2, [pc, #40]	; (800a7c4 <prvHeapInit+0xb8>)
 800a79a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a79c:	683b      	ldr	r3, [r7, #0]
 800a79e:	685b      	ldr	r3, [r3, #4]
 800a7a0:	4a09      	ldr	r2, [pc, #36]	; (800a7c8 <prvHeapInit+0xbc>)
 800a7a2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a7a4:	4b09      	ldr	r3, [pc, #36]	; (800a7cc <prvHeapInit+0xc0>)
 800a7a6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a7aa:	601a      	str	r2, [r3, #0]
}
 800a7ac:	bf00      	nop
 800a7ae:	3714      	adds	r7, #20
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b6:	4770      	bx	lr
 800a7b8:	20000374 	.word	0x20000374
 800a7bc:	2000651c 	.word	0x2000651c
 800a7c0:	20006524 	.word	0x20006524
 800a7c4:	2000652c 	.word	0x2000652c
 800a7c8:	20006528 	.word	0x20006528
 800a7cc:	20006530 	.word	0x20006530

0800a7d0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a7d0:	b480      	push	{r7}
 800a7d2:	b085      	sub	sp, #20
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a7d8:	4b28      	ldr	r3, [pc, #160]	; (800a87c <prvInsertBlockIntoFreeList+0xac>)
 800a7da:	60fb      	str	r3, [r7, #12]
 800a7dc:	e002      	b.n	800a7e4 <prvInsertBlockIntoFreeList+0x14>
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	60fb      	str	r3, [r7, #12]
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	687a      	ldr	r2, [r7, #4]
 800a7ea:	429a      	cmp	r2, r3
 800a7ec:	d8f7      	bhi.n	800a7de <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	685b      	ldr	r3, [r3, #4]
 800a7f6:	68ba      	ldr	r2, [r7, #8]
 800a7f8:	4413      	add	r3, r2
 800a7fa:	687a      	ldr	r2, [r7, #4]
 800a7fc:	429a      	cmp	r2, r3
 800a7fe:	d108      	bne.n	800a812 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	685a      	ldr	r2, [r3, #4]
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	685b      	ldr	r3, [r3, #4]
 800a808:	441a      	add	r2, r3
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	685b      	ldr	r3, [r3, #4]
 800a81a:	68ba      	ldr	r2, [r7, #8]
 800a81c:	441a      	add	r2, r3
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	429a      	cmp	r2, r3
 800a824:	d118      	bne.n	800a858 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	681a      	ldr	r2, [r3, #0]
 800a82a:	4b15      	ldr	r3, [pc, #84]	; (800a880 <prvInsertBlockIntoFreeList+0xb0>)
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	429a      	cmp	r2, r3
 800a830:	d00d      	beq.n	800a84e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	685a      	ldr	r2, [r3, #4]
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	685b      	ldr	r3, [r3, #4]
 800a83c:	441a      	add	r2, r3
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	681a      	ldr	r2, [r3, #0]
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	601a      	str	r2, [r3, #0]
 800a84c:	e008      	b.n	800a860 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a84e:	4b0c      	ldr	r3, [pc, #48]	; (800a880 <prvInsertBlockIntoFreeList+0xb0>)
 800a850:	681a      	ldr	r2, [r3, #0]
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	601a      	str	r2, [r3, #0]
 800a856:	e003      	b.n	800a860 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	681a      	ldr	r2, [r3, #0]
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a860:	68fa      	ldr	r2, [r7, #12]
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	429a      	cmp	r2, r3
 800a866:	d002      	beq.n	800a86e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	687a      	ldr	r2, [r7, #4]
 800a86c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a86e:	bf00      	nop
 800a870:	3714      	adds	r7, #20
 800a872:	46bd      	mov	sp, r7
 800a874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a878:	4770      	bx	lr
 800a87a:	bf00      	nop
 800a87c:	2000651c 	.word	0x2000651c
 800a880:	20006524 	.word	0x20006524

0800a884 <FINGER_USART_IrqHandler>:
char FINGER_UART_RX_Buffer[FINGER_UART_RX_BUFFER_SIZE];
size_t finger_write, finger_len, finger_tocopy;
uint8_t *finger_ptr;

void FINGER_USART_IrqHandler(UART_HandleTypeDef *huart, DMA_HandleTypeDef *hdma)
{
 800a884:	b580      	push	{r7, lr}
 800a886:	b084      	sub	sp, #16
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
 800a88c:	6039      	str	r1, [r7, #0]
	if (huart->Instance->SR & UART_FLAG_IDLE) /* if Idle flag is set */
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	f003 0310 	and.w	r3, r3, #16
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d016      	beq.n	800a8ca <FINGER_USART_IrqHandler+0x46>
	{
		__HAL_UART_CLEAR_IDLEFLAG(huart);	 /* Clear idle flag */
 800a89c:	2300      	movs	r3, #0
 800a89e:	60fb      	str	r3, [r7, #12]
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	60fb      	str	r3, [r7, #12]
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	685b      	ldr	r3, [r3, #4]
 800a8ae:	60fb      	str	r3, [r7, #12]
 800a8b0:	68fb      	ldr	r3, [r7, #12]
		__HAL_DMA_DISABLE(hdma);			 /* Disabling DMA will force transfer complete interrupt if enabled */
 800a8b2:	683b      	ldr	r3, [r7, #0]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	681a      	ldr	r2, [r3, #0]
 800a8b8:	683b      	ldr	r3, [r7, #0]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	f022 0201 	bic.w	r2, r2, #1
 800a8c0:	601a      	str	r2, [r3, #0]
		FINGER_DMA_IrqHandler(hdma, huart);
 800a8c2:	6879      	ldr	r1, [r7, #4]
 800a8c4:	6838      	ldr	r0, [r7, #0]
 800a8c6:	f000 f805 	bl	800a8d4 <FINGER_DMA_IrqHandler>
	}
}
 800a8ca:	bf00      	nop
 800a8cc:	3710      	adds	r7, #16
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	bd80      	pop	{r7, pc}
	...

0800a8d4 <FINGER_DMA_IrqHandler>:

void FINGER_DMA_IrqHandler(DMA_HandleTypeDef *hdma, UART_HandleTypeDef *huart)
{
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b082      	sub	sp, #8
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
 800a8dc:	6039      	str	r1, [r7, #0]
	if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET) // if the source is TC
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	f003 0310 	and.w	r3, r3, #16
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	f000 8211 	beq.w	800ad10 <FINGER_DMA_IrqHandler+0x43c>
	{
		/* Clear the transfer complete flag */
		__HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	461a      	mov	r2, r3
 800a8f4:	4b99      	ldr	r3, [pc, #612]	; (800ab5c <FINGER_DMA_IrqHandler+0x288>)
 800a8f6:	429a      	cmp	r2, r3
 800a8f8:	d960      	bls.n	800a9bc <FINGER_DMA_IrqHandler+0xe8>
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	4a98      	ldr	r2, [pc, #608]	; (800ab60 <FINGER_DMA_IrqHandler+0x28c>)
 800a900:	4293      	cmp	r3, r2
 800a902:	d057      	beq.n	800a9b4 <FINGER_DMA_IrqHandler+0xe0>
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	4a96      	ldr	r2, [pc, #600]	; (800ab64 <FINGER_DMA_IrqHandler+0x290>)
 800a90a:	4293      	cmp	r3, r2
 800a90c:	d050      	beq.n	800a9b0 <FINGER_DMA_IrqHandler+0xdc>
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	4a95      	ldr	r2, [pc, #596]	; (800ab68 <FINGER_DMA_IrqHandler+0x294>)
 800a914:	4293      	cmp	r3, r2
 800a916:	d049      	beq.n	800a9ac <FINGER_DMA_IrqHandler+0xd8>
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	4a93      	ldr	r2, [pc, #588]	; (800ab6c <FINGER_DMA_IrqHandler+0x298>)
 800a91e:	4293      	cmp	r3, r2
 800a920:	d042      	beq.n	800a9a8 <FINGER_DMA_IrqHandler+0xd4>
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	4a92      	ldr	r2, [pc, #584]	; (800ab70 <FINGER_DMA_IrqHandler+0x29c>)
 800a928:	4293      	cmp	r3, r2
 800a92a:	d03a      	beq.n	800a9a2 <FINGER_DMA_IrqHandler+0xce>
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	4a90      	ldr	r2, [pc, #576]	; (800ab74 <FINGER_DMA_IrqHandler+0x2a0>)
 800a932:	4293      	cmp	r3, r2
 800a934:	d032      	beq.n	800a99c <FINGER_DMA_IrqHandler+0xc8>
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	4a8f      	ldr	r2, [pc, #572]	; (800ab78 <FINGER_DMA_IrqHandler+0x2a4>)
 800a93c:	4293      	cmp	r3, r2
 800a93e:	d02a      	beq.n	800a996 <FINGER_DMA_IrqHandler+0xc2>
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	4a8d      	ldr	r2, [pc, #564]	; (800ab7c <FINGER_DMA_IrqHandler+0x2a8>)
 800a946:	4293      	cmp	r3, r2
 800a948:	d022      	beq.n	800a990 <FINGER_DMA_IrqHandler+0xbc>
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	4a8c      	ldr	r2, [pc, #560]	; (800ab80 <FINGER_DMA_IrqHandler+0x2ac>)
 800a950:	4293      	cmp	r3, r2
 800a952:	d01a      	beq.n	800a98a <FINGER_DMA_IrqHandler+0xb6>
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	4a8a      	ldr	r2, [pc, #552]	; (800ab84 <FINGER_DMA_IrqHandler+0x2b0>)
 800a95a:	4293      	cmp	r3, r2
 800a95c:	d012      	beq.n	800a984 <FINGER_DMA_IrqHandler+0xb0>
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	4a89      	ldr	r2, [pc, #548]	; (800ab88 <FINGER_DMA_IrqHandler+0x2b4>)
 800a964:	4293      	cmp	r3, r2
 800a966:	d00a      	beq.n	800a97e <FINGER_DMA_IrqHandler+0xaa>
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	4a87      	ldr	r2, [pc, #540]	; (800ab8c <FINGER_DMA_IrqHandler+0x2b8>)
 800a96e:	4293      	cmp	r3, r2
 800a970:	d102      	bne.n	800a978 <FINGER_DMA_IrqHandler+0xa4>
 800a972:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a976:	e01e      	b.n	800a9b6 <FINGER_DMA_IrqHandler+0xe2>
 800a978:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a97c:	e01b      	b.n	800a9b6 <FINGER_DMA_IrqHandler+0xe2>
 800a97e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a982:	e018      	b.n	800a9b6 <FINGER_DMA_IrqHandler+0xe2>
 800a984:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a988:	e015      	b.n	800a9b6 <FINGER_DMA_IrqHandler+0xe2>
 800a98a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a98e:	e012      	b.n	800a9b6 <FINGER_DMA_IrqHandler+0xe2>
 800a990:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a994:	e00f      	b.n	800a9b6 <FINGER_DMA_IrqHandler+0xe2>
 800a996:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a99a:	e00c      	b.n	800a9b6 <FINGER_DMA_IrqHandler+0xe2>
 800a99c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a9a0:	e009      	b.n	800a9b6 <FINGER_DMA_IrqHandler+0xe2>
 800a9a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a9a6:	e006      	b.n	800a9b6 <FINGER_DMA_IrqHandler+0xe2>
 800a9a8:	2320      	movs	r3, #32
 800a9aa:	e004      	b.n	800a9b6 <FINGER_DMA_IrqHandler+0xe2>
 800a9ac:	2320      	movs	r3, #32
 800a9ae:	e002      	b.n	800a9b6 <FINGER_DMA_IrqHandler+0xe2>
 800a9b0:	2320      	movs	r3, #32
 800a9b2:	e000      	b.n	800a9b6 <FINGER_DMA_IrqHandler+0xe2>
 800a9b4:	2320      	movs	r3, #32
 800a9b6:	4a76      	ldr	r2, [pc, #472]	; (800ab90 <FINGER_DMA_IrqHandler+0x2bc>)
 800a9b8:	60d3      	str	r3, [r2, #12]
 800a9ba:	e151      	b.n	800ac60 <FINGER_DMA_IrqHandler+0x38c>
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	461a      	mov	r2, r3
 800a9c2:	4b74      	ldr	r3, [pc, #464]	; (800ab94 <FINGER_DMA_IrqHandler+0x2c0>)
 800a9c4:	429a      	cmp	r2, r3
 800a9c6:	d960      	bls.n	800aa8a <FINGER_DMA_IrqHandler+0x1b6>
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	4a64      	ldr	r2, [pc, #400]	; (800ab60 <FINGER_DMA_IrqHandler+0x28c>)
 800a9ce:	4293      	cmp	r3, r2
 800a9d0:	d057      	beq.n	800aa82 <FINGER_DMA_IrqHandler+0x1ae>
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	4a63      	ldr	r2, [pc, #396]	; (800ab64 <FINGER_DMA_IrqHandler+0x290>)
 800a9d8:	4293      	cmp	r3, r2
 800a9da:	d050      	beq.n	800aa7e <FINGER_DMA_IrqHandler+0x1aa>
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	4a61      	ldr	r2, [pc, #388]	; (800ab68 <FINGER_DMA_IrqHandler+0x294>)
 800a9e2:	4293      	cmp	r3, r2
 800a9e4:	d049      	beq.n	800aa7a <FINGER_DMA_IrqHandler+0x1a6>
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	4a60      	ldr	r2, [pc, #384]	; (800ab6c <FINGER_DMA_IrqHandler+0x298>)
 800a9ec:	4293      	cmp	r3, r2
 800a9ee:	d042      	beq.n	800aa76 <FINGER_DMA_IrqHandler+0x1a2>
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	4a5e      	ldr	r2, [pc, #376]	; (800ab70 <FINGER_DMA_IrqHandler+0x29c>)
 800a9f6:	4293      	cmp	r3, r2
 800a9f8:	d03a      	beq.n	800aa70 <FINGER_DMA_IrqHandler+0x19c>
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	4a5d      	ldr	r2, [pc, #372]	; (800ab74 <FINGER_DMA_IrqHandler+0x2a0>)
 800aa00:	4293      	cmp	r3, r2
 800aa02:	d032      	beq.n	800aa6a <FINGER_DMA_IrqHandler+0x196>
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	4a5b      	ldr	r2, [pc, #364]	; (800ab78 <FINGER_DMA_IrqHandler+0x2a4>)
 800aa0a:	4293      	cmp	r3, r2
 800aa0c:	d02a      	beq.n	800aa64 <FINGER_DMA_IrqHandler+0x190>
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	4a5a      	ldr	r2, [pc, #360]	; (800ab7c <FINGER_DMA_IrqHandler+0x2a8>)
 800aa14:	4293      	cmp	r3, r2
 800aa16:	d022      	beq.n	800aa5e <FINGER_DMA_IrqHandler+0x18a>
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	4a58      	ldr	r2, [pc, #352]	; (800ab80 <FINGER_DMA_IrqHandler+0x2ac>)
 800aa1e:	4293      	cmp	r3, r2
 800aa20:	d01a      	beq.n	800aa58 <FINGER_DMA_IrqHandler+0x184>
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	4a57      	ldr	r2, [pc, #348]	; (800ab84 <FINGER_DMA_IrqHandler+0x2b0>)
 800aa28:	4293      	cmp	r3, r2
 800aa2a:	d012      	beq.n	800aa52 <FINGER_DMA_IrqHandler+0x17e>
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	4a55      	ldr	r2, [pc, #340]	; (800ab88 <FINGER_DMA_IrqHandler+0x2b4>)
 800aa32:	4293      	cmp	r3, r2
 800aa34:	d00a      	beq.n	800aa4c <FINGER_DMA_IrqHandler+0x178>
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	4a54      	ldr	r2, [pc, #336]	; (800ab8c <FINGER_DMA_IrqHandler+0x2b8>)
 800aa3c:	4293      	cmp	r3, r2
 800aa3e:	d102      	bne.n	800aa46 <FINGER_DMA_IrqHandler+0x172>
 800aa40:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800aa44:	e01e      	b.n	800aa84 <FINGER_DMA_IrqHandler+0x1b0>
 800aa46:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800aa4a:	e01b      	b.n	800aa84 <FINGER_DMA_IrqHandler+0x1b0>
 800aa4c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800aa50:	e018      	b.n	800aa84 <FINGER_DMA_IrqHandler+0x1b0>
 800aa52:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800aa56:	e015      	b.n	800aa84 <FINGER_DMA_IrqHandler+0x1b0>
 800aa58:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800aa5c:	e012      	b.n	800aa84 <FINGER_DMA_IrqHandler+0x1b0>
 800aa5e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800aa62:	e00f      	b.n	800aa84 <FINGER_DMA_IrqHandler+0x1b0>
 800aa64:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800aa68:	e00c      	b.n	800aa84 <FINGER_DMA_IrqHandler+0x1b0>
 800aa6a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800aa6e:	e009      	b.n	800aa84 <FINGER_DMA_IrqHandler+0x1b0>
 800aa70:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800aa74:	e006      	b.n	800aa84 <FINGER_DMA_IrqHandler+0x1b0>
 800aa76:	2320      	movs	r3, #32
 800aa78:	e004      	b.n	800aa84 <FINGER_DMA_IrqHandler+0x1b0>
 800aa7a:	2320      	movs	r3, #32
 800aa7c:	e002      	b.n	800aa84 <FINGER_DMA_IrqHandler+0x1b0>
 800aa7e:	2320      	movs	r3, #32
 800aa80:	e000      	b.n	800aa84 <FINGER_DMA_IrqHandler+0x1b0>
 800aa82:	2320      	movs	r3, #32
 800aa84:	4a42      	ldr	r2, [pc, #264]	; (800ab90 <FINGER_DMA_IrqHandler+0x2bc>)
 800aa86:	6093      	str	r3, [r2, #8]
 800aa88:	e0ea      	b.n	800ac60 <FINGER_DMA_IrqHandler+0x38c>
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	461a      	mov	r2, r3
 800aa90:	4b41      	ldr	r3, [pc, #260]	; (800ab98 <FINGER_DMA_IrqHandler+0x2c4>)
 800aa92:	429a      	cmp	r2, r3
 800aa94:	f240 8084 	bls.w	800aba0 <FINGER_DMA_IrqHandler+0x2cc>
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	4a30      	ldr	r2, [pc, #192]	; (800ab60 <FINGER_DMA_IrqHandler+0x28c>)
 800aa9e:	4293      	cmp	r3, r2
 800aaa0:	d057      	beq.n	800ab52 <FINGER_DMA_IrqHandler+0x27e>
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	4a2f      	ldr	r2, [pc, #188]	; (800ab64 <FINGER_DMA_IrqHandler+0x290>)
 800aaa8:	4293      	cmp	r3, r2
 800aaaa:	d050      	beq.n	800ab4e <FINGER_DMA_IrqHandler+0x27a>
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	4a2d      	ldr	r2, [pc, #180]	; (800ab68 <FINGER_DMA_IrqHandler+0x294>)
 800aab2:	4293      	cmp	r3, r2
 800aab4:	d049      	beq.n	800ab4a <FINGER_DMA_IrqHandler+0x276>
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	4a2c      	ldr	r2, [pc, #176]	; (800ab6c <FINGER_DMA_IrqHandler+0x298>)
 800aabc:	4293      	cmp	r3, r2
 800aabe:	d042      	beq.n	800ab46 <FINGER_DMA_IrqHandler+0x272>
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	4a2a      	ldr	r2, [pc, #168]	; (800ab70 <FINGER_DMA_IrqHandler+0x29c>)
 800aac6:	4293      	cmp	r3, r2
 800aac8:	d03a      	beq.n	800ab40 <FINGER_DMA_IrqHandler+0x26c>
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	4a29      	ldr	r2, [pc, #164]	; (800ab74 <FINGER_DMA_IrqHandler+0x2a0>)
 800aad0:	4293      	cmp	r3, r2
 800aad2:	d032      	beq.n	800ab3a <FINGER_DMA_IrqHandler+0x266>
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	4a27      	ldr	r2, [pc, #156]	; (800ab78 <FINGER_DMA_IrqHandler+0x2a4>)
 800aada:	4293      	cmp	r3, r2
 800aadc:	d02a      	beq.n	800ab34 <FINGER_DMA_IrqHandler+0x260>
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	4a26      	ldr	r2, [pc, #152]	; (800ab7c <FINGER_DMA_IrqHandler+0x2a8>)
 800aae4:	4293      	cmp	r3, r2
 800aae6:	d022      	beq.n	800ab2e <FINGER_DMA_IrqHandler+0x25a>
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	4a24      	ldr	r2, [pc, #144]	; (800ab80 <FINGER_DMA_IrqHandler+0x2ac>)
 800aaee:	4293      	cmp	r3, r2
 800aaf0:	d01a      	beq.n	800ab28 <FINGER_DMA_IrqHandler+0x254>
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	4a23      	ldr	r2, [pc, #140]	; (800ab84 <FINGER_DMA_IrqHandler+0x2b0>)
 800aaf8:	4293      	cmp	r3, r2
 800aafa:	d012      	beq.n	800ab22 <FINGER_DMA_IrqHandler+0x24e>
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	4a21      	ldr	r2, [pc, #132]	; (800ab88 <FINGER_DMA_IrqHandler+0x2b4>)
 800ab02:	4293      	cmp	r3, r2
 800ab04:	d00a      	beq.n	800ab1c <FINGER_DMA_IrqHandler+0x248>
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	4a20      	ldr	r2, [pc, #128]	; (800ab8c <FINGER_DMA_IrqHandler+0x2b8>)
 800ab0c:	4293      	cmp	r3, r2
 800ab0e:	d102      	bne.n	800ab16 <FINGER_DMA_IrqHandler+0x242>
 800ab10:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800ab14:	e01e      	b.n	800ab54 <FINGER_DMA_IrqHandler+0x280>
 800ab16:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ab1a:	e01b      	b.n	800ab54 <FINGER_DMA_IrqHandler+0x280>
 800ab1c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800ab20:	e018      	b.n	800ab54 <FINGER_DMA_IrqHandler+0x280>
 800ab22:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800ab26:	e015      	b.n	800ab54 <FINGER_DMA_IrqHandler+0x280>
 800ab28:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800ab2c:	e012      	b.n	800ab54 <FINGER_DMA_IrqHandler+0x280>
 800ab2e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ab32:	e00f      	b.n	800ab54 <FINGER_DMA_IrqHandler+0x280>
 800ab34:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ab38:	e00c      	b.n	800ab54 <FINGER_DMA_IrqHandler+0x280>
 800ab3a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ab3e:	e009      	b.n	800ab54 <FINGER_DMA_IrqHandler+0x280>
 800ab40:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ab44:	e006      	b.n	800ab54 <FINGER_DMA_IrqHandler+0x280>
 800ab46:	2320      	movs	r3, #32
 800ab48:	e004      	b.n	800ab54 <FINGER_DMA_IrqHandler+0x280>
 800ab4a:	2320      	movs	r3, #32
 800ab4c:	e002      	b.n	800ab54 <FINGER_DMA_IrqHandler+0x280>
 800ab4e:	2320      	movs	r3, #32
 800ab50:	e000      	b.n	800ab54 <FINGER_DMA_IrqHandler+0x280>
 800ab52:	2320      	movs	r3, #32
 800ab54:	4a11      	ldr	r2, [pc, #68]	; (800ab9c <FINGER_DMA_IrqHandler+0x2c8>)
 800ab56:	60d3      	str	r3, [r2, #12]
 800ab58:	e082      	b.n	800ac60 <FINGER_DMA_IrqHandler+0x38c>
 800ab5a:	bf00      	nop
 800ab5c:	40026458 	.word	0x40026458
 800ab60:	40026010 	.word	0x40026010
 800ab64:	40026410 	.word	0x40026410
 800ab68:	40026070 	.word	0x40026070
 800ab6c:	40026470 	.word	0x40026470
 800ab70:	40026028 	.word	0x40026028
 800ab74:	40026428 	.word	0x40026428
 800ab78:	40026088 	.word	0x40026088
 800ab7c:	40026488 	.word	0x40026488
 800ab80:	40026040 	.word	0x40026040
 800ab84:	40026440 	.word	0x40026440
 800ab88:	400260a0 	.word	0x400260a0
 800ab8c:	400264a0 	.word	0x400264a0
 800ab90:	40026400 	.word	0x40026400
 800ab94:	400260b8 	.word	0x400260b8
 800ab98:	40026058 	.word	0x40026058
 800ab9c:	40026000 	.word	0x40026000
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	4a5c      	ldr	r2, [pc, #368]	; (800ad18 <FINGER_DMA_IrqHandler+0x444>)
 800aba6:	4293      	cmp	r3, r2
 800aba8:	d057      	beq.n	800ac5a <FINGER_DMA_IrqHandler+0x386>
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	4a5b      	ldr	r2, [pc, #364]	; (800ad1c <FINGER_DMA_IrqHandler+0x448>)
 800abb0:	4293      	cmp	r3, r2
 800abb2:	d050      	beq.n	800ac56 <FINGER_DMA_IrqHandler+0x382>
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	4a59      	ldr	r2, [pc, #356]	; (800ad20 <FINGER_DMA_IrqHandler+0x44c>)
 800abba:	4293      	cmp	r3, r2
 800abbc:	d049      	beq.n	800ac52 <FINGER_DMA_IrqHandler+0x37e>
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	4a58      	ldr	r2, [pc, #352]	; (800ad24 <FINGER_DMA_IrqHandler+0x450>)
 800abc4:	4293      	cmp	r3, r2
 800abc6:	d042      	beq.n	800ac4e <FINGER_DMA_IrqHandler+0x37a>
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	4a56      	ldr	r2, [pc, #344]	; (800ad28 <FINGER_DMA_IrqHandler+0x454>)
 800abce:	4293      	cmp	r3, r2
 800abd0:	d03a      	beq.n	800ac48 <FINGER_DMA_IrqHandler+0x374>
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	4a55      	ldr	r2, [pc, #340]	; (800ad2c <FINGER_DMA_IrqHandler+0x458>)
 800abd8:	4293      	cmp	r3, r2
 800abda:	d032      	beq.n	800ac42 <FINGER_DMA_IrqHandler+0x36e>
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	4a53      	ldr	r2, [pc, #332]	; (800ad30 <FINGER_DMA_IrqHandler+0x45c>)
 800abe2:	4293      	cmp	r3, r2
 800abe4:	d02a      	beq.n	800ac3c <FINGER_DMA_IrqHandler+0x368>
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	4a52      	ldr	r2, [pc, #328]	; (800ad34 <FINGER_DMA_IrqHandler+0x460>)
 800abec:	4293      	cmp	r3, r2
 800abee:	d022      	beq.n	800ac36 <FINGER_DMA_IrqHandler+0x362>
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	4a50      	ldr	r2, [pc, #320]	; (800ad38 <FINGER_DMA_IrqHandler+0x464>)
 800abf6:	4293      	cmp	r3, r2
 800abf8:	d01a      	beq.n	800ac30 <FINGER_DMA_IrqHandler+0x35c>
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	4a4f      	ldr	r2, [pc, #316]	; (800ad3c <FINGER_DMA_IrqHandler+0x468>)
 800ac00:	4293      	cmp	r3, r2
 800ac02:	d012      	beq.n	800ac2a <FINGER_DMA_IrqHandler+0x356>
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	4a4d      	ldr	r2, [pc, #308]	; (800ad40 <FINGER_DMA_IrqHandler+0x46c>)
 800ac0a:	4293      	cmp	r3, r2
 800ac0c:	d00a      	beq.n	800ac24 <FINGER_DMA_IrqHandler+0x350>
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	4a4c      	ldr	r2, [pc, #304]	; (800ad44 <FINGER_DMA_IrqHandler+0x470>)
 800ac14:	4293      	cmp	r3, r2
 800ac16:	d102      	bne.n	800ac1e <FINGER_DMA_IrqHandler+0x34a>
 800ac18:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800ac1c:	e01e      	b.n	800ac5c <FINGER_DMA_IrqHandler+0x388>
 800ac1e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ac22:	e01b      	b.n	800ac5c <FINGER_DMA_IrqHandler+0x388>
 800ac24:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800ac28:	e018      	b.n	800ac5c <FINGER_DMA_IrqHandler+0x388>
 800ac2a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800ac2e:	e015      	b.n	800ac5c <FINGER_DMA_IrqHandler+0x388>
 800ac30:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800ac34:	e012      	b.n	800ac5c <FINGER_DMA_IrqHandler+0x388>
 800ac36:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ac3a:	e00f      	b.n	800ac5c <FINGER_DMA_IrqHandler+0x388>
 800ac3c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ac40:	e00c      	b.n	800ac5c <FINGER_DMA_IrqHandler+0x388>
 800ac42:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ac46:	e009      	b.n	800ac5c <FINGER_DMA_IrqHandler+0x388>
 800ac48:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ac4c:	e006      	b.n	800ac5c <FINGER_DMA_IrqHandler+0x388>
 800ac4e:	2320      	movs	r3, #32
 800ac50:	e004      	b.n	800ac5c <FINGER_DMA_IrqHandler+0x388>
 800ac52:	2320      	movs	r3, #32
 800ac54:	e002      	b.n	800ac5c <FINGER_DMA_IrqHandler+0x388>
 800ac56:	2320      	movs	r3, #32
 800ac58:	e000      	b.n	800ac5c <FINGER_DMA_IrqHandler+0x388>
 800ac5a:	2320      	movs	r3, #32
 800ac5c:	4a3a      	ldr	r2, [pc, #232]	; (800ad48 <FINGER_DMA_IrqHandler+0x474>)
 800ac5e:	6093      	str	r3, [r2, #8]

		/* Get the finger_length of the data */
		finger_len = FINGER_DMA_RX_BUFFER_SIZE - hdma->Instance->NDTR;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	685b      	ldr	r3, [r3, #4]
 800ac66:	f1c3 0332 	rsb	r3, r3, #50	; 0x32
 800ac6a:	4a38      	ldr	r2, [pc, #224]	; (800ad4c <FINGER_DMA_IrqHandler+0x478>)
 800ac6c:	6013      	str	r3, [r2, #0]
		/* Only process if DMA is not empty */
		if(finger_len > 0) {
 800ac6e:	4b37      	ldr	r3, [pc, #220]	; (800ad4c <FINGER_DMA_IrqHandler+0x478>)
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d044      	beq.n	800ad00 <FINGER_DMA_IrqHandler+0x42c>
			/* Reset the buffer */
			FINGER_Reset_Buffer();
 800ac76:	f000 f89d 	bl	800adb4 <FINGER_Reset_Buffer>
			/* Get number of bytes we can copy to the end of buffer */
			finger_tocopy = FINGER_UART_RX_BUFFER_SIZE - finger_write;
 800ac7a:	4b35      	ldr	r3, [pc, #212]	; (800ad50 <FINGER_DMA_IrqHandler+0x47c>)
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	f1c3 0332 	rsb	r3, r3, #50	; 0x32
 800ac82:	4a34      	ldr	r2, [pc, #208]	; (800ad54 <FINGER_DMA_IrqHandler+0x480>)
 800ac84:	6013      	str	r3, [r2, #0]
			/* finger_write received data for UART main buffer for manipulation later */
			finger_ptr = (uint8_t *) FINGER_DMA_RX_Buffer;
 800ac86:	4b34      	ldr	r3, [pc, #208]	; (800ad58 <FINGER_DMA_IrqHandler+0x484>)
 800ac88:	4a34      	ldr	r2, [pc, #208]	; (800ad5c <FINGER_DMA_IrqHandler+0x488>)
 800ac8a:	601a      	str	r2, [r3, #0]
			/* Check how many bytes to copy */
			if (finger_tocopy > finger_len)
 800ac8c:	4b31      	ldr	r3, [pc, #196]	; (800ad54 <FINGER_DMA_IrqHandler+0x480>)
 800ac8e:	681a      	ldr	r2, [r3, #0]
 800ac90:	4b2e      	ldr	r3, [pc, #184]	; (800ad4c <FINGER_DMA_IrqHandler+0x478>)
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	429a      	cmp	r2, r3
 800ac96:	d903      	bls.n	800aca0 <FINGER_DMA_IrqHandler+0x3cc>
			{
				finger_tocopy = finger_len;
 800ac98:	4b2c      	ldr	r3, [pc, #176]	; (800ad4c <FINGER_DMA_IrqHandler+0x478>)
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	4a2d      	ldr	r2, [pc, #180]	; (800ad54 <FINGER_DMA_IrqHandler+0x480>)
 800ac9e:	6013      	str	r3, [r2, #0]
			}
			/* Copy first part */
			memcpy(&FINGER_UART_RX_Buffer[finger_write], finger_ptr, finger_tocopy);
 800aca0:	4b2b      	ldr	r3, [pc, #172]	; (800ad50 <FINGER_DMA_IrqHandler+0x47c>)
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	4a2e      	ldr	r2, [pc, #184]	; (800ad60 <FINGER_DMA_IrqHandler+0x48c>)
 800aca6:	1898      	adds	r0, r3, r2
 800aca8:	4b2b      	ldr	r3, [pc, #172]	; (800ad58 <FINGER_DMA_IrqHandler+0x484>)
 800acaa:	6819      	ldr	r1, [r3, #0]
 800acac:	4b29      	ldr	r3, [pc, #164]	; (800ad54 <FINGER_DMA_IrqHandler+0x480>)
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	461a      	mov	r2, r3
 800acb2:	f007 fc51 	bl	8012558 <memcpy>
			/* Correct values for remaining data */
			finger_write += finger_tocopy;
 800acb6:	4b26      	ldr	r3, [pc, #152]	; (800ad50 <FINGER_DMA_IrqHandler+0x47c>)
 800acb8:	681a      	ldr	r2, [r3, #0]
 800acba:	4b26      	ldr	r3, [pc, #152]	; (800ad54 <FINGER_DMA_IrqHandler+0x480>)
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	4413      	add	r3, r2
 800acc0:	4a23      	ldr	r2, [pc, #140]	; (800ad50 <FINGER_DMA_IrqHandler+0x47c>)
 800acc2:	6013      	str	r3, [r2, #0]
			finger_len -= finger_tocopy;
 800acc4:	4b21      	ldr	r3, [pc, #132]	; (800ad4c <FINGER_DMA_IrqHandler+0x478>)
 800acc6:	681a      	ldr	r2, [r3, #0]
 800acc8:	4b22      	ldr	r3, [pc, #136]	; (800ad54 <FINGER_DMA_IrqHandler+0x480>)
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	1ad3      	subs	r3, r2, r3
 800acce:	4a1f      	ldr	r2, [pc, #124]	; (800ad4c <FINGER_DMA_IrqHandler+0x478>)
 800acd0:	6013      	str	r3, [r2, #0]
			finger_ptr += finger_tocopy;
 800acd2:	4b21      	ldr	r3, [pc, #132]	; (800ad58 <FINGER_DMA_IrqHandler+0x484>)
 800acd4:	681a      	ldr	r2, [r3, #0]
 800acd6:	4b1f      	ldr	r3, [pc, #124]	; (800ad54 <FINGER_DMA_IrqHandler+0x480>)
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	4413      	add	r3, r2
 800acdc:	4a1e      	ldr	r2, [pc, #120]	; (800ad58 <FINGER_DMA_IrqHandler+0x484>)
 800acde:	6013      	str	r3, [r2, #0]

			/* If still data to finger_write for beginning of buffer */
			if (finger_len)
 800ace0:	4b1a      	ldr	r3, [pc, #104]	; (800ad4c <FINGER_DMA_IrqHandler+0x478>)
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d00b      	beq.n	800ad00 <FINGER_DMA_IrqHandler+0x42c>
			{
				/* Don't care if we override Read pointer now */
				memcpy(&FINGER_UART_RX_Buffer[0], finger_ptr, finger_len);
 800ace8:	4b1b      	ldr	r3, [pc, #108]	; (800ad58 <FINGER_DMA_IrqHandler+0x484>)
 800acea:	6819      	ldr	r1, [r3, #0]
 800acec:	4b17      	ldr	r3, [pc, #92]	; (800ad4c <FINGER_DMA_IrqHandler+0x478>)
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	461a      	mov	r2, r3
 800acf2:	481b      	ldr	r0, [pc, #108]	; (800ad60 <FINGER_DMA_IrqHandler+0x48c>)
 800acf4:	f007 fc30 	bl	8012558 <memcpy>
				finger_write = finger_len;
 800acf8:	4b14      	ldr	r3, [pc, #80]	; (800ad4c <FINGER_DMA_IrqHandler+0x478>)
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	4a14      	ldr	r2, [pc, #80]	; (800ad50 <FINGER_DMA_IrqHandler+0x47c>)
 800acfe:	6013      	str	r3, [r2, #0]
			// set null at the end
			//			FINGER_UART_RX_Buffer[finger_write] = '\0';
		}

		/* Start DMA transfer again */
		hdma->Instance->CR |= DMA_SxCR_EN;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	681a      	ldr	r2, [r3, #0]
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	f042 0201 	orr.w	r2, r2, #1
 800ad0e:	601a      	str	r2, [r3, #0]
	}
}
 800ad10:	bf00      	nop
 800ad12:	3708      	adds	r7, #8
 800ad14:	46bd      	mov	sp, r7
 800ad16:	bd80      	pop	{r7, pc}
 800ad18:	40026010 	.word	0x40026010
 800ad1c:	40026410 	.word	0x40026410
 800ad20:	40026070 	.word	0x40026070
 800ad24:	40026470 	.word	0x40026470
 800ad28:	40026028 	.word	0x40026028
 800ad2c:	40026428 	.word	0x40026428
 800ad30:	40026088 	.word	0x40026088
 800ad34:	40026488 	.word	0x40026488
 800ad38:	40026040 	.word	0x40026040
 800ad3c:	40026440 	.word	0x40026440
 800ad40:	400260a0 	.word	0x400260a0
 800ad44:	400264a0 	.word	0x400264a0
 800ad48:	40026000 	.word	0x40026000
 800ad4c:	200068b8 	.word	0x200068b8
 800ad50:	200068f4 	.word	0x200068f4
 800ad54:	200068bc 	.word	0x200068bc
 800ad58:	20006880 	.word	0x20006880
 800ad5c:	200068c0 	.word	0x200068c0
 800ad60:	20006884 	.word	0x20006884

0800ad64 <FINGER_DMA_Init>:

void FINGER_DMA_Init(void){
 800ad64:	b580      	push	{r7, lr}
 800ad66:	af00      	add	r7, sp, #0
	__HAL_UART_ENABLE_IT(&huart4, UART_IT_IDLE);      // enable idle line interrupt
 800ad68:	4b0f      	ldr	r3, [pc, #60]	; (800ada8 <FINGER_DMA_Init+0x44>)
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	68da      	ldr	r2, [r3, #12]
 800ad6e:	4b0e      	ldr	r3, [pc, #56]	; (800ada8 <FINGER_DMA_Init+0x44>)
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	f042 0210 	orr.w	r2, r2, #16
 800ad76:	60da      	str	r2, [r3, #12]
	__HAL_DMA_ENABLE_IT(&hdma_uart4_rx, DMA_IT_TC);  // enable DMA Tx cplt interrupt
 800ad78:	4b0c      	ldr	r3, [pc, #48]	; (800adac <FINGER_DMA_Init+0x48>)
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	681a      	ldr	r2, [r3, #0]
 800ad7e:	4b0b      	ldr	r3, [pc, #44]	; (800adac <FINGER_DMA_Init+0x48>)
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	f042 0210 	orr.w	r2, r2, #16
 800ad86:	601a      	str	r2, [r3, #0]
	__HAL_DMA_DISABLE_IT(&hdma_uart4_rx, DMA_IT_HT); // disable half complete interrupt
 800ad88:	4b08      	ldr	r3, [pc, #32]	; (800adac <FINGER_DMA_Init+0x48>)
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	681a      	ldr	r2, [r3, #0]
 800ad8e:	4b07      	ldr	r3, [pc, #28]	; (800adac <FINGER_DMA_Init+0x48>)
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	f022 0208 	bic.w	r2, r2, #8
 800ad96:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(&huart4, (uint8_t *) FINGER_DMA_RX_Buffer, FINGER_DMA_RX_BUFFER_SIZE);
 800ad98:	2232      	movs	r2, #50	; 0x32
 800ad9a:	4905      	ldr	r1, [pc, #20]	; (800adb0 <FINGER_DMA_Init+0x4c>)
 800ad9c:	4802      	ldr	r0, [pc, #8]	; (800ada8 <FINGER_DMA_Init+0x44>)
 800ad9e:	f7fb fdab 	bl	80068f8 <HAL_UART_Receive_DMA>
}
 800ada2:	bf00      	nop
 800ada4:	bd80      	pop	{r7, pc}
 800ada6:	bf00      	nop
 800ada8:	20008528 	.word	0x20008528
 800adac:	20008280 	.word	0x20008280
 800adb0:	200068c0 	.word	0x200068c0

0800adb4 <FINGER_Reset_Buffer>:

void FINGER_Reset_Buffer(void){
 800adb4:	b580      	push	{r7, lr}
 800adb6:	af00      	add	r7, sp, #0
	// clear rx buffer
	memset(FINGER_UART_RX_Buffer, 0, sizeof(FINGER_UART_RX_Buffer));
 800adb8:	2232      	movs	r2, #50	; 0x32
 800adba:	2100      	movs	r1, #0
 800adbc:	4803      	ldr	r0, [pc, #12]	; (800adcc <FINGER_Reset_Buffer+0x18>)
 800adbe:	f007 fbd6 	bl	801256e <memset>
	// set index back to first
	finger_write = 0;
 800adc2:	4b03      	ldr	r3, [pc, #12]	; (800add0 <FINGER_Reset_Buffer+0x1c>)
 800adc4:	2200      	movs	r2, #0
 800adc6:	601a      	str	r2, [r3, #0]
}
 800adc8:	bf00      	nop
 800adca:	bd80      	pop	{r7, pc}
 800adcc:	20006884 	.word	0x20006884
 800add0:	200068f4 	.word	0x200068f4

0800add4 <SIMCOM_USART_IrqHandler>:
char SIMCOM_UART_RX_Buffer[SIMCOM_UART_RX_BUFFER_SIZE];
size_t simcom_write, simcom_len, simcom_tocopy;
uint8_t *simcom_ptr;

void SIMCOM_USART_IrqHandler(UART_HandleTypeDef *huart, DMA_HandleTypeDef *hdma)
{
 800add4:	b580      	push	{r7, lr}
 800add6:	b084      	sub	sp, #16
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
 800addc:	6039      	str	r1, [r7, #0]
	if (huart->Instance->SR & UART_FLAG_IDLE) /* if Idle flag is set */
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	f003 0310 	and.w	r3, r3, #16
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d016      	beq.n	800ae1a <SIMCOM_USART_IrqHandler+0x46>
	{
		__HAL_UART_CLEAR_IDLEFLAG (huart);	 /* Clear idle flag */
 800adec:	2300      	movs	r3, #0
 800adee:	60fb      	str	r3, [r7, #12]
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	60fb      	str	r3, [r7, #12]
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	685b      	ldr	r3, [r3, #4]
 800adfe:	60fb      	str	r3, [r7, #12]
 800ae00:	68fb      	ldr	r3, [r7, #12]
		__HAL_DMA_DISABLE(hdma);						 /* Disabling DMA will force transfer complete interrupt if enabled */
 800ae02:	683b      	ldr	r3, [r7, #0]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	681a      	ldr	r2, [r3, #0]
 800ae08:	683b      	ldr	r3, [r7, #0]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	f022 0201 	bic.w	r2, r2, #1
 800ae10:	601a      	str	r2, [r3, #0]
		SIMCOM_DMA_IrqHandler(hdma, huart);
 800ae12:	6879      	ldr	r1, [r7, #4]
 800ae14:	6838      	ldr	r0, [r7, #0]
 800ae16:	f000 f805 	bl	800ae24 <SIMCOM_DMA_IrqHandler>
	}
}
 800ae1a:	bf00      	nop
 800ae1c:	3710      	adds	r7, #16
 800ae1e:	46bd      	mov	sp, r7
 800ae20:	bd80      	pop	{r7, pc}
	...

0800ae24 <SIMCOM_DMA_IrqHandler>:

void SIMCOM_DMA_IrqHandler(DMA_HandleTypeDef *hdma, UART_HandleTypeDef *huart)
{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	b082      	sub	sp, #8
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	6078      	str	r0, [r7, #4]
 800ae2c:	6039      	str	r1, [r7, #0]
	if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET) // if the source is TC
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	f003 0310 	and.w	r3, r3, #16
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	f000 8210 	beq.w	800b25e <SIMCOM_DMA_IrqHandler+0x43a>
	{
		/* Clear the transfer complete flag */
		__HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	461a      	mov	r2, r3
 800ae44:	4b99      	ldr	r3, [pc, #612]	; (800b0ac <SIMCOM_DMA_IrqHandler+0x288>)
 800ae46:	429a      	cmp	r2, r3
 800ae48:	d960      	bls.n	800af0c <SIMCOM_DMA_IrqHandler+0xe8>
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	4a98      	ldr	r2, [pc, #608]	; (800b0b0 <SIMCOM_DMA_IrqHandler+0x28c>)
 800ae50:	4293      	cmp	r3, r2
 800ae52:	d057      	beq.n	800af04 <SIMCOM_DMA_IrqHandler+0xe0>
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	4a96      	ldr	r2, [pc, #600]	; (800b0b4 <SIMCOM_DMA_IrqHandler+0x290>)
 800ae5a:	4293      	cmp	r3, r2
 800ae5c:	d050      	beq.n	800af00 <SIMCOM_DMA_IrqHandler+0xdc>
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	4a95      	ldr	r2, [pc, #596]	; (800b0b8 <SIMCOM_DMA_IrqHandler+0x294>)
 800ae64:	4293      	cmp	r3, r2
 800ae66:	d049      	beq.n	800aefc <SIMCOM_DMA_IrqHandler+0xd8>
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	4a93      	ldr	r2, [pc, #588]	; (800b0bc <SIMCOM_DMA_IrqHandler+0x298>)
 800ae6e:	4293      	cmp	r3, r2
 800ae70:	d042      	beq.n	800aef8 <SIMCOM_DMA_IrqHandler+0xd4>
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	4a92      	ldr	r2, [pc, #584]	; (800b0c0 <SIMCOM_DMA_IrqHandler+0x29c>)
 800ae78:	4293      	cmp	r3, r2
 800ae7a:	d03a      	beq.n	800aef2 <SIMCOM_DMA_IrqHandler+0xce>
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	4a90      	ldr	r2, [pc, #576]	; (800b0c4 <SIMCOM_DMA_IrqHandler+0x2a0>)
 800ae82:	4293      	cmp	r3, r2
 800ae84:	d032      	beq.n	800aeec <SIMCOM_DMA_IrqHandler+0xc8>
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	4a8f      	ldr	r2, [pc, #572]	; (800b0c8 <SIMCOM_DMA_IrqHandler+0x2a4>)
 800ae8c:	4293      	cmp	r3, r2
 800ae8e:	d02a      	beq.n	800aee6 <SIMCOM_DMA_IrqHandler+0xc2>
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	4a8d      	ldr	r2, [pc, #564]	; (800b0cc <SIMCOM_DMA_IrqHandler+0x2a8>)
 800ae96:	4293      	cmp	r3, r2
 800ae98:	d022      	beq.n	800aee0 <SIMCOM_DMA_IrqHandler+0xbc>
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	4a8c      	ldr	r2, [pc, #560]	; (800b0d0 <SIMCOM_DMA_IrqHandler+0x2ac>)
 800aea0:	4293      	cmp	r3, r2
 800aea2:	d01a      	beq.n	800aeda <SIMCOM_DMA_IrqHandler+0xb6>
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	4a8a      	ldr	r2, [pc, #552]	; (800b0d4 <SIMCOM_DMA_IrqHandler+0x2b0>)
 800aeaa:	4293      	cmp	r3, r2
 800aeac:	d012      	beq.n	800aed4 <SIMCOM_DMA_IrqHandler+0xb0>
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	4a89      	ldr	r2, [pc, #548]	; (800b0d8 <SIMCOM_DMA_IrqHandler+0x2b4>)
 800aeb4:	4293      	cmp	r3, r2
 800aeb6:	d00a      	beq.n	800aece <SIMCOM_DMA_IrqHandler+0xaa>
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	4a87      	ldr	r2, [pc, #540]	; (800b0dc <SIMCOM_DMA_IrqHandler+0x2b8>)
 800aebe:	4293      	cmp	r3, r2
 800aec0:	d102      	bne.n	800aec8 <SIMCOM_DMA_IrqHandler+0xa4>
 800aec2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800aec6:	e01e      	b.n	800af06 <SIMCOM_DMA_IrqHandler+0xe2>
 800aec8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800aecc:	e01b      	b.n	800af06 <SIMCOM_DMA_IrqHandler+0xe2>
 800aece:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800aed2:	e018      	b.n	800af06 <SIMCOM_DMA_IrqHandler+0xe2>
 800aed4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800aed8:	e015      	b.n	800af06 <SIMCOM_DMA_IrqHandler+0xe2>
 800aeda:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800aede:	e012      	b.n	800af06 <SIMCOM_DMA_IrqHandler+0xe2>
 800aee0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800aee4:	e00f      	b.n	800af06 <SIMCOM_DMA_IrqHandler+0xe2>
 800aee6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800aeea:	e00c      	b.n	800af06 <SIMCOM_DMA_IrqHandler+0xe2>
 800aeec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800aef0:	e009      	b.n	800af06 <SIMCOM_DMA_IrqHandler+0xe2>
 800aef2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800aef6:	e006      	b.n	800af06 <SIMCOM_DMA_IrqHandler+0xe2>
 800aef8:	2320      	movs	r3, #32
 800aefa:	e004      	b.n	800af06 <SIMCOM_DMA_IrqHandler+0xe2>
 800aefc:	2320      	movs	r3, #32
 800aefe:	e002      	b.n	800af06 <SIMCOM_DMA_IrqHandler+0xe2>
 800af00:	2320      	movs	r3, #32
 800af02:	e000      	b.n	800af06 <SIMCOM_DMA_IrqHandler+0xe2>
 800af04:	2320      	movs	r3, #32
 800af06:	4a76      	ldr	r2, [pc, #472]	; (800b0e0 <SIMCOM_DMA_IrqHandler+0x2bc>)
 800af08:	60d3      	str	r3, [r2, #12]
 800af0a:	e151      	b.n	800b1b0 <SIMCOM_DMA_IrqHandler+0x38c>
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	461a      	mov	r2, r3
 800af12:	4b74      	ldr	r3, [pc, #464]	; (800b0e4 <SIMCOM_DMA_IrqHandler+0x2c0>)
 800af14:	429a      	cmp	r2, r3
 800af16:	d960      	bls.n	800afda <SIMCOM_DMA_IrqHandler+0x1b6>
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	4a64      	ldr	r2, [pc, #400]	; (800b0b0 <SIMCOM_DMA_IrqHandler+0x28c>)
 800af1e:	4293      	cmp	r3, r2
 800af20:	d057      	beq.n	800afd2 <SIMCOM_DMA_IrqHandler+0x1ae>
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	4a63      	ldr	r2, [pc, #396]	; (800b0b4 <SIMCOM_DMA_IrqHandler+0x290>)
 800af28:	4293      	cmp	r3, r2
 800af2a:	d050      	beq.n	800afce <SIMCOM_DMA_IrqHandler+0x1aa>
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	4a61      	ldr	r2, [pc, #388]	; (800b0b8 <SIMCOM_DMA_IrqHandler+0x294>)
 800af32:	4293      	cmp	r3, r2
 800af34:	d049      	beq.n	800afca <SIMCOM_DMA_IrqHandler+0x1a6>
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	4a60      	ldr	r2, [pc, #384]	; (800b0bc <SIMCOM_DMA_IrqHandler+0x298>)
 800af3c:	4293      	cmp	r3, r2
 800af3e:	d042      	beq.n	800afc6 <SIMCOM_DMA_IrqHandler+0x1a2>
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	4a5e      	ldr	r2, [pc, #376]	; (800b0c0 <SIMCOM_DMA_IrqHandler+0x29c>)
 800af46:	4293      	cmp	r3, r2
 800af48:	d03a      	beq.n	800afc0 <SIMCOM_DMA_IrqHandler+0x19c>
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	4a5d      	ldr	r2, [pc, #372]	; (800b0c4 <SIMCOM_DMA_IrqHandler+0x2a0>)
 800af50:	4293      	cmp	r3, r2
 800af52:	d032      	beq.n	800afba <SIMCOM_DMA_IrqHandler+0x196>
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	4a5b      	ldr	r2, [pc, #364]	; (800b0c8 <SIMCOM_DMA_IrqHandler+0x2a4>)
 800af5a:	4293      	cmp	r3, r2
 800af5c:	d02a      	beq.n	800afb4 <SIMCOM_DMA_IrqHandler+0x190>
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	4a5a      	ldr	r2, [pc, #360]	; (800b0cc <SIMCOM_DMA_IrqHandler+0x2a8>)
 800af64:	4293      	cmp	r3, r2
 800af66:	d022      	beq.n	800afae <SIMCOM_DMA_IrqHandler+0x18a>
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	4a58      	ldr	r2, [pc, #352]	; (800b0d0 <SIMCOM_DMA_IrqHandler+0x2ac>)
 800af6e:	4293      	cmp	r3, r2
 800af70:	d01a      	beq.n	800afa8 <SIMCOM_DMA_IrqHandler+0x184>
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	4a57      	ldr	r2, [pc, #348]	; (800b0d4 <SIMCOM_DMA_IrqHandler+0x2b0>)
 800af78:	4293      	cmp	r3, r2
 800af7a:	d012      	beq.n	800afa2 <SIMCOM_DMA_IrqHandler+0x17e>
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	4a55      	ldr	r2, [pc, #340]	; (800b0d8 <SIMCOM_DMA_IrqHandler+0x2b4>)
 800af82:	4293      	cmp	r3, r2
 800af84:	d00a      	beq.n	800af9c <SIMCOM_DMA_IrqHandler+0x178>
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	4a54      	ldr	r2, [pc, #336]	; (800b0dc <SIMCOM_DMA_IrqHandler+0x2b8>)
 800af8c:	4293      	cmp	r3, r2
 800af8e:	d102      	bne.n	800af96 <SIMCOM_DMA_IrqHandler+0x172>
 800af90:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800af94:	e01e      	b.n	800afd4 <SIMCOM_DMA_IrqHandler+0x1b0>
 800af96:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800af9a:	e01b      	b.n	800afd4 <SIMCOM_DMA_IrqHandler+0x1b0>
 800af9c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800afa0:	e018      	b.n	800afd4 <SIMCOM_DMA_IrqHandler+0x1b0>
 800afa2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800afa6:	e015      	b.n	800afd4 <SIMCOM_DMA_IrqHandler+0x1b0>
 800afa8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800afac:	e012      	b.n	800afd4 <SIMCOM_DMA_IrqHandler+0x1b0>
 800afae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800afb2:	e00f      	b.n	800afd4 <SIMCOM_DMA_IrqHandler+0x1b0>
 800afb4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800afb8:	e00c      	b.n	800afd4 <SIMCOM_DMA_IrqHandler+0x1b0>
 800afba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800afbe:	e009      	b.n	800afd4 <SIMCOM_DMA_IrqHandler+0x1b0>
 800afc0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800afc4:	e006      	b.n	800afd4 <SIMCOM_DMA_IrqHandler+0x1b0>
 800afc6:	2320      	movs	r3, #32
 800afc8:	e004      	b.n	800afd4 <SIMCOM_DMA_IrqHandler+0x1b0>
 800afca:	2320      	movs	r3, #32
 800afcc:	e002      	b.n	800afd4 <SIMCOM_DMA_IrqHandler+0x1b0>
 800afce:	2320      	movs	r3, #32
 800afd0:	e000      	b.n	800afd4 <SIMCOM_DMA_IrqHandler+0x1b0>
 800afd2:	2320      	movs	r3, #32
 800afd4:	4a42      	ldr	r2, [pc, #264]	; (800b0e0 <SIMCOM_DMA_IrqHandler+0x2bc>)
 800afd6:	6093      	str	r3, [r2, #8]
 800afd8:	e0ea      	b.n	800b1b0 <SIMCOM_DMA_IrqHandler+0x38c>
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	461a      	mov	r2, r3
 800afe0:	4b41      	ldr	r3, [pc, #260]	; (800b0e8 <SIMCOM_DMA_IrqHandler+0x2c4>)
 800afe2:	429a      	cmp	r2, r3
 800afe4:	f240 8084 	bls.w	800b0f0 <SIMCOM_DMA_IrqHandler+0x2cc>
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	4a30      	ldr	r2, [pc, #192]	; (800b0b0 <SIMCOM_DMA_IrqHandler+0x28c>)
 800afee:	4293      	cmp	r3, r2
 800aff0:	d057      	beq.n	800b0a2 <SIMCOM_DMA_IrqHandler+0x27e>
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	4a2f      	ldr	r2, [pc, #188]	; (800b0b4 <SIMCOM_DMA_IrqHandler+0x290>)
 800aff8:	4293      	cmp	r3, r2
 800affa:	d050      	beq.n	800b09e <SIMCOM_DMA_IrqHandler+0x27a>
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	4a2d      	ldr	r2, [pc, #180]	; (800b0b8 <SIMCOM_DMA_IrqHandler+0x294>)
 800b002:	4293      	cmp	r3, r2
 800b004:	d049      	beq.n	800b09a <SIMCOM_DMA_IrqHandler+0x276>
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	4a2c      	ldr	r2, [pc, #176]	; (800b0bc <SIMCOM_DMA_IrqHandler+0x298>)
 800b00c:	4293      	cmp	r3, r2
 800b00e:	d042      	beq.n	800b096 <SIMCOM_DMA_IrqHandler+0x272>
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	4a2a      	ldr	r2, [pc, #168]	; (800b0c0 <SIMCOM_DMA_IrqHandler+0x29c>)
 800b016:	4293      	cmp	r3, r2
 800b018:	d03a      	beq.n	800b090 <SIMCOM_DMA_IrqHandler+0x26c>
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	4a29      	ldr	r2, [pc, #164]	; (800b0c4 <SIMCOM_DMA_IrqHandler+0x2a0>)
 800b020:	4293      	cmp	r3, r2
 800b022:	d032      	beq.n	800b08a <SIMCOM_DMA_IrqHandler+0x266>
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	4a27      	ldr	r2, [pc, #156]	; (800b0c8 <SIMCOM_DMA_IrqHandler+0x2a4>)
 800b02a:	4293      	cmp	r3, r2
 800b02c:	d02a      	beq.n	800b084 <SIMCOM_DMA_IrqHandler+0x260>
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	4a26      	ldr	r2, [pc, #152]	; (800b0cc <SIMCOM_DMA_IrqHandler+0x2a8>)
 800b034:	4293      	cmp	r3, r2
 800b036:	d022      	beq.n	800b07e <SIMCOM_DMA_IrqHandler+0x25a>
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	4a24      	ldr	r2, [pc, #144]	; (800b0d0 <SIMCOM_DMA_IrqHandler+0x2ac>)
 800b03e:	4293      	cmp	r3, r2
 800b040:	d01a      	beq.n	800b078 <SIMCOM_DMA_IrqHandler+0x254>
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	4a23      	ldr	r2, [pc, #140]	; (800b0d4 <SIMCOM_DMA_IrqHandler+0x2b0>)
 800b048:	4293      	cmp	r3, r2
 800b04a:	d012      	beq.n	800b072 <SIMCOM_DMA_IrqHandler+0x24e>
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	4a21      	ldr	r2, [pc, #132]	; (800b0d8 <SIMCOM_DMA_IrqHandler+0x2b4>)
 800b052:	4293      	cmp	r3, r2
 800b054:	d00a      	beq.n	800b06c <SIMCOM_DMA_IrqHandler+0x248>
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	4a20      	ldr	r2, [pc, #128]	; (800b0dc <SIMCOM_DMA_IrqHandler+0x2b8>)
 800b05c:	4293      	cmp	r3, r2
 800b05e:	d102      	bne.n	800b066 <SIMCOM_DMA_IrqHandler+0x242>
 800b060:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b064:	e01e      	b.n	800b0a4 <SIMCOM_DMA_IrqHandler+0x280>
 800b066:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b06a:	e01b      	b.n	800b0a4 <SIMCOM_DMA_IrqHandler+0x280>
 800b06c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b070:	e018      	b.n	800b0a4 <SIMCOM_DMA_IrqHandler+0x280>
 800b072:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b076:	e015      	b.n	800b0a4 <SIMCOM_DMA_IrqHandler+0x280>
 800b078:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b07c:	e012      	b.n	800b0a4 <SIMCOM_DMA_IrqHandler+0x280>
 800b07e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b082:	e00f      	b.n	800b0a4 <SIMCOM_DMA_IrqHandler+0x280>
 800b084:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b088:	e00c      	b.n	800b0a4 <SIMCOM_DMA_IrqHandler+0x280>
 800b08a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b08e:	e009      	b.n	800b0a4 <SIMCOM_DMA_IrqHandler+0x280>
 800b090:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b094:	e006      	b.n	800b0a4 <SIMCOM_DMA_IrqHandler+0x280>
 800b096:	2320      	movs	r3, #32
 800b098:	e004      	b.n	800b0a4 <SIMCOM_DMA_IrqHandler+0x280>
 800b09a:	2320      	movs	r3, #32
 800b09c:	e002      	b.n	800b0a4 <SIMCOM_DMA_IrqHandler+0x280>
 800b09e:	2320      	movs	r3, #32
 800b0a0:	e000      	b.n	800b0a4 <SIMCOM_DMA_IrqHandler+0x280>
 800b0a2:	2320      	movs	r3, #32
 800b0a4:	4a11      	ldr	r2, [pc, #68]	; (800b0ec <SIMCOM_DMA_IrqHandler+0x2c8>)
 800b0a6:	60d3      	str	r3, [r2, #12]
 800b0a8:	e082      	b.n	800b1b0 <SIMCOM_DMA_IrqHandler+0x38c>
 800b0aa:	bf00      	nop
 800b0ac:	40026458 	.word	0x40026458
 800b0b0:	40026010 	.word	0x40026010
 800b0b4:	40026410 	.word	0x40026410
 800b0b8:	40026070 	.word	0x40026070
 800b0bc:	40026470 	.word	0x40026470
 800b0c0:	40026028 	.word	0x40026028
 800b0c4:	40026428 	.word	0x40026428
 800b0c8:	40026088 	.word	0x40026088
 800b0cc:	40026488 	.word	0x40026488
 800b0d0:	40026040 	.word	0x40026040
 800b0d4:	40026440 	.word	0x40026440
 800b0d8:	400260a0 	.word	0x400260a0
 800b0dc:	400264a0 	.word	0x400264a0
 800b0e0:	40026400 	.word	0x40026400
 800b0e4:	400260b8 	.word	0x400260b8
 800b0e8:	40026058 	.word	0x40026058
 800b0ec:	40026000 	.word	0x40026000
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	4a5c      	ldr	r2, [pc, #368]	; (800b268 <SIMCOM_DMA_IrqHandler+0x444>)
 800b0f6:	4293      	cmp	r3, r2
 800b0f8:	d057      	beq.n	800b1aa <SIMCOM_DMA_IrqHandler+0x386>
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	4a5b      	ldr	r2, [pc, #364]	; (800b26c <SIMCOM_DMA_IrqHandler+0x448>)
 800b100:	4293      	cmp	r3, r2
 800b102:	d050      	beq.n	800b1a6 <SIMCOM_DMA_IrqHandler+0x382>
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	4a59      	ldr	r2, [pc, #356]	; (800b270 <SIMCOM_DMA_IrqHandler+0x44c>)
 800b10a:	4293      	cmp	r3, r2
 800b10c:	d049      	beq.n	800b1a2 <SIMCOM_DMA_IrqHandler+0x37e>
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	4a58      	ldr	r2, [pc, #352]	; (800b274 <SIMCOM_DMA_IrqHandler+0x450>)
 800b114:	4293      	cmp	r3, r2
 800b116:	d042      	beq.n	800b19e <SIMCOM_DMA_IrqHandler+0x37a>
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	4a56      	ldr	r2, [pc, #344]	; (800b278 <SIMCOM_DMA_IrqHandler+0x454>)
 800b11e:	4293      	cmp	r3, r2
 800b120:	d03a      	beq.n	800b198 <SIMCOM_DMA_IrqHandler+0x374>
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	4a55      	ldr	r2, [pc, #340]	; (800b27c <SIMCOM_DMA_IrqHandler+0x458>)
 800b128:	4293      	cmp	r3, r2
 800b12a:	d032      	beq.n	800b192 <SIMCOM_DMA_IrqHandler+0x36e>
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	4a53      	ldr	r2, [pc, #332]	; (800b280 <SIMCOM_DMA_IrqHandler+0x45c>)
 800b132:	4293      	cmp	r3, r2
 800b134:	d02a      	beq.n	800b18c <SIMCOM_DMA_IrqHandler+0x368>
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	4a52      	ldr	r2, [pc, #328]	; (800b284 <SIMCOM_DMA_IrqHandler+0x460>)
 800b13c:	4293      	cmp	r3, r2
 800b13e:	d022      	beq.n	800b186 <SIMCOM_DMA_IrqHandler+0x362>
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	4a50      	ldr	r2, [pc, #320]	; (800b288 <SIMCOM_DMA_IrqHandler+0x464>)
 800b146:	4293      	cmp	r3, r2
 800b148:	d01a      	beq.n	800b180 <SIMCOM_DMA_IrqHandler+0x35c>
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	4a4f      	ldr	r2, [pc, #316]	; (800b28c <SIMCOM_DMA_IrqHandler+0x468>)
 800b150:	4293      	cmp	r3, r2
 800b152:	d012      	beq.n	800b17a <SIMCOM_DMA_IrqHandler+0x356>
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	4a4d      	ldr	r2, [pc, #308]	; (800b290 <SIMCOM_DMA_IrqHandler+0x46c>)
 800b15a:	4293      	cmp	r3, r2
 800b15c:	d00a      	beq.n	800b174 <SIMCOM_DMA_IrqHandler+0x350>
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	4a4c      	ldr	r2, [pc, #304]	; (800b294 <SIMCOM_DMA_IrqHandler+0x470>)
 800b164:	4293      	cmp	r3, r2
 800b166:	d102      	bne.n	800b16e <SIMCOM_DMA_IrqHandler+0x34a>
 800b168:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b16c:	e01e      	b.n	800b1ac <SIMCOM_DMA_IrqHandler+0x388>
 800b16e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b172:	e01b      	b.n	800b1ac <SIMCOM_DMA_IrqHandler+0x388>
 800b174:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b178:	e018      	b.n	800b1ac <SIMCOM_DMA_IrqHandler+0x388>
 800b17a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b17e:	e015      	b.n	800b1ac <SIMCOM_DMA_IrqHandler+0x388>
 800b180:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b184:	e012      	b.n	800b1ac <SIMCOM_DMA_IrqHandler+0x388>
 800b186:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b18a:	e00f      	b.n	800b1ac <SIMCOM_DMA_IrqHandler+0x388>
 800b18c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b190:	e00c      	b.n	800b1ac <SIMCOM_DMA_IrqHandler+0x388>
 800b192:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b196:	e009      	b.n	800b1ac <SIMCOM_DMA_IrqHandler+0x388>
 800b198:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b19c:	e006      	b.n	800b1ac <SIMCOM_DMA_IrqHandler+0x388>
 800b19e:	2320      	movs	r3, #32
 800b1a0:	e004      	b.n	800b1ac <SIMCOM_DMA_IrqHandler+0x388>
 800b1a2:	2320      	movs	r3, #32
 800b1a4:	e002      	b.n	800b1ac <SIMCOM_DMA_IrqHandler+0x388>
 800b1a6:	2320      	movs	r3, #32
 800b1a8:	e000      	b.n	800b1ac <SIMCOM_DMA_IrqHandler+0x388>
 800b1aa:	2320      	movs	r3, #32
 800b1ac:	4a3a      	ldr	r2, [pc, #232]	; (800b298 <SIMCOM_DMA_IrqHandler+0x474>)
 800b1ae:	6093      	str	r3, [r2, #8]

		/* simcom_write received data for UART main buffer for manipulation later */
		simcom_ptr = (uint8_t *) SIMCOM_DMA_RX_Buffer;
 800b1b0:	4b3a      	ldr	r3, [pc, #232]	; (800b29c <SIMCOM_DMA_IrqHandler+0x478>)
 800b1b2:	4a3b      	ldr	r2, [pc, #236]	; (800b2a0 <SIMCOM_DMA_IrqHandler+0x47c>)
 800b1b4:	601a      	str	r2, [r3, #0]

		/* Get the simcom_length of the data */
		simcom_len = SIMCOM_DMA_RX_BUFFER_SIZE - hdma->Instance->NDTR;
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	685b      	ldr	r3, [r3, #4]
 800b1bc:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800b1c0:	4a38      	ldr	r2, [pc, #224]	; (800b2a4 <SIMCOM_DMA_IrqHandler+0x480>)
 800b1c2:	6013      	str	r3, [r2, #0]

		/* Get number of bytes we can copy to the end of buffer */
		simcom_tocopy = SIMCOM_UART_RX_BUFFER_SIZE - simcom_write;
 800b1c4:	4b38      	ldr	r3, [pc, #224]	; (800b2a8 <SIMCOM_DMA_IrqHandler+0x484>)
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 800b1cc:	4a37      	ldr	r2, [pc, #220]	; (800b2ac <SIMCOM_DMA_IrqHandler+0x488>)
 800b1ce:	6013      	str	r3, [r2, #0]

		/* Check how many bytes to copy */
		if (simcom_tocopy > simcom_len)
 800b1d0:	4b36      	ldr	r3, [pc, #216]	; (800b2ac <SIMCOM_DMA_IrqHandler+0x488>)
 800b1d2:	681a      	ldr	r2, [r3, #0]
 800b1d4:	4b33      	ldr	r3, [pc, #204]	; (800b2a4 <SIMCOM_DMA_IrqHandler+0x480>)
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	429a      	cmp	r2, r3
 800b1da:	d903      	bls.n	800b1e4 <SIMCOM_DMA_IrqHandler+0x3c0>
		{
			simcom_tocopy = simcom_len;
 800b1dc:	4b31      	ldr	r3, [pc, #196]	; (800b2a4 <SIMCOM_DMA_IrqHandler+0x480>)
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	4a32      	ldr	r2, [pc, #200]	; (800b2ac <SIMCOM_DMA_IrqHandler+0x488>)
 800b1e2:	6013      	str	r3, [r2, #0]
		}

		/* Copy first part */
		memcpy(&SIMCOM_UART_RX_Buffer[simcom_write], simcom_ptr, simcom_tocopy);
 800b1e4:	4b30      	ldr	r3, [pc, #192]	; (800b2a8 <SIMCOM_DMA_IrqHandler+0x484>)
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	4a31      	ldr	r2, [pc, #196]	; (800b2b0 <SIMCOM_DMA_IrqHandler+0x48c>)
 800b1ea:	1898      	adds	r0, r3, r2
 800b1ec:	4b2b      	ldr	r3, [pc, #172]	; (800b29c <SIMCOM_DMA_IrqHandler+0x478>)
 800b1ee:	6819      	ldr	r1, [r3, #0]
 800b1f0:	4b2e      	ldr	r3, [pc, #184]	; (800b2ac <SIMCOM_DMA_IrqHandler+0x488>)
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	461a      	mov	r2, r3
 800b1f6:	f007 f9af 	bl	8012558 <memcpy>

		/* Correct values for remaining data */
		simcom_write += simcom_tocopy;
 800b1fa:	4b2b      	ldr	r3, [pc, #172]	; (800b2a8 <SIMCOM_DMA_IrqHandler+0x484>)
 800b1fc:	681a      	ldr	r2, [r3, #0]
 800b1fe:	4b2b      	ldr	r3, [pc, #172]	; (800b2ac <SIMCOM_DMA_IrqHandler+0x488>)
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	4413      	add	r3, r2
 800b204:	4a28      	ldr	r2, [pc, #160]	; (800b2a8 <SIMCOM_DMA_IrqHandler+0x484>)
 800b206:	6013      	str	r3, [r2, #0]
		simcom_len -= simcom_tocopy;
 800b208:	4b26      	ldr	r3, [pc, #152]	; (800b2a4 <SIMCOM_DMA_IrqHandler+0x480>)
 800b20a:	681a      	ldr	r2, [r3, #0]
 800b20c:	4b27      	ldr	r3, [pc, #156]	; (800b2ac <SIMCOM_DMA_IrqHandler+0x488>)
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	1ad3      	subs	r3, r2, r3
 800b212:	4a24      	ldr	r2, [pc, #144]	; (800b2a4 <SIMCOM_DMA_IrqHandler+0x480>)
 800b214:	6013      	str	r3, [r2, #0]
		simcom_ptr += simcom_tocopy;
 800b216:	4b21      	ldr	r3, [pc, #132]	; (800b29c <SIMCOM_DMA_IrqHandler+0x478>)
 800b218:	681a      	ldr	r2, [r3, #0]
 800b21a:	4b24      	ldr	r3, [pc, #144]	; (800b2ac <SIMCOM_DMA_IrqHandler+0x488>)
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	4413      	add	r3, r2
 800b220:	4a1e      	ldr	r2, [pc, #120]	; (800b29c <SIMCOM_DMA_IrqHandler+0x478>)
 800b222:	6013      	str	r3, [r2, #0]

		/* If still data to simcom_write for beginning of buffer */
		if (simcom_len)
 800b224:	4b1f      	ldr	r3, [pc, #124]	; (800b2a4 <SIMCOM_DMA_IrqHandler+0x480>)
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d00b      	beq.n	800b244 <SIMCOM_DMA_IrqHandler+0x420>
		{
			/* Don't care if we override Read pointer now */
			memcpy(&SIMCOM_UART_RX_Buffer[0], simcom_ptr, simcom_len);
 800b22c:	4b1b      	ldr	r3, [pc, #108]	; (800b29c <SIMCOM_DMA_IrqHandler+0x478>)
 800b22e:	6819      	ldr	r1, [r3, #0]
 800b230:	4b1c      	ldr	r3, [pc, #112]	; (800b2a4 <SIMCOM_DMA_IrqHandler+0x480>)
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	461a      	mov	r2, r3
 800b236:	481e      	ldr	r0, [pc, #120]	; (800b2b0 <SIMCOM_DMA_IrqHandler+0x48c>)
 800b238:	f007 f98e 	bl	8012558 <memcpy>
			simcom_write = simcom_len;
 800b23c:	4b19      	ldr	r3, [pc, #100]	; (800b2a4 <SIMCOM_DMA_IrqHandler+0x480>)
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	4a19      	ldr	r2, [pc, #100]	; (800b2a8 <SIMCOM_DMA_IrqHandler+0x484>)
 800b242:	6013      	str	r3, [r2, #0]
		}

		// set null at the end
		SIMCOM_UART_RX_Buffer[simcom_write] = '\0';
 800b244:	4b18      	ldr	r3, [pc, #96]	; (800b2a8 <SIMCOM_DMA_IrqHandler+0x484>)
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	4a19      	ldr	r2, [pc, #100]	; (800b2b0 <SIMCOM_DMA_IrqHandler+0x48c>)
 800b24a:	2100      	movs	r1, #0
 800b24c:	54d1      	strb	r1, [r2, r3]

		/* Start DMA transfer again */
		hdma->Instance->CR |= DMA_SxCR_EN;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	681a      	ldr	r2, [r3, #0]
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	f042 0201 	orr.w	r2, r2, #1
 800b25c:	601a      	str	r2, [r3, #0]
	}
}
 800b25e:	bf00      	nop
 800b260:	3708      	adds	r7, #8
 800b262:	46bd      	mov	sp, r7
 800b264:	bd80      	pop	{r7, pc}
 800b266:	bf00      	nop
 800b268:	40026010 	.word	0x40026010
 800b26c:	40026410 	.word	0x40026410
 800b270:	40026070 	.word	0x40026070
 800b274:	40026470 	.word	0x40026470
 800b278:	40026028 	.word	0x40026028
 800b27c:	40026428 	.word	0x40026428
 800b280:	40026088 	.word	0x40026088
 800b284:	40026488 	.word	0x40026488
 800b288:	40026040 	.word	0x40026040
 800b28c:	40026440 	.word	0x40026440
 800b290:	400260a0 	.word	0x400260a0
 800b294:	400264a0 	.word	0x400264a0
 800b298:	40026000 	.word	0x40026000
 800b29c:	20006d04 	.word	0x20006d04
 800b2a0:	20006d08 	.word	0x20006d08
 800b2a4:	20006d00 	.word	0x20006d00
 800b2a8:	200068f8 	.word	0x200068f8
 800b2ac:	20006cfc 	.word	0x20006cfc
 800b2b0:	200068fc 	.word	0x200068fc

0800b2b4 <SIMCOM_DMA_Init>:

void SIMCOM_DMA_Init(void){
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	af00      	add	r7, sp, #0
	__HAL_UART_ENABLE_IT(&huart3, UART_IT_IDLE);      // enable idle line interrupt
 800b2b8:	4b0f      	ldr	r3, [pc, #60]	; (800b2f8 <SIMCOM_DMA_Init+0x44>)
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	68da      	ldr	r2, [r3, #12]
 800b2be:	4b0e      	ldr	r3, [pc, #56]	; (800b2f8 <SIMCOM_DMA_Init+0x44>)
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	f042 0210 	orr.w	r2, r2, #16
 800b2c6:	60da      	str	r2, [r3, #12]
	__HAL_DMA_ENABLE_IT(&hdma_usart3_rx, DMA_IT_TC);  // enable DMA Tx cplt interrupt
 800b2c8:	4b0c      	ldr	r3, [pc, #48]	; (800b2fc <SIMCOM_DMA_Init+0x48>)
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	681a      	ldr	r2, [r3, #0]
 800b2ce:	4b0b      	ldr	r3, [pc, #44]	; (800b2fc <SIMCOM_DMA_Init+0x48>)
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	f042 0210 	orr.w	r2, r2, #16
 800b2d6:	601a      	str	r2, [r3, #0]
	__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT); // disable half complete interrupt
 800b2d8:	4b08      	ldr	r3, [pc, #32]	; (800b2fc <SIMCOM_DMA_Init+0x48>)
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	681a      	ldr	r2, [r3, #0]
 800b2de:	4b07      	ldr	r3, [pc, #28]	; (800b2fc <SIMCOM_DMA_Init+0x48>)
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	f022 0208 	bic.w	r2, r2, #8
 800b2e6:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(&huart3, (uint8_t *) SIMCOM_DMA_RX_Buffer, SIMCOM_DMA_RX_BUFFER_SIZE);
 800b2e8:	2280      	movs	r2, #128	; 0x80
 800b2ea:	4905      	ldr	r1, [pc, #20]	; (800b300 <SIMCOM_DMA_Init+0x4c>)
 800b2ec:	4802      	ldr	r0, [pc, #8]	; (800b2f8 <SIMCOM_DMA_Init+0x44>)
 800b2ee:	f7fb fb03 	bl	80068f8 <HAL_UART_Receive_DMA>
}
 800b2f2:	bf00      	nop
 800b2f4:	bd80      	pop	{r7, pc}
 800b2f6:	bf00      	nop
 800b2f8:	200083f8 	.word	0x200083f8
 800b2fc:	20008398 	.word	0x20008398
 800b300:	20006d08 	.word	0x20006d08

0800b304 <SIMCOM_Reset_Buffer>:

void SIMCOM_Reset_Buffer(void){
 800b304:	b580      	push	{r7, lr}
 800b306:	af00      	add	r7, sp, #0
	// clear rx buffer
	memset(SIMCOM_UART_RX_Buffer, 0, sizeof(SIMCOM_UART_RX_Buffer));
 800b308:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b30c:	2100      	movs	r1, #0
 800b30e:	4805      	ldr	r0, [pc, #20]	; (800b324 <SIMCOM_Reset_Buffer+0x20>)
 800b310:	f007 f92d 	bl	801256e <memset>
	// wail until clear is done
	osDelay(50);
 800b314:	2032      	movs	r0, #50	; 0x32
 800b316:	f7fc f938 	bl	800758a <osDelay>
	// set index back to first
	simcom_write = 0;
 800b31a:	4b03      	ldr	r3, [pc, #12]	; (800b328 <SIMCOM_Reset_Buffer+0x24>)
 800b31c:	2200      	movs	r2, #0
 800b31e:	601a      	str	r2, [r3, #0]
	// set null at the end
	//	SIMCOM_UART_RX_Buffer[simcom_write] = '\0';
}
 800b320:	bf00      	nop
 800b322:	bd80      	pop	{r7, pc}
 800b324:	200068fc 	.word	0x200068fc
 800b328:	200068f8 	.word	0x200068f8

0800b32c <SIMCOM_Transmit>:

void SIMCOM_Transmit(char *pData, uint16_t Size){
 800b32c:	b580      	push	{r7, lr}
 800b32e:	b082      	sub	sp, #8
 800b330:	af00      	add	r7, sp, #0
 800b332:	6078      	str	r0, [r7, #4]
 800b334:	460b      	mov	r3, r1
 800b336:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart3, (uint8_t *) pData, Size, HAL_MAX_DELAY);
 800b338:	887a      	ldrh	r2, [r7, #2]
 800b33a:	f04f 33ff 	mov.w	r3, #4294967295
 800b33e:	6879      	ldr	r1, [r7, #4]
 800b340:	4803      	ldr	r0, [pc, #12]	; (800b350 <SIMCOM_Transmit+0x24>)
 800b342:	f7fb fa40 	bl	80067c6 <HAL_UART_Transmit>
}
 800b346:	bf00      	nop
 800b348:	3708      	adds	r7, #8
 800b34a:	46bd      	mov	sp, r7
 800b34c:	bd80      	pop	{r7, pc}
 800b34e:	bf00      	nop
 800b350:	200083f8 	.word	0x200083f8

0800b354 <UBLOX_USART_IrqHandler>:
char UBLOX_UART_RX_Buffer[UBLOX_UART_RX_BUFFER_SIZE];
size_t ublox_write, ublox_len, ublox_tocopy;
uint8_t *ublox_ptr;

void UBLOX_USART_IrqHandler(UART_HandleTypeDef *huart, DMA_HandleTypeDef *hdma)
{
 800b354:	b580      	push	{r7, lr}
 800b356:	b084      	sub	sp, #16
 800b358:	af00      	add	r7, sp, #0
 800b35a:	6078      	str	r0, [r7, #4]
 800b35c:	6039      	str	r1, [r7, #0]
	if (huart->Instance->SR & UART_FLAG_IDLE) /* if Idle flag is set */
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	f003 0310 	and.w	r3, r3, #16
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d016      	beq.n	800b39a <UBLOX_USART_IrqHandler+0x46>
	{
		__HAL_UART_CLEAR_IDLEFLAG(huart);	 /* Clear idle flag */
 800b36c:	2300      	movs	r3, #0
 800b36e:	60fb      	str	r3, [r7, #12]
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	60fb      	str	r3, [r7, #12]
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	685b      	ldr	r3, [r3, #4]
 800b37e:	60fb      	str	r3, [r7, #12]
 800b380:	68fb      	ldr	r3, [r7, #12]
		__HAL_DMA_DISABLE(hdma);			 /* Disabling DMA will force transfer complete interrupt if enabled */
 800b382:	683b      	ldr	r3, [r7, #0]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	681a      	ldr	r2, [r3, #0]
 800b388:	683b      	ldr	r3, [r7, #0]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	f022 0201 	bic.w	r2, r2, #1
 800b390:	601a      	str	r2, [r3, #0]
		UBLOX_DMA_IrqHandler(hdma, huart);
 800b392:	6879      	ldr	r1, [r7, #4]
 800b394:	6838      	ldr	r0, [r7, #0]
 800b396:	f000 f805 	bl	800b3a4 <UBLOX_DMA_IrqHandler>
	}
}
 800b39a:	bf00      	nop
 800b39c:	3710      	adds	r7, #16
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	bd80      	pop	{r7, pc}
	...

0800b3a4 <UBLOX_DMA_IrqHandler>:

void UBLOX_DMA_IrqHandler(DMA_HandleTypeDef *hdma, UART_HandleTypeDef *huart)
{
 800b3a4:	b580      	push	{r7, lr}
 800b3a6:	b082      	sub	sp, #8
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	6078      	str	r0, [r7, #4]
 800b3ac:	6039      	str	r1, [r7, #0]
	if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET) // if the source is TC
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	f003 0310 	and.w	r3, r3, #16
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	f000 8216 	beq.w	800b7ea <UBLOX_DMA_IrqHandler+0x446>
	{
		/* Clear the transfer complete flag */
		__HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	461a      	mov	r2, r3
 800b3c4:	4b99      	ldr	r3, [pc, #612]	; (800b62c <UBLOX_DMA_IrqHandler+0x288>)
 800b3c6:	429a      	cmp	r2, r3
 800b3c8:	d960      	bls.n	800b48c <UBLOX_DMA_IrqHandler+0xe8>
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	4a98      	ldr	r2, [pc, #608]	; (800b630 <UBLOX_DMA_IrqHandler+0x28c>)
 800b3d0:	4293      	cmp	r3, r2
 800b3d2:	d057      	beq.n	800b484 <UBLOX_DMA_IrqHandler+0xe0>
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	4a96      	ldr	r2, [pc, #600]	; (800b634 <UBLOX_DMA_IrqHandler+0x290>)
 800b3da:	4293      	cmp	r3, r2
 800b3dc:	d050      	beq.n	800b480 <UBLOX_DMA_IrqHandler+0xdc>
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	4a95      	ldr	r2, [pc, #596]	; (800b638 <UBLOX_DMA_IrqHandler+0x294>)
 800b3e4:	4293      	cmp	r3, r2
 800b3e6:	d049      	beq.n	800b47c <UBLOX_DMA_IrqHandler+0xd8>
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	4a93      	ldr	r2, [pc, #588]	; (800b63c <UBLOX_DMA_IrqHandler+0x298>)
 800b3ee:	4293      	cmp	r3, r2
 800b3f0:	d042      	beq.n	800b478 <UBLOX_DMA_IrqHandler+0xd4>
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	4a92      	ldr	r2, [pc, #584]	; (800b640 <UBLOX_DMA_IrqHandler+0x29c>)
 800b3f8:	4293      	cmp	r3, r2
 800b3fa:	d03a      	beq.n	800b472 <UBLOX_DMA_IrqHandler+0xce>
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	4a90      	ldr	r2, [pc, #576]	; (800b644 <UBLOX_DMA_IrqHandler+0x2a0>)
 800b402:	4293      	cmp	r3, r2
 800b404:	d032      	beq.n	800b46c <UBLOX_DMA_IrqHandler+0xc8>
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	4a8f      	ldr	r2, [pc, #572]	; (800b648 <UBLOX_DMA_IrqHandler+0x2a4>)
 800b40c:	4293      	cmp	r3, r2
 800b40e:	d02a      	beq.n	800b466 <UBLOX_DMA_IrqHandler+0xc2>
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	4a8d      	ldr	r2, [pc, #564]	; (800b64c <UBLOX_DMA_IrqHandler+0x2a8>)
 800b416:	4293      	cmp	r3, r2
 800b418:	d022      	beq.n	800b460 <UBLOX_DMA_IrqHandler+0xbc>
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	4a8c      	ldr	r2, [pc, #560]	; (800b650 <UBLOX_DMA_IrqHandler+0x2ac>)
 800b420:	4293      	cmp	r3, r2
 800b422:	d01a      	beq.n	800b45a <UBLOX_DMA_IrqHandler+0xb6>
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	4a8a      	ldr	r2, [pc, #552]	; (800b654 <UBLOX_DMA_IrqHandler+0x2b0>)
 800b42a:	4293      	cmp	r3, r2
 800b42c:	d012      	beq.n	800b454 <UBLOX_DMA_IrqHandler+0xb0>
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	4a89      	ldr	r2, [pc, #548]	; (800b658 <UBLOX_DMA_IrqHandler+0x2b4>)
 800b434:	4293      	cmp	r3, r2
 800b436:	d00a      	beq.n	800b44e <UBLOX_DMA_IrqHandler+0xaa>
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	4a87      	ldr	r2, [pc, #540]	; (800b65c <UBLOX_DMA_IrqHandler+0x2b8>)
 800b43e:	4293      	cmp	r3, r2
 800b440:	d102      	bne.n	800b448 <UBLOX_DMA_IrqHandler+0xa4>
 800b442:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b446:	e01e      	b.n	800b486 <UBLOX_DMA_IrqHandler+0xe2>
 800b448:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b44c:	e01b      	b.n	800b486 <UBLOX_DMA_IrqHandler+0xe2>
 800b44e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b452:	e018      	b.n	800b486 <UBLOX_DMA_IrqHandler+0xe2>
 800b454:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b458:	e015      	b.n	800b486 <UBLOX_DMA_IrqHandler+0xe2>
 800b45a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b45e:	e012      	b.n	800b486 <UBLOX_DMA_IrqHandler+0xe2>
 800b460:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b464:	e00f      	b.n	800b486 <UBLOX_DMA_IrqHandler+0xe2>
 800b466:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b46a:	e00c      	b.n	800b486 <UBLOX_DMA_IrqHandler+0xe2>
 800b46c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b470:	e009      	b.n	800b486 <UBLOX_DMA_IrqHandler+0xe2>
 800b472:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b476:	e006      	b.n	800b486 <UBLOX_DMA_IrqHandler+0xe2>
 800b478:	2320      	movs	r3, #32
 800b47a:	e004      	b.n	800b486 <UBLOX_DMA_IrqHandler+0xe2>
 800b47c:	2320      	movs	r3, #32
 800b47e:	e002      	b.n	800b486 <UBLOX_DMA_IrqHandler+0xe2>
 800b480:	2320      	movs	r3, #32
 800b482:	e000      	b.n	800b486 <UBLOX_DMA_IrqHandler+0xe2>
 800b484:	2320      	movs	r3, #32
 800b486:	4a76      	ldr	r2, [pc, #472]	; (800b660 <UBLOX_DMA_IrqHandler+0x2bc>)
 800b488:	60d3      	str	r3, [r2, #12]
 800b48a:	e151      	b.n	800b730 <UBLOX_DMA_IrqHandler+0x38c>
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	461a      	mov	r2, r3
 800b492:	4b74      	ldr	r3, [pc, #464]	; (800b664 <UBLOX_DMA_IrqHandler+0x2c0>)
 800b494:	429a      	cmp	r2, r3
 800b496:	d960      	bls.n	800b55a <UBLOX_DMA_IrqHandler+0x1b6>
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	4a64      	ldr	r2, [pc, #400]	; (800b630 <UBLOX_DMA_IrqHandler+0x28c>)
 800b49e:	4293      	cmp	r3, r2
 800b4a0:	d057      	beq.n	800b552 <UBLOX_DMA_IrqHandler+0x1ae>
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	4a63      	ldr	r2, [pc, #396]	; (800b634 <UBLOX_DMA_IrqHandler+0x290>)
 800b4a8:	4293      	cmp	r3, r2
 800b4aa:	d050      	beq.n	800b54e <UBLOX_DMA_IrqHandler+0x1aa>
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	4a61      	ldr	r2, [pc, #388]	; (800b638 <UBLOX_DMA_IrqHandler+0x294>)
 800b4b2:	4293      	cmp	r3, r2
 800b4b4:	d049      	beq.n	800b54a <UBLOX_DMA_IrqHandler+0x1a6>
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	4a60      	ldr	r2, [pc, #384]	; (800b63c <UBLOX_DMA_IrqHandler+0x298>)
 800b4bc:	4293      	cmp	r3, r2
 800b4be:	d042      	beq.n	800b546 <UBLOX_DMA_IrqHandler+0x1a2>
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	4a5e      	ldr	r2, [pc, #376]	; (800b640 <UBLOX_DMA_IrqHandler+0x29c>)
 800b4c6:	4293      	cmp	r3, r2
 800b4c8:	d03a      	beq.n	800b540 <UBLOX_DMA_IrqHandler+0x19c>
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	4a5d      	ldr	r2, [pc, #372]	; (800b644 <UBLOX_DMA_IrqHandler+0x2a0>)
 800b4d0:	4293      	cmp	r3, r2
 800b4d2:	d032      	beq.n	800b53a <UBLOX_DMA_IrqHandler+0x196>
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	4a5b      	ldr	r2, [pc, #364]	; (800b648 <UBLOX_DMA_IrqHandler+0x2a4>)
 800b4da:	4293      	cmp	r3, r2
 800b4dc:	d02a      	beq.n	800b534 <UBLOX_DMA_IrqHandler+0x190>
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	4a5a      	ldr	r2, [pc, #360]	; (800b64c <UBLOX_DMA_IrqHandler+0x2a8>)
 800b4e4:	4293      	cmp	r3, r2
 800b4e6:	d022      	beq.n	800b52e <UBLOX_DMA_IrqHandler+0x18a>
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	4a58      	ldr	r2, [pc, #352]	; (800b650 <UBLOX_DMA_IrqHandler+0x2ac>)
 800b4ee:	4293      	cmp	r3, r2
 800b4f0:	d01a      	beq.n	800b528 <UBLOX_DMA_IrqHandler+0x184>
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	4a57      	ldr	r2, [pc, #348]	; (800b654 <UBLOX_DMA_IrqHandler+0x2b0>)
 800b4f8:	4293      	cmp	r3, r2
 800b4fa:	d012      	beq.n	800b522 <UBLOX_DMA_IrqHandler+0x17e>
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	4a55      	ldr	r2, [pc, #340]	; (800b658 <UBLOX_DMA_IrqHandler+0x2b4>)
 800b502:	4293      	cmp	r3, r2
 800b504:	d00a      	beq.n	800b51c <UBLOX_DMA_IrqHandler+0x178>
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	4a54      	ldr	r2, [pc, #336]	; (800b65c <UBLOX_DMA_IrqHandler+0x2b8>)
 800b50c:	4293      	cmp	r3, r2
 800b50e:	d102      	bne.n	800b516 <UBLOX_DMA_IrqHandler+0x172>
 800b510:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b514:	e01e      	b.n	800b554 <UBLOX_DMA_IrqHandler+0x1b0>
 800b516:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b51a:	e01b      	b.n	800b554 <UBLOX_DMA_IrqHandler+0x1b0>
 800b51c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b520:	e018      	b.n	800b554 <UBLOX_DMA_IrqHandler+0x1b0>
 800b522:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b526:	e015      	b.n	800b554 <UBLOX_DMA_IrqHandler+0x1b0>
 800b528:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b52c:	e012      	b.n	800b554 <UBLOX_DMA_IrqHandler+0x1b0>
 800b52e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b532:	e00f      	b.n	800b554 <UBLOX_DMA_IrqHandler+0x1b0>
 800b534:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b538:	e00c      	b.n	800b554 <UBLOX_DMA_IrqHandler+0x1b0>
 800b53a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b53e:	e009      	b.n	800b554 <UBLOX_DMA_IrqHandler+0x1b0>
 800b540:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b544:	e006      	b.n	800b554 <UBLOX_DMA_IrqHandler+0x1b0>
 800b546:	2320      	movs	r3, #32
 800b548:	e004      	b.n	800b554 <UBLOX_DMA_IrqHandler+0x1b0>
 800b54a:	2320      	movs	r3, #32
 800b54c:	e002      	b.n	800b554 <UBLOX_DMA_IrqHandler+0x1b0>
 800b54e:	2320      	movs	r3, #32
 800b550:	e000      	b.n	800b554 <UBLOX_DMA_IrqHandler+0x1b0>
 800b552:	2320      	movs	r3, #32
 800b554:	4a42      	ldr	r2, [pc, #264]	; (800b660 <UBLOX_DMA_IrqHandler+0x2bc>)
 800b556:	6093      	str	r3, [r2, #8]
 800b558:	e0ea      	b.n	800b730 <UBLOX_DMA_IrqHandler+0x38c>
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	461a      	mov	r2, r3
 800b560:	4b41      	ldr	r3, [pc, #260]	; (800b668 <UBLOX_DMA_IrqHandler+0x2c4>)
 800b562:	429a      	cmp	r2, r3
 800b564:	f240 8084 	bls.w	800b670 <UBLOX_DMA_IrqHandler+0x2cc>
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	4a30      	ldr	r2, [pc, #192]	; (800b630 <UBLOX_DMA_IrqHandler+0x28c>)
 800b56e:	4293      	cmp	r3, r2
 800b570:	d057      	beq.n	800b622 <UBLOX_DMA_IrqHandler+0x27e>
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	4a2f      	ldr	r2, [pc, #188]	; (800b634 <UBLOX_DMA_IrqHandler+0x290>)
 800b578:	4293      	cmp	r3, r2
 800b57a:	d050      	beq.n	800b61e <UBLOX_DMA_IrqHandler+0x27a>
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	4a2d      	ldr	r2, [pc, #180]	; (800b638 <UBLOX_DMA_IrqHandler+0x294>)
 800b582:	4293      	cmp	r3, r2
 800b584:	d049      	beq.n	800b61a <UBLOX_DMA_IrqHandler+0x276>
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	4a2c      	ldr	r2, [pc, #176]	; (800b63c <UBLOX_DMA_IrqHandler+0x298>)
 800b58c:	4293      	cmp	r3, r2
 800b58e:	d042      	beq.n	800b616 <UBLOX_DMA_IrqHandler+0x272>
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	4a2a      	ldr	r2, [pc, #168]	; (800b640 <UBLOX_DMA_IrqHandler+0x29c>)
 800b596:	4293      	cmp	r3, r2
 800b598:	d03a      	beq.n	800b610 <UBLOX_DMA_IrqHandler+0x26c>
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	4a29      	ldr	r2, [pc, #164]	; (800b644 <UBLOX_DMA_IrqHandler+0x2a0>)
 800b5a0:	4293      	cmp	r3, r2
 800b5a2:	d032      	beq.n	800b60a <UBLOX_DMA_IrqHandler+0x266>
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	4a27      	ldr	r2, [pc, #156]	; (800b648 <UBLOX_DMA_IrqHandler+0x2a4>)
 800b5aa:	4293      	cmp	r3, r2
 800b5ac:	d02a      	beq.n	800b604 <UBLOX_DMA_IrqHandler+0x260>
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	4a26      	ldr	r2, [pc, #152]	; (800b64c <UBLOX_DMA_IrqHandler+0x2a8>)
 800b5b4:	4293      	cmp	r3, r2
 800b5b6:	d022      	beq.n	800b5fe <UBLOX_DMA_IrqHandler+0x25a>
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	4a24      	ldr	r2, [pc, #144]	; (800b650 <UBLOX_DMA_IrqHandler+0x2ac>)
 800b5be:	4293      	cmp	r3, r2
 800b5c0:	d01a      	beq.n	800b5f8 <UBLOX_DMA_IrqHandler+0x254>
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	4a23      	ldr	r2, [pc, #140]	; (800b654 <UBLOX_DMA_IrqHandler+0x2b0>)
 800b5c8:	4293      	cmp	r3, r2
 800b5ca:	d012      	beq.n	800b5f2 <UBLOX_DMA_IrqHandler+0x24e>
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	4a21      	ldr	r2, [pc, #132]	; (800b658 <UBLOX_DMA_IrqHandler+0x2b4>)
 800b5d2:	4293      	cmp	r3, r2
 800b5d4:	d00a      	beq.n	800b5ec <UBLOX_DMA_IrqHandler+0x248>
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	4a20      	ldr	r2, [pc, #128]	; (800b65c <UBLOX_DMA_IrqHandler+0x2b8>)
 800b5dc:	4293      	cmp	r3, r2
 800b5de:	d102      	bne.n	800b5e6 <UBLOX_DMA_IrqHandler+0x242>
 800b5e0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b5e4:	e01e      	b.n	800b624 <UBLOX_DMA_IrqHandler+0x280>
 800b5e6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b5ea:	e01b      	b.n	800b624 <UBLOX_DMA_IrqHandler+0x280>
 800b5ec:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b5f0:	e018      	b.n	800b624 <UBLOX_DMA_IrqHandler+0x280>
 800b5f2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b5f6:	e015      	b.n	800b624 <UBLOX_DMA_IrqHandler+0x280>
 800b5f8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b5fc:	e012      	b.n	800b624 <UBLOX_DMA_IrqHandler+0x280>
 800b5fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b602:	e00f      	b.n	800b624 <UBLOX_DMA_IrqHandler+0x280>
 800b604:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b608:	e00c      	b.n	800b624 <UBLOX_DMA_IrqHandler+0x280>
 800b60a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b60e:	e009      	b.n	800b624 <UBLOX_DMA_IrqHandler+0x280>
 800b610:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b614:	e006      	b.n	800b624 <UBLOX_DMA_IrqHandler+0x280>
 800b616:	2320      	movs	r3, #32
 800b618:	e004      	b.n	800b624 <UBLOX_DMA_IrqHandler+0x280>
 800b61a:	2320      	movs	r3, #32
 800b61c:	e002      	b.n	800b624 <UBLOX_DMA_IrqHandler+0x280>
 800b61e:	2320      	movs	r3, #32
 800b620:	e000      	b.n	800b624 <UBLOX_DMA_IrqHandler+0x280>
 800b622:	2320      	movs	r3, #32
 800b624:	4a11      	ldr	r2, [pc, #68]	; (800b66c <UBLOX_DMA_IrqHandler+0x2c8>)
 800b626:	60d3      	str	r3, [r2, #12]
 800b628:	e082      	b.n	800b730 <UBLOX_DMA_IrqHandler+0x38c>
 800b62a:	bf00      	nop
 800b62c:	40026458 	.word	0x40026458
 800b630:	40026010 	.word	0x40026010
 800b634:	40026410 	.word	0x40026410
 800b638:	40026070 	.word	0x40026070
 800b63c:	40026470 	.word	0x40026470
 800b640:	40026028 	.word	0x40026028
 800b644:	40026428 	.word	0x40026428
 800b648:	40026088 	.word	0x40026088
 800b64c:	40026488 	.word	0x40026488
 800b650:	40026040 	.word	0x40026040
 800b654:	40026440 	.word	0x40026440
 800b658:	400260a0 	.word	0x400260a0
 800b65c:	400264a0 	.word	0x400264a0
 800b660:	40026400 	.word	0x40026400
 800b664:	400260b8 	.word	0x400260b8
 800b668:	40026058 	.word	0x40026058
 800b66c:	40026000 	.word	0x40026000
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	4a5f      	ldr	r2, [pc, #380]	; (800b7f4 <UBLOX_DMA_IrqHandler+0x450>)
 800b676:	4293      	cmp	r3, r2
 800b678:	d057      	beq.n	800b72a <UBLOX_DMA_IrqHandler+0x386>
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	4a5e      	ldr	r2, [pc, #376]	; (800b7f8 <UBLOX_DMA_IrqHandler+0x454>)
 800b680:	4293      	cmp	r3, r2
 800b682:	d050      	beq.n	800b726 <UBLOX_DMA_IrqHandler+0x382>
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	4a5c      	ldr	r2, [pc, #368]	; (800b7fc <UBLOX_DMA_IrqHandler+0x458>)
 800b68a:	4293      	cmp	r3, r2
 800b68c:	d049      	beq.n	800b722 <UBLOX_DMA_IrqHandler+0x37e>
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	4a5b      	ldr	r2, [pc, #364]	; (800b800 <UBLOX_DMA_IrqHandler+0x45c>)
 800b694:	4293      	cmp	r3, r2
 800b696:	d042      	beq.n	800b71e <UBLOX_DMA_IrqHandler+0x37a>
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	4a59      	ldr	r2, [pc, #356]	; (800b804 <UBLOX_DMA_IrqHandler+0x460>)
 800b69e:	4293      	cmp	r3, r2
 800b6a0:	d03a      	beq.n	800b718 <UBLOX_DMA_IrqHandler+0x374>
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	4a58      	ldr	r2, [pc, #352]	; (800b808 <UBLOX_DMA_IrqHandler+0x464>)
 800b6a8:	4293      	cmp	r3, r2
 800b6aa:	d032      	beq.n	800b712 <UBLOX_DMA_IrqHandler+0x36e>
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	4a56      	ldr	r2, [pc, #344]	; (800b80c <UBLOX_DMA_IrqHandler+0x468>)
 800b6b2:	4293      	cmp	r3, r2
 800b6b4:	d02a      	beq.n	800b70c <UBLOX_DMA_IrqHandler+0x368>
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	4a55      	ldr	r2, [pc, #340]	; (800b810 <UBLOX_DMA_IrqHandler+0x46c>)
 800b6bc:	4293      	cmp	r3, r2
 800b6be:	d022      	beq.n	800b706 <UBLOX_DMA_IrqHandler+0x362>
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	4a53      	ldr	r2, [pc, #332]	; (800b814 <UBLOX_DMA_IrqHandler+0x470>)
 800b6c6:	4293      	cmp	r3, r2
 800b6c8:	d01a      	beq.n	800b700 <UBLOX_DMA_IrqHandler+0x35c>
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	4a52      	ldr	r2, [pc, #328]	; (800b818 <UBLOX_DMA_IrqHandler+0x474>)
 800b6d0:	4293      	cmp	r3, r2
 800b6d2:	d012      	beq.n	800b6fa <UBLOX_DMA_IrqHandler+0x356>
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	4a50      	ldr	r2, [pc, #320]	; (800b81c <UBLOX_DMA_IrqHandler+0x478>)
 800b6da:	4293      	cmp	r3, r2
 800b6dc:	d00a      	beq.n	800b6f4 <UBLOX_DMA_IrqHandler+0x350>
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	4a4f      	ldr	r2, [pc, #316]	; (800b820 <UBLOX_DMA_IrqHandler+0x47c>)
 800b6e4:	4293      	cmp	r3, r2
 800b6e6:	d102      	bne.n	800b6ee <UBLOX_DMA_IrqHandler+0x34a>
 800b6e8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b6ec:	e01e      	b.n	800b72c <UBLOX_DMA_IrqHandler+0x388>
 800b6ee:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b6f2:	e01b      	b.n	800b72c <UBLOX_DMA_IrqHandler+0x388>
 800b6f4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b6f8:	e018      	b.n	800b72c <UBLOX_DMA_IrqHandler+0x388>
 800b6fa:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b6fe:	e015      	b.n	800b72c <UBLOX_DMA_IrqHandler+0x388>
 800b700:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b704:	e012      	b.n	800b72c <UBLOX_DMA_IrqHandler+0x388>
 800b706:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b70a:	e00f      	b.n	800b72c <UBLOX_DMA_IrqHandler+0x388>
 800b70c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b710:	e00c      	b.n	800b72c <UBLOX_DMA_IrqHandler+0x388>
 800b712:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b716:	e009      	b.n	800b72c <UBLOX_DMA_IrqHandler+0x388>
 800b718:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b71c:	e006      	b.n	800b72c <UBLOX_DMA_IrqHandler+0x388>
 800b71e:	2320      	movs	r3, #32
 800b720:	e004      	b.n	800b72c <UBLOX_DMA_IrqHandler+0x388>
 800b722:	2320      	movs	r3, #32
 800b724:	e002      	b.n	800b72c <UBLOX_DMA_IrqHandler+0x388>
 800b726:	2320      	movs	r3, #32
 800b728:	e000      	b.n	800b72c <UBLOX_DMA_IrqHandler+0x388>
 800b72a:	2320      	movs	r3, #32
 800b72c:	4a3d      	ldr	r2, [pc, #244]	; (800b824 <UBLOX_DMA_IrqHandler+0x480>)
 800b72e:	6093      	str	r3, [r2, #8]

		/* Get the ublox_length of the data */
		ublox_len = UBLOX_DMA_RX_BUFFER_SIZE - hdma->Instance->NDTR;
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	685b      	ldr	r3, [r3, #4]
 800b736:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 800b73a:	4a3b      	ldr	r2, [pc, #236]	; (800b828 <UBLOX_DMA_IrqHandler+0x484>)
 800b73c:	6013      	str	r3, [r2, #0]
		/* Only process if DMA is not empty */
		if(ublox_len > 0) {
 800b73e:	4b3a      	ldr	r3, [pc, #232]	; (800b828 <UBLOX_DMA_IrqHandler+0x484>)
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	2b00      	cmp	r3, #0
 800b744:	d049      	beq.n	800b7da <UBLOX_DMA_IrqHandler+0x436>
			/* Reset the buffer */
			UBLOX_Reset_Buffer();
 800b746:	f000 f8a3 	bl	800b890 <UBLOX_Reset_Buffer>
			/* Get number of bytes we can copy to the end of buffer */
			ublox_tocopy = UBLOX_UART_RX_BUFFER_SIZE - ublox_write;
 800b74a:	4b38      	ldr	r3, [pc, #224]	; (800b82c <UBLOX_DMA_IrqHandler+0x488>)
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 800b752:	4a37      	ldr	r2, [pc, #220]	; (800b830 <UBLOX_DMA_IrqHandler+0x48c>)
 800b754:	6013      	str	r3, [r2, #0]
			/* ublox_write received data for UART main buffer for manipulation later */
			ublox_ptr = (uint8_t *) UBLOX_DMA_RX_Buffer;
 800b756:	4b37      	ldr	r3, [pc, #220]	; (800b834 <UBLOX_DMA_IrqHandler+0x490>)
 800b758:	4a37      	ldr	r2, [pc, #220]	; (800b838 <UBLOX_DMA_IrqHandler+0x494>)
 800b75a:	601a      	str	r2, [r3, #0]
			/* Check how many bytes to copy */
			if (ublox_tocopy > ublox_len)
 800b75c:	4b34      	ldr	r3, [pc, #208]	; (800b830 <UBLOX_DMA_IrqHandler+0x48c>)
 800b75e:	681a      	ldr	r2, [r3, #0]
 800b760:	4b31      	ldr	r3, [pc, #196]	; (800b828 <UBLOX_DMA_IrqHandler+0x484>)
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	429a      	cmp	r2, r3
 800b766:	d903      	bls.n	800b770 <UBLOX_DMA_IrqHandler+0x3cc>
			{
				ublox_tocopy = ublox_len;
 800b768:	4b2f      	ldr	r3, [pc, #188]	; (800b828 <UBLOX_DMA_IrqHandler+0x484>)
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	4a30      	ldr	r2, [pc, #192]	; (800b830 <UBLOX_DMA_IrqHandler+0x48c>)
 800b76e:	6013      	str	r3, [r2, #0]
			}
			/* Copy first part */
			memcpy(&UBLOX_UART_RX_Buffer[ublox_write], ublox_ptr, ublox_tocopy);
 800b770:	4b2e      	ldr	r3, [pc, #184]	; (800b82c <UBLOX_DMA_IrqHandler+0x488>)
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	4a31      	ldr	r2, [pc, #196]	; (800b83c <UBLOX_DMA_IrqHandler+0x498>)
 800b776:	1898      	adds	r0, r3, r2
 800b778:	4b2e      	ldr	r3, [pc, #184]	; (800b834 <UBLOX_DMA_IrqHandler+0x490>)
 800b77a:	6819      	ldr	r1, [r3, #0]
 800b77c:	4b2c      	ldr	r3, [pc, #176]	; (800b830 <UBLOX_DMA_IrqHandler+0x48c>)
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	461a      	mov	r2, r3
 800b782:	f006 fee9 	bl	8012558 <memcpy>
			/* Correct values for remaining data */
			ublox_write += ublox_tocopy;
 800b786:	4b29      	ldr	r3, [pc, #164]	; (800b82c <UBLOX_DMA_IrqHandler+0x488>)
 800b788:	681a      	ldr	r2, [r3, #0]
 800b78a:	4b29      	ldr	r3, [pc, #164]	; (800b830 <UBLOX_DMA_IrqHandler+0x48c>)
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	4413      	add	r3, r2
 800b790:	4a26      	ldr	r2, [pc, #152]	; (800b82c <UBLOX_DMA_IrqHandler+0x488>)
 800b792:	6013      	str	r3, [r2, #0]
			ublox_len -= ublox_tocopy;
 800b794:	4b24      	ldr	r3, [pc, #144]	; (800b828 <UBLOX_DMA_IrqHandler+0x484>)
 800b796:	681a      	ldr	r2, [r3, #0]
 800b798:	4b25      	ldr	r3, [pc, #148]	; (800b830 <UBLOX_DMA_IrqHandler+0x48c>)
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	1ad3      	subs	r3, r2, r3
 800b79e:	4a22      	ldr	r2, [pc, #136]	; (800b828 <UBLOX_DMA_IrqHandler+0x484>)
 800b7a0:	6013      	str	r3, [r2, #0]
			ublox_ptr += ublox_tocopy;
 800b7a2:	4b24      	ldr	r3, [pc, #144]	; (800b834 <UBLOX_DMA_IrqHandler+0x490>)
 800b7a4:	681a      	ldr	r2, [r3, #0]
 800b7a6:	4b22      	ldr	r3, [pc, #136]	; (800b830 <UBLOX_DMA_IrqHandler+0x48c>)
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	4413      	add	r3, r2
 800b7ac:	4a21      	ldr	r2, [pc, #132]	; (800b834 <UBLOX_DMA_IrqHandler+0x490>)
 800b7ae:	6013      	str	r3, [r2, #0]

			/* If still data to ublox_write for beginning of buffer */
			if (ublox_len)
 800b7b0:	4b1d      	ldr	r3, [pc, #116]	; (800b828 <UBLOX_DMA_IrqHandler+0x484>)
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d00b      	beq.n	800b7d0 <UBLOX_DMA_IrqHandler+0x42c>
			{
				/* Don't care if we override Read pointer now */
				memcpy(&UBLOX_UART_RX_Buffer[0], ublox_ptr, ublox_len);
 800b7b8:	4b1e      	ldr	r3, [pc, #120]	; (800b834 <UBLOX_DMA_IrqHandler+0x490>)
 800b7ba:	6819      	ldr	r1, [r3, #0]
 800b7bc:	4b1a      	ldr	r3, [pc, #104]	; (800b828 <UBLOX_DMA_IrqHandler+0x484>)
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	461a      	mov	r2, r3
 800b7c2:	481e      	ldr	r0, [pc, #120]	; (800b83c <UBLOX_DMA_IrqHandler+0x498>)
 800b7c4:	f006 fec8 	bl	8012558 <memcpy>
				ublox_write = ublox_len;
 800b7c8:	4b17      	ldr	r3, [pc, #92]	; (800b828 <UBLOX_DMA_IrqHandler+0x484>)
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	4a17      	ldr	r2, [pc, #92]	; (800b82c <UBLOX_DMA_IrqHandler+0x488>)
 800b7ce:	6013      	str	r3, [r2, #0]
			}
			// set null at the end
			UBLOX_UART_RX_Buffer[ublox_write] = '\0';
 800b7d0:	4b16      	ldr	r3, [pc, #88]	; (800b82c <UBLOX_DMA_IrqHandler+0x488>)
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	4a19      	ldr	r2, [pc, #100]	; (800b83c <UBLOX_DMA_IrqHandler+0x498>)
 800b7d6:	2100      	movs	r1, #0
 800b7d8:	54d1      	strb	r1, [r2, r3]
		}

		/* Start DMA transfer again */
		hdma->Instance->CR |= DMA_SxCR_EN;
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	681a      	ldr	r2, [r3, #0]
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	f042 0201 	orr.w	r2, r2, #1
 800b7e8:	601a      	str	r2, [r3, #0]
	}
}
 800b7ea:	bf00      	nop
 800b7ec:	3708      	adds	r7, #8
 800b7ee:	46bd      	mov	sp, r7
 800b7f0:	bd80      	pop	{r7, pc}
 800b7f2:	bf00      	nop
 800b7f4:	40026010 	.word	0x40026010
 800b7f8:	40026410 	.word	0x40026410
 800b7fc:	40026070 	.word	0x40026070
 800b800:	40026470 	.word	0x40026470
 800b804:	40026028 	.word	0x40026028
 800b808:	40026428 	.word	0x40026428
 800b80c:	40026088 	.word	0x40026088
 800b810:	40026488 	.word	0x40026488
 800b814:	40026040 	.word	0x40026040
 800b818:	40026440 	.word	0x40026440
 800b81c:	400260a0 	.word	0x400260a0
 800b820:	400264a0 	.word	0x400264a0
 800b824:	40026000 	.word	0x40026000
 800b828:	20006d8c 	.word	0x20006d8c
 800b82c:	20006d90 	.word	0x20006d90
 800b830:	20006d94 	.word	0x20006d94
 800b834:	20006d88 	.word	0x20006d88
 800b838:	20006d98 	.word	0x20006d98
 800b83c:	20007198 	.word	0x20007198

0800b840 <UBLOX_DMA_Init>:

void UBLOX_DMA_Init(void){
 800b840:	b580      	push	{r7, lr}
 800b842:	af00      	add	r7, sp, #0
	__HAL_UART_ENABLE_IT(&huart2, UART_IT_IDLE);      // enable idle line interrupt
 800b844:	4b0f      	ldr	r3, [pc, #60]	; (800b884 <UBLOX_DMA_Init+0x44>)
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	68da      	ldr	r2, [r3, #12]
 800b84a:	4b0e      	ldr	r3, [pc, #56]	; (800b884 <UBLOX_DMA_Init+0x44>)
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	f042 0210 	orr.w	r2, r2, #16
 800b852:	60da      	str	r2, [r3, #12]
	__HAL_DMA_ENABLE_IT(&hdma_usart2_rx, DMA_IT_TC);  // enable DMA Tx cplt interrupt
 800b854:	4b0c      	ldr	r3, [pc, #48]	; (800b888 <UBLOX_DMA_Init+0x48>)
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	681a      	ldr	r2, [r3, #0]
 800b85a:	4b0b      	ldr	r3, [pc, #44]	; (800b888 <UBLOX_DMA_Init+0x48>)
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	f042 0210 	orr.w	r2, r2, #16
 800b862:	601a      	str	r2, [r3, #0]
	__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT); // disable half complete interrupt
 800b864:	4b08      	ldr	r3, [pc, #32]	; (800b888 <UBLOX_DMA_Init+0x48>)
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	681a      	ldr	r2, [r3, #0]
 800b86a:	4b07      	ldr	r3, [pc, #28]	; (800b888 <UBLOX_DMA_Init+0x48>)
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	f022 0208 	bic.w	r2, r2, #8
 800b872:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(&huart2, (uint8_t *) UBLOX_DMA_RX_Buffer, UBLOX_DMA_RX_BUFFER_SIZE);
 800b874:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b878:	4904      	ldr	r1, [pc, #16]	; (800b88c <UBLOX_DMA_Init+0x4c>)
 800b87a:	4802      	ldr	r0, [pc, #8]	; (800b884 <UBLOX_DMA_Init+0x44>)
 800b87c:	f7fb f83c 	bl	80068f8 <HAL_UART_Receive_DMA>
}
 800b880:	bf00      	nop
 800b882:	bd80      	pop	{r7, pc}
 800b884:	200085c4 	.word	0x200085c4
 800b888:	200082e0 	.word	0x200082e0
 800b88c:	20006d98 	.word	0x20006d98

0800b890 <UBLOX_Reset_Buffer>:

void UBLOX_Reset_Buffer(void){
 800b890:	b480      	push	{r7}
 800b892:	af00      	add	r7, sp, #0
	// clear rx buffer
	//	memset(UBLOX_UART_RX_Buffer, 0, sizeof(UBLOX_UART_RX_Buffer));
	// set index back to first
	ublox_write = 0;
 800b894:	4b06      	ldr	r3, [pc, #24]	; (800b8b0 <UBLOX_Reset_Buffer+0x20>)
 800b896:	2200      	movs	r2, #0
 800b898:	601a      	str	r2, [r3, #0]
	//	 set null at the end
	UBLOX_UART_RX_Buffer[ublox_write] = '\0';
 800b89a:	4b05      	ldr	r3, [pc, #20]	; (800b8b0 <UBLOX_Reset_Buffer+0x20>)
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	4a05      	ldr	r2, [pc, #20]	; (800b8b4 <UBLOX_Reset_Buffer+0x24>)
 800b8a0:	2100      	movs	r1, #0
 800b8a2:	54d1      	strb	r1, [r2, r3]
}
 800b8a4:	bf00      	nop
 800b8a6:	46bd      	mov	sp, r7
 800b8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ac:	4770      	bx	lr
 800b8ae:	bf00      	nop
 800b8b0:	20006d90 	.word	0x20006d90
 800b8b4:	20007198 	.word	0x20007198

0800b8b8 <ITM_Out>:
#include "_config.h"

extern osMutexId SwvMutexHandle;
extern RTC_HandleTypeDef hrtc;

void ITM_Out(uint32_t ch) {
 800b8b8:	b480      	push	{r7}
 800b8ba:	b085      	sub	sp, #20
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	6078      	str	r0, [r7, #4]
#if (DEBUG_HUB == 1)
	int port = 0;
 800b8c0:	2300      	movs	r3, #0
 800b8c2:	60fb      	str	r3, [r7, #12]

	while (ITM->PORT[port].u32 == 0)
 800b8c4:	bf00      	nop
 800b8c6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d0f8      	beq.n	800b8c6 <ITM_Out+0xe>
		;
	ITM->PORT[port].u8 = (uint8_t) ch;
 800b8d4:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	b2d9      	uxtb	r1, r3
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
#endif
}
 800b8e2:	bf00      	nop
 800b8e4:	3714      	adds	r7, #20
 800b8e6:	46bd      	mov	sp, r7
 800b8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ec:	4770      	bx	lr
	...

0800b8f0 <swvPrint>:

void swvPrint(char* ptr) {
 800b8f0:	b580      	push	{r7, lr}
 800b8f2:	b082      	sub	sp, #8
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	6078      	str	r0, [r7, #4]
	osMutexWait(SwvMutexHandle, osWaitForever);
 800b8f8:	4b0d      	ldr	r3, [pc, #52]	; (800b930 <swvPrint+0x40>)
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	f04f 31ff 	mov.w	r1, #4294967295
 800b900:	4618      	mov	r0, r3
 800b902:	f7fb fe6f 	bl	80075e4 <osMutexWait>

	while (*ptr != '\0') {
 800b906:	e006      	b.n	800b916 <swvPrint+0x26>
		ITM_Out((uint32_t) *(ptr++));
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	1c5a      	adds	r2, r3, #1
 800b90c:	607a      	str	r2, [r7, #4]
 800b90e:	781b      	ldrb	r3, [r3, #0]
 800b910:	4618      	mov	r0, r3
 800b912:	f7ff ffd1 	bl	800b8b8 <ITM_Out>
	while (*ptr != '\0') {
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	781b      	ldrb	r3, [r3, #0]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d1f4      	bne.n	800b908 <swvPrint+0x18>
	}

	osMutexRelease(SwvMutexHandle);
 800b91e:	4b04      	ldr	r3, [pc, #16]	; (800b930 <swvPrint+0x40>)
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	4618      	mov	r0, r3
 800b924:	f7fb feac 	bl	8007680 <osMutexRelease>
}
 800b928:	bf00      	nop
 800b92a:	3708      	adds	r7, #8
 800b92c:	46bd      	mov	sp, r7
 800b92e:	bd80      	pop	{r7, pc}
 800b930:	2000851c 	.word	0x2000851c

0800b934 <swvPrintLn>:

void swvPrintLn(char* ptr) {
 800b934:	b580      	push	{r7, lr}
 800b936:	b082      	sub	sp, #8
 800b938:	af00      	add	r7, sp, #0
 800b93a:	6078      	str	r0, [r7, #4]
	osMutexWait(SwvMutexHandle, osWaitForever);
 800b93c:	4b0f      	ldr	r3, [pc, #60]	; (800b97c <swvPrintLn+0x48>)
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	f04f 31ff 	mov.w	r1, #4294967295
 800b944:	4618      	mov	r0, r3
 800b946:	f7fb fe4d 	bl	80075e4 <osMutexWait>

	while (*ptr != '\0') {
 800b94a:	e006      	b.n	800b95a <swvPrintLn+0x26>
		ITM_Out((uint32_t) *(ptr++));
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	1c5a      	adds	r2, r3, #1
 800b950:	607a      	str	r2, [r7, #4]
 800b952:	781b      	ldrb	r3, [r3, #0]
 800b954:	4618      	mov	r0, r3
 800b956:	f7ff ffaf 	bl	800b8b8 <ITM_Out>
	while (*ptr != '\0') {
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	781b      	ldrb	r3, [r3, #0]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d1f4      	bne.n	800b94c <swvPrintLn+0x18>
	}
	ITM_Out((uint32_t) '\n');
 800b962:	200a      	movs	r0, #10
 800b964:	f7ff ffa8 	bl	800b8b8 <ITM_Out>

	osMutexRelease(SwvMutexHandle);
 800b968:	4b04      	ldr	r3, [pc, #16]	; (800b97c <swvPrintLn+0x48>)
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	4618      	mov	r0, r3
 800b96e:	f7fb fe87 	bl	8007680 <osMutexRelease>
}
 800b972:	bf00      	nop
 800b974:	3708      	adds	r7, #8
 800b976:	46bd      	mov	sp, r7
 800b978:	bd80      	pop	{r7, pc}
 800b97a:	bf00      	nop
 800b97c:	2000851c 	.word	0x2000851c

0800b980 <ftoa>:
	swvPrint(value);
	swvPrint("\n===============================\n");
}

// Converts a floating point number to string.
void ftoa(float f, char *str, char size) {
 800b980:	b580      	push	{r7, lr}
 800b982:	b0a0      	sub	sp, #128	; 0x80
 800b984:	af00      	add	r7, sp, #0
 800b986:	ed87 0a03 	vstr	s0, [r7, #12]
 800b98a:	60b8      	str	r0, [r7, #8]
 800b98c:	460b      	mov	r3, r1
 800b98e:	71fb      	strb	r3, [r7, #7]
	uint8_t pos;  // position in string
	char len;  // length of decimal part of result
	char curr[100];  // temp holder for next digit
	int value;  // decimal digit(s) to convert
	pos = 0;  // initialize pos, just to be sure
 800b990:	2300      	movs	r3, #0
 800b992:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

	value = (int) f;  // truncate the floating point number
 800b996:	edd7 7a03 	vldr	s15, [r7, #12]
 800b99a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b99e:	ee17 3a90 	vmov	r3, s15
 800b9a2:	67bb      	str	r3, [r7, #120]	; 0x78
	itoa(value, str, 10);  // this is kinda dangerous depending on the length of str
 800b9a4:	220a      	movs	r2, #10
 800b9a6:	68b9      	ldr	r1, [r7, #8]
 800b9a8:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800b9aa:	f006 fdd3 	bl	8012554 <itoa>
	// now str array has the digits before the decimal

	if (f < 0)  // handle negative numbers
 800b9ae:	edd7 7a03 	vldr	s15, [r7, #12]
 800b9b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b9b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9ba:	d508      	bpl.n	800b9ce <ftoa+0x4e>
			{
		f *= -1;
 800b9bc:	edd7 7a03 	vldr	s15, [r7, #12]
 800b9c0:	eef1 7a67 	vneg.f32	s15, s15
 800b9c4:	edc7 7a03 	vstr	s15, [r7, #12]
		value *= -1;
 800b9c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b9ca:	425b      	negs	r3, r3
 800b9cc:	67bb      	str	r3, [r7, #120]	; 0x78
	}

	len = strlen(str);  // find out how big the integer part was
 800b9ce:	68b8      	ldr	r0, [r7, #8]
 800b9d0:	f7f4 fc08 	bl	80001e4 <strlen>
 800b9d4:	4603      	mov	r3, r0
 800b9d6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	pos = len;  // position the pointer to the end of the integer part
 800b9da:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b9de:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	str[pos++] = '.';  // add decimal point to string
 800b9e2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b9e6:	1c5a      	adds	r2, r3, #1
 800b9e8:	f887 207f 	strb.w	r2, [r7, #127]	; 0x7f
 800b9ec:	461a      	mov	r2, r3
 800b9ee:	68bb      	ldr	r3, [r7, #8]
 800b9f0:	4413      	add	r3, r2
 800b9f2:	222e      	movs	r2, #46	; 0x2e
 800b9f4:	701a      	strb	r2, [r3, #0]

	while (pos < (size + len + 1))  // process remaining digits
 800b9f6:	e02a      	b.n	800ba4e <ftoa+0xce>
	{
		f = f - (float) value;  // hack off the whole part of the number
 800b9f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b9fa:	ee07 3a90 	vmov	s15, r3
 800b9fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ba02:	ed97 7a03 	vldr	s14, [r7, #12]
 800ba06:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ba0a:	edc7 7a03 	vstr	s15, [r7, #12]
		f *= 10;  // move next digit over
 800ba0e:	edd7 7a03 	vldr	s15, [r7, #12]
 800ba12:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800ba16:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ba1a:	edc7 7a03 	vstr	s15, [r7, #12]
		value = (int) f;  // get next digit
 800ba1e:	edd7 7a03 	vldr	s15, [r7, #12]
 800ba22:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ba26:	ee17 3a90 	vmov	r3, s15
 800ba2a:	67bb      	str	r3, [r7, #120]	; 0x78
		itoa(value, curr, 10); // convert digit to string
 800ba2c:	f107 0310 	add.w	r3, r7, #16
 800ba30:	220a      	movs	r2, #10
 800ba32:	4619      	mov	r1, r3
 800ba34:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800ba36:	f006 fd8d 	bl	8012554 <itoa>
		str[pos++] = *curr; // add digit to result string and increment pointer
 800ba3a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ba3e:	1c5a      	adds	r2, r3, #1
 800ba40:	f887 207f 	strb.w	r2, [r7, #127]	; 0x7f
 800ba44:	461a      	mov	r2, r3
 800ba46:	68bb      	ldr	r3, [r7, #8]
 800ba48:	4413      	add	r3, r2
 800ba4a:	7c3a      	ldrb	r2, [r7, #16]
 800ba4c:	701a      	strb	r2, [r3, #0]
	while (pos < (size + len + 1))  // process remaining digits
 800ba4e:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 800ba52:	79f9      	ldrb	r1, [r7, #7]
 800ba54:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800ba58:	440b      	add	r3, r1
 800ba5a:	3301      	adds	r3, #1
 800ba5c:	429a      	cmp	r2, r3
 800ba5e:	dbcb      	blt.n	800b9f8 <ftoa+0x78>
	}
}
 800ba60:	bf00      	nop
 800ba62:	3780      	adds	r7, #128	; 0x80
 800ba64:	46bd      	mov	sp, r7
 800ba66:	bd80      	pop	{r7, pc}

0800ba68 <convertHourTo>:

uint8_t convertHourTo(uint8_t hour, int offset) {
 800ba68:	b480      	push	{r7}
 800ba6a:	b083      	sub	sp, #12
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	4603      	mov	r3, r0
 800ba70:	6039      	str	r1, [r7, #0]
 800ba72:	71fb      	strb	r3, [r7, #7]
	return (hour + offset) > 23 ? ((hour + offset) - 24) : (hour + offset);
 800ba74:	79fa      	ldrb	r2, [r7, #7]
 800ba76:	683b      	ldr	r3, [r7, #0]
 800ba78:	4413      	add	r3, r2
 800ba7a:	2b17      	cmp	r3, #23
 800ba7c:	dd07      	ble.n	800ba8e <convertHourTo+0x26>
 800ba7e:	683b      	ldr	r3, [r7, #0]
 800ba80:	b2da      	uxtb	r2, r3
 800ba82:	79fb      	ldrb	r3, [r7, #7]
 800ba84:	4413      	add	r3, r2
 800ba86:	b2db      	uxtb	r3, r3
 800ba88:	3b18      	subs	r3, #24
 800ba8a:	b2db      	uxtb	r3, r3
 800ba8c:	e004      	b.n	800ba98 <convertHourTo+0x30>
 800ba8e:	683b      	ldr	r3, [r7, #0]
 800ba90:	b2da      	uxtb	r2, r3
 800ba92:	79fb      	ldrb	r3, [r7, #7]
 800ba94:	4413      	add	r3, r2
 800ba96:	b2db      	uxtb	r3, r3
}
 800ba98:	4618      	mov	r0, r3
 800ba9a:	370c      	adds	r7, #12
 800ba9c:	46bd      	mov	sp, r7
 800ba9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa2:	4770      	bx	lr

0800baa4 <BSP_Led_Write>:

void BSP_Led_Write(uint8_t state) {
 800baa4:	b580      	push	{r7, lr}
 800baa6:	b082      	sub	sp, #8
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	4603      	mov	r3, r0
 800baac:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, state);
 800baae:	79fb      	ldrb	r3, [r7, #7]
 800bab0:	461a      	mov	r2, r3
 800bab2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800bab6:	480e      	ldr	r0, [pc, #56]	; (800baf0 <BSP_Led_Write+0x4c>)
 800bab8:	f7f6 fd22 	bl	8002500 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, state);
 800babc:	79fb      	ldrb	r3, [r7, #7]
 800babe:	461a      	mov	r2, r3
 800bac0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800bac4:	480a      	ldr	r0, [pc, #40]	; (800baf0 <BSP_Led_Write+0x4c>)
 800bac6:	f7f6 fd1b 	bl	8002500 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, state);
 800baca:	79fb      	ldrb	r3, [r7, #7]
 800bacc:	461a      	mov	r2, r3
 800bace:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800bad2:	4807      	ldr	r0, [pc, #28]	; (800baf0 <BSP_Led_Write+0x4c>)
 800bad4:	f7f6 fd14 	bl	8002500 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, state);
 800bad8:	79fb      	ldrb	r3, [r7, #7]
 800bada:	461a      	mov	r2, r3
 800badc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800bae0:	4803      	ldr	r0, [pc, #12]	; (800baf0 <BSP_Led_Write+0x4c>)
 800bae2:	f7f6 fd0d 	bl	8002500 <HAL_GPIO_WritePin>
}
 800bae6:	bf00      	nop
 800bae8:	3708      	adds	r7, #8
 800baea:	46bd      	mov	sp, r7
 800baec:	bd80      	pop	{r7, pc}
 800baee:	bf00      	nop
 800baf0:	40020c00 	.word	0x40020c00

0800baf4 <BSP_Led_Toggle>:

void BSP_Led_Toggle(void) {
 800baf4:	b580      	push	{r7, lr}
 800baf6:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LD6_GPIO_Port, LD6_Pin);
 800baf8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800bafc:	4809      	ldr	r0, [pc, #36]	; (800bb24 <BSP_Led_Toggle+0x30>)
 800bafe:	f7f6 fd18 	bl	8002532 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LD5_GPIO_Port, LD5_Pin);
 800bb02:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800bb06:	4807      	ldr	r0, [pc, #28]	; (800bb24 <BSP_Led_Toggle+0x30>)
 800bb08:	f7f6 fd13 	bl	8002532 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 800bb0c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800bb10:	4804      	ldr	r0, [pc, #16]	; (800bb24 <BSP_Led_Toggle+0x30>)
 800bb12:	f7f6 fd0e 	bl	8002532 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 800bb16:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800bb1a:	4802      	ldr	r0, [pc, #8]	; (800bb24 <BSP_Led_Toggle+0x30>)
 800bb1c:	f7f6 fd09 	bl	8002532 <HAL_GPIO_TogglePin>
}
 800bb20:	bf00      	nop
 800bb22:	bd80      	pop	{r7, pc}
 800bb24:	40020c00 	.word	0x40020c00

0800bb28 <Get_RTC>:

void Get_RTC(char *dateTime) {
 800bb28:	b5b0      	push	{r4, r5, r7, lr}
 800bb2a:	b08c      	sub	sp, #48	; 0x30
 800bb2c:	af04      	add	r7, sp, #16
 800bb2e:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef currentTime;
	RTC_DateTypeDef currentDate;

	// get the RTC
	HAL_RTC_GetTime(&hrtc, &currentTime, RTC_FORMAT_BIN);
 800bb30:	f107 030c 	add.w	r3, r7, #12
 800bb34:	2200      	movs	r2, #0
 800bb36:	4619      	mov	r1, r3
 800bb38:	480f      	ldr	r0, [pc, #60]	; (800bb78 <Get_RTC+0x50>)
 800bb3a:	f7f9 ff23 	bl	8005984 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &currentDate, RTC_FORMAT_BIN);
 800bb3e:	f107 0308 	add.w	r3, r7, #8
 800bb42:	2200      	movs	r2, #0
 800bb44:	4619      	mov	r1, r3
 800bb46:	480c      	ldr	r0, [pc, #48]	; (800bb78 <Get_RTC+0x50>)
 800bb48:	f7fa f821 	bl	8005b8e <HAL_RTC_GetDate>

	// combine RTC datetime
	sprintf(dateTime, "20%02d%02d%02d%02d%02d%02d", currentDate.Year, currentDate.Month, currentDate.Date, currentTime.Hours,
 800bb4c:	7afb      	ldrb	r3, [r7, #11]
 800bb4e:	461c      	mov	r4, r3
 800bb50:	7a7b      	ldrb	r3, [r7, #9]
 800bb52:	461d      	mov	r5, r3
 800bb54:	7abb      	ldrb	r3, [r7, #10]
 800bb56:	7b3a      	ldrb	r2, [r7, #12]
			currentTime.Minutes, currentTime.Seconds);
 800bb58:	7b79      	ldrb	r1, [r7, #13]
 800bb5a:	7bb8      	ldrb	r0, [r7, #14]
	sprintf(dateTime, "20%02d%02d%02d%02d%02d%02d", currentDate.Year, currentDate.Month, currentDate.Date, currentTime.Hours,
 800bb5c:	9003      	str	r0, [sp, #12]
 800bb5e:	9102      	str	r1, [sp, #8]
 800bb60:	9201      	str	r2, [sp, #4]
 800bb62:	9300      	str	r3, [sp, #0]
 800bb64:	462b      	mov	r3, r5
 800bb66:	4622      	mov	r2, r4
 800bb68:	4904      	ldr	r1, [pc, #16]	; (800bb7c <Get_RTC+0x54>)
 800bb6a:	6878      	ldr	r0, [r7, #4]
 800bb6c:	f006 fd08 	bl	8012580 <siprintf>
}
 800bb70:	bf00      	nop
 800bb72:	3720      	adds	r7, #32
 800bb74:	46bd      	mov	sp, r7
 800bb76:	bdb0      	pop	{r4, r5, r7, pc}
 800bb78:	200084fc 	.word	0x200084fc
 800bb7c:	08015d0c 	.word	0x08015d0c

0800bb80 <Set_RTC>:

void Set_RTC(char *dateTime) {
 800bb80:	b580      	push	{r7, lr}
 800bb82:	b08e      	sub	sp, #56	; 0x38
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	6078      	str	r0, [r7, #4]
	char Y[2], M[2], D[2], H[2], I[2], S[2];
	RTC_TimeTypeDef currentTime;
	RTC_DateTypeDef currentDate;

	// parsing
	strncpy(Y, dateTime + 2, 2);
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	1c99      	adds	r1, r3, #2
 800bb8c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800bb90:	2202      	movs	r2, #2
 800bb92:	4618      	mov	r0, r3
 800bb94:	f006 fd3b 	bl	801260e <strncpy>
	strncpy(M, dateTime + 4, 2);
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	1d19      	adds	r1, r3, #4
 800bb9c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bba0:	2202      	movs	r2, #2
 800bba2:	4618      	mov	r0, r3
 800bba4:	f006 fd33 	bl	801260e <strncpy>
	strncpy(D, dateTime + 6, 2);
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	1d99      	adds	r1, r3, #6
 800bbac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bbb0:	2202      	movs	r2, #2
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	f006 fd2b 	bl	801260e <strncpy>
	strncpy(H, dateTime + 8, 2);
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	f103 0108 	add.w	r1, r3, #8
 800bbbe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bbc2:	2202      	movs	r2, #2
 800bbc4:	4618      	mov	r0, r3
 800bbc6:	f006 fd22 	bl	801260e <strncpy>
	strncpy(I, dateTime + 10, 2);
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	f103 010a 	add.w	r1, r3, #10
 800bbd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bbd4:	2202      	movs	r2, #2
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	f006 fd19 	bl	801260e <strncpy>
	strncpy(S, dateTime + 12, 2);
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	f103 010c 	add.w	r1, r3, #12
 800bbe2:	f107 0320 	add.w	r3, r7, #32
 800bbe6:	2202      	movs	r2, #2
 800bbe8:	4618      	mov	r0, r3
 800bbea:	f006 fd10 	bl	801260e <strncpy>

	// assing to object
	currentDate.WeekDay = RTC_WEEKDAY_SUNDAY; // day is ignored
 800bbee:	2307      	movs	r3, #7
 800bbf0:	723b      	strb	r3, [r7, #8]
	currentDate.Year = atoi(Y);
 800bbf2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	f006 fc65 	bl	80124c6 <atoi>
 800bbfc:	4603      	mov	r3, r0
 800bbfe:	b2db      	uxtb	r3, r3
 800bc00:	72fb      	strb	r3, [r7, #11]
	currentDate.Month = atoi(M);
 800bc02:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bc06:	4618      	mov	r0, r3
 800bc08:	f006 fc5d 	bl	80124c6 <atoi>
 800bc0c:	4603      	mov	r3, r0
 800bc0e:	b2db      	uxtb	r3, r3
 800bc10:	727b      	strb	r3, [r7, #9]
	currentDate.Date = atoi(D);
 800bc12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bc16:	4618      	mov	r0, r3
 800bc18:	f006 fc55 	bl	80124c6 <atoi>
 800bc1c:	4603      	mov	r3, r0
 800bc1e:	b2db      	uxtb	r3, r3
 800bc20:	72bb      	strb	r3, [r7, #10]
	currentTime.Hours = atoi(H);
 800bc22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bc26:	4618      	mov	r0, r3
 800bc28:	f006 fc4d 	bl	80124c6 <atoi>
 800bc2c:	4603      	mov	r3, r0
 800bc2e:	b2db      	uxtb	r3, r3
 800bc30:	733b      	strb	r3, [r7, #12]
	currentTime.Minutes = atoi(I);
 800bc32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bc36:	4618      	mov	r0, r3
 800bc38:	f006 fc45 	bl	80124c6 <atoi>
 800bc3c:	4603      	mov	r3, r0
 800bc3e:	b2db      	uxtb	r3, r3
 800bc40:	737b      	strb	r3, [r7, #13]
	currentTime.SecondFraction = atoi(S);
 800bc42:	f107 0320 	add.w	r3, r7, #32
 800bc46:	4618      	mov	r0, r3
 800bc48:	f006 fc3d 	bl	80124c6 <atoi>
 800bc4c:	4603      	mov	r3, r0
 800bc4e:	617b      	str	r3, [r7, #20]

	// set the RTC
	HAL_RTC_SetTime(&hrtc, &currentTime, RTC_FORMAT_BIN);
 800bc50:	f107 030c 	add.w	r3, r7, #12
 800bc54:	2200      	movs	r2, #0
 800bc56:	4619      	mov	r1, r3
 800bc58:	4806      	ldr	r0, [pc, #24]	; (800bc74 <Set_RTC+0xf4>)
 800bc5a:	f7f9 fdd6 	bl	800580a <HAL_RTC_SetTime>
	HAL_RTC_SetDate(&hrtc, &currentDate, RTC_FORMAT_BIN);
 800bc5e:	f107 0308 	add.w	r3, r7, #8
 800bc62:	2200      	movs	r2, #0
 800bc64:	4619      	mov	r1, r3
 800bc66:	4803      	ldr	r0, [pc, #12]	; (800bc74 <Set_RTC+0xf4>)
 800bc68:	f7f9 feea 	bl	8005a40 <HAL_RTC_SetDate>
}
 800bc6c:	bf00      	nop
 800bc6e:	3738      	adds	r7, #56	; 0x38
 800bc70:	46bd      	mov	sp, r7
 800bc72:	bd80      	pop	{r7, pc}
 800bc74:	200084fc 	.word	0x200084fc

0800bc78 <EE_Init>:
 *   corruption after a power loss.
 * @param  None.
 * @retval - Flash error code: on write Flash error
 *         - FLASH_COMPLETE: on success
 */
uint16_t EE_Init(void) {
 800bc78:	b580      	push	{r7, lr}
 800bc7a:	b08a      	sub	sp, #40	; 0x28
 800bc7c:	af00      	add	r7, sp, #0
	uint16_t PageStatus0 = 6, PageStatus1 = 6;
 800bc7e:	2306      	movs	r3, #6
 800bc80:	847b      	strh	r3, [r7, #34]	; 0x22
 800bc82:	2306      	movs	r3, #6
 800bc84:	843b      	strh	r3, [r7, #32]
	uint16_t VarIdx = 0;
 800bc86:	2300      	movs	r3, #0
 800bc88:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t EepromStatus = 0, ReadStatus = 0;
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	83fb      	strh	r3, [r7, #30]
 800bc8e:	2300      	movs	r3, #0
 800bc90:	83bb      	strh	r3, [r7, #28]
	int16_t x = -1;
 800bc92:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bc96:	84bb      	strh	r3, [r7, #36]	; 0x24
	HAL_StatusTypeDef FlashStatus;
	uint32_t SectorError = 0;
 800bc98:	2300      	movs	r3, #0
 800bc9a:	617b      	str	r3, [r7, #20]
	FLASH_EraseInitTypeDef pEraseInit;

	/* Unlock the Flash Program Erase controller */
	HAL_FLASH_Unlock();
 800bc9c:	f7f5 ff14 	bl	8001ac8 <HAL_FLASH_Unlock>

	/* Get Page0 status */
	PageStatus0 = (*(__IO uint16_t*) PAGE0_BASE_ADDRESS);
 800bca0:	4b9f      	ldr	r3, [pc, #636]	; (800bf20 <EE_Init+0x2a8>)
 800bca2:	881b      	ldrh	r3, [r3, #0]
 800bca4:	847b      	strh	r3, [r7, #34]	; 0x22
	/* Get Page1 status */
	PageStatus1 = (*(__IO uint16_t*) PAGE1_BASE_ADDRESS);
 800bca6:	4b9f      	ldr	r3, [pc, #636]	; (800bf24 <EE_Init+0x2ac>)
 800bca8:	881b      	ldrh	r3, [r3, #0]
 800bcaa:	843b      	strh	r3, [r7, #32]

	pEraseInit.TypeErase = TYPEERASE_SECTORS;
 800bcac:	2300      	movs	r3, #0
 800bcae:	603b      	str	r3, [r7, #0]
	pEraseInit.Sector = PAGE0_ID;
 800bcb0:	230a      	movs	r3, #10
 800bcb2:	60bb      	str	r3, [r7, #8]
	pEraseInit.NbSectors = 1;
 800bcb4:	2301      	movs	r3, #1
 800bcb6:	60fb      	str	r3, [r7, #12]
	pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800bcb8:	2302      	movs	r3, #2
 800bcba:	613b      	str	r3, [r7, #16]

	/* Check for invalid header states and repair if necessary */
	switch (PageStatus0) {
 800bcbc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bcbe:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 800bcc2:	4293      	cmp	r3, r2
 800bcc4:	d057      	beq.n	800bd76 <EE_Init+0xfe>
 800bcc6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bcca:	4293      	cmp	r3, r2
 800bccc:	d003      	beq.n	800bcd6 <EE_Init+0x5e>
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	f000 80f4 	beq.w	800bebc <EE_Init+0x244>
 800bcd4:	e18d      	b.n	800bff2 <EE_Init+0x37a>
		case ERASED:
			if (PageStatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 800bcd6:	8c3b      	ldrh	r3, [r7, #32]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d116      	bne.n	800bd0a <EE_Init+0x92>
			{
				/* Erase Page0 */
				if (!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS)) {
 800bcdc:	4890      	ldr	r0, [pc, #576]	; (800bf20 <EE_Init+0x2a8>)
 800bcde:	f000 f9a9 	bl	800c034 <EE_VerifyPageFullyErased>
 800bce2:	4603      	mov	r3, r0
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	f040 818e 	bne.w	800c006 <EE_Init+0x38e>
					FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800bcea:	f107 0214 	add.w	r2, r7, #20
 800bcee:	463b      	mov	r3, r7
 800bcf0:	4611      	mov	r1, r2
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	f7f6 f836 	bl	8001d64 <HAL_FLASHEx_Erase>
 800bcf8:	4603      	mov	r3, r0
 800bcfa:	76fb      	strb	r3, [r7, #27]
					/* If erase operation was failed, a Flash error code is returned */
					if (FlashStatus != HAL_OK) {
 800bcfc:	7efb      	ldrb	r3, [r7, #27]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	f000 8181 	beq.w	800c006 <EE_Init+0x38e>
						return FlashStatus;
 800bd04:	7efb      	ldrb	r3, [r7, #27]
 800bd06:	b29b      	uxth	r3, r3
 800bd08:	e185      	b.n	800c016 <EE_Init+0x39e>
					}
				}
			} else if (PageStatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 800bd0a:	8c3b      	ldrh	r3, [r7, #32]
 800bd0c:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 800bd10:	4293      	cmp	r3, r2
 800bd12:	d125      	bne.n	800bd60 <EE_Init+0xe8>
			{
				/* Erase Page0 */
				if (!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS)) {
 800bd14:	4882      	ldr	r0, [pc, #520]	; (800bf20 <EE_Init+0x2a8>)
 800bd16:	f000 f98d 	bl	800c034 <EE_VerifyPageFullyErased>
 800bd1a:	4603      	mov	r3, r0
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d10e      	bne.n	800bd3e <EE_Init+0xc6>
					FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800bd20:	f107 0214 	add.w	r2, r7, #20
 800bd24:	463b      	mov	r3, r7
 800bd26:	4611      	mov	r1, r2
 800bd28:	4618      	mov	r0, r3
 800bd2a:	f7f6 f81b 	bl	8001d64 <HAL_FLASHEx_Erase>
 800bd2e:	4603      	mov	r3, r0
 800bd30:	76fb      	strb	r3, [r7, #27]
					/* If erase operation was failed, a Flash error code is returned */
					if (FlashStatus != HAL_OK) {
 800bd32:	7efb      	ldrb	r3, [r7, #27]
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d002      	beq.n	800bd3e <EE_Init+0xc6>
						return FlashStatus;
 800bd38:	7efb      	ldrb	r3, [r7, #27]
 800bd3a:	b29b      	uxth	r3, r3
 800bd3c:	e16b      	b.n	800c016 <EE_Init+0x39e>
					}
				}
				/* Mark Page1 as valid */
				FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);
 800bd3e:	f04f 0200 	mov.w	r2, #0
 800bd42:	f04f 0300 	mov.w	r3, #0
 800bd46:	4977      	ldr	r1, [pc, #476]	; (800bf24 <EE_Init+0x2ac>)
 800bd48:	2001      	movs	r0, #1
 800bd4a:	f7f5 fe69 	bl	8001a20 <HAL_FLASH_Program>
 800bd4e:	4603      	mov	r3, r0
 800bd50:	76fb      	strb	r3, [r7, #27]
				/* If program operation was failed, a Flash error code is returned */
				if (FlashStatus != HAL_OK) {
 800bd52:	7efb      	ldrb	r3, [r7, #27]
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	f000 8156 	beq.w	800c006 <EE_Init+0x38e>
					return FlashStatus;
 800bd5a:	7efb      	ldrb	r3, [r7, #27]
 800bd5c:	b29b      	uxth	r3, r3
 800bd5e:	e15a      	b.n	800c016 <EE_Init+0x39e>
				}
			} else /* First EEPROM access (Page0&1 are erased) or invalid state -> format EEPROM */
			{
				/* Erase both Page0 and Page1 and set Page0 as valid page */
				FlashStatus = EE_Format();
 800bd60:	f000 f9fa 	bl	800c158 <EE_Format>
 800bd64:	4603      	mov	r3, r0
 800bd66:	76fb      	strb	r3, [r7, #27]
				/* If erase/program operation was failed, a Flash error code is returned */
				if (FlashStatus != HAL_OK) {
 800bd68:	7efb      	ldrb	r3, [r7, #27]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	f000 814b 	beq.w	800c006 <EE_Init+0x38e>
					return FlashStatus;
 800bd70:	7efb      	ldrb	r3, [r7, #27]
 800bd72:	b29b      	uxth	r3, r3
 800bd74:	e14f      	b.n	800c016 <EE_Init+0x39e>
				}
			}
			break;

		case RECEIVE_DATA:
			if (PageStatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 800bd76:	8c3b      	ldrh	r3, [r7, #32]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d163      	bne.n	800be44 <EE_Init+0x1cc>
			{
				/* Transfer data from Page1 to Page0 */
				for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++) {
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	84fb      	strh	r3, [r7, #38]	; 0x26
 800bd80:	e030      	b.n	800bde4 <EE_Init+0x16c>
					if ((*(__IO uint16_t*) (PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx]) {
 800bd82:	4b69      	ldr	r3, [pc, #420]	; (800bf28 <EE_Init+0x2b0>)
 800bd84:	881b      	ldrh	r3, [r3, #0]
 800bd86:	b29a      	uxth	r2, r3
 800bd88:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bd8a:	4968      	ldr	r1, [pc, #416]	; (800bf2c <EE_Init+0x2b4>)
 800bd8c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800bd90:	429a      	cmp	r2, r3
 800bd92:	d101      	bne.n	800bd98 <EE_Init+0x120>
						x = VarIdx;
 800bd94:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bd96:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
					if (VarIdx != x) {
 800bd98:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800bd9a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800bd9e:	429a      	cmp	r2, r3
 800bda0:	d01d      	beq.n	800bdde <EE_Init+0x166>
						/* Read the last variables' updates */
						ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 800bda2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bda4:	4a61      	ldr	r2, [pc, #388]	; (800bf2c <EE_Init+0x2b4>)
 800bda6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bdaa:	4961      	ldr	r1, [pc, #388]	; (800bf30 <EE_Init+0x2b8>)
 800bdac:	4618      	mov	r0, r3
 800bdae:	f000 f967 	bl	800c080 <EE_ReadVariable>
 800bdb2:	4603      	mov	r3, r0
 800bdb4:	83bb      	strh	r3, [r7, #28]
						/* In case variable corresponding to the virtual address was found */
						if (ReadStatus != 0x1) {
 800bdb6:	8bbb      	ldrh	r3, [r7, #28]
 800bdb8:	2b01      	cmp	r3, #1
 800bdba:	d010      	beq.n	800bdde <EE_Init+0x166>
							/* Transfer the variable to the Page0 */
							EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 800bdbc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bdbe:	4a5b      	ldr	r2, [pc, #364]	; (800bf2c <EE_Init+0x2b4>)
 800bdc0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800bdc4:	4b5a      	ldr	r3, [pc, #360]	; (800bf30 <EE_Init+0x2b8>)
 800bdc6:	881b      	ldrh	r3, [r3, #0]
 800bdc8:	4619      	mov	r1, r3
 800bdca:	4610      	mov	r0, r2
 800bdcc:	f000 fa5c 	bl	800c288 <EE_VerifyPageFullWriteVariable>
 800bdd0:	4603      	mov	r3, r0
 800bdd2:	83fb      	strh	r3, [r7, #30]
							/* If program operation was failed, a Flash error code is returned */
							if (EepromStatus != HAL_OK) {
 800bdd4:	8bfb      	ldrh	r3, [r7, #30]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d001      	beq.n	800bdde <EE_Init+0x166>
								return EepromStatus;
 800bdda:	8bfb      	ldrh	r3, [r7, #30]
 800bddc:	e11b      	b.n	800c016 <EE_Init+0x39e>
				for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++) {
 800bdde:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bde0:	3301      	adds	r3, #1
 800bde2:	84fb      	strh	r3, [r7, #38]	; 0x26
 800bde4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bde6:	2b01      	cmp	r3, #1
 800bde8:	d9cb      	bls.n	800bd82 <EE_Init+0x10a>
							}
						}
					}
				}
				/* Mark Page0 as valid */
				FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 800bdea:	f04f 0200 	mov.w	r2, #0
 800bdee:	f04f 0300 	mov.w	r3, #0
 800bdf2:	494b      	ldr	r1, [pc, #300]	; (800bf20 <EE_Init+0x2a8>)
 800bdf4:	2001      	movs	r0, #1
 800bdf6:	f7f5 fe13 	bl	8001a20 <HAL_FLASH_Program>
 800bdfa:	4603      	mov	r3, r0
 800bdfc:	76fb      	strb	r3, [r7, #27]
				/* If program operation was failed, a Flash error code is returned */
				if (FlashStatus != HAL_OK) {
 800bdfe:	7efb      	ldrb	r3, [r7, #27]
 800be00:	2b00      	cmp	r3, #0
 800be02:	d002      	beq.n	800be0a <EE_Init+0x192>
					return FlashStatus;
 800be04:	7efb      	ldrb	r3, [r7, #27]
 800be06:	b29b      	uxth	r3, r3
 800be08:	e105      	b.n	800c016 <EE_Init+0x39e>
				}
				pEraseInit.Sector = PAGE1_ID;
 800be0a:	230b      	movs	r3, #11
 800be0c:	60bb      	str	r3, [r7, #8]
				pEraseInit.NbSectors = 1;
 800be0e:	2301      	movs	r3, #1
 800be10:	60fb      	str	r3, [r7, #12]
				pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800be12:	2302      	movs	r3, #2
 800be14:	613b      	str	r3, [r7, #16]
				/* Erase Page1 */
				if (!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS)) {
 800be16:	4843      	ldr	r0, [pc, #268]	; (800bf24 <EE_Init+0x2ac>)
 800be18:	f000 f90c 	bl	800c034 <EE_VerifyPageFullyErased>
 800be1c:	4603      	mov	r3, r0
 800be1e:	2b00      	cmp	r3, #0
 800be20:	f040 80f3 	bne.w	800c00a <EE_Init+0x392>
					FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800be24:	f107 0214 	add.w	r2, r7, #20
 800be28:	463b      	mov	r3, r7
 800be2a:	4611      	mov	r1, r2
 800be2c:	4618      	mov	r0, r3
 800be2e:	f7f5 ff99 	bl	8001d64 <HAL_FLASHEx_Erase>
 800be32:	4603      	mov	r3, r0
 800be34:	76fb      	strb	r3, [r7, #27]
					/* If erase operation was failed, a Flash error code is returned */
					if (FlashStatus != HAL_OK) {
 800be36:	7efb      	ldrb	r3, [r7, #27]
 800be38:	2b00      	cmp	r3, #0
 800be3a:	f000 80e6 	beq.w	800c00a <EE_Init+0x392>
						return FlashStatus;
 800be3e:	7efb      	ldrb	r3, [r7, #27]
 800be40:	b29b      	uxth	r3, r3
 800be42:	e0e8      	b.n	800c016 <EE_Init+0x39e>
					}
				}
			} else if (PageStatus1 == ERASED) /* Page0 receive, Page1 erased */
 800be44:	8c3b      	ldrh	r3, [r7, #32]
 800be46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800be4a:	4293      	cmp	r3, r2
 800be4c:	d12b      	bne.n	800bea6 <EE_Init+0x22e>
			{
				pEraseInit.Sector = PAGE1_ID;
 800be4e:	230b      	movs	r3, #11
 800be50:	60bb      	str	r3, [r7, #8]
				pEraseInit.NbSectors = 1;
 800be52:	2301      	movs	r3, #1
 800be54:	60fb      	str	r3, [r7, #12]
				pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800be56:	2302      	movs	r3, #2
 800be58:	613b      	str	r3, [r7, #16]
				/* Erase Page1 */
				if (!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS)) {
 800be5a:	4832      	ldr	r0, [pc, #200]	; (800bf24 <EE_Init+0x2ac>)
 800be5c:	f000 f8ea 	bl	800c034 <EE_VerifyPageFullyErased>
 800be60:	4603      	mov	r3, r0
 800be62:	2b00      	cmp	r3, #0
 800be64:	d10e      	bne.n	800be84 <EE_Init+0x20c>
					FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800be66:	f107 0214 	add.w	r2, r7, #20
 800be6a:	463b      	mov	r3, r7
 800be6c:	4611      	mov	r1, r2
 800be6e:	4618      	mov	r0, r3
 800be70:	f7f5 ff78 	bl	8001d64 <HAL_FLASHEx_Erase>
 800be74:	4603      	mov	r3, r0
 800be76:	76fb      	strb	r3, [r7, #27]
					/* If erase operation was failed, a Flash error code is returned */
					if (FlashStatus != HAL_OK) {
 800be78:	7efb      	ldrb	r3, [r7, #27]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d002      	beq.n	800be84 <EE_Init+0x20c>
						return FlashStatus;
 800be7e:	7efb      	ldrb	r3, [r7, #27]
 800be80:	b29b      	uxth	r3, r3
 800be82:	e0c8      	b.n	800c016 <EE_Init+0x39e>
					}
				}
				/* Mark Page0 as valid */
				FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 800be84:	f04f 0200 	mov.w	r2, #0
 800be88:	f04f 0300 	mov.w	r3, #0
 800be8c:	4924      	ldr	r1, [pc, #144]	; (800bf20 <EE_Init+0x2a8>)
 800be8e:	2001      	movs	r0, #1
 800be90:	f7f5 fdc6 	bl	8001a20 <HAL_FLASH_Program>
 800be94:	4603      	mov	r3, r0
 800be96:	76fb      	strb	r3, [r7, #27]
				/* If program operation was failed, a Flash error code is returned */
				if (FlashStatus != HAL_OK) {
 800be98:	7efb      	ldrb	r3, [r7, #27]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	f000 80b5 	beq.w	800c00a <EE_Init+0x392>
					return FlashStatus;
 800bea0:	7efb      	ldrb	r3, [r7, #27]
 800bea2:	b29b      	uxth	r3, r3
 800bea4:	e0b7      	b.n	800c016 <EE_Init+0x39e>
				}
			} else /* Invalid state -> format eeprom */
			{
				/* Erase both Page0 and Page1 and set Page0 as valid page */
				FlashStatus = EE_Format();
 800bea6:	f000 f957 	bl	800c158 <EE_Format>
 800beaa:	4603      	mov	r3, r0
 800beac:	76fb      	strb	r3, [r7, #27]
				/* If erase/program operation was failed, a Flash error code is returned */
				if (FlashStatus != HAL_OK) {
 800beae:	7efb      	ldrb	r3, [r7, #27]
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	f000 80aa 	beq.w	800c00a <EE_Init+0x392>
					return FlashStatus;
 800beb6:	7efb      	ldrb	r3, [r7, #27]
 800beb8:	b29b      	uxth	r3, r3
 800beba:	e0ac      	b.n	800c016 <EE_Init+0x39e>
				}
			}
			break;

		case VALID_PAGE:
			if (PageStatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 800bebc:	8c3b      	ldrh	r3, [r7, #32]
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d10a      	bne.n	800bed8 <EE_Init+0x260>
			{
				/* Erase both Page0 and Page1 and set Page0 as valid page */
				FlashStatus = EE_Format();
 800bec2:	f000 f949 	bl	800c158 <EE_Format>
 800bec6:	4603      	mov	r3, r0
 800bec8:	76fb      	strb	r3, [r7, #27]
				/* If erase/program operation was failed, a Flash error code is returned */
				if (FlashStatus != HAL_OK) {
 800beca:	7efb      	ldrb	r3, [r7, #27]
 800becc:	2b00      	cmp	r3, #0
 800bece:	f000 809e 	beq.w	800c00e <EE_Init+0x396>
					return FlashStatus;
 800bed2:	7efb      	ldrb	r3, [r7, #27]
 800bed4:	b29b      	uxth	r3, r3
 800bed6:	e09e      	b.n	800c016 <EE_Init+0x39e>
				}
			} else if (PageStatus1 == ERASED) /* Page0 valid, Page1 erased */
 800bed8:	8c3b      	ldrh	r3, [r7, #32]
 800beda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bede:	4293      	cmp	r3, r2
 800bee0:	d11b      	bne.n	800bf1a <EE_Init+0x2a2>
			{
				pEraseInit.Sector = PAGE1_ID;
 800bee2:	230b      	movs	r3, #11
 800bee4:	60bb      	str	r3, [r7, #8]
				pEraseInit.NbSectors = 1;
 800bee6:	2301      	movs	r3, #1
 800bee8:	60fb      	str	r3, [r7, #12]
				pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800beea:	2302      	movs	r3, #2
 800beec:	613b      	str	r3, [r7, #16]
				/* Erase Page1 */
				if (!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS)) {
 800beee:	480d      	ldr	r0, [pc, #52]	; (800bf24 <EE_Init+0x2ac>)
 800bef0:	f000 f8a0 	bl	800c034 <EE_VerifyPageFullyErased>
 800bef4:	4603      	mov	r3, r0
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	f040 8089 	bne.w	800c00e <EE_Init+0x396>
					FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800befc:	f107 0214 	add.w	r2, r7, #20
 800bf00:	463b      	mov	r3, r7
 800bf02:	4611      	mov	r1, r2
 800bf04:	4618      	mov	r0, r3
 800bf06:	f7f5 ff2d 	bl	8001d64 <HAL_FLASHEx_Erase>
 800bf0a:	4603      	mov	r3, r0
 800bf0c:	76fb      	strb	r3, [r7, #27]
					/* If erase operation was failed, a Flash error code is returned */
					if (FlashStatus != HAL_OK) {
 800bf0e:	7efb      	ldrb	r3, [r7, #27]
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d07c      	beq.n	800c00e <EE_Init+0x396>
						return FlashStatus;
 800bf14:	7efb      	ldrb	r3, [r7, #27]
 800bf16:	b29b      	uxth	r3, r3
 800bf18:	e07d      	b.n	800c016 <EE_Init+0x39e>
					}
				}
			} else /* Page0 valid, Page1 receive */
			{
				/* Transfer data from Page0 to Page1 */
				for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++) {
 800bf1a:	2300      	movs	r3, #0
 800bf1c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800bf1e:	e03a      	b.n	800bf96 <EE_Init+0x31e>
 800bf20:	080d0000 	.word	0x080d0000
 800bf24:	080f0000 	.word	0x080f0000
 800bf28:	080d0006 	.word	0x080d0006
 800bf2c:	20000008 	.word	0x20000008
 800bf30:	20006534 	.word	0x20006534
					if ((*(__IO uint16_t*) (PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx]) {
 800bf34:	4b3a      	ldr	r3, [pc, #232]	; (800c020 <EE_Init+0x3a8>)
 800bf36:	881b      	ldrh	r3, [r3, #0]
 800bf38:	b29a      	uxth	r2, r3
 800bf3a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bf3c:	4939      	ldr	r1, [pc, #228]	; (800c024 <EE_Init+0x3ac>)
 800bf3e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800bf42:	429a      	cmp	r2, r3
 800bf44:	d101      	bne.n	800bf4a <EE_Init+0x2d2>
						x = VarIdx;
 800bf46:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bf48:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
					if (VarIdx != x) {
 800bf4a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800bf4c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800bf50:	429a      	cmp	r2, r3
 800bf52:	d01d      	beq.n	800bf90 <EE_Init+0x318>
						/* Read the last variables' updates */
						ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 800bf54:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bf56:	4a33      	ldr	r2, [pc, #204]	; (800c024 <EE_Init+0x3ac>)
 800bf58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bf5c:	4932      	ldr	r1, [pc, #200]	; (800c028 <EE_Init+0x3b0>)
 800bf5e:	4618      	mov	r0, r3
 800bf60:	f000 f88e 	bl	800c080 <EE_ReadVariable>
 800bf64:	4603      	mov	r3, r0
 800bf66:	83bb      	strh	r3, [r7, #28]
						/* In case variable corresponding to the virtual address was found */
						if (ReadStatus != 0x1) {
 800bf68:	8bbb      	ldrh	r3, [r7, #28]
 800bf6a:	2b01      	cmp	r3, #1
 800bf6c:	d010      	beq.n	800bf90 <EE_Init+0x318>
							/* Transfer the variable to the Page1 */
							EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 800bf6e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bf70:	4a2c      	ldr	r2, [pc, #176]	; (800c024 <EE_Init+0x3ac>)
 800bf72:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800bf76:	4b2c      	ldr	r3, [pc, #176]	; (800c028 <EE_Init+0x3b0>)
 800bf78:	881b      	ldrh	r3, [r3, #0]
 800bf7a:	4619      	mov	r1, r3
 800bf7c:	4610      	mov	r0, r2
 800bf7e:	f000 f983 	bl	800c288 <EE_VerifyPageFullWriteVariable>
 800bf82:	4603      	mov	r3, r0
 800bf84:	83fb      	strh	r3, [r7, #30]
							/* If program operation was failed, a Flash error code is returned */
							if (EepromStatus != HAL_OK) {
 800bf86:	8bfb      	ldrh	r3, [r7, #30]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d001      	beq.n	800bf90 <EE_Init+0x318>
								return EepromStatus;
 800bf8c:	8bfb      	ldrh	r3, [r7, #30]
 800bf8e:	e042      	b.n	800c016 <EE_Init+0x39e>
				for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++) {
 800bf90:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bf92:	3301      	adds	r3, #1
 800bf94:	84fb      	strh	r3, [r7, #38]	; 0x26
 800bf96:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bf98:	2b01      	cmp	r3, #1
 800bf9a:	d9cb      	bls.n	800bf34 <EE_Init+0x2bc>
							}
						}
					}
				}
				/* Mark Page1 as valid */
				FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);
 800bf9c:	f04f 0200 	mov.w	r2, #0
 800bfa0:	f04f 0300 	mov.w	r3, #0
 800bfa4:	4921      	ldr	r1, [pc, #132]	; (800c02c <EE_Init+0x3b4>)
 800bfa6:	2001      	movs	r0, #1
 800bfa8:	f7f5 fd3a 	bl	8001a20 <HAL_FLASH_Program>
 800bfac:	4603      	mov	r3, r0
 800bfae:	76fb      	strb	r3, [r7, #27]
				/* If program operation was failed, a Flash error code is returned */
				if (FlashStatus != HAL_OK) {
 800bfb0:	7efb      	ldrb	r3, [r7, #27]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d002      	beq.n	800bfbc <EE_Init+0x344>
					return FlashStatus;
 800bfb6:	7efb      	ldrb	r3, [r7, #27]
 800bfb8:	b29b      	uxth	r3, r3
 800bfba:	e02c      	b.n	800c016 <EE_Init+0x39e>
				}
				pEraseInit.Sector = PAGE0_ID;
 800bfbc:	230a      	movs	r3, #10
 800bfbe:	60bb      	str	r3, [r7, #8]
				pEraseInit.NbSectors = 1;
 800bfc0:	2301      	movs	r3, #1
 800bfc2:	60fb      	str	r3, [r7, #12]
				pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800bfc4:	2302      	movs	r3, #2
 800bfc6:	613b      	str	r3, [r7, #16]
				/* Erase Page0 */
				if (!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS)) {
 800bfc8:	4819      	ldr	r0, [pc, #100]	; (800c030 <EE_Init+0x3b8>)
 800bfca:	f000 f833 	bl	800c034 <EE_VerifyPageFullyErased>
 800bfce:	4603      	mov	r3, r0
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d11c      	bne.n	800c00e <EE_Init+0x396>
					FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800bfd4:	f107 0214 	add.w	r2, r7, #20
 800bfd8:	463b      	mov	r3, r7
 800bfda:	4611      	mov	r1, r2
 800bfdc:	4618      	mov	r0, r3
 800bfde:	f7f5 fec1 	bl	8001d64 <HAL_FLASHEx_Erase>
 800bfe2:	4603      	mov	r3, r0
 800bfe4:	76fb      	strb	r3, [r7, #27]
					/* If erase operation was failed, a Flash error code is returned */
					if (FlashStatus != HAL_OK) {
 800bfe6:	7efb      	ldrb	r3, [r7, #27]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d010      	beq.n	800c00e <EE_Init+0x396>
						return FlashStatus;
 800bfec:	7efb      	ldrb	r3, [r7, #27]
 800bfee:	b29b      	uxth	r3, r3
 800bff0:	e011      	b.n	800c016 <EE_Init+0x39e>
			}
			break;

		default: /* Any other state -> format eeprom */
			/* Erase both Page0 and Page1 and set Page0 as valid page */
			FlashStatus = EE_Format();
 800bff2:	f000 f8b1 	bl	800c158 <EE_Format>
 800bff6:	4603      	mov	r3, r0
 800bff8:	76fb      	strb	r3, [r7, #27]
			/* If erase/program operation was failed, a Flash error code is returned */
			if (FlashStatus != HAL_OK) {
 800bffa:	7efb      	ldrb	r3, [r7, #27]
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d008      	beq.n	800c012 <EE_Init+0x39a>
				return FlashStatus;
 800c000:	7efb      	ldrb	r3, [r7, #27]
 800c002:	b29b      	uxth	r3, r3
 800c004:	e007      	b.n	800c016 <EE_Init+0x39e>
			break;
 800c006:	bf00      	nop
 800c008:	e004      	b.n	800c014 <EE_Init+0x39c>
			break;
 800c00a:	bf00      	nop
 800c00c:	e002      	b.n	800c014 <EE_Init+0x39c>
			break;
 800c00e:	bf00      	nop
 800c010:	e000      	b.n	800c014 <EE_Init+0x39c>
			}
			break;
 800c012:	bf00      	nop
	}

	return HAL_OK;
 800c014:	2300      	movs	r3, #0
}
 800c016:	4618      	mov	r0, r3
 800c018:	3728      	adds	r7, #40	; 0x28
 800c01a:	46bd      	mov	sp, r7
 800c01c:	bd80      	pop	{r7, pc}
 800c01e:	bf00      	nop
 800c020:	080f0006 	.word	0x080f0006
 800c024:	20000008 	.word	0x20000008
 800c028:	20006534 	.word	0x20006534
 800c02c:	080f0000 	.word	0x080f0000
 800c030:	080d0000 	.word	0x080d0000

0800c034 <EE_VerifyPageFullyErased>:
 *     @arg PAGE1_BASE_ADDRESS: Page1 base address
 * @retval page fully erased status:
 *           - 0: if Page not erased
 *           - 1: if Page erased
 */
uint16_t EE_VerifyPageFullyErased(uint32_t Address) {
 800c034:	b480      	push	{r7}
 800c036:	b085      	sub	sp, #20
 800c038:	af00      	add	r7, sp, #0
 800c03a:	6078      	str	r0, [r7, #4]
	uint32_t ReadStatus = 1;
 800c03c:	2301      	movs	r3, #1
 800c03e:	60fb      	str	r3, [r7, #12]
	uint16_t AddressValue = 0x5555;
 800c040:	f245 5355 	movw	r3, #21845	; 0x5555
 800c044:	817b      	strh	r3, [r7, #10]

	/* Check each active page address starting from end */
	while (Address <= PAGE0_END_ADDRESS) {
 800c046:	e00d      	b.n	800c064 <EE_VerifyPageFullyErased+0x30>
		/* Get the current location content to be compared with virtual address */
		AddressValue = (*(__IO uint16_t*) Address);
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	881b      	ldrh	r3, [r3, #0]
 800c04c:	817b      	strh	r3, [r7, #10]

		/* Compare the read address with the virtual address */
		if (AddressValue != ERASED) {
 800c04e:	897b      	ldrh	r3, [r7, #10]
 800c050:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c054:	4293      	cmp	r3, r2
 800c056:	d002      	beq.n	800c05e <EE_VerifyPageFullyErased+0x2a>

			/* In case variable value is read, reset ReadStatus flag */
			ReadStatus = 0;
 800c058:	2300      	movs	r3, #0
 800c05a:	60fb      	str	r3, [r7, #12]

			break;
 800c05c:	e006      	b.n	800c06c <EE_VerifyPageFullyErased+0x38>
		}
		/* Next address location */
		Address = Address + 4;
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	3304      	adds	r3, #4
 800c062:	607b      	str	r3, [r7, #4]
	while (Address <= PAGE0_END_ADDRESS) {
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	4a05      	ldr	r2, [pc, #20]	; (800c07c <EE_VerifyPageFullyErased+0x48>)
 800c068:	4293      	cmp	r3, r2
 800c06a:	d9ed      	bls.n	800c048 <EE_VerifyPageFullyErased+0x14>
	}

	/* Return ReadStatus value: (0: Page not erased, 1: Sector erased) */
	return ReadStatus;
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	b29b      	uxth	r3, r3
}
 800c070:	4618      	mov	r0, r3
 800c072:	3714      	adds	r7, #20
 800c074:	46bd      	mov	sp, r7
 800c076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c07a:	4770      	bx	lr
 800c07c:	080effff 	.word	0x080effff

0800c080 <EE_ReadVariable>:
 * @retval Success or error status:
 *           - 0: if variable was found
 *           - 1: if the variable was not found
 *           - NO_VALID_PAGE: if no valid page was found.
 */
uint16_t EE_ReadVariable(uint16_t VirtAddress, uint16_t* Data) {
 800c080:	b580      	push	{r7, lr}
 800c082:	b086      	sub	sp, #24
 800c084:	af00      	add	r7, sp, #0
 800c086:	4603      	mov	r3, r0
 800c088:	6039      	str	r1, [r7, #0]
 800c08a:	80fb      	strh	r3, [r7, #6]
	uint16_t ValidPage = PAGE0;
 800c08c:	2300      	movs	r3, #0
 800c08e:	81fb      	strh	r3, [r7, #14]
	uint16_t AddressValue = 0x5555, ReadStatus = 1;
 800c090:	f245 5355 	movw	r3, #21845	; 0x5555
 800c094:	81bb      	strh	r3, [r7, #12]
 800c096:	2301      	movs	r3, #1
 800c098:	82fb      	strh	r3, [r7, #22]
	uint32_t Address = EEPROM_START_ADDRESS, PageStartAddress = EEPROM_START_ADDRESS;
 800c09a:	4b1c      	ldr	r3, [pc, #112]	; (800c10c <EE_ReadVariable+0x8c>)
 800c09c:	613b      	str	r3, [r7, #16]
 800c09e:	4b1b      	ldr	r3, [pc, #108]	; (800c10c <EE_ReadVariable+0x8c>)
 800c0a0:	60bb      	str	r3, [r7, #8]

	/* Get active Page for read operation */
	ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 800c0a2:	2000      	movs	r0, #0
 800c0a4:	f000 f8aa 	bl	800c1fc <EE_FindValidPage>
 800c0a8:	4603      	mov	r3, r0
 800c0aa:	81fb      	strh	r3, [r7, #14]

	/* Check if there is no valid page */
	if (ValidPage == NO_VALID_PAGE) {
 800c0ac:	89fb      	ldrh	r3, [r7, #14]
 800c0ae:	2bab      	cmp	r3, #171	; 0xab
 800c0b0:	d101      	bne.n	800c0b6 <EE_ReadVariable+0x36>
		return NO_VALID_PAGE;
 800c0b2:	23ab      	movs	r3, #171	; 0xab
 800c0b4:	e026      	b.n	800c104 <EE_ReadVariable+0x84>
	}

	/* Get the valid Page start Address */
	PageStartAddress = (uint32_t) (EEPROM_START_ADDRESS + (uint32_t) (ValidPage * PAGE_SIZE ));
 800c0b6:	89fb      	ldrh	r3, [r7, #14]
 800c0b8:	045b      	lsls	r3, r3, #17
 800c0ba:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800c0be:	f503 2350 	add.w	r3, r3, #851968	; 0xd0000
 800c0c2:	60bb      	str	r3, [r7, #8]

	/* Get the valid Page end Address */
	Address = (uint32_t) ((EEPROM_START_ADDRESS - 2) + (uint32_t) ((1 + ValidPage) * PAGE_SIZE ));
 800c0c4:	89fb      	ldrh	r3, [r7, #14]
 800c0c6:	3301      	adds	r3, #1
 800c0c8:	045a      	lsls	r2, r3, #17
 800c0ca:	4b11      	ldr	r3, [pc, #68]	; (800c110 <EE_ReadVariable+0x90>)
 800c0cc:	4413      	add	r3, r2
 800c0ce:	613b      	str	r3, [r7, #16]

	/* Check each active page address starting from end */
	while (Address > (PageStartAddress + 2)) {
 800c0d0:	e012      	b.n	800c0f8 <EE_ReadVariable+0x78>
		/* Get the current location content to be compared with virtual address */
		AddressValue = (*(__IO uint16_t*) Address);
 800c0d2:	693b      	ldr	r3, [r7, #16]
 800c0d4:	881b      	ldrh	r3, [r3, #0]
 800c0d6:	81bb      	strh	r3, [r7, #12]

		/* Compare the read address with the virtual address */
		if (AddressValue == VirtAddress) {
 800c0d8:	89ba      	ldrh	r2, [r7, #12]
 800c0da:	88fb      	ldrh	r3, [r7, #6]
 800c0dc:	429a      	cmp	r2, r3
 800c0de:	d108      	bne.n	800c0f2 <EE_ReadVariable+0x72>
			/* Get content of Address-2 which is variable value */
			*Data = (*(__IO uint16_t*) (Address - 2));
 800c0e0:	693b      	ldr	r3, [r7, #16]
 800c0e2:	3b02      	subs	r3, #2
 800c0e4:	881b      	ldrh	r3, [r3, #0]
 800c0e6:	b29a      	uxth	r2, r3
 800c0e8:	683b      	ldr	r3, [r7, #0]
 800c0ea:	801a      	strh	r2, [r3, #0]

			/* In case variable value is read, reset ReadStatus flag */
			ReadStatus = 0;
 800c0ec:	2300      	movs	r3, #0
 800c0ee:	82fb      	strh	r3, [r7, #22]

			break;
 800c0f0:	e007      	b.n	800c102 <EE_ReadVariable+0x82>
		} else {
			/* Next address location */
			Address = Address - 4;
 800c0f2:	693b      	ldr	r3, [r7, #16]
 800c0f4:	3b04      	subs	r3, #4
 800c0f6:	613b      	str	r3, [r7, #16]
	while (Address > (PageStartAddress + 2)) {
 800c0f8:	68bb      	ldr	r3, [r7, #8]
 800c0fa:	3302      	adds	r3, #2
 800c0fc:	693a      	ldr	r2, [r7, #16]
 800c0fe:	429a      	cmp	r2, r3
 800c100:	d8e7      	bhi.n	800c0d2 <EE_ReadVariable+0x52>
		}
	}

	/* Return ReadStatus value: (0: variable exist, 1: variable doesn't exist) */
	return ReadStatus;
 800c102:	8afb      	ldrh	r3, [r7, #22]
}
 800c104:	4618      	mov	r0, r3
 800c106:	3718      	adds	r7, #24
 800c108:	46bd      	mov	sp, r7
 800c10a:	bd80      	pop	{r7, pc}
 800c10c:	080d0000 	.word	0x080d0000
 800c110:	080cfffe 	.word	0x080cfffe

0800c114 <EE_WriteVariable>:
 *           - FLASH_COMPLETE: on success
 *           - PAGE_FULL: if valid page is full
 *           - NO_VALID_PAGE: if no valid page was found
 *           - Flash error code: on write Flash error
 */
uint16_t EE_WriteVariable(uint16_t VirtAddress, uint16_t Data) {
 800c114:	b580      	push	{r7, lr}
 800c116:	b084      	sub	sp, #16
 800c118:	af00      	add	r7, sp, #0
 800c11a:	4603      	mov	r3, r0
 800c11c:	460a      	mov	r2, r1
 800c11e:	80fb      	strh	r3, [r7, #6]
 800c120:	4613      	mov	r3, r2
 800c122:	80bb      	strh	r3, [r7, #4]
	uint16_t Status = 0;
 800c124:	2300      	movs	r3, #0
 800c126:	81fb      	strh	r3, [r7, #14]

	/* Write the variable virtual address and value in the EEPROM */
	Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 800c128:	88ba      	ldrh	r2, [r7, #4]
 800c12a:	88fb      	ldrh	r3, [r7, #6]
 800c12c:	4611      	mov	r1, r2
 800c12e:	4618      	mov	r0, r3
 800c130:	f000 f8aa 	bl	800c288 <EE_VerifyPageFullWriteVariable>
 800c134:	4603      	mov	r3, r0
 800c136:	81fb      	strh	r3, [r7, #14]

	/* In case the EEPROM active page is full */
	if (Status == PAGE_FULL) {
 800c138:	89fb      	ldrh	r3, [r7, #14]
 800c13a:	2b80      	cmp	r3, #128	; 0x80
 800c13c:	d107      	bne.n	800c14e <EE_WriteVariable+0x3a>
		/* Perform Page transfer */
		Status = EE_PageTransfer(VirtAddress, Data);
 800c13e:	88ba      	ldrh	r2, [r7, #4]
 800c140:	88fb      	ldrh	r3, [r7, #6]
 800c142:	4611      	mov	r1, r2
 800c144:	4618      	mov	r0, r3
 800c146:	f000 f8ff 	bl	800c348 <EE_PageTransfer>
 800c14a:	4603      	mov	r3, r0
 800c14c:	81fb      	strh	r3, [r7, #14]
	}

	/* Return last operation status */
	return Status;
 800c14e:	89fb      	ldrh	r3, [r7, #14]
}
 800c150:	4618      	mov	r0, r3
 800c152:	3710      	adds	r7, #16
 800c154:	46bd      	mov	sp, r7
 800c156:	bd80      	pop	{r7, pc}

0800c158 <EE_Format>:
 * @brief  Erases PAGE and PAGE1 and writes VALID_PAGE header to PAGE
 * @param  None
 * @retval Status of the last operation (Flash write or erase) done during
 *         EEPROM formating
 */
static HAL_StatusTypeDef EE_Format(void) {
 800c158:	b580      	push	{r7, lr}
 800c15a:	b088      	sub	sp, #32
 800c15c:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef FlashStatus = HAL_OK;
 800c15e:	2300      	movs	r3, #0
 800c160:	77fb      	strb	r3, [r7, #31]
	uint32_t SectorError = 0;
 800c162:	2300      	movs	r3, #0
 800c164:	61bb      	str	r3, [r7, #24]
	FLASH_EraseInitTypeDef pEraseInit;

	pEraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;
 800c166:	2300      	movs	r3, #0
 800c168:	607b      	str	r3, [r7, #4]
	pEraseInit.Sector = PAGE0_ID;
 800c16a:	230a      	movs	r3, #10
 800c16c:	60fb      	str	r3, [r7, #12]
	pEraseInit.NbSectors = 1;
 800c16e:	2301      	movs	r3, #1
 800c170:	613b      	str	r3, [r7, #16]
	pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800c172:	2302      	movs	r3, #2
 800c174:	617b      	str	r3, [r7, #20]
	/* Erase Page0 */
	if (!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS)) {
 800c176:	481f      	ldr	r0, [pc, #124]	; (800c1f4 <EE_Format+0x9c>)
 800c178:	f7ff ff5c 	bl	800c034 <EE_VerifyPageFullyErased>
 800c17c:	4603      	mov	r3, r0
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d10d      	bne.n	800c19e <EE_Format+0x46>
		FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800c182:	f107 0218 	add.w	r2, r7, #24
 800c186:	1d3b      	adds	r3, r7, #4
 800c188:	4611      	mov	r1, r2
 800c18a:	4618      	mov	r0, r3
 800c18c:	f7f5 fdea 	bl	8001d64 <HAL_FLASHEx_Erase>
 800c190:	4603      	mov	r3, r0
 800c192:	77fb      	strb	r3, [r7, #31]
		/* If erase operation was failed, a Flash error code is returned */
		if (FlashStatus != HAL_OK) {
 800c194:	7ffb      	ldrb	r3, [r7, #31]
 800c196:	2b00      	cmp	r3, #0
 800c198:	d001      	beq.n	800c19e <EE_Format+0x46>
			return FlashStatus;
 800c19a:	7ffb      	ldrb	r3, [r7, #31]
 800c19c:	e025      	b.n	800c1ea <EE_Format+0x92>
		}
	}
	/* Set Page0 as valid page: Write VALID_PAGE at Page0 base address */
	FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 800c19e:	f04f 0200 	mov.w	r2, #0
 800c1a2:	f04f 0300 	mov.w	r3, #0
 800c1a6:	4913      	ldr	r1, [pc, #76]	; (800c1f4 <EE_Format+0x9c>)
 800c1a8:	2001      	movs	r0, #1
 800c1aa:	f7f5 fc39 	bl	8001a20 <HAL_FLASH_Program>
 800c1ae:	4603      	mov	r3, r0
 800c1b0:	77fb      	strb	r3, [r7, #31]
	/* If program operation was failed, a Flash error code is returned */
	if (FlashStatus != HAL_OK) {
 800c1b2:	7ffb      	ldrb	r3, [r7, #31]
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d001      	beq.n	800c1bc <EE_Format+0x64>
		return FlashStatus;
 800c1b8:	7ffb      	ldrb	r3, [r7, #31]
 800c1ba:	e016      	b.n	800c1ea <EE_Format+0x92>
	}

	pEraseInit.Sector = PAGE1_ID;
 800c1bc:	230b      	movs	r3, #11
 800c1be:	60fb      	str	r3, [r7, #12]
	/* Erase Page1 */
	if (!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS)) {
 800c1c0:	480d      	ldr	r0, [pc, #52]	; (800c1f8 <EE_Format+0xa0>)
 800c1c2:	f7ff ff37 	bl	800c034 <EE_VerifyPageFullyErased>
 800c1c6:	4603      	mov	r3, r0
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d10d      	bne.n	800c1e8 <EE_Format+0x90>
		FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800c1cc:	f107 0218 	add.w	r2, r7, #24
 800c1d0:	1d3b      	adds	r3, r7, #4
 800c1d2:	4611      	mov	r1, r2
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	f7f5 fdc5 	bl	8001d64 <HAL_FLASHEx_Erase>
 800c1da:	4603      	mov	r3, r0
 800c1dc:	77fb      	strb	r3, [r7, #31]
		/* If erase operation was failed, a Flash error code is returned */
		if (FlashStatus != HAL_OK) {
 800c1de:	7ffb      	ldrb	r3, [r7, #31]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d001      	beq.n	800c1e8 <EE_Format+0x90>
			return FlashStatus;
 800c1e4:	7ffb      	ldrb	r3, [r7, #31]
 800c1e6:	e000      	b.n	800c1ea <EE_Format+0x92>
		}
	}

	return HAL_OK;
 800c1e8:	2300      	movs	r3, #0
}
 800c1ea:	4618      	mov	r0, r3
 800c1ec:	3720      	adds	r7, #32
 800c1ee:	46bd      	mov	sp, r7
 800c1f0:	bd80      	pop	{r7, pc}
 800c1f2:	bf00      	nop
 800c1f4:	080d0000 	.word	0x080d0000
 800c1f8:	080f0000 	.word	0x080f0000

0800c1fc <EE_FindValidPage>:
 *     @arg READ_FROM_VALID_PAGE: read operation from valid page
 *     @arg WRITE_IN_VALID_PAGE: write operation from valid page
 * @retval Valid page number (PAGE or PAGE1) or NO_VALID_PAGE in case
 *   of no valid page was found
 */
static uint16_t EE_FindValidPage(uint8_t Operation) {
 800c1fc:	b480      	push	{r7}
 800c1fe:	b085      	sub	sp, #20
 800c200:	af00      	add	r7, sp, #0
 800c202:	4603      	mov	r3, r0
 800c204:	71fb      	strb	r3, [r7, #7]
	uint16_t PageStatus0 = 6, PageStatus1 = 6;
 800c206:	2306      	movs	r3, #6
 800c208:	81fb      	strh	r3, [r7, #14]
 800c20a:	2306      	movs	r3, #6
 800c20c:	81bb      	strh	r3, [r7, #12]

	/* Get Page0 actual status */
	PageStatus0 = (*(__IO uint16_t*) PAGE0_BASE_ADDRESS);
 800c20e:	4b1c      	ldr	r3, [pc, #112]	; (800c280 <EE_FindValidPage+0x84>)
 800c210:	881b      	ldrh	r3, [r3, #0]
 800c212:	81fb      	strh	r3, [r7, #14]

	/* Get Page1 actual status */
	PageStatus1 = (*(__IO uint16_t*) PAGE1_BASE_ADDRESS);
 800c214:	4b1b      	ldr	r3, [pc, #108]	; (800c284 <EE_FindValidPage+0x88>)
 800c216:	881b      	ldrh	r3, [r3, #0]
 800c218:	81bb      	strh	r3, [r7, #12]

	/* Write or read operation */
	switch (Operation) {
 800c21a:	79fb      	ldrb	r3, [r7, #7]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d01b      	beq.n	800c258 <EE_FindValidPage+0x5c>
 800c220:	2b01      	cmp	r3, #1
 800c222:	d125      	bne.n	800c270 <EE_FindValidPage+0x74>
		case WRITE_IN_VALID_PAGE: /* ---- Write operation ---- */
			if (PageStatus1 == VALID_PAGE) {
 800c224:	89bb      	ldrh	r3, [r7, #12]
 800c226:	2b00      	cmp	r3, #0
 800c228:	d108      	bne.n	800c23c <EE_FindValidPage+0x40>
				/* Page0 receiving data */
				if (PageStatus0 == RECEIVE_DATA) {
 800c22a:	89fb      	ldrh	r3, [r7, #14]
 800c22c:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 800c230:	4293      	cmp	r3, r2
 800c232:	d101      	bne.n	800c238 <EE_FindValidPage+0x3c>
					return PAGE0; /* Page0 valid */
 800c234:	2300      	movs	r3, #0
 800c236:	e01c      	b.n	800c272 <EE_FindValidPage+0x76>
				} else {
					return PAGE1; /* Page1 valid */
 800c238:	2301      	movs	r3, #1
 800c23a:	e01a      	b.n	800c272 <EE_FindValidPage+0x76>
				}
			} else if (PageStatus0 == VALID_PAGE) {
 800c23c:	89fb      	ldrh	r3, [r7, #14]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d108      	bne.n	800c254 <EE_FindValidPage+0x58>
				/* Page1 receiving data */
				if (PageStatus1 == RECEIVE_DATA) {
 800c242:	89bb      	ldrh	r3, [r7, #12]
 800c244:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 800c248:	4293      	cmp	r3, r2
 800c24a:	d101      	bne.n	800c250 <EE_FindValidPage+0x54>
					return PAGE1; /* Page1 valid */
 800c24c:	2301      	movs	r3, #1
 800c24e:	e010      	b.n	800c272 <EE_FindValidPage+0x76>
				} else {
					return PAGE0; /* Page0 valid */
 800c250:	2300      	movs	r3, #0
 800c252:	e00e      	b.n	800c272 <EE_FindValidPage+0x76>
				}
			} else {
				return NO_VALID_PAGE; /* No valid Page */
 800c254:	23ab      	movs	r3, #171	; 0xab
 800c256:	e00c      	b.n	800c272 <EE_FindValidPage+0x76>
			}

		case READ_FROM_VALID_PAGE: /* ---- Read operation ---- */
			if (PageStatus0 == VALID_PAGE) {
 800c258:	89fb      	ldrh	r3, [r7, #14]
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d101      	bne.n	800c262 <EE_FindValidPage+0x66>
				return PAGE0; /* Page0 valid */
 800c25e:	2300      	movs	r3, #0
 800c260:	e007      	b.n	800c272 <EE_FindValidPage+0x76>
			} else if (PageStatus1 == VALID_PAGE) {
 800c262:	89bb      	ldrh	r3, [r7, #12]
 800c264:	2b00      	cmp	r3, #0
 800c266:	d101      	bne.n	800c26c <EE_FindValidPage+0x70>
				return PAGE1; /* Page1 valid */
 800c268:	2301      	movs	r3, #1
 800c26a:	e002      	b.n	800c272 <EE_FindValidPage+0x76>
			} else {
				return NO_VALID_PAGE; /* No valid Page */
 800c26c:	23ab      	movs	r3, #171	; 0xab
 800c26e:	e000      	b.n	800c272 <EE_FindValidPage+0x76>
			}

		default:
			return PAGE0; /* Page0 valid */
 800c270:	2300      	movs	r3, #0
	}
}
 800c272:	4618      	mov	r0, r3
 800c274:	3714      	adds	r7, #20
 800c276:	46bd      	mov	sp, r7
 800c278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c27c:	4770      	bx	lr
 800c27e:	bf00      	nop
 800c280:	080d0000 	.word	0x080d0000
 800c284:	080f0000 	.word	0x080f0000

0800c288 <EE_VerifyPageFullWriteVariable>:
 *           - FLASH_COMPLETE: on success
 *           - PAGE_FULL: if valid page is full
 *           - NO_VALID_PAGE: if no valid page was found
 *           - Flash error code: on write Flash error
 */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data) {
 800c288:	b590      	push	{r4, r7, lr}
 800c28a:	b087      	sub	sp, #28
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	4603      	mov	r3, r0
 800c290:	460a      	mov	r2, r1
 800c292:	80fb      	strh	r3, [r7, #6]
 800c294:	4613      	mov	r3, r2
 800c296:	80bb      	strh	r3, [r7, #4]
	HAL_StatusTypeDef FlashStatus = HAL_OK;
 800c298:	2300      	movs	r3, #0
 800c29a:	74fb      	strb	r3, [r7, #19]
	uint16_t ValidPage = PAGE0;
 800c29c:	2300      	movs	r3, #0
 800c29e:	823b      	strh	r3, [r7, #16]
	uint32_t Address = EEPROM_START_ADDRESS, PageEndAddress = EEPROM_START_ADDRESS + PAGE_SIZE;
 800c2a0:	4b26      	ldr	r3, [pc, #152]	; (800c33c <EE_VerifyPageFullWriteVariable+0xb4>)
 800c2a2:	617b      	str	r3, [r7, #20]
 800c2a4:	4b26      	ldr	r3, [pc, #152]	; (800c340 <EE_VerifyPageFullWriteVariable+0xb8>)
 800c2a6:	60fb      	str	r3, [r7, #12]

	/* Get valid Page for write operation */
	ValidPage = EE_FindValidPage(WRITE_IN_VALID_PAGE);
 800c2a8:	2001      	movs	r0, #1
 800c2aa:	f7ff ffa7 	bl	800c1fc <EE_FindValidPage>
 800c2ae:	4603      	mov	r3, r0
 800c2b0:	823b      	strh	r3, [r7, #16]

	/* Check if there is no valid page */
	if (ValidPage == NO_VALID_PAGE) {
 800c2b2:	8a3b      	ldrh	r3, [r7, #16]
 800c2b4:	2bab      	cmp	r3, #171	; 0xab
 800c2b6:	d101      	bne.n	800c2bc <EE_VerifyPageFullWriteVariable+0x34>
		return NO_VALID_PAGE;
 800c2b8:	23ab      	movs	r3, #171	; 0xab
 800c2ba:	e03a      	b.n	800c332 <EE_VerifyPageFullWriteVariable+0xaa>
	}

	/* Get the valid Page start Address */
	Address = (uint32_t) (EEPROM_START_ADDRESS + (uint32_t) (ValidPage * PAGE_SIZE ));
 800c2bc:	8a3b      	ldrh	r3, [r7, #16]
 800c2be:	045b      	lsls	r3, r3, #17
 800c2c0:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800c2c4:	f503 2350 	add.w	r3, r3, #851968	; 0xd0000
 800c2c8:	617b      	str	r3, [r7, #20]

	/* Get the valid Page end Address */
	PageEndAddress = (uint32_t) ((EEPROM_START_ADDRESS - 1) + (uint32_t) ((ValidPage + 1) * PAGE_SIZE ));
 800c2ca:	8a3b      	ldrh	r3, [r7, #16]
 800c2cc:	3301      	adds	r3, #1
 800c2ce:	045a      	lsls	r2, r3, #17
 800c2d0:	4b1c      	ldr	r3, [pc, #112]	; (800c344 <EE_VerifyPageFullWriteVariable+0xbc>)
 800c2d2:	4413      	add	r3, r2
 800c2d4:	60fb      	str	r3, [r7, #12]

	/* Check each active page address starting from begining */
	while (Address < PageEndAddress) {
 800c2d6:	e027      	b.n	800c328 <EE_VerifyPageFullWriteVariable+0xa0>
		/* Verify if Address and Address+2 contents are 0xFFFFFFFF */
		if ((*(__IO uint32_t*) Address) == 0xFFFFFFFF) {
 800c2d8:	697b      	ldr	r3, [r7, #20]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2e0:	d11f      	bne.n	800c322 <EE_VerifyPageFullWriteVariable+0x9a>
			/* Set variable data */
			FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Address, Data);
 800c2e2:	88bb      	ldrh	r3, [r7, #4]
 800c2e4:	f04f 0400 	mov.w	r4, #0
 800c2e8:	461a      	mov	r2, r3
 800c2ea:	4623      	mov	r3, r4
 800c2ec:	6979      	ldr	r1, [r7, #20]
 800c2ee:	2001      	movs	r0, #1
 800c2f0:	f7f5 fb96 	bl	8001a20 <HAL_FLASH_Program>
 800c2f4:	4603      	mov	r3, r0
 800c2f6:	74fb      	strb	r3, [r7, #19]
			/* If program operation was failed, a Flash error code is returned */
			if (FlashStatus != HAL_OK) {
 800c2f8:	7cfb      	ldrb	r3, [r7, #19]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d002      	beq.n	800c304 <EE_VerifyPageFullWriteVariable+0x7c>
				return FlashStatus;
 800c2fe:	7cfb      	ldrb	r3, [r7, #19]
 800c300:	b29b      	uxth	r3, r3
 800c302:	e016      	b.n	800c332 <EE_VerifyPageFullWriteVariable+0xaa>
			}
			/* Set variable virtual address */
			FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Address + 2, VirtAddress);
 800c304:	697b      	ldr	r3, [r7, #20]
 800c306:	1c99      	adds	r1, r3, #2
 800c308:	88fb      	ldrh	r3, [r7, #6]
 800c30a:	f04f 0400 	mov.w	r4, #0
 800c30e:	461a      	mov	r2, r3
 800c310:	4623      	mov	r3, r4
 800c312:	2001      	movs	r0, #1
 800c314:	f7f5 fb84 	bl	8001a20 <HAL_FLASH_Program>
 800c318:	4603      	mov	r3, r0
 800c31a:	74fb      	strb	r3, [r7, #19]
			/* Return program operation status */
			return FlashStatus;
 800c31c:	7cfb      	ldrb	r3, [r7, #19]
 800c31e:	b29b      	uxth	r3, r3
 800c320:	e007      	b.n	800c332 <EE_VerifyPageFullWriteVariable+0xaa>
		} else {
			/* Next address location */
			Address = Address + 4;
 800c322:	697b      	ldr	r3, [r7, #20]
 800c324:	3304      	adds	r3, #4
 800c326:	617b      	str	r3, [r7, #20]
	while (Address < PageEndAddress) {
 800c328:	697a      	ldr	r2, [r7, #20]
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	429a      	cmp	r2, r3
 800c32e:	d3d3      	bcc.n	800c2d8 <EE_VerifyPageFullWriteVariable+0x50>
		}
	}

	/* Return PAGE_FULL in case the valid page is full */
	return PAGE_FULL;
 800c330:	2380      	movs	r3, #128	; 0x80
}
 800c332:	4618      	mov	r0, r3
 800c334:	371c      	adds	r7, #28
 800c336:	46bd      	mov	sp, r7
 800c338:	bd90      	pop	{r4, r7, pc}
 800c33a:	bf00      	nop
 800c33c:	080d0000 	.word	0x080d0000
 800c340:	080f0000 	.word	0x080f0000
 800c344:	080cffff 	.word	0x080cffff

0800c348 <EE_PageTransfer>:
 *           - FLASH_COMPLETE: on success
 *           - PAGE_FULL: if valid page is full
 *           - NO_VALID_PAGE: if no valid page was found
 *           - Flash error code: on write Flash error
 */
static uint16_t EE_PageTransfer(uint16_t VirtAddress, uint16_t Data) {
 800c348:	b580      	push	{r7, lr}
 800c34a:	b08c      	sub	sp, #48	; 0x30
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	4603      	mov	r3, r0
 800c350:	460a      	mov	r2, r1
 800c352:	80fb      	strh	r3, [r7, #6]
 800c354:	4613      	mov	r3, r2
 800c356:	80bb      	strh	r3, [r7, #4]
	HAL_StatusTypeDef FlashStatus = HAL_OK;
 800c358:	2300      	movs	r3, #0
 800c35a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t NewPageAddress = EEPROM_START_ADDRESS;
 800c35e:	4b54      	ldr	r3, [pc, #336]	; (800c4b0 <EE_PageTransfer+0x168>)
 800c360:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint16_t OldPageId = 0;
 800c362:	2300      	movs	r3, #0
 800c364:	857b      	strh	r3, [r7, #42]	; 0x2a
	uint16_t ValidPage = PAGE0, VarIdx = 0;
 800c366:	2300      	movs	r3, #0
 800c368:	84bb      	strh	r3, [r7, #36]	; 0x24
 800c36a:	2300      	movs	r3, #0
 800c36c:	853b      	strh	r3, [r7, #40]	; 0x28
	uint16_t EepromStatus = 0, ReadStatus = 0;
 800c36e:	2300      	movs	r3, #0
 800c370:	847b      	strh	r3, [r7, #34]	; 0x22
 800c372:	2300      	movs	r3, #0
 800c374:	843b      	strh	r3, [r7, #32]
	uint32_t SectorError = 0;
 800c376:	2300      	movs	r3, #0
 800c378:	61fb      	str	r3, [r7, #28]
	FLASH_EraseInitTypeDef pEraseInit;

	/* Get active Page for read operation */
	ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 800c37a:	2000      	movs	r0, #0
 800c37c:	f7ff ff3e 	bl	800c1fc <EE_FindValidPage>
 800c380:	4603      	mov	r3, r0
 800c382:	84bb      	strh	r3, [r7, #36]	; 0x24

	if (ValidPage == PAGE1) /* Page1 valid */
 800c384:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c386:	2b01      	cmp	r3, #1
 800c388:	d104      	bne.n	800c394 <EE_PageTransfer+0x4c>
	{
		/* New page address where variable will be moved to */
		NewPageAddress = PAGE0_BASE_ADDRESS;
 800c38a:	4b49      	ldr	r3, [pc, #292]	; (800c4b0 <EE_PageTransfer+0x168>)
 800c38c:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Old page ID where variable will be taken from */
		OldPageId = PAGE1_ID;
 800c38e:	230b      	movs	r3, #11
 800c390:	857b      	strh	r3, [r7, #42]	; 0x2a
 800c392:	e009      	b.n	800c3a8 <EE_PageTransfer+0x60>
	} else if (ValidPage == PAGE0) /* Page0 valid */
 800c394:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c396:	2b00      	cmp	r3, #0
 800c398:	d104      	bne.n	800c3a4 <EE_PageTransfer+0x5c>
	{
		/* New page address  where variable will be moved to */
		NewPageAddress = PAGE1_BASE_ADDRESS;
 800c39a:	4b46      	ldr	r3, [pc, #280]	; (800c4b4 <EE_PageTransfer+0x16c>)
 800c39c:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Old page ID where variable will be taken from */
		OldPageId = PAGE0_ID;
 800c39e:	230a      	movs	r3, #10
 800c3a0:	857b      	strh	r3, [r7, #42]	; 0x2a
 800c3a2:	e001      	b.n	800c3a8 <EE_PageTransfer+0x60>
	} else {
		return NO_VALID_PAGE; /* No valid Page */
 800c3a4:	23ab      	movs	r3, #171	; 0xab
 800c3a6:	e07e      	b.n	800c4a6 <EE_PageTransfer+0x15e>
	}

	/* Set the new Page status to RECEIVE_DATA status */
	FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, NewPageAddress, RECEIVE_DATA);
 800c3a8:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 800c3ac:	f04f 0300 	mov.w	r3, #0
 800c3b0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c3b2:	2001      	movs	r0, #1
 800c3b4:	f7f5 fb34 	bl	8001a20 <HAL_FLASH_Program>
 800c3b8:	4603      	mov	r3, r0
 800c3ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	/* If program operation was failed, a Flash error code is returned */
	if (FlashStatus != HAL_OK) {
 800c3be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d003      	beq.n	800c3ce <EE_PageTransfer+0x86>
		return FlashStatus;
 800c3c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c3ca:	b29b      	uxth	r3, r3
 800c3cc:	e06b      	b.n	800c4a6 <EE_PageTransfer+0x15e>
	}

	/* Write the variable passed as parameter in the new active page */
	EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 800c3ce:	88ba      	ldrh	r2, [r7, #4]
 800c3d0:	88fb      	ldrh	r3, [r7, #6]
 800c3d2:	4611      	mov	r1, r2
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	f7ff ff57 	bl	800c288 <EE_VerifyPageFullWriteVariable>
 800c3da:	4603      	mov	r3, r0
 800c3dc:	847b      	strh	r3, [r7, #34]	; 0x22
	/* If program operation was failed, a Flash error code is returned */
	if (EepromStatus != HAL_OK) {
 800c3de:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d001      	beq.n	800c3e8 <EE_PageTransfer+0xa0>
		return EepromStatus;
 800c3e4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c3e6:	e05e      	b.n	800c4a6 <EE_PageTransfer+0x15e>
	}

	/* Transfer process: transfer variables from old to the new active page */
	for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++) {
 800c3e8:	2300      	movs	r3, #0
 800c3ea:	853b      	strh	r3, [r7, #40]	; 0x28
 800c3ec:	e027      	b.n	800c43e <EE_PageTransfer+0xf6>
		if (VirtAddVarTab[VarIdx] != VirtAddress) /* Check each variable except the one passed as parameter */
 800c3ee:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c3f0:	4a31      	ldr	r2, [pc, #196]	; (800c4b8 <EE_PageTransfer+0x170>)
 800c3f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c3f6:	88fa      	ldrh	r2, [r7, #6]
 800c3f8:	429a      	cmp	r2, r3
 800c3fa:	d01d      	beq.n	800c438 <EE_PageTransfer+0xf0>
		{
			/* Read the other last variable updates */
			ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 800c3fc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c3fe:	4a2e      	ldr	r2, [pc, #184]	; (800c4b8 <EE_PageTransfer+0x170>)
 800c400:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c404:	492d      	ldr	r1, [pc, #180]	; (800c4bc <EE_PageTransfer+0x174>)
 800c406:	4618      	mov	r0, r3
 800c408:	f7ff fe3a 	bl	800c080 <EE_ReadVariable>
 800c40c:	4603      	mov	r3, r0
 800c40e:	843b      	strh	r3, [r7, #32]
			/* In case variable corresponding to the virtual address was found */
			if (ReadStatus != 0x1) {
 800c410:	8c3b      	ldrh	r3, [r7, #32]
 800c412:	2b01      	cmp	r3, #1
 800c414:	d010      	beq.n	800c438 <EE_PageTransfer+0xf0>
				/* Transfer the variable to the new active page */
				EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 800c416:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c418:	4a27      	ldr	r2, [pc, #156]	; (800c4b8 <EE_PageTransfer+0x170>)
 800c41a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800c41e:	4b27      	ldr	r3, [pc, #156]	; (800c4bc <EE_PageTransfer+0x174>)
 800c420:	881b      	ldrh	r3, [r3, #0]
 800c422:	4619      	mov	r1, r3
 800c424:	4610      	mov	r0, r2
 800c426:	f7ff ff2f 	bl	800c288 <EE_VerifyPageFullWriteVariable>
 800c42a:	4603      	mov	r3, r0
 800c42c:	847b      	strh	r3, [r7, #34]	; 0x22
				/* If program operation was failed, a Flash error code is returned */
				if (EepromStatus != HAL_OK) {
 800c42e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c430:	2b00      	cmp	r3, #0
 800c432:	d001      	beq.n	800c438 <EE_PageTransfer+0xf0>
					return EepromStatus;
 800c434:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c436:	e036      	b.n	800c4a6 <EE_PageTransfer+0x15e>
	for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++) {
 800c438:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c43a:	3301      	adds	r3, #1
 800c43c:	853b      	strh	r3, [r7, #40]	; 0x28
 800c43e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c440:	2b01      	cmp	r3, #1
 800c442:	d9d4      	bls.n	800c3ee <EE_PageTransfer+0xa6>
				}
			}
		}
	}

	pEraseInit.TypeErase = TYPEERASE_SECTORS;
 800c444:	2300      	movs	r3, #0
 800c446:	60bb      	str	r3, [r7, #8]
	pEraseInit.Sector = OldPageId;
 800c448:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800c44a:	613b      	str	r3, [r7, #16]
	pEraseInit.NbSectors = 1;
 800c44c:	2301      	movs	r3, #1
 800c44e:	617b      	str	r3, [r7, #20]
	pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800c450:	2302      	movs	r3, #2
 800c452:	61bb      	str	r3, [r7, #24]

	/* Erase the old Page: Set old Page status to ERASED status */
	FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800c454:	f107 021c 	add.w	r2, r7, #28
 800c458:	f107 0308 	add.w	r3, r7, #8
 800c45c:	4611      	mov	r1, r2
 800c45e:	4618      	mov	r0, r3
 800c460:	f7f5 fc80 	bl	8001d64 <HAL_FLASHEx_Erase>
 800c464:	4603      	mov	r3, r0
 800c466:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	/* If erase operation was failed, a Flash error code is returned */
	if (FlashStatus != HAL_OK) {
 800c46a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d003      	beq.n	800c47a <EE_PageTransfer+0x132>
		return FlashStatus;
 800c472:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c476:	b29b      	uxth	r3, r3
 800c478:	e015      	b.n	800c4a6 <EE_PageTransfer+0x15e>
	}

	/* Set new Page status to VALID_PAGE status */
	FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, NewPageAddress, VALID_PAGE);
 800c47a:	f04f 0200 	mov.w	r2, #0
 800c47e:	f04f 0300 	mov.w	r3, #0
 800c482:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c484:	2001      	movs	r0, #1
 800c486:	f7f5 facb 	bl	8001a20 <HAL_FLASH_Program>
 800c48a:	4603      	mov	r3, r0
 800c48c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	/* If program operation was failed, a Flash error code is returned */
	if (FlashStatus != HAL_OK) {
 800c490:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c494:	2b00      	cmp	r3, #0
 800c496:	d003      	beq.n	800c4a0 <EE_PageTransfer+0x158>
		return FlashStatus;
 800c498:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c49c:	b29b      	uxth	r3, r3
 800c49e:	e002      	b.n	800c4a6 <EE_PageTransfer+0x15e>
	}

	/* Return last operation flash status */
	return FlashStatus;
 800c4a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c4a4:	b29b      	uxth	r3, r3
}
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	3730      	adds	r7, #48	; 0x30
 800c4aa:	46bd      	mov	sp, r7
 800c4ac:	bd80      	pop	{r7, pc}
 800c4ae:	bf00      	nop
 800c4b0:	080d0000 	.word	0x080d0000
 800c4b4:	080f0000 	.word	0x080f0000
 800c4b8:	20000008 	.word	0x20000008
 800c4bc:	20006534 	.word	0x20006534

0800c4c0 <Finger_On>:
extern uint16_t fingerConfidence;
extern osMutexId FingerRecMutexHandle;
/* Private variable ---------------------------------------------------------*/
char str[50];

void Finger_On(void) {
 800c4c0:	b580      	push	{r7, lr}
 800c4c2:	af00      	add	r7, sp, #0
	osRecursiveMutexWait(FingerRecMutexHandle, osWaitForever);
 800c4c4:	4b05      	ldr	r3, [pc, #20]	; (800c4dc <Finger_On+0x1c>)
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	f04f 31ff 	mov.w	r1, #4294967295
 800c4cc:	4618      	mov	r0, r3
 800c4ce:	f7fb fb7c 	bl	8007bca <osRecursiveMutexWait>
	FZ3387_SET_POWER(0);
 800c4d2:	2000      	movs	r0, #0
 800c4d4:	f000 faf4 	bl	800cac0 <FZ3387_SET_POWER>
}
 800c4d8:	bf00      	nop
 800c4da:	bd80      	pop	{r7, pc}
 800c4dc:	2000867c 	.word	0x2000867c

0800c4e0 <Finger_Off>:

void Finger_Off(void) {
 800c4e0:	b580      	push	{r7, lr}
 800c4e2:	af00      	add	r7, sp, #0
	FZ3387_SET_POWER(1);
 800c4e4:	2001      	movs	r0, #1
 800c4e6:	f000 faeb 	bl	800cac0 <FZ3387_SET_POWER>
	osDelay(50);
 800c4ea:	2032      	movs	r0, #50	; 0x32
 800c4ec:	f7fb f84d 	bl	800758a <osDelay>
	osRecursiveMutexRelease(FingerRecMutexHandle);
 800c4f0:	4b03      	ldr	r3, [pc, #12]	; (800c500 <Finger_Off+0x20>)
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	4618      	mov	r0, r3
 800c4f6:	f7fb fb55 	bl	8007ba4 <osRecursiveMutexRelease>
}
 800c4fa:	bf00      	nop
 800c4fc:	bd80      	pop	{r7, pc}
 800c4fe:	bf00      	nop
 800c500:	2000867c 	.word	0x2000867c

0800c504 <Finger_Init>:

void Finger_Init(void) {
 800c504:	b580      	push	{r7, lr}
 800c506:	b082      	sub	sp, #8
 800c508:	af00      	add	r7, sp, #0
	uint8_t verified = 0;
 800c50a:	2300      	movs	r3, #0
 800c50c:	71fb      	strb	r3, [r7, #7]

	//	 verify password and check hardware
	do {
		swvPrintLn("Finger_Init");
 800c50e:	480b      	ldr	r0, [pc, #44]	; (800c53c <Finger_Init+0x38>)
 800c510:	f7ff fa10 	bl	800b934 <swvPrintLn>

		Finger_On();
 800c514:	f7ff ffd4 	bl	800c4c0 <Finger_On>
		verified = FZ3387_verifyPassword();
 800c518:	f000 fb34 	bl	800cb84 <FZ3387_verifyPassword>
 800c51c:	4603      	mov	r3, r0
 800c51e:	71fb      	strb	r3, [r7, #7]
		Finger_Off();
 800c520:	f7ff ffde 	bl	800c4e0 <Finger_Off>

		osDelay(500);
 800c524:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800c528:	f7fb f82f 	bl	800758a <osDelay>
	} while (!verified);
 800c52c:	79fb      	ldrb	r3, [r7, #7]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d0ed      	beq.n	800c50e <Finger_Init+0xa>
}
 800c532:	bf00      	nop
 800c534:	3708      	adds	r7, #8
 800c536:	46bd      	mov	sp, r7
 800c538:	bd80      	pop	{r7, pc}
 800c53a:	bf00      	nop
 800c53c:	08015d28 	.word	0x08015d28

0800c540 <Finger_Enroll>:

uint8_t Finger_Enroll(uint8_t id) {
 800c540:	b580      	push	{r7, lr}
 800c542:	b086      	sub	sp, #24
 800c544:	af00      	add	r7, sp, #0
 800c546:	4603      	mov	r3, r0
 800c548:	71fb      	strb	r3, [r7, #7]
	uint32_t tick, timeout_tick;
	int p = -1, error = 0;
 800c54a:	f04f 33ff 	mov.w	r3, #4294967295
 800c54e:	617b      	str	r3, [r7, #20]
 800c550:	2300      	movs	r3, #0
 800c552:	613b      	str	r3, [r7, #16]

	Finger_On();
 800c554:	f7ff ffb4 	bl	800c4c0 <Finger_On>
	// convert time to tick
	timeout_tick = osKernelSysTickMicroSec(FINGER_SCAN_TIMEOUT*1000*1000);
 800c558:	f644 6320 	movw	r3, #20000	; 0x4e20
 800c55c:	60fb      	str	r3, [r7, #12]
	//	Take Image
	sprintf(str, "Waiting for valid finger to enroll as # %d", id);
 800c55e:	79fb      	ldrb	r3, [r7, #7]
 800c560:	461a      	mov	r2, r3
 800c562:	49b9      	ldr	r1, [pc, #740]	; (800c848 <Finger_Enroll+0x308>)
 800c564:	48b9      	ldr	r0, [pc, #740]	; (800c84c <Finger_Enroll+0x30c>)
 800c566:	f006 f80b 	bl	8012580 <siprintf>
	swvPrintLn(str);
 800c56a:	48b8      	ldr	r0, [pc, #736]	; (800c84c <Finger_Enroll+0x30c>)
 800c56c:	f7ff f9e2 	bl	800b934 <swvPrintLn>

	// set timeout guard
	tick = osKernelSysTick();
 800c570:	f7fa ffaf 	bl	80074d2 <osKernelSysTick>
 800c574:	60b8      	str	r0, [r7, #8]
	while (p != FINGERPRINT_OK && !error) {
 800c576:	e031      	b.n	800c5dc <Finger_Enroll+0x9c>
		// handle timeout
		if ((osKernelSysTick() - tick) > timeout_tick) {
 800c578:	f7fa ffab 	bl	80074d2 <osKernelSysTick>
 800c57c:	4602      	mov	r2, r0
 800c57e:	68bb      	ldr	r3, [r7, #8]
 800c580:	1ad3      	subs	r3, r2, r3
 800c582:	68fa      	ldr	r2, [r7, #12]
 800c584:	429a      	cmp	r2, r3
 800c586:	d201      	bcs.n	800c58c <Finger_Enroll+0x4c>
			error = 1;
 800c588:	2301      	movs	r3, #1
 800c58a:	613b      	str	r3, [r7, #16]
		}
		// send command
		BSP_Led_Toggle();
 800c58c:	f7ff fab2 	bl	800baf4 <BSP_Led_Toggle>
		p = FZ3387_getImage();
 800c590:	f000 fb24 	bl	800cbdc <FZ3387_getImage>
 800c594:	4603      	mov	r3, r0
 800c596:	617b      	str	r3, [r7, #20]
		// check response
		switch (p) {
 800c598:	697b      	ldr	r3, [r7, #20]
 800c59a:	2b03      	cmp	r3, #3
 800c59c:	d81a      	bhi.n	800c5d4 <Finger_Enroll+0x94>
 800c59e:	a201      	add	r2, pc, #4	; (adr r2, 800c5a4 <Finger_Enroll+0x64>)
 800c5a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5a4:	0800c5b5 	.word	0x0800c5b5
 800c5a8:	0800c5c5 	.word	0x0800c5c5
 800c5ac:	0800c5bd 	.word	0x0800c5bd
 800c5b0:	0800c5cd 	.word	0x0800c5cd
			case FINGERPRINT_OK:
				swvPrintLn("Image taken");
 800c5b4:	48a6      	ldr	r0, [pc, #664]	; (800c850 <Finger_Enroll+0x310>)
 800c5b6:	f7ff f9bd 	bl	800b934 <swvPrintLn>
				break;
 800c5ba:	e00f      	b.n	800c5dc <Finger_Enroll+0x9c>
			case FINGERPRINT_NOFINGER:
				swvPrintLn(".");
 800c5bc:	48a5      	ldr	r0, [pc, #660]	; (800c854 <Finger_Enroll+0x314>)
 800c5be:	f7ff f9b9 	bl	800b934 <swvPrintLn>
				break;
 800c5c2:	e00b      	b.n	800c5dc <Finger_Enroll+0x9c>
			case FINGERPRINT_PACKETRECIEVEERR:
				swvPrintLn("Communication error");
 800c5c4:	48a4      	ldr	r0, [pc, #656]	; (800c858 <Finger_Enroll+0x318>)
 800c5c6:	f7ff f9b5 	bl	800b934 <swvPrintLn>
				break;
 800c5ca:	e007      	b.n	800c5dc <Finger_Enroll+0x9c>
			case FINGERPRINT_IMAGEFAIL:
				swvPrintLn("Imaging error");
 800c5cc:	48a3      	ldr	r0, [pc, #652]	; (800c85c <Finger_Enroll+0x31c>)
 800c5ce:	f7ff f9b1 	bl	800b934 <swvPrintLn>
				break;
 800c5d2:	e003      	b.n	800c5dc <Finger_Enroll+0x9c>
			default:
				swvPrintLn("Unknown error");
 800c5d4:	48a2      	ldr	r0, [pc, #648]	; (800c860 <Finger_Enroll+0x320>)
 800c5d6:	f7ff f9ad 	bl	800b934 <swvPrintLn>
				break;
 800c5da:	bf00      	nop
	while (p != FINGERPRINT_OK && !error) {
 800c5dc:	697b      	ldr	r3, [r7, #20]
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d002      	beq.n	800c5e8 <Finger_Enroll+0xa8>
 800c5e2:	693b      	ldr	r3, [r7, #16]
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d0c7      	beq.n	800c578 <Finger_Enroll+0x38>
		}
	}

	if (!error) {
 800c5e8:	693b      	ldr	r3, [r7, #16]
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d152      	bne.n	800c694 <Finger_Enroll+0x154>
		// set default to error, then set to fix
		error = 1;
 800c5ee:	2301      	movs	r3, #1
 800c5f0:	613b      	str	r3, [r7, #16]
		//	put image to buffer 1
		p = FZ3387_image2Tz(1);
 800c5f2:	2001      	movs	r0, #1
 800c5f4:	f000 fb01 	bl	800cbfa <FZ3387_image2Tz>
 800c5f8:	4603      	mov	r3, r0
 800c5fa:	617b      	str	r3, [r7, #20]
		switch (p) {
 800c5fc:	697b      	ldr	r3, [r7, #20]
 800c5fe:	2b15      	cmp	r3, #21
 800c600:	d844      	bhi.n	800c68c <Finger_Enroll+0x14c>
 800c602:	a201      	add	r2, pc, #4	; (adr r2, 800c608 <Finger_Enroll+0xc8>)
 800c604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c608:	0800c661 	.word	0x0800c661
 800c60c:	0800c675 	.word	0x0800c675
 800c610:	0800c68d 	.word	0x0800c68d
 800c614:	0800c68d 	.word	0x0800c68d
 800c618:	0800c68d 	.word	0x0800c68d
 800c61c:	0800c68d 	.word	0x0800c68d
 800c620:	0800c66d 	.word	0x0800c66d
 800c624:	0800c67d 	.word	0x0800c67d
 800c628:	0800c68d 	.word	0x0800c68d
 800c62c:	0800c68d 	.word	0x0800c68d
 800c630:	0800c68d 	.word	0x0800c68d
 800c634:	0800c68d 	.word	0x0800c68d
 800c638:	0800c68d 	.word	0x0800c68d
 800c63c:	0800c68d 	.word	0x0800c68d
 800c640:	0800c68d 	.word	0x0800c68d
 800c644:	0800c68d 	.word	0x0800c68d
 800c648:	0800c68d 	.word	0x0800c68d
 800c64c:	0800c68d 	.word	0x0800c68d
 800c650:	0800c68d 	.word	0x0800c68d
 800c654:	0800c68d 	.word	0x0800c68d
 800c658:	0800c68d 	.word	0x0800c68d
 800c65c:	0800c685 	.word	0x0800c685
			case FINGERPRINT_OK:
				swvPrintLn("Image converted");
 800c660:	4880      	ldr	r0, [pc, #512]	; (800c864 <Finger_Enroll+0x324>)
 800c662:	f7ff f967 	bl	800b934 <swvPrintLn>
				error = 0;
 800c666:	2300      	movs	r3, #0
 800c668:	613b      	str	r3, [r7, #16]
				break;
 800c66a:	e014      	b.n	800c696 <Finger_Enroll+0x156>
			case FINGERPRINT_IMAGEMESS:
				swvPrintLn("Image too messy");
 800c66c:	487e      	ldr	r0, [pc, #504]	; (800c868 <Finger_Enroll+0x328>)
 800c66e:	f7ff f961 	bl	800b934 <swvPrintLn>
				break;
 800c672:	e010      	b.n	800c696 <Finger_Enroll+0x156>
			case FINGERPRINT_PACKETRECIEVEERR:
				swvPrintLn("Communication error");
 800c674:	4878      	ldr	r0, [pc, #480]	; (800c858 <Finger_Enroll+0x318>)
 800c676:	f7ff f95d 	bl	800b934 <swvPrintLn>
				break;
 800c67a:	e00c      	b.n	800c696 <Finger_Enroll+0x156>
			case FINGERPRINT_FEATUREFAIL:
				swvPrintLn("Could not find finger print features");
 800c67c:	487b      	ldr	r0, [pc, #492]	; (800c86c <Finger_Enroll+0x32c>)
 800c67e:	f7ff f959 	bl	800b934 <swvPrintLn>
				break;
 800c682:	e008      	b.n	800c696 <Finger_Enroll+0x156>
			case FINGERPRINT_INVALIDIMAGE:
				swvPrintLn("Could not find finger print features");
 800c684:	4879      	ldr	r0, [pc, #484]	; (800c86c <Finger_Enroll+0x32c>)
 800c686:	f7ff f955 	bl	800b934 <swvPrintLn>
				break;
 800c68a:	e004      	b.n	800c696 <Finger_Enroll+0x156>
			default:
				swvPrintLn("Unknown error");
 800c68c:	4874      	ldr	r0, [pc, #464]	; (800c860 <Finger_Enroll+0x320>)
 800c68e:	f7ff f951 	bl	800b934 <swvPrintLn>
				break;
 800c692:	e000      	b.n	800c696 <Finger_Enroll+0x156>
		}
	}
 800c694:	bf00      	nop

	if (!error) {
 800c696:	693b      	ldr	r3, [r7, #16]
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d14b      	bne.n	800c734 <Finger_Enroll+0x1f4>
		//	 Wait for put your finger up
		BSP_Led_Write(0);
 800c69c:	2000      	movs	r0, #0
 800c69e:	f7ff fa01 	bl	800baa4 <BSP_Led_Write>
		swvPrintLn("Remove finger");
 800c6a2:	4873      	ldr	r0, [pc, #460]	; (800c870 <Finger_Enroll+0x330>)
 800c6a4:	f7ff f946 	bl	800b934 <swvPrintLn>
		osDelay(2000);
 800c6a8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c6ac:	f7fa ff6d 	bl	800758a <osDelay>

		//	Take Image again
		swvPrintLn("Place same finger again");
 800c6b0:	4870      	ldr	r0, [pc, #448]	; (800c874 <Finger_Enroll+0x334>)
 800c6b2:	f7ff f93f 	bl	800b934 <swvPrintLn>
		p = -1;
 800c6b6:	f04f 33ff 	mov.w	r3, #4294967295
 800c6ba:	617b      	str	r3, [r7, #20]
		// set timeout guard
		tick = osKernelSysTick();
 800c6bc:	f7fa ff09 	bl	80074d2 <osKernelSysTick>
 800c6c0:	60b8      	str	r0, [r7, #8]
		while (p != FINGERPRINT_OK && !error) {
 800c6c2:	e031      	b.n	800c728 <Finger_Enroll+0x1e8>
			// handle timeout
			if ((osKernelSysTick() - tick) > timeout_tick) {
 800c6c4:	f7fa ff05 	bl	80074d2 <osKernelSysTick>
 800c6c8:	4602      	mov	r2, r0
 800c6ca:	68bb      	ldr	r3, [r7, #8]
 800c6cc:	1ad3      	subs	r3, r2, r3
 800c6ce:	68fa      	ldr	r2, [r7, #12]
 800c6d0:	429a      	cmp	r2, r3
 800c6d2:	d201      	bcs.n	800c6d8 <Finger_Enroll+0x198>
				error = 1;
 800c6d4:	2301      	movs	r3, #1
 800c6d6:	613b      	str	r3, [r7, #16]
			}
			// send command
			BSP_Led_Toggle();
 800c6d8:	f7ff fa0c 	bl	800baf4 <BSP_Led_Toggle>
			p = FZ3387_getImage();
 800c6dc:	f000 fa7e 	bl	800cbdc <FZ3387_getImage>
 800c6e0:	4603      	mov	r3, r0
 800c6e2:	617b      	str	r3, [r7, #20]
			// handle response
			switch (p) {
 800c6e4:	697b      	ldr	r3, [r7, #20]
 800c6e6:	2b03      	cmp	r3, #3
 800c6e8:	d81a      	bhi.n	800c720 <Finger_Enroll+0x1e0>
 800c6ea:	a201      	add	r2, pc, #4	; (adr r2, 800c6f0 <Finger_Enroll+0x1b0>)
 800c6ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6f0:	0800c701 	.word	0x0800c701
 800c6f4:	0800c711 	.word	0x0800c711
 800c6f8:	0800c709 	.word	0x0800c709
 800c6fc:	0800c719 	.word	0x0800c719
				case FINGERPRINT_OK:
					swvPrintLn("Image taken");
 800c700:	4853      	ldr	r0, [pc, #332]	; (800c850 <Finger_Enroll+0x310>)
 800c702:	f7ff f917 	bl	800b934 <swvPrintLn>
					break;
 800c706:	e00f      	b.n	800c728 <Finger_Enroll+0x1e8>
				case FINGERPRINT_NOFINGER:
					swvPrint(".");
 800c708:	4852      	ldr	r0, [pc, #328]	; (800c854 <Finger_Enroll+0x314>)
 800c70a:	f7ff f8f1 	bl	800b8f0 <swvPrint>
					break;
 800c70e:	e00b      	b.n	800c728 <Finger_Enroll+0x1e8>
				case FINGERPRINT_PACKETRECIEVEERR:
					swvPrintLn("Communication error");
 800c710:	4851      	ldr	r0, [pc, #324]	; (800c858 <Finger_Enroll+0x318>)
 800c712:	f7ff f90f 	bl	800b934 <swvPrintLn>
					break;
 800c716:	e007      	b.n	800c728 <Finger_Enroll+0x1e8>
				case FINGERPRINT_IMAGEFAIL:
					swvPrintLn("Imaging error");
 800c718:	4850      	ldr	r0, [pc, #320]	; (800c85c <Finger_Enroll+0x31c>)
 800c71a:	f7ff f90b 	bl	800b934 <swvPrintLn>
					break;
 800c71e:	e003      	b.n	800c728 <Finger_Enroll+0x1e8>
				default:
					swvPrintLn("Unknown error");
 800c720:	484f      	ldr	r0, [pc, #316]	; (800c860 <Finger_Enroll+0x320>)
 800c722:	f7ff f907 	bl	800b934 <swvPrintLn>
					break;
 800c726:	bf00      	nop
		while (p != FINGERPRINT_OK && !error) {
 800c728:	697b      	ldr	r3, [r7, #20]
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d002      	beq.n	800c734 <Finger_Enroll+0x1f4>
 800c72e:	693b      	ldr	r3, [r7, #16]
 800c730:	2b00      	cmp	r3, #0
 800c732:	d0c7      	beq.n	800c6c4 <Finger_Enroll+0x184>
			}
		}
	}

	if (!error) {
 800c734:	693b      	ldr	r3, [r7, #16]
 800c736:	2b00      	cmp	r3, #0
 800c738:	d152      	bne.n	800c7e0 <Finger_Enroll+0x2a0>
		error = 1;
 800c73a:	2301      	movs	r3, #1
 800c73c:	613b      	str	r3, [r7, #16]
		//	put image to buffer 2
		p = FZ3387_image2Tz(2);
 800c73e:	2002      	movs	r0, #2
 800c740:	f000 fa5b 	bl	800cbfa <FZ3387_image2Tz>
 800c744:	4603      	mov	r3, r0
 800c746:	617b      	str	r3, [r7, #20]
		switch (p) {
 800c748:	697b      	ldr	r3, [r7, #20]
 800c74a:	2b15      	cmp	r3, #21
 800c74c:	d844      	bhi.n	800c7d8 <Finger_Enroll+0x298>
 800c74e:	a201      	add	r2, pc, #4	; (adr r2, 800c754 <Finger_Enroll+0x214>)
 800c750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c754:	0800c7ad 	.word	0x0800c7ad
 800c758:	0800c7c1 	.word	0x0800c7c1
 800c75c:	0800c7d9 	.word	0x0800c7d9
 800c760:	0800c7d9 	.word	0x0800c7d9
 800c764:	0800c7d9 	.word	0x0800c7d9
 800c768:	0800c7d9 	.word	0x0800c7d9
 800c76c:	0800c7b9 	.word	0x0800c7b9
 800c770:	0800c7c9 	.word	0x0800c7c9
 800c774:	0800c7d9 	.word	0x0800c7d9
 800c778:	0800c7d9 	.word	0x0800c7d9
 800c77c:	0800c7d9 	.word	0x0800c7d9
 800c780:	0800c7d9 	.word	0x0800c7d9
 800c784:	0800c7d9 	.word	0x0800c7d9
 800c788:	0800c7d9 	.word	0x0800c7d9
 800c78c:	0800c7d9 	.word	0x0800c7d9
 800c790:	0800c7d9 	.word	0x0800c7d9
 800c794:	0800c7d9 	.word	0x0800c7d9
 800c798:	0800c7d9 	.word	0x0800c7d9
 800c79c:	0800c7d9 	.word	0x0800c7d9
 800c7a0:	0800c7d9 	.word	0x0800c7d9
 800c7a4:	0800c7d9 	.word	0x0800c7d9
 800c7a8:	0800c7d1 	.word	0x0800c7d1
			case FINGERPRINT_OK:
				swvPrintLn("Image converted");
 800c7ac:	482d      	ldr	r0, [pc, #180]	; (800c864 <Finger_Enroll+0x324>)
 800c7ae:	f7ff f8c1 	bl	800b934 <swvPrintLn>
				error = 0;
 800c7b2:	2300      	movs	r3, #0
 800c7b4:	613b      	str	r3, [r7, #16]
				break;
 800c7b6:	e014      	b.n	800c7e2 <Finger_Enroll+0x2a2>
			case FINGERPRINT_IMAGEMESS:
				swvPrintLn("Image too messy");
 800c7b8:	482b      	ldr	r0, [pc, #172]	; (800c868 <Finger_Enroll+0x328>)
 800c7ba:	f7ff f8bb 	bl	800b934 <swvPrintLn>
				break;
 800c7be:	e010      	b.n	800c7e2 <Finger_Enroll+0x2a2>
			case FINGERPRINT_PACKETRECIEVEERR:
				swvPrintLn("Communication error");
 800c7c0:	4825      	ldr	r0, [pc, #148]	; (800c858 <Finger_Enroll+0x318>)
 800c7c2:	f7ff f8b7 	bl	800b934 <swvPrintLn>
				break;
 800c7c6:	e00c      	b.n	800c7e2 <Finger_Enroll+0x2a2>
			case FINGERPRINT_FEATUREFAIL:
				swvPrintLn("Could not find fingerprint features");
 800c7c8:	482b      	ldr	r0, [pc, #172]	; (800c878 <Finger_Enroll+0x338>)
 800c7ca:	f7ff f8b3 	bl	800b934 <swvPrintLn>
				break;
 800c7ce:	e008      	b.n	800c7e2 <Finger_Enroll+0x2a2>
			case FINGERPRINT_INVALIDIMAGE:
				swvPrintLn("Could not find fingerprint features");
 800c7d0:	4829      	ldr	r0, [pc, #164]	; (800c878 <Finger_Enroll+0x338>)
 800c7d2:	f7ff f8af 	bl	800b934 <swvPrintLn>
				break;
 800c7d6:	e004      	b.n	800c7e2 <Finger_Enroll+0x2a2>
			default:
				swvPrintLn("Unknown error");
 800c7d8:	4821      	ldr	r0, [pc, #132]	; (800c860 <Finger_Enroll+0x320>)
 800c7da:	f7ff f8ab 	bl	800b934 <swvPrintLn>
				break;
 800c7de:	e000      	b.n	800c7e2 <Finger_Enroll+0x2a2>
		}
	}
 800c7e0:	bf00      	nop

	if (!error) {
 800c7e2:	693b      	ldr	r3, [r7, #16]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d152      	bne.n	800c88e <Finger_Enroll+0x34e>
		//	 Wait for put your finger up
		BSP_Led_Write(0);
 800c7e8:	2000      	movs	r0, #0
 800c7ea:	f7ff f95b 	bl	800baa4 <BSP_Led_Write>
		swvPrintLn("Remove finger");
 800c7ee:	4820      	ldr	r0, [pc, #128]	; (800c870 <Finger_Enroll+0x330>)
 800c7f0:	f7ff f8a0 	bl	800b934 <swvPrintLn>
		osDelay(2000);
 800c7f4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c7f8:	f7fa fec7 	bl	800758a <osDelay>
		//	Create Register model
		error = 1;
 800c7fc:	2301      	movs	r3, #1
 800c7fe:	613b      	str	r3, [r7, #16]
		sprintf(str, "Creating model for #%d", id);
 800c800:	79fb      	ldrb	r3, [r7, #7]
 800c802:	461a      	mov	r2, r3
 800c804:	491d      	ldr	r1, [pc, #116]	; (800c87c <Finger_Enroll+0x33c>)
 800c806:	4811      	ldr	r0, [pc, #68]	; (800c84c <Finger_Enroll+0x30c>)
 800c808:	f005 feba 	bl	8012580 <siprintf>
		swvPrintLn(str);
 800c80c:	480f      	ldr	r0, [pc, #60]	; (800c84c <Finger_Enroll+0x30c>)
 800c80e:	f7ff f891 	bl	800b934 <swvPrintLn>

		p = FZ3387_createModel();
 800c812:	f000 fa06 	bl	800cc22 <FZ3387_createModel>
 800c816:	4603      	mov	r3, r0
 800c818:	617b      	str	r3, [r7, #20]
		if (p == FINGERPRINT_OK) {
 800c81a:	697b      	ldr	r3, [r7, #20]
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d105      	bne.n	800c82c <Finger_Enroll+0x2ec>
			swvPrintLn("Prints matched!");
 800c820:	4817      	ldr	r0, [pc, #92]	; (800c880 <Finger_Enroll+0x340>)
 800c822:	f7ff f887 	bl	800b934 <swvPrintLn>
			error = 0;
 800c826:	2300      	movs	r3, #0
 800c828:	613b      	str	r3, [r7, #16]
 800c82a:	e030      	b.n	800c88e <Finger_Enroll+0x34e>
		} else if (p == FINGERPRINT_PACKETRECIEVEERR) {
 800c82c:	697b      	ldr	r3, [r7, #20]
 800c82e:	2b01      	cmp	r3, #1
 800c830:	d103      	bne.n	800c83a <Finger_Enroll+0x2fa>
			swvPrintLn("Communication error");
 800c832:	4809      	ldr	r0, [pc, #36]	; (800c858 <Finger_Enroll+0x318>)
 800c834:	f7ff f87e 	bl	800b934 <swvPrintLn>
 800c838:	e029      	b.n	800c88e <Finger_Enroll+0x34e>
		} else if (p == FINGERPRINT_ENROLLMISMATCH) {
 800c83a:	697b      	ldr	r3, [r7, #20]
 800c83c:	2b0a      	cmp	r3, #10
 800c83e:	d123      	bne.n	800c888 <Finger_Enroll+0x348>
			swvPrintLn("Fingerprints did not match");
 800c840:	4810      	ldr	r0, [pc, #64]	; (800c884 <Finger_Enroll+0x344>)
 800c842:	f7ff f877 	bl	800b934 <swvPrintLn>
 800c846:	e022      	b.n	800c88e <Finger_Enroll+0x34e>
 800c848:	08015d34 	.word	0x08015d34
 800c84c:	20007bc8 	.word	0x20007bc8
 800c850:	08015d60 	.word	0x08015d60
 800c854:	08015d6c 	.word	0x08015d6c
 800c858:	08015d70 	.word	0x08015d70
 800c85c:	08015d84 	.word	0x08015d84
 800c860:	08015d94 	.word	0x08015d94
 800c864:	08015da4 	.word	0x08015da4
 800c868:	08015db4 	.word	0x08015db4
 800c86c:	08015dc4 	.word	0x08015dc4
 800c870:	08015dec 	.word	0x08015dec
 800c874:	08015dfc 	.word	0x08015dfc
 800c878:	08015e14 	.word	0x08015e14
 800c87c:	08015e38 	.word	0x08015e38
 800c880:	08015e50 	.word	0x08015e50
 800c884:	08015e60 	.word	0x08015e60
		} else {
			swvPrintLn("Unknown error");
 800c888:	4820      	ldr	r0, [pc, #128]	; (800c90c <Finger_Enroll+0x3cc>)
 800c88a:	f7ff f853 	bl	800b934 <swvPrintLn>
		}
	}

	if (!error) {
 800c88e:	693b      	ldr	r3, [r7, #16]
 800c890:	2b00      	cmp	r3, #0
 800c892:	d132      	bne.n	800c8fa <Finger_Enroll+0x3ba>
		error = 1;
 800c894:	2301      	movs	r3, #1
 800c896:	613b      	str	r3, [r7, #16]
		//	Store in memory
		sprintf(str, "ID %d", id);
 800c898:	79fb      	ldrb	r3, [r7, #7]
 800c89a:	461a      	mov	r2, r3
 800c89c:	491c      	ldr	r1, [pc, #112]	; (800c910 <Finger_Enroll+0x3d0>)
 800c89e:	481d      	ldr	r0, [pc, #116]	; (800c914 <Finger_Enroll+0x3d4>)
 800c8a0:	f005 fe6e 	bl	8012580 <siprintf>
		swvPrintLn(str);
 800c8a4:	481b      	ldr	r0, [pc, #108]	; (800c914 <Finger_Enroll+0x3d4>)
 800c8a6:	f7ff f845 	bl	800b934 <swvPrintLn>

		p = FZ3387_storeModel(id);
 800c8aa:	79fb      	ldrb	r3, [r7, #7]
 800c8ac:	b29b      	uxth	r3, r3
 800c8ae:	4618      	mov	r0, r3
 800c8b0:	f000 f9c6 	bl	800cc40 <FZ3387_storeModel>
 800c8b4:	4603      	mov	r3, r0
 800c8b6:	617b      	str	r3, [r7, #20]
		if (p == FINGERPRINT_OK) {
 800c8b8:	697b      	ldr	r3, [r7, #20]
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d105      	bne.n	800c8ca <Finger_Enroll+0x38a>
			swvPrintLn("Stored!");
 800c8be:	4816      	ldr	r0, [pc, #88]	; (800c918 <Finger_Enroll+0x3d8>)
 800c8c0:	f7ff f838 	bl	800b934 <swvPrintLn>
			error = 0;
 800c8c4:	2300      	movs	r3, #0
 800c8c6:	613b      	str	r3, [r7, #16]
 800c8c8:	e017      	b.n	800c8fa <Finger_Enroll+0x3ba>
		} else if (p == FINGERPRINT_PACKETRECIEVEERR) {
 800c8ca:	697b      	ldr	r3, [r7, #20]
 800c8cc:	2b01      	cmp	r3, #1
 800c8ce:	d103      	bne.n	800c8d8 <Finger_Enroll+0x398>
			swvPrintLn("Communication error");
 800c8d0:	4812      	ldr	r0, [pc, #72]	; (800c91c <Finger_Enroll+0x3dc>)
 800c8d2:	f7ff f82f 	bl	800b934 <swvPrintLn>
 800c8d6:	e010      	b.n	800c8fa <Finger_Enroll+0x3ba>
		} else if (p == FINGERPRINT_BADLOCATION) {
 800c8d8:	697b      	ldr	r3, [r7, #20]
 800c8da:	2b0b      	cmp	r3, #11
 800c8dc:	d103      	bne.n	800c8e6 <Finger_Enroll+0x3a6>
			swvPrintLn("Could not store in that location");
 800c8de:	4810      	ldr	r0, [pc, #64]	; (800c920 <Finger_Enroll+0x3e0>)
 800c8e0:	f7ff f828 	bl	800b934 <swvPrintLn>
 800c8e4:	e009      	b.n	800c8fa <Finger_Enroll+0x3ba>
		} else if (p == FINGERPRINT_FLASHERR) {
 800c8e6:	697b      	ldr	r3, [r7, #20]
 800c8e8:	2b18      	cmp	r3, #24
 800c8ea:	d103      	bne.n	800c8f4 <Finger_Enroll+0x3b4>
			swvPrintLn("Error writing to flash");
 800c8ec:	480d      	ldr	r0, [pc, #52]	; (800c924 <Finger_Enroll+0x3e4>)
 800c8ee:	f7ff f821 	bl	800b934 <swvPrintLn>
 800c8f2:	e002      	b.n	800c8fa <Finger_Enroll+0x3ba>
		} else {
			swvPrintLn("Unknown error");
 800c8f4:	4805      	ldr	r0, [pc, #20]	; (800c90c <Finger_Enroll+0x3cc>)
 800c8f6:	f7ff f81d 	bl	800b934 <swvPrintLn>
		}
	}

	Finger_Off();
 800c8fa:	f7ff fdf1 	bl	800c4e0 <Finger_Off>
	return p;
 800c8fe:	697b      	ldr	r3, [r7, #20]
 800c900:	b2db      	uxtb	r3, r3
}
 800c902:	4618      	mov	r0, r3
 800c904:	3718      	adds	r7, #24
 800c906:	46bd      	mov	sp, r7
 800c908:	bd80      	pop	{r7, pc}
 800c90a:	bf00      	nop
 800c90c:	08015d94 	.word	0x08015d94
 800c910:	08015e7c 	.word	0x08015e7c
 800c914:	20007bc8 	.word	0x20007bc8
 800c918:	08015e84 	.word	0x08015e84
 800c91c:	08015d70 	.word	0x08015d70
 800c920:	08015e8c 	.word	0x08015e8c
 800c924:	08015eb0 	.word	0x08015eb0

0800c928 <Finger_Delete_ID>:

uint8_t Finger_Delete_ID(uint8_t id) {
 800c928:	b580      	push	{r7, lr}
 800c92a:	b084      	sub	sp, #16
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	4603      	mov	r3, r0
 800c930:	71fb      	strb	r3, [r7, #7]
	uint8_t p = -1;
 800c932:	23ff      	movs	r3, #255	; 0xff
 800c934:	73fb      	strb	r3, [r7, #15]

	Finger_On();
 800c936:	f7ff fdc3 	bl	800c4c0 <Finger_On>
	p = FZ3387_deleteModel(id);
 800c93a:	79fb      	ldrb	r3, [r7, #7]
 800c93c:	b29b      	uxth	r3, r3
 800c93e:	4618      	mov	r0, r3
 800c940:	f000 f99a 	bl	800cc78 <FZ3387_deleteModel>
 800c944:	4603      	mov	r3, r0
 800c946:	73fb      	strb	r3, [r7, #15]
	Finger_Off();
 800c948:	f7ff fdca 	bl	800c4e0 <Finger_Off>

	if (p == FINGERPRINT_OK) {
 800c94c:	7bfb      	ldrb	r3, [r7, #15]
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d103      	bne.n	800c95a <Finger_Delete_ID+0x32>
		swvPrintLn("Deleted!");
 800c952:	4813      	ldr	r0, [pc, #76]	; (800c9a0 <Finger_Delete_ID+0x78>)
 800c954:	f7fe ffee 	bl	800b934 <swvPrintLn>
 800c958:	e01d      	b.n	800c996 <Finger_Delete_ID+0x6e>
	} else if (p == FINGERPRINT_PACKETRECIEVEERR) {
 800c95a:	7bfb      	ldrb	r3, [r7, #15]
 800c95c:	2b01      	cmp	r3, #1
 800c95e:	d103      	bne.n	800c968 <Finger_Delete_ID+0x40>
		swvPrintLn("Communication error");
 800c960:	4810      	ldr	r0, [pc, #64]	; (800c9a4 <Finger_Delete_ID+0x7c>)
 800c962:	f7fe ffe7 	bl	800b934 <swvPrintLn>
 800c966:	e016      	b.n	800c996 <Finger_Delete_ID+0x6e>
	} else if (p == FINGERPRINT_BADLOCATION) {
 800c968:	7bfb      	ldrb	r3, [r7, #15]
 800c96a:	2b0b      	cmp	r3, #11
 800c96c:	d103      	bne.n	800c976 <Finger_Delete_ID+0x4e>
		swvPrintLn("Could not delete in that location");
 800c96e:	480e      	ldr	r0, [pc, #56]	; (800c9a8 <Finger_Delete_ID+0x80>)
 800c970:	f7fe ffe0 	bl	800b934 <swvPrintLn>
 800c974:	e00f      	b.n	800c996 <Finger_Delete_ID+0x6e>
	} else if (p == FINGERPRINT_FLASHERR) {
 800c976:	7bfb      	ldrb	r3, [r7, #15]
 800c978:	2b18      	cmp	r3, #24
 800c97a:	d103      	bne.n	800c984 <Finger_Delete_ID+0x5c>
		swvPrintLn("Error writing to flash");
 800c97c:	480b      	ldr	r0, [pc, #44]	; (800c9ac <Finger_Delete_ID+0x84>)
 800c97e:	f7fe ffd9 	bl	800b934 <swvPrintLn>
 800c982:	e008      	b.n	800c996 <Finger_Delete_ID+0x6e>
	} else {
		sprintf(str, "Unknown error: 0x%02x", p);
 800c984:	7bfb      	ldrb	r3, [r7, #15]
 800c986:	461a      	mov	r2, r3
 800c988:	4909      	ldr	r1, [pc, #36]	; (800c9b0 <Finger_Delete_ID+0x88>)
 800c98a:	480a      	ldr	r0, [pc, #40]	; (800c9b4 <Finger_Delete_ID+0x8c>)
 800c98c:	f005 fdf8 	bl	8012580 <siprintf>
		swvPrintLn(str);
 800c990:	4808      	ldr	r0, [pc, #32]	; (800c9b4 <Finger_Delete_ID+0x8c>)
 800c992:	f7fe ffcf 	bl	800b934 <swvPrintLn>
	}

	return p;
 800c996:	7bfb      	ldrb	r3, [r7, #15]
}
 800c998:	4618      	mov	r0, r3
 800c99a:	3710      	adds	r7, #16
 800c99c:	46bd      	mov	sp, r7
 800c99e:	bd80      	pop	{r7, pc}
 800c9a0:	08015ec8 	.word	0x08015ec8
 800c9a4:	08015d70 	.word	0x08015d70
 800c9a8:	08015ed4 	.word	0x08015ed4
 800c9ac:	08015eb0 	.word	0x08015eb0
 800c9b0:	08015ef8 	.word	0x08015ef8
 800c9b4:	20007bc8 	.word	0x20007bc8

0800c9b8 <Finger_Empty_Database>:

uint8_t Finger_Empty_Database(void) {
 800c9b8:	b580      	push	{r7, lr}
 800c9ba:	b082      	sub	sp, #8
 800c9bc:	af00      	add	r7, sp, #0
	uint8_t p = -1;
 800c9be:	23ff      	movs	r3, #255	; 0xff
 800c9c0:	71fb      	strb	r3, [r7, #7]

	Finger_On();
 800c9c2:	f7ff fd7d 	bl	800c4c0 <Finger_On>
	p = FZ3387_emptyDatabase();
 800c9c6:	f000 f975 	bl	800ccb4 <FZ3387_emptyDatabase>
 800c9ca:	4603      	mov	r3, r0
 800c9cc:	71fb      	strb	r3, [r7, #7]
	Finger_Off();
 800c9ce:	f7ff fd87 	bl	800c4e0 <Finger_Off>

	return p;
 800c9d2:	79fb      	ldrb	r3, [r7, #7]
}
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	3708      	adds	r7, #8
 800c9d8:	46bd      	mov	sp, r7
 800c9da:	bd80      	pop	{r7, pc}

0800c9dc <Finger_Auth_Fast>:
	}

	return -1;
}

int8_t Finger_Auth_Fast(void) {
 800c9dc:	b580      	push	{r7, lr}
 800c9de:	b082      	sub	sp, #8
 800c9e0:	af00      	add	r7, sp, #0
	uint8_t p = -1;
 800c9e2:	23ff      	movs	r3, #255	; 0xff
 800c9e4:	71fb      	strb	r3, [r7, #7]

	p = FZ3387_getImage();
 800c9e6:	f000 f8f9 	bl	800cbdc <FZ3387_getImage>
 800c9ea:	4603      	mov	r3, r0
 800c9ec:	71fb      	strb	r3, [r7, #7]

	if (p == FINGERPRINT_OK) {
 800c9ee:	79fb      	ldrb	r3, [r7, #7]
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d104      	bne.n	800c9fe <Finger_Auth_Fast+0x22>
		p = FZ3387_image2Tz(1);
 800c9f4:	2001      	movs	r0, #1
 800c9f6:	f000 f900 	bl	800cbfa <FZ3387_image2Tz>
 800c9fa:	4603      	mov	r3, r0
 800c9fc:	71fb      	strb	r3, [r7, #7]
	}

	if (p == FINGERPRINT_OK) {
 800c9fe:	79fb      	ldrb	r3, [r7, #7]
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d103      	bne.n	800ca0c <Finger_Auth_Fast+0x30>
		p = FZ3387_fingerFastSearch();
 800ca04:	f000 f966 	bl	800ccd4 <FZ3387_fingerFastSearch>
 800ca08:	4603      	mov	r3, r0
 800ca0a:	71fb      	strb	r3, [r7, #7]
	}

	if (p == FINGERPRINT_OK) {
 800ca0c:	79fb      	ldrb	r3, [r7, #7]
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d113      	bne.n	800ca3a <Finger_Auth_Fast+0x5e>
		// found a match!
		sprintf(str, "Found ID #%d  with confidence of %d", fingerID, fingerConfidence);
 800ca12:	4b0d      	ldr	r3, [pc, #52]	; (800ca48 <Finger_Auth_Fast+0x6c>)
 800ca14:	881b      	ldrh	r3, [r3, #0]
 800ca16:	461a      	mov	r2, r3
 800ca18:	4b0c      	ldr	r3, [pc, #48]	; (800ca4c <Finger_Auth_Fast+0x70>)
 800ca1a:	881b      	ldrh	r3, [r3, #0]
 800ca1c:	490c      	ldr	r1, [pc, #48]	; (800ca50 <Finger_Auth_Fast+0x74>)
 800ca1e:	480d      	ldr	r0, [pc, #52]	; (800ca54 <Finger_Auth_Fast+0x78>)
 800ca20:	f005 fdae 	bl	8012580 <siprintf>
		swvPrintLn(str);
 800ca24:	480b      	ldr	r0, [pc, #44]	; (800ca54 <Finger_Auth_Fast+0x78>)
 800ca26:	f7fe ff85 	bl	800b934 <swvPrintLn>

		if (fingerConfidence > FINGER_CONFIDENCE_MIN) {
 800ca2a:	4b08      	ldr	r3, [pc, #32]	; (800ca4c <Finger_Auth_Fast+0x70>)
 800ca2c:	881b      	ldrh	r3, [r3, #0]
 800ca2e:	2b0a      	cmp	r3, #10
 800ca30:	d903      	bls.n	800ca3a <Finger_Auth_Fast+0x5e>
			return fingerID;
 800ca32:	4b05      	ldr	r3, [pc, #20]	; (800ca48 <Finger_Auth_Fast+0x6c>)
 800ca34:	881b      	ldrh	r3, [r3, #0]
 800ca36:	b25b      	sxtb	r3, r3
 800ca38:	e001      	b.n	800ca3e <Finger_Auth_Fast+0x62>
		}
	}

	return -1;
 800ca3a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ca3e:	4618      	mov	r0, r3
 800ca40:	3708      	adds	r7, #8
 800ca42:	46bd      	mov	sp, r7
 800ca44:	bd80      	pop	{r7, pc}
 800ca46:	bf00      	nop
 800ca48:	20007598 	.word	0x20007598
 800ca4c:	200075e8 	.word	0x200075e8
 800ca50:	08015f54 	.word	0x08015f54
 800ca54:	20007bc8 	.word	0x20007bc8

0800ca58 <Flash_Save_Odometer>:

#include "_flash.h"

uint16_t VirtAddVarTab[NB_OF_VAR] = { VADDR_ODOMETER_L, VADDR_ODOMETER_H };

void Flash_Save_Odometer(uint32_t odometer) {
 800ca58:	b580      	push	{r7, lr}
 800ca5a:	b082      	sub	sp, #8
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	6078      	str	r0, [r7, #4]
	EE_WriteVariable(VADDR_ODOMETER_L, (uint16_t) odometer);
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	b29b      	uxth	r3, r3
 800ca64:	4619      	mov	r1, r3
 800ca66:	2000      	movs	r0, #0
 800ca68:	f7ff fb54 	bl	800c114 <EE_WriteVariable>
	EE_WriteVariable(VADDR_ODOMETER_H, (uint16_t) odometer >> 16);
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	b29b      	uxth	r3, r3
 800ca70:	141b      	asrs	r3, r3, #16
 800ca72:	b29b      	uxth	r3, r3
 800ca74:	4619      	mov	r1, r3
 800ca76:	2001      	movs	r0, #1
 800ca78:	f7ff fb4c 	bl	800c114 <EE_WriteVariable>
}
 800ca7c:	bf00      	nop
 800ca7e:	3708      	adds	r7, #8
 800ca80:	46bd      	mov	sp, r7
 800ca82:	bd80      	pop	{r7, pc}

0800ca84 <Flash_Get_Odometer>:

uint32_t Flash_Get_Odometer(void) {
 800ca84:	b580      	push	{r7, lr}
 800ca86:	b082      	sub	sp, #8
 800ca88:	af00      	add	r7, sp, #0
	uint16_t odom_L, odom_H;

	if (EE_ReadVariable(VADDR_ODOMETER_L, &odom_L) == HAL_OK) {
 800ca8a:	1dbb      	adds	r3, r7, #6
 800ca8c:	4619      	mov	r1, r3
 800ca8e:	2000      	movs	r0, #0
 800ca90:	f7ff faf6 	bl	800c080 <EE_ReadVariable>
 800ca94:	4603      	mov	r3, r0
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d10c      	bne.n	800cab4 <Flash_Get_Odometer+0x30>
		if (EE_ReadVariable(VADDR_ODOMETER_H, &odom_H) == HAL_OK) {
 800ca9a:	1d3b      	adds	r3, r7, #4
 800ca9c:	4619      	mov	r1, r3
 800ca9e:	2001      	movs	r0, #1
 800caa0:	f7ff faee 	bl	800c080 <EE_ReadVariable>
 800caa4:	4603      	mov	r3, r0
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d104      	bne.n	800cab4 <Flash_Get_Odometer+0x30>
			return (odom_H << 16) | odom_L;
 800caaa:	88bb      	ldrh	r3, [r7, #4]
 800caac:	041b      	lsls	r3, r3, #16
 800caae:	88fa      	ldrh	r2, [r7, #6]
 800cab0:	4313      	orrs	r3, r2
 800cab2:	e000      	b.n	800cab6 <Flash_Get_Odometer+0x32>
		}
	}
	return 0;
 800cab4:	2300      	movs	r3, #0
}
 800cab6:	4618      	mov	r0, r3
 800cab8:	3708      	adds	r7, #8
 800caba:	46bd      	mov	sp, r7
 800cabc:	bd80      	pop	{r7, pc}
	...

0800cac0 <FZ3387_SET_POWER>:
uint16_t fingerTemplateCount;

/***************************************************************************
 FUNCTIONS
 ***************************************************************************/
void FZ3387_SET_POWER(uint8_t state){
 800cac0:	b580      	push	{r7, lr}
 800cac2:	b082      	sub	sp, #8
 800cac4:	af00      	add	r7, sp, #0
 800cac6:	4603      	mov	r3, r0
 800cac8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(FINGER_PWR_GPIO_Port, FINGER_PWR_Pin, state);
 800caca:	79fb      	ldrb	r3, [r7, #7]
 800cacc:	461a      	mov	r2, r3
 800cace:	2104      	movs	r1, #4
 800cad0:	4805      	ldr	r0, [pc, #20]	; (800cae8 <FZ3387_SET_POWER+0x28>)
 800cad2:	f7f5 fd15 	bl	8002500 <HAL_GPIO_WritePin>
	osDelay(500);
 800cad6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800cada:	f7fa fd56 	bl	800758a <osDelay>
}
 800cade:	bf00      	nop
 800cae0:	3708      	adds	r7, #8
 800cae2:	46bd      	mov	sp, r7
 800cae4:	bd80      	pop	{r7, pc}
 800cae6:	bf00      	nop
 800cae8:	40020800 	.word	0x40020800

0800caec <FZ3387_SERIAL_WRITE>:

void FZ3387_SERIAL_WRITE(uint8_t c){
 800caec:	b580      	push	{r7, lr}
 800caee:	b082      	sub	sp, #8
 800caf0:	af00      	add	r7, sp, #0
 800caf2:	4603      	mov	r3, r0
 800caf4:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart4, &c, 1, HAL_MAX_DELAY);
 800caf6:	1df9      	adds	r1, r7, #7
 800caf8:	f04f 33ff 	mov.w	r3, #4294967295
 800cafc:	2201      	movs	r2, #1
 800cafe:	4803      	ldr	r0, [pc, #12]	; (800cb0c <FZ3387_SERIAL_WRITE+0x20>)
 800cb00:	f7f9 fe61 	bl	80067c6 <HAL_UART_Transmit>
}
 800cb04:	bf00      	nop
 800cb06:	3708      	adds	r7, #8
 800cb08:	46bd      	mov	sp, r7
 800cb0a:	bd80      	pop	{r7, pc}
 800cb0c:	20008528 	.word	0x20008528

0800cb10 <FZ3387_SERIAL_WRITE_U16>:

void FZ3387_SERIAL_WRITE_U16(uint16_t cc){
 800cb10:	b580      	push	{r7, lr}
 800cb12:	b082      	sub	sp, #8
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	4603      	mov	r3, r0
 800cb18:	80fb      	strh	r3, [r7, #6]
	FZ3387_SERIAL_WRITE((uint8_t)(cc>>8)); FZ3387_SERIAL_WRITE((uint8_t)(cc & 0xFF));
 800cb1a:	88fb      	ldrh	r3, [r7, #6]
 800cb1c:	0a1b      	lsrs	r3, r3, #8
 800cb1e:	b29b      	uxth	r3, r3
 800cb20:	b2db      	uxtb	r3, r3
 800cb22:	4618      	mov	r0, r3
 800cb24:	f7ff ffe2 	bl	800caec <FZ3387_SERIAL_WRITE>
 800cb28:	88fb      	ldrh	r3, [r7, #6]
 800cb2a:	b2db      	uxtb	r3, r3
 800cb2c:	4618      	mov	r0, r3
 800cb2e:	f7ff ffdd 	bl	800caec <FZ3387_SERIAL_WRITE>
}
 800cb32:	bf00      	nop
 800cb34:	3708      	adds	r7, #8
 800cb36:	46bd      	mov	sp, r7
 800cb38:	bd80      	pop	{r7, pc}
	...

0800cb3c <FZ3387_SEND_CMD_PACKET>:

uint8_t FZ3387_SEND_CMD_PACKET(uint8_t *data, uint8_t size){
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	b082      	sub	sp, #8
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	6078      	str	r0, [r7, #4]
 800cb44:	460b      	mov	r3, r1
 800cb46:	70fb      	strb	r3, [r7, #3]
	FZ3387_setPacket(FINGERPRINT_COMMANDPACKET, size, data);
 800cb48:	78fb      	ldrb	r3, [r7, #3]
 800cb4a:	b29b      	uxth	r3, r3
 800cb4c:	687a      	ldr	r2, [r7, #4]
 800cb4e:	4619      	mov	r1, r3
 800cb50:	2001      	movs	r0, #1
 800cb52:	f000 f90d 	bl	800cd70 <FZ3387_setPacket>
	FZ3387_writeStructuredPacket();
 800cb56:	f000 f951 	bl	800cdfc <FZ3387_writeStructuredPacket>

	if (FZ3387_getStructuredPacket() != FINGERPRINT_OK) {
 800cb5a:	f000 f9ad 	bl	800ceb8 <FZ3387_getStructuredPacket>
 800cb5e:	4603      	mov	r3, r0
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d001      	beq.n	800cb68 <FZ3387_SEND_CMD_PACKET+0x2c>
		return FINGERPRINT_PACKETRECIEVEERR;
 800cb64:	2301      	movs	r3, #1
 800cb66:	e007      	b.n	800cb78 <FZ3387_SEND_CMD_PACKET+0x3c>
	}
	if (packet.type != FINGERPRINT_ACKPACKET) {
 800cb68:	4b05      	ldr	r3, [pc, #20]	; (800cb80 <FZ3387_SEND_CMD_PACKET+0x44>)
 800cb6a:	799b      	ldrb	r3, [r3, #6]
 800cb6c:	2b07      	cmp	r3, #7
 800cb6e:	d001      	beq.n	800cb74 <FZ3387_SEND_CMD_PACKET+0x38>
		return FINGERPRINT_PACKETRECIEVEERR;
 800cb70:	2301      	movs	r3, #1
 800cb72:	e001      	b.n	800cb78 <FZ3387_SEND_CMD_PACKET+0x3c>
	}
	return packet.data[0];
 800cb74:	4b02      	ldr	r3, [pc, #8]	; (800cb80 <FZ3387_SEND_CMD_PACKET+0x44>)
 800cb76:	7a9b      	ldrb	r3, [r3, #10]
}
 800cb78:	4618      	mov	r0, r3
 800cb7a:	3708      	adds	r7, #8
 800cb7c:	46bd      	mov	sp, r7
 800cb7e:	bd80      	pop	{r7, pc}
 800cb80:	2000759c 	.word	0x2000759c

0800cb84 <FZ3387_verifyPassword>:
/*!
    @brief  Verifies the sensors' access password (default password is 0x0000000). A good way to also check if the sensors is active and responding
    @returns True if password is correct
 */
/**************************************************************************/
bool FZ3387_verifyPassword(void) {
 800cb84:	b580      	push	{r7, lr}
 800cb86:	af00      	add	r7, sp, #0
	return FZ3387_checkPassword() == FINGERPRINT_OK;
 800cb88:	f000 f808 	bl	800cb9c <FZ3387_checkPassword>
 800cb8c:	4603      	mov	r3, r0
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	bf0c      	ite	eq
 800cb92:	2301      	moveq	r3, #1
 800cb94:	2300      	movne	r3, #0
 800cb96:	b2db      	uxtb	r3, r3
}
 800cb98:	4618      	mov	r0, r3
 800cb9a:	bd80      	pop	{r7, pc}

0800cb9c <FZ3387_checkPassword>:

uint8_t FZ3387_checkPassword(void) {
 800cb9c:	b580      	push	{r7, lr}
 800cb9e:	b082      	sub	sp, #8
 800cba0:	af00      	add	r7, sp, #0
	uint8_t data[] = {
 800cba2:	2313      	movs	r3, #19
 800cba4:	703b      	strb	r3, [r7, #0]
 800cba6:	2300      	movs	r3, #0
 800cba8:	707b      	strb	r3, [r7, #1]
 800cbaa:	2300      	movs	r3, #0
 800cbac:	70bb      	strb	r3, [r7, #2]
 800cbae:	2300      	movs	r3, #0
 800cbb0:	70fb      	strb	r3, [r7, #3]
 800cbb2:	2300      	movs	r3, #0
 800cbb4:	713b      	strb	r3, [r7, #4]
			(uint8_t)(FINGERPRINT_PASSWORD >> 16),
			(uint8_t)(FINGERPRINT_PASSWORD >> 8),
			(uint8_t)(FINGERPRINT_PASSWORD & 0xFF)
	};

	FZ3387_SEND_CMD_PACKET(data, sizeof(data));
 800cbb6:	463b      	mov	r3, r7
 800cbb8:	2105      	movs	r1, #5
 800cbba:	4618      	mov	r0, r3
 800cbbc:	f7ff ffbe 	bl	800cb3c <FZ3387_SEND_CMD_PACKET>
	if (packet.data[0] == FINGERPRINT_OK)
 800cbc0:	4b05      	ldr	r3, [pc, #20]	; (800cbd8 <FZ3387_checkPassword+0x3c>)
 800cbc2:	7a9b      	ldrb	r3, [r3, #10]
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d101      	bne.n	800cbcc <FZ3387_checkPassword+0x30>
		return FINGERPRINT_OK;
 800cbc8:	2300      	movs	r3, #0
 800cbca:	e000      	b.n	800cbce <FZ3387_checkPassword+0x32>
	else
		return FINGERPRINT_PACKETRECIEVEERR;
 800cbcc:	2301      	movs	r3, #1
}
 800cbce:	4618      	mov	r0, r3
 800cbd0:	3708      	adds	r7, #8
 800cbd2:	46bd      	mov	sp, r7
 800cbd4:	bd80      	pop	{r7, pc}
 800cbd6:	bf00      	nop
 800cbd8:	2000759c 	.word	0x2000759c

0800cbdc <FZ3387_getImage>:
    @returns <code>FINGERPRINT_NOFINGER</code> if no finger detected
    @returns <code>FINGERPRINT_PACKETRECIEVEERR</code> on communication error
    @returns <code>FINGERPRINT_IMAGEFAIL</code> on imaging error
 */
/**************************************************************************/
uint8_t FZ3387_getImage(void) {
 800cbdc:	b580      	push	{r7, lr}
 800cbde:	b082      	sub	sp, #8
 800cbe0:	af00      	add	r7, sp, #0
	uint8_t data[] = {
 800cbe2:	2301      	movs	r3, #1
 800cbe4:	713b      	strb	r3, [r7, #4]
			FINGERPRINT_GETIMAGE
	};
	return FZ3387_SEND_CMD_PACKET(data, sizeof(data));
 800cbe6:	1d3b      	adds	r3, r7, #4
 800cbe8:	2101      	movs	r1, #1
 800cbea:	4618      	mov	r0, r3
 800cbec:	f7ff ffa6 	bl	800cb3c <FZ3387_SEND_CMD_PACKET>
 800cbf0:	4603      	mov	r3, r0
}
 800cbf2:	4618      	mov	r0, r3
 800cbf4:	3708      	adds	r7, #8
 800cbf6:	46bd      	mov	sp, r7
 800cbf8:	bd80      	pop	{r7, pc}

0800cbfa <FZ3387_image2Tz>:
    @returns <code>FINGERPRINT_IMAGEMESS</code> if image is too messy
    @returns <code>FINGERPRINT_PACKETRECIEVEERR</code> on communication error
    @returns <code>FINGERPRINT_FEATUREFAIL</code> on failure to identify fingerprint features
    @returns <code>FINGERPRINT_INVALIDIMAGE</code> on failure to identify fingerprint features
 */
uint8_t FZ3387_image2Tz(uint8_t slot) {
 800cbfa:	b580      	push	{r7, lr}
 800cbfc:	b084      	sub	sp, #16
 800cbfe:	af00      	add	r7, sp, #0
 800cc00:	4603      	mov	r3, r0
 800cc02:	71fb      	strb	r3, [r7, #7]
	uint8_t data[] = {
 800cc04:	2302      	movs	r3, #2
 800cc06:	733b      	strb	r3, [r7, #12]
 800cc08:	79fb      	ldrb	r3, [r7, #7]
 800cc0a:	737b      	strb	r3, [r7, #13]
			FINGERPRINT_IMAGE2TZ,
			slot
	};
	return FZ3387_SEND_CMD_PACKET(data, sizeof(data));
 800cc0c:	f107 030c 	add.w	r3, r7, #12
 800cc10:	2102      	movs	r1, #2
 800cc12:	4618      	mov	r0, r3
 800cc14:	f7ff ff92 	bl	800cb3c <FZ3387_SEND_CMD_PACKET>
 800cc18:	4603      	mov	r3, r0
}
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	3710      	adds	r7, #16
 800cc1e:	46bd      	mov	sp, r7
 800cc20:	bd80      	pop	{r7, pc}

0800cc22 <FZ3387_createModel>:
    @brief   Ask the sensor to take two print feature template and create a model
    @returns <code>FINGERPRINT_OK</code> on success
    @returns <code>FINGERPRINT_PACKETRECIEVEERR</code> on communication error
    @returns <code>FINGERPRINT_ENROLLMISMATCH</code> on mismatch of fingerprints
 */
uint8_t FZ3387_createModel(void) {
 800cc22:	b580      	push	{r7, lr}
 800cc24:	b082      	sub	sp, #8
 800cc26:	af00      	add	r7, sp, #0
	uint8_t data[] = {
 800cc28:	2305      	movs	r3, #5
 800cc2a:	713b      	strb	r3, [r7, #4]
			FINGERPRINT_REGMODEL
	};
	return FZ3387_SEND_CMD_PACKET(data, sizeof(data));
 800cc2c:	1d3b      	adds	r3, r7, #4
 800cc2e:	2101      	movs	r1, #1
 800cc30:	4618      	mov	r0, r3
 800cc32:	f7ff ff83 	bl	800cb3c <FZ3387_SEND_CMD_PACKET>
 800cc36:	4603      	mov	r3, r0
}
 800cc38:	4618      	mov	r0, r3
 800cc3a:	3708      	adds	r7, #8
 800cc3c:	46bd      	mov	sp, r7
 800cc3e:	bd80      	pop	{r7, pc}

0800cc40 <FZ3387_storeModel>:
    @returns <code>FINGERPRINT_OK</code> on success
    @returns <code>FINGERPRINT_BADLOCATION</code> if the location is invalid
    @returns <code>FINGERPRINT_FLASHERR</code> if the model couldn't be written to flash memory
    @returns <code>FINGERPRINT_PACKETRECIEVEERR</code> on communication error
 */
uint8_t FZ3387_storeModel(uint16_t location) {
 800cc40:	b580      	push	{r7, lr}
 800cc42:	b084      	sub	sp, #16
 800cc44:	af00      	add	r7, sp, #0
 800cc46:	4603      	mov	r3, r0
 800cc48:	80fb      	strh	r3, [r7, #6]
	uint8_t data[] = {
 800cc4a:	2306      	movs	r3, #6
 800cc4c:	733b      	strb	r3, [r7, #12]
 800cc4e:	2301      	movs	r3, #1
 800cc50:	737b      	strb	r3, [r7, #13]
			FINGERPRINT_STORE,
			0x01,
			(uint8_t)(location >> 8),
 800cc52:	88fb      	ldrh	r3, [r7, #6]
 800cc54:	0a1b      	lsrs	r3, r3, #8
 800cc56:	b29b      	uxth	r3, r3
 800cc58:	b2db      	uxtb	r3, r3
	uint8_t data[] = {
 800cc5a:	73bb      	strb	r3, [r7, #14]
			(uint8_t)(location & 0xFF)
 800cc5c:	88fb      	ldrh	r3, [r7, #6]
 800cc5e:	b2db      	uxtb	r3, r3
	uint8_t data[] = {
 800cc60:	73fb      	strb	r3, [r7, #15]
	};
	return FZ3387_SEND_CMD_PACKET(data, sizeof(data));
 800cc62:	f107 030c 	add.w	r3, r7, #12
 800cc66:	2104      	movs	r1, #4
 800cc68:	4618      	mov	r0, r3
 800cc6a:	f7ff ff67 	bl	800cb3c <FZ3387_SEND_CMD_PACKET>
 800cc6e:	4603      	mov	r3, r0
}
 800cc70:	4618      	mov	r0, r3
 800cc72:	3710      	adds	r7, #16
 800cc74:	46bd      	mov	sp, r7
 800cc76:	bd80      	pop	{r7, pc}

0800cc78 <FZ3387_deleteModel>:
    @returns <code>FINGERPRINT_OK</code> on success
    @returns <code>FINGERPRINT_BADLOCATION</code> if the location is invalid
    @returns <code>FINGERPRINT_FLASHERR</code> if the model couldn't be written to flash memory
    @returns <code>FINGERPRINT_PACKETRECIEVEERR</code> on communication error
 */
uint8_t FZ3387_deleteModel(uint16_t location) {
 800cc78:	b580      	push	{r7, lr}
 800cc7a:	b084      	sub	sp, #16
 800cc7c:	af00      	add	r7, sp, #0
 800cc7e:	4603      	mov	r3, r0
 800cc80:	80fb      	strh	r3, [r7, #6]
	uint8_t data[] = {
 800cc82:	230c      	movs	r3, #12
 800cc84:	723b      	strb	r3, [r7, #8]
			FINGERPRINT_DELETE,
			(uint8_t)(location >> 8),
 800cc86:	88fb      	ldrh	r3, [r7, #6]
 800cc88:	0a1b      	lsrs	r3, r3, #8
 800cc8a:	b29b      	uxth	r3, r3
 800cc8c:	b2db      	uxtb	r3, r3
	uint8_t data[] = {
 800cc8e:	727b      	strb	r3, [r7, #9]
			(uint8_t)(location & 0xFF),
 800cc90:	88fb      	ldrh	r3, [r7, #6]
 800cc92:	b2db      	uxtb	r3, r3
	uint8_t data[] = {
 800cc94:	72bb      	strb	r3, [r7, #10]
 800cc96:	2300      	movs	r3, #0
 800cc98:	72fb      	strb	r3, [r7, #11]
 800cc9a:	2301      	movs	r3, #1
 800cc9c:	733b      	strb	r3, [r7, #12]
			0x00,
			0x01
	};
	return FZ3387_SEND_CMD_PACKET(data, sizeof(data));
 800cc9e:	f107 0308 	add.w	r3, r7, #8
 800cca2:	2105      	movs	r1, #5
 800cca4:	4618      	mov	r0, r3
 800cca6:	f7ff ff49 	bl	800cb3c <FZ3387_SEND_CMD_PACKET>
 800ccaa:	4603      	mov	r3, r0
}
 800ccac:	4618      	mov	r0, r3
 800ccae:	3710      	adds	r7, #16
 800ccb0:	46bd      	mov	sp, r7
 800ccb2:	bd80      	pop	{r7, pc}

0800ccb4 <FZ3387_emptyDatabase>:
    @returns <code>FINGERPRINT_OK</code> on success
    @returns <code>FINGERPRINT_BADLOCATION</code> if the location is invalid
    @returns <code>FINGERPRINT_FLASHERR</code> if the model couldn't be written to flash memory
    @returns <code>FINGERPRINT_PACKETRECIEVEERR</code> on communication error
 */
uint8_t FZ3387_emptyDatabase(void) {
 800ccb4:	b580      	push	{r7, lr}
 800ccb6:	b082      	sub	sp, #8
 800ccb8:	af00      	add	r7, sp, #0
	uint8_t data[] = {
 800ccba:	230d      	movs	r3, #13
 800ccbc:	713b      	strb	r3, [r7, #4]
			FINGERPRINT_EMPTY
	};
	return FZ3387_SEND_CMD_PACKET(data, sizeof(data));
 800ccbe:	1d3b      	adds	r3, r7, #4
 800ccc0:	2101      	movs	r1, #1
 800ccc2:	4618      	mov	r0, r3
 800ccc4:	f7ff ff3a 	bl	800cb3c <FZ3387_SEND_CMD_PACKET>
 800ccc8:	4603      	mov	r3, r0
}
 800ccca:	4618      	mov	r0, r3
 800cccc:	3708      	adds	r7, #8
 800ccce:	46bd      	mov	sp, r7
 800ccd0:	bd80      	pop	{r7, pc}
	...

0800ccd4 <FZ3387_fingerFastSearch>:
    @returns <code>FINGERPRINT_OK</code> on fingerprint match success
    @returns <code>FINGERPRINT_NOTFOUND</code> no match made
    @returns <code>FINGERPRINT_PACKETRECIEVEERR</code> on communication error
 */
/**************************************************************************/
uint8_t FZ3387_fingerFastSearch(void) {
 800ccd4:	b580      	push	{r7, lr}
 800ccd6:	b082      	sub	sp, #8
 800ccd8:	af00      	add	r7, sp, #0
	uint8_t data[] = {
 800ccda:	4a21      	ldr	r2, [pc, #132]	; (800cd60 <FZ3387_fingerFastSearch+0x8c>)
 800ccdc:	463b      	mov	r3, r7
 800ccde:	e892 0003 	ldmia.w	r2, {r0, r1}
 800cce2:	6018      	str	r0, [r3, #0]
 800cce4:	3304      	adds	r3, #4
 800cce6:	8019      	strh	r1, [r3, #0]
			0x00,
			0x00,
			0xA3
	};
	// high speed search of slot #1 starting at page 0x0000 and page #0x00A3
	FZ3387_SEND_CMD_PACKET(data, sizeof(data));
 800cce8:	463b      	mov	r3, r7
 800ccea:	2106      	movs	r1, #6
 800ccec:	4618      	mov	r0, r3
 800ccee:	f7ff ff25 	bl	800cb3c <FZ3387_SEND_CMD_PACKET>
	fingerID = 0xFFFF;
 800ccf2:	4b1c      	ldr	r3, [pc, #112]	; (800cd64 <FZ3387_fingerFastSearch+0x90>)
 800ccf4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ccf8:	801a      	strh	r2, [r3, #0]
	fingerConfidence = 0xFFFF;
 800ccfa:	4b1b      	ldr	r3, [pc, #108]	; (800cd68 <FZ3387_fingerFastSearch+0x94>)
 800ccfc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cd00:	801a      	strh	r2, [r3, #0]

	fingerID = packet.data[1];
 800cd02:	4b1a      	ldr	r3, [pc, #104]	; (800cd6c <FZ3387_fingerFastSearch+0x98>)
 800cd04:	7adb      	ldrb	r3, [r3, #11]
 800cd06:	b29a      	uxth	r2, r3
 800cd08:	4b16      	ldr	r3, [pc, #88]	; (800cd64 <FZ3387_fingerFastSearch+0x90>)
 800cd0a:	801a      	strh	r2, [r3, #0]
	fingerID <<= 8;
 800cd0c:	4b15      	ldr	r3, [pc, #84]	; (800cd64 <FZ3387_fingerFastSearch+0x90>)
 800cd0e:	881b      	ldrh	r3, [r3, #0]
 800cd10:	021b      	lsls	r3, r3, #8
 800cd12:	b29a      	uxth	r2, r3
 800cd14:	4b13      	ldr	r3, [pc, #76]	; (800cd64 <FZ3387_fingerFastSearch+0x90>)
 800cd16:	801a      	strh	r2, [r3, #0]
	fingerID |= packet.data[2];
 800cd18:	4b14      	ldr	r3, [pc, #80]	; (800cd6c <FZ3387_fingerFastSearch+0x98>)
 800cd1a:	7b1b      	ldrb	r3, [r3, #12]
 800cd1c:	b29a      	uxth	r2, r3
 800cd1e:	4b11      	ldr	r3, [pc, #68]	; (800cd64 <FZ3387_fingerFastSearch+0x90>)
 800cd20:	881b      	ldrh	r3, [r3, #0]
 800cd22:	4313      	orrs	r3, r2
 800cd24:	b29a      	uxth	r2, r3
 800cd26:	4b0f      	ldr	r3, [pc, #60]	; (800cd64 <FZ3387_fingerFastSearch+0x90>)
 800cd28:	801a      	strh	r2, [r3, #0]

	fingerConfidence = packet.data[3];
 800cd2a:	4b10      	ldr	r3, [pc, #64]	; (800cd6c <FZ3387_fingerFastSearch+0x98>)
 800cd2c:	7b5b      	ldrb	r3, [r3, #13]
 800cd2e:	b29a      	uxth	r2, r3
 800cd30:	4b0d      	ldr	r3, [pc, #52]	; (800cd68 <FZ3387_fingerFastSearch+0x94>)
 800cd32:	801a      	strh	r2, [r3, #0]
	fingerConfidence <<= 8;
 800cd34:	4b0c      	ldr	r3, [pc, #48]	; (800cd68 <FZ3387_fingerFastSearch+0x94>)
 800cd36:	881b      	ldrh	r3, [r3, #0]
 800cd38:	021b      	lsls	r3, r3, #8
 800cd3a:	b29a      	uxth	r2, r3
 800cd3c:	4b0a      	ldr	r3, [pc, #40]	; (800cd68 <FZ3387_fingerFastSearch+0x94>)
 800cd3e:	801a      	strh	r2, [r3, #0]
	fingerConfidence |= packet.data[4];
 800cd40:	4b0a      	ldr	r3, [pc, #40]	; (800cd6c <FZ3387_fingerFastSearch+0x98>)
 800cd42:	7b9b      	ldrb	r3, [r3, #14]
 800cd44:	b29a      	uxth	r2, r3
 800cd46:	4b08      	ldr	r3, [pc, #32]	; (800cd68 <FZ3387_fingerFastSearch+0x94>)
 800cd48:	881b      	ldrh	r3, [r3, #0]
 800cd4a:	4313      	orrs	r3, r2
 800cd4c:	b29a      	uxth	r2, r3
 800cd4e:	4b06      	ldr	r3, [pc, #24]	; (800cd68 <FZ3387_fingerFastSearch+0x94>)
 800cd50:	801a      	strh	r2, [r3, #0]

	return packet.data[0];
 800cd52:	4b06      	ldr	r3, [pc, #24]	; (800cd6c <FZ3387_fingerFastSearch+0x98>)
 800cd54:	7a9b      	ldrb	r3, [r3, #10]
}
 800cd56:	4618      	mov	r0, r3
 800cd58:	3708      	adds	r7, #8
 800cd5a:	46bd      	mov	sp, r7
 800cd5c:	bd80      	pop	{r7, pc}
 800cd5e:	bf00      	nop
 800cd60:	08015f7c 	.word	0x08015f7c
 800cd64:	20007598 	.word	0x20007598
 800cd68:	200075e8 	.word	0x200075e8
 800cd6c:	2000759c 	.word	0x2000759c

0800cd70 <FZ3387_setPacket>:
/*!
    @brief Packet conversion
 */
/**************************************************************************/

void FZ3387_setPacket(uint8_t type, uint16_t length, uint8_t * data) {
 800cd70:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd72:	b083      	sub	sp, #12
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	4603      	mov	r3, r0
 800cd78:	603a      	str	r2, [r7, #0]
 800cd7a:	71fb      	strb	r3, [r7, #7]
 800cd7c:	460b      	mov	r3, r1
 800cd7e:	80bb      	strh	r3, [r7, #4]
	packet.start_code = FINGERPRINT_STARTCODE;
 800cd80:	4b1c      	ldr	r3, [pc, #112]	; (800cdf4 <FZ3387_setPacket+0x84>)
 800cd82:	f64e 7201 	movw	r2, #61185	; 0xef01
 800cd86:	801a      	strh	r2, [r3, #0]
	packet.type = type;
 800cd88:	4a1a      	ldr	r2, [pc, #104]	; (800cdf4 <FZ3387_setPacket+0x84>)
 800cd8a:	79fb      	ldrb	r3, [r7, #7]
 800cd8c:	7193      	strb	r3, [r2, #6]
	packet.length = length;
 800cd8e:	4a19      	ldr	r2, [pc, #100]	; (800cdf4 <FZ3387_setPacket+0x84>)
 800cd90:	88bb      	ldrh	r3, [r7, #4]
 800cd92:	8113      	strh	r3, [r2, #8]
	packet.address[0] = (uint8_t)(FINGERPRINT_ADDRESS >> 24);
 800cd94:	4b17      	ldr	r3, [pc, #92]	; (800cdf4 <FZ3387_setPacket+0x84>)
 800cd96:	22ff      	movs	r2, #255	; 0xff
 800cd98:	709a      	strb	r2, [r3, #2]
	packet.address[1] = (uint8_t)(FINGERPRINT_ADDRESS >> 16);
 800cd9a:	4b16      	ldr	r3, [pc, #88]	; (800cdf4 <FZ3387_setPacket+0x84>)
 800cd9c:	22ff      	movs	r2, #255	; 0xff
 800cd9e:	70da      	strb	r2, [r3, #3]
	packet.address[2] = (uint8_t)(FINGERPRINT_ADDRESS >> 8);
 800cda0:	4b14      	ldr	r3, [pc, #80]	; (800cdf4 <FZ3387_setPacket+0x84>)
 800cda2:	22ff      	movs	r2, #255	; 0xff
 800cda4:	711a      	strb	r2, [r3, #4]
	packet.address[3] = (uint8_t)(FINGERPRINT_ADDRESS & 0xFF);
 800cda6:	4b13      	ldr	r3, [pc, #76]	; (800cdf4 <FZ3387_setPacket+0x84>)
 800cda8:	22ff      	movs	r2, #255	; 0xff
 800cdaa:	715a      	strb	r2, [r3, #5]

	if(length<64)
 800cdac:	88bb      	ldrh	r3, [r7, #4]
 800cdae:	2b3f      	cmp	r3, #63	; 0x3f
 800cdb0:	d806      	bhi.n	800cdc0 <FZ3387_setPacket+0x50>
		memcpy(packet.data, data, length);
 800cdb2:	88bb      	ldrh	r3, [r7, #4]
 800cdb4:	461a      	mov	r2, r3
 800cdb6:	6839      	ldr	r1, [r7, #0]
 800cdb8:	480f      	ldr	r0, [pc, #60]	; (800cdf8 <FZ3387_setPacket+0x88>)
 800cdba:	f005 fbcd 	bl	8012558 <memcpy>
	else
		memcpy(packet.data, data, 64);
}
 800cdbe:	e015      	b.n	800cdec <FZ3387_setPacket+0x7c>
		memcpy(packet.data, data, 64);
 800cdc0:	4a0c      	ldr	r2, [pc, #48]	; (800cdf4 <FZ3387_setPacket+0x84>)
 800cdc2:	683b      	ldr	r3, [r7, #0]
 800cdc4:	f102 000a 	add.w	r0, r2, #10
 800cdc8:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800cdcc:	4602      	mov	r2, r0
 800cdce:	4619      	mov	r1, r3
 800cdd0:	f8d1 c000 	ldr.w	ip, [r1]
 800cdd4:	684e      	ldr	r6, [r1, #4]
 800cdd6:	688d      	ldr	r5, [r1, #8]
 800cdd8:	68c9      	ldr	r1, [r1, #12]
 800cdda:	f8c2 c000 	str.w	ip, [r2]
 800cdde:	6056      	str	r6, [r2, #4]
 800cde0:	6095      	str	r5, [r2, #8]
 800cde2:	60d1      	str	r1, [r2, #12]
 800cde4:	3310      	adds	r3, #16
 800cde6:	3010      	adds	r0, #16
 800cde8:	42a3      	cmp	r3, r4
 800cdea:	d1ef      	bne.n	800cdcc <FZ3387_setPacket+0x5c>
}
 800cdec:	bf00      	nop
 800cdee:	370c      	adds	r7, #12
 800cdf0:	46bd      	mov	sp, r7
 800cdf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cdf4:	2000759c 	.word	0x2000759c
 800cdf8:	200075a6 	.word	0x200075a6

0800cdfc <FZ3387_writeStructuredPacket>:
    @brief   Helper function to process a packet and send it over UART to the sensor
    @param   packet A structure containing the bytes to transmit
 */
/**************************************************************************/

void FZ3387_writeStructuredPacket(void) {
 800cdfc:	b580      	push	{r7, lr}
 800cdfe:	b082      	sub	sp, #8
 800ce00:	af00      	add	r7, sp, #0
	FZ3387_SERIAL_WRITE_U16(packet.start_code);
 800ce02:	4b2c      	ldr	r3, [pc, #176]	; (800ceb4 <FZ3387_writeStructuredPacket+0xb8>)
 800ce04:	881b      	ldrh	r3, [r3, #0]
 800ce06:	4618      	mov	r0, r3
 800ce08:	f7ff fe82 	bl	800cb10 <FZ3387_SERIAL_WRITE_U16>
	FZ3387_SERIAL_WRITE(packet.address[0]);
 800ce0c:	4b29      	ldr	r3, [pc, #164]	; (800ceb4 <FZ3387_writeStructuredPacket+0xb8>)
 800ce0e:	789b      	ldrb	r3, [r3, #2]
 800ce10:	4618      	mov	r0, r3
 800ce12:	f7ff fe6b 	bl	800caec <FZ3387_SERIAL_WRITE>
	FZ3387_SERIAL_WRITE(packet.address[1]);
 800ce16:	4b27      	ldr	r3, [pc, #156]	; (800ceb4 <FZ3387_writeStructuredPacket+0xb8>)
 800ce18:	78db      	ldrb	r3, [r3, #3]
 800ce1a:	4618      	mov	r0, r3
 800ce1c:	f7ff fe66 	bl	800caec <FZ3387_SERIAL_WRITE>
	FZ3387_SERIAL_WRITE(packet.address[2]);
 800ce20:	4b24      	ldr	r3, [pc, #144]	; (800ceb4 <FZ3387_writeStructuredPacket+0xb8>)
 800ce22:	791b      	ldrb	r3, [r3, #4]
 800ce24:	4618      	mov	r0, r3
 800ce26:	f7ff fe61 	bl	800caec <FZ3387_SERIAL_WRITE>
	FZ3387_SERIAL_WRITE(packet.address[3]);
 800ce2a:	4b22      	ldr	r3, [pc, #136]	; (800ceb4 <FZ3387_writeStructuredPacket+0xb8>)
 800ce2c:	795b      	ldrb	r3, [r3, #5]
 800ce2e:	4618      	mov	r0, r3
 800ce30:	f7ff fe5c 	bl	800caec <FZ3387_SERIAL_WRITE>
	FZ3387_SERIAL_WRITE(packet.type);
 800ce34:	4b1f      	ldr	r3, [pc, #124]	; (800ceb4 <FZ3387_writeStructuredPacket+0xb8>)
 800ce36:	799b      	ldrb	r3, [r3, #6]
 800ce38:	4618      	mov	r0, r3
 800ce3a:	f7ff fe57 	bl	800caec <FZ3387_SERIAL_WRITE>

	uint16_t wire_length = packet.length + 2;
 800ce3e:	4b1d      	ldr	r3, [pc, #116]	; (800ceb4 <FZ3387_writeStructuredPacket+0xb8>)
 800ce40:	891b      	ldrh	r3, [r3, #8]
 800ce42:	3302      	adds	r3, #2
 800ce44:	807b      	strh	r3, [r7, #2]
	FZ3387_SERIAL_WRITE_U16(wire_length);
 800ce46:	887b      	ldrh	r3, [r7, #2]
 800ce48:	4618      	mov	r0, r3
 800ce4a:	f7ff fe61 	bl	800cb10 <FZ3387_SERIAL_WRITE_U16>

	uint16_t sum = ((wire_length)>>8) + ((wire_length)&0xFF) + packet.type;
 800ce4e:	887b      	ldrh	r3, [r7, #2]
 800ce50:	0a1b      	lsrs	r3, r3, #8
 800ce52:	b29a      	uxth	r2, r3
 800ce54:	887b      	ldrh	r3, [r7, #2]
 800ce56:	b2db      	uxtb	r3, r3
 800ce58:	b29b      	uxth	r3, r3
 800ce5a:	4413      	add	r3, r2
 800ce5c:	b29a      	uxth	r2, r3
 800ce5e:	4b15      	ldr	r3, [pc, #84]	; (800ceb4 <FZ3387_writeStructuredPacket+0xb8>)
 800ce60:	799b      	ldrb	r3, [r3, #6]
 800ce62:	b29b      	uxth	r3, r3
 800ce64:	4413      	add	r3, r2
 800ce66:	80fb      	strh	r3, [r7, #6]
	for (uint8_t i=0; i< packet.length; i++) {
 800ce68:	2300      	movs	r3, #0
 800ce6a:	717b      	strb	r3, [r7, #5]
 800ce6c:	e011      	b.n	800ce92 <FZ3387_writeStructuredPacket+0x96>
		FZ3387_SERIAL_WRITE(packet.data[i]);
 800ce6e:	797b      	ldrb	r3, [r7, #5]
 800ce70:	4a10      	ldr	r2, [pc, #64]	; (800ceb4 <FZ3387_writeStructuredPacket+0xb8>)
 800ce72:	4413      	add	r3, r2
 800ce74:	7a9b      	ldrb	r3, [r3, #10]
 800ce76:	4618      	mov	r0, r3
 800ce78:	f7ff fe38 	bl	800caec <FZ3387_SERIAL_WRITE>
		sum += packet.data[i];
 800ce7c:	797b      	ldrb	r3, [r7, #5]
 800ce7e:	4a0d      	ldr	r2, [pc, #52]	; (800ceb4 <FZ3387_writeStructuredPacket+0xb8>)
 800ce80:	4413      	add	r3, r2
 800ce82:	7a9b      	ldrb	r3, [r3, #10]
 800ce84:	b29a      	uxth	r2, r3
 800ce86:	88fb      	ldrh	r3, [r7, #6]
 800ce88:	4413      	add	r3, r2
 800ce8a:	80fb      	strh	r3, [r7, #6]
	for (uint8_t i=0; i< packet.length; i++) {
 800ce8c:	797b      	ldrb	r3, [r7, #5]
 800ce8e:	3301      	adds	r3, #1
 800ce90:	717b      	strb	r3, [r7, #5]
 800ce92:	797b      	ldrb	r3, [r7, #5]
 800ce94:	b29a      	uxth	r2, r3
 800ce96:	4b07      	ldr	r3, [pc, #28]	; (800ceb4 <FZ3387_writeStructuredPacket+0xb8>)
 800ce98:	891b      	ldrh	r3, [r3, #8]
 800ce9a:	429a      	cmp	r2, r3
 800ce9c:	d3e7      	bcc.n	800ce6e <FZ3387_writeStructuredPacket+0x72>
	}

	FZ3387_SERIAL_WRITE_U16(sum);
 800ce9e:	88fb      	ldrh	r3, [r7, #6]
 800cea0:	4618      	mov	r0, r3
 800cea2:	f7ff fe35 	bl	800cb10 <FZ3387_SERIAL_WRITE_U16>

	osDelay(250);
 800cea6:	20fa      	movs	r0, #250	; 0xfa
 800cea8:	f7fa fb6f 	bl	800758a <osDelay>
}
 800ceac:	bf00      	nop
 800ceae:	3708      	adds	r7, #8
 800ceb0:	46bd      	mov	sp, r7
 800ceb2:	bd80      	pop	{r7, pc}
 800ceb4:	2000759c 	.word	0x2000759c

0800ceb8 <FZ3387_getStructuredPacket>:
    @param   timeout how many milliseconds we're willing to wait
    @returns <code>FINGERPRINT_OK</code> on success
    @returns <code>FINGERPRINT_TIMEOUT</code> or <code>FINGERPRINT_BADPACKET</code> on failure
 */
/**************************************************************************/
uint8_t FZ3387_getStructuredPacket(void) {
 800ceb8:	b480      	push	{r7}
 800ceba:	b083      	sub	sp, #12
 800cebc:	af00      	add	r7, sp, #0
	uint8_t byte;
	uint16_t idx=0;
 800cebe:	2300      	movs	r3, #0
 800cec0:	80fb      	strh	r3, [r7, #6]

	while(1){
		byte = FINGER_UART_RX_Buffer[idx];
 800cec2:	88fb      	ldrh	r3, [r7, #6]
 800cec4:	4a36      	ldr	r2, [pc, #216]	; (800cfa0 <FZ3387_getStructuredPacket+0xe8>)
 800cec6:	5cd3      	ldrb	r3, [r2, r3]
 800cec8:	717b      	strb	r3, [r7, #5]

		switch (idx) {
 800ceca:	88fb      	ldrh	r3, [r7, #6]
 800cecc:	2b08      	cmp	r3, #8
 800cece:	d84c      	bhi.n	800cf6a <FZ3387_getStructuredPacket+0xb2>
 800ced0:	a201      	add	r2, pc, #4	; (adr r2, 800ced8 <FZ3387_getStructuredPacket+0x20>)
 800ced2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ced6:	bf00      	nop
 800ced8:	0800cefd 	.word	0x0800cefd
 800cedc:	0800cf15 	.word	0x0800cf15
 800cee0:	0800cf35 	.word	0x0800cf35
 800cee4:	0800cf35 	.word	0x0800cf35
 800cee8:	0800cf35 	.word	0x0800cf35
 800ceec:	0800cf35 	.word	0x0800cf35
 800cef0:	0800cf43 	.word	0x0800cf43
 800cef4:	0800cf4b 	.word	0x0800cf4b
 800cef8:	0800cf59 	.word	0x0800cf59
		case 0:
			if (byte != (FINGERPRINT_STARTCODE >> 8)){
 800cefc:	797b      	ldrb	r3, [r7, #5]
 800cefe:	2bef      	cmp	r3, #239	; 0xef
 800cf00:	d001      	beq.n	800cf06 <FZ3387_getStructuredPacket+0x4e>
				// continue;
				return FINGERPRINT_BADPACKET;
 800cf02:	23fe      	movs	r3, #254	; 0xfe
 800cf04:	e046      	b.n	800cf94 <FZ3387_getStructuredPacket+0xdc>
			}
			packet.start_code = (uint16_t)byte << 8;
 800cf06:	797b      	ldrb	r3, [r7, #5]
 800cf08:	b29b      	uxth	r3, r3
 800cf0a:	021b      	lsls	r3, r3, #8
 800cf0c:	b29a      	uxth	r2, r3
 800cf0e:	4b25      	ldr	r3, [pc, #148]	; (800cfa4 <FZ3387_getStructuredPacket+0xec>)
 800cf10:	801a      	strh	r2, [r3, #0]
			break;
 800cf12:	e03b      	b.n	800cf8c <FZ3387_getStructuredPacket+0xd4>
		case 1:
			packet.start_code |= byte;
 800cf14:	4b23      	ldr	r3, [pc, #140]	; (800cfa4 <FZ3387_getStructuredPacket+0xec>)
 800cf16:	881a      	ldrh	r2, [r3, #0]
 800cf18:	797b      	ldrb	r3, [r7, #5]
 800cf1a:	b29b      	uxth	r3, r3
 800cf1c:	4313      	orrs	r3, r2
 800cf1e:	b29a      	uxth	r2, r3
 800cf20:	4b20      	ldr	r3, [pc, #128]	; (800cfa4 <FZ3387_getStructuredPacket+0xec>)
 800cf22:	801a      	strh	r2, [r3, #0]
			if (packet.start_code != FINGERPRINT_STARTCODE){
 800cf24:	4b1f      	ldr	r3, [pc, #124]	; (800cfa4 <FZ3387_getStructuredPacket+0xec>)
 800cf26:	881b      	ldrh	r3, [r3, #0]
 800cf28:	f64e 7201 	movw	r2, #61185	; 0xef01
 800cf2c:	4293      	cmp	r3, r2
 800cf2e:	d02a      	beq.n	800cf86 <FZ3387_getStructuredPacket+0xce>
				return FINGERPRINT_BADPACKET;
 800cf30:	23fe      	movs	r3, #254	; 0xfe
 800cf32:	e02f      	b.n	800cf94 <FZ3387_getStructuredPacket+0xdc>
			break;
		case 2:
		case 3:
		case 4:
		case 5:
			packet.address[idx-2] = byte;
 800cf34:	88fb      	ldrh	r3, [r7, #6]
 800cf36:	3b02      	subs	r3, #2
 800cf38:	4a1a      	ldr	r2, [pc, #104]	; (800cfa4 <FZ3387_getStructuredPacket+0xec>)
 800cf3a:	4413      	add	r3, r2
 800cf3c:	797a      	ldrb	r2, [r7, #5]
 800cf3e:	709a      	strb	r2, [r3, #2]
			break;
 800cf40:	e024      	b.n	800cf8c <FZ3387_getStructuredPacket+0xd4>
		case 6:
			packet.type = byte;
 800cf42:	4a18      	ldr	r2, [pc, #96]	; (800cfa4 <FZ3387_getStructuredPacket+0xec>)
 800cf44:	797b      	ldrb	r3, [r7, #5]
 800cf46:	7193      	strb	r3, [r2, #6]
			break;
 800cf48:	e020      	b.n	800cf8c <FZ3387_getStructuredPacket+0xd4>
		case 7:
			packet.length = (uint16_t)byte << 8;
 800cf4a:	797b      	ldrb	r3, [r7, #5]
 800cf4c:	b29b      	uxth	r3, r3
 800cf4e:	021b      	lsls	r3, r3, #8
 800cf50:	b29a      	uxth	r2, r3
 800cf52:	4b14      	ldr	r3, [pc, #80]	; (800cfa4 <FZ3387_getStructuredPacket+0xec>)
 800cf54:	811a      	strh	r2, [r3, #8]
			break;
 800cf56:	e019      	b.n	800cf8c <FZ3387_getStructuredPacket+0xd4>
		case 8:
			packet.length |= byte;
 800cf58:	4b12      	ldr	r3, [pc, #72]	; (800cfa4 <FZ3387_getStructuredPacket+0xec>)
 800cf5a:	891a      	ldrh	r2, [r3, #8]
 800cf5c:	797b      	ldrb	r3, [r7, #5]
 800cf5e:	b29b      	uxth	r3, r3
 800cf60:	4313      	orrs	r3, r2
 800cf62:	b29a      	uxth	r2, r3
 800cf64:	4b0f      	ldr	r3, [pc, #60]	; (800cfa4 <FZ3387_getStructuredPacket+0xec>)
 800cf66:	811a      	strh	r2, [r3, #8]
			break;
 800cf68:	e010      	b.n	800cf8c <FZ3387_getStructuredPacket+0xd4>
		default:
			packet.data[idx-9] = byte;
 800cf6a:	88fb      	ldrh	r3, [r7, #6]
 800cf6c:	3b09      	subs	r3, #9
 800cf6e:	4a0d      	ldr	r2, [pc, #52]	; (800cfa4 <FZ3387_getStructuredPacket+0xec>)
 800cf70:	4413      	add	r3, r2
 800cf72:	797a      	ldrb	r2, [r7, #5]
 800cf74:	729a      	strb	r2, [r3, #10]
			if((idx-8) == packet.length){
 800cf76:	88fb      	ldrh	r3, [r7, #6]
 800cf78:	3b08      	subs	r3, #8
 800cf7a:	4a0a      	ldr	r2, [pc, #40]	; (800cfa4 <FZ3387_getStructuredPacket+0xec>)
 800cf7c:	8912      	ldrh	r2, [r2, #8]
 800cf7e:	4293      	cmp	r3, r2
 800cf80:	d103      	bne.n	800cf8a <FZ3387_getStructuredPacket+0xd2>
				return FINGERPRINT_OK;
 800cf82:	2300      	movs	r3, #0
 800cf84:	e006      	b.n	800cf94 <FZ3387_getStructuredPacket+0xdc>
			break;
 800cf86:	bf00      	nop
 800cf88:	e000      	b.n	800cf8c <FZ3387_getStructuredPacket+0xd4>
			}
			break;
 800cf8a:	bf00      	nop
		}
		idx++;
 800cf8c:	88fb      	ldrh	r3, [r7, #6]
 800cf8e:	3301      	adds	r3, #1
 800cf90:	80fb      	strh	r3, [r7, #6]
		byte = FINGER_UART_RX_Buffer[idx];
 800cf92:	e796      	b.n	800cec2 <FZ3387_getStructuredPacket+0xa>
	}

	// Shouldn't get here so...
	return FINGERPRINT_BADPACKET;
}
 800cf94:	4618      	mov	r0, r3
 800cf96:	370c      	adds	r7, #12
 800cf98:	46bd      	mov	sp, r7
 800cf9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf9e:	4770      	bx	lr
 800cfa0:	20006884 	.word	0x20006884
 800cfa4:	2000759c 	.word	0x2000759c

0800cfa8 <MEMS_Init>:
 *  Created on: Aug 23, 2019
 *      Author: Puja
 */
#include <_mems.h>

void MEMS_Init(I2C_HandleTypeDef* i2c, SD_MPU6050* mpu){
 800cfa8:	b580      	push	{r7, lr}
 800cfaa:	b086      	sub	sp, #24
 800cfac:	af02      	add	r7, sp, #8
 800cfae:	6078      	str	r0, [r7, #4]
 800cfb0:	6039      	str	r1, [r7, #0]
	SD_MPU6050_Result result;

	do {
		swvPrintLn("MEMS_Init");
 800cfb2:	4814      	ldr	r0, [pc, #80]	; (800d004 <MEMS_Init+0x5c>)
 800cfb4:	f7fe fcbe 	bl	800b934 <swvPrintLn>

		// turn off module
		HAL_GPIO_WritePin(MEMS_PWR_GPIO_Port, MEMS_PWR_Pin, GPIO_PIN_RESET);
 800cfb8:	2200      	movs	r2, #0
 800cfba:	2140      	movs	r1, #64	; 0x40
 800cfbc:	4812      	ldr	r0, [pc, #72]	; (800d008 <MEMS_Init+0x60>)
 800cfbe:	f7f5 fa9f 	bl	8002500 <HAL_GPIO_WritePin>
		osDelay(50);
 800cfc2:	2032      	movs	r0, #50	; 0x32
 800cfc4:	f7fa fae1 	bl	800758a <osDelay>
		// turn on module
		HAL_GPIO_WritePin(MEMS_PWR_GPIO_Port, MEMS_PWR_Pin, GPIO_PIN_SET);
 800cfc8:	2201      	movs	r2, #1
 800cfca:	2140      	movs	r1, #64	; 0x40
 800cfcc:	480e      	ldr	r0, [pc, #56]	; (800d008 <MEMS_Init+0x60>)
 800cfce:	f7f5 fa97 	bl	8002500 <HAL_GPIO_WritePin>
		osDelay(50);
 800cfd2:	2032      	movs	r0, #50	; 0x32
 800cfd4:	f7fa fad9 	bl	800758a <osDelay>
		// module initialization
		result = SD_MPU6050_Init(i2c, mpu,
 800cfd8:	2300      	movs	r3, #0
 800cfda:	9300      	str	r3, [sp, #0]
 800cfdc:	2303      	movs	r3, #3
 800cfde:	2200      	movs	r2, #0
 800cfe0:	6839      	ldr	r1, [r7, #0]
 800cfe2:	6878      	ldr	r0, [r7, #4]
 800cfe4:	f000 f934 	bl	800d250 <SD_MPU6050_Init>
 800cfe8:	4603      	mov	r3, r0
 800cfea:	73fb      	strb	r3, [r7, #15]
				SD_MPU6050_Device_0, SD_MPU6050_Accelerometer_16G, SD_MPU6050_Gyroscope_250s
		);
		osDelay(1000);
 800cfec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800cff0:	f7fa facb 	bl	800758a <osDelay>
	} while(result != SD_MPU6050_Result_Ok);
 800cff4:	7bfb      	ldrb	r3, [r7, #15]
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d1db      	bne.n	800cfb2 <MEMS_Init+0xa>
}
 800cffa:	bf00      	nop
 800cffc:	3710      	adds	r7, #16
 800cffe:	46bd      	mov	sp, r7
 800d000:	bd80      	pop	{r7, pc}
 800d002:	bf00      	nop
 800d004:	08015f84 	.word	0x08015f84
 800d008:	40020800 	.word	0x40020800

0800d00c <MEMS_Average>:

mems_t MEMS_Average(I2C_HandleTypeDef* i2c, SD_MPU6050* mpu, mems_t* calibrator, uint16_t sample) {
 800d00c:	b5b0      	push	{r4, r5, r7, lr}
 800d00e:	b08c      	sub	sp, #48	; 0x30
 800d010:	af00      	add	r7, sp, #0
 800d012:	60f8      	str	r0, [r7, #12]
 800d014:	60b9      	str	r1, [r7, #8]
 800d016:	607a      	str	r2, [r7, #4]
 800d018:	603b      	str	r3, [r7, #0]
	uint16_t i;
	mems_t mems;
	// reset value
	mems.accelerometer.x = 0;
 800d01a:	2300      	movs	r3, #0
 800d01c:	617b      	str	r3, [r7, #20]
	mems.accelerometer.y = 0;
 800d01e:	2300      	movs	r3, #0
 800d020:	61bb      	str	r3, [r7, #24]
	mems.accelerometer.z = 0;
 800d022:	2300      	movs	r3, #0
 800d024:	61fb      	str	r3, [r7, #28]
	mems.gyroscope.x = 0;
 800d026:	2300      	movs	r3, #0
 800d028:	623b      	str	r3, [r7, #32]
	mems.gyroscope.y = 0;
 800d02a:	2300      	movs	r3, #0
 800d02c:	627b      	str	r3, [r7, #36]	; 0x24
	mems.gyroscope.z = 0;
 800d02e:	2300      	movs	r3, #0
 800d030:	62bb      	str	r3, [r7, #40]	; 0x28
	// sampling
	for(i=0; i<sample; i++){
 800d032:	2300      	movs	r3, #0
 800d034:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800d036:	e02a      	b.n	800d08e <MEMS_Average+0x82>
		// read sensor
		SD_MPU6050_ReadAll(i2c, mpu);
 800d038:	6879      	ldr	r1, [r7, #4]
 800d03a:	68b8      	ldr	r0, [r7, #8]
 800d03c:	f000 fa86 	bl	800d54c <SD_MPU6050_ReadAll>
		// sum all value
		mems.accelerometer.x += mpu->Gyroscope_X;
 800d040:	697b      	ldr	r3, [r7, #20]
 800d042:	687a      	ldr	r2, [r7, #4]
 800d044:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 800d048:	4413      	add	r3, r2
 800d04a:	617b      	str	r3, [r7, #20]
		mems.accelerometer.y += mpu->Gyroscope_Y;
 800d04c:	69bb      	ldr	r3, [r7, #24]
 800d04e:	687a      	ldr	r2, [r7, #4]
 800d050:	f9b2 2014 	ldrsh.w	r2, [r2, #20]
 800d054:	4413      	add	r3, r2
 800d056:	61bb      	str	r3, [r7, #24]
		mems.accelerometer.z += mpu->Gyroscope_Z;
 800d058:	69fb      	ldr	r3, [r7, #28]
 800d05a:	687a      	ldr	r2, [r7, #4]
 800d05c:	f9b2 2016 	ldrsh.w	r2, [r2, #22]
 800d060:	4413      	add	r3, r2
 800d062:	61fb      	str	r3, [r7, #28]
		mems.gyroscope.x += mpu->Accelerometer_X;
 800d064:	6a3b      	ldr	r3, [r7, #32]
 800d066:	687a      	ldr	r2, [r7, #4]
 800d068:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 800d06c:	4413      	add	r3, r2
 800d06e:	623b      	str	r3, [r7, #32]
		mems.gyroscope.y += mpu->Accelerometer_Y;
 800d070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d072:	687a      	ldr	r2, [r7, #4]
 800d074:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 800d078:	4413      	add	r3, r2
 800d07a:	627b      	str	r3, [r7, #36]	; 0x24
		mems.gyroscope.z += mpu->Accelerometer_Z;
 800d07c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d07e:	687a      	ldr	r2, [r7, #4]
 800d080:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 800d084:	4413      	add	r3, r2
 800d086:	62bb      	str	r3, [r7, #40]	; 0x28
	for(i=0; i<sample; i++){
 800d088:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d08a:	3301      	adds	r3, #1
 800d08c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800d08e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d090:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800d094:	429a      	cmp	r2, r3
 800d096:	d3cf      	bcc.n	800d038 <MEMS_Average+0x2c>
	}
	// calculate the average
	mems.accelerometer.x = mems.accelerometer.x / sample;
 800d098:	697a      	ldr	r2, [r7, #20]
 800d09a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800d09e:	fb92 f3f3 	sdiv	r3, r2, r3
 800d0a2:	617b      	str	r3, [r7, #20]
	mems.accelerometer.y = mems.accelerometer.y / sample;
 800d0a4:	69ba      	ldr	r2, [r7, #24]
 800d0a6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800d0aa:	fb92 f3f3 	sdiv	r3, r2, r3
 800d0ae:	61bb      	str	r3, [r7, #24]
	mems.accelerometer.z = mems.accelerometer.z / sample;
 800d0b0:	69fa      	ldr	r2, [r7, #28]
 800d0b2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800d0b6:	fb92 f3f3 	sdiv	r3, r2, r3
 800d0ba:	61fb      	str	r3, [r7, #28]
	mems.gyroscope.x = mems.gyroscope.x / sample;
 800d0bc:	6a3a      	ldr	r2, [r7, #32]
 800d0be:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800d0c2:	fb92 f3f3 	sdiv	r3, r2, r3
 800d0c6:	623b      	str	r3, [r7, #32]
	mems.gyroscope.y = mems.gyroscope.y / sample;
 800d0c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d0ca:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800d0ce:	fb92 f3f3 	sdiv	r3, r2, r3
 800d0d2:	627b      	str	r3, [r7, #36]	; 0x24
	mems.gyroscope.z = mems.gyroscope.z / sample;
 800d0d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d0d6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800d0da:	fb92 f3f3 	sdiv	r3, r2, r3
 800d0de:	62bb      	str	r3, [r7, #40]	; 0x28
	// set for calibration
	if(calibrator != NULL){
 800d0e0:	683b      	ldr	r3, [r7, #0]
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d01d      	beq.n	800d122 <MEMS_Average+0x116>
		mems.accelerometer.x -= calibrator->accelerometer.x;
 800d0e6:	697a      	ldr	r2, [r7, #20]
 800d0e8:	683b      	ldr	r3, [r7, #0]
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	1ad3      	subs	r3, r2, r3
 800d0ee:	617b      	str	r3, [r7, #20]
		mems.accelerometer.y -= calibrator->accelerometer.y;
 800d0f0:	69ba      	ldr	r2, [r7, #24]
 800d0f2:	683b      	ldr	r3, [r7, #0]
 800d0f4:	685b      	ldr	r3, [r3, #4]
 800d0f6:	1ad3      	subs	r3, r2, r3
 800d0f8:	61bb      	str	r3, [r7, #24]
		mems.accelerometer.z -= calibrator->accelerometer.z;
 800d0fa:	69fa      	ldr	r2, [r7, #28]
 800d0fc:	683b      	ldr	r3, [r7, #0]
 800d0fe:	689b      	ldr	r3, [r3, #8]
 800d100:	1ad3      	subs	r3, r2, r3
 800d102:	61fb      	str	r3, [r7, #28]
		mems.gyroscope.x -= calibrator->gyroscope.x;
 800d104:	6a3a      	ldr	r2, [r7, #32]
 800d106:	683b      	ldr	r3, [r7, #0]
 800d108:	68db      	ldr	r3, [r3, #12]
 800d10a:	1ad3      	subs	r3, r2, r3
 800d10c:	623b      	str	r3, [r7, #32]
		mems.gyroscope.y -= calibrator->gyroscope.y;
 800d10e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d110:	683b      	ldr	r3, [r7, #0]
 800d112:	691b      	ldr	r3, [r3, #16]
 800d114:	1ad3      	subs	r3, r2, r3
 800d116:	627b      	str	r3, [r7, #36]	; 0x24
		mems.gyroscope.z -= calibrator->gyroscope.z;
 800d118:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d11a:	683b      	ldr	r3, [r7, #0]
 800d11c:	695b      	ldr	r3, [r3, #20]
 800d11e:	1ad3      	subs	r3, r2, r3
 800d120:	62bb      	str	r3, [r7, #40]	; 0x28
	}

	return mems;
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	461d      	mov	r5, r3
 800d126:	f107 0414 	add.w	r4, r7, #20
 800d12a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d12c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d12e:	e894 0003 	ldmia.w	r4, {r0, r1}
 800d132:	e885 0003 	stmia.w	r5, {r0, r1}
}
 800d136:	68f8      	ldr	r0, [r7, #12]
 800d138:	3730      	adds	r7, #48	; 0x30
 800d13a:	46bd      	mov	sp, r7
 800d13c:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800d140 <MEMS_Decision>:

mems_decision_t MEMS_Decision(I2C_HandleTypeDef* i2c, SD_MPU6050* mpu, mems_t* calibrator, uint16_t sample){
 800d140:	b5b0      	push	{r4, r5, r7, lr}
 800d142:	b092      	sub	sp, #72	; 0x48
 800d144:	af02      	add	r7, sp, #8
 800d146:	60f8      	str	r0, [r7, #12]
 800d148:	60b9      	str	r1, [r7, #8]
 800d14a:	607a      	str	r2, [r7, #4]
 800d14c:	807b      	strh	r3, [r7, #2]
	int32_t g_force, accel_limit=46000, gyro_limit=10000;
 800d14e:	f24b 33b0 	movw	r3, #46000	; 0xb3b0
 800d152:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d154:	f242 7310 	movw	r3, #10000	; 0x2710
 800d158:	63bb      	str	r3, [r7, #56]	; 0x38
	mems_decision_t mems_decision;
	mems_t mems;
	//	char str[200];

	// get mems data
	mems = MEMS_Average(i2c, mpu, calibrator, sample);
 800d15a:	f107 0014 	add.w	r0, r7, #20
 800d15e:	887b      	ldrh	r3, [r7, #2]
 800d160:	9300      	str	r3, [sp, #0]
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	68ba      	ldr	r2, [r7, #8]
 800d166:	68f9      	ldr	r1, [r7, #12]
 800d168:	f7ff ff50 	bl	800d00c <MEMS_Average>
	// calculate g-force
	g_force = sqrt(pow(mems.accelerometer.x, 2) + pow(mems.accelerometer.y, 2) + pow(mems.accelerometer.z, 2) );
 800d16c:	697b      	ldr	r3, [r7, #20]
 800d16e:	4618      	mov	r0, r3
 800d170:	f7f3 f9e8 	bl	8000544 <__aeabi_i2d>
 800d174:	4603      	mov	r3, r0
 800d176:	460c      	mov	r4, r1
 800d178:	ed9f 1b33 	vldr	d1, [pc, #204]	; 800d248 <MEMS_Decision+0x108>
 800d17c:	ec44 3b10 	vmov	d0, r3, r4
 800d180:	f007 fcec 	bl	8014b5c <pow>
 800d184:	ec55 4b10 	vmov	r4, r5, d0
 800d188:	69bb      	ldr	r3, [r7, #24]
 800d18a:	4618      	mov	r0, r3
 800d18c:	f7f3 f9da 	bl	8000544 <__aeabi_i2d>
 800d190:	4602      	mov	r2, r0
 800d192:	460b      	mov	r3, r1
 800d194:	ed9f 1b2c 	vldr	d1, [pc, #176]	; 800d248 <MEMS_Decision+0x108>
 800d198:	ec43 2b10 	vmov	d0, r2, r3
 800d19c:	f007 fcde 	bl	8014b5c <pow>
 800d1a0:	ec53 2b10 	vmov	r2, r3, d0
 800d1a4:	4620      	mov	r0, r4
 800d1a6:	4629      	mov	r1, r5
 800d1a8:	f7f3 f880 	bl	80002ac <__adddf3>
 800d1ac:	4603      	mov	r3, r0
 800d1ae:	460c      	mov	r4, r1
 800d1b0:	4625      	mov	r5, r4
 800d1b2:	461c      	mov	r4, r3
 800d1b4:	69fb      	ldr	r3, [r7, #28]
 800d1b6:	4618      	mov	r0, r3
 800d1b8:	f7f3 f9c4 	bl	8000544 <__aeabi_i2d>
 800d1bc:	4602      	mov	r2, r0
 800d1be:	460b      	mov	r3, r1
 800d1c0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800d248 <MEMS_Decision+0x108>
 800d1c4:	ec43 2b10 	vmov	d0, r2, r3
 800d1c8:	f007 fcc8 	bl	8014b5c <pow>
 800d1cc:	ec53 2b10 	vmov	r2, r3, d0
 800d1d0:	4620      	mov	r0, r4
 800d1d2:	4629      	mov	r1, r5
 800d1d4:	f7f3 f86a 	bl	80002ac <__adddf3>
 800d1d8:	4603      	mov	r3, r0
 800d1da:	460c      	mov	r4, r1
 800d1dc:	ec44 3b17 	vmov	d7, r3, r4
 800d1e0:	eeb0 0a47 	vmov.f32	s0, s14
 800d1e4:	eef0 0a67 	vmov.f32	s1, s15
 800d1e8:	f007 fe28 	bl	8014e3c <sqrt>
 800d1ec:	ec54 3b10 	vmov	r3, r4, d0
 800d1f0:	4618      	mov	r0, r3
 800d1f2:	4621      	mov	r1, r4
 800d1f4:	f7f3 fcc0 	bl	8000b78 <__aeabi_d2iz>
 800d1f8:	4603      	mov	r3, r0
 800d1fa:	637b      	str	r3, [r7, #52]	; 0x34
	mems_decision.crash = (g_force > accel_limit);
 800d1fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d1fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d200:	429a      	cmp	r2, r3
 800d202:	bfcc      	ite	gt
 800d204:	2301      	movgt	r3, #1
 800d206:	2300      	movle	r3, #0
 800d208:	b2db      	uxtb	r3, r3
 800d20a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	// calculate movement change
	mems_decision.fall = (abs(mems.gyroscope.z) > gyro_limit);
 800d20e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d210:	2b00      	cmp	r3, #0
 800d212:	bfb8      	it	lt
 800d214:	425b      	neglt	r3, r3
 800d216:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d218:	429a      	cmp	r2, r3
 800d21a:	bfb4      	ite	lt
 800d21c:	2301      	movlt	r3, #1
 800d21e:	2300      	movge	r3, #0
 800d220:	b2db      	uxtb	r3, r3
 800d222:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	//			mems.accelerometer.x, mems.accelerometer.y, mems.accelerometer.z,
	//			mems.gyroscope.x, mems.gyroscope.y, mems.gyroscope.z
	//	);
	//	swvPrint(str);

	return mems_decision;
 800d226:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d228:	863b      	strh	r3, [r7, #48]	; 0x30
 800d22a:	2300      	movs	r3, #0
 800d22c:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800d230:	f362 0307 	bfi	r3, r2, #0, #8
 800d234:	f897 2031 	ldrb.w	r2, [r7, #49]	; 0x31
 800d238:	f362 230f 	bfi	r3, r2, #8, #8
}
 800d23c:	4618      	mov	r0, r3
 800d23e:	3740      	adds	r7, #64	; 0x40
 800d240:	46bd      	mov	sp, r7
 800d242:	bdb0      	pop	{r4, r5, r7, pc}
 800d244:	f3af 8000 	nop.w
 800d248:	00000000 	.word	0x00000000
 800d24c:	40000000 	.word	0x40000000

0800d250 <SD_MPU6050_Init>:
#define MPU6050_ACCE_SENS_4			((float) 8192)
#define MPU6050_ACCE_SENS_8			((float) 4096)
#define MPU6050_ACCE_SENS_16		((float) 2048)

SD_MPU6050_Result SD_MPU6050_Init(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct, SD_MPU6050_Device DeviceNumber, SD_MPU6050_Accelerometer AccelerometerSensitivity, SD_MPU6050_Gyroscope GyroscopeSensitivity)
{
 800d250:	b580      	push	{r7, lr}
 800d252:	b08a      	sub	sp, #40	; 0x28
 800d254:	af02      	add	r7, sp, #8
 800d256:	60f8      	str	r0, [r7, #12]
 800d258:	60b9      	str	r1, [r7, #8]
 800d25a:	4611      	mov	r1, r2
 800d25c:	461a      	mov	r2, r3
 800d25e:	460b      	mov	r3, r1
 800d260:	71fb      	strb	r3, [r7, #7]
 800d262:	4613      	mov	r3, r2
 800d264:	71bb      	strb	r3, [r7, #6]
	uint8_t WHO_AM_I = (uint8_t)MPU6050_WHO_AM_I;
 800d266:	2375      	movs	r3, #117	; 0x75
 800d268:	76bb      	strb	r3, [r7, #26]
	uint8_t temp;
	I2C_HandleTypeDef* Handle = I2Cx;
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	61fb      	str	r3, [r7, #28]
	uint8_t d[2];


	/* Format I2C address */
	DataStruct->Address = MPU6050_I2C_ADDR | (uint8_t)DeviceNumber;
 800d26e:	79fb      	ldrb	r3, [r7, #7]
 800d270:	f063 032f 	orn	r3, r3, #47	; 0x2f
 800d274:	b2da      	uxtb	r2, r3
 800d276:	68bb      	ldr	r3, [r7, #8]
 800d278:	701a      	strb	r2, [r3, #0]
	uint8_t address = DataStruct->Address;
 800d27a:	68bb      	ldr	r3, [r7, #8]
 800d27c:	781b      	ldrb	r3, [r3, #0]
 800d27e:	76fb      	strb	r3, [r7, #27]

	/* Check if device is connected */
	if(HAL_I2C_IsDeviceReady(Handle,address,2,5)!=HAL_OK)
 800d280:	7efb      	ldrb	r3, [r7, #27]
 800d282:	b299      	uxth	r1, r3
 800d284:	2305      	movs	r3, #5
 800d286:	2202      	movs	r2, #2
 800d288:	69f8      	ldr	r0, [r7, #28]
 800d28a:	f7f6 f921 	bl	80034d0 <HAL_I2C_IsDeviceReady>
 800d28e:	4603      	mov	r3, r0
 800d290:	2b00      	cmp	r3, #0
 800d292:	d001      	beq.n	800d298 <SD_MPU6050_Init+0x48>
	{
				return SD_MPU6050_Result_Error;
 800d294:	2301      	movs	r3, #1
 800d296:	e04c      	b.n	800d332 <SD_MPU6050_Init+0xe2>
	}
	/* Check who am I */
	//------------------
		/* Send address */
		if(HAL_I2C_Master_Transmit(Handle, address, &WHO_AM_I, 1, 1000) != HAL_OK)
 800d298:	7efb      	ldrb	r3, [r7, #27]
 800d29a:	b299      	uxth	r1, r3
 800d29c:	f107 021a 	add.w	r2, r7, #26
 800d2a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d2a4:	9300      	str	r3, [sp, #0]
 800d2a6:	2301      	movs	r3, #1
 800d2a8:	69f8      	ldr	r0, [r7, #28]
 800d2aa:	f7f5 facd 	bl	8002848 <HAL_I2C_Master_Transmit>
 800d2ae:	4603      	mov	r3, r0
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d001      	beq.n	800d2b8 <SD_MPU6050_Init+0x68>
		{
			return SD_MPU6050_Result_Error;
 800d2b4:	2301      	movs	r3, #1
 800d2b6:	e03c      	b.n	800d332 <SD_MPU6050_Init+0xe2>
		}

		/* Receive multiple byte */
		if(HAL_I2C_Master_Receive(Handle, address, &temp, 1, 1000) != HAL_OK)
 800d2b8:	7efb      	ldrb	r3, [r7, #27]
 800d2ba:	b299      	uxth	r1, r3
 800d2bc:	f107 0219 	add.w	r2, r7, #25
 800d2c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d2c4:	9300      	str	r3, [sp, #0]
 800d2c6:	2301      	movs	r3, #1
 800d2c8:	69f8      	ldr	r0, [r7, #28]
 800d2ca:	f7f5 fbbb 	bl	8002a44 <HAL_I2C_Master_Receive>
 800d2ce:	4603      	mov	r3, r0
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d003      	beq.n	800d2dc <SD_MPU6050_Init+0x8c>
		{
			return SD_MPU6050_Result_Error;
 800d2d4:	2301      	movs	r3, #1
 800d2d6:	e02c      	b.n	800d332 <SD_MPU6050_Init+0xe2>

		/* Checking */
		while(temp != MPU6050_I_AM)
		{
				/* Return error */
				return SD_MPU6050_Result_DeviceInvalid;
 800d2d8:	2303      	movs	r3, #3
 800d2da:	e02a      	b.n	800d332 <SD_MPU6050_Init+0xe2>
		while(temp != MPU6050_I_AM)
 800d2dc:	bf00      	nop
 800d2de:	7e7b      	ldrb	r3, [r7, #25]
 800d2e0:	2b72      	cmp	r3, #114	; 0x72
 800d2e2:	d1f9      	bne.n	800d2d8 <SD_MPU6050_Init+0x88>
	//------------------

	/* Wakeup MPU6050 */
	//------------------
		/* Format array to send */
		d[0] = MPU6050_PWR_MGMT_1;
 800d2e4:	236b      	movs	r3, #107	; 0x6b
 800d2e6:	753b      	strb	r3, [r7, #20]
		d[1] = 0x00;
 800d2e8:	2300      	movs	r3, #0
 800d2ea:	757b      	strb	r3, [r7, #21]

		/* Try to transmit via I2C */
		if(HAL_I2C_Master_Transmit(Handle,(uint16_t)address , (uint8_t *)d, 2, 1000) != HAL_OK)
 800d2ec:	7efb      	ldrb	r3, [r7, #27]
 800d2ee:	b299      	uxth	r1, r3
 800d2f0:	f107 0214 	add.w	r2, r7, #20
 800d2f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d2f8:	9300      	str	r3, [sp, #0]
 800d2fa:	2302      	movs	r3, #2
 800d2fc:	69f8      	ldr	r0, [r7, #28]
 800d2fe:	f7f5 faa3 	bl	8002848 <HAL_I2C_Master_Transmit>
 800d302:	4603      	mov	r3, r0
 800d304:	2b00      	cmp	r3, #0
 800d306:	d001      	beq.n	800d30c <SD_MPU6050_Init+0xbc>
		{
					return SD_MPU6050_Result_Error;
 800d308:	2301      	movs	r3, #1
 800d30a:	e012      	b.n	800d332 <SD_MPU6050_Init+0xe2>
		}
	//------------------

	/* Set sample rate to 1kHz */
	SD_MPU6050_SetDataRate(I2Cx,DataStruct, SD_MPU6050_DataRate_8KHz);
 800d30c:	2200      	movs	r2, #0
 800d30e:	68b9      	ldr	r1, [r7, #8]
 800d310:	68f8      	ldr	r0, [r7, #12]
 800d312:	f000 f812 	bl	800d33a <SD_MPU6050_SetDataRate>

	/* Config accelerometer */
	SD_MPU6050_SetAccelerometer(I2Cx,DataStruct, AccelerometerSensitivity);
 800d316:	79bb      	ldrb	r3, [r7, #6]
 800d318:	461a      	mov	r2, r3
 800d31a:	68b9      	ldr	r1, [r7, #8]
 800d31c:	68f8      	ldr	r0, [r7, #12]
 800d31e:	f000 f831 	bl	800d384 <SD_MPU6050_SetAccelerometer>

	/* Config Gyroscope */
	SD_MPU6050_SetGyroscope(I2Cx,DataStruct, GyroscopeSensitivity);
 800d322:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d326:	461a      	mov	r2, r3
 800d328:	68b9      	ldr	r1, [r7, #8]
 800d32a:	68f8      	ldr	r0, [r7, #12]
 800d32c:	f000 f89a 	bl	800d464 <SD_MPU6050_SetGyroscope>

	/* Return OK */
	return SD_MPU6050_Result_Ok;
 800d330:	2300      	movs	r3, #0
}
 800d332:	4618      	mov	r0, r3
 800d334:	3720      	adds	r7, #32
 800d336:	46bd      	mov	sp, r7
 800d338:	bd80      	pop	{r7, pc}

0800d33a <SD_MPU6050_SetDataRate>:

SD_MPU6050_Result SD_MPU6050_SetDataRate(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct, uint8_t rate)
{
 800d33a:	b580      	push	{r7, lr}
 800d33c:	b088      	sub	sp, #32
 800d33e:	af02      	add	r7, sp, #8
 800d340:	60f8      	str	r0, [r7, #12]
 800d342:	60b9      	str	r1, [r7, #8]
 800d344:	4613      	mov	r3, r2
 800d346:	71fb      	strb	r3, [r7, #7]
	uint8_t d[2];
	I2C_HandleTypeDef* Handle = I2Cx;
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	617b      	str	r3, [r7, #20]
	uint8_t address = DataStruct->Address;
 800d34c:	68bb      	ldr	r3, [r7, #8]
 800d34e:	781b      	ldrb	r3, [r3, #0]
 800d350:	74fb      	strb	r3, [r7, #19]
	/* Format array to send */
	d[0] = MPU6050_SMPLRT_DIV;
 800d352:	2319      	movs	r3, #25
 800d354:	743b      	strb	r3, [r7, #16]
	d[1] = rate;
 800d356:	79fb      	ldrb	r3, [r7, #7]
 800d358:	747b      	strb	r3, [r7, #17]

	/* Set data sample rate */
	while(HAL_I2C_Master_Transmit(Handle,(uint16_t)address,(uint8_t *)d,2,1000)!=HAL_OK);
 800d35a:	bf00      	nop
 800d35c:	7cfb      	ldrb	r3, [r7, #19]
 800d35e:	b299      	uxth	r1, r3
 800d360:	f107 0210 	add.w	r2, r7, #16
 800d364:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d368:	9300      	str	r3, [sp, #0]
 800d36a:	2302      	movs	r3, #2
 800d36c:	6978      	ldr	r0, [r7, #20]
 800d36e:	f7f5 fa6b 	bl	8002848 <HAL_I2C_Master_Transmit>
 800d372:	4603      	mov	r3, r0
 800d374:	2b00      	cmp	r3, #0
 800d376:	d1f1      	bne.n	800d35c <SD_MPU6050_SetDataRate+0x22>
	/*{
				return SD_MPU6050_Result_Error;
	}*/

	/* Return OK */
	return SD_MPU6050_Result_Ok;
 800d378:	2300      	movs	r3, #0
}
 800d37a:	4618      	mov	r0, r3
 800d37c:	3718      	adds	r7, #24
 800d37e:	46bd      	mov	sp, r7
 800d380:	bd80      	pop	{r7, pc}
	...

0800d384 <SD_MPU6050_SetAccelerometer>:

SD_MPU6050_Result SD_MPU6050_SetAccelerometer(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct, SD_MPU6050_Accelerometer AccelerometerSensitivity)
{
 800d384:	b580      	push	{r7, lr}
 800d386:	b088      	sub	sp, #32
 800d388:	af02      	add	r7, sp, #8
 800d38a:	60f8      	str	r0, [r7, #12]
 800d38c:	60b9      	str	r1, [r7, #8]
 800d38e:	4613      	mov	r3, r2
 800d390:	71fb      	strb	r3, [r7, #7]
	uint8_t temp;
	I2C_HandleTypeDef* Handle = I2Cx;
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	617b      	str	r3, [r7, #20]
	uint8_t address = DataStruct->Address;
 800d396:	68bb      	ldr	r3, [r7, #8]
 800d398:	781b      	ldrb	r3, [r3, #0]
 800d39a:	74fb      	strb	r3, [r7, #19]
	uint8_t regAdd =(uint8_t )MPU6050_ACCEL_CONFIG;
 800d39c:	231c      	movs	r3, #28
 800d39e:	747b      	strb	r3, [r7, #17]

	/* Config accelerometer */
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&regAdd, 1, 1000) != HAL_OK);
 800d3a0:	bf00      	nop
 800d3a2:	7cfb      	ldrb	r3, [r7, #19]
 800d3a4:	b299      	uxth	r1, r3
 800d3a6:	f107 0211 	add.w	r2, r7, #17
 800d3aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d3ae:	9300      	str	r3, [sp, #0]
 800d3b0:	2301      	movs	r3, #1
 800d3b2:	6978      	ldr	r0, [r7, #20]
 800d3b4:	f7f5 fa48 	bl	8002848 <HAL_I2C_Master_Transmit>
 800d3b8:	4603      	mov	r3, r0
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d1f1      	bne.n	800d3a2 <SD_MPU6050_SetAccelerometer+0x1e>
	/*{
				return SD_MPU6050_Result_Error;
	}*/
	while(HAL_I2C_Master_Receive(Handle, (uint16_t)address, &temp, 1, 1000) != HAL_OK);
 800d3be:	bf00      	nop
 800d3c0:	7cfb      	ldrb	r3, [r7, #19]
 800d3c2:	b299      	uxth	r1, r3
 800d3c4:	f107 0212 	add.w	r2, r7, #18
 800d3c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d3cc:	9300      	str	r3, [sp, #0]
 800d3ce:	2301      	movs	r3, #1
 800d3d0:	6978      	ldr	r0, [r7, #20]
 800d3d2:	f7f5 fb37 	bl	8002a44 <HAL_I2C_Master_Receive>
 800d3d6:	4603      	mov	r3, r0
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d1f1      	bne.n	800d3c0 <SD_MPU6050_SetAccelerometer+0x3c>
	/*{
				return SD_MPU6050_Result_Error;
	}*/
	temp = (temp & 0xE7) | (uint8_t)AccelerometerSensitivity << 3;
 800d3dc:	7cbb      	ldrb	r3, [r7, #18]
 800d3de:	b25b      	sxtb	r3, r3
 800d3e0:	f023 0318 	bic.w	r3, r3, #24
 800d3e4:	b25a      	sxtb	r2, r3
 800d3e6:	79fb      	ldrb	r3, [r7, #7]
 800d3e8:	00db      	lsls	r3, r3, #3
 800d3ea:	b25b      	sxtb	r3, r3
 800d3ec:	4313      	orrs	r3, r2
 800d3ee:	b25b      	sxtb	r3, r3
 800d3f0:	b2db      	uxtb	r3, r3
 800d3f2:	74bb      	strb	r3, [r7, #18]
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&temp, 1, 1000) != HAL_OK);
 800d3f4:	bf00      	nop
 800d3f6:	7cfb      	ldrb	r3, [r7, #19]
 800d3f8:	b299      	uxth	r1, r3
 800d3fa:	f107 0212 	add.w	r2, r7, #18
 800d3fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d402:	9300      	str	r3, [sp, #0]
 800d404:	2301      	movs	r3, #1
 800d406:	6978      	ldr	r0, [r7, #20]
 800d408:	f7f5 fa1e 	bl	8002848 <HAL_I2C_Master_Transmit>
 800d40c:	4603      	mov	r3, r0
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d1f1      	bne.n	800d3f6 <SD_MPU6050_SetAccelerometer+0x72>
	/*{
				return SD_MPU6050_Result_Error;
	}*/

	/* Set sensitivities for multiplying gyro and accelerometer data */
	switch (AccelerometerSensitivity) {
 800d412:	79fb      	ldrb	r3, [r7, #7]
 800d414:	2b03      	cmp	r3, #3
 800d416:	d81f      	bhi.n	800d458 <SD_MPU6050_SetAccelerometer+0xd4>
 800d418:	a201      	add	r2, pc, #4	; (adr r2, 800d420 <SD_MPU6050_SetAccelerometer+0x9c>)
 800d41a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d41e:	bf00      	nop
 800d420:	0800d431 	.word	0x0800d431
 800d424:	0800d43b 	.word	0x0800d43b
 800d428:	0800d445 	.word	0x0800d445
 800d42c:	0800d44f 	.word	0x0800d44f
		case SD_MPU6050_Accelerometer_2G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_2;
 800d430:	68bb      	ldr	r3, [r7, #8]
 800d432:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 800d436:	609a      	str	r2, [r3, #8]
			break;
 800d438:	e00f      	b.n	800d45a <SD_MPU6050_SetAccelerometer+0xd6>
		case SD_MPU6050_Accelerometer_4G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_4;
 800d43a:	68bb      	ldr	r3, [r7, #8]
 800d43c:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 800d440:	609a      	str	r2, [r3, #8]
			break;
 800d442:	e00a      	b.n	800d45a <SD_MPU6050_SetAccelerometer+0xd6>
		case SD_MPU6050_Accelerometer_8G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_8;
 800d444:	68bb      	ldr	r3, [r7, #8]
 800d446:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 800d44a:	609a      	str	r2, [r3, #8]
			break;
 800d44c:	e005      	b.n	800d45a <SD_MPU6050_SetAccelerometer+0xd6>
		case SD_MPU6050_Accelerometer_16G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_16;
 800d44e:	68bb      	ldr	r3, [r7, #8]
 800d450:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 800d454:	609a      	str	r2, [r3, #8]
			break;
 800d456:	e000      	b.n	800d45a <SD_MPU6050_SetAccelerometer+0xd6>
		default:
			break;
 800d458:	bf00      	nop
		}

	/* Return OK */
	return SD_MPU6050_Result_Ok;
 800d45a:	2300      	movs	r3, #0
}
 800d45c:	4618      	mov	r0, r3
 800d45e:	3718      	adds	r7, #24
 800d460:	46bd      	mov	sp, r7
 800d462:	bd80      	pop	{r7, pc}

0800d464 <SD_MPU6050_SetGyroscope>:

SD_MPU6050_Result SD_MPU6050_SetGyroscope(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct, SD_MPU6050_Gyroscope GyroscopeSensitivity)
{
 800d464:	b580      	push	{r7, lr}
 800d466:	b088      	sub	sp, #32
 800d468:	af02      	add	r7, sp, #8
 800d46a:	60f8      	str	r0, [r7, #12]
 800d46c:	60b9      	str	r1, [r7, #8]
 800d46e:	4613      	mov	r3, r2
 800d470:	71fb      	strb	r3, [r7, #7]
	uint8_t temp;
	I2C_HandleTypeDef* Handle = I2Cx;
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	617b      	str	r3, [r7, #20]
	uint8_t address = DataStruct->Address;
 800d476:	68bb      	ldr	r3, [r7, #8]
 800d478:	781b      	ldrb	r3, [r3, #0]
 800d47a:	74fb      	strb	r3, [r7, #19]
	uint8_t regAdd =(uint8_t )MPU6050_GYRO_CONFIG;
 800d47c:	231b      	movs	r3, #27
 800d47e:	747b      	strb	r3, [r7, #17]

	/* Config gyroscope */
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&regAdd, 1, 1000) != HAL_OK);
 800d480:	bf00      	nop
 800d482:	7cfb      	ldrb	r3, [r7, #19]
 800d484:	b299      	uxth	r1, r3
 800d486:	f107 0211 	add.w	r2, r7, #17
 800d48a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d48e:	9300      	str	r3, [sp, #0]
 800d490:	2301      	movs	r3, #1
 800d492:	6978      	ldr	r0, [r7, #20]
 800d494:	f7f5 f9d8 	bl	8002848 <HAL_I2C_Master_Transmit>
 800d498:	4603      	mov	r3, r0
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d1f1      	bne.n	800d482 <SD_MPU6050_SetGyroscope+0x1e>
	/*{
				return SD_MPU6050_Result_Error;
	}*/
	while(HAL_I2C_Master_Receive(Handle, (uint16_t)address, &temp, 1, 1000) != HAL_OK);
 800d49e:	bf00      	nop
 800d4a0:	7cfb      	ldrb	r3, [r7, #19]
 800d4a2:	b299      	uxth	r1, r3
 800d4a4:	f107 0212 	add.w	r2, r7, #18
 800d4a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d4ac:	9300      	str	r3, [sp, #0]
 800d4ae:	2301      	movs	r3, #1
 800d4b0:	6978      	ldr	r0, [r7, #20]
 800d4b2:	f7f5 fac7 	bl	8002a44 <HAL_I2C_Master_Receive>
 800d4b6:	4603      	mov	r3, r0
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d1f1      	bne.n	800d4a0 <SD_MPU6050_SetGyroscope+0x3c>
	/*{
				return SD_MPU6050_Result_Error;
	}*/
	temp = (temp & 0xE7) | (uint8_t)GyroscopeSensitivity << 3;
 800d4bc:	7cbb      	ldrb	r3, [r7, #18]
 800d4be:	b25b      	sxtb	r3, r3
 800d4c0:	f023 0318 	bic.w	r3, r3, #24
 800d4c4:	b25a      	sxtb	r2, r3
 800d4c6:	79fb      	ldrb	r3, [r7, #7]
 800d4c8:	00db      	lsls	r3, r3, #3
 800d4ca:	b25b      	sxtb	r3, r3
 800d4cc:	4313      	orrs	r3, r2
 800d4ce:	b25b      	sxtb	r3, r3
 800d4d0:	b2db      	uxtb	r3, r3
 800d4d2:	74bb      	strb	r3, [r7, #18]
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&temp, 1, 1000) != HAL_OK);
 800d4d4:	bf00      	nop
 800d4d6:	7cfb      	ldrb	r3, [r7, #19]
 800d4d8:	b299      	uxth	r1, r3
 800d4da:	f107 0212 	add.w	r2, r7, #18
 800d4de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d4e2:	9300      	str	r3, [sp, #0]
 800d4e4:	2301      	movs	r3, #1
 800d4e6:	6978      	ldr	r0, [r7, #20]
 800d4e8:	f7f5 f9ae 	bl	8002848 <HAL_I2C_Master_Transmit>
 800d4ec:	4603      	mov	r3, r0
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d1f1      	bne.n	800d4d6 <SD_MPU6050_SetGyroscope+0x72>
	/*{
				return SD_MPU6050_Result_Error;
	}*/

	switch (GyroscopeSensitivity) {
 800d4f2:	79fb      	ldrb	r3, [r7, #7]
 800d4f4:	2b03      	cmp	r3, #3
 800d4f6:	d81b      	bhi.n	800d530 <SD_MPU6050_SetGyroscope+0xcc>
 800d4f8:	a201      	add	r2, pc, #4	; (adr r2, 800d500 <SD_MPU6050_SetGyroscope+0x9c>)
 800d4fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4fe:	bf00      	nop
 800d500:	0800d511 	.word	0x0800d511
 800d504:	0800d519 	.word	0x0800d519
 800d508:	0800d521 	.word	0x0800d521
 800d50c:	0800d529 	.word	0x0800d529
			case SD_MPU6050_Gyroscope_250s:
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_250;
 800d510:	68bb      	ldr	r3, [r7, #8]
 800d512:	4a0a      	ldr	r2, [pc, #40]	; (800d53c <SD_MPU6050_SetGyroscope+0xd8>)
 800d514:	605a      	str	r2, [r3, #4]
				break;
 800d516:	e00c      	b.n	800d532 <SD_MPU6050_SetGyroscope+0xce>
			case SD_MPU6050_Gyroscope_500s:
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_500;
 800d518:	68bb      	ldr	r3, [r7, #8]
 800d51a:	4a09      	ldr	r2, [pc, #36]	; (800d540 <SD_MPU6050_SetGyroscope+0xdc>)
 800d51c:	605a      	str	r2, [r3, #4]
				break;
 800d51e:	e008      	b.n	800d532 <SD_MPU6050_SetGyroscope+0xce>
			case SD_MPU6050_Gyroscope_1000s:
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_1000;
 800d520:	68bb      	ldr	r3, [r7, #8]
 800d522:	4a08      	ldr	r2, [pc, #32]	; (800d544 <SD_MPU6050_SetGyroscope+0xe0>)
 800d524:	605a      	str	r2, [r3, #4]
				break;
 800d526:	e004      	b.n	800d532 <SD_MPU6050_SetGyroscope+0xce>
			case SD_MPU6050_Gyroscope_2000s:
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_2000;
 800d528:	68bb      	ldr	r3, [r7, #8]
 800d52a:	4a07      	ldr	r2, [pc, #28]	; (800d548 <SD_MPU6050_SetGyroscope+0xe4>)
 800d52c:	605a      	str	r2, [r3, #4]
				break;
 800d52e:	e000      	b.n	800d532 <SD_MPU6050_SetGyroscope+0xce>
			default:
				break;
 800d530:	bf00      	nop
		}
	/* Return OK */
	return SD_MPU6050_Result_Ok;
 800d532:	2300      	movs	r3, #0
}
 800d534:	4618      	mov	r0, r3
 800d536:	3718      	adds	r7, #24
 800d538:	46bd      	mov	sp, r7
 800d53a:	bd80      	pop	{r7, pc}
 800d53c:	3bfa232d 	.word	0x3bfa232d
 800d540:	3c7a232d 	.word	0x3c7a232d
 800d544:	3cf9c190 	.word	0x3cf9c190
 800d548:	3d79c190 	.word	0x3d79c190

0800d54c <SD_MPU6050_ReadAll>:

	/* Return OK */
	return SD_MPU6050_Result_Ok;
}
SD_MPU6050_Result SD_MPU6050_ReadAll(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct)
{
 800d54c:	b580      	push	{r7, lr}
 800d54e:	b08c      	sub	sp, #48	; 0x30
 800d550:	af02      	add	r7, sp, #8
 800d552:	6078      	str	r0, [r7, #4]
 800d554:	6039      	str	r1, [r7, #0]
	uint8_t data[14];
	int16_t temp;
	uint8_t reg = MPU6050_ACCEL_XOUT_H;
 800d556:	233b      	movs	r3, #59	; 0x3b
 800d558:	73fb      	strb	r3, [r7, #15]
	I2C_HandleTypeDef* Handle = I2Cx;
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t address = DataStruct->Address;
 800d55e:	683b      	ldr	r3, [r7, #0]
 800d560:	781b      	ldrb	r3, [r3, #0]
 800d562:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	/* Read full raw data, 14bytes */
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address, &reg, 1, 1000) != HAL_OK);
 800d566:	bf00      	nop
 800d568:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d56c:	b299      	uxth	r1, r3
 800d56e:	f107 020f 	add.w	r2, r7, #15
 800d572:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d576:	9300      	str	r3, [sp, #0]
 800d578:	2301      	movs	r3, #1
 800d57a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d57c:	f7f5 f964 	bl	8002848 <HAL_I2C_Master_Transmit>
 800d580:	4603      	mov	r3, r0
 800d582:	2b00      	cmp	r3, #0
 800d584:	d1f0      	bne.n	800d568 <SD_MPU6050_ReadAll+0x1c>

	while(HAL_I2C_Master_Receive(Handle, (uint16_t)address, data, 14, 1000) != HAL_OK);
 800d586:	bf00      	nop
 800d588:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d58c:	b299      	uxth	r1, r3
 800d58e:	f107 0210 	add.w	r2, r7, #16
 800d592:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d596:	9300      	str	r3, [sp, #0]
 800d598:	230e      	movs	r3, #14
 800d59a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d59c:	f7f5 fa52 	bl	8002a44 <HAL_I2C_Master_Receive>
 800d5a0:	4603      	mov	r3, r0
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d1f0      	bne.n	800d588 <SD_MPU6050_ReadAll+0x3c>

	/* Format accelerometer data */
	DataStruct->Accelerometer_X = (int16_t)(data[0] << 8 | data[1]);
 800d5a6:	7c3b      	ldrb	r3, [r7, #16]
 800d5a8:	021b      	lsls	r3, r3, #8
 800d5aa:	b21a      	sxth	r2, r3
 800d5ac:	7c7b      	ldrb	r3, [r7, #17]
 800d5ae:	b21b      	sxth	r3, r3
 800d5b0:	4313      	orrs	r3, r2
 800d5b2:	b21a      	sxth	r2, r3
 800d5b4:	683b      	ldr	r3, [r7, #0]
 800d5b6:	819a      	strh	r2, [r3, #12]
	DataStruct->Accelerometer_Y = (int16_t)(data[2] << 8 | data[3]);
 800d5b8:	7cbb      	ldrb	r3, [r7, #18]
 800d5ba:	021b      	lsls	r3, r3, #8
 800d5bc:	b21a      	sxth	r2, r3
 800d5be:	7cfb      	ldrb	r3, [r7, #19]
 800d5c0:	b21b      	sxth	r3, r3
 800d5c2:	4313      	orrs	r3, r2
 800d5c4:	b21a      	sxth	r2, r3
 800d5c6:	683b      	ldr	r3, [r7, #0]
 800d5c8:	81da      	strh	r2, [r3, #14]
	DataStruct->Accelerometer_Z = (int16_t)(data[4] << 8 | data[5]);
 800d5ca:	7d3b      	ldrb	r3, [r7, #20]
 800d5cc:	021b      	lsls	r3, r3, #8
 800d5ce:	b21a      	sxth	r2, r3
 800d5d0:	7d7b      	ldrb	r3, [r7, #21]
 800d5d2:	b21b      	sxth	r3, r3
 800d5d4:	4313      	orrs	r3, r2
 800d5d6:	b21a      	sxth	r2, r3
 800d5d8:	683b      	ldr	r3, [r7, #0]
 800d5da:	821a      	strh	r2, [r3, #16]

	/* Format temperature */
	temp = (data[6] << 8 | data[7]);
 800d5dc:	7dbb      	ldrb	r3, [r7, #22]
 800d5de:	021b      	lsls	r3, r3, #8
 800d5e0:	b21a      	sxth	r2, r3
 800d5e2:	7dfb      	ldrb	r3, [r7, #23]
 800d5e4:	b21b      	sxth	r3, r3
 800d5e6:	4313      	orrs	r3, r2
 800d5e8:	843b      	strh	r3, [r7, #32]
	DataStruct->Temperature = (float)((float)((int16_t)temp) / (float)340.0 + (float)36.53);
 800d5ea:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d5ee:	ee07 3a90 	vmov	s15, r3
 800d5f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d5f6:	eddf 6a15 	vldr	s13, [pc, #84]	; 800d64c <SD_MPU6050_ReadAll+0x100>
 800d5fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d5fe:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800d650 <SD_MPU6050_ReadAll+0x104>
 800d602:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d606:	683b      	ldr	r3, [r7, #0]
 800d608:	edc3 7a06 	vstr	s15, [r3, #24]

	/* Format gyroscope data */
	DataStruct->Gyroscope_X = (int16_t)(data[8] << 8 | data[9]);
 800d60c:	7e3b      	ldrb	r3, [r7, #24]
 800d60e:	021b      	lsls	r3, r3, #8
 800d610:	b21a      	sxth	r2, r3
 800d612:	7e7b      	ldrb	r3, [r7, #25]
 800d614:	b21b      	sxth	r3, r3
 800d616:	4313      	orrs	r3, r2
 800d618:	b21a      	sxth	r2, r3
 800d61a:	683b      	ldr	r3, [r7, #0]
 800d61c:	825a      	strh	r2, [r3, #18]
	DataStruct->Gyroscope_Y = (int16_t)(data[10] << 8 | data[11]);
 800d61e:	7ebb      	ldrb	r3, [r7, #26]
 800d620:	021b      	lsls	r3, r3, #8
 800d622:	b21a      	sxth	r2, r3
 800d624:	7efb      	ldrb	r3, [r7, #27]
 800d626:	b21b      	sxth	r3, r3
 800d628:	4313      	orrs	r3, r2
 800d62a:	b21a      	sxth	r2, r3
 800d62c:	683b      	ldr	r3, [r7, #0]
 800d62e:	829a      	strh	r2, [r3, #20]
	DataStruct->Gyroscope_Z = (int16_t)(data[12] << 8 | data[13]);
 800d630:	7f3b      	ldrb	r3, [r7, #28]
 800d632:	021b      	lsls	r3, r3, #8
 800d634:	b21a      	sxth	r2, r3
 800d636:	7f7b      	ldrb	r3, [r7, #29]
 800d638:	b21b      	sxth	r3, r3
 800d63a:	4313      	orrs	r3, r2
 800d63c:	b21a      	sxth	r2, r3
 800d63e:	683b      	ldr	r3, [r7, #0]
 800d640:	82da      	strh	r2, [r3, #22]

	/* Return OK */
	return SD_MPU6050_Result_Ok;
 800d642:	2300      	movs	r3, #0
}
 800d644:	4618      	mov	r0, r3
 800d646:	3728      	adds	r7, #40	; 0x28
 800d648:	46bd      	mov	sp, r7
 800d64a:	bd80      	pop	{r7, pc}
 800d64c:	43aa0000 	.word	0x43aa0000
 800d650:	42121eb8 	.word	0x42121eb8

0800d654 <parse_number>:
 * \param[in]       gh: GPS handle
 * \param[in]       t: Text to parse. Set to `NULL` to parse current GPS term
 * \return          Parsed integer
 */
static int32_t
parse_number(gps_t* gh, const char* t) {
 800d654:	b480      	push	{r7}
 800d656:	b085      	sub	sp, #20
 800d658:	af00      	add	r7, sp, #0
 800d65a:	6078      	str	r0, [r7, #4]
 800d65c:	6039      	str	r1, [r7, #0]
	int32_t res = 0;
 800d65e:	2300      	movs	r3, #0
 800d660:	60fb      	str	r3, [r7, #12]
	uint8_t minus;

	if (t == NULL) {
 800d662:	683b      	ldr	r3, [r7, #0]
 800d664:	2b00      	cmp	r3, #0
 800d666:	d106      	bne.n	800d676 <parse_number+0x22>
		t = gh->p.term_str;
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	3345      	adds	r3, #69	; 0x45
 800d66c:	603b      	str	r3, [r7, #0]
	}
	for (; t != NULL && *t == ' '; t++) {}      /* Strip leading spaces */
 800d66e:	e002      	b.n	800d676 <parse_number+0x22>
 800d670:	683b      	ldr	r3, [r7, #0]
 800d672:	3301      	adds	r3, #1
 800d674:	603b      	str	r3, [r7, #0]
 800d676:	683b      	ldr	r3, [r7, #0]
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d003      	beq.n	800d684 <parse_number+0x30>
 800d67c:	683b      	ldr	r3, [r7, #0]
 800d67e:	781b      	ldrb	r3, [r3, #0]
 800d680:	2b20      	cmp	r3, #32
 800d682:	d0f5      	beq.n	800d670 <parse_number+0x1c>

	minus = (*t == '-' ? (t++, 1) : 0);
 800d684:	683b      	ldr	r3, [r7, #0]
 800d686:	781b      	ldrb	r3, [r3, #0]
 800d688:	2b2d      	cmp	r3, #45	; 0x2d
 800d68a:	d104      	bne.n	800d696 <parse_number+0x42>
 800d68c:	683b      	ldr	r3, [r7, #0]
 800d68e:	3301      	adds	r3, #1
 800d690:	603b      	str	r3, [r7, #0]
 800d692:	2301      	movs	r3, #1
 800d694:	e000      	b.n	800d698 <parse_number+0x44>
 800d696:	2300      	movs	r3, #0
 800d698:	72fb      	strb	r3, [r7, #11]
	for (; t != NULL && CIN(*t); t++) {
 800d69a:	e00d      	b.n	800d6b8 <parse_number+0x64>
		res = 10 * res + CTN(*t);
 800d69c:	68fa      	ldr	r2, [r7, #12]
 800d69e:	4613      	mov	r3, r2
 800d6a0:	009b      	lsls	r3, r3, #2
 800d6a2:	4413      	add	r3, r2
 800d6a4:	005b      	lsls	r3, r3, #1
 800d6a6:	461a      	mov	r2, r3
 800d6a8:	683b      	ldr	r3, [r7, #0]
 800d6aa:	781b      	ldrb	r3, [r3, #0]
 800d6ac:	3b30      	subs	r3, #48	; 0x30
 800d6ae:	4413      	add	r3, r2
 800d6b0:	60fb      	str	r3, [r7, #12]
	for (; t != NULL && CIN(*t); t++) {
 800d6b2:	683b      	ldr	r3, [r7, #0]
 800d6b4:	3301      	adds	r3, #1
 800d6b6:	603b      	str	r3, [r7, #0]
 800d6b8:	683b      	ldr	r3, [r7, #0]
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d007      	beq.n	800d6ce <parse_number+0x7a>
 800d6be:	683b      	ldr	r3, [r7, #0]
 800d6c0:	781b      	ldrb	r3, [r3, #0]
 800d6c2:	2b2f      	cmp	r3, #47	; 0x2f
 800d6c4:	d903      	bls.n	800d6ce <parse_number+0x7a>
 800d6c6:	683b      	ldr	r3, [r7, #0]
 800d6c8:	781b      	ldrb	r3, [r3, #0]
 800d6ca:	2b39      	cmp	r3, #57	; 0x39
 800d6cc:	d9e6      	bls.n	800d69c <parse_number+0x48>
	}
	return minus ? -res : res;
 800d6ce:	7afb      	ldrb	r3, [r7, #11]
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d002      	beq.n	800d6da <parse_number+0x86>
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	425b      	negs	r3, r3
 800d6d8:	e000      	b.n	800d6dc <parse_number+0x88>
 800d6da:	68fb      	ldr	r3, [r7, #12]
}
 800d6dc:	4618      	mov	r0, r3
 800d6de:	3714      	adds	r7, #20
 800d6e0:	46bd      	mov	sp, r7
 800d6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e6:	4770      	bx	lr

0800d6e8 <parse_float_number>:
 * \param[in]       gh: GPS handle
 * \param[in]       t: Text to parse. Set to `NULL` to parse current GPS term
 * \return          Parsed double in \ref gps_float_t format
 */
static gps_float_t
parse_float_number(gps_t* gh, const char* t) {
 800d6e8:	b580      	push	{r7, lr}
 800d6ea:	b084      	sub	sp, #16
 800d6ec:	af00      	add	r7, sp, #0
 800d6ee:	6078      	str	r0, [r7, #4]
 800d6f0:	6039      	str	r1, [r7, #0]
	gps_float_t res;

	if (t == NULL) {
 800d6f2:	683b      	ldr	r3, [r7, #0]
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d106      	bne.n	800d706 <parse_float_number+0x1e>
		t = gh->p.term_str;
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	3345      	adds	r3, #69	; 0x45
 800d6fc:	603b      	str	r3, [r7, #0]
	}
	for (; t != NULL && *t == ' '; t++) {}      /* Strip leading spaces */
 800d6fe:	e002      	b.n	800d706 <parse_float_number+0x1e>
 800d700:	683b      	ldr	r3, [r7, #0]
 800d702:	3301      	adds	r3, #1
 800d704:	603b      	str	r3, [r7, #0]
 800d706:	683b      	ldr	r3, [r7, #0]
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d003      	beq.n	800d714 <parse_float_number+0x2c>
 800d70c:	683b      	ldr	r3, [r7, #0]
 800d70e:	781b      	ldrb	r3, [r3, #0]
 800d710:	2b20      	cmp	r3, #32
 800d712:	d0f5      	beq.n	800d700 <parse_float_number+0x18>

#if GPS_CFG_DOUBLE
	res = strtod(t, NULL);                      /* Parse string to double */
#else /* GPS_CFG_DOUBLE */
	res = strtof(t, NULL);                      /* Parse string to float */
 800d714:	2100      	movs	r1, #0
 800d716:	6838      	ldr	r0, [r7, #0]
 800d718:	f005 fdba 	bl	8013290 <strtof>
 800d71c:	ed87 0a03 	vstr	s0, [r7, #12]
#endif /* !GPS_CFG_DOUBLE */

	return FLT(res);                            /* Return casted value, based on float size */
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	ee07 3a90 	vmov	s15, r3
}
 800d726:	eeb0 0a67 	vmov.f32	s0, s15
 800d72a:	3710      	adds	r7, #16
 800d72c:	46bd      	mov	sp, r7
 800d72e:	bd80      	pop	{r7, pc}

0800d730 <parse_lat_long>:
 *                  NMEA output for latitude is ddmm.sss and longitude is dddmm.sss
 * \param[in]       gh: GPS handle
 * \return          Latitude/Longitude value in degrees
 */
static gps_float_t
parse_lat_long(gps_t* gh) {
 800d730:	b580      	push	{r7, lr}
 800d732:	b086      	sub	sp, #24
 800d734:	af00      	add	r7, sp, #0
 800d736:	6078      	str	r0, [r7, #4]
	gps_float_t ll, deg, min;

	ll = parse_float_number(gh, NULL);          /* Parse value as double */
 800d738:	2100      	movs	r1, #0
 800d73a:	6878      	ldr	r0, [r7, #4]
 800d73c:	f7ff ffd4 	bl	800d6e8 <parse_float_number>
 800d740:	ed87 0a05 	vstr	s0, [r7, #20]
	deg = FLT((int)((int)ll / 100));            /* Get absolute degrees value, interested in integer part only */
 800d744:	edd7 7a05 	vldr	s15, [r7, #20]
 800d748:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d74c:	ee17 1a90 	vmov	r1, s15
 800d750:	4b15      	ldr	r3, [pc, #84]	; (800d7a8 <parse_lat_long+0x78>)
 800d752:	fb83 2301 	smull	r2, r3, r3, r1
 800d756:	115a      	asrs	r2, r3, #5
 800d758:	17cb      	asrs	r3, r1, #31
 800d75a:	1ad3      	subs	r3, r2, r3
 800d75c:	ee07 3a90 	vmov	s15, r3
 800d760:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d764:	edc7 7a04 	vstr	s15, [r7, #16]
	min = ll - (deg * FLT(100));                /* Get remaining part from full number, minutes */
 800d768:	edd7 7a04 	vldr	s15, [r7, #16]
 800d76c:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800d7ac <parse_lat_long+0x7c>
 800d770:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d774:	ed97 7a05 	vldr	s14, [r7, #20]
 800d778:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d77c:	edc7 7a03 	vstr	s15, [r7, #12]
	ll = deg + (min / FLT(60));               /* Calculate latitude/longitude */
 800d780:	ed97 7a03 	vldr	s14, [r7, #12]
 800d784:	eddf 6a0a 	vldr	s13, [pc, #40]	; 800d7b0 <parse_lat_long+0x80>
 800d788:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d78c:	ed97 7a04 	vldr	s14, [r7, #16]
 800d790:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d794:	edc7 7a05 	vstr	s15, [r7, #20]

	return ll;
 800d798:	697b      	ldr	r3, [r7, #20]
 800d79a:	ee07 3a90 	vmov	s15, r3
}
 800d79e:	eeb0 0a67 	vmov.f32	s0, s15
 800d7a2:	3718      	adds	r7, #24
 800d7a4:	46bd      	mov	sp, r7
 800d7a6:	bd80      	pop	{r7, pc}
 800d7a8:	51eb851f 	.word	0x51eb851f
 800d7ac:	42c80000 	.word	0x42c80000
 800d7b0:	42700000 	.word	0x42700000

0800d7b4 <parse_term>:
 * \brief           Parse received term
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
parse_term(gps_t* gh) {
 800d7b4:	b580      	push	{r7, lr}
 800d7b6:	b082      	sub	sp, #8
 800d7b8:	af00      	add	r7, sp, #0
 800d7ba:	6078      	str	r0, [r7, #4]
	if (gh->p.term_num == 0) {                  /* Check string type */
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d169      	bne.n	800d89a <parse_term+0xe6>
		if (0) {
#if GPS_CFG_STATEMENT_GPGGA
		} else if (!strncmp(gh->p.term_str, "$GPGGA", 6) || !strncmp(gh->p.term_str, "$GNGGA", 6)) {
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	3345      	adds	r3, #69	; 0x45
 800d7ca:	2206      	movs	r2, #6
 800d7cc:	49c4      	ldr	r1, [pc, #784]	; (800dae0 <parse_term+0x32c>)
 800d7ce:	4618      	mov	r0, r3
 800d7d0:	f004 ff0b 	bl	80125ea <strncmp>
 800d7d4:	4603      	mov	r3, r0
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d009      	beq.n	800d7ee <parse_term+0x3a>
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	3345      	adds	r3, #69	; 0x45
 800d7de:	2206      	movs	r2, #6
 800d7e0:	49c0      	ldr	r1, [pc, #768]	; (800dae4 <parse_term+0x330>)
 800d7e2:	4618      	mov	r0, r3
 800d7e4:	f004 ff01 	bl	80125ea <strncmp>
 800d7e8:	4603      	mov	r3, r0
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d104      	bne.n	800d7f8 <parse_term+0x44>
			gh->p.stat = STAT_GGA;
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	2201      	movs	r2, #1
 800d7f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d7f6:	e04e      	b.n	800d896 <parse_term+0xe2>
#endif /* GPS_CFG_STATEMENT_GPGGA */
#if GPS_CFG_STATEMENT_GPGSA
		} else if (!strncmp(gh->p.term_str, "$GPGSA", 6) || !strncmp(gh->p.term_str, "$GNGSA", 6)) {
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	3345      	adds	r3, #69	; 0x45
 800d7fc:	2206      	movs	r2, #6
 800d7fe:	49ba      	ldr	r1, [pc, #744]	; (800dae8 <parse_term+0x334>)
 800d800:	4618      	mov	r0, r3
 800d802:	f004 fef2 	bl	80125ea <strncmp>
 800d806:	4603      	mov	r3, r0
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d009      	beq.n	800d820 <parse_term+0x6c>
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	3345      	adds	r3, #69	; 0x45
 800d810:	2206      	movs	r2, #6
 800d812:	49b6      	ldr	r1, [pc, #728]	; (800daec <parse_term+0x338>)
 800d814:	4618      	mov	r0, r3
 800d816:	f004 fee8 	bl	80125ea <strncmp>
 800d81a:	4603      	mov	r3, r0
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d104      	bne.n	800d82a <parse_term+0x76>
			gh->p.stat = STAT_GSA;
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	2202      	movs	r2, #2
 800d824:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d828:	e035      	b.n	800d896 <parse_term+0xe2>
#endif /* GPS_CFG_STATEMENT_GPGSA */
#if GPS_CFG_STATEMENT_GPGSV
		} else if (!strncmp(gh->p.term_str, "$GPGSV", 6) || !strncmp(gh->p.term_str, "$GNGSV", 6)) {
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	3345      	adds	r3, #69	; 0x45
 800d82e:	2206      	movs	r2, #6
 800d830:	49af      	ldr	r1, [pc, #700]	; (800daf0 <parse_term+0x33c>)
 800d832:	4618      	mov	r0, r3
 800d834:	f004 fed9 	bl	80125ea <strncmp>
 800d838:	4603      	mov	r3, r0
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d009      	beq.n	800d852 <parse_term+0x9e>
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	3345      	adds	r3, #69	; 0x45
 800d842:	2206      	movs	r2, #6
 800d844:	49ab      	ldr	r1, [pc, #684]	; (800daf4 <parse_term+0x340>)
 800d846:	4618      	mov	r0, r3
 800d848:	f004 fecf 	bl	80125ea <strncmp>
 800d84c:	4603      	mov	r3, r0
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d104      	bne.n	800d85c <parse_term+0xa8>
			gh->p.stat = STAT_GSV;
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	2203      	movs	r2, #3
 800d856:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d85a:	e01c      	b.n	800d896 <parse_term+0xe2>
#endif /* GPS_CFG_STATEMENT_GPGSV */
#if GPS_CFG_STATEMENT_GPRMC
		} else if (!strncmp(gh->p.term_str, "$GPRMC", 6) || !strncmp(gh->p.term_str, "$GNRMC", 6)) {
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	3345      	adds	r3, #69	; 0x45
 800d860:	2206      	movs	r2, #6
 800d862:	49a5      	ldr	r1, [pc, #660]	; (800daf8 <parse_term+0x344>)
 800d864:	4618      	mov	r0, r3
 800d866:	f004 fec0 	bl	80125ea <strncmp>
 800d86a:	4603      	mov	r3, r0
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d009      	beq.n	800d884 <parse_term+0xd0>
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	3345      	adds	r3, #69	; 0x45
 800d874:	2206      	movs	r2, #6
 800d876:	49a1      	ldr	r1, [pc, #644]	; (800dafc <parse_term+0x348>)
 800d878:	4618      	mov	r0, r3
 800d87a:	f004 feb6 	bl	80125ea <strncmp>
 800d87e:	4603      	mov	r3, r0
 800d880:	2b00      	cmp	r3, #0
 800d882:	d104      	bne.n	800d88e <parse_term+0xda>
			gh->p.stat = STAT_RMC;
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	2204      	movs	r2, #4
 800d888:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d88c:	e003      	b.n	800d896 <parse_term+0xe2>
#endif /* GPS_CFG_STATEMENT_GPRMC */
		} else {
			gh->p.stat = STAT_UNKNOWN;          /* Invalid statement for library */
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	2200      	movs	r2, #0
 800d892:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		}
		return 1;
 800d896:	2301      	movs	r3, #1
 800d898:	e21d      	b.n	800dcd6 <parse_term+0x522>
	}

	/* Start parsing terms */
	if (gh->p.stat == STAT_UNKNOWN) {
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	f000 8217 	beq.w	800dcd4 <parse_term+0x520>
#if GPS_CFG_STATEMENT_GPGGA
	} else if (gh->p.stat == STAT_GGA) {        /* Process GPGGA statement */
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d8ac:	2b01      	cmp	r3, #1
 800d8ae:	f040 80c0 	bne.w	800da32 <parse_term+0x27e>
		switch (gh->p.term_num) {
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800d8b8:	3b01      	subs	r3, #1
 800d8ba:	2b0a      	cmp	r3, #10
 800d8bc:	f200 81fd 	bhi.w	800dcba <parse_term+0x506>
 800d8c0:	a201      	add	r2, pc, #4	; (adr r2, 800d8c8 <parse_term+0x114>)
 800d8c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8c6:	bf00      	nop
 800d8c8:	0800d8f5 	.word	0x0800d8f5
 800d8cc:	0800d96f 	.word	0x0800d96f
 800d8d0:	0800d981 	.word	0x0800d981
 800d8d4:	0800d9a9 	.word	0x0800d9a9
 800d8d8:	0800d9bb 	.word	0x0800d9bb
 800d8dc:	0800d9e3 	.word	0x0800d9e3
 800d8e0:	0800d9f7 	.word	0x0800d9f7
 800d8e4:	0800dcbb 	.word	0x0800dcbb
 800d8e8:	0800da0b 	.word	0x0800da0b
 800d8ec:	0800dcbb 	.word	0x0800dcbb
 800d8f0:	0800da1f 	.word	0x0800da1f
		case 1:                             /* Process UTC time */
			gh->p.data.gga.hours = 10 * CTN(gh->p.term_str[0]) + CTN(gh->p.term_str[1]);
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d8fa:	3b30      	subs	r3, #48	; 0x30
 800d8fc:	b2db      	uxtb	r3, r3
 800d8fe:	461a      	mov	r2, r3
 800d900:	0092      	lsls	r2, r2, #2
 800d902:	4413      	add	r3, r2
 800d904:	005b      	lsls	r3, r3, #1
 800d906:	b2da      	uxtb	r2, r3
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800d90e:	4413      	add	r3, r2
 800d910:	b2db      	uxtb	r3, r3
 800d912:	3b30      	subs	r3, #48	; 0x30
 800d914:	b2da      	uxtb	r2, r3
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
			gh->p.data.gga.minutes = 10 * CTN(gh->p.term_str[2]) + CTN(gh->p.term_str[3]);
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800d922:	3b30      	subs	r3, #48	; 0x30
 800d924:	b2db      	uxtb	r3, r3
 800d926:	461a      	mov	r2, r3
 800d928:	0092      	lsls	r2, r2, #2
 800d92a:	4413      	add	r3, r2
 800d92c:	005b      	lsls	r3, r3, #1
 800d92e:	b2da      	uxtb	r2, r3
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800d936:	4413      	add	r3, r2
 800d938:	b2db      	uxtb	r3, r3
 800d93a:	3b30      	subs	r3, #48	; 0x30
 800d93c:	b2da      	uxtb	r2, r3
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
			gh->p.data.gga.seconds = 10 * CTN(gh->p.term_str[4]) + CTN(gh->p.term_str[5]);
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800d94a:	3b30      	subs	r3, #48	; 0x30
 800d94c:	b2db      	uxtb	r3, r3
 800d94e:	461a      	mov	r2, r3
 800d950:	0092      	lsls	r2, r2, #2
 800d952:	4413      	add	r3, r2
 800d954:	005b      	lsls	r3, r3, #1
 800d956:	b2da      	uxtb	r2, r3
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800d95e:	4413      	add	r3, r2
 800d960:	b2db      	uxtb	r3, r3
 800d962:	3b30      	subs	r3, #48	; 0x30
 800d964:	b2da      	uxtb	r2, r3
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
			break;
 800d96c:	e1b2      	b.n	800dcd4 <parse_term+0x520>
		case 2:                             /* Latitude */
			gh->p.data.gga.latitude = parse_lat_long(gh);   /* Parse latitude */
 800d96e:	6878      	ldr	r0, [r7, #4]
 800d970:	f7ff fede 	bl	800d730 <parse_lat_long>
 800d974:	eef0 7a40 	vmov.f32	s15, s0
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
			break;
 800d97e:	e1a9      	b.n	800dcd4 <parse_term+0x520>
		case 3:                             /* Latitude north/south information */
			if (gh->p.term_str[0] == 'S' || gh->p.term_str[0] == 's') {
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d986:	2b53      	cmp	r3, #83	; 0x53
 800d988:	d005      	beq.n	800d996 <parse_term+0x1e2>
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d990:	2b73      	cmp	r3, #115	; 0x73
 800d992:	f040 8194 	bne.w	800dcbe <parse_term+0x50a>
				gh->p.data.gga.latitude = -gh->p.data.gga.latitude;
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800d99c:	eef1 7a67 	vneg.f32	s15, s15
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
			}
			break;
 800d9a6:	e18a      	b.n	800dcbe <parse_term+0x50a>
		case 4:                             /* Longitude */
			gh->p.data.gga.longitude = parse_lat_long(gh);  /* Parse longitude */
 800d9a8:	6878      	ldr	r0, [r7, #4]
 800d9aa:	f7ff fec1 	bl	800d730 <parse_lat_long>
 800d9ae:	eef0 7a40 	vmov.f32	s15, s0
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
			break;
 800d9b8:	e18c      	b.n	800dcd4 <parse_term+0x520>
		case 5:                             /* Longitude east/west information */
			if (gh->p.term_str[0] == 'W' || gh->p.term_str[0] == 'w') {
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d9c0:	2b57      	cmp	r3, #87	; 0x57
 800d9c2:	d005      	beq.n	800d9d0 <parse_term+0x21c>
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d9ca:	2b77      	cmp	r3, #119	; 0x77
 800d9cc:	f040 8179 	bne.w	800dcc2 <parse_term+0x50e>
				gh->p.data.gga.longitude = -gh->p.data.gga.longitude;
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 800d9d6:	eef1 7a67 	vneg.f32	s15, s15
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
			}
			break;
 800d9e0:	e16f      	b.n	800dcc2 <parse_term+0x50e>
		case 6:                             /* Fix status */
			gh->p.data.gga.fix = (uint8_t)parse_number(gh, NULL);
 800d9e2:	2100      	movs	r1, #0
 800d9e4:	6878      	ldr	r0, [r7, #4]
 800d9e6:	f7ff fe35 	bl	800d654 <parse_number>
 800d9ea:	4603      	mov	r3, r0
 800d9ec:	b2da      	uxtb	r2, r3
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
			break;
 800d9f4:	e16e      	b.n	800dcd4 <parse_term+0x520>
		case 7:                             /* Satellites in use */
			gh->p.data.gga.sats_in_use = (uint8_t)parse_number(gh, NULL);
 800d9f6:	2100      	movs	r1, #0
 800d9f8:	6878      	ldr	r0, [r7, #4]
 800d9fa:	f7ff fe2b 	bl	800d654 <parse_number>
 800d9fe:	4603      	mov	r3, r0
 800da00:	b2da      	uxtb	r2, r3
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
			break;
 800da08:	e164      	b.n	800dcd4 <parse_term+0x520>
		case 9:                             /* Altitude */
			gh->p.data.gga.altitude = parse_float_number(gh, NULL);
 800da0a:	2100      	movs	r1, #0
 800da0c:	6878      	ldr	r0, [r7, #4]
 800da0e:	f7ff fe6b 	bl	800d6e8 <parse_float_number>
 800da12:	eef0 7a40 	vmov.f32	s15, s0
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
			break;
 800da1c:	e15a      	b.n	800dcd4 <parse_term+0x520>
		case 11:                            /* Altitude above ellipsoid */
			gh->p.data.gga.geo_sep = parse_float_number(gh, NULL);
 800da1e:	2100      	movs	r1, #0
 800da20:	6878      	ldr	r0, [r7, #4]
 800da22:	f7ff fe61 	bl	800d6e8 <parse_float_number>
 800da26:	eef0 7a40 	vmov.f32	s15, s0
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
			break;
 800da30:	e150      	b.n	800dcd4 <parse_term+0x520>
		default: break;
		}
#endif /* GPS_CFG_STATEMENT_GPGGA */
#if GPS_CFG_STATEMENT_GPGSA
	} else if (gh->p.stat == STAT_GSA) {        /* Process GPGSA statement */
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800da38:	2b02      	cmp	r3, #2
 800da3a:	d17e      	bne.n	800db3a <parse_term+0x386>
		switch (gh->p.term_num) {
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800da42:	3b02      	subs	r3, #2
 800da44:	2b0f      	cmp	r3, #15
 800da46:	d85b      	bhi.n	800db00 <parse_term+0x34c>
 800da48:	a201      	add	r2, pc, #4	; (adr r2, 800da50 <parse_term+0x29c>)
 800da4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da4e:	bf00      	nop
 800da50:	0800da91 	.word	0x0800da91
 800da54:	0800db01 	.word	0x0800db01
 800da58:	0800db01 	.word	0x0800db01
 800da5c:	0800db01 	.word	0x0800db01
 800da60:	0800db01 	.word	0x0800db01
 800da64:	0800db01 	.word	0x0800db01
 800da68:	0800db01 	.word	0x0800db01
 800da6c:	0800db01 	.word	0x0800db01
 800da70:	0800db01 	.word	0x0800db01
 800da74:	0800db01 	.word	0x0800db01
 800da78:	0800db01 	.word	0x0800db01
 800da7c:	0800db01 	.word	0x0800db01
 800da80:	0800db01 	.word	0x0800db01
 800da84:	0800daa5 	.word	0x0800daa5
 800da88:	0800dab9 	.word	0x0800dab9
 800da8c:	0800dacd 	.word	0x0800dacd
		case 2:                             /* Process fix mode */
			gh->p.data.gsa.fix_mode = (uint8_t)parse_number(gh, NULL);
 800da90:	2100      	movs	r1, #0
 800da92:	6878      	ldr	r0, [r7, #4]
 800da94:	f7ff fdde 	bl	800d654 <parse_number>
 800da98:	4603      	mov	r3, r0
 800da9a:	b2da      	uxtb	r2, r3
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
			break;
 800daa2:	e117      	b.n	800dcd4 <parse_term+0x520>
		case 15:                            /* Process PDOP */
			gh->p.data.gsa.dop_p = parse_float_number(gh, NULL);
 800daa4:	2100      	movs	r1, #0
 800daa6:	6878      	ldr	r0, [r7, #4]
 800daa8:	f7ff fe1e 	bl	800d6e8 <parse_float_number>
 800daac:	eef0 7a40 	vmov.f32	s15, s0
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
			break;
 800dab6:	e10d      	b.n	800dcd4 <parse_term+0x520>
		case 16:                            /* Process HDOP */
			gh->p.data.gsa.dop_h = parse_float_number(gh, NULL);
 800dab8:	2100      	movs	r1, #0
 800daba:	6878      	ldr	r0, [r7, #4]
 800dabc:	f7ff fe14 	bl	800d6e8 <parse_float_number>
 800dac0:	eef0 7a40 	vmov.f32	s15, s0
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
			break;
 800daca:	e103      	b.n	800dcd4 <parse_term+0x520>
		case 17:                            /* Process VDOP */
			gh->p.data.gsa.dop_v = parse_float_number(gh, NULL);
 800dacc:	2100      	movs	r1, #0
 800dace:	6878      	ldr	r0, [r7, #4]
 800dad0:	f7ff fe0a 	bl	800d6e8 <parse_float_number>
 800dad4:	eef0 7a40 	vmov.f32	s15, s0
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
			break;
 800dade:	e0f9      	b.n	800dcd4 <parse_term+0x520>
 800dae0:	08015f90 	.word	0x08015f90
 800dae4:	08015f98 	.word	0x08015f98
 800dae8:	08015fa0 	.word	0x08015fa0
 800daec:	08015fa8 	.word	0x08015fa8
 800daf0:	08015fb0 	.word	0x08015fb0
 800daf4:	08015fb8 	.word	0x08015fb8
 800daf8:	08015fc0 	.word	0x08015fc0
 800dafc:	08015fc8 	.word	0x08015fc8
		default:
			/* Parse satellite IDs */
			if (gh->p.term_num >= 3 && gh->p.term_num <= 14) {
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800db06:	2b02      	cmp	r3, #2
 800db08:	f240 80dd 	bls.w	800dcc6 <parse_term+0x512>
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800db12:	2b0e      	cmp	r3, #14
 800db14:	f200 80d7 	bhi.w	800dcc6 <parse_term+0x512>
				gh->p.data.gsa.satellites_ids[gh->p.term_num - 3] = (uint8_t)parse_number(gh, NULL);
 800db18:	2100      	movs	r1, #0
 800db1a:	6878      	ldr	r0, [r7, #4]
 800db1c:	f7ff fd9a 	bl	800d654 <parse_number>
 800db20:	4602      	mov	r2, r0
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800db28:	3b03      	subs	r3, #3
 800db2a:	b2d1      	uxtb	r1, r2
 800db2c:	687a      	ldr	r2, [r7, #4]
 800db2e:	4413      	add	r3, r2
 800db30:	460a      	mov	r2, r1
 800db32:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
			}
			break;
 800db36:	bf00      	nop
 800db38:	e0c5      	b.n	800dcc6 <parse_term+0x512>
		}
#endif /* GPS_CFG_STATEMENT_GPGSA */
#if GPS_CFG_STATEMENT_GPGSV
	} else if (gh->p.stat == STAT_GSV) {        /* Process GPGSV statement */
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800db40:	2b03      	cmp	r3, #3
 800db42:	d11b      	bne.n	800db7c <parse_term+0x3c8>
		switch (gh->p.term_num) {
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800db4a:	2b02      	cmp	r3, #2
 800db4c:	d002      	beq.n	800db54 <parse_term+0x3a0>
 800db4e:	2b03      	cmp	r3, #3
 800db50:	d00a      	beq.n	800db68 <parse_term+0x3b4>
					default: break;
					}
				}
			}
#endif /* GPS_CFG_STATEMENT_GPGSV_SAT_DET */
			break;
 800db52:	e0bf      	b.n	800dcd4 <parse_term+0x520>
			gh->p.data.gsv.stat_num = (uint8_t)parse_number(gh, NULL);
 800db54:	2100      	movs	r1, #0
 800db56:	6878      	ldr	r0, [r7, #4]
 800db58:	f7ff fd7c 	bl	800d654 <parse_number>
 800db5c:	4603      	mov	r3, r0
 800db5e:	b2da      	uxtb	r2, r3
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			break;
 800db66:	e0b5      	b.n	800dcd4 <parse_term+0x520>
			gh->p.data.gsv.sats_in_view = (uint8_t)parse_number(gh, NULL);
 800db68:	2100      	movs	r1, #0
 800db6a:	6878      	ldr	r0, [r7, #4]
 800db6c:	f7ff fd72 	bl	800d654 <parse_number>
 800db70:	4603      	mov	r3, r0
 800db72:	b2da      	uxtb	r2, r3
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			break;
 800db7a:	e0ab      	b.n	800dcd4 <parse_term+0x520>
		}
#endif /* GPS_CFG_STATEMENT_GPGSV */
#if GPS_CFG_STATEMENT_GPRMC
	} else if (gh->p.stat == STAT_RMC) {        /* Process GPRMC statement */
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800db82:	2b04      	cmp	r3, #4
 800db84:	f040 80a1 	bne.w	800dcca <parse_term+0x516>
		switch (gh->p.term_num) {
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800db8e:	3b02      	subs	r3, #2
 800db90:	2b09      	cmp	r3, #9
 800db92:	f200 809c 	bhi.w	800dcce <parse_term+0x51a>
 800db96:	a201      	add	r2, pc, #4	; (adr r2, 800db9c <parse_term+0x3e8>)
 800db98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db9c:	0800dbc5 	.word	0x0800dbc5
 800dba0:	0800dccf 	.word	0x0800dccf
 800dba4:	0800dccf 	.word	0x0800dccf
 800dba8:	0800dccf 	.word	0x0800dccf
 800dbac:	0800dccf 	.word	0x0800dccf
 800dbb0:	0800dbdf 	.word	0x0800dbdf
 800dbb4:	0800dbf3 	.word	0x0800dbf3
 800dbb8:	0800dc07 	.word	0x0800dc07
 800dbbc:	0800dc81 	.word	0x0800dc81
 800dbc0:	0800dc95 	.word	0x0800dc95
		case 2:                             /* Process valid status */
			gh->p.data.rmc.is_valid = (gh->p.term_str[0] == 'A');
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dbca:	2b41      	cmp	r3, #65	; 0x41
 800dbcc:	bf0c      	ite	eq
 800dbce:	2301      	moveq	r3, #1
 800dbd0:	2300      	movne	r3, #0
 800dbd2:	b2db      	uxtb	r3, r3
 800dbd4:	461a      	mov	r2, r3
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			break;
 800dbdc:	e07a      	b.n	800dcd4 <parse_term+0x520>
		case 7:                             /* Process ground speed in knots */
			gh->p.data.rmc.speed = parse_float_number(gh, NULL);
 800dbde:	2100      	movs	r1, #0
 800dbe0:	6878      	ldr	r0, [r7, #4]
 800dbe2:	f7ff fd81 	bl	800d6e8 <parse_float_number>
 800dbe6:	eef0 7a40 	vmov.f32	s15, s0
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
			break;
 800dbf0:	e070      	b.n	800dcd4 <parse_term+0x520>
		case 8:                             /* Process true ground coarse */
			gh->p.data.rmc.coarse = parse_float_number(gh, NULL);
 800dbf2:	2100      	movs	r1, #0
 800dbf4:	6878      	ldr	r0, [r7, #4]
 800dbf6:	f7ff fd77 	bl	800d6e8 <parse_float_number>
 800dbfa:	eef0 7a40 	vmov.f32	s15, s0
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
			break;
 800dc04:	e066      	b.n	800dcd4 <parse_term+0x520>
		case 9:                             /* Process date */
			gh->p.data.rmc.date = (uint8_t)(10 * CTN(gh->p.term_str[0]) + CTN(gh->p.term_str[1]));
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dc0c:	3b30      	subs	r3, #48	; 0x30
 800dc0e:	b2db      	uxtb	r3, r3
 800dc10:	461a      	mov	r2, r3
 800dc12:	0092      	lsls	r2, r2, #2
 800dc14:	4413      	add	r3, r2
 800dc16:	005b      	lsls	r3, r3, #1
 800dc18:	b2da      	uxtb	r2, r3
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800dc20:	4413      	add	r3, r2
 800dc22:	b2db      	uxtb	r3, r3
 800dc24:	3b30      	subs	r3, #48	; 0x30
 800dc26:	b2da      	uxtb	r2, r3
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			gh->p.data.rmc.month = (uint8_t)(10 * CTN(gh->p.term_str[2]) + CTN(gh->p.term_str[3]));
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800dc34:	3b30      	subs	r3, #48	; 0x30
 800dc36:	b2db      	uxtb	r3, r3
 800dc38:	461a      	mov	r2, r3
 800dc3a:	0092      	lsls	r2, r2, #2
 800dc3c:	4413      	add	r3, r2
 800dc3e:	005b      	lsls	r3, r3, #1
 800dc40:	b2da      	uxtb	r2, r3
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800dc48:	4413      	add	r3, r2
 800dc4a:	b2db      	uxtb	r3, r3
 800dc4c:	3b30      	subs	r3, #48	; 0x30
 800dc4e:	b2da      	uxtb	r2, r3
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
			gh->p.data.rmc.year = (uint8_t)(10 * CTN(gh->p.term_str[4]) + CTN(gh->p.term_str[5]));
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800dc5c:	3b30      	subs	r3, #48	; 0x30
 800dc5e:	b2db      	uxtb	r3, r3
 800dc60:	461a      	mov	r2, r3
 800dc62:	0092      	lsls	r2, r2, #2
 800dc64:	4413      	add	r3, r2
 800dc66:	005b      	lsls	r3, r3, #1
 800dc68:	b2da      	uxtb	r2, r3
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800dc70:	4413      	add	r3, r2
 800dc72:	b2db      	uxtb	r3, r3
 800dc74:	3b30      	subs	r3, #48	; 0x30
 800dc76:	b2da      	uxtb	r2, r3
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
			break;
 800dc7e:	e029      	b.n	800dcd4 <parse_term+0x520>
		case 10:                            /* Process magnetic variation */
			gh->p.data.rmc.variation = parse_float_number(gh, NULL);
 800dc80:	2100      	movs	r1, #0
 800dc82:	6878      	ldr	r0, [r7, #4]
 800dc84:	f7ff fd30 	bl	800d6e8 <parse_float_number>
 800dc88:	eef0 7a40 	vmov.f32	s15, s0
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
			break;
 800dc92:	e01f      	b.n	800dcd4 <parse_term+0x520>
		case 11:                            /* Process magnetic variation east/west */
			if (gh->p.term_str[0] == 'W' || gh->p.term_str[0] == 'w') {
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dc9a:	2b57      	cmp	r3, #87	; 0x57
 800dc9c:	d004      	beq.n	800dca8 <parse_term+0x4f4>
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dca4:	2b77      	cmp	r3, #119	; 0x77
 800dca6:	d114      	bne.n	800dcd2 <parse_term+0x51e>
				gh->p.data.rmc.variation = -gh->p.data.rmc.variation;
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 800dcae:	eef1 7a67 	vneg.f32	s15, s15
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
			}
			break;
 800dcb8:	e00b      	b.n	800dcd2 <parse_term+0x51e>
		default: break;
 800dcba:	bf00      	nop
 800dcbc:	e00a      	b.n	800dcd4 <parse_term+0x520>
			break;
 800dcbe:	bf00      	nop
 800dcc0:	e008      	b.n	800dcd4 <parse_term+0x520>
			break;
 800dcc2:	bf00      	nop
 800dcc4:	e006      	b.n	800dcd4 <parse_term+0x520>
			break;
 800dcc6:	bf00      	nop
 800dcc8:	e004      	b.n	800dcd4 <parse_term+0x520>
		default: break;
		}
#endif /* GPS_CFG_STATEMENT_GPRMC */
	}
 800dcca:	bf00      	nop
 800dccc:	e002      	b.n	800dcd4 <parse_term+0x520>
		default: break;
 800dcce:	bf00      	nop
 800dcd0:	e000      	b.n	800dcd4 <parse_term+0x520>
			break;
 800dcd2:	bf00      	nop
	return 1;
 800dcd4:	2301      	movs	r3, #1
}
 800dcd6:	4618      	mov	r0, r3
 800dcd8:	3708      	adds	r7, #8
 800dcda:	46bd      	mov	sp, r7
 800dcdc:	bd80      	pop	{r7, pc}
 800dcde:	bf00      	nop

0800dce0 <check_crc>:
 * \brief           Compare calculated CRC with received CRC
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
check_crc(gps_t* gh) {
 800dce0:	b480      	push	{r7}
 800dce2:	b085      	sub	sp, #20
 800dce4:	af00      	add	r7, sp, #0
 800dce6:	6078      	str	r0, [r7, #4]
	uint8_t crc;
	crc = (uint8_t)((CHTN(gh->p.term_str[0]) & 0x0F) << 0x04) | (CHTN(gh->p.term_str[1]) & 0x0F);   /* Convert received CRC from string (hex) to number */
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dcee:	2b2f      	cmp	r3, #47	; 0x2f
 800dcf0:	d90b      	bls.n	800dd0a <check_crc+0x2a>
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dcf8:	2b39      	cmp	r3, #57	; 0x39
 800dcfa:	d806      	bhi.n	800dd0a <check_crc+0x2a>
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dd02:	011b      	lsls	r3, r3, #4
 800dd04:	b2db      	uxtb	r3, r3
 800dd06:	b25a      	sxtb	r2, r3
 800dd08:	e026      	b.n	800dd58 <check_crc+0x78>
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dd10:	2b60      	cmp	r3, #96	; 0x60
 800dd12:	d90d      	bls.n	800dd30 <check_crc+0x50>
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dd1a:	2b7a      	cmp	r3, #122	; 0x7a
 800dd1c:	d808      	bhi.n	800dd30 <check_crc+0x50>
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dd24:	3b57      	subs	r3, #87	; 0x57
 800dd26:	b2db      	uxtb	r3, r3
 800dd28:	011b      	lsls	r3, r3, #4
 800dd2a:	b2db      	uxtb	r3, r3
 800dd2c:	b25a      	sxtb	r2, r3
 800dd2e:	e013      	b.n	800dd58 <check_crc+0x78>
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dd36:	2b40      	cmp	r3, #64	; 0x40
 800dd38:	d90d      	bls.n	800dd56 <check_crc+0x76>
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dd40:	2b5a      	cmp	r3, #90	; 0x5a
 800dd42:	d808      	bhi.n	800dd56 <check_crc+0x76>
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dd4a:	3b37      	subs	r3, #55	; 0x37
 800dd4c:	b2db      	uxtb	r3, r3
 800dd4e:	011b      	lsls	r3, r3, #4
 800dd50:	b2db      	uxtb	r3, r3
 800dd52:	b25a      	sxtb	r2, r3
 800dd54:	e000      	b.n	800dd58 <check_crc+0x78>
 800dd56:	2200      	movs	r2, #0
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800dd5e:	2b2f      	cmp	r3, #47	; 0x2f
 800dd60:	d90c      	bls.n	800dd7c <check_crc+0x9c>
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800dd68:	2b39      	cmp	r3, #57	; 0x39
 800dd6a:	d807      	bhi.n	800dd7c <check_crc+0x9c>
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800dd72:	b25b      	sxtb	r3, r3
 800dd74:	f003 030f 	and.w	r3, r3, #15
 800dd78:	b25b      	sxtb	r3, r3
 800dd7a:	e028      	b.n	800ddce <check_crc+0xee>
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800dd82:	2b60      	cmp	r3, #96	; 0x60
 800dd84:	d90e      	bls.n	800dda4 <check_crc+0xc4>
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800dd8c:	2b7a      	cmp	r3, #122	; 0x7a
 800dd8e:	d809      	bhi.n	800dda4 <check_crc+0xc4>
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800dd96:	3b57      	subs	r3, #87	; 0x57
 800dd98:	b2db      	uxtb	r3, r3
 800dd9a:	b25b      	sxtb	r3, r3
 800dd9c:	f003 030f 	and.w	r3, r3, #15
 800dda0:	b25b      	sxtb	r3, r3
 800dda2:	e014      	b.n	800ddce <check_crc+0xee>
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800ddaa:	2b40      	cmp	r3, #64	; 0x40
 800ddac:	d90e      	bls.n	800ddcc <check_crc+0xec>
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800ddb4:	2b5a      	cmp	r3, #90	; 0x5a
 800ddb6:	d809      	bhi.n	800ddcc <check_crc+0xec>
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800ddbe:	3b37      	subs	r3, #55	; 0x37
 800ddc0:	b2db      	uxtb	r3, r3
 800ddc2:	b25b      	sxtb	r3, r3
 800ddc4:	f003 030f 	and.w	r3, r3, #15
 800ddc8:	b25b      	sxtb	r3, r3
 800ddca:	e000      	b.n	800ddce <check_crc+0xee>
 800ddcc:	2300      	movs	r3, #0
 800ddce:	4313      	orrs	r3, r2
 800ddd0:	b25b      	sxtb	r3, r3
 800ddd2:	73fb      	strb	r3, [r7, #15]
	return gh->p.crc_calc == crc;               /* They must match! */
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800ddda:	7bfa      	ldrb	r2, [r7, #15]
 800dddc:	429a      	cmp	r2, r3
 800ddde:	bf0c      	ite	eq
 800dde0:	2301      	moveq	r3, #1
 800dde2:	2300      	movne	r3, #0
 800dde4:	b2db      	uxtb	r3, r3
}
 800dde6:	4618      	mov	r0, r3
 800dde8:	3714      	adds	r7, #20
 800ddea:	46bd      	mov	sp, r7
 800ddec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf0:	4770      	bx	lr

0800ddf2 <copy_from_tmp_memory>:
 * \brief           Copy temporary memory to user memory
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
copy_from_tmp_memory(gps_t* gh) {
 800ddf2:	b580      	push	{r7, lr}
 800ddf4:	b082      	sub	sp, #8
 800ddf6:	af00      	add	r7, sp, #0
 800ddf8:	6078      	str	r0, [r7, #4]
	if (0) {
#if GPS_CFG_STATEMENT_GPGGA
	} else if (gh->p.stat == STAT_GGA) {
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800de00:	2b01      	cmp	r3, #1
 800de02:	d129      	bne.n	800de58 <copy_from_tmp_memory+0x66>
		gh->latitude = gh->p.data.gga.latitude;
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	601a      	str	r2, [r3, #0]
		gh->longitude = gh->p.data.gga.longitude;
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	605a      	str	r2, [r3, #4]
		gh->altitude = gh->p.data.gga.altitude;
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	609a      	str	r2, [r3, #8]
		gh->geo_sep = gh->p.data.gga.geo_sep;
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	60da      	str	r2, [r3, #12]
		gh->sats_in_use = gh->p.data.gga.sats_in_use;
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	741a      	strb	r2, [r3, #16]
		gh->fix = gh->p.data.gga.fix;
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	f893 2069 	ldrb.w	r2, [r3, #105]	; 0x69
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	745a      	strb	r2, [r3, #17]
		gh->hours = gh->p.data.gga.hours;
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	f893 206a 	ldrb.w	r2, [r3, #106]	; 0x6a
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	749a      	strb	r2, [r3, #18]
		gh->minutes = gh->p.data.gga.minutes;
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	f893 206b 	ldrb.w	r2, [r3, #107]	; 0x6b
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	74da      	strb	r2, [r3, #19]
		gh->seconds = gh->p.data.gga.seconds;
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	f893 206c 	ldrb.w	r2, [r3, #108]	; 0x6c
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	751a      	strb	r2, [r3, #20]
 800de56:	e055      	b.n	800df04 <copy_from_tmp_memory+0x112>
#endif /* GPS_CFG_STATEMENT_GPGGA */
#if GPS_CFG_STATEMENT_GPGSA
	} else if (gh->p.stat == STAT_GSA) {
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800de5e:	2b02      	cmp	r3, #2
 800de60:	d11b      	bne.n	800de9a <copy_from_tmp_memory+0xa8>
		gh->dop_h = gh->p.data.gsa.dop_h;
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	619a      	str	r2, [r3, #24]
		gh->dop_p = gh->p.data.gsa.dop_p;
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	621a      	str	r2, [r3, #32]
		gh->dop_v = gh->p.data.gsa.dop_v;
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	61da      	str	r2, [r3, #28]
		gh->fix_mode = gh->p.data.gsa.fix_mode;
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		memcpy(gh->satellites_ids, gh->p.data.gsa.satellites_ids, sizeof(gh->satellites_ids));
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	f103 0025 	add.w	r0, r3, #37	; 0x25
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	3365      	adds	r3, #101	; 0x65
 800de90:	220c      	movs	r2, #12
 800de92:	4619      	mov	r1, r3
 800de94:	f004 fb60 	bl	8012558 <memcpy>
 800de98:	e034      	b.n	800df04 <copy_from_tmp_memory+0x112>
#endif /* GPS_CFG_STATEMENT_GPGSA */
#if GPS_CFG_STATEMENT_GPGSV
	} else if (gh->p.stat == STAT_GSV) {
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dea0:	2b03      	cmp	r3, #3
 800dea2:	d106      	bne.n	800deb2 <copy_from_tmp_memory+0xc0>
		gh->sats_in_view = gh->p.data.gsv.sats_in_view;
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800deb0:	e028      	b.n	800df04 <copy_from_tmp_memory+0x112>
#endif /* GPS_CFG_STATEMENT_GPGSV */
#if GPS_CFG_STATEMENT_GPRMC
	} else if (gh->p.stat == STAT_RMC) {
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800deb8:	2b04      	cmp	r3, #4
 800deba:	d123      	bne.n	800df04 <copy_from_tmp_memory+0x112>
		gh->coarse = gh->p.data.rmc.coarse;
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	639a      	str	r2, [r3, #56]	; 0x38
		gh->is_valid = gh->p.data.rmc.is_valid;
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
		gh->speed = gh->p.data.rmc.speed;
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	635a      	str	r2, [r3, #52]	; 0x34
		gh->variation = gh->p.data.rmc.variation;
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	63da      	str	r2, [r3, #60]	; 0x3c
		gh->date = gh->p.data.rmc.date;
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		gh->month = gh->p.data.rmc.month;
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	f893 205a 	ldrb.w	r2, [r3, #90]	; 0x5a
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
		gh->year = gh->p.data.rmc.year;
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	f893 205b 	ldrb.w	r2, [r3, #91]	; 0x5b
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
#endif /* GPS_CFG_STATEMENT_GPRMC */
	}
	return 1;
 800df04:	2301      	movs	r3, #1
}
 800df06:	4618      	mov	r0, r3
 800df08:	3708      	adds	r7, #8
 800df0a:	46bd      	mov	sp, r7
 800df0c:	bd80      	pop	{r7, pc}

0800df0e <gps_init>:
 * \brief           Init GPS handle
 * \param[in]       gh: GPS handle structure
 * \return          `1` on success, `0` otherwise
 */
uint8_t
gps_init(gps_t* gh) {
 800df0e:	b580      	push	{r7, lr}
 800df10:	b082      	sub	sp, #8
 800df12:	af00      	add	r7, sp, #0
 800df14:	6078      	str	r0, [r7, #4]
	memset(gh, 0x00, sizeof(*gh));              /* Reset structure */
 800df16:	2274      	movs	r2, #116	; 0x74
 800df18:	2100      	movs	r1, #0
 800df1a:	6878      	ldr	r0, [r7, #4]
 800df1c:	f004 fb27 	bl	801256e <memset>
	return 1;
 800df20:	2301      	movs	r3, #1
}
 800df22:	4618      	mov	r0, r3
 800df24:	3708      	adds	r7, #8
 800df26:	46bd      	mov	sp, r7
 800df28:	bd80      	pop	{r7, pc}

0800df2a <gps_process>:
 * \param[in]       data: Received data
 * \param[in]       len: Number of bytes to process
 * \return          `1` on success, `0` otherwise
 */
uint8_t
gps_process(gps_t* gh, const void* data, size_t len) {
 800df2a:	b580      	push	{r7, lr}
 800df2c:	b086      	sub	sp, #24
 800df2e:	af00      	add	r7, sp, #0
 800df30:	60f8      	str	r0, [r7, #12]
 800df32:	60b9      	str	r1, [r7, #8]
 800df34:	607a      	str	r2, [r7, #4]
	const uint8_t* d = data;
 800df36:	68bb      	ldr	r3, [r7, #8]
 800df38:	617b      	str	r3, [r7, #20]

	while (len--) {                             /* Process all bytes */
 800df3a:	e0a4      	b.n	800e086 <gps_process+0x15c>
		if (*d == '$') {                        /* Check for beginning of NMEA line */
 800df3c:	697b      	ldr	r3, [r7, #20]
 800df3e:	781b      	ldrb	r3, [r3, #0]
 800df40:	2b24      	cmp	r3, #36	; 0x24
 800df42:	d125      	bne.n	800df90 <gps_process+0x66>
			memset(&gh->p, 0x00, sizeof(gh->p));/* Reset private memory */
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	3344      	adds	r3, #68	; 0x44
 800df48:	2230      	movs	r2, #48	; 0x30
 800df4a:	2100      	movs	r1, #0
 800df4c:	4618      	mov	r0, r3
 800df4e:	f004 fb0e 	bl	801256e <memset>
			TERM_ADD(gh, *d);                   /* Add character to term */
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800df58:	2b0b      	cmp	r3, #11
 800df5a:	f200 8091 	bhi.w	800e080 <gps_process+0x156>
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800df64:	1c5a      	adds	r2, r3, #1
 800df66:	b2d1      	uxtb	r1, r2
 800df68:	68fa      	ldr	r2, [r7, #12]
 800df6a:	f882 1052 	strb.w	r1, [r2, #82]	; 0x52
 800df6e:	4619      	mov	r1, r3
 800df70:	697b      	ldr	r3, [r7, #20]
 800df72:	781a      	ldrb	r2, [r3, #0]
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	440b      	add	r3, r1
 800df78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800df82:	461a      	mov	r2, r3
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	4413      	add	r3, r2
 800df88:	2200      	movs	r2, #0
 800df8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800df8e:	e077      	b.n	800e080 <gps_process+0x156>
		} else if (*d == ',') {                 /* Term separator character */
 800df90:	697b      	ldr	r3, [r7, #20]
 800df92:	781b      	ldrb	r3, [r3, #0]
 800df94:	2b2c      	cmp	r3, #44	; 0x2c
 800df96:	d11d      	bne.n	800dfd4 <gps_process+0xaa>
			parse_term(gh);                     /* Parse term we have currently in memory */
 800df98:	68f8      	ldr	r0, [r7, #12]
 800df9a:	f7ff fc0b 	bl	800d7b4 <parse_term>
			CRC_ADD(gh, *d);                    /* Add character to CRC computation */
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 800dfa4:	697b      	ldr	r3, [r7, #20]
 800dfa6:	781b      	ldrb	r3, [r3, #0]
 800dfa8:	4053      	eors	r3, r2
 800dfaa:	b2da      	uxtb	r2, r3
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			TERM_NEXT(gh);                      /* Start with next term */
 800dfb2:	68fb      	ldr	r3, [r7, #12]
 800dfb4:	2200      	movs	r2, #0
 800dfb6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	2200      	movs	r2, #0
 800dfbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800dfc8:	3301      	adds	r3, #1
 800dfca:	b2da      	uxtb	r2, r3
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 800dfd2:	e055      	b.n	800e080 <gps_process+0x156>
		} else if (*d == '*') {                 /* Start indicates end of data for CRC computation */
 800dfd4:	697b      	ldr	r3, [r7, #20]
 800dfd6:	781b      	ldrb	r3, [r3, #0]
 800dfd8:	2b2a      	cmp	r3, #42	; 0x2a
 800dfda:	d117      	bne.n	800e00c <gps_process+0xe2>
			parse_term(gh);                     /* Parse term we have currently in memory */
 800dfdc:	68f8      	ldr	r0, [r7, #12]
 800dfde:	f7ff fbe9 	bl	800d7b4 <parse_term>
			gh->p.star = 1;                     /* STAR detected */
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	2201      	movs	r2, #1
 800dfe6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			TERM_NEXT(gh);                      /* Start with next term */
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	2200      	movs	r2, #0
 800dfee:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	2200      	movs	r2, #0
 800dff6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800e000:	3301      	adds	r3, #1
 800e002:	b2da      	uxtb	r2, r3
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 800e00a:	e039      	b.n	800e080 <gps_process+0x156>
		} else if (*d == '\r') {
 800e00c:	697b      	ldr	r3, [r7, #20]
 800e00e:	781b      	ldrb	r3, [r3, #0]
 800e010:	2b0d      	cmp	r3, #13
 800e012:	d109      	bne.n	800e028 <gps_process+0xfe>
			if (check_crc(gh)) {                /* Check for CRC result */
 800e014:	68f8      	ldr	r0, [r7, #12]
 800e016:	f7ff fe63 	bl	800dce0 <check_crc>
 800e01a:	4603      	mov	r3, r0
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d02f      	beq.n	800e080 <gps_process+0x156>
				/* CRC is OK, in theory we can copy data from statements to user data */
				copy_from_tmp_memory(gh);       /* Copy memory from temporary to user memory */
 800e020:	68f8      	ldr	r0, [r7, #12]
 800e022:	f7ff fee6 	bl	800ddf2 <copy_from_tmp_memory>
 800e026:	e02b      	b.n	800e080 <gps_process+0x156>
			}
		} else {
			if (!gh->p.star) {                  /* Add to CRC only if star not yet detected */
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d109      	bne.n	800e046 <gps_process+0x11c>
				CRC_ADD(gh, *d);                /* Add to CRC */
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 800e038:	697b      	ldr	r3, [r7, #20]
 800e03a:	781b      	ldrb	r3, [r3, #0]
 800e03c:	4053      	eors	r3, r2
 800e03e:	b2da      	uxtb	r2, r3
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			TERM_ADD(gh, *d);                   /* Add character to term */
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800e04c:	2b0b      	cmp	r3, #11
 800e04e:	d817      	bhi.n	800e080 <gps_process+0x156>
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800e056:	1c5a      	adds	r2, r3, #1
 800e058:	b2d1      	uxtb	r1, r2
 800e05a:	68fa      	ldr	r2, [r7, #12]
 800e05c:	f882 1052 	strb.w	r1, [r2, #82]	; 0x52
 800e060:	4619      	mov	r1, r3
 800e062:	697b      	ldr	r3, [r7, #20]
 800e064:	781a      	ldrb	r2, [r3, #0]
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	440b      	add	r3, r1
 800e06a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800e074:	461a      	mov	r2, r3
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	4413      	add	r3, r2
 800e07a:	2200      	movs	r2, #0
 800e07c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
		}
		d++;                                    /* Process next character */
 800e080:	697b      	ldr	r3, [r7, #20]
 800e082:	3301      	adds	r3, #1
 800e084:	617b      	str	r3, [r7, #20]
	while (len--) {                             /* Process all bytes */
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	1e5a      	subs	r2, r3, #1
 800e08a:	607a      	str	r2, [r7, #4]
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	f47f af55 	bne.w	800df3c <gps_process+0x12>
	}
	return 1;
 800e092:	2301      	movs	r3, #1
}
 800e094:	4618      	mov	r0, r3
 800e096:	3718      	adds	r7, #24
 800e098:	46bd      	mov	sp, r7
 800e09a:	bd80      	pop	{r7, pc}

0800e09c <gps_to_speed>:
 * \param[in]       sik: Speed in knots, received from GPS NMEA statement
 * \param[in]       ts: Target speed to convert to from knots
 * \return          Speed calculated from knots
 */
gps_float_t
gps_to_speed(gps_float_t sik, gps_speed_t ts) {
 800e09c:	b480      	push	{r7}
 800e09e:	b083      	sub	sp, #12
 800e0a0:	af00      	add	r7, sp, #0
 800e0a2:	ed87 0a01 	vstr	s0, [r7, #4]
 800e0a6:	4603      	mov	r3, r0
 800e0a8:	70fb      	strb	r3, [r7, #3]
	switch (ts) {
 800e0aa:	78fb      	ldrb	r3, [r7, #3]
 800e0ac:	2b0e      	cmp	r3, #14
 800e0ae:	f200 8086 	bhi.w	800e1be <gps_to_speed+0x122>
 800e0b2:	a201      	add	r2, pc, #4	; (adr r2, 800e0b8 <gps_to_speed+0x1c>)
 800e0b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0b8:	0800e0f5 	.word	0x0800e0f5
 800e0bc:	0800e103 	.word	0x0800e103
 800e0c0:	0800e111 	.word	0x0800e111
 800e0c4:	0800e11f 	.word	0x0800e11f
 800e0c8:	0800e12d 	.word	0x0800e12d
 800e0cc:	0800e13b 	.word	0x0800e13b
 800e0d0:	0800e149 	.word	0x0800e149
 800e0d4:	0800e157 	.word	0x0800e157
 800e0d8:	0800e165 	.word	0x0800e165
 800e0dc:	0800e173 	.word	0x0800e173
 800e0e0:	0800e181 	.word	0x0800e181
 800e0e4:	0800e18f 	.word	0x0800e18f
 800e0e8:	0800e19d 	.word	0x0800e19d
 800e0ec:	0800e1ab 	.word	0x0800e1ab
 800e0f0:	0800e1b9 	.word	0x0800e1b9
	case gps_speed_kps:     return FLT(sik * FLT(0.000514));
 800e0f4:	edd7 7a01 	vldr	s15, [r7, #4]
 800e0f8:	ed9f 7a35 	vldr	s14, [pc, #212]	; 800e1d0 <gps_to_speed+0x134>
 800e0fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e100:	e05f      	b.n	800e1c2 <gps_to_speed+0x126>
	case gps_speed_kph:     return FLT(sik * FLT(1.852));
 800e102:	edd7 7a01 	vldr	s15, [r7, #4]
 800e106:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800e1d4 <gps_to_speed+0x138>
 800e10a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e10e:	e058      	b.n	800e1c2 <gps_to_speed+0x126>
	case gps_speed_mps:     return FLT(sik * FLT(0.5144));
 800e110:	edd7 7a01 	vldr	s15, [r7, #4]
 800e114:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800e1d8 <gps_to_speed+0x13c>
 800e118:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e11c:	e051      	b.n	800e1c2 <gps_to_speed+0x126>
	case gps_speed_mpm:     return FLT(sik * FLT(30.87));
 800e11e:	edd7 7a01 	vldr	s15, [r7, #4]
 800e122:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 800e1dc <gps_to_speed+0x140>
 800e126:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e12a:	e04a      	b.n	800e1c2 <gps_to_speed+0x126>

	case gps_speed_mips:    return FLT(sik * FLT(0.0003197));
 800e12c:	edd7 7a01 	vldr	s15, [r7, #4]
 800e130:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 800e1e0 <gps_to_speed+0x144>
 800e134:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e138:	e043      	b.n	800e1c2 <gps_to_speed+0x126>
	case gps_speed_mph:     return FLT(sik * FLT(1.151));
 800e13a:	edd7 7a01 	vldr	s15, [r7, #4]
 800e13e:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800e1e4 <gps_to_speed+0x148>
 800e142:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e146:	e03c      	b.n	800e1c2 <gps_to_speed+0x126>
	case gps_speed_fps:     return FLT(sik * FLT(1.688));
 800e148:	edd7 7a01 	vldr	s15, [r7, #4]
 800e14c:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800e1e8 <gps_to_speed+0x14c>
 800e150:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e154:	e035      	b.n	800e1c2 <gps_to_speed+0x126>
	case gps_speed_fpm:     return FLT(sik * FLT(101.3));
 800e156:	edd7 7a01 	vldr	s15, [r7, #4]
 800e15a:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800e1ec <gps_to_speed+0x150>
 800e15e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e162:	e02e      	b.n	800e1c2 <gps_to_speed+0x126>

	case gps_speed_mpk:     return FLT(sik * FLT(32.4));
 800e164:	edd7 7a01 	vldr	s15, [r7, #4]
 800e168:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800e1f0 <gps_to_speed+0x154>
 800e16c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e170:	e027      	b.n	800e1c2 <gps_to_speed+0x126>
	case gps_speed_spk:     return FLT(sik * FLT(1944.0));
 800e172:	edd7 7a01 	vldr	s15, [r7, #4]
 800e176:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800e1f4 <gps_to_speed+0x158>
 800e17a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e17e:	e020      	b.n	800e1c2 <gps_to_speed+0x126>
	case gps_speed_sp100m:  return FLT(sik * FLT(194.4));
 800e180:	edd7 7a01 	vldr	s15, [r7, #4]
 800e184:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800e1f8 <gps_to_speed+0x15c>
 800e188:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e18c:	e019      	b.n	800e1c2 <gps_to_speed+0x126>
	case gps_speed_mipm:    return FLT(sik * FLT(52.14));
 800e18e:	edd7 7a01 	vldr	s15, [r7, #4]
 800e192:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800e1fc <gps_to_speed+0x160>
 800e196:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e19a:	e012      	b.n	800e1c2 <gps_to_speed+0x126>
	case gps_speed_spm:     return FLT(sik * FLT(3128.0));
 800e19c:	edd7 7a01 	vldr	s15, [r7, #4]
 800e1a0:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800e200 <gps_to_speed+0x164>
 800e1a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e1a8:	e00b      	b.n	800e1c2 <gps_to_speed+0x126>
	case gps_speed_sp100y:  return FLT(sik * FLT(177.7));
 800e1aa:	edd7 7a01 	vldr	s15, [r7, #4]
 800e1ae:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800e204 <gps_to_speed+0x168>
 800e1b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e1b6:	e004      	b.n	800e1c2 <gps_to_speed+0x126>

	case gps_speed_smph:    return FLT(sik * FLT(1.0));
 800e1b8:	edd7 7a01 	vldr	s15, [r7, #4]
 800e1bc:	e001      	b.n	800e1c2 <gps_to_speed+0x126>
	default: return 0;
 800e1be:	eddf 7a12 	vldr	s15, [pc, #72]	; 800e208 <gps_to_speed+0x16c>
	}
}
 800e1c2:	eeb0 0a67 	vmov.f32	s0, s15
 800e1c6:	370c      	adds	r7, #12
 800e1c8:	46bd      	mov	sp, r7
 800e1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ce:	4770      	bx	lr
 800e1d0:	3a06bdf5 	.word	0x3a06bdf5
 800e1d4:	3fed0e56 	.word	0x3fed0e56
 800e1d8:	3f03afb8 	.word	0x3f03afb8
 800e1dc:	41f6f5c3 	.word	0x41f6f5c3
 800e1e0:	39a79d68 	.word	0x39a79d68
 800e1e4:	3f9353f8 	.word	0x3f9353f8
 800e1e8:	3fd81062 	.word	0x3fd81062
 800e1ec:	42ca999a 	.word	0x42ca999a
 800e1f0:	4201999a 	.word	0x4201999a
 800e1f4:	44f30000 	.word	0x44f30000
 800e1f8:	43426666 	.word	0x43426666
 800e1fc:	42508f5c 	.word	0x42508f5c
 800e200:	45438000 	.word	0x45438000
 800e204:	4331b333 	.word	0x4331b333
 800e208:	00000000 	.word	0x00000000

0800e20c <ce_set>:
extern SPI_HandleTypeDef hspi1;
static const uint8_t rx_address[5] = { 1, 2, 3, 4, 5 };
static const uint8_t tx_address[5] = { 1, 2, 3, 4, 6 };
nrf24l01 nrf;

static void ce_set(nrf24l01* dev) {
 800e20c:	b580      	push	{r7, lr}
 800e20e:	b082      	sub	sp, #8
 800e210:	af00      	add	r7, sp, #0
 800e212:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(dev->config.ce_port, dev->config.ce_pin, GPIO_PIN_SET);
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e21c:	2201      	movs	r2, #1
 800e21e:	4619      	mov	r1, r3
 800e220:	f7f4 f96e 	bl	8002500 <HAL_GPIO_WritePin>
}
 800e224:	bf00      	nop
 800e226:	3708      	adds	r7, #8
 800e228:	46bd      	mov	sp, r7
 800e22a:	bd80      	pop	{r7, pc}

0800e22c <ce_reset>:

static void ce_reset(nrf24l01* dev) {
 800e22c:	b580      	push	{r7, lr}
 800e22e:	b082      	sub	sp, #8
 800e230:	af00      	add	r7, sp, #0
 800e232:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(dev->config.ce_port, dev->config.ce_pin, GPIO_PIN_RESET);
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e23c:	2200      	movs	r2, #0
 800e23e:	4619      	mov	r1, r3
 800e240:	f7f4 f95e 	bl	8002500 <HAL_GPIO_WritePin>
}
 800e244:	bf00      	nop
 800e246:	3708      	adds	r7, #8
 800e248:	46bd      	mov	sp, r7
 800e24a:	bd80      	pop	{r7, pc}

0800e24c <csn_set>:

static void csn_set(nrf24l01* dev) {
 800e24c:	b580      	push	{r7, lr}
 800e24e:	b082      	sub	sp, #8
 800e250:	af00      	add	r7, sp, #0
 800e252:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(dev->config.csn_port, dev->config.csn_pin, GPIO_PIN_SET);
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	69d8      	ldr	r0, [r3, #28]
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	8c1b      	ldrh	r3, [r3, #32]
 800e25c:	2201      	movs	r2, #1
 800e25e:	4619      	mov	r1, r3
 800e260:	f7f4 f94e 	bl	8002500 <HAL_GPIO_WritePin>
}
 800e264:	bf00      	nop
 800e266:	3708      	adds	r7, #8
 800e268:	46bd      	mov	sp, r7
 800e26a:	bd80      	pop	{r7, pc}

0800e26c <csn_reset>:

static void csn_reset(nrf24l01* dev) {
 800e26c:	b580      	push	{r7, lr}
 800e26e:	b082      	sub	sp, #8
 800e270:	af00      	add	r7, sp, #0
 800e272:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(dev->config.csn_port, dev->config.csn_pin, GPIO_PIN_RESET);
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	69d8      	ldr	r0, [r3, #28]
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	8c1b      	ldrh	r3, [r3, #32]
 800e27c:	2200      	movs	r2, #0
 800e27e:	4619      	mov	r1, r3
 800e280:	f7f4 f93e 	bl	8002500 <HAL_GPIO_WritePin>
}
 800e284:	bf00      	nop
 800e286:	3708      	adds	r7, #8
 800e288:	46bd      	mov	sp, r7
 800e28a:	bd80      	pop	{r7, pc}

0800e28c <nrf_set_config>:

void nrf_set_config(nrf24l01_config *config) {
 800e28c:	b480      	push	{r7}
 800e28e:	b083      	sub	sp, #12
 800e290:	af00      	add	r7, sp, #0
 800e292:	6078      	str	r0, [r7, #4]
	config->data_rate = NRF_DATA_RATE_1MBPS;
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	2200      	movs	r2, #0
 800e298:	701a      	strb	r2, [r3, #0]
	config->tx_power = NRF_TX_PWR_0dBm;
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	2203      	movs	r2, #3
 800e29e:	705a      	strb	r2, [r3, #1]
	config->crc_width = NRF_CRC_WIDTH_1B;
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	2200      	movs	r2, #0
 800e2a4:	709a      	strb	r2, [r3, #2]
	config->addr_width = NRF_ADDR_WIDTH_5;
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	2203      	movs	r2, #3
 800e2aa:	70da      	strb	r2, [r3, #3]
	config->retransmit_count = 15;   // maximum is 15 times
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	220f      	movs	r2, #15
 800e2b0:	715a      	strb	r2, [r3, #5]
	config->retransmit_delay = 0x0F; // 4000us, LSB:250us
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	220f      	movs	r2, #15
 800e2b6:	719a      	strb	r2, [r3, #6]
	config->rf_channel = 0;
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	2200      	movs	r2, #0
 800e2bc:	71da      	strb	r2, [r3, #7]
	config->rx_address = rx_address;
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	4a12      	ldr	r2, [pc, #72]	; (800e30c <nrf_set_config+0x80>)
 800e2c2:	609a      	str	r2, [r3, #8]
	config->tx_address = tx_address;
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	4a12      	ldr	r2, [pc, #72]	; (800e310 <nrf_set_config+0x84>)
 800e2c8:	60da      	str	r2, [r3, #12]

	config->spi = &hspi1;
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	4a11      	ldr	r2, [pc, #68]	; (800e314 <nrf_set_config+0x88>)
 800e2ce:	615a      	str	r2, [r3, #20]
	config->spi_timeout = 10; // milliseconds
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	220a      	movs	r2, #10
 800e2d4:	619a      	str	r2, [r3, #24]
	config->csn_port = NRF24_CSN_GPIO_Port;
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	4a0f      	ldr	r2, [pc, #60]	; (800e318 <nrf_set_config+0x8c>)
 800e2da:	61da      	str	r2, [r3, #28]
	config->csn_pin = NRF24_CSN_Pin;
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800e2e2:	841a      	strh	r2, [r3, #32]
	config->ce_port = NRF24_CE_GPIO_Port;
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	4a0c      	ldr	r2, [pc, #48]	; (800e318 <nrf_set_config+0x8c>)
 800e2e8:	625a      	str	r2, [r3, #36]	; 0x24
	config->ce_pin = NRF24_CE_Pin;
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800e2f0:	851a      	strh	r2, [r3, #40]	; 0x28
	config->irq_port = NRF24_IRQ_GPIO_Port;
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	4a08      	ldr	r2, [pc, #32]	; (800e318 <nrf_set_config+0x8c>)
 800e2f6:	62da      	str	r2, [r3, #44]	; 0x2c
	config->irq_pin = NRF24_IRQ_Pin;
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800e2fe:	861a      	strh	r2, [r3, #48]	; 0x30
}
 800e300:	bf00      	nop
 800e302:	370c      	adds	r7, #12
 800e304:	46bd      	mov	sp, r7
 800e306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e30a:	4770      	bx	lr
 800e30c:	0802853c 	.word	0x0802853c
 800e310:	08028544 	.word	0x08028544
 800e314:	20008568 	.word	0x20008568
 800e318:	40021000 	.word	0x40021000

0800e31c <nrf_init>:

NRF_RESULT nrf_init(nrf24l01* dev, nrf24l01_config* config) {
 800e31c:	b5b0      	push	{r4, r5, r7, lr}
 800e31e:	b084      	sub	sp, #16
 800e320:	af00      	add	r7, sp, #0
 800e322:	6078      	str	r0, [r7, #4]
 800e324:	6039      	str	r1, [r7, #0]
	dev->config = *config;
 800e326:	687a      	ldr	r2, [r7, #4]
 800e328:	683b      	ldr	r3, [r7, #0]
 800e32a:	4614      	mov	r4, r2
 800e32c:	461d      	mov	r5, r3
 800e32e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e330:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e332:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e334:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e336:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e338:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e33a:	682b      	ldr	r3, [r5, #0]
 800e33c:	6023      	str	r3, [r4, #0]

	ce_reset(dev);
 800e33e:	6878      	ldr	r0, [r7, #4]
 800e340:	f7ff ff74 	bl	800e22c <ce_reset>
	csn_reset(dev);
 800e344:	6878      	ldr	r0, [r7, #4]
 800e346:	f7ff ff91 	bl	800e26c <csn_reset>

	nrf_power_up(dev, true);
 800e34a:	2101      	movs	r1, #1
 800e34c:	6878      	ldr	r0, [r7, #4]
 800e34e:	f000 fc8d 	bl	800ec6c <nrf_power_up>

	uint8_t config_reg = 0;
 800e352:	2300      	movs	r3, #0
 800e354:	73fb      	strb	r3, [r7, #15]

	swvPrintLn("NRF24 Init start");
 800e356:	4841      	ldr	r0, [pc, #260]	; (800e45c <nrf_init+0x140>)
 800e358:	f7fd faec 	bl	800b934 <swvPrintLn>
	while ((config_reg & 2) == 0) { // wait for powerup
 800e35c:	e006      	b.n	800e36c <nrf_init+0x50>
		nrf_read_register(dev, NRF_CONFIG, &config_reg);
 800e35e:	f107 030f 	add.w	r3, r7, #15
 800e362:	461a      	mov	r2, r3
 800e364:	2100      	movs	r1, #0
 800e366:	6878      	ldr	r0, [r7, #4]
 800e368:	f000 f9d9 	bl	800e71e <nrf_read_register>
	while ((config_reg & 2) == 0) { // wait for powerup
 800e36c:	7bfb      	ldrb	r3, [r7, #15]
 800e36e:	f003 0302 	and.w	r3, r3, #2
 800e372:	2b00      	cmp	r3, #0
 800e374:	d0f3      	beq.n	800e35e <nrf_init+0x42>

	}
	swvPrintLn("NRF Init done");
 800e376:	483a      	ldr	r0, [pc, #232]	; (800e460 <nrf_init+0x144>)
 800e378:	f7fd fadc 	bl	800b934 <swvPrintLn>

	nrf_set_rx_payload_width_p0(dev, dev->config.payload_length);
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	791b      	ldrb	r3, [r3, #4]
 800e380:	4619      	mov	r1, r3
 800e382:	6878      	ldr	r0, [r7, #4]
 800e384:	f000 fdce 	bl	800ef24 <nrf_set_rx_payload_width_p0>
	nrf_set_rx_payload_width_p1(dev, dev->config.payload_length);
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	791b      	ldrb	r3, [r3, #4]
 800e38c:	4619      	mov	r1, r3
 800e38e:	6878      	ldr	r0, [r7, #4]
 800e390:	f000 fde9 	bl	800ef66 <nrf_set_rx_payload_width_p1>

	nrf_set_rx_address_p1(dev, dev->config.rx_address);
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	689b      	ldr	r3, [r3, #8]
 800e398:	4619      	mov	r1, r3
 800e39a:	6878      	ldr	r0, [r7, #4]
 800e39c:	f000 fd8a 	bl	800eeb4 <nrf_set_rx_address_p1>
	nrf_set_rx_address_p0(dev, dev->config.tx_address);
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	68db      	ldr	r3, [r3, #12]
 800e3a4:	4619      	mov	r1, r3
 800e3a6:	6878      	ldr	r0, [r7, #4]
 800e3a8:	f000 fd68 	bl	800ee7c <nrf_set_rx_address_p0>
	nrf_set_tx_address(dev, dev->config.tx_address);
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	68db      	ldr	r3, [r3, #12]
 800e3b0:	4619      	mov	r1, r3
 800e3b2:	6878      	ldr	r0, [r7, #4]
 800e3b4:	f000 fd9a 	bl	800eeec <nrf_set_tx_address>
	nrf_enable_rx_data_ready_irq(dev, 1);
 800e3b8:	2101      	movs	r1, #1
 800e3ba:	6878      	ldr	r0, [r7, #4]
 800e3bc:	f000 fcbc 	bl	800ed38 <nrf_enable_rx_data_ready_irq>
	nrf_enable_tx_data_sent_irq(dev, 1);
 800e3c0:	2101      	movs	r1, #1
 800e3c2:	6878      	ldr	r0, [r7, #4]
 800e3c4:	f000 fcee 	bl	800eda4 <nrf_enable_tx_data_sent_irq>
	nrf_enable_max_retransmit_irq(dev, 1);
 800e3c8:	2101      	movs	r1, #1
 800e3ca:	6878      	ldr	r0, [r7, #4]
 800e3cc:	f000 fd20 	bl	800ee10 <nrf_enable_max_retransmit_irq>
	nrf_enable_crc(dev, 1);
 800e3d0:	2101      	movs	r1, #1
 800e3d2:	6878      	ldr	r0, [r7, #4]
 800e3d4:	f000 fbe1 	bl	800eb9a <nrf_enable_crc>
	nrf_set_crc_width(dev, dev->config.crc_width);
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	789b      	ldrb	r3, [r3, #2]
 800e3dc:	4619      	mov	r1, r3
 800e3de:	6878      	ldr	r0, [r7, #4]
 800e3e0:	f000 fc0e 	bl	800ec00 <nrf_set_crc_width>
	nrf_set_address_width(dev, dev->config.addr_width);
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	78db      	ldrb	r3, [r3, #3]
 800e3e8:	4619      	mov	r1, r3
 800e3ea:	6878      	ldr	r0, [r7, #4]
 800e3ec:	f000 fb5d 	bl	800eaaa <nrf_set_address_width>
	nrf_set_rf_channel(dev, dev->config.rf_channel);
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	79db      	ldrb	r3, [r3, #7]
 800e3f4:	4619      	mov	r1, r3
 800e3f6:	6878      	ldr	r0, [r7, #4]
 800e3f8:	f000 fab6 	bl	800e968 <nrf_set_rf_channel>
	nrf_set_data_rate(dev, dev->config.data_rate);
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	781b      	ldrb	r3, [r3, #0]
 800e400:	4619      	mov	r1, r3
 800e402:	6878      	ldr	r0, [r7, #4]
 800e404:	f000 fa40 	bl	800e888 <nrf_set_data_rate>
	nrf_set_retransmittion_count(dev, dev->config.retransmit_count);
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	795b      	ldrb	r3, [r3, #5]
 800e40c:	4619      	mov	r1, r3
 800e40e:	6878      	ldr	r0, [r7, #4]
 800e410:	f000 fadb 	bl	800e9ca <nrf_set_retransmittion_count>
	nrf_set_retransmittion_delay(dev, dev->config.retransmit_delay);
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	799b      	ldrb	r3, [r3, #6]
 800e418:	4619      	mov	r1, r3
 800e41a:	6878      	ldr	r0, [r7, #4]
 800e41c:	f000 fb0b 	bl	800ea36 <nrf_set_retransmittion_delay>

	nrf_set_rx_pipes(dev, 0x03);
 800e420:	2103      	movs	r1, #3
 800e422:	6878      	ldr	r0, [r7, #4]
 800e424:	f000 fb73 	bl	800eb0e <nrf_set_rx_pipes>
	nrf_enable_auto_ack(dev, 0);
 800e428:	2100      	movs	r1, #0
 800e42a:	6878      	ldr	r0, [r7, #4]
 800e42c:	f000 fb85 	bl	800eb3a <nrf_enable_auto_ack>

	nrf_clear_interrupts(dev);
 800e430:	6878      	ldr	r0, [r7, #4]
 800e432:	f000 fa71 	bl	800e918 <nrf_clear_interrupts>

	nrf_rx_tx_control(dev, NRF_STATE_RX);
 800e436:	2101      	movs	r1, #1
 800e438:	6878      	ldr	r0, [r7, #4]
 800e43a:	f000 fc4a 	bl	800ecd2 <nrf_rx_tx_control>

	nrf_flush_rx(dev);
 800e43e:	6878      	ldr	r0, [r7, #4]
 800e440:	f000 fa05 	bl	800e84e <nrf_flush_rx>
	ce_set(dev);
 800e444:	6878      	ldr	r0, [r7, #4]
 800e446:	f7ff fee1 	bl	800e20c <ce_set>

	swvPrintLn("NRF24 Init done");
 800e44a:	4806      	ldr	r0, [pc, #24]	; (800e464 <nrf_init+0x148>)
 800e44c:	f7fd fa72 	bl	800b934 <swvPrintLn>

	return NRF_OK;
 800e450:	2300      	movs	r3, #0
}
 800e452:	4618      	mov	r0, r3
 800e454:	3710      	adds	r7, #16
 800e456:	46bd      	mov	sp, r7
 800e458:	bdb0      	pop	{r4, r5, r7, pc}
 800e45a:	bf00      	nop
 800e45c:	08015fd0 	.word	0x08015fd0
 800e460:	08015fe4 	.word	0x08015fe4
 800e464:	08015ff4 	.word	0x08015ff4

0800e468 <nrf_send_command>:

NRF_RESULT nrf_send_command(nrf24l01* dev, NRF_COMMAND cmd, const uint8_t* tx, uint8_t* rx, uint8_t len) {
 800e468:	b5b0      	push	{r4, r5, r7, lr}
 800e46a:	b08c      	sub	sp, #48	; 0x30
 800e46c:	af02      	add	r7, sp, #8
 800e46e:	60f8      	str	r0, [r7, #12]
 800e470:	607a      	str	r2, [r7, #4]
 800e472:	603b      	str	r3, [r7, #0]
 800e474:	460b      	mov	r3, r1
 800e476:	72fb      	strb	r3, [r7, #11]
 800e478:	466b      	mov	r3, sp
 800e47a:	461d      	mov	r5, r3
	uint8_t myTX[len + 1];
 800e47c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800e480:	1c58      	adds	r0, r3, #1
 800e482:	1e43      	subs	r3, r0, #1
 800e484:	623b      	str	r3, [r7, #32]
 800e486:	4603      	mov	r3, r0
 800e488:	4619      	mov	r1, r3
 800e48a:	f04f 0200 	mov.w	r2, #0
 800e48e:	f04f 0300 	mov.w	r3, #0
 800e492:	f04f 0400 	mov.w	r4, #0
 800e496:	00d4      	lsls	r4, r2, #3
 800e498:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800e49c:	00cb      	lsls	r3, r1, #3
 800e49e:	4603      	mov	r3, r0
 800e4a0:	4619      	mov	r1, r3
 800e4a2:	f04f 0200 	mov.w	r2, #0
 800e4a6:	f04f 0300 	mov.w	r3, #0
 800e4aa:	f04f 0400 	mov.w	r4, #0
 800e4ae:	00d4      	lsls	r4, r2, #3
 800e4b0:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800e4b4:	00cb      	lsls	r3, r1, #3
 800e4b6:	4603      	mov	r3, r0
 800e4b8:	3307      	adds	r3, #7
 800e4ba:	08db      	lsrs	r3, r3, #3
 800e4bc:	00db      	lsls	r3, r3, #3
 800e4be:	ebad 0d03 	sub.w	sp, sp, r3
 800e4c2:	ab02      	add	r3, sp, #8
 800e4c4:	3300      	adds	r3, #0
 800e4c6:	61fb      	str	r3, [r7, #28]
	uint8_t myRX[len + 1];
 800e4c8:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800e4cc:	1c58      	adds	r0, r3, #1
 800e4ce:	1e43      	subs	r3, r0, #1
 800e4d0:	61bb      	str	r3, [r7, #24]
 800e4d2:	4603      	mov	r3, r0
 800e4d4:	4619      	mov	r1, r3
 800e4d6:	f04f 0200 	mov.w	r2, #0
 800e4da:	f04f 0300 	mov.w	r3, #0
 800e4de:	f04f 0400 	mov.w	r4, #0
 800e4e2:	00d4      	lsls	r4, r2, #3
 800e4e4:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800e4e8:	00cb      	lsls	r3, r1, #3
 800e4ea:	4603      	mov	r3, r0
 800e4ec:	4619      	mov	r1, r3
 800e4ee:	f04f 0200 	mov.w	r2, #0
 800e4f2:	f04f 0300 	mov.w	r3, #0
 800e4f6:	f04f 0400 	mov.w	r4, #0
 800e4fa:	00d4      	lsls	r4, r2, #3
 800e4fc:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800e500:	00cb      	lsls	r3, r1, #3
 800e502:	4603      	mov	r3, r0
 800e504:	3307      	adds	r3, #7
 800e506:	08db      	lsrs	r3, r3, #3
 800e508:	00db      	lsls	r3, r3, #3
 800e50a:	ebad 0d03 	sub.w	sp, sp, r3
 800e50e:	ab02      	add	r3, sp, #8
 800e510:	3300      	adds	r3, #0
 800e512:	617b      	str	r3, [r7, #20]
	myTX[0] = cmd;
 800e514:	69fb      	ldr	r3, [r7, #28]
 800e516:	7afa      	ldrb	r2, [r7, #11]
 800e518:	701a      	strb	r2, [r3, #0]

	int i = 0;
 800e51a:	2300      	movs	r3, #0
 800e51c:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 0; i < len; i++) {
 800e51e:	2300      	movs	r3, #0
 800e520:	627b      	str	r3, [r7, #36]	; 0x24
 800e522:	e00f      	b.n	800e544 <nrf_send_command+0xdc>
		myTX[1 + i] = tx[i];
 800e524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e526:	687a      	ldr	r2, [r7, #4]
 800e528:	441a      	add	r2, r3
 800e52a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e52c:	3301      	adds	r3, #1
 800e52e:	7811      	ldrb	r1, [r2, #0]
 800e530:	69fa      	ldr	r2, [r7, #28]
 800e532:	54d1      	strb	r1, [r2, r3]
		myRX[i] = 0;
 800e534:	697a      	ldr	r2, [r7, #20]
 800e536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e538:	4413      	add	r3, r2
 800e53a:	2200      	movs	r2, #0
 800e53c:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < len; i++) {
 800e53e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e540:	3301      	adds	r3, #1
 800e542:	627b      	str	r3, [r7, #36]	; 0x24
 800e544:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800e548:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e54a:	429a      	cmp	r2, r3
 800e54c:	dbea      	blt.n	800e524 <nrf_send_command+0xbc>
	}

	csn_reset(dev);
 800e54e:	68f8      	ldr	r0, [r7, #12]
 800e550:	f7ff fe8c 	bl	800e26c <csn_reset>

	if (HAL_SPI_TransmitReceive(dev->config.spi, myTX, myRX, 1 + len, dev->config.spi_timeout) != HAL_OK) {
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	6958      	ldr	r0, [r3, #20]
 800e558:	69f9      	ldr	r1, [r7, #28]
 800e55a:	697a      	ldr	r2, [r7, #20]
 800e55c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800e560:	b29b      	uxth	r3, r3
 800e562:	3301      	adds	r3, #1
 800e564:	b29c      	uxth	r4, r3
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	699b      	ldr	r3, [r3, #24]
 800e56a:	9300      	str	r3, [sp, #0]
 800e56c:	4623      	mov	r3, r4
 800e56e:	f7f7 fc51 	bl	8005e14 <HAL_SPI_TransmitReceive>
 800e572:	4603      	mov	r3, r0
 800e574:	2b00      	cmp	r3, #0
 800e576:	d001      	beq.n	800e57c <nrf_send_command+0x114>
		return NRF_ERROR;
 800e578:	2301      	movs	r3, #1
 800e57a:	e016      	b.n	800e5aa <nrf_send_command+0x142>
	}

	for (i = 0; i < len; i++) {
 800e57c:	2300      	movs	r3, #0
 800e57e:	627b      	str	r3, [r7, #36]	; 0x24
 800e580:	e00a      	b.n	800e598 <nrf_send_command+0x130>
		rx[i] = myRX[1 + i];
 800e582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e584:	1c5a      	adds	r2, r3, #1
 800e586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e588:	6839      	ldr	r1, [r7, #0]
 800e58a:	440b      	add	r3, r1
 800e58c:	6979      	ldr	r1, [r7, #20]
 800e58e:	5c8a      	ldrb	r2, [r1, r2]
 800e590:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < len; i++) {
 800e592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e594:	3301      	adds	r3, #1
 800e596:	627b      	str	r3, [r7, #36]	; 0x24
 800e598:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800e59c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e59e:	429a      	cmp	r2, r3
 800e5a0:	dbef      	blt.n	800e582 <nrf_send_command+0x11a>
	}

	csn_set(dev);
 800e5a2:	68f8      	ldr	r0, [r7, #12]
 800e5a4:	f7ff fe52 	bl	800e24c <csn_set>

	return NRF_OK;
 800e5a8:	2300      	movs	r3, #0
 800e5aa:	46ad      	mov	sp, r5
}
 800e5ac:	4618      	mov	r0, r3
 800e5ae:	3728      	adds	r7, #40	; 0x28
 800e5b0:	46bd      	mov	sp, r7
 800e5b2:	bdb0      	pop	{r4, r5, r7, pc}

0800e5b4 <nrf_irq_handler>:

void nrf_irq_handler(nrf24l01* dev) {
 800e5b4:	b580      	push	{r7, lr}
 800e5b6:	b084      	sub	sp, #16
 800e5b8:	af00      	add	r7, sp, #0
 800e5ba:	6078      	str	r0, [r7, #4]
	uint8_t status = 0;
 800e5bc:	2300      	movs	r3, #0
 800e5be:	72fb      	strb	r3, [r7, #11]
	if (nrf_read_register(dev, NRF_STATUS, &status) != NRF_OK) {
 800e5c0:	f107 030b 	add.w	r3, r7, #11
 800e5c4:	461a      	mov	r2, r3
 800e5c6:	2107      	movs	r1, #7
 800e5c8:	6878      	ldr	r0, [r7, #4]
 800e5ca:	f000 f8a8 	bl	800e71e <nrf_read_register>
 800e5ce:	4603      	mov	r3, r0
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	f040 8091 	bne.w	800e6f8 <nrf_irq_handler+0x144>
		return;
	}

	if ((status & (1 << 6))) { // RX FIFO Interrupt
 800e5d6:	7afb      	ldrb	r3, [r7, #11]
 800e5d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d031      	beq.n	800e644 <nrf_irq_handler+0x90>
		uint8_t fifo_status = 0;
 800e5e0:	2300      	movs	r3, #0
 800e5e2:	72bb      	strb	r3, [r7, #10]
		ce_reset(dev);
 800e5e4:	6878      	ldr	r0, [r7, #4]
 800e5e6:	f7ff fe21 	bl	800e22c <ce_reset>
		nrf_write_register(dev, NRF_STATUS, &status);
 800e5ea:	f107 030b 	add.w	r3, r7, #11
 800e5ee:	461a      	mov	r2, r3
 800e5f0:	2107      	movs	r1, #7
 800e5f2:	6878      	ldr	r0, [r7, #4]
 800e5f4:	f000 f8af 	bl	800e756 <nrf_write_register>
		nrf_read_register(dev, NRF_FIFO_STATUS, &fifo_status);
 800e5f8:	f107 030a 	add.w	r3, r7, #10
 800e5fc:	461a      	mov	r2, r3
 800e5fe:	2117      	movs	r1, #23
 800e600:	6878      	ldr	r0, [r7, #4]
 800e602:	f000 f88c 	bl	800e71e <nrf_read_register>
		if ((fifo_status & 1) == 0) {
 800e606:	7abb      	ldrb	r3, [r7, #10]
 800e608:	f003 0301 	and.w	r3, r3, #1
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d116      	bne.n	800e63e <nrf_irq_handler+0x8a>
			uint8_t* rx_buffer = dev->config.rx_buffer;
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	691b      	ldr	r3, [r3, #16]
 800e614:	60fb      	str	r3, [r7, #12]
			nrf_read_rx_payload(dev, rx_buffer);
 800e616:	68f9      	ldr	r1, [r7, #12]
 800e618:	6878      	ldr	r0, [r7, #4]
 800e61a:	f000 f8bc 	bl	800e796 <nrf_read_rx_payload>
			status |= 1 << 6;
 800e61e:	7afb      	ldrb	r3, [r7, #11]
 800e620:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e624:	b2db      	uxtb	r3, r3
 800e626:	72fb      	strb	r3, [r7, #11]
			nrf_write_register(dev, NRF_STATUS, &status);
 800e628:	f107 030b 	add.w	r3, r7, #11
 800e62c:	461a      	mov	r2, r3
 800e62e:	2107      	movs	r1, #7
 800e630:	6878      	ldr	r0, [r7, #4]
 800e632:	f000 f890 	bl	800e756 <nrf_write_register>
			// nrf_flush_rx(dev);
			nrf_packet_received_callback(dev, rx_buffer);
 800e636:	68f9      	ldr	r1, [r7, #12]
 800e638:	6878      	ldr	r0, [r7, #4]
 800e63a:	f000 f861 	bl	800e700 <nrf_packet_received_callback>
		}
		ce_set(dev);
 800e63e:	6878      	ldr	r0, [r7, #4]
 800e640:	f7ff fde4 	bl	800e20c <ce_set>
	}
	if ((status & (1 << 5))) { // TX Data Sent Interrupt
 800e644:	7afb      	ldrb	r3, [r7, #11]
 800e646:	f003 0320 	and.w	r3, r3, #32
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d021      	beq.n	800e692 <nrf_irq_handler+0xde>
		status |= 1 << 5;      // clear the interrupt flag
 800e64e:	7afb      	ldrb	r3, [r7, #11]
 800e650:	f043 0320 	orr.w	r3, r3, #32
 800e654:	b2db      	uxtb	r3, r3
 800e656:	72fb      	strb	r3, [r7, #11]
		ce_reset(dev);
 800e658:	6878      	ldr	r0, [r7, #4]
 800e65a:	f7ff fde7 	bl	800e22c <ce_reset>
		nrf_rx_tx_control(dev, NRF_STATE_RX);
 800e65e:	2101      	movs	r1, #1
 800e660:	6878      	ldr	r0, [r7, #4]
 800e662:	f000 fb36 	bl	800ecd2 <nrf_rx_tx_control>
		dev->state = NRF_STATE_RX;
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	2201      	movs	r2, #1
 800e66a:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
		ce_set(dev);
 800e66e:	6878      	ldr	r0, [r7, #4]
 800e670:	f7ff fdcc 	bl	800e20c <ce_set>
		nrf_write_register(dev, NRF_STATUS, &status);
 800e674:	f107 030b 	add.w	r3, r7, #11
 800e678:	461a      	mov	r2, r3
 800e67a:	2107      	movs	r1, #7
 800e67c:	6878      	ldr	r0, [r7, #4]
 800e67e:	f000 f86a 	bl	800e756 <nrf_write_register>
		dev->tx_result = NRF_OK;
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	2200      	movs	r2, #0
 800e686:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
		dev->tx_busy = 0;
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	2200      	movs	r2, #0
 800e68e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}
	if ((status & (1 << 4))) { // MaxRetransmits reached
 800e692:	7afb      	ldrb	r3, [r7, #11]
 800e694:	f003 0310 	and.w	r3, r3, #16
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d02e      	beq.n	800e6fa <nrf_irq_handler+0x146>
		status |= 1 << 4;
 800e69c:	7afb      	ldrb	r3, [r7, #11]
 800e69e:	f043 0310 	orr.w	r3, r3, #16
 800e6a2:	b2db      	uxtb	r3, r3
 800e6a4:	72fb      	strb	r3, [r7, #11]

		nrf_flush_tx(dev);
 800e6a6:	6878      	ldr	r0, [r7, #4]
 800e6a8:	f000 f8b4 	bl	800e814 <nrf_flush_tx>
		nrf_power_up(dev, 0); // power down
 800e6ac:	2100      	movs	r1, #0
 800e6ae:	6878      	ldr	r0, [r7, #4]
 800e6b0:	f000 fadc 	bl	800ec6c <nrf_power_up>
		nrf_power_up(dev, 1); // power up
 800e6b4:	2101      	movs	r1, #1
 800e6b6:	6878      	ldr	r0, [r7, #4]
 800e6b8:	f000 fad8 	bl	800ec6c <nrf_power_up>

		ce_reset(dev);
 800e6bc:	6878      	ldr	r0, [r7, #4]
 800e6be:	f7ff fdb5 	bl	800e22c <ce_reset>
		nrf_rx_tx_control(dev, NRF_STATE_RX);
 800e6c2:	2101      	movs	r1, #1
 800e6c4:	6878      	ldr	r0, [r7, #4]
 800e6c6:	f000 fb04 	bl	800ecd2 <nrf_rx_tx_control>
		dev->state = NRF_STATE_RX;
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	2201      	movs	r2, #1
 800e6ce:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
		ce_set(dev);
 800e6d2:	6878      	ldr	r0, [r7, #4]
 800e6d4:	f7ff fd9a 	bl	800e20c <ce_set>

		nrf_write_register(dev, NRF_STATUS, &status);
 800e6d8:	f107 030b 	add.w	r3, r7, #11
 800e6dc:	461a      	mov	r2, r3
 800e6de:	2107      	movs	r1, #7
 800e6e0:	6878      	ldr	r0, [r7, #4]
 800e6e2:	f000 f838 	bl	800e756 <nrf_write_register>
		dev->tx_result = NRF_ERROR;
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	2201      	movs	r2, #1
 800e6ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
		dev->tx_busy = 0;
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	2200      	movs	r2, #0
 800e6f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800e6f6:	e000      	b.n	800e6fa <nrf_irq_handler+0x146>
		return;
 800e6f8:	bf00      	nop
	}
}
 800e6fa:	3710      	adds	r7, #16
 800e6fc:	46bd      	mov	sp, r7
 800e6fe:	bd80      	pop	{r7, pc}

0800e700 <nrf_packet_received_callback>:

__weak void nrf_packet_received_callback(nrf24l01* dev, uint8_t* data) {
 800e700:	b480      	push	{r7}
 800e702:	b083      	sub	sp, #12
 800e704:	af00      	add	r7, sp, #0
 800e706:	6078      	str	r0, [r7, #4]
 800e708:	6039      	str	r1, [r7, #0]
	// default implementation (__weak) is used in favor of nrf_receive_packet
	dev->rx_busy = 0;
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	2200      	movs	r2, #0
 800e70e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
}
 800e712:	bf00      	nop
 800e714:	370c      	adds	r7, #12
 800e716:	46bd      	mov	sp, r7
 800e718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e71c:	4770      	bx	lr

0800e71e <nrf_read_register>:

NRF_RESULT nrf_read_register(nrf24l01* dev, uint8_t reg, uint8_t* data) {
 800e71e:	b580      	push	{r7, lr}
 800e720:	b088      	sub	sp, #32
 800e722:	af02      	add	r7, sp, #8
 800e724:	60f8      	str	r0, [r7, #12]
 800e726:	460b      	mov	r3, r1
 800e728:	607a      	str	r2, [r7, #4]
 800e72a:	72fb      	strb	r3, [r7, #11]
	uint8_t tx = 0;
 800e72c:	2300      	movs	r3, #0
 800e72e:	75fb      	strb	r3, [r7, #23]
	if (nrf_send_command(dev, NRF_CMD_R_REGISTER | reg, &tx, data, 1) != NRF_OK) {
 800e730:	f107 0217 	add.w	r2, r7, #23
 800e734:	7af9      	ldrb	r1, [r7, #11]
 800e736:	2301      	movs	r3, #1
 800e738:	9300      	str	r3, [sp, #0]
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	68f8      	ldr	r0, [r7, #12]
 800e73e:	f7ff fe93 	bl	800e468 <nrf_send_command>
 800e742:	4603      	mov	r3, r0
 800e744:	2b00      	cmp	r3, #0
 800e746:	d001      	beq.n	800e74c <nrf_read_register+0x2e>
		return NRF_ERROR;
 800e748:	2301      	movs	r3, #1
 800e74a:	e000      	b.n	800e74e <nrf_read_register+0x30>
	}
	return NRF_OK;
 800e74c:	2300      	movs	r3, #0
}
 800e74e:	4618      	mov	r0, r3
 800e750:	3718      	adds	r7, #24
 800e752:	46bd      	mov	sp, r7
 800e754:	bd80      	pop	{r7, pc}

0800e756 <nrf_write_register>:

NRF_RESULT nrf_write_register(nrf24l01* dev, uint8_t reg, uint8_t* data) {
 800e756:	b580      	push	{r7, lr}
 800e758:	b088      	sub	sp, #32
 800e75a:	af02      	add	r7, sp, #8
 800e75c:	60f8      	str	r0, [r7, #12]
 800e75e:	460b      	mov	r3, r1
 800e760:	607a      	str	r2, [r7, #4]
 800e762:	72fb      	strb	r3, [r7, #11]
	uint8_t rx = 0;
 800e764:	2300      	movs	r3, #0
 800e766:	75fb      	strb	r3, [r7, #23]
	if (nrf_send_command(dev, NRF_CMD_W_REGISTER | reg, data, &rx, 1) != NRF_OK) {
 800e768:	7afb      	ldrb	r3, [r7, #11]
 800e76a:	f043 0320 	orr.w	r3, r3, #32
 800e76e:	b2d9      	uxtb	r1, r3
 800e770:	f107 0217 	add.w	r2, r7, #23
 800e774:	2301      	movs	r3, #1
 800e776:	9300      	str	r3, [sp, #0]
 800e778:	4613      	mov	r3, r2
 800e77a:	687a      	ldr	r2, [r7, #4]
 800e77c:	68f8      	ldr	r0, [r7, #12]
 800e77e:	f7ff fe73 	bl	800e468 <nrf_send_command>
 800e782:	4603      	mov	r3, r0
 800e784:	2b00      	cmp	r3, #0
 800e786:	d001      	beq.n	800e78c <nrf_write_register+0x36>
		return NRF_ERROR;
 800e788:	2301      	movs	r3, #1
 800e78a:	e000      	b.n	800e78e <nrf_write_register+0x38>
	}
	return NRF_OK;
 800e78c:	2300      	movs	r3, #0
}
 800e78e:	4618      	mov	r0, r3
 800e790:	3718      	adds	r7, #24
 800e792:	46bd      	mov	sp, r7
 800e794:	bd80      	pop	{r7, pc}

0800e796 <nrf_read_rx_payload>:

NRF_RESULT nrf_read_rx_payload(nrf24l01* dev, uint8_t* data) {
 800e796:	b5b0      	push	{r4, r5, r7, lr}
 800e798:	b086      	sub	sp, #24
 800e79a:	af02      	add	r7, sp, #8
 800e79c:	6078      	str	r0, [r7, #4]
 800e79e:	6039      	str	r1, [r7, #0]
 800e7a0:	466b      	mov	r3, sp
 800e7a2:	461d      	mov	r5, r3
	uint8_t tx[dev->config.payload_length];
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	7918      	ldrb	r0, [r3, #4]
 800e7a8:	4603      	mov	r3, r0
 800e7aa:	3b01      	subs	r3, #1
 800e7ac:	60fb      	str	r3, [r7, #12]
 800e7ae:	b2c1      	uxtb	r1, r0
 800e7b0:	f04f 0200 	mov.w	r2, #0
 800e7b4:	f04f 0300 	mov.w	r3, #0
 800e7b8:	f04f 0400 	mov.w	r4, #0
 800e7bc:	00d4      	lsls	r4, r2, #3
 800e7be:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800e7c2:	00cb      	lsls	r3, r1, #3
 800e7c4:	b2c1      	uxtb	r1, r0
 800e7c6:	f04f 0200 	mov.w	r2, #0
 800e7ca:	f04f 0300 	mov.w	r3, #0
 800e7ce:	f04f 0400 	mov.w	r4, #0
 800e7d2:	00d4      	lsls	r4, r2, #3
 800e7d4:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800e7d8:	00cb      	lsls	r3, r1, #3
 800e7da:	4603      	mov	r3, r0
 800e7dc:	3307      	adds	r3, #7
 800e7de:	08db      	lsrs	r3, r3, #3
 800e7e0:	00db      	lsls	r3, r3, #3
 800e7e2:	ebad 0d03 	sub.w	sp, sp, r3
 800e7e6:	ab02      	add	r3, sp, #8
 800e7e8:	3300      	adds	r3, #0
 800e7ea:	60bb      	str	r3, [r7, #8]
	if (nrf_send_command(dev, NRF_CMD_R_RX_PAYLOAD, tx, data, dev->config.payload_length) != NRF_OK) {
 800e7ec:	68ba      	ldr	r2, [r7, #8]
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	791b      	ldrb	r3, [r3, #4]
 800e7f2:	9300      	str	r3, [sp, #0]
 800e7f4:	683b      	ldr	r3, [r7, #0]
 800e7f6:	2161      	movs	r1, #97	; 0x61
 800e7f8:	6878      	ldr	r0, [r7, #4]
 800e7fa:	f7ff fe35 	bl	800e468 <nrf_send_command>
 800e7fe:	4603      	mov	r3, r0
 800e800:	2b00      	cmp	r3, #0
 800e802:	d001      	beq.n	800e808 <nrf_read_rx_payload+0x72>
		return NRF_ERROR;
 800e804:	2301      	movs	r3, #1
 800e806:	e000      	b.n	800e80a <nrf_read_rx_payload+0x74>
	}
	return NRF_OK;
 800e808:	2300      	movs	r3, #0
 800e80a:	46ad      	mov	sp, r5
}
 800e80c:	4618      	mov	r0, r3
 800e80e:	3710      	adds	r7, #16
 800e810:	46bd      	mov	sp, r7
 800e812:	bdb0      	pop	{r4, r5, r7, pc}

0800e814 <nrf_flush_tx>:
		return NRF_ERROR;
	}
	return NRF_OK;
}

NRF_RESULT nrf_flush_tx(nrf24l01* dev) {
 800e814:	b580      	push	{r7, lr}
 800e816:	b086      	sub	sp, #24
 800e818:	af02      	add	r7, sp, #8
 800e81a:	6078      	str	r0, [r7, #4]
	uint8_t rx = 0;
 800e81c:	2300      	movs	r3, #0
 800e81e:	73fb      	strb	r3, [r7, #15]
	uint8_t tx = 0;
 800e820:	2300      	movs	r3, #0
 800e822:	73bb      	strb	r3, [r7, #14]
	if (nrf_send_command(dev, NRF_CMD_FLUSH_TX, &tx, &rx, 0) != NRF_OK) {
 800e824:	f107 010f 	add.w	r1, r7, #15
 800e828:	f107 020e 	add.w	r2, r7, #14
 800e82c:	2300      	movs	r3, #0
 800e82e:	9300      	str	r3, [sp, #0]
 800e830:	460b      	mov	r3, r1
 800e832:	21e1      	movs	r1, #225	; 0xe1
 800e834:	6878      	ldr	r0, [r7, #4]
 800e836:	f7ff fe17 	bl	800e468 <nrf_send_command>
 800e83a:	4603      	mov	r3, r0
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d001      	beq.n	800e844 <nrf_flush_tx+0x30>
		return NRF_ERROR;
 800e840:	2301      	movs	r3, #1
 800e842:	e000      	b.n	800e846 <nrf_flush_tx+0x32>
	}
	return NRF_OK;
 800e844:	2300      	movs	r3, #0
}
 800e846:	4618      	mov	r0, r3
 800e848:	3710      	adds	r7, #16
 800e84a:	46bd      	mov	sp, r7
 800e84c:	bd80      	pop	{r7, pc}

0800e84e <nrf_flush_rx>:

NRF_RESULT nrf_flush_rx(nrf24l01* dev) {
 800e84e:	b580      	push	{r7, lr}
 800e850:	b086      	sub	sp, #24
 800e852:	af02      	add	r7, sp, #8
 800e854:	6078      	str	r0, [r7, #4]
	uint8_t rx = 0;
 800e856:	2300      	movs	r3, #0
 800e858:	73fb      	strb	r3, [r7, #15]
	uint8_t tx = 0;
 800e85a:	2300      	movs	r3, #0
 800e85c:	73bb      	strb	r3, [r7, #14]
	if (nrf_send_command(dev, NRF_CMD_FLUSH_RX, &tx, &rx, 0) != NRF_OK) {
 800e85e:	f107 010f 	add.w	r1, r7, #15
 800e862:	f107 020e 	add.w	r2, r7, #14
 800e866:	2300      	movs	r3, #0
 800e868:	9300      	str	r3, [sp, #0]
 800e86a:	460b      	mov	r3, r1
 800e86c:	21e2      	movs	r1, #226	; 0xe2
 800e86e:	6878      	ldr	r0, [r7, #4]
 800e870:	f7ff fdfa 	bl	800e468 <nrf_send_command>
 800e874:	4603      	mov	r3, r0
 800e876:	2b00      	cmp	r3, #0
 800e878:	d001      	beq.n	800e87e <nrf_flush_rx+0x30>
		return NRF_ERROR;
 800e87a:	2301      	movs	r3, #1
 800e87c:	e000      	b.n	800e880 <nrf_flush_rx+0x32>
	}
	return NRF_OK;
 800e87e:	2300      	movs	r3, #0
}
 800e880:	4618      	mov	r0, r3
 800e882:	3710      	adds	r7, #16
 800e884:	46bd      	mov	sp, r7
 800e886:	bd80      	pop	{r7, pc}

0800e888 <nrf_set_data_rate>:

NRF_RESULT nrf_set_data_rate(nrf24l01* dev, NRF_DATA_RATE rate) {
 800e888:	b580      	push	{r7, lr}
 800e88a:	b084      	sub	sp, #16
 800e88c:	af00      	add	r7, sp, #0
 800e88e:	6078      	str	r0, [r7, #4]
 800e890:	460b      	mov	r3, r1
 800e892:	70fb      	strb	r3, [r7, #3]
	uint8_t reg = 0;
 800e894:	2300      	movs	r3, #0
 800e896:	73fb      	strb	r3, [r7, #15]
	if (nrf_read_register(dev, NRF_RF_SETUP, &reg) != NRF_OK) {
 800e898:	f107 030f 	add.w	r3, r7, #15
 800e89c:	461a      	mov	r2, r3
 800e89e:	2106      	movs	r1, #6
 800e8a0:	6878      	ldr	r0, [r7, #4]
 800e8a2:	f7ff ff3c 	bl	800e71e <nrf_read_register>
 800e8a6:	4603      	mov	r3, r0
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d001      	beq.n	800e8b0 <nrf_set_data_rate+0x28>
		return NRF_ERROR;
 800e8ac:	2301      	movs	r3, #1
 800e8ae:	e02f      	b.n	800e910 <nrf_set_data_rate+0x88>
	}
	if (rate & 1) { // low bit set
 800e8b0:	78fb      	ldrb	r3, [r7, #3]
 800e8b2:	f003 0301 	and.w	r3, r3, #1
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d005      	beq.n	800e8c6 <nrf_set_data_rate+0x3e>
		reg |= 1 << 5;
 800e8ba:	7bfb      	ldrb	r3, [r7, #15]
 800e8bc:	f043 0320 	orr.w	r3, r3, #32
 800e8c0:	b2db      	uxtb	r3, r3
 800e8c2:	73fb      	strb	r3, [r7, #15]
 800e8c4:	e004      	b.n	800e8d0 <nrf_set_data_rate+0x48>
	} else { // low bit clear
		reg &= ~(1 << 5);
 800e8c6:	7bfb      	ldrb	r3, [r7, #15]
 800e8c8:	f023 0320 	bic.w	r3, r3, #32
 800e8cc:	b2db      	uxtb	r3, r3
 800e8ce:	73fb      	strb	r3, [r7, #15]
	}

	if (rate & 2) { // high bit set
 800e8d0:	78fb      	ldrb	r3, [r7, #3]
 800e8d2:	f003 0302 	and.w	r3, r3, #2
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d005      	beq.n	800e8e6 <nrf_set_data_rate+0x5e>
		reg |= 1 << 3;
 800e8da:	7bfb      	ldrb	r3, [r7, #15]
 800e8dc:	f043 0308 	orr.w	r3, r3, #8
 800e8e0:	b2db      	uxtb	r3, r3
 800e8e2:	73fb      	strb	r3, [r7, #15]
 800e8e4:	e004      	b.n	800e8f0 <nrf_set_data_rate+0x68>
	} else { // high bit clear
		reg &= ~(1 << 3);
 800e8e6:	7bfb      	ldrb	r3, [r7, #15]
 800e8e8:	f023 0308 	bic.w	r3, r3, #8
 800e8ec:	b2db      	uxtb	r3, r3
 800e8ee:	73fb      	strb	r3, [r7, #15]
	}
	if (nrf_write_register(dev, NRF_RF_SETUP, &reg) != NRF_OK) {
 800e8f0:	f107 030f 	add.w	r3, r7, #15
 800e8f4:	461a      	mov	r2, r3
 800e8f6:	2106      	movs	r1, #6
 800e8f8:	6878      	ldr	r0, [r7, #4]
 800e8fa:	f7ff ff2c 	bl	800e756 <nrf_write_register>
 800e8fe:	4603      	mov	r3, r0
 800e900:	2b00      	cmp	r3, #0
 800e902:	d001      	beq.n	800e908 <nrf_set_data_rate+0x80>
		return NRF_ERROR;
 800e904:	2301      	movs	r3, #1
 800e906:	e003      	b.n	800e910 <nrf_set_data_rate+0x88>
	}
	dev->config.data_rate = rate;
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	78fa      	ldrb	r2, [r7, #3]
 800e90c:	701a      	strb	r2, [r3, #0]
	return NRF_OK;
 800e90e:	2300      	movs	r3, #0
}
 800e910:	4618      	mov	r0, r3
 800e912:	3710      	adds	r7, #16
 800e914:	46bd      	mov	sp, r7
 800e916:	bd80      	pop	{r7, pc}

0800e918 <nrf_clear_interrupts>:
		return NRF_ERROR;
	}
	return NRF_OK;
}

NRF_RESULT nrf_clear_interrupts(nrf24l01* dev) {
 800e918:	b580      	push	{r7, lr}
 800e91a:	b084      	sub	sp, #16
 800e91c:	af00      	add	r7, sp, #0
 800e91e:	6078      	str	r0, [r7, #4]
	uint8_t reg = 0;
 800e920:	2300      	movs	r3, #0
 800e922:	73fb      	strb	r3, [r7, #15]
	if (nrf_read_register(dev, NRF_STATUS, &reg) != NRF_OK) {
 800e924:	f107 030f 	add.w	r3, r7, #15
 800e928:	461a      	mov	r2, r3
 800e92a:	2107      	movs	r1, #7
 800e92c:	6878      	ldr	r0, [r7, #4]
 800e92e:	f7ff fef6 	bl	800e71e <nrf_read_register>
 800e932:	4603      	mov	r3, r0
 800e934:	2b00      	cmp	r3, #0
 800e936:	d001      	beq.n	800e93c <nrf_clear_interrupts+0x24>
		return NRF_ERROR;
 800e938:	2301      	movs	r3, #1
 800e93a:	e011      	b.n	800e960 <nrf_clear_interrupts+0x48>
	}

	reg |= 7 << 4; // setting bits 4,5,6
 800e93c:	7bfb      	ldrb	r3, [r7, #15]
 800e93e:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800e942:	b2db      	uxtb	r3, r3
 800e944:	73fb      	strb	r3, [r7, #15]

	if (nrf_write_register(dev, NRF_STATUS, &reg) != NRF_OK) {
 800e946:	f107 030f 	add.w	r3, r7, #15
 800e94a:	461a      	mov	r2, r3
 800e94c:	2107      	movs	r1, #7
 800e94e:	6878      	ldr	r0, [r7, #4]
 800e950:	f7ff ff01 	bl	800e756 <nrf_write_register>
 800e954:	4603      	mov	r3, r0
 800e956:	2b00      	cmp	r3, #0
 800e958:	d001      	beq.n	800e95e <nrf_clear_interrupts+0x46>
		return NRF_ERROR;
 800e95a:	2301      	movs	r3, #1
 800e95c:	e000      	b.n	800e960 <nrf_clear_interrupts+0x48>
	}
	return NRF_OK;
 800e95e:	2300      	movs	r3, #0
}
 800e960:	4618      	mov	r0, r3
 800e962:	3710      	adds	r7, #16
 800e964:	46bd      	mov	sp, r7
 800e966:	bd80      	pop	{r7, pc}

0800e968 <nrf_set_rf_channel>:

NRF_RESULT nrf_set_rf_channel(nrf24l01* dev, uint8_t ch) {
 800e968:	b580      	push	{r7, lr}
 800e96a:	b084      	sub	sp, #16
 800e96c:	af00      	add	r7, sp, #0
 800e96e:	6078      	str	r0, [r7, #4]
 800e970:	460b      	mov	r3, r1
 800e972:	70fb      	strb	r3, [r7, #3]
	ch &= 0x7F;
 800e974:	78fb      	ldrb	r3, [r7, #3]
 800e976:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e97a:	70fb      	strb	r3, [r7, #3]
	uint8_t reg = 0;
 800e97c:	2300      	movs	r3, #0
 800e97e:	73fb      	strb	r3, [r7, #15]
	if (nrf_read_register(dev, NRF_RF_CH, &reg) != NRF_OK) {
 800e980:	f107 030f 	add.w	r3, r7, #15
 800e984:	461a      	mov	r2, r3
 800e986:	2105      	movs	r1, #5
 800e988:	6878      	ldr	r0, [r7, #4]
 800e98a:	f7ff fec8 	bl	800e71e <nrf_read_register>
 800e98e:	4603      	mov	r3, r0
 800e990:	2b00      	cmp	r3, #0
 800e992:	d001      	beq.n	800e998 <nrf_set_rf_channel+0x30>
		return NRF_ERROR;
 800e994:	2301      	movs	r3, #1
 800e996:	e014      	b.n	800e9c2 <nrf_set_rf_channel+0x5a>
	}

	reg |= ch; // setting channel
 800e998:	7bfa      	ldrb	r2, [r7, #15]
 800e99a:	78fb      	ldrb	r3, [r7, #3]
 800e99c:	4313      	orrs	r3, r2
 800e99e:	b2db      	uxtb	r3, r3
 800e9a0:	73fb      	strb	r3, [r7, #15]

	if (nrf_write_register(dev, NRF_RF_CH, &reg) != NRF_OK) {
 800e9a2:	f107 030f 	add.w	r3, r7, #15
 800e9a6:	461a      	mov	r2, r3
 800e9a8:	2105      	movs	r1, #5
 800e9aa:	6878      	ldr	r0, [r7, #4]
 800e9ac:	f7ff fed3 	bl	800e756 <nrf_write_register>
 800e9b0:	4603      	mov	r3, r0
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d001      	beq.n	800e9ba <nrf_set_rf_channel+0x52>
		return NRF_ERROR;
 800e9b6:	2301      	movs	r3, #1
 800e9b8:	e003      	b.n	800e9c2 <nrf_set_rf_channel+0x5a>
	}
	dev->config.rf_channel = ch;
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	78fa      	ldrb	r2, [r7, #3]
 800e9be:	71da      	strb	r2, [r3, #7]
	return NRF_OK;
 800e9c0:	2300      	movs	r3, #0
}
 800e9c2:	4618      	mov	r0, r3
 800e9c4:	3710      	adds	r7, #16
 800e9c6:	46bd      	mov	sp, r7
 800e9c8:	bd80      	pop	{r7, pc}

0800e9ca <nrf_set_retransmittion_count>:

NRF_RESULT nrf_set_retransmittion_count(nrf24l01* dev, uint8_t count) {
 800e9ca:	b580      	push	{r7, lr}
 800e9cc:	b084      	sub	sp, #16
 800e9ce:	af00      	add	r7, sp, #0
 800e9d0:	6078      	str	r0, [r7, #4]
 800e9d2:	460b      	mov	r3, r1
 800e9d4:	70fb      	strb	r3, [r7, #3]
	count &= 0x0F;
 800e9d6:	78fb      	ldrb	r3, [r7, #3]
 800e9d8:	f003 030f 	and.w	r3, r3, #15
 800e9dc:	70fb      	strb	r3, [r7, #3]
	uint8_t reg = 0;
 800e9de:	2300      	movs	r3, #0
 800e9e0:	73fb      	strb	r3, [r7, #15]
	if (nrf_read_register(dev, NRF_SETUP_RETR, &reg) != NRF_OK) {
 800e9e2:	f107 030f 	add.w	r3, r7, #15
 800e9e6:	461a      	mov	r2, r3
 800e9e8:	2104      	movs	r1, #4
 800e9ea:	6878      	ldr	r0, [r7, #4]
 800e9ec:	f7ff fe97 	bl	800e71e <nrf_read_register>
 800e9f0:	4603      	mov	r3, r0
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d001      	beq.n	800e9fa <nrf_set_retransmittion_count+0x30>
		return NRF_ERROR;
 800e9f6:	2301      	movs	r3, #1
 800e9f8:	e019      	b.n	800ea2e <nrf_set_retransmittion_count+0x64>
	}

	reg &= 0xF0;  // clearing bits 0,1,2,3
 800e9fa:	7bfb      	ldrb	r3, [r7, #15]
 800e9fc:	f023 030f 	bic.w	r3, r3, #15
 800ea00:	b2db      	uxtb	r3, r3
 800ea02:	73fb      	strb	r3, [r7, #15]
	reg |= count; // setting count
 800ea04:	7bfa      	ldrb	r2, [r7, #15]
 800ea06:	78fb      	ldrb	r3, [r7, #3]
 800ea08:	4313      	orrs	r3, r2
 800ea0a:	b2db      	uxtb	r3, r3
 800ea0c:	73fb      	strb	r3, [r7, #15]

	if (nrf_write_register(dev, NRF_SETUP_RETR, &reg) != NRF_OK) {
 800ea0e:	f107 030f 	add.w	r3, r7, #15
 800ea12:	461a      	mov	r2, r3
 800ea14:	2104      	movs	r1, #4
 800ea16:	6878      	ldr	r0, [r7, #4]
 800ea18:	f7ff fe9d 	bl	800e756 <nrf_write_register>
 800ea1c:	4603      	mov	r3, r0
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d001      	beq.n	800ea26 <nrf_set_retransmittion_count+0x5c>
		return NRF_ERROR;
 800ea22:	2301      	movs	r3, #1
 800ea24:	e003      	b.n	800ea2e <nrf_set_retransmittion_count+0x64>
	}
	dev->config.retransmit_count = count;
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	78fa      	ldrb	r2, [r7, #3]
 800ea2a:	715a      	strb	r2, [r3, #5]
	return NRF_OK;
 800ea2c:	2300      	movs	r3, #0
}
 800ea2e:	4618      	mov	r0, r3
 800ea30:	3710      	adds	r7, #16
 800ea32:	46bd      	mov	sp, r7
 800ea34:	bd80      	pop	{r7, pc}

0800ea36 <nrf_set_retransmittion_delay>:

NRF_RESULT nrf_set_retransmittion_delay(nrf24l01* dev, uint8_t delay) {
 800ea36:	b580      	push	{r7, lr}
 800ea38:	b084      	sub	sp, #16
 800ea3a:	af00      	add	r7, sp, #0
 800ea3c:	6078      	str	r0, [r7, #4]
 800ea3e:	460b      	mov	r3, r1
 800ea40:	70fb      	strb	r3, [r7, #3]
	delay &= 0x0F;
 800ea42:	78fb      	ldrb	r3, [r7, #3]
 800ea44:	f003 030f 	and.w	r3, r3, #15
 800ea48:	70fb      	strb	r3, [r7, #3]
	uint8_t reg = 0;
 800ea4a:	2300      	movs	r3, #0
 800ea4c:	73fb      	strb	r3, [r7, #15]
	if (nrf_read_register(dev, NRF_SETUP_RETR, &reg) != NRF_OK) {
 800ea4e:	f107 030f 	add.w	r3, r7, #15
 800ea52:	461a      	mov	r2, r3
 800ea54:	2104      	movs	r1, #4
 800ea56:	6878      	ldr	r0, [r7, #4]
 800ea58:	f7ff fe61 	bl	800e71e <nrf_read_register>
 800ea5c:	4603      	mov	r3, r0
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d001      	beq.n	800ea66 <nrf_set_retransmittion_delay+0x30>
		return NRF_ERROR;
 800ea62:	2301      	movs	r3, #1
 800ea64:	e01d      	b.n	800eaa2 <nrf_set_retransmittion_delay+0x6c>
	}

	reg &= 0x0F;       // clearing bits 1,2,6,7
 800ea66:	7bfb      	ldrb	r3, [r7, #15]
 800ea68:	f003 030f 	and.w	r3, r3, #15
 800ea6c:	b2db      	uxtb	r3, r3
 800ea6e:	73fb      	strb	r3, [r7, #15]
	reg |= delay << 4; // setting delay
 800ea70:	78fb      	ldrb	r3, [r7, #3]
 800ea72:	011b      	lsls	r3, r3, #4
 800ea74:	b25a      	sxtb	r2, r3
 800ea76:	7bfb      	ldrb	r3, [r7, #15]
 800ea78:	b25b      	sxtb	r3, r3
 800ea7a:	4313      	orrs	r3, r2
 800ea7c:	b25b      	sxtb	r3, r3
 800ea7e:	b2db      	uxtb	r3, r3
 800ea80:	73fb      	strb	r3, [r7, #15]

	if (nrf_write_register(dev, NRF_SETUP_RETR, &reg) != NRF_OK) {
 800ea82:	f107 030f 	add.w	r3, r7, #15
 800ea86:	461a      	mov	r2, r3
 800ea88:	2104      	movs	r1, #4
 800ea8a:	6878      	ldr	r0, [r7, #4]
 800ea8c:	f7ff fe63 	bl	800e756 <nrf_write_register>
 800ea90:	4603      	mov	r3, r0
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d001      	beq.n	800ea9a <nrf_set_retransmittion_delay+0x64>
		return NRF_ERROR;
 800ea96:	2301      	movs	r3, #1
 800ea98:	e003      	b.n	800eaa2 <nrf_set_retransmittion_delay+0x6c>
	}
	dev->config.retransmit_delay = delay;
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	78fa      	ldrb	r2, [r7, #3]
 800ea9e:	719a      	strb	r2, [r3, #6]
	return NRF_OK;
 800eaa0:	2300      	movs	r3, #0
}
 800eaa2:	4618      	mov	r0, r3
 800eaa4:	3710      	adds	r7, #16
 800eaa6:	46bd      	mov	sp, r7
 800eaa8:	bd80      	pop	{r7, pc}

0800eaaa <nrf_set_address_width>:

NRF_RESULT nrf_set_address_width(nrf24l01* dev, NRF_ADDR_WIDTH width) {
 800eaaa:	b580      	push	{r7, lr}
 800eaac:	b084      	sub	sp, #16
 800eaae:	af00      	add	r7, sp, #0
 800eab0:	6078      	str	r0, [r7, #4]
 800eab2:	460b      	mov	r3, r1
 800eab4:	70fb      	strb	r3, [r7, #3]
	uint8_t reg = 0;
 800eab6:	2300      	movs	r3, #0
 800eab8:	73fb      	strb	r3, [r7, #15]
	if (nrf_read_register(dev, NRF_SETUP_AW, &reg) != NRF_OK) {
 800eaba:	f107 030f 	add.w	r3, r7, #15
 800eabe:	461a      	mov	r2, r3
 800eac0:	2103      	movs	r1, #3
 800eac2:	6878      	ldr	r0, [r7, #4]
 800eac4:	f7ff fe2b 	bl	800e71e <nrf_read_register>
 800eac8:	4603      	mov	r3, r0
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d001      	beq.n	800ead2 <nrf_set_address_width+0x28>
		return NRF_ERROR;
 800eace:	2301      	movs	r3, #1
 800ead0:	e019      	b.n	800eb06 <nrf_set_address_width+0x5c>
	}

	reg &= 0x03;  // clearing bits 0,1
 800ead2:	7bfb      	ldrb	r3, [r7, #15]
 800ead4:	f003 0303 	and.w	r3, r3, #3
 800ead8:	b2db      	uxtb	r3, r3
 800eada:	73fb      	strb	r3, [r7, #15]
	reg |= width; // setting delay
 800eadc:	7bfa      	ldrb	r2, [r7, #15]
 800eade:	78fb      	ldrb	r3, [r7, #3]
 800eae0:	4313      	orrs	r3, r2
 800eae2:	b2db      	uxtb	r3, r3
 800eae4:	73fb      	strb	r3, [r7, #15]

	if (nrf_write_register(dev, NRF_SETUP_AW, &reg) != NRF_OK) {
 800eae6:	f107 030f 	add.w	r3, r7, #15
 800eaea:	461a      	mov	r2, r3
 800eaec:	2103      	movs	r1, #3
 800eaee:	6878      	ldr	r0, [r7, #4]
 800eaf0:	f7ff fe31 	bl	800e756 <nrf_write_register>
 800eaf4:	4603      	mov	r3, r0
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d001      	beq.n	800eafe <nrf_set_address_width+0x54>
		return NRF_ERROR;
 800eafa:	2301      	movs	r3, #1
 800eafc:	e003      	b.n	800eb06 <nrf_set_address_width+0x5c>
	}
	dev->config.addr_width = width;
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	78fa      	ldrb	r2, [r7, #3]
 800eb02:	70da      	strb	r2, [r3, #3]
	return NRF_OK;
 800eb04:	2300      	movs	r3, #0
}
 800eb06:	4618      	mov	r0, r3
 800eb08:	3710      	adds	r7, #16
 800eb0a:	46bd      	mov	sp, r7
 800eb0c:	bd80      	pop	{r7, pc}

0800eb0e <nrf_set_rx_pipes>:

NRF_RESULT nrf_set_rx_pipes(nrf24l01* dev, uint8_t pipes) {
 800eb0e:	b580      	push	{r7, lr}
 800eb10:	b082      	sub	sp, #8
 800eb12:	af00      	add	r7, sp, #0
 800eb14:	6078      	str	r0, [r7, #4]
 800eb16:	460b      	mov	r3, r1
 800eb18:	70fb      	strb	r3, [r7, #3]
	if (nrf_write_register(dev, NRF_EN_RXADDR, &pipes) != NRF_OK) {
 800eb1a:	1cfb      	adds	r3, r7, #3
 800eb1c:	461a      	mov	r2, r3
 800eb1e:	2102      	movs	r1, #2
 800eb20:	6878      	ldr	r0, [r7, #4]
 800eb22:	f7ff fe18 	bl	800e756 <nrf_write_register>
 800eb26:	4603      	mov	r3, r0
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d001      	beq.n	800eb30 <nrf_set_rx_pipes+0x22>
		return NRF_ERROR;
 800eb2c:	2301      	movs	r3, #1
 800eb2e:	e000      	b.n	800eb32 <nrf_set_rx_pipes+0x24>
	}
	return NRF_OK;
 800eb30:	2300      	movs	r3, #0
}
 800eb32:	4618      	mov	r0, r3
 800eb34:	3708      	adds	r7, #8
 800eb36:	46bd      	mov	sp, r7
 800eb38:	bd80      	pop	{r7, pc}

0800eb3a <nrf_enable_auto_ack>:

NRF_RESULT nrf_enable_auto_ack(nrf24l01* dev, uint8_t pipe) {
 800eb3a:	b580      	push	{r7, lr}
 800eb3c:	b084      	sub	sp, #16
 800eb3e:	af00      	add	r7, sp, #0
 800eb40:	6078      	str	r0, [r7, #4]
 800eb42:	460b      	mov	r3, r1
 800eb44:	70fb      	strb	r3, [r7, #3]
	uint8_t reg = 0;
 800eb46:	2300      	movs	r3, #0
 800eb48:	73fb      	strb	r3, [r7, #15]
	if (nrf_read_register(dev, NRF_EN_AA, &reg) != NRF_OK) {
 800eb4a:	f107 030f 	add.w	r3, r7, #15
 800eb4e:	461a      	mov	r2, r3
 800eb50:	2101      	movs	r1, #1
 800eb52:	6878      	ldr	r0, [r7, #4]
 800eb54:	f7ff fde3 	bl	800e71e <nrf_read_register>
 800eb58:	4603      	mov	r3, r0
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d001      	beq.n	800eb62 <nrf_enable_auto_ack+0x28>
		return NRF_ERROR;
 800eb5e:	2301      	movs	r3, #1
 800eb60:	e017      	b.n	800eb92 <nrf_enable_auto_ack+0x58>
	}

	reg |= 1 << pipe;
 800eb62:	78fb      	ldrb	r3, [r7, #3]
 800eb64:	2201      	movs	r2, #1
 800eb66:	fa02 f303 	lsl.w	r3, r2, r3
 800eb6a:	b25a      	sxtb	r2, r3
 800eb6c:	7bfb      	ldrb	r3, [r7, #15]
 800eb6e:	b25b      	sxtb	r3, r3
 800eb70:	4313      	orrs	r3, r2
 800eb72:	b25b      	sxtb	r3, r3
 800eb74:	b2db      	uxtb	r3, r3
 800eb76:	73fb      	strb	r3, [r7, #15]

	if (nrf_write_register(dev, NRF_EN_AA, &reg) != NRF_OK) {
 800eb78:	f107 030f 	add.w	r3, r7, #15
 800eb7c:	461a      	mov	r2, r3
 800eb7e:	2101      	movs	r1, #1
 800eb80:	6878      	ldr	r0, [r7, #4]
 800eb82:	f7ff fde8 	bl	800e756 <nrf_write_register>
 800eb86:	4603      	mov	r3, r0
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d001      	beq.n	800eb90 <nrf_enable_auto_ack+0x56>
		return NRF_ERROR;
 800eb8c:	2301      	movs	r3, #1
 800eb8e:	e000      	b.n	800eb92 <nrf_enable_auto_ack+0x58>
	}
	return NRF_OK;
 800eb90:	2300      	movs	r3, #0
}
 800eb92:	4618      	mov	r0, r3
 800eb94:	3710      	adds	r7, #16
 800eb96:	46bd      	mov	sp, r7
 800eb98:	bd80      	pop	{r7, pc}

0800eb9a <nrf_enable_crc>:

NRF_RESULT nrf_enable_crc(nrf24l01* dev, bool activate) {
 800eb9a:	b580      	push	{r7, lr}
 800eb9c:	b084      	sub	sp, #16
 800eb9e:	af00      	add	r7, sp, #0
 800eba0:	6078      	str	r0, [r7, #4]
 800eba2:	460b      	mov	r3, r1
 800eba4:	70fb      	strb	r3, [r7, #3]
	uint8_t reg = 0;
 800eba6:	2300      	movs	r3, #0
 800eba8:	73fb      	strb	r3, [r7, #15]
	if (nrf_read_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 800ebaa:	f107 030f 	add.w	r3, r7, #15
 800ebae:	461a      	mov	r2, r3
 800ebb0:	2100      	movs	r1, #0
 800ebb2:	6878      	ldr	r0, [r7, #4]
 800ebb4:	f7ff fdb3 	bl	800e71e <nrf_read_register>
 800ebb8:	4603      	mov	r3, r0
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d001      	beq.n	800ebc2 <nrf_enable_crc+0x28>
		return NRF_ERROR;
 800ebbe:	2301      	movs	r3, #1
 800ebc0:	e01a      	b.n	800ebf8 <nrf_enable_crc+0x5e>
	}

	if (activate) {
 800ebc2:	78fb      	ldrb	r3, [r7, #3]
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d005      	beq.n	800ebd4 <nrf_enable_crc+0x3a>
		reg |= 1 << 3;
 800ebc8:	7bfb      	ldrb	r3, [r7, #15]
 800ebca:	f043 0308 	orr.w	r3, r3, #8
 800ebce:	b2db      	uxtb	r3, r3
 800ebd0:	73fb      	strb	r3, [r7, #15]
 800ebd2:	e004      	b.n	800ebde <nrf_enable_crc+0x44>
	} else {
		reg &= ~(1 << 3);
 800ebd4:	7bfb      	ldrb	r3, [r7, #15]
 800ebd6:	f023 0308 	bic.w	r3, r3, #8
 800ebda:	b2db      	uxtb	r3, r3
 800ebdc:	73fb      	strb	r3, [r7, #15]
	}

	if (nrf_write_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 800ebde:	f107 030f 	add.w	r3, r7, #15
 800ebe2:	461a      	mov	r2, r3
 800ebe4:	2100      	movs	r1, #0
 800ebe6:	6878      	ldr	r0, [r7, #4]
 800ebe8:	f7ff fdb5 	bl	800e756 <nrf_write_register>
 800ebec:	4603      	mov	r3, r0
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d001      	beq.n	800ebf6 <nrf_enable_crc+0x5c>
		return NRF_ERROR;
 800ebf2:	2301      	movs	r3, #1
 800ebf4:	e000      	b.n	800ebf8 <nrf_enable_crc+0x5e>
	}
	return NRF_OK;
 800ebf6:	2300      	movs	r3, #0
}
 800ebf8:	4618      	mov	r0, r3
 800ebfa:	3710      	adds	r7, #16
 800ebfc:	46bd      	mov	sp, r7
 800ebfe:	bd80      	pop	{r7, pc}

0800ec00 <nrf_set_crc_width>:

NRF_RESULT nrf_set_crc_width(nrf24l01* dev, NRF_CRC_WIDTH width) {
 800ec00:	b580      	push	{r7, lr}
 800ec02:	b084      	sub	sp, #16
 800ec04:	af00      	add	r7, sp, #0
 800ec06:	6078      	str	r0, [r7, #4]
 800ec08:	460b      	mov	r3, r1
 800ec0a:	70fb      	strb	r3, [r7, #3]
	uint8_t reg = 0;
 800ec0c:	2300      	movs	r3, #0
 800ec0e:	73fb      	strb	r3, [r7, #15]
	if (nrf_read_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 800ec10:	f107 030f 	add.w	r3, r7, #15
 800ec14:	461a      	mov	r2, r3
 800ec16:	2100      	movs	r1, #0
 800ec18:	6878      	ldr	r0, [r7, #4]
 800ec1a:	f7ff fd80 	bl	800e71e <nrf_read_register>
 800ec1e:	4603      	mov	r3, r0
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d001      	beq.n	800ec28 <nrf_set_crc_width+0x28>
		return NRF_ERROR;
 800ec24:	2301      	movs	r3, #1
 800ec26:	e01d      	b.n	800ec64 <nrf_set_crc_width+0x64>
	}

	if (width == NRF_CRC_WIDTH_2B) {
 800ec28:	78fb      	ldrb	r3, [r7, #3]
 800ec2a:	2b01      	cmp	r3, #1
 800ec2c:	d105      	bne.n	800ec3a <nrf_set_crc_width+0x3a>
		reg |= 1 << 2;
 800ec2e:	7bfb      	ldrb	r3, [r7, #15]
 800ec30:	f043 0304 	orr.w	r3, r3, #4
 800ec34:	b2db      	uxtb	r3, r3
 800ec36:	73fb      	strb	r3, [r7, #15]
 800ec38:	e004      	b.n	800ec44 <nrf_set_crc_width+0x44>
	} else {
		reg &= ~(1 << 3);
 800ec3a:	7bfb      	ldrb	r3, [r7, #15]
 800ec3c:	f023 0308 	bic.w	r3, r3, #8
 800ec40:	b2db      	uxtb	r3, r3
 800ec42:	73fb      	strb	r3, [r7, #15]
	}

	if (nrf_write_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 800ec44:	f107 030f 	add.w	r3, r7, #15
 800ec48:	461a      	mov	r2, r3
 800ec4a:	2100      	movs	r1, #0
 800ec4c:	6878      	ldr	r0, [r7, #4]
 800ec4e:	f7ff fd82 	bl	800e756 <nrf_write_register>
 800ec52:	4603      	mov	r3, r0
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d001      	beq.n	800ec5c <nrf_set_crc_width+0x5c>
		return NRF_ERROR;
 800ec58:	2301      	movs	r3, #1
 800ec5a:	e003      	b.n	800ec64 <nrf_set_crc_width+0x64>
	}
	dev->config.crc_width = width;
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	78fa      	ldrb	r2, [r7, #3]
 800ec60:	709a      	strb	r2, [r3, #2]
	return NRF_OK;
 800ec62:	2300      	movs	r3, #0
}
 800ec64:	4618      	mov	r0, r3
 800ec66:	3710      	adds	r7, #16
 800ec68:	46bd      	mov	sp, r7
 800ec6a:	bd80      	pop	{r7, pc}

0800ec6c <nrf_power_up>:

NRF_RESULT nrf_power_up(nrf24l01* dev, bool power_up) {
 800ec6c:	b580      	push	{r7, lr}
 800ec6e:	b084      	sub	sp, #16
 800ec70:	af00      	add	r7, sp, #0
 800ec72:	6078      	str	r0, [r7, #4]
 800ec74:	460b      	mov	r3, r1
 800ec76:	70fb      	strb	r3, [r7, #3]
	uint8_t reg = 0;
 800ec78:	2300      	movs	r3, #0
 800ec7a:	73fb      	strb	r3, [r7, #15]
	if (nrf_read_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 800ec7c:	f107 030f 	add.w	r3, r7, #15
 800ec80:	461a      	mov	r2, r3
 800ec82:	2100      	movs	r1, #0
 800ec84:	6878      	ldr	r0, [r7, #4]
 800ec86:	f7ff fd4a 	bl	800e71e <nrf_read_register>
 800ec8a:	4603      	mov	r3, r0
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d001      	beq.n	800ec94 <nrf_power_up+0x28>
		return NRF_ERROR;
 800ec90:	2301      	movs	r3, #1
 800ec92:	e01a      	b.n	800ecca <nrf_power_up+0x5e>
	}

	if (power_up) {
 800ec94:	78fb      	ldrb	r3, [r7, #3]
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d005      	beq.n	800eca6 <nrf_power_up+0x3a>
		reg |= 1 << 1;
 800ec9a:	7bfb      	ldrb	r3, [r7, #15]
 800ec9c:	f043 0302 	orr.w	r3, r3, #2
 800eca0:	b2db      	uxtb	r3, r3
 800eca2:	73fb      	strb	r3, [r7, #15]
 800eca4:	e004      	b.n	800ecb0 <nrf_power_up+0x44>
	} else {
		reg &= ~(1 << 1);
 800eca6:	7bfb      	ldrb	r3, [r7, #15]
 800eca8:	f023 0302 	bic.w	r3, r3, #2
 800ecac:	b2db      	uxtb	r3, r3
 800ecae:	73fb      	strb	r3, [r7, #15]
	}

	if (nrf_write_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 800ecb0:	f107 030f 	add.w	r3, r7, #15
 800ecb4:	461a      	mov	r2, r3
 800ecb6:	2100      	movs	r1, #0
 800ecb8:	6878      	ldr	r0, [r7, #4]
 800ecba:	f7ff fd4c 	bl	800e756 <nrf_write_register>
 800ecbe:	4603      	mov	r3, r0
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d001      	beq.n	800ecc8 <nrf_power_up+0x5c>
		return NRF_ERROR;
 800ecc4:	2301      	movs	r3, #1
 800ecc6:	e000      	b.n	800ecca <nrf_power_up+0x5e>
	}
	return NRF_OK;
 800ecc8:	2300      	movs	r3, #0
}
 800ecca:	4618      	mov	r0, r3
 800eccc:	3710      	adds	r7, #16
 800ecce:	46bd      	mov	sp, r7
 800ecd0:	bd80      	pop	{r7, pc}

0800ecd2 <nrf_rx_tx_control>:

NRF_RESULT nrf_rx_tx_control(nrf24l01* dev, NRF_TXRX_STATE rx) {
 800ecd2:	b580      	push	{r7, lr}
 800ecd4:	b084      	sub	sp, #16
 800ecd6:	af00      	add	r7, sp, #0
 800ecd8:	6078      	str	r0, [r7, #4]
 800ecda:	460b      	mov	r3, r1
 800ecdc:	70fb      	strb	r3, [r7, #3]
	uint8_t reg = 0;
 800ecde:	2300      	movs	r3, #0
 800ece0:	73fb      	strb	r3, [r7, #15]
	if (nrf_read_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 800ece2:	f107 030f 	add.w	r3, r7, #15
 800ece6:	461a      	mov	r2, r3
 800ece8:	2100      	movs	r1, #0
 800ecea:	6878      	ldr	r0, [r7, #4]
 800ecec:	f7ff fd17 	bl	800e71e <nrf_read_register>
 800ecf0:	4603      	mov	r3, r0
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d001      	beq.n	800ecfa <nrf_rx_tx_control+0x28>
		return NRF_ERROR;
 800ecf6:	2301      	movs	r3, #1
 800ecf8:	e01a      	b.n	800ed30 <nrf_rx_tx_control+0x5e>
	}

	if (rx) {
 800ecfa:	78fb      	ldrb	r3, [r7, #3]
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d005      	beq.n	800ed0c <nrf_rx_tx_control+0x3a>
		reg |= 1;
 800ed00:	7bfb      	ldrb	r3, [r7, #15]
 800ed02:	f043 0301 	orr.w	r3, r3, #1
 800ed06:	b2db      	uxtb	r3, r3
 800ed08:	73fb      	strb	r3, [r7, #15]
 800ed0a:	e004      	b.n	800ed16 <nrf_rx_tx_control+0x44>
	} else {
		reg &= ~(1);
 800ed0c:	7bfb      	ldrb	r3, [r7, #15]
 800ed0e:	f023 0301 	bic.w	r3, r3, #1
 800ed12:	b2db      	uxtb	r3, r3
 800ed14:	73fb      	strb	r3, [r7, #15]
	}

	if (nrf_write_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 800ed16:	f107 030f 	add.w	r3, r7, #15
 800ed1a:	461a      	mov	r2, r3
 800ed1c:	2100      	movs	r1, #0
 800ed1e:	6878      	ldr	r0, [r7, #4]
 800ed20:	f7ff fd19 	bl	800e756 <nrf_write_register>
 800ed24:	4603      	mov	r3, r0
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d001      	beq.n	800ed2e <nrf_rx_tx_control+0x5c>
		return NRF_ERROR;
 800ed2a:	2301      	movs	r3, #1
 800ed2c:	e000      	b.n	800ed30 <nrf_rx_tx_control+0x5e>
	}
	return NRF_OK;
 800ed2e:	2300      	movs	r3, #0
}
 800ed30:	4618      	mov	r0, r3
 800ed32:	3710      	adds	r7, #16
 800ed34:	46bd      	mov	sp, r7
 800ed36:	bd80      	pop	{r7, pc}

0800ed38 <nrf_enable_rx_data_ready_irq>:

NRF_RESULT nrf_enable_rx_data_ready_irq(nrf24l01* dev, bool activate) {
 800ed38:	b580      	push	{r7, lr}
 800ed3a:	b084      	sub	sp, #16
 800ed3c:	af00      	add	r7, sp, #0
 800ed3e:	6078      	str	r0, [r7, #4]
 800ed40:	460b      	mov	r3, r1
 800ed42:	70fb      	strb	r3, [r7, #3]
	uint8_t reg = 0;
 800ed44:	2300      	movs	r3, #0
 800ed46:	73fb      	strb	r3, [r7, #15]
	if (nrf_read_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 800ed48:	f107 030f 	add.w	r3, r7, #15
 800ed4c:	461a      	mov	r2, r3
 800ed4e:	2100      	movs	r1, #0
 800ed50:	6878      	ldr	r0, [r7, #4]
 800ed52:	f7ff fce4 	bl	800e71e <nrf_read_register>
 800ed56:	4603      	mov	r3, r0
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d001      	beq.n	800ed60 <nrf_enable_rx_data_ready_irq+0x28>
		return NRF_ERROR;
 800ed5c:	2301      	movs	r3, #1
 800ed5e:	e01d      	b.n	800ed9c <nrf_enable_rx_data_ready_irq+0x64>
	}

	if (!activate) {
 800ed60:	78fb      	ldrb	r3, [r7, #3]
 800ed62:	f083 0301 	eor.w	r3, r3, #1
 800ed66:	b2db      	uxtb	r3, r3
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d005      	beq.n	800ed78 <nrf_enable_rx_data_ready_irq+0x40>
		reg |= 1 << 6;
 800ed6c:	7bfb      	ldrb	r3, [r7, #15]
 800ed6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ed72:	b2db      	uxtb	r3, r3
 800ed74:	73fb      	strb	r3, [r7, #15]
 800ed76:	e004      	b.n	800ed82 <nrf_enable_rx_data_ready_irq+0x4a>
	} else {
		reg &= ~(1 << 6);
 800ed78:	7bfb      	ldrb	r3, [r7, #15]
 800ed7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ed7e:	b2db      	uxtb	r3, r3
 800ed80:	73fb      	strb	r3, [r7, #15]
	}

	if (nrf_write_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 800ed82:	f107 030f 	add.w	r3, r7, #15
 800ed86:	461a      	mov	r2, r3
 800ed88:	2100      	movs	r1, #0
 800ed8a:	6878      	ldr	r0, [r7, #4]
 800ed8c:	f7ff fce3 	bl	800e756 <nrf_write_register>
 800ed90:	4603      	mov	r3, r0
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d001      	beq.n	800ed9a <nrf_enable_rx_data_ready_irq+0x62>
		return NRF_ERROR;
 800ed96:	2301      	movs	r3, #1
 800ed98:	e000      	b.n	800ed9c <nrf_enable_rx_data_ready_irq+0x64>
	}
	return NRF_OK;
 800ed9a:	2300      	movs	r3, #0
}
 800ed9c:	4618      	mov	r0, r3
 800ed9e:	3710      	adds	r7, #16
 800eda0:	46bd      	mov	sp, r7
 800eda2:	bd80      	pop	{r7, pc}

0800eda4 <nrf_enable_tx_data_sent_irq>:

NRF_RESULT nrf_enable_tx_data_sent_irq(nrf24l01* dev, bool activate) {
 800eda4:	b580      	push	{r7, lr}
 800eda6:	b084      	sub	sp, #16
 800eda8:	af00      	add	r7, sp, #0
 800edaa:	6078      	str	r0, [r7, #4]
 800edac:	460b      	mov	r3, r1
 800edae:	70fb      	strb	r3, [r7, #3]
	uint8_t reg = 0;
 800edb0:	2300      	movs	r3, #0
 800edb2:	73fb      	strb	r3, [r7, #15]
	if (nrf_read_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 800edb4:	f107 030f 	add.w	r3, r7, #15
 800edb8:	461a      	mov	r2, r3
 800edba:	2100      	movs	r1, #0
 800edbc:	6878      	ldr	r0, [r7, #4]
 800edbe:	f7ff fcae 	bl	800e71e <nrf_read_register>
 800edc2:	4603      	mov	r3, r0
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d001      	beq.n	800edcc <nrf_enable_tx_data_sent_irq+0x28>
		return NRF_ERROR;
 800edc8:	2301      	movs	r3, #1
 800edca:	e01d      	b.n	800ee08 <nrf_enable_tx_data_sent_irq+0x64>
	}
	if (!activate) {
 800edcc:	78fb      	ldrb	r3, [r7, #3]
 800edce:	f083 0301 	eor.w	r3, r3, #1
 800edd2:	b2db      	uxtb	r3, r3
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d005      	beq.n	800ede4 <nrf_enable_tx_data_sent_irq+0x40>
		reg |= 1 << 5;
 800edd8:	7bfb      	ldrb	r3, [r7, #15]
 800edda:	f043 0320 	orr.w	r3, r3, #32
 800edde:	b2db      	uxtb	r3, r3
 800ede0:	73fb      	strb	r3, [r7, #15]
 800ede2:	e004      	b.n	800edee <nrf_enable_tx_data_sent_irq+0x4a>
	} else {
		reg &= ~(1 << 5);
 800ede4:	7bfb      	ldrb	r3, [r7, #15]
 800ede6:	f023 0320 	bic.w	r3, r3, #32
 800edea:	b2db      	uxtb	r3, r3
 800edec:	73fb      	strb	r3, [r7, #15]
	}
	if (nrf_write_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 800edee:	f107 030f 	add.w	r3, r7, #15
 800edf2:	461a      	mov	r2, r3
 800edf4:	2100      	movs	r1, #0
 800edf6:	6878      	ldr	r0, [r7, #4]
 800edf8:	f7ff fcad 	bl	800e756 <nrf_write_register>
 800edfc:	4603      	mov	r3, r0
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d001      	beq.n	800ee06 <nrf_enable_tx_data_sent_irq+0x62>
		return NRF_ERROR;
 800ee02:	2301      	movs	r3, #1
 800ee04:	e000      	b.n	800ee08 <nrf_enable_tx_data_sent_irq+0x64>
	}
	return NRF_OK;
 800ee06:	2300      	movs	r3, #0
}
 800ee08:	4618      	mov	r0, r3
 800ee0a:	3710      	adds	r7, #16
 800ee0c:	46bd      	mov	sp, r7
 800ee0e:	bd80      	pop	{r7, pc}

0800ee10 <nrf_enable_max_retransmit_irq>:

NRF_RESULT nrf_enable_max_retransmit_irq(nrf24l01* dev, bool activate) {
 800ee10:	b580      	push	{r7, lr}
 800ee12:	b084      	sub	sp, #16
 800ee14:	af00      	add	r7, sp, #0
 800ee16:	6078      	str	r0, [r7, #4]
 800ee18:	460b      	mov	r3, r1
 800ee1a:	70fb      	strb	r3, [r7, #3]
	uint8_t reg = 0;
 800ee1c:	2300      	movs	r3, #0
 800ee1e:	73fb      	strb	r3, [r7, #15]
	if (nrf_read_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 800ee20:	f107 030f 	add.w	r3, r7, #15
 800ee24:	461a      	mov	r2, r3
 800ee26:	2100      	movs	r1, #0
 800ee28:	6878      	ldr	r0, [r7, #4]
 800ee2a:	f7ff fc78 	bl	800e71e <nrf_read_register>
 800ee2e:	4603      	mov	r3, r0
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	d001      	beq.n	800ee38 <nrf_enable_max_retransmit_irq+0x28>
		return NRF_ERROR;
 800ee34:	2301      	movs	r3, #1
 800ee36:	e01d      	b.n	800ee74 <nrf_enable_max_retransmit_irq+0x64>
	}
	if (!activate) {
 800ee38:	78fb      	ldrb	r3, [r7, #3]
 800ee3a:	f083 0301 	eor.w	r3, r3, #1
 800ee3e:	b2db      	uxtb	r3, r3
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d005      	beq.n	800ee50 <nrf_enable_max_retransmit_irq+0x40>
		reg |= 1 << 4;
 800ee44:	7bfb      	ldrb	r3, [r7, #15]
 800ee46:	f043 0310 	orr.w	r3, r3, #16
 800ee4a:	b2db      	uxtb	r3, r3
 800ee4c:	73fb      	strb	r3, [r7, #15]
 800ee4e:	e004      	b.n	800ee5a <nrf_enable_max_retransmit_irq+0x4a>
	} else {
		reg &= ~(1 << 4);
 800ee50:	7bfb      	ldrb	r3, [r7, #15]
 800ee52:	f023 0310 	bic.w	r3, r3, #16
 800ee56:	b2db      	uxtb	r3, r3
 800ee58:	73fb      	strb	r3, [r7, #15]
	}
	if (nrf_write_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 800ee5a:	f107 030f 	add.w	r3, r7, #15
 800ee5e:	461a      	mov	r2, r3
 800ee60:	2100      	movs	r1, #0
 800ee62:	6878      	ldr	r0, [r7, #4]
 800ee64:	f7ff fc77 	bl	800e756 <nrf_write_register>
 800ee68:	4603      	mov	r3, r0
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d001      	beq.n	800ee72 <nrf_enable_max_retransmit_irq+0x62>
		return NRF_ERROR;
 800ee6e:	2301      	movs	r3, #1
 800ee70:	e000      	b.n	800ee74 <nrf_enable_max_retransmit_irq+0x64>
	}
	return NRF_OK;
 800ee72:	2300      	movs	r3, #0
}
 800ee74:	4618      	mov	r0, r3
 800ee76:	3710      	adds	r7, #16
 800ee78:	46bd      	mov	sp, r7
 800ee7a:	bd80      	pop	{r7, pc}

0800ee7c <nrf_set_rx_address_p0>:

NRF_RESULT nrf_set_rx_address_p0(nrf24l01* dev, const uint8_t* address) {
 800ee7c:	b580      	push	{r7, lr}
 800ee7e:	b086      	sub	sp, #24
 800ee80:	af02      	add	r7, sp, #8
 800ee82:	6078      	str	r0, [r7, #4]
 800ee84:	6039      	str	r1, [r7, #0]
	uint8_t rx[5];
	if (nrf_send_command(dev, NRF_CMD_W_REGISTER | NRF_RX_ADDR_P0, address, rx, 5) != NRF_OK) {
 800ee86:	f107 0208 	add.w	r2, r7, #8
 800ee8a:	2305      	movs	r3, #5
 800ee8c:	9300      	str	r3, [sp, #0]
 800ee8e:	4613      	mov	r3, r2
 800ee90:	683a      	ldr	r2, [r7, #0]
 800ee92:	212a      	movs	r1, #42	; 0x2a
 800ee94:	6878      	ldr	r0, [r7, #4]
 800ee96:	f7ff fae7 	bl	800e468 <nrf_send_command>
 800ee9a:	4603      	mov	r3, r0
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d001      	beq.n	800eea4 <nrf_set_rx_address_p0+0x28>
		return NRF_ERROR;
 800eea0:	2301      	movs	r3, #1
 800eea2:	e003      	b.n	800eeac <nrf_set_rx_address_p0+0x30>
	}
	dev->config.rx_address = address;
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	683a      	ldr	r2, [r7, #0]
 800eea8:	609a      	str	r2, [r3, #8]
	return NRF_OK;
 800eeaa:	2300      	movs	r3, #0
}
 800eeac:	4618      	mov	r0, r3
 800eeae:	3710      	adds	r7, #16
 800eeb0:	46bd      	mov	sp, r7
 800eeb2:	bd80      	pop	{r7, pc}

0800eeb4 <nrf_set_rx_address_p1>:

NRF_RESULT nrf_set_rx_address_p1(nrf24l01* dev, const uint8_t* address) {
 800eeb4:	b580      	push	{r7, lr}
 800eeb6:	b086      	sub	sp, #24
 800eeb8:	af02      	add	r7, sp, #8
 800eeba:	6078      	str	r0, [r7, #4]
 800eebc:	6039      	str	r1, [r7, #0]
	uint8_t rx[5];
	if (nrf_send_command(dev, NRF_CMD_W_REGISTER | NRF_RX_ADDR_P1, address, rx, 5) != NRF_OK) {
 800eebe:	f107 0208 	add.w	r2, r7, #8
 800eec2:	2305      	movs	r3, #5
 800eec4:	9300      	str	r3, [sp, #0]
 800eec6:	4613      	mov	r3, r2
 800eec8:	683a      	ldr	r2, [r7, #0]
 800eeca:	212b      	movs	r1, #43	; 0x2b
 800eecc:	6878      	ldr	r0, [r7, #4]
 800eece:	f7ff facb 	bl	800e468 <nrf_send_command>
 800eed2:	4603      	mov	r3, r0
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d001      	beq.n	800eedc <nrf_set_rx_address_p1+0x28>
		return NRF_ERROR;
 800eed8:	2301      	movs	r3, #1
 800eeda:	e003      	b.n	800eee4 <nrf_set_rx_address_p1+0x30>
	}
	dev->config.rx_address = address;
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	683a      	ldr	r2, [r7, #0]
 800eee0:	609a      	str	r2, [r3, #8]
	return NRF_OK;
 800eee2:	2300      	movs	r3, #0
}
 800eee4:	4618      	mov	r0, r3
 800eee6:	3710      	adds	r7, #16
 800eee8:	46bd      	mov	sp, r7
 800eeea:	bd80      	pop	{r7, pc}

0800eeec <nrf_set_tx_address>:

NRF_RESULT nrf_set_tx_address(nrf24l01* dev, const uint8_t* address) {
 800eeec:	b580      	push	{r7, lr}
 800eeee:	b086      	sub	sp, #24
 800eef0:	af02      	add	r7, sp, #8
 800eef2:	6078      	str	r0, [r7, #4]
 800eef4:	6039      	str	r1, [r7, #0]
	uint8_t rx[5];
	if (nrf_send_command(dev, NRF_CMD_W_REGISTER | NRF_TX_ADDR, address, rx, 5) != NRF_OK) {
 800eef6:	f107 0208 	add.w	r2, r7, #8
 800eefa:	2305      	movs	r3, #5
 800eefc:	9300      	str	r3, [sp, #0]
 800eefe:	4613      	mov	r3, r2
 800ef00:	683a      	ldr	r2, [r7, #0]
 800ef02:	2130      	movs	r1, #48	; 0x30
 800ef04:	6878      	ldr	r0, [r7, #4]
 800ef06:	f7ff faaf 	bl	800e468 <nrf_send_command>
 800ef0a:	4603      	mov	r3, r0
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d001      	beq.n	800ef14 <nrf_set_tx_address+0x28>
		return NRF_ERROR;
 800ef10:	2301      	movs	r3, #1
 800ef12:	e003      	b.n	800ef1c <nrf_set_tx_address+0x30>
	}
	dev->config.tx_address = address;
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	683a      	ldr	r2, [r7, #0]
 800ef18:	60da      	str	r2, [r3, #12]
	return NRF_OK;
 800ef1a:	2300      	movs	r3, #0
}
 800ef1c:	4618      	mov	r0, r3
 800ef1e:	3710      	adds	r7, #16
 800ef20:	46bd      	mov	sp, r7
 800ef22:	bd80      	pop	{r7, pc}

0800ef24 <nrf_set_rx_payload_width_p0>:

NRF_RESULT nrf_set_rx_payload_width_p0(nrf24l01* dev, uint8_t width) {
 800ef24:	b580      	push	{r7, lr}
 800ef26:	b082      	sub	sp, #8
 800ef28:	af00      	add	r7, sp, #0
 800ef2a:	6078      	str	r0, [r7, #4]
 800ef2c:	460b      	mov	r3, r1
 800ef2e:	70fb      	strb	r3, [r7, #3]
	width &= 0x3F;
 800ef30:	78fb      	ldrb	r3, [r7, #3]
 800ef32:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ef36:	b2db      	uxtb	r3, r3
 800ef38:	70fb      	strb	r3, [r7, #3]
	if (nrf_write_register(dev, NRF_RX_PW_P0, &width) != NRF_OK) {
 800ef3a:	1cfb      	adds	r3, r7, #3
 800ef3c:	461a      	mov	r2, r3
 800ef3e:	2111      	movs	r1, #17
 800ef40:	6878      	ldr	r0, [r7, #4]
 800ef42:	f7ff fc08 	bl	800e756 <nrf_write_register>
 800ef46:	4603      	mov	r3, r0
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d004      	beq.n	800ef56 <nrf_set_rx_payload_width_p0+0x32>
		dev->config.payload_length = 0;
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	2200      	movs	r2, #0
 800ef50:	711a      	strb	r2, [r3, #4]
		return NRF_ERROR;
 800ef52:	2301      	movs	r3, #1
 800ef54:	e003      	b.n	800ef5e <nrf_set_rx_payload_width_p0+0x3a>
	}
	dev->config.payload_length = width;
 800ef56:	78fa      	ldrb	r2, [r7, #3]
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	711a      	strb	r2, [r3, #4]
	return NRF_OK;
 800ef5c:	2300      	movs	r3, #0
}
 800ef5e:	4618      	mov	r0, r3
 800ef60:	3708      	adds	r7, #8
 800ef62:	46bd      	mov	sp, r7
 800ef64:	bd80      	pop	{r7, pc}

0800ef66 <nrf_set_rx_payload_width_p1>:

NRF_RESULT nrf_set_rx_payload_width_p1(nrf24l01* dev, uint8_t width) {
 800ef66:	b580      	push	{r7, lr}
 800ef68:	b082      	sub	sp, #8
 800ef6a:	af00      	add	r7, sp, #0
 800ef6c:	6078      	str	r0, [r7, #4]
 800ef6e:	460b      	mov	r3, r1
 800ef70:	70fb      	strb	r3, [r7, #3]
	width &= 0x3F;
 800ef72:	78fb      	ldrb	r3, [r7, #3]
 800ef74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ef78:	b2db      	uxtb	r3, r3
 800ef7a:	70fb      	strb	r3, [r7, #3]
	if (nrf_write_register(dev, NRF_RX_PW_P1, &width) != NRF_OK) {
 800ef7c:	1cfb      	adds	r3, r7, #3
 800ef7e:	461a      	mov	r2, r3
 800ef80:	2112      	movs	r1, #18
 800ef82:	6878      	ldr	r0, [r7, #4]
 800ef84:	f7ff fbe7 	bl	800e756 <nrf_write_register>
 800ef88:	4603      	mov	r3, r0
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	d004      	beq.n	800ef98 <nrf_set_rx_payload_width_p1+0x32>
		dev->config.payload_length = 0;
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	2200      	movs	r2, #0
 800ef92:	711a      	strb	r2, [r3, #4]
		return NRF_ERROR;
 800ef94:	2301      	movs	r3, #1
 800ef96:	e003      	b.n	800efa0 <nrf_set_rx_payload_width_p1+0x3a>
	}
	dev->config.payload_length = width;
 800ef98:	78fa      	ldrb	r2, [r7, #3]
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	711a      	strb	r2, [r3, #4]
	return NRF_OK;
 800ef9e:	2300      	movs	r3, #0
}
 800efa0:	4618      	mov	r0, r3
 800efa2:	3708      	adds	r7, #8
 800efa4:	46bd      	mov	sp, r7
 800efa6:	bd80      	pop	{r7, pc}

0800efa8 <nrf_receive_packet>:
	} // wait for end of transmittion

	return dev->tx_result;
}

const uint8_t* nrf_receive_packet(nrf24l01* dev) {
 800efa8:	b580      	push	{r7, lr}
 800efaa:	b082      	sub	sp, #8
 800efac:	af00      	add	r7, sp, #0
 800efae:	6078      	str	r0, [r7, #4]

	dev->rx_busy = 1;
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	2201      	movs	r2, #1
 800efb4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

	ce_reset(dev);
 800efb8:	6878      	ldr	r0, [r7, #4]
 800efba:	f7ff f937 	bl	800e22c <ce_reset>
	nrf_rx_tx_control(dev, NRF_STATE_RX);
 800efbe:	2101      	movs	r1, #1
 800efc0:	6878      	ldr	r0, [r7, #4]
 800efc2:	f7ff fe86 	bl	800ecd2 <nrf_rx_tx_control>
	ce_set(dev);
 800efc6:	6878      	ldr	r0, [r7, #4]
 800efc8:	f7ff f920 	bl	800e20c <ce_set>

	while (dev->rx_busy == 1) {
 800efcc:	bf00      	nop
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800efd4:	b2db      	uxtb	r3, r3
 800efd6:	2b01      	cmp	r3, #1
 800efd8:	d0f9      	beq.n	800efce <nrf_receive_packet+0x26>
	} // wait for reception

	return dev->config.rx_buffer;
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	691b      	ldr	r3, [r3, #16]
}
 800efde:	4618      	mov	r0, r3
 800efe0:	3708      	adds	r7, #8
 800efe2:	46bd      	mov	sp, r7
 800efe4:	bd80      	pop	{r7, pc}
	...

0800efe8 <HAL_GPIO_EXTI_Callback>:
	ce_set(dev);

	return NRF_OK;
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800efe8:	b580      	push	{r7, lr}
 800efea:	b082      	sub	sp, #8
 800efec:	af00      	add	r7, sp, #0
 800efee:	4603      	mov	r3, r0
 800eff0:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == NRF24_IRQ_Pin) {
 800eff2:	88fb      	ldrh	r3, [r7, #6]
 800eff4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eff8:	d102      	bne.n	800f000 <HAL_GPIO_EXTI_Callback+0x18>
		nrf_irq_handler(&nrf);
 800effa:	4803      	ldr	r0, [pc, #12]	; (800f008 <HAL_GPIO_EXTI_Callback+0x20>)
 800effc:	f7ff fada 	bl	800e5b4 <nrf_irq_handler>
	}
}
 800f000:	bf00      	nop
 800f002:	3708      	adds	r7, #8
 800f004:	46bd      	mov	sp, r7
 800f006:	bd80      	pop	{r7, pc}
 800f008:	200075ec 	.word	0x200075ec

0800f00c <Ublox_Init>:
char PAYLOAD[SIMCOM_POS_HEADER_LENGTH + SIMCOM_POS_DATA_LENGTH];
//simcom struct
sim_t sim;

/* USER CODE END PV */
void Ublox_Init(gps_t *hgps) {
 800f00c:	b580      	push	{r7, lr}
 800f00e:	b082      	sub	sp, #8
 800f010:	af00      	add	r7, sp, #0
 800f012:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(UBLOX_PWR_GPIO_Port, UBLOX_PWR_Pin, GPIO_PIN_SET);
 800f014:	2201      	movs	r2, #1
 800f016:	2102      	movs	r1, #2
 800f018:	4806      	ldr	r0, [pc, #24]	; (800f034 <Ublox_Init+0x28>)
 800f01a:	f7f3 fa71 	bl	8002500 <HAL_GPIO_WritePin>
	osDelay(50);
 800f01e:	2032      	movs	r0, #50	; 0x32
 800f020:	f7f8 fab3 	bl	800758a <osDelay>
	gps_init(hgps);
 800f024:	6878      	ldr	r0, [r7, #4]
 800f026:	f7fe ff72 	bl	800df0e <gps_init>
}
 800f02a:	bf00      	nop
 800f02c:	3708      	adds	r7, #8
 800f02e:	46bd      	mov	sp, r7
 800f030:	bd80      	pop	{r7, pc}
 800f032:	bf00      	nop
 800f034:	40020800 	.word	0x40020800

0800f038 <Simcom_On>:

static void Simcom_On(void) {
 800f038:	b580      	push	{r7, lr}
 800f03a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SIMCOM_PWR_GPIO_Port, SIMCOM_PWR_Pin, GPIO_PIN_RESET);
 800f03c:	2200      	movs	r2, #0
 800f03e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800f042:	4808      	ldr	r0, [pc, #32]	; (800f064 <Simcom_On+0x2c>)
 800f044:	f7f3 fa5c 	bl	8002500 <HAL_GPIO_WritePin>
	osDelay(70);
 800f048:	2046      	movs	r0, #70	; 0x46
 800f04a:	f7f8 fa9e 	bl	800758a <osDelay>
	HAL_GPIO_WritePin(SIMCOM_PWR_GPIO_Port, SIMCOM_PWR_Pin, GPIO_PIN_SET);
 800f04e:	2201      	movs	r2, #1
 800f050:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800f054:	4803      	ldr	r0, [pc, #12]	; (800f064 <Simcom_On+0x2c>)
 800f056:	f7f3 fa53 	bl	8002500 <HAL_GPIO_WritePin>
	osDelay(50);
 800f05a:	2032      	movs	r0, #50	; 0x32
 800f05c:	f7f8 fa95 	bl	800758a <osDelay>
}
 800f060:	bf00      	nop
 800f062:	bd80      	pop	{r7, pc}
 800f064:	40020c00 	.word	0x40020c00

0800f068 <Simcom_Reset>:

static void Simcom_Reset(void) {
 800f068:	b580      	push	{r7, lr}
 800f06a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SIMCOM_RST_GPIO_Port, SIMCOM_RST_Pin, GPIO_PIN_RESET);
 800f06c:	2200      	movs	r2, #0
 800f06e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800f072:	4808      	ldr	r0, [pc, #32]	; (800f094 <Simcom_Reset+0x2c>)
 800f074:	f7f3 fa44 	bl	8002500 <HAL_GPIO_WritePin>
	osDelay(10);
 800f078:	200a      	movs	r0, #10
 800f07a:	f7f8 fa86 	bl	800758a <osDelay>
	HAL_GPIO_WritePin(SIMCOM_RST_GPIO_Port, SIMCOM_RST_Pin, GPIO_PIN_SET);
 800f07e:	2201      	movs	r2, #1
 800f080:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800f084:	4803      	ldr	r0, [pc, #12]	; (800f094 <Simcom_Reset+0x2c>)
 800f086:	f7f3 fa3b 	bl	8002500 <HAL_GPIO_WritePin>
	osDelay(50);
 800f08a:	2032      	movs	r0, #50	; 0x32
 800f08c:	f7f8 fa7d 	bl	800758a <osDelay>
}
 800f090:	bf00      	nop
 800f092:	bd80      	pop	{r7, pc}
 800f094:	40020400 	.word	0x40020400

0800f098 <Simcom_Boot>:

static uint8_t Simcom_Boot(void) {
 800f098:	b590      	push	{r4, r7, lr}
 800f09a:	b085      	sub	sp, #20
 800f09c:	af00      	add	r7, sp, #0
	uint32_t tick;
	uint64_t timeout_tick;

	// reset the state of simcom module
	Simcom_Reset();
 800f09e:	f7ff ffe3 	bl	800f068 <Simcom_Reset>
	// turn off sequence
	Simcom_On();
 800f0a2:	f7ff ffc9 	bl	800f038 <Simcom_On>
	// set timeout guard (for first boot always 20 second)
	timeout_tick = osKernelSysTickMicroSec(20*1000*1000);
 800f0a6:	f644 6320 	movw	r3, #20000	; 0x4e20
 800f0aa:	f04f 0400 	mov.w	r4, #0
 800f0ae:	e9c7 3402 	strd	r3, r4, [r7, #8]
	tick = osKernelSysTick();
 800f0b2:	f7f8 fa0e 	bl	80074d2 <osKernelSysTick>
 800f0b6:	6078      	str	r0, [r7, #4]
	// wait until booting is done
	while (!(Simcom_Response(SIMCOM_STATUS_READY) || (osKernelSysTick() - tick) > timeout_tick))
 800f0b8:	bf00      	nop
 800f0ba:	4814      	ldr	r0, [pc, #80]	; (800f10c <Simcom_Boot+0x74>)
 800f0bc:	f000 f828 	bl	800f110 <Simcom_Response>
 800f0c0:	4603      	mov	r3, r0
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d10c      	bne.n	800f0e0 <Simcom_Boot+0x48>
 800f0c6:	f7f8 fa04 	bl	80074d2 <osKernelSysTick>
 800f0ca:	4602      	mov	r2, r0
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	1ad3      	subs	r3, r2, r3
 800f0d0:	f04f 0400 	mov.w	r4, #0
 800f0d4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800f0d8:	42a2      	cmp	r2, r4
 800f0da:	bf08      	it	eq
 800f0dc:	4299      	cmpeq	r1, r3
 800f0de:	d2ec      	bcs.n	800f0ba <Simcom_Boot+0x22>
		;
	// handle timeout
	return (uint8_t) ((osKernelSysTick() - tick) < timeout_tick);
 800f0e0:	f7f8 f9f7 	bl	80074d2 <osKernelSysTick>
 800f0e4:	4602      	mov	r2, r0
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	1ad3      	subs	r3, r2, r3
 800f0ea:	4619      	mov	r1, r3
 800f0ec:	f04f 0200 	mov.w	r2, #0
 800f0f0:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800f0f4:	42a2      	cmp	r2, r4
 800f0f6:	bf08      	it	eq
 800f0f8:	4299      	cmpeq	r1, r3
 800f0fa:	bf34      	ite	cc
 800f0fc:	2301      	movcc	r3, #1
 800f0fe:	2300      	movcs	r3, #0
 800f100:	b2db      	uxtb	r3, r3
}
 800f102:	4618      	mov	r0, r3
 800f104:	3714      	adds	r7, #20
 800f106:	46bd      	mov	sp, r7
 800f108:	bd90      	pop	{r4, r7, pc}
 800f10a:	bf00      	nop
 800f10c:	08016004 	.word	0x08016004

0800f110 <Simcom_Response>:

static uint8_t Simcom_Response(char *str) {
 800f110:	b580      	push	{r7, lr}
 800f112:	b082      	sub	sp, #8
 800f114:	af00      	add	r7, sp, #0
 800f116:	6078      	str	r0, [r7, #4]
	if (strstr(SIMCOM_UART_RX_Buffer, str) != NULL) {
 800f118:	6879      	ldr	r1, [r7, #4]
 800f11a:	4806      	ldr	r0, [pc, #24]	; (800f134 <Simcom_Response+0x24>)
 800f11c:	f003 fa8c 	bl	8012638 <strstr>
 800f120:	4603      	mov	r3, r0
 800f122:	2b00      	cmp	r3, #0
 800f124:	d001      	beq.n	800f12a <Simcom_Response+0x1a>
		return 1;
 800f126:	2301      	movs	r3, #1
 800f128:	e000      	b.n	800f12c <Simcom_Response+0x1c>
	}
	return 0;
 800f12a:	2300      	movs	r3, #0
}
 800f12c:	4618      	mov	r0, r3
 800f12e:	3708      	adds	r7, #8
 800f130:	46bd      	mov	sp, r7
 800f132:	bd80      	pop	{r7, pc}
 800f134:	200068fc 	.word	0x200068fc

0800f138 <Simcom_Send>:

static uint8_t Simcom_Send(char *cmd, uint32_t ms) {
 800f138:	b580      	push	{r7, lr}
 800f13a:	b086      	sub	sp, #24
 800f13c:	af00      	add	r7, sp, #0
 800f13e:	6078      	str	r0, [r7, #4]
 800f140:	6039      	str	r1, [r7, #0]
	osRecursiveMutexWait(SimcomRecMutexHandle, osWaitForever);
 800f142:	4b48      	ldr	r3, [pc, #288]	; (800f264 <Simcom_Send+0x12c>)
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	f04f 31ff 	mov.w	r1, #4294967295
 800f14a:	4618      	mov	r0, r3
 800f14c:	f7f8 fd3d 	bl	8007bca <osRecursiveMutexWait>

	uint8_t ret;
	uint32_t tick, timeout_tick;
	// reset rx buffer
	SIMCOM_Reset_Buffer();
 800f150:	f7fc f8d8 	bl	800b304 <SIMCOM_Reset_Buffer>
	// transmit to serial
	SIMCOM_Transmit(cmd, strlen(cmd));
 800f154:	6878      	ldr	r0, [r7, #4]
 800f156:	f7f1 f845 	bl	80001e4 <strlen>
 800f15a:	4603      	mov	r3, r0
 800f15c:	b29b      	uxth	r3, r3
 800f15e:	4619      	mov	r1, r3
 800f160:	6878      	ldr	r0, [r7, #4]
 800f162:	f7fc f8e3 	bl	800b32c <SIMCOM_Transmit>
	// convert time to tick
	timeout_tick = osKernelSysTickMicroSec(SIMCOM_CMD_TIMEOUT*1000*1000);
 800f166:	f241 3388 	movw	r3, #5000	; 0x1388
 800f16a:	613b      	str	r3, [r7, #16]
	// set timeout guard
	tick = osKernelSysTick();
 800f16c:	f7f8 f9b1 	bl	80074d2 <osKernelSysTick>
 800f170:	60f8      	str	r0, [r7, #12]
	// wait for response to complete
	if (strstr(cmd, SIMCOM_MESSAGE_END) == NULL) {
 800f172:	211a      	movs	r1, #26
 800f174:	6878      	ldr	r0, [r7, #4]
 800f176:	f003 fa23 	bl	80125c0 <strchr>
 800f17a:	4603      	mov	r3, r0
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d104      	bne.n	800f18a <Simcom_Send+0x52>
		osDelay(200 + ms);
 800f180:	683b      	ldr	r3, [r7, #0]
 800f182:	33c8      	adds	r3, #200	; 0xc8
 800f184:	4618      	mov	r0, r3
 800f186:	f7f8 fa00 	bl	800758a <osDelay>
	}
	// wait response from SIMCOM
	while (!(Simcom_Response(SIMCOM_STATUS_SEND) || Simcom_Response(SIMCOM_STATUS_CIPSEND) || Simcom_Response(SIMCOM_STATUS_OK)
 800f18a:	bf00      	nop
 800f18c:	4836      	ldr	r0, [pc, #216]	; (800f268 <Simcom_Send+0x130>)
 800f18e:	f7ff ffbf 	bl	800f110 <Simcom_Response>
 800f192:	4603      	mov	r3, r0
 800f194:	2b00      	cmp	r3, #0
 800f196:	d11f      	bne.n	800f1d8 <Simcom_Send+0xa0>
 800f198:	4834      	ldr	r0, [pc, #208]	; (800f26c <Simcom_Send+0x134>)
 800f19a:	f7ff ffb9 	bl	800f110 <Simcom_Response>
 800f19e:	4603      	mov	r3, r0
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d119      	bne.n	800f1d8 <Simcom_Send+0xa0>
 800f1a4:	4832      	ldr	r0, [pc, #200]	; (800f270 <Simcom_Send+0x138>)
 800f1a6:	f7ff ffb3 	bl	800f110 <Simcom_Response>
 800f1aa:	4603      	mov	r3, r0
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	d113      	bne.n	800f1d8 <Simcom_Send+0xa0>
			|| Simcom_Response(SIMCOM_STATUS_RESTARTED) || Simcom_Response(SIMCOM_STATUS_ERROR) || (osKernelSysTick() - tick) >= timeout_tick))
 800f1b0:	4830      	ldr	r0, [pc, #192]	; (800f274 <Simcom_Send+0x13c>)
 800f1b2:	f7ff ffad 	bl	800f110 <Simcom_Response>
 800f1b6:	4603      	mov	r3, r0
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d10d      	bne.n	800f1d8 <Simcom_Send+0xa0>
 800f1bc:	482e      	ldr	r0, [pc, #184]	; (800f278 <Simcom_Send+0x140>)
 800f1be:	f7ff ffa7 	bl	800f110 <Simcom_Response>
 800f1c2:	4603      	mov	r3, r0
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d107      	bne.n	800f1d8 <Simcom_Send+0xa0>
 800f1c8:	f7f8 f983 	bl	80074d2 <osKernelSysTick>
 800f1cc:	4602      	mov	r2, r0
 800f1ce:	68fb      	ldr	r3, [r7, #12]
 800f1d0:	1ad3      	subs	r3, r2, r3
	while (!(Simcom_Response(SIMCOM_STATUS_SEND) || Simcom_Response(SIMCOM_STATUS_CIPSEND) || Simcom_Response(SIMCOM_STATUS_OK)
 800f1d2:	693a      	ldr	r2, [r7, #16]
 800f1d4:	429a      	cmp	r2, r3
 800f1d6:	d8d9      	bhi.n	800f18c <Simcom_Send+0x54>
		;
	// handle timeout & error
	if (Simcom_Response(SIMCOM_STATUS_ERROR) || Simcom_Response(SIMCOM_STATUS_RESTARTED) || (osKernelSysTick() - tick) > timeout_tick) {
 800f1d8:	4827      	ldr	r0, [pc, #156]	; (800f278 <Simcom_Send+0x140>)
 800f1da:	f7ff ff99 	bl	800f110 <Simcom_Response>
 800f1de:	4603      	mov	r3, r0
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d10d      	bne.n	800f200 <Simcom_Send+0xc8>
 800f1e4:	4823      	ldr	r0, [pc, #140]	; (800f274 <Simcom_Send+0x13c>)
 800f1e6:	f7ff ff93 	bl	800f110 <Simcom_Response>
 800f1ea:	4603      	mov	r3, r0
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d107      	bne.n	800f200 <Simcom_Send+0xc8>
 800f1f0:	f7f8 f96f 	bl	80074d2 <osKernelSysTick>
 800f1f4:	4602      	mov	r2, r0
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	1ad3      	subs	r3, r2, r3
 800f1fa:	693a      	ldr	r2, [r7, #16]
 800f1fc:	429a      	cmp	r2, r3
 800f1fe:	d202      	bcs.n	800f206 <Simcom_Send+0xce>
		ret = 0;
 800f200:	2300      	movs	r3, #0
 800f202:	75fb      	strb	r3, [r7, #23]
 800f204:	e001      	b.n	800f20a <Simcom_Send+0xd2>
	} else {
		ret = 1;
 800f206:	2301      	movs	r3, #1
 800f208:	75fb      	strb	r3, [r7, #23]
	}
	// print for debugger
	if (strstr(cmd, SIMCOM_MESSAGE_END) == NULL) {
 800f20a:	211a      	movs	r1, #26
 800f20c:	6878      	ldr	r0, [r7, #4]
 800f20e:	f003 f9d7 	bl	80125c0 <strchr>
 800f212:	4603      	mov	r3, r0
 800f214:	2b00      	cmp	r3, #0
 800f216:	d107      	bne.n	800f228 <Simcom_Send+0xf0>
		sprintf(str, "\n=> %s", cmd);
 800f218:	687a      	ldr	r2, [r7, #4]
 800f21a:	4918      	ldr	r1, [pc, #96]	; (800f27c <Simcom_Send+0x144>)
 800f21c:	4818      	ldr	r0, [pc, #96]	; (800f280 <Simcom_Send+0x148>)
 800f21e:	f003 f9af 	bl	8012580 <siprintf>
		swvPrint(str);
 800f222:	4817      	ldr	r0, [pc, #92]	; (800f280 <Simcom_Send+0x148>)
 800f224:	f7fc fb64 	bl	800b8f0 <swvPrint>
	}
	sprintf(str, "%s\n", SIMCOM_UART_RX_Buffer);
 800f228:	4a16      	ldr	r2, [pc, #88]	; (800f284 <Simcom_Send+0x14c>)
 800f22a:	4917      	ldr	r1, [pc, #92]	; (800f288 <Simcom_Send+0x150>)
 800f22c:	4814      	ldr	r0, [pc, #80]	; (800f280 <Simcom_Send+0x148>)
 800f22e:	f003 f9a7 	bl	8012580 <siprintf>
	swvPrint(str);
 800f232:	4813      	ldr	r0, [pc, #76]	; (800f280 <Simcom_Send+0x148>)
 800f234:	f7fc fb5c 	bl	800b8f0 <swvPrint>
	// check if it has new command
	if (Simcom_Check_Command()) {
 800f238:	f000 fb7a 	bl	800f930 <Simcom_Check_Command>
 800f23c:	4603      	mov	r3, r0
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d006      	beq.n	800f250 <Simcom_Send+0x118>
		xTaskNotify(CommandTaskHandle, EVENT_COMMAND_ARRIVED, eSetBits);
 800f242:	4b12      	ldr	r3, [pc, #72]	; (800f28c <Simcom_Send+0x154>)
 800f244:	6818      	ldr	r0, [r3, #0]
 800f246:	2300      	movs	r3, #0
 800f248:	2201      	movs	r2, #1
 800f24a:	2101      	movs	r1, #1
 800f24c:	f7fa fdf8 	bl	8009e40 <xTaskGenericNotify>
	}

	osRecursiveMutexRelease(SimcomRecMutexHandle);
 800f250:	4b04      	ldr	r3, [pc, #16]	; (800f264 <Simcom_Send+0x12c>)
 800f252:	681b      	ldr	r3, [r3, #0]
 800f254:	4618      	mov	r0, r3
 800f256:	f7f8 fca5 	bl	8007ba4 <osRecursiveMutexRelease>
	return ret;
 800f25a:	7dfb      	ldrb	r3, [r7, #23]
}
 800f25c:	4618      	mov	r0, r3
 800f25e:	3718      	adds	r7, #24
 800f260:	46bd      	mov	sp, r7
 800f262:	bd80      	pop	{r7, pc}
 800f264:	20008680 	.word	0x20008680
 800f268:	08016010 	.word	0x08016010
 800f26c:	08016014 	.word	0x08016014
 800f270:	08016020 	.word	0x08016020
 800f274:	08016028 	.word	0x08016028
 800f278:	08016030 	.word	0x08016030
 800f27c:	08016038 	.word	0x08016038
 800f280:	20007bc8 	.word	0x20007bc8
 800f284:	200068fc 	.word	0x200068fc
 800f288:	08016040 	.word	0x08016040
 800f28c:	20008524 	.word	0x20008524

0800f290 <Simcom_Send_Repeat>:

static uint8_t Simcom_Send_Repeat(char *command, uint32_t ms, char *response) {
 800f290:	b580      	push	{r7, lr}
 800f292:	b086      	sub	sp, #24
 800f294:	af00      	add	r7, sp, #0
 800f296:	60f8      	str	r0, [r7, #12]
 800f298:	60b9      	str	r1, [r7, #8]
 800f29a:	607a      	str	r2, [r7, #4]
	osRecursiveMutexWait(SimcomRecMutexHandle, osWaitForever);
 800f29c:	4b1d      	ldr	r3, [pc, #116]	; (800f314 <Simcom_Send_Repeat+0x84>)
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	f04f 31ff 	mov.w	r1, #4294967295
 800f2a4:	4618      	mov	r0, r3
 800f2a6:	f7f8 fc90 	bl	8007bca <osRecursiveMutexWait>

	uint8_t ret = 1, seq = 1, seq_max = 5;
 800f2aa:	2301      	movs	r3, #1
 800f2ac:	75fb      	strb	r3, [r7, #23]
 800f2ae:	2301      	movs	r3, #1
 800f2b0:	75bb      	strb	r3, [r7, #22]
 800f2b2:	2305      	movs	r3, #5
 800f2b4:	757b      	strb	r3, [r7, #21]
	// repeat command until desired response
	do {
		if (seq > 1) {
 800f2b6:	7dbb      	ldrb	r3, [r7, #22]
 800f2b8:	2b01      	cmp	r3, #1
 800f2ba:	d903      	bls.n	800f2c4 <Simcom_Send_Repeat+0x34>
			// execute command every timeout guard elapsed
			osDelay(SIMCOM_CMD_TIMEOUT * 500);
 800f2bc:	f640 10c4 	movw	r0, #2500	; 0x9c4
 800f2c0:	f7f8 f963 	bl	800758a <osDelay>
		}
		// send command
		if (seq <= seq_max) {
 800f2c4:	7dba      	ldrb	r2, [r7, #22]
 800f2c6:	7d7b      	ldrb	r3, [r7, #21]
 800f2c8:	429a      	cmp	r2, r3
 800f2ca:	d80c      	bhi.n	800f2e6 <Simcom_Send_Repeat+0x56>
			Simcom_Send(command, ms);
 800f2cc:	68b9      	ldr	r1, [r7, #8]
 800f2ce:	68f8      	ldr	r0, [r7, #12]
 800f2d0:	f7ff ff32 	bl	800f138 <Simcom_Send>
			// if device error, break
			if (Simcom_Response(SIMCOM_STATUS_RESTARTED)) {
 800f2d4:	4810      	ldr	r0, [pc, #64]	; (800f318 <Simcom_Send_Repeat+0x88>)
 800f2d6:	f7ff ff1b 	bl	800f110 <Simcom_Response>
 800f2da:	4603      	mov	r3, r0
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d005      	beq.n	800f2ec <Simcom_Send_Repeat+0x5c>
				ret = 0;
 800f2e0:	2300      	movs	r3, #0
 800f2e2:	75fb      	strb	r3, [r7, #23]
				break;
 800f2e4:	e00b      	b.n	800f2fe <Simcom_Send_Repeat+0x6e>
			}
		} else {
			// if until max sequence still error, break
			ret = 0;
 800f2e6:	2300      	movs	r3, #0
 800f2e8:	75fb      	strb	r3, [r7, #23]
			break;
 800f2ea:	e008      	b.n	800f2fe <Simcom_Send_Repeat+0x6e>
		}
		// increment sequence
		seq++;
 800f2ec:	7dbb      	ldrb	r3, [r7, #22]
 800f2ee:	3301      	adds	r3, #1
 800f2f0:	75bb      	strb	r3, [r7, #22]
	} while (!Simcom_Response(response));
 800f2f2:	6878      	ldr	r0, [r7, #4]
 800f2f4:	f7ff ff0c 	bl	800f110 <Simcom_Response>
 800f2f8:	4603      	mov	r3, r0
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	d0db      	beq.n	800f2b6 <Simcom_Send_Repeat+0x26>

	osRecursiveMutexRelease(SimcomRecMutexHandle);
 800f2fe:	4b05      	ldr	r3, [pc, #20]	; (800f314 <Simcom_Send_Repeat+0x84>)
 800f300:	681b      	ldr	r3, [r3, #0]
 800f302:	4618      	mov	r0, r3
 800f304:	f7f8 fc4e 	bl	8007ba4 <osRecursiveMutexRelease>
	return ret;
 800f308:	7dfb      	ldrb	r3, [r7, #23]
}
 800f30a:	4618      	mov	r0, r3
 800f30c:	3718      	adds	r7, #24
 800f30e:	46bd      	mov	sp, r7
 800f310:	bd80      	pop	{r7, pc}
 800f312:	bf00      	nop
 800f314:	20008680 	.word	0x20008680
 800f318:	08016028 	.word	0x08016028

0800f31c <Simcom_Set_Default_Data>:

static void Simcom_Set_Default_Data(void) {
 800f31c:	b580      	push	{r7, lr}
 800f31e:	af00      	add	r7, sp, #0
	// set initial data
	strcpy(sim.header.prefix, "@P");
 800f320:	4b36      	ldr	r3, [pc, #216]	; (800f3fc <Simcom_Set_Default_Data+0xe0>)
 800f322:	4a37      	ldr	r2, [pc, #220]	; (800f400 <Simcom_Set_Default_Data+0xe4>)
 800f324:	6812      	ldr	r2, [r2, #0]
 800f326:	4611      	mov	r1, r2
 800f328:	8019      	strh	r1, [r3, #0]
 800f32a:	3302      	adds	r3, #2
 800f32c:	0c12      	lsrs	r2, r2, #16
 800f32e:	701a      	strb	r2, [r3, #0]
	strcpy(sim.header.unit_id, "354453");
 800f330:	4b34      	ldr	r3, [pc, #208]	; (800f404 <Simcom_Set_Default_Data+0xe8>)
 800f332:	4a35      	ldr	r2, [pc, #212]	; (800f408 <Simcom_Set_Default_Data+0xec>)
 800f334:	6810      	ldr	r0, [r2, #0]
 800f336:	6018      	str	r0, [r3, #0]
 800f338:	8891      	ldrh	r1, [r2, #4]
 800f33a:	7992      	ldrb	r2, [r2, #6]
 800f33c:	8099      	strh	r1, [r3, #4]
 800f33e:	719a      	strb	r2, [r3, #6]
	sim.header.crc = 0;
 800f340:	4b2e      	ldr	r3, [pc, #184]	; (800f3fc <Simcom_Set_Default_Data+0xe0>)
 800f342:	2200      	movs	r2, #0
 800f344:	809a      	strh	r2, [r3, #4]
	sim.header.length = 0;
 800f346:	4b2d      	ldr	r3, [pc, #180]	; (800f3fc <Simcom_Set_Default_Data+0xe0>)
 800f348:	2200      	movs	r2, #0
 800f34a:	80da      	strh	r2, [r3, #6]
	sim.header.seq_id = 0;
 800f34c:	4b2b      	ldr	r3, [pc, #172]	; (800f3fc <Simcom_Set_Default_Data+0xe0>)
 800f34e:	2200      	movs	r2, #0
 800f350:	811a      	strh	r2, [r3, #8]

	strcpy(sim.data.datetime_rtc, "");
 800f352:	4b2a      	ldr	r3, [pc, #168]	; (800f3fc <Simcom_Set_Default_Data+0xe0>)
 800f354:	2200      	movs	r2, #0
 800f356:	751a      	strb	r2, [r3, #20]
	strcpy(sim.data.speed, "0");
 800f358:	4a2c      	ldr	r2, [pc, #176]	; (800f40c <Simcom_Set_Default_Data+0xf0>)
 800f35a:	4b2d      	ldr	r3, [pc, #180]	; (800f410 <Simcom_Set_Default_Data+0xf4>)
 800f35c:	881b      	ldrh	r3, [r3, #0]
 800f35e:	8013      	strh	r3, [r2, #0]
	strcpy(sim.data.driver_id, "31313");
 800f360:	4b2c      	ldr	r3, [pc, #176]	; (800f414 <Simcom_Set_Default_Data+0xf8>)
 800f362:	4a2d      	ldr	r2, [pc, #180]	; (800f418 <Simcom_Set_Default_Data+0xfc>)
 800f364:	6810      	ldr	r0, [r2, #0]
 800f366:	6018      	str	r0, [r3, #0]
 800f368:	8892      	ldrh	r2, [r2, #4]
 800f36a:	809a      	strh	r2, [r3, #4]
	strcpy(sim.data.message, "");
 800f36c:	4b23      	ldr	r3, [pc, #140]	; (800f3fc <Simcom_Set_Default_Data+0xe0>)
 800f36e:	2200      	movs	r2, #0
 800f370:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	sim.data.reportd_id = 2;
 800f374:	4b21      	ldr	r3, [pc, #132]	; (800f3fc <Simcom_Set_Default_Data+0xe0>)
 800f376:	2202      	movs	r2, #2
 800f378:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	sim.data.odometer = Flash_Get_Odometer();
 800f37c:	f7fd fb82 	bl	800ca84 <Flash_Get_Odometer>
 800f380:	4602      	mov	r2, r0
 800f382:	4b1e      	ldr	r3, [pc, #120]	; (800f3fc <Simcom_Set_Default_Data+0xe0>)
 800f384:	625a      	str	r2, [r3, #36]	; 0x24
	sim.data.status_input = 0;
 800f386:	4b1d      	ldr	r3, [pc, #116]	; (800f3fc <Simcom_Set_Default_Data+0xe0>)
 800f388:	2200      	movs	r2, #0
 800f38a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	sim.data.status_output = 0;
 800f38e:	4b1b      	ldr	r3, [pc, #108]	; (800f3fc <Simcom_Set_Default_Data+0xe0>)
 800f390:	2200      	movs	r2, #0
 800f392:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	sim.data.analog_input = 0;
 800f396:	4b19      	ldr	r3, [pc, #100]	; (800f3fc <Simcom_Set_Default_Data+0xe0>)
 800f398:	2200      	movs	r2, #0
 800f39a:	861a      	strh	r2, [r3, #48]	; 0x30
	sim.data.temp_sensor1 = 2000;
 800f39c:	4b17      	ldr	r3, [pc, #92]	; (800f3fc <Simcom_Set_Default_Data+0xe0>)
 800f39e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800f3a2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	sim.data.temp_sensor2 = 2000;
 800f3a6:	4b15      	ldr	r3, [pc, #84]	; (800f3fc <Simcom_Set_Default_Data+0xe0>)
 800f3a8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800f3ac:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

	strcpy(sim.data.gps.datetime, "");
 800f3b0:	4b12      	ldr	r3, [pc, #72]	; (800f3fc <Simcom_Set_Default_Data+0xe0>)
 800f3b2:	2200      	movs	r2, #0
 800f3b4:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
	strcpy(sim.data.gps.longitude, "0");
 800f3b8:	4a18      	ldr	r2, [pc, #96]	; (800f41c <Simcom_Set_Default_Data+0x100>)
 800f3ba:	4b15      	ldr	r3, [pc, #84]	; (800f410 <Simcom_Set_Default_Data+0xf4>)
 800f3bc:	881b      	ldrh	r3, [r3, #0]
 800f3be:	8013      	strh	r3, [r2, #0]
	strcpy(sim.data.gps.latitude, "0");
 800f3c0:	4a17      	ldr	r2, [pc, #92]	; (800f420 <Simcom_Set_Default_Data+0x104>)
 800f3c2:	4b13      	ldr	r3, [pc, #76]	; (800f410 <Simcom_Set_Default_Data+0xf4>)
 800f3c4:	881b      	ldrh	r3, [r3, #0]
 800f3c6:	8013      	strh	r3, [r2, #0]
	strcpy(sim.data.gps.heading, "108");
 800f3c8:	4b16      	ldr	r3, [pc, #88]	; (800f424 <Simcom_Set_Default_Data+0x108>)
 800f3ca:	4a17      	ldr	r2, [pc, #92]	; (800f428 <Simcom_Set_Default_Data+0x10c>)
 800f3cc:	6810      	ldr	r0, [r2, #0]
 800f3ce:	6018      	str	r0, [r3, #0]
	strcpy(sim.data.gps.hdop, "0");
 800f3d0:	4b16      	ldr	r3, [pc, #88]	; (800f42c <Simcom_Set_Default_Data+0x110>)
 800f3d2:	2230      	movs	r2, #48	; 0x30
 800f3d4:	801a      	strh	r2, [r3, #0]
	strcpy(sim.data.gps.datetime, "");
 800f3d6:	4b09      	ldr	r3, [pc, #36]	; (800f3fc <Simcom_Set_Default_Data+0xe0>)
 800f3d8:	2200      	movs	r2, #0
 800f3da:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
	// prepare command sequence
	sprintf(CIPSEND, "AT+CIPSEND=0,,\"%s\",%d\r", SERVER_IP, SERVER_PORT);
 800f3de:	f241 33b4 	movw	r3, #5044	; 0x13b4
 800f3e2:	4a13      	ldr	r2, [pc, #76]	; (800f430 <Simcom_Set_Default_Data+0x114>)
 800f3e4:	4913      	ldr	r1, [pc, #76]	; (800f434 <Simcom_Set_Default_Data+0x118>)
 800f3e6:	4814      	ldr	r0, [pc, #80]	; (800f438 <Simcom_Set_Default_Data+0x11c>)
 800f3e8:	f003 f8ca 	bl	8012580 <siprintf>
	sprintf(CIPOPEN, "AT+CIPOPEN=0,\"UDP\",,,%d\r", LOCAL_PORT);
 800f3ec:	f241 32b4 	movw	r2, #5044	; 0x13b4
 800f3f0:	4912      	ldr	r1, [pc, #72]	; (800f43c <Simcom_Set_Default_Data+0x120>)
 800f3f2:	4813      	ldr	r0, [pc, #76]	; (800f440 <Simcom_Set_Default_Data+0x124>)
 800f3f4:	f003 f8c4 	bl	8012580 <siprintf>
}
 800f3f8:	bf00      	nop
 800f3fa:	bd80      	pop	{r7, pc}
 800f3fc:	20007fc8 	.word	0x20007fc8
 800f400:	08016044 	.word	0x08016044
 800f404:	20007fd2 	.word	0x20007fd2
 800f408:	08016048 	.word	0x08016048
 800f40c:	20007ff1 	.word	0x20007ff1
 800f410:	08016050 	.word	0x08016050
 800f414:	20007ffa 	.word	0x20007ffa
 800f418:	08016054 	.word	0x08016054
 800f41c:	20008213 	.word	0x20008213
 800f420:	20008227 	.word	0x20008227
 800f424:	2000823b 	.word	0x2000823b
 800f428:	0801605c 	.word	0x0801605c
 800f42c:	20008240 	.word	0x20008240
 800f430:	08016060 	.word	0x08016060
 800f434:	08016070 	.word	0x08016070
 800f438:	20007b94 	.word	0x20007b94
 800f43c:	08016088 	.word	0x08016088
 800f440:	20008248 	.word	0x20008248

0800f444 <Simcom_Init>:

void Simcom_Init(uint8_t restart) {
 800f444:	b580      	push	{r7, lr}
 800f446:	b084      	sub	sp, #16
 800f448:	af00      	add	r7, sp, #0
 800f44a:	4603      	mov	r3, r0
 800f44c:	71fb      	strb	r3, [r7, #7]
	uint8_t p, boot = !restart;
 800f44e:	79fb      	ldrb	r3, [r7, #7]
 800f450:	2b00      	cmp	r3, #0
 800f452:	bf0c      	ite	eq
 800f454:	2301      	moveq	r3, #1
 800f456:	2300      	movne	r3, #0
 800f458:	b2db      	uxtb	r3, r3
 800f45a:	73bb      	strb	r3, [r7, #14]

	// this do-while is complicated, but it doesn't use recursive function, so it's stack safe
	do {
		swvPrintLn("Simcom_Init");
 800f45c:	4859      	ldr	r0, [pc, #356]	; (800f5c4 <Simcom_Init+0x180>)
 800f45e:	f7fc fa69 	bl	800b934 <swvPrintLn>

		p = 0;
 800f462:	2300      	movs	r3, #0
 800f464:	73fb      	strb	r3, [r7, #15]
		// Turn on the module & wait till ready
		if (boot) {
 800f466:	7bbb      	ldrb	r3, [r7, #14]
 800f468:	2b00      	cmp	r3, #0
 800f46a:	d02b      	beq.n	800f4c4 <Simcom_Init+0x80>
			p = Simcom_Boot();
 800f46c:	f7ff fe14 	bl	800f098 <Simcom_Boot>
 800f470:	4603      	mov	r3, r0
 800f472:	73fb      	strb	r3, [r7, #15]
			// Execute only on first setup
			if (p && !restart) {
 800f474:	7bfb      	ldrb	r3, [r7, #15]
 800f476:	2b00      	cmp	r3, #0
 800f478:	d01c      	beq.n	800f4b4 <Simcom_Init+0x70>
 800f47a:	79fb      	ldrb	r3, [r7, #7]
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d119      	bne.n	800f4b4 <Simcom_Init+0x70>
				//set default value to variable
				Simcom_Set_Default_Data();
 800f480:	f7ff ff4c 	bl	800f31c <Simcom_Set_Default_Data>
				//disable command echo
				p = Simcom_Send("ATE1\r", 0);
 800f484:	2100      	movs	r1, #0
 800f486:	4850      	ldr	r0, [pc, #320]	; (800f5c8 <Simcom_Init+0x184>)
 800f488:	f7ff fe56 	bl	800f138 <Simcom_Send>
 800f48c:	4603      	mov	r3, r0
 800f48e:	73fb      	strb	r3, [r7, #15]
				//set permanent baudrate
				if (p) {
 800f490:	7bfb      	ldrb	r3, [r7, #15]
 800f492:	2b00      	cmp	r3, #0
 800f494:	d005      	beq.n	800f4a2 <Simcom_Init+0x5e>
					p = Simcom_Send("AT+IPREX=9600\r", 0);
 800f496:	2100      	movs	r1, #0
 800f498:	484c      	ldr	r0, [pc, #304]	; (800f5cc <Simcom_Init+0x188>)
 800f49a:	f7ff fe4d 	bl	800f138 <Simcom_Send>
 800f49e:	4603      	mov	r3, r0
 800f4a0:	73fb      	strb	r3, [r7, #15]
				}
				//save user setting to ME
				if (p) {
 800f4a2:	7bfb      	ldrb	r3, [r7, #15]
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d005      	beq.n	800f4b4 <Simcom_Init+0x70>
					p = Simcom_Send("AT&W\r", 0);
 800f4a8:	2100      	movs	r1, #0
 800f4aa:	4849      	ldr	r0, [pc, #292]	; (800f5d0 <Simcom_Init+0x18c>)
 800f4ac:	f7ff fe44 	bl	800f138 <Simcom_Send>
 800f4b0:	4603      	mov	r3, r0
 800f4b2:	73fb      	strb	r3, [r7, #15]
				}
			}
			// if boot sequence ok, then disable it
			boot = !p;
 800f4b4:	7bfb      	ldrb	r3, [r7, #15]
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	bf0c      	ite	eq
 800f4ba:	2301      	moveq	r3, #1
 800f4bc:	2300      	movne	r3, #0
 800f4be:	b2db      	uxtb	r3, r3
 800f4c0:	73bb      	strb	r3, [r7, #14]
 800f4c2:	e001      	b.n	800f4c8 <Simcom_Init+0x84>
		} else {
			p = 1;
 800f4c4:	2301      	movs	r3, #1
 800f4c6:	73fb      	strb	r3, [r7, #15]
		}
		//Lock to WCDMA
		if (p) {
 800f4c8:	7bfb      	ldrb	r3, [r7, #15]
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d005      	beq.n	800f4da <Simcom_Init+0x96>
			// 2: Auto, 13: 2G, 14: 3G
			p = Simcom_Send("AT+CNMP=2\r", 0);
 800f4ce:	2100      	movs	r1, #0
 800f4d0:	4840      	ldr	r0, [pc, #256]	; (800f5d4 <Simcom_Init+0x190>)
 800f4d2:	f7ff fe31 	bl	800f138 <Simcom_Send>
 800f4d6:	4603      	mov	r3, r0
 800f4d8:	73fb      	strb	r3, [r7, #15]
		}
		//Hide “+IPD” header
		if (p) {
 800f4da:	7bfb      	ldrb	r3, [r7, #15]
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	d005      	beq.n	800f4ec <Simcom_Init+0xa8>
			p = Simcom_Send("AT+CIPHEAD=0\r", 0);
 800f4e0:	2100      	movs	r1, #0
 800f4e2:	483d      	ldr	r0, [pc, #244]	; (800f5d8 <Simcom_Init+0x194>)
 800f4e4:	f7ff fe28 	bl	800f138 <Simcom_Send>
 800f4e8:	4603      	mov	r3, r0
 800f4ea:	73fb      	strb	r3, [r7, #15]
		}
		//Hide “RECV FROM” header
		if (p) {
 800f4ec:	7bfb      	ldrb	r3, [r7, #15]
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d005      	beq.n	800f4fe <Simcom_Init+0xba>
			p = Simcom_Send("AT+CIPSRIP=0\r", 0);
 800f4f2:	2100      	movs	r1, #0
 800f4f4:	4839      	ldr	r0, [pc, #228]	; (800f5dc <Simcom_Init+0x198>)
 800f4f6:	f7ff fe1f 	bl	800f138 <Simcom_Send>
 800f4fa:	4603      	mov	r3, r0
 800f4fc:	73fb      	strb	r3, [r7, #15]
		}
		//Set module to cache received data.
		if (p) {
 800f4fe:	7bfb      	ldrb	r3, [r7, #15]
 800f500:	2b00      	cmp	r3, #0
 800f502:	d005      	beq.n	800f510 <Simcom_Init+0xcc>
			p = Simcom_Send("AT+CIPRXGET=1\r", 0);
 800f504:	2100      	movs	r1, #0
 800f506:	4836      	ldr	r0, [pc, #216]	; (800f5e0 <Simcom_Init+0x19c>)
 800f508:	f7ff fe16 	bl	800f138 <Simcom_Send>
 800f50c:	4603      	mov	r3, r0
 800f50e:	73fb      	strb	r3, [r7, #15]
		}
		//Inquiring UE system information
		if (p) {
 800f510:	7bfb      	ldrb	r3, [r7, #15]
 800f512:	2b00      	cmp	r3, #0
 800f514:	d00d      	beq.n	800f532 <Simcom_Init+0xee>
			p = Simcom_Send_Repeat("AT+CPSI?\r", 0, ",Online,");
 800f516:	4a33      	ldr	r2, [pc, #204]	; (800f5e4 <Simcom_Init+0x1a0>)
 800f518:	2100      	movs	r1, #0
 800f51a:	4833      	ldr	r0, [pc, #204]	; (800f5e8 <Simcom_Init+0x1a4>)
 800f51c:	f7ff feb8 	bl	800f290 <Simcom_Send_Repeat>
 800f520:	4603      	mov	r3, r0
 800f522:	73fb      	strb	r3, [r7, #15]
			// restart module to fix it
			boot = !p;
 800f524:	7bfb      	ldrb	r3, [r7, #15]
 800f526:	2b00      	cmp	r3, #0
 800f528:	bf0c      	ite	eq
 800f52a:	2301      	moveq	r3, #1
 800f52c:	2300      	movne	r3, #0
 800f52e:	b2db      	uxtb	r3, r3
 800f530:	73bb      	strb	r3, [r7, #14]
		}
		//Define socket PDP context (APN Settings)
		if (p) {
 800f532:	7bfb      	ldrb	r3, [r7, #15]
 800f534:	2b00      	cmp	r3, #0
 800f536:	d005      	beq.n	800f544 <Simcom_Init+0x100>
			//			p = Simcom_Send("AT+CGSOCKCONT=1,\"IP\",\"telkomsel\"\r", 0);
			p = Simcom_Send("AT+CGSOCKCONT=1,\"IP\",\"3gprs\"\r", 0);
 800f538:	2100      	movs	r1, #0
 800f53a:	482c      	ldr	r0, [pc, #176]	; (800f5ec <Simcom_Init+0x1a8>)
 800f53c:	f7ff fdfc 	bl	800f138 <Simcom_Send>
 800f540:	4603      	mov	r3, r0
 800f542:	73fb      	strb	r3, [r7, #15]
		}
		//Set active PDP context profile number
		if (p) {
 800f544:	7bfb      	ldrb	r3, [r7, #15]
 800f546:	2b00      	cmp	r3, #0
 800f548:	d005      	beq.n	800f556 <Simcom_Init+0x112>
			p = Simcom_Send("AT+CSOCKSETPN=1\r", 0);
 800f54a:	2100      	movs	r1, #0
 800f54c:	4828      	ldr	r0, [pc, #160]	; (800f5f0 <Simcom_Init+0x1ac>)
 800f54e:	f7ff fdf3 	bl	800f138 <Simcom_Send>
 800f552:	4603      	mov	r3, r0
 800f554:	73fb      	strb	r3, [r7, #15]
		}
		//Set type of authentication for PDP-IP connections of socket
		if (p) {
 800f556:	7bfb      	ldrb	r3, [r7, #15]
 800f558:	2b00      	cmp	r3, #0
 800f55a:	d005      	beq.n	800f568 <Simcom_Init+0x124>
			//			p = Simcom_Send("AT+CSOCKAUTH=1,1,\"wap\",\"wap123\"\r", 0);
			p = Simcom_Send("AT+CSOCKAUTH=1,1,\"3gprs\",\"3gprs\"\r", 0);
 800f55c:	2100      	movs	r1, #0
 800f55e:	4825      	ldr	r0, [pc, #148]	; (800f5f4 <Simcom_Init+0x1b0>)
 800f560:	f7ff fdea 	bl	800f138 <Simcom_Send>
 800f564:	4603      	mov	r3, r0
 800f566:	73fb      	strb	r3, [r7, #15]
		}
		//Select TCPIP application mode (0: Non Transparent (command mode), 1: Transparent (data mode))
		if (p) {
 800f568:	7bfb      	ldrb	r3, [r7, #15]
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d005      	beq.n	800f57a <Simcom_Init+0x136>
			p = Simcom_Send("AT+CIPMODE=0\r", 0);
 800f56e:	2100      	movs	r1, #0
 800f570:	4821      	ldr	r0, [pc, #132]	; (800f5f8 <Simcom_Init+0x1b4>)
 800f572:	f7ff fde1 	bl	800f138 <Simcom_Send>
 800f576:	4603      	mov	r3, r0
 800f578:	73fb      	strb	r3, [r7, #15]
		}
		//Open network
		if (p) {
 800f57a:	7bfb      	ldrb	r3, [r7, #15]
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d006      	beq.n	800f58e <Simcom_Init+0x14a>
			p = Simcom_Send("AT+NETOPEN\r", 500);
 800f580:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800f584:	481d      	ldr	r0, [pc, #116]	; (800f5fc <Simcom_Init+0x1b8>)
 800f586:	f7ff fdd7 	bl	800f138 <Simcom_Send>
 800f58a:	4603      	mov	r3, r0
 800f58c:	73fb      	strb	r3, [r7, #15]
		}
		//Open local UDP Connection
		if (p) {
 800f58e:	7bfb      	ldrb	r3, [r7, #15]
 800f590:	2b00      	cmp	r3, #0
 800f592:	d00e      	beq.n	800f5b2 <Simcom_Init+0x16e>
			p = Simcom_Send_Repeat(CIPOPEN, 500, SIMCOM_STATUS_OK);
 800f594:	4a1a      	ldr	r2, [pc, #104]	; (800f600 <Simcom_Init+0x1bc>)
 800f596:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800f59a:	481a      	ldr	r0, [pc, #104]	; (800f604 <Simcom_Init+0x1c0>)
 800f59c:	f7ff fe78 	bl	800f290 <Simcom_Send_Repeat>
 800f5a0:	4603      	mov	r3, r0
 800f5a2:	73fb      	strb	r3, [r7, #15]
			// restart module to fix it
			boot = !p;
 800f5a4:	7bfb      	ldrb	r3, [r7, #15]
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	bf0c      	ite	eq
 800f5aa:	2301      	moveq	r3, #1
 800f5ac:	2300      	movne	r3, #0
 800f5ae:	b2db      	uxtb	r3, r3
 800f5b0:	73bb      	strb	r3, [r7, #14]
		}
	} while (p == 0);
 800f5b2:	7bfb      	ldrb	r3, [r7, #15]
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	f43f af51 	beq.w	800f45c <Simcom_Init+0x18>
}
 800f5ba:	bf00      	nop
 800f5bc:	3710      	adds	r7, #16
 800f5be:	46bd      	mov	sp, r7
 800f5c0:	bd80      	pop	{r7, pc}
 800f5c2:	bf00      	nop
 800f5c4:	080160a4 	.word	0x080160a4
 800f5c8:	080160b0 	.word	0x080160b0
 800f5cc:	080160b8 	.word	0x080160b8
 800f5d0:	080160c8 	.word	0x080160c8
 800f5d4:	080160d0 	.word	0x080160d0
 800f5d8:	080160dc 	.word	0x080160dc
 800f5dc:	080160ec 	.word	0x080160ec
 800f5e0:	080160fc 	.word	0x080160fc
 800f5e4:	0801610c 	.word	0x0801610c
 800f5e8:	08016118 	.word	0x08016118
 800f5ec:	08016124 	.word	0x08016124
 800f5f0:	08016144 	.word	0x08016144
 800f5f4:	08016158 	.word	0x08016158
 800f5f8:	0801617c 	.word	0x0801617c
 800f5fc:	0801618c 	.word	0x0801618c
 800f600:	08016020 	.word	0x08016020
 800f604:	20008248 	.word	0x20008248

0800f608 <Simcom_Set_Message>:

void Simcom_Set_Message(char* msg) {
 800f608:	b580      	push	{r7, lr}
 800f60a:	b082      	sub	sp, #8
 800f60c:	af00      	add	r7, sp, #0
 800f60e:	6078      	str	r0, [r7, #4]
	sprintf(sim.data.message, "%s\x1E", msg);
 800f610:	687a      	ldr	r2, [r7, #4]
 800f612:	4904      	ldr	r1, [pc, #16]	; (800f624 <Simcom_Set_Message+0x1c>)
 800f614:	4804      	ldr	r0, [pc, #16]	; (800f628 <Simcom_Set_Message+0x20>)
 800f616:	f002 ffb3 	bl	8012580 <siprintf>
}
 800f61a:	bf00      	nop
 800f61c:	3708      	adds	r7, #8
 800f61e:	46bd      	mov	sp, r7
 800f620:	bd80      	pop	{r7, pc}
 800f622:	bf00      	nop
 800f624:	08016198 	.word	0x08016198
 800f628:	20008010 	.word	0x20008010

0800f62c <Simcom_Convert_GPS>:

void Simcom_Convert_GPS(gps_t *hgps) {
 800f62c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f62e:	ed2d 8b02 	vpush	{d8}
 800f632:	b087      	sub	sp, #28
 800f634:	af04      	add	r7, sp, #16
 800f636:	6078      	str	r0, [r7, #4]
	// parse gps data
	if (hgps->fix > 0) {
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	7c5b      	ldrb	r3, [r3, #17]
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d069      	beq.n	800f714 <Simcom_Convert_GPS+0xe8>
		Simcom_Set_Odometer(sim.data.odometer + (gps_to_speed(hgps->speed, gps_speed_mps) * REPORT_INTERVAL));
 800f640:	4b37      	ldr	r3, [pc, #220]	; (800f720 <Simcom_Convert_GPS+0xf4>)
 800f642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f644:	ee07 3a90 	vmov	s15, r3
 800f648:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800f652:	2002      	movs	r0, #2
 800f654:	eeb0 0a67 	vmov.f32	s0, s15
 800f658:	f7fe fd20 	bl	800e09c <gps_to_speed>
 800f65c:	eeb0 7a40 	vmov.f32	s14, s0
 800f660:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 800f664:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f668:	ee78 7a27 	vadd.f32	s15, s16, s15
 800f66c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f670:	ee17 0a90 	vmov	r0, s15
 800f674:	f000 f9fc 	bl	800fa70 <Simcom_Set_Odometer>
		ftoa(hgps->latitude, sim.data.gps.latitude, 6);
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	edd3 7a00 	vldr	s15, [r3]
 800f67e:	2106      	movs	r1, #6
 800f680:	4828      	ldr	r0, [pc, #160]	; (800f724 <Simcom_Convert_GPS+0xf8>)
 800f682:	eeb0 0a67 	vmov.f32	s0, s15
 800f686:	f7fc f97b 	bl	800b980 <ftoa>
		ftoa(hgps->longitude, sim.data.gps.longitude, 6);
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	edd3 7a01 	vldr	s15, [r3, #4]
 800f690:	2106      	movs	r1, #6
 800f692:	4825      	ldr	r0, [pc, #148]	; (800f728 <Simcom_Convert_GPS+0xfc>)
 800f694:	eeb0 0a67 	vmov.f32	s0, s15
 800f698:	f7fc f972 	bl	800b980 <ftoa>
		ftoa(hgps->dop_h, sim.data.gps.hdop, 3);
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	edd3 7a06 	vldr	s15, [r3, #24]
 800f6a2:	2103      	movs	r1, #3
 800f6a4:	4821      	ldr	r0, [pc, #132]	; (800f72c <Simcom_Convert_GPS+0x100>)
 800f6a6:	eeb0 0a67 	vmov.f32	s0, s15
 800f6aa:	f7fc f969 	bl	800b980 <ftoa>
		ftoa(gps_to_speed(hgps->speed, gps_speed_kph), sim.data.speed, 1);
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800f6b4:	2001      	movs	r0, #1
 800f6b6:	eeb0 0a67 	vmov.f32	s0, s15
 800f6ba:	f7fe fcef 	bl	800e09c <gps_to_speed>
 800f6be:	eef0 7a40 	vmov.f32	s15, s0
 800f6c2:	2101      	movs	r1, #1
 800f6c4:	481a      	ldr	r0, [pc, #104]	; (800f730 <Simcom_Convert_GPS+0x104>)
 800f6c6:	eeb0 0a67 	vmov.f32	s0, s15
 800f6ca:	f7fc f959 	bl	800b980 <ftoa>
		sprintf(sim.data.gps.datetime, "20%02d%02d%02d%02d%02d%02d", hgps->year, hgps->month, hgps->date, convertHourTo(hgps->hours, GMT_TIME),
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f6d4:	461d      	mov	r5, r3
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f6dc:	461e      	mov	r6, r3
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f6e4:	461c      	mov	r4, r3
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	7c9b      	ldrb	r3, [r3, #18]
 800f6ea:	2107      	movs	r1, #7
 800f6ec:	4618      	mov	r0, r3
 800f6ee:	f7fc f9bb 	bl	800ba68 <convertHourTo>
 800f6f2:	4603      	mov	r3, r0
 800f6f4:	461a      	mov	r2, r3
				hgps->minutes, hgps->seconds);
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	7cdb      	ldrb	r3, [r3, #19]
		sprintf(sim.data.gps.datetime, "20%02d%02d%02d%02d%02d%02d", hgps->year, hgps->month, hgps->date, convertHourTo(hgps->hours, GMT_TIME),
 800f6fa:	4619      	mov	r1, r3
				hgps->minutes, hgps->seconds);
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	7d1b      	ldrb	r3, [r3, #20]
		sprintf(sim.data.gps.datetime, "20%02d%02d%02d%02d%02d%02d", hgps->year, hgps->month, hgps->date, convertHourTo(hgps->hours, GMT_TIME),
 800f700:	9303      	str	r3, [sp, #12]
 800f702:	9102      	str	r1, [sp, #8]
 800f704:	9201      	str	r2, [sp, #4]
 800f706:	9400      	str	r4, [sp, #0]
 800f708:	4633      	mov	r3, r6
 800f70a:	462a      	mov	r2, r5
 800f70c:	4909      	ldr	r1, [pc, #36]	; (800f734 <Simcom_Convert_GPS+0x108>)
 800f70e:	480a      	ldr	r0, [pc, #40]	; (800f738 <Simcom_Convert_GPS+0x10c>)
 800f710:	f002 ff36 	bl	8012580 <siprintf>
	}
}
 800f714:	bf00      	nop
 800f716:	370c      	adds	r7, #12
 800f718:	46bd      	mov	sp, r7
 800f71a:	ecbd 8b02 	vpop	{d8}
 800f71e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f720:	20007fc8 	.word	0x20007fc8
 800f724:	20008227 	.word	0x20008227
 800f728:	20008213 	.word	0x20008213
 800f72c:	20008240 	.word	0x20008240
 800f730:	20007ff1 	.word	0x20007ff1
 800f734:	0801619c 	.word	0x0801619c
 800f738:	20008204 	.word	0x20008204

0800f73c <Simcom_Set_Payload>:

void Simcom_Set_Payload(void) {
 800f73c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f73e:	b093      	sub	sp, #76	; 0x4c
 800f740:	af10      	add	r7, sp, #64	; 0x40
	// parse rtc datetime
	Get_RTC(sim.data.datetime_rtc);
 800f742:	4832      	ldr	r0, [pc, #200]	; (800f80c <Simcom_Set_Payload+0xd0>)
 800f744:	f7fc f9f0 	bl	800bb28 <Get_RTC>
	//Reconstruct the data
	sprintf(POSITION_DATA, "%s,%s,%s,%s,%s,"
			"%s,%d,%lu,%s,%d,"
			"%s,%d,%d,%s,%d,"
			"%d,%s\r\n", sim.data.gps.datetime, sim.data.datetime_rtc, sim.data.datetime_rtc, sim.data.gps.longitude, sim.data.gps.latitude,
			sim.data.gps.heading, sim.data.reportd_id, sim.data.odometer, sim.data.gps.hdop, sim.data.status_input, sim.data.speed,
 800f748:	4b31      	ldr	r3, [pc, #196]	; (800f810 <Simcom_Set_Payload+0xd4>)
 800f74a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
	sprintf(POSITION_DATA, "%s,%s,%s,%s,%s,"
 800f74e:	4619      	mov	r1, r3
 800f750:	4b2f      	ldr	r3, [pc, #188]	; (800f810 <Simcom_Set_Payload+0xd4>)
 800f752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
			sim.data.gps.heading, sim.data.reportd_id, sim.data.odometer, sim.data.gps.hdop, sim.data.status_input, sim.data.speed,
 800f754:	4a2e      	ldr	r2, [pc, #184]	; (800f810 <Simcom_Set_Payload+0xd4>)
 800f756:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
	sprintf(POSITION_DATA, "%s,%s,%s,%s,%s,"
 800f75a:	4610      	mov	r0, r2
			sim.data.status_output, sim.data.analog_input, sim.data.driver_id, sim.data.temp_sensor1, sim.data.temp_sensor2, sim.data.message);
 800f75c:	4a2c      	ldr	r2, [pc, #176]	; (800f810 <Simcom_Set_Payload+0xd4>)
 800f75e:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
	sprintf(POSITION_DATA, "%s,%s,%s,%s,%s,"
 800f762:	4614      	mov	r4, r2
			sim.data.status_output, sim.data.analog_input, sim.data.driver_id, sim.data.temp_sensor1, sim.data.temp_sensor2, sim.data.message);
 800f764:	4a2a      	ldr	r2, [pc, #168]	; (800f810 <Simcom_Set_Payload+0xd4>)
 800f766:	8e12      	ldrh	r2, [r2, #48]	; 0x30
	sprintf(POSITION_DATA, "%s,%s,%s,%s,%s,"
 800f768:	4615      	mov	r5, r2
			sim.data.status_output, sim.data.analog_input, sim.data.driver_id, sim.data.temp_sensor1, sim.data.temp_sensor2, sim.data.message);
 800f76a:	4a29      	ldr	r2, [pc, #164]	; (800f810 <Simcom_Set_Payload+0xd4>)
 800f76c:	f9b2 2044 	ldrsh.w	r2, [r2, #68]	; 0x44
	sprintf(POSITION_DATA, "%s,%s,%s,%s,%s,"
 800f770:	4616      	mov	r6, r2
			sim.data.status_output, sim.data.analog_input, sim.data.driver_id, sim.data.temp_sensor1, sim.data.temp_sensor2, sim.data.message);
 800f772:	4a27      	ldr	r2, [pc, #156]	; (800f810 <Simcom_Set_Payload+0xd4>)
 800f774:	f9b2 2046 	ldrsh.w	r2, [r2, #70]	; 0x46
	sprintf(POSITION_DATA, "%s,%s,%s,%s,%s,"
 800f778:	607a      	str	r2, [r7, #4]
 800f77a:	4a26      	ldr	r2, [pc, #152]	; (800f814 <Simcom_Set_Payload+0xd8>)
 800f77c:	920e      	str	r2, [sp, #56]	; 0x38
 800f77e:	687a      	ldr	r2, [r7, #4]
 800f780:	920d      	str	r2, [sp, #52]	; 0x34
 800f782:	960c      	str	r6, [sp, #48]	; 0x30
 800f784:	4a24      	ldr	r2, [pc, #144]	; (800f818 <Simcom_Set_Payload+0xdc>)
 800f786:	920b      	str	r2, [sp, #44]	; 0x2c
 800f788:	950a      	str	r5, [sp, #40]	; 0x28
 800f78a:	9409      	str	r4, [sp, #36]	; 0x24
 800f78c:	4a23      	ldr	r2, [pc, #140]	; (800f81c <Simcom_Set_Payload+0xe0>)
 800f78e:	9208      	str	r2, [sp, #32]
 800f790:	9007      	str	r0, [sp, #28]
 800f792:	4a23      	ldr	r2, [pc, #140]	; (800f820 <Simcom_Set_Payload+0xe4>)
 800f794:	9206      	str	r2, [sp, #24]
 800f796:	9305      	str	r3, [sp, #20]
 800f798:	9104      	str	r1, [sp, #16]
 800f79a:	4b22      	ldr	r3, [pc, #136]	; (800f824 <Simcom_Set_Payload+0xe8>)
 800f79c:	9303      	str	r3, [sp, #12]
 800f79e:	4b22      	ldr	r3, [pc, #136]	; (800f828 <Simcom_Set_Payload+0xec>)
 800f7a0:	9302      	str	r3, [sp, #8]
 800f7a2:	4b22      	ldr	r3, [pc, #136]	; (800f82c <Simcom_Set_Payload+0xf0>)
 800f7a4:	9301      	str	r3, [sp, #4]
 800f7a6:	4b19      	ldr	r3, [pc, #100]	; (800f80c <Simcom_Set_Payload+0xd0>)
 800f7a8:	9300      	str	r3, [sp, #0]
 800f7aa:	4b18      	ldr	r3, [pc, #96]	; (800f80c <Simcom_Set_Payload+0xd0>)
 800f7ac:	4a20      	ldr	r2, [pc, #128]	; (800f830 <Simcom_Set_Payload+0xf4>)
 800f7ae:	4921      	ldr	r1, [pc, #132]	; (800f834 <Simcom_Set_Payload+0xf8>)
 800f7b0:	4821      	ldr	r0, [pc, #132]	; (800f838 <Simcom_Set_Payload+0xfc>)
 800f7b2:	f002 fee5 	bl	8012580 <siprintf>
	//Reconstruct the header
	sim.header.length = strlen(POSITION_DATA);
 800f7b6:	4820      	ldr	r0, [pc, #128]	; (800f838 <Simcom_Set_Payload+0xfc>)
 800f7b8:	f7f0 fd14 	bl	80001e4 <strlen>
 800f7bc:	4603      	mov	r3, r0
 800f7be:	b29a      	uxth	r2, r3
 800f7c0:	4b13      	ldr	r3, [pc, #76]	; (800f810 <Simcom_Set_Payload+0xd4>)
 800f7c2:	80da      	strh	r2, [r3, #6]
	sim.header.seq_id++;
 800f7c4:	4b12      	ldr	r3, [pc, #72]	; (800f810 <Simcom_Set_Payload+0xd4>)
 800f7c6:	891b      	ldrh	r3, [r3, #8]
 800f7c8:	3301      	adds	r3, #1
 800f7ca:	b29a      	uxth	r2, r3
 800f7cc:	4b10      	ldr	r3, [pc, #64]	; (800f810 <Simcom_Set_Payload+0xd4>)
 800f7ce:	811a      	strh	r2, [r3, #8]
	sprintf(POSITION_HEADER, "%s,%d,%d,%d,%s", sim.header.prefix, sim.header.crc, sim.header.length, sim.header.seq_id, sim.header.unit_id);
 800f7d0:	4b0f      	ldr	r3, [pc, #60]	; (800f810 <Simcom_Set_Payload+0xd4>)
 800f7d2:	889b      	ldrh	r3, [r3, #4]
 800f7d4:	4618      	mov	r0, r3
 800f7d6:	4b0e      	ldr	r3, [pc, #56]	; (800f810 <Simcom_Set_Payload+0xd4>)
 800f7d8:	88db      	ldrh	r3, [r3, #6]
 800f7da:	461a      	mov	r2, r3
 800f7dc:	4b0c      	ldr	r3, [pc, #48]	; (800f810 <Simcom_Set_Payload+0xd4>)
 800f7de:	891b      	ldrh	r3, [r3, #8]
 800f7e0:	4619      	mov	r1, r3
 800f7e2:	4b16      	ldr	r3, [pc, #88]	; (800f83c <Simcom_Set_Payload+0x100>)
 800f7e4:	9302      	str	r3, [sp, #8]
 800f7e6:	9101      	str	r1, [sp, #4]
 800f7e8:	9200      	str	r2, [sp, #0]
 800f7ea:	4603      	mov	r3, r0
 800f7ec:	4a08      	ldr	r2, [pc, #32]	; (800f810 <Simcom_Set_Payload+0xd4>)
 800f7ee:	4914      	ldr	r1, [pc, #80]	; (800f840 <Simcom_Set_Payload+0x104>)
 800f7f0:	4814      	ldr	r0, [pc, #80]	; (800f844 <Simcom_Set_Payload+0x108>)
 800f7f2:	f002 fec5 	bl	8012580 <siprintf>
	//Reconstruct the position
	sprintf(PAYLOAD, "%s,%s", POSITION_HEADER, POSITION_DATA);
 800f7f6:	4b10      	ldr	r3, [pc, #64]	; (800f838 <Simcom_Set_Payload+0xfc>)
 800f7f8:	4a12      	ldr	r2, [pc, #72]	; (800f844 <Simcom_Set_Payload+0x108>)
 800f7fa:	4913      	ldr	r1, [pc, #76]	; (800f848 <Simcom_Set_Payload+0x10c>)
 800f7fc:	4813      	ldr	r0, [pc, #76]	; (800f84c <Simcom_Set_Payload+0x110>)
 800f7fe:	f002 febf 	bl	8012580 <siprintf>
}
 800f802:	bf00      	nop
 800f804:	370c      	adds	r7, #12
 800f806:	46bd      	mov	sp, r7
 800f808:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f80a:	bf00      	nop
 800f80c:	20007fdc 	.word	0x20007fdc
 800f810:	20007fc8 	.word	0x20007fc8
 800f814:	20008010 	.word	0x20008010
 800f818:	20007ffa 	.word	0x20007ffa
 800f81c:	20007ff1 	.word	0x20007ff1
 800f820:	20008240 	.word	0x20008240
 800f824:	2000823b 	.word	0x2000823b
 800f828:	20008227 	.word	0x20008227
 800f82c:	20008213 	.word	0x20008213
 800f830:	20008204 	.word	0x20008204
 800f834:	080161b8 	.word	0x080161b8
 800f838:	200078fc 	.word	0x200078fc
 800f83c:	20007fd2 	.word	0x20007fd2
 800f840:	080161f0 	.word	0x080161f0
 800f844:	200078dc 	.word	0x200078dc
 800f848:	08016200 	.word	0x08016200
 800f84c:	20007624 	.word	0x20007624

0800f850 <Simcom_Send_Payload>:

uint8_t Simcom_Send_Payload(void) {
 800f850:	b580      	push	{r7, lr}
 800f852:	af00      	add	r7, sp, #0
	return Simcom_To_Server(PAYLOAD, strlen(PAYLOAD));
 800f854:	4805      	ldr	r0, [pc, #20]	; (800f86c <Simcom_Send_Payload+0x1c>)
 800f856:	f7f0 fcc5 	bl	80001e4 <strlen>
 800f85a:	4603      	mov	r3, r0
 800f85c:	b29b      	uxth	r3, r3
 800f85e:	4619      	mov	r1, r3
 800f860:	4802      	ldr	r0, [pc, #8]	; (800f86c <Simcom_Send_Payload+0x1c>)
 800f862:	f000 f805 	bl	800f870 <Simcom_To_Server>
 800f866:	4603      	mov	r3, r0
}
 800f868:	4618      	mov	r0, r3
 800f86a:	bd80      	pop	{r7, pc}
 800f86c:	20007624 	.word	0x20007624

0800f870 <Simcom_To_Server>:

uint8_t Simcom_To_Server(char *message, uint16_t length) {
 800f870:	b5b0      	push	{r4, r5, r7, lr}
 800f872:	b086      	sub	sp, #24
 800f874:	af00      	add	r7, sp, #0
 800f876:	6078      	str	r0, [r7, #4]
 800f878:	460b      	mov	r3, r1
 800f87a:	807b      	strh	r3, [r7, #2]
 800f87c:	466b      	mov	r3, sp
 800f87e:	461d      	mov	r5, r3
	osRecursiveMutexWait(SimcomRecMutexHandle, osWaitForever);
 800f880:	4b27      	ldr	r3, [pc, #156]	; (800f920 <Simcom_To_Server+0xb0>)
 800f882:	681b      	ldr	r3, [r3, #0]
 800f884:	f04f 31ff 	mov.w	r1, #4294967295
 800f888:	4618      	mov	r0, r3
 800f88a:	f7f8 f99e 	bl	8007bca <osRecursiveMutexWait>

	uint8_t ret = 0;
 800f88e:	2300      	movs	r3, #0
 800f890:	75fb      	strb	r3, [r7, #23]
	char str[length + 1];
 800f892:	887b      	ldrh	r3, [r7, #2]
 800f894:	1c58      	adds	r0, r3, #1
 800f896:	1e43      	subs	r3, r0, #1
 800f898:	613b      	str	r3, [r7, #16]
 800f89a:	4603      	mov	r3, r0
 800f89c:	4619      	mov	r1, r3
 800f89e:	f04f 0200 	mov.w	r2, #0
 800f8a2:	f04f 0300 	mov.w	r3, #0
 800f8a6:	f04f 0400 	mov.w	r4, #0
 800f8aa:	00d4      	lsls	r4, r2, #3
 800f8ac:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800f8b0:	00cb      	lsls	r3, r1, #3
 800f8b2:	4603      	mov	r3, r0
 800f8b4:	4619      	mov	r1, r3
 800f8b6:	f04f 0200 	mov.w	r2, #0
 800f8ba:	f04f 0300 	mov.w	r3, #0
 800f8be:	f04f 0400 	mov.w	r4, #0
 800f8c2:	00d4      	lsls	r4, r2, #3
 800f8c4:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800f8c8:	00cb      	lsls	r3, r1, #3
 800f8ca:	4603      	mov	r3, r0
 800f8cc:	3307      	adds	r3, #7
 800f8ce:	08db      	lsrs	r3, r3, #3
 800f8d0:	00db      	lsls	r3, r3, #3
 800f8d2:	ebad 0d03 	sub.w	sp, sp, r3
 800f8d6:	466b      	mov	r3, sp
 800f8d8:	3300      	adds	r3, #0
 800f8da:	60fb      	str	r3, [r7, #12]
	// add message end character
	sprintf(str, "%s%s", message, SIMCOM_MESSAGE_END);
 800f8dc:	68f8      	ldr	r0, [r7, #12]
 800f8de:	4b11      	ldr	r3, [pc, #68]	; (800f924 <Simcom_To_Server+0xb4>)
 800f8e0:	687a      	ldr	r2, [r7, #4]
 800f8e2:	4911      	ldr	r1, [pc, #68]	; (800f928 <Simcom_To_Server+0xb8>)
 800f8e4:	f002 fe4c 	bl	8012580 <siprintf>
	// confirm to server that command is executed
	if (Simcom_Send(CIPSEND, 0)) {
 800f8e8:	2100      	movs	r1, #0
 800f8ea:	4810      	ldr	r0, [pc, #64]	; (800f92c <Simcom_To_Server+0xbc>)
 800f8ec:	f7ff fc24 	bl	800f138 <Simcom_Send>
 800f8f0:	4603      	mov	r3, r0
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d009      	beq.n	800f90a <Simcom_To_Server+0x9a>
		// send response
		if (Simcom_Send(str, 0)) {
 800f8f6:	68fb      	ldr	r3, [r7, #12]
 800f8f8:	2100      	movs	r1, #0
 800f8fa:	4618      	mov	r0, r3
 800f8fc:	f7ff fc1c 	bl	800f138 <Simcom_Send>
 800f900:	4603      	mov	r3, r0
 800f902:	2b00      	cmp	r3, #0
 800f904:	d001      	beq.n	800f90a <Simcom_To_Server+0x9a>
			ret = 1;
 800f906:	2301      	movs	r3, #1
 800f908:	75fb      	strb	r3, [r7, #23]
		}
	}

	osRecursiveMutexRelease(SimcomRecMutexHandle);
 800f90a:	4b05      	ldr	r3, [pc, #20]	; (800f920 <Simcom_To_Server+0xb0>)
 800f90c:	681b      	ldr	r3, [r3, #0]
 800f90e:	4618      	mov	r0, r3
 800f910:	f7f8 f948 	bl	8007ba4 <osRecursiveMutexRelease>
	return ret;
 800f914:	7dfb      	ldrb	r3, [r7, #23]
 800f916:	46ad      	mov	sp, r5
}
 800f918:	4618      	mov	r0, r3
 800f91a:	3718      	adds	r7, #24
 800f91c:	46bd      	mov	sp, r7
 800f91e:	bdb0      	pop	{r4, r5, r7, pc}
 800f920:	20008680 	.word	0x20008680
 800f924:	08016208 	.word	0x08016208
 800f928:	0801620c 	.word	0x0801620c
 800f92c:	20007b94 	.word	0x20007b94

0800f930 <Simcom_Check_Command>:

uint8_t Simcom_Check_Command(void) {
 800f930:	b580      	push	{r7, lr}
 800f932:	af00      	add	r7, sp, #0
	// check if it has new command
	if (strstr(SIMCOM_UART_RX_Buffer, "+CIPRXGET: 1") != NULL) {
 800f934:	4905      	ldr	r1, [pc, #20]	; (800f94c <Simcom_Check_Command+0x1c>)
 800f936:	4806      	ldr	r0, [pc, #24]	; (800f950 <Simcom_Check_Command+0x20>)
 800f938:	f002 fe7e 	bl	8012638 <strstr>
 800f93c:	4603      	mov	r3, r0
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d001      	beq.n	800f946 <Simcom_Check_Command+0x16>
		// hand over command to CommandTask
		return 1;
 800f942:	2301      	movs	r3, #1
 800f944:	e000      	b.n	800f948 <Simcom_Check_Command+0x18>
	}
	return 0;
 800f946:	2300      	movs	r3, #0
}
 800f948:	4618      	mov	r0, r3
 800f94a:	bd80      	pop	{r7, pc}
 800f94c:	08016214 	.word	0x08016214
 800f950:	200068fc 	.word	0x200068fc

0800f954 <Simcom_Get_Command>:

uint8_t Simcom_Get_Command(command_t *command) {
 800f954:	b580      	push	{r7, lr}
 800f956:	b086      	sub	sp, #24
 800f958:	af00      	add	r7, sp, #0
 800f95a:	6078      	str	r0, [r7, #4]
	osRecursiveMutexWait(SimcomRecMutexHandle, osWaitForever);
 800f95c:	4b3f      	ldr	r3, [pc, #252]	; (800fa5c <Simcom_Get_Command+0x108>)
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	f04f 31ff 	mov.w	r1, #4294967295
 800f964:	4618      	mov	r0, r3
 800f966:	f7f8 f930 	bl	8007bca <osRecursiveMutexWait>

	uint8_t ret = 0;
 800f96a:	2300      	movs	r3, #0
 800f96c:	75fb      	strb	r3, [r7, #23]
	char *start, *delim, *end;

	if (Simcom_Send("AT+CIPRXGET=2,0\r", 0)) {
 800f96e:	2100      	movs	r1, #0
 800f970:	483b      	ldr	r0, [pc, #236]	; (800fa60 <Simcom_Get_Command+0x10c>)
 800f972:	f7ff fbe1 	bl	800f138 <Simcom_Send>
 800f976:	4603      	mov	r3, r0
 800f978:	2b00      	cmp	r3, #0
 800f97a:	d065      	beq.n	800fa48 <Simcom_Get_Command+0xf4>
		// get pointer reference
		start = strstr(SIMCOM_UART_RX_Buffer, "AT$");
 800f97c:	4939      	ldr	r1, [pc, #228]	; (800fa64 <Simcom_Get_Command+0x110>)
 800f97e:	483a      	ldr	r0, [pc, #232]	; (800fa68 <Simcom_Get_Command+0x114>)
 800f980:	f002 fe5a 	bl	8012638 <strstr>
 800f984:	6138      	str	r0, [r7, #16]
		end = strstr(start, "\r\n\r\n");
 800f986:	4939      	ldr	r1, [pc, #228]	; (800fa6c <Simcom_Get_Command+0x118>)
 800f988:	6938      	ldr	r0, [r7, #16]
 800f98a:	f002 fe55 	bl	8012638 <strstr>
 800f98e:	60f8      	str	r0, [r7, #12]
		delim = strchr(start, '=');
 800f990:	213d      	movs	r1, #61	; 0x3d
 800f992:	6938      	ldr	r0, [r7, #16]
 800f994:	f002 fe14 	bl	80125c0 <strchr>
 800f998:	60b8      	str	r0, [r7, #8]

		// check if command has value
		if (delim != NULL) {
 800f99a:	68bb      	ldr	r3, [r7, #8]
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	d025      	beq.n	800f9ec <Simcom_Get_Command+0x98>
			// get command
			strncpy(command->var, start + 3, delim - (start + 3));
 800f9a0:	6878      	ldr	r0, [r7, #4]
 800f9a2:	693b      	ldr	r3, [r7, #16]
 800f9a4:	1cd9      	adds	r1, r3, #3
 800f9a6:	68bb      	ldr	r3, [r7, #8]
 800f9a8:	693a      	ldr	r2, [r7, #16]
 800f9aa:	3203      	adds	r2, #3
 800f9ac:	1a9b      	subs	r3, r3, r2
 800f9ae:	461a      	mov	r2, r3
 800f9b0:	f002 fe2d 	bl	801260e <strncpy>
			*(command->var + (delim - (start + 3))) = '\0';
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	68ba      	ldr	r2, [r7, #8]
 800f9b8:	6939      	ldr	r1, [r7, #16]
 800f9ba:	3103      	adds	r1, #3
 800f9bc:	1a52      	subs	r2, r2, r1
 800f9be:	4413      	add	r3, r2
 800f9c0:	2200      	movs	r2, #0
 800f9c2:	701a      	strb	r2, [r3, #0]
			// get value
			strncpy(command->val, delim + 1, end - delim);
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	f103 0014 	add.w	r0, r3, #20
 800f9ca:	68bb      	ldr	r3, [r7, #8]
 800f9cc:	1c59      	adds	r1, r3, #1
 800f9ce:	68fa      	ldr	r2, [r7, #12]
 800f9d0:	68bb      	ldr	r3, [r7, #8]
 800f9d2:	1ad3      	subs	r3, r2, r3
 800f9d4:	461a      	mov	r2, r3
 800f9d6:	f002 fe1a 	bl	801260e <strncpy>
			*(command->val + (end - delim)) = '\0';
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	3314      	adds	r3, #20
 800f9de:	68f9      	ldr	r1, [r7, #12]
 800f9e0:	68ba      	ldr	r2, [r7, #8]
 800f9e2:	1a8a      	subs	r2, r1, r2
 800f9e4:	4413      	add	r3, r2
 800f9e6:	2200      	movs	r2, #0
 800f9e8:	701a      	strb	r2, [r3, #0]
 800f9ea:	e014      	b.n	800fa16 <Simcom_Get_Command+0xc2>
		} else {
			// get command
			strncpy(command->var, start + 3, end - (start + 3));
 800f9ec:	6878      	ldr	r0, [r7, #4]
 800f9ee:	693b      	ldr	r3, [r7, #16]
 800f9f0:	1cd9      	adds	r1, r3, #3
 800f9f2:	68fb      	ldr	r3, [r7, #12]
 800f9f4:	693a      	ldr	r2, [r7, #16]
 800f9f6:	3203      	adds	r2, #3
 800f9f8:	1a9b      	subs	r3, r3, r2
 800f9fa:	461a      	mov	r2, r3
 800f9fc:	f002 fe07 	bl	801260e <strncpy>
			*(command->var + (end - (start + 3))) = '\0';
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	68fa      	ldr	r2, [r7, #12]
 800fa04:	6939      	ldr	r1, [r7, #16]
 800fa06:	3103      	adds	r1, #3
 800fa08:	1a52      	subs	r2, r2, r1
 800fa0a:	4413      	add	r3, r2
 800fa0c:	2200      	movs	r2, #0
 800fa0e:	701a      	strb	r2, [r3, #0]
			// set value
			*(command->val) = '\0';
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	2200      	movs	r2, #0
 800fa14:	751a      	strb	r2, [r3, #20]
		}

		// get full command
		strncpy(command->cmd, start + 3, end - (start + 3));
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	f103 0028 	add.w	r0, r3, #40	; 0x28
 800fa1c:	693b      	ldr	r3, [r7, #16]
 800fa1e:	1cd9      	adds	r1, r3, #3
 800fa20:	68fb      	ldr	r3, [r7, #12]
 800fa22:	693a      	ldr	r2, [r7, #16]
 800fa24:	3203      	adds	r2, #3
 800fa26:	1a9b      	subs	r3, r3, r2
 800fa28:	461a      	mov	r2, r3
 800fa2a:	f002 fdf0 	bl	801260e <strncpy>
		*(command->cmd + (end - (start + 3))) = '\0';
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	3328      	adds	r3, #40	; 0x28
 800fa32:	68fa      	ldr	r2, [r7, #12]
 800fa34:	6939      	ldr	r1, [r7, #16]
 800fa36:	3103      	adds	r1, #3
 800fa38:	1a52      	subs	r2, r2, r1
 800fa3a:	4413      	add	r3, r2
 800fa3c:	2200      	movs	r2, #0
 800fa3e:	701a      	strb	r2, [r3, #0]

		// reset rx buffer
		SIMCOM_Reset_Buffer();
 800fa40:	f7fb fc60 	bl	800b304 <SIMCOM_Reset_Buffer>

		ret = 1;
 800fa44:	2301      	movs	r3, #1
 800fa46:	75fb      	strb	r3, [r7, #23]
	}

	osRecursiveMutexRelease(SimcomRecMutexHandle);
 800fa48:	4b04      	ldr	r3, [pc, #16]	; (800fa5c <Simcom_Get_Command+0x108>)
 800fa4a:	681b      	ldr	r3, [r3, #0]
 800fa4c:	4618      	mov	r0, r3
 800fa4e:	f7f8 f8a9 	bl	8007ba4 <osRecursiveMutexRelease>
	return ret;
 800fa52:	7dfb      	ldrb	r3, [r7, #23]
}
 800fa54:	4618      	mov	r0, r3
 800fa56:	3718      	adds	r7, #24
 800fa58:	46bd      	mov	sp, r7
 800fa5a:	bd80      	pop	{r7, pc}
 800fa5c:	20008680 	.word	0x20008680
 800fa60:	08016224 	.word	0x08016224
 800fa64:	08016238 	.word	0x08016238
 800fa68:	200068fc 	.word	0x200068fc
 800fa6c:	0801623c 	.word	0x0801623c

0800fa70 <Simcom_Set_Odometer>:

void Simcom_Set_Odometer(uint32_t odom) {
 800fa70:	b580      	push	{r7, lr}
 800fa72:	b082      	sub	sp, #8
 800fa74:	af00      	add	r7, sp, #0
 800fa76:	6078      	str	r0, [r7, #4]
	sim.data.odometer = odom;
 800fa78:	4a04      	ldr	r2, [pc, #16]	; (800fa8c <Simcom_Set_Odometer+0x1c>)
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	6253      	str	r3, [r2, #36]	; 0x24
	Flash_Save_Odometer(odom);
 800fa7e:	6878      	ldr	r0, [r7, #4]
 800fa80:	f7fc ffea 	bl	800ca58 <Flash_Save_Odometer>
}
 800fa84:	bf00      	nop
 800fa86:	3708      	adds	r7, #8
 800fa88:	46bd      	mov	sp, r7
 800fa8a:	bd80      	pop	{r7, pc}
 800fa8c:	20007fc8 	.word	0x20007fc8

0800fa90 <cs43l22_Init>:
 * @param OutputDevice: can be OUTPUT_DEVICE_SPEAKER, OUTPUT_DEVICE_HEADPHONE,
 *                       OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO .
 * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
 * @retval 0 if correct communication, else wrong communication
 */
uint32_t cs43l22_Init(uint16_t DeviceAddr, uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq) {
 800fa90:	b580      	push	{r7, lr}
 800fa92:	b086      	sub	sp, #24
 800fa94:	af00      	add	r7, sp, #0
 800fa96:	607b      	str	r3, [r7, #4]
 800fa98:	4603      	mov	r3, r0
 800fa9a:	81fb      	strh	r3, [r7, #14]
 800fa9c:	460b      	mov	r3, r1
 800fa9e:	81bb      	strh	r3, [r7, #12]
 800faa0:	4613      	mov	r3, r2
 800faa2:	72fb      	strb	r3, [r7, #11]
	uint32_t counter = 0;
 800faa4:	2300      	movs	r3, #0
 800faa6:	617b      	str	r3, [r7, #20]

	/* Initialize the Control interface of the Audio Codec */
	AUDIO_IO_Init();
 800faa8:	f001 fc32 	bl	8011310 <AUDIO_IO_Init>

	/* Keep Codec powered OFF */
	counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);
 800faac:	89fb      	ldrh	r3, [r7, #14]
 800faae:	b2db      	uxtb	r3, r3
 800fab0:	2201      	movs	r2, #1
 800fab2:	2102      	movs	r1, #2
 800fab4:	4618      	mov	r0, r3
 800fab6:	f000 fb34 	bl	8010122 <CODEC_IO_Write>
 800faba:	4603      	mov	r3, r0
 800fabc:	461a      	mov	r2, r3
 800fabe:	697b      	ldr	r3, [r7, #20]
 800fac0:	4413      	add	r3, r2
 800fac2:	617b      	str	r3, [r7, #20]

	/*Save Output device for mute ON/OFF procedure*/
	switch (OutputDevice) {
 800fac4:	89bb      	ldrh	r3, [r7, #12]
 800fac6:	3b01      	subs	r3, #1
 800fac8:	2b03      	cmp	r3, #3
 800faca:	d81b      	bhi.n	800fb04 <cs43l22_Init+0x74>
 800facc:	a201      	add	r2, pc, #4	; (adr r2, 800fad4 <cs43l22_Init+0x44>)
 800face:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fad2:	bf00      	nop
 800fad4:	0800fae5 	.word	0x0800fae5
 800fad8:	0800faed 	.word	0x0800faed
 800fadc:	0800faf5 	.word	0x0800faf5
 800fae0:	0800fafd 	.word	0x0800fafd
		case OUTPUT_DEVICE_SPEAKER:
			OutputDev = 0xFA;
 800fae4:	4b4f      	ldr	r3, [pc, #316]	; (800fc24 <cs43l22_Init+0x194>)
 800fae6:	22fa      	movs	r2, #250	; 0xfa
 800fae8:	701a      	strb	r2, [r3, #0]
			break;
 800faea:	e00f      	b.n	800fb0c <cs43l22_Init+0x7c>

		case OUTPUT_DEVICE_HEADPHONE:
			OutputDev = 0xAF;
 800faec:	4b4d      	ldr	r3, [pc, #308]	; (800fc24 <cs43l22_Init+0x194>)
 800faee:	22af      	movs	r2, #175	; 0xaf
 800faf0:	701a      	strb	r2, [r3, #0]
			break;
 800faf2:	e00b      	b.n	800fb0c <cs43l22_Init+0x7c>

		case OUTPUT_DEVICE_BOTH:
			OutputDev = 0xAA;
 800faf4:	4b4b      	ldr	r3, [pc, #300]	; (800fc24 <cs43l22_Init+0x194>)
 800faf6:	22aa      	movs	r2, #170	; 0xaa
 800faf8:	701a      	strb	r2, [r3, #0]
			break;
 800fafa:	e007      	b.n	800fb0c <cs43l22_Init+0x7c>

		case OUTPUT_DEVICE_AUTO:
			OutputDev = 0x05;
 800fafc:	4b49      	ldr	r3, [pc, #292]	; (800fc24 <cs43l22_Init+0x194>)
 800fafe:	2205      	movs	r2, #5
 800fb00:	701a      	strb	r2, [r3, #0]
			break;
 800fb02:	e003      	b.n	800fb0c <cs43l22_Init+0x7c>

		default:
			OutputDev = 0x05;
 800fb04:	4b47      	ldr	r3, [pc, #284]	; (800fc24 <cs43l22_Init+0x194>)
 800fb06:	2205      	movs	r2, #5
 800fb08:	701a      	strb	r2, [r3, #0]
			break;
 800fb0a:	bf00      	nop
	}

	counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 800fb0c:	89fb      	ldrh	r3, [r7, #14]
 800fb0e:	b2d8      	uxtb	r0, r3
 800fb10:	4b44      	ldr	r3, [pc, #272]	; (800fc24 <cs43l22_Init+0x194>)
 800fb12:	781b      	ldrb	r3, [r3, #0]
 800fb14:	b2db      	uxtb	r3, r3
 800fb16:	461a      	mov	r2, r3
 800fb18:	2104      	movs	r1, #4
 800fb1a:	f000 fb02 	bl	8010122 <CODEC_IO_Write>
 800fb1e:	4603      	mov	r3, r0
 800fb20:	461a      	mov	r2, r3
 800fb22:	697b      	ldr	r3, [r7, #20]
 800fb24:	4413      	add	r3, r2
 800fb26:	617b      	str	r3, [r7, #20]

	/* Clock configuration: Auto detection */
	counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_CLOCKING_CTL, 0x81);
 800fb28:	89fb      	ldrh	r3, [r7, #14]
 800fb2a:	b2db      	uxtb	r3, r3
 800fb2c:	2281      	movs	r2, #129	; 0x81
 800fb2e:	2105      	movs	r1, #5
 800fb30:	4618      	mov	r0, r3
 800fb32:	f000 faf6 	bl	8010122 <CODEC_IO_Write>
 800fb36:	4603      	mov	r3, r0
 800fb38:	461a      	mov	r2, r3
 800fb3a:	697b      	ldr	r3, [r7, #20]
 800fb3c:	4413      	add	r3, r2
 800fb3e:	617b      	str	r3, [r7, #20]

	/* Set the Slave Mode and the audio Standard */
	counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_INTERFACE_CTL1, CODEC_STANDARD);
 800fb40:	89fb      	ldrh	r3, [r7, #14]
 800fb42:	b2db      	uxtb	r3, r3
 800fb44:	2204      	movs	r2, #4
 800fb46:	2106      	movs	r1, #6
 800fb48:	4618      	mov	r0, r3
 800fb4a:	f000 faea 	bl	8010122 <CODEC_IO_Write>
 800fb4e:	4603      	mov	r3, r0
 800fb50:	461a      	mov	r2, r3
 800fb52:	697b      	ldr	r3, [r7, #20]
 800fb54:	4413      	add	r3, r2
 800fb56:	617b      	str	r3, [r7, #20]

	/* Set the Master volume */
	counter += cs43l22_SetVolume(DeviceAddr, Volume);
 800fb58:	7afa      	ldrb	r2, [r7, #11]
 800fb5a:	89fb      	ldrh	r3, [r7, #14]
 800fb5c:	4611      	mov	r1, r2
 800fb5e:	4618      	mov	r0, r3
 800fb60:	f000 f94c 	bl	800fdfc <cs43l22_SetVolume>
 800fb64:	4602      	mov	r2, r0
 800fb66:	697b      	ldr	r3, [r7, #20]
 800fb68:	4413      	add	r3, r2
 800fb6a:	617b      	str	r3, [r7, #20]

	/* If the Speaker is enabled, set the Mono mode and volume attenuation level */
	if (OutputDevice != OUTPUT_DEVICE_HEADPHONE) {
 800fb6c:	89bb      	ldrh	r3, [r7, #12]
 800fb6e:	2b02      	cmp	r3, #2
 800fb70:	d023      	beq.n	800fbba <cs43l22_Init+0x12a>
		/* Set the Speaker Mono mode */
		counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PLAYBACK_CTL2, 0x06);
 800fb72:	89fb      	ldrh	r3, [r7, #14]
 800fb74:	b2db      	uxtb	r3, r3
 800fb76:	2206      	movs	r2, #6
 800fb78:	210f      	movs	r1, #15
 800fb7a:	4618      	mov	r0, r3
 800fb7c:	f000 fad1 	bl	8010122 <CODEC_IO_Write>
 800fb80:	4603      	mov	r3, r0
 800fb82:	461a      	mov	r2, r3
 800fb84:	697b      	ldr	r3, [r7, #20]
 800fb86:	4413      	add	r3, r2
 800fb88:	617b      	str	r3, [r7, #20]

		/* Set the Speaker attenuation level */
		counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_A_VOL, 0x00);
 800fb8a:	89fb      	ldrh	r3, [r7, #14]
 800fb8c:	b2db      	uxtb	r3, r3
 800fb8e:	2200      	movs	r2, #0
 800fb90:	2124      	movs	r1, #36	; 0x24
 800fb92:	4618      	mov	r0, r3
 800fb94:	f000 fac5 	bl	8010122 <CODEC_IO_Write>
 800fb98:	4603      	mov	r3, r0
 800fb9a:	461a      	mov	r2, r3
 800fb9c:	697b      	ldr	r3, [r7, #20]
 800fb9e:	4413      	add	r3, r2
 800fba0:	617b      	str	r3, [r7, #20]
		counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_B_VOL, 0x00);
 800fba2:	89fb      	ldrh	r3, [r7, #14]
 800fba4:	b2db      	uxtb	r3, r3
 800fba6:	2200      	movs	r2, #0
 800fba8:	2125      	movs	r1, #37	; 0x25
 800fbaa:	4618      	mov	r0, r3
 800fbac:	f000 fab9 	bl	8010122 <CODEC_IO_Write>
 800fbb0:	4603      	mov	r3, r0
 800fbb2:	461a      	mov	r2, r3
 800fbb4:	697b      	ldr	r3, [r7, #20]
 800fbb6:	4413      	add	r3, r2
 800fbb8:	617b      	str	r3, [r7, #20]
	 off the I2S peripheral MCLK clock (which is the operating clock for Codec).
	 If this delay is not inserted, then the codec will not shut down properly and
	 it results in high noise after shut down. */

	/* Disable the analog soft ramp */
	counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_ANALOG_ZC_SR_SETT, 0x00);
 800fbba:	89fb      	ldrh	r3, [r7, #14]
 800fbbc:	b2db      	uxtb	r3, r3
 800fbbe:	2200      	movs	r2, #0
 800fbc0:	210a      	movs	r1, #10
 800fbc2:	4618      	mov	r0, r3
 800fbc4:	f000 faad 	bl	8010122 <CODEC_IO_Write>
 800fbc8:	4603      	mov	r3, r0
 800fbca:	461a      	mov	r2, r3
 800fbcc:	697b      	ldr	r3, [r7, #20]
 800fbce:	4413      	add	r3, r2
 800fbd0:	617b      	str	r3, [r7, #20]
	/* Disable the digital soft ramp */
	counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 800fbd2:	89fb      	ldrh	r3, [r7, #14]
 800fbd4:	b2db      	uxtb	r3, r3
 800fbd6:	2204      	movs	r2, #4
 800fbd8:	210e      	movs	r1, #14
 800fbda:	4618      	mov	r0, r3
 800fbdc:	f000 faa1 	bl	8010122 <CODEC_IO_Write>
 800fbe0:	4603      	mov	r3, r0
 800fbe2:	461a      	mov	r2, r3
 800fbe4:	697b      	ldr	r3, [r7, #20]
 800fbe6:	4413      	add	r3, r2
 800fbe8:	617b      	str	r3, [r7, #20]
	/* Disable the limiter attack level */
	counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_LIMIT_CTL1, 0x00);
 800fbea:	89fb      	ldrh	r3, [r7, #14]
 800fbec:	b2db      	uxtb	r3, r3
 800fbee:	2200      	movs	r2, #0
 800fbf0:	2127      	movs	r1, #39	; 0x27
 800fbf2:	4618      	mov	r0, r3
 800fbf4:	f000 fa95 	bl	8010122 <CODEC_IO_Write>
 800fbf8:	4603      	mov	r3, r0
 800fbfa:	461a      	mov	r2, r3
 800fbfc:	697b      	ldr	r3, [r7, #20]
 800fbfe:	4413      	add	r3, r2
 800fc00:	617b      	str	r3, [r7, #20]
	/* Adjust Bass and Treble levels */
	counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_TONE_CTL, 0x0F);
 800fc02:	89fb      	ldrh	r3, [r7, #14]
 800fc04:	b2db      	uxtb	r3, r3
 800fc06:	220f      	movs	r2, #15
 800fc08:	211f      	movs	r1, #31
 800fc0a:	4618      	mov	r0, r3
 800fc0c:	f000 fa89 	bl	8010122 <CODEC_IO_Write>
 800fc10:	4603      	mov	r3, r0
 800fc12:	461a      	mov	r2, r3
 800fc14:	697b      	ldr	r3, [r7, #20]
 800fc16:	4413      	add	r3, r2
 800fc18:	617b      	str	r3, [r7, #20]
	/* Adjust PCM volume level */
//	counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMA_VOL, 0x0A);
//	counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMB_VOL, 0x0A);
	/* Return communication control value */
	return counter;
 800fc1a:	697b      	ldr	r3, [r7, #20]
}
 800fc1c:	4618      	mov	r0, r3
 800fc1e:	3718      	adds	r7, #24
 800fc20:	46bd      	mov	sp, r7
 800fc22:	bd80      	pop	{r7, pc}
 800fc24:	20006536 	.word	0x20006536

0800fc28 <cs43l22_DeInit>:
/**
 * @brief  Deinitializes the audio codec.
 * @param  None
 * @retval  None
 */
void cs43l22_DeInit(void) {
 800fc28:	b580      	push	{r7, lr}
 800fc2a:	af00      	add	r7, sp, #0
	/* Deinitialize Audio Codec interface */
	AUDIO_IO_DeInit();
 800fc2c:	f001 fba8 	bl	8011380 <AUDIO_IO_DeInit>
}
 800fc30:	bf00      	nop
 800fc32:	bd80      	pop	{r7, pc}

0800fc34 <cs43l22_ReadID>:
/**
 * @brief  Get the CS43L22 ID.
 * @param DeviceAddr: Device address on communication Bus.
 * @retval The CS43L22 ID
 */
uint32_t cs43l22_ReadID(uint16_t DeviceAddr) {
 800fc34:	b580      	push	{r7, lr}
 800fc36:	b084      	sub	sp, #16
 800fc38:	af00      	add	r7, sp, #0
 800fc3a:	4603      	mov	r3, r0
 800fc3c:	80fb      	strh	r3, [r7, #6]
	uint8_t Value;
	/* Initialize the Control interface of the Audio Codec */
	AUDIO_IO_Init();
 800fc3e:	f001 fb67 	bl	8011310 <AUDIO_IO_Init>

	Value = AUDIO_IO_Read(DeviceAddr, CS43L22_CHIPID_ADDR);
 800fc42:	88fb      	ldrh	r3, [r7, #6]
 800fc44:	b2db      	uxtb	r3, r3
 800fc46:	2101      	movs	r1, #1
 800fc48:	4618      	mov	r0, r3
 800fc4a:	f001 fbb3 	bl	80113b4 <AUDIO_IO_Read>
 800fc4e:	4603      	mov	r3, r0
 800fc50:	73fb      	strb	r3, [r7, #15]
	Value = (Value & CS43L22_ID_MASK);
 800fc52:	7bfb      	ldrb	r3, [r7, #15]
 800fc54:	f023 0307 	bic.w	r3, r3, #7
 800fc58:	73fb      	strb	r3, [r7, #15]

	return ((uint32_t) Value);
 800fc5a:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc5c:	4618      	mov	r0, r3
 800fc5e:	3710      	adds	r7, #16
 800fc60:	46bd      	mov	sp, r7
 800fc62:	bd80      	pop	{r7, pc}

0800fc64 <cs43l22_Play>:
 * @brief Start the audio Codec play feature.
 * @note For this codec no Play options are required.
 * @param DeviceAddr: Device address on communication Bus.
 * @retval 0 if correct communication, else wrong communication
 */
uint32_t cs43l22_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size) {
 800fc64:	b580      	push	{r7, lr}
 800fc66:	b084      	sub	sp, #16
 800fc68:	af00      	add	r7, sp, #0
 800fc6a:	4603      	mov	r3, r0
 800fc6c:	6039      	str	r1, [r7, #0]
 800fc6e:	80fb      	strh	r3, [r7, #6]
 800fc70:	4613      	mov	r3, r2
 800fc72:	80bb      	strh	r3, [r7, #4]
	uint32_t counter = 0;
 800fc74:	2300      	movs	r3, #0
 800fc76:	60fb      	str	r3, [r7, #12]

	if (Is_cs43l22_Stop == 1) {
 800fc78:	4b16      	ldr	r3, [pc, #88]	; (800fcd4 <cs43l22_Play+0x70>)
 800fc7a:	781b      	ldrb	r3, [r3, #0]
 800fc7c:	2b01      	cmp	r3, #1
 800fc7e:	d123      	bne.n	800fcc8 <cs43l22_Play+0x64>
		/* Enable the digital soft ramp */
		counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x06);
 800fc80:	88fb      	ldrh	r3, [r7, #6]
 800fc82:	b2db      	uxtb	r3, r3
 800fc84:	2206      	movs	r2, #6
 800fc86:	210e      	movs	r1, #14
 800fc88:	4618      	mov	r0, r3
 800fc8a:	f000 fa4a 	bl	8010122 <CODEC_IO_Write>
 800fc8e:	4603      	mov	r3, r0
 800fc90:	461a      	mov	r2, r3
 800fc92:	68fb      	ldr	r3, [r7, #12]
 800fc94:	4413      	add	r3, r2
 800fc96:	60fb      	str	r3, [r7, #12]

		/* Enable Output device */
		counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 800fc98:	88fb      	ldrh	r3, [r7, #6]
 800fc9a:	2100      	movs	r1, #0
 800fc9c:	4618      	mov	r0, r3
 800fc9e:	f000 f905 	bl	800feac <cs43l22_SetMute>
 800fca2:	4602      	mov	r2, r0
 800fca4:	68fb      	ldr	r3, [r7, #12]
 800fca6:	4413      	add	r3, r2
 800fca8:	60fb      	str	r3, [r7, #12]

		/* Power on the Codec */
		counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E);
 800fcaa:	88fb      	ldrh	r3, [r7, #6]
 800fcac:	b2db      	uxtb	r3, r3
 800fcae:	229e      	movs	r2, #158	; 0x9e
 800fcb0:	2102      	movs	r1, #2
 800fcb2:	4618      	mov	r0, r3
 800fcb4:	f000 fa35 	bl	8010122 <CODEC_IO_Write>
 800fcb8:	4603      	mov	r3, r0
 800fcba:	461a      	mov	r2, r3
 800fcbc:	68fb      	ldr	r3, [r7, #12]
 800fcbe:	4413      	add	r3, r2
 800fcc0:	60fb      	str	r3, [r7, #12]
		Is_cs43l22_Stop = 0;
 800fcc2:	4b04      	ldr	r3, [pc, #16]	; (800fcd4 <cs43l22_Play+0x70>)
 800fcc4:	2200      	movs	r2, #0
 800fcc6:	701a      	strb	r2, [r3, #0]
	}

	/* Return communication control value */
	return counter;
 800fcc8:	68fb      	ldr	r3, [r7, #12]
}
 800fcca:	4618      	mov	r0, r3
 800fccc:	3710      	adds	r7, #16
 800fcce:	46bd      	mov	sp, r7
 800fcd0:	bd80      	pop	{r7, pc}
 800fcd2:	bf00      	nop
 800fcd4:	20000044 	.word	0x20000044

0800fcd8 <cs43l22_Pause>:
/**
 * @brief Pauses playing on the audio codec.
 * @param DeviceAddr: Device address on communication Bus.
 * @retval 0 if correct communication, else wrong communication
 */
uint32_t cs43l22_Pause(uint16_t DeviceAddr) {
 800fcd8:	b580      	push	{r7, lr}
 800fcda:	b084      	sub	sp, #16
 800fcdc:	af00      	add	r7, sp, #0
 800fcde:	4603      	mov	r3, r0
 800fce0:	80fb      	strh	r3, [r7, #6]
	uint32_t counter = 0;
 800fce2:	2300      	movs	r3, #0
 800fce4:	60fb      	str	r3, [r7, #12]

	/* Pause the audio file playing */
	/* Mute the output first */
	counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 800fce6:	88fb      	ldrh	r3, [r7, #6]
 800fce8:	2101      	movs	r1, #1
 800fcea:	4618      	mov	r0, r3
 800fcec:	f000 f8de 	bl	800feac <cs43l22_SetMute>
 800fcf0:	4602      	mov	r2, r0
 800fcf2:	68fb      	ldr	r3, [r7, #12]
 800fcf4:	4413      	add	r3, r2
 800fcf6:	60fb      	str	r3, [r7, #12]

	/* Put the Codec in Power save mode */
	counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);
 800fcf8:	88fb      	ldrh	r3, [r7, #6]
 800fcfa:	b2db      	uxtb	r3, r3
 800fcfc:	2201      	movs	r2, #1
 800fcfe:	2102      	movs	r1, #2
 800fd00:	4618      	mov	r0, r3
 800fd02:	f000 fa0e 	bl	8010122 <CODEC_IO_Write>
 800fd06:	4603      	mov	r3, r0
 800fd08:	461a      	mov	r2, r3
 800fd0a:	68fb      	ldr	r3, [r7, #12]
 800fd0c:	4413      	add	r3, r2
 800fd0e:	60fb      	str	r3, [r7, #12]

	return counter;
 800fd10:	68fb      	ldr	r3, [r7, #12]
}
 800fd12:	4618      	mov	r0, r3
 800fd14:	3710      	adds	r7, #16
 800fd16:	46bd      	mov	sp, r7
 800fd18:	bd80      	pop	{r7, pc}
	...

0800fd1c <cs43l22_Resume>:
/**
 * @brief Resumes playing on the audio codec.
 * @param DeviceAddr: Device address on communication Bus.
 * @retval 0 if correct communication, else wrong communication
 */
uint32_t cs43l22_Resume(uint16_t DeviceAddr) {
 800fd1c:	b580      	push	{r7, lr}
 800fd1e:	b084      	sub	sp, #16
 800fd20:	af00      	add	r7, sp, #0
 800fd22:	4603      	mov	r3, r0
 800fd24:	80fb      	strh	r3, [r7, #6]
	uint32_t counter = 0;
 800fd26:	2300      	movs	r3, #0
 800fd28:	60fb      	str	r3, [r7, #12]
	volatile uint32_t index = 0x00;
 800fd2a:	2300      	movs	r3, #0
 800fd2c:	60bb      	str	r3, [r7, #8]
	/* Resumes the audio file playing */
	/* Unmute the output first */
	counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 800fd2e:	88fb      	ldrh	r3, [r7, #6]
 800fd30:	2100      	movs	r1, #0
 800fd32:	4618      	mov	r0, r3
 800fd34:	f000 f8ba 	bl	800feac <cs43l22_SetMute>
 800fd38:	4602      	mov	r2, r0
 800fd3a:	68fb      	ldr	r3, [r7, #12]
 800fd3c:	4413      	add	r3, r2
 800fd3e:	60fb      	str	r3, [r7, #12]

	for (index = 0x00; index < 0xFF; index++)
 800fd40:	2300      	movs	r3, #0
 800fd42:	60bb      	str	r3, [r7, #8]
 800fd44:	e002      	b.n	800fd4c <cs43l22_Resume+0x30>
 800fd46:	68bb      	ldr	r3, [r7, #8]
 800fd48:	3301      	adds	r3, #1
 800fd4a:	60bb      	str	r3, [r7, #8]
 800fd4c:	68bb      	ldr	r3, [r7, #8]
 800fd4e:	2bfe      	cmp	r3, #254	; 0xfe
 800fd50:	d9f9      	bls.n	800fd46 <cs43l22_Resume+0x2a>
		;

	counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 800fd52:	88fb      	ldrh	r3, [r7, #6]
 800fd54:	b2d8      	uxtb	r0, r3
 800fd56:	4b0e      	ldr	r3, [pc, #56]	; (800fd90 <cs43l22_Resume+0x74>)
 800fd58:	781b      	ldrb	r3, [r3, #0]
 800fd5a:	b2db      	uxtb	r3, r3
 800fd5c:	461a      	mov	r2, r3
 800fd5e:	2104      	movs	r1, #4
 800fd60:	f000 f9df 	bl	8010122 <CODEC_IO_Write>
 800fd64:	4603      	mov	r3, r0
 800fd66:	461a      	mov	r2, r3
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	4413      	add	r3, r2
 800fd6c:	60fb      	str	r3, [r7, #12]

	/* Exit the Power save mode */
	counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E);
 800fd6e:	88fb      	ldrh	r3, [r7, #6]
 800fd70:	b2db      	uxtb	r3, r3
 800fd72:	229e      	movs	r2, #158	; 0x9e
 800fd74:	2102      	movs	r1, #2
 800fd76:	4618      	mov	r0, r3
 800fd78:	f000 f9d3 	bl	8010122 <CODEC_IO_Write>
 800fd7c:	4603      	mov	r3, r0
 800fd7e:	461a      	mov	r2, r3
 800fd80:	68fb      	ldr	r3, [r7, #12]
 800fd82:	4413      	add	r3, r2
 800fd84:	60fb      	str	r3, [r7, #12]

	return counter;
 800fd86:	68fb      	ldr	r3, [r7, #12]
}
 800fd88:	4618      	mov	r0, r3
 800fd8a:	3710      	adds	r7, #16
 800fd8c:	46bd      	mov	sp, r7
 800fd8e:	bd80      	pop	{r7, pc}
 800fd90:	20006536 	.word	0x20006536

0800fd94 <cs43l22_Stop>:
 *                           mode, the codec is set to default configuration
 *                           (user should re-Initialize the codec in order to
 *                            play again the audio stream).
 * @retval 0 if correct communication, else wrong communication
 */
uint32_t cs43l22_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode) {
 800fd94:	b580      	push	{r7, lr}
 800fd96:	b084      	sub	sp, #16
 800fd98:	af00      	add	r7, sp, #0
 800fd9a:	4603      	mov	r3, r0
 800fd9c:	6039      	str	r1, [r7, #0]
 800fd9e:	80fb      	strh	r3, [r7, #6]
	uint32_t counter = 0;
 800fda0:	2300      	movs	r3, #0
 800fda2:	60fb      	str	r3, [r7, #12]

	/* Mute the output first */
	counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 800fda4:	88fb      	ldrh	r3, [r7, #6]
 800fda6:	2101      	movs	r1, #1
 800fda8:	4618      	mov	r0, r3
 800fdaa:	f000 f87f 	bl	800feac <cs43l22_SetMute>
 800fdae:	4602      	mov	r2, r0
 800fdb0:	68fb      	ldr	r3, [r7, #12]
 800fdb2:	4413      	add	r3, r2
 800fdb4:	60fb      	str	r3, [r7, #12]

	/* Disable the digital soft ramp */
	counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 800fdb6:	88fb      	ldrh	r3, [r7, #6]
 800fdb8:	b2db      	uxtb	r3, r3
 800fdba:	2204      	movs	r2, #4
 800fdbc:	210e      	movs	r1, #14
 800fdbe:	4618      	mov	r0, r3
 800fdc0:	f000 f9af 	bl	8010122 <CODEC_IO_Write>
 800fdc4:	4603      	mov	r3, r0
 800fdc6:	461a      	mov	r2, r3
 800fdc8:	68fb      	ldr	r3, [r7, #12]
 800fdca:	4413      	add	r3, r2
 800fdcc:	60fb      	str	r3, [r7, #12]

	/* Power down the DAC and the speaker (PMDAC and PMSPK bits)*/
	counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9F);
 800fdce:	88fb      	ldrh	r3, [r7, #6]
 800fdd0:	b2db      	uxtb	r3, r3
 800fdd2:	229f      	movs	r2, #159	; 0x9f
 800fdd4:	2102      	movs	r1, #2
 800fdd6:	4618      	mov	r0, r3
 800fdd8:	f000 f9a3 	bl	8010122 <CODEC_IO_Write>
 800fddc:	4603      	mov	r3, r0
 800fdde:	461a      	mov	r2, r3
 800fde0:	68fb      	ldr	r3, [r7, #12]
 800fde2:	4413      	add	r3, r2
 800fde4:	60fb      	str	r3, [r7, #12]

	Is_cs43l22_Stop = 1;
 800fde6:	4b04      	ldr	r3, [pc, #16]	; (800fdf8 <cs43l22_Stop+0x64>)
 800fde8:	2201      	movs	r2, #1
 800fdea:	701a      	strb	r2, [r3, #0]
	return counter;
 800fdec:	68fb      	ldr	r3, [r7, #12]
}
 800fdee:	4618      	mov	r0, r3
 800fdf0:	3710      	adds	r7, #16
 800fdf2:	46bd      	mov	sp, r7
 800fdf4:	bd80      	pop	{r7, pc}
 800fdf6:	bf00      	nop
 800fdf8:	20000044 	.word	0x20000044

0800fdfc <cs43l22_SetVolume>:
 * @param Volume: a byte value from 0 to 255 (refer to codec registers
 *                description for more details).
 *
 * @retval 0 if correct communication, else wrong communication
 */
uint32_t cs43l22_SetVolume(uint16_t DeviceAddr, uint8_t Volume) {
 800fdfc:	b580      	push	{r7, lr}
 800fdfe:	b084      	sub	sp, #16
 800fe00:	af00      	add	r7, sp, #0
 800fe02:	4603      	mov	r3, r0
 800fe04:	460a      	mov	r2, r1
 800fe06:	80fb      	strh	r3, [r7, #6]
 800fe08:	4613      	mov	r3, r2
 800fe0a:	717b      	strb	r3, [r7, #5]
	uint32_t counter = 0;
 800fe0c:	2300      	movs	r3, #0
 800fe0e:	60fb      	str	r3, [r7, #12]
//		/* Set the Master volume */
//		counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol + 0x19);
//		counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol + 0x19);
//	}

	counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, VOLUME_CONVERT2(Volume));
 800fe10:	88fb      	ldrh	r3, [r7, #6]
 800fe12:	b2d8      	uxtb	r0, r3
 800fe14:	797b      	ldrb	r3, [r7, #5]
 800fe16:	2b64      	cmp	r3, #100	; 0x64
 800fe18:	d80c      	bhi.n	800fe34 <cs43l22_SetVolume+0x38>
 800fe1a:	797a      	ldrb	r2, [r7, #5]
 800fe1c:	4613      	mov	r3, r2
 800fe1e:	005b      	lsls	r3, r3, #1
 800fe20:	4413      	add	r3, r2
 800fe22:	00db      	lsls	r3, r3, #3
 800fe24:	4a19      	ldr	r2, [pc, #100]	; (800fe8c <cs43l22_SetVolume+0x90>)
 800fe26:	fb82 1203 	smull	r1, r2, r2, r3
 800fe2a:	1152      	asrs	r2, r2, #5
 800fe2c:	17db      	asrs	r3, r3, #31
 800fe2e:	1ad3      	subs	r3, r2, r3
 800fe30:	b2db      	uxtb	r3, r3
 800fe32:	e000      	b.n	800fe36 <cs43l22_SetVolume+0x3a>
 800fe34:	2318      	movs	r3, #24
 800fe36:	461a      	mov	r2, r3
 800fe38:	2120      	movs	r1, #32
 800fe3a:	f000 f972 	bl	8010122 <CODEC_IO_Write>
 800fe3e:	4603      	mov	r3, r0
 800fe40:	461a      	mov	r2, r3
 800fe42:	68fb      	ldr	r3, [r7, #12]
 800fe44:	4413      	add	r3, r2
 800fe46:	60fb      	str	r3, [r7, #12]
	counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, VOLUME_CONVERT2(Volume));
 800fe48:	88fb      	ldrh	r3, [r7, #6]
 800fe4a:	b2d8      	uxtb	r0, r3
 800fe4c:	797b      	ldrb	r3, [r7, #5]
 800fe4e:	2b64      	cmp	r3, #100	; 0x64
 800fe50:	d80c      	bhi.n	800fe6c <cs43l22_SetVolume+0x70>
 800fe52:	797a      	ldrb	r2, [r7, #5]
 800fe54:	4613      	mov	r3, r2
 800fe56:	005b      	lsls	r3, r3, #1
 800fe58:	4413      	add	r3, r2
 800fe5a:	00db      	lsls	r3, r3, #3
 800fe5c:	4a0b      	ldr	r2, [pc, #44]	; (800fe8c <cs43l22_SetVolume+0x90>)
 800fe5e:	fb82 1203 	smull	r1, r2, r2, r3
 800fe62:	1152      	asrs	r2, r2, #5
 800fe64:	17db      	asrs	r3, r3, #31
 800fe66:	1ad3      	subs	r3, r2, r3
 800fe68:	b2db      	uxtb	r3, r3
 800fe6a:	e000      	b.n	800fe6e <cs43l22_SetVolume+0x72>
 800fe6c:	2318      	movs	r3, #24
 800fe6e:	461a      	mov	r2, r3
 800fe70:	2121      	movs	r1, #33	; 0x21
 800fe72:	f000 f956 	bl	8010122 <CODEC_IO_Write>
 800fe76:	4603      	mov	r3, r0
 800fe78:	461a      	mov	r2, r3
 800fe7a:	68fb      	ldr	r3, [r7, #12]
 800fe7c:	4413      	add	r3, r2
 800fe7e:	60fb      	str	r3, [r7, #12]

	return counter;
 800fe80:	68fb      	ldr	r3, [r7, #12]
}
 800fe82:	4618      	mov	r0, r3
 800fe84:	3710      	adds	r7, #16
 800fe86:	46bd      	mov	sp, r7
 800fe88:	bd80      	pop	{r7, pc}
 800fe8a:	bf00      	nop
 800fe8c:	51eb851f 	.word	0x51eb851f

0800fe90 <cs43l22_SetFrequency>:
 * @brief Sets new frequency.
 * @param DeviceAddr: Device address on communication Bus.
 * @param AudioFreq: Audio frequency used to play the audio stream.
 * @retval 0 if correct communication, else wrong communication
 */
uint32_t cs43l22_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq) {
 800fe90:	b480      	push	{r7}
 800fe92:	b083      	sub	sp, #12
 800fe94:	af00      	add	r7, sp, #0
 800fe96:	4603      	mov	r3, r0
 800fe98:	6039      	str	r1, [r7, #0]
 800fe9a:	80fb      	strh	r3, [r7, #6]
	return 0;
 800fe9c:	2300      	movs	r3, #0
}
 800fe9e:	4618      	mov	r0, r3
 800fea0:	370c      	adds	r7, #12
 800fea2:	46bd      	mov	sp, r7
 800fea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fea8:	4770      	bx	lr
	...

0800feac <cs43l22_SetMute>:
 * @param DeviceAddr: Device address on communication Bus.
 * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
 *             mute mode.
 * @retval 0 if correct communication, else wrong communication
 */
uint32_t cs43l22_SetMute(uint16_t DeviceAddr, uint32_t Cmd) {
 800feac:	b580      	push	{r7, lr}
 800feae:	b084      	sub	sp, #16
 800feb0:	af00      	add	r7, sp, #0
 800feb2:	4603      	mov	r3, r0
 800feb4:	6039      	str	r1, [r7, #0]
 800feb6:	80fb      	strh	r3, [r7, #6]
	uint32_t counter = 0;
 800feb8:	2300      	movs	r3, #0
 800feba:	60fb      	str	r3, [r7, #12]

	/* Set the Mute mode */
	if (Cmd == AUDIO_MUTE_ON) {
 800febc:	683b      	ldr	r3, [r7, #0]
 800febe:	2b01      	cmp	r3, #1
 800fec0:	d124      	bne.n	800ff0c <cs43l22_SetMute+0x60>
		counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFF);
 800fec2:	88fb      	ldrh	r3, [r7, #6]
 800fec4:	b2db      	uxtb	r3, r3
 800fec6:	22ff      	movs	r2, #255	; 0xff
 800fec8:	2104      	movs	r1, #4
 800feca:	4618      	mov	r0, r3
 800fecc:	f000 f929 	bl	8010122 <CODEC_IO_Write>
 800fed0:	4603      	mov	r3, r0
 800fed2:	461a      	mov	r2, r3
 800fed4:	68fb      	ldr	r3, [r7, #12]
 800fed6:	4413      	add	r3, r2
 800fed8:	60fb      	str	r3, [r7, #12]
		counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x01);
 800feda:	88fb      	ldrh	r3, [r7, #6]
 800fedc:	b2db      	uxtb	r3, r3
 800fede:	2201      	movs	r2, #1
 800fee0:	2122      	movs	r1, #34	; 0x22
 800fee2:	4618      	mov	r0, r3
 800fee4:	f000 f91d 	bl	8010122 <CODEC_IO_Write>
 800fee8:	4603      	mov	r3, r0
 800feea:	461a      	mov	r2, r3
 800feec:	68fb      	ldr	r3, [r7, #12]
 800feee:	4413      	add	r3, r2
 800fef0:	60fb      	str	r3, [r7, #12]
		counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x01);
 800fef2:	88fb      	ldrh	r3, [r7, #6]
 800fef4:	b2db      	uxtb	r3, r3
 800fef6:	2201      	movs	r2, #1
 800fef8:	2123      	movs	r1, #35	; 0x23
 800fefa:	4618      	mov	r0, r3
 800fefc:	f000 f911 	bl	8010122 <CODEC_IO_Write>
 800ff00:	4603      	mov	r3, r0
 800ff02:	461a      	mov	r2, r3
 800ff04:	68fb      	ldr	r3, [r7, #12]
 800ff06:	4413      	add	r3, r2
 800ff08:	60fb      	str	r3, [r7, #12]
 800ff0a:	e025      	b.n	800ff58 <cs43l22_SetMute+0xac>
	} else /* AUDIO_MUTE_OFF Disable the Mute */
	{
		counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x00);
 800ff0c:	88fb      	ldrh	r3, [r7, #6]
 800ff0e:	b2db      	uxtb	r3, r3
 800ff10:	2200      	movs	r2, #0
 800ff12:	2122      	movs	r1, #34	; 0x22
 800ff14:	4618      	mov	r0, r3
 800ff16:	f000 f904 	bl	8010122 <CODEC_IO_Write>
 800ff1a:	4603      	mov	r3, r0
 800ff1c:	461a      	mov	r2, r3
 800ff1e:	68fb      	ldr	r3, [r7, #12]
 800ff20:	4413      	add	r3, r2
 800ff22:	60fb      	str	r3, [r7, #12]
		counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x00);
 800ff24:	88fb      	ldrh	r3, [r7, #6]
 800ff26:	b2db      	uxtb	r3, r3
 800ff28:	2200      	movs	r2, #0
 800ff2a:	2123      	movs	r1, #35	; 0x23
 800ff2c:	4618      	mov	r0, r3
 800ff2e:	f000 f8f8 	bl	8010122 <CODEC_IO_Write>
 800ff32:	4603      	mov	r3, r0
 800ff34:	461a      	mov	r2, r3
 800ff36:	68fb      	ldr	r3, [r7, #12]
 800ff38:	4413      	add	r3, r2
 800ff3a:	60fb      	str	r3, [r7, #12]
		counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 800ff3c:	88fb      	ldrh	r3, [r7, #6]
 800ff3e:	b2d8      	uxtb	r0, r3
 800ff40:	4b08      	ldr	r3, [pc, #32]	; (800ff64 <cs43l22_SetMute+0xb8>)
 800ff42:	781b      	ldrb	r3, [r3, #0]
 800ff44:	b2db      	uxtb	r3, r3
 800ff46:	461a      	mov	r2, r3
 800ff48:	2104      	movs	r1, #4
 800ff4a:	f000 f8ea 	bl	8010122 <CODEC_IO_Write>
 800ff4e:	4603      	mov	r3, r0
 800ff50:	461a      	mov	r2, r3
 800ff52:	68fb      	ldr	r3, [r7, #12]
 800ff54:	4413      	add	r3, r2
 800ff56:	60fb      	str	r3, [r7, #12]
	}
	return counter;
 800ff58:	68fb      	ldr	r3, [r7, #12]
}
 800ff5a:	4618      	mov	r0, r3
 800ff5c:	3710      	adds	r7, #16
 800ff5e:	46bd      	mov	sp, r7
 800ff60:	bd80      	pop	{r7, pc}
 800ff62:	bf00      	nop
 800ff64:	20006536 	.word	0x20006536

0800ff68 <cs43l22_SetOutputMode>:
 * @param DeviceAddr: Device address on communication Bus.
 * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
 *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO
 * @retval 0 if correct communication, else wrong communication
 */
uint32_t cs43l22_SetOutputMode(uint16_t DeviceAddr, uint8_t Output) {
 800ff68:	b580      	push	{r7, lr}
 800ff6a:	b084      	sub	sp, #16
 800ff6c:	af00      	add	r7, sp, #0
 800ff6e:	4603      	mov	r3, r0
 800ff70:	460a      	mov	r2, r1
 800ff72:	80fb      	strh	r3, [r7, #6]
 800ff74:	4613      	mov	r3, r2
 800ff76:	717b      	strb	r3, [r7, #5]
	uint32_t counter = 0;
 800ff78:	2300      	movs	r3, #0
 800ff7a:	60fb      	str	r3, [r7, #12]

	switch (Output) {
 800ff7c:	797b      	ldrb	r3, [r7, #5]
 800ff7e:	3b01      	subs	r3, #1
 800ff80:	2b03      	cmp	r3, #3
 800ff82:	d84b      	bhi.n	801001c <cs43l22_SetOutputMode+0xb4>
 800ff84:	a201      	add	r2, pc, #4	; (adr r2, 800ff8c <cs43l22_SetOutputMode+0x24>)
 800ff86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff8a:	bf00      	nop
 800ff8c:	0800ff9d 	.word	0x0800ff9d
 800ff90:	0800ffbd 	.word	0x0800ffbd
 800ff94:	0800ffdd 	.word	0x0800ffdd
 800ff98:	0800fffd 	.word	0x0800fffd
		case OUTPUT_DEVICE_SPEAKER:
			counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFA); /* SPK always ON & HP always OFF */
 800ff9c:	88fb      	ldrh	r3, [r7, #6]
 800ff9e:	b2db      	uxtb	r3, r3
 800ffa0:	22fa      	movs	r2, #250	; 0xfa
 800ffa2:	2104      	movs	r1, #4
 800ffa4:	4618      	mov	r0, r3
 800ffa6:	f000 f8bc 	bl	8010122 <CODEC_IO_Write>
 800ffaa:	4603      	mov	r3, r0
 800ffac:	461a      	mov	r2, r3
 800ffae:	68fb      	ldr	r3, [r7, #12]
 800ffb0:	4413      	add	r3, r2
 800ffb2:	60fb      	str	r3, [r7, #12]
			OutputDev = 0xFA;
 800ffb4:	4b24      	ldr	r3, [pc, #144]	; (8010048 <cs43l22_SetOutputMode+0xe0>)
 800ffb6:	22fa      	movs	r2, #250	; 0xfa
 800ffb8:	701a      	strb	r2, [r3, #0]
			break;
 800ffba:	e03f      	b.n	801003c <cs43l22_SetOutputMode+0xd4>

		case OUTPUT_DEVICE_HEADPHONE:
			counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xAF); /* SPK always OFF & HP always ON */
 800ffbc:	88fb      	ldrh	r3, [r7, #6]
 800ffbe:	b2db      	uxtb	r3, r3
 800ffc0:	22af      	movs	r2, #175	; 0xaf
 800ffc2:	2104      	movs	r1, #4
 800ffc4:	4618      	mov	r0, r3
 800ffc6:	f000 f8ac 	bl	8010122 <CODEC_IO_Write>
 800ffca:	4603      	mov	r3, r0
 800ffcc:	461a      	mov	r2, r3
 800ffce:	68fb      	ldr	r3, [r7, #12]
 800ffd0:	4413      	add	r3, r2
 800ffd2:	60fb      	str	r3, [r7, #12]
			OutputDev = 0xAF;
 800ffd4:	4b1c      	ldr	r3, [pc, #112]	; (8010048 <cs43l22_SetOutputMode+0xe0>)
 800ffd6:	22af      	movs	r2, #175	; 0xaf
 800ffd8:	701a      	strb	r2, [r3, #0]
			break;
 800ffda:	e02f      	b.n	801003c <cs43l22_SetOutputMode+0xd4>

		case OUTPUT_DEVICE_BOTH:
			counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xAA); /* SPK always ON & HP always ON */
 800ffdc:	88fb      	ldrh	r3, [r7, #6]
 800ffde:	b2db      	uxtb	r3, r3
 800ffe0:	22aa      	movs	r2, #170	; 0xaa
 800ffe2:	2104      	movs	r1, #4
 800ffe4:	4618      	mov	r0, r3
 800ffe6:	f000 f89c 	bl	8010122 <CODEC_IO_Write>
 800ffea:	4603      	mov	r3, r0
 800ffec:	461a      	mov	r2, r3
 800ffee:	68fb      	ldr	r3, [r7, #12]
 800fff0:	4413      	add	r3, r2
 800fff2:	60fb      	str	r3, [r7, #12]
			OutputDev = 0xAA;
 800fff4:	4b14      	ldr	r3, [pc, #80]	; (8010048 <cs43l22_SetOutputMode+0xe0>)
 800fff6:	22aa      	movs	r2, #170	; 0xaa
 800fff8:	701a      	strb	r2, [r3, #0]
			break;
 800fffa:	e01f      	b.n	801003c <cs43l22_SetOutputMode+0xd4>

		case OUTPUT_DEVICE_AUTO:
			counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0x05); /* Detect the HP or the SPK automatically */
 800fffc:	88fb      	ldrh	r3, [r7, #6]
 800fffe:	b2db      	uxtb	r3, r3
 8010000:	2205      	movs	r2, #5
 8010002:	2104      	movs	r1, #4
 8010004:	4618      	mov	r0, r3
 8010006:	f000 f88c 	bl	8010122 <CODEC_IO_Write>
 801000a:	4603      	mov	r3, r0
 801000c:	461a      	mov	r2, r3
 801000e:	68fb      	ldr	r3, [r7, #12]
 8010010:	4413      	add	r3, r2
 8010012:	60fb      	str	r3, [r7, #12]
			OutputDev = 0x05;
 8010014:	4b0c      	ldr	r3, [pc, #48]	; (8010048 <cs43l22_SetOutputMode+0xe0>)
 8010016:	2205      	movs	r2, #5
 8010018:	701a      	strb	r2, [r3, #0]
			break;
 801001a:	e00f      	b.n	801003c <cs43l22_SetOutputMode+0xd4>

		default:
			counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0x05); /* Detect the HP or the SPK automatically */
 801001c:	88fb      	ldrh	r3, [r7, #6]
 801001e:	b2db      	uxtb	r3, r3
 8010020:	2205      	movs	r2, #5
 8010022:	2104      	movs	r1, #4
 8010024:	4618      	mov	r0, r3
 8010026:	f000 f87c 	bl	8010122 <CODEC_IO_Write>
 801002a:	4603      	mov	r3, r0
 801002c:	461a      	mov	r2, r3
 801002e:	68fb      	ldr	r3, [r7, #12]
 8010030:	4413      	add	r3, r2
 8010032:	60fb      	str	r3, [r7, #12]
			OutputDev = 0x05;
 8010034:	4b04      	ldr	r3, [pc, #16]	; (8010048 <cs43l22_SetOutputMode+0xe0>)
 8010036:	2205      	movs	r2, #5
 8010038:	701a      	strb	r2, [r3, #0]
			break;
 801003a:	bf00      	nop
	}
	return counter;
 801003c:	68fb      	ldr	r3, [r7, #12]
}
 801003e:	4618      	mov	r0, r3
 8010040:	3710      	adds	r7, #16
 8010042:	46bd      	mov	sp, r7
 8010044:	bd80      	pop	{r7, pc}
 8010046:	bf00      	nop
 8010048:	20006536 	.word	0x20006536

0801004c <cs43l22_Reset>:
/**
 * @brief Resets cs43l22 registers.
 * @param DeviceAddr: Device address on communication Bus.
 * @retval 0 if correct communication, else wrong communication
 */
uint32_t cs43l22_Reset(uint16_t DeviceAddr) {
 801004c:	b480      	push	{r7}
 801004e:	b083      	sub	sp, #12
 8010050:	af00      	add	r7, sp, #0
 8010052:	4603      	mov	r3, r0
 8010054:	80fb      	strh	r3, [r7, #6]
	return 0;
 8010056:	2300      	movs	r3, #0
}
 8010058:	4618      	mov	r0, r3
 801005a:	370c      	adds	r7, #12
 801005c:	46bd      	mov	sp, r7
 801005e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010062:	4770      	bx	lr

08010064 <cs43l22_SetBeep>:

uint32_t cs43l22_SetBeep(uint16_t DeviceAddr, uint8_t Frequency, uint8_t OnTime, uint8_t OffTime) {
 8010064:	b590      	push	{r4, r7, lr}
 8010066:	b085      	sub	sp, #20
 8010068:	af00      	add	r7, sp, #0
 801006a:	4604      	mov	r4, r0
 801006c:	4608      	mov	r0, r1
 801006e:	4611      	mov	r1, r2
 8010070:	461a      	mov	r2, r3
 8010072:	4623      	mov	r3, r4
 8010074:	80fb      	strh	r3, [r7, #6]
 8010076:	4603      	mov	r3, r0
 8010078:	717b      	strb	r3, [r7, #5]
 801007a:	460b      	mov	r3, r1
 801007c:	713b      	strb	r3, [r7, #4]
 801007e:	4613      	mov	r3, r2
 8010080:	70fb      	strb	r3, [r7, #3]
	uint32_t counter = 0;
 8010082:	2300      	movs	r3, #0
 8010084:	60fb      	str	r3, [r7, #12]

	/* Set frequency of beep and on time */
	counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_BEEP_FREQ_ON_TIME, (Frequency << 4) | OnTime);
 8010086:	88fb      	ldrh	r3, [r7, #6]
 8010088:	b2d8      	uxtb	r0, r3
 801008a:	797b      	ldrb	r3, [r7, #5]
 801008c:	011b      	lsls	r3, r3, #4
 801008e:	b25a      	sxtb	r2, r3
 8010090:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8010094:	4313      	orrs	r3, r2
 8010096:	b25b      	sxtb	r3, r3
 8010098:	b2db      	uxtb	r3, r3
 801009a:	461a      	mov	r2, r3
 801009c:	211c      	movs	r1, #28
 801009e:	f000 f840 	bl	8010122 <CODEC_IO_Write>
 80100a2:	4603      	mov	r3, r0
 80100a4:	461a      	mov	r2, r3
 80100a6:	68fb      	ldr	r3, [r7, #12]
 80100a8:	4413      	add	r3, r2
 80100aa:	60fb      	str	r3, [r7, #12]
	/* Set volume of beep (max), and off time */
	counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_BEEP_VOL_OFF_TIME, (OffTime << 5) | 0x06);
 80100ac:	88fb      	ldrh	r3, [r7, #6]
 80100ae:	b2d8      	uxtb	r0, r3
 80100b0:	78fb      	ldrb	r3, [r7, #3]
 80100b2:	015b      	lsls	r3, r3, #5
 80100b4:	b25b      	sxtb	r3, r3
 80100b6:	f043 0306 	orr.w	r3, r3, #6
 80100ba:	b25b      	sxtb	r3, r3
 80100bc:	b2db      	uxtb	r3, r3
 80100be:	461a      	mov	r2, r3
 80100c0:	211d      	movs	r1, #29
 80100c2:	f000 f82e 	bl	8010122 <CODEC_IO_Write>
 80100c6:	4603      	mov	r3, r0
 80100c8:	461a      	mov	r2, r3
 80100ca:	68fb      	ldr	r3, [r7, #12]
 80100cc:	4413      	add	r3, r2
 80100ce:	60fb      	str	r3, [r7, #12]

	return counter;
 80100d0:	68fb      	ldr	r3, [r7, #12]
}
 80100d2:	4618      	mov	r0, r3
 80100d4:	3714      	adds	r7, #20
 80100d6:	46bd      	mov	sp, r7
 80100d8:	bd90      	pop	{r4, r7, pc}

080100da <cs43l22_Beep>:

uint32_t cs43l22_Beep(uint16_t DeviceAddr, uint8_t Mode, uint8_t Mix) {
 80100da:	b580      	push	{r7, lr}
 80100dc:	b084      	sub	sp, #16
 80100de:	af00      	add	r7, sp, #0
 80100e0:	4603      	mov	r3, r0
 80100e2:	80fb      	strh	r3, [r7, #6]
 80100e4:	460b      	mov	r3, r1
 80100e6:	717b      	strb	r3, [r7, #5]
 80100e8:	4613      	mov	r3, r2
 80100ea:	713b      	strb	r3, [r7, #4]
	uint32_t counter = 0;
 80100ec:	2300      	movs	r3, #0
 80100ee:	60fb      	str	r3, [r7, #12]

	/* Set mode beep play and mix with serial sound*/
	counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_BEEP_TONE_CFG, (Mode << 6) | (Mix << 5));
 80100f0:	88fb      	ldrh	r3, [r7, #6]
 80100f2:	b2d8      	uxtb	r0, r3
 80100f4:	797b      	ldrb	r3, [r7, #5]
 80100f6:	019b      	lsls	r3, r3, #6
 80100f8:	b25a      	sxtb	r2, r3
 80100fa:	793b      	ldrb	r3, [r7, #4]
 80100fc:	015b      	lsls	r3, r3, #5
 80100fe:	b25b      	sxtb	r3, r3
 8010100:	4313      	orrs	r3, r2
 8010102:	b25b      	sxtb	r3, r3
 8010104:	b2db      	uxtb	r3, r3
 8010106:	461a      	mov	r2, r3
 8010108:	211e      	movs	r1, #30
 801010a:	f000 f80a 	bl	8010122 <CODEC_IO_Write>
 801010e:	4603      	mov	r3, r0
 8010110:	461a      	mov	r2, r3
 8010112:	68fb      	ldr	r3, [r7, #12]
 8010114:	4413      	add	r3, r2
 8010116:	60fb      	str	r3, [r7, #12]

	return counter;
 8010118:	68fb      	ldr	r3, [r7, #12]
}
 801011a:	4618      	mov	r0, r3
 801011c:	3710      	adds	r7, #16
 801011e:	46bd      	mov	sp, r7
 8010120:	bd80      	pop	{r7, pc}

08010122 <CODEC_IO_Write>:
 * @param  Addr: I2C address
 * @param  Reg: Reg address
 * @param  Value: Data to be written
 * @retval None
 */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value) {
 8010122:	b580      	push	{r7, lr}
 8010124:	b084      	sub	sp, #16
 8010126:	af00      	add	r7, sp, #0
 8010128:	4603      	mov	r3, r0
 801012a:	71fb      	strb	r3, [r7, #7]
 801012c:	460b      	mov	r3, r1
 801012e:	71bb      	strb	r3, [r7, #6]
 8010130:	4613      	mov	r3, r2
 8010132:	717b      	strb	r3, [r7, #5]
	uint32_t result = 0;
 8010134:	2300      	movs	r3, #0
 8010136:	60fb      	str	r3, [r7, #12]

	AUDIO_IO_Write(Addr, Reg, Value);
 8010138:	797a      	ldrb	r2, [r7, #5]
 801013a:	79b9      	ldrb	r1, [r7, #6]
 801013c:	79fb      	ldrb	r3, [r7, #7]
 801013e:	4618      	mov	r0, r3
 8010140:	f001 f925 	bl	801138e <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
	/* Verify that the data has been correctly written */
	result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */

	return result;
 8010144:	68fb      	ldr	r3, [r7, #12]
 8010146:	b2db      	uxtb	r3, r3
}
 8010148:	4618      	mov	r0, r3
 801014a:	3710      	adds	r7, #16
 801014c:	46bd      	mov	sp, r7
 801014e:	bd80      	pop	{r7, pc}

08010150 <vApplicationStackOverflowHook>:
}
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8010150:	b480      	push	{r7}
 8010152:	b083      	sub	sp, #12
 8010154:	af00      	add	r7, sp, #0
 8010156:	6078      	str	r0, [r7, #4]
 8010158:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 801015a:	bf00      	nop
 801015c:	370c      	adds	r7, #12
 801015e:	46bd      	mov	sp, r7
 8010160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010164:	4770      	bx	lr

08010166 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8010166:	b480      	push	{r7}
 8010168:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 801016a:	bf00      	nop
 801016c:	46bd      	mov	sp, r7
 801016e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010172:	4770      	bx	lr

08010174 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8010174:	b480      	push	{r7}
 8010176:	b085      	sub	sp, #20
 8010178:	af00      	add	r7, sp, #0
 801017a:	60f8      	str	r0, [r7, #12]
 801017c:	60b9      	str	r1, [r7, #8]
 801017e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8010180:	68fb      	ldr	r3, [r7, #12]
 8010182:	4a07      	ldr	r2, [pc, #28]	; (80101a0 <vApplicationGetIdleTaskMemory+0x2c>)
 8010184:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8010186:	68bb      	ldr	r3, [r7, #8]
 8010188:	4a06      	ldr	r2, [pc, #24]	; (80101a4 <vApplicationGetIdleTaskMemory+0x30>)
 801018a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	2280      	movs	r2, #128	; 0x80
 8010190:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8010192:	bf00      	nop
 8010194:	3714      	adds	r7, #20
 8010196:	46bd      	mov	sp, r7
 8010198:	f85d 7b04 	ldr.w	r7, [sp], #4
 801019c:	4770      	bx	lr
 801019e:	bf00      	nop
 80101a0:	20006538 	.word	0x20006538
 80101a4:	2000658c 	.word	0x2000658c

080101a8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80101a8:	b5b0      	push	{r4, r5, r7, lr}
 80101aa:	b0c8      	sub	sp, #288	; 0x120
 80101ac:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80101ae:	f7f0 fefb 	bl	8000fa8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80101b2:	f000 f935 	bl	8010420 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80101b6:	f000 fb2d 	bl	8010814 <MX_GPIO_Init>
	MX_DMA_Init();
 80101ba:	f000 faf3 	bl	80107a4 <MX_DMA_Init>
//	MX_CAN1_Init();
	MX_I2C3_Init();
 80101be:	f000 f9b5 	bl	801052c <MX_I2C3_Init>
	MX_USART3_UART_Init();
 80101c2:	f000 fac5 	bl	8010750 <MX_USART3_UART_Init>
	MX_USART2_UART_Init();
 80101c6:	f000 fa99 	bl	80106fc <MX_USART2_UART_Init>
	MX_UART4_Init();
 80101ca:	f000 fa6d 	bl	80106a8 <MX_UART4_Init>
	MX_SPI1_Init();
 80101ce:	f000 fa35 	bl	801063c <MX_SPI1_Init>
	MX_RTC_Init();
 80101d2:	f000 f9d9 	bl	8010588 <MX_RTC_Init>
	/* USER CODE BEGIN 2 */
	EE_Init();
 80101d6:	f7fb fd4f 	bl	800bc78 <EE_Init>
	/* USER CODE END 2 */

	/* Create the mutex(es) */
	/* definition and creation of SwvMutex */
	osMutexDef(SwvMutex);
 80101da:	2300      	movs	r3, #0
 80101dc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80101e0:	2300      	movs	r3, #0
 80101e2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	SwvMutexHandle = osMutexCreate(osMutex(SwvMutex));
 80101e6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80101ea:	4618      	mov	r0, r3
 80101ec:	f7f7 f9e1 	bl	80075b2 <osMutexCreate>
 80101f0:	4602      	mov	r2, r0
 80101f2:	4b74      	ldr	r3, [pc, #464]	; (80103c4 <main+0x21c>)
 80101f4:	601a      	str	r2, [r3, #0]

	/* definition and creation of AudioBeepMutex */
	osMutexDef(AudioBeepMutex);
 80101f6:	2300      	movs	r3, #0
 80101f8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80101fc:	2300      	movs	r3, #0
 80101fe:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	AudioBeepMutexHandle = osMutexCreate(osMutex(AudioBeepMutex));
 8010202:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010206:	4618      	mov	r0, r3
 8010208:	f7f7 f9d3 	bl	80075b2 <osMutexCreate>
 801020c:	4602      	mov	r2, r0
 801020e:	4b6e      	ldr	r3, [pc, #440]	; (80103c8 <main+0x220>)
 8010210:	601a      	str	r2, [r3, #0]

	/* Create the recursive mutex(es) */
	/* definition and creation of SimcomRecMutex */
	osMutexDef(SimcomRecMutex);
 8010212:	2300      	movs	r3, #0
 8010214:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8010218:	2300      	movs	r3, #0
 801021a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	SimcomRecMutexHandle = osRecursiveMutexCreate(osMutex(SimcomRecMutex));
 801021e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010222:	4618      	mov	r0, r3
 8010224:	f7f7 fca6 	bl	8007b74 <osRecursiveMutexCreate>
 8010228:	4602      	mov	r2, r0
 801022a:	4b68      	ldr	r3, [pc, #416]	; (80103cc <main+0x224>)
 801022c:	601a      	str	r2, [r3, #0]

	/* definition and creation of FingerRecMutex */
	osMutexDef(FingerRecMutex);
 801022e:	2300      	movs	r3, #0
 8010230:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8010234:	2300      	movs	r3, #0
 8010236:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	FingerRecMutexHandle = osRecursiveMutexCreate(osMutex(FingerRecMutex));
 801023a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 801023e:	4618      	mov	r0, r3
 8010240:	f7f7 fc98 	bl	8007b74 <osRecursiveMutexCreate>
 8010244:	4602      	mov	r2, r0
 8010246:	4b62      	ldr	r3, [pc, #392]	; (80103d0 <main+0x228>)
 8010248:	601a      	str	r2, [r3, #0]
	/* start timers, add new ones, ... */
	/* USER CODE END RTOS_TIMERS */

	/* Create the queue(s) */
	/* definition and creation of AudioVolQueue */
	osMessageQDef(AudioVolQueue, 1, uint8_t);
 801024a:	4b62      	ldr	r3, [pc, #392]	; (80103d4 <main+0x22c>)
 801024c:	f107 04f0 	add.w	r4, r7, #240	; 0xf0
 8010250:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010252:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	AudioVolQueueHandle = osMessageCreate(osMessageQ(AudioVolQueue), NULL);
 8010256:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801025a:	2100      	movs	r1, #0
 801025c:	4618      	mov	r0, r3
 801025e:	f7f7 faa2 	bl	80077a6 <osMessageCreate>
 8010262:	4602      	mov	r2, r0
 8010264:	4b5c      	ldr	r3, [pc, #368]	; (80103d8 <main+0x230>)
 8010266:	601a      	str	r2, [r3, #0]

	/* USER CODE BEGIN RTOS_QUEUES */
	/* add queues, ... */
	osMailQDef(GpsMail, 1, gps_t);
 8010268:	2301      	movs	r3, #1
 801026a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 801026e:	2374      	movs	r3, #116	; 0x74
 8010270:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8010274:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8010278:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
	GpsMailHandle = osMailCreate(osMailQ(GpsMail), NULL);
 801027c:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8010280:	2100      	movs	r1, #0
 8010282:	4618      	mov	r0, r3
 8010284:	f7f7 fb6c 	bl	8007960 <osMailCreate>
 8010288:	4602      	mov	r2, r0
 801028a:	4b54      	ldr	r3, [pc, #336]	; (80103dc <main+0x234>)
 801028c:	601a      	str	r2, [r3, #0]
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of IotTask */
	osThreadDef(IotTask, StartIotTask, osPriorityNormal, 0, 512);
 801028e:	4b54      	ldr	r3, [pc, #336]	; (80103e0 <main+0x238>)
 8010290:	f107 04c4 	add.w	r4, r7, #196	; 0xc4
 8010294:	461d      	mov	r5, r3
 8010296:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010298:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801029a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801029e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	IotTaskHandle = osThreadCreate(osThread(IotTask), NULL);
 80102a2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80102a6:	2100      	movs	r1, #0
 80102a8:	4618      	mov	r0, r3
 80102aa:	f7f7 f922 	bl	80074f2 <osThreadCreate>
 80102ae:	4602      	mov	r2, r0
 80102b0:	4b4c      	ldr	r3, [pc, #304]	; (80103e4 <main+0x23c>)
 80102b2:	601a      	str	r2, [r3, #0]

	/* definition and creation of CanTask */
	osThreadDef(CanTask, StartCanTask, osPriorityNormal, 0, 128);
 80102b4:	4b4c      	ldr	r3, [pc, #304]	; (80103e8 <main+0x240>)
 80102b6:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 80102ba:	461d      	mov	r5, r3
 80102bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80102be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80102c0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80102c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	CanTaskHandle = osThreadCreate(osThread(CanTask), NULL);
 80102c8:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80102cc:	2100      	movs	r1, #0
 80102ce:	4618      	mov	r0, r3
 80102d0:	f7f7 f90f 	bl	80074f2 <osThreadCreate>
 80102d4:	4602      	mov	r2, r0
 80102d6:	4b45      	ldr	r3, [pc, #276]	; (80103ec <main+0x244>)
 80102d8:	601a      	str	r2, [r3, #0]

	/* definition and creation of GyroTask */
	osThreadDef(GyroTask, StartGyroTask, osPriorityNormal, 0, 512);
 80102da:	4b45      	ldr	r3, [pc, #276]	; (80103f0 <main+0x248>)
 80102dc:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 80102e0:	461d      	mov	r5, r3
 80102e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80102e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80102e6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80102ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	GyroTaskHandle = osThreadCreate(osThread(GyroTask), NULL);
 80102ee:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80102f2:	2100      	movs	r1, #0
 80102f4:	4618      	mov	r0, r3
 80102f6:	f7f7 f8fc 	bl	80074f2 <osThreadCreate>
 80102fa:	4602      	mov	r2, r0
 80102fc:	4b3d      	ldr	r3, [pc, #244]	; (80103f4 <main+0x24c>)
 80102fe:	601a      	str	r2, [r3, #0]

	/* definition and creation of CommandTask */
	osThreadDef(CommandTask, StartCommandTask, osPriorityHigh, 0, 256);
 8010300:	4b3d      	ldr	r3, [pc, #244]	; (80103f8 <main+0x250>)
 8010302:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8010306:	461d      	mov	r5, r3
 8010308:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801030a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801030c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8010310:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	CommandTaskHandle = osThreadCreate(osThread(CommandTask), NULL);
 8010314:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8010318:	2100      	movs	r1, #0
 801031a:	4618      	mov	r0, r3
 801031c:	f7f7 f8e9 	bl	80074f2 <osThreadCreate>
 8010320:	4602      	mov	r2, r0
 8010322:	4b36      	ldr	r3, [pc, #216]	; (80103fc <main+0x254>)
 8010324:	601a      	str	r2, [r3, #0]

	/* definition and creation of GpsTask */
	osThreadDef(GpsTask, StartGpsTask, osPriorityNormal, 0, 256);
 8010326:	4b36      	ldr	r3, [pc, #216]	; (8010400 <main+0x258>)
 8010328:	f107 0454 	add.w	r4, r7, #84	; 0x54
 801032c:	461d      	mov	r5, r3
 801032e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010330:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010332:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8010336:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	GpsTaskHandle = osThreadCreate(osThread(GpsTask), NULL);
 801033a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801033e:	2100      	movs	r1, #0
 8010340:	4618      	mov	r0, r3
 8010342:	f7f7 f8d6 	bl	80074f2 <osThreadCreate>
 8010346:	4602      	mov	r2, r0
 8010348:	4b2e      	ldr	r3, [pc, #184]	; (8010404 <main+0x25c>)
 801034a:	601a      	str	r2, [r3, #0]

	/* definition and creation of FingerTask */
	osThreadDef(FingerTask, StartFingerTask, osPriorityNormal, 0, 256);
 801034c:	4b2e      	ldr	r3, [pc, #184]	; (8010408 <main+0x260>)
 801034e:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8010352:	461d      	mov	r5, r3
 8010354:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010356:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010358:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801035c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	FingerTaskHandle = osThreadCreate(osThread(FingerTask), NULL);
 8010360:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8010364:	2100      	movs	r1, #0
 8010366:	4618      	mov	r0, r3
 8010368:	f7f7 f8c3 	bl	80074f2 <osThreadCreate>
 801036c:	4602      	mov	r2, r0
 801036e:	4b27      	ldr	r3, [pc, #156]	; (801040c <main+0x264>)
 8010370:	601a      	str	r2, [r3, #0]

	/* definition and creation of AudioTask */
	osThreadDef(AudioTask, StartAudioTask, osPriorityNormal, 0, 128);
 8010372:	f107 031c 	add.w	r3, r7, #28
 8010376:	4a26      	ldr	r2, [pc, #152]	; (8010410 <main+0x268>)
 8010378:	461c      	mov	r4, r3
 801037a:	4615      	mov	r5, r2
 801037c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801037e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010380:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8010384:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	AudioTaskHandle = osThreadCreate(osThread(AudioTask), NULL);
 8010388:	f107 031c 	add.w	r3, r7, #28
 801038c:	2100      	movs	r1, #0
 801038e:	4618      	mov	r0, r3
 8010390:	f7f7 f8af 	bl	80074f2 <osThreadCreate>
 8010394:	4602      	mov	r2, r0
 8010396:	4b1f      	ldr	r3, [pc, #124]	; (8010414 <main+0x26c>)
 8010398:	601a      	str	r2, [r3, #0]

	/* definition and creation of KeylessTask */
	osThreadDef(KeylessTask, StartKeylessTask, osPriorityNormal, 0, 256);
 801039a:	463b      	mov	r3, r7
 801039c:	4a1e      	ldr	r2, [pc, #120]	; (8010418 <main+0x270>)
 801039e:	461c      	mov	r4, r3
 80103a0:	4615      	mov	r5, r2
 80103a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80103a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80103a6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80103aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	KeylessTaskHandle = osThreadCreate(osThread(KeylessTask), NULL);
 80103ae:	463b      	mov	r3, r7
 80103b0:	2100      	movs	r1, #0
 80103b2:	4618      	mov	r0, r3
 80103b4:	f7f7 f89d 	bl	80074f2 <osThreadCreate>
 80103b8:	4602      	mov	r2, r0
 80103ba:	4b18      	ldr	r3, [pc, #96]	; (801041c <main+0x274>)
 80103bc:	601a      	str	r2, [r3, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 80103be:	f7f7 f881 	bl	80074c4 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80103c2:	e7fe      	b.n	80103c2 <main+0x21a>
 80103c4:	2000851c 	.word	0x2000851c
 80103c8:	20008490 	.word	0x20008490
 80103cc:	20008680 	.word	0x20008680
 80103d0:	2000867c 	.word	0x2000867c
 80103d4:	08016244 	.word	0x08016244
 80103d8:	2000862c 	.word	0x2000862c
 80103dc:	2000827c 	.word	0x2000827c
 80103e0:	0801625c 	.word	0x0801625c
 80103e4:	200085c0 	.word	0x200085c0
 80103e8:	08016280 	.word	0x08016280
 80103ec:	20008394 	.word	0x20008394
 80103f0:	080162a8 	.word	0x080162a8
 80103f4:	200084f8 	.word	0x200084f8
 80103f8:	080162d0 	.word	0x080162d0
 80103fc:	20008524 	.word	0x20008524
 8010400:	080162f4 	.word	0x080162f4
 8010404:	20008520 	.word	0x20008520
 8010408:	0801631c 	.word	0x0801631c
 801040c:	20008494 	.word	0x20008494
 8010410:	08016344 	.word	0x08016344
 8010414:	20008678 	.word	0x20008678
 8010418:	0801636c 	.word	0x0801636c
 801041c:	2000848c 	.word	0x2000848c

08010420 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8010420:	b580      	push	{r7, lr}
 8010422:	b098      	sub	sp, #96	; 0x60
 8010424:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8010426:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801042a:	2230      	movs	r2, #48	; 0x30
 801042c:	2100      	movs	r1, #0
 801042e:	4618      	mov	r0, r3
 8010430:	f002 f89d 	bl	801256e <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8010434:	f107 031c 	add.w	r3, r7, #28
 8010438:	2200      	movs	r2, #0
 801043a:	601a      	str	r2, [r3, #0]
 801043c:	605a      	str	r2, [r3, #4]
 801043e:	609a      	str	r2, [r3, #8]
 8010440:	60da      	str	r2, [r3, #12]
 8010442:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8010444:	f107 030c 	add.w	r3, r7, #12
 8010448:	2200      	movs	r2, #0
 801044a:	601a      	str	r2, [r3, #0]
 801044c:	605a      	str	r2, [r3, #4]
 801044e:	609a      	str	r2, [r3, #8]
 8010450:	60da      	str	r2, [r3, #12]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE()
 8010452:	2300      	movs	r3, #0
 8010454:	60bb      	str	r3, [r7, #8]
 8010456:	4b33      	ldr	r3, [pc, #204]	; (8010524 <SystemClock_Config+0x104>)
 8010458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801045a:	4a32      	ldr	r2, [pc, #200]	; (8010524 <SystemClock_Config+0x104>)
 801045c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010460:	6413      	str	r3, [r2, #64]	; 0x40
 8010462:	4b30      	ldr	r3, [pc, #192]	; (8010524 <SystemClock_Config+0x104>)
 8010464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801046a:	60bb      	str	r3, [r7, #8]
 801046c:	68bb      	ldr	r3, [r7, #8]
	;
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 801046e:	2300      	movs	r3, #0
 8010470:	607b      	str	r3, [r7, #4]
 8010472:	4b2d      	ldr	r3, [pc, #180]	; (8010528 <SystemClock_Config+0x108>)
 8010474:	681b      	ldr	r3, [r3, #0]
 8010476:	4a2c      	ldr	r2, [pc, #176]	; (8010528 <SystemClock_Config+0x108>)
 8010478:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801047c:	6013      	str	r3, [r2, #0]
 801047e:	4b2a      	ldr	r3, [pc, #168]	; (8010528 <SystemClock_Config+0x108>)
 8010480:	681b      	ldr	r3, [r3, #0]
 8010482:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010486:	607b      	str	r3, [r7, #4]
 8010488:	687b      	ldr	r3, [r7, #4]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_HSE;
 801048a:	2309      	movs	r3, #9
 801048c:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 801048e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8010492:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8010494:	2301      	movs	r3, #1
 8010496:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8010498:	2302      	movs	r3, #2
 801049a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 801049c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80104a0:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 8;
 80104a2:	2308      	movs	r3, #8
 80104a4:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 336;
 80104a6:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80104aa:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80104ac:	2302      	movs	r3, #2
 80104ae:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 7;
 80104b0:	2307      	movs	r3, #7
 80104b2:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80104b4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80104b8:	4618      	mov	r0, r3
 80104ba:	f7f4 fb49 	bl	8004b50 <HAL_RCC_OscConfig>
 80104be:	4603      	mov	r3, r0
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	d001      	beq.n	80104c8 <SystemClock_Config+0xa8>
		Error_Handler();
 80104c4:	f000 fe36 	bl	8011134 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80104c8:	230f      	movs	r3, #15
 80104ca:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80104cc:	2302      	movs	r3, #2
 80104ce:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80104d0:	2300      	movs	r3, #0
 80104d2:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80104d4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80104d8:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80104da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80104de:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 80104e0:	f107 031c 	add.w	r3, r7, #28
 80104e4:	2105      	movs	r1, #5
 80104e6:	4618      	mov	r0, r3
 80104e8:	f7f4 fd74 	bl	8004fd4 <HAL_RCC_ClockConfig>
 80104ec:	4603      	mov	r3, r0
 80104ee:	2b00      	cmp	r3, #0
 80104f0:	d001      	beq.n	80104f6 <SystemClock_Config+0xd6>
		Error_Handler();
 80104f2:	f000 fe1f 	bl	8011134 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
 80104f6:	2303      	movs	r3, #3
 80104f8:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80104fa:	23c0      	movs	r3, #192	; 0xc0
 80104fc:	613b      	str	r3, [r7, #16]
	PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80104fe:	2302      	movs	r3, #2
 8010500:	617b      	str	r3, [r7, #20]
	PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8010502:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010506:	61bb      	str	r3, [r7, #24]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8010508:	f107 030c 	add.w	r3, r7, #12
 801050c:	4618      	mov	r0, r3
 801050e:	f7f4 ff81 	bl	8005414 <HAL_RCCEx_PeriphCLKConfig>
 8010512:	4603      	mov	r3, r0
 8010514:	2b00      	cmp	r3, #0
 8010516:	d001      	beq.n	801051c <SystemClock_Config+0xfc>
		Error_Handler();
 8010518:	f000 fe0c 	bl	8011134 <Error_Handler>
	}
}
 801051c:	bf00      	nop
 801051e:	3760      	adds	r7, #96	; 0x60
 8010520:	46bd      	mov	sp, r7
 8010522:	bd80      	pop	{r7, pc}
 8010524:	40023800 	.word	0x40023800
 8010528:	40007000 	.word	0x40007000

0801052c <MX_I2C3_Init>:
/**
 * @brief I2C3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C3_Init(void) {
 801052c:	b580      	push	{r7, lr}
 801052e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C3_Init 0 */

	/* USER CODE BEGIN I2C3_Init 1 */

	/* USER CODE END I2C3_Init 1 */
	hi2c3.Instance = I2C3;
 8010530:	4b12      	ldr	r3, [pc, #72]	; (801057c <MX_I2C3_Init+0x50>)
 8010532:	4a13      	ldr	r2, [pc, #76]	; (8010580 <MX_I2C3_Init+0x54>)
 8010534:	601a      	str	r2, [r3, #0]
	hi2c3.Init.ClockSpeed = 100000;
 8010536:	4b11      	ldr	r3, [pc, #68]	; (801057c <MX_I2C3_Init+0x50>)
 8010538:	4a12      	ldr	r2, [pc, #72]	; (8010584 <MX_I2C3_Init+0x58>)
 801053a:	605a      	str	r2, [r3, #4]
	hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 801053c:	4b0f      	ldr	r3, [pc, #60]	; (801057c <MX_I2C3_Init+0x50>)
 801053e:	2200      	movs	r2, #0
 8010540:	609a      	str	r2, [r3, #8]
	hi2c3.Init.OwnAddress1 = 0;
 8010542:	4b0e      	ldr	r3, [pc, #56]	; (801057c <MX_I2C3_Init+0x50>)
 8010544:	2200      	movs	r2, #0
 8010546:	60da      	str	r2, [r3, #12]
	hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8010548:	4b0c      	ldr	r3, [pc, #48]	; (801057c <MX_I2C3_Init+0x50>)
 801054a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 801054e:	611a      	str	r2, [r3, #16]
	hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8010550:	4b0a      	ldr	r3, [pc, #40]	; (801057c <MX_I2C3_Init+0x50>)
 8010552:	2200      	movs	r2, #0
 8010554:	615a      	str	r2, [r3, #20]
	hi2c3.Init.OwnAddress2 = 0;
 8010556:	4b09      	ldr	r3, [pc, #36]	; (801057c <MX_I2C3_Init+0x50>)
 8010558:	2200      	movs	r2, #0
 801055a:	619a      	str	r2, [r3, #24]
	hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 801055c:	4b07      	ldr	r3, [pc, #28]	; (801057c <MX_I2C3_Init+0x50>)
 801055e:	2200      	movs	r2, #0
 8010560:	61da      	str	r2, [r3, #28]
	hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8010562:	4b06      	ldr	r3, [pc, #24]	; (801057c <MX_I2C3_Init+0x50>)
 8010564:	2200      	movs	r2, #0
 8010566:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c3) != HAL_OK) {
 8010568:	4804      	ldr	r0, [pc, #16]	; (801057c <MX_I2C3_Init+0x50>)
 801056a:	f7f2 f815 	bl	8002598 <HAL_I2C_Init>
 801056e:	4603      	mov	r3, r0
 8010570:	2b00      	cmp	r3, #0
 8010572:	d001      	beq.n	8010578 <MX_I2C3_Init+0x4c>
		Error_Handler();
 8010574:	f000 fdde 	bl	8011134 <Error_Handler>
	}
	/* USER CODE BEGIN I2C3_Init 2 */

	/* USER CODE END I2C3_Init 2 */

}
 8010578:	bf00      	nop
 801057a:	bd80      	pop	{r7, pc}
 801057c:	20008340 	.word	0x20008340
 8010580:	40005c00 	.word	0x40005c00
 8010584:	000186a0 	.word	0x000186a0

08010588 <MX_RTC_Init>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 8010588:	b580      	push	{r7, lr}
 801058a:	b086      	sub	sp, #24
 801058c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RTC_Init 0 */

	/* USER CODE END RTC_Init 0 */

	RTC_TimeTypeDef sTime = { 0 };
 801058e:	1d3b      	adds	r3, r7, #4
 8010590:	2200      	movs	r2, #0
 8010592:	601a      	str	r2, [r3, #0]
 8010594:	605a      	str	r2, [r3, #4]
 8010596:	609a      	str	r2, [r3, #8]
 8010598:	60da      	str	r2, [r3, #12]
 801059a:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = { 0 };
 801059c:	2300      	movs	r3, #0
 801059e:	603b      	str	r3, [r7, #0]
	/* USER CODE BEGIN RTC_Init 1 */

	/* USER CODE END RTC_Init 1 */
	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 80105a0:	4b24      	ldr	r3, [pc, #144]	; (8010634 <MX_RTC_Init+0xac>)
 80105a2:	4a25      	ldr	r2, [pc, #148]	; (8010638 <MX_RTC_Init+0xb0>)
 80105a4:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80105a6:	4b23      	ldr	r3, [pc, #140]	; (8010634 <MX_RTC_Init+0xac>)
 80105a8:	2200      	movs	r2, #0
 80105aa:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 80105ac:	4b21      	ldr	r3, [pc, #132]	; (8010634 <MX_RTC_Init+0xac>)
 80105ae:	227f      	movs	r2, #127	; 0x7f
 80105b0:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 80105b2:	4b20      	ldr	r3, [pc, #128]	; (8010634 <MX_RTC_Init+0xac>)
 80105b4:	22ff      	movs	r2, #255	; 0xff
 80105b6:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80105b8:	4b1e      	ldr	r3, [pc, #120]	; (8010634 <MX_RTC_Init+0xac>)
 80105ba:	2200      	movs	r2, #0
 80105bc:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80105be:	4b1d      	ldr	r3, [pc, #116]	; (8010634 <MX_RTC_Init+0xac>)
 80105c0:	2200      	movs	r2, #0
 80105c2:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80105c4:	4b1b      	ldr	r3, [pc, #108]	; (8010634 <MX_RTC_Init+0xac>)
 80105c6:	2200      	movs	r2, #0
 80105c8:	619a      	str	r2, [r3, #24]
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 80105ca:	481a      	ldr	r0, [pc, #104]	; (8010634 <MX_RTC_Init+0xac>)
 80105cc:	f7f5 f88c 	bl	80056e8 <HAL_RTC_Init>
 80105d0:	4603      	mov	r3, r0
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	d001      	beq.n	80105da <MX_RTC_Init+0x52>
		Error_Handler();
 80105d6:	f000 fdad 	bl	8011134 <Error_Handler>

	/* USER CODE END Check_RTC_BKUP */

	/** Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 0x0;
 80105da:	2300      	movs	r3, #0
 80105dc:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = 0x0;
 80105de:	2300      	movs	r3, #0
 80105e0:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = 0x0;
 80105e2:	2300      	movs	r3, #0
 80105e4:	71bb      	strb	r3, [r7, #6]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80105e6:	2300      	movs	r3, #0
 80105e8:	613b      	str	r3, [r7, #16]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80105ea:	2300      	movs	r3, #0
 80105ec:	617b      	str	r3, [r7, #20]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK) {
 80105ee:	1d3b      	adds	r3, r7, #4
 80105f0:	2201      	movs	r2, #1
 80105f2:	4619      	mov	r1, r3
 80105f4:	480f      	ldr	r0, [pc, #60]	; (8010634 <MX_RTC_Init+0xac>)
 80105f6:	f7f5 f908 	bl	800580a <HAL_RTC_SetTime>
 80105fa:	4603      	mov	r3, r0
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d001      	beq.n	8010604 <MX_RTC_Init+0x7c>
		Error_Handler();
 8010600:	f000 fd98 	bl	8011134 <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 8010604:	2305      	movs	r3, #5
 8010606:	703b      	strb	r3, [r7, #0]
	sDate.Month = RTC_MONTH_SEPTEMBER;
 8010608:	2309      	movs	r3, #9
 801060a:	707b      	strb	r3, [r7, #1]
	sDate.Date = 0x13;
 801060c:	2313      	movs	r3, #19
 801060e:	70bb      	strb	r3, [r7, #2]
	sDate.Year = 0x19;
 8010610:	2319      	movs	r3, #25
 8010612:	70fb      	strb	r3, [r7, #3]

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK) {
 8010614:	463b      	mov	r3, r7
 8010616:	2201      	movs	r2, #1
 8010618:	4619      	mov	r1, r3
 801061a:	4806      	ldr	r0, [pc, #24]	; (8010634 <MX_RTC_Init+0xac>)
 801061c:	f7f5 fa10 	bl	8005a40 <HAL_RTC_SetDate>
 8010620:	4603      	mov	r3, r0
 8010622:	2b00      	cmp	r3, #0
 8010624:	d001      	beq.n	801062a <MX_RTC_Init+0xa2>
		Error_Handler();
 8010626:	f000 fd85 	bl	8011134 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 801062a:	bf00      	nop
 801062c:	3718      	adds	r7, #24
 801062e:	46bd      	mov	sp, r7
 8010630:	bd80      	pop	{r7, pc}
 8010632:	bf00      	nop
 8010634:	200084fc 	.word	0x200084fc
 8010638:	40002800 	.word	0x40002800

0801063c <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 801063c:	b580      	push	{r7, lr}
 801063e:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8010640:	4b17      	ldr	r3, [pc, #92]	; (80106a0 <MX_SPI1_Init+0x64>)
 8010642:	4a18      	ldr	r2, [pc, #96]	; (80106a4 <MX_SPI1_Init+0x68>)
 8010644:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8010646:	4b16      	ldr	r3, [pc, #88]	; (80106a0 <MX_SPI1_Init+0x64>)
 8010648:	f44f 7282 	mov.w	r2, #260	; 0x104
 801064c:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 801064e:	4b14      	ldr	r3, [pc, #80]	; (80106a0 <MX_SPI1_Init+0x64>)
 8010650:	2200      	movs	r2, #0
 8010652:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8010654:	4b12      	ldr	r3, [pc, #72]	; (80106a0 <MX_SPI1_Init+0x64>)
 8010656:	2200      	movs	r2, #0
 8010658:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 801065a:	4b11      	ldr	r3, [pc, #68]	; (80106a0 <MX_SPI1_Init+0x64>)
 801065c:	2200      	movs	r2, #0
 801065e:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8010660:	4b0f      	ldr	r3, [pc, #60]	; (80106a0 <MX_SPI1_Init+0x64>)
 8010662:	2200      	movs	r2, #0
 8010664:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8010666:	4b0e      	ldr	r3, [pc, #56]	; (80106a0 <MX_SPI1_Init+0x64>)
 8010668:	f44f 7200 	mov.w	r2, #512	; 0x200
 801066c:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 801066e:	4b0c      	ldr	r3, [pc, #48]	; (80106a0 <MX_SPI1_Init+0x64>)
 8010670:	2200      	movs	r2, #0
 8010672:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8010674:	4b0a      	ldr	r3, [pc, #40]	; (80106a0 <MX_SPI1_Init+0x64>)
 8010676:	2200      	movs	r2, #0
 8010678:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 801067a:	4b09      	ldr	r3, [pc, #36]	; (80106a0 <MX_SPI1_Init+0x64>)
 801067c:	2200      	movs	r2, #0
 801067e:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8010680:	4b07      	ldr	r3, [pc, #28]	; (80106a0 <MX_SPI1_Init+0x64>)
 8010682:	2200      	movs	r2, #0
 8010684:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8010686:	4b06      	ldr	r3, [pc, #24]	; (80106a0 <MX_SPI1_Init+0x64>)
 8010688:	220a      	movs	r2, #10
 801068a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 801068c:	4804      	ldr	r0, [pc, #16]	; (80106a0 <MX_SPI1_Init+0x64>)
 801068e:	f7f5 fb5d 	bl	8005d4c <HAL_SPI_Init>
 8010692:	4603      	mov	r3, r0
 8010694:	2b00      	cmp	r3, #0
 8010696:	d001      	beq.n	801069c <MX_SPI1_Init+0x60>
		Error_Handler();
 8010698:	f000 fd4c 	bl	8011134 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 801069c:	bf00      	nop
 801069e:	bd80      	pop	{r7, pc}
 80106a0:	20008568 	.word	0x20008568
 80106a4:	40013000 	.word	0x40013000

080106a8 <MX_UART4_Init>:
/**
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void) {
 80106a8:	b580      	push	{r7, lr}
 80106aa:	af00      	add	r7, sp, #0
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 80106ac:	4b11      	ldr	r3, [pc, #68]	; (80106f4 <MX_UART4_Init+0x4c>)
 80106ae:	4a12      	ldr	r2, [pc, #72]	; (80106f8 <MX_UART4_Init+0x50>)
 80106b0:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = 57600;
 80106b2:	4b10      	ldr	r3, [pc, #64]	; (80106f4 <MX_UART4_Init+0x4c>)
 80106b4:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80106b8:	605a      	str	r2, [r3, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80106ba:	4b0e      	ldr	r3, [pc, #56]	; (80106f4 <MX_UART4_Init+0x4c>)
 80106bc:	2200      	movs	r2, #0
 80106be:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 80106c0:	4b0c      	ldr	r3, [pc, #48]	; (80106f4 <MX_UART4_Init+0x4c>)
 80106c2:	2200      	movs	r2, #0
 80106c4:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 80106c6:	4b0b      	ldr	r3, [pc, #44]	; (80106f4 <MX_UART4_Init+0x4c>)
 80106c8:	2200      	movs	r2, #0
 80106ca:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 80106cc:	4b09      	ldr	r3, [pc, #36]	; (80106f4 <MX_UART4_Init+0x4c>)
 80106ce:	220c      	movs	r2, #12
 80106d0:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80106d2:	4b08      	ldr	r3, [pc, #32]	; (80106f4 <MX_UART4_Init+0x4c>)
 80106d4:	2200      	movs	r2, #0
 80106d6:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80106d8:	4b06      	ldr	r3, [pc, #24]	; (80106f4 <MX_UART4_Init+0x4c>)
 80106da:	2200      	movs	r2, #0
 80106dc:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart4) != HAL_OK) {
 80106de:	4805      	ldr	r0, [pc, #20]	; (80106f4 <MX_UART4_Init+0x4c>)
 80106e0:	f7f6 f824 	bl	800672c <HAL_UART_Init>
 80106e4:	4603      	mov	r3, r0
 80106e6:	2b00      	cmp	r3, #0
 80106e8:	d001      	beq.n	80106ee <MX_UART4_Init+0x46>
		Error_Handler();
 80106ea:	f000 fd23 	bl	8011134 <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */

	/* USER CODE END UART4_Init 2 */

}
 80106ee:	bf00      	nop
 80106f0:	bd80      	pop	{r7, pc}
 80106f2:	bf00      	nop
 80106f4:	20008528 	.word	0x20008528
 80106f8:	40004c00 	.word	0x40004c00

080106fc <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80106fc:	b580      	push	{r7, lr}
 80106fe:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8010700:	4b11      	ldr	r3, [pc, #68]	; (8010748 <MX_USART2_UART_Init+0x4c>)
 8010702:	4a12      	ldr	r2, [pc, #72]	; (801074c <MX_USART2_UART_Init+0x50>)
 8010704:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 9600;
 8010706:	4b10      	ldr	r3, [pc, #64]	; (8010748 <MX_USART2_UART_Init+0x4c>)
 8010708:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 801070c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 801070e:	4b0e      	ldr	r3, [pc, #56]	; (8010748 <MX_USART2_UART_Init+0x4c>)
 8010710:	2200      	movs	r2, #0
 8010712:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8010714:	4b0c      	ldr	r3, [pc, #48]	; (8010748 <MX_USART2_UART_Init+0x4c>)
 8010716:	2200      	movs	r2, #0
 8010718:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 801071a:	4b0b      	ldr	r3, [pc, #44]	; (8010748 <MX_USART2_UART_Init+0x4c>)
 801071c:	2200      	movs	r2, #0
 801071e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_RX;
 8010720:	4b09      	ldr	r3, [pc, #36]	; (8010748 <MX_USART2_UART_Init+0x4c>)
 8010722:	2204      	movs	r2, #4
 8010724:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8010726:	4b08      	ldr	r3, [pc, #32]	; (8010748 <MX_USART2_UART_Init+0x4c>)
 8010728:	2200      	movs	r2, #0
 801072a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 801072c:	4b06      	ldr	r3, [pc, #24]	; (8010748 <MX_USART2_UART_Init+0x4c>)
 801072e:	2200      	movs	r2, #0
 8010730:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8010732:	4805      	ldr	r0, [pc, #20]	; (8010748 <MX_USART2_UART_Init+0x4c>)
 8010734:	f7f5 fffa 	bl	800672c <HAL_UART_Init>
 8010738:	4603      	mov	r3, r0
 801073a:	2b00      	cmp	r3, #0
 801073c:	d001      	beq.n	8010742 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 801073e:	f000 fcf9 	bl	8011134 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8010742:	bf00      	nop
 8010744:	bd80      	pop	{r7, pc}
 8010746:	bf00      	nop
 8010748:	200085c4 	.word	0x200085c4
 801074c:	40004400 	.word	0x40004400

08010750 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8010750:	b580      	push	{r7, lr}
 8010752:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN USART3_Init 1 */

	//  huart3.Init.BaudRate = 115200;
	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8010754:	4b11      	ldr	r3, [pc, #68]	; (801079c <MX_USART3_UART_Init+0x4c>)
 8010756:	4a12      	ldr	r2, [pc, #72]	; (80107a0 <MX_USART3_UART_Init+0x50>)
 8010758:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 9600;
 801075a:	4b10      	ldr	r3, [pc, #64]	; (801079c <MX_USART3_UART_Init+0x4c>)
 801075c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8010760:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8010762:	4b0e      	ldr	r3, [pc, #56]	; (801079c <MX_USART3_UART_Init+0x4c>)
 8010764:	2200      	movs	r2, #0
 8010766:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8010768:	4b0c      	ldr	r3, [pc, #48]	; (801079c <MX_USART3_UART_Init+0x4c>)
 801076a:	2200      	movs	r2, #0
 801076c:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 801076e:	4b0b      	ldr	r3, [pc, #44]	; (801079c <MX_USART3_UART_Init+0x4c>)
 8010770:	2200      	movs	r2, #0
 8010772:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8010774:	4b09      	ldr	r3, [pc, #36]	; (801079c <MX_USART3_UART_Init+0x4c>)
 8010776:	220c      	movs	r2, #12
 8010778:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 801077a:	4b08      	ldr	r3, [pc, #32]	; (801079c <MX_USART3_UART_Init+0x4c>)
 801077c:	2200      	movs	r2, #0
 801077e:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8010780:	4b06      	ldr	r3, [pc, #24]	; (801079c <MX_USART3_UART_Init+0x4c>)
 8010782:	2200      	movs	r2, #0
 8010784:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 8010786:	4805      	ldr	r0, [pc, #20]	; (801079c <MX_USART3_UART_Init+0x4c>)
 8010788:	f7f5 ffd0 	bl	800672c <HAL_UART_Init>
 801078c:	4603      	mov	r3, r0
 801078e:	2b00      	cmp	r3, #0
 8010790:	d001      	beq.n	8010796 <MX_USART3_UART_Init+0x46>
		Error_Handler();
 8010792:	f000 fccf 	bl	8011134 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8010796:	bf00      	nop
 8010798:	bd80      	pop	{r7, pc}
 801079a:	bf00      	nop
 801079c:	200083f8 	.word	0x200083f8
 80107a0:	40004800 	.word	0x40004800

080107a4 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 80107a4:	b580      	push	{r7, lr}
 80107a6:	b082      	sub	sp, #8
 80107a8:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE()
 80107aa:	2300      	movs	r3, #0
 80107ac:	607b      	str	r3, [r7, #4]
 80107ae:	4b18      	ldr	r3, [pc, #96]	; (8010810 <MX_DMA_Init+0x6c>)
 80107b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80107b2:	4a17      	ldr	r2, [pc, #92]	; (8010810 <MX_DMA_Init+0x6c>)
 80107b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80107b8:	6313      	str	r3, [r2, #48]	; 0x30
 80107ba:	4b15      	ldr	r3, [pc, #84]	; (8010810 <MX_DMA_Init+0x6c>)
 80107bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80107be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80107c2:	607b      	str	r3, [r7, #4]
 80107c4:	687b      	ldr	r3, [r7, #4]
	;

	/* DMA interrupt init */
	/* DMA1_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 80107c6:	2200      	movs	r2, #0
 80107c8:	2105      	movs	r1, #5
 80107ca:	200c      	movs	r0, #12
 80107cc:	f7f0 fd08 	bl	80011e0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80107d0:	200c      	movs	r0, #12
 80107d2:	f7f0 fd21 	bl	8001218 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 80107d6:	2200      	movs	r2, #0
 80107d8:	2105      	movs	r1, #5
 80107da:	200d      	movs	r0, #13
 80107dc:	f7f0 fd00 	bl	80011e0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80107e0:	200d      	movs	r0, #13
 80107e2:	f7f0 fd19 	bl	8001218 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80107e6:	2200      	movs	r2, #0
 80107e8:	2105      	movs	r1, #5
 80107ea:	2010      	movs	r0, #16
 80107ec:	f7f0 fcf8 	bl	80011e0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80107f0:	2010      	movs	r0, #16
 80107f2:	f7f0 fd11 	bl	8001218 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream7_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 80107f6:	2200      	movs	r2, #0
 80107f8:	2105      	movs	r1, #5
 80107fa:	202f      	movs	r0, #47	; 0x2f
 80107fc:	f7f0 fcf0 	bl	80011e0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8010800:	202f      	movs	r0, #47	; 0x2f
 8010802:	f7f0 fd09 	bl	8001218 <HAL_NVIC_EnableIRQ>

}
 8010806:	bf00      	nop
 8010808:	3708      	adds	r7, #8
 801080a:	46bd      	mov	sp, r7
 801080c:	bd80      	pop	{r7, pc}
 801080e:	bf00      	nop
 8010810:	40023800 	.word	0x40023800

08010814 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8010814:	b580      	push	{r7, lr}
 8010816:	b08c      	sub	sp, #48	; 0x30
 8010818:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 801081a:	f107 031c 	add.w	r3, r7, #28
 801081e:	2200      	movs	r2, #0
 8010820:	601a      	str	r2, [r3, #0]
 8010822:	605a      	str	r2, [r3, #4]
 8010824:	609a      	str	r2, [r3, #8]
 8010826:	60da      	str	r2, [r3, #12]
 8010828:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE()
 801082a:	2300      	movs	r3, #0
 801082c:	61bb      	str	r3, [r7, #24]
 801082e:	4b70      	ldr	r3, [pc, #448]	; (80109f0 <MX_GPIO_Init+0x1dc>)
 8010830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010832:	4a6f      	ldr	r2, [pc, #444]	; (80109f0 <MX_GPIO_Init+0x1dc>)
 8010834:	f043 0310 	orr.w	r3, r3, #16
 8010838:	6313      	str	r3, [r2, #48]	; 0x30
 801083a:	4b6d      	ldr	r3, [pc, #436]	; (80109f0 <MX_GPIO_Init+0x1dc>)
 801083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801083e:	f003 0310 	and.w	r3, r3, #16
 8010842:	61bb      	str	r3, [r7, #24]
 8010844:	69bb      	ldr	r3, [r7, #24]
	;
	__HAL_RCC_GPIOC_CLK_ENABLE()
 8010846:	2300      	movs	r3, #0
 8010848:	617b      	str	r3, [r7, #20]
 801084a:	4b69      	ldr	r3, [pc, #420]	; (80109f0 <MX_GPIO_Init+0x1dc>)
 801084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801084e:	4a68      	ldr	r2, [pc, #416]	; (80109f0 <MX_GPIO_Init+0x1dc>)
 8010850:	f043 0304 	orr.w	r3, r3, #4
 8010854:	6313      	str	r3, [r2, #48]	; 0x30
 8010856:	4b66      	ldr	r3, [pc, #408]	; (80109f0 <MX_GPIO_Init+0x1dc>)
 8010858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801085a:	f003 0304 	and.w	r3, r3, #4
 801085e:	617b      	str	r3, [r7, #20]
 8010860:	697b      	ldr	r3, [r7, #20]
	;
	__HAL_RCC_GPIOH_CLK_ENABLE()
 8010862:	2300      	movs	r3, #0
 8010864:	613b      	str	r3, [r7, #16]
 8010866:	4b62      	ldr	r3, [pc, #392]	; (80109f0 <MX_GPIO_Init+0x1dc>)
 8010868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801086a:	4a61      	ldr	r2, [pc, #388]	; (80109f0 <MX_GPIO_Init+0x1dc>)
 801086c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010870:	6313      	str	r3, [r2, #48]	; 0x30
 8010872:	4b5f      	ldr	r3, [pc, #380]	; (80109f0 <MX_GPIO_Init+0x1dc>)
 8010874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010876:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801087a:	613b      	str	r3, [r7, #16]
 801087c:	693b      	ldr	r3, [r7, #16]
	;
	__HAL_RCC_GPIOA_CLK_ENABLE()
 801087e:	2300      	movs	r3, #0
 8010880:	60fb      	str	r3, [r7, #12]
 8010882:	4b5b      	ldr	r3, [pc, #364]	; (80109f0 <MX_GPIO_Init+0x1dc>)
 8010884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010886:	4a5a      	ldr	r2, [pc, #360]	; (80109f0 <MX_GPIO_Init+0x1dc>)
 8010888:	f043 0301 	orr.w	r3, r3, #1
 801088c:	6313      	str	r3, [r2, #48]	; 0x30
 801088e:	4b58      	ldr	r3, [pc, #352]	; (80109f0 <MX_GPIO_Init+0x1dc>)
 8010890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010892:	f003 0301 	and.w	r3, r3, #1
 8010896:	60fb      	str	r3, [r7, #12]
 8010898:	68fb      	ldr	r3, [r7, #12]
	;
	__HAL_RCC_GPIOB_CLK_ENABLE()
 801089a:	2300      	movs	r3, #0
 801089c:	60bb      	str	r3, [r7, #8]
 801089e:	4b54      	ldr	r3, [pc, #336]	; (80109f0 <MX_GPIO_Init+0x1dc>)
 80108a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80108a2:	4a53      	ldr	r2, [pc, #332]	; (80109f0 <MX_GPIO_Init+0x1dc>)
 80108a4:	f043 0302 	orr.w	r3, r3, #2
 80108a8:	6313      	str	r3, [r2, #48]	; 0x30
 80108aa:	4b51      	ldr	r3, [pc, #324]	; (80109f0 <MX_GPIO_Init+0x1dc>)
 80108ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80108ae:	f003 0302 	and.w	r3, r3, #2
 80108b2:	60bb      	str	r3, [r7, #8]
 80108b4:	68bb      	ldr	r3, [r7, #8]
	;
	__HAL_RCC_GPIOD_CLK_ENABLE()
 80108b6:	2300      	movs	r3, #0
 80108b8:	607b      	str	r3, [r7, #4]
 80108ba:	4b4d      	ldr	r3, [pc, #308]	; (80109f0 <MX_GPIO_Init+0x1dc>)
 80108bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80108be:	4a4c      	ldr	r2, [pc, #304]	; (80109f0 <MX_GPIO_Init+0x1dc>)
 80108c0:	f043 0308 	orr.w	r3, r3, #8
 80108c4:	6313      	str	r3, [r2, #48]	; 0x30
 80108c6:	4b4a      	ldr	r3, [pc, #296]	; (80109f0 <MX_GPIO_Init+0x1dc>)
 80108c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80108ca:	f003 0308 	and.w	r3, r3, #8
 80108ce:	607b      	str	r3, [r7, #4]
 80108d0:	687b      	ldr	r3, [r7, #4]
	;

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, UBLOX_PWR_Pin | MEMS_PWR_Pin, GPIO_PIN_RESET);
 80108d2:	2200      	movs	r2, #0
 80108d4:	2142      	movs	r1, #66	; 0x42
 80108d6:	4847      	ldr	r0, [pc, #284]	; (80109f4 <MX_GPIO_Init+0x1e0>)
 80108d8:	f7f1 fe12 	bl	8002500 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(FINGER_PWR_GPIO_Port, FINGER_PWR_Pin, GPIO_PIN_SET);
 80108dc:	2201      	movs	r2, #1
 80108de:	2104      	movs	r1, #4
 80108e0:	4844      	ldr	r0, [pc, #272]	; (80109f4 <MX_GPIO_Init+0x1e0>)
 80108e2:	f7f1 fe0d 	bl	8002500 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, NRF24_CE_Pin | NRF24_CSN_Pin, GPIO_PIN_RESET);
 80108e6:	2200      	movs	r2, #0
 80108e8:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80108ec:	4842      	ldr	r0, [pc, #264]	; (80109f8 <MX_GPIO_Init+0x1e4>)
 80108ee:	f7f1 fe07 	bl	8002500 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SIMCOM_RST_GPIO_Port, SIMCOM_RST_Pin, GPIO_PIN_SET);
 80108f2:	2201      	movs	r2, #1
 80108f4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80108f8:	4840      	ldr	r0, [pc, #256]	; (80109fc <MX_GPIO_Init+0x1e8>)
 80108fa:	f7f1 fe01 	bl	8002500 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SIMCOM_PWR_GPIO_Port, SIMCOM_PWR_Pin, GPIO_PIN_SET);
 80108fe:	2201      	movs	r2, #1
 8010900:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8010904:	483e      	ldr	r0, [pc, #248]	; (8010a00 <MX_GPIO_Init+0x1ec>)
 8010906:	f7f1 fdfb 	bl	8002500 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin, GPIO_PIN_RESET);
 801090a:	2200      	movs	r2, #0
 801090c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8010910:	483b      	ldr	r0, [pc, #236]	; (8010a00 <MX_GPIO_Init+0x1ec>)
 8010912:	f7f1 fdf5 	bl	8002500 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : FINGER_IRQ_Pin */
	GPIO_InitStruct.Pin = FINGER_IRQ_Pin;
 8010916:	2340      	movs	r3, #64	; 0x40
 8010918:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801091a:	2300      	movs	r3, #0
 801091c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 801091e:	2300      	movs	r3, #0
 8010920:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(FINGER_IRQ_GPIO_Port, &GPIO_InitStruct);
 8010922:	f107 031c 	add.w	r3, r7, #28
 8010926:	4619      	mov	r1, r3
 8010928:	4833      	ldr	r0, [pc, #204]	; (80109f8 <MX_GPIO_Init+0x1e4>)
 801092a:	f7f1 fb3d 	bl	8001fa8 <HAL_GPIO_Init>

	/*Configure GPIO pins : UBLOX_PWR_Pin FINGER_PWR_Pin MEMS_PWR_Pin */
	GPIO_InitStruct.Pin = UBLOX_PWR_Pin | FINGER_PWR_Pin | MEMS_PWR_Pin;
 801092e:	2346      	movs	r3, #70	; 0x46
 8010930:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8010932:	2301      	movs	r3, #1
 8010934:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010936:	2300      	movs	r3, #0
 8010938:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801093a:	2300      	movs	r3, #0
 801093c:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801093e:	f107 031c 	add.w	r3, r7, #28
 8010942:	4619      	mov	r1, r3
 8010944:	482b      	ldr	r0, [pc, #172]	; (80109f4 <MX_GPIO_Init+0x1e0>)
 8010946:	f7f1 fb2f 	bl	8001fa8 <HAL_GPIO_Init>

	/*Configure GPIO pin : BOOT1_Pin */
	GPIO_InitStruct.Pin = BOOT1_Pin;
 801094a:	2304      	movs	r3, #4
 801094c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801094e:	2300      	movs	r3, #0
 8010950:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010952:	2300      	movs	r3, #0
 8010954:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8010956:	f107 031c 	add.w	r3, r7, #28
 801095a:	4619      	mov	r1, r3
 801095c:	4827      	ldr	r0, [pc, #156]	; (80109fc <MX_GPIO_Init+0x1e8>)
 801095e:	f7f1 fb23 	bl	8001fa8 <HAL_GPIO_Init>

	/*Configure GPIO pins : NRF24_CE_Pin NRF24_CSN_Pin */
	GPIO_InitStruct.Pin = NRF24_CE_Pin | NRF24_CSN_Pin;
 8010962:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8010966:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8010968:	2301      	movs	r3, #1
 801096a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 801096c:	2300      	movs	r3, #0
 801096e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010970:	2300      	movs	r3, #0
 8010972:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8010974:	f107 031c 	add.w	r3, r7, #28
 8010978:	4619      	mov	r1, r3
 801097a:	481f      	ldr	r0, [pc, #124]	; (80109f8 <MX_GPIO_Init+0x1e4>)
 801097c:	f7f1 fb14 	bl	8001fa8 <HAL_GPIO_Init>

	/*Configure GPIO pin : NRF24_IRQ_Pin */
	GPIO_InitStruct.Pin = NRF24_IRQ_Pin;
 8010980:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010984:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8010986:	4b1f      	ldr	r3, [pc, #124]	; (8010a04 <MX_GPIO_Init+0x1f0>)
 8010988:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 801098a:	2300      	movs	r3, #0
 801098c:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(NRF24_IRQ_GPIO_Port, &GPIO_InitStruct);
 801098e:	f107 031c 	add.w	r3, r7, #28
 8010992:	4619      	mov	r1, r3
 8010994:	4818      	ldr	r0, [pc, #96]	; (80109f8 <MX_GPIO_Init+0x1e4>)
 8010996:	f7f1 fb07 	bl	8001fa8 <HAL_GPIO_Init>

	/*Configure GPIO pin : SIMCOM_RST_Pin */
	GPIO_InitStruct.Pin = SIMCOM_RST_Pin;
 801099a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801099e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80109a0:	2301      	movs	r3, #1
 80109a2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80109a4:	2300      	movs	r3, #0
 80109a6:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80109a8:	2300      	movs	r3, #0
 80109aa:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(SIMCOM_RST_GPIO_Port, &GPIO_InitStruct);
 80109ac:	f107 031c 	add.w	r3, r7, #28
 80109b0:	4619      	mov	r1, r3
 80109b2:	4812      	ldr	r0, [pc, #72]	; (80109fc <MX_GPIO_Init+0x1e8>)
 80109b4:	f7f1 faf8 	bl	8001fa8 <HAL_GPIO_Init>

	/*Configure GPIO pins : SIMCOM_PWR_Pin LD4_Pin LD3_Pin LD5_Pin
	 LD6_Pin Audio_RST_Pin */
	GPIO_InitStruct.Pin = SIMCOM_PWR_Pin | LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin;
 80109b8:	f24f 4310 	movw	r3, #62480	; 0xf410
 80109bc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80109be:	2301      	movs	r3, #1
 80109c0:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80109c2:	2300      	movs	r3, #0
 80109c4:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80109c6:	2300      	movs	r3, #0
 80109c8:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80109ca:	f107 031c 	add.w	r3, r7, #28
 80109ce:	4619      	mov	r1, r3
 80109d0:	480b      	ldr	r0, [pc, #44]	; (8010a00 <MX_GPIO_Init+0x1ec>)
 80109d2:	f7f1 fae9 	bl	8001fa8 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80109d6:	2200      	movs	r2, #0
 80109d8:	2105      	movs	r1, #5
 80109da:	2028      	movs	r0, #40	; 0x28
 80109dc:	f7f0 fc00 	bl	80011e0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80109e0:	2028      	movs	r0, #40	; 0x28
 80109e2:	f7f0 fc19 	bl	8001218 <HAL_NVIC_EnableIRQ>

}
 80109e6:	bf00      	nop
 80109e8:	3730      	adds	r7, #48	; 0x30
 80109ea:	46bd      	mov	sp, r7
 80109ec:	bd80      	pop	{r7, pc}
 80109ee:	bf00      	nop
 80109f0:	40023800 	.word	0x40023800
 80109f4:	40020800 	.word	0x40020800
 80109f8:	40021000 	.word	0x40021000
 80109fc:	40020400 	.word	0x40020400
 8010a00:	40020c00 	.word	0x40020c00
 8010a04:	10210000 	.word	0x10210000

08010a08 <vApplicationIdleHook>:

/* USER CODE BEGIN 4 */
void vApplicationIdleHook(void) {
 8010a08:	b480      	push	{r7}
 8010a0a:	af00      	add	r7, sp, #0
}
 8010a0c:	bf00      	nop
 8010a0e:	46bd      	mov	sp, r7
 8010a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a14:	4770      	bx	lr
	...

08010a18 <StartIotTask>:
 * @brief  Function implementing the iotTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartIotTask */
void StartIotTask(void const * argument) {
 8010a18:	b580      	push	{r7, lr}
 8010a1a:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 8010a1e:	af00      	add	r7, sp, #0
 8010a20:	1d3b      	adds	r3, r7, #4
 8010a22:	6018      	str	r0, [r3, #0]

	/* USER CODE BEGIN 5 */
	const TickType_t xDelay_ms = pdMS_TO_TICKS(REPORT_INTERVAL*1000);
 8010a24:	f241 3388 	movw	r3, #5000	; 0x1388
 8010a28:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	uint32_t ulNotifiedValue;
	osEvent evt;
	char msg[SIMCOM_MESSAGE_LENGTH];

	// Start simcom module
	SIMCOM_DMA_Init();
 8010a2c:	f7fa fc42 	bl	800b2b4 <SIMCOM_DMA_Init>
	Simcom_Init(0);
 8010a30:	2000      	movs	r0, #0
 8010a32:	f7fe fd07 	bl	800f444 <Simcom_Init>
	/* Infinite loop */
	xLastWakeTime = xTaskGetTickCount();
 8010a36:	f7f8 fc7f 	bl	8009338 <xTaskGetTickCount>
 8010a3a:	4603      	mov	r3, r0
 8010a3c:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
	for (;;) {
		// get event data
		xResult = xTaskNotifyWait(0x00, ULONG_MAX, &ulNotifiedValue, 0);
 8010a40:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8010a44:	2300      	movs	r3, #0
 8010a46:	f04f 31ff 	mov.w	r1, #4294967295
 8010a4a:	2000      	movs	r0, #0
 8010a4c:	f7f9 f99e 	bl	8009d8c <xTaskNotifyWait>
 8010a50:	f8c7 0210 	str.w	r0, [r7, #528]	; 0x210
		// reset msg event
		sprintf(msg, "%s", "");
 8010a54:	f107 0308 	add.w	r3, r7, #8
 8010a58:	2200      	movs	r2, #0
 8010a5a:	701a      	strb	r2, [r3, #0]
		// do this if events occurred
		if (xResult == pdTRUE) {
 8010a5c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8010a60:	2b01      	cmp	r3, #1
 8010a62:	d121      	bne.n	8010aa8 <StartIotTask+0x90>
			// check every event
			if (ulNotifiedValue & EVENT_IOT_CRASH) {
 8010a64:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8010a68:	f003 0301 	and.w	r3, r3, #1
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	d007      	beq.n	8010a80 <StartIotTask+0x68>
				sprintf(msg, "%s%s", msg, "TABRAKAN! ");
 8010a70:	f107 0208 	add.w	r2, r7, #8
 8010a74:	f107 0008 	add.w	r0, r7, #8
 8010a78:	4b1f      	ldr	r3, [pc, #124]	; (8010af8 <StartIotTask+0xe0>)
 8010a7a:	4920      	ldr	r1, [pc, #128]	; (8010afc <StartIotTask+0xe4>)
 8010a7c:	f001 fd80 	bl	8012580 <siprintf>
			}
			if ((ulNotifiedValue & EVENT_IOT_FALL) && !(ulNotifiedValue & EVENT_IOT_FALL_OFF)) {
 8010a80:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8010a84:	f003 0302 	and.w	r3, r3, #2
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d00d      	beq.n	8010aa8 <StartIotTask+0x90>
 8010a8c:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8010a90:	f003 0304 	and.w	r3, r3, #4
 8010a94:	2b00      	cmp	r3, #0
 8010a96:	d107      	bne.n	8010aa8 <StartIotTask+0x90>
				sprintf(msg, "%s%s", msg, "JATUH! ");
 8010a98:	f107 0208 	add.w	r2, r7, #8
 8010a9c:	f107 0008 	add.w	r0, r7, #8
 8010aa0:	4b17      	ldr	r3, [pc, #92]	; (8010b00 <StartIotTask+0xe8>)
 8010aa2:	4916      	ldr	r1, [pc, #88]	; (8010afc <StartIotTask+0xe4>)
 8010aa4:	f001 fd6c 	bl	8012580 <siprintf>
			}
		}
		// send full msg event
		Simcom_Set_Message(msg);
 8010aa8:	f107 0308 	add.w	r3, r7, #8
 8010aac:	4618      	mov	r0, r3
 8010aae:	f7fe fdab 	bl	800f608 <Simcom_Set_Message>

		// get processed gps data
		evt = osMailGet(GpsMailHandle, 0);
 8010ab2:	4b14      	ldr	r3, [pc, #80]	; (8010b04 <StartIotTask+0xec>)
 8010ab4:	6819      	ldr	r1, [r3, #0]
 8010ab6:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8010aba:	2200      	movs	r2, #0
 8010abc:	4618      	mov	r0, r3
 8010abe:	f7f6 ffe5 	bl	8007a8c <osMailGet>
		// Set payload GPS
		if (evt.status == osEventMail) {
 8010ac2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8010ac6:	2b20      	cmp	r3, #32
 8010ac8:	d104      	bne.n	8010ad4 <StartIotTask+0xbc>
			Simcom_Convert_GPS(evt.value.p);
 8010aca:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8010ace:	4618      	mov	r0, r3
 8010ad0:	f7fe fdac 	bl	800f62c <Simcom_Convert_GPS>
		}
		// Set payload
		Simcom_Set_Payload();
 8010ad4:	f7fe fe32 	bl	800f73c <Simcom_Set_Payload>
		// Send payload
		if (!Simcom_Send_Payload()) {
 8010ad8:	f7fe feba 	bl	800f850 <Simcom_Send_Payload>
 8010adc:	4603      	mov	r3, r0
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	d102      	bne.n	8010ae8 <StartIotTask+0xd0>
			Simcom_Init(1);
 8010ae2:	2001      	movs	r0, #1
 8010ae4:	f7fe fcae 	bl	800f444 <Simcom_Init>
		}
		// Report interval in second
		vTaskDelayUntil(&xLastWakeTime, xDelay_ms);
 8010ae8:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8010aec:	f8d7 1214 	ldr.w	r1, [r7, #532]	; 0x214
 8010af0:	4618      	mov	r0, r3
 8010af2:	f7f8 fa6b 	bl	8008fcc <vTaskDelayUntil>
		xResult = xTaskNotifyWait(0x00, ULONG_MAX, &ulNotifiedValue, 0);
 8010af6:	e7a3      	b.n	8010a40 <StartIotTask+0x28>
 8010af8:	08016388 	.word	0x08016388
 8010afc:	08016394 	.word	0x08016394
 8010b00:	0801639c 	.word	0x0801639c
 8010b04:	2000827c 	.word	0x2000827c

08010b08 <StartCanTask>:
 * @brief Function implementing the canTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartCanTask */
void StartCanTask(void const * argument) {
 8010b08:	b580      	push	{r7, lr}
 8010b0a:	b082      	sub	sp, #8
 8010b0c:	af00      	add	r7, sp, #0
 8010b0e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartCanTask */
	/* Infinite loop */
	for (;;) {
		//		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
		osDelay(500);
 8010b10:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8010b14:	f7f6 fd39 	bl	800758a <osDelay>
 8010b18:	e7fa      	b.n	8010b10 <StartCanTask+0x8>
	...

08010b1c <StartGyroTask>:
 * @brief Function implementing the gyroTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartGyroTask */
void StartGyroTask(void const * argument) {
 8010b1c:	b5b0      	push	{r4, r5, r7, lr}
 8010b1e:	b098      	sub	sp, #96	; 0x60
 8010b20:	af02      	add	r7, sp, #8
 8010b22:	61f8      	str	r0, [r7, #28]
	/* USER CODE BEGIN StartGyroTask */
	mems_t mems_calibration;
	mems_decision_t mems_decision;
	SD_MPU6050 mpu;
	/* MPU6050 Initialization*/
	MEMS_Init(&hi2c3, &mpu);
 8010b24:	f107 0320 	add.w	r3, r7, #32
 8010b28:	4619      	mov	r1, r3
 8010b2a:	4826      	ldr	r0, [pc, #152]	; (8010bc4 <StartGyroTask+0xa8>)
 8010b2c:	f7fc fa3c 	bl	800cfa8 <MEMS_Init>
	// Set calibrator
	mems_calibration = MEMS_Average(&hi2c3, &mpu, NULL, 500);
 8010b30:	4638      	mov	r0, r7
 8010b32:	f107 0220 	add.w	r2, r7, #32
 8010b36:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8010b3a:	9300      	str	r3, [sp, #0]
 8010b3c:	2300      	movs	r3, #0
 8010b3e:	4921      	ldr	r1, [pc, #132]	; (8010bc4 <StartGyroTask+0xa8>)
 8010b40:	f7fc fa64 	bl	800d00c <MEMS_Average>
 8010b44:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8010b48:	463d      	mov	r5, r7
 8010b4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010b4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010b4e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8010b52:	e884 0003 	stmia.w	r4, {r0, r1}
	// Give success indicator
	WaveBeepPlay(BEEP_FREQ_2000_HZ, 50);
 8010b56:	2132      	movs	r1, #50	; 0x32
 8010b58:	200e      	movs	r0, #14
 8010b5a:	f000 fc87 	bl	801146c <WaveBeepPlay>
	/* Infinite loop */
	for (;;) {
		// Read all accelerometer, gyroscope (average)
		mems_decision = MEMS_Decision(&hi2c3, &mpu, &mems_calibration, 25);
 8010b5e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8010b62:	f107 0120 	add.w	r1, r7, #32
 8010b66:	2319      	movs	r3, #25
 8010b68:	4816      	ldr	r0, [pc, #88]	; (8010bc4 <StartGyroTask+0xa8>)
 8010b6a:	f7fc fae9 	bl	800d140 <MEMS_Decision>
 8010b6e:	4603      	mov	r3, r0
 8010b70:	87bb      	strh	r3, [r7, #60]	; 0x3c
		// Check accelerometer, happens when impact detected
		if (mems_decision.crash) {
 8010b72:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	d006      	beq.n	8010b88 <StartGyroTask+0x6c>
			xTaskNotify(IotTaskHandle, EVENT_IOT_CRASH, eSetBits);
 8010b7a:	4b13      	ldr	r3, [pc, #76]	; (8010bc8 <StartGyroTask+0xac>)
 8010b7c:	6818      	ldr	r0, [r3, #0]
 8010b7e:	2300      	movs	r3, #0
 8010b80:	2201      	movs	r2, #1
 8010b82:	2101      	movs	r1, #1
 8010b84:	f7f9 f95c 	bl	8009e40 <xTaskGenericNotify>
		}
		// Check gyroscope, happens when fall detected
		if (mems_decision.fall) {
 8010b88:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8010b8c:	2b00      	cmp	r3, #0
 8010b8e:	d00b      	beq.n	8010ba8 <StartGyroTask+0x8c>
			xTaskNotify(IotTaskHandle, EVENT_IOT_FALL, eSetBits);
 8010b90:	4b0d      	ldr	r3, [pc, #52]	; (8010bc8 <StartGyroTask+0xac>)
 8010b92:	6818      	ldr	r0, [r3, #0]
 8010b94:	2300      	movs	r3, #0
 8010b96:	2201      	movs	r2, #1
 8010b98:	2102      	movs	r1, #2
 8010b9a:	f7f9 f951 	bl	8009e40 <xTaskGenericNotify>
			WaveBeepPlay(BEEP_FREQ_2000_HZ, 0);
 8010b9e:	2100      	movs	r1, #0
 8010ba0:	200e      	movs	r0, #14
 8010ba2:	f000 fc63 	bl	801146c <WaveBeepPlay>
 8010ba6:	e008      	b.n	8010bba <StartGyroTask+0x9e>
		} else {
			xTaskNotify(IotTaskHandle, EVENT_IOT_FALL_OFF, eSetBits);
 8010ba8:	4b07      	ldr	r3, [pc, #28]	; (8010bc8 <StartGyroTask+0xac>)
 8010baa:	6818      	ldr	r0, [r3, #0]
 8010bac:	2300      	movs	r3, #0
 8010bae:	2201      	movs	r2, #1
 8010bb0:	2104      	movs	r1, #4
 8010bb2:	f7f9 f945 	bl	8009e40 <xTaskGenericNotify>
			WaveBeepStop();
 8010bb6:	f000 fc93 	bl	80114e0 <WaveBeepStop>
		}
		// delay because it's priority is higher
		osDelay(50);
 8010bba:	2032      	movs	r0, #50	; 0x32
 8010bbc:	f7f6 fce5 	bl	800758a <osDelay>
		mems_decision = MEMS_Decision(&hi2c3, &mpu, &mems_calibration, 25);
 8010bc0:	e7cd      	b.n	8010b5e <StartGyroTask+0x42>
 8010bc2:	bf00      	nop
 8010bc4:	20008340 	.word	0x20008340
 8010bc8:	200085c0 	.word	0x200085c0

08010bcc <StartCommandTask>:
 * @brief Function implementing the commandTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartCommandTask */
void StartCommandTask(void const * argument) {
 8010bcc:	b5b0      	push	{r4, r5, r7, lr}
 8010bce:	b0b4      	sub	sp, #208	; 0xd0
 8010bd0:	af00      	add	r7, sp, #0
 8010bd2:	6078      	str	r0, [r7, #4]
	uint32_t ulNotifiedValue;
	BaseType_t xResult;
	command_t command;
	char response[100];
	int p;
	uint8_t newCommand = 0;
 8010bd4:	2300      	movs	r3, #0
 8010bd6:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
	uint32_t val;
	/* Infinite loop */
	for (;;) {
		newCommand = 0;
 8010bda:	2300      	movs	r3, #0
 8010bdc:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
		// check if command arrived from IOT Task
		xResult = xTaskNotifyWait(0x00, ULONG_MAX, &ulNotifiedValue, 0);
 8010be0:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 8010be4:	2300      	movs	r3, #0
 8010be6:	f04f 31ff 	mov.w	r1, #4294967295
 8010bea:	2000      	movs	r0, #0
 8010bec:	f7f9 f8ce 	bl	8009d8c <xTaskNotifyWait>
 8010bf0:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
		if (xResult == pdTRUE) {
 8010bf4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8010bf8:	2b01      	cmp	r3, #1
 8010bfa:	d108      	bne.n	8010c0e <StartCommandTask+0x42>
			if ((ulNotifiedValue & EVENT_COMMAND_ARRIVED)) {
 8010bfc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8010c00:	f003 0301 	and.w	r3, r3, #1
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	d002      	beq.n	8010c0e <StartCommandTask+0x42>
				newCommand = 1;
 8010c08:	2301      	movs	r3, #1
 8010c0a:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
			}
		}

		if (Simcom_Check_Command() || newCommand) {
 8010c0e:	f7fe fe8f 	bl	800f930 <Simcom_Check_Command>
 8010c12:	4603      	mov	r3, r0
 8010c14:	2b00      	cmp	r3, #0
 8010c16:	d104      	bne.n	8010c22 <StartCommandTask+0x56>
 8010c18:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 8010c1c:	2b00      	cmp	r3, #0
 8010c1e:	f000 815a 	beq.w	8010ed6 <StartCommandTask+0x30a>
			// read the command & execute
			if (Simcom_Get_Command(&command)) {
 8010c22:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8010c26:	4618      	mov	r0, r3
 8010c28:	f7fe fe94 	bl	800f954 <Simcom_Get_Command>
 8010c2c:	4603      	mov	r3, r0
 8010c2e:	2b00      	cmp	r3, #0
 8010c30:	f000 8151 	beq.w	8010ed6 <StartCommandTask+0x30a>
				// generic command response
				sprintf(response, "%s executed.", command.cmd);
 8010c34:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8010c38:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8010c3c:	f107 0308 	add.w	r3, r7, #8
 8010c40:	49a7      	ldr	r1, [pc, #668]	; (8010ee0 <StartCommandTask+0x314>)
 8010c42:	4618      	mov	r0, r3
 8010c44:	f001 fc9c 	bl	8012580 <siprintf>

				// BSP Led configuration
				if (strstr(command.var, "LED") != NULL) {
 8010c48:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8010c4c:	49a5      	ldr	r1, [pc, #660]	; (8010ee4 <StartCommandTask+0x318>)
 8010c4e:	4618      	mov	r0, r3
 8010c50:	f001 fcf2 	bl	8012638 <strstr>
 8010c54:	4603      	mov	r3, r0
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	d02f      	beq.n	8010cba <StartCommandTask+0xee>
					val = atoi(command.val);
 8010c5a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8010c5e:	3314      	adds	r3, #20
 8010c60:	4618      	mov	r0, r3
 8010c62:	f001 fc30 	bl	80124c6 <atoi>
 8010c66:	4603      	mov	r3, r0
 8010c68:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
					if (strcmp(command.var, "LED1") == 0) {
 8010c6c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8010c70:	499d      	ldr	r1, [pc, #628]	; (8010ee8 <StartCommandTask+0x31c>)
 8010c72:	4618      	mov	r0, r3
 8010c74:	f7ef faac 	bl	80001d0 <strcmp>
 8010c78:	4603      	mov	r3, r0
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	d109      	bne.n	8010c92 <StartCommandTask+0xc6>
						HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, val);
 8010c7e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8010c82:	b2db      	uxtb	r3, r3
 8010c84:	461a      	mov	r2, r3
 8010c86:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8010c8a:	4898      	ldr	r0, [pc, #608]	; (8010eec <StartCommandTask+0x320>)
 8010c8c:	f7f1 fc38 	bl	8002500 <HAL_GPIO_WritePin>
 8010c90:	e114      	b.n	8010ebc <StartCommandTask+0x2f0>
					} else if (strcmp(command.var, "LED2") == 0) {
 8010c92:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8010c96:	4996      	ldr	r1, [pc, #600]	; (8010ef0 <StartCommandTask+0x324>)
 8010c98:	4618      	mov	r0, r3
 8010c9a:	f7ef fa99 	bl	80001d0 <strcmp>
 8010c9e:	4603      	mov	r3, r0
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	f040 810b 	bne.w	8010ebc <StartCommandTask+0x2f0>
						HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, val);
 8010ca6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8010caa:	b2db      	uxtb	r3, r3
 8010cac:	461a      	mov	r2, r3
 8010cae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8010cb2:	488e      	ldr	r0, [pc, #568]	; (8010eec <StartCommandTask+0x320>)
 8010cb4:	f7f1 fc24 	bl	8002500 <HAL_GPIO_WritePin>
 8010cb8:	e100      	b.n	8010ebc <StartCommandTask+0x2f0>
					}
				}

				// RTC configuration
				else if (strcmp(command.var, "RTC") == 0) {
 8010cba:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8010cbe:	498d      	ldr	r1, [pc, #564]	; (8010ef4 <StartCommandTask+0x328>)
 8010cc0:	4618      	mov	r0, r3
 8010cc2:	f7ef fa85 	bl	80001d0 <strcmp>
 8010cc6:	4603      	mov	r3, r0
 8010cc8:	2b00      	cmp	r3, #0
 8010cca:	d106      	bne.n	8010cda <StartCommandTask+0x10e>
					Set_RTC(command.val);
 8010ccc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8010cd0:	3314      	adds	r3, #20
 8010cd2:	4618      	mov	r0, r3
 8010cd4:	f7fa ff54 	bl	800bb80 <Set_RTC>
 8010cd8:	e0f0      	b.n	8010ebc <StartCommandTask+0x2f0>
				}

				// Odometer configuration
				else if (strcmp(command.var, "ODOM") == 0) {
 8010cda:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8010cde:	4986      	ldr	r1, [pc, #536]	; (8010ef8 <StartCommandTask+0x32c>)
 8010ce0:	4618      	mov	r0, r3
 8010ce2:	f7ef fa75 	bl	80001d0 <strcmp>
 8010ce6:	4603      	mov	r3, r0
 8010ce8:	2b00      	cmp	r3, #0
 8010cea:	d10d      	bne.n	8010d08 <StartCommandTask+0x13c>
					val = atoi(command.val);
 8010cec:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8010cf0:	3314      	adds	r3, #20
 8010cf2:	4618      	mov	r0, r3
 8010cf4:	f001 fbe7 	bl	80124c6 <atoi>
 8010cf8:	4603      	mov	r3, r0
 8010cfa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
					Simcom_Set_Odometer(val);
 8010cfe:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8010d02:	f7fe feb5 	bl	800fa70 <Simcom_Set_Odometer>
 8010d06:	e0d9      	b.n	8010ebc <StartCommandTask+0x2f0>
				}

				// Information detail
				else if (strcmp(command.var, "INFO") == 0) {
 8010d08:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8010d0c:	497b      	ldr	r1, [pc, #492]	; (8010efc <StartCommandTask+0x330>)
 8010d0e:	4618      	mov	r0, r3
 8010d10:	f7ef fa5e 	bl	80001d0 <strcmp>
 8010d14:	4603      	mov	r3, r0
 8010d16:	2b00      	cmp	r3, #0
 8010d18:	d10b      	bne.n	8010d32 <StartCommandTask+0x166>
					sprintf(response, "HUB v.1.0\nGEN Indonesia @ 2019\n");
 8010d1a:	f107 0308 	add.w	r3, r7, #8
 8010d1e:	4a78      	ldr	r2, [pc, #480]	; (8010f00 <StartCommandTask+0x334>)
 8010d20:	461c      	mov	r4, r3
 8010d22:	4615      	mov	r5, r2
 8010d24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010d26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010d28:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8010d2c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8010d30:	e0c4      	b.n	8010ebc <StartCommandTask+0x2f0>
				}

				// Audio configuration
				else if (strstr(command.var, "AUDIO_") != NULL) {
 8010d32:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8010d36:	4973      	ldr	r1, [pc, #460]	; (8010f04 <StartCommandTask+0x338>)
 8010d38:	4618      	mov	r0, r3
 8010d3a:	f001 fc7d 	bl	8012638 <strstr>
 8010d3e:	4603      	mov	r3, r0
 8010d40:	2b00      	cmp	r3, #0
 8010d42:	d04b      	beq.n	8010ddc <StartCommandTask+0x210>
					if (strcmp(command.var, "AUDIO_BEEP") == 0) {
 8010d44:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8010d48:	496f      	ldr	r1, [pc, #444]	; (8010f08 <StartCommandTask+0x33c>)
 8010d4a:	4618      	mov	r0, r3
 8010d4c:	f7ef fa40 	bl	80001d0 <strcmp>
 8010d50:	4603      	mov	r3, r0
 8010d52:	2b00      	cmp	r3, #0
 8010d54:	d107      	bne.n	8010d66 <StartCommandTask+0x19a>
						xTaskNotify(AudioTaskHandle, EVENT_AUDIO_BEEP, eSetBits);
 8010d56:	4b6d      	ldr	r3, [pc, #436]	; (8010f0c <StartCommandTask+0x340>)
 8010d58:	6818      	ldr	r0, [r3, #0]
 8010d5a:	2300      	movs	r3, #0
 8010d5c:	2201      	movs	r2, #1
 8010d5e:	2101      	movs	r1, #1
 8010d60:	f7f9 f86e 	bl	8009e40 <xTaskGenericNotify>
 8010d64:	e0aa      	b.n	8010ebc <StartCommandTask+0x2f0>
					}

					else {
						val = atoi(command.val);
 8010d66:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8010d6a:	3314      	adds	r3, #20
 8010d6c:	4618      	mov	r0, r3
 8010d6e:	f001 fbaa 	bl	80124c6 <atoi>
 8010d72:	4603      	mov	r3, r0
 8010d74:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

						if (strcmp(command.var, "AUDIO_MUTE") == 0) {
 8010d78:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8010d7c:	4964      	ldr	r1, [pc, #400]	; (8010f10 <StartCommandTask+0x344>)
 8010d7e:	4618      	mov	r0, r3
 8010d80:	f7ef fa26 	bl	80001d0 <strcmp>
 8010d84:	4603      	mov	r3, r0
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	d113      	bne.n	8010db2 <StartCommandTask+0x1e6>
							if (val) {
 8010d8a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	d007      	beq.n	8010da2 <StartCommandTask+0x1d6>
								xTaskNotify(AudioTaskHandle, EVENT_AUDIO_MUTE_ON, eSetBits);
 8010d92:	4b5e      	ldr	r3, [pc, #376]	; (8010f0c <StartCommandTask+0x340>)
 8010d94:	6818      	ldr	r0, [r3, #0]
 8010d96:	2300      	movs	r3, #0
 8010d98:	2201      	movs	r2, #1
 8010d9a:	2102      	movs	r1, #2
 8010d9c:	f7f9 f850 	bl	8009e40 <xTaskGenericNotify>
 8010da0:	e08c      	b.n	8010ebc <StartCommandTask+0x2f0>
							} else {
								xTaskNotify(AudioTaskHandle, EVENT_AUDIO_MUTE_OFF, eSetBits);
 8010da2:	4b5a      	ldr	r3, [pc, #360]	; (8010f0c <StartCommandTask+0x340>)
 8010da4:	6818      	ldr	r0, [r3, #0]
 8010da6:	2300      	movs	r3, #0
 8010da8:	2201      	movs	r2, #1
 8010daa:	2104      	movs	r1, #4
 8010dac:	f7f9 f848 	bl	8009e40 <xTaskGenericNotify>
 8010db0:	e084      	b.n	8010ebc <StartCommandTask+0x2f0>
							}
						}

						else if (strcmp(command.var, "AUDIO_VOL") == 0) {
 8010db2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8010db6:	4957      	ldr	r1, [pc, #348]	; (8010f14 <StartCommandTask+0x348>)
 8010db8:	4618      	mov	r0, r3
 8010dba:	f7ef fa09 	bl	80001d0 <strcmp>
 8010dbe:	4603      	mov	r3, r0
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	d17b      	bne.n	8010ebc <StartCommandTask+0x2f0>
							osMessagePut(AudioVolQueueHandle, (uint8_t) val, osWaitForever);
 8010dc4:	4b54      	ldr	r3, [pc, #336]	; (8010f18 <StartCommandTask+0x34c>)
 8010dc6:	681b      	ldr	r3, [r3, #0]
 8010dc8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8010dcc:	b2d2      	uxtb	r2, r2
 8010dce:	4611      	mov	r1, r2
 8010dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8010dd4:	4618      	mov	r0, r3
 8010dd6:	f7f6 fd0f 	bl	80077f8 <osMessagePut>
 8010dda:	e06f      	b.n	8010ebc <StartCommandTask+0x2f0>
						}
					}
				}

				// Finger print configuration
				else if (strstr(command.var, "USER_") != NULL) {
 8010ddc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8010de0:	494e      	ldr	r1, [pc, #312]	; (8010f1c <StartCommandTask+0x350>)
 8010de2:	4618      	mov	r0, r3
 8010de4:	f001 fc28 	bl	8012638 <strstr>
 8010de8:	4603      	mov	r3, r0
 8010dea:	2b00      	cmp	r3, #0
 8010dec:	d05c      	beq.n	8010ea8 <StartCommandTask+0x2dc>
					val = atoi(command.val);
 8010dee:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8010df2:	3314      	adds	r3, #20
 8010df4:	4618      	mov	r0, r3
 8010df6:	f001 fb66 	bl	80124c6 <atoi>
 8010dfa:	4603      	mov	r3, r0
 8010dfc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

					if (strcmp(command.var, "USER_ADD") == 0) {
 8010e00:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8010e04:	4946      	ldr	r1, [pc, #280]	; (8010f20 <StartCommandTask+0x354>)
 8010e06:	4618      	mov	r0, r3
 8010e08:	f7ef f9e2 	bl	80001d0 <strcmp>
 8010e0c:	4603      	mov	r3, r0
 8010e0e:	2b00      	cmp	r3, #0
 8010e10:	d109      	bne.n	8010e26 <StartCommandTask+0x25a>
						p = Finger_Enroll(val);
 8010e12:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8010e16:	b2db      	uxtb	r3, r3
 8010e18:	4618      	mov	r0, r3
 8010e1a:	f7fb fb91 	bl	800c540 <Finger_Enroll>
 8010e1e:	4603      	mov	r3, r0
 8010e20:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8010e24:	e020      	b.n	8010e68 <StartCommandTask+0x29c>
					}

					else if (strcmp(command.var, "USER_DELETE") == 0) {
 8010e26:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8010e2a:	493e      	ldr	r1, [pc, #248]	; (8010f24 <StartCommandTask+0x358>)
 8010e2c:	4618      	mov	r0, r3
 8010e2e:	f7ef f9cf 	bl	80001d0 <strcmp>
 8010e32:	4603      	mov	r3, r0
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	d109      	bne.n	8010e4c <StartCommandTask+0x280>
						p = Finger_Delete_ID(val);
 8010e38:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8010e3c:	b2db      	uxtb	r3, r3
 8010e3e:	4618      	mov	r0, r3
 8010e40:	f7fb fd72 	bl	800c928 <Finger_Delete_ID>
 8010e44:	4603      	mov	r3, r0
 8010e46:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8010e4a:	e00d      	b.n	8010e68 <StartCommandTask+0x29c>
					}

					else if (strcmp(command.var, "USER_RESET") == 0) {
 8010e4c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8010e50:	4935      	ldr	r1, [pc, #212]	; (8010f28 <StartCommandTask+0x35c>)
 8010e52:	4618      	mov	r0, r3
 8010e54:	f7ef f9bc 	bl	80001d0 <strcmp>
 8010e58:	4603      	mov	r3, r0
 8010e5a:	2b00      	cmp	r3, #0
 8010e5c:	d104      	bne.n	8010e68 <StartCommandTask+0x29c>
						p = Finger_Empty_Database();
 8010e5e:	f7fb fdab 	bl	800c9b8 <Finger_Empty_Database>
 8010e62:	4603      	mov	r3, r0
 8010e64:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
					}

					sprintf(response, "%s", command.cmd);
 8010e68:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8010e6c:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8010e70:	f107 0308 	add.w	r3, r7, #8
 8010e74:	4611      	mov	r1, r2
 8010e76:	4618      	mov	r0, r3
 8010e78:	f001 fbaf 	bl	80125da <strcpy>
					if (p == FINGERPRINT_OK) {
 8010e7c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	d108      	bne.n	8010e96 <StartCommandTask+0x2ca>
						sprintf(response, "%s OK", response);
 8010e84:	f107 0208 	add.w	r2, r7, #8
 8010e88:	f107 0308 	add.w	r3, r7, #8
 8010e8c:	4927      	ldr	r1, [pc, #156]	; (8010f2c <StartCommandTask+0x360>)
 8010e8e:	4618      	mov	r0, r3
 8010e90:	f001 fb76 	bl	8012580 <siprintf>
 8010e94:	e012      	b.n	8010ebc <StartCommandTask+0x2f0>
					} else {
						sprintf(response, "%s ERROR", response);
 8010e96:	f107 0208 	add.w	r2, r7, #8
 8010e9a:	f107 0308 	add.w	r3, r7, #8
 8010e9e:	4924      	ldr	r1, [pc, #144]	; (8010f30 <StartCommandTask+0x364>)
 8010ea0:	4618      	mov	r0, r3
 8010ea2:	f001 fb6d 	bl	8012580 <siprintf>
 8010ea6:	e009      	b.n	8010ebc <StartCommandTask+0x2f0>
					}
				}

				else {
					sprintf(response, "%s not found.", command.cmd);
 8010ea8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8010eac:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8010eb0:	f107 0308 	add.w	r3, r7, #8
 8010eb4:	491f      	ldr	r1, [pc, #124]	; (8010f34 <StartCommandTask+0x368>)
 8010eb6:	4618      	mov	r0, r3
 8010eb8:	f001 fb62 	bl	8012580 <siprintf>
				}

				// send confirmation
				Simcom_To_Server(response, strlen(response));
 8010ebc:	f107 0308 	add.w	r3, r7, #8
 8010ec0:	4618      	mov	r0, r3
 8010ec2:	f7ef f98f 	bl	80001e4 <strlen>
 8010ec6:	4603      	mov	r3, r0
 8010ec8:	b29a      	uxth	r2, r3
 8010eca:	f107 0308 	add.w	r3, r7, #8
 8010ece:	4611      	mov	r1, r2
 8010ed0:	4618      	mov	r0, r3
 8010ed2:	f7fe fccd 	bl	800f870 <Simcom_To_Server>
			}
		}
		osDelay(100);
 8010ed6:	2064      	movs	r0, #100	; 0x64
 8010ed8:	f7f6 fb57 	bl	800758a <osDelay>
		newCommand = 0;
 8010edc:	e67d      	b.n	8010bda <StartCommandTask+0xe>
 8010ede:	bf00      	nop
 8010ee0:	080163a4 	.word	0x080163a4
 8010ee4:	080163b4 	.word	0x080163b4
 8010ee8:	080163b8 	.word	0x080163b8
 8010eec:	40020c00 	.word	0x40020c00
 8010ef0:	080163c0 	.word	0x080163c0
 8010ef4:	080163c8 	.word	0x080163c8
 8010ef8:	080163cc 	.word	0x080163cc
 8010efc:	080163d4 	.word	0x080163d4
 8010f00:	080163dc 	.word	0x080163dc
 8010f04:	080163fc 	.word	0x080163fc
 8010f08:	08016404 	.word	0x08016404
 8010f0c:	20008678 	.word	0x20008678
 8010f10:	08016410 	.word	0x08016410
 8010f14:	0801641c 	.word	0x0801641c
 8010f18:	2000862c 	.word	0x2000862c
 8010f1c:	08016428 	.word	0x08016428
 8010f20:	08016430 	.word	0x08016430
 8010f24:	0801643c 	.word	0x0801643c
 8010f28:	08016448 	.word	0x08016448
 8010f2c:	08016454 	.word	0x08016454
 8010f30:	0801645c 	.word	0x0801645c
 8010f34:	08016468 	.word	0x08016468

08010f38 <StartGpsTask>:
 * @brief Function implementing the GpsTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartGpsTask */
void StartGpsTask(void const * argument) {
 8010f38:	b580      	push	{r7, lr}
 8010f3a:	b0a2      	sub	sp, #136	; 0x88
 8010f3c:	af00      	add	r7, sp, #0
 8010f3e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartGpsTask */
	extern char UBLOX_UART_RX_Buffer[UBLOX_UART_RX_BUFFER_SIZE];
	const TickType_t xDelay_ms = pdMS_TO_TICKS(REPORT_INTERVAL*1000);
 8010f40:	f241 3388 	movw	r3, #5000	; 0x1388
 8010f44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	TickType_t xLastWakeTime;
	gps_t hgps;
	// Start GPS module
	UBLOX_DMA_Init();
 8010f48:	f7fa fc7a 	bl	800b840 <UBLOX_DMA_Init>
	Ublox_Init(&hgps);
 8010f4c:	f107 030c 	add.w	r3, r7, #12
 8010f50:	4618      	mov	r0, r3
 8010f52:	f7fe f85b 	bl	800f00c <Ublox_Init>
	/* Infinite loop */
	xLastWakeTime = xTaskGetTickCount();
 8010f56:	f7f8 f9ef 	bl	8009338 <xTaskGetTickCount>
 8010f5a:	4603      	mov	r3, r0
 8010f5c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	for (;;) {
		// get GPS info
		gps_process(&hgps, UBLOX_UART_RX_Buffer, strlen(UBLOX_UART_RX_Buffer));
 8010f60:	480c      	ldr	r0, [pc, #48]	; (8010f94 <StartGpsTask+0x5c>)
 8010f62:	f7ef f93f 	bl	80001e4 <strlen>
 8010f66:	4602      	mov	r2, r0
 8010f68:	f107 030c 	add.w	r3, r7, #12
 8010f6c:	4909      	ldr	r1, [pc, #36]	; (8010f94 <StartGpsTask+0x5c>)
 8010f6e:	4618      	mov	r0, r3
 8010f70:	f7fc ffdb 	bl	800df2a <gps_process>
		// hand-over data to IOT_Task
		osMailPut(GpsMailHandle, &hgps);
 8010f74:	4b08      	ldr	r3, [pc, #32]	; (8010f98 <StartGpsTask+0x60>)
 8010f76:	681b      	ldr	r3, [r3, #0]
 8010f78:	f107 020c 	add.w	r2, r7, #12
 8010f7c:	4611      	mov	r1, r2
 8010f7e:	4618      	mov	r0, r3
 8010f80:	f7f6 fd46 	bl	8007a10 <osMailPut>

		// Report interval in second
		vTaskDelayUntil(&xLastWakeTime, xDelay_ms);
 8010f84:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8010f88:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8010f8c:	4618      	mov	r0, r3
 8010f8e:	f7f8 f81d 	bl	8008fcc <vTaskDelayUntil>
		gps_process(&hgps, UBLOX_UART_RX_Buffer, strlen(UBLOX_UART_RX_Buffer));
 8010f92:	e7e5      	b.n	8010f60 <StartGpsTask+0x28>
 8010f94:	20007198 	.word	0x20007198
 8010f98:	2000827c 	.word	0x2000827c

08010f9c <StartFingerTask>:
 * @brief Function implementing the FingerTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartFingerTask */
void StartFingerTask(void const * argument) {
 8010f9c:	b580      	push	{r7, lr}
 8010f9e:	b086      	sub	sp, #24
 8010fa0:	af00      	add	r7, sp, #0
 8010fa2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartFingerTask */
	int p, firstOn = 1, firstOff = 1;
 8010fa4:	2301      	movs	r3, #1
 8010fa6:	617b      	str	r3, [r7, #20]
 8010fa8:	2301      	movs	r3, #1
 8010faa:	613b      	str	r3, [r7, #16]
	// Initialization

	FINGER_DMA_Init();
 8010fac:	f7f9 feda 	bl	800ad64 <FINGER_DMA_Init>
	Finger_Init();
 8010fb0:	f7fb faa8 	bl	800c504 <Finger_Init>
	/* Infinite loop */
	for (;;) {
		if (HAL_GPIO_ReadPin(FINGER_IRQ_GPIO_Port, FINGER_IRQ_Pin)) {
 8010fb4:	2140      	movs	r1, #64	; 0x40
 8010fb6:	4816      	ldr	r0, [pc, #88]	; (8011010 <StartFingerTask+0x74>)
 8010fb8:	f7f1 fa8a 	bl	80024d0 <HAL_GPIO_ReadPin>
 8010fbc:	4603      	mov	r3, r0
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	d016      	beq.n	8010ff0 <StartFingerTask+0x54>
			// there is finger on module
			if (firstOn) {
 8010fc2:	697b      	ldr	r3, [r7, #20]
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	d005      	beq.n	8010fd4 <StartFingerTask+0x38>
				// get mutex
				Finger_On();
 8010fc8:	f7fb fa7a 	bl	800c4c0 <Finger_On>
				firstOff = 1;
 8010fcc:	2301      	movs	r3, #1
 8010fce:	613b      	str	r3, [r7, #16]
				firstOn = 0;
 8010fd0:	2300      	movs	r3, #0
 8010fd2:	617b      	str	r3, [r7, #20]
			}
			// scanning
			p = Finger_Auth_Fast();
 8010fd4:	f7fb fd02 	bl	800c9dc <Finger_Auth_Fast>
 8010fd8:	4603      	mov	r3, r0
 8010fda:	60fb      	str	r3, [r7, #12]
			// indicator
			BSP_Led_Write((p > 0));
 8010fdc:	68fb      	ldr	r3, [r7, #12]
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	bfcc      	ite	gt
 8010fe2:	2301      	movgt	r3, #1
 8010fe4:	2300      	movle	r3, #0
 8010fe6:	b2db      	uxtb	r3, r3
 8010fe8:	4618      	mov	r0, r3
 8010fea:	f7fa fd5b 	bl	800baa4 <BSP_Led_Write>
 8010fee:	e00b      	b.n	8011008 <StartFingerTask+0x6c>
		} else {
			// no finger on module
			if (firstOff) {
 8010ff0:	693b      	ldr	r3, [r7, #16]
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	d008      	beq.n	8011008 <StartFingerTask+0x6c>
				firstOn = 1;
 8010ff6:	2301      	movs	r3, #1
 8010ff8:	617b      	str	r3, [r7, #20]
				firstOff = 0;
 8010ffa:	2300      	movs	r3, #0
 8010ffc:	613b      	str	r3, [r7, #16]
				// indicator
				BSP_Led_Write(0);
 8010ffe:	2000      	movs	r0, #0
 8011000:	f7fa fd50 	bl	800baa4 <BSP_Led_Write>
				// release mutex
				Finger_Off();
 8011004:	f7fb fa6c 	bl	800c4e0 <Finger_Off>
			}
		}
		osDelay(50);
 8011008:	2032      	movs	r0, #50	; 0x32
 801100a:	f7f6 fabe 	bl	800758a <osDelay>
		if (HAL_GPIO_ReadPin(FINGER_IRQ_GPIO_Port, FINGER_IRQ_Pin)) {
 801100e:	e7d1      	b.n	8010fb4 <StartFingerTask+0x18>
 8011010:	40021000 	.word	0x40021000

08011014 <StartAudioTask>:
 * @brief Function implementing the AudioTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartAudioTask */
void StartAudioTask(void const * argument) {
 8011014:	b580      	push	{r7, lr}
 8011016:	b088      	sub	sp, #32
 8011018:	af00      	add	r7, sp, #0
 801101a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartAudioTask */
	uint32_t ulNotifiedValue;
	BaseType_t xResult;
	osEvent evt;
	/* Initialize Wave player (Codec, DMA, I2C) */
	WaveInit();
 801101c:	f000 f9de 	bl	80113dc <WaveInit>
	// Play wave loop forever, handover to DMA, so CPU is free
	WavePlay();
 8011020:	f000 f9fe 	bl	8011420 <WavePlay>
	/* Infinite loop */
	for (;;) {
		// check if get volume message
		evt = osMessageGet(AudioVolQueueHandle, 0);
 8011024:	4b20      	ldr	r3, [pc, #128]	; (80110a8 <StartAudioTask+0x94>)
 8011026:	6819      	ldr	r1, [r3, #0]
 8011028:	f107 030c 	add.w	r3, r7, #12
 801102c:	2200      	movs	r2, #0
 801102e:	4618      	mov	r0, r3
 8011030:	f7f6 fc22 	bl	8007878 <osMessageGet>
		// do this if message arrived
		if (evt.status == osEventMessage) {
 8011034:	68fb      	ldr	r3, [r7, #12]
 8011036:	2b10      	cmp	r3, #16
 8011038:	d104      	bne.n	8011044 <StartAudioTask+0x30>
			BSP_AUDIO_OUT_SetVolume((uint8_t) evt.value.v);
 801103a:	693b      	ldr	r3, [r7, #16]
 801103c:	b2db      	uxtb	r3, r3
 801103e:	4618      	mov	r0, r3
 8011040:	f000 faf6 	bl	8011630 <BSP_AUDIO_OUT_SetVolume>
		}

		// check if event happen
		xResult = xTaskNotifyWait(0x00, ULONG_MAX, &ulNotifiedValue, 0);
 8011044:	f107 0218 	add.w	r2, r7, #24
 8011048:	2300      	movs	r3, #0
 801104a:	f04f 31ff 	mov.w	r1, #4294967295
 801104e:	2000      	movs	r0, #0
 8011050:	f7f8 fe9c 	bl	8009d8c <xTaskNotifyWait>
 8011054:	61f8      	str	r0, [r7, #28]
		// do this if events occurred
		if (xResult == pdTRUE) {
 8011056:	69fb      	ldr	r3, [r7, #28]
 8011058:	2b01      	cmp	r3, #1
 801105a:	d11f      	bne.n	801109c <StartAudioTask+0x88>
			// Beep command
			if ((ulNotifiedValue & EVENT_AUDIO_BEEP)) {
 801105c:	69bb      	ldr	r3, [r7, #24]
 801105e:	f003 0301 	and.w	r3, r3, #1
 8011062:	2b00      	cmp	r3, #0
 8011064:	d00a      	beq.n	801107c <StartAudioTask+0x68>
				// Beep
				WaveBeepPlay(BEEP_FREQ_2000_HZ, 250);
 8011066:	21fa      	movs	r1, #250	; 0xfa
 8011068:	200e      	movs	r0, #14
 801106a:	f000 f9ff 	bl	801146c <WaveBeepPlay>
				osDelay(250);
 801106e:	20fa      	movs	r0, #250	; 0xfa
 8011070:	f7f6 fa8b 	bl	800758a <osDelay>
				WaveBeepPlay(BEEP_FREQ_2000_HZ, 250);
 8011074:	21fa      	movs	r1, #250	; 0xfa
 8011076:	200e      	movs	r0, #14
 8011078:	f000 f9f8 	bl	801146c <WaveBeepPlay>
			}
			// Mute command
			if ((ulNotifiedValue & EVENT_AUDIO_MUTE_ON)) {
 801107c:	69bb      	ldr	r3, [r7, #24]
 801107e:	f003 0302 	and.w	r3, r3, #2
 8011082:	2b00      	cmp	r3, #0
 8011084:	d002      	beq.n	801108c <StartAudioTask+0x78>
				BSP_AUDIO_OUT_SetMute(AUDIO_MUTE_ON);
 8011086:	2001      	movs	r0, #1
 8011088:	f000 faea 	bl	8011660 <BSP_AUDIO_OUT_SetMute>
			}
			if ((ulNotifiedValue & EVENT_AUDIO_MUTE_OFF)) {
 801108c:	69bb      	ldr	r3, [r7, #24]
 801108e:	f003 0304 	and.w	r3, r3, #4
 8011092:	2b00      	cmp	r3, #0
 8011094:	d002      	beq.n	801109c <StartAudioTask+0x88>
				BSP_AUDIO_OUT_SetMute(AUDIO_MUTE_OFF);
 8011096:	2000      	movs	r0, #0
 8011098:	f000 fae2 	bl	8011660 <BSP_AUDIO_OUT_SetMute>
			}
		}

		osDelay(500);
 801109c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80110a0:	f7f6 fa73 	bl	800758a <osDelay>
		evt = osMessageGet(AudioVolQueueHandle, 0);
 80110a4:	e7be      	b.n	8011024 <StartAudioTask+0x10>
 80110a6:	bf00      	nop
 80110a8:	2000862c 	.word	0x2000862c

080110ac <StartKeylessTask>:
 * @brief Function implementing the KeylessTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartKeylessTask */
void StartKeylessTask(void const * argument) {
 80110ac:	b580      	push	{r7, lr}
 80110ae:	b092      	sub	sp, #72	; 0x48
 80110b0:	af00      	add	r7, sp, #0
 80110b2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartKeylessTask */
	extern nrf24l01 nrf;
	uint32_t rx_data;
	nrf24l01_config config;
	uint32_t tx_data = 0xDEADBEEF;
 80110b4:	4b12      	ldr	r3, [pc, #72]	; (8011100 <StartKeylessTask+0x54>)
 80110b6:	647b      	str	r3, [r7, #68]	; 0x44
	// set configuration
	{
		nrf_set_config(&config);
 80110b8:	f107 030c 	add.w	r3, r7, #12
 80110bc:	4618      	mov	r0, r3
 80110be:	f7fd f8e5 	bl	800e28c <nrf_set_config>
		config.payload_length = 4;    // maximum is 32 bytes
 80110c2:	2304      	movs	r3, #4
 80110c4:	743b      	strb	r3, [r7, #16]
		config.rx_buffer = (uint8_t*) &rx_data;
 80110c6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80110ca:	61fb      	str	r3, [r7, #28]
	}
	// initialization
	nrf_init(&nrf, &config);
 80110cc:	f107 030c 	add.w	r3, r7, #12
 80110d0:	4619      	mov	r1, r3
 80110d2:	480c      	ldr	r0, [pc, #48]	; (8011104 <StartKeylessTask+0x58>)
 80110d4:	f7fd f922 	bl	800e31c <nrf_init>
	//	// send packet (blocking)
	//	nrf_send_packet(&nrf, (uint8_t*) &tx_data);
	/* Infinite loop */
	for (;;) {
		swvPrintLn("NRF check arrived packet");
 80110d8:	480b      	ldr	r0, [pc, #44]	; (8011108 <StartKeylessTask+0x5c>)
 80110da:	f7fa fc2b 	bl	800b934 <swvPrintLn>
		// receive packet (blocking)
		nrf_receive_packet(&nrf);
 80110de:	4809      	ldr	r0, [pc, #36]	; (8011104 <StartKeylessTask+0x58>)
 80110e0:	f7fd ff62 	bl	800efa8 <nrf_receive_packet>
		// check received packet
		if (tx_data != rx_data) {
 80110e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80110e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80110e8:	429a      	cmp	r2, r3
 80110ea:	d002      	beq.n	80110f2 <StartKeylessTask+0x46>
			swvPrintLn("NRF data not same");
 80110ec:	4807      	ldr	r0, [pc, #28]	; (801110c <StartKeylessTask+0x60>)
 80110ee:	f7fa fc21 	bl	800b934 <swvPrintLn>
		}
		// indicator
		BSP_Led_Toggle();
 80110f2:	f7fa fcff 	bl	800baf4 <BSP_Led_Toggle>

		osDelay(500);
 80110f6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80110fa:	f7f6 fa46 	bl	800758a <osDelay>
		swvPrintLn("NRF check arrived packet");
 80110fe:	e7eb      	b.n	80110d8 <StartKeylessTask+0x2c>
 8011100:	deadbeef 	.word	0xdeadbeef
 8011104:	200075ec 	.word	0x200075ec
 8011108:	08016478 	.word	0x08016478
 801110c:	08016494 	.word	0x08016494

08011110 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8011110:	b580      	push	{r7, lr}
 8011112:	b082      	sub	sp, #8
 8011114:	af00      	add	r7, sp, #0
 8011116:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	681b      	ldr	r3, [r3, #0]
 801111c:	4a04      	ldr	r2, [pc, #16]	; (8011130 <HAL_TIM_PeriodElapsedCallback+0x20>)
 801111e:	4293      	cmp	r3, r2
 8011120:	d101      	bne.n	8011126 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8011122:	f7ef ff63 	bl	8000fec <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8011126:	bf00      	nop
 8011128:	3708      	adds	r7, #8
 801112a:	46bd      	mov	sp, r7
 801112c:	bd80      	pop	{r7, pc}
 801112e:	bf00      	nop
 8011130:	40010000 	.word	0x40010000

08011134 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8011134:	b580      	push	{r7, lr}
 8011136:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	swvPrintLn("Error occurrence.\n");
 8011138:	4802      	ldr	r0, [pc, #8]	; (8011144 <Error_Handler+0x10>)
 801113a:	f7fa fbfb 	bl	800b934 <swvPrintLn>
	/* USER CODE END Error_Handler_Debug */
}
 801113e:	bf00      	nop
 8011140:	bd80      	pop	{r7, pc}
 8011142:	bf00      	nop
 8011144:	080164a8 	.word	0x080164a8

08011148 <I2Cx_Init>:

/******************************* I2C Routines**********************************/
/**
 * @brief  Configures I2C interface.
 */
static void I2Cx_Init(void) {
 8011148:	b580      	push	{r7, lr}
 801114a:	af00      	add	r7, sp, #0
	if (HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET) {
 801114c:	480e      	ldr	r0, [pc, #56]	; (8011188 <I2Cx_Init+0x40>)
 801114e:	f7f2 fae1 	bl	8003714 <HAL_I2C_GetState>
 8011152:	4603      	mov	r3, r0
 8011154:	2b00      	cmp	r3, #0
 8011156:	d114      	bne.n	8011182 <I2Cx_Init+0x3a>
		/* DISCOVERY_I2Cx peripheral configuration */
		I2cHandle.Init.ClockSpeed = BSP_I2C_SPEED;
 8011158:	4b0b      	ldr	r3, [pc, #44]	; (8011188 <I2Cx_Init+0x40>)
 801115a:	4a0c      	ldr	r2, [pc, #48]	; (801118c <I2Cx_Init+0x44>)
 801115c:	605a      	str	r2, [r3, #4]
		I2cHandle.Init.DutyCycle = I2C_DUTYCYCLE_2;
 801115e:	4b0a      	ldr	r3, [pc, #40]	; (8011188 <I2Cx_Init+0x40>)
 8011160:	2200      	movs	r2, #0
 8011162:	609a      	str	r2, [r3, #8]
		I2cHandle.Init.OwnAddress1 = 0x33;
 8011164:	4b08      	ldr	r3, [pc, #32]	; (8011188 <I2Cx_Init+0x40>)
 8011166:	2233      	movs	r2, #51	; 0x33
 8011168:	60da      	str	r2, [r3, #12]
		I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 801116a:	4b07      	ldr	r3, [pc, #28]	; (8011188 <I2Cx_Init+0x40>)
 801116c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8011170:	611a      	str	r2, [r3, #16]
		I2cHandle.Instance = DISCOVERY_I2Cx;
 8011172:	4b05      	ldr	r3, [pc, #20]	; (8011188 <I2Cx_Init+0x40>)
 8011174:	4a06      	ldr	r2, [pc, #24]	; (8011190 <I2Cx_Init+0x48>)
 8011176:	601a      	str	r2, [r3, #0]

		/* Init the I2C */
		I2Cx_MspInit();
 8011178:	f000 f876 	bl	8011268 <I2Cx_MspInit>
		HAL_I2C_Init(&I2cHandle);
 801117c:	4802      	ldr	r0, [pc, #8]	; (8011188 <I2Cx_Init+0x40>)
 801117e:	f7f1 fa0b 	bl	8002598 <HAL_I2C_Init>
	}
}
 8011182:	bf00      	nop
 8011184:	bd80      	pop	{r7, pc}
 8011186:	bf00      	nop
 8011188:	2000678c 	.word	0x2000678c
 801118c:	000186a0 	.word	0x000186a0
 8011190:	40005400 	.word	0x40005400

08011194 <I2Cx_WriteData>:
 * @param  Addr: Device address on BUS Bus.
 * @param  Reg: The target register address to write
 * @param  Value: The target register value to be written
 * @retval HAL status
 */
static void I2Cx_WriteData(uint8_t Addr, uint8_t Reg, uint8_t Value) {
 8011194:	b580      	push	{r7, lr}
 8011196:	b088      	sub	sp, #32
 8011198:	af04      	add	r7, sp, #16
 801119a:	4603      	mov	r3, r0
 801119c:	71fb      	strb	r3, [r7, #7]
 801119e:	460b      	mov	r3, r1
 80111a0:	71bb      	strb	r3, [r7, #6]
 80111a2:	4613      	mov	r3, r2
 80111a4:	717b      	strb	r3, [r7, #5]
	HAL_StatusTypeDef status = HAL_OK;
 80111a6:	2300      	movs	r3, #0
 80111a8:	73fb      	strb	r3, [r7, #15]

	status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t) Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 80111aa:	79fb      	ldrb	r3, [r7, #7]
 80111ac:	b299      	uxth	r1, r3
 80111ae:	79bb      	ldrb	r3, [r7, #6]
 80111b0:	b29a      	uxth	r2, r3
 80111b2:	4b0c      	ldr	r3, [pc, #48]	; (80111e4 <I2Cx_WriteData+0x50>)
 80111b4:	681b      	ldr	r3, [r3, #0]
 80111b6:	9302      	str	r3, [sp, #8]
 80111b8:	2301      	movs	r3, #1
 80111ba:	9301      	str	r3, [sp, #4]
 80111bc:	1d7b      	adds	r3, r7, #5
 80111be:	9300      	str	r3, [sp, #0]
 80111c0:	2301      	movs	r3, #1
 80111c2:	4809      	ldr	r0, [pc, #36]	; (80111e8 <I2Cx_WriteData+0x54>)
 80111c4:	f7f1 fe64 	bl	8002e90 <HAL_I2C_Mem_Write>
 80111c8:	4603      	mov	r3, r0
 80111ca:	73fb      	strb	r3, [r7, #15]

	/* Check the communication status */
	if (status != HAL_OK) {
 80111cc:	7bfb      	ldrb	r3, [r7, #15]
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	d003      	beq.n	80111da <I2Cx_WriteData+0x46>
		/* Execute user timeout callback */
		I2Cx_Error(Addr);
 80111d2:	79fb      	ldrb	r3, [r7, #7]
 80111d4:	4618      	mov	r0, r3
 80111d6:	f000 f837 	bl	8011248 <I2Cx_Error>
	}
}
 80111da:	bf00      	nop
 80111dc:	3710      	adds	r7, #16
 80111de:	46bd      	mov	sp, r7
 80111e0:	bd80      	pop	{r7, pc}
 80111e2:	bf00      	nop
 80111e4:	20000048 	.word	0x20000048
 80111e8:	2000678c 	.word	0x2000678c

080111ec <I2Cx_ReadData>:
 * @brief  Read a register of the device through BUS
 * @param  Addr: Device address on BUS
 * @param  Reg: The target register address to read
 * @retval HAL status
 */
static uint8_t I2Cx_ReadData(uint8_t Addr, uint8_t Reg) {
 80111ec:	b580      	push	{r7, lr}
 80111ee:	b088      	sub	sp, #32
 80111f0:	af04      	add	r7, sp, #16
 80111f2:	4603      	mov	r3, r0
 80111f4:	460a      	mov	r2, r1
 80111f6:	71fb      	strb	r3, [r7, #7]
 80111f8:	4613      	mov	r3, r2
 80111fa:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef status = HAL_OK;
 80111fc:	2300      	movs	r3, #0
 80111fe:	73fb      	strb	r3, [r7, #15]
	uint8_t value = 0;
 8011200:	2300      	movs	r3, #0
 8011202:	73bb      	strb	r3, [r7, #14]

	status = HAL_I2C_Mem_Read(&I2cHandle, Addr, (uint16_t) Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8011204:	79fb      	ldrb	r3, [r7, #7]
 8011206:	b299      	uxth	r1, r3
 8011208:	79bb      	ldrb	r3, [r7, #6]
 801120a:	b29a      	uxth	r2, r3
 801120c:	4b0c      	ldr	r3, [pc, #48]	; (8011240 <I2Cx_ReadData+0x54>)
 801120e:	681b      	ldr	r3, [r3, #0]
 8011210:	9302      	str	r3, [sp, #8]
 8011212:	2301      	movs	r3, #1
 8011214:	9301      	str	r3, [sp, #4]
 8011216:	f107 030e 	add.w	r3, r7, #14
 801121a:	9300      	str	r3, [sp, #0]
 801121c:	2301      	movs	r3, #1
 801121e:	4809      	ldr	r0, [pc, #36]	; (8011244 <I2Cx_ReadData+0x58>)
 8011220:	f7f1 ff30 	bl	8003084 <HAL_I2C_Mem_Read>
 8011224:	4603      	mov	r3, r0
 8011226:	73fb      	strb	r3, [r7, #15]

	/* Check the communication status */
	if (status != HAL_OK) {
 8011228:	7bfb      	ldrb	r3, [r7, #15]
 801122a:	2b00      	cmp	r3, #0
 801122c:	d003      	beq.n	8011236 <I2Cx_ReadData+0x4a>
		/* Execute user timeout callback */
		I2Cx_Error(Addr);
 801122e:	79fb      	ldrb	r3, [r7, #7]
 8011230:	4618      	mov	r0, r3
 8011232:	f000 f809 	bl	8011248 <I2Cx_Error>
	}
	return value;
 8011236:	7bbb      	ldrb	r3, [r7, #14]
}
 8011238:	4618      	mov	r0, r3
 801123a:	3710      	adds	r7, #16
 801123c:	46bd      	mov	sp, r7
 801123e:	bd80      	pop	{r7, pc}
 8011240:	20000048 	.word	0x20000048
 8011244:	2000678c 	.word	0x2000678c

08011248 <I2Cx_Error>:

/**
 * @brief  Manages error callback by re-initializing I2C.
 * @param  Addr: I2C Address
 */
static void I2Cx_Error(uint8_t Addr) {
 8011248:	b580      	push	{r7, lr}
 801124a:	b082      	sub	sp, #8
 801124c:	af00      	add	r7, sp, #0
 801124e:	4603      	mov	r3, r0
 8011250:	71fb      	strb	r3, [r7, #7]
	/* De-initialize the I2C communication bus */
	HAL_I2C_DeInit(&I2cHandle);
 8011252:	4804      	ldr	r0, [pc, #16]	; (8011264 <I2Cx_Error+0x1c>)
 8011254:	f7f1 fac8 	bl	80027e8 <HAL_I2C_DeInit>

	/* Re-Initialize the I2C communication bus */
	I2Cx_Init();
 8011258:	f7ff ff76 	bl	8011148 <I2Cx_Init>
}
 801125c:	bf00      	nop
 801125e:	3708      	adds	r7, #8
 8011260:	46bd      	mov	sp, r7
 8011262:	bd80      	pop	{r7, pc}
 8011264:	2000678c 	.word	0x2000678c

08011268 <I2Cx_MspInit>:

/**
 * @brief I2C MSP Initialization
 */
static void I2Cx_MspInit(void) {
 8011268:	b580      	push	{r7, lr}
 801126a:	b088      	sub	sp, #32
 801126c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;

	/* Enable I2C GPIO clocks */
	DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE()
 801126e:	2300      	movs	r3, #0
 8011270:	60bb      	str	r3, [r7, #8]
 8011272:	4b25      	ldr	r3, [pc, #148]	; (8011308 <I2Cx_MspInit+0xa0>)
 8011274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011276:	4a24      	ldr	r2, [pc, #144]	; (8011308 <I2Cx_MspInit+0xa0>)
 8011278:	f043 0302 	orr.w	r3, r3, #2
 801127c:	6313      	str	r3, [r2, #48]	; 0x30
 801127e:	4b22      	ldr	r3, [pc, #136]	; (8011308 <I2Cx_MspInit+0xa0>)
 8011280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011282:	f003 0302 	and.w	r3, r3, #2
 8011286:	60bb      	str	r3, [r7, #8]
 8011288:	68bb      	ldr	r3, [r7, #8]
	;

	/* DISCOVERY_I2Cx SCL and SDA pins configuration ---------------------------*/
	GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 801128a:	f44f 7310 	mov.w	r3, #576	; 0x240
 801128e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8011290:	2312      	movs	r3, #18
 8011292:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8011294:	2302      	movs	r3, #2
 8011296:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011298:	2300      	movs	r3, #0
 801129a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 801129c:	2304      	movs	r3, #4
 801129e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &GPIO_InitStruct);
 80112a0:	f107 030c 	add.w	r3, r7, #12
 80112a4:	4619      	mov	r1, r3
 80112a6:	4819      	ldr	r0, [pc, #100]	; (801130c <I2Cx_MspInit+0xa4>)
 80112a8:	f7f0 fe7e 	bl	8001fa8 <HAL_GPIO_Init>

	/* Enable the DISCOVERY_I2Cx peripheral clock */
	DISCOVERY_I2Cx_CLK_ENABLE()
 80112ac:	2300      	movs	r3, #0
 80112ae:	607b      	str	r3, [r7, #4]
 80112b0:	4b15      	ldr	r3, [pc, #84]	; (8011308 <I2Cx_MspInit+0xa0>)
 80112b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80112b4:	4a14      	ldr	r2, [pc, #80]	; (8011308 <I2Cx_MspInit+0xa0>)
 80112b6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80112ba:	6413      	str	r3, [r2, #64]	; 0x40
 80112bc:	4b12      	ldr	r3, [pc, #72]	; (8011308 <I2Cx_MspInit+0xa0>)
 80112be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80112c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80112c4:	607b      	str	r3, [r7, #4]
 80112c6:	687b      	ldr	r3, [r7, #4]
	;

	/* Force the I2C peripheral clock reset */
	DISCOVERY_I2Cx_FORCE_RESET();
 80112c8:	4b0f      	ldr	r3, [pc, #60]	; (8011308 <I2Cx_MspInit+0xa0>)
 80112ca:	6a1b      	ldr	r3, [r3, #32]
 80112cc:	4a0e      	ldr	r2, [pc, #56]	; (8011308 <I2Cx_MspInit+0xa0>)
 80112ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80112d2:	6213      	str	r3, [r2, #32]

	/* Release the I2C peripheral clock reset */
	DISCOVERY_I2Cx_RELEASE_RESET();
 80112d4:	4b0c      	ldr	r3, [pc, #48]	; (8011308 <I2Cx_MspInit+0xa0>)
 80112d6:	6a1b      	ldr	r3, [r3, #32]
 80112d8:	4a0b      	ldr	r2, [pc, #44]	; (8011308 <I2Cx_MspInit+0xa0>)
 80112da:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80112de:	6213      	str	r3, [r2, #32]

	/* Enable and set I2Cx Interrupt to the highest priority */
	HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0, 0);
 80112e0:	2200      	movs	r2, #0
 80112e2:	2100      	movs	r1, #0
 80112e4:	201f      	movs	r0, #31
 80112e6:	f7ef ff7b 	bl	80011e0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 80112ea:	201f      	movs	r0, #31
 80112ec:	f7ef ff94 	bl	8001218 <HAL_NVIC_EnableIRQ>

	/* Enable and set I2Cx Interrupt to the highest priority */
	HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0, 0);
 80112f0:	2200      	movs	r2, #0
 80112f2:	2100      	movs	r1, #0
 80112f4:	2020      	movs	r0, #32
 80112f6:	f7ef ff73 	bl	80011e0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 80112fa:	2020      	movs	r0, #32
 80112fc:	f7ef ff8c 	bl	8001218 <HAL_NVIC_EnableIRQ>
}
 8011300:	bf00      	nop
 8011302:	3720      	adds	r7, #32
 8011304:	46bd      	mov	sp, r7
 8011306:	bd80      	pop	{r7, pc}
 8011308:	40023800 	.word	0x40023800
 801130c:	40020400 	.word	0x40020400

08011310 <AUDIO_IO_Init>:
/********************************* LINK AUDIO *********************************/

/**
 * @brief  Initializes Audio low level.
 */
void AUDIO_IO_Init(void) {
 8011310:	b580      	push	{r7, lr}
 8011312:	b086      	sub	sp, #24
 8011314:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;

	/* Enable Reset GPIO Clock */
	AUDIO_RESET_GPIO_CLK_ENABLE()
 8011316:	2300      	movs	r3, #0
 8011318:	603b      	str	r3, [r7, #0]
 801131a:	4b17      	ldr	r3, [pc, #92]	; (8011378 <AUDIO_IO_Init+0x68>)
 801131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801131e:	4a16      	ldr	r2, [pc, #88]	; (8011378 <AUDIO_IO_Init+0x68>)
 8011320:	f043 0308 	orr.w	r3, r3, #8
 8011324:	6313      	str	r3, [r2, #48]	; 0x30
 8011326:	4b14      	ldr	r3, [pc, #80]	; (8011378 <AUDIO_IO_Init+0x68>)
 8011328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801132a:	f003 0308 	and.w	r3, r3, #8
 801132e:	603b      	str	r3, [r7, #0]
 8011330:	683b      	ldr	r3, [r7, #0]
	;

	/* Audio reset pin configuration */
	GPIO_InitStruct.Pin = AUDIO_RESET_PIN;
 8011332:	2310      	movs	r3, #16
 8011334:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011336:	2301      	movs	r3, #1
 8011338:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 801133a:	2302      	movs	r3, #2
 801133c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 801133e:	2300      	movs	r3, #0
 8011340:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStruct);
 8011342:	1d3b      	adds	r3, r7, #4
 8011344:	4619      	mov	r1, r3
 8011346:	480d      	ldr	r0, [pc, #52]	; (801137c <AUDIO_IO_Init+0x6c>)
 8011348:	f7f0 fe2e 	bl	8001fa8 <HAL_GPIO_Init>

	I2Cx_Init();
 801134c:	f7ff fefc 	bl	8011148 <I2Cx_Init>

	/* Power Down the codec */
	HAL_GPIO_WritePin(AUDIO_RESET_GPIO, AUDIO_RESET_PIN, GPIO_PIN_RESET);
 8011350:	2200      	movs	r2, #0
 8011352:	2110      	movs	r1, #16
 8011354:	4809      	ldr	r0, [pc, #36]	; (801137c <AUDIO_IO_Init+0x6c>)
 8011356:	f7f1 f8d3 	bl	8002500 <HAL_GPIO_WritePin>

	/* Wait for a delay to insure registers erasing */
	HAL_Delay(5);
 801135a:	2005      	movs	r0, #5
 801135c:	f7ef fe66 	bl	800102c <HAL_Delay>

	/* Power on the codec */
	HAL_GPIO_WritePin(AUDIO_RESET_GPIO, AUDIO_RESET_PIN, GPIO_PIN_SET);
 8011360:	2201      	movs	r2, #1
 8011362:	2110      	movs	r1, #16
 8011364:	4805      	ldr	r0, [pc, #20]	; (801137c <AUDIO_IO_Init+0x6c>)
 8011366:	f7f1 f8cb 	bl	8002500 <HAL_GPIO_WritePin>

	/* Wait for a delay to insure registers erasing */
	HAL_Delay(5);
 801136a:	2005      	movs	r0, #5
 801136c:	f7ef fe5e 	bl	800102c <HAL_Delay>
}
 8011370:	bf00      	nop
 8011372:	3718      	adds	r7, #24
 8011374:	46bd      	mov	sp, r7
 8011376:	bd80      	pop	{r7, pc}
 8011378:	40023800 	.word	0x40023800
 801137c:	40020c00 	.word	0x40020c00

08011380 <AUDIO_IO_DeInit>:

/**
 * @brief  DeInitializes Audio low level.
 */
void AUDIO_IO_DeInit(void) {
 8011380:	b480      	push	{r7}
 8011382:	af00      	add	r7, sp, #0

}
 8011384:	bf00      	nop
 8011386:	46bd      	mov	sp, r7
 8011388:	f85d 7b04 	ldr.w	r7, [sp], #4
 801138c:	4770      	bx	lr

0801138e <AUDIO_IO_Write>:
 * @brief  Writes a single data.
 * @param  Addr: I2C address
 * @param  Reg: Reg address
 * @param  Value: Data to be written
 */
void AUDIO_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value) {
 801138e:	b580      	push	{r7, lr}
 8011390:	b082      	sub	sp, #8
 8011392:	af00      	add	r7, sp, #0
 8011394:	4603      	mov	r3, r0
 8011396:	71fb      	strb	r3, [r7, #7]
 8011398:	460b      	mov	r3, r1
 801139a:	71bb      	strb	r3, [r7, #6]
 801139c:	4613      	mov	r3, r2
 801139e:	717b      	strb	r3, [r7, #5]
	I2Cx_WriteData(Addr, Reg, Value);
 80113a0:	797a      	ldrb	r2, [r7, #5]
 80113a2:	79b9      	ldrb	r1, [r7, #6]
 80113a4:	79fb      	ldrb	r3, [r7, #7]
 80113a6:	4618      	mov	r0, r3
 80113a8:	f7ff fef4 	bl	8011194 <I2Cx_WriteData>
}
 80113ac:	bf00      	nop
 80113ae:	3708      	adds	r7, #8
 80113b0:	46bd      	mov	sp, r7
 80113b2:	bd80      	pop	{r7, pc}

080113b4 <AUDIO_IO_Read>:
 * @brief  Reads a single data.
 * @param  Addr: I2C address
 * @param  Reg: Reg address
 * @retval Data to be read
 */
uint8_t AUDIO_IO_Read(uint8_t Addr, uint8_t Reg) {
 80113b4:	b580      	push	{r7, lr}
 80113b6:	b082      	sub	sp, #8
 80113b8:	af00      	add	r7, sp, #0
 80113ba:	4603      	mov	r3, r0
 80113bc:	460a      	mov	r2, r1
 80113be:	71fb      	strb	r3, [r7, #7]
 80113c0:	4613      	mov	r3, r2
 80113c2:	71bb      	strb	r3, [r7, #6]
	return I2Cx_ReadData(Addr, Reg);
 80113c4:	79ba      	ldrb	r2, [r7, #6]
 80113c6:	79fb      	ldrb	r3, [r7, #7]
 80113c8:	4611      	mov	r1, r2
 80113ca:	4618      	mov	r0, r3
 80113cc:	f7ff ff0e 	bl	80111ec <I2Cx_ReadData>
 80113d0:	4603      	mov	r3, r0
}
 80113d2:	4618      	mov	r0, r3
 80113d4:	3708      	adds	r7, #8
 80113d6:	46bd      	mov	sp, r7
 80113d8:	bd80      	pop	{r7, pc}
	...

080113dc <WaveInit>:
/* Audio wave remaining data length to be played */
static uint32_t AudioRemSize;
/* Audio wave to be played data at the moment */
static uint16_t AudioPlaySize;

void WaveInit(void) {
 80113dc:	b580      	push	{r7, lr}
 80113de:	b082      	sub	sp, #8
 80113e0:	af00      	add	r7, sp, #0
	uint8_t ret;
	do {
		swvPrintLn("WaveInit");
 80113e2:	480c      	ldr	r0, [pc, #48]	; (8011414 <WaveInit+0x38>)
 80113e4:	f7fa faa6 	bl	800b934 <swvPrintLn>

		/* Initialize Wave player (Codec, DMA, I2C) */
		ret = BSP_AUDIO_OUT_Init(OUTPUT_DEVICE_AUTO, Volume, AUDIO_SAMPLE_FREQ);
 80113e8:	4b0b      	ldr	r3, [pc, #44]	; (8011418 <WaveInit+0x3c>)
 80113ea:	7819      	ldrb	r1, [r3, #0]
 80113ec:	4b0b      	ldr	r3, [pc, #44]	; (801141c <WaveInit+0x40>)
 80113ee:	681b      	ldr	r3, [r3, #0]
 80113f0:	461a      	mov	r2, r3
 80113f2:	2004      	movs	r0, #4
 80113f4:	f000 f890 	bl	8011518 <BSP_AUDIO_OUT_Init>
 80113f8:	4603      	mov	r3, r0
 80113fa:	71fb      	strb	r3, [r7, #7]

		osDelay(500);
 80113fc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8011400:	f7f6 f8c3 	bl	800758a <osDelay>
	} while (ret != 0);
 8011404:	79fb      	ldrb	r3, [r7, #7]
 8011406:	2b00      	cmp	r3, #0
 8011408:	d1eb      	bne.n	80113e2 <WaveInit+0x6>
}
 801140a:	bf00      	nop
 801140c:	3708      	adds	r7, #8
 801140e:	46bd      	mov	sp, r7
 8011410:	bd80      	pop	{r7, pc}
 8011412:	bf00      	nop
 8011414:	080164bc 	.word	0x080164bc
 8011418:	200067e5 	.word	0x200067e5
 801141c:	0801657c 	.word	0x0801657c

08011420 <WavePlay>:

void WavePlay(void) {
 8011420:	b580      	push	{r7, lr}
 8011422:	af00      	add	r7, sp, #0
	/* Get data size from audio file */
	AudioRemSize = AUDIO_SAMPLE_SIZE;
 8011424:	4b0d      	ldr	r3, [pc, #52]	; (801145c <WavePlay+0x3c>)
 8011426:	681b      	ldr	r3, [r3, #0]
 8011428:	4a0d      	ldr	r2, [pc, #52]	; (8011460 <WavePlay+0x40>)
 801142a:	6013      	str	r3, [r2, #0]
	/* Get total data to be played */
	if (AUDIO_SAMPLE_SIZE > AUDIO_BUFFER_SIZE) {
 801142c:	4b0b      	ldr	r3, [pc, #44]	; (801145c <WavePlay+0x3c>)
 801142e:	681b      	ldr	r3, [r3, #0]
 8011430:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011434:	d904      	bls.n	8011440 <WavePlay+0x20>
		AudioPlaySize = AUDIO_BUFFER_SIZE;
 8011436:	4b0b      	ldr	r3, [pc, #44]	; (8011464 <WavePlay+0x44>)
 8011438:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801143c:	801a      	strh	r2, [r3, #0]
 801143e:	e004      	b.n	801144a <WavePlay+0x2a>
	} else {
		AudioPlaySize = AUDIO_SAMPLE_SIZE;
 8011440:	4b06      	ldr	r3, [pc, #24]	; (801145c <WavePlay+0x3c>)
 8011442:	681b      	ldr	r3, [r3, #0]
 8011444:	b29a      	uxth	r2, r3
 8011446:	4b07      	ldr	r3, [pc, #28]	; (8011464 <WavePlay+0x44>)
 8011448:	801a      	strh	r2, [r3, #0]
	}

	/* Start playing Wave */
	BSP_AUDIO_OUT_Play((uint16_t*) AUDIO_SAMPLE, AudioPlaySize);
 801144a:	4b06      	ldr	r3, [pc, #24]	; (8011464 <WavePlay+0x44>)
 801144c:	881b      	ldrh	r3, [r3, #0]
 801144e:	4619      	mov	r1, r3
 8011450:	4805      	ldr	r0, [pc, #20]	; (8011468 <WavePlay+0x48>)
 8011452:	f000 f8af 	bl	80115b4 <BSP_AUDIO_OUT_Play>
}
 8011456:	bf00      	nop
 8011458:	bd80      	pop	{r7, pc}
 801145a:	bf00      	nop
 801145c:	08016580 	.word	0x08016580
 8011460:	200067e8 	.word	0x200067e8
 8011464:	200067ec 	.word	0x200067ec
 8011468:	08016584 	.word	0x08016584

0801146c <WaveBeepPlay>:

void WaveBeepPlay(uint8_t Frequency, uint16_t TimeMS) {
 801146c:	b590      	push	{r4, r7, lr}
 801146e:	b083      	sub	sp, #12
 8011470:	af00      	add	r7, sp, #0
 8011472:	4603      	mov	r3, r0
 8011474:	460a      	mov	r2, r1
 8011476:	71fb      	strb	r3, [r7, #7]
 8011478:	4613      	mov	r3, r2
 801147a:	80bb      	strh	r3, [r7, #4]
	osRecursiveMutexWait(AudioBeepMutexHandle, osWaitForever);
 801147c:	4b16      	ldr	r3, [pc, #88]	; (80114d8 <WaveBeepPlay+0x6c>)
 801147e:	681b      	ldr	r3, [r3, #0]
 8011480:	f04f 31ff 	mov.w	r1, #4294967295
 8011484:	4618      	mov	r0, r3
 8011486:	f7f6 fba0 	bl	8007bca <osRecursiveMutexWait>
	pAudioDrv->SetBeep(AUDIO_I2C_ADDRESS, Frequency, 0, 0);
 801148a:	4b14      	ldr	r3, [pc, #80]	; (80114dc <WaveBeepPlay+0x70>)
 801148c:	681b      	ldr	r3, [r3, #0]
 801148e:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8011490:	79f9      	ldrb	r1, [r7, #7]
 8011492:	2300      	movs	r3, #0
 8011494:	2200      	movs	r2, #0
 8011496:	2094      	movs	r0, #148	; 0x94
 8011498:	47a0      	blx	r4
	pAudioDrv->Beep(AUDIO_I2C_ADDRESS, BEEP_MODE_CONTINUOUS, BEEP_MIX_OFF);
 801149a:	4b10      	ldr	r3, [pc, #64]	; (80114dc <WaveBeepPlay+0x70>)
 801149c:	681b      	ldr	r3, [r3, #0]
 801149e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80114a0:	2201      	movs	r2, #1
 80114a2:	2103      	movs	r1, #3
 80114a4:	2094      	movs	r0, #148	; 0x94
 80114a6:	4798      	blx	r3

	if (TimeMS > 0) {
 80114a8:	88bb      	ldrh	r3, [r7, #4]
 80114aa:	2b00      	cmp	r3, #0
 80114ac:	d00a      	beq.n	80114c4 <WaveBeepPlay+0x58>
		// delay with RTOS
		osDelay(TimeMS);
 80114ae:	88bb      	ldrh	r3, [r7, #4]
 80114b0:	4618      	mov	r0, r3
 80114b2:	f7f6 f86a 	bl	800758a <osDelay>
		// than stop
		pAudioDrv->Beep(AUDIO_I2C_ADDRESS, BEEP_MODE_OFF, BEEP_MIX_OFF);
 80114b6:	4b09      	ldr	r3, [pc, #36]	; (80114dc <WaveBeepPlay+0x70>)
 80114b8:	681b      	ldr	r3, [r3, #0]
 80114ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80114bc:	2201      	movs	r2, #1
 80114be:	2100      	movs	r1, #0
 80114c0:	2094      	movs	r0, #148	; 0x94
 80114c2:	4798      	blx	r3
	}
	osRecursiveMutexRelease(AudioBeepMutexHandle);
 80114c4:	4b04      	ldr	r3, [pc, #16]	; (80114d8 <WaveBeepPlay+0x6c>)
 80114c6:	681b      	ldr	r3, [r3, #0]
 80114c8:	4618      	mov	r0, r3
 80114ca:	f7f6 fb6b 	bl	8007ba4 <osRecursiveMutexRelease>
}
 80114ce:	bf00      	nop
 80114d0:	370c      	adds	r7, #12
 80114d2:	46bd      	mov	sp, r7
 80114d4:	bd90      	pop	{r4, r7, pc}
 80114d6:	bf00      	nop
 80114d8:	20008490 	.word	0x20008490
 80114dc:	200067e0 	.word	0x200067e0

080114e0 <WaveBeepStop>:

void WaveBeepStop(void) {
 80114e0:	b580      	push	{r7, lr}
 80114e2:	af00      	add	r7, sp, #0
	osRecursiveMutexWait(AudioBeepMutexHandle, osWaitForever);
 80114e4:	4b0a      	ldr	r3, [pc, #40]	; (8011510 <WaveBeepStop+0x30>)
 80114e6:	681b      	ldr	r3, [r3, #0]
 80114e8:	f04f 31ff 	mov.w	r1, #4294967295
 80114ec:	4618      	mov	r0, r3
 80114ee:	f7f6 fb6c 	bl	8007bca <osRecursiveMutexWait>

	pAudioDrv->Beep(AUDIO_I2C_ADDRESS, BEEP_MODE_OFF, BEEP_MIX_OFF);
 80114f2:	4b08      	ldr	r3, [pc, #32]	; (8011514 <WaveBeepStop+0x34>)
 80114f4:	681b      	ldr	r3, [r3, #0]
 80114f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80114f8:	2201      	movs	r2, #1
 80114fa:	2100      	movs	r1, #0
 80114fc:	2094      	movs	r0, #148	; 0x94
 80114fe:	4798      	blx	r3

	osRecursiveMutexRelease(AudioBeepMutexHandle);
 8011500:	4b03      	ldr	r3, [pc, #12]	; (8011510 <WaveBeepStop+0x30>)
 8011502:	681b      	ldr	r3, [r3, #0]
 8011504:	4618      	mov	r0, r3
 8011506:	f7f6 fb4d 	bl	8007ba4 <osRecursiveMutexRelease>
}
 801150a:	bf00      	nop
 801150c:	bd80      	pop	{r7, pc}
 801150e:	bf00      	nop
 8011510:	20008490 	.word	0x20008490
 8011514:	200067e0 	.word	0x200067e0

08011518 <BSP_AUDIO_OUT_Init>:
 *                       OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO .
 * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
 * @param  AudioFreq: Audio frequency used to play the audio stream.
 * @retval AUDIO_OK if correct communication, else wrong communication
 */
uint8_t BSP_AUDIO_OUT_Init(uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq) {
 8011518:	b590      	push	{r4, r7, lr}
 801151a:	b085      	sub	sp, #20
 801151c:	af00      	add	r7, sp, #0
 801151e:	4603      	mov	r3, r0
 8011520:	603a      	str	r2, [r7, #0]
 8011522:	80fb      	strh	r3, [r7, #6]
 8011524:	460b      	mov	r3, r1
 8011526:	717b      	strb	r3, [r7, #5]
	uint8_t ret = AUDIO_OK;
 8011528:	2300      	movs	r3, #0
 801152a:	73fb      	strb	r3, [r7, #15]

	/* PLL clock is set depending by the AudioFreq (44.1khz vs 48khz groups) */
	BSP_AUDIO_OUT_ClockConfig(&hi2s3, AudioFreq, NULL);
 801152c:	2200      	movs	r2, #0
 801152e:	6839      	ldr	r1, [r7, #0]
 8011530:	481c      	ldr	r0, [pc, #112]	; (80115a4 <BSP_AUDIO_OUT_Init+0x8c>)
 8011532:	f000 f8cf 	bl	80116d4 <BSP_AUDIO_OUT_ClockConfig>

	/* I2S data transfer preparation:
	 Prepare the Media to be used for the audio transfer from memory to I2S peripheral */
	hi2s3.Instance = I2S3;
 8011536:	4b1b      	ldr	r3, [pc, #108]	; (80115a4 <BSP_AUDIO_OUT_Init+0x8c>)
 8011538:	4a1b      	ldr	r2, [pc, #108]	; (80115a8 <BSP_AUDIO_OUT_Init+0x90>)
 801153a:	601a      	str	r2, [r3, #0]
	if (HAL_I2S_GetState(&hi2s3) == HAL_I2S_STATE_RESET) {
 801153c:	4819      	ldr	r0, [pc, #100]	; (80115a4 <BSP_AUDIO_OUT_Init+0x8c>)
 801153e:	f7f2 ff63 	bl	8004408 <HAL_I2S_GetState>
 8011542:	4603      	mov	r3, r0
 8011544:	2b00      	cmp	r3, #0
 8011546:	d103      	bne.n	8011550 <BSP_AUDIO_OUT_Init+0x38>
		/* Init the I2S MSP: this __weak function can be redefined by the application*/
		BSP_AUDIO_OUT_MspInit(&hi2s3, NULL);
 8011548:	2100      	movs	r1, #0
 801154a:	4816      	ldr	r0, [pc, #88]	; (80115a4 <BSP_AUDIO_OUT_Init+0x8c>)
 801154c:	f000 f91a 	bl	8011784 <BSP_AUDIO_OUT_MspInit>
	}

	/* I2S data transfer preparation:
	 Prepare the Media to be used for the audio transfer from memory to I2S peripheral */
	/* Configure the I2S peripheral */
	if (I2S3_Init(AudioFreq) != AUDIO_OK) {
 8011550:	6838      	ldr	r0, [r7, #0]
 8011552:	f000 fa49 	bl	80119e8 <I2S3_Init>
 8011556:	4603      	mov	r3, r0
 8011558:	2b00      	cmp	r3, #0
 801155a:	d001      	beq.n	8011560 <BSP_AUDIO_OUT_Init+0x48>
		ret = AUDIO_ERROR;
 801155c:	2301      	movs	r3, #1
 801155e:	73fb      	strb	r3, [r7, #15]
	}

	if (ret == AUDIO_OK) {
 8011560:	7bfb      	ldrb	r3, [r7, #15]
 8011562:	2b00      	cmp	r3, #0
 8011564:	d10e      	bne.n	8011584 <BSP_AUDIO_OUT_Init+0x6c>
		/* Retieve audio codec identifier */
		if (((cs43l22_drv.ReadID(AUDIO_I2C_ADDRESS)) & CS43L22_ID_MASK) == CS43L22_ID) {
 8011566:	4b11      	ldr	r3, [pc, #68]	; (80115ac <BSP_AUDIO_OUT_Init+0x94>)
 8011568:	689b      	ldr	r3, [r3, #8]
 801156a:	2094      	movs	r0, #148	; 0x94
 801156c:	4798      	blx	r3
 801156e:	4603      	mov	r3, r0
 8011570:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8011574:	2be0      	cmp	r3, #224	; 0xe0
 8011576:	d103      	bne.n	8011580 <BSP_AUDIO_OUT_Init+0x68>
			/* Initialize the audio driver structure */
			pAudioDrv = &cs43l22_drv;
 8011578:	4b0d      	ldr	r3, [pc, #52]	; (80115b0 <BSP_AUDIO_OUT_Init+0x98>)
 801157a:	4a0c      	ldr	r2, [pc, #48]	; (80115ac <BSP_AUDIO_OUT_Init+0x94>)
 801157c:	601a      	str	r2, [r3, #0]
 801157e:	e001      	b.n	8011584 <BSP_AUDIO_OUT_Init+0x6c>
		} else {
			ret = AUDIO_ERROR;
 8011580:	2301      	movs	r3, #1
 8011582:	73fb      	strb	r3, [r7, #15]
		}
	}

	if (ret == AUDIO_OK) {
 8011584:	7bfb      	ldrb	r3, [r7, #15]
 8011586:	2b00      	cmp	r3, #0
 8011588:	d107      	bne.n	801159a <BSP_AUDIO_OUT_Init+0x82>
		pAudioDrv->Init(AUDIO_I2C_ADDRESS, OutputDevice, Volume, AudioFreq);
 801158a:	4b09      	ldr	r3, [pc, #36]	; (80115b0 <BSP_AUDIO_OUT_Init+0x98>)
 801158c:	681b      	ldr	r3, [r3, #0]
 801158e:	681c      	ldr	r4, [r3, #0]
 8011590:	797a      	ldrb	r2, [r7, #5]
 8011592:	88f9      	ldrh	r1, [r7, #6]
 8011594:	683b      	ldr	r3, [r7, #0]
 8011596:	2094      	movs	r0, #148	; 0x94
 8011598:	47a0      	blx	r4
	}

	return ret;
 801159a:	7bfb      	ldrb	r3, [r7, #15]
}
 801159c:	4618      	mov	r0, r3
 801159e:	3714      	adds	r7, #20
 80115a0:	46bd      	mov	sp, r7
 80115a2:	bd90      	pop	{r4, r7, pc}
 80115a4:	20008630 	.word	0x20008630
 80115a8:	40003c00 	.word	0x40003c00
 80115ac:	2000000c 	.word	0x2000000c
 80115b0:	200067e0 	.word	0x200067e0

080115b4 <BSP_AUDIO_OUT_Play>:
 * @brief  Starts playing audio stream from a data buffer for a determined size.
 * @param  pBuffer: Pointer to the buffer
 * @param  Size: Number of audio data BYTES.
 * @retval AUDIO_OK if correct communication, else wrong communication
 */
uint8_t BSP_AUDIO_OUT_Play(uint16_t* pBuffer, uint32_t Size) {
 80115b4:	b580      	push	{r7, lr}
 80115b6:	b082      	sub	sp, #8
 80115b8:	af00      	add	r7, sp, #0
 80115ba:	6078      	str	r0, [r7, #4]
 80115bc:	6039      	str	r1, [r7, #0]
	/* Call the audio Codec Play function */
	if (pAudioDrv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0) {
 80115be:	4b10      	ldr	r3, [pc, #64]	; (8011600 <BSP_AUDIO_OUT_Play+0x4c>)
 80115c0:	681b      	ldr	r3, [r3, #0]
 80115c2:	68db      	ldr	r3, [r3, #12]
 80115c4:	683a      	ldr	r2, [r7, #0]
 80115c6:	b292      	uxth	r2, r2
 80115c8:	6879      	ldr	r1, [r7, #4]
 80115ca:	2094      	movs	r0, #148	; 0x94
 80115cc:	4798      	blx	r3
 80115ce:	4603      	mov	r3, r0
 80115d0:	2b00      	cmp	r3, #0
 80115d2:	d001      	beq.n	80115d8 <BSP_AUDIO_OUT_Play+0x24>
		return AUDIO_ERROR;
 80115d4:	2301      	movs	r3, #1
 80115d6:	e00f      	b.n	80115f8 <BSP_AUDIO_OUT_Play+0x44>
	} else {
		/* Update the Media layer and enable it for play */
		HAL_I2S_Transmit_DMA(&hi2s3, pBuffer, DMA_MAX(Size/AUDIODATA_SIZE));
 80115d8:	683b      	ldr	r3, [r7, #0]
 80115da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80115de:	d203      	bcs.n	80115e8 <BSP_AUDIO_OUT_Play+0x34>
 80115e0:	683b      	ldr	r3, [r7, #0]
 80115e2:	085b      	lsrs	r3, r3, #1
 80115e4:	b29b      	uxth	r3, r3
 80115e6:	e001      	b.n	80115ec <BSP_AUDIO_OUT_Play+0x38>
 80115e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80115ec:	461a      	mov	r2, r3
 80115ee:	6879      	ldr	r1, [r7, #4]
 80115f0:	4804      	ldr	r0, [pc, #16]	; (8011604 <BSP_AUDIO_OUT_Play+0x50>)
 80115f2:	f7f2 fe41 	bl	8004278 <HAL_I2S_Transmit_DMA>

		/* Return AUDIO_OK when all operations are correctly done */
		return AUDIO_OK;
 80115f6:	2300      	movs	r3, #0
	}
}
 80115f8:	4618      	mov	r0, r3
 80115fa:	3708      	adds	r7, #8
 80115fc:	46bd      	mov	sp, r7
 80115fe:	bd80      	pop	{r7, pc}
 8011600:	200067e0 	.word	0x200067e0
 8011604:	20008630 	.word	0x20008630

08011608 <BSP_AUDIO_OUT_ChangeBuffer>:
/**
 * @brief  Sends n-Bytes on the I2S interface.
 * @param  pData: Pointer to data address
 * @param  Size: Number of data to be written
 */
void BSP_AUDIO_OUT_ChangeBuffer(uint16_t *pData, uint16_t Size) {
 8011608:	b580      	push	{r7, lr}
 801160a:	b082      	sub	sp, #8
 801160c:	af00      	add	r7, sp, #0
 801160e:	6078      	str	r0, [r7, #4]
 8011610:	460b      	mov	r3, r1
 8011612:	807b      	strh	r3, [r7, #2]
	HAL_I2S_Transmit_DMA(&hi2s3, pData, DMA_MAX(Size/AUDIODATA_SIZE));
 8011614:	887b      	ldrh	r3, [r7, #2]
 8011616:	085b      	lsrs	r3, r3, #1
 8011618:	b29b      	uxth	r3, r3
 801161a:	461a      	mov	r2, r3
 801161c:	6879      	ldr	r1, [r7, #4]
 801161e:	4803      	ldr	r0, [pc, #12]	; (801162c <BSP_AUDIO_OUT_ChangeBuffer+0x24>)
 8011620:	f7f2 fe2a 	bl	8004278 <HAL_I2S_Transmit_DMA>
}
 8011624:	bf00      	nop
 8011626:	3708      	adds	r7, #8
 8011628:	46bd      	mov	sp, r7
 801162a:	bd80      	pop	{r7, pc}
 801162c:	20008630 	.word	0x20008630

08011630 <BSP_AUDIO_OUT_SetVolume>:
 * @brief  Controls the current audio volume level.
 * @param  Volume: Volume level to be set in percentage from 0% to 100% (0 for
 *         Mute and 100 for Max volume level).
 * @retval AUDIO_OK if correct communication, else wrong communication
 */
uint8_t BSP_AUDIO_OUT_SetVolume(uint8_t Volume) {
 8011630:	b580      	push	{r7, lr}
 8011632:	b082      	sub	sp, #8
 8011634:	af00      	add	r7, sp, #0
 8011636:	4603      	mov	r3, r0
 8011638:	71fb      	strb	r3, [r7, #7]
	/* Call the codec volume control function with converted volume value */
	if (pAudioDrv->SetVolume(AUDIO_I2C_ADDRESS, Volume) != 0) {
 801163a:	4b08      	ldr	r3, [pc, #32]	; (801165c <BSP_AUDIO_OUT_SetVolume+0x2c>)
 801163c:	681b      	ldr	r3, [r3, #0]
 801163e:	6a1b      	ldr	r3, [r3, #32]
 8011640:	79fa      	ldrb	r2, [r7, #7]
 8011642:	4611      	mov	r1, r2
 8011644:	2094      	movs	r0, #148	; 0x94
 8011646:	4798      	blx	r3
 8011648:	4603      	mov	r3, r0
 801164a:	2b00      	cmp	r3, #0
 801164c:	d001      	beq.n	8011652 <BSP_AUDIO_OUT_SetVolume+0x22>
		return AUDIO_ERROR;
 801164e:	2301      	movs	r3, #1
 8011650:	e000      	b.n	8011654 <BSP_AUDIO_OUT_SetVolume+0x24>
	} else {
		/* Return AUDIO_OK when all operations are correctly done */
		return AUDIO_OK;
 8011652:	2300      	movs	r3, #0
	}
}
 8011654:	4618      	mov	r0, r3
 8011656:	3708      	adds	r7, #8
 8011658:	46bd      	mov	sp, r7
 801165a:	bd80      	pop	{r7, pc}
 801165c:	200067e0 	.word	0x200067e0

08011660 <BSP_AUDIO_OUT_SetMute>:
 * @brief  Enables or disables the MUTE mode by software
 * @param  Cmd: could be AUDIO_MUTE_ON to mute sound or AUDIO_MUTE_OFF to
 *         unmute the codec and restore previous volume level.
 * @retval AUDIO_OK if correct communication, else wrong communication
 */
uint8_t BSP_AUDIO_OUT_SetMute(uint32_t Cmd) {
 8011660:	b580      	push	{r7, lr}
 8011662:	b082      	sub	sp, #8
 8011664:	af00      	add	r7, sp, #0
 8011666:	6078      	str	r0, [r7, #4]
	/* Call the Codec Mute function */
	if (pAudioDrv->SetMute(AUDIO_I2C_ADDRESS, Cmd) != 0) {
 8011668:	4b07      	ldr	r3, [pc, #28]	; (8011688 <BSP_AUDIO_OUT_SetMute+0x28>)
 801166a:	681b      	ldr	r3, [r3, #0]
 801166c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801166e:	6879      	ldr	r1, [r7, #4]
 8011670:	2094      	movs	r0, #148	; 0x94
 8011672:	4798      	blx	r3
 8011674:	4603      	mov	r3, r0
 8011676:	2b00      	cmp	r3, #0
 8011678:	d001      	beq.n	801167e <BSP_AUDIO_OUT_SetMute+0x1e>
		return AUDIO_ERROR;
 801167a:	2301      	movs	r3, #1
 801167c:	e000      	b.n	8011680 <BSP_AUDIO_OUT_SetMute+0x20>
	} else {
		/* Return AUDIO_OK when all operations are correctly done */
		return AUDIO_OK;
 801167e:	2300      	movs	r3, #0
	}
}
 8011680:	4618      	mov	r0, r3
 8011682:	3708      	adds	r7, #8
 8011684:	46bd      	mov	sp, r7
 8011686:	bd80      	pop	{r7, pc}
 8011688:	200067e0 	.word	0x200067e0

0801168c <HAL_I2S_TxCpltCallback>:

/**
 * @brief  Tx Transfer completed callbacks.
 * @param  hi2s: I2S handle
 */
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s) {
 801168c:	b580      	push	{r7, lr}
 801168e:	b082      	sub	sp, #8
 8011690:	af00      	add	r7, sp, #0
 8011692:	6078      	str	r0, [r7, #4]
	if (hi2s->Instance == I2S3) {
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	681b      	ldr	r3, [r3, #0]
 8011698:	4a04      	ldr	r2, [pc, #16]	; (80116ac <HAL_I2S_TxCpltCallback+0x20>)
 801169a:	4293      	cmp	r3, r2
 801169c:	d101      	bne.n	80116a2 <HAL_I2S_TxCpltCallback+0x16>
		/* Call the user function which will manage directly transfer complete */
		BSP_AUDIO_OUT_TransferComplete_CallBack();
 801169e:	f000 f931 	bl	8011904 <BSP_AUDIO_OUT_TransferComplete_CallBack>
	}
}
 80116a2:	bf00      	nop
 80116a4:	3708      	adds	r7, #8
 80116a6:	46bd      	mov	sp, r7
 80116a8:	bd80      	pop	{r7, pc}
 80116aa:	bf00      	nop
 80116ac:	40003c00 	.word	0x40003c00

080116b0 <HAL_I2S_TxHalfCpltCallback>:

/**
 * @brief  Tx Half Transfer completed callbacks.
 * @param  hi2s: I2S handle
 */
void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s) {
 80116b0:	b580      	push	{r7, lr}
 80116b2:	b082      	sub	sp, #8
 80116b4:	af00      	add	r7, sp, #0
 80116b6:	6078      	str	r0, [r7, #4]
	if (hi2s->Instance == I2S3) {
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	681b      	ldr	r3, [r3, #0]
 80116bc:	4a04      	ldr	r2, [pc, #16]	; (80116d0 <HAL_I2S_TxHalfCpltCallback+0x20>)
 80116be:	4293      	cmp	r3, r2
 80116c0:	d101      	bne.n	80116c6 <HAL_I2S_TxHalfCpltCallback+0x16>
		/* Manage the remaining file size and new address offset: This function should
		 be coded by user (its prototype is already declared in stm32f4_discovery_audio.h) */
		BSP_AUDIO_OUT_HalfTransfer_CallBack();
 80116c2:	f000 f969 	bl	8011998 <BSP_AUDIO_OUT_HalfTransfer_CallBack>
	}
}
 80116c6:	bf00      	nop
 80116c8:	3708      	adds	r7, #8
 80116ca:	46bd      	mov	sp, r7
 80116cc:	bd80      	pop	{r7, pc}
 80116ce:	bf00      	nop
 80116d0:	40003c00 	.word	0x40003c00

080116d4 <BSP_AUDIO_OUT_ClockConfig>:
 * @param  AudioFreq: Audio frequency used to play the audio stream.
 * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
 *         Being __weak it can be overwritten by the application
 * @param  Params : pointer on additional configuration parameters, can be NULL.
 */
__weak void BSP_AUDIO_OUT_ClockConfig(I2S_HandleTypeDef *hi2s, uint32_t AudioFreq, void *Params) {
 80116d4:	b580      	push	{r7, lr}
 80116d6:	b08a      	sub	sp, #40	; 0x28
 80116d8:	af00      	add	r7, sp, #0
 80116da:	60f8      	str	r0, [r7, #12]
 80116dc:	60b9      	str	r1, [r7, #8]
 80116de:	607a      	str	r2, [r7, #4]
	RCC_PeriphCLKInitTypeDef rccclkinit;
	uint8_t index = 0, freqindex = 0xFF;
 80116e0:	2300      	movs	r3, #0
 80116e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80116e6:	23ff      	movs	r3, #255	; 0xff
 80116e8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	for (index = 0; index < 8; index++) {
 80116ec:	2300      	movs	r3, #0
 80116ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80116f2:	e010      	b.n	8011716 <BSP_AUDIO_OUT_ClockConfig+0x42>
		if (I2SFreq[index] == AudioFreq) {
 80116f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80116f8:	4a1f      	ldr	r2, [pc, #124]	; (8011778 <BSP_AUDIO_OUT_ClockConfig+0xa4>)
 80116fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80116fe:	68ba      	ldr	r2, [r7, #8]
 8011700:	429a      	cmp	r2, r3
 8011702:	d103      	bne.n	801170c <BSP_AUDIO_OUT_ClockConfig+0x38>
			freqindex = index;
 8011704:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011708:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	for (index = 0; index < 8; index++) {
 801170c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011710:	3301      	adds	r3, #1
 8011712:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011716:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801171a:	2b07      	cmp	r3, #7
 801171c:	d9ea      	bls.n	80116f4 <BSP_AUDIO_OUT_ClockConfig+0x20>
		}
	}
	/* Enable PLLI2S clock */
	HAL_RCCEx_GetPeriphCLKConfig(&rccclkinit);
 801171e:	f107 0314 	add.w	r3, r7, #20
 8011722:	4618      	mov	r0, r3
 8011724:	f7f3 ff58 	bl	80055d8 <HAL_RCCEx_GetPeriphCLKConfig>
	/* PLLI2S_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	// FIXME: why this bellow code unlogicable
	//	if ((freqindex & 0x7) == 0) {
	if (freqindex != 0xFF) {
 8011728:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801172c:	2bff      	cmp	r3, #255	; 0xff
 801172e:	d013      	beq.n	8011758 <BSP_AUDIO_OUT_ClockConfig+0x84>
		/* I2S clock config
		 PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) � (PLLI2SN/PLLM)
		 I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
		rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8011730:	2301      	movs	r3, #1
 8011732:	617b      	str	r3, [r7, #20]
		rccclkinit.PLLI2S.PLLI2SN = I2SPLLN[freqindex];
 8011734:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011738:	4a10      	ldr	r2, [pc, #64]	; (801177c <BSP_AUDIO_OUT_ClockConfig+0xa8>)
 801173a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801173e:	61bb      	str	r3, [r7, #24]
		rccclkinit.PLLI2S.PLLI2SR = I2SPLLR[freqindex];
 8011740:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011744:	4a0e      	ldr	r2, [pc, #56]	; (8011780 <BSP_AUDIO_OUT_ClockConfig+0xac>)
 8011746:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801174a:	61fb      	str	r3, [r7, #28]
		HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 801174c:	f107 0314 	add.w	r3, r7, #20
 8011750:	4618      	mov	r0, r3
 8011752:	f7f3 fe5f 	bl	8005414 <HAL_RCCEx_PeriphCLKConfig>
		rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
		rccclkinit.PLLI2S.PLLI2SN = 258;
		rccclkinit.PLLI2S.PLLI2SR = 3;
		HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
	}
}
 8011756:	e00b      	b.n	8011770 <BSP_AUDIO_OUT_ClockConfig+0x9c>
		rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8011758:	2301      	movs	r3, #1
 801175a:	617b      	str	r3, [r7, #20]
		rccclkinit.PLLI2S.PLLI2SN = 258;
 801175c:	f44f 7381 	mov.w	r3, #258	; 0x102
 8011760:	61bb      	str	r3, [r7, #24]
		rccclkinit.PLLI2S.PLLI2SR = 3;
 8011762:	2303      	movs	r3, #3
 8011764:	61fb      	str	r3, [r7, #28]
		HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8011766:	f107 0314 	add.w	r3, r7, #20
 801176a:	4618      	mov	r0, r3
 801176c:	f7f3 fe52 	bl	8005414 <HAL_RCCEx_PeriphCLKConfig>
}
 8011770:	bf00      	nop
 8011772:	3728      	adds	r7, #40	; 0x28
 8011774:	46bd      	mov	sp, r7
 8011776:	bd80      	pop	{r7, pc}
 8011778:	0802854c 	.word	0x0802854c
 801177c:	0802856c 	.word	0x0802856c
 8011780:	0802858c 	.word	0x0802858c

08011784 <BSP_AUDIO_OUT_MspInit>:
/**
 * @brief  AUDIO OUT I2S MSP Init.
 * @param  hi2s: might be required to set audio peripheral predivider if any.
 * @param  Params : pointer on additional configuration parameters, can be NULL.
 */
__weak void BSP_AUDIO_OUT_MspInit(I2S_HandleTypeDef *hi2s, void *Params) {
 8011784:	b580      	push	{r7, lr}
 8011786:	b08c      	sub	sp, #48	; 0x30
 8011788:	af00      	add	r7, sp, #0
 801178a:	6078      	str	r0, [r7, #4]
 801178c:	6039      	str	r1, [r7, #0]
	static DMA_HandleTypeDef hdma_i2sTx;
	GPIO_InitTypeDef GPIO_InitStruct;

	/* Enable I2S3 clock */
	I2S3_CLK_ENABLE()
 801178e:	2300      	movs	r3, #0
 8011790:	61bb      	str	r3, [r7, #24]
 8011792:	4b56      	ldr	r3, [pc, #344]	; (80118ec <BSP_AUDIO_OUT_MspInit+0x168>)
 8011794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011796:	4a55      	ldr	r2, [pc, #340]	; (80118ec <BSP_AUDIO_OUT_MspInit+0x168>)
 8011798:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801179c:	6413      	str	r3, [r2, #64]	; 0x40
 801179e:	4b53      	ldr	r3, [pc, #332]	; (80118ec <BSP_AUDIO_OUT_MspInit+0x168>)
 80117a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80117a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80117a6:	61bb      	str	r3, [r7, #24]
 80117a8:	69bb      	ldr	r3, [r7, #24]
	;

	/*** Configure the GPIOs ***/
	/* Enable I2S GPIO clocks */
	I2S3_SCK_SD_CLK_ENABLE()
 80117aa:	2300      	movs	r3, #0
 80117ac:	617b      	str	r3, [r7, #20]
 80117ae:	4b4f      	ldr	r3, [pc, #316]	; (80118ec <BSP_AUDIO_OUT_MspInit+0x168>)
 80117b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80117b2:	4a4e      	ldr	r2, [pc, #312]	; (80118ec <BSP_AUDIO_OUT_MspInit+0x168>)
 80117b4:	f043 0304 	orr.w	r3, r3, #4
 80117b8:	6313      	str	r3, [r2, #48]	; 0x30
 80117ba:	4b4c      	ldr	r3, [pc, #304]	; (80118ec <BSP_AUDIO_OUT_MspInit+0x168>)
 80117bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80117be:	f003 0304 	and.w	r3, r3, #4
 80117c2:	617b      	str	r3, [r7, #20]
 80117c4:	697b      	ldr	r3, [r7, #20]
	;
	I2S3_WS_CLK_ENABLE()
 80117c6:	2300      	movs	r3, #0
 80117c8:	613b      	str	r3, [r7, #16]
 80117ca:	4b48      	ldr	r3, [pc, #288]	; (80118ec <BSP_AUDIO_OUT_MspInit+0x168>)
 80117cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80117ce:	4a47      	ldr	r2, [pc, #284]	; (80118ec <BSP_AUDIO_OUT_MspInit+0x168>)
 80117d0:	f043 0301 	orr.w	r3, r3, #1
 80117d4:	6313      	str	r3, [r2, #48]	; 0x30
 80117d6:	4b45      	ldr	r3, [pc, #276]	; (80118ec <BSP_AUDIO_OUT_MspInit+0x168>)
 80117d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80117da:	f003 0301 	and.w	r3, r3, #1
 80117de:	613b      	str	r3, [r7, #16]
 80117e0:	693b      	ldr	r3, [r7, #16]
	;

	/* I2S3 pins configuration: WS, SCK and SD pins ----------------------------*/
	GPIO_InitStruct.Pin = I2S3_SCK_PIN | I2S3_SD_PIN;
 80117e2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80117e6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80117e8:	2302      	movs	r3, #2
 80117ea:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80117ec:	2300      	movs	r3, #0
 80117ee:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80117f0:	2302      	movs	r3, #2
 80117f2:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = I2S3_SCK_SD_WS_AF;
 80117f4:	2306      	movs	r3, #6
 80117f6:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(I2S3_SCK_SD_GPIO_PORT, &GPIO_InitStruct);
 80117f8:	f107 031c 	add.w	r3, r7, #28
 80117fc:	4619      	mov	r1, r3
 80117fe:	483c      	ldr	r0, [pc, #240]	; (80118f0 <BSP_AUDIO_OUT_MspInit+0x16c>)
 8011800:	f7f0 fbd2 	bl	8001fa8 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = I2S3_WS_PIN;
 8011804:	2310      	movs	r3, #16
 8011806:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(I2S3_WS_GPIO_PORT, &GPIO_InitStruct);
 8011808:	f107 031c 	add.w	r3, r7, #28
 801180c:	4619      	mov	r1, r3
 801180e:	4839      	ldr	r0, [pc, #228]	; (80118f4 <BSP_AUDIO_OUT_MspInit+0x170>)
 8011810:	f7f0 fbca 	bl	8001fa8 <HAL_GPIO_Init>

	/* I2S3 pins configuration: MCK pin */
	I2S3_MCK_CLK_ENABLE()
 8011814:	2300      	movs	r3, #0
 8011816:	60fb      	str	r3, [r7, #12]
 8011818:	4b34      	ldr	r3, [pc, #208]	; (80118ec <BSP_AUDIO_OUT_MspInit+0x168>)
 801181a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801181c:	4a33      	ldr	r2, [pc, #204]	; (80118ec <BSP_AUDIO_OUT_MspInit+0x168>)
 801181e:	f043 0304 	orr.w	r3, r3, #4
 8011822:	6313      	str	r3, [r2, #48]	; 0x30
 8011824:	4b31      	ldr	r3, [pc, #196]	; (80118ec <BSP_AUDIO_OUT_MspInit+0x168>)
 8011826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011828:	f003 0304 	and.w	r3, r3, #4
 801182c:	60fb      	str	r3, [r7, #12]
 801182e:	68fb      	ldr	r3, [r7, #12]
	;
	GPIO_InitStruct.Pin = I2S3_MCK_PIN;
 8011830:	2380      	movs	r3, #128	; 0x80
 8011832:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(I2S3_MCK_GPIO_PORT, &GPIO_InitStruct);
 8011834:	f107 031c 	add.w	r3, r7, #28
 8011838:	4619      	mov	r1, r3
 801183a:	482d      	ldr	r0, [pc, #180]	; (80118f0 <BSP_AUDIO_OUT_MspInit+0x16c>)
 801183c:	f7f0 fbb4 	bl	8001fa8 <HAL_GPIO_Init>

	/* Enable the I2S DMA clock */
	I2S3_DMAx_CLK_ENABLE()
 8011840:	2300      	movs	r3, #0
 8011842:	60bb      	str	r3, [r7, #8]
 8011844:	4b29      	ldr	r3, [pc, #164]	; (80118ec <BSP_AUDIO_OUT_MspInit+0x168>)
 8011846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011848:	4a28      	ldr	r2, [pc, #160]	; (80118ec <BSP_AUDIO_OUT_MspInit+0x168>)
 801184a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801184e:	6313      	str	r3, [r2, #48]	; 0x30
 8011850:	4b26      	ldr	r3, [pc, #152]	; (80118ec <BSP_AUDIO_OUT_MspInit+0x168>)
 8011852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011854:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8011858:	60bb      	str	r3, [r7, #8]
 801185a:	68bb      	ldr	r3, [r7, #8]
	;

	if (hi2s->Instance == I2S3) {
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	681b      	ldr	r3, [r3, #0]
 8011860:	4a25      	ldr	r2, [pc, #148]	; (80118f8 <BSP_AUDIO_OUT_MspInit+0x174>)
 8011862:	4293      	cmp	r3, r2
 8011864:	d136      	bne.n	80118d4 <BSP_AUDIO_OUT_MspInit+0x150>
		/* Configure the hdma_i2sTx handle parameters */
		hdma_i2sTx.Init.Channel = I2S3_DMAx_CHANNEL;
 8011866:	4b25      	ldr	r3, [pc, #148]	; (80118fc <BSP_AUDIO_OUT_MspInit+0x178>)
 8011868:	2200      	movs	r2, #0
 801186a:	605a      	str	r2, [r3, #4]
		hdma_i2sTx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 801186c:	4b23      	ldr	r3, [pc, #140]	; (80118fc <BSP_AUDIO_OUT_MspInit+0x178>)
 801186e:	2240      	movs	r2, #64	; 0x40
 8011870:	609a      	str	r2, [r3, #8]
		hdma_i2sTx.Init.PeriphInc = DMA_PINC_DISABLE;
 8011872:	4b22      	ldr	r3, [pc, #136]	; (80118fc <BSP_AUDIO_OUT_MspInit+0x178>)
 8011874:	2200      	movs	r2, #0
 8011876:	60da      	str	r2, [r3, #12]
		hdma_i2sTx.Init.MemInc = DMA_MINC_ENABLE;
 8011878:	4b20      	ldr	r3, [pc, #128]	; (80118fc <BSP_AUDIO_OUT_MspInit+0x178>)
 801187a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801187e:	611a      	str	r2, [r3, #16]
		hdma_i2sTx.Init.PeriphDataAlignment = I2S3_DMAx_PERIPH_DATA_SIZE;
 8011880:	4b1e      	ldr	r3, [pc, #120]	; (80118fc <BSP_AUDIO_OUT_MspInit+0x178>)
 8011882:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011886:	615a      	str	r2, [r3, #20]
		hdma_i2sTx.Init.MemDataAlignment = I2S3_DMAx_MEM_DATA_SIZE;
 8011888:	4b1c      	ldr	r3, [pc, #112]	; (80118fc <BSP_AUDIO_OUT_MspInit+0x178>)
 801188a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801188e:	619a      	str	r2, [r3, #24]
		hdma_i2sTx.Init.Mode = DMA_NORMAL;
 8011890:	4b1a      	ldr	r3, [pc, #104]	; (80118fc <BSP_AUDIO_OUT_MspInit+0x178>)
 8011892:	2200      	movs	r2, #0
 8011894:	61da      	str	r2, [r3, #28]
		hdma_i2sTx.Init.Priority = DMA_PRIORITY_HIGH;
 8011896:	4b19      	ldr	r3, [pc, #100]	; (80118fc <BSP_AUDIO_OUT_MspInit+0x178>)
 8011898:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 801189c:	621a      	str	r2, [r3, #32]
		hdma_i2sTx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 801189e:	4b17      	ldr	r3, [pc, #92]	; (80118fc <BSP_AUDIO_OUT_MspInit+0x178>)
 80118a0:	2204      	movs	r2, #4
 80118a2:	625a      	str	r2, [r3, #36]	; 0x24
		hdma_i2sTx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80118a4:	4b15      	ldr	r3, [pc, #84]	; (80118fc <BSP_AUDIO_OUT_MspInit+0x178>)
 80118a6:	2203      	movs	r2, #3
 80118a8:	629a      	str	r2, [r3, #40]	; 0x28
		hdma_i2sTx.Init.MemBurst = DMA_MBURST_SINGLE;
 80118aa:	4b14      	ldr	r3, [pc, #80]	; (80118fc <BSP_AUDIO_OUT_MspInit+0x178>)
 80118ac:	2200      	movs	r2, #0
 80118ae:	62da      	str	r2, [r3, #44]	; 0x2c
		hdma_i2sTx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80118b0:	4b12      	ldr	r3, [pc, #72]	; (80118fc <BSP_AUDIO_OUT_MspInit+0x178>)
 80118b2:	2200      	movs	r2, #0
 80118b4:	631a      	str	r2, [r3, #48]	; 0x30

		hdma_i2sTx.Instance = I2S3_DMAx_STREAM;
 80118b6:	4b11      	ldr	r3, [pc, #68]	; (80118fc <BSP_AUDIO_OUT_MspInit+0x178>)
 80118b8:	4a11      	ldr	r2, [pc, #68]	; (8011900 <BSP_AUDIO_OUT_MspInit+0x17c>)
 80118ba:	601a      	str	r2, [r3, #0]

		/* Associate the DMA handle */
		__HAL_LINKDMA(hi2s, hdmatx, hdma_i2sTx);
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	4a0f      	ldr	r2, [pc, #60]	; (80118fc <BSP_AUDIO_OUT_MspInit+0x178>)
 80118c0:	639a      	str	r2, [r3, #56]	; 0x38
 80118c2:	4a0e      	ldr	r2, [pc, #56]	; (80118fc <BSP_AUDIO_OUT_MspInit+0x178>)
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	6393      	str	r3, [r2, #56]	; 0x38

		/* Deinitialize the Stream for new transfer */
		HAL_DMA_DeInit(&hdma_i2sTx);
 80118c8:	480c      	ldr	r0, [pc, #48]	; (80118fc <BSP_AUDIO_OUT_MspInit+0x178>)
 80118ca:	f7ef fd61 	bl	8001390 <HAL_DMA_DeInit>

		/* Configure the DMA Stream */
		HAL_DMA_Init(&hdma_i2sTx);
 80118ce:	480b      	ldr	r0, [pc, #44]	; (80118fc <BSP_AUDIO_OUT_MspInit+0x178>)
 80118d0:	f7ef fcb0 	bl	8001234 <HAL_DMA_Init>
	}

	/* I2S DMA IRQ Channel configuration */
	HAL_NVIC_SetPriority(I2S3_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 80118d4:	2200      	movs	r2, #0
 80118d6:	210e      	movs	r1, #14
 80118d8:	202f      	movs	r0, #47	; 0x2f
 80118da:	f7ef fc81 	bl	80011e0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(I2S3_DMAx_IRQ);
 80118de:	202f      	movs	r0, #47	; 0x2f
 80118e0:	f7ef fc9a 	bl	8001218 <HAL_NVIC_EnableIRQ>
}
 80118e4:	bf00      	nop
 80118e6:	3730      	adds	r7, #48	; 0x30
 80118e8:	46bd      	mov	sp, r7
 80118ea:	bd80      	pop	{r7, pc}
 80118ec:	40023800 	.word	0x40023800
 80118f0:	40020800 	.word	0x40020800
 80118f4:	40020000 	.word	0x40020000
 80118f8:	40003c00 	.word	0x40003c00
 80118fc:	200067f0 	.word	0x200067f0
 8011900:	400260b8 	.word	0x400260b8

08011904 <BSP_AUDIO_OUT_TransferComplete_CallBack>:
}

/**
 * @brief  Manages the DMA full Transfer complete event.
 */
__weak void BSP_AUDIO_OUT_TransferComplete_CallBack(void) {
 8011904:	b580      	push	{r7, lr}
 8011906:	af00      	add	r7, sp, #0
	if (!AudioPlayDone) {
 8011908:	4b1e      	ldr	r3, [pc, #120]	; (8011984 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x80>)
 801190a:	781b      	ldrb	r3, [r3, #0]
 801190c:	b2db      	uxtb	r3, r3
 801190e:	2b00      	cmp	r3, #0
 8011910:	d10f      	bne.n	8011932 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x2e>
		BSP_AUDIO_OUT_ChangeBuffer((uint16_t*) (AUDIO_SAMPLE + ((AUDIO_SAMPLE_SIZE - AudioRemSize) / AUDIODATA_SIZE)), AudioPlaySize);
 8011912:	4b1d      	ldr	r3, [pc, #116]	; (8011988 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x84>)
 8011914:	681a      	ldr	r2, [r3, #0]
 8011916:	4b1d      	ldr	r3, [pc, #116]	; (801198c <BSP_AUDIO_OUT_TransferComplete_CallBack+0x88>)
 8011918:	681b      	ldr	r3, [r3, #0]
 801191a:	1ad3      	subs	r3, r2, r3
 801191c:	f023 0301 	bic.w	r3, r3, #1
 8011920:	4a1b      	ldr	r2, [pc, #108]	; (8011990 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x8c>)
 8011922:	441a      	add	r2, r3
 8011924:	4b1b      	ldr	r3, [pc, #108]	; (8011994 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x90>)
 8011926:	881b      	ldrh	r3, [r3, #0]
 8011928:	4619      	mov	r1, r3
 801192a:	4610      	mov	r0, r2
 801192c:	f7ff fe6c 	bl	8011608 <BSP_AUDIO_OUT_ChangeBuffer>
 8011930:	e018      	b.n	8011964 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x60>
	} else {
		/* Get data size from audio file */
		AudioRemSize = AUDIO_SAMPLE_SIZE;
 8011932:	4b15      	ldr	r3, [pc, #84]	; (8011988 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x84>)
 8011934:	681b      	ldr	r3, [r3, #0]
 8011936:	4a15      	ldr	r2, [pc, #84]	; (801198c <BSP_AUDIO_OUT_TransferComplete_CallBack+0x88>)
 8011938:	6013      	str	r3, [r2, #0]
		/* Get total data to be played */
		if (AUDIO_SAMPLE_SIZE > AUDIO_BUFFER_SIZE) {
 801193a:	4b13      	ldr	r3, [pc, #76]	; (8011988 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x84>)
 801193c:	681b      	ldr	r3, [r3, #0]
 801193e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011942:	d904      	bls.n	801194e <BSP_AUDIO_OUT_TransferComplete_CallBack+0x4a>
			AudioPlaySize = AUDIO_BUFFER_SIZE;
 8011944:	4b13      	ldr	r3, [pc, #76]	; (8011994 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x90>)
 8011946:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801194a:	801a      	strh	r2, [r3, #0]
 801194c:	e004      	b.n	8011958 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x54>
		} else {
			AudioPlaySize = AUDIO_SAMPLE_SIZE;
 801194e:	4b0e      	ldr	r3, [pc, #56]	; (8011988 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x84>)
 8011950:	681b      	ldr	r3, [r3, #0]
 8011952:	b29a      	uxth	r2, r3
 8011954:	4b0f      	ldr	r3, [pc, #60]	; (8011994 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x90>)
 8011956:	801a      	strh	r2, [r3, #0]
		}

		/* Start playing Wave again*/
		BSP_AUDIO_OUT_ChangeBuffer((uint16_t*) AUDIO_SAMPLE, AudioPlaySize);
 8011958:	4b0e      	ldr	r3, [pc, #56]	; (8011994 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x90>)
 801195a:	881b      	ldrh	r3, [r3, #0]
 801195c:	4619      	mov	r1, r3
 801195e:	480c      	ldr	r0, [pc, #48]	; (8011990 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x8c>)
 8011960:	f7ff fe52 	bl	8011608 <BSP_AUDIO_OUT_ChangeBuffer>
	}

	AudioPlayDone = (AudioPlaySize == AudioRemSize);
 8011964:	4b0b      	ldr	r3, [pc, #44]	; (8011994 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x90>)
 8011966:	881b      	ldrh	r3, [r3, #0]
 8011968:	461a      	mov	r2, r3
 801196a:	4b08      	ldr	r3, [pc, #32]	; (801198c <BSP_AUDIO_OUT_TransferComplete_CallBack+0x88>)
 801196c:	681b      	ldr	r3, [r3, #0]
 801196e:	429a      	cmp	r2, r3
 8011970:	bf0c      	ite	eq
 8011972:	2301      	moveq	r3, #1
 8011974:	2300      	movne	r3, #0
 8011976:	b2db      	uxtb	r3, r3
 8011978:	461a      	mov	r2, r3
 801197a:	4b02      	ldr	r3, [pc, #8]	; (8011984 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x80>)
 801197c:	701a      	strb	r2, [r3, #0]
}
 801197e:	bf00      	nop
 8011980:	bd80      	pop	{r7, pc}
 8011982:	bf00      	nop
 8011984:	200067e4 	.word	0x200067e4
 8011988:	08016580 	.word	0x08016580
 801198c:	200067e8 	.word	0x200067e8
 8011990:	08016584 	.word	0x08016584
 8011994:	200067ec 	.word	0x200067ec

08011998 <BSP_AUDIO_OUT_HalfTransfer_CallBack>:

/**
 * @brief  Manages the DMA Half Transfer complete event.
 */
__weak void BSP_AUDIO_OUT_HalfTransfer_CallBack(void) {
 8011998:	b480      	push	{r7}
 801199a:	af00      	add	r7, sp, #0
	// check remaining data
	if (AudioRemSize > AUDIO_BUFFER_SIZE) {
 801199c:	4b0f      	ldr	r3, [pc, #60]	; (80119dc <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x44>)
 801199e:	681b      	ldr	r3, [r3, #0]
 80119a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80119a4:	d90a      	bls.n	80119bc <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x24>
		/* Get total data to be played */
		AudioPlaySize = AUDIO_BUFFER_SIZE;
 80119a6:	4b0e      	ldr	r3, [pc, #56]	; (80119e0 <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x48>)
 80119a8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80119ac:	801a      	strh	r2, [r3, #0]
		/* Get remaining data */
		AudioRemSize -= AUDIO_BUFFER_SIZE;
 80119ae:	4b0b      	ldr	r3, [pc, #44]	; (80119dc <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x44>)
 80119b0:	681b      	ldr	r3, [r3, #0]
 80119b2:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 80119b6:	4a09      	ldr	r2, [pc, #36]	; (80119dc <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x44>)
 80119b8:	6013      	str	r3, [r2, #0]
		/* Get total data to be played */
		if (!AudioPlayDone) {
			AudioPlaySize = AudioRemSize;
		}
	}
}
 80119ba:	e009      	b.n	80119d0 <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x38>
		if (!AudioPlayDone) {
 80119bc:	4b09      	ldr	r3, [pc, #36]	; (80119e4 <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x4c>)
 80119be:	781b      	ldrb	r3, [r3, #0]
 80119c0:	b2db      	uxtb	r3, r3
 80119c2:	2b00      	cmp	r3, #0
 80119c4:	d104      	bne.n	80119d0 <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x38>
			AudioPlaySize = AudioRemSize;
 80119c6:	4b05      	ldr	r3, [pc, #20]	; (80119dc <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x44>)
 80119c8:	681b      	ldr	r3, [r3, #0]
 80119ca:	b29a      	uxth	r2, r3
 80119cc:	4b04      	ldr	r3, [pc, #16]	; (80119e0 <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x48>)
 80119ce:	801a      	strh	r2, [r3, #0]
}
 80119d0:	bf00      	nop
 80119d2:	46bd      	mov	sp, r7
 80119d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119d8:	4770      	bx	lr
 80119da:	bf00      	nop
 80119dc:	200067e8 	.word	0x200067e8
 80119e0:	200067ec 	.word	0x200067ec
 80119e4:	200067e4 	.word	0x200067e4

080119e8 <I2S3_Init>:

/**
 * @brief  Initializes the Audio Codec audio interface (I2S).
 * @param  AudioFreq: Audio frequency to be configured for the I2S peripheral.
 */
static uint8_t I2S3_Init(uint32_t AudioFreq) {
 80119e8:	b580      	push	{r7, lr}
 80119ea:	b082      	sub	sp, #8
 80119ec:	af00      	add	r7, sp, #0
 80119ee:	6078      	str	r0, [r7, #4]
	/* Initialize the hi2s3 Instance parameter */
	hi2s3.Instance = I2S3;
 80119f0:	4b17      	ldr	r3, [pc, #92]	; (8011a50 <I2S3_Init+0x68>)
 80119f2:	4a18      	ldr	r2, [pc, #96]	; (8011a54 <I2S3_Init+0x6c>)
 80119f4:	601a      	str	r2, [r3, #0]

	/* Disable I2S block */
	__HAL_I2S_DISABLE(&hi2s3);
 80119f6:	4b16      	ldr	r3, [pc, #88]	; (8011a50 <I2S3_Init+0x68>)
 80119f8:	681b      	ldr	r3, [r3, #0]
 80119fa:	69da      	ldr	r2, [r3, #28]
 80119fc:	4b14      	ldr	r3, [pc, #80]	; (8011a50 <I2S3_Init+0x68>)
 80119fe:	681b      	ldr	r3, [r3, #0]
 8011a00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011a04:	61da      	str	r2, [r3, #28]

	/* I2S3 peripheral configuration */
	hi2s3.Init.AudioFreq = AudioFreq;
 8011a06:	4a12      	ldr	r2, [pc, #72]	; (8011a50 <I2S3_Init+0x68>)
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	6153      	str	r3, [r2, #20]
	hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8011a0c:	4b10      	ldr	r3, [pc, #64]	; (8011a50 <I2S3_Init+0x68>)
 8011a0e:	2200      	movs	r2, #0
 8011a10:	61da      	str	r2, [r3, #28]
	hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8011a12:	4b0f      	ldr	r3, [pc, #60]	; (8011a50 <I2S3_Init+0x68>)
 8011a14:	2200      	movs	r2, #0
 8011a16:	619a      	str	r2, [r3, #24]
	// FIXME: Why it works on I2S_DATAFORMAT_32B? It should be I2S_DATAFORMAT_16B
	//	hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
	hi2s3.Init.DataFormat = I2S_DATAFORMAT_32B;
 8011a18:	4b0d      	ldr	r3, [pc, #52]	; (8011a50 <I2S3_Init+0x68>)
 8011a1a:	2205      	movs	r2, #5
 8011a1c:	60da      	str	r2, [r3, #12]
	hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8011a1e:	4b0c      	ldr	r3, [pc, #48]	; (8011a50 <I2S3_Init+0x68>)
 8011a20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011a24:	611a      	str	r2, [r3, #16]
	hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8011a26:	4b0a      	ldr	r3, [pc, #40]	; (8011a50 <I2S3_Init+0x68>)
 8011a28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011a2c:	605a      	str	r2, [r3, #4]
	hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8011a2e:	4b08      	ldr	r3, [pc, #32]	; (8011a50 <I2S3_Init+0x68>)
 8011a30:	2200      	movs	r2, #0
 8011a32:	609a      	str	r2, [r3, #8]
	/* Initialize the I2S peripheral with the structure above */
	if (HAL_I2S_Init(&hi2s3) != HAL_OK) {
 8011a34:	4806      	ldr	r0, [pc, #24]	; (8011a50 <I2S3_Init+0x68>)
 8011a36:	f7f2 fadf 	bl	8003ff8 <HAL_I2S_Init>
 8011a3a:	4603      	mov	r3, r0
 8011a3c:	2b00      	cmp	r3, #0
 8011a3e:	d001      	beq.n	8011a44 <I2S3_Init+0x5c>
		return AUDIO_ERROR;
 8011a40:	2301      	movs	r3, #1
 8011a42:	e000      	b.n	8011a46 <I2S3_Init+0x5e>
	} else {
		return AUDIO_OK;
 8011a44:	2300      	movs	r3, #0
	}
}
 8011a46:	4618      	mov	r0, r3
 8011a48:	3708      	adds	r7, #8
 8011a4a:	46bd      	mov	sp, r7
 8011a4c:	bd80      	pop	{r7, pc}
 8011a4e:	bf00      	nop
 8011a50:	20008630 	.word	0x20008630
 8011a54:	40003c00 	.word	0x40003c00

08011a58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8011a58:	b580      	push	{r7, lr}
 8011a5a:	b082      	sub	sp, #8
 8011a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8011a5e:	2300      	movs	r3, #0
 8011a60:	607b      	str	r3, [r7, #4]
 8011a62:	4b12      	ldr	r3, [pc, #72]	; (8011aac <HAL_MspInit+0x54>)
 8011a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011a66:	4a11      	ldr	r2, [pc, #68]	; (8011aac <HAL_MspInit+0x54>)
 8011a68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8011a6c:	6453      	str	r3, [r2, #68]	; 0x44
 8011a6e:	4b0f      	ldr	r3, [pc, #60]	; (8011aac <HAL_MspInit+0x54>)
 8011a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011a72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011a76:	607b      	str	r3, [r7, #4]
 8011a78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8011a7a:	2300      	movs	r3, #0
 8011a7c:	603b      	str	r3, [r7, #0]
 8011a7e:	4b0b      	ldr	r3, [pc, #44]	; (8011aac <HAL_MspInit+0x54>)
 8011a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011a82:	4a0a      	ldr	r2, [pc, #40]	; (8011aac <HAL_MspInit+0x54>)
 8011a84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011a88:	6413      	str	r3, [r2, #64]	; 0x40
 8011a8a:	4b08      	ldr	r3, [pc, #32]	; (8011aac <HAL_MspInit+0x54>)
 8011a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011a8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011a92:	603b      	str	r3, [r7, #0]
 8011a94:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8011a96:	2200      	movs	r2, #0
 8011a98:	210f      	movs	r1, #15
 8011a9a:	f06f 0001 	mvn.w	r0, #1
 8011a9e:	f7ef fb9f 	bl	80011e0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8011aa2:	bf00      	nop
 8011aa4:	3708      	adds	r7, #8
 8011aa6:	46bd      	mov	sp, r7
 8011aa8:	bd80      	pop	{r7, pc}
 8011aaa:	bf00      	nop
 8011aac:	40023800 	.word	0x40023800

08011ab0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8011ab0:	b580      	push	{r7, lr}
 8011ab2:	b08c      	sub	sp, #48	; 0x30
 8011ab4:	af00      	add	r7, sp, #0
 8011ab6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011ab8:	f107 031c 	add.w	r3, r7, #28
 8011abc:	2200      	movs	r2, #0
 8011abe:	601a      	str	r2, [r3, #0]
 8011ac0:	605a      	str	r2, [r3, #4]
 8011ac2:	609a      	str	r2, [r3, #8]
 8011ac4:	60da      	str	r2, [r3, #12]
 8011ac6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	681b      	ldr	r3, [r3, #0]
 8011acc:	4a42      	ldr	r2, [pc, #264]	; (8011bd8 <HAL_I2C_MspInit+0x128>)
 8011ace:	4293      	cmp	r3, r2
 8011ad0:	d12d      	bne.n	8011b2e <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8011ad2:	2300      	movs	r3, #0
 8011ad4:	61bb      	str	r3, [r7, #24]
 8011ad6:	4b41      	ldr	r3, [pc, #260]	; (8011bdc <HAL_I2C_MspInit+0x12c>)
 8011ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011ada:	4a40      	ldr	r2, [pc, #256]	; (8011bdc <HAL_I2C_MspInit+0x12c>)
 8011adc:	f043 0302 	orr.w	r3, r3, #2
 8011ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8011ae2:	4b3e      	ldr	r3, [pc, #248]	; (8011bdc <HAL_I2C_MspInit+0x12c>)
 8011ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011ae6:	f003 0302 	and.w	r3, r3, #2
 8011aea:	61bb      	str	r3, [r7, #24]
 8011aec:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8011aee:	f44f 7310 	mov.w	r3, #576	; 0x240
 8011af2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8011af4:	2312      	movs	r3, #18
 8011af6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8011af8:	2301      	movs	r3, #1
 8011afa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011afc:	2300      	movs	r3, #0
 8011afe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8011b00:	2304      	movs	r3, #4
 8011b02:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8011b04:	f107 031c 	add.w	r3, r7, #28
 8011b08:	4619      	mov	r1, r3
 8011b0a:	4835      	ldr	r0, [pc, #212]	; (8011be0 <HAL_I2C_MspInit+0x130>)
 8011b0c:	f7f0 fa4c 	bl	8001fa8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8011b10:	2300      	movs	r3, #0
 8011b12:	617b      	str	r3, [r7, #20]
 8011b14:	4b31      	ldr	r3, [pc, #196]	; (8011bdc <HAL_I2C_MspInit+0x12c>)
 8011b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011b18:	4a30      	ldr	r2, [pc, #192]	; (8011bdc <HAL_I2C_MspInit+0x12c>)
 8011b1a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8011b1e:	6413      	str	r3, [r2, #64]	; 0x40
 8011b20:	4b2e      	ldr	r3, [pc, #184]	; (8011bdc <HAL_I2C_MspInit+0x12c>)
 8011b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011b24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8011b28:	617b      	str	r3, [r7, #20]
 8011b2a:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8011b2c:	e050      	b.n	8011bd0 <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C3)
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	681b      	ldr	r3, [r3, #0]
 8011b32:	4a2c      	ldr	r2, [pc, #176]	; (8011be4 <HAL_I2C_MspInit+0x134>)
 8011b34:	4293      	cmp	r3, r2
 8011b36:	d14b      	bne.n	8011bd0 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8011b38:	2300      	movs	r3, #0
 8011b3a:	613b      	str	r3, [r7, #16]
 8011b3c:	4b27      	ldr	r3, [pc, #156]	; (8011bdc <HAL_I2C_MspInit+0x12c>)
 8011b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011b40:	4a26      	ldr	r2, [pc, #152]	; (8011bdc <HAL_I2C_MspInit+0x12c>)
 8011b42:	f043 0304 	orr.w	r3, r3, #4
 8011b46:	6313      	str	r3, [r2, #48]	; 0x30
 8011b48:	4b24      	ldr	r3, [pc, #144]	; (8011bdc <HAL_I2C_MspInit+0x12c>)
 8011b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011b4c:	f003 0304 	and.w	r3, r3, #4
 8011b50:	613b      	str	r3, [r7, #16]
 8011b52:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011b54:	2300      	movs	r3, #0
 8011b56:	60fb      	str	r3, [r7, #12]
 8011b58:	4b20      	ldr	r3, [pc, #128]	; (8011bdc <HAL_I2C_MspInit+0x12c>)
 8011b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011b5c:	4a1f      	ldr	r2, [pc, #124]	; (8011bdc <HAL_I2C_MspInit+0x12c>)
 8011b5e:	f043 0301 	orr.w	r3, r3, #1
 8011b62:	6313      	str	r3, [r2, #48]	; 0x30
 8011b64:	4b1d      	ldr	r3, [pc, #116]	; (8011bdc <HAL_I2C_MspInit+0x12c>)
 8011b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011b68:	f003 0301 	and.w	r3, r3, #1
 8011b6c:	60fb      	str	r3, [r7, #12]
 8011b6e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8011b70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011b74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8011b76:	2312      	movs	r3, #18
 8011b78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8011b7a:	2301      	movs	r3, #1
 8011b7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011b7e:	2303      	movs	r3, #3
 8011b80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8011b82:	2304      	movs	r3, #4
 8011b84:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8011b86:	f107 031c 	add.w	r3, r7, #28
 8011b8a:	4619      	mov	r1, r3
 8011b8c:	4816      	ldr	r0, [pc, #88]	; (8011be8 <HAL_I2C_MspInit+0x138>)
 8011b8e:	f7f0 fa0b 	bl	8001fa8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8011b92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011b96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8011b98:	2312      	movs	r3, #18
 8011b9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8011b9c:	2301      	movs	r3, #1
 8011b9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011ba0:	2303      	movs	r3, #3
 8011ba2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8011ba4:	2304      	movs	r3, #4
 8011ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011ba8:	f107 031c 	add.w	r3, r7, #28
 8011bac:	4619      	mov	r1, r3
 8011bae:	480f      	ldr	r0, [pc, #60]	; (8011bec <HAL_I2C_MspInit+0x13c>)
 8011bb0:	f7f0 f9fa 	bl	8001fa8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8011bb4:	2300      	movs	r3, #0
 8011bb6:	60bb      	str	r3, [r7, #8]
 8011bb8:	4b08      	ldr	r3, [pc, #32]	; (8011bdc <HAL_I2C_MspInit+0x12c>)
 8011bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011bbc:	4a07      	ldr	r2, [pc, #28]	; (8011bdc <HAL_I2C_MspInit+0x12c>)
 8011bbe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8011bc2:	6413      	str	r3, [r2, #64]	; 0x40
 8011bc4:	4b05      	ldr	r3, [pc, #20]	; (8011bdc <HAL_I2C_MspInit+0x12c>)
 8011bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011bc8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011bcc:	60bb      	str	r3, [r7, #8]
 8011bce:	68bb      	ldr	r3, [r7, #8]
}
 8011bd0:	bf00      	nop
 8011bd2:	3730      	adds	r7, #48	; 0x30
 8011bd4:	46bd      	mov	sp, r7
 8011bd6:	bd80      	pop	{r7, pc}
 8011bd8:	40005400 	.word	0x40005400
 8011bdc:	40023800 	.word	0x40023800
 8011be0:	40020400 	.word	0x40020400
 8011be4:	40005c00 	.word	0x40005c00
 8011be8:	40020800 	.word	0x40020800
 8011bec:	40020000 	.word	0x40020000

08011bf0 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8011bf0:	b580      	push	{r7, lr}
 8011bf2:	b082      	sub	sp, #8
 8011bf4:	af00      	add	r7, sp, #0
 8011bf6:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8011bf8:	687b      	ldr	r3, [r7, #4]
 8011bfa:	681b      	ldr	r3, [r3, #0]
 8011bfc:	4a13      	ldr	r2, [pc, #76]	; (8011c4c <HAL_I2C_MspDeInit+0x5c>)
 8011bfe:	4293      	cmp	r3, r2
 8011c00:	d10b      	bne.n	8011c1a <HAL_I2C_MspDeInit+0x2a>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8011c02:	4b13      	ldr	r3, [pc, #76]	; (8011c50 <HAL_I2C_MspDeInit+0x60>)
 8011c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011c06:	4a12      	ldr	r2, [pc, #72]	; (8011c50 <HAL_I2C_MspDeInit+0x60>)
 8011c08:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8011c0c:	6413      	str	r3, [r2, #64]	; 0x40
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, Audio_SCL_Pin|Audio_SDA_Pin);
 8011c0e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8011c12:	4810      	ldr	r0, [pc, #64]	; (8011c54 <HAL_I2C_MspDeInit+0x64>)
 8011c14:	f7f0 fb62 	bl	80022dc <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8011c18:	e014      	b.n	8011c44 <HAL_I2C_MspDeInit+0x54>
  else if(hi2c->Instance==I2C3)
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	681b      	ldr	r3, [r3, #0]
 8011c1e:	4a0e      	ldr	r2, [pc, #56]	; (8011c58 <HAL_I2C_MspDeInit+0x68>)
 8011c20:	4293      	cmp	r3, r2
 8011c22:	d10f      	bne.n	8011c44 <HAL_I2C_MspDeInit+0x54>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8011c24:	4b0a      	ldr	r3, [pc, #40]	; (8011c50 <HAL_I2C_MspDeInit+0x60>)
 8011c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011c28:	4a09      	ldr	r2, [pc, #36]	; (8011c50 <HAL_I2C_MspDeInit+0x60>)
 8011c2a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8011c2e:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_9);
 8011c30:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011c34:	4809      	ldr	r0, [pc, #36]	; (8011c5c <HAL_I2C_MspDeInit+0x6c>)
 8011c36:	f7f0 fb51 	bl	80022dc <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_8);
 8011c3a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8011c3e:	4808      	ldr	r0, [pc, #32]	; (8011c60 <HAL_I2C_MspDeInit+0x70>)
 8011c40:	f7f0 fb4c 	bl	80022dc <HAL_GPIO_DeInit>
}
 8011c44:	bf00      	nop
 8011c46:	3708      	adds	r7, #8
 8011c48:	46bd      	mov	sp, r7
 8011c4a:	bd80      	pop	{r7, pc}
 8011c4c:	40005400 	.word	0x40005400
 8011c50:	40023800 	.word	0x40023800
 8011c54:	40020400 	.word	0x40020400
 8011c58:	40005c00 	.word	0x40005c00
 8011c5c:	40020800 	.word	0x40020800
 8011c60:	40020000 	.word	0x40020000

08011c64 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8011c64:	b580      	push	{r7, lr}
 8011c66:	b08a      	sub	sp, #40	; 0x28
 8011c68:	af00      	add	r7, sp, #0
 8011c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011c6c:	f107 0314 	add.w	r3, r7, #20
 8011c70:	2200      	movs	r2, #0
 8011c72:	601a      	str	r2, [r3, #0]
 8011c74:	605a      	str	r2, [r3, #4]
 8011c76:	609a      	str	r2, [r3, #8]
 8011c78:	60da      	str	r2, [r3, #12]
 8011c7a:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	681b      	ldr	r3, [r3, #0]
 8011c80:	4a48      	ldr	r2, [pc, #288]	; (8011da4 <HAL_I2S_MspInit+0x140>)
 8011c82:	4293      	cmp	r3, r2
 8011c84:	f040 808a 	bne.w	8011d9c <HAL_I2S_MspInit+0x138>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8011c88:	2300      	movs	r3, #0
 8011c8a:	613b      	str	r3, [r7, #16]
 8011c8c:	4b46      	ldr	r3, [pc, #280]	; (8011da8 <HAL_I2S_MspInit+0x144>)
 8011c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011c90:	4a45      	ldr	r2, [pc, #276]	; (8011da8 <HAL_I2S_MspInit+0x144>)
 8011c92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011c96:	6413      	str	r3, [r2, #64]	; 0x40
 8011c98:	4b43      	ldr	r3, [pc, #268]	; (8011da8 <HAL_I2S_MspInit+0x144>)
 8011c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011c9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011ca0:	613b      	str	r3, [r7, #16]
 8011ca2:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011ca4:	2300      	movs	r3, #0
 8011ca6:	60fb      	str	r3, [r7, #12]
 8011ca8:	4b3f      	ldr	r3, [pc, #252]	; (8011da8 <HAL_I2S_MspInit+0x144>)
 8011caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011cac:	4a3e      	ldr	r2, [pc, #248]	; (8011da8 <HAL_I2S_MspInit+0x144>)
 8011cae:	f043 0301 	orr.w	r3, r3, #1
 8011cb2:	6313      	str	r3, [r2, #48]	; 0x30
 8011cb4:	4b3c      	ldr	r3, [pc, #240]	; (8011da8 <HAL_I2S_MspInit+0x144>)
 8011cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011cb8:	f003 0301 	and.w	r3, r3, #1
 8011cbc:	60fb      	str	r3, [r7, #12]
 8011cbe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8011cc0:	2300      	movs	r3, #0
 8011cc2:	60bb      	str	r3, [r7, #8]
 8011cc4:	4b38      	ldr	r3, [pc, #224]	; (8011da8 <HAL_I2S_MspInit+0x144>)
 8011cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011cc8:	4a37      	ldr	r2, [pc, #220]	; (8011da8 <HAL_I2S_MspInit+0x144>)
 8011cca:	f043 0304 	orr.w	r3, r3, #4
 8011cce:	6313      	str	r3, [r2, #48]	; 0x30
 8011cd0:	4b35      	ldr	r3, [pc, #212]	; (8011da8 <HAL_I2S_MspInit+0x144>)
 8011cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011cd4:	f003 0304 	and.w	r3, r3, #4
 8011cd8:	60bb      	str	r3, [r7, #8]
 8011cda:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD 
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8011cdc:	2310      	movs	r3, #16
 8011cde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011ce0:	2302      	movs	r3, #2
 8011ce2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011ce4:	2300      	movs	r3, #0
 8011ce6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011ce8:	2300      	movs	r3, #0
 8011cea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8011cec:	2306      	movs	r3, #6
 8011cee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8011cf0:	f107 0314 	add.w	r3, r7, #20
 8011cf4:	4619      	mov	r1, r3
 8011cf6:	482d      	ldr	r0, [pc, #180]	; (8011dac <HAL_I2S_MspInit+0x148>)
 8011cf8:	f7f0 f956 	bl	8001fa8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8011cfc:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8011d00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011d02:	2302      	movs	r3, #2
 8011d04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011d06:	2300      	movs	r3, #0
 8011d08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011d0a:	2300      	movs	r3, #0
 8011d0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8011d0e:	2306      	movs	r3, #6
 8011d10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8011d12:	f107 0314 	add.w	r3, r7, #20
 8011d16:	4619      	mov	r1, r3
 8011d18:	4825      	ldr	r0, [pc, #148]	; (8011db0 <HAL_I2S_MspInit+0x14c>)
 8011d1a:	f7f0 f945 	bl	8001fa8 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream7;
 8011d1e:	4b25      	ldr	r3, [pc, #148]	; (8011db4 <HAL_I2S_MspInit+0x150>)
 8011d20:	4a25      	ldr	r2, [pc, #148]	; (8011db8 <HAL_I2S_MspInit+0x154>)
 8011d22:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8011d24:	4b23      	ldr	r3, [pc, #140]	; (8011db4 <HAL_I2S_MspInit+0x150>)
 8011d26:	2200      	movs	r2, #0
 8011d28:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8011d2a:	4b22      	ldr	r3, [pc, #136]	; (8011db4 <HAL_I2S_MspInit+0x150>)
 8011d2c:	2240      	movs	r2, #64	; 0x40
 8011d2e:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8011d30:	4b20      	ldr	r3, [pc, #128]	; (8011db4 <HAL_I2S_MspInit+0x150>)
 8011d32:	2200      	movs	r2, #0
 8011d34:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8011d36:	4b1f      	ldr	r3, [pc, #124]	; (8011db4 <HAL_I2S_MspInit+0x150>)
 8011d38:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8011d3c:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8011d3e:	4b1d      	ldr	r3, [pc, #116]	; (8011db4 <HAL_I2S_MspInit+0x150>)
 8011d40:	2200      	movs	r2, #0
 8011d42:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8011d44:	4b1b      	ldr	r3, [pc, #108]	; (8011db4 <HAL_I2S_MspInit+0x150>)
 8011d46:	2200      	movs	r2, #0
 8011d48:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 8011d4a:	4b1a      	ldr	r3, [pc, #104]	; (8011db4 <HAL_I2S_MspInit+0x150>)
 8011d4c:	2200      	movs	r2, #0
 8011d4e:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8011d50:	4b18      	ldr	r3, [pc, #96]	; (8011db4 <HAL_I2S_MspInit+0x150>)
 8011d52:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8011d56:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8011d58:	4b16      	ldr	r3, [pc, #88]	; (8011db4 <HAL_I2S_MspInit+0x150>)
 8011d5a:	2204      	movs	r2, #4
 8011d5c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8011d5e:	4b15      	ldr	r3, [pc, #84]	; (8011db4 <HAL_I2S_MspInit+0x150>)
 8011d60:	2203      	movs	r2, #3
 8011d62:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8011d64:	4b13      	ldr	r3, [pc, #76]	; (8011db4 <HAL_I2S_MspInit+0x150>)
 8011d66:	2200      	movs	r2, #0
 8011d68:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8011d6a:	4b12      	ldr	r3, [pc, #72]	; (8011db4 <HAL_I2S_MspInit+0x150>)
 8011d6c:	2200      	movs	r2, #0
 8011d6e:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8011d70:	4810      	ldr	r0, [pc, #64]	; (8011db4 <HAL_I2S_MspInit+0x150>)
 8011d72:	f7ef fa5f 	bl	8001234 <HAL_DMA_Init>
 8011d76:	4603      	mov	r3, r0
 8011d78:	2b00      	cmp	r3, #0
 8011d7a:	d001      	beq.n	8011d80 <HAL_I2S_MspInit+0x11c>
    {
      Error_Handler();
 8011d7c:	f7ff f9da 	bl	8011134 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	4a0c      	ldr	r2, [pc, #48]	; (8011db4 <HAL_I2S_MspInit+0x150>)
 8011d84:	639a      	str	r2, [r3, #56]	; 0x38
 8011d86:	4a0b      	ldr	r2, [pc, #44]	; (8011db4 <HAL_I2S_MspInit+0x150>)
 8011d88:	687b      	ldr	r3, [r7, #4]
 8011d8a:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2S3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 8011d8c:	2200      	movs	r2, #0
 8011d8e:	2105      	movs	r1, #5
 8011d90:	2033      	movs	r0, #51	; 0x33
 8011d92:	f7ef fa25 	bl	80011e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8011d96:	2033      	movs	r0, #51	; 0x33
 8011d98:	f7ef fa3e 	bl	8001218 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8011d9c:	bf00      	nop
 8011d9e:	3728      	adds	r7, #40	; 0x28
 8011da0:	46bd      	mov	sp, r7
 8011da2:	bd80      	pop	{r7, pc}
 8011da4:	40003c00 	.word	0x40003c00
 8011da8:	40023800 	.word	0x40023800
 8011dac:	40020000 	.word	0x40020000
 8011db0:	40020800 	.word	0x40020800
 8011db4:	20008498 	.word	0x20008498
 8011db8:	400260b8 	.word	0x400260b8

08011dbc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8011dbc:	b480      	push	{r7}
 8011dbe:	b083      	sub	sp, #12
 8011dc0:	af00      	add	r7, sp, #0
 8011dc2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	681b      	ldr	r3, [r3, #0]
 8011dc8:	4a05      	ldr	r2, [pc, #20]	; (8011de0 <HAL_RTC_MspInit+0x24>)
 8011dca:	4293      	cmp	r3, r2
 8011dcc:	d102      	bne.n	8011dd4 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8011dce:	4b05      	ldr	r3, [pc, #20]	; (8011de4 <HAL_RTC_MspInit+0x28>)
 8011dd0:	2201      	movs	r2, #1
 8011dd2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8011dd4:	bf00      	nop
 8011dd6:	370c      	adds	r7, #12
 8011dd8:	46bd      	mov	sp, r7
 8011dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dde:	4770      	bx	lr
 8011de0:	40002800 	.word	0x40002800
 8011de4:	42470e3c 	.word	0x42470e3c

08011de8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8011de8:	b580      	push	{r7, lr}
 8011dea:	b08a      	sub	sp, #40	; 0x28
 8011dec:	af00      	add	r7, sp, #0
 8011dee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011df0:	f107 0314 	add.w	r3, r7, #20
 8011df4:	2200      	movs	r2, #0
 8011df6:	601a      	str	r2, [r3, #0]
 8011df8:	605a      	str	r2, [r3, #4]
 8011dfa:	609a      	str	r2, [r3, #8]
 8011dfc:	60da      	str	r2, [r3, #12]
 8011dfe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	681b      	ldr	r3, [r3, #0]
 8011e04:	4a19      	ldr	r2, [pc, #100]	; (8011e6c <HAL_SPI_MspInit+0x84>)
 8011e06:	4293      	cmp	r3, r2
 8011e08:	d12b      	bne.n	8011e62 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8011e0a:	2300      	movs	r3, #0
 8011e0c:	613b      	str	r3, [r7, #16]
 8011e0e:	4b18      	ldr	r3, [pc, #96]	; (8011e70 <HAL_SPI_MspInit+0x88>)
 8011e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011e12:	4a17      	ldr	r2, [pc, #92]	; (8011e70 <HAL_SPI_MspInit+0x88>)
 8011e14:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8011e18:	6453      	str	r3, [r2, #68]	; 0x44
 8011e1a:	4b15      	ldr	r3, [pc, #84]	; (8011e70 <HAL_SPI_MspInit+0x88>)
 8011e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011e1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8011e22:	613b      	str	r3, [r7, #16]
 8011e24:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011e26:	2300      	movs	r3, #0
 8011e28:	60fb      	str	r3, [r7, #12]
 8011e2a:	4b11      	ldr	r3, [pc, #68]	; (8011e70 <HAL_SPI_MspInit+0x88>)
 8011e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011e2e:	4a10      	ldr	r2, [pc, #64]	; (8011e70 <HAL_SPI_MspInit+0x88>)
 8011e30:	f043 0301 	orr.w	r3, r3, #1
 8011e34:	6313      	str	r3, [r2, #48]	; 0x30
 8011e36:	4b0e      	ldr	r3, [pc, #56]	; (8011e70 <HAL_SPI_MspInit+0x88>)
 8011e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011e3a:	f003 0301 	and.w	r3, r3, #1
 8011e3e:	60fb      	str	r3, [r7, #12]
 8011e40:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8011e42:	23e0      	movs	r3, #224	; 0xe0
 8011e44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011e46:	2302      	movs	r3, #2
 8011e48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011e4a:	2300      	movs	r3, #0
 8011e4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011e4e:	2300      	movs	r3, #0
 8011e50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8011e52:	2305      	movs	r3, #5
 8011e54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011e56:	f107 0314 	add.w	r3, r7, #20
 8011e5a:	4619      	mov	r1, r3
 8011e5c:	4805      	ldr	r0, [pc, #20]	; (8011e74 <HAL_SPI_MspInit+0x8c>)
 8011e5e:	f7f0 f8a3 	bl	8001fa8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8011e62:	bf00      	nop
 8011e64:	3728      	adds	r7, #40	; 0x28
 8011e66:	46bd      	mov	sp, r7
 8011e68:	bd80      	pop	{r7, pc}
 8011e6a:	bf00      	nop
 8011e6c:	40013000 	.word	0x40013000
 8011e70:	40023800 	.word	0x40023800
 8011e74:	40020000 	.word	0x40020000

08011e78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8011e78:	b580      	push	{r7, lr}
 8011e7a:	b08e      	sub	sp, #56	; 0x38
 8011e7c:	af00      	add	r7, sp, #0
 8011e7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011e80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011e84:	2200      	movs	r2, #0
 8011e86:	601a      	str	r2, [r3, #0]
 8011e88:	605a      	str	r2, [r3, #4]
 8011e8a:	609a      	str	r2, [r3, #8]
 8011e8c:	60da      	str	r2, [r3, #12]
 8011e8e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	681b      	ldr	r3, [r3, #0]
 8011e94:	4a67      	ldr	r2, [pc, #412]	; (8012034 <HAL_UART_MspInit+0x1bc>)
 8011e96:	4293      	cmp	r3, r2
 8011e98:	d163      	bne.n	8011f62 <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8011e9a:	2300      	movs	r3, #0
 8011e9c:	623b      	str	r3, [r7, #32]
 8011e9e:	4b66      	ldr	r3, [pc, #408]	; (8012038 <HAL_UART_MspInit+0x1c0>)
 8011ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011ea2:	4a65      	ldr	r2, [pc, #404]	; (8012038 <HAL_UART_MspInit+0x1c0>)
 8011ea4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011ea8:	6413      	str	r3, [r2, #64]	; 0x40
 8011eaa:	4b63      	ldr	r3, [pc, #396]	; (8012038 <HAL_UART_MspInit+0x1c0>)
 8011eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011eae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8011eb2:	623b      	str	r3, [r7, #32]
 8011eb4:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011eb6:	2300      	movs	r3, #0
 8011eb8:	61fb      	str	r3, [r7, #28]
 8011eba:	4b5f      	ldr	r3, [pc, #380]	; (8012038 <HAL_UART_MspInit+0x1c0>)
 8011ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011ebe:	4a5e      	ldr	r2, [pc, #376]	; (8012038 <HAL_UART_MspInit+0x1c0>)
 8011ec0:	f043 0301 	orr.w	r3, r3, #1
 8011ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8011ec6:	4b5c      	ldr	r3, [pc, #368]	; (8012038 <HAL_UART_MspInit+0x1c0>)
 8011ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011eca:	f003 0301 	and.w	r3, r3, #1
 8011ece:	61fb      	str	r3, [r7, #28]
 8011ed0:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration    
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8011ed2:	2303      	movs	r3, #3
 8011ed4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011ed6:	2302      	movs	r3, #2
 8011ed8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8011eda:	2301      	movs	r3, #1
 8011edc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011ede:	2303      	movs	r3, #3
 8011ee0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8011ee2:	2308      	movs	r3, #8
 8011ee4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011ee6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011eea:	4619      	mov	r1, r3
 8011eec:	4853      	ldr	r0, [pc, #332]	; (801203c <HAL_UART_MspInit+0x1c4>)
 8011eee:	f7f0 f85b 	bl	8001fa8 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8011ef2:	4b53      	ldr	r3, [pc, #332]	; (8012040 <HAL_UART_MspInit+0x1c8>)
 8011ef4:	4a53      	ldr	r2, [pc, #332]	; (8012044 <HAL_UART_MspInit+0x1cc>)
 8011ef6:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8011ef8:	4b51      	ldr	r3, [pc, #324]	; (8012040 <HAL_UART_MspInit+0x1c8>)
 8011efa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8011efe:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8011f00:	4b4f      	ldr	r3, [pc, #316]	; (8012040 <HAL_UART_MspInit+0x1c8>)
 8011f02:	2200      	movs	r2, #0
 8011f04:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8011f06:	4b4e      	ldr	r3, [pc, #312]	; (8012040 <HAL_UART_MspInit+0x1c8>)
 8011f08:	2200      	movs	r2, #0
 8011f0a:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8011f0c:	4b4c      	ldr	r3, [pc, #304]	; (8012040 <HAL_UART_MspInit+0x1c8>)
 8011f0e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8011f12:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8011f14:	4b4a      	ldr	r3, [pc, #296]	; (8012040 <HAL_UART_MspInit+0x1c8>)
 8011f16:	2200      	movs	r2, #0
 8011f18:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8011f1a:	4b49      	ldr	r3, [pc, #292]	; (8012040 <HAL_UART_MspInit+0x1c8>)
 8011f1c:	2200      	movs	r2, #0
 8011f1e:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8011f20:	4b47      	ldr	r3, [pc, #284]	; (8012040 <HAL_UART_MspInit+0x1c8>)
 8011f22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011f26:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8011f28:	4b45      	ldr	r3, [pc, #276]	; (8012040 <HAL_UART_MspInit+0x1c8>)
 8011f2a:	2200      	movs	r2, #0
 8011f2c:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8011f2e:	4b44      	ldr	r3, [pc, #272]	; (8012040 <HAL_UART_MspInit+0x1c8>)
 8011f30:	2200      	movs	r2, #0
 8011f32:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8011f34:	4842      	ldr	r0, [pc, #264]	; (8012040 <HAL_UART_MspInit+0x1c8>)
 8011f36:	f7ef f97d 	bl	8001234 <HAL_DMA_Init>
 8011f3a:	4603      	mov	r3, r0
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	d001      	beq.n	8011f44 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8011f40:	f7ff f8f8 	bl	8011134 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	4a3e      	ldr	r2, [pc, #248]	; (8012040 <HAL_UART_MspInit+0x1c8>)
 8011f48:	635a      	str	r2, [r3, #52]	; 0x34
 8011f4a:	4a3d      	ldr	r2, [pc, #244]	; (8012040 <HAL_UART_MspInit+0x1c8>)
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8011f50:	2200      	movs	r2, #0
 8011f52:	2105      	movs	r1, #5
 8011f54:	2034      	movs	r0, #52	; 0x34
 8011f56:	f7ef f943 	bl	80011e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8011f5a:	2034      	movs	r0, #52	; 0x34
 8011f5c:	f7ef f95c 	bl	8001218 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8011f60:	e101      	b.n	8012166 <HAL_UART_MspInit+0x2ee>
  else if(huart->Instance==USART2)
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	681b      	ldr	r3, [r3, #0]
 8011f66:	4a38      	ldr	r2, [pc, #224]	; (8012048 <HAL_UART_MspInit+0x1d0>)
 8011f68:	4293      	cmp	r3, r2
 8011f6a:	d173      	bne.n	8012054 <HAL_UART_MspInit+0x1dc>
    __HAL_RCC_USART2_CLK_ENABLE();
 8011f6c:	2300      	movs	r3, #0
 8011f6e:	61bb      	str	r3, [r7, #24]
 8011f70:	4b31      	ldr	r3, [pc, #196]	; (8012038 <HAL_UART_MspInit+0x1c0>)
 8011f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011f74:	4a30      	ldr	r2, [pc, #192]	; (8012038 <HAL_UART_MspInit+0x1c0>)
 8011f76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011f7a:	6413      	str	r3, [r2, #64]	; 0x40
 8011f7c:	4b2e      	ldr	r3, [pc, #184]	; (8012038 <HAL_UART_MspInit+0x1c0>)
 8011f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011f80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011f84:	61bb      	str	r3, [r7, #24]
 8011f86:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011f88:	2300      	movs	r3, #0
 8011f8a:	617b      	str	r3, [r7, #20]
 8011f8c:	4b2a      	ldr	r3, [pc, #168]	; (8012038 <HAL_UART_MspInit+0x1c0>)
 8011f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011f90:	4a29      	ldr	r2, [pc, #164]	; (8012038 <HAL_UART_MspInit+0x1c0>)
 8011f92:	f043 0301 	orr.w	r3, r3, #1
 8011f96:	6313      	str	r3, [r2, #48]	; 0x30
 8011f98:	4b27      	ldr	r3, [pc, #156]	; (8012038 <HAL_UART_MspInit+0x1c0>)
 8011f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011f9c:	f003 0301 	and.w	r3, r3, #1
 8011fa0:	617b      	str	r3, [r7, #20]
 8011fa2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8011fa4:	230c      	movs	r3, #12
 8011fa6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011fa8:	2302      	movs	r3, #2
 8011faa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8011fac:	2301      	movs	r3, #1
 8011fae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011fb0:	2303      	movs	r3, #3
 8011fb2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8011fb4:	2307      	movs	r3, #7
 8011fb6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011fb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011fbc:	4619      	mov	r1, r3
 8011fbe:	481f      	ldr	r0, [pc, #124]	; (801203c <HAL_UART_MspInit+0x1c4>)
 8011fc0:	f7ef fff2 	bl	8001fa8 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8011fc4:	4b21      	ldr	r3, [pc, #132]	; (801204c <HAL_UART_MspInit+0x1d4>)
 8011fc6:	4a22      	ldr	r2, [pc, #136]	; (8012050 <HAL_UART_MspInit+0x1d8>)
 8011fc8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8011fca:	4b20      	ldr	r3, [pc, #128]	; (801204c <HAL_UART_MspInit+0x1d4>)
 8011fcc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8011fd0:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8011fd2:	4b1e      	ldr	r3, [pc, #120]	; (801204c <HAL_UART_MspInit+0x1d4>)
 8011fd4:	2200      	movs	r2, #0
 8011fd6:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8011fd8:	4b1c      	ldr	r3, [pc, #112]	; (801204c <HAL_UART_MspInit+0x1d4>)
 8011fda:	2200      	movs	r2, #0
 8011fdc:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8011fde:	4b1b      	ldr	r3, [pc, #108]	; (801204c <HAL_UART_MspInit+0x1d4>)
 8011fe0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8011fe4:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8011fe6:	4b19      	ldr	r3, [pc, #100]	; (801204c <HAL_UART_MspInit+0x1d4>)
 8011fe8:	2200      	movs	r2, #0
 8011fea:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8011fec:	4b17      	ldr	r3, [pc, #92]	; (801204c <HAL_UART_MspInit+0x1d4>)
 8011fee:	2200      	movs	r2, #0
 8011ff0:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8011ff2:	4b16      	ldr	r3, [pc, #88]	; (801204c <HAL_UART_MspInit+0x1d4>)
 8011ff4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011ff8:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8011ffa:	4b14      	ldr	r3, [pc, #80]	; (801204c <HAL_UART_MspInit+0x1d4>)
 8011ffc:	2200      	movs	r2, #0
 8011ffe:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8012000:	4b12      	ldr	r3, [pc, #72]	; (801204c <HAL_UART_MspInit+0x1d4>)
 8012002:	2200      	movs	r2, #0
 8012004:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8012006:	4811      	ldr	r0, [pc, #68]	; (801204c <HAL_UART_MspInit+0x1d4>)
 8012008:	f7ef f914 	bl	8001234 <HAL_DMA_Init>
 801200c:	4603      	mov	r3, r0
 801200e:	2b00      	cmp	r3, #0
 8012010:	d001      	beq.n	8012016 <HAL_UART_MspInit+0x19e>
      Error_Handler();
 8012012:	f7ff f88f 	bl	8011134 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	4a0c      	ldr	r2, [pc, #48]	; (801204c <HAL_UART_MspInit+0x1d4>)
 801201a:	635a      	str	r2, [r3, #52]	; 0x34
 801201c:	4a0b      	ldr	r2, [pc, #44]	; (801204c <HAL_UART_MspInit+0x1d4>)
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8012022:	2200      	movs	r2, #0
 8012024:	2105      	movs	r1, #5
 8012026:	2026      	movs	r0, #38	; 0x26
 8012028:	f7ef f8da 	bl	80011e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 801202c:	2026      	movs	r0, #38	; 0x26
 801202e:	f7ef f8f3 	bl	8001218 <HAL_NVIC_EnableIRQ>
}
 8012032:	e098      	b.n	8012166 <HAL_UART_MspInit+0x2ee>
 8012034:	40004c00 	.word	0x40004c00
 8012038:	40023800 	.word	0x40023800
 801203c:	40020000 	.word	0x40020000
 8012040:	20008280 	.word	0x20008280
 8012044:	40026040 	.word	0x40026040
 8012048:	40004400 	.word	0x40004400
 801204c:	200082e0 	.word	0x200082e0
 8012050:	40026088 	.word	0x40026088
  else if(huart->Instance==USART3)
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	681b      	ldr	r3, [r3, #0]
 8012058:	4a45      	ldr	r2, [pc, #276]	; (8012170 <HAL_UART_MspInit+0x2f8>)
 801205a:	4293      	cmp	r3, r2
 801205c:	f040 8083 	bne.w	8012166 <HAL_UART_MspInit+0x2ee>
    __HAL_RCC_USART3_CLK_ENABLE();
 8012060:	2300      	movs	r3, #0
 8012062:	613b      	str	r3, [r7, #16]
 8012064:	4b43      	ldr	r3, [pc, #268]	; (8012174 <HAL_UART_MspInit+0x2fc>)
 8012066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012068:	4a42      	ldr	r2, [pc, #264]	; (8012174 <HAL_UART_MspInit+0x2fc>)
 801206a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801206e:	6413      	str	r3, [r2, #64]	; 0x40
 8012070:	4b40      	ldr	r3, [pc, #256]	; (8012174 <HAL_UART_MspInit+0x2fc>)
 8012072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012074:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8012078:	613b      	str	r3, [r7, #16]
 801207a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801207c:	2300      	movs	r3, #0
 801207e:	60fb      	str	r3, [r7, #12]
 8012080:	4b3c      	ldr	r3, [pc, #240]	; (8012174 <HAL_UART_MspInit+0x2fc>)
 8012082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012084:	4a3b      	ldr	r2, [pc, #236]	; (8012174 <HAL_UART_MspInit+0x2fc>)
 8012086:	f043 0302 	orr.w	r3, r3, #2
 801208a:	6313      	str	r3, [r2, #48]	; 0x30
 801208c:	4b39      	ldr	r3, [pc, #228]	; (8012174 <HAL_UART_MspInit+0x2fc>)
 801208e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012090:	f003 0302 	and.w	r3, r3, #2
 8012094:	60fb      	str	r3, [r7, #12]
 8012096:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8012098:	2300      	movs	r3, #0
 801209a:	60bb      	str	r3, [r7, #8]
 801209c:	4b35      	ldr	r3, [pc, #212]	; (8012174 <HAL_UART_MspInit+0x2fc>)
 801209e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80120a0:	4a34      	ldr	r2, [pc, #208]	; (8012174 <HAL_UART_MspInit+0x2fc>)
 80120a2:	f043 0308 	orr.w	r3, r3, #8
 80120a6:	6313      	str	r3, [r2, #48]	; 0x30
 80120a8:	4b32      	ldr	r3, [pc, #200]	; (8012174 <HAL_UART_MspInit+0x2fc>)
 80120aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80120ac:	f003 0308 	and.w	r3, r3, #8
 80120b0:	60bb      	str	r3, [r7, #8]
 80120b2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80120b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80120b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80120ba:	2302      	movs	r3, #2
 80120bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80120be:	2301      	movs	r3, #1
 80120c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80120c2:	2303      	movs	r3, #3
 80120c4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80120c6:	2307      	movs	r3, #7
 80120c8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80120ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80120ce:	4619      	mov	r1, r3
 80120d0:	4829      	ldr	r0, [pc, #164]	; (8012178 <HAL_UART_MspInit+0x300>)
 80120d2:	f7ef ff69 	bl	8001fa8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80120d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80120da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80120dc:	2302      	movs	r3, #2
 80120de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80120e0:	2301      	movs	r3, #1
 80120e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80120e4:	2303      	movs	r3, #3
 80120e6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80120e8:	2307      	movs	r3, #7
 80120ea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80120ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80120f0:	4619      	mov	r1, r3
 80120f2:	4822      	ldr	r0, [pc, #136]	; (801217c <HAL_UART_MspInit+0x304>)
 80120f4:	f7ef ff58 	bl	8001fa8 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80120f8:	4b21      	ldr	r3, [pc, #132]	; (8012180 <HAL_UART_MspInit+0x308>)
 80120fa:	4a22      	ldr	r2, [pc, #136]	; (8012184 <HAL_UART_MspInit+0x30c>)
 80120fc:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80120fe:	4b20      	ldr	r3, [pc, #128]	; (8012180 <HAL_UART_MspInit+0x308>)
 8012100:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8012104:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8012106:	4b1e      	ldr	r3, [pc, #120]	; (8012180 <HAL_UART_MspInit+0x308>)
 8012108:	2200      	movs	r2, #0
 801210a:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 801210c:	4b1c      	ldr	r3, [pc, #112]	; (8012180 <HAL_UART_MspInit+0x308>)
 801210e:	2200      	movs	r2, #0
 8012110:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8012112:	4b1b      	ldr	r3, [pc, #108]	; (8012180 <HAL_UART_MspInit+0x308>)
 8012114:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8012118:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 801211a:	4b19      	ldr	r3, [pc, #100]	; (8012180 <HAL_UART_MspInit+0x308>)
 801211c:	2200      	movs	r2, #0
 801211e:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8012120:	4b17      	ldr	r3, [pc, #92]	; (8012180 <HAL_UART_MspInit+0x308>)
 8012122:	2200      	movs	r2, #0
 8012124:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8012126:	4b16      	ldr	r3, [pc, #88]	; (8012180 <HAL_UART_MspInit+0x308>)
 8012128:	f44f 7280 	mov.w	r2, #256	; 0x100
 801212c:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 801212e:	4b14      	ldr	r3, [pc, #80]	; (8012180 <HAL_UART_MspInit+0x308>)
 8012130:	2200      	movs	r2, #0
 8012132:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8012134:	4b12      	ldr	r3, [pc, #72]	; (8012180 <HAL_UART_MspInit+0x308>)
 8012136:	2200      	movs	r2, #0
 8012138:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 801213a:	4811      	ldr	r0, [pc, #68]	; (8012180 <HAL_UART_MspInit+0x308>)
 801213c:	f7ef f87a 	bl	8001234 <HAL_DMA_Init>
 8012140:	4603      	mov	r3, r0
 8012142:	2b00      	cmp	r3, #0
 8012144:	d001      	beq.n	801214a <HAL_UART_MspInit+0x2d2>
      Error_Handler();
 8012146:	f7fe fff5 	bl	8011134 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	4a0c      	ldr	r2, [pc, #48]	; (8012180 <HAL_UART_MspInit+0x308>)
 801214e:	635a      	str	r2, [r3, #52]	; 0x34
 8012150:	4a0b      	ldr	r2, [pc, #44]	; (8012180 <HAL_UART_MspInit+0x308>)
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8012156:	2200      	movs	r2, #0
 8012158:	2105      	movs	r1, #5
 801215a:	2027      	movs	r0, #39	; 0x27
 801215c:	f7ef f840 	bl	80011e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8012160:	2027      	movs	r0, #39	; 0x27
 8012162:	f7ef f859 	bl	8001218 <HAL_NVIC_EnableIRQ>
}
 8012166:	bf00      	nop
 8012168:	3738      	adds	r7, #56	; 0x38
 801216a:	46bd      	mov	sp, r7
 801216c:	bd80      	pop	{r7, pc}
 801216e:	bf00      	nop
 8012170:	40004800 	.word	0x40004800
 8012174:	40023800 	.word	0x40023800
 8012178:	40020400 	.word	0x40020400
 801217c:	40020c00 	.word	0x40020c00
 8012180:	20008398 	.word	0x20008398
 8012184:	40026028 	.word	0x40026028

08012188 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8012188:	b580      	push	{r7, lr}
 801218a:	b08c      	sub	sp, #48	; 0x30
 801218c:	af00      	add	r7, sp, #0
 801218e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8012190:	2300      	movs	r3, #0
 8012192:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8012194:	2300      	movs	r3, #0
 8012196:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8012198:	2200      	movs	r2, #0
 801219a:	6879      	ldr	r1, [r7, #4]
 801219c:	2019      	movs	r0, #25
 801219e:	f7ef f81f 	bl	80011e0 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 80121a2:	2019      	movs	r0, #25
 80121a4:	f7ef f838 	bl	8001218 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80121a8:	2300      	movs	r3, #0
 80121aa:	60fb      	str	r3, [r7, #12]
 80121ac:	4b1f      	ldr	r3, [pc, #124]	; (801222c <HAL_InitTick+0xa4>)
 80121ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80121b0:	4a1e      	ldr	r2, [pc, #120]	; (801222c <HAL_InitTick+0xa4>)
 80121b2:	f043 0301 	orr.w	r3, r3, #1
 80121b6:	6453      	str	r3, [r2, #68]	; 0x44
 80121b8:	4b1c      	ldr	r3, [pc, #112]	; (801222c <HAL_InitTick+0xa4>)
 80121ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80121bc:	f003 0301 	and.w	r3, r3, #1
 80121c0:	60fb      	str	r3, [r7, #12]
 80121c2:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80121c4:	f107 0210 	add.w	r2, r7, #16
 80121c8:	f107 0314 	add.w	r3, r7, #20
 80121cc:	4611      	mov	r1, r2
 80121ce:	4618      	mov	r0, r3
 80121d0:	f7f3 f8ee 	bl	80053b0 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80121d4:	f7f3 f8d8 	bl	8005388 <HAL_RCC_GetPCLK2Freq>
 80121d8:	4603      	mov	r3, r0
 80121da:	005b      	lsls	r3, r3, #1
 80121dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80121de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121e0:	4a13      	ldr	r2, [pc, #76]	; (8012230 <HAL_InitTick+0xa8>)
 80121e2:	fba2 2303 	umull	r2, r3, r2, r3
 80121e6:	0c9b      	lsrs	r3, r3, #18
 80121e8:	3b01      	subs	r3, #1
 80121ea:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80121ec:	4b11      	ldr	r3, [pc, #68]	; (8012234 <HAL_InitTick+0xac>)
 80121ee:	4a12      	ldr	r2, [pc, #72]	; (8012238 <HAL_InitTick+0xb0>)
 80121f0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 80121f2:	4b10      	ldr	r3, [pc, #64]	; (8012234 <HAL_InitTick+0xac>)
 80121f4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80121f8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80121fa:	4a0e      	ldr	r2, [pc, #56]	; (8012234 <HAL_InitTick+0xac>)
 80121fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121fe:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8012200:	4b0c      	ldr	r3, [pc, #48]	; (8012234 <HAL_InitTick+0xac>)
 8012202:	2200      	movs	r2, #0
 8012204:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8012206:	4b0b      	ldr	r3, [pc, #44]	; (8012234 <HAL_InitTick+0xac>)
 8012208:	2200      	movs	r2, #0
 801220a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 801220c:	4809      	ldr	r0, [pc, #36]	; (8012234 <HAL_InitTick+0xac>)
 801220e:	f7f4 f84f 	bl	80062b0 <HAL_TIM_Base_Init>
 8012212:	4603      	mov	r3, r0
 8012214:	2b00      	cmp	r3, #0
 8012216:	d104      	bne.n	8012222 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8012218:	4806      	ldr	r0, [pc, #24]	; (8012234 <HAL_InitTick+0xac>)
 801221a:	f7f4 f87e 	bl	800631a <HAL_TIM_Base_Start_IT>
 801221e:	4603      	mov	r3, r0
 8012220:	e000      	b.n	8012224 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8012222:	2301      	movs	r3, #1
}
 8012224:	4618      	mov	r0, r3
 8012226:	3730      	adds	r7, #48	; 0x30
 8012228:	46bd      	mov	sp, r7
 801222a:	bd80      	pop	{r7, pc}
 801222c:	40023800 	.word	0x40023800
 8012230:	431bde83 	.word	0x431bde83
 8012234:	20008684 	.word	0x20008684
 8012238:	40010000 	.word	0x40010000

0801223c <NMI_Handler>:
/*           Cortex-M4 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 801223c:	b580      	push	{r7, lr}
 801223e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */
	swvPrint("NMI_Handler.\n");
 8012240:	4802      	ldr	r0, [pc, #8]	; (801224c <NMI_Handler+0x10>)
 8012242:	f7f9 fb55 	bl	800b8f0 <swvPrint>

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */

	/* USER CODE END NonMaskableInt_IRQn 1 */
}
 8012246:	bf00      	nop
 8012248:	bd80      	pop	{r7, pc}
 801224a:	bf00      	nop
 801224c:	080164c8 	.word	0x080164c8

08012250 <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 8012250:	b580      	push	{r7, lr}
 8012252:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */
	swvPrint("Hard fault interrupt.\n");
 8012254:	4801      	ldr	r0, [pc, #4]	; (801225c <HardFault_Handler+0xc>)
 8012256:	f7f9 fb4b 	bl	800b8f0 <swvPrint>

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 801225a:	e7fe      	b.n	801225a <HardFault_Handler+0xa>
 801225c:	080164d8 	.word	0x080164d8

08012260 <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 8012260:	b580      	push	{r7, lr}
 8012262:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */
	swvPrint("Memory management fault.\n");
 8012264:	4801      	ldr	r0, [pc, #4]	; (801226c <MemManage_Handler+0xc>)
 8012266:	f7f9 fb43 	bl	800b8f0 <swvPrint>

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 801226a:	e7fe      	b.n	801226a <MemManage_Handler+0xa>
 801226c:	080164f0 	.word	0x080164f0

08012270 <BusFault_Handler>:
}

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 8012270:	b580      	push	{r7, lr}
 8012272:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */
	swvPrint("Pre-fetch fault, memory access fault.\n");
 8012274:	4801      	ldr	r0, [pc, #4]	; (801227c <BusFault_Handler+0xc>)
 8012276:	f7f9 fb3b 	bl	800b8f0 <swvPrint>

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 801227a:	e7fe      	b.n	801227a <BusFault_Handler+0xa>
 801227c:	0801650c 	.word	0x0801650c

08012280 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 8012280:	b580      	push	{r7, lr}
 8012282:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */
	swvPrint("Undefined instruction or illegal state.\n");
 8012284:	4801      	ldr	r0, [pc, #4]	; (801228c <UsageFault_Handler+0xc>)
 8012286:	f7f9 fb33 	bl	800b8f0 <swvPrint>

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 801228a:	e7fe      	b.n	801228a <UsageFault_Handler+0xa>
 801228c:	08016534 	.word	0x08016534

08012290 <DebugMon_Handler>:
}

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 8012290:	b580      	push	{r7, lr}
 8012292:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DebugMonitor_IRQn 0 */
	swvPrint("DebugMon_Handler.\n");
 8012294:	4802      	ldr	r0, [pc, #8]	; (80122a0 <DebugMon_Handler+0x10>)
 8012296:	f7f9 fb2b 	bl	800b8f0 <swvPrint>

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 801229a:	bf00      	nop
 801229c:	bd80      	pop	{r7, pc}
 801229e:	bf00      	nop
 80122a0:	08016560 	.word	0x08016560

080122a4 <DMA1_Stream1_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles DMA1 stream1 global interrupt.
 */
void DMA1_Stream1_IRQHandler(void) {
 80122a4:	b580      	push	{r7, lr}
 80122a6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

	/* USER CODE END DMA1_Stream1_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80122a8:	4804      	ldr	r0, [pc, #16]	; (80122bc <DMA1_Stream1_IRQHandler+0x18>)
 80122aa:	f7ef f951 	bl	8001550 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Stream1_IRQn 1 */
	SIMCOM_DMA_IrqHandler(&hdma_usart3_rx, &huart3);
 80122ae:	4904      	ldr	r1, [pc, #16]	; (80122c0 <DMA1_Stream1_IRQHandler+0x1c>)
 80122b0:	4802      	ldr	r0, [pc, #8]	; (80122bc <DMA1_Stream1_IRQHandler+0x18>)
 80122b2:	f7f8 fdb7 	bl	800ae24 <SIMCOM_DMA_IrqHandler>

	/* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80122b6:	bf00      	nop
 80122b8:	bd80      	pop	{r7, pc}
 80122ba:	bf00      	nop
 80122bc:	20008398 	.word	0x20008398
 80122c0:	200083f8 	.word	0x200083f8

080122c4 <DMA1_Stream2_IRQHandler>:

/**
 * @brief This function handles DMA1 stream2 global interrupt.
 */
void DMA1_Stream2_IRQHandler(void) {
 80122c4:	b580      	push	{r7, lr}
 80122c6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

	/* USER CODE END DMA1_Stream2_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80122c8:	4804      	ldr	r0, [pc, #16]	; (80122dc <DMA1_Stream2_IRQHandler+0x18>)
 80122ca:	f7ef f941 	bl	8001550 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Stream2_IRQn 1 */
	FINGER_DMA_IrqHandler(&hdma_uart4_rx, &huart4);
 80122ce:	4904      	ldr	r1, [pc, #16]	; (80122e0 <DMA1_Stream2_IRQHandler+0x1c>)
 80122d0:	4802      	ldr	r0, [pc, #8]	; (80122dc <DMA1_Stream2_IRQHandler+0x18>)
 80122d2:	f7f8 faff 	bl	800a8d4 <FINGER_DMA_IrqHandler>

	/* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80122d6:	bf00      	nop
 80122d8:	bd80      	pop	{r7, pc}
 80122da:	bf00      	nop
 80122dc:	20008280 	.word	0x20008280
 80122e0:	20008528 	.word	0x20008528

080122e4 <DMA1_Stream5_IRQHandler>:

/**
 * @brief This function handles DMA1 stream5 global interrupt.
 */
void DMA1_Stream5_IRQHandler(void) {
 80122e4:	b580      	push	{r7, lr}
 80122e6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

	/* USER CODE END DMA1_Stream5_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80122e8:	4804      	ldr	r0, [pc, #16]	; (80122fc <DMA1_Stream5_IRQHandler+0x18>)
 80122ea:	f7ef f931 	bl	8001550 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Stream5_IRQn 1 */
	UBLOX_DMA_IrqHandler(&hdma_usart2_rx, &huart2);
 80122ee:	4904      	ldr	r1, [pc, #16]	; (8012300 <DMA1_Stream5_IRQHandler+0x1c>)
 80122f0:	4802      	ldr	r0, [pc, #8]	; (80122fc <DMA1_Stream5_IRQHandler+0x18>)
 80122f2:	f7f9 f857 	bl	800b3a4 <UBLOX_DMA_IrqHandler>

	/* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80122f6:	bf00      	nop
 80122f8:	bd80      	pop	{r7, pc}
 80122fa:	bf00      	nop
 80122fc:	200082e0 	.word	0x200082e0
 8012300:	200085c4 	.word	0x200085c4

08012304 <TIM1_UP_TIM10_IRQHandler>:

/**
 * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
 */
void TIM1_UP_TIM10_IRQHandler(void) {
 8012304:	b580      	push	{r7, lr}
 8012306:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

	/* USER CODE END TIM1_UP_TIM10_IRQn 0 */
	HAL_TIM_IRQHandler(&htim1);
 8012308:	4802      	ldr	r0, [pc, #8]	; (8012314 <TIM1_UP_TIM10_IRQHandler+0x10>)
 801230a:	f7f4 f82a 	bl	8006362 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

	/* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 801230e:	bf00      	nop
 8012310:	bd80      	pop	{r7, pc}
 8012312:	bf00      	nop
 8012314:	20008684 	.word	0x20008684

08012318 <USART2_IRQHandler>:

/**
 * @brief This function handles USART2 global interrupt.
 */
void USART2_IRQHandler(void) {
 8012318:	b580      	push	{r7, lr}
 801231a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART2_IRQn 0 */

	/* USER CODE END USART2_IRQn 0 */
	HAL_UART_IRQHandler(&huart2);
 801231c:	4804      	ldr	r0, [pc, #16]	; (8012330 <USART2_IRQHandler+0x18>)
 801231e:	f7f4 fb6b 	bl	80069f8 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART2_IRQn 1 */
	UBLOX_USART_IrqHandler(&huart2, &hdma_usart2_rx);
 8012322:	4904      	ldr	r1, [pc, #16]	; (8012334 <USART2_IRQHandler+0x1c>)
 8012324:	4802      	ldr	r0, [pc, #8]	; (8012330 <USART2_IRQHandler+0x18>)
 8012326:	f7f9 f815 	bl	800b354 <UBLOX_USART_IrqHandler>

	/* USER CODE END USART2_IRQn 1 */
}
 801232a:	bf00      	nop
 801232c:	bd80      	pop	{r7, pc}
 801232e:	bf00      	nop
 8012330:	200085c4 	.word	0x200085c4
 8012334:	200082e0 	.word	0x200082e0

08012338 <USART3_IRQHandler>:

/**
 * @brief This function handles USART3 global interrupt.
 */
void USART3_IRQHandler(void) {
 8012338:	b580      	push	{r7, lr}
 801233a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART3_IRQn 0 */

	/* USER CODE END USART3_IRQn 0 */
	HAL_UART_IRQHandler(&huart3);
 801233c:	4804      	ldr	r0, [pc, #16]	; (8012350 <USART3_IRQHandler+0x18>)
 801233e:	f7f4 fb5b 	bl	80069f8 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART3_IRQn 1 */
	SIMCOM_USART_IrqHandler(&huart3, &hdma_usart3_rx);
 8012342:	4904      	ldr	r1, [pc, #16]	; (8012354 <USART3_IRQHandler+0x1c>)
 8012344:	4802      	ldr	r0, [pc, #8]	; (8012350 <USART3_IRQHandler+0x18>)
 8012346:	f7f8 fd45 	bl	800add4 <SIMCOM_USART_IrqHandler>

	/* USER CODE END USART3_IRQn 1 */
}
 801234a:	bf00      	nop
 801234c:	bd80      	pop	{r7, pc}
 801234e:	bf00      	nop
 8012350:	200083f8 	.word	0x200083f8
 8012354:	20008398 	.word	0x20008398

08012358 <EXTI15_10_IRQHandler>:

/**
 * @brief This function handles EXTI line[15:10] interrupts.
 */
void EXTI15_10_IRQHandler(void) {
 8012358:	b580      	push	{r7, lr}
 801235a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN EXTI15_10_IRQn 0 */

	/* USER CODE END EXTI15_10_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 801235c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8012360:	f7f0 f902 	bl	8002568 <HAL_GPIO_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI15_10_IRQn 1 */

	/* USER CODE END EXTI15_10_IRQn 1 */
}
 8012364:	bf00      	nop
 8012366:	bd80      	pop	{r7, pc}

08012368 <DMA1_Stream7_IRQHandler>:

/**
 * @brief This function handles DMA1 stream7 global interrupt.
 */
void DMA1_Stream7_IRQHandler(void) {
 8012368:	b580      	push	{r7, lr}
 801236a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

	/* USER CODE END DMA1_Stream7_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_spi3_tx);
 801236c:	4802      	ldr	r0, [pc, #8]	; (8012378 <DMA1_Stream7_IRQHandler+0x10>)
 801236e:	f7ef f8ef 	bl	8001550 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

	/* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8012372:	bf00      	nop
 8012374:	bd80      	pop	{r7, pc}
 8012376:	bf00      	nop
 8012378:	20008498 	.word	0x20008498

0801237c <SPI3_IRQHandler>:

/**
 * @brief This function handles SPI3 global interrupt.
 */
void SPI3_IRQHandler(void) {
 801237c:	b580      	push	{r7, lr}
 801237e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SPI3_IRQn 0 */

	/* USER CODE END SPI3_IRQn 0 */
	HAL_I2S_IRQHandler(&hi2s3);
 8012380:	4802      	ldr	r0, [pc, #8]	; (801238c <SPI3_IRQHandler+0x10>)
 8012382:	f7f2 f821 	bl	80043c8 <HAL_I2S_IRQHandler>
	/* USER CODE BEGIN SPI3_IRQn 1 */

	/* USER CODE END SPI3_IRQn 1 */
}
 8012386:	bf00      	nop
 8012388:	bd80      	pop	{r7, pc}
 801238a:	bf00      	nop
 801238c:	20008630 	.word	0x20008630

08012390 <UART4_IRQHandler>:

/**
 * @brief This function handles UART4 global interrupt.
 */
void UART4_IRQHandler(void) {
 8012390:	b580      	push	{r7, lr}
 8012392:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UART4_IRQn 0 */

	/* USER CODE END UART4_IRQn 0 */
	HAL_UART_IRQHandler(&huart4);
 8012394:	4804      	ldr	r0, [pc, #16]	; (80123a8 <UART4_IRQHandler+0x18>)
 8012396:	f7f4 fb2f 	bl	80069f8 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN UART4_IRQn 1 */
	FINGER_USART_IrqHandler(&huart4, &hdma_uart4_rx);
 801239a:	4904      	ldr	r1, [pc, #16]	; (80123ac <UART4_IRQHandler+0x1c>)
 801239c:	4802      	ldr	r0, [pc, #8]	; (80123a8 <UART4_IRQHandler+0x18>)
 801239e:	f7f8 fa71 	bl	800a884 <FINGER_USART_IrqHandler>

	/* USER CODE END UART4_IRQn 1 */
}
 80123a2:	bf00      	nop
 80123a4:	bd80      	pop	{r7, pc}
 80123a6:	bf00      	nop
 80123a8:	20008528 	.word	0x20008528
 80123ac:	20008280 	.word	0x20008280

080123b0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80123b0:	b580      	push	{r7, lr}
 80123b2:	b084      	sub	sp, #16
 80123b4:	af00      	add	r7, sp, #0
 80123b6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80123b8:	4b11      	ldr	r3, [pc, #68]	; (8012400 <_sbrk+0x50>)
 80123ba:	681b      	ldr	r3, [r3, #0]
 80123bc:	2b00      	cmp	r3, #0
 80123be:	d102      	bne.n	80123c6 <_sbrk+0x16>
		heap_end = &end;
 80123c0:	4b0f      	ldr	r3, [pc, #60]	; (8012400 <_sbrk+0x50>)
 80123c2:	4a10      	ldr	r2, [pc, #64]	; (8012404 <_sbrk+0x54>)
 80123c4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80123c6:	4b0e      	ldr	r3, [pc, #56]	; (8012400 <_sbrk+0x50>)
 80123c8:	681b      	ldr	r3, [r3, #0]
 80123ca:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80123cc:	4b0c      	ldr	r3, [pc, #48]	; (8012400 <_sbrk+0x50>)
 80123ce:	681a      	ldr	r2, [r3, #0]
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	4413      	add	r3, r2
 80123d4:	466a      	mov	r2, sp
 80123d6:	4293      	cmp	r3, r2
 80123d8:	d907      	bls.n	80123ea <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80123da:	f000 f879 	bl	80124d0 <__errno>
 80123de:	4602      	mov	r2, r0
 80123e0:	230c      	movs	r3, #12
 80123e2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80123e4:	f04f 33ff 	mov.w	r3, #4294967295
 80123e8:	e006      	b.n	80123f8 <_sbrk+0x48>
	}

	heap_end += incr;
 80123ea:	4b05      	ldr	r3, [pc, #20]	; (8012400 <_sbrk+0x50>)
 80123ec:	681a      	ldr	r2, [r3, #0]
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	4413      	add	r3, r2
 80123f2:	4a03      	ldr	r2, [pc, #12]	; (8012400 <_sbrk+0x50>)
 80123f4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80123f6:	68fb      	ldr	r3, [r7, #12]
}
 80123f8:	4618      	mov	r0, r3
 80123fa:	3710      	adds	r7, #16
 80123fc:	46bd      	mov	sp, r7
 80123fe:	bd80      	pop	{r7, pc}
 8012400:	20006850 	.word	0x20006850
 8012404:	200086c8 	.word	0x200086c8

08012408 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8012408:	b480      	push	{r7}
 801240a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 801240c:	4b16      	ldr	r3, [pc, #88]	; (8012468 <SystemInit+0x60>)
 801240e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012412:	4a15      	ldr	r2, [pc, #84]	; (8012468 <SystemInit+0x60>)
 8012414:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8012418:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 801241c:	4b13      	ldr	r3, [pc, #76]	; (801246c <SystemInit+0x64>)
 801241e:	681b      	ldr	r3, [r3, #0]
 8012420:	4a12      	ldr	r2, [pc, #72]	; (801246c <SystemInit+0x64>)
 8012422:	f043 0301 	orr.w	r3, r3, #1
 8012426:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8012428:	4b10      	ldr	r3, [pc, #64]	; (801246c <SystemInit+0x64>)
 801242a:	2200      	movs	r2, #0
 801242c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 801242e:	4b0f      	ldr	r3, [pc, #60]	; (801246c <SystemInit+0x64>)
 8012430:	681b      	ldr	r3, [r3, #0]
 8012432:	4a0e      	ldr	r2, [pc, #56]	; (801246c <SystemInit+0x64>)
 8012434:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8012438:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801243c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 801243e:	4b0b      	ldr	r3, [pc, #44]	; (801246c <SystemInit+0x64>)
 8012440:	4a0b      	ldr	r2, [pc, #44]	; (8012470 <SystemInit+0x68>)
 8012442:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8012444:	4b09      	ldr	r3, [pc, #36]	; (801246c <SystemInit+0x64>)
 8012446:	681b      	ldr	r3, [r3, #0]
 8012448:	4a08      	ldr	r2, [pc, #32]	; (801246c <SystemInit+0x64>)
 801244a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801244e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8012450:	4b06      	ldr	r3, [pc, #24]	; (801246c <SystemInit+0x64>)
 8012452:	2200      	movs	r2, #0
 8012454:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8012456:	4b04      	ldr	r3, [pc, #16]	; (8012468 <SystemInit+0x60>)
 8012458:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 801245c:	609a      	str	r2, [r3, #8]
#endif
}
 801245e:	bf00      	nop
 8012460:	46bd      	mov	sp, r7
 8012462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012466:	4770      	bx	lr
 8012468:	e000ed00 	.word	0xe000ed00
 801246c:	40023800 	.word	0x40023800
 8012470:	24003010 	.word	0x24003010

08012474 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8012474:	f8df d034 	ldr.w	sp, [pc, #52]	; 80124ac <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8012478:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 801247a:	e003      	b.n	8012484 <LoopCopyDataInit>

0801247c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 801247c:	4b0c      	ldr	r3, [pc, #48]	; (80124b0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 801247e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8012480:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8012482:	3104      	adds	r1, #4

08012484 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8012484:	480b      	ldr	r0, [pc, #44]	; (80124b4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8012486:	4b0c      	ldr	r3, [pc, #48]	; (80124b8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8012488:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 801248a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 801248c:	d3f6      	bcc.n	801247c <CopyDataInit>
  ldr  r2, =_sbss
 801248e:	4a0b      	ldr	r2, [pc, #44]	; (80124bc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8012490:	e002      	b.n	8012498 <LoopFillZerobss>

08012492 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8012492:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8012494:	f842 3b04 	str.w	r3, [r2], #4

08012498 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8012498:	4b09      	ldr	r3, [pc, #36]	; (80124c0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 801249a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 801249c:	d3f9      	bcc.n	8012492 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 801249e:	f7ff ffb3 	bl	8012408 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80124a2:	f000 f81b 	bl	80124dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80124a6:	f7fd fe7f 	bl	80101a8 <main>
  bx  lr    
 80124aa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80124ac:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80124b0:	080288e0 	.word	0x080288e0
  ldr  r0, =_sdata
 80124b4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80124b8:	20000224 	.word	0x20000224
  ldr  r2, =_sbss
 80124bc:	20000224 	.word	0x20000224
  ldr  r3, = _ebss
 80124c0:	200086c8 	.word	0x200086c8

080124c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80124c4:	e7fe      	b.n	80124c4 <ADC_IRQHandler>

080124c6 <atoi>:
 80124c6:	220a      	movs	r2, #10
 80124c8:	2100      	movs	r1, #0
 80124ca:	f000 bfb1 	b.w	8013430 <strtol>
	...

080124d0 <__errno>:
 80124d0:	4b01      	ldr	r3, [pc, #4]	; (80124d8 <__errno+0x8>)
 80124d2:	6818      	ldr	r0, [r3, #0]
 80124d4:	4770      	bx	lr
 80124d6:	bf00      	nop
 80124d8:	20000050 	.word	0x20000050

080124dc <__libc_init_array>:
 80124dc:	b570      	push	{r4, r5, r6, lr}
 80124de:	4e0d      	ldr	r6, [pc, #52]	; (8012514 <__libc_init_array+0x38>)
 80124e0:	4c0d      	ldr	r4, [pc, #52]	; (8012518 <__libc_init_array+0x3c>)
 80124e2:	1ba4      	subs	r4, r4, r6
 80124e4:	10a4      	asrs	r4, r4, #2
 80124e6:	2500      	movs	r5, #0
 80124e8:	42a5      	cmp	r5, r4
 80124ea:	d109      	bne.n	8012500 <__libc_init_array+0x24>
 80124ec:	4e0b      	ldr	r6, [pc, #44]	; (801251c <__libc_init_array+0x40>)
 80124ee:	4c0c      	ldr	r4, [pc, #48]	; (8012520 <__libc_init_array+0x44>)
 80124f0:	f003 fbe4 	bl	8015cbc <_init>
 80124f4:	1ba4      	subs	r4, r4, r6
 80124f6:	10a4      	asrs	r4, r4, #2
 80124f8:	2500      	movs	r5, #0
 80124fa:	42a5      	cmp	r5, r4
 80124fc:	d105      	bne.n	801250a <__libc_init_array+0x2e>
 80124fe:	bd70      	pop	{r4, r5, r6, pc}
 8012500:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8012504:	4798      	blx	r3
 8012506:	3501      	adds	r5, #1
 8012508:	e7ee      	b.n	80124e8 <__libc_init_array+0xc>
 801250a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801250e:	4798      	blx	r3
 8012510:	3501      	adds	r5, #1
 8012512:	e7f2      	b.n	80124fa <__libc_init_array+0x1e>
 8012514:	080288d8 	.word	0x080288d8
 8012518:	080288d8 	.word	0x080288d8
 801251c:	080288d8 	.word	0x080288d8
 8012520:	080288dc 	.word	0x080288dc

08012524 <__itoa>:
 8012524:	1e93      	subs	r3, r2, #2
 8012526:	2b22      	cmp	r3, #34	; 0x22
 8012528:	b510      	push	{r4, lr}
 801252a:	460c      	mov	r4, r1
 801252c:	d904      	bls.n	8012538 <__itoa+0x14>
 801252e:	2300      	movs	r3, #0
 8012530:	700b      	strb	r3, [r1, #0]
 8012532:	461c      	mov	r4, r3
 8012534:	4620      	mov	r0, r4
 8012536:	bd10      	pop	{r4, pc}
 8012538:	2a0a      	cmp	r2, #10
 801253a:	d109      	bne.n	8012550 <__itoa+0x2c>
 801253c:	2800      	cmp	r0, #0
 801253e:	da07      	bge.n	8012550 <__itoa+0x2c>
 8012540:	232d      	movs	r3, #45	; 0x2d
 8012542:	700b      	strb	r3, [r1, #0]
 8012544:	4240      	negs	r0, r0
 8012546:	2101      	movs	r1, #1
 8012548:	4421      	add	r1, r4
 801254a:	f000 ff87 	bl	801345c <__utoa>
 801254e:	e7f1      	b.n	8012534 <__itoa+0x10>
 8012550:	2100      	movs	r1, #0
 8012552:	e7f9      	b.n	8012548 <__itoa+0x24>

08012554 <itoa>:
 8012554:	f7ff bfe6 	b.w	8012524 <__itoa>

08012558 <memcpy>:
 8012558:	b510      	push	{r4, lr}
 801255a:	1e43      	subs	r3, r0, #1
 801255c:	440a      	add	r2, r1
 801255e:	4291      	cmp	r1, r2
 8012560:	d100      	bne.n	8012564 <memcpy+0xc>
 8012562:	bd10      	pop	{r4, pc}
 8012564:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012568:	f803 4f01 	strb.w	r4, [r3, #1]!
 801256c:	e7f7      	b.n	801255e <memcpy+0x6>

0801256e <memset>:
 801256e:	4402      	add	r2, r0
 8012570:	4603      	mov	r3, r0
 8012572:	4293      	cmp	r3, r2
 8012574:	d100      	bne.n	8012578 <memset+0xa>
 8012576:	4770      	bx	lr
 8012578:	f803 1b01 	strb.w	r1, [r3], #1
 801257c:	e7f9      	b.n	8012572 <memset+0x4>
	...

08012580 <siprintf>:
 8012580:	b40e      	push	{r1, r2, r3}
 8012582:	b500      	push	{lr}
 8012584:	b09c      	sub	sp, #112	; 0x70
 8012586:	ab1d      	add	r3, sp, #116	; 0x74
 8012588:	9002      	str	r0, [sp, #8]
 801258a:	9006      	str	r0, [sp, #24]
 801258c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012590:	4809      	ldr	r0, [pc, #36]	; (80125b8 <siprintf+0x38>)
 8012592:	9107      	str	r1, [sp, #28]
 8012594:	9104      	str	r1, [sp, #16]
 8012596:	4909      	ldr	r1, [pc, #36]	; (80125bc <siprintf+0x3c>)
 8012598:	f853 2b04 	ldr.w	r2, [r3], #4
 801259c:	9105      	str	r1, [sp, #20]
 801259e:	6800      	ldr	r0, [r0, #0]
 80125a0:	9301      	str	r3, [sp, #4]
 80125a2:	a902      	add	r1, sp, #8
 80125a4:	f001 ff96 	bl	80144d4 <_svfiprintf_r>
 80125a8:	9b02      	ldr	r3, [sp, #8]
 80125aa:	2200      	movs	r2, #0
 80125ac:	701a      	strb	r2, [r3, #0]
 80125ae:	b01c      	add	sp, #112	; 0x70
 80125b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80125b4:	b003      	add	sp, #12
 80125b6:	4770      	bx	lr
 80125b8:	20000050 	.word	0x20000050
 80125bc:	ffff0208 	.word	0xffff0208

080125c0 <strchr>:
 80125c0:	b2c9      	uxtb	r1, r1
 80125c2:	4603      	mov	r3, r0
 80125c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80125c8:	b11a      	cbz	r2, 80125d2 <strchr+0x12>
 80125ca:	428a      	cmp	r2, r1
 80125cc:	d1f9      	bne.n	80125c2 <strchr+0x2>
 80125ce:	4618      	mov	r0, r3
 80125d0:	4770      	bx	lr
 80125d2:	2900      	cmp	r1, #0
 80125d4:	bf18      	it	ne
 80125d6:	2300      	movne	r3, #0
 80125d8:	e7f9      	b.n	80125ce <strchr+0xe>

080125da <strcpy>:
 80125da:	4603      	mov	r3, r0
 80125dc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80125e0:	f803 2b01 	strb.w	r2, [r3], #1
 80125e4:	2a00      	cmp	r2, #0
 80125e6:	d1f9      	bne.n	80125dc <strcpy+0x2>
 80125e8:	4770      	bx	lr

080125ea <strncmp>:
 80125ea:	b510      	push	{r4, lr}
 80125ec:	b16a      	cbz	r2, 801260a <strncmp+0x20>
 80125ee:	3901      	subs	r1, #1
 80125f0:	1884      	adds	r4, r0, r2
 80125f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80125f6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80125fa:	4293      	cmp	r3, r2
 80125fc:	d103      	bne.n	8012606 <strncmp+0x1c>
 80125fe:	42a0      	cmp	r0, r4
 8012600:	d001      	beq.n	8012606 <strncmp+0x1c>
 8012602:	2b00      	cmp	r3, #0
 8012604:	d1f5      	bne.n	80125f2 <strncmp+0x8>
 8012606:	1a98      	subs	r0, r3, r2
 8012608:	bd10      	pop	{r4, pc}
 801260a:	4610      	mov	r0, r2
 801260c:	e7fc      	b.n	8012608 <strncmp+0x1e>

0801260e <strncpy>:
 801260e:	b570      	push	{r4, r5, r6, lr}
 8012610:	3901      	subs	r1, #1
 8012612:	4604      	mov	r4, r0
 8012614:	b902      	cbnz	r2, 8012618 <strncpy+0xa>
 8012616:	bd70      	pop	{r4, r5, r6, pc}
 8012618:	4623      	mov	r3, r4
 801261a:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 801261e:	f803 5b01 	strb.w	r5, [r3], #1
 8012622:	1e56      	subs	r6, r2, #1
 8012624:	b92d      	cbnz	r5, 8012632 <strncpy+0x24>
 8012626:	4414      	add	r4, r2
 8012628:	42a3      	cmp	r3, r4
 801262a:	d0f4      	beq.n	8012616 <strncpy+0x8>
 801262c:	f803 5b01 	strb.w	r5, [r3], #1
 8012630:	e7fa      	b.n	8012628 <strncpy+0x1a>
 8012632:	461c      	mov	r4, r3
 8012634:	4632      	mov	r2, r6
 8012636:	e7ed      	b.n	8012614 <strncpy+0x6>

08012638 <strstr>:
 8012638:	b5f0      	push	{r4, r5, r6, r7, lr}
 801263a:	7803      	ldrb	r3, [r0, #0]
 801263c:	b17b      	cbz	r3, 801265e <strstr+0x26>
 801263e:	4604      	mov	r4, r0
 8012640:	7823      	ldrb	r3, [r4, #0]
 8012642:	4620      	mov	r0, r4
 8012644:	1c66      	adds	r6, r4, #1
 8012646:	b17b      	cbz	r3, 8012668 <strstr+0x30>
 8012648:	1e4a      	subs	r2, r1, #1
 801264a:	1e63      	subs	r3, r4, #1
 801264c:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8012650:	b14d      	cbz	r5, 8012666 <strstr+0x2e>
 8012652:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8012656:	42af      	cmp	r7, r5
 8012658:	4634      	mov	r4, r6
 801265a:	d0f7      	beq.n	801264c <strstr+0x14>
 801265c:	e7f0      	b.n	8012640 <strstr+0x8>
 801265e:	780b      	ldrb	r3, [r1, #0]
 8012660:	2b00      	cmp	r3, #0
 8012662:	bf18      	it	ne
 8012664:	2000      	movne	r0, #0
 8012666:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012668:	4618      	mov	r0, r3
 801266a:	e7fc      	b.n	8012666 <strstr+0x2e>

0801266c <sulp>:
 801266c:	b570      	push	{r4, r5, r6, lr}
 801266e:	4604      	mov	r4, r0
 8012670:	460d      	mov	r5, r1
 8012672:	ec45 4b10 	vmov	d0, r4, r5
 8012676:	4616      	mov	r6, r2
 8012678:	f001 fd36 	bl	80140e8 <__ulp>
 801267c:	ec51 0b10 	vmov	r0, r1, d0
 8012680:	b17e      	cbz	r6, 80126a2 <sulp+0x36>
 8012682:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8012686:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801268a:	2b00      	cmp	r3, #0
 801268c:	dd09      	ble.n	80126a2 <sulp+0x36>
 801268e:	051b      	lsls	r3, r3, #20
 8012690:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8012694:	2400      	movs	r4, #0
 8012696:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801269a:	4622      	mov	r2, r4
 801269c:	462b      	mov	r3, r5
 801269e:	f7ed ffbb 	bl	8000618 <__aeabi_dmul>
 80126a2:	bd70      	pop	{r4, r5, r6, pc}
 80126a4:	0000      	movs	r0, r0
	...

080126a8 <_strtod_l>:
 80126a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126ac:	461f      	mov	r7, r3
 80126ae:	b0a1      	sub	sp, #132	; 0x84
 80126b0:	2300      	movs	r3, #0
 80126b2:	4681      	mov	r9, r0
 80126b4:	4638      	mov	r0, r7
 80126b6:	460e      	mov	r6, r1
 80126b8:	9217      	str	r2, [sp, #92]	; 0x5c
 80126ba:	931c      	str	r3, [sp, #112]	; 0x70
 80126bc:	f001 fa35 	bl	8013b2a <__localeconv_l>
 80126c0:	4680      	mov	r8, r0
 80126c2:	6800      	ldr	r0, [r0, #0]
 80126c4:	f7ed fd8e 	bl	80001e4 <strlen>
 80126c8:	f04f 0a00 	mov.w	sl, #0
 80126cc:	4604      	mov	r4, r0
 80126ce:	f04f 0b00 	mov.w	fp, #0
 80126d2:	961b      	str	r6, [sp, #108]	; 0x6c
 80126d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80126d6:	781a      	ldrb	r2, [r3, #0]
 80126d8:	2a0d      	cmp	r2, #13
 80126da:	d832      	bhi.n	8012742 <_strtod_l+0x9a>
 80126dc:	2a09      	cmp	r2, #9
 80126de:	d236      	bcs.n	801274e <_strtod_l+0xa6>
 80126e0:	2a00      	cmp	r2, #0
 80126e2:	d03e      	beq.n	8012762 <_strtod_l+0xba>
 80126e4:	2300      	movs	r3, #0
 80126e6:	930d      	str	r3, [sp, #52]	; 0x34
 80126e8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80126ea:	782b      	ldrb	r3, [r5, #0]
 80126ec:	2b30      	cmp	r3, #48	; 0x30
 80126ee:	f040 80ac 	bne.w	801284a <_strtod_l+0x1a2>
 80126f2:	786b      	ldrb	r3, [r5, #1]
 80126f4:	2b58      	cmp	r3, #88	; 0x58
 80126f6:	d001      	beq.n	80126fc <_strtod_l+0x54>
 80126f8:	2b78      	cmp	r3, #120	; 0x78
 80126fa:	d167      	bne.n	80127cc <_strtod_l+0x124>
 80126fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80126fe:	9301      	str	r3, [sp, #4]
 8012700:	ab1c      	add	r3, sp, #112	; 0x70
 8012702:	9300      	str	r3, [sp, #0]
 8012704:	9702      	str	r7, [sp, #8]
 8012706:	ab1d      	add	r3, sp, #116	; 0x74
 8012708:	4a88      	ldr	r2, [pc, #544]	; (801292c <_strtod_l+0x284>)
 801270a:	a91b      	add	r1, sp, #108	; 0x6c
 801270c:	4648      	mov	r0, r9
 801270e:	f000 ff32 	bl	8013576 <__gethex>
 8012712:	f010 0407 	ands.w	r4, r0, #7
 8012716:	4606      	mov	r6, r0
 8012718:	d005      	beq.n	8012726 <_strtod_l+0x7e>
 801271a:	2c06      	cmp	r4, #6
 801271c:	d12b      	bne.n	8012776 <_strtod_l+0xce>
 801271e:	3501      	adds	r5, #1
 8012720:	2300      	movs	r3, #0
 8012722:	951b      	str	r5, [sp, #108]	; 0x6c
 8012724:	930d      	str	r3, [sp, #52]	; 0x34
 8012726:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012728:	2b00      	cmp	r3, #0
 801272a:	f040 859a 	bne.w	8013262 <_strtod_l+0xbba>
 801272e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012730:	b1e3      	cbz	r3, 801276c <_strtod_l+0xc4>
 8012732:	4652      	mov	r2, sl
 8012734:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8012738:	ec43 2b10 	vmov	d0, r2, r3
 801273c:	b021      	add	sp, #132	; 0x84
 801273e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012742:	2a2b      	cmp	r2, #43	; 0x2b
 8012744:	d015      	beq.n	8012772 <_strtod_l+0xca>
 8012746:	2a2d      	cmp	r2, #45	; 0x2d
 8012748:	d004      	beq.n	8012754 <_strtod_l+0xac>
 801274a:	2a20      	cmp	r2, #32
 801274c:	d1ca      	bne.n	80126e4 <_strtod_l+0x3c>
 801274e:	3301      	adds	r3, #1
 8012750:	931b      	str	r3, [sp, #108]	; 0x6c
 8012752:	e7bf      	b.n	80126d4 <_strtod_l+0x2c>
 8012754:	2201      	movs	r2, #1
 8012756:	920d      	str	r2, [sp, #52]	; 0x34
 8012758:	1c5a      	adds	r2, r3, #1
 801275a:	921b      	str	r2, [sp, #108]	; 0x6c
 801275c:	785b      	ldrb	r3, [r3, #1]
 801275e:	2b00      	cmp	r3, #0
 8012760:	d1c2      	bne.n	80126e8 <_strtod_l+0x40>
 8012762:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012764:	961b      	str	r6, [sp, #108]	; 0x6c
 8012766:	2b00      	cmp	r3, #0
 8012768:	f040 8579 	bne.w	801325e <_strtod_l+0xbb6>
 801276c:	4652      	mov	r2, sl
 801276e:	465b      	mov	r3, fp
 8012770:	e7e2      	b.n	8012738 <_strtod_l+0x90>
 8012772:	2200      	movs	r2, #0
 8012774:	e7ef      	b.n	8012756 <_strtod_l+0xae>
 8012776:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8012778:	b13a      	cbz	r2, 801278a <_strtod_l+0xe2>
 801277a:	2135      	movs	r1, #53	; 0x35
 801277c:	a81e      	add	r0, sp, #120	; 0x78
 801277e:	f001 fdab 	bl	80142d8 <__copybits>
 8012782:	991c      	ldr	r1, [sp, #112]	; 0x70
 8012784:	4648      	mov	r0, r9
 8012786:	f001 fa18 	bl	8013bba <_Bfree>
 801278a:	3c01      	subs	r4, #1
 801278c:	2c04      	cmp	r4, #4
 801278e:	d806      	bhi.n	801279e <_strtod_l+0xf6>
 8012790:	e8df f004 	tbb	[pc, r4]
 8012794:	1714030a 	.word	0x1714030a
 8012798:	0a          	.byte	0x0a
 8012799:	00          	.byte	0x00
 801279a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 801279e:	0730      	lsls	r0, r6, #28
 80127a0:	d5c1      	bpl.n	8012726 <_strtod_l+0x7e>
 80127a2:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80127a6:	e7be      	b.n	8012726 <_strtod_l+0x7e>
 80127a8:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 80127ac:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80127ae:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80127b2:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80127b6:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80127ba:	e7f0      	b.n	801279e <_strtod_l+0xf6>
 80127bc:	f8df b170 	ldr.w	fp, [pc, #368]	; 8012930 <_strtod_l+0x288>
 80127c0:	e7ed      	b.n	801279e <_strtod_l+0xf6>
 80127c2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80127c6:	f04f 3aff 	mov.w	sl, #4294967295
 80127ca:	e7e8      	b.n	801279e <_strtod_l+0xf6>
 80127cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80127ce:	1c5a      	adds	r2, r3, #1
 80127d0:	921b      	str	r2, [sp, #108]	; 0x6c
 80127d2:	785b      	ldrb	r3, [r3, #1]
 80127d4:	2b30      	cmp	r3, #48	; 0x30
 80127d6:	d0f9      	beq.n	80127cc <_strtod_l+0x124>
 80127d8:	2b00      	cmp	r3, #0
 80127da:	d0a4      	beq.n	8012726 <_strtod_l+0x7e>
 80127dc:	2301      	movs	r3, #1
 80127de:	2500      	movs	r5, #0
 80127e0:	9306      	str	r3, [sp, #24]
 80127e2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80127e4:	9308      	str	r3, [sp, #32]
 80127e6:	9507      	str	r5, [sp, #28]
 80127e8:	9505      	str	r5, [sp, #20]
 80127ea:	220a      	movs	r2, #10
 80127ec:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80127ee:	7807      	ldrb	r7, [r0, #0]
 80127f0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80127f4:	b2d9      	uxtb	r1, r3
 80127f6:	2909      	cmp	r1, #9
 80127f8:	d929      	bls.n	801284e <_strtod_l+0x1a6>
 80127fa:	4622      	mov	r2, r4
 80127fc:	f8d8 1000 	ldr.w	r1, [r8]
 8012800:	f7ff fef3 	bl	80125ea <strncmp>
 8012804:	2800      	cmp	r0, #0
 8012806:	d031      	beq.n	801286c <_strtod_l+0x1c4>
 8012808:	2000      	movs	r0, #0
 801280a:	9c05      	ldr	r4, [sp, #20]
 801280c:	9004      	str	r0, [sp, #16]
 801280e:	463b      	mov	r3, r7
 8012810:	4602      	mov	r2, r0
 8012812:	2b65      	cmp	r3, #101	; 0x65
 8012814:	d001      	beq.n	801281a <_strtod_l+0x172>
 8012816:	2b45      	cmp	r3, #69	; 0x45
 8012818:	d114      	bne.n	8012844 <_strtod_l+0x19c>
 801281a:	b924      	cbnz	r4, 8012826 <_strtod_l+0x17e>
 801281c:	b910      	cbnz	r0, 8012824 <_strtod_l+0x17c>
 801281e:	9b06      	ldr	r3, [sp, #24]
 8012820:	2b00      	cmp	r3, #0
 8012822:	d09e      	beq.n	8012762 <_strtod_l+0xba>
 8012824:	2400      	movs	r4, #0
 8012826:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8012828:	1c73      	adds	r3, r6, #1
 801282a:	931b      	str	r3, [sp, #108]	; 0x6c
 801282c:	7873      	ldrb	r3, [r6, #1]
 801282e:	2b2b      	cmp	r3, #43	; 0x2b
 8012830:	d078      	beq.n	8012924 <_strtod_l+0x27c>
 8012832:	2b2d      	cmp	r3, #45	; 0x2d
 8012834:	d070      	beq.n	8012918 <_strtod_l+0x270>
 8012836:	f04f 0c00 	mov.w	ip, #0
 801283a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 801283e:	2f09      	cmp	r7, #9
 8012840:	d97c      	bls.n	801293c <_strtod_l+0x294>
 8012842:	961b      	str	r6, [sp, #108]	; 0x6c
 8012844:	f04f 0e00 	mov.w	lr, #0
 8012848:	e09a      	b.n	8012980 <_strtod_l+0x2d8>
 801284a:	2300      	movs	r3, #0
 801284c:	e7c7      	b.n	80127de <_strtod_l+0x136>
 801284e:	9905      	ldr	r1, [sp, #20]
 8012850:	2908      	cmp	r1, #8
 8012852:	bfdd      	ittte	le
 8012854:	9907      	ldrle	r1, [sp, #28]
 8012856:	fb02 3301 	mlale	r3, r2, r1, r3
 801285a:	9307      	strle	r3, [sp, #28]
 801285c:	fb02 3505 	mlagt	r5, r2, r5, r3
 8012860:	9b05      	ldr	r3, [sp, #20]
 8012862:	3001      	adds	r0, #1
 8012864:	3301      	adds	r3, #1
 8012866:	9305      	str	r3, [sp, #20]
 8012868:	901b      	str	r0, [sp, #108]	; 0x6c
 801286a:	e7bf      	b.n	80127ec <_strtod_l+0x144>
 801286c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801286e:	191a      	adds	r2, r3, r4
 8012870:	921b      	str	r2, [sp, #108]	; 0x6c
 8012872:	9a05      	ldr	r2, [sp, #20]
 8012874:	5d1b      	ldrb	r3, [r3, r4]
 8012876:	2a00      	cmp	r2, #0
 8012878:	d037      	beq.n	80128ea <_strtod_l+0x242>
 801287a:	9c05      	ldr	r4, [sp, #20]
 801287c:	4602      	mov	r2, r0
 801287e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8012882:	2909      	cmp	r1, #9
 8012884:	d913      	bls.n	80128ae <_strtod_l+0x206>
 8012886:	2101      	movs	r1, #1
 8012888:	9104      	str	r1, [sp, #16]
 801288a:	e7c2      	b.n	8012812 <_strtod_l+0x16a>
 801288c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801288e:	1c5a      	adds	r2, r3, #1
 8012890:	921b      	str	r2, [sp, #108]	; 0x6c
 8012892:	785b      	ldrb	r3, [r3, #1]
 8012894:	3001      	adds	r0, #1
 8012896:	2b30      	cmp	r3, #48	; 0x30
 8012898:	d0f8      	beq.n	801288c <_strtod_l+0x1e4>
 801289a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801289e:	2a08      	cmp	r2, #8
 80128a0:	f200 84e4 	bhi.w	801326c <_strtod_l+0xbc4>
 80128a4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80128a6:	9208      	str	r2, [sp, #32]
 80128a8:	4602      	mov	r2, r0
 80128aa:	2000      	movs	r0, #0
 80128ac:	4604      	mov	r4, r0
 80128ae:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 80128b2:	f100 0101 	add.w	r1, r0, #1
 80128b6:	d012      	beq.n	80128de <_strtod_l+0x236>
 80128b8:	440a      	add	r2, r1
 80128ba:	eb00 0c04 	add.w	ip, r0, r4
 80128be:	4621      	mov	r1, r4
 80128c0:	270a      	movs	r7, #10
 80128c2:	458c      	cmp	ip, r1
 80128c4:	d113      	bne.n	80128ee <_strtod_l+0x246>
 80128c6:	1821      	adds	r1, r4, r0
 80128c8:	2908      	cmp	r1, #8
 80128ca:	f104 0401 	add.w	r4, r4, #1
 80128ce:	4404      	add	r4, r0
 80128d0:	dc19      	bgt.n	8012906 <_strtod_l+0x25e>
 80128d2:	9b07      	ldr	r3, [sp, #28]
 80128d4:	210a      	movs	r1, #10
 80128d6:	fb01 e303 	mla	r3, r1, r3, lr
 80128da:	9307      	str	r3, [sp, #28]
 80128dc:	2100      	movs	r1, #0
 80128de:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80128e0:	1c58      	adds	r0, r3, #1
 80128e2:	901b      	str	r0, [sp, #108]	; 0x6c
 80128e4:	785b      	ldrb	r3, [r3, #1]
 80128e6:	4608      	mov	r0, r1
 80128e8:	e7c9      	b.n	801287e <_strtod_l+0x1d6>
 80128ea:	9805      	ldr	r0, [sp, #20]
 80128ec:	e7d3      	b.n	8012896 <_strtod_l+0x1ee>
 80128ee:	2908      	cmp	r1, #8
 80128f0:	f101 0101 	add.w	r1, r1, #1
 80128f4:	dc03      	bgt.n	80128fe <_strtod_l+0x256>
 80128f6:	9b07      	ldr	r3, [sp, #28]
 80128f8:	437b      	muls	r3, r7
 80128fa:	9307      	str	r3, [sp, #28]
 80128fc:	e7e1      	b.n	80128c2 <_strtod_l+0x21a>
 80128fe:	2910      	cmp	r1, #16
 8012900:	bfd8      	it	le
 8012902:	437d      	mulle	r5, r7
 8012904:	e7dd      	b.n	80128c2 <_strtod_l+0x21a>
 8012906:	2c10      	cmp	r4, #16
 8012908:	bfdc      	itt	le
 801290a:	210a      	movle	r1, #10
 801290c:	fb01 e505 	mlale	r5, r1, r5, lr
 8012910:	e7e4      	b.n	80128dc <_strtod_l+0x234>
 8012912:	2301      	movs	r3, #1
 8012914:	9304      	str	r3, [sp, #16]
 8012916:	e781      	b.n	801281c <_strtod_l+0x174>
 8012918:	f04f 0c01 	mov.w	ip, #1
 801291c:	1cb3      	adds	r3, r6, #2
 801291e:	931b      	str	r3, [sp, #108]	; 0x6c
 8012920:	78b3      	ldrb	r3, [r6, #2]
 8012922:	e78a      	b.n	801283a <_strtod_l+0x192>
 8012924:	f04f 0c00 	mov.w	ip, #0
 8012928:	e7f8      	b.n	801291c <_strtod_l+0x274>
 801292a:	bf00      	nop
 801292c:	080285d0 	.word	0x080285d0
 8012930:	7ff00000 	.word	0x7ff00000
 8012934:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012936:	1c5f      	adds	r7, r3, #1
 8012938:	971b      	str	r7, [sp, #108]	; 0x6c
 801293a:	785b      	ldrb	r3, [r3, #1]
 801293c:	2b30      	cmp	r3, #48	; 0x30
 801293e:	d0f9      	beq.n	8012934 <_strtod_l+0x28c>
 8012940:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8012944:	2f08      	cmp	r7, #8
 8012946:	f63f af7d 	bhi.w	8012844 <_strtod_l+0x19c>
 801294a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 801294e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012950:	930a      	str	r3, [sp, #40]	; 0x28
 8012952:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012954:	1c5f      	adds	r7, r3, #1
 8012956:	971b      	str	r7, [sp, #108]	; 0x6c
 8012958:	785b      	ldrb	r3, [r3, #1]
 801295a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 801295e:	f1b8 0f09 	cmp.w	r8, #9
 8012962:	d937      	bls.n	80129d4 <_strtod_l+0x32c>
 8012964:	990a      	ldr	r1, [sp, #40]	; 0x28
 8012966:	1a7f      	subs	r7, r7, r1
 8012968:	2f08      	cmp	r7, #8
 801296a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 801296e:	dc37      	bgt.n	80129e0 <_strtod_l+0x338>
 8012970:	45be      	cmp	lr, r7
 8012972:	bfa8      	it	ge
 8012974:	46be      	movge	lr, r7
 8012976:	f1bc 0f00 	cmp.w	ip, #0
 801297a:	d001      	beq.n	8012980 <_strtod_l+0x2d8>
 801297c:	f1ce 0e00 	rsb	lr, lr, #0
 8012980:	2c00      	cmp	r4, #0
 8012982:	d151      	bne.n	8012a28 <_strtod_l+0x380>
 8012984:	2800      	cmp	r0, #0
 8012986:	f47f aece 	bne.w	8012726 <_strtod_l+0x7e>
 801298a:	9a06      	ldr	r2, [sp, #24]
 801298c:	2a00      	cmp	r2, #0
 801298e:	f47f aeca 	bne.w	8012726 <_strtod_l+0x7e>
 8012992:	9a04      	ldr	r2, [sp, #16]
 8012994:	2a00      	cmp	r2, #0
 8012996:	f47f aee4 	bne.w	8012762 <_strtod_l+0xba>
 801299a:	2b4e      	cmp	r3, #78	; 0x4e
 801299c:	d027      	beq.n	80129ee <_strtod_l+0x346>
 801299e:	dc21      	bgt.n	80129e4 <_strtod_l+0x33c>
 80129a0:	2b49      	cmp	r3, #73	; 0x49
 80129a2:	f47f aede 	bne.w	8012762 <_strtod_l+0xba>
 80129a6:	49a0      	ldr	r1, [pc, #640]	; (8012c28 <_strtod_l+0x580>)
 80129a8:	a81b      	add	r0, sp, #108	; 0x6c
 80129aa:	f001 f817 	bl	80139dc <__match>
 80129ae:	2800      	cmp	r0, #0
 80129b0:	f43f aed7 	beq.w	8012762 <_strtod_l+0xba>
 80129b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80129b6:	499d      	ldr	r1, [pc, #628]	; (8012c2c <_strtod_l+0x584>)
 80129b8:	3b01      	subs	r3, #1
 80129ba:	a81b      	add	r0, sp, #108	; 0x6c
 80129bc:	931b      	str	r3, [sp, #108]	; 0x6c
 80129be:	f001 f80d 	bl	80139dc <__match>
 80129c2:	b910      	cbnz	r0, 80129ca <_strtod_l+0x322>
 80129c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80129c6:	3301      	adds	r3, #1
 80129c8:	931b      	str	r3, [sp, #108]	; 0x6c
 80129ca:	f8df b274 	ldr.w	fp, [pc, #628]	; 8012c40 <_strtod_l+0x598>
 80129ce:	f04f 0a00 	mov.w	sl, #0
 80129d2:	e6a8      	b.n	8012726 <_strtod_l+0x7e>
 80129d4:	210a      	movs	r1, #10
 80129d6:	fb01 3e0e 	mla	lr, r1, lr, r3
 80129da:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80129de:	e7b8      	b.n	8012952 <_strtod_l+0x2aa>
 80129e0:	46be      	mov	lr, r7
 80129e2:	e7c8      	b.n	8012976 <_strtod_l+0x2ce>
 80129e4:	2b69      	cmp	r3, #105	; 0x69
 80129e6:	d0de      	beq.n	80129a6 <_strtod_l+0x2fe>
 80129e8:	2b6e      	cmp	r3, #110	; 0x6e
 80129ea:	f47f aeba 	bne.w	8012762 <_strtod_l+0xba>
 80129ee:	4990      	ldr	r1, [pc, #576]	; (8012c30 <_strtod_l+0x588>)
 80129f0:	a81b      	add	r0, sp, #108	; 0x6c
 80129f2:	f000 fff3 	bl	80139dc <__match>
 80129f6:	2800      	cmp	r0, #0
 80129f8:	f43f aeb3 	beq.w	8012762 <_strtod_l+0xba>
 80129fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80129fe:	781b      	ldrb	r3, [r3, #0]
 8012a00:	2b28      	cmp	r3, #40	; 0x28
 8012a02:	d10e      	bne.n	8012a22 <_strtod_l+0x37a>
 8012a04:	aa1e      	add	r2, sp, #120	; 0x78
 8012a06:	498b      	ldr	r1, [pc, #556]	; (8012c34 <_strtod_l+0x58c>)
 8012a08:	a81b      	add	r0, sp, #108	; 0x6c
 8012a0a:	f000 fffb 	bl	8013a04 <__hexnan>
 8012a0e:	2805      	cmp	r0, #5
 8012a10:	d107      	bne.n	8012a22 <_strtod_l+0x37a>
 8012a12:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8012a14:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8012a18:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8012a1c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8012a20:	e681      	b.n	8012726 <_strtod_l+0x7e>
 8012a22:	f8df b224 	ldr.w	fp, [pc, #548]	; 8012c48 <_strtod_l+0x5a0>
 8012a26:	e7d2      	b.n	80129ce <_strtod_l+0x326>
 8012a28:	ebae 0302 	sub.w	r3, lr, r2
 8012a2c:	9306      	str	r3, [sp, #24]
 8012a2e:	9b05      	ldr	r3, [sp, #20]
 8012a30:	9807      	ldr	r0, [sp, #28]
 8012a32:	2b00      	cmp	r3, #0
 8012a34:	bf08      	it	eq
 8012a36:	4623      	moveq	r3, r4
 8012a38:	2c10      	cmp	r4, #16
 8012a3a:	9305      	str	r3, [sp, #20]
 8012a3c:	46a0      	mov	r8, r4
 8012a3e:	bfa8      	it	ge
 8012a40:	f04f 0810 	movge.w	r8, #16
 8012a44:	f7ed fd6e 	bl	8000524 <__aeabi_ui2d>
 8012a48:	2c09      	cmp	r4, #9
 8012a4a:	4682      	mov	sl, r0
 8012a4c:	468b      	mov	fp, r1
 8012a4e:	dc13      	bgt.n	8012a78 <_strtod_l+0x3d0>
 8012a50:	9b06      	ldr	r3, [sp, #24]
 8012a52:	2b00      	cmp	r3, #0
 8012a54:	f43f ae67 	beq.w	8012726 <_strtod_l+0x7e>
 8012a58:	9b06      	ldr	r3, [sp, #24]
 8012a5a:	dd7a      	ble.n	8012b52 <_strtod_l+0x4aa>
 8012a5c:	2b16      	cmp	r3, #22
 8012a5e:	dc61      	bgt.n	8012b24 <_strtod_l+0x47c>
 8012a60:	4a75      	ldr	r2, [pc, #468]	; (8012c38 <_strtod_l+0x590>)
 8012a62:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8012a66:	e9de 0100 	ldrd	r0, r1, [lr]
 8012a6a:	4652      	mov	r2, sl
 8012a6c:	465b      	mov	r3, fp
 8012a6e:	f7ed fdd3 	bl	8000618 <__aeabi_dmul>
 8012a72:	4682      	mov	sl, r0
 8012a74:	468b      	mov	fp, r1
 8012a76:	e656      	b.n	8012726 <_strtod_l+0x7e>
 8012a78:	4b6f      	ldr	r3, [pc, #444]	; (8012c38 <_strtod_l+0x590>)
 8012a7a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8012a7e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8012a82:	f7ed fdc9 	bl	8000618 <__aeabi_dmul>
 8012a86:	4606      	mov	r6, r0
 8012a88:	4628      	mov	r0, r5
 8012a8a:	460f      	mov	r7, r1
 8012a8c:	f7ed fd4a 	bl	8000524 <__aeabi_ui2d>
 8012a90:	4602      	mov	r2, r0
 8012a92:	460b      	mov	r3, r1
 8012a94:	4630      	mov	r0, r6
 8012a96:	4639      	mov	r1, r7
 8012a98:	f7ed fc08 	bl	80002ac <__adddf3>
 8012a9c:	2c0f      	cmp	r4, #15
 8012a9e:	4682      	mov	sl, r0
 8012aa0:	468b      	mov	fp, r1
 8012aa2:	ddd5      	ble.n	8012a50 <_strtod_l+0x3a8>
 8012aa4:	9b06      	ldr	r3, [sp, #24]
 8012aa6:	eba4 0808 	sub.w	r8, r4, r8
 8012aaa:	4498      	add	r8, r3
 8012aac:	f1b8 0f00 	cmp.w	r8, #0
 8012ab0:	f340 8096 	ble.w	8012be0 <_strtod_l+0x538>
 8012ab4:	f018 030f 	ands.w	r3, r8, #15
 8012ab8:	d00a      	beq.n	8012ad0 <_strtod_l+0x428>
 8012aba:	495f      	ldr	r1, [pc, #380]	; (8012c38 <_strtod_l+0x590>)
 8012abc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8012ac0:	4652      	mov	r2, sl
 8012ac2:	465b      	mov	r3, fp
 8012ac4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012ac8:	f7ed fda6 	bl	8000618 <__aeabi_dmul>
 8012acc:	4682      	mov	sl, r0
 8012ace:	468b      	mov	fp, r1
 8012ad0:	f038 080f 	bics.w	r8, r8, #15
 8012ad4:	d073      	beq.n	8012bbe <_strtod_l+0x516>
 8012ad6:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8012ada:	dd47      	ble.n	8012b6c <_strtod_l+0x4c4>
 8012adc:	2400      	movs	r4, #0
 8012ade:	46a0      	mov	r8, r4
 8012ae0:	9407      	str	r4, [sp, #28]
 8012ae2:	9405      	str	r4, [sp, #20]
 8012ae4:	2322      	movs	r3, #34	; 0x22
 8012ae6:	f8df b158 	ldr.w	fp, [pc, #344]	; 8012c40 <_strtod_l+0x598>
 8012aea:	f8c9 3000 	str.w	r3, [r9]
 8012aee:	f04f 0a00 	mov.w	sl, #0
 8012af2:	9b07      	ldr	r3, [sp, #28]
 8012af4:	2b00      	cmp	r3, #0
 8012af6:	f43f ae16 	beq.w	8012726 <_strtod_l+0x7e>
 8012afa:	991c      	ldr	r1, [sp, #112]	; 0x70
 8012afc:	4648      	mov	r0, r9
 8012afe:	f001 f85c 	bl	8013bba <_Bfree>
 8012b02:	9905      	ldr	r1, [sp, #20]
 8012b04:	4648      	mov	r0, r9
 8012b06:	f001 f858 	bl	8013bba <_Bfree>
 8012b0a:	4641      	mov	r1, r8
 8012b0c:	4648      	mov	r0, r9
 8012b0e:	f001 f854 	bl	8013bba <_Bfree>
 8012b12:	9907      	ldr	r1, [sp, #28]
 8012b14:	4648      	mov	r0, r9
 8012b16:	f001 f850 	bl	8013bba <_Bfree>
 8012b1a:	4621      	mov	r1, r4
 8012b1c:	4648      	mov	r0, r9
 8012b1e:	f001 f84c 	bl	8013bba <_Bfree>
 8012b22:	e600      	b.n	8012726 <_strtod_l+0x7e>
 8012b24:	9a06      	ldr	r2, [sp, #24]
 8012b26:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8012b2a:	4293      	cmp	r3, r2
 8012b2c:	dbba      	blt.n	8012aa4 <_strtod_l+0x3fc>
 8012b2e:	4d42      	ldr	r5, [pc, #264]	; (8012c38 <_strtod_l+0x590>)
 8012b30:	f1c4 040f 	rsb	r4, r4, #15
 8012b34:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8012b38:	4652      	mov	r2, sl
 8012b3a:	465b      	mov	r3, fp
 8012b3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012b40:	f7ed fd6a 	bl	8000618 <__aeabi_dmul>
 8012b44:	9b06      	ldr	r3, [sp, #24]
 8012b46:	1b1c      	subs	r4, r3, r4
 8012b48:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8012b4c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012b50:	e78d      	b.n	8012a6e <_strtod_l+0x3c6>
 8012b52:	f113 0f16 	cmn.w	r3, #22
 8012b56:	dba5      	blt.n	8012aa4 <_strtod_l+0x3fc>
 8012b58:	4a37      	ldr	r2, [pc, #220]	; (8012c38 <_strtod_l+0x590>)
 8012b5a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8012b5e:	e9d2 2300 	ldrd	r2, r3, [r2]
 8012b62:	4650      	mov	r0, sl
 8012b64:	4659      	mov	r1, fp
 8012b66:	f7ed fe81 	bl	800086c <__aeabi_ddiv>
 8012b6a:	e782      	b.n	8012a72 <_strtod_l+0x3ca>
 8012b6c:	2300      	movs	r3, #0
 8012b6e:	4e33      	ldr	r6, [pc, #204]	; (8012c3c <_strtod_l+0x594>)
 8012b70:	ea4f 1828 	mov.w	r8, r8, asr #4
 8012b74:	4650      	mov	r0, sl
 8012b76:	4659      	mov	r1, fp
 8012b78:	461d      	mov	r5, r3
 8012b7a:	f1b8 0f01 	cmp.w	r8, #1
 8012b7e:	dc21      	bgt.n	8012bc4 <_strtod_l+0x51c>
 8012b80:	b10b      	cbz	r3, 8012b86 <_strtod_l+0x4de>
 8012b82:	4682      	mov	sl, r0
 8012b84:	468b      	mov	fp, r1
 8012b86:	4b2d      	ldr	r3, [pc, #180]	; (8012c3c <_strtod_l+0x594>)
 8012b88:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8012b8c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8012b90:	4652      	mov	r2, sl
 8012b92:	465b      	mov	r3, fp
 8012b94:	e9d5 0100 	ldrd	r0, r1, [r5]
 8012b98:	f7ed fd3e 	bl	8000618 <__aeabi_dmul>
 8012b9c:	4b28      	ldr	r3, [pc, #160]	; (8012c40 <_strtod_l+0x598>)
 8012b9e:	460a      	mov	r2, r1
 8012ba0:	400b      	ands	r3, r1
 8012ba2:	4928      	ldr	r1, [pc, #160]	; (8012c44 <_strtod_l+0x59c>)
 8012ba4:	428b      	cmp	r3, r1
 8012ba6:	4682      	mov	sl, r0
 8012ba8:	d898      	bhi.n	8012adc <_strtod_l+0x434>
 8012baa:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8012bae:	428b      	cmp	r3, r1
 8012bb0:	bf86      	itte	hi
 8012bb2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8012c4c <_strtod_l+0x5a4>
 8012bb6:	f04f 3aff 	movhi.w	sl, #4294967295
 8012bba:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8012bbe:	2300      	movs	r3, #0
 8012bc0:	9304      	str	r3, [sp, #16]
 8012bc2:	e077      	b.n	8012cb4 <_strtod_l+0x60c>
 8012bc4:	f018 0f01 	tst.w	r8, #1
 8012bc8:	d006      	beq.n	8012bd8 <_strtod_l+0x530>
 8012bca:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8012bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bd2:	f7ed fd21 	bl	8000618 <__aeabi_dmul>
 8012bd6:	2301      	movs	r3, #1
 8012bd8:	3501      	adds	r5, #1
 8012bda:	ea4f 0868 	mov.w	r8, r8, asr #1
 8012bde:	e7cc      	b.n	8012b7a <_strtod_l+0x4d2>
 8012be0:	d0ed      	beq.n	8012bbe <_strtod_l+0x516>
 8012be2:	f1c8 0800 	rsb	r8, r8, #0
 8012be6:	f018 020f 	ands.w	r2, r8, #15
 8012bea:	d00a      	beq.n	8012c02 <_strtod_l+0x55a>
 8012bec:	4b12      	ldr	r3, [pc, #72]	; (8012c38 <_strtod_l+0x590>)
 8012bee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012bf2:	4650      	mov	r0, sl
 8012bf4:	4659      	mov	r1, fp
 8012bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bfa:	f7ed fe37 	bl	800086c <__aeabi_ddiv>
 8012bfe:	4682      	mov	sl, r0
 8012c00:	468b      	mov	fp, r1
 8012c02:	ea5f 1828 	movs.w	r8, r8, asr #4
 8012c06:	d0da      	beq.n	8012bbe <_strtod_l+0x516>
 8012c08:	f1b8 0f1f 	cmp.w	r8, #31
 8012c0c:	dd20      	ble.n	8012c50 <_strtod_l+0x5a8>
 8012c0e:	2400      	movs	r4, #0
 8012c10:	46a0      	mov	r8, r4
 8012c12:	9407      	str	r4, [sp, #28]
 8012c14:	9405      	str	r4, [sp, #20]
 8012c16:	2322      	movs	r3, #34	; 0x22
 8012c18:	f04f 0a00 	mov.w	sl, #0
 8012c1c:	f04f 0b00 	mov.w	fp, #0
 8012c20:	f8c9 3000 	str.w	r3, [r9]
 8012c24:	e765      	b.n	8012af2 <_strtod_l+0x44a>
 8012c26:	bf00      	nop
 8012c28:	080285c4 	.word	0x080285c4
 8012c2c:	080285c7 	.word	0x080285c7
 8012c30:	080285cd 	.word	0x080285cd
 8012c34:	080285e4 	.word	0x080285e4
 8012c38:	08028678 	.word	0x08028678
 8012c3c:	08028650 	.word	0x08028650
 8012c40:	7ff00000 	.word	0x7ff00000
 8012c44:	7ca00000 	.word	0x7ca00000
 8012c48:	fff80000 	.word	0xfff80000
 8012c4c:	7fefffff 	.word	0x7fefffff
 8012c50:	f018 0310 	ands.w	r3, r8, #16
 8012c54:	bf18      	it	ne
 8012c56:	236a      	movne	r3, #106	; 0x6a
 8012c58:	4da0      	ldr	r5, [pc, #640]	; (8012edc <_strtod_l+0x834>)
 8012c5a:	9304      	str	r3, [sp, #16]
 8012c5c:	4650      	mov	r0, sl
 8012c5e:	4659      	mov	r1, fp
 8012c60:	2300      	movs	r3, #0
 8012c62:	f1b8 0f00 	cmp.w	r8, #0
 8012c66:	f300 810a 	bgt.w	8012e7e <_strtod_l+0x7d6>
 8012c6a:	b10b      	cbz	r3, 8012c70 <_strtod_l+0x5c8>
 8012c6c:	4682      	mov	sl, r0
 8012c6e:	468b      	mov	fp, r1
 8012c70:	9b04      	ldr	r3, [sp, #16]
 8012c72:	b1bb      	cbz	r3, 8012ca4 <_strtod_l+0x5fc>
 8012c74:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8012c78:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8012c7c:	2b00      	cmp	r3, #0
 8012c7e:	4659      	mov	r1, fp
 8012c80:	dd10      	ble.n	8012ca4 <_strtod_l+0x5fc>
 8012c82:	2b1f      	cmp	r3, #31
 8012c84:	f340 8107 	ble.w	8012e96 <_strtod_l+0x7ee>
 8012c88:	2b34      	cmp	r3, #52	; 0x34
 8012c8a:	bfde      	ittt	le
 8012c8c:	3b20      	suble	r3, #32
 8012c8e:	f04f 32ff 	movle.w	r2, #4294967295
 8012c92:	fa02 f303 	lslle.w	r3, r2, r3
 8012c96:	f04f 0a00 	mov.w	sl, #0
 8012c9a:	bfcc      	ite	gt
 8012c9c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8012ca0:	ea03 0b01 	andle.w	fp, r3, r1
 8012ca4:	2200      	movs	r2, #0
 8012ca6:	2300      	movs	r3, #0
 8012ca8:	4650      	mov	r0, sl
 8012caa:	4659      	mov	r1, fp
 8012cac:	f7ed ff1c 	bl	8000ae8 <__aeabi_dcmpeq>
 8012cb0:	2800      	cmp	r0, #0
 8012cb2:	d1ac      	bne.n	8012c0e <_strtod_l+0x566>
 8012cb4:	9b07      	ldr	r3, [sp, #28]
 8012cb6:	9300      	str	r3, [sp, #0]
 8012cb8:	9a05      	ldr	r2, [sp, #20]
 8012cba:	9908      	ldr	r1, [sp, #32]
 8012cbc:	4623      	mov	r3, r4
 8012cbe:	4648      	mov	r0, r9
 8012cc0:	f000 ffcd 	bl	8013c5e <__s2b>
 8012cc4:	9007      	str	r0, [sp, #28]
 8012cc6:	2800      	cmp	r0, #0
 8012cc8:	f43f af08 	beq.w	8012adc <_strtod_l+0x434>
 8012ccc:	9a06      	ldr	r2, [sp, #24]
 8012cce:	9b06      	ldr	r3, [sp, #24]
 8012cd0:	2a00      	cmp	r2, #0
 8012cd2:	f1c3 0300 	rsb	r3, r3, #0
 8012cd6:	bfa8      	it	ge
 8012cd8:	2300      	movge	r3, #0
 8012cda:	930e      	str	r3, [sp, #56]	; 0x38
 8012cdc:	2400      	movs	r4, #0
 8012cde:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8012ce2:	9316      	str	r3, [sp, #88]	; 0x58
 8012ce4:	46a0      	mov	r8, r4
 8012ce6:	9b07      	ldr	r3, [sp, #28]
 8012ce8:	4648      	mov	r0, r9
 8012cea:	6859      	ldr	r1, [r3, #4]
 8012cec:	f000 ff31 	bl	8013b52 <_Balloc>
 8012cf0:	9005      	str	r0, [sp, #20]
 8012cf2:	2800      	cmp	r0, #0
 8012cf4:	f43f aef6 	beq.w	8012ae4 <_strtod_l+0x43c>
 8012cf8:	9b07      	ldr	r3, [sp, #28]
 8012cfa:	691a      	ldr	r2, [r3, #16]
 8012cfc:	3202      	adds	r2, #2
 8012cfe:	f103 010c 	add.w	r1, r3, #12
 8012d02:	0092      	lsls	r2, r2, #2
 8012d04:	300c      	adds	r0, #12
 8012d06:	f7ff fc27 	bl	8012558 <memcpy>
 8012d0a:	aa1e      	add	r2, sp, #120	; 0x78
 8012d0c:	a91d      	add	r1, sp, #116	; 0x74
 8012d0e:	ec4b ab10 	vmov	d0, sl, fp
 8012d12:	4648      	mov	r0, r9
 8012d14:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8012d18:	f001 fa5c 	bl	80141d4 <__d2b>
 8012d1c:	901c      	str	r0, [sp, #112]	; 0x70
 8012d1e:	2800      	cmp	r0, #0
 8012d20:	f43f aee0 	beq.w	8012ae4 <_strtod_l+0x43c>
 8012d24:	2101      	movs	r1, #1
 8012d26:	4648      	mov	r0, r9
 8012d28:	f001 f825 	bl	8013d76 <__i2b>
 8012d2c:	4680      	mov	r8, r0
 8012d2e:	2800      	cmp	r0, #0
 8012d30:	f43f aed8 	beq.w	8012ae4 <_strtod_l+0x43c>
 8012d34:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8012d36:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8012d38:	2e00      	cmp	r6, #0
 8012d3a:	bfab      	itete	ge
 8012d3c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8012d3e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8012d40:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8012d42:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8012d44:	bfac      	ite	ge
 8012d46:	18f7      	addge	r7, r6, r3
 8012d48:	1b9d      	sublt	r5, r3, r6
 8012d4a:	9b04      	ldr	r3, [sp, #16]
 8012d4c:	1af6      	subs	r6, r6, r3
 8012d4e:	4416      	add	r6, r2
 8012d50:	4b63      	ldr	r3, [pc, #396]	; (8012ee0 <_strtod_l+0x838>)
 8012d52:	3e01      	subs	r6, #1
 8012d54:	429e      	cmp	r6, r3
 8012d56:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8012d5a:	f280 80af 	bge.w	8012ebc <_strtod_l+0x814>
 8012d5e:	1b9b      	subs	r3, r3, r6
 8012d60:	2b1f      	cmp	r3, #31
 8012d62:	eba2 0203 	sub.w	r2, r2, r3
 8012d66:	f04f 0101 	mov.w	r1, #1
 8012d6a:	f300 809b 	bgt.w	8012ea4 <_strtod_l+0x7fc>
 8012d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8012d72:	930f      	str	r3, [sp, #60]	; 0x3c
 8012d74:	2300      	movs	r3, #0
 8012d76:	930a      	str	r3, [sp, #40]	; 0x28
 8012d78:	18be      	adds	r6, r7, r2
 8012d7a:	9b04      	ldr	r3, [sp, #16]
 8012d7c:	42b7      	cmp	r7, r6
 8012d7e:	4415      	add	r5, r2
 8012d80:	441d      	add	r5, r3
 8012d82:	463b      	mov	r3, r7
 8012d84:	bfa8      	it	ge
 8012d86:	4633      	movge	r3, r6
 8012d88:	42ab      	cmp	r3, r5
 8012d8a:	bfa8      	it	ge
 8012d8c:	462b      	movge	r3, r5
 8012d8e:	2b00      	cmp	r3, #0
 8012d90:	bfc2      	ittt	gt
 8012d92:	1af6      	subgt	r6, r6, r3
 8012d94:	1aed      	subgt	r5, r5, r3
 8012d96:	1aff      	subgt	r7, r7, r3
 8012d98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012d9a:	b1bb      	cbz	r3, 8012dcc <_strtod_l+0x724>
 8012d9c:	4641      	mov	r1, r8
 8012d9e:	461a      	mov	r2, r3
 8012da0:	4648      	mov	r0, r9
 8012da2:	f001 f887 	bl	8013eb4 <__pow5mult>
 8012da6:	4680      	mov	r8, r0
 8012da8:	2800      	cmp	r0, #0
 8012daa:	f43f ae9b 	beq.w	8012ae4 <_strtod_l+0x43c>
 8012dae:	4601      	mov	r1, r0
 8012db0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8012db2:	4648      	mov	r0, r9
 8012db4:	f000 ffe8 	bl	8013d88 <__multiply>
 8012db8:	900c      	str	r0, [sp, #48]	; 0x30
 8012dba:	2800      	cmp	r0, #0
 8012dbc:	f43f ae92 	beq.w	8012ae4 <_strtod_l+0x43c>
 8012dc0:	991c      	ldr	r1, [sp, #112]	; 0x70
 8012dc2:	4648      	mov	r0, r9
 8012dc4:	f000 fef9 	bl	8013bba <_Bfree>
 8012dc8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012dca:	931c      	str	r3, [sp, #112]	; 0x70
 8012dcc:	2e00      	cmp	r6, #0
 8012dce:	dc7a      	bgt.n	8012ec6 <_strtod_l+0x81e>
 8012dd0:	9b06      	ldr	r3, [sp, #24]
 8012dd2:	2b00      	cmp	r3, #0
 8012dd4:	dd08      	ble.n	8012de8 <_strtod_l+0x740>
 8012dd6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8012dd8:	9905      	ldr	r1, [sp, #20]
 8012dda:	4648      	mov	r0, r9
 8012ddc:	f001 f86a 	bl	8013eb4 <__pow5mult>
 8012de0:	9005      	str	r0, [sp, #20]
 8012de2:	2800      	cmp	r0, #0
 8012de4:	f43f ae7e 	beq.w	8012ae4 <_strtod_l+0x43c>
 8012de8:	2d00      	cmp	r5, #0
 8012dea:	dd08      	ble.n	8012dfe <_strtod_l+0x756>
 8012dec:	462a      	mov	r2, r5
 8012dee:	9905      	ldr	r1, [sp, #20]
 8012df0:	4648      	mov	r0, r9
 8012df2:	f001 f8ad 	bl	8013f50 <__lshift>
 8012df6:	9005      	str	r0, [sp, #20]
 8012df8:	2800      	cmp	r0, #0
 8012dfa:	f43f ae73 	beq.w	8012ae4 <_strtod_l+0x43c>
 8012dfe:	2f00      	cmp	r7, #0
 8012e00:	dd08      	ble.n	8012e14 <_strtod_l+0x76c>
 8012e02:	4641      	mov	r1, r8
 8012e04:	463a      	mov	r2, r7
 8012e06:	4648      	mov	r0, r9
 8012e08:	f001 f8a2 	bl	8013f50 <__lshift>
 8012e0c:	4680      	mov	r8, r0
 8012e0e:	2800      	cmp	r0, #0
 8012e10:	f43f ae68 	beq.w	8012ae4 <_strtod_l+0x43c>
 8012e14:	9a05      	ldr	r2, [sp, #20]
 8012e16:	991c      	ldr	r1, [sp, #112]	; 0x70
 8012e18:	4648      	mov	r0, r9
 8012e1a:	f001 f907 	bl	801402c <__mdiff>
 8012e1e:	4604      	mov	r4, r0
 8012e20:	2800      	cmp	r0, #0
 8012e22:	f43f ae5f 	beq.w	8012ae4 <_strtod_l+0x43c>
 8012e26:	68c3      	ldr	r3, [r0, #12]
 8012e28:	930c      	str	r3, [sp, #48]	; 0x30
 8012e2a:	2300      	movs	r3, #0
 8012e2c:	60c3      	str	r3, [r0, #12]
 8012e2e:	4641      	mov	r1, r8
 8012e30:	f001 f8e2 	bl	8013ff8 <__mcmp>
 8012e34:	2800      	cmp	r0, #0
 8012e36:	da55      	bge.n	8012ee4 <_strtod_l+0x83c>
 8012e38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012e3a:	b9e3      	cbnz	r3, 8012e76 <_strtod_l+0x7ce>
 8012e3c:	f1ba 0f00 	cmp.w	sl, #0
 8012e40:	d119      	bne.n	8012e76 <_strtod_l+0x7ce>
 8012e42:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012e46:	b9b3      	cbnz	r3, 8012e76 <_strtod_l+0x7ce>
 8012e48:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8012e4c:	0d1b      	lsrs	r3, r3, #20
 8012e4e:	051b      	lsls	r3, r3, #20
 8012e50:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8012e54:	d90f      	bls.n	8012e76 <_strtod_l+0x7ce>
 8012e56:	6963      	ldr	r3, [r4, #20]
 8012e58:	b913      	cbnz	r3, 8012e60 <_strtod_l+0x7b8>
 8012e5a:	6923      	ldr	r3, [r4, #16]
 8012e5c:	2b01      	cmp	r3, #1
 8012e5e:	dd0a      	ble.n	8012e76 <_strtod_l+0x7ce>
 8012e60:	4621      	mov	r1, r4
 8012e62:	2201      	movs	r2, #1
 8012e64:	4648      	mov	r0, r9
 8012e66:	f001 f873 	bl	8013f50 <__lshift>
 8012e6a:	4641      	mov	r1, r8
 8012e6c:	4604      	mov	r4, r0
 8012e6e:	f001 f8c3 	bl	8013ff8 <__mcmp>
 8012e72:	2800      	cmp	r0, #0
 8012e74:	dc67      	bgt.n	8012f46 <_strtod_l+0x89e>
 8012e76:	9b04      	ldr	r3, [sp, #16]
 8012e78:	2b00      	cmp	r3, #0
 8012e7a:	d171      	bne.n	8012f60 <_strtod_l+0x8b8>
 8012e7c:	e63d      	b.n	8012afa <_strtod_l+0x452>
 8012e7e:	f018 0f01 	tst.w	r8, #1
 8012e82:	d004      	beq.n	8012e8e <_strtod_l+0x7e6>
 8012e84:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012e88:	f7ed fbc6 	bl	8000618 <__aeabi_dmul>
 8012e8c:	2301      	movs	r3, #1
 8012e8e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8012e92:	3508      	adds	r5, #8
 8012e94:	e6e5      	b.n	8012c62 <_strtod_l+0x5ba>
 8012e96:	f04f 32ff 	mov.w	r2, #4294967295
 8012e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8012e9e:	ea03 0a0a 	and.w	sl, r3, sl
 8012ea2:	e6ff      	b.n	8012ca4 <_strtod_l+0x5fc>
 8012ea4:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8012ea8:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8012eac:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8012eb0:	36e2      	adds	r6, #226	; 0xe2
 8012eb2:	fa01 f306 	lsl.w	r3, r1, r6
 8012eb6:	930a      	str	r3, [sp, #40]	; 0x28
 8012eb8:	910f      	str	r1, [sp, #60]	; 0x3c
 8012eba:	e75d      	b.n	8012d78 <_strtod_l+0x6d0>
 8012ebc:	2300      	movs	r3, #0
 8012ebe:	930a      	str	r3, [sp, #40]	; 0x28
 8012ec0:	2301      	movs	r3, #1
 8012ec2:	930f      	str	r3, [sp, #60]	; 0x3c
 8012ec4:	e758      	b.n	8012d78 <_strtod_l+0x6d0>
 8012ec6:	4632      	mov	r2, r6
 8012ec8:	991c      	ldr	r1, [sp, #112]	; 0x70
 8012eca:	4648      	mov	r0, r9
 8012ecc:	f001 f840 	bl	8013f50 <__lshift>
 8012ed0:	901c      	str	r0, [sp, #112]	; 0x70
 8012ed2:	2800      	cmp	r0, #0
 8012ed4:	f47f af7c 	bne.w	8012dd0 <_strtod_l+0x728>
 8012ed8:	e604      	b.n	8012ae4 <_strtod_l+0x43c>
 8012eda:	bf00      	nop
 8012edc:	080285f8 	.word	0x080285f8
 8012ee0:	fffffc02 	.word	0xfffffc02
 8012ee4:	465d      	mov	r5, fp
 8012ee6:	f040 8086 	bne.w	8012ff6 <_strtod_l+0x94e>
 8012eea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012eec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012ef0:	b32a      	cbz	r2, 8012f3e <_strtod_l+0x896>
 8012ef2:	4aaf      	ldr	r2, [pc, #700]	; (80131b0 <_strtod_l+0xb08>)
 8012ef4:	4293      	cmp	r3, r2
 8012ef6:	d153      	bne.n	8012fa0 <_strtod_l+0x8f8>
 8012ef8:	9b04      	ldr	r3, [sp, #16]
 8012efa:	4650      	mov	r0, sl
 8012efc:	b1d3      	cbz	r3, 8012f34 <_strtod_l+0x88c>
 8012efe:	4aad      	ldr	r2, [pc, #692]	; (80131b4 <_strtod_l+0xb0c>)
 8012f00:	402a      	ands	r2, r5
 8012f02:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8012f06:	f04f 31ff 	mov.w	r1, #4294967295
 8012f0a:	d816      	bhi.n	8012f3a <_strtod_l+0x892>
 8012f0c:	0d12      	lsrs	r2, r2, #20
 8012f0e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8012f12:	fa01 f303 	lsl.w	r3, r1, r3
 8012f16:	4298      	cmp	r0, r3
 8012f18:	d142      	bne.n	8012fa0 <_strtod_l+0x8f8>
 8012f1a:	4ba7      	ldr	r3, [pc, #668]	; (80131b8 <_strtod_l+0xb10>)
 8012f1c:	429d      	cmp	r5, r3
 8012f1e:	d102      	bne.n	8012f26 <_strtod_l+0x87e>
 8012f20:	3001      	adds	r0, #1
 8012f22:	f43f addf 	beq.w	8012ae4 <_strtod_l+0x43c>
 8012f26:	4ba3      	ldr	r3, [pc, #652]	; (80131b4 <_strtod_l+0xb0c>)
 8012f28:	402b      	ands	r3, r5
 8012f2a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8012f2e:	f04f 0a00 	mov.w	sl, #0
 8012f32:	e7a0      	b.n	8012e76 <_strtod_l+0x7ce>
 8012f34:	f04f 33ff 	mov.w	r3, #4294967295
 8012f38:	e7ed      	b.n	8012f16 <_strtod_l+0x86e>
 8012f3a:	460b      	mov	r3, r1
 8012f3c:	e7eb      	b.n	8012f16 <_strtod_l+0x86e>
 8012f3e:	bb7b      	cbnz	r3, 8012fa0 <_strtod_l+0x8f8>
 8012f40:	f1ba 0f00 	cmp.w	sl, #0
 8012f44:	d12c      	bne.n	8012fa0 <_strtod_l+0x8f8>
 8012f46:	9904      	ldr	r1, [sp, #16]
 8012f48:	4a9a      	ldr	r2, [pc, #616]	; (80131b4 <_strtod_l+0xb0c>)
 8012f4a:	465b      	mov	r3, fp
 8012f4c:	b1f1      	cbz	r1, 8012f8c <_strtod_l+0x8e4>
 8012f4e:	ea02 010b 	and.w	r1, r2, fp
 8012f52:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8012f56:	dc19      	bgt.n	8012f8c <_strtod_l+0x8e4>
 8012f58:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8012f5c:	f77f ae5b 	ble.w	8012c16 <_strtod_l+0x56e>
 8012f60:	4a96      	ldr	r2, [pc, #600]	; (80131bc <_strtod_l+0xb14>)
 8012f62:	2300      	movs	r3, #0
 8012f64:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8012f68:	4650      	mov	r0, sl
 8012f6a:	4659      	mov	r1, fp
 8012f6c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8012f70:	f7ed fb52 	bl	8000618 <__aeabi_dmul>
 8012f74:	4682      	mov	sl, r0
 8012f76:	468b      	mov	fp, r1
 8012f78:	2900      	cmp	r1, #0
 8012f7a:	f47f adbe 	bne.w	8012afa <_strtod_l+0x452>
 8012f7e:	2800      	cmp	r0, #0
 8012f80:	f47f adbb 	bne.w	8012afa <_strtod_l+0x452>
 8012f84:	2322      	movs	r3, #34	; 0x22
 8012f86:	f8c9 3000 	str.w	r3, [r9]
 8012f8a:	e5b6      	b.n	8012afa <_strtod_l+0x452>
 8012f8c:	4013      	ands	r3, r2
 8012f8e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8012f92:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8012f96:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8012f9a:	f04f 3aff 	mov.w	sl, #4294967295
 8012f9e:	e76a      	b.n	8012e76 <_strtod_l+0x7ce>
 8012fa0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012fa2:	b193      	cbz	r3, 8012fca <_strtod_l+0x922>
 8012fa4:	422b      	tst	r3, r5
 8012fa6:	f43f af66 	beq.w	8012e76 <_strtod_l+0x7ce>
 8012faa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012fac:	9a04      	ldr	r2, [sp, #16]
 8012fae:	4650      	mov	r0, sl
 8012fb0:	4659      	mov	r1, fp
 8012fb2:	b173      	cbz	r3, 8012fd2 <_strtod_l+0x92a>
 8012fb4:	f7ff fb5a 	bl	801266c <sulp>
 8012fb8:	4602      	mov	r2, r0
 8012fba:	460b      	mov	r3, r1
 8012fbc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8012fc0:	f7ed f974 	bl	80002ac <__adddf3>
 8012fc4:	4682      	mov	sl, r0
 8012fc6:	468b      	mov	fp, r1
 8012fc8:	e755      	b.n	8012e76 <_strtod_l+0x7ce>
 8012fca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012fcc:	ea13 0f0a 	tst.w	r3, sl
 8012fd0:	e7e9      	b.n	8012fa6 <_strtod_l+0x8fe>
 8012fd2:	f7ff fb4b 	bl	801266c <sulp>
 8012fd6:	4602      	mov	r2, r0
 8012fd8:	460b      	mov	r3, r1
 8012fda:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8012fde:	f7ed f963 	bl	80002a8 <__aeabi_dsub>
 8012fe2:	2200      	movs	r2, #0
 8012fe4:	2300      	movs	r3, #0
 8012fe6:	4682      	mov	sl, r0
 8012fe8:	468b      	mov	fp, r1
 8012fea:	f7ed fd7d 	bl	8000ae8 <__aeabi_dcmpeq>
 8012fee:	2800      	cmp	r0, #0
 8012ff0:	f47f ae11 	bne.w	8012c16 <_strtod_l+0x56e>
 8012ff4:	e73f      	b.n	8012e76 <_strtod_l+0x7ce>
 8012ff6:	4641      	mov	r1, r8
 8012ff8:	4620      	mov	r0, r4
 8012ffa:	f001 f93a 	bl	8014272 <__ratio>
 8012ffe:	ec57 6b10 	vmov	r6, r7, d0
 8013002:	2200      	movs	r2, #0
 8013004:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013008:	ee10 0a10 	vmov	r0, s0
 801300c:	4639      	mov	r1, r7
 801300e:	f7ed fd7f 	bl	8000b10 <__aeabi_dcmple>
 8013012:	2800      	cmp	r0, #0
 8013014:	d077      	beq.n	8013106 <_strtod_l+0xa5e>
 8013016:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013018:	2b00      	cmp	r3, #0
 801301a:	d04a      	beq.n	80130b2 <_strtod_l+0xa0a>
 801301c:	4b68      	ldr	r3, [pc, #416]	; (80131c0 <_strtod_l+0xb18>)
 801301e:	2200      	movs	r2, #0
 8013020:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8013024:	4f66      	ldr	r7, [pc, #408]	; (80131c0 <_strtod_l+0xb18>)
 8013026:	2600      	movs	r6, #0
 8013028:	4b62      	ldr	r3, [pc, #392]	; (80131b4 <_strtod_l+0xb0c>)
 801302a:	402b      	ands	r3, r5
 801302c:	930f      	str	r3, [sp, #60]	; 0x3c
 801302e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013030:	4b64      	ldr	r3, [pc, #400]	; (80131c4 <_strtod_l+0xb1c>)
 8013032:	429a      	cmp	r2, r3
 8013034:	f040 80ce 	bne.w	80131d4 <_strtod_l+0xb2c>
 8013038:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801303c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013040:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8013044:	ec4b ab10 	vmov	d0, sl, fp
 8013048:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 801304c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8013050:	f001 f84a 	bl	80140e8 <__ulp>
 8013054:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013058:	ec53 2b10 	vmov	r2, r3, d0
 801305c:	f7ed fadc 	bl	8000618 <__aeabi_dmul>
 8013060:	4652      	mov	r2, sl
 8013062:	465b      	mov	r3, fp
 8013064:	f7ed f922 	bl	80002ac <__adddf3>
 8013068:	460b      	mov	r3, r1
 801306a:	4952      	ldr	r1, [pc, #328]	; (80131b4 <_strtod_l+0xb0c>)
 801306c:	4a56      	ldr	r2, [pc, #344]	; (80131c8 <_strtod_l+0xb20>)
 801306e:	4019      	ands	r1, r3
 8013070:	4291      	cmp	r1, r2
 8013072:	4682      	mov	sl, r0
 8013074:	d95b      	bls.n	801312e <_strtod_l+0xa86>
 8013076:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013078:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801307c:	4293      	cmp	r3, r2
 801307e:	d103      	bne.n	8013088 <_strtod_l+0x9e0>
 8013080:	9b08      	ldr	r3, [sp, #32]
 8013082:	3301      	adds	r3, #1
 8013084:	f43f ad2e 	beq.w	8012ae4 <_strtod_l+0x43c>
 8013088:	f8df b12c 	ldr.w	fp, [pc, #300]	; 80131b8 <_strtod_l+0xb10>
 801308c:	f04f 3aff 	mov.w	sl, #4294967295
 8013090:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013092:	4648      	mov	r0, r9
 8013094:	f000 fd91 	bl	8013bba <_Bfree>
 8013098:	9905      	ldr	r1, [sp, #20]
 801309a:	4648      	mov	r0, r9
 801309c:	f000 fd8d 	bl	8013bba <_Bfree>
 80130a0:	4641      	mov	r1, r8
 80130a2:	4648      	mov	r0, r9
 80130a4:	f000 fd89 	bl	8013bba <_Bfree>
 80130a8:	4621      	mov	r1, r4
 80130aa:	4648      	mov	r0, r9
 80130ac:	f000 fd85 	bl	8013bba <_Bfree>
 80130b0:	e619      	b.n	8012ce6 <_strtod_l+0x63e>
 80130b2:	f1ba 0f00 	cmp.w	sl, #0
 80130b6:	d11a      	bne.n	80130ee <_strtod_l+0xa46>
 80130b8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80130bc:	b9eb      	cbnz	r3, 80130fa <_strtod_l+0xa52>
 80130be:	2200      	movs	r2, #0
 80130c0:	4b3f      	ldr	r3, [pc, #252]	; (80131c0 <_strtod_l+0xb18>)
 80130c2:	4630      	mov	r0, r6
 80130c4:	4639      	mov	r1, r7
 80130c6:	f7ed fd19 	bl	8000afc <__aeabi_dcmplt>
 80130ca:	b9c8      	cbnz	r0, 8013100 <_strtod_l+0xa58>
 80130cc:	4630      	mov	r0, r6
 80130ce:	4639      	mov	r1, r7
 80130d0:	2200      	movs	r2, #0
 80130d2:	4b3e      	ldr	r3, [pc, #248]	; (80131cc <_strtod_l+0xb24>)
 80130d4:	f7ed faa0 	bl	8000618 <__aeabi_dmul>
 80130d8:	4606      	mov	r6, r0
 80130da:	460f      	mov	r7, r1
 80130dc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80130e0:	9618      	str	r6, [sp, #96]	; 0x60
 80130e2:	9319      	str	r3, [sp, #100]	; 0x64
 80130e4:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 80130e8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80130ec:	e79c      	b.n	8013028 <_strtod_l+0x980>
 80130ee:	f1ba 0f01 	cmp.w	sl, #1
 80130f2:	d102      	bne.n	80130fa <_strtod_l+0xa52>
 80130f4:	2d00      	cmp	r5, #0
 80130f6:	f43f ad8e 	beq.w	8012c16 <_strtod_l+0x56e>
 80130fa:	2200      	movs	r2, #0
 80130fc:	4b34      	ldr	r3, [pc, #208]	; (80131d0 <_strtod_l+0xb28>)
 80130fe:	e78f      	b.n	8013020 <_strtod_l+0x978>
 8013100:	2600      	movs	r6, #0
 8013102:	4f32      	ldr	r7, [pc, #200]	; (80131cc <_strtod_l+0xb24>)
 8013104:	e7ea      	b.n	80130dc <_strtod_l+0xa34>
 8013106:	4b31      	ldr	r3, [pc, #196]	; (80131cc <_strtod_l+0xb24>)
 8013108:	4630      	mov	r0, r6
 801310a:	4639      	mov	r1, r7
 801310c:	2200      	movs	r2, #0
 801310e:	f7ed fa83 	bl	8000618 <__aeabi_dmul>
 8013112:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013114:	4606      	mov	r6, r0
 8013116:	460f      	mov	r7, r1
 8013118:	b933      	cbnz	r3, 8013128 <_strtod_l+0xa80>
 801311a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801311e:	9010      	str	r0, [sp, #64]	; 0x40
 8013120:	9311      	str	r3, [sp, #68]	; 0x44
 8013122:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8013126:	e7df      	b.n	80130e8 <_strtod_l+0xa40>
 8013128:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 801312c:	e7f9      	b.n	8013122 <_strtod_l+0xa7a>
 801312e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8013132:	9b04      	ldr	r3, [sp, #16]
 8013134:	2b00      	cmp	r3, #0
 8013136:	d1ab      	bne.n	8013090 <_strtod_l+0x9e8>
 8013138:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801313c:	0d1b      	lsrs	r3, r3, #20
 801313e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013140:	051b      	lsls	r3, r3, #20
 8013142:	429a      	cmp	r2, r3
 8013144:	465d      	mov	r5, fp
 8013146:	d1a3      	bne.n	8013090 <_strtod_l+0x9e8>
 8013148:	4639      	mov	r1, r7
 801314a:	4630      	mov	r0, r6
 801314c:	f7ed fd14 	bl	8000b78 <__aeabi_d2iz>
 8013150:	f7ed f9f8 	bl	8000544 <__aeabi_i2d>
 8013154:	460b      	mov	r3, r1
 8013156:	4602      	mov	r2, r0
 8013158:	4639      	mov	r1, r7
 801315a:	4630      	mov	r0, r6
 801315c:	f7ed f8a4 	bl	80002a8 <__aeabi_dsub>
 8013160:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013162:	4606      	mov	r6, r0
 8013164:	460f      	mov	r7, r1
 8013166:	b933      	cbnz	r3, 8013176 <_strtod_l+0xace>
 8013168:	f1ba 0f00 	cmp.w	sl, #0
 801316c:	d103      	bne.n	8013176 <_strtod_l+0xace>
 801316e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8013172:	2d00      	cmp	r5, #0
 8013174:	d06d      	beq.n	8013252 <_strtod_l+0xbaa>
 8013176:	a30a      	add	r3, pc, #40	; (adr r3, 80131a0 <_strtod_l+0xaf8>)
 8013178:	e9d3 2300 	ldrd	r2, r3, [r3]
 801317c:	4630      	mov	r0, r6
 801317e:	4639      	mov	r1, r7
 8013180:	f7ed fcbc 	bl	8000afc <__aeabi_dcmplt>
 8013184:	2800      	cmp	r0, #0
 8013186:	f47f acb8 	bne.w	8012afa <_strtod_l+0x452>
 801318a:	a307      	add	r3, pc, #28	; (adr r3, 80131a8 <_strtod_l+0xb00>)
 801318c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013190:	4630      	mov	r0, r6
 8013192:	4639      	mov	r1, r7
 8013194:	f7ed fcd0 	bl	8000b38 <__aeabi_dcmpgt>
 8013198:	2800      	cmp	r0, #0
 801319a:	f43f af79 	beq.w	8013090 <_strtod_l+0x9e8>
 801319e:	e4ac      	b.n	8012afa <_strtod_l+0x452>
 80131a0:	94a03595 	.word	0x94a03595
 80131a4:	3fdfffff 	.word	0x3fdfffff
 80131a8:	35afe535 	.word	0x35afe535
 80131ac:	3fe00000 	.word	0x3fe00000
 80131b0:	000fffff 	.word	0x000fffff
 80131b4:	7ff00000 	.word	0x7ff00000
 80131b8:	7fefffff 	.word	0x7fefffff
 80131bc:	39500000 	.word	0x39500000
 80131c0:	3ff00000 	.word	0x3ff00000
 80131c4:	7fe00000 	.word	0x7fe00000
 80131c8:	7c9fffff 	.word	0x7c9fffff
 80131cc:	3fe00000 	.word	0x3fe00000
 80131d0:	bff00000 	.word	0xbff00000
 80131d4:	9b04      	ldr	r3, [sp, #16]
 80131d6:	b333      	cbz	r3, 8013226 <_strtod_l+0xb7e>
 80131d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80131da:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80131de:	d822      	bhi.n	8013226 <_strtod_l+0xb7e>
 80131e0:	a327      	add	r3, pc, #156	; (adr r3, 8013280 <_strtod_l+0xbd8>)
 80131e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131e6:	4630      	mov	r0, r6
 80131e8:	4639      	mov	r1, r7
 80131ea:	f7ed fc91 	bl	8000b10 <__aeabi_dcmple>
 80131ee:	b1a0      	cbz	r0, 801321a <_strtod_l+0xb72>
 80131f0:	4639      	mov	r1, r7
 80131f2:	4630      	mov	r0, r6
 80131f4:	f7ed fce8 	bl	8000bc8 <__aeabi_d2uiz>
 80131f8:	2800      	cmp	r0, #0
 80131fa:	bf08      	it	eq
 80131fc:	2001      	moveq	r0, #1
 80131fe:	f7ed f991 	bl	8000524 <__aeabi_ui2d>
 8013202:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013204:	4606      	mov	r6, r0
 8013206:	460f      	mov	r7, r1
 8013208:	bb03      	cbnz	r3, 801324c <_strtod_l+0xba4>
 801320a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801320e:	9012      	str	r0, [sp, #72]	; 0x48
 8013210:	9313      	str	r3, [sp, #76]	; 0x4c
 8013212:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8013216:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801321a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801321c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801321e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8013222:	1a9b      	subs	r3, r3, r2
 8013224:	930b      	str	r3, [sp, #44]	; 0x2c
 8013226:	ed9d 0b08 	vldr	d0, [sp, #32]
 801322a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 801322e:	f000 ff5b 	bl	80140e8 <__ulp>
 8013232:	4650      	mov	r0, sl
 8013234:	ec53 2b10 	vmov	r2, r3, d0
 8013238:	4659      	mov	r1, fp
 801323a:	f7ed f9ed 	bl	8000618 <__aeabi_dmul>
 801323e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8013242:	f7ed f833 	bl	80002ac <__adddf3>
 8013246:	4682      	mov	sl, r0
 8013248:	468b      	mov	fp, r1
 801324a:	e772      	b.n	8013132 <_strtod_l+0xa8a>
 801324c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8013250:	e7df      	b.n	8013212 <_strtod_l+0xb6a>
 8013252:	a30d      	add	r3, pc, #52	; (adr r3, 8013288 <_strtod_l+0xbe0>)
 8013254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013258:	f7ed fc50 	bl	8000afc <__aeabi_dcmplt>
 801325c:	e79c      	b.n	8013198 <_strtod_l+0xaf0>
 801325e:	2300      	movs	r3, #0
 8013260:	930d      	str	r3, [sp, #52]	; 0x34
 8013262:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8013264:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013266:	6013      	str	r3, [r2, #0]
 8013268:	f7ff ba61 	b.w	801272e <_strtod_l+0x86>
 801326c:	2b65      	cmp	r3, #101	; 0x65
 801326e:	f04f 0200 	mov.w	r2, #0
 8013272:	f43f ab4e 	beq.w	8012912 <_strtod_l+0x26a>
 8013276:	2101      	movs	r1, #1
 8013278:	4614      	mov	r4, r2
 801327a:	9104      	str	r1, [sp, #16]
 801327c:	f7ff bacb 	b.w	8012816 <_strtod_l+0x16e>
 8013280:	ffc00000 	.word	0xffc00000
 8013284:	41dfffff 	.word	0x41dfffff
 8013288:	94a03595 	.word	0x94a03595
 801328c:	3fcfffff 	.word	0x3fcfffff

08013290 <strtof>:
 8013290:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8013294:	4e24      	ldr	r6, [pc, #144]	; (8013328 <strtof+0x98>)
 8013296:	4a25      	ldr	r2, [pc, #148]	; (801332c <strtof+0x9c>)
 8013298:	6834      	ldr	r4, [r6, #0]
 801329a:	6a23      	ldr	r3, [r4, #32]
 801329c:	ed2d 8b02 	vpush	{d8}
 80132a0:	2b00      	cmp	r3, #0
 80132a2:	bf08      	it	eq
 80132a4:	4613      	moveq	r3, r2
 80132a6:	460a      	mov	r2, r1
 80132a8:	4601      	mov	r1, r0
 80132aa:	4620      	mov	r0, r4
 80132ac:	f7ff f9fc 	bl	80126a8 <_strtod_l>
 80132b0:	ec55 4b10 	vmov	r4, r5, d0
 80132b4:	ee10 2a10 	vmov	r2, s0
 80132b8:	462b      	mov	r3, r5
 80132ba:	ee10 0a10 	vmov	r0, s0
 80132be:	4629      	mov	r1, r5
 80132c0:	f7ed fc44 	bl	8000b4c <__aeabi_dcmpun>
 80132c4:	b130      	cbz	r0, 80132d4 <strtof+0x44>
 80132c6:	ecbd 8b02 	vpop	{d8}
 80132ca:	2000      	movs	r0, #0
 80132cc:	e8bd 4370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, lr}
 80132d0:	f001 bb90 	b.w	80149f4 <nanf>
 80132d4:	4620      	mov	r0, r4
 80132d6:	4629      	mov	r1, r5
 80132d8:	f7ed fc96 	bl	8000c08 <__aeabi_d2f>
 80132dc:	ee08 0a10 	vmov	s16, r0
 80132e0:	eddf 7a13 	vldr	s15, [pc, #76]	; 8013330 <strtof+0xa0>
 80132e4:	eeb0 7ac8 	vabs.f32	s14, s16
 80132e8:	eeb4 7a67 	vcmp.f32	s14, s15
 80132ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132f0:	dd14      	ble.n	801331c <strtof+0x8c>
 80132f2:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
 80132f6:	f04f 32ff 	mov.w	r2, #4294967295
 80132fa:	4b0e      	ldr	r3, [pc, #56]	; (8013334 <strtof+0xa4>)
 80132fc:	4620      	mov	r0, r4
 80132fe:	4649      	mov	r1, r9
 8013300:	f7ed fc24 	bl	8000b4c <__aeabi_dcmpun>
 8013304:	b938      	cbnz	r0, 8013316 <strtof+0x86>
 8013306:	f04f 32ff 	mov.w	r2, #4294967295
 801330a:	4b0a      	ldr	r3, [pc, #40]	; (8013334 <strtof+0xa4>)
 801330c:	4620      	mov	r0, r4
 801330e:	4649      	mov	r1, r9
 8013310:	f7ed fbfe 	bl	8000b10 <__aeabi_dcmple>
 8013314:	b110      	cbz	r0, 801331c <strtof+0x8c>
 8013316:	6833      	ldr	r3, [r6, #0]
 8013318:	2222      	movs	r2, #34	; 0x22
 801331a:	601a      	str	r2, [r3, #0]
 801331c:	eeb0 0a48 	vmov.f32	s0, s16
 8013320:	ecbd 8b02 	vpop	{d8}
 8013324:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8013328:	20000050 	.word	0x20000050
 801332c:	200000b4 	.word	0x200000b4
 8013330:	7f7fffff 	.word	0x7f7fffff
 8013334:	7fefffff 	.word	0x7fefffff

08013338 <_strtol_l.isra.0>:
 8013338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801333c:	4680      	mov	r8, r0
 801333e:	4689      	mov	r9, r1
 8013340:	4692      	mov	sl, r2
 8013342:	461e      	mov	r6, r3
 8013344:	460f      	mov	r7, r1
 8013346:	463d      	mov	r5, r7
 8013348:	9808      	ldr	r0, [sp, #32]
 801334a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801334e:	f000 fbe9 	bl	8013b24 <__locale_ctype_ptr_l>
 8013352:	4420      	add	r0, r4
 8013354:	7843      	ldrb	r3, [r0, #1]
 8013356:	f013 0308 	ands.w	r3, r3, #8
 801335a:	d132      	bne.n	80133c2 <_strtol_l.isra.0+0x8a>
 801335c:	2c2d      	cmp	r4, #45	; 0x2d
 801335e:	d132      	bne.n	80133c6 <_strtol_l.isra.0+0x8e>
 8013360:	787c      	ldrb	r4, [r7, #1]
 8013362:	1cbd      	adds	r5, r7, #2
 8013364:	2201      	movs	r2, #1
 8013366:	2e00      	cmp	r6, #0
 8013368:	d05d      	beq.n	8013426 <_strtol_l.isra.0+0xee>
 801336a:	2e10      	cmp	r6, #16
 801336c:	d109      	bne.n	8013382 <_strtol_l.isra.0+0x4a>
 801336e:	2c30      	cmp	r4, #48	; 0x30
 8013370:	d107      	bne.n	8013382 <_strtol_l.isra.0+0x4a>
 8013372:	782b      	ldrb	r3, [r5, #0]
 8013374:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8013378:	2b58      	cmp	r3, #88	; 0x58
 801337a:	d14f      	bne.n	801341c <_strtol_l.isra.0+0xe4>
 801337c:	786c      	ldrb	r4, [r5, #1]
 801337e:	2610      	movs	r6, #16
 8013380:	3502      	adds	r5, #2
 8013382:	2a00      	cmp	r2, #0
 8013384:	bf14      	ite	ne
 8013386:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 801338a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 801338e:	2700      	movs	r7, #0
 8013390:	fbb1 fcf6 	udiv	ip, r1, r6
 8013394:	4638      	mov	r0, r7
 8013396:	fb06 1e1c 	mls	lr, r6, ip, r1
 801339a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801339e:	2b09      	cmp	r3, #9
 80133a0:	d817      	bhi.n	80133d2 <_strtol_l.isra.0+0x9a>
 80133a2:	461c      	mov	r4, r3
 80133a4:	42a6      	cmp	r6, r4
 80133a6:	dd23      	ble.n	80133f0 <_strtol_l.isra.0+0xb8>
 80133a8:	1c7b      	adds	r3, r7, #1
 80133aa:	d007      	beq.n	80133bc <_strtol_l.isra.0+0x84>
 80133ac:	4584      	cmp	ip, r0
 80133ae:	d31c      	bcc.n	80133ea <_strtol_l.isra.0+0xb2>
 80133b0:	d101      	bne.n	80133b6 <_strtol_l.isra.0+0x7e>
 80133b2:	45a6      	cmp	lr, r4
 80133b4:	db19      	blt.n	80133ea <_strtol_l.isra.0+0xb2>
 80133b6:	fb00 4006 	mla	r0, r0, r6, r4
 80133ba:	2701      	movs	r7, #1
 80133bc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80133c0:	e7eb      	b.n	801339a <_strtol_l.isra.0+0x62>
 80133c2:	462f      	mov	r7, r5
 80133c4:	e7bf      	b.n	8013346 <_strtol_l.isra.0+0xe>
 80133c6:	2c2b      	cmp	r4, #43	; 0x2b
 80133c8:	bf04      	itt	eq
 80133ca:	1cbd      	addeq	r5, r7, #2
 80133cc:	787c      	ldrbeq	r4, [r7, #1]
 80133ce:	461a      	mov	r2, r3
 80133d0:	e7c9      	b.n	8013366 <_strtol_l.isra.0+0x2e>
 80133d2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80133d6:	2b19      	cmp	r3, #25
 80133d8:	d801      	bhi.n	80133de <_strtol_l.isra.0+0xa6>
 80133da:	3c37      	subs	r4, #55	; 0x37
 80133dc:	e7e2      	b.n	80133a4 <_strtol_l.isra.0+0x6c>
 80133de:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80133e2:	2b19      	cmp	r3, #25
 80133e4:	d804      	bhi.n	80133f0 <_strtol_l.isra.0+0xb8>
 80133e6:	3c57      	subs	r4, #87	; 0x57
 80133e8:	e7dc      	b.n	80133a4 <_strtol_l.isra.0+0x6c>
 80133ea:	f04f 37ff 	mov.w	r7, #4294967295
 80133ee:	e7e5      	b.n	80133bc <_strtol_l.isra.0+0x84>
 80133f0:	1c7b      	adds	r3, r7, #1
 80133f2:	d108      	bne.n	8013406 <_strtol_l.isra.0+0xce>
 80133f4:	2322      	movs	r3, #34	; 0x22
 80133f6:	f8c8 3000 	str.w	r3, [r8]
 80133fa:	4608      	mov	r0, r1
 80133fc:	f1ba 0f00 	cmp.w	sl, #0
 8013400:	d107      	bne.n	8013412 <_strtol_l.isra.0+0xda>
 8013402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013406:	b102      	cbz	r2, 801340a <_strtol_l.isra.0+0xd2>
 8013408:	4240      	negs	r0, r0
 801340a:	f1ba 0f00 	cmp.w	sl, #0
 801340e:	d0f8      	beq.n	8013402 <_strtol_l.isra.0+0xca>
 8013410:	b10f      	cbz	r7, 8013416 <_strtol_l.isra.0+0xde>
 8013412:	f105 39ff 	add.w	r9, r5, #4294967295
 8013416:	f8ca 9000 	str.w	r9, [sl]
 801341a:	e7f2      	b.n	8013402 <_strtol_l.isra.0+0xca>
 801341c:	2430      	movs	r4, #48	; 0x30
 801341e:	2e00      	cmp	r6, #0
 8013420:	d1af      	bne.n	8013382 <_strtol_l.isra.0+0x4a>
 8013422:	2608      	movs	r6, #8
 8013424:	e7ad      	b.n	8013382 <_strtol_l.isra.0+0x4a>
 8013426:	2c30      	cmp	r4, #48	; 0x30
 8013428:	d0a3      	beq.n	8013372 <_strtol_l.isra.0+0x3a>
 801342a:	260a      	movs	r6, #10
 801342c:	e7a9      	b.n	8013382 <_strtol_l.isra.0+0x4a>
	...

08013430 <strtol>:
 8013430:	4b08      	ldr	r3, [pc, #32]	; (8013454 <strtol+0x24>)
 8013432:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013434:	681c      	ldr	r4, [r3, #0]
 8013436:	4d08      	ldr	r5, [pc, #32]	; (8013458 <strtol+0x28>)
 8013438:	6a23      	ldr	r3, [r4, #32]
 801343a:	2b00      	cmp	r3, #0
 801343c:	bf08      	it	eq
 801343e:	462b      	moveq	r3, r5
 8013440:	9300      	str	r3, [sp, #0]
 8013442:	4613      	mov	r3, r2
 8013444:	460a      	mov	r2, r1
 8013446:	4601      	mov	r1, r0
 8013448:	4620      	mov	r0, r4
 801344a:	f7ff ff75 	bl	8013338 <_strtol_l.isra.0>
 801344e:	b003      	add	sp, #12
 8013450:	bd30      	pop	{r4, r5, pc}
 8013452:	bf00      	nop
 8013454:	20000050 	.word	0x20000050
 8013458:	200000b4 	.word	0x200000b4

0801345c <__utoa>:
 801345c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801345e:	4b1d      	ldr	r3, [pc, #116]	; (80134d4 <__utoa+0x78>)
 8013460:	b08b      	sub	sp, #44	; 0x2c
 8013462:	4605      	mov	r5, r0
 8013464:	460c      	mov	r4, r1
 8013466:	466e      	mov	r6, sp
 8013468:	f103 0c20 	add.w	ip, r3, #32
 801346c:	6818      	ldr	r0, [r3, #0]
 801346e:	6859      	ldr	r1, [r3, #4]
 8013470:	4637      	mov	r7, r6
 8013472:	c703      	stmia	r7!, {r0, r1}
 8013474:	3308      	adds	r3, #8
 8013476:	4563      	cmp	r3, ip
 8013478:	463e      	mov	r6, r7
 801347a:	d1f7      	bne.n	801346c <__utoa+0x10>
 801347c:	6818      	ldr	r0, [r3, #0]
 801347e:	791b      	ldrb	r3, [r3, #4]
 8013480:	713b      	strb	r3, [r7, #4]
 8013482:	1e93      	subs	r3, r2, #2
 8013484:	2b22      	cmp	r3, #34	; 0x22
 8013486:	6038      	str	r0, [r7, #0]
 8013488:	f04f 0300 	mov.w	r3, #0
 801348c:	d904      	bls.n	8013498 <__utoa+0x3c>
 801348e:	7023      	strb	r3, [r4, #0]
 8013490:	461c      	mov	r4, r3
 8013492:	4620      	mov	r0, r4
 8013494:	b00b      	add	sp, #44	; 0x2c
 8013496:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013498:	1e66      	subs	r6, r4, #1
 801349a:	fbb5 f0f2 	udiv	r0, r5, r2
 801349e:	af0a      	add	r7, sp, #40	; 0x28
 80134a0:	fb02 5510 	mls	r5, r2, r0, r5
 80134a4:	443d      	add	r5, r7
 80134a6:	1c59      	adds	r1, r3, #1
 80134a8:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 80134ac:	f806 5f01 	strb.w	r5, [r6, #1]!
 80134b0:	4605      	mov	r5, r0
 80134b2:	b968      	cbnz	r0, 80134d0 <__utoa+0x74>
 80134b4:	5460      	strb	r0, [r4, r1]
 80134b6:	4423      	add	r3, r4
 80134b8:	4622      	mov	r2, r4
 80134ba:	1b19      	subs	r1, r3, r4
 80134bc:	1b10      	subs	r0, r2, r4
 80134be:	4281      	cmp	r1, r0
 80134c0:	dde7      	ble.n	8013492 <__utoa+0x36>
 80134c2:	7811      	ldrb	r1, [r2, #0]
 80134c4:	7818      	ldrb	r0, [r3, #0]
 80134c6:	f802 0b01 	strb.w	r0, [r2], #1
 80134ca:	f803 1901 	strb.w	r1, [r3], #-1
 80134ce:	e7f4      	b.n	80134ba <__utoa+0x5e>
 80134d0:	460b      	mov	r3, r1
 80134d2:	e7e2      	b.n	801349a <__utoa+0x3e>
 80134d4:	08028620 	.word	0x08028620

080134d8 <rshift>:
 80134d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80134da:	6906      	ldr	r6, [r0, #16]
 80134dc:	114b      	asrs	r3, r1, #5
 80134de:	429e      	cmp	r6, r3
 80134e0:	f100 0414 	add.w	r4, r0, #20
 80134e4:	dd30      	ble.n	8013548 <rshift+0x70>
 80134e6:	f011 011f 	ands.w	r1, r1, #31
 80134ea:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80134ee:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80134f2:	d108      	bne.n	8013506 <rshift+0x2e>
 80134f4:	4621      	mov	r1, r4
 80134f6:	42b2      	cmp	r2, r6
 80134f8:	460b      	mov	r3, r1
 80134fa:	d211      	bcs.n	8013520 <rshift+0x48>
 80134fc:	f852 3b04 	ldr.w	r3, [r2], #4
 8013500:	f841 3b04 	str.w	r3, [r1], #4
 8013504:	e7f7      	b.n	80134f6 <rshift+0x1e>
 8013506:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 801350a:	f1c1 0c20 	rsb	ip, r1, #32
 801350e:	40cd      	lsrs	r5, r1
 8013510:	3204      	adds	r2, #4
 8013512:	4623      	mov	r3, r4
 8013514:	42b2      	cmp	r2, r6
 8013516:	4617      	mov	r7, r2
 8013518:	d30c      	bcc.n	8013534 <rshift+0x5c>
 801351a:	601d      	str	r5, [r3, #0]
 801351c:	b105      	cbz	r5, 8013520 <rshift+0x48>
 801351e:	3304      	adds	r3, #4
 8013520:	1b1a      	subs	r2, r3, r4
 8013522:	42a3      	cmp	r3, r4
 8013524:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8013528:	bf08      	it	eq
 801352a:	2300      	moveq	r3, #0
 801352c:	6102      	str	r2, [r0, #16]
 801352e:	bf08      	it	eq
 8013530:	6143      	streq	r3, [r0, #20]
 8013532:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013534:	683f      	ldr	r7, [r7, #0]
 8013536:	fa07 f70c 	lsl.w	r7, r7, ip
 801353a:	433d      	orrs	r5, r7
 801353c:	f843 5b04 	str.w	r5, [r3], #4
 8013540:	f852 5b04 	ldr.w	r5, [r2], #4
 8013544:	40cd      	lsrs	r5, r1
 8013546:	e7e5      	b.n	8013514 <rshift+0x3c>
 8013548:	4623      	mov	r3, r4
 801354a:	e7e9      	b.n	8013520 <rshift+0x48>

0801354c <__hexdig_fun>:
 801354c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8013550:	2b09      	cmp	r3, #9
 8013552:	d802      	bhi.n	801355a <__hexdig_fun+0xe>
 8013554:	3820      	subs	r0, #32
 8013556:	b2c0      	uxtb	r0, r0
 8013558:	4770      	bx	lr
 801355a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801355e:	2b05      	cmp	r3, #5
 8013560:	d801      	bhi.n	8013566 <__hexdig_fun+0x1a>
 8013562:	3847      	subs	r0, #71	; 0x47
 8013564:	e7f7      	b.n	8013556 <__hexdig_fun+0xa>
 8013566:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801356a:	2b05      	cmp	r3, #5
 801356c:	d801      	bhi.n	8013572 <__hexdig_fun+0x26>
 801356e:	3827      	subs	r0, #39	; 0x27
 8013570:	e7f1      	b.n	8013556 <__hexdig_fun+0xa>
 8013572:	2000      	movs	r0, #0
 8013574:	4770      	bx	lr

08013576 <__gethex>:
 8013576:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801357a:	b08b      	sub	sp, #44	; 0x2c
 801357c:	468a      	mov	sl, r1
 801357e:	9002      	str	r0, [sp, #8]
 8013580:	9816      	ldr	r0, [sp, #88]	; 0x58
 8013582:	9306      	str	r3, [sp, #24]
 8013584:	4690      	mov	r8, r2
 8013586:	f000 fad0 	bl	8013b2a <__localeconv_l>
 801358a:	6803      	ldr	r3, [r0, #0]
 801358c:	9303      	str	r3, [sp, #12]
 801358e:	4618      	mov	r0, r3
 8013590:	f7ec fe28 	bl	80001e4 <strlen>
 8013594:	9b03      	ldr	r3, [sp, #12]
 8013596:	9001      	str	r0, [sp, #4]
 8013598:	4403      	add	r3, r0
 801359a:	f04f 0b00 	mov.w	fp, #0
 801359e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80135a2:	9307      	str	r3, [sp, #28]
 80135a4:	f8da 3000 	ldr.w	r3, [sl]
 80135a8:	3302      	adds	r3, #2
 80135aa:	461f      	mov	r7, r3
 80135ac:	f813 0b01 	ldrb.w	r0, [r3], #1
 80135b0:	2830      	cmp	r0, #48	; 0x30
 80135b2:	d06c      	beq.n	801368e <__gethex+0x118>
 80135b4:	f7ff ffca 	bl	801354c <__hexdig_fun>
 80135b8:	4604      	mov	r4, r0
 80135ba:	2800      	cmp	r0, #0
 80135bc:	d16a      	bne.n	8013694 <__gethex+0x11e>
 80135be:	9a01      	ldr	r2, [sp, #4]
 80135c0:	9903      	ldr	r1, [sp, #12]
 80135c2:	4638      	mov	r0, r7
 80135c4:	f7ff f811 	bl	80125ea <strncmp>
 80135c8:	2800      	cmp	r0, #0
 80135ca:	d166      	bne.n	801369a <__gethex+0x124>
 80135cc:	9b01      	ldr	r3, [sp, #4]
 80135ce:	5cf8      	ldrb	r0, [r7, r3]
 80135d0:	18fe      	adds	r6, r7, r3
 80135d2:	f7ff ffbb 	bl	801354c <__hexdig_fun>
 80135d6:	2800      	cmp	r0, #0
 80135d8:	d062      	beq.n	80136a0 <__gethex+0x12a>
 80135da:	4633      	mov	r3, r6
 80135dc:	7818      	ldrb	r0, [r3, #0]
 80135de:	2830      	cmp	r0, #48	; 0x30
 80135e0:	461f      	mov	r7, r3
 80135e2:	f103 0301 	add.w	r3, r3, #1
 80135e6:	d0f9      	beq.n	80135dc <__gethex+0x66>
 80135e8:	f7ff ffb0 	bl	801354c <__hexdig_fun>
 80135ec:	fab0 f580 	clz	r5, r0
 80135f0:	096d      	lsrs	r5, r5, #5
 80135f2:	4634      	mov	r4, r6
 80135f4:	f04f 0b01 	mov.w	fp, #1
 80135f8:	463a      	mov	r2, r7
 80135fa:	4616      	mov	r6, r2
 80135fc:	3201      	adds	r2, #1
 80135fe:	7830      	ldrb	r0, [r6, #0]
 8013600:	f7ff ffa4 	bl	801354c <__hexdig_fun>
 8013604:	2800      	cmp	r0, #0
 8013606:	d1f8      	bne.n	80135fa <__gethex+0x84>
 8013608:	9a01      	ldr	r2, [sp, #4]
 801360a:	9903      	ldr	r1, [sp, #12]
 801360c:	4630      	mov	r0, r6
 801360e:	f7fe ffec 	bl	80125ea <strncmp>
 8013612:	b950      	cbnz	r0, 801362a <__gethex+0xb4>
 8013614:	b954      	cbnz	r4, 801362c <__gethex+0xb6>
 8013616:	9b01      	ldr	r3, [sp, #4]
 8013618:	18f4      	adds	r4, r6, r3
 801361a:	4622      	mov	r2, r4
 801361c:	4616      	mov	r6, r2
 801361e:	3201      	adds	r2, #1
 8013620:	7830      	ldrb	r0, [r6, #0]
 8013622:	f7ff ff93 	bl	801354c <__hexdig_fun>
 8013626:	2800      	cmp	r0, #0
 8013628:	d1f8      	bne.n	801361c <__gethex+0xa6>
 801362a:	b10c      	cbz	r4, 8013630 <__gethex+0xba>
 801362c:	1ba4      	subs	r4, r4, r6
 801362e:	00a4      	lsls	r4, r4, #2
 8013630:	7833      	ldrb	r3, [r6, #0]
 8013632:	2b50      	cmp	r3, #80	; 0x50
 8013634:	d001      	beq.n	801363a <__gethex+0xc4>
 8013636:	2b70      	cmp	r3, #112	; 0x70
 8013638:	d140      	bne.n	80136bc <__gethex+0x146>
 801363a:	7873      	ldrb	r3, [r6, #1]
 801363c:	2b2b      	cmp	r3, #43	; 0x2b
 801363e:	d031      	beq.n	80136a4 <__gethex+0x12e>
 8013640:	2b2d      	cmp	r3, #45	; 0x2d
 8013642:	d033      	beq.n	80136ac <__gethex+0x136>
 8013644:	1c71      	adds	r1, r6, #1
 8013646:	f04f 0900 	mov.w	r9, #0
 801364a:	7808      	ldrb	r0, [r1, #0]
 801364c:	f7ff ff7e 	bl	801354c <__hexdig_fun>
 8013650:	1e43      	subs	r3, r0, #1
 8013652:	b2db      	uxtb	r3, r3
 8013654:	2b18      	cmp	r3, #24
 8013656:	d831      	bhi.n	80136bc <__gethex+0x146>
 8013658:	f1a0 0210 	sub.w	r2, r0, #16
 801365c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8013660:	f7ff ff74 	bl	801354c <__hexdig_fun>
 8013664:	1e43      	subs	r3, r0, #1
 8013666:	b2db      	uxtb	r3, r3
 8013668:	2b18      	cmp	r3, #24
 801366a:	d922      	bls.n	80136b2 <__gethex+0x13c>
 801366c:	f1b9 0f00 	cmp.w	r9, #0
 8013670:	d000      	beq.n	8013674 <__gethex+0xfe>
 8013672:	4252      	negs	r2, r2
 8013674:	4414      	add	r4, r2
 8013676:	f8ca 1000 	str.w	r1, [sl]
 801367a:	b30d      	cbz	r5, 80136c0 <__gethex+0x14a>
 801367c:	f1bb 0f00 	cmp.w	fp, #0
 8013680:	bf0c      	ite	eq
 8013682:	2706      	moveq	r7, #6
 8013684:	2700      	movne	r7, #0
 8013686:	4638      	mov	r0, r7
 8013688:	b00b      	add	sp, #44	; 0x2c
 801368a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801368e:	f10b 0b01 	add.w	fp, fp, #1
 8013692:	e78a      	b.n	80135aa <__gethex+0x34>
 8013694:	2500      	movs	r5, #0
 8013696:	462c      	mov	r4, r5
 8013698:	e7ae      	b.n	80135f8 <__gethex+0x82>
 801369a:	463e      	mov	r6, r7
 801369c:	2501      	movs	r5, #1
 801369e:	e7c7      	b.n	8013630 <__gethex+0xba>
 80136a0:	4604      	mov	r4, r0
 80136a2:	e7fb      	b.n	801369c <__gethex+0x126>
 80136a4:	f04f 0900 	mov.w	r9, #0
 80136a8:	1cb1      	adds	r1, r6, #2
 80136aa:	e7ce      	b.n	801364a <__gethex+0xd4>
 80136ac:	f04f 0901 	mov.w	r9, #1
 80136b0:	e7fa      	b.n	80136a8 <__gethex+0x132>
 80136b2:	230a      	movs	r3, #10
 80136b4:	fb03 0202 	mla	r2, r3, r2, r0
 80136b8:	3a10      	subs	r2, #16
 80136ba:	e7cf      	b.n	801365c <__gethex+0xe6>
 80136bc:	4631      	mov	r1, r6
 80136be:	e7da      	b.n	8013676 <__gethex+0x100>
 80136c0:	1bf3      	subs	r3, r6, r7
 80136c2:	3b01      	subs	r3, #1
 80136c4:	4629      	mov	r1, r5
 80136c6:	2b07      	cmp	r3, #7
 80136c8:	dc49      	bgt.n	801375e <__gethex+0x1e8>
 80136ca:	9802      	ldr	r0, [sp, #8]
 80136cc:	f000 fa41 	bl	8013b52 <_Balloc>
 80136d0:	9b01      	ldr	r3, [sp, #4]
 80136d2:	f100 0914 	add.w	r9, r0, #20
 80136d6:	f04f 0b00 	mov.w	fp, #0
 80136da:	f1c3 0301 	rsb	r3, r3, #1
 80136de:	4605      	mov	r5, r0
 80136e0:	f8cd 9010 	str.w	r9, [sp, #16]
 80136e4:	46da      	mov	sl, fp
 80136e6:	9308      	str	r3, [sp, #32]
 80136e8:	42b7      	cmp	r7, r6
 80136ea:	d33b      	bcc.n	8013764 <__gethex+0x1ee>
 80136ec:	9804      	ldr	r0, [sp, #16]
 80136ee:	f840 ab04 	str.w	sl, [r0], #4
 80136f2:	eba0 0009 	sub.w	r0, r0, r9
 80136f6:	1080      	asrs	r0, r0, #2
 80136f8:	6128      	str	r0, [r5, #16]
 80136fa:	0147      	lsls	r7, r0, #5
 80136fc:	4650      	mov	r0, sl
 80136fe:	f000 faec 	bl	8013cda <__hi0bits>
 8013702:	f8d8 6000 	ldr.w	r6, [r8]
 8013706:	1a3f      	subs	r7, r7, r0
 8013708:	42b7      	cmp	r7, r6
 801370a:	dd64      	ble.n	80137d6 <__gethex+0x260>
 801370c:	1bbf      	subs	r7, r7, r6
 801370e:	4639      	mov	r1, r7
 8013710:	4628      	mov	r0, r5
 8013712:	f000 fdfb 	bl	801430c <__any_on>
 8013716:	4682      	mov	sl, r0
 8013718:	b178      	cbz	r0, 801373a <__gethex+0x1c4>
 801371a:	1e7b      	subs	r3, r7, #1
 801371c:	1159      	asrs	r1, r3, #5
 801371e:	f003 021f 	and.w	r2, r3, #31
 8013722:	f04f 0a01 	mov.w	sl, #1
 8013726:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801372a:	fa0a f202 	lsl.w	r2, sl, r2
 801372e:	420a      	tst	r2, r1
 8013730:	d003      	beq.n	801373a <__gethex+0x1c4>
 8013732:	4553      	cmp	r3, sl
 8013734:	dc46      	bgt.n	80137c4 <__gethex+0x24e>
 8013736:	f04f 0a02 	mov.w	sl, #2
 801373a:	4639      	mov	r1, r7
 801373c:	4628      	mov	r0, r5
 801373e:	f7ff fecb 	bl	80134d8 <rshift>
 8013742:	443c      	add	r4, r7
 8013744:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013748:	42a3      	cmp	r3, r4
 801374a:	da52      	bge.n	80137f2 <__gethex+0x27c>
 801374c:	4629      	mov	r1, r5
 801374e:	9802      	ldr	r0, [sp, #8]
 8013750:	f000 fa33 	bl	8013bba <_Bfree>
 8013754:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013756:	2300      	movs	r3, #0
 8013758:	6013      	str	r3, [r2, #0]
 801375a:	27a3      	movs	r7, #163	; 0xa3
 801375c:	e793      	b.n	8013686 <__gethex+0x110>
 801375e:	3101      	adds	r1, #1
 8013760:	105b      	asrs	r3, r3, #1
 8013762:	e7b0      	b.n	80136c6 <__gethex+0x150>
 8013764:	1e73      	subs	r3, r6, #1
 8013766:	9305      	str	r3, [sp, #20]
 8013768:	9a07      	ldr	r2, [sp, #28]
 801376a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801376e:	4293      	cmp	r3, r2
 8013770:	d018      	beq.n	80137a4 <__gethex+0x22e>
 8013772:	f1bb 0f20 	cmp.w	fp, #32
 8013776:	d107      	bne.n	8013788 <__gethex+0x212>
 8013778:	9b04      	ldr	r3, [sp, #16]
 801377a:	f8c3 a000 	str.w	sl, [r3]
 801377e:	3304      	adds	r3, #4
 8013780:	f04f 0a00 	mov.w	sl, #0
 8013784:	9304      	str	r3, [sp, #16]
 8013786:	46d3      	mov	fp, sl
 8013788:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801378c:	f7ff fede 	bl	801354c <__hexdig_fun>
 8013790:	f000 000f 	and.w	r0, r0, #15
 8013794:	fa00 f00b 	lsl.w	r0, r0, fp
 8013798:	ea4a 0a00 	orr.w	sl, sl, r0
 801379c:	f10b 0b04 	add.w	fp, fp, #4
 80137a0:	9b05      	ldr	r3, [sp, #20]
 80137a2:	e00d      	b.n	80137c0 <__gethex+0x24a>
 80137a4:	9b05      	ldr	r3, [sp, #20]
 80137a6:	9a08      	ldr	r2, [sp, #32]
 80137a8:	4413      	add	r3, r2
 80137aa:	42bb      	cmp	r3, r7
 80137ac:	d3e1      	bcc.n	8013772 <__gethex+0x1fc>
 80137ae:	4618      	mov	r0, r3
 80137b0:	9a01      	ldr	r2, [sp, #4]
 80137b2:	9903      	ldr	r1, [sp, #12]
 80137b4:	9309      	str	r3, [sp, #36]	; 0x24
 80137b6:	f7fe ff18 	bl	80125ea <strncmp>
 80137ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80137bc:	2800      	cmp	r0, #0
 80137be:	d1d8      	bne.n	8013772 <__gethex+0x1fc>
 80137c0:	461e      	mov	r6, r3
 80137c2:	e791      	b.n	80136e8 <__gethex+0x172>
 80137c4:	1eb9      	subs	r1, r7, #2
 80137c6:	4628      	mov	r0, r5
 80137c8:	f000 fda0 	bl	801430c <__any_on>
 80137cc:	2800      	cmp	r0, #0
 80137ce:	d0b2      	beq.n	8013736 <__gethex+0x1c0>
 80137d0:	f04f 0a03 	mov.w	sl, #3
 80137d4:	e7b1      	b.n	801373a <__gethex+0x1c4>
 80137d6:	da09      	bge.n	80137ec <__gethex+0x276>
 80137d8:	1bf7      	subs	r7, r6, r7
 80137da:	4629      	mov	r1, r5
 80137dc:	463a      	mov	r2, r7
 80137de:	9802      	ldr	r0, [sp, #8]
 80137e0:	f000 fbb6 	bl	8013f50 <__lshift>
 80137e4:	1be4      	subs	r4, r4, r7
 80137e6:	4605      	mov	r5, r0
 80137e8:	f100 0914 	add.w	r9, r0, #20
 80137ec:	f04f 0a00 	mov.w	sl, #0
 80137f0:	e7a8      	b.n	8013744 <__gethex+0x1ce>
 80137f2:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80137f6:	42a0      	cmp	r0, r4
 80137f8:	dd6a      	ble.n	80138d0 <__gethex+0x35a>
 80137fa:	1b04      	subs	r4, r0, r4
 80137fc:	42a6      	cmp	r6, r4
 80137fe:	dc2e      	bgt.n	801385e <__gethex+0x2e8>
 8013800:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013804:	2b02      	cmp	r3, #2
 8013806:	d022      	beq.n	801384e <__gethex+0x2d8>
 8013808:	2b03      	cmp	r3, #3
 801380a:	d024      	beq.n	8013856 <__gethex+0x2e0>
 801380c:	2b01      	cmp	r3, #1
 801380e:	d115      	bne.n	801383c <__gethex+0x2c6>
 8013810:	42a6      	cmp	r6, r4
 8013812:	d113      	bne.n	801383c <__gethex+0x2c6>
 8013814:	2e01      	cmp	r6, #1
 8013816:	dc0b      	bgt.n	8013830 <__gethex+0x2ba>
 8013818:	9a06      	ldr	r2, [sp, #24]
 801381a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801381e:	6013      	str	r3, [r2, #0]
 8013820:	2301      	movs	r3, #1
 8013822:	612b      	str	r3, [r5, #16]
 8013824:	f8c9 3000 	str.w	r3, [r9]
 8013828:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801382a:	2762      	movs	r7, #98	; 0x62
 801382c:	601d      	str	r5, [r3, #0]
 801382e:	e72a      	b.n	8013686 <__gethex+0x110>
 8013830:	1e71      	subs	r1, r6, #1
 8013832:	4628      	mov	r0, r5
 8013834:	f000 fd6a 	bl	801430c <__any_on>
 8013838:	2800      	cmp	r0, #0
 801383a:	d1ed      	bne.n	8013818 <__gethex+0x2a2>
 801383c:	4629      	mov	r1, r5
 801383e:	9802      	ldr	r0, [sp, #8]
 8013840:	f000 f9bb 	bl	8013bba <_Bfree>
 8013844:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013846:	2300      	movs	r3, #0
 8013848:	6013      	str	r3, [r2, #0]
 801384a:	2750      	movs	r7, #80	; 0x50
 801384c:	e71b      	b.n	8013686 <__gethex+0x110>
 801384e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013850:	2b00      	cmp	r3, #0
 8013852:	d0e1      	beq.n	8013818 <__gethex+0x2a2>
 8013854:	e7f2      	b.n	801383c <__gethex+0x2c6>
 8013856:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013858:	2b00      	cmp	r3, #0
 801385a:	d1dd      	bne.n	8013818 <__gethex+0x2a2>
 801385c:	e7ee      	b.n	801383c <__gethex+0x2c6>
 801385e:	1e67      	subs	r7, r4, #1
 8013860:	f1ba 0f00 	cmp.w	sl, #0
 8013864:	d131      	bne.n	80138ca <__gethex+0x354>
 8013866:	b127      	cbz	r7, 8013872 <__gethex+0x2fc>
 8013868:	4639      	mov	r1, r7
 801386a:	4628      	mov	r0, r5
 801386c:	f000 fd4e 	bl	801430c <__any_on>
 8013870:	4682      	mov	sl, r0
 8013872:	117a      	asrs	r2, r7, #5
 8013874:	2301      	movs	r3, #1
 8013876:	f007 071f 	and.w	r7, r7, #31
 801387a:	fa03 f707 	lsl.w	r7, r3, r7
 801387e:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8013882:	4621      	mov	r1, r4
 8013884:	421f      	tst	r7, r3
 8013886:	4628      	mov	r0, r5
 8013888:	bf18      	it	ne
 801388a:	f04a 0a02 	orrne.w	sl, sl, #2
 801388e:	1b36      	subs	r6, r6, r4
 8013890:	f7ff fe22 	bl	80134d8 <rshift>
 8013894:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8013898:	2702      	movs	r7, #2
 801389a:	f1ba 0f00 	cmp.w	sl, #0
 801389e:	d048      	beq.n	8013932 <__gethex+0x3bc>
 80138a0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80138a4:	2b02      	cmp	r3, #2
 80138a6:	d015      	beq.n	80138d4 <__gethex+0x35e>
 80138a8:	2b03      	cmp	r3, #3
 80138aa:	d017      	beq.n	80138dc <__gethex+0x366>
 80138ac:	2b01      	cmp	r3, #1
 80138ae:	d109      	bne.n	80138c4 <__gethex+0x34e>
 80138b0:	f01a 0f02 	tst.w	sl, #2
 80138b4:	d006      	beq.n	80138c4 <__gethex+0x34e>
 80138b6:	f8d9 3000 	ldr.w	r3, [r9]
 80138ba:	ea4a 0a03 	orr.w	sl, sl, r3
 80138be:	f01a 0f01 	tst.w	sl, #1
 80138c2:	d10e      	bne.n	80138e2 <__gethex+0x36c>
 80138c4:	f047 0710 	orr.w	r7, r7, #16
 80138c8:	e033      	b.n	8013932 <__gethex+0x3bc>
 80138ca:	f04f 0a01 	mov.w	sl, #1
 80138ce:	e7d0      	b.n	8013872 <__gethex+0x2fc>
 80138d0:	2701      	movs	r7, #1
 80138d2:	e7e2      	b.n	801389a <__gethex+0x324>
 80138d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80138d6:	f1c3 0301 	rsb	r3, r3, #1
 80138da:	9315      	str	r3, [sp, #84]	; 0x54
 80138dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80138de:	2b00      	cmp	r3, #0
 80138e0:	d0f0      	beq.n	80138c4 <__gethex+0x34e>
 80138e2:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80138e6:	f105 0314 	add.w	r3, r5, #20
 80138ea:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80138ee:	eb03 010a 	add.w	r1, r3, sl
 80138f2:	f04f 0c00 	mov.w	ip, #0
 80138f6:	4618      	mov	r0, r3
 80138f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80138fc:	f1b2 3fff 	cmp.w	r2, #4294967295
 8013900:	d01c      	beq.n	801393c <__gethex+0x3c6>
 8013902:	3201      	adds	r2, #1
 8013904:	6002      	str	r2, [r0, #0]
 8013906:	2f02      	cmp	r7, #2
 8013908:	f105 0314 	add.w	r3, r5, #20
 801390c:	d138      	bne.n	8013980 <__gethex+0x40a>
 801390e:	f8d8 2000 	ldr.w	r2, [r8]
 8013912:	3a01      	subs	r2, #1
 8013914:	42b2      	cmp	r2, r6
 8013916:	d10a      	bne.n	801392e <__gethex+0x3b8>
 8013918:	1171      	asrs	r1, r6, #5
 801391a:	2201      	movs	r2, #1
 801391c:	f006 061f 	and.w	r6, r6, #31
 8013920:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013924:	fa02 f606 	lsl.w	r6, r2, r6
 8013928:	421e      	tst	r6, r3
 801392a:	bf18      	it	ne
 801392c:	4617      	movne	r7, r2
 801392e:	f047 0720 	orr.w	r7, r7, #32
 8013932:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013934:	601d      	str	r5, [r3, #0]
 8013936:	9b06      	ldr	r3, [sp, #24]
 8013938:	601c      	str	r4, [r3, #0]
 801393a:	e6a4      	b.n	8013686 <__gethex+0x110>
 801393c:	4299      	cmp	r1, r3
 801393e:	f843 cc04 	str.w	ip, [r3, #-4]
 8013942:	d8d8      	bhi.n	80138f6 <__gethex+0x380>
 8013944:	68ab      	ldr	r3, [r5, #8]
 8013946:	4599      	cmp	r9, r3
 8013948:	db12      	blt.n	8013970 <__gethex+0x3fa>
 801394a:	6869      	ldr	r1, [r5, #4]
 801394c:	9802      	ldr	r0, [sp, #8]
 801394e:	3101      	adds	r1, #1
 8013950:	f000 f8ff 	bl	8013b52 <_Balloc>
 8013954:	692a      	ldr	r2, [r5, #16]
 8013956:	3202      	adds	r2, #2
 8013958:	f105 010c 	add.w	r1, r5, #12
 801395c:	4683      	mov	fp, r0
 801395e:	0092      	lsls	r2, r2, #2
 8013960:	300c      	adds	r0, #12
 8013962:	f7fe fdf9 	bl	8012558 <memcpy>
 8013966:	4629      	mov	r1, r5
 8013968:	9802      	ldr	r0, [sp, #8]
 801396a:	f000 f926 	bl	8013bba <_Bfree>
 801396e:	465d      	mov	r5, fp
 8013970:	692b      	ldr	r3, [r5, #16]
 8013972:	1c5a      	adds	r2, r3, #1
 8013974:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8013978:	612a      	str	r2, [r5, #16]
 801397a:	2201      	movs	r2, #1
 801397c:	615a      	str	r2, [r3, #20]
 801397e:	e7c2      	b.n	8013906 <__gethex+0x390>
 8013980:	692a      	ldr	r2, [r5, #16]
 8013982:	454a      	cmp	r2, r9
 8013984:	dd0b      	ble.n	801399e <__gethex+0x428>
 8013986:	2101      	movs	r1, #1
 8013988:	4628      	mov	r0, r5
 801398a:	f7ff fda5 	bl	80134d8 <rshift>
 801398e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013992:	3401      	adds	r4, #1
 8013994:	42a3      	cmp	r3, r4
 8013996:	f6ff aed9 	blt.w	801374c <__gethex+0x1d6>
 801399a:	2701      	movs	r7, #1
 801399c:	e7c7      	b.n	801392e <__gethex+0x3b8>
 801399e:	f016 061f 	ands.w	r6, r6, #31
 80139a2:	d0fa      	beq.n	801399a <__gethex+0x424>
 80139a4:	449a      	add	sl, r3
 80139a6:	f1c6 0620 	rsb	r6, r6, #32
 80139aa:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80139ae:	f000 f994 	bl	8013cda <__hi0bits>
 80139b2:	42b0      	cmp	r0, r6
 80139b4:	dbe7      	blt.n	8013986 <__gethex+0x410>
 80139b6:	e7f0      	b.n	801399a <__gethex+0x424>

080139b8 <L_shift>:
 80139b8:	f1c2 0208 	rsb	r2, r2, #8
 80139bc:	0092      	lsls	r2, r2, #2
 80139be:	b570      	push	{r4, r5, r6, lr}
 80139c0:	f1c2 0620 	rsb	r6, r2, #32
 80139c4:	6843      	ldr	r3, [r0, #4]
 80139c6:	6804      	ldr	r4, [r0, #0]
 80139c8:	fa03 f506 	lsl.w	r5, r3, r6
 80139cc:	432c      	orrs	r4, r5
 80139ce:	40d3      	lsrs	r3, r2
 80139d0:	6004      	str	r4, [r0, #0]
 80139d2:	f840 3f04 	str.w	r3, [r0, #4]!
 80139d6:	4288      	cmp	r0, r1
 80139d8:	d3f4      	bcc.n	80139c4 <L_shift+0xc>
 80139da:	bd70      	pop	{r4, r5, r6, pc}

080139dc <__match>:
 80139dc:	b530      	push	{r4, r5, lr}
 80139de:	6803      	ldr	r3, [r0, #0]
 80139e0:	3301      	adds	r3, #1
 80139e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80139e6:	b914      	cbnz	r4, 80139ee <__match+0x12>
 80139e8:	6003      	str	r3, [r0, #0]
 80139ea:	2001      	movs	r0, #1
 80139ec:	bd30      	pop	{r4, r5, pc}
 80139ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80139f2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80139f6:	2d19      	cmp	r5, #25
 80139f8:	bf98      	it	ls
 80139fa:	3220      	addls	r2, #32
 80139fc:	42a2      	cmp	r2, r4
 80139fe:	d0f0      	beq.n	80139e2 <__match+0x6>
 8013a00:	2000      	movs	r0, #0
 8013a02:	e7f3      	b.n	80139ec <__match+0x10>

08013a04 <__hexnan>:
 8013a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a08:	680b      	ldr	r3, [r1, #0]
 8013a0a:	6801      	ldr	r1, [r0, #0]
 8013a0c:	115f      	asrs	r7, r3, #5
 8013a0e:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8013a12:	f013 031f 	ands.w	r3, r3, #31
 8013a16:	b087      	sub	sp, #28
 8013a18:	bf18      	it	ne
 8013a1a:	3704      	addne	r7, #4
 8013a1c:	2500      	movs	r5, #0
 8013a1e:	1f3e      	subs	r6, r7, #4
 8013a20:	4682      	mov	sl, r0
 8013a22:	4690      	mov	r8, r2
 8013a24:	9301      	str	r3, [sp, #4]
 8013a26:	f847 5c04 	str.w	r5, [r7, #-4]
 8013a2a:	46b1      	mov	r9, r6
 8013a2c:	4634      	mov	r4, r6
 8013a2e:	9502      	str	r5, [sp, #8]
 8013a30:	46ab      	mov	fp, r5
 8013a32:	784a      	ldrb	r2, [r1, #1]
 8013a34:	1c4b      	adds	r3, r1, #1
 8013a36:	9303      	str	r3, [sp, #12]
 8013a38:	b342      	cbz	r2, 8013a8c <__hexnan+0x88>
 8013a3a:	4610      	mov	r0, r2
 8013a3c:	9105      	str	r1, [sp, #20]
 8013a3e:	9204      	str	r2, [sp, #16]
 8013a40:	f7ff fd84 	bl	801354c <__hexdig_fun>
 8013a44:	2800      	cmp	r0, #0
 8013a46:	d143      	bne.n	8013ad0 <__hexnan+0xcc>
 8013a48:	9a04      	ldr	r2, [sp, #16]
 8013a4a:	9905      	ldr	r1, [sp, #20]
 8013a4c:	2a20      	cmp	r2, #32
 8013a4e:	d818      	bhi.n	8013a82 <__hexnan+0x7e>
 8013a50:	9b02      	ldr	r3, [sp, #8]
 8013a52:	459b      	cmp	fp, r3
 8013a54:	dd13      	ble.n	8013a7e <__hexnan+0x7a>
 8013a56:	454c      	cmp	r4, r9
 8013a58:	d206      	bcs.n	8013a68 <__hexnan+0x64>
 8013a5a:	2d07      	cmp	r5, #7
 8013a5c:	dc04      	bgt.n	8013a68 <__hexnan+0x64>
 8013a5e:	462a      	mov	r2, r5
 8013a60:	4649      	mov	r1, r9
 8013a62:	4620      	mov	r0, r4
 8013a64:	f7ff ffa8 	bl	80139b8 <L_shift>
 8013a68:	4544      	cmp	r4, r8
 8013a6a:	d944      	bls.n	8013af6 <__hexnan+0xf2>
 8013a6c:	2300      	movs	r3, #0
 8013a6e:	f1a4 0904 	sub.w	r9, r4, #4
 8013a72:	f844 3c04 	str.w	r3, [r4, #-4]
 8013a76:	f8cd b008 	str.w	fp, [sp, #8]
 8013a7a:	464c      	mov	r4, r9
 8013a7c:	461d      	mov	r5, r3
 8013a7e:	9903      	ldr	r1, [sp, #12]
 8013a80:	e7d7      	b.n	8013a32 <__hexnan+0x2e>
 8013a82:	2a29      	cmp	r2, #41	; 0x29
 8013a84:	d14a      	bne.n	8013b1c <__hexnan+0x118>
 8013a86:	3102      	adds	r1, #2
 8013a88:	f8ca 1000 	str.w	r1, [sl]
 8013a8c:	f1bb 0f00 	cmp.w	fp, #0
 8013a90:	d044      	beq.n	8013b1c <__hexnan+0x118>
 8013a92:	454c      	cmp	r4, r9
 8013a94:	d206      	bcs.n	8013aa4 <__hexnan+0xa0>
 8013a96:	2d07      	cmp	r5, #7
 8013a98:	dc04      	bgt.n	8013aa4 <__hexnan+0xa0>
 8013a9a:	462a      	mov	r2, r5
 8013a9c:	4649      	mov	r1, r9
 8013a9e:	4620      	mov	r0, r4
 8013aa0:	f7ff ff8a 	bl	80139b8 <L_shift>
 8013aa4:	4544      	cmp	r4, r8
 8013aa6:	d928      	bls.n	8013afa <__hexnan+0xf6>
 8013aa8:	4643      	mov	r3, r8
 8013aaa:	f854 2b04 	ldr.w	r2, [r4], #4
 8013aae:	f843 2b04 	str.w	r2, [r3], #4
 8013ab2:	42a6      	cmp	r6, r4
 8013ab4:	d2f9      	bcs.n	8013aaa <__hexnan+0xa6>
 8013ab6:	2200      	movs	r2, #0
 8013ab8:	f843 2b04 	str.w	r2, [r3], #4
 8013abc:	429e      	cmp	r6, r3
 8013abe:	d2fb      	bcs.n	8013ab8 <__hexnan+0xb4>
 8013ac0:	6833      	ldr	r3, [r6, #0]
 8013ac2:	b91b      	cbnz	r3, 8013acc <__hexnan+0xc8>
 8013ac4:	4546      	cmp	r6, r8
 8013ac6:	d127      	bne.n	8013b18 <__hexnan+0x114>
 8013ac8:	2301      	movs	r3, #1
 8013aca:	6033      	str	r3, [r6, #0]
 8013acc:	2005      	movs	r0, #5
 8013ace:	e026      	b.n	8013b1e <__hexnan+0x11a>
 8013ad0:	3501      	adds	r5, #1
 8013ad2:	2d08      	cmp	r5, #8
 8013ad4:	f10b 0b01 	add.w	fp, fp, #1
 8013ad8:	dd06      	ble.n	8013ae8 <__hexnan+0xe4>
 8013ada:	4544      	cmp	r4, r8
 8013adc:	d9cf      	bls.n	8013a7e <__hexnan+0x7a>
 8013ade:	2300      	movs	r3, #0
 8013ae0:	f844 3c04 	str.w	r3, [r4, #-4]
 8013ae4:	2501      	movs	r5, #1
 8013ae6:	3c04      	subs	r4, #4
 8013ae8:	6822      	ldr	r2, [r4, #0]
 8013aea:	f000 000f 	and.w	r0, r0, #15
 8013aee:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8013af2:	6020      	str	r0, [r4, #0]
 8013af4:	e7c3      	b.n	8013a7e <__hexnan+0x7a>
 8013af6:	2508      	movs	r5, #8
 8013af8:	e7c1      	b.n	8013a7e <__hexnan+0x7a>
 8013afa:	9b01      	ldr	r3, [sp, #4]
 8013afc:	2b00      	cmp	r3, #0
 8013afe:	d0df      	beq.n	8013ac0 <__hexnan+0xbc>
 8013b00:	f04f 32ff 	mov.w	r2, #4294967295
 8013b04:	f1c3 0320 	rsb	r3, r3, #32
 8013b08:	fa22 f303 	lsr.w	r3, r2, r3
 8013b0c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8013b10:	401a      	ands	r2, r3
 8013b12:	f847 2c04 	str.w	r2, [r7, #-4]
 8013b16:	e7d3      	b.n	8013ac0 <__hexnan+0xbc>
 8013b18:	3e04      	subs	r6, #4
 8013b1a:	e7d1      	b.n	8013ac0 <__hexnan+0xbc>
 8013b1c:	2004      	movs	r0, #4
 8013b1e:	b007      	add	sp, #28
 8013b20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013b24 <__locale_ctype_ptr_l>:
 8013b24:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8013b28:	4770      	bx	lr

08013b2a <__localeconv_l>:
 8013b2a:	30f0      	adds	r0, #240	; 0xf0
 8013b2c:	4770      	bx	lr

08013b2e <__ascii_mbtowc>:
 8013b2e:	b082      	sub	sp, #8
 8013b30:	b901      	cbnz	r1, 8013b34 <__ascii_mbtowc+0x6>
 8013b32:	a901      	add	r1, sp, #4
 8013b34:	b142      	cbz	r2, 8013b48 <__ascii_mbtowc+0x1a>
 8013b36:	b14b      	cbz	r3, 8013b4c <__ascii_mbtowc+0x1e>
 8013b38:	7813      	ldrb	r3, [r2, #0]
 8013b3a:	600b      	str	r3, [r1, #0]
 8013b3c:	7812      	ldrb	r2, [r2, #0]
 8013b3e:	1c10      	adds	r0, r2, #0
 8013b40:	bf18      	it	ne
 8013b42:	2001      	movne	r0, #1
 8013b44:	b002      	add	sp, #8
 8013b46:	4770      	bx	lr
 8013b48:	4610      	mov	r0, r2
 8013b4a:	e7fb      	b.n	8013b44 <__ascii_mbtowc+0x16>
 8013b4c:	f06f 0001 	mvn.w	r0, #1
 8013b50:	e7f8      	b.n	8013b44 <__ascii_mbtowc+0x16>

08013b52 <_Balloc>:
 8013b52:	b570      	push	{r4, r5, r6, lr}
 8013b54:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8013b56:	4604      	mov	r4, r0
 8013b58:	460e      	mov	r6, r1
 8013b5a:	b93d      	cbnz	r5, 8013b6c <_Balloc+0x1a>
 8013b5c:	2010      	movs	r0, #16
 8013b5e:	f000 ff5d 	bl	8014a1c <malloc>
 8013b62:	6260      	str	r0, [r4, #36]	; 0x24
 8013b64:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8013b68:	6005      	str	r5, [r0, #0]
 8013b6a:	60c5      	str	r5, [r0, #12]
 8013b6c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8013b6e:	68eb      	ldr	r3, [r5, #12]
 8013b70:	b183      	cbz	r3, 8013b94 <_Balloc+0x42>
 8013b72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013b74:	68db      	ldr	r3, [r3, #12]
 8013b76:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8013b7a:	b9b8      	cbnz	r0, 8013bac <_Balloc+0x5a>
 8013b7c:	2101      	movs	r1, #1
 8013b7e:	fa01 f506 	lsl.w	r5, r1, r6
 8013b82:	1d6a      	adds	r2, r5, #5
 8013b84:	0092      	lsls	r2, r2, #2
 8013b86:	4620      	mov	r0, r4
 8013b88:	f000 fbe1 	bl	801434e <_calloc_r>
 8013b8c:	b160      	cbz	r0, 8013ba8 <_Balloc+0x56>
 8013b8e:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8013b92:	e00e      	b.n	8013bb2 <_Balloc+0x60>
 8013b94:	2221      	movs	r2, #33	; 0x21
 8013b96:	2104      	movs	r1, #4
 8013b98:	4620      	mov	r0, r4
 8013b9a:	f000 fbd8 	bl	801434e <_calloc_r>
 8013b9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013ba0:	60e8      	str	r0, [r5, #12]
 8013ba2:	68db      	ldr	r3, [r3, #12]
 8013ba4:	2b00      	cmp	r3, #0
 8013ba6:	d1e4      	bne.n	8013b72 <_Balloc+0x20>
 8013ba8:	2000      	movs	r0, #0
 8013baa:	bd70      	pop	{r4, r5, r6, pc}
 8013bac:	6802      	ldr	r2, [r0, #0]
 8013bae:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8013bb2:	2300      	movs	r3, #0
 8013bb4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013bb8:	e7f7      	b.n	8013baa <_Balloc+0x58>

08013bba <_Bfree>:
 8013bba:	b570      	push	{r4, r5, r6, lr}
 8013bbc:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8013bbe:	4606      	mov	r6, r0
 8013bc0:	460d      	mov	r5, r1
 8013bc2:	b93c      	cbnz	r4, 8013bd4 <_Bfree+0x1a>
 8013bc4:	2010      	movs	r0, #16
 8013bc6:	f000 ff29 	bl	8014a1c <malloc>
 8013bca:	6270      	str	r0, [r6, #36]	; 0x24
 8013bcc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013bd0:	6004      	str	r4, [r0, #0]
 8013bd2:	60c4      	str	r4, [r0, #12]
 8013bd4:	b13d      	cbz	r5, 8013be6 <_Bfree+0x2c>
 8013bd6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8013bd8:	686a      	ldr	r2, [r5, #4]
 8013bda:	68db      	ldr	r3, [r3, #12]
 8013bdc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013be0:	6029      	str	r1, [r5, #0]
 8013be2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8013be6:	bd70      	pop	{r4, r5, r6, pc}

08013be8 <__multadd>:
 8013be8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013bec:	690d      	ldr	r5, [r1, #16]
 8013bee:	461f      	mov	r7, r3
 8013bf0:	4606      	mov	r6, r0
 8013bf2:	460c      	mov	r4, r1
 8013bf4:	f101 0c14 	add.w	ip, r1, #20
 8013bf8:	2300      	movs	r3, #0
 8013bfa:	f8dc 0000 	ldr.w	r0, [ip]
 8013bfe:	b281      	uxth	r1, r0
 8013c00:	fb02 7101 	mla	r1, r2, r1, r7
 8013c04:	0c0f      	lsrs	r7, r1, #16
 8013c06:	0c00      	lsrs	r0, r0, #16
 8013c08:	fb02 7000 	mla	r0, r2, r0, r7
 8013c0c:	b289      	uxth	r1, r1
 8013c0e:	3301      	adds	r3, #1
 8013c10:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8013c14:	429d      	cmp	r5, r3
 8013c16:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8013c1a:	f84c 1b04 	str.w	r1, [ip], #4
 8013c1e:	dcec      	bgt.n	8013bfa <__multadd+0x12>
 8013c20:	b1d7      	cbz	r7, 8013c58 <__multadd+0x70>
 8013c22:	68a3      	ldr	r3, [r4, #8]
 8013c24:	42ab      	cmp	r3, r5
 8013c26:	dc12      	bgt.n	8013c4e <__multadd+0x66>
 8013c28:	6861      	ldr	r1, [r4, #4]
 8013c2a:	4630      	mov	r0, r6
 8013c2c:	3101      	adds	r1, #1
 8013c2e:	f7ff ff90 	bl	8013b52 <_Balloc>
 8013c32:	6922      	ldr	r2, [r4, #16]
 8013c34:	3202      	adds	r2, #2
 8013c36:	f104 010c 	add.w	r1, r4, #12
 8013c3a:	4680      	mov	r8, r0
 8013c3c:	0092      	lsls	r2, r2, #2
 8013c3e:	300c      	adds	r0, #12
 8013c40:	f7fe fc8a 	bl	8012558 <memcpy>
 8013c44:	4621      	mov	r1, r4
 8013c46:	4630      	mov	r0, r6
 8013c48:	f7ff ffb7 	bl	8013bba <_Bfree>
 8013c4c:	4644      	mov	r4, r8
 8013c4e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013c52:	3501      	adds	r5, #1
 8013c54:	615f      	str	r7, [r3, #20]
 8013c56:	6125      	str	r5, [r4, #16]
 8013c58:	4620      	mov	r0, r4
 8013c5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013c5e <__s2b>:
 8013c5e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013c62:	460c      	mov	r4, r1
 8013c64:	4615      	mov	r5, r2
 8013c66:	461f      	mov	r7, r3
 8013c68:	2209      	movs	r2, #9
 8013c6a:	3308      	adds	r3, #8
 8013c6c:	4606      	mov	r6, r0
 8013c6e:	fb93 f3f2 	sdiv	r3, r3, r2
 8013c72:	2100      	movs	r1, #0
 8013c74:	2201      	movs	r2, #1
 8013c76:	429a      	cmp	r2, r3
 8013c78:	db20      	blt.n	8013cbc <__s2b+0x5e>
 8013c7a:	4630      	mov	r0, r6
 8013c7c:	f7ff ff69 	bl	8013b52 <_Balloc>
 8013c80:	9b08      	ldr	r3, [sp, #32]
 8013c82:	6143      	str	r3, [r0, #20]
 8013c84:	2d09      	cmp	r5, #9
 8013c86:	f04f 0301 	mov.w	r3, #1
 8013c8a:	6103      	str	r3, [r0, #16]
 8013c8c:	dd19      	ble.n	8013cc2 <__s2b+0x64>
 8013c8e:	f104 0809 	add.w	r8, r4, #9
 8013c92:	46c1      	mov	r9, r8
 8013c94:	442c      	add	r4, r5
 8013c96:	f819 3b01 	ldrb.w	r3, [r9], #1
 8013c9a:	4601      	mov	r1, r0
 8013c9c:	3b30      	subs	r3, #48	; 0x30
 8013c9e:	220a      	movs	r2, #10
 8013ca0:	4630      	mov	r0, r6
 8013ca2:	f7ff ffa1 	bl	8013be8 <__multadd>
 8013ca6:	45a1      	cmp	r9, r4
 8013ca8:	d1f5      	bne.n	8013c96 <__s2b+0x38>
 8013caa:	eb08 0405 	add.w	r4, r8, r5
 8013cae:	3c08      	subs	r4, #8
 8013cb0:	1b2d      	subs	r5, r5, r4
 8013cb2:	1963      	adds	r3, r4, r5
 8013cb4:	42bb      	cmp	r3, r7
 8013cb6:	db07      	blt.n	8013cc8 <__s2b+0x6a>
 8013cb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013cbc:	0052      	lsls	r2, r2, #1
 8013cbe:	3101      	adds	r1, #1
 8013cc0:	e7d9      	b.n	8013c76 <__s2b+0x18>
 8013cc2:	340a      	adds	r4, #10
 8013cc4:	2509      	movs	r5, #9
 8013cc6:	e7f3      	b.n	8013cb0 <__s2b+0x52>
 8013cc8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8013ccc:	4601      	mov	r1, r0
 8013cce:	3b30      	subs	r3, #48	; 0x30
 8013cd0:	220a      	movs	r2, #10
 8013cd2:	4630      	mov	r0, r6
 8013cd4:	f7ff ff88 	bl	8013be8 <__multadd>
 8013cd8:	e7eb      	b.n	8013cb2 <__s2b+0x54>

08013cda <__hi0bits>:
 8013cda:	0c02      	lsrs	r2, r0, #16
 8013cdc:	0412      	lsls	r2, r2, #16
 8013cde:	4603      	mov	r3, r0
 8013ce0:	b9b2      	cbnz	r2, 8013d10 <__hi0bits+0x36>
 8013ce2:	0403      	lsls	r3, r0, #16
 8013ce4:	2010      	movs	r0, #16
 8013ce6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8013cea:	bf04      	itt	eq
 8013cec:	021b      	lsleq	r3, r3, #8
 8013cee:	3008      	addeq	r0, #8
 8013cf0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8013cf4:	bf04      	itt	eq
 8013cf6:	011b      	lsleq	r3, r3, #4
 8013cf8:	3004      	addeq	r0, #4
 8013cfa:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8013cfe:	bf04      	itt	eq
 8013d00:	009b      	lsleq	r3, r3, #2
 8013d02:	3002      	addeq	r0, #2
 8013d04:	2b00      	cmp	r3, #0
 8013d06:	db06      	blt.n	8013d16 <__hi0bits+0x3c>
 8013d08:	005b      	lsls	r3, r3, #1
 8013d0a:	d503      	bpl.n	8013d14 <__hi0bits+0x3a>
 8013d0c:	3001      	adds	r0, #1
 8013d0e:	4770      	bx	lr
 8013d10:	2000      	movs	r0, #0
 8013d12:	e7e8      	b.n	8013ce6 <__hi0bits+0xc>
 8013d14:	2020      	movs	r0, #32
 8013d16:	4770      	bx	lr

08013d18 <__lo0bits>:
 8013d18:	6803      	ldr	r3, [r0, #0]
 8013d1a:	f013 0207 	ands.w	r2, r3, #7
 8013d1e:	4601      	mov	r1, r0
 8013d20:	d00b      	beq.n	8013d3a <__lo0bits+0x22>
 8013d22:	07da      	lsls	r2, r3, #31
 8013d24:	d423      	bmi.n	8013d6e <__lo0bits+0x56>
 8013d26:	0798      	lsls	r0, r3, #30
 8013d28:	bf49      	itett	mi
 8013d2a:	085b      	lsrmi	r3, r3, #1
 8013d2c:	089b      	lsrpl	r3, r3, #2
 8013d2e:	2001      	movmi	r0, #1
 8013d30:	600b      	strmi	r3, [r1, #0]
 8013d32:	bf5c      	itt	pl
 8013d34:	600b      	strpl	r3, [r1, #0]
 8013d36:	2002      	movpl	r0, #2
 8013d38:	4770      	bx	lr
 8013d3a:	b298      	uxth	r0, r3
 8013d3c:	b9a8      	cbnz	r0, 8013d6a <__lo0bits+0x52>
 8013d3e:	0c1b      	lsrs	r3, r3, #16
 8013d40:	2010      	movs	r0, #16
 8013d42:	f013 0fff 	tst.w	r3, #255	; 0xff
 8013d46:	bf04      	itt	eq
 8013d48:	0a1b      	lsreq	r3, r3, #8
 8013d4a:	3008      	addeq	r0, #8
 8013d4c:	071a      	lsls	r2, r3, #28
 8013d4e:	bf04      	itt	eq
 8013d50:	091b      	lsreq	r3, r3, #4
 8013d52:	3004      	addeq	r0, #4
 8013d54:	079a      	lsls	r2, r3, #30
 8013d56:	bf04      	itt	eq
 8013d58:	089b      	lsreq	r3, r3, #2
 8013d5a:	3002      	addeq	r0, #2
 8013d5c:	07da      	lsls	r2, r3, #31
 8013d5e:	d402      	bmi.n	8013d66 <__lo0bits+0x4e>
 8013d60:	085b      	lsrs	r3, r3, #1
 8013d62:	d006      	beq.n	8013d72 <__lo0bits+0x5a>
 8013d64:	3001      	adds	r0, #1
 8013d66:	600b      	str	r3, [r1, #0]
 8013d68:	4770      	bx	lr
 8013d6a:	4610      	mov	r0, r2
 8013d6c:	e7e9      	b.n	8013d42 <__lo0bits+0x2a>
 8013d6e:	2000      	movs	r0, #0
 8013d70:	4770      	bx	lr
 8013d72:	2020      	movs	r0, #32
 8013d74:	4770      	bx	lr

08013d76 <__i2b>:
 8013d76:	b510      	push	{r4, lr}
 8013d78:	460c      	mov	r4, r1
 8013d7a:	2101      	movs	r1, #1
 8013d7c:	f7ff fee9 	bl	8013b52 <_Balloc>
 8013d80:	2201      	movs	r2, #1
 8013d82:	6144      	str	r4, [r0, #20]
 8013d84:	6102      	str	r2, [r0, #16]
 8013d86:	bd10      	pop	{r4, pc}

08013d88 <__multiply>:
 8013d88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d8c:	4614      	mov	r4, r2
 8013d8e:	690a      	ldr	r2, [r1, #16]
 8013d90:	6923      	ldr	r3, [r4, #16]
 8013d92:	429a      	cmp	r2, r3
 8013d94:	bfb8      	it	lt
 8013d96:	460b      	movlt	r3, r1
 8013d98:	4688      	mov	r8, r1
 8013d9a:	bfbc      	itt	lt
 8013d9c:	46a0      	movlt	r8, r4
 8013d9e:	461c      	movlt	r4, r3
 8013da0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8013da4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8013da8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013dac:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8013db0:	eb07 0609 	add.w	r6, r7, r9
 8013db4:	42b3      	cmp	r3, r6
 8013db6:	bfb8      	it	lt
 8013db8:	3101      	addlt	r1, #1
 8013dba:	f7ff feca 	bl	8013b52 <_Balloc>
 8013dbe:	f100 0514 	add.w	r5, r0, #20
 8013dc2:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8013dc6:	462b      	mov	r3, r5
 8013dc8:	2200      	movs	r2, #0
 8013dca:	4573      	cmp	r3, lr
 8013dcc:	d316      	bcc.n	8013dfc <__multiply+0x74>
 8013dce:	f104 0214 	add.w	r2, r4, #20
 8013dd2:	f108 0114 	add.w	r1, r8, #20
 8013dd6:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8013dda:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8013dde:	9300      	str	r3, [sp, #0]
 8013de0:	9b00      	ldr	r3, [sp, #0]
 8013de2:	9201      	str	r2, [sp, #4]
 8013de4:	4293      	cmp	r3, r2
 8013de6:	d80c      	bhi.n	8013e02 <__multiply+0x7a>
 8013de8:	2e00      	cmp	r6, #0
 8013dea:	dd03      	ble.n	8013df4 <__multiply+0x6c>
 8013dec:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8013df0:	2b00      	cmp	r3, #0
 8013df2:	d05d      	beq.n	8013eb0 <__multiply+0x128>
 8013df4:	6106      	str	r6, [r0, #16]
 8013df6:	b003      	add	sp, #12
 8013df8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013dfc:	f843 2b04 	str.w	r2, [r3], #4
 8013e00:	e7e3      	b.n	8013dca <__multiply+0x42>
 8013e02:	f8b2 b000 	ldrh.w	fp, [r2]
 8013e06:	f1bb 0f00 	cmp.w	fp, #0
 8013e0a:	d023      	beq.n	8013e54 <__multiply+0xcc>
 8013e0c:	4689      	mov	r9, r1
 8013e0e:	46ac      	mov	ip, r5
 8013e10:	f04f 0800 	mov.w	r8, #0
 8013e14:	f859 4b04 	ldr.w	r4, [r9], #4
 8013e18:	f8dc a000 	ldr.w	sl, [ip]
 8013e1c:	b2a3      	uxth	r3, r4
 8013e1e:	fa1f fa8a 	uxth.w	sl, sl
 8013e22:	fb0b a303 	mla	r3, fp, r3, sl
 8013e26:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8013e2a:	f8dc 4000 	ldr.w	r4, [ip]
 8013e2e:	4443      	add	r3, r8
 8013e30:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8013e34:	fb0b 840a 	mla	r4, fp, sl, r8
 8013e38:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8013e3c:	46e2      	mov	sl, ip
 8013e3e:	b29b      	uxth	r3, r3
 8013e40:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8013e44:	454f      	cmp	r7, r9
 8013e46:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8013e4a:	f84a 3b04 	str.w	r3, [sl], #4
 8013e4e:	d82b      	bhi.n	8013ea8 <__multiply+0x120>
 8013e50:	f8cc 8004 	str.w	r8, [ip, #4]
 8013e54:	9b01      	ldr	r3, [sp, #4]
 8013e56:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8013e5a:	3204      	adds	r2, #4
 8013e5c:	f1ba 0f00 	cmp.w	sl, #0
 8013e60:	d020      	beq.n	8013ea4 <__multiply+0x11c>
 8013e62:	682b      	ldr	r3, [r5, #0]
 8013e64:	4689      	mov	r9, r1
 8013e66:	46a8      	mov	r8, r5
 8013e68:	f04f 0b00 	mov.w	fp, #0
 8013e6c:	f8b9 c000 	ldrh.w	ip, [r9]
 8013e70:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8013e74:	fb0a 440c 	mla	r4, sl, ip, r4
 8013e78:	445c      	add	r4, fp
 8013e7a:	46c4      	mov	ip, r8
 8013e7c:	b29b      	uxth	r3, r3
 8013e7e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8013e82:	f84c 3b04 	str.w	r3, [ip], #4
 8013e86:	f859 3b04 	ldr.w	r3, [r9], #4
 8013e8a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8013e8e:	0c1b      	lsrs	r3, r3, #16
 8013e90:	fb0a b303 	mla	r3, sl, r3, fp
 8013e94:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8013e98:	454f      	cmp	r7, r9
 8013e9a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8013e9e:	d805      	bhi.n	8013eac <__multiply+0x124>
 8013ea0:	f8c8 3004 	str.w	r3, [r8, #4]
 8013ea4:	3504      	adds	r5, #4
 8013ea6:	e79b      	b.n	8013de0 <__multiply+0x58>
 8013ea8:	46d4      	mov	ip, sl
 8013eaa:	e7b3      	b.n	8013e14 <__multiply+0x8c>
 8013eac:	46e0      	mov	r8, ip
 8013eae:	e7dd      	b.n	8013e6c <__multiply+0xe4>
 8013eb0:	3e01      	subs	r6, #1
 8013eb2:	e799      	b.n	8013de8 <__multiply+0x60>

08013eb4 <__pow5mult>:
 8013eb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013eb8:	4615      	mov	r5, r2
 8013eba:	f012 0203 	ands.w	r2, r2, #3
 8013ebe:	4606      	mov	r6, r0
 8013ec0:	460f      	mov	r7, r1
 8013ec2:	d007      	beq.n	8013ed4 <__pow5mult+0x20>
 8013ec4:	3a01      	subs	r2, #1
 8013ec6:	4c21      	ldr	r4, [pc, #132]	; (8013f4c <__pow5mult+0x98>)
 8013ec8:	2300      	movs	r3, #0
 8013eca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013ece:	f7ff fe8b 	bl	8013be8 <__multadd>
 8013ed2:	4607      	mov	r7, r0
 8013ed4:	10ad      	asrs	r5, r5, #2
 8013ed6:	d035      	beq.n	8013f44 <__pow5mult+0x90>
 8013ed8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8013eda:	b93c      	cbnz	r4, 8013eec <__pow5mult+0x38>
 8013edc:	2010      	movs	r0, #16
 8013ede:	f000 fd9d 	bl	8014a1c <malloc>
 8013ee2:	6270      	str	r0, [r6, #36]	; 0x24
 8013ee4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013ee8:	6004      	str	r4, [r0, #0]
 8013eea:	60c4      	str	r4, [r0, #12]
 8013eec:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8013ef0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013ef4:	b94c      	cbnz	r4, 8013f0a <__pow5mult+0x56>
 8013ef6:	f240 2171 	movw	r1, #625	; 0x271
 8013efa:	4630      	mov	r0, r6
 8013efc:	f7ff ff3b 	bl	8013d76 <__i2b>
 8013f00:	2300      	movs	r3, #0
 8013f02:	f8c8 0008 	str.w	r0, [r8, #8]
 8013f06:	4604      	mov	r4, r0
 8013f08:	6003      	str	r3, [r0, #0]
 8013f0a:	f04f 0800 	mov.w	r8, #0
 8013f0e:	07eb      	lsls	r3, r5, #31
 8013f10:	d50a      	bpl.n	8013f28 <__pow5mult+0x74>
 8013f12:	4639      	mov	r1, r7
 8013f14:	4622      	mov	r2, r4
 8013f16:	4630      	mov	r0, r6
 8013f18:	f7ff ff36 	bl	8013d88 <__multiply>
 8013f1c:	4639      	mov	r1, r7
 8013f1e:	4681      	mov	r9, r0
 8013f20:	4630      	mov	r0, r6
 8013f22:	f7ff fe4a 	bl	8013bba <_Bfree>
 8013f26:	464f      	mov	r7, r9
 8013f28:	106d      	asrs	r5, r5, #1
 8013f2a:	d00b      	beq.n	8013f44 <__pow5mult+0x90>
 8013f2c:	6820      	ldr	r0, [r4, #0]
 8013f2e:	b938      	cbnz	r0, 8013f40 <__pow5mult+0x8c>
 8013f30:	4622      	mov	r2, r4
 8013f32:	4621      	mov	r1, r4
 8013f34:	4630      	mov	r0, r6
 8013f36:	f7ff ff27 	bl	8013d88 <__multiply>
 8013f3a:	6020      	str	r0, [r4, #0]
 8013f3c:	f8c0 8000 	str.w	r8, [r0]
 8013f40:	4604      	mov	r4, r0
 8013f42:	e7e4      	b.n	8013f0e <__pow5mult+0x5a>
 8013f44:	4638      	mov	r0, r7
 8013f46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013f4a:	bf00      	nop
 8013f4c:	08028740 	.word	0x08028740

08013f50 <__lshift>:
 8013f50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013f54:	460c      	mov	r4, r1
 8013f56:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013f5a:	6923      	ldr	r3, [r4, #16]
 8013f5c:	6849      	ldr	r1, [r1, #4]
 8013f5e:	eb0a 0903 	add.w	r9, sl, r3
 8013f62:	68a3      	ldr	r3, [r4, #8]
 8013f64:	4607      	mov	r7, r0
 8013f66:	4616      	mov	r6, r2
 8013f68:	f109 0501 	add.w	r5, r9, #1
 8013f6c:	42ab      	cmp	r3, r5
 8013f6e:	db32      	blt.n	8013fd6 <__lshift+0x86>
 8013f70:	4638      	mov	r0, r7
 8013f72:	f7ff fdee 	bl	8013b52 <_Balloc>
 8013f76:	2300      	movs	r3, #0
 8013f78:	4680      	mov	r8, r0
 8013f7a:	f100 0114 	add.w	r1, r0, #20
 8013f7e:	461a      	mov	r2, r3
 8013f80:	4553      	cmp	r3, sl
 8013f82:	db2b      	blt.n	8013fdc <__lshift+0x8c>
 8013f84:	6920      	ldr	r0, [r4, #16]
 8013f86:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013f8a:	f104 0314 	add.w	r3, r4, #20
 8013f8e:	f016 021f 	ands.w	r2, r6, #31
 8013f92:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013f96:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013f9a:	d025      	beq.n	8013fe8 <__lshift+0x98>
 8013f9c:	f1c2 0e20 	rsb	lr, r2, #32
 8013fa0:	2000      	movs	r0, #0
 8013fa2:	681e      	ldr	r6, [r3, #0]
 8013fa4:	468a      	mov	sl, r1
 8013fa6:	4096      	lsls	r6, r2
 8013fa8:	4330      	orrs	r0, r6
 8013faa:	f84a 0b04 	str.w	r0, [sl], #4
 8013fae:	f853 0b04 	ldr.w	r0, [r3], #4
 8013fb2:	459c      	cmp	ip, r3
 8013fb4:	fa20 f00e 	lsr.w	r0, r0, lr
 8013fb8:	d814      	bhi.n	8013fe4 <__lshift+0x94>
 8013fba:	6048      	str	r0, [r1, #4]
 8013fbc:	b108      	cbz	r0, 8013fc2 <__lshift+0x72>
 8013fbe:	f109 0502 	add.w	r5, r9, #2
 8013fc2:	3d01      	subs	r5, #1
 8013fc4:	4638      	mov	r0, r7
 8013fc6:	f8c8 5010 	str.w	r5, [r8, #16]
 8013fca:	4621      	mov	r1, r4
 8013fcc:	f7ff fdf5 	bl	8013bba <_Bfree>
 8013fd0:	4640      	mov	r0, r8
 8013fd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013fd6:	3101      	adds	r1, #1
 8013fd8:	005b      	lsls	r3, r3, #1
 8013fda:	e7c7      	b.n	8013f6c <__lshift+0x1c>
 8013fdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8013fe0:	3301      	adds	r3, #1
 8013fe2:	e7cd      	b.n	8013f80 <__lshift+0x30>
 8013fe4:	4651      	mov	r1, sl
 8013fe6:	e7dc      	b.n	8013fa2 <__lshift+0x52>
 8013fe8:	3904      	subs	r1, #4
 8013fea:	f853 2b04 	ldr.w	r2, [r3], #4
 8013fee:	f841 2f04 	str.w	r2, [r1, #4]!
 8013ff2:	459c      	cmp	ip, r3
 8013ff4:	d8f9      	bhi.n	8013fea <__lshift+0x9a>
 8013ff6:	e7e4      	b.n	8013fc2 <__lshift+0x72>

08013ff8 <__mcmp>:
 8013ff8:	6903      	ldr	r3, [r0, #16]
 8013ffa:	690a      	ldr	r2, [r1, #16]
 8013ffc:	1a9b      	subs	r3, r3, r2
 8013ffe:	b530      	push	{r4, r5, lr}
 8014000:	d10c      	bne.n	801401c <__mcmp+0x24>
 8014002:	0092      	lsls	r2, r2, #2
 8014004:	3014      	adds	r0, #20
 8014006:	3114      	adds	r1, #20
 8014008:	1884      	adds	r4, r0, r2
 801400a:	4411      	add	r1, r2
 801400c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8014010:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8014014:	4295      	cmp	r5, r2
 8014016:	d003      	beq.n	8014020 <__mcmp+0x28>
 8014018:	d305      	bcc.n	8014026 <__mcmp+0x2e>
 801401a:	2301      	movs	r3, #1
 801401c:	4618      	mov	r0, r3
 801401e:	bd30      	pop	{r4, r5, pc}
 8014020:	42a0      	cmp	r0, r4
 8014022:	d3f3      	bcc.n	801400c <__mcmp+0x14>
 8014024:	e7fa      	b.n	801401c <__mcmp+0x24>
 8014026:	f04f 33ff 	mov.w	r3, #4294967295
 801402a:	e7f7      	b.n	801401c <__mcmp+0x24>

0801402c <__mdiff>:
 801402c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014030:	460d      	mov	r5, r1
 8014032:	4607      	mov	r7, r0
 8014034:	4611      	mov	r1, r2
 8014036:	4628      	mov	r0, r5
 8014038:	4614      	mov	r4, r2
 801403a:	f7ff ffdd 	bl	8013ff8 <__mcmp>
 801403e:	1e06      	subs	r6, r0, #0
 8014040:	d108      	bne.n	8014054 <__mdiff+0x28>
 8014042:	4631      	mov	r1, r6
 8014044:	4638      	mov	r0, r7
 8014046:	f7ff fd84 	bl	8013b52 <_Balloc>
 801404a:	2301      	movs	r3, #1
 801404c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8014050:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014054:	bfa4      	itt	ge
 8014056:	4623      	movge	r3, r4
 8014058:	462c      	movge	r4, r5
 801405a:	4638      	mov	r0, r7
 801405c:	6861      	ldr	r1, [r4, #4]
 801405e:	bfa6      	itte	ge
 8014060:	461d      	movge	r5, r3
 8014062:	2600      	movge	r6, #0
 8014064:	2601      	movlt	r6, #1
 8014066:	f7ff fd74 	bl	8013b52 <_Balloc>
 801406a:	692b      	ldr	r3, [r5, #16]
 801406c:	60c6      	str	r6, [r0, #12]
 801406e:	6926      	ldr	r6, [r4, #16]
 8014070:	f105 0914 	add.w	r9, r5, #20
 8014074:	f104 0214 	add.w	r2, r4, #20
 8014078:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 801407c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8014080:	f100 0514 	add.w	r5, r0, #20
 8014084:	f04f 0e00 	mov.w	lr, #0
 8014088:	f852 ab04 	ldr.w	sl, [r2], #4
 801408c:	f859 4b04 	ldr.w	r4, [r9], #4
 8014090:	fa1e f18a 	uxtah	r1, lr, sl
 8014094:	b2a3      	uxth	r3, r4
 8014096:	1ac9      	subs	r1, r1, r3
 8014098:	0c23      	lsrs	r3, r4, #16
 801409a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 801409e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80140a2:	b289      	uxth	r1, r1
 80140a4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80140a8:	45c8      	cmp	r8, r9
 80140aa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80140ae:	4694      	mov	ip, r2
 80140b0:	f845 3b04 	str.w	r3, [r5], #4
 80140b4:	d8e8      	bhi.n	8014088 <__mdiff+0x5c>
 80140b6:	45bc      	cmp	ip, r7
 80140b8:	d304      	bcc.n	80140c4 <__mdiff+0x98>
 80140ba:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80140be:	b183      	cbz	r3, 80140e2 <__mdiff+0xb6>
 80140c0:	6106      	str	r6, [r0, #16]
 80140c2:	e7c5      	b.n	8014050 <__mdiff+0x24>
 80140c4:	f85c 1b04 	ldr.w	r1, [ip], #4
 80140c8:	fa1e f381 	uxtah	r3, lr, r1
 80140cc:	141a      	asrs	r2, r3, #16
 80140ce:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80140d2:	b29b      	uxth	r3, r3
 80140d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80140d8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80140dc:	f845 3b04 	str.w	r3, [r5], #4
 80140e0:	e7e9      	b.n	80140b6 <__mdiff+0x8a>
 80140e2:	3e01      	subs	r6, #1
 80140e4:	e7e9      	b.n	80140ba <__mdiff+0x8e>
	...

080140e8 <__ulp>:
 80140e8:	4b12      	ldr	r3, [pc, #72]	; (8014134 <__ulp+0x4c>)
 80140ea:	ee10 2a90 	vmov	r2, s1
 80140ee:	401a      	ands	r2, r3
 80140f0:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 80140f4:	2b00      	cmp	r3, #0
 80140f6:	dd04      	ble.n	8014102 <__ulp+0x1a>
 80140f8:	2000      	movs	r0, #0
 80140fa:	4619      	mov	r1, r3
 80140fc:	ec41 0b10 	vmov	d0, r0, r1
 8014100:	4770      	bx	lr
 8014102:	425b      	negs	r3, r3
 8014104:	151b      	asrs	r3, r3, #20
 8014106:	2b13      	cmp	r3, #19
 8014108:	f04f 0000 	mov.w	r0, #0
 801410c:	f04f 0100 	mov.w	r1, #0
 8014110:	dc04      	bgt.n	801411c <__ulp+0x34>
 8014112:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8014116:	fa42 f103 	asr.w	r1, r2, r3
 801411a:	e7ef      	b.n	80140fc <__ulp+0x14>
 801411c:	3b14      	subs	r3, #20
 801411e:	2b1e      	cmp	r3, #30
 8014120:	f04f 0201 	mov.w	r2, #1
 8014124:	bfda      	itte	le
 8014126:	f1c3 031f 	rsble	r3, r3, #31
 801412a:	fa02 f303 	lslle.w	r3, r2, r3
 801412e:	4613      	movgt	r3, r2
 8014130:	4618      	mov	r0, r3
 8014132:	e7e3      	b.n	80140fc <__ulp+0x14>
 8014134:	7ff00000 	.word	0x7ff00000

08014138 <__b2d>:
 8014138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801413a:	6905      	ldr	r5, [r0, #16]
 801413c:	f100 0714 	add.w	r7, r0, #20
 8014140:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8014144:	1f2e      	subs	r6, r5, #4
 8014146:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801414a:	4620      	mov	r0, r4
 801414c:	f7ff fdc5 	bl	8013cda <__hi0bits>
 8014150:	f1c0 0320 	rsb	r3, r0, #32
 8014154:	280a      	cmp	r0, #10
 8014156:	600b      	str	r3, [r1, #0]
 8014158:	f8df c074 	ldr.w	ip, [pc, #116]	; 80141d0 <__b2d+0x98>
 801415c:	dc14      	bgt.n	8014188 <__b2d+0x50>
 801415e:	f1c0 0e0b 	rsb	lr, r0, #11
 8014162:	fa24 f10e 	lsr.w	r1, r4, lr
 8014166:	42b7      	cmp	r7, r6
 8014168:	ea41 030c 	orr.w	r3, r1, ip
 801416c:	bf34      	ite	cc
 801416e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8014172:	2100      	movcs	r1, #0
 8014174:	3015      	adds	r0, #21
 8014176:	fa04 f000 	lsl.w	r0, r4, r0
 801417a:	fa21 f10e 	lsr.w	r1, r1, lr
 801417e:	ea40 0201 	orr.w	r2, r0, r1
 8014182:	ec43 2b10 	vmov	d0, r2, r3
 8014186:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014188:	42b7      	cmp	r7, r6
 801418a:	bf3a      	itte	cc
 801418c:	f1a5 0608 	subcc.w	r6, r5, #8
 8014190:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8014194:	2100      	movcs	r1, #0
 8014196:	380b      	subs	r0, #11
 8014198:	d015      	beq.n	80141c6 <__b2d+0x8e>
 801419a:	4084      	lsls	r4, r0
 801419c:	f1c0 0520 	rsb	r5, r0, #32
 80141a0:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 80141a4:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 80141a8:	42be      	cmp	r6, r7
 80141aa:	fa21 fc05 	lsr.w	ip, r1, r5
 80141ae:	ea44 030c 	orr.w	r3, r4, ip
 80141b2:	bf8c      	ite	hi
 80141b4:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80141b8:	2400      	movls	r4, #0
 80141ba:	fa01 f000 	lsl.w	r0, r1, r0
 80141be:	40ec      	lsrs	r4, r5
 80141c0:	ea40 0204 	orr.w	r2, r0, r4
 80141c4:	e7dd      	b.n	8014182 <__b2d+0x4a>
 80141c6:	ea44 030c 	orr.w	r3, r4, ip
 80141ca:	460a      	mov	r2, r1
 80141cc:	e7d9      	b.n	8014182 <__b2d+0x4a>
 80141ce:	bf00      	nop
 80141d0:	3ff00000 	.word	0x3ff00000

080141d4 <__d2b>:
 80141d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80141d8:	460e      	mov	r6, r1
 80141da:	2101      	movs	r1, #1
 80141dc:	ec59 8b10 	vmov	r8, r9, d0
 80141e0:	4615      	mov	r5, r2
 80141e2:	f7ff fcb6 	bl	8013b52 <_Balloc>
 80141e6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80141ea:	4607      	mov	r7, r0
 80141ec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80141f0:	bb34      	cbnz	r4, 8014240 <__d2b+0x6c>
 80141f2:	9301      	str	r3, [sp, #4]
 80141f4:	f1b8 0300 	subs.w	r3, r8, #0
 80141f8:	d027      	beq.n	801424a <__d2b+0x76>
 80141fa:	a802      	add	r0, sp, #8
 80141fc:	f840 3d08 	str.w	r3, [r0, #-8]!
 8014200:	f7ff fd8a 	bl	8013d18 <__lo0bits>
 8014204:	9900      	ldr	r1, [sp, #0]
 8014206:	b1f0      	cbz	r0, 8014246 <__d2b+0x72>
 8014208:	9a01      	ldr	r2, [sp, #4]
 801420a:	f1c0 0320 	rsb	r3, r0, #32
 801420e:	fa02 f303 	lsl.w	r3, r2, r3
 8014212:	430b      	orrs	r3, r1
 8014214:	40c2      	lsrs	r2, r0
 8014216:	617b      	str	r3, [r7, #20]
 8014218:	9201      	str	r2, [sp, #4]
 801421a:	9b01      	ldr	r3, [sp, #4]
 801421c:	61bb      	str	r3, [r7, #24]
 801421e:	2b00      	cmp	r3, #0
 8014220:	bf14      	ite	ne
 8014222:	2102      	movne	r1, #2
 8014224:	2101      	moveq	r1, #1
 8014226:	6139      	str	r1, [r7, #16]
 8014228:	b1c4      	cbz	r4, 801425c <__d2b+0x88>
 801422a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 801422e:	4404      	add	r4, r0
 8014230:	6034      	str	r4, [r6, #0]
 8014232:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8014236:	6028      	str	r0, [r5, #0]
 8014238:	4638      	mov	r0, r7
 801423a:	b003      	add	sp, #12
 801423c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014240:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014244:	e7d5      	b.n	80141f2 <__d2b+0x1e>
 8014246:	6179      	str	r1, [r7, #20]
 8014248:	e7e7      	b.n	801421a <__d2b+0x46>
 801424a:	a801      	add	r0, sp, #4
 801424c:	f7ff fd64 	bl	8013d18 <__lo0bits>
 8014250:	9b01      	ldr	r3, [sp, #4]
 8014252:	617b      	str	r3, [r7, #20]
 8014254:	2101      	movs	r1, #1
 8014256:	6139      	str	r1, [r7, #16]
 8014258:	3020      	adds	r0, #32
 801425a:	e7e5      	b.n	8014228 <__d2b+0x54>
 801425c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8014260:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8014264:	6030      	str	r0, [r6, #0]
 8014266:	6918      	ldr	r0, [r3, #16]
 8014268:	f7ff fd37 	bl	8013cda <__hi0bits>
 801426c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8014270:	e7e1      	b.n	8014236 <__d2b+0x62>

08014272 <__ratio>:
 8014272:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014276:	4688      	mov	r8, r1
 8014278:	4669      	mov	r1, sp
 801427a:	4681      	mov	r9, r0
 801427c:	f7ff ff5c 	bl	8014138 <__b2d>
 8014280:	a901      	add	r1, sp, #4
 8014282:	4640      	mov	r0, r8
 8014284:	ec57 6b10 	vmov	r6, r7, d0
 8014288:	f7ff ff56 	bl	8014138 <__b2d>
 801428c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8014290:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8014294:	eba3 0c02 	sub.w	ip, r3, r2
 8014298:	e9dd 3200 	ldrd	r3, r2, [sp]
 801429c:	1a9b      	subs	r3, r3, r2
 801429e:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80142a2:	ec5b ab10 	vmov	sl, fp, d0
 80142a6:	2b00      	cmp	r3, #0
 80142a8:	bfce      	itee	gt
 80142aa:	463a      	movgt	r2, r7
 80142ac:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80142b0:	465a      	movle	r2, fp
 80142b2:	4659      	mov	r1, fp
 80142b4:	463d      	mov	r5, r7
 80142b6:	bfd4      	ite	le
 80142b8:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 80142bc:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 80142c0:	4630      	mov	r0, r6
 80142c2:	ee10 2a10 	vmov	r2, s0
 80142c6:	460b      	mov	r3, r1
 80142c8:	4629      	mov	r1, r5
 80142ca:	f7ec facf 	bl	800086c <__aeabi_ddiv>
 80142ce:	ec41 0b10 	vmov	d0, r0, r1
 80142d2:	b003      	add	sp, #12
 80142d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080142d8 <__copybits>:
 80142d8:	3901      	subs	r1, #1
 80142da:	b510      	push	{r4, lr}
 80142dc:	1149      	asrs	r1, r1, #5
 80142de:	6914      	ldr	r4, [r2, #16]
 80142e0:	3101      	adds	r1, #1
 80142e2:	f102 0314 	add.w	r3, r2, #20
 80142e6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80142ea:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80142ee:	42a3      	cmp	r3, r4
 80142f0:	4602      	mov	r2, r0
 80142f2:	d303      	bcc.n	80142fc <__copybits+0x24>
 80142f4:	2300      	movs	r3, #0
 80142f6:	428a      	cmp	r2, r1
 80142f8:	d305      	bcc.n	8014306 <__copybits+0x2e>
 80142fa:	bd10      	pop	{r4, pc}
 80142fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8014300:	f840 2b04 	str.w	r2, [r0], #4
 8014304:	e7f3      	b.n	80142ee <__copybits+0x16>
 8014306:	f842 3b04 	str.w	r3, [r2], #4
 801430a:	e7f4      	b.n	80142f6 <__copybits+0x1e>

0801430c <__any_on>:
 801430c:	f100 0214 	add.w	r2, r0, #20
 8014310:	6900      	ldr	r0, [r0, #16]
 8014312:	114b      	asrs	r3, r1, #5
 8014314:	4298      	cmp	r0, r3
 8014316:	b510      	push	{r4, lr}
 8014318:	db11      	blt.n	801433e <__any_on+0x32>
 801431a:	dd0a      	ble.n	8014332 <__any_on+0x26>
 801431c:	f011 011f 	ands.w	r1, r1, #31
 8014320:	d007      	beq.n	8014332 <__any_on+0x26>
 8014322:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8014326:	fa24 f001 	lsr.w	r0, r4, r1
 801432a:	fa00 f101 	lsl.w	r1, r0, r1
 801432e:	428c      	cmp	r4, r1
 8014330:	d10b      	bne.n	801434a <__any_on+0x3e>
 8014332:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014336:	4293      	cmp	r3, r2
 8014338:	d803      	bhi.n	8014342 <__any_on+0x36>
 801433a:	2000      	movs	r0, #0
 801433c:	bd10      	pop	{r4, pc}
 801433e:	4603      	mov	r3, r0
 8014340:	e7f7      	b.n	8014332 <__any_on+0x26>
 8014342:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8014346:	2900      	cmp	r1, #0
 8014348:	d0f5      	beq.n	8014336 <__any_on+0x2a>
 801434a:	2001      	movs	r0, #1
 801434c:	e7f6      	b.n	801433c <__any_on+0x30>

0801434e <_calloc_r>:
 801434e:	b538      	push	{r3, r4, r5, lr}
 8014350:	fb02 f401 	mul.w	r4, r2, r1
 8014354:	4621      	mov	r1, r4
 8014356:	f000 f809 	bl	801436c <_malloc_r>
 801435a:	4605      	mov	r5, r0
 801435c:	b118      	cbz	r0, 8014366 <_calloc_r+0x18>
 801435e:	4622      	mov	r2, r4
 8014360:	2100      	movs	r1, #0
 8014362:	f7fe f904 	bl	801256e <memset>
 8014366:	4628      	mov	r0, r5
 8014368:	bd38      	pop	{r3, r4, r5, pc}
	...

0801436c <_malloc_r>:
 801436c:	b570      	push	{r4, r5, r6, lr}
 801436e:	1ccd      	adds	r5, r1, #3
 8014370:	f025 0503 	bic.w	r5, r5, #3
 8014374:	3508      	adds	r5, #8
 8014376:	2d0c      	cmp	r5, #12
 8014378:	bf38      	it	cc
 801437a:	250c      	movcc	r5, #12
 801437c:	2d00      	cmp	r5, #0
 801437e:	4606      	mov	r6, r0
 8014380:	db01      	blt.n	8014386 <_malloc_r+0x1a>
 8014382:	42a9      	cmp	r1, r5
 8014384:	d903      	bls.n	801438e <_malloc_r+0x22>
 8014386:	230c      	movs	r3, #12
 8014388:	6033      	str	r3, [r6, #0]
 801438a:	2000      	movs	r0, #0
 801438c:	bd70      	pop	{r4, r5, r6, pc}
 801438e:	f000 fb66 	bl	8014a5e <__malloc_lock>
 8014392:	4a21      	ldr	r2, [pc, #132]	; (8014418 <_malloc_r+0xac>)
 8014394:	6814      	ldr	r4, [r2, #0]
 8014396:	4621      	mov	r1, r4
 8014398:	b991      	cbnz	r1, 80143c0 <_malloc_r+0x54>
 801439a:	4c20      	ldr	r4, [pc, #128]	; (801441c <_malloc_r+0xb0>)
 801439c:	6823      	ldr	r3, [r4, #0]
 801439e:	b91b      	cbnz	r3, 80143a8 <_malloc_r+0x3c>
 80143a0:	4630      	mov	r0, r6
 80143a2:	f000 fb17 	bl	80149d4 <_sbrk_r>
 80143a6:	6020      	str	r0, [r4, #0]
 80143a8:	4629      	mov	r1, r5
 80143aa:	4630      	mov	r0, r6
 80143ac:	f000 fb12 	bl	80149d4 <_sbrk_r>
 80143b0:	1c43      	adds	r3, r0, #1
 80143b2:	d124      	bne.n	80143fe <_malloc_r+0x92>
 80143b4:	230c      	movs	r3, #12
 80143b6:	6033      	str	r3, [r6, #0]
 80143b8:	4630      	mov	r0, r6
 80143ba:	f000 fb51 	bl	8014a60 <__malloc_unlock>
 80143be:	e7e4      	b.n	801438a <_malloc_r+0x1e>
 80143c0:	680b      	ldr	r3, [r1, #0]
 80143c2:	1b5b      	subs	r3, r3, r5
 80143c4:	d418      	bmi.n	80143f8 <_malloc_r+0x8c>
 80143c6:	2b0b      	cmp	r3, #11
 80143c8:	d90f      	bls.n	80143ea <_malloc_r+0x7e>
 80143ca:	600b      	str	r3, [r1, #0]
 80143cc:	50cd      	str	r5, [r1, r3]
 80143ce:	18cc      	adds	r4, r1, r3
 80143d0:	4630      	mov	r0, r6
 80143d2:	f000 fb45 	bl	8014a60 <__malloc_unlock>
 80143d6:	f104 000b 	add.w	r0, r4, #11
 80143da:	1d23      	adds	r3, r4, #4
 80143dc:	f020 0007 	bic.w	r0, r0, #7
 80143e0:	1ac3      	subs	r3, r0, r3
 80143e2:	d0d3      	beq.n	801438c <_malloc_r+0x20>
 80143e4:	425a      	negs	r2, r3
 80143e6:	50e2      	str	r2, [r4, r3]
 80143e8:	e7d0      	b.n	801438c <_malloc_r+0x20>
 80143ea:	428c      	cmp	r4, r1
 80143ec:	684b      	ldr	r3, [r1, #4]
 80143ee:	bf16      	itet	ne
 80143f0:	6063      	strne	r3, [r4, #4]
 80143f2:	6013      	streq	r3, [r2, #0]
 80143f4:	460c      	movne	r4, r1
 80143f6:	e7eb      	b.n	80143d0 <_malloc_r+0x64>
 80143f8:	460c      	mov	r4, r1
 80143fa:	6849      	ldr	r1, [r1, #4]
 80143fc:	e7cc      	b.n	8014398 <_malloc_r+0x2c>
 80143fe:	1cc4      	adds	r4, r0, #3
 8014400:	f024 0403 	bic.w	r4, r4, #3
 8014404:	42a0      	cmp	r0, r4
 8014406:	d005      	beq.n	8014414 <_malloc_r+0xa8>
 8014408:	1a21      	subs	r1, r4, r0
 801440a:	4630      	mov	r0, r6
 801440c:	f000 fae2 	bl	80149d4 <_sbrk_r>
 8014410:	3001      	adds	r0, #1
 8014412:	d0cf      	beq.n	80143b4 <_malloc_r+0x48>
 8014414:	6025      	str	r5, [r4, #0]
 8014416:	e7db      	b.n	80143d0 <_malloc_r+0x64>
 8014418:	20006854 	.word	0x20006854
 801441c:	20006858 	.word	0x20006858

08014420 <__ssputs_r>:
 8014420:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014424:	688e      	ldr	r6, [r1, #8]
 8014426:	429e      	cmp	r6, r3
 8014428:	4682      	mov	sl, r0
 801442a:	460c      	mov	r4, r1
 801442c:	4690      	mov	r8, r2
 801442e:	4699      	mov	r9, r3
 8014430:	d837      	bhi.n	80144a2 <__ssputs_r+0x82>
 8014432:	898a      	ldrh	r2, [r1, #12]
 8014434:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8014438:	d031      	beq.n	801449e <__ssputs_r+0x7e>
 801443a:	6825      	ldr	r5, [r4, #0]
 801443c:	6909      	ldr	r1, [r1, #16]
 801443e:	1a6f      	subs	r7, r5, r1
 8014440:	6965      	ldr	r5, [r4, #20]
 8014442:	2302      	movs	r3, #2
 8014444:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014448:	fb95 f5f3 	sdiv	r5, r5, r3
 801444c:	f109 0301 	add.w	r3, r9, #1
 8014450:	443b      	add	r3, r7
 8014452:	429d      	cmp	r5, r3
 8014454:	bf38      	it	cc
 8014456:	461d      	movcc	r5, r3
 8014458:	0553      	lsls	r3, r2, #21
 801445a:	d530      	bpl.n	80144be <__ssputs_r+0x9e>
 801445c:	4629      	mov	r1, r5
 801445e:	f7ff ff85 	bl	801436c <_malloc_r>
 8014462:	4606      	mov	r6, r0
 8014464:	b950      	cbnz	r0, 801447c <__ssputs_r+0x5c>
 8014466:	230c      	movs	r3, #12
 8014468:	f8ca 3000 	str.w	r3, [sl]
 801446c:	89a3      	ldrh	r3, [r4, #12]
 801446e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014472:	81a3      	strh	r3, [r4, #12]
 8014474:	f04f 30ff 	mov.w	r0, #4294967295
 8014478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801447c:	463a      	mov	r2, r7
 801447e:	6921      	ldr	r1, [r4, #16]
 8014480:	f7fe f86a 	bl	8012558 <memcpy>
 8014484:	89a3      	ldrh	r3, [r4, #12]
 8014486:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801448a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801448e:	81a3      	strh	r3, [r4, #12]
 8014490:	6126      	str	r6, [r4, #16]
 8014492:	6165      	str	r5, [r4, #20]
 8014494:	443e      	add	r6, r7
 8014496:	1bed      	subs	r5, r5, r7
 8014498:	6026      	str	r6, [r4, #0]
 801449a:	60a5      	str	r5, [r4, #8]
 801449c:	464e      	mov	r6, r9
 801449e:	454e      	cmp	r6, r9
 80144a0:	d900      	bls.n	80144a4 <__ssputs_r+0x84>
 80144a2:	464e      	mov	r6, r9
 80144a4:	4632      	mov	r2, r6
 80144a6:	4641      	mov	r1, r8
 80144a8:	6820      	ldr	r0, [r4, #0]
 80144aa:	f000 fabf 	bl	8014a2c <memmove>
 80144ae:	68a3      	ldr	r3, [r4, #8]
 80144b0:	1b9b      	subs	r3, r3, r6
 80144b2:	60a3      	str	r3, [r4, #8]
 80144b4:	6823      	ldr	r3, [r4, #0]
 80144b6:	441e      	add	r6, r3
 80144b8:	6026      	str	r6, [r4, #0]
 80144ba:	2000      	movs	r0, #0
 80144bc:	e7dc      	b.n	8014478 <__ssputs_r+0x58>
 80144be:	462a      	mov	r2, r5
 80144c0:	f000 fb1e 	bl	8014b00 <_realloc_r>
 80144c4:	4606      	mov	r6, r0
 80144c6:	2800      	cmp	r0, #0
 80144c8:	d1e2      	bne.n	8014490 <__ssputs_r+0x70>
 80144ca:	6921      	ldr	r1, [r4, #16]
 80144cc:	4650      	mov	r0, sl
 80144ce:	f000 fac9 	bl	8014a64 <_free_r>
 80144d2:	e7c8      	b.n	8014466 <__ssputs_r+0x46>

080144d4 <_svfiprintf_r>:
 80144d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80144d8:	461d      	mov	r5, r3
 80144da:	898b      	ldrh	r3, [r1, #12]
 80144dc:	061f      	lsls	r7, r3, #24
 80144de:	b09d      	sub	sp, #116	; 0x74
 80144e0:	4680      	mov	r8, r0
 80144e2:	460c      	mov	r4, r1
 80144e4:	4616      	mov	r6, r2
 80144e6:	d50f      	bpl.n	8014508 <_svfiprintf_r+0x34>
 80144e8:	690b      	ldr	r3, [r1, #16]
 80144ea:	b96b      	cbnz	r3, 8014508 <_svfiprintf_r+0x34>
 80144ec:	2140      	movs	r1, #64	; 0x40
 80144ee:	f7ff ff3d 	bl	801436c <_malloc_r>
 80144f2:	6020      	str	r0, [r4, #0]
 80144f4:	6120      	str	r0, [r4, #16]
 80144f6:	b928      	cbnz	r0, 8014504 <_svfiprintf_r+0x30>
 80144f8:	230c      	movs	r3, #12
 80144fa:	f8c8 3000 	str.w	r3, [r8]
 80144fe:	f04f 30ff 	mov.w	r0, #4294967295
 8014502:	e0c8      	b.n	8014696 <_svfiprintf_r+0x1c2>
 8014504:	2340      	movs	r3, #64	; 0x40
 8014506:	6163      	str	r3, [r4, #20]
 8014508:	2300      	movs	r3, #0
 801450a:	9309      	str	r3, [sp, #36]	; 0x24
 801450c:	2320      	movs	r3, #32
 801450e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014512:	2330      	movs	r3, #48	; 0x30
 8014514:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014518:	9503      	str	r5, [sp, #12]
 801451a:	f04f 0b01 	mov.w	fp, #1
 801451e:	4637      	mov	r7, r6
 8014520:	463d      	mov	r5, r7
 8014522:	f815 3b01 	ldrb.w	r3, [r5], #1
 8014526:	b10b      	cbz	r3, 801452c <_svfiprintf_r+0x58>
 8014528:	2b25      	cmp	r3, #37	; 0x25
 801452a:	d13e      	bne.n	80145aa <_svfiprintf_r+0xd6>
 801452c:	ebb7 0a06 	subs.w	sl, r7, r6
 8014530:	d00b      	beq.n	801454a <_svfiprintf_r+0x76>
 8014532:	4653      	mov	r3, sl
 8014534:	4632      	mov	r2, r6
 8014536:	4621      	mov	r1, r4
 8014538:	4640      	mov	r0, r8
 801453a:	f7ff ff71 	bl	8014420 <__ssputs_r>
 801453e:	3001      	adds	r0, #1
 8014540:	f000 80a4 	beq.w	801468c <_svfiprintf_r+0x1b8>
 8014544:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014546:	4453      	add	r3, sl
 8014548:	9309      	str	r3, [sp, #36]	; 0x24
 801454a:	783b      	ldrb	r3, [r7, #0]
 801454c:	2b00      	cmp	r3, #0
 801454e:	f000 809d 	beq.w	801468c <_svfiprintf_r+0x1b8>
 8014552:	2300      	movs	r3, #0
 8014554:	f04f 32ff 	mov.w	r2, #4294967295
 8014558:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801455c:	9304      	str	r3, [sp, #16]
 801455e:	9307      	str	r3, [sp, #28]
 8014560:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014564:	931a      	str	r3, [sp, #104]	; 0x68
 8014566:	462f      	mov	r7, r5
 8014568:	2205      	movs	r2, #5
 801456a:	f817 1b01 	ldrb.w	r1, [r7], #1
 801456e:	4850      	ldr	r0, [pc, #320]	; (80146b0 <_svfiprintf_r+0x1dc>)
 8014570:	f7eb fe46 	bl	8000200 <memchr>
 8014574:	9b04      	ldr	r3, [sp, #16]
 8014576:	b9d0      	cbnz	r0, 80145ae <_svfiprintf_r+0xda>
 8014578:	06d9      	lsls	r1, r3, #27
 801457a:	bf44      	itt	mi
 801457c:	2220      	movmi	r2, #32
 801457e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8014582:	071a      	lsls	r2, r3, #28
 8014584:	bf44      	itt	mi
 8014586:	222b      	movmi	r2, #43	; 0x2b
 8014588:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801458c:	782a      	ldrb	r2, [r5, #0]
 801458e:	2a2a      	cmp	r2, #42	; 0x2a
 8014590:	d015      	beq.n	80145be <_svfiprintf_r+0xea>
 8014592:	9a07      	ldr	r2, [sp, #28]
 8014594:	462f      	mov	r7, r5
 8014596:	2000      	movs	r0, #0
 8014598:	250a      	movs	r5, #10
 801459a:	4639      	mov	r1, r7
 801459c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80145a0:	3b30      	subs	r3, #48	; 0x30
 80145a2:	2b09      	cmp	r3, #9
 80145a4:	d94d      	bls.n	8014642 <_svfiprintf_r+0x16e>
 80145a6:	b1b8      	cbz	r0, 80145d8 <_svfiprintf_r+0x104>
 80145a8:	e00f      	b.n	80145ca <_svfiprintf_r+0xf6>
 80145aa:	462f      	mov	r7, r5
 80145ac:	e7b8      	b.n	8014520 <_svfiprintf_r+0x4c>
 80145ae:	4a40      	ldr	r2, [pc, #256]	; (80146b0 <_svfiprintf_r+0x1dc>)
 80145b0:	1a80      	subs	r0, r0, r2
 80145b2:	fa0b f000 	lsl.w	r0, fp, r0
 80145b6:	4318      	orrs	r0, r3
 80145b8:	9004      	str	r0, [sp, #16]
 80145ba:	463d      	mov	r5, r7
 80145bc:	e7d3      	b.n	8014566 <_svfiprintf_r+0x92>
 80145be:	9a03      	ldr	r2, [sp, #12]
 80145c0:	1d11      	adds	r1, r2, #4
 80145c2:	6812      	ldr	r2, [r2, #0]
 80145c4:	9103      	str	r1, [sp, #12]
 80145c6:	2a00      	cmp	r2, #0
 80145c8:	db01      	blt.n	80145ce <_svfiprintf_r+0xfa>
 80145ca:	9207      	str	r2, [sp, #28]
 80145cc:	e004      	b.n	80145d8 <_svfiprintf_r+0x104>
 80145ce:	4252      	negs	r2, r2
 80145d0:	f043 0302 	orr.w	r3, r3, #2
 80145d4:	9207      	str	r2, [sp, #28]
 80145d6:	9304      	str	r3, [sp, #16]
 80145d8:	783b      	ldrb	r3, [r7, #0]
 80145da:	2b2e      	cmp	r3, #46	; 0x2e
 80145dc:	d10c      	bne.n	80145f8 <_svfiprintf_r+0x124>
 80145de:	787b      	ldrb	r3, [r7, #1]
 80145e0:	2b2a      	cmp	r3, #42	; 0x2a
 80145e2:	d133      	bne.n	801464c <_svfiprintf_r+0x178>
 80145e4:	9b03      	ldr	r3, [sp, #12]
 80145e6:	1d1a      	adds	r2, r3, #4
 80145e8:	681b      	ldr	r3, [r3, #0]
 80145ea:	9203      	str	r2, [sp, #12]
 80145ec:	2b00      	cmp	r3, #0
 80145ee:	bfb8      	it	lt
 80145f0:	f04f 33ff 	movlt.w	r3, #4294967295
 80145f4:	3702      	adds	r7, #2
 80145f6:	9305      	str	r3, [sp, #20]
 80145f8:	4d2e      	ldr	r5, [pc, #184]	; (80146b4 <_svfiprintf_r+0x1e0>)
 80145fa:	7839      	ldrb	r1, [r7, #0]
 80145fc:	2203      	movs	r2, #3
 80145fe:	4628      	mov	r0, r5
 8014600:	f7eb fdfe 	bl	8000200 <memchr>
 8014604:	b138      	cbz	r0, 8014616 <_svfiprintf_r+0x142>
 8014606:	2340      	movs	r3, #64	; 0x40
 8014608:	1b40      	subs	r0, r0, r5
 801460a:	fa03 f000 	lsl.w	r0, r3, r0
 801460e:	9b04      	ldr	r3, [sp, #16]
 8014610:	4303      	orrs	r3, r0
 8014612:	3701      	adds	r7, #1
 8014614:	9304      	str	r3, [sp, #16]
 8014616:	7839      	ldrb	r1, [r7, #0]
 8014618:	4827      	ldr	r0, [pc, #156]	; (80146b8 <_svfiprintf_r+0x1e4>)
 801461a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801461e:	2206      	movs	r2, #6
 8014620:	1c7e      	adds	r6, r7, #1
 8014622:	f7eb fded 	bl	8000200 <memchr>
 8014626:	2800      	cmp	r0, #0
 8014628:	d038      	beq.n	801469c <_svfiprintf_r+0x1c8>
 801462a:	4b24      	ldr	r3, [pc, #144]	; (80146bc <_svfiprintf_r+0x1e8>)
 801462c:	bb13      	cbnz	r3, 8014674 <_svfiprintf_r+0x1a0>
 801462e:	9b03      	ldr	r3, [sp, #12]
 8014630:	3307      	adds	r3, #7
 8014632:	f023 0307 	bic.w	r3, r3, #7
 8014636:	3308      	adds	r3, #8
 8014638:	9303      	str	r3, [sp, #12]
 801463a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801463c:	444b      	add	r3, r9
 801463e:	9309      	str	r3, [sp, #36]	; 0x24
 8014640:	e76d      	b.n	801451e <_svfiprintf_r+0x4a>
 8014642:	fb05 3202 	mla	r2, r5, r2, r3
 8014646:	2001      	movs	r0, #1
 8014648:	460f      	mov	r7, r1
 801464a:	e7a6      	b.n	801459a <_svfiprintf_r+0xc6>
 801464c:	2300      	movs	r3, #0
 801464e:	3701      	adds	r7, #1
 8014650:	9305      	str	r3, [sp, #20]
 8014652:	4619      	mov	r1, r3
 8014654:	250a      	movs	r5, #10
 8014656:	4638      	mov	r0, r7
 8014658:	f810 2b01 	ldrb.w	r2, [r0], #1
 801465c:	3a30      	subs	r2, #48	; 0x30
 801465e:	2a09      	cmp	r2, #9
 8014660:	d903      	bls.n	801466a <_svfiprintf_r+0x196>
 8014662:	2b00      	cmp	r3, #0
 8014664:	d0c8      	beq.n	80145f8 <_svfiprintf_r+0x124>
 8014666:	9105      	str	r1, [sp, #20]
 8014668:	e7c6      	b.n	80145f8 <_svfiprintf_r+0x124>
 801466a:	fb05 2101 	mla	r1, r5, r1, r2
 801466e:	2301      	movs	r3, #1
 8014670:	4607      	mov	r7, r0
 8014672:	e7f0      	b.n	8014656 <_svfiprintf_r+0x182>
 8014674:	ab03      	add	r3, sp, #12
 8014676:	9300      	str	r3, [sp, #0]
 8014678:	4622      	mov	r2, r4
 801467a:	4b11      	ldr	r3, [pc, #68]	; (80146c0 <_svfiprintf_r+0x1ec>)
 801467c:	a904      	add	r1, sp, #16
 801467e:	4640      	mov	r0, r8
 8014680:	f3af 8000 	nop.w
 8014684:	f1b0 3fff 	cmp.w	r0, #4294967295
 8014688:	4681      	mov	r9, r0
 801468a:	d1d6      	bne.n	801463a <_svfiprintf_r+0x166>
 801468c:	89a3      	ldrh	r3, [r4, #12]
 801468e:	065b      	lsls	r3, r3, #25
 8014690:	f53f af35 	bmi.w	80144fe <_svfiprintf_r+0x2a>
 8014694:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014696:	b01d      	add	sp, #116	; 0x74
 8014698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801469c:	ab03      	add	r3, sp, #12
 801469e:	9300      	str	r3, [sp, #0]
 80146a0:	4622      	mov	r2, r4
 80146a2:	4b07      	ldr	r3, [pc, #28]	; (80146c0 <_svfiprintf_r+0x1ec>)
 80146a4:	a904      	add	r1, sp, #16
 80146a6:	4640      	mov	r0, r8
 80146a8:	f000 f882 	bl	80147b0 <_printf_i>
 80146ac:	e7ea      	b.n	8014684 <_svfiprintf_r+0x1b0>
 80146ae:	bf00      	nop
 80146b0:	0802874c 	.word	0x0802874c
 80146b4:	08028752 	.word	0x08028752
 80146b8:	08028756 	.word	0x08028756
 80146bc:	00000000 	.word	0x00000000
 80146c0:	08014421 	.word	0x08014421

080146c4 <_printf_common>:
 80146c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80146c8:	4691      	mov	r9, r2
 80146ca:	461f      	mov	r7, r3
 80146cc:	688a      	ldr	r2, [r1, #8]
 80146ce:	690b      	ldr	r3, [r1, #16]
 80146d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80146d4:	4293      	cmp	r3, r2
 80146d6:	bfb8      	it	lt
 80146d8:	4613      	movlt	r3, r2
 80146da:	f8c9 3000 	str.w	r3, [r9]
 80146de:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80146e2:	4606      	mov	r6, r0
 80146e4:	460c      	mov	r4, r1
 80146e6:	b112      	cbz	r2, 80146ee <_printf_common+0x2a>
 80146e8:	3301      	adds	r3, #1
 80146ea:	f8c9 3000 	str.w	r3, [r9]
 80146ee:	6823      	ldr	r3, [r4, #0]
 80146f0:	0699      	lsls	r1, r3, #26
 80146f2:	bf42      	ittt	mi
 80146f4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80146f8:	3302      	addmi	r3, #2
 80146fa:	f8c9 3000 	strmi.w	r3, [r9]
 80146fe:	6825      	ldr	r5, [r4, #0]
 8014700:	f015 0506 	ands.w	r5, r5, #6
 8014704:	d107      	bne.n	8014716 <_printf_common+0x52>
 8014706:	f104 0a19 	add.w	sl, r4, #25
 801470a:	68e3      	ldr	r3, [r4, #12]
 801470c:	f8d9 2000 	ldr.w	r2, [r9]
 8014710:	1a9b      	subs	r3, r3, r2
 8014712:	42ab      	cmp	r3, r5
 8014714:	dc28      	bgt.n	8014768 <_printf_common+0xa4>
 8014716:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801471a:	6822      	ldr	r2, [r4, #0]
 801471c:	3300      	adds	r3, #0
 801471e:	bf18      	it	ne
 8014720:	2301      	movne	r3, #1
 8014722:	0692      	lsls	r2, r2, #26
 8014724:	d42d      	bmi.n	8014782 <_printf_common+0xbe>
 8014726:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801472a:	4639      	mov	r1, r7
 801472c:	4630      	mov	r0, r6
 801472e:	47c0      	blx	r8
 8014730:	3001      	adds	r0, #1
 8014732:	d020      	beq.n	8014776 <_printf_common+0xb2>
 8014734:	6823      	ldr	r3, [r4, #0]
 8014736:	68e5      	ldr	r5, [r4, #12]
 8014738:	f8d9 2000 	ldr.w	r2, [r9]
 801473c:	f003 0306 	and.w	r3, r3, #6
 8014740:	2b04      	cmp	r3, #4
 8014742:	bf08      	it	eq
 8014744:	1aad      	subeq	r5, r5, r2
 8014746:	68a3      	ldr	r3, [r4, #8]
 8014748:	6922      	ldr	r2, [r4, #16]
 801474a:	bf0c      	ite	eq
 801474c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014750:	2500      	movne	r5, #0
 8014752:	4293      	cmp	r3, r2
 8014754:	bfc4      	itt	gt
 8014756:	1a9b      	subgt	r3, r3, r2
 8014758:	18ed      	addgt	r5, r5, r3
 801475a:	f04f 0900 	mov.w	r9, #0
 801475e:	341a      	adds	r4, #26
 8014760:	454d      	cmp	r5, r9
 8014762:	d11a      	bne.n	801479a <_printf_common+0xd6>
 8014764:	2000      	movs	r0, #0
 8014766:	e008      	b.n	801477a <_printf_common+0xb6>
 8014768:	2301      	movs	r3, #1
 801476a:	4652      	mov	r2, sl
 801476c:	4639      	mov	r1, r7
 801476e:	4630      	mov	r0, r6
 8014770:	47c0      	blx	r8
 8014772:	3001      	adds	r0, #1
 8014774:	d103      	bne.n	801477e <_printf_common+0xba>
 8014776:	f04f 30ff 	mov.w	r0, #4294967295
 801477a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801477e:	3501      	adds	r5, #1
 8014780:	e7c3      	b.n	801470a <_printf_common+0x46>
 8014782:	18e1      	adds	r1, r4, r3
 8014784:	1c5a      	adds	r2, r3, #1
 8014786:	2030      	movs	r0, #48	; 0x30
 8014788:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801478c:	4422      	add	r2, r4
 801478e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014792:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014796:	3302      	adds	r3, #2
 8014798:	e7c5      	b.n	8014726 <_printf_common+0x62>
 801479a:	2301      	movs	r3, #1
 801479c:	4622      	mov	r2, r4
 801479e:	4639      	mov	r1, r7
 80147a0:	4630      	mov	r0, r6
 80147a2:	47c0      	blx	r8
 80147a4:	3001      	adds	r0, #1
 80147a6:	d0e6      	beq.n	8014776 <_printf_common+0xb2>
 80147a8:	f109 0901 	add.w	r9, r9, #1
 80147ac:	e7d8      	b.n	8014760 <_printf_common+0x9c>
	...

080147b0 <_printf_i>:
 80147b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80147b4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80147b8:	460c      	mov	r4, r1
 80147ba:	7e09      	ldrb	r1, [r1, #24]
 80147bc:	b085      	sub	sp, #20
 80147be:	296e      	cmp	r1, #110	; 0x6e
 80147c0:	4617      	mov	r7, r2
 80147c2:	4606      	mov	r6, r0
 80147c4:	4698      	mov	r8, r3
 80147c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80147c8:	f000 80b3 	beq.w	8014932 <_printf_i+0x182>
 80147cc:	d822      	bhi.n	8014814 <_printf_i+0x64>
 80147ce:	2963      	cmp	r1, #99	; 0x63
 80147d0:	d036      	beq.n	8014840 <_printf_i+0x90>
 80147d2:	d80a      	bhi.n	80147ea <_printf_i+0x3a>
 80147d4:	2900      	cmp	r1, #0
 80147d6:	f000 80b9 	beq.w	801494c <_printf_i+0x19c>
 80147da:	2958      	cmp	r1, #88	; 0x58
 80147dc:	f000 8083 	beq.w	80148e6 <_printf_i+0x136>
 80147e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80147e4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80147e8:	e032      	b.n	8014850 <_printf_i+0xa0>
 80147ea:	2964      	cmp	r1, #100	; 0x64
 80147ec:	d001      	beq.n	80147f2 <_printf_i+0x42>
 80147ee:	2969      	cmp	r1, #105	; 0x69
 80147f0:	d1f6      	bne.n	80147e0 <_printf_i+0x30>
 80147f2:	6820      	ldr	r0, [r4, #0]
 80147f4:	6813      	ldr	r3, [r2, #0]
 80147f6:	0605      	lsls	r5, r0, #24
 80147f8:	f103 0104 	add.w	r1, r3, #4
 80147fc:	d52a      	bpl.n	8014854 <_printf_i+0xa4>
 80147fe:	681b      	ldr	r3, [r3, #0]
 8014800:	6011      	str	r1, [r2, #0]
 8014802:	2b00      	cmp	r3, #0
 8014804:	da03      	bge.n	801480e <_printf_i+0x5e>
 8014806:	222d      	movs	r2, #45	; 0x2d
 8014808:	425b      	negs	r3, r3
 801480a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801480e:	486f      	ldr	r0, [pc, #444]	; (80149cc <_printf_i+0x21c>)
 8014810:	220a      	movs	r2, #10
 8014812:	e039      	b.n	8014888 <_printf_i+0xd8>
 8014814:	2973      	cmp	r1, #115	; 0x73
 8014816:	f000 809d 	beq.w	8014954 <_printf_i+0x1a4>
 801481a:	d808      	bhi.n	801482e <_printf_i+0x7e>
 801481c:	296f      	cmp	r1, #111	; 0x6f
 801481e:	d020      	beq.n	8014862 <_printf_i+0xb2>
 8014820:	2970      	cmp	r1, #112	; 0x70
 8014822:	d1dd      	bne.n	80147e0 <_printf_i+0x30>
 8014824:	6823      	ldr	r3, [r4, #0]
 8014826:	f043 0320 	orr.w	r3, r3, #32
 801482a:	6023      	str	r3, [r4, #0]
 801482c:	e003      	b.n	8014836 <_printf_i+0x86>
 801482e:	2975      	cmp	r1, #117	; 0x75
 8014830:	d017      	beq.n	8014862 <_printf_i+0xb2>
 8014832:	2978      	cmp	r1, #120	; 0x78
 8014834:	d1d4      	bne.n	80147e0 <_printf_i+0x30>
 8014836:	2378      	movs	r3, #120	; 0x78
 8014838:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801483c:	4864      	ldr	r0, [pc, #400]	; (80149d0 <_printf_i+0x220>)
 801483e:	e055      	b.n	80148ec <_printf_i+0x13c>
 8014840:	6813      	ldr	r3, [r2, #0]
 8014842:	1d19      	adds	r1, r3, #4
 8014844:	681b      	ldr	r3, [r3, #0]
 8014846:	6011      	str	r1, [r2, #0]
 8014848:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801484c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014850:	2301      	movs	r3, #1
 8014852:	e08c      	b.n	801496e <_printf_i+0x1be>
 8014854:	681b      	ldr	r3, [r3, #0]
 8014856:	6011      	str	r1, [r2, #0]
 8014858:	f010 0f40 	tst.w	r0, #64	; 0x40
 801485c:	bf18      	it	ne
 801485e:	b21b      	sxthne	r3, r3
 8014860:	e7cf      	b.n	8014802 <_printf_i+0x52>
 8014862:	6813      	ldr	r3, [r2, #0]
 8014864:	6825      	ldr	r5, [r4, #0]
 8014866:	1d18      	adds	r0, r3, #4
 8014868:	6010      	str	r0, [r2, #0]
 801486a:	0628      	lsls	r0, r5, #24
 801486c:	d501      	bpl.n	8014872 <_printf_i+0xc2>
 801486e:	681b      	ldr	r3, [r3, #0]
 8014870:	e002      	b.n	8014878 <_printf_i+0xc8>
 8014872:	0668      	lsls	r0, r5, #25
 8014874:	d5fb      	bpl.n	801486e <_printf_i+0xbe>
 8014876:	881b      	ldrh	r3, [r3, #0]
 8014878:	4854      	ldr	r0, [pc, #336]	; (80149cc <_printf_i+0x21c>)
 801487a:	296f      	cmp	r1, #111	; 0x6f
 801487c:	bf14      	ite	ne
 801487e:	220a      	movne	r2, #10
 8014880:	2208      	moveq	r2, #8
 8014882:	2100      	movs	r1, #0
 8014884:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8014888:	6865      	ldr	r5, [r4, #4]
 801488a:	60a5      	str	r5, [r4, #8]
 801488c:	2d00      	cmp	r5, #0
 801488e:	f2c0 8095 	blt.w	80149bc <_printf_i+0x20c>
 8014892:	6821      	ldr	r1, [r4, #0]
 8014894:	f021 0104 	bic.w	r1, r1, #4
 8014898:	6021      	str	r1, [r4, #0]
 801489a:	2b00      	cmp	r3, #0
 801489c:	d13d      	bne.n	801491a <_printf_i+0x16a>
 801489e:	2d00      	cmp	r5, #0
 80148a0:	f040 808e 	bne.w	80149c0 <_printf_i+0x210>
 80148a4:	4665      	mov	r5, ip
 80148a6:	2a08      	cmp	r2, #8
 80148a8:	d10b      	bne.n	80148c2 <_printf_i+0x112>
 80148aa:	6823      	ldr	r3, [r4, #0]
 80148ac:	07db      	lsls	r3, r3, #31
 80148ae:	d508      	bpl.n	80148c2 <_printf_i+0x112>
 80148b0:	6923      	ldr	r3, [r4, #16]
 80148b2:	6862      	ldr	r2, [r4, #4]
 80148b4:	429a      	cmp	r2, r3
 80148b6:	bfde      	ittt	le
 80148b8:	2330      	movle	r3, #48	; 0x30
 80148ba:	f805 3c01 	strble.w	r3, [r5, #-1]
 80148be:	f105 35ff 	addle.w	r5, r5, #4294967295
 80148c2:	ebac 0305 	sub.w	r3, ip, r5
 80148c6:	6123      	str	r3, [r4, #16]
 80148c8:	f8cd 8000 	str.w	r8, [sp]
 80148cc:	463b      	mov	r3, r7
 80148ce:	aa03      	add	r2, sp, #12
 80148d0:	4621      	mov	r1, r4
 80148d2:	4630      	mov	r0, r6
 80148d4:	f7ff fef6 	bl	80146c4 <_printf_common>
 80148d8:	3001      	adds	r0, #1
 80148da:	d14d      	bne.n	8014978 <_printf_i+0x1c8>
 80148dc:	f04f 30ff 	mov.w	r0, #4294967295
 80148e0:	b005      	add	sp, #20
 80148e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80148e6:	4839      	ldr	r0, [pc, #228]	; (80149cc <_printf_i+0x21c>)
 80148e8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80148ec:	6813      	ldr	r3, [r2, #0]
 80148ee:	6821      	ldr	r1, [r4, #0]
 80148f0:	1d1d      	adds	r5, r3, #4
 80148f2:	681b      	ldr	r3, [r3, #0]
 80148f4:	6015      	str	r5, [r2, #0]
 80148f6:	060a      	lsls	r2, r1, #24
 80148f8:	d50b      	bpl.n	8014912 <_printf_i+0x162>
 80148fa:	07ca      	lsls	r2, r1, #31
 80148fc:	bf44      	itt	mi
 80148fe:	f041 0120 	orrmi.w	r1, r1, #32
 8014902:	6021      	strmi	r1, [r4, #0]
 8014904:	b91b      	cbnz	r3, 801490e <_printf_i+0x15e>
 8014906:	6822      	ldr	r2, [r4, #0]
 8014908:	f022 0220 	bic.w	r2, r2, #32
 801490c:	6022      	str	r2, [r4, #0]
 801490e:	2210      	movs	r2, #16
 8014910:	e7b7      	b.n	8014882 <_printf_i+0xd2>
 8014912:	064d      	lsls	r5, r1, #25
 8014914:	bf48      	it	mi
 8014916:	b29b      	uxthmi	r3, r3
 8014918:	e7ef      	b.n	80148fa <_printf_i+0x14a>
 801491a:	4665      	mov	r5, ip
 801491c:	fbb3 f1f2 	udiv	r1, r3, r2
 8014920:	fb02 3311 	mls	r3, r2, r1, r3
 8014924:	5cc3      	ldrb	r3, [r0, r3]
 8014926:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801492a:	460b      	mov	r3, r1
 801492c:	2900      	cmp	r1, #0
 801492e:	d1f5      	bne.n	801491c <_printf_i+0x16c>
 8014930:	e7b9      	b.n	80148a6 <_printf_i+0xf6>
 8014932:	6813      	ldr	r3, [r2, #0]
 8014934:	6825      	ldr	r5, [r4, #0]
 8014936:	6961      	ldr	r1, [r4, #20]
 8014938:	1d18      	adds	r0, r3, #4
 801493a:	6010      	str	r0, [r2, #0]
 801493c:	0628      	lsls	r0, r5, #24
 801493e:	681b      	ldr	r3, [r3, #0]
 8014940:	d501      	bpl.n	8014946 <_printf_i+0x196>
 8014942:	6019      	str	r1, [r3, #0]
 8014944:	e002      	b.n	801494c <_printf_i+0x19c>
 8014946:	066a      	lsls	r2, r5, #25
 8014948:	d5fb      	bpl.n	8014942 <_printf_i+0x192>
 801494a:	8019      	strh	r1, [r3, #0]
 801494c:	2300      	movs	r3, #0
 801494e:	6123      	str	r3, [r4, #16]
 8014950:	4665      	mov	r5, ip
 8014952:	e7b9      	b.n	80148c8 <_printf_i+0x118>
 8014954:	6813      	ldr	r3, [r2, #0]
 8014956:	1d19      	adds	r1, r3, #4
 8014958:	6011      	str	r1, [r2, #0]
 801495a:	681d      	ldr	r5, [r3, #0]
 801495c:	6862      	ldr	r2, [r4, #4]
 801495e:	2100      	movs	r1, #0
 8014960:	4628      	mov	r0, r5
 8014962:	f7eb fc4d 	bl	8000200 <memchr>
 8014966:	b108      	cbz	r0, 801496c <_printf_i+0x1bc>
 8014968:	1b40      	subs	r0, r0, r5
 801496a:	6060      	str	r0, [r4, #4]
 801496c:	6863      	ldr	r3, [r4, #4]
 801496e:	6123      	str	r3, [r4, #16]
 8014970:	2300      	movs	r3, #0
 8014972:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014976:	e7a7      	b.n	80148c8 <_printf_i+0x118>
 8014978:	6923      	ldr	r3, [r4, #16]
 801497a:	462a      	mov	r2, r5
 801497c:	4639      	mov	r1, r7
 801497e:	4630      	mov	r0, r6
 8014980:	47c0      	blx	r8
 8014982:	3001      	adds	r0, #1
 8014984:	d0aa      	beq.n	80148dc <_printf_i+0x12c>
 8014986:	6823      	ldr	r3, [r4, #0]
 8014988:	079b      	lsls	r3, r3, #30
 801498a:	d413      	bmi.n	80149b4 <_printf_i+0x204>
 801498c:	68e0      	ldr	r0, [r4, #12]
 801498e:	9b03      	ldr	r3, [sp, #12]
 8014990:	4298      	cmp	r0, r3
 8014992:	bfb8      	it	lt
 8014994:	4618      	movlt	r0, r3
 8014996:	e7a3      	b.n	80148e0 <_printf_i+0x130>
 8014998:	2301      	movs	r3, #1
 801499a:	464a      	mov	r2, r9
 801499c:	4639      	mov	r1, r7
 801499e:	4630      	mov	r0, r6
 80149a0:	47c0      	blx	r8
 80149a2:	3001      	adds	r0, #1
 80149a4:	d09a      	beq.n	80148dc <_printf_i+0x12c>
 80149a6:	3501      	adds	r5, #1
 80149a8:	68e3      	ldr	r3, [r4, #12]
 80149aa:	9a03      	ldr	r2, [sp, #12]
 80149ac:	1a9b      	subs	r3, r3, r2
 80149ae:	42ab      	cmp	r3, r5
 80149b0:	dcf2      	bgt.n	8014998 <_printf_i+0x1e8>
 80149b2:	e7eb      	b.n	801498c <_printf_i+0x1dc>
 80149b4:	2500      	movs	r5, #0
 80149b6:	f104 0919 	add.w	r9, r4, #25
 80149ba:	e7f5      	b.n	80149a8 <_printf_i+0x1f8>
 80149bc:	2b00      	cmp	r3, #0
 80149be:	d1ac      	bne.n	801491a <_printf_i+0x16a>
 80149c0:	7803      	ldrb	r3, [r0, #0]
 80149c2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80149c6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80149ca:	e76c      	b.n	80148a6 <_printf_i+0xf6>
 80149cc:	0802875d 	.word	0x0802875d
 80149d0:	0802876e 	.word	0x0802876e

080149d4 <_sbrk_r>:
 80149d4:	b538      	push	{r3, r4, r5, lr}
 80149d6:	4c06      	ldr	r4, [pc, #24]	; (80149f0 <_sbrk_r+0x1c>)
 80149d8:	2300      	movs	r3, #0
 80149da:	4605      	mov	r5, r0
 80149dc:	4608      	mov	r0, r1
 80149de:	6023      	str	r3, [r4, #0]
 80149e0:	f7fd fce6 	bl	80123b0 <_sbrk>
 80149e4:	1c43      	adds	r3, r0, #1
 80149e6:	d102      	bne.n	80149ee <_sbrk_r+0x1a>
 80149e8:	6823      	ldr	r3, [r4, #0]
 80149ea:	b103      	cbz	r3, 80149ee <_sbrk_r+0x1a>
 80149ec:	602b      	str	r3, [r5, #0]
 80149ee:	bd38      	pop	{r3, r4, r5, pc}
 80149f0:	200086c4 	.word	0x200086c4

080149f4 <nanf>:
 80149f4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80149fc <nanf+0x8>
 80149f8:	4770      	bx	lr
 80149fa:	bf00      	nop
 80149fc:	7fc00000 	.word	0x7fc00000

08014a00 <__ascii_wctomb>:
 8014a00:	b149      	cbz	r1, 8014a16 <__ascii_wctomb+0x16>
 8014a02:	2aff      	cmp	r2, #255	; 0xff
 8014a04:	bf85      	ittet	hi
 8014a06:	238a      	movhi	r3, #138	; 0x8a
 8014a08:	6003      	strhi	r3, [r0, #0]
 8014a0a:	700a      	strbls	r2, [r1, #0]
 8014a0c:	f04f 30ff 	movhi.w	r0, #4294967295
 8014a10:	bf98      	it	ls
 8014a12:	2001      	movls	r0, #1
 8014a14:	4770      	bx	lr
 8014a16:	4608      	mov	r0, r1
 8014a18:	4770      	bx	lr
	...

08014a1c <malloc>:
 8014a1c:	4b02      	ldr	r3, [pc, #8]	; (8014a28 <malloc+0xc>)
 8014a1e:	4601      	mov	r1, r0
 8014a20:	6818      	ldr	r0, [r3, #0]
 8014a22:	f7ff bca3 	b.w	801436c <_malloc_r>
 8014a26:	bf00      	nop
 8014a28:	20000050 	.word	0x20000050

08014a2c <memmove>:
 8014a2c:	4288      	cmp	r0, r1
 8014a2e:	b510      	push	{r4, lr}
 8014a30:	eb01 0302 	add.w	r3, r1, r2
 8014a34:	d807      	bhi.n	8014a46 <memmove+0x1a>
 8014a36:	1e42      	subs	r2, r0, #1
 8014a38:	4299      	cmp	r1, r3
 8014a3a:	d00a      	beq.n	8014a52 <memmove+0x26>
 8014a3c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014a40:	f802 4f01 	strb.w	r4, [r2, #1]!
 8014a44:	e7f8      	b.n	8014a38 <memmove+0xc>
 8014a46:	4283      	cmp	r3, r0
 8014a48:	d9f5      	bls.n	8014a36 <memmove+0xa>
 8014a4a:	1881      	adds	r1, r0, r2
 8014a4c:	1ad2      	subs	r2, r2, r3
 8014a4e:	42d3      	cmn	r3, r2
 8014a50:	d100      	bne.n	8014a54 <memmove+0x28>
 8014a52:	bd10      	pop	{r4, pc}
 8014a54:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014a58:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8014a5c:	e7f7      	b.n	8014a4e <memmove+0x22>

08014a5e <__malloc_lock>:
 8014a5e:	4770      	bx	lr

08014a60 <__malloc_unlock>:
 8014a60:	4770      	bx	lr
	...

08014a64 <_free_r>:
 8014a64:	b538      	push	{r3, r4, r5, lr}
 8014a66:	4605      	mov	r5, r0
 8014a68:	2900      	cmp	r1, #0
 8014a6a:	d045      	beq.n	8014af8 <_free_r+0x94>
 8014a6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014a70:	1f0c      	subs	r4, r1, #4
 8014a72:	2b00      	cmp	r3, #0
 8014a74:	bfb8      	it	lt
 8014a76:	18e4      	addlt	r4, r4, r3
 8014a78:	f7ff fff1 	bl	8014a5e <__malloc_lock>
 8014a7c:	4a1f      	ldr	r2, [pc, #124]	; (8014afc <_free_r+0x98>)
 8014a7e:	6813      	ldr	r3, [r2, #0]
 8014a80:	4610      	mov	r0, r2
 8014a82:	b933      	cbnz	r3, 8014a92 <_free_r+0x2e>
 8014a84:	6063      	str	r3, [r4, #4]
 8014a86:	6014      	str	r4, [r2, #0]
 8014a88:	4628      	mov	r0, r5
 8014a8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014a8e:	f7ff bfe7 	b.w	8014a60 <__malloc_unlock>
 8014a92:	42a3      	cmp	r3, r4
 8014a94:	d90c      	bls.n	8014ab0 <_free_r+0x4c>
 8014a96:	6821      	ldr	r1, [r4, #0]
 8014a98:	1862      	adds	r2, r4, r1
 8014a9a:	4293      	cmp	r3, r2
 8014a9c:	bf04      	itt	eq
 8014a9e:	681a      	ldreq	r2, [r3, #0]
 8014aa0:	685b      	ldreq	r3, [r3, #4]
 8014aa2:	6063      	str	r3, [r4, #4]
 8014aa4:	bf04      	itt	eq
 8014aa6:	1852      	addeq	r2, r2, r1
 8014aa8:	6022      	streq	r2, [r4, #0]
 8014aaa:	6004      	str	r4, [r0, #0]
 8014aac:	e7ec      	b.n	8014a88 <_free_r+0x24>
 8014aae:	4613      	mov	r3, r2
 8014ab0:	685a      	ldr	r2, [r3, #4]
 8014ab2:	b10a      	cbz	r2, 8014ab8 <_free_r+0x54>
 8014ab4:	42a2      	cmp	r2, r4
 8014ab6:	d9fa      	bls.n	8014aae <_free_r+0x4a>
 8014ab8:	6819      	ldr	r1, [r3, #0]
 8014aba:	1858      	adds	r0, r3, r1
 8014abc:	42a0      	cmp	r0, r4
 8014abe:	d10b      	bne.n	8014ad8 <_free_r+0x74>
 8014ac0:	6820      	ldr	r0, [r4, #0]
 8014ac2:	4401      	add	r1, r0
 8014ac4:	1858      	adds	r0, r3, r1
 8014ac6:	4282      	cmp	r2, r0
 8014ac8:	6019      	str	r1, [r3, #0]
 8014aca:	d1dd      	bne.n	8014a88 <_free_r+0x24>
 8014acc:	6810      	ldr	r0, [r2, #0]
 8014ace:	6852      	ldr	r2, [r2, #4]
 8014ad0:	605a      	str	r2, [r3, #4]
 8014ad2:	4401      	add	r1, r0
 8014ad4:	6019      	str	r1, [r3, #0]
 8014ad6:	e7d7      	b.n	8014a88 <_free_r+0x24>
 8014ad8:	d902      	bls.n	8014ae0 <_free_r+0x7c>
 8014ada:	230c      	movs	r3, #12
 8014adc:	602b      	str	r3, [r5, #0]
 8014ade:	e7d3      	b.n	8014a88 <_free_r+0x24>
 8014ae0:	6820      	ldr	r0, [r4, #0]
 8014ae2:	1821      	adds	r1, r4, r0
 8014ae4:	428a      	cmp	r2, r1
 8014ae6:	bf04      	itt	eq
 8014ae8:	6811      	ldreq	r1, [r2, #0]
 8014aea:	6852      	ldreq	r2, [r2, #4]
 8014aec:	6062      	str	r2, [r4, #4]
 8014aee:	bf04      	itt	eq
 8014af0:	1809      	addeq	r1, r1, r0
 8014af2:	6021      	streq	r1, [r4, #0]
 8014af4:	605c      	str	r4, [r3, #4]
 8014af6:	e7c7      	b.n	8014a88 <_free_r+0x24>
 8014af8:	bd38      	pop	{r3, r4, r5, pc}
 8014afa:	bf00      	nop
 8014afc:	20006854 	.word	0x20006854

08014b00 <_realloc_r>:
 8014b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014b02:	4607      	mov	r7, r0
 8014b04:	4614      	mov	r4, r2
 8014b06:	460e      	mov	r6, r1
 8014b08:	b921      	cbnz	r1, 8014b14 <_realloc_r+0x14>
 8014b0a:	4611      	mov	r1, r2
 8014b0c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8014b10:	f7ff bc2c 	b.w	801436c <_malloc_r>
 8014b14:	b922      	cbnz	r2, 8014b20 <_realloc_r+0x20>
 8014b16:	f7ff ffa5 	bl	8014a64 <_free_r>
 8014b1a:	4625      	mov	r5, r4
 8014b1c:	4628      	mov	r0, r5
 8014b1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014b20:	f000 f814 	bl	8014b4c <_malloc_usable_size_r>
 8014b24:	42a0      	cmp	r0, r4
 8014b26:	d20f      	bcs.n	8014b48 <_realloc_r+0x48>
 8014b28:	4621      	mov	r1, r4
 8014b2a:	4638      	mov	r0, r7
 8014b2c:	f7ff fc1e 	bl	801436c <_malloc_r>
 8014b30:	4605      	mov	r5, r0
 8014b32:	2800      	cmp	r0, #0
 8014b34:	d0f2      	beq.n	8014b1c <_realloc_r+0x1c>
 8014b36:	4631      	mov	r1, r6
 8014b38:	4622      	mov	r2, r4
 8014b3a:	f7fd fd0d 	bl	8012558 <memcpy>
 8014b3e:	4631      	mov	r1, r6
 8014b40:	4638      	mov	r0, r7
 8014b42:	f7ff ff8f 	bl	8014a64 <_free_r>
 8014b46:	e7e9      	b.n	8014b1c <_realloc_r+0x1c>
 8014b48:	4635      	mov	r5, r6
 8014b4a:	e7e7      	b.n	8014b1c <_realloc_r+0x1c>

08014b4c <_malloc_usable_size_r>:
 8014b4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014b50:	1f18      	subs	r0, r3, #4
 8014b52:	2b00      	cmp	r3, #0
 8014b54:	bfbc      	itt	lt
 8014b56:	580b      	ldrlt	r3, [r1, r0]
 8014b58:	18c0      	addlt	r0, r0, r3
 8014b5a:	4770      	bx	lr

08014b5c <pow>:
 8014b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b60:	ed2d 8b04 	vpush	{d8-d9}
 8014b64:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8014e38 <pow+0x2dc>
 8014b68:	b08d      	sub	sp, #52	; 0x34
 8014b6a:	ec57 6b10 	vmov	r6, r7, d0
 8014b6e:	ec55 4b11 	vmov	r4, r5, d1
 8014b72:	f000 f9bd 	bl	8014ef0 <__ieee754_pow>
 8014b76:	f999 3000 	ldrsb.w	r3, [r9]
 8014b7a:	9300      	str	r3, [sp, #0]
 8014b7c:	3301      	adds	r3, #1
 8014b7e:	eeb0 8a40 	vmov.f32	s16, s0
 8014b82:	eef0 8a60 	vmov.f32	s17, s1
 8014b86:	46c8      	mov	r8, r9
 8014b88:	d05f      	beq.n	8014c4a <pow+0xee>
 8014b8a:	4622      	mov	r2, r4
 8014b8c:	462b      	mov	r3, r5
 8014b8e:	4620      	mov	r0, r4
 8014b90:	4629      	mov	r1, r5
 8014b92:	f7eb ffdb 	bl	8000b4c <__aeabi_dcmpun>
 8014b96:	4683      	mov	fp, r0
 8014b98:	2800      	cmp	r0, #0
 8014b9a:	d156      	bne.n	8014c4a <pow+0xee>
 8014b9c:	4632      	mov	r2, r6
 8014b9e:	463b      	mov	r3, r7
 8014ba0:	4630      	mov	r0, r6
 8014ba2:	4639      	mov	r1, r7
 8014ba4:	f7eb ffd2 	bl	8000b4c <__aeabi_dcmpun>
 8014ba8:	9001      	str	r0, [sp, #4]
 8014baa:	b1e8      	cbz	r0, 8014be8 <pow+0x8c>
 8014bac:	2200      	movs	r2, #0
 8014bae:	2300      	movs	r3, #0
 8014bb0:	4620      	mov	r0, r4
 8014bb2:	4629      	mov	r1, r5
 8014bb4:	f7eb ff98 	bl	8000ae8 <__aeabi_dcmpeq>
 8014bb8:	2800      	cmp	r0, #0
 8014bba:	d046      	beq.n	8014c4a <pow+0xee>
 8014bbc:	2301      	movs	r3, #1
 8014bbe:	9302      	str	r3, [sp, #8]
 8014bc0:	4b96      	ldr	r3, [pc, #600]	; (8014e1c <pow+0x2c0>)
 8014bc2:	9303      	str	r3, [sp, #12]
 8014bc4:	4b96      	ldr	r3, [pc, #600]	; (8014e20 <pow+0x2c4>)
 8014bc6:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8014bca:	2200      	movs	r2, #0
 8014bcc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014bd0:	9b00      	ldr	r3, [sp, #0]
 8014bd2:	2b02      	cmp	r3, #2
 8014bd4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8014bd8:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8014bdc:	d033      	beq.n	8014c46 <pow+0xea>
 8014bde:	a802      	add	r0, sp, #8
 8014be0:	f000 ff55 	bl	8015a8e <matherr>
 8014be4:	bb48      	cbnz	r0, 8014c3a <pow+0xde>
 8014be6:	e05d      	b.n	8014ca4 <pow+0x148>
 8014be8:	f04f 0a00 	mov.w	sl, #0
 8014bec:	f04f 0b00 	mov.w	fp, #0
 8014bf0:	4652      	mov	r2, sl
 8014bf2:	465b      	mov	r3, fp
 8014bf4:	4630      	mov	r0, r6
 8014bf6:	4639      	mov	r1, r7
 8014bf8:	f7eb ff76 	bl	8000ae8 <__aeabi_dcmpeq>
 8014bfc:	ec4b ab19 	vmov	d9, sl, fp
 8014c00:	2800      	cmp	r0, #0
 8014c02:	d054      	beq.n	8014cae <pow+0x152>
 8014c04:	4652      	mov	r2, sl
 8014c06:	465b      	mov	r3, fp
 8014c08:	4620      	mov	r0, r4
 8014c0a:	4629      	mov	r1, r5
 8014c0c:	f7eb ff6c 	bl	8000ae8 <__aeabi_dcmpeq>
 8014c10:	4680      	mov	r8, r0
 8014c12:	b318      	cbz	r0, 8014c5c <pow+0x100>
 8014c14:	2301      	movs	r3, #1
 8014c16:	9302      	str	r3, [sp, #8]
 8014c18:	4b80      	ldr	r3, [pc, #512]	; (8014e1c <pow+0x2c0>)
 8014c1a:	9303      	str	r3, [sp, #12]
 8014c1c:	9b01      	ldr	r3, [sp, #4]
 8014c1e:	930a      	str	r3, [sp, #40]	; 0x28
 8014c20:	9b00      	ldr	r3, [sp, #0]
 8014c22:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8014c26:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8014c2a:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8014c2e:	2b00      	cmp	r3, #0
 8014c30:	d0d5      	beq.n	8014bde <pow+0x82>
 8014c32:	4b7b      	ldr	r3, [pc, #492]	; (8014e20 <pow+0x2c4>)
 8014c34:	2200      	movs	r2, #0
 8014c36:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014c3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014c3c:	b11b      	cbz	r3, 8014c46 <pow+0xea>
 8014c3e:	f7fd fc47 	bl	80124d0 <__errno>
 8014c42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014c44:	6003      	str	r3, [r0, #0]
 8014c46:	ed9d 8b08 	vldr	d8, [sp, #32]
 8014c4a:	eeb0 0a48 	vmov.f32	s0, s16
 8014c4e:	eef0 0a68 	vmov.f32	s1, s17
 8014c52:	b00d      	add	sp, #52	; 0x34
 8014c54:	ecbd 8b04 	vpop	{d8-d9}
 8014c58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c5c:	ec45 4b10 	vmov	d0, r4, r5
 8014c60:	f000 ff0d 	bl	8015a7e <finite>
 8014c64:	2800      	cmp	r0, #0
 8014c66:	d0f0      	beq.n	8014c4a <pow+0xee>
 8014c68:	4652      	mov	r2, sl
 8014c6a:	465b      	mov	r3, fp
 8014c6c:	4620      	mov	r0, r4
 8014c6e:	4629      	mov	r1, r5
 8014c70:	f7eb ff44 	bl	8000afc <__aeabi_dcmplt>
 8014c74:	2800      	cmp	r0, #0
 8014c76:	d0e8      	beq.n	8014c4a <pow+0xee>
 8014c78:	2301      	movs	r3, #1
 8014c7a:	9302      	str	r3, [sp, #8]
 8014c7c:	4b67      	ldr	r3, [pc, #412]	; (8014e1c <pow+0x2c0>)
 8014c7e:	9303      	str	r3, [sp, #12]
 8014c80:	f999 3000 	ldrsb.w	r3, [r9]
 8014c84:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8014c88:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8014c8c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8014c90:	b913      	cbnz	r3, 8014c98 <pow+0x13c>
 8014c92:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8014c96:	e7a2      	b.n	8014bde <pow+0x82>
 8014c98:	4962      	ldr	r1, [pc, #392]	; (8014e24 <pow+0x2c8>)
 8014c9a:	2000      	movs	r0, #0
 8014c9c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8014ca0:	2b02      	cmp	r3, #2
 8014ca2:	d19c      	bne.n	8014bde <pow+0x82>
 8014ca4:	f7fd fc14 	bl	80124d0 <__errno>
 8014ca8:	2321      	movs	r3, #33	; 0x21
 8014caa:	6003      	str	r3, [r0, #0]
 8014cac:	e7c5      	b.n	8014c3a <pow+0xde>
 8014cae:	eeb0 0a48 	vmov.f32	s0, s16
 8014cb2:	eef0 0a68 	vmov.f32	s1, s17
 8014cb6:	f000 fee2 	bl	8015a7e <finite>
 8014cba:	9000      	str	r0, [sp, #0]
 8014cbc:	2800      	cmp	r0, #0
 8014cbe:	f040 8081 	bne.w	8014dc4 <pow+0x268>
 8014cc2:	ec47 6b10 	vmov	d0, r6, r7
 8014cc6:	f000 feda 	bl	8015a7e <finite>
 8014cca:	2800      	cmp	r0, #0
 8014ccc:	d07a      	beq.n	8014dc4 <pow+0x268>
 8014cce:	ec45 4b10 	vmov	d0, r4, r5
 8014cd2:	f000 fed4 	bl	8015a7e <finite>
 8014cd6:	2800      	cmp	r0, #0
 8014cd8:	d074      	beq.n	8014dc4 <pow+0x268>
 8014cda:	ec53 2b18 	vmov	r2, r3, d8
 8014cde:	ee18 0a10 	vmov	r0, s16
 8014ce2:	4619      	mov	r1, r3
 8014ce4:	f7eb ff32 	bl	8000b4c <__aeabi_dcmpun>
 8014ce8:	f999 9000 	ldrsb.w	r9, [r9]
 8014cec:	4b4b      	ldr	r3, [pc, #300]	; (8014e1c <pow+0x2c0>)
 8014cee:	b1b0      	cbz	r0, 8014d1e <pow+0x1c2>
 8014cf0:	2201      	movs	r2, #1
 8014cf2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8014cf6:	9b00      	ldr	r3, [sp, #0]
 8014cf8:	930a      	str	r3, [sp, #40]	; 0x28
 8014cfa:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8014cfe:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8014d02:	f1b9 0f00 	cmp.w	r9, #0
 8014d06:	d0c4      	beq.n	8014c92 <pow+0x136>
 8014d08:	4652      	mov	r2, sl
 8014d0a:	465b      	mov	r3, fp
 8014d0c:	4650      	mov	r0, sl
 8014d0e:	4659      	mov	r1, fp
 8014d10:	f7eb fdac 	bl	800086c <__aeabi_ddiv>
 8014d14:	f1b9 0f02 	cmp.w	r9, #2
 8014d18:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8014d1c:	e7c1      	b.n	8014ca2 <pow+0x146>
 8014d1e:	2203      	movs	r2, #3
 8014d20:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8014d24:	900a      	str	r0, [sp, #40]	; 0x28
 8014d26:	4629      	mov	r1, r5
 8014d28:	4620      	mov	r0, r4
 8014d2a:	2200      	movs	r2, #0
 8014d2c:	4b3e      	ldr	r3, [pc, #248]	; (8014e28 <pow+0x2cc>)
 8014d2e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8014d32:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8014d36:	f7eb fc6f 	bl	8000618 <__aeabi_dmul>
 8014d3a:	4604      	mov	r4, r0
 8014d3c:	460d      	mov	r5, r1
 8014d3e:	f1b9 0f00 	cmp.w	r9, #0
 8014d42:	d124      	bne.n	8014d8e <pow+0x232>
 8014d44:	4b39      	ldr	r3, [pc, #228]	; (8014e2c <pow+0x2d0>)
 8014d46:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8014d4a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014d4e:	4630      	mov	r0, r6
 8014d50:	4652      	mov	r2, sl
 8014d52:	465b      	mov	r3, fp
 8014d54:	4639      	mov	r1, r7
 8014d56:	f7eb fed1 	bl	8000afc <__aeabi_dcmplt>
 8014d5a:	2800      	cmp	r0, #0
 8014d5c:	d056      	beq.n	8014e0c <pow+0x2b0>
 8014d5e:	ec45 4b10 	vmov	d0, r4, r5
 8014d62:	f000 fea1 	bl	8015aa8 <rint>
 8014d66:	4622      	mov	r2, r4
 8014d68:	462b      	mov	r3, r5
 8014d6a:	ec51 0b10 	vmov	r0, r1, d0
 8014d6e:	f7eb febb 	bl	8000ae8 <__aeabi_dcmpeq>
 8014d72:	b920      	cbnz	r0, 8014d7e <pow+0x222>
 8014d74:	4b2e      	ldr	r3, [pc, #184]	; (8014e30 <pow+0x2d4>)
 8014d76:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8014d7a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014d7e:	f998 3000 	ldrsb.w	r3, [r8]
 8014d82:	2b02      	cmp	r3, #2
 8014d84:	d142      	bne.n	8014e0c <pow+0x2b0>
 8014d86:	f7fd fba3 	bl	80124d0 <__errno>
 8014d8a:	2322      	movs	r3, #34	; 0x22
 8014d8c:	e78d      	b.n	8014caa <pow+0x14e>
 8014d8e:	4b29      	ldr	r3, [pc, #164]	; (8014e34 <pow+0x2d8>)
 8014d90:	2200      	movs	r2, #0
 8014d92:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014d96:	4630      	mov	r0, r6
 8014d98:	4652      	mov	r2, sl
 8014d9a:	465b      	mov	r3, fp
 8014d9c:	4639      	mov	r1, r7
 8014d9e:	f7eb fead 	bl	8000afc <__aeabi_dcmplt>
 8014da2:	2800      	cmp	r0, #0
 8014da4:	d0eb      	beq.n	8014d7e <pow+0x222>
 8014da6:	ec45 4b10 	vmov	d0, r4, r5
 8014daa:	f000 fe7d 	bl	8015aa8 <rint>
 8014dae:	4622      	mov	r2, r4
 8014db0:	462b      	mov	r3, r5
 8014db2:	ec51 0b10 	vmov	r0, r1, d0
 8014db6:	f7eb fe97 	bl	8000ae8 <__aeabi_dcmpeq>
 8014dba:	2800      	cmp	r0, #0
 8014dbc:	d1df      	bne.n	8014d7e <pow+0x222>
 8014dbe:	2200      	movs	r2, #0
 8014dc0:	4b18      	ldr	r3, [pc, #96]	; (8014e24 <pow+0x2c8>)
 8014dc2:	e7da      	b.n	8014d7a <pow+0x21e>
 8014dc4:	2200      	movs	r2, #0
 8014dc6:	2300      	movs	r3, #0
 8014dc8:	ec51 0b18 	vmov	r0, r1, d8
 8014dcc:	f7eb fe8c 	bl	8000ae8 <__aeabi_dcmpeq>
 8014dd0:	2800      	cmp	r0, #0
 8014dd2:	f43f af3a 	beq.w	8014c4a <pow+0xee>
 8014dd6:	ec47 6b10 	vmov	d0, r6, r7
 8014dda:	f000 fe50 	bl	8015a7e <finite>
 8014dde:	2800      	cmp	r0, #0
 8014de0:	f43f af33 	beq.w	8014c4a <pow+0xee>
 8014de4:	ec45 4b10 	vmov	d0, r4, r5
 8014de8:	f000 fe49 	bl	8015a7e <finite>
 8014dec:	2800      	cmp	r0, #0
 8014dee:	f43f af2c 	beq.w	8014c4a <pow+0xee>
 8014df2:	2304      	movs	r3, #4
 8014df4:	9302      	str	r3, [sp, #8]
 8014df6:	4b09      	ldr	r3, [pc, #36]	; (8014e1c <pow+0x2c0>)
 8014df8:	9303      	str	r3, [sp, #12]
 8014dfa:	2300      	movs	r3, #0
 8014dfc:	930a      	str	r3, [sp, #40]	; 0x28
 8014dfe:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8014e02:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8014e06:	ed8d 9b08 	vstr	d9, [sp, #32]
 8014e0a:	e7b8      	b.n	8014d7e <pow+0x222>
 8014e0c:	a802      	add	r0, sp, #8
 8014e0e:	f000 fe3e 	bl	8015a8e <matherr>
 8014e12:	2800      	cmp	r0, #0
 8014e14:	f47f af11 	bne.w	8014c3a <pow+0xde>
 8014e18:	e7b5      	b.n	8014d86 <pow+0x22a>
 8014e1a:	bf00      	nop
 8014e1c:	08028880 	.word	0x08028880
 8014e20:	3ff00000 	.word	0x3ff00000
 8014e24:	fff00000 	.word	0xfff00000
 8014e28:	3fe00000 	.word	0x3fe00000
 8014e2c:	47efffff 	.word	0x47efffff
 8014e30:	c7efffff 	.word	0xc7efffff
 8014e34:	7ff00000 	.word	0x7ff00000
 8014e38:	20000220 	.word	0x20000220

08014e3c <sqrt>:
 8014e3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014e40:	ed2d 8b02 	vpush	{d8}
 8014e44:	b08b      	sub	sp, #44	; 0x2c
 8014e46:	ec55 4b10 	vmov	r4, r5, d0
 8014e4a:	f000 fd5f 	bl	801590c <__ieee754_sqrt>
 8014e4e:	4b26      	ldr	r3, [pc, #152]	; (8014ee8 <sqrt+0xac>)
 8014e50:	eeb0 8a40 	vmov.f32	s16, s0
 8014e54:	eef0 8a60 	vmov.f32	s17, s1
 8014e58:	f993 6000 	ldrsb.w	r6, [r3]
 8014e5c:	1c73      	adds	r3, r6, #1
 8014e5e:	d02a      	beq.n	8014eb6 <sqrt+0x7a>
 8014e60:	4622      	mov	r2, r4
 8014e62:	462b      	mov	r3, r5
 8014e64:	4620      	mov	r0, r4
 8014e66:	4629      	mov	r1, r5
 8014e68:	f7eb fe70 	bl	8000b4c <__aeabi_dcmpun>
 8014e6c:	4607      	mov	r7, r0
 8014e6e:	bb10      	cbnz	r0, 8014eb6 <sqrt+0x7a>
 8014e70:	f04f 0800 	mov.w	r8, #0
 8014e74:	f04f 0900 	mov.w	r9, #0
 8014e78:	4642      	mov	r2, r8
 8014e7a:	464b      	mov	r3, r9
 8014e7c:	4620      	mov	r0, r4
 8014e7e:	4629      	mov	r1, r5
 8014e80:	f7eb fe3c 	bl	8000afc <__aeabi_dcmplt>
 8014e84:	b1b8      	cbz	r0, 8014eb6 <sqrt+0x7a>
 8014e86:	2301      	movs	r3, #1
 8014e88:	9300      	str	r3, [sp, #0]
 8014e8a:	4b18      	ldr	r3, [pc, #96]	; (8014eec <sqrt+0xb0>)
 8014e8c:	9301      	str	r3, [sp, #4]
 8014e8e:	9708      	str	r7, [sp, #32]
 8014e90:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8014e94:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8014e98:	b9b6      	cbnz	r6, 8014ec8 <sqrt+0x8c>
 8014e9a:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8014e9e:	4668      	mov	r0, sp
 8014ea0:	f000 fdf5 	bl	8015a8e <matherr>
 8014ea4:	b1d0      	cbz	r0, 8014edc <sqrt+0xa0>
 8014ea6:	9b08      	ldr	r3, [sp, #32]
 8014ea8:	b11b      	cbz	r3, 8014eb2 <sqrt+0x76>
 8014eaa:	f7fd fb11 	bl	80124d0 <__errno>
 8014eae:	9b08      	ldr	r3, [sp, #32]
 8014eb0:	6003      	str	r3, [r0, #0]
 8014eb2:	ed9d 8b06 	vldr	d8, [sp, #24]
 8014eb6:	eeb0 0a48 	vmov.f32	s0, s16
 8014eba:	eef0 0a68 	vmov.f32	s1, s17
 8014ebe:	b00b      	add	sp, #44	; 0x2c
 8014ec0:	ecbd 8b02 	vpop	{d8}
 8014ec4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014ec8:	4642      	mov	r2, r8
 8014eca:	464b      	mov	r3, r9
 8014ecc:	4640      	mov	r0, r8
 8014ece:	4649      	mov	r1, r9
 8014ed0:	f7eb fccc 	bl	800086c <__aeabi_ddiv>
 8014ed4:	2e02      	cmp	r6, #2
 8014ed6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8014eda:	d1e0      	bne.n	8014e9e <sqrt+0x62>
 8014edc:	f7fd faf8 	bl	80124d0 <__errno>
 8014ee0:	2321      	movs	r3, #33	; 0x21
 8014ee2:	6003      	str	r3, [r0, #0]
 8014ee4:	e7df      	b.n	8014ea6 <sqrt+0x6a>
 8014ee6:	bf00      	nop
 8014ee8:	20000220 	.word	0x20000220
 8014eec:	08028884 	.word	0x08028884

08014ef0 <__ieee754_pow>:
 8014ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ef4:	b091      	sub	sp, #68	; 0x44
 8014ef6:	ed8d 1b00 	vstr	d1, [sp]
 8014efa:	e9dd 2900 	ldrd	r2, r9, [sp]
 8014efe:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8014f02:	ea58 0302 	orrs.w	r3, r8, r2
 8014f06:	ec57 6b10 	vmov	r6, r7, d0
 8014f0a:	f000 84be 	beq.w	801588a <__ieee754_pow+0x99a>
 8014f0e:	4b7a      	ldr	r3, [pc, #488]	; (80150f8 <__ieee754_pow+0x208>)
 8014f10:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8014f14:	429c      	cmp	r4, r3
 8014f16:	463d      	mov	r5, r7
 8014f18:	ee10 aa10 	vmov	sl, s0
 8014f1c:	dc09      	bgt.n	8014f32 <__ieee754_pow+0x42>
 8014f1e:	d103      	bne.n	8014f28 <__ieee754_pow+0x38>
 8014f20:	b93e      	cbnz	r6, 8014f32 <__ieee754_pow+0x42>
 8014f22:	45a0      	cmp	r8, r4
 8014f24:	dc0d      	bgt.n	8014f42 <__ieee754_pow+0x52>
 8014f26:	e001      	b.n	8014f2c <__ieee754_pow+0x3c>
 8014f28:	4598      	cmp	r8, r3
 8014f2a:	dc02      	bgt.n	8014f32 <__ieee754_pow+0x42>
 8014f2c:	4598      	cmp	r8, r3
 8014f2e:	d10e      	bne.n	8014f4e <__ieee754_pow+0x5e>
 8014f30:	b16a      	cbz	r2, 8014f4e <__ieee754_pow+0x5e>
 8014f32:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8014f36:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8014f3a:	ea54 030a 	orrs.w	r3, r4, sl
 8014f3e:	f000 84a4 	beq.w	801588a <__ieee754_pow+0x99a>
 8014f42:	486e      	ldr	r0, [pc, #440]	; (80150fc <__ieee754_pow+0x20c>)
 8014f44:	b011      	add	sp, #68	; 0x44
 8014f46:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f4a:	f000 bda5 	b.w	8015a98 <nan>
 8014f4e:	2d00      	cmp	r5, #0
 8014f50:	da53      	bge.n	8014ffa <__ieee754_pow+0x10a>
 8014f52:	4b6b      	ldr	r3, [pc, #428]	; (8015100 <__ieee754_pow+0x210>)
 8014f54:	4598      	cmp	r8, r3
 8014f56:	dc4d      	bgt.n	8014ff4 <__ieee754_pow+0x104>
 8014f58:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8014f5c:	4598      	cmp	r8, r3
 8014f5e:	dd4c      	ble.n	8014ffa <__ieee754_pow+0x10a>
 8014f60:	ea4f 5328 	mov.w	r3, r8, asr #20
 8014f64:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8014f68:	2b14      	cmp	r3, #20
 8014f6a:	dd26      	ble.n	8014fba <__ieee754_pow+0xca>
 8014f6c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8014f70:	fa22 f103 	lsr.w	r1, r2, r3
 8014f74:	fa01 f303 	lsl.w	r3, r1, r3
 8014f78:	4293      	cmp	r3, r2
 8014f7a:	d13e      	bne.n	8014ffa <__ieee754_pow+0x10a>
 8014f7c:	f001 0101 	and.w	r1, r1, #1
 8014f80:	f1c1 0b02 	rsb	fp, r1, #2
 8014f84:	2a00      	cmp	r2, #0
 8014f86:	d15b      	bne.n	8015040 <__ieee754_pow+0x150>
 8014f88:	4b5b      	ldr	r3, [pc, #364]	; (80150f8 <__ieee754_pow+0x208>)
 8014f8a:	4598      	cmp	r8, r3
 8014f8c:	d124      	bne.n	8014fd8 <__ieee754_pow+0xe8>
 8014f8e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8014f92:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8014f96:	ea53 030a 	orrs.w	r3, r3, sl
 8014f9a:	f000 8476 	beq.w	801588a <__ieee754_pow+0x99a>
 8014f9e:	4b59      	ldr	r3, [pc, #356]	; (8015104 <__ieee754_pow+0x214>)
 8014fa0:	429c      	cmp	r4, r3
 8014fa2:	dd2d      	ble.n	8015000 <__ieee754_pow+0x110>
 8014fa4:	f1b9 0f00 	cmp.w	r9, #0
 8014fa8:	f280 8473 	bge.w	8015892 <__ieee754_pow+0x9a2>
 8014fac:	2000      	movs	r0, #0
 8014fae:	2100      	movs	r1, #0
 8014fb0:	ec41 0b10 	vmov	d0, r0, r1
 8014fb4:	b011      	add	sp, #68	; 0x44
 8014fb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014fba:	2a00      	cmp	r2, #0
 8014fbc:	d13e      	bne.n	801503c <__ieee754_pow+0x14c>
 8014fbe:	f1c3 0314 	rsb	r3, r3, #20
 8014fc2:	fa48 f103 	asr.w	r1, r8, r3
 8014fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8014fca:	4543      	cmp	r3, r8
 8014fcc:	f040 8469 	bne.w	80158a2 <__ieee754_pow+0x9b2>
 8014fd0:	f001 0101 	and.w	r1, r1, #1
 8014fd4:	f1c1 0b02 	rsb	fp, r1, #2
 8014fd8:	4b4b      	ldr	r3, [pc, #300]	; (8015108 <__ieee754_pow+0x218>)
 8014fda:	4598      	cmp	r8, r3
 8014fdc:	d118      	bne.n	8015010 <__ieee754_pow+0x120>
 8014fde:	f1b9 0f00 	cmp.w	r9, #0
 8014fe2:	f280 845a 	bge.w	801589a <__ieee754_pow+0x9aa>
 8014fe6:	4948      	ldr	r1, [pc, #288]	; (8015108 <__ieee754_pow+0x218>)
 8014fe8:	4632      	mov	r2, r6
 8014fea:	463b      	mov	r3, r7
 8014fec:	2000      	movs	r0, #0
 8014fee:	f7eb fc3d 	bl	800086c <__aeabi_ddiv>
 8014ff2:	e7dd      	b.n	8014fb0 <__ieee754_pow+0xc0>
 8014ff4:	f04f 0b02 	mov.w	fp, #2
 8014ff8:	e7c4      	b.n	8014f84 <__ieee754_pow+0x94>
 8014ffa:	f04f 0b00 	mov.w	fp, #0
 8014ffe:	e7c1      	b.n	8014f84 <__ieee754_pow+0x94>
 8015000:	f1b9 0f00 	cmp.w	r9, #0
 8015004:	dad2      	bge.n	8014fac <__ieee754_pow+0xbc>
 8015006:	e9dd 0300 	ldrd	r0, r3, [sp]
 801500a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801500e:	e7cf      	b.n	8014fb0 <__ieee754_pow+0xc0>
 8015010:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8015014:	d106      	bne.n	8015024 <__ieee754_pow+0x134>
 8015016:	4632      	mov	r2, r6
 8015018:	463b      	mov	r3, r7
 801501a:	4610      	mov	r0, r2
 801501c:	4619      	mov	r1, r3
 801501e:	f7eb fafb 	bl	8000618 <__aeabi_dmul>
 8015022:	e7c5      	b.n	8014fb0 <__ieee754_pow+0xc0>
 8015024:	4b39      	ldr	r3, [pc, #228]	; (801510c <__ieee754_pow+0x21c>)
 8015026:	4599      	cmp	r9, r3
 8015028:	d10a      	bne.n	8015040 <__ieee754_pow+0x150>
 801502a:	2d00      	cmp	r5, #0
 801502c:	db08      	blt.n	8015040 <__ieee754_pow+0x150>
 801502e:	ec47 6b10 	vmov	d0, r6, r7
 8015032:	b011      	add	sp, #68	; 0x44
 8015034:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015038:	f000 bc68 	b.w	801590c <__ieee754_sqrt>
 801503c:	f04f 0b00 	mov.w	fp, #0
 8015040:	ec47 6b10 	vmov	d0, r6, r7
 8015044:	f000 fd12 	bl	8015a6c <fabs>
 8015048:	ec51 0b10 	vmov	r0, r1, d0
 801504c:	f1ba 0f00 	cmp.w	sl, #0
 8015050:	d127      	bne.n	80150a2 <__ieee754_pow+0x1b2>
 8015052:	b124      	cbz	r4, 801505e <__ieee754_pow+0x16e>
 8015054:	4b2c      	ldr	r3, [pc, #176]	; (8015108 <__ieee754_pow+0x218>)
 8015056:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801505a:	429a      	cmp	r2, r3
 801505c:	d121      	bne.n	80150a2 <__ieee754_pow+0x1b2>
 801505e:	f1b9 0f00 	cmp.w	r9, #0
 8015062:	da05      	bge.n	8015070 <__ieee754_pow+0x180>
 8015064:	4602      	mov	r2, r0
 8015066:	460b      	mov	r3, r1
 8015068:	2000      	movs	r0, #0
 801506a:	4927      	ldr	r1, [pc, #156]	; (8015108 <__ieee754_pow+0x218>)
 801506c:	f7eb fbfe 	bl	800086c <__aeabi_ddiv>
 8015070:	2d00      	cmp	r5, #0
 8015072:	da9d      	bge.n	8014fb0 <__ieee754_pow+0xc0>
 8015074:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8015078:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801507c:	ea54 030b 	orrs.w	r3, r4, fp
 8015080:	d108      	bne.n	8015094 <__ieee754_pow+0x1a4>
 8015082:	4602      	mov	r2, r0
 8015084:	460b      	mov	r3, r1
 8015086:	4610      	mov	r0, r2
 8015088:	4619      	mov	r1, r3
 801508a:	f7eb f90d 	bl	80002a8 <__aeabi_dsub>
 801508e:	4602      	mov	r2, r0
 8015090:	460b      	mov	r3, r1
 8015092:	e7ac      	b.n	8014fee <__ieee754_pow+0xfe>
 8015094:	f1bb 0f01 	cmp.w	fp, #1
 8015098:	d18a      	bne.n	8014fb0 <__ieee754_pow+0xc0>
 801509a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801509e:	4619      	mov	r1, r3
 80150a0:	e786      	b.n	8014fb0 <__ieee754_pow+0xc0>
 80150a2:	0fed      	lsrs	r5, r5, #31
 80150a4:	1e6b      	subs	r3, r5, #1
 80150a6:	930d      	str	r3, [sp, #52]	; 0x34
 80150a8:	ea5b 0303 	orrs.w	r3, fp, r3
 80150ac:	d102      	bne.n	80150b4 <__ieee754_pow+0x1c4>
 80150ae:	4632      	mov	r2, r6
 80150b0:	463b      	mov	r3, r7
 80150b2:	e7e8      	b.n	8015086 <__ieee754_pow+0x196>
 80150b4:	4b16      	ldr	r3, [pc, #88]	; (8015110 <__ieee754_pow+0x220>)
 80150b6:	4598      	cmp	r8, r3
 80150b8:	f340 80fe 	ble.w	80152b8 <__ieee754_pow+0x3c8>
 80150bc:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80150c0:	4598      	cmp	r8, r3
 80150c2:	dd0a      	ble.n	80150da <__ieee754_pow+0x1ea>
 80150c4:	4b0f      	ldr	r3, [pc, #60]	; (8015104 <__ieee754_pow+0x214>)
 80150c6:	429c      	cmp	r4, r3
 80150c8:	dc0d      	bgt.n	80150e6 <__ieee754_pow+0x1f6>
 80150ca:	f1b9 0f00 	cmp.w	r9, #0
 80150ce:	f6bf af6d 	bge.w	8014fac <__ieee754_pow+0xbc>
 80150d2:	a307      	add	r3, pc, #28	; (adr r3, 80150f0 <__ieee754_pow+0x200>)
 80150d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80150d8:	e79f      	b.n	801501a <__ieee754_pow+0x12a>
 80150da:	4b0e      	ldr	r3, [pc, #56]	; (8015114 <__ieee754_pow+0x224>)
 80150dc:	429c      	cmp	r4, r3
 80150de:	ddf4      	ble.n	80150ca <__ieee754_pow+0x1da>
 80150e0:	4b09      	ldr	r3, [pc, #36]	; (8015108 <__ieee754_pow+0x218>)
 80150e2:	429c      	cmp	r4, r3
 80150e4:	dd18      	ble.n	8015118 <__ieee754_pow+0x228>
 80150e6:	f1b9 0f00 	cmp.w	r9, #0
 80150ea:	dcf2      	bgt.n	80150d2 <__ieee754_pow+0x1e2>
 80150ec:	e75e      	b.n	8014fac <__ieee754_pow+0xbc>
 80150ee:	bf00      	nop
 80150f0:	8800759c 	.word	0x8800759c
 80150f4:	7e37e43c 	.word	0x7e37e43c
 80150f8:	7ff00000 	.word	0x7ff00000
 80150fc:	08028751 	.word	0x08028751
 8015100:	433fffff 	.word	0x433fffff
 8015104:	3fefffff 	.word	0x3fefffff
 8015108:	3ff00000 	.word	0x3ff00000
 801510c:	3fe00000 	.word	0x3fe00000
 8015110:	41e00000 	.word	0x41e00000
 8015114:	3feffffe 	.word	0x3feffffe
 8015118:	2200      	movs	r2, #0
 801511a:	4b63      	ldr	r3, [pc, #396]	; (80152a8 <__ieee754_pow+0x3b8>)
 801511c:	f7eb f8c4 	bl	80002a8 <__aeabi_dsub>
 8015120:	a355      	add	r3, pc, #340	; (adr r3, 8015278 <__ieee754_pow+0x388>)
 8015122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015126:	4604      	mov	r4, r0
 8015128:	460d      	mov	r5, r1
 801512a:	f7eb fa75 	bl	8000618 <__aeabi_dmul>
 801512e:	a354      	add	r3, pc, #336	; (adr r3, 8015280 <__ieee754_pow+0x390>)
 8015130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015134:	4606      	mov	r6, r0
 8015136:	460f      	mov	r7, r1
 8015138:	4620      	mov	r0, r4
 801513a:	4629      	mov	r1, r5
 801513c:	f7eb fa6c 	bl	8000618 <__aeabi_dmul>
 8015140:	2200      	movs	r2, #0
 8015142:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015146:	4b59      	ldr	r3, [pc, #356]	; (80152ac <__ieee754_pow+0x3bc>)
 8015148:	4620      	mov	r0, r4
 801514a:	4629      	mov	r1, r5
 801514c:	f7eb fa64 	bl	8000618 <__aeabi_dmul>
 8015150:	4602      	mov	r2, r0
 8015152:	460b      	mov	r3, r1
 8015154:	a14c      	add	r1, pc, #304	; (adr r1, 8015288 <__ieee754_pow+0x398>)
 8015156:	e9d1 0100 	ldrd	r0, r1, [r1]
 801515a:	f7eb f8a5 	bl	80002a8 <__aeabi_dsub>
 801515e:	4622      	mov	r2, r4
 8015160:	462b      	mov	r3, r5
 8015162:	f7eb fa59 	bl	8000618 <__aeabi_dmul>
 8015166:	4602      	mov	r2, r0
 8015168:	460b      	mov	r3, r1
 801516a:	2000      	movs	r0, #0
 801516c:	4950      	ldr	r1, [pc, #320]	; (80152b0 <__ieee754_pow+0x3c0>)
 801516e:	f7eb f89b 	bl	80002a8 <__aeabi_dsub>
 8015172:	4622      	mov	r2, r4
 8015174:	462b      	mov	r3, r5
 8015176:	4680      	mov	r8, r0
 8015178:	4689      	mov	r9, r1
 801517a:	4620      	mov	r0, r4
 801517c:	4629      	mov	r1, r5
 801517e:	f7eb fa4b 	bl	8000618 <__aeabi_dmul>
 8015182:	4602      	mov	r2, r0
 8015184:	460b      	mov	r3, r1
 8015186:	4640      	mov	r0, r8
 8015188:	4649      	mov	r1, r9
 801518a:	f7eb fa45 	bl	8000618 <__aeabi_dmul>
 801518e:	a340      	add	r3, pc, #256	; (adr r3, 8015290 <__ieee754_pow+0x3a0>)
 8015190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015194:	f7eb fa40 	bl	8000618 <__aeabi_dmul>
 8015198:	4602      	mov	r2, r0
 801519a:	460b      	mov	r3, r1
 801519c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80151a0:	f7eb f882 	bl	80002a8 <__aeabi_dsub>
 80151a4:	4602      	mov	r2, r0
 80151a6:	460b      	mov	r3, r1
 80151a8:	4604      	mov	r4, r0
 80151aa:	460d      	mov	r5, r1
 80151ac:	4630      	mov	r0, r6
 80151ae:	4639      	mov	r1, r7
 80151b0:	f7eb f87c 	bl	80002ac <__adddf3>
 80151b4:	2000      	movs	r0, #0
 80151b6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80151ba:	4632      	mov	r2, r6
 80151bc:	463b      	mov	r3, r7
 80151be:	f7eb f873 	bl	80002a8 <__aeabi_dsub>
 80151c2:	4602      	mov	r2, r0
 80151c4:	460b      	mov	r3, r1
 80151c6:	4620      	mov	r0, r4
 80151c8:	4629      	mov	r1, r5
 80151ca:	f7eb f86d 	bl	80002a8 <__aeabi_dsub>
 80151ce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80151d0:	f10b 33ff 	add.w	r3, fp, #4294967295
 80151d4:	4313      	orrs	r3, r2
 80151d6:	4606      	mov	r6, r0
 80151d8:	460f      	mov	r7, r1
 80151da:	f040 81eb 	bne.w	80155b4 <__ieee754_pow+0x6c4>
 80151de:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8015298 <__ieee754_pow+0x3a8>
 80151e2:	e9dd 4500 	ldrd	r4, r5, [sp]
 80151e6:	2400      	movs	r4, #0
 80151e8:	4622      	mov	r2, r4
 80151ea:	462b      	mov	r3, r5
 80151ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 80151f0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80151f4:	f7eb f858 	bl	80002a8 <__aeabi_dsub>
 80151f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80151fc:	f7eb fa0c 	bl	8000618 <__aeabi_dmul>
 8015200:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015204:	4680      	mov	r8, r0
 8015206:	4689      	mov	r9, r1
 8015208:	4630      	mov	r0, r6
 801520a:	4639      	mov	r1, r7
 801520c:	f7eb fa04 	bl	8000618 <__aeabi_dmul>
 8015210:	4602      	mov	r2, r0
 8015212:	460b      	mov	r3, r1
 8015214:	4640      	mov	r0, r8
 8015216:	4649      	mov	r1, r9
 8015218:	f7eb f848 	bl	80002ac <__adddf3>
 801521c:	4622      	mov	r2, r4
 801521e:	462b      	mov	r3, r5
 8015220:	4680      	mov	r8, r0
 8015222:	4689      	mov	r9, r1
 8015224:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015228:	f7eb f9f6 	bl	8000618 <__aeabi_dmul>
 801522c:	460b      	mov	r3, r1
 801522e:	4604      	mov	r4, r0
 8015230:	460d      	mov	r5, r1
 8015232:	4602      	mov	r2, r0
 8015234:	4649      	mov	r1, r9
 8015236:	4640      	mov	r0, r8
 8015238:	e9cd 4500 	strd	r4, r5, [sp]
 801523c:	f7eb f836 	bl	80002ac <__adddf3>
 8015240:	4b1c      	ldr	r3, [pc, #112]	; (80152b4 <__ieee754_pow+0x3c4>)
 8015242:	4299      	cmp	r1, r3
 8015244:	4606      	mov	r6, r0
 8015246:	460f      	mov	r7, r1
 8015248:	468b      	mov	fp, r1
 801524a:	f340 82f7 	ble.w	801583c <__ieee754_pow+0x94c>
 801524e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8015252:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8015256:	4303      	orrs	r3, r0
 8015258:	f000 81ea 	beq.w	8015630 <__ieee754_pow+0x740>
 801525c:	a310      	add	r3, pc, #64	; (adr r3, 80152a0 <__ieee754_pow+0x3b0>)
 801525e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015262:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015266:	f7eb f9d7 	bl	8000618 <__aeabi_dmul>
 801526a:	a30d      	add	r3, pc, #52	; (adr r3, 80152a0 <__ieee754_pow+0x3b0>)
 801526c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015270:	e6d5      	b.n	801501e <__ieee754_pow+0x12e>
 8015272:	bf00      	nop
 8015274:	f3af 8000 	nop.w
 8015278:	60000000 	.word	0x60000000
 801527c:	3ff71547 	.word	0x3ff71547
 8015280:	f85ddf44 	.word	0xf85ddf44
 8015284:	3e54ae0b 	.word	0x3e54ae0b
 8015288:	55555555 	.word	0x55555555
 801528c:	3fd55555 	.word	0x3fd55555
 8015290:	652b82fe 	.word	0x652b82fe
 8015294:	3ff71547 	.word	0x3ff71547
 8015298:	00000000 	.word	0x00000000
 801529c:	bff00000 	.word	0xbff00000
 80152a0:	8800759c 	.word	0x8800759c
 80152a4:	7e37e43c 	.word	0x7e37e43c
 80152a8:	3ff00000 	.word	0x3ff00000
 80152ac:	3fd00000 	.word	0x3fd00000
 80152b0:	3fe00000 	.word	0x3fe00000
 80152b4:	408fffff 	.word	0x408fffff
 80152b8:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80152bc:	f04f 0200 	mov.w	r2, #0
 80152c0:	da05      	bge.n	80152ce <__ieee754_pow+0x3de>
 80152c2:	4bd3      	ldr	r3, [pc, #844]	; (8015610 <__ieee754_pow+0x720>)
 80152c4:	f7eb f9a8 	bl	8000618 <__aeabi_dmul>
 80152c8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80152cc:	460c      	mov	r4, r1
 80152ce:	1523      	asrs	r3, r4, #20
 80152d0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80152d4:	4413      	add	r3, r2
 80152d6:	9309      	str	r3, [sp, #36]	; 0x24
 80152d8:	4bce      	ldr	r3, [pc, #824]	; (8015614 <__ieee754_pow+0x724>)
 80152da:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80152de:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80152e2:	429c      	cmp	r4, r3
 80152e4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80152e8:	dd08      	ble.n	80152fc <__ieee754_pow+0x40c>
 80152ea:	4bcb      	ldr	r3, [pc, #812]	; (8015618 <__ieee754_pow+0x728>)
 80152ec:	429c      	cmp	r4, r3
 80152ee:	f340 815e 	ble.w	80155ae <__ieee754_pow+0x6be>
 80152f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80152f4:	3301      	adds	r3, #1
 80152f6:	9309      	str	r3, [sp, #36]	; 0x24
 80152f8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80152fc:	f04f 0a00 	mov.w	sl, #0
 8015300:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8015304:	930c      	str	r3, [sp, #48]	; 0x30
 8015306:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015308:	4bc4      	ldr	r3, [pc, #784]	; (801561c <__ieee754_pow+0x72c>)
 801530a:	4413      	add	r3, r2
 801530c:	ed93 7b00 	vldr	d7, [r3]
 8015310:	4629      	mov	r1, r5
 8015312:	ec53 2b17 	vmov	r2, r3, d7
 8015316:	ed8d 7b06 	vstr	d7, [sp, #24]
 801531a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801531e:	f7ea ffc3 	bl	80002a8 <__aeabi_dsub>
 8015322:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8015326:	4606      	mov	r6, r0
 8015328:	460f      	mov	r7, r1
 801532a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801532e:	f7ea ffbd 	bl	80002ac <__adddf3>
 8015332:	4602      	mov	r2, r0
 8015334:	460b      	mov	r3, r1
 8015336:	2000      	movs	r0, #0
 8015338:	49b9      	ldr	r1, [pc, #740]	; (8015620 <__ieee754_pow+0x730>)
 801533a:	f7eb fa97 	bl	800086c <__aeabi_ddiv>
 801533e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8015342:	4602      	mov	r2, r0
 8015344:	460b      	mov	r3, r1
 8015346:	4630      	mov	r0, r6
 8015348:	4639      	mov	r1, r7
 801534a:	f7eb f965 	bl	8000618 <__aeabi_dmul>
 801534e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015352:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8015356:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801535a:	2300      	movs	r3, #0
 801535c:	9302      	str	r3, [sp, #8]
 801535e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8015362:	106d      	asrs	r5, r5, #1
 8015364:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8015368:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801536c:	2200      	movs	r2, #0
 801536e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8015372:	4640      	mov	r0, r8
 8015374:	4649      	mov	r1, r9
 8015376:	4614      	mov	r4, r2
 8015378:	461d      	mov	r5, r3
 801537a:	f7eb f94d 	bl	8000618 <__aeabi_dmul>
 801537e:	4602      	mov	r2, r0
 8015380:	460b      	mov	r3, r1
 8015382:	4630      	mov	r0, r6
 8015384:	4639      	mov	r1, r7
 8015386:	f7ea ff8f 	bl	80002a8 <__aeabi_dsub>
 801538a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801538e:	4606      	mov	r6, r0
 8015390:	460f      	mov	r7, r1
 8015392:	4620      	mov	r0, r4
 8015394:	4629      	mov	r1, r5
 8015396:	f7ea ff87 	bl	80002a8 <__aeabi_dsub>
 801539a:	4602      	mov	r2, r0
 801539c:	460b      	mov	r3, r1
 801539e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80153a2:	f7ea ff81 	bl	80002a8 <__aeabi_dsub>
 80153a6:	4642      	mov	r2, r8
 80153a8:	464b      	mov	r3, r9
 80153aa:	f7eb f935 	bl	8000618 <__aeabi_dmul>
 80153ae:	4602      	mov	r2, r0
 80153b0:	460b      	mov	r3, r1
 80153b2:	4630      	mov	r0, r6
 80153b4:	4639      	mov	r1, r7
 80153b6:	f7ea ff77 	bl	80002a8 <__aeabi_dsub>
 80153ba:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80153be:	f7eb f92b 	bl	8000618 <__aeabi_dmul>
 80153c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80153c6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80153ca:	4610      	mov	r0, r2
 80153cc:	4619      	mov	r1, r3
 80153ce:	f7eb f923 	bl	8000618 <__aeabi_dmul>
 80153d2:	a37b      	add	r3, pc, #492	; (adr r3, 80155c0 <__ieee754_pow+0x6d0>)
 80153d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80153d8:	4604      	mov	r4, r0
 80153da:	460d      	mov	r5, r1
 80153dc:	f7eb f91c 	bl	8000618 <__aeabi_dmul>
 80153e0:	a379      	add	r3, pc, #484	; (adr r3, 80155c8 <__ieee754_pow+0x6d8>)
 80153e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80153e6:	f7ea ff61 	bl	80002ac <__adddf3>
 80153ea:	4622      	mov	r2, r4
 80153ec:	462b      	mov	r3, r5
 80153ee:	f7eb f913 	bl	8000618 <__aeabi_dmul>
 80153f2:	a377      	add	r3, pc, #476	; (adr r3, 80155d0 <__ieee754_pow+0x6e0>)
 80153f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80153f8:	f7ea ff58 	bl	80002ac <__adddf3>
 80153fc:	4622      	mov	r2, r4
 80153fe:	462b      	mov	r3, r5
 8015400:	f7eb f90a 	bl	8000618 <__aeabi_dmul>
 8015404:	a374      	add	r3, pc, #464	; (adr r3, 80155d8 <__ieee754_pow+0x6e8>)
 8015406:	e9d3 2300 	ldrd	r2, r3, [r3]
 801540a:	f7ea ff4f 	bl	80002ac <__adddf3>
 801540e:	4622      	mov	r2, r4
 8015410:	462b      	mov	r3, r5
 8015412:	f7eb f901 	bl	8000618 <__aeabi_dmul>
 8015416:	a372      	add	r3, pc, #456	; (adr r3, 80155e0 <__ieee754_pow+0x6f0>)
 8015418:	e9d3 2300 	ldrd	r2, r3, [r3]
 801541c:	f7ea ff46 	bl	80002ac <__adddf3>
 8015420:	4622      	mov	r2, r4
 8015422:	462b      	mov	r3, r5
 8015424:	f7eb f8f8 	bl	8000618 <__aeabi_dmul>
 8015428:	a36f      	add	r3, pc, #444	; (adr r3, 80155e8 <__ieee754_pow+0x6f8>)
 801542a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801542e:	f7ea ff3d 	bl	80002ac <__adddf3>
 8015432:	4622      	mov	r2, r4
 8015434:	4606      	mov	r6, r0
 8015436:	460f      	mov	r7, r1
 8015438:	462b      	mov	r3, r5
 801543a:	4620      	mov	r0, r4
 801543c:	4629      	mov	r1, r5
 801543e:	f7eb f8eb 	bl	8000618 <__aeabi_dmul>
 8015442:	4602      	mov	r2, r0
 8015444:	460b      	mov	r3, r1
 8015446:	4630      	mov	r0, r6
 8015448:	4639      	mov	r1, r7
 801544a:	f7eb f8e5 	bl	8000618 <__aeabi_dmul>
 801544e:	4642      	mov	r2, r8
 8015450:	4604      	mov	r4, r0
 8015452:	460d      	mov	r5, r1
 8015454:	464b      	mov	r3, r9
 8015456:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801545a:	f7ea ff27 	bl	80002ac <__adddf3>
 801545e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8015462:	f7eb f8d9 	bl	8000618 <__aeabi_dmul>
 8015466:	4622      	mov	r2, r4
 8015468:	462b      	mov	r3, r5
 801546a:	f7ea ff1f 	bl	80002ac <__adddf3>
 801546e:	4642      	mov	r2, r8
 8015470:	4606      	mov	r6, r0
 8015472:	460f      	mov	r7, r1
 8015474:	464b      	mov	r3, r9
 8015476:	4640      	mov	r0, r8
 8015478:	4649      	mov	r1, r9
 801547a:	f7eb f8cd 	bl	8000618 <__aeabi_dmul>
 801547e:	2200      	movs	r2, #0
 8015480:	4b68      	ldr	r3, [pc, #416]	; (8015624 <__ieee754_pow+0x734>)
 8015482:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8015486:	f7ea ff11 	bl	80002ac <__adddf3>
 801548a:	4632      	mov	r2, r6
 801548c:	463b      	mov	r3, r7
 801548e:	f7ea ff0d 	bl	80002ac <__adddf3>
 8015492:	9802      	ldr	r0, [sp, #8]
 8015494:	460d      	mov	r5, r1
 8015496:	4604      	mov	r4, r0
 8015498:	4602      	mov	r2, r0
 801549a:	460b      	mov	r3, r1
 801549c:	4640      	mov	r0, r8
 801549e:	4649      	mov	r1, r9
 80154a0:	f7eb f8ba 	bl	8000618 <__aeabi_dmul>
 80154a4:	2200      	movs	r2, #0
 80154a6:	4680      	mov	r8, r0
 80154a8:	4689      	mov	r9, r1
 80154aa:	4b5e      	ldr	r3, [pc, #376]	; (8015624 <__ieee754_pow+0x734>)
 80154ac:	4620      	mov	r0, r4
 80154ae:	4629      	mov	r1, r5
 80154b0:	f7ea fefa 	bl	80002a8 <__aeabi_dsub>
 80154b4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80154b8:	f7ea fef6 	bl	80002a8 <__aeabi_dsub>
 80154bc:	4602      	mov	r2, r0
 80154be:	460b      	mov	r3, r1
 80154c0:	4630      	mov	r0, r6
 80154c2:	4639      	mov	r1, r7
 80154c4:	f7ea fef0 	bl	80002a8 <__aeabi_dsub>
 80154c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80154cc:	f7eb f8a4 	bl	8000618 <__aeabi_dmul>
 80154d0:	4622      	mov	r2, r4
 80154d2:	4606      	mov	r6, r0
 80154d4:	460f      	mov	r7, r1
 80154d6:	462b      	mov	r3, r5
 80154d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80154dc:	f7eb f89c 	bl	8000618 <__aeabi_dmul>
 80154e0:	4602      	mov	r2, r0
 80154e2:	460b      	mov	r3, r1
 80154e4:	4630      	mov	r0, r6
 80154e6:	4639      	mov	r1, r7
 80154e8:	f7ea fee0 	bl	80002ac <__adddf3>
 80154ec:	4606      	mov	r6, r0
 80154ee:	460f      	mov	r7, r1
 80154f0:	4602      	mov	r2, r0
 80154f2:	460b      	mov	r3, r1
 80154f4:	4640      	mov	r0, r8
 80154f6:	4649      	mov	r1, r9
 80154f8:	f7ea fed8 	bl	80002ac <__adddf3>
 80154fc:	9802      	ldr	r0, [sp, #8]
 80154fe:	a33c      	add	r3, pc, #240	; (adr r3, 80155f0 <__ieee754_pow+0x700>)
 8015500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015504:	4604      	mov	r4, r0
 8015506:	460d      	mov	r5, r1
 8015508:	f7eb f886 	bl	8000618 <__aeabi_dmul>
 801550c:	4642      	mov	r2, r8
 801550e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8015512:	464b      	mov	r3, r9
 8015514:	4620      	mov	r0, r4
 8015516:	4629      	mov	r1, r5
 8015518:	f7ea fec6 	bl	80002a8 <__aeabi_dsub>
 801551c:	4602      	mov	r2, r0
 801551e:	460b      	mov	r3, r1
 8015520:	4630      	mov	r0, r6
 8015522:	4639      	mov	r1, r7
 8015524:	f7ea fec0 	bl	80002a8 <__aeabi_dsub>
 8015528:	a333      	add	r3, pc, #204	; (adr r3, 80155f8 <__ieee754_pow+0x708>)
 801552a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801552e:	f7eb f873 	bl	8000618 <__aeabi_dmul>
 8015532:	a333      	add	r3, pc, #204	; (adr r3, 8015600 <__ieee754_pow+0x710>)
 8015534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015538:	4606      	mov	r6, r0
 801553a:	460f      	mov	r7, r1
 801553c:	4620      	mov	r0, r4
 801553e:	4629      	mov	r1, r5
 8015540:	f7eb f86a 	bl	8000618 <__aeabi_dmul>
 8015544:	4602      	mov	r2, r0
 8015546:	460b      	mov	r3, r1
 8015548:	4630      	mov	r0, r6
 801554a:	4639      	mov	r1, r7
 801554c:	f7ea feae 	bl	80002ac <__adddf3>
 8015550:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015552:	4b35      	ldr	r3, [pc, #212]	; (8015628 <__ieee754_pow+0x738>)
 8015554:	4413      	add	r3, r2
 8015556:	e9d3 2300 	ldrd	r2, r3, [r3]
 801555a:	f7ea fea7 	bl	80002ac <__adddf3>
 801555e:	4604      	mov	r4, r0
 8015560:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015562:	460d      	mov	r5, r1
 8015564:	f7ea ffee 	bl	8000544 <__aeabi_i2d>
 8015568:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801556a:	4b30      	ldr	r3, [pc, #192]	; (801562c <__ieee754_pow+0x73c>)
 801556c:	4413      	add	r3, r2
 801556e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8015572:	4606      	mov	r6, r0
 8015574:	460f      	mov	r7, r1
 8015576:	4622      	mov	r2, r4
 8015578:	462b      	mov	r3, r5
 801557a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801557e:	f7ea fe95 	bl	80002ac <__adddf3>
 8015582:	4642      	mov	r2, r8
 8015584:	464b      	mov	r3, r9
 8015586:	f7ea fe91 	bl	80002ac <__adddf3>
 801558a:	4632      	mov	r2, r6
 801558c:	463b      	mov	r3, r7
 801558e:	f7ea fe8d 	bl	80002ac <__adddf3>
 8015592:	9802      	ldr	r0, [sp, #8]
 8015594:	4632      	mov	r2, r6
 8015596:	463b      	mov	r3, r7
 8015598:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801559c:	f7ea fe84 	bl	80002a8 <__aeabi_dsub>
 80155a0:	4642      	mov	r2, r8
 80155a2:	464b      	mov	r3, r9
 80155a4:	f7ea fe80 	bl	80002a8 <__aeabi_dsub>
 80155a8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80155ac:	e607      	b.n	80151be <__ieee754_pow+0x2ce>
 80155ae:	f04f 0a01 	mov.w	sl, #1
 80155b2:	e6a5      	b.n	8015300 <__ieee754_pow+0x410>
 80155b4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8015608 <__ieee754_pow+0x718>
 80155b8:	e613      	b.n	80151e2 <__ieee754_pow+0x2f2>
 80155ba:	bf00      	nop
 80155bc:	f3af 8000 	nop.w
 80155c0:	4a454eef 	.word	0x4a454eef
 80155c4:	3fca7e28 	.word	0x3fca7e28
 80155c8:	93c9db65 	.word	0x93c9db65
 80155cc:	3fcd864a 	.word	0x3fcd864a
 80155d0:	a91d4101 	.word	0xa91d4101
 80155d4:	3fd17460 	.word	0x3fd17460
 80155d8:	518f264d 	.word	0x518f264d
 80155dc:	3fd55555 	.word	0x3fd55555
 80155e0:	db6fabff 	.word	0xdb6fabff
 80155e4:	3fdb6db6 	.word	0x3fdb6db6
 80155e8:	33333303 	.word	0x33333303
 80155ec:	3fe33333 	.word	0x3fe33333
 80155f0:	e0000000 	.word	0xe0000000
 80155f4:	3feec709 	.word	0x3feec709
 80155f8:	dc3a03fd 	.word	0xdc3a03fd
 80155fc:	3feec709 	.word	0x3feec709
 8015600:	145b01f5 	.word	0x145b01f5
 8015604:	be3e2fe0 	.word	0xbe3e2fe0
 8015608:	00000000 	.word	0x00000000
 801560c:	3ff00000 	.word	0x3ff00000
 8015610:	43400000 	.word	0x43400000
 8015614:	0003988e 	.word	0x0003988e
 8015618:	000bb679 	.word	0x000bb679
 801561c:	08028890 	.word	0x08028890
 8015620:	3ff00000 	.word	0x3ff00000
 8015624:	40080000 	.word	0x40080000
 8015628:	080288b0 	.word	0x080288b0
 801562c:	080288a0 	.word	0x080288a0
 8015630:	a3b4      	add	r3, pc, #720	; (adr r3, 8015904 <__ieee754_pow+0xa14>)
 8015632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015636:	4640      	mov	r0, r8
 8015638:	4649      	mov	r1, r9
 801563a:	f7ea fe37 	bl	80002ac <__adddf3>
 801563e:	4622      	mov	r2, r4
 8015640:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015644:	462b      	mov	r3, r5
 8015646:	4630      	mov	r0, r6
 8015648:	4639      	mov	r1, r7
 801564a:	f7ea fe2d 	bl	80002a8 <__aeabi_dsub>
 801564e:	4602      	mov	r2, r0
 8015650:	460b      	mov	r3, r1
 8015652:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015656:	f7eb fa6f 	bl	8000b38 <__aeabi_dcmpgt>
 801565a:	2800      	cmp	r0, #0
 801565c:	f47f adfe 	bne.w	801525c <__ieee754_pow+0x36c>
 8015660:	4aa3      	ldr	r2, [pc, #652]	; (80158f0 <__ieee754_pow+0xa00>)
 8015662:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8015666:	4293      	cmp	r3, r2
 8015668:	f340 810a 	ble.w	8015880 <__ieee754_pow+0x990>
 801566c:	151b      	asrs	r3, r3, #20
 801566e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8015672:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8015676:	fa4a f303 	asr.w	r3, sl, r3
 801567a:	445b      	add	r3, fp
 801567c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8015680:	4e9c      	ldr	r6, [pc, #624]	; (80158f4 <__ieee754_pow+0xa04>)
 8015682:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8015686:	4116      	asrs	r6, r2
 8015688:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 801568c:	2000      	movs	r0, #0
 801568e:	ea23 0106 	bic.w	r1, r3, r6
 8015692:	f1c2 0214 	rsb	r2, r2, #20
 8015696:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801569a:	fa4a fa02 	asr.w	sl, sl, r2
 801569e:	f1bb 0f00 	cmp.w	fp, #0
 80156a2:	4602      	mov	r2, r0
 80156a4:	460b      	mov	r3, r1
 80156a6:	4620      	mov	r0, r4
 80156a8:	4629      	mov	r1, r5
 80156aa:	bfb8      	it	lt
 80156ac:	f1ca 0a00 	rsblt	sl, sl, #0
 80156b0:	f7ea fdfa 	bl	80002a8 <__aeabi_dsub>
 80156b4:	e9cd 0100 	strd	r0, r1, [sp]
 80156b8:	4642      	mov	r2, r8
 80156ba:	464b      	mov	r3, r9
 80156bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80156c0:	f7ea fdf4 	bl	80002ac <__adddf3>
 80156c4:	2000      	movs	r0, #0
 80156c6:	a378      	add	r3, pc, #480	; (adr r3, 80158a8 <__ieee754_pow+0x9b8>)
 80156c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156cc:	4604      	mov	r4, r0
 80156ce:	460d      	mov	r5, r1
 80156d0:	f7ea ffa2 	bl	8000618 <__aeabi_dmul>
 80156d4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80156d8:	4606      	mov	r6, r0
 80156da:	460f      	mov	r7, r1
 80156dc:	4620      	mov	r0, r4
 80156de:	4629      	mov	r1, r5
 80156e0:	f7ea fde2 	bl	80002a8 <__aeabi_dsub>
 80156e4:	4602      	mov	r2, r0
 80156e6:	460b      	mov	r3, r1
 80156e8:	4640      	mov	r0, r8
 80156ea:	4649      	mov	r1, r9
 80156ec:	f7ea fddc 	bl	80002a8 <__aeabi_dsub>
 80156f0:	a36f      	add	r3, pc, #444	; (adr r3, 80158b0 <__ieee754_pow+0x9c0>)
 80156f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156f6:	f7ea ff8f 	bl	8000618 <__aeabi_dmul>
 80156fa:	a36f      	add	r3, pc, #444	; (adr r3, 80158b8 <__ieee754_pow+0x9c8>)
 80156fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015700:	4680      	mov	r8, r0
 8015702:	4689      	mov	r9, r1
 8015704:	4620      	mov	r0, r4
 8015706:	4629      	mov	r1, r5
 8015708:	f7ea ff86 	bl	8000618 <__aeabi_dmul>
 801570c:	4602      	mov	r2, r0
 801570e:	460b      	mov	r3, r1
 8015710:	4640      	mov	r0, r8
 8015712:	4649      	mov	r1, r9
 8015714:	f7ea fdca 	bl	80002ac <__adddf3>
 8015718:	4604      	mov	r4, r0
 801571a:	460d      	mov	r5, r1
 801571c:	4602      	mov	r2, r0
 801571e:	460b      	mov	r3, r1
 8015720:	4630      	mov	r0, r6
 8015722:	4639      	mov	r1, r7
 8015724:	f7ea fdc2 	bl	80002ac <__adddf3>
 8015728:	4632      	mov	r2, r6
 801572a:	463b      	mov	r3, r7
 801572c:	4680      	mov	r8, r0
 801572e:	4689      	mov	r9, r1
 8015730:	f7ea fdba 	bl	80002a8 <__aeabi_dsub>
 8015734:	4602      	mov	r2, r0
 8015736:	460b      	mov	r3, r1
 8015738:	4620      	mov	r0, r4
 801573a:	4629      	mov	r1, r5
 801573c:	f7ea fdb4 	bl	80002a8 <__aeabi_dsub>
 8015740:	4642      	mov	r2, r8
 8015742:	4606      	mov	r6, r0
 8015744:	460f      	mov	r7, r1
 8015746:	464b      	mov	r3, r9
 8015748:	4640      	mov	r0, r8
 801574a:	4649      	mov	r1, r9
 801574c:	f7ea ff64 	bl	8000618 <__aeabi_dmul>
 8015750:	a35b      	add	r3, pc, #364	; (adr r3, 80158c0 <__ieee754_pow+0x9d0>)
 8015752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015756:	4604      	mov	r4, r0
 8015758:	460d      	mov	r5, r1
 801575a:	f7ea ff5d 	bl	8000618 <__aeabi_dmul>
 801575e:	a35a      	add	r3, pc, #360	; (adr r3, 80158c8 <__ieee754_pow+0x9d8>)
 8015760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015764:	f7ea fda0 	bl	80002a8 <__aeabi_dsub>
 8015768:	4622      	mov	r2, r4
 801576a:	462b      	mov	r3, r5
 801576c:	f7ea ff54 	bl	8000618 <__aeabi_dmul>
 8015770:	a357      	add	r3, pc, #348	; (adr r3, 80158d0 <__ieee754_pow+0x9e0>)
 8015772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015776:	f7ea fd99 	bl	80002ac <__adddf3>
 801577a:	4622      	mov	r2, r4
 801577c:	462b      	mov	r3, r5
 801577e:	f7ea ff4b 	bl	8000618 <__aeabi_dmul>
 8015782:	a355      	add	r3, pc, #340	; (adr r3, 80158d8 <__ieee754_pow+0x9e8>)
 8015784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015788:	f7ea fd8e 	bl	80002a8 <__aeabi_dsub>
 801578c:	4622      	mov	r2, r4
 801578e:	462b      	mov	r3, r5
 8015790:	f7ea ff42 	bl	8000618 <__aeabi_dmul>
 8015794:	a352      	add	r3, pc, #328	; (adr r3, 80158e0 <__ieee754_pow+0x9f0>)
 8015796:	e9d3 2300 	ldrd	r2, r3, [r3]
 801579a:	f7ea fd87 	bl	80002ac <__adddf3>
 801579e:	4622      	mov	r2, r4
 80157a0:	462b      	mov	r3, r5
 80157a2:	f7ea ff39 	bl	8000618 <__aeabi_dmul>
 80157a6:	4602      	mov	r2, r0
 80157a8:	460b      	mov	r3, r1
 80157aa:	4640      	mov	r0, r8
 80157ac:	4649      	mov	r1, r9
 80157ae:	f7ea fd7b 	bl	80002a8 <__aeabi_dsub>
 80157b2:	4604      	mov	r4, r0
 80157b4:	460d      	mov	r5, r1
 80157b6:	4602      	mov	r2, r0
 80157b8:	460b      	mov	r3, r1
 80157ba:	4640      	mov	r0, r8
 80157bc:	4649      	mov	r1, r9
 80157be:	f7ea ff2b 	bl	8000618 <__aeabi_dmul>
 80157c2:	2200      	movs	r2, #0
 80157c4:	e9cd 0100 	strd	r0, r1, [sp]
 80157c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80157cc:	4620      	mov	r0, r4
 80157ce:	4629      	mov	r1, r5
 80157d0:	f7ea fd6a 	bl	80002a8 <__aeabi_dsub>
 80157d4:	4602      	mov	r2, r0
 80157d6:	460b      	mov	r3, r1
 80157d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80157dc:	f7eb f846 	bl	800086c <__aeabi_ddiv>
 80157e0:	4632      	mov	r2, r6
 80157e2:	4604      	mov	r4, r0
 80157e4:	460d      	mov	r5, r1
 80157e6:	463b      	mov	r3, r7
 80157e8:	4640      	mov	r0, r8
 80157ea:	4649      	mov	r1, r9
 80157ec:	f7ea ff14 	bl	8000618 <__aeabi_dmul>
 80157f0:	4632      	mov	r2, r6
 80157f2:	463b      	mov	r3, r7
 80157f4:	f7ea fd5a 	bl	80002ac <__adddf3>
 80157f8:	4602      	mov	r2, r0
 80157fa:	460b      	mov	r3, r1
 80157fc:	4620      	mov	r0, r4
 80157fe:	4629      	mov	r1, r5
 8015800:	f7ea fd52 	bl	80002a8 <__aeabi_dsub>
 8015804:	4642      	mov	r2, r8
 8015806:	464b      	mov	r3, r9
 8015808:	f7ea fd4e 	bl	80002a8 <__aeabi_dsub>
 801580c:	4602      	mov	r2, r0
 801580e:	460b      	mov	r3, r1
 8015810:	2000      	movs	r0, #0
 8015812:	4939      	ldr	r1, [pc, #228]	; (80158f8 <__ieee754_pow+0xa08>)
 8015814:	f7ea fd48 	bl	80002a8 <__aeabi_dsub>
 8015818:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 801581c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8015820:	4602      	mov	r2, r0
 8015822:	460b      	mov	r3, r1
 8015824:	da2f      	bge.n	8015886 <__ieee754_pow+0x996>
 8015826:	4650      	mov	r0, sl
 8015828:	ec43 2b10 	vmov	d0, r2, r3
 801582c:	f000 f9c0 	bl	8015bb0 <scalbn>
 8015830:	ec51 0b10 	vmov	r0, r1, d0
 8015834:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015838:	f7ff bbf1 	b.w	801501e <__ieee754_pow+0x12e>
 801583c:	4b2f      	ldr	r3, [pc, #188]	; (80158fc <__ieee754_pow+0xa0c>)
 801583e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8015842:	429e      	cmp	r6, r3
 8015844:	f77f af0c 	ble.w	8015660 <__ieee754_pow+0x770>
 8015848:	4b2d      	ldr	r3, [pc, #180]	; (8015900 <__ieee754_pow+0xa10>)
 801584a:	440b      	add	r3, r1
 801584c:	4303      	orrs	r3, r0
 801584e:	d00b      	beq.n	8015868 <__ieee754_pow+0x978>
 8015850:	a325      	add	r3, pc, #148	; (adr r3, 80158e8 <__ieee754_pow+0x9f8>)
 8015852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015856:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801585a:	f7ea fedd 	bl	8000618 <__aeabi_dmul>
 801585e:	a322      	add	r3, pc, #136	; (adr r3, 80158e8 <__ieee754_pow+0x9f8>)
 8015860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015864:	f7ff bbdb 	b.w	801501e <__ieee754_pow+0x12e>
 8015868:	4622      	mov	r2, r4
 801586a:	462b      	mov	r3, r5
 801586c:	f7ea fd1c 	bl	80002a8 <__aeabi_dsub>
 8015870:	4642      	mov	r2, r8
 8015872:	464b      	mov	r3, r9
 8015874:	f7eb f956 	bl	8000b24 <__aeabi_dcmpge>
 8015878:	2800      	cmp	r0, #0
 801587a:	f43f aef1 	beq.w	8015660 <__ieee754_pow+0x770>
 801587e:	e7e7      	b.n	8015850 <__ieee754_pow+0x960>
 8015880:	f04f 0a00 	mov.w	sl, #0
 8015884:	e718      	b.n	80156b8 <__ieee754_pow+0x7c8>
 8015886:	4621      	mov	r1, r4
 8015888:	e7d4      	b.n	8015834 <__ieee754_pow+0x944>
 801588a:	2000      	movs	r0, #0
 801588c:	491a      	ldr	r1, [pc, #104]	; (80158f8 <__ieee754_pow+0xa08>)
 801588e:	f7ff bb8f 	b.w	8014fb0 <__ieee754_pow+0xc0>
 8015892:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015896:	f7ff bb8b 	b.w	8014fb0 <__ieee754_pow+0xc0>
 801589a:	4630      	mov	r0, r6
 801589c:	4639      	mov	r1, r7
 801589e:	f7ff bb87 	b.w	8014fb0 <__ieee754_pow+0xc0>
 80158a2:	4693      	mov	fp, r2
 80158a4:	f7ff bb98 	b.w	8014fd8 <__ieee754_pow+0xe8>
 80158a8:	00000000 	.word	0x00000000
 80158ac:	3fe62e43 	.word	0x3fe62e43
 80158b0:	fefa39ef 	.word	0xfefa39ef
 80158b4:	3fe62e42 	.word	0x3fe62e42
 80158b8:	0ca86c39 	.word	0x0ca86c39
 80158bc:	be205c61 	.word	0xbe205c61
 80158c0:	72bea4d0 	.word	0x72bea4d0
 80158c4:	3e663769 	.word	0x3e663769
 80158c8:	c5d26bf1 	.word	0xc5d26bf1
 80158cc:	3ebbbd41 	.word	0x3ebbbd41
 80158d0:	af25de2c 	.word	0xaf25de2c
 80158d4:	3f11566a 	.word	0x3f11566a
 80158d8:	16bebd93 	.word	0x16bebd93
 80158dc:	3f66c16c 	.word	0x3f66c16c
 80158e0:	5555553e 	.word	0x5555553e
 80158e4:	3fc55555 	.word	0x3fc55555
 80158e8:	c2f8f359 	.word	0xc2f8f359
 80158ec:	01a56e1f 	.word	0x01a56e1f
 80158f0:	3fe00000 	.word	0x3fe00000
 80158f4:	000fffff 	.word	0x000fffff
 80158f8:	3ff00000 	.word	0x3ff00000
 80158fc:	4090cbff 	.word	0x4090cbff
 8015900:	3f6f3400 	.word	0x3f6f3400
 8015904:	652b82fe 	.word	0x652b82fe
 8015908:	3c971547 	.word	0x3c971547

0801590c <__ieee754_sqrt>:
 801590c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015910:	4955      	ldr	r1, [pc, #340]	; (8015a68 <__ieee754_sqrt+0x15c>)
 8015912:	ec55 4b10 	vmov	r4, r5, d0
 8015916:	43a9      	bics	r1, r5
 8015918:	462b      	mov	r3, r5
 801591a:	462a      	mov	r2, r5
 801591c:	d112      	bne.n	8015944 <__ieee754_sqrt+0x38>
 801591e:	ee10 2a10 	vmov	r2, s0
 8015922:	ee10 0a10 	vmov	r0, s0
 8015926:	4629      	mov	r1, r5
 8015928:	f7ea fe76 	bl	8000618 <__aeabi_dmul>
 801592c:	4602      	mov	r2, r0
 801592e:	460b      	mov	r3, r1
 8015930:	4620      	mov	r0, r4
 8015932:	4629      	mov	r1, r5
 8015934:	f7ea fcba 	bl	80002ac <__adddf3>
 8015938:	4604      	mov	r4, r0
 801593a:	460d      	mov	r5, r1
 801593c:	ec45 4b10 	vmov	d0, r4, r5
 8015940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015944:	2d00      	cmp	r5, #0
 8015946:	ee10 0a10 	vmov	r0, s0
 801594a:	4621      	mov	r1, r4
 801594c:	dc0f      	bgt.n	801596e <__ieee754_sqrt+0x62>
 801594e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8015952:	4330      	orrs	r0, r6
 8015954:	d0f2      	beq.n	801593c <__ieee754_sqrt+0x30>
 8015956:	b155      	cbz	r5, 801596e <__ieee754_sqrt+0x62>
 8015958:	ee10 2a10 	vmov	r2, s0
 801595c:	4620      	mov	r0, r4
 801595e:	4629      	mov	r1, r5
 8015960:	f7ea fca2 	bl	80002a8 <__aeabi_dsub>
 8015964:	4602      	mov	r2, r0
 8015966:	460b      	mov	r3, r1
 8015968:	f7ea ff80 	bl	800086c <__aeabi_ddiv>
 801596c:	e7e4      	b.n	8015938 <__ieee754_sqrt+0x2c>
 801596e:	151b      	asrs	r3, r3, #20
 8015970:	d073      	beq.n	8015a5a <__ieee754_sqrt+0x14e>
 8015972:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8015976:	07dd      	lsls	r5, r3, #31
 8015978:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801597c:	bf48      	it	mi
 801597e:	0fc8      	lsrmi	r0, r1, #31
 8015980:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8015984:	bf44      	itt	mi
 8015986:	0049      	lslmi	r1, r1, #1
 8015988:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 801598c:	2500      	movs	r5, #0
 801598e:	1058      	asrs	r0, r3, #1
 8015990:	0fcb      	lsrs	r3, r1, #31
 8015992:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8015996:	0049      	lsls	r1, r1, #1
 8015998:	2316      	movs	r3, #22
 801599a:	462c      	mov	r4, r5
 801599c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80159a0:	19a7      	adds	r7, r4, r6
 80159a2:	4297      	cmp	r7, r2
 80159a4:	bfde      	ittt	le
 80159a6:	19bc      	addle	r4, r7, r6
 80159a8:	1bd2      	suble	r2, r2, r7
 80159aa:	19ad      	addle	r5, r5, r6
 80159ac:	0fcf      	lsrs	r7, r1, #31
 80159ae:	3b01      	subs	r3, #1
 80159b0:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 80159b4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80159b8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80159bc:	d1f0      	bne.n	80159a0 <__ieee754_sqrt+0x94>
 80159be:	f04f 0c20 	mov.w	ip, #32
 80159c2:	469e      	mov	lr, r3
 80159c4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80159c8:	42a2      	cmp	r2, r4
 80159ca:	eb06 070e 	add.w	r7, r6, lr
 80159ce:	dc02      	bgt.n	80159d6 <__ieee754_sqrt+0xca>
 80159d0:	d112      	bne.n	80159f8 <__ieee754_sqrt+0xec>
 80159d2:	428f      	cmp	r7, r1
 80159d4:	d810      	bhi.n	80159f8 <__ieee754_sqrt+0xec>
 80159d6:	2f00      	cmp	r7, #0
 80159d8:	eb07 0e06 	add.w	lr, r7, r6
 80159dc:	da42      	bge.n	8015a64 <__ieee754_sqrt+0x158>
 80159de:	f1be 0f00 	cmp.w	lr, #0
 80159e2:	db3f      	blt.n	8015a64 <__ieee754_sqrt+0x158>
 80159e4:	f104 0801 	add.w	r8, r4, #1
 80159e8:	1b12      	subs	r2, r2, r4
 80159ea:	428f      	cmp	r7, r1
 80159ec:	bf88      	it	hi
 80159ee:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80159f2:	1bc9      	subs	r1, r1, r7
 80159f4:	4433      	add	r3, r6
 80159f6:	4644      	mov	r4, r8
 80159f8:	0052      	lsls	r2, r2, #1
 80159fa:	f1bc 0c01 	subs.w	ip, ip, #1
 80159fe:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8015a02:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8015a06:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8015a0a:	d1dd      	bne.n	80159c8 <__ieee754_sqrt+0xbc>
 8015a0c:	430a      	orrs	r2, r1
 8015a0e:	d006      	beq.n	8015a1e <__ieee754_sqrt+0x112>
 8015a10:	1c5c      	adds	r4, r3, #1
 8015a12:	bf13      	iteet	ne
 8015a14:	3301      	addne	r3, #1
 8015a16:	3501      	addeq	r5, #1
 8015a18:	4663      	moveq	r3, ip
 8015a1a:	f023 0301 	bicne.w	r3, r3, #1
 8015a1e:	106a      	asrs	r2, r5, #1
 8015a20:	085b      	lsrs	r3, r3, #1
 8015a22:	07e9      	lsls	r1, r5, #31
 8015a24:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8015a28:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8015a2c:	bf48      	it	mi
 8015a2e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8015a32:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8015a36:	461c      	mov	r4, r3
 8015a38:	e780      	b.n	801593c <__ieee754_sqrt+0x30>
 8015a3a:	0aca      	lsrs	r2, r1, #11
 8015a3c:	3815      	subs	r0, #21
 8015a3e:	0549      	lsls	r1, r1, #21
 8015a40:	2a00      	cmp	r2, #0
 8015a42:	d0fa      	beq.n	8015a3a <__ieee754_sqrt+0x12e>
 8015a44:	02d6      	lsls	r6, r2, #11
 8015a46:	d50a      	bpl.n	8015a5e <__ieee754_sqrt+0x152>
 8015a48:	f1c3 0420 	rsb	r4, r3, #32
 8015a4c:	fa21 f404 	lsr.w	r4, r1, r4
 8015a50:	1e5d      	subs	r5, r3, #1
 8015a52:	4099      	lsls	r1, r3
 8015a54:	4322      	orrs	r2, r4
 8015a56:	1b43      	subs	r3, r0, r5
 8015a58:	e78b      	b.n	8015972 <__ieee754_sqrt+0x66>
 8015a5a:	4618      	mov	r0, r3
 8015a5c:	e7f0      	b.n	8015a40 <__ieee754_sqrt+0x134>
 8015a5e:	0052      	lsls	r2, r2, #1
 8015a60:	3301      	adds	r3, #1
 8015a62:	e7ef      	b.n	8015a44 <__ieee754_sqrt+0x138>
 8015a64:	46a0      	mov	r8, r4
 8015a66:	e7bf      	b.n	80159e8 <__ieee754_sqrt+0xdc>
 8015a68:	7ff00000 	.word	0x7ff00000

08015a6c <fabs>:
 8015a6c:	ec51 0b10 	vmov	r0, r1, d0
 8015a70:	ee10 2a10 	vmov	r2, s0
 8015a74:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8015a78:	ec43 2b10 	vmov	d0, r2, r3
 8015a7c:	4770      	bx	lr

08015a7e <finite>:
 8015a7e:	ee10 3a90 	vmov	r3, s1
 8015a82:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8015a86:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8015a8a:	0fc0      	lsrs	r0, r0, #31
 8015a8c:	4770      	bx	lr

08015a8e <matherr>:
 8015a8e:	2000      	movs	r0, #0
 8015a90:	4770      	bx	lr
 8015a92:	0000      	movs	r0, r0
 8015a94:	0000      	movs	r0, r0
	...

08015a98 <nan>:
 8015a98:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8015aa0 <nan+0x8>
 8015a9c:	4770      	bx	lr
 8015a9e:	bf00      	nop
 8015aa0:	00000000 	.word	0x00000000
 8015aa4:	7ff80000 	.word	0x7ff80000

08015aa8 <rint>:
 8015aa8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015aaa:	ec51 0b10 	vmov	r0, r1, d0
 8015aae:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8015ab2:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8015ab6:	2e13      	cmp	r6, #19
 8015ab8:	460b      	mov	r3, r1
 8015aba:	ee10 4a10 	vmov	r4, s0
 8015abe:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8015ac2:	dc56      	bgt.n	8015b72 <rint+0xca>
 8015ac4:	2e00      	cmp	r6, #0
 8015ac6:	da2b      	bge.n	8015b20 <rint+0x78>
 8015ac8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8015acc:	4302      	orrs	r2, r0
 8015ace:	d023      	beq.n	8015b18 <rint+0x70>
 8015ad0:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8015ad4:	4302      	orrs	r2, r0
 8015ad6:	4254      	negs	r4, r2
 8015ad8:	4314      	orrs	r4, r2
 8015ada:	0c4b      	lsrs	r3, r1, #17
 8015adc:	0b24      	lsrs	r4, r4, #12
 8015ade:	045b      	lsls	r3, r3, #17
 8015ae0:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8015ae4:	ea44 0103 	orr.w	r1, r4, r3
 8015ae8:	460b      	mov	r3, r1
 8015aea:	492f      	ldr	r1, [pc, #188]	; (8015ba8 <rint+0x100>)
 8015aec:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8015af0:	e9d1 6700 	ldrd	r6, r7, [r1]
 8015af4:	4602      	mov	r2, r0
 8015af6:	4639      	mov	r1, r7
 8015af8:	4630      	mov	r0, r6
 8015afa:	f7ea fbd7 	bl	80002ac <__adddf3>
 8015afe:	e9cd 0100 	strd	r0, r1, [sp]
 8015b02:	463b      	mov	r3, r7
 8015b04:	4632      	mov	r2, r6
 8015b06:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015b0a:	f7ea fbcd 	bl	80002a8 <__aeabi_dsub>
 8015b0e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8015b12:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8015b16:	4639      	mov	r1, r7
 8015b18:	ec41 0b10 	vmov	d0, r0, r1
 8015b1c:	b003      	add	sp, #12
 8015b1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015b20:	4a22      	ldr	r2, [pc, #136]	; (8015bac <rint+0x104>)
 8015b22:	4132      	asrs	r2, r6
 8015b24:	ea01 0702 	and.w	r7, r1, r2
 8015b28:	4307      	orrs	r7, r0
 8015b2a:	d0f5      	beq.n	8015b18 <rint+0x70>
 8015b2c:	0852      	lsrs	r2, r2, #1
 8015b2e:	4011      	ands	r1, r2
 8015b30:	430c      	orrs	r4, r1
 8015b32:	d00b      	beq.n	8015b4c <rint+0xa4>
 8015b34:	ea23 0202 	bic.w	r2, r3, r2
 8015b38:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8015b3c:	2e13      	cmp	r6, #19
 8015b3e:	fa43 f306 	asr.w	r3, r3, r6
 8015b42:	bf0c      	ite	eq
 8015b44:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8015b48:	2400      	movne	r4, #0
 8015b4a:	4313      	orrs	r3, r2
 8015b4c:	4916      	ldr	r1, [pc, #88]	; (8015ba8 <rint+0x100>)
 8015b4e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8015b52:	4622      	mov	r2, r4
 8015b54:	e9d5 4500 	ldrd	r4, r5, [r5]
 8015b58:	4620      	mov	r0, r4
 8015b5a:	4629      	mov	r1, r5
 8015b5c:	f7ea fba6 	bl	80002ac <__adddf3>
 8015b60:	e9cd 0100 	strd	r0, r1, [sp]
 8015b64:	4622      	mov	r2, r4
 8015b66:	462b      	mov	r3, r5
 8015b68:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015b6c:	f7ea fb9c 	bl	80002a8 <__aeabi_dsub>
 8015b70:	e7d2      	b.n	8015b18 <rint+0x70>
 8015b72:	2e33      	cmp	r6, #51	; 0x33
 8015b74:	dd07      	ble.n	8015b86 <rint+0xde>
 8015b76:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8015b7a:	d1cd      	bne.n	8015b18 <rint+0x70>
 8015b7c:	ee10 2a10 	vmov	r2, s0
 8015b80:	f7ea fb94 	bl	80002ac <__adddf3>
 8015b84:	e7c8      	b.n	8015b18 <rint+0x70>
 8015b86:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8015b8a:	f04f 32ff 	mov.w	r2, #4294967295
 8015b8e:	40f2      	lsrs	r2, r6
 8015b90:	4210      	tst	r0, r2
 8015b92:	d0c1      	beq.n	8015b18 <rint+0x70>
 8015b94:	0852      	lsrs	r2, r2, #1
 8015b96:	4210      	tst	r0, r2
 8015b98:	bf1f      	itttt	ne
 8015b9a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8015b9e:	ea20 0202 	bicne.w	r2, r0, r2
 8015ba2:	4134      	asrne	r4, r6
 8015ba4:	4314      	orrne	r4, r2
 8015ba6:	e7d1      	b.n	8015b4c <rint+0xa4>
 8015ba8:	080288c0 	.word	0x080288c0
 8015bac:	000fffff 	.word	0x000fffff

08015bb0 <scalbn>:
 8015bb0:	b570      	push	{r4, r5, r6, lr}
 8015bb2:	ec55 4b10 	vmov	r4, r5, d0
 8015bb6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8015bba:	4606      	mov	r6, r0
 8015bbc:	462b      	mov	r3, r5
 8015bbe:	b9aa      	cbnz	r2, 8015bec <scalbn+0x3c>
 8015bc0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8015bc4:	4323      	orrs	r3, r4
 8015bc6:	d03b      	beq.n	8015c40 <scalbn+0x90>
 8015bc8:	4b31      	ldr	r3, [pc, #196]	; (8015c90 <scalbn+0xe0>)
 8015bca:	4629      	mov	r1, r5
 8015bcc:	2200      	movs	r2, #0
 8015bce:	ee10 0a10 	vmov	r0, s0
 8015bd2:	f7ea fd21 	bl	8000618 <__aeabi_dmul>
 8015bd6:	4b2f      	ldr	r3, [pc, #188]	; (8015c94 <scalbn+0xe4>)
 8015bd8:	429e      	cmp	r6, r3
 8015bda:	4604      	mov	r4, r0
 8015bdc:	460d      	mov	r5, r1
 8015bde:	da12      	bge.n	8015c06 <scalbn+0x56>
 8015be0:	a327      	add	r3, pc, #156	; (adr r3, 8015c80 <scalbn+0xd0>)
 8015be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015be6:	f7ea fd17 	bl	8000618 <__aeabi_dmul>
 8015bea:	e009      	b.n	8015c00 <scalbn+0x50>
 8015bec:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8015bf0:	428a      	cmp	r2, r1
 8015bf2:	d10c      	bne.n	8015c0e <scalbn+0x5e>
 8015bf4:	ee10 2a10 	vmov	r2, s0
 8015bf8:	4620      	mov	r0, r4
 8015bfa:	4629      	mov	r1, r5
 8015bfc:	f7ea fb56 	bl	80002ac <__adddf3>
 8015c00:	4604      	mov	r4, r0
 8015c02:	460d      	mov	r5, r1
 8015c04:	e01c      	b.n	8015c40 <scalbn+0x90>
 8015c06:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8015c0a:	460b      	mov	r3, r1
 8015c0c:	3a36      	subs	r2, #54	; 0x36
 8015c0e:	4432      	add	r2, r6
 8015c10:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8015c14:	428a      	cmp	r2, r1
 8015c16:	dd0b      	ble.n	8015c30 <scalbn+0x80>
 8015c18:	ec45 4b11 	vmov	d1, r4, r5
 8015c1c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8015c88 <scalbn+0xd8>
 8015c20:	f000 f83c 	bl	8015c9c <copysign>
 8015c24:	a318      	add	r3, pc, #96	; (adr r3, 8015c88 <scalbn+0xd8>)
 8015c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c2a:	ec51 0b10 	vmov	r0, r1, d0
 8015c2e:	e7da      	b.n	8015be6 <scalbn+0x36>
 8015c30:	2a00      	cmp	r2, #0
 8015c32:	dd08      	ble.n	8015c46 <scalbn+0x96>
 8015c34:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8015c38:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8015c3c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8015c40:	ec45 4b10 	vmov	d0, r4, r5
 8015c44:	bd70      	pop	{r4, r5, r6, pc}
 8015c46:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8015c4a:	da0d      	bge.n	8015c68 <scalbn+0xb8>
 8015c4c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8015c50:	429e      	cmp	r6, r3
 8015c52:	ec45 4b11 	vmov	d1, r4, r5
 8015c56:	dce1      	bgt.n	8015c1c <scalbn+0x6c>
 8015c58:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8015c80 <scalbn+0xd0>
 8015c5c:	f000 f81e 	bl	8015c9c <copysign>
 8015c60:	a307      	add	r3, pc, #28	; (adr r3, 8015c80 <scalbn+0xd0>)
 8015c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c66:	e7e0      	b.n	8015c2a <scalbn+0x7a>
 8015c68:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8015c6c:	3236      	adds	r2, #54	; 0x36
 8015c6e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8015c72:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8015c76:	4620      	mov	r0, r4
 8015c78:	4629      	mov	r1, r5
 8015c7a:	2200      	movs	r2, #0
 8015c7c:	4b06      	ldr	r3, [pc, #24]	; (8015c98 <scalbn+0xe8>)
 8015c7e:	e7b2      	b.n	8015be6 <scalbn+0x36>
 8015c80:	c2f8f359 	.word	0xc2f8f359
 8015c84:	01a56e1f 	.word	0x01a56e1f
 8015c88:	8800759c 	.word	0x8800759c
 8015c8c:	7e37e43c 	.word	0x7e37e43c
 8015c90:	43500000 	.word	0x43500000
 8015c94:	ffff3cb0 	.word	0xffff3cb0
 8015c98:	3c900000 	.word	0x3c900000

08015c9c <copysign>:
 8015c9c:	ec51 0b10 	vmov	r0, r1, d0
 8015ca0:	ee11 0a90 	vmov	r0, s3
 8015ca4:	ee10 2a10 	vmov	r2, s0
 8015ca8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8015cac:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8015cb0:	ea41 0300 	orr.w	r3, r1, r0
 8015cb4:	ec43 2b10 	vmov	d0, r2, r3
 8015cb8:	4770      	bx	lr
	...

08015cbc <_init>:
 8015cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015cbe:	bf00      	nop
 8015cc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015cc2:	bc08      	pop	{r3}
 8015cc4:	469e      	mov	lr, r3
 8015cc6:	4770      	bx	lr

08015cc8 <_fini>:
 8015cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015cca:	bf00      	nop
 8015ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015cce:	bc08      	pop	{r3}
 8015cd0:	469e      	mov	lr, r3
 8015cd2:	4770      	bx	lr
