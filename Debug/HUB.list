
HUB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018754  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00012d70  080188e8  080188e8  000288e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802b658  0802b658  000402b0  2**0
                  CONTENTS
  4 .ARM          00000008  0802b658  0802b658  0003b658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802b660  0802b660  000402b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802b660  0802b660  0003b660  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802b664  0802b664  0003b664  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002b0  20000000  0802b668  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008708  200002b0  0802b918  000402b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200089b8  0802b918  000489b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000402b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000392ab  00000000  00000000  000402e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000773d  00000000  00000000  0007958b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000027b8  00000000  00000000  00080cc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002450  00000000  00000000  00083480  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002de3e  00000000  00000000  000858d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000298fa  00000000  00000000  000b370e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e75de  00000000  00000000  000dd008  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001c45e6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b1cc  00000000  00000000  001c4664  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002b0 	.word	0x200002b0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080188cc 	.word	0x080188cc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002b4 	.word	0x200002b4
 80001cc:	080188cc 	.word	0x080188cc

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b972 	b.w	8000fa4 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9e08      	ldr	r6, [sp, #32]
 8000cde:	4604      	mov	r4, r0
 8000ce0:	4688      	mov	r8, r1
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d14b      	bne.n	8000d7e <__udivmoddi4+0xa6>
 8000ce6:	428a      	cmp	r2, r1
 8000ce8:	4615      	mov	r5, r2
 8000cea:	d967      	bls.n	8000dbc <__udivmoddi4+0xe4>
 8000cec:	fab2 f282 	clz	r2, r2
 8000cf0:	b14a      	cbz	r2, 8000d06 <__udivmoddi4+0x2e>
 8000cf2:	f1c2 0720 	rsb	r7, r2, #32
 8000cf6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cfa:	fa20 f707 	lsr.w	r7, r0, r7
 8000cfe:	4095      	lsls	r5, r2
 8000d00:	ea47 0803 	orr.w	r8, r7, r3
 8000d04:	4094      	lsls	r4, r2
 8000d06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d0a:	0c23      	lsrs	r3, r4, #16
 8000d0c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d10:	fa1f fc85 	uxth.w	ip, r5
 8000d14:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d18:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d1c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d20:	4299      	cmp	r1, r3
 8000d22:	d909      	bls.n	8000d38 <__udivmoddi4+0x60>
 8000d24:	18eb      	adds	r3, r5, r3
 8000d26:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d2a:	f080 811b 	bcs.w	8000f64 <__udivmoddi4+0x28c>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 8118 	bls.w	8000f64 <__udivmoddi4+0x28c>
 8000d34:	3f02      	subs	r7, #2
 8000d36:	442b      	add	r3, r5
 8000d38:	1a5b      	subs	r3, r3, r1
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d48:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d4c:	45a4      	cmp	ip, r4
 8000d4e:	d909      	bls.n	8000d64 <__udivmoddi4+0x8c>
 8000d50:	192c      	adds	r4, r5, r4
 8000d52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d56:	f080 8107 	bcs.w	8000f68 <__udivmoddi4+0x290>
 8000d5a:	45a4      	cmp	ip, r4
 8000d5c:	f240 8104 	bls.w	8000f68 <__udivmoddi4+0x290>
 8000d60:	3802      	subs	r0, #2
 8000d62:	442c      	add	r4, r5
 8000d64:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d68:	eba4 040c 	sub.w	r4, r4, ip
 8000d6c:	2700      	movs	r7, #0
 8000d6e:	b11e      	cbz	r6, 8000d78 <__udivmoddi4+0xa0>
 8000d70:	40d4      	lsrs	r4, r2
 8000d72:	2300      	movs	r3, #0
 8000d74:	e9c6 4300 	strd	r4, r3, [r6]
 8000d78:	4639      	mov	r1, r7
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0xbe>
 8000d82:	2e00      	cmp	r6, #0
 8000d84:	f000 80eb 	beq.w	8000f5e <__udivmoddi4+0x286>
 8000d88:	2700      	movs	r7, #0
 8000d8a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d8e:	4638      	mov	r0, r7
 8000d90:	4639      	mov	r1, r7
 8000d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d96:	fab3 f783 	clz	r7, r3
 8000d9a:	2f00      	cmp	r7, #0
 8000d9c:	d147      	bne.n	8000e2e <__udivmoddi4+0x156>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d302      	bcc.n	8000da8 <__udivmoddi4+0xd0>
 8000da2:	4282      	cmp	r2, r0
 8000da4:	f200 80fa 	bhi.w	8000f9c <__udivmoddi4+0x2c4>
 8000da8:	1a84      	subs	r4, r0, r2
 8000daa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dae:	2001      	movs	r0, #1
 8000db0:	4698      	mov	r8, r3
 8000db2:	2e00      	cmp	r6, #0
 8000db4:	d0e0      	beq.n	8000d78 <__udivmoddi4+0xa0>
 8000db6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dba:	e7dd      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000dbc:	b902      	cbnz	r2, 8000dc0 <__udivmoddi4+0xe8>
 8000dbe:	deff      	udf	#255	; 0xff
 8000dc0:	fab2 f282 	clz	r2, r2
 8000dc4:	2a00      	cmp	r2, #0
 8000dc6:	f040 808f 	bne.w	8000ee8 <__udivmoddi4+0x210>
 8000dca:	1b49      	subs	r1, r1, r5
 8000dcc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dd0:	fa1f f885 	uxth.w	r8, r5
 8000dd4:	2701      	movs	r7, #1
 8000dd6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dda:	0c23      	lsrs	r3, r4, #16
 8000ddc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000de0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000de4:	fb08 f10c 	mul.w	r1, r8, ip
 8000de8:	4299      	cmp	r1, r3
 8000dea:	d907      	bls.n	8000dfc <__udivmoddi4+0x124>
 8000dec:	18eb      	adds	r3, r5, r3
 8000dee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000df2:	d202      	bcs.n	8000dfa <__udivmoddi4+0x122>
 8000df4:	4299      	cmp	r1, r3
 8000df6:	f200 80cd 	bhi.w	8000f94 <__udivmoddi4+0x2bc>
 8000dfa:	4684      	mov	ip, r0
 8000dfc:	1a59      	subs	r1, r3, r1
 8000dfe:	b2a3      	uxth	r3, r4
 8000e00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e04:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e08:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e0c:	fb08 f800 	mul.w	r8, r8, r0
 8000e10:	45a0      	cmp	r8, r4
 8000e12:	d907      	bls.n	8000e24 <__udivmoddi4+0x14c>
 8000e14:	192c      	adds	r4, r5, r4
 8000e16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e1a:	d202      	bcs.n	8000e22 <__udivmoddi4+0x14a>
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	f200 80b6 	bhi.w	8000f8e <__udivmoddi4+0x2b6>
 8000e22:	4618      	mov	r0, r3
 8000e24:	eba4 0408 	sub.w	r4, r4, r8
 8000e28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e2c:	e79f      	b.n	8000d6e <__udivmoddi4+0x96>
 8000e2e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e32:	40bb      	lsls	r3, r7
 8000e34:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e38:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e3c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e40:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e44:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e48:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e4c:	4325      	orrs	r5, r4
 8000e4e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e52:	0c2c      	lsrs	r4, r5, #16
 8000e54:	fb08 3319 	mls	r3, r8, r9, r3
 8000e58:	fa1f fa8e 	uxth.w	sl, lr
 8000e5c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e60:	fb09 f40a 	mul.w	r4, r9, sl
 8000e64:	429c      	cmp	r4, r3
 8000e66:	fa02 f207 	lsl.w	r2, r2, r7
 8000e6a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e6e:	d90b      	bls.n	8000e88 <__udivmoddi4+0x1b0>
 8000e70:	eb1e 0303 	adds.w	r3, lr, r3
 8000e74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e78:	f080 8087 	bcs.w	8000f8a <__udivmoddi4+0x2b2>
 8000e7c:	429c      	cmp	r4, r3
 8000e7e:	f240 8084 	bls.w	8000f8a <__udivmoddi4+0x2b2>
 8000e82:	f1a9 0902 	sub.w	r9, r9, #2
 8000e86:	4473      	add	r3, lr
 8000e88:	1b1b      	subs	r3, r3, r4
 8000e8a:	b2ad      	uxth	r5, r5
 8000e8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e90:	fb08 3310 	mls	r3, r8, r0, r3
 8000e94:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e98:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e9c:	45a2      	cmp	sl, r4
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x1da>
 8000ea0:	eb1e 0404 	adds.w	r4, lr, r4
 8000ea4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ea8:	d26b      	bcs.n	8000f82 <__udivmoddi4+0x2aa>
 8000eaa:	45a2      	cmp	sl, r4
 8000eac:	d969      	bls.n	8000f82 <__udivmoddi4+0x2aa>
 8000eae:	3802      	subs	r0, #2
 8000eb0:	4474      	add	r4, lr
 8000eb2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eb6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eba:	eba4 040a 	sub.w	r4, r4, sl
 8000ebe:	454c      	cmp	r4, r9
 8000ec0:	46c2      	mov	sl, r8
 8000ec2:	464b      	mov	r3, r9
 8000ec4:	d354      	bcc.n	8000f70 <__udivmoddi4+0x298>
 8000ec6:	d051      	beq.n	8000f6c <__udivmoddi4+0x294>
 8000ec8:	2e00      	cmp	r6, #0
 8000eca:	d069      	beq.n	8000fa0 <__udivmoddi4+0x2c8>
 8000ecc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ed0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ed4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ed8:	40fd      	lsrs	r5, r7
 8000eda:	40fc      	lsrs	r4, r7
 8000edc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ee0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ee4:	2700      	movs	r7, #0
 8000ee6:	e747      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000ee8:	f1c2 0320 	rsb	r3, r2, #32
 8000eec:	fa20 f703 	lsr.w	r7, r0, r3
 8000ef0:	4095      	lsls	r5, r2
 8000ef2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ef6:	fa21 f303 	lsr.w	r3, r1, r3
 8000efa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000efe:	4338      	orrs	r0, r7
 8000f00:	0c01      	lsrs	r1, r0, #16
 8000f02:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f06:	fa1f f885 	uxth.w	r8, r5
 8000f0a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f12:	fb07 f308 	mul.w	r3, r7, r8
 8000f16:	428b      	cmp	r3, r1
 8000f18:	fa04 f402 	lsl.w	r4, r4, r2
 8000f1c:	d907      	bls.n	8000f2e <__udivmoddi4+0x256>
 8000f1e:	1869      	adds	r1, r5, r1
 8000f20:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f24:	d22f      	bcs.n	8000f86 <__udivmoddi4+0x2ae>
 8000f26:	428b      	cmp	r3, r1
 8000f28:	d92d      	bls.n	8000f86 <__udivmoddi4+0x2ae>
 8000f2a:	3f02      	subs	r7, #2
 8000f2c:	4429      	add	r1, r5
 8000f2e:	1acb      	subs	r3, r1, r3
 8000f30:	b281      	uxth	r1, r0
 8000f32:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f36:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f3e:	fb00 f308 	mul.w	r3, r0, r8
 8000f42:	428b      	cmp	r3, r1
 8000f44:	d907      	bls.n	8000f56 <__udivmoddi4+0x27e>
 8000f46:	1869      	adds	r1, r5, r1
 8000f48:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f4c:	d217      	bcs.n	8000f7e <__udivmoddi4+0x2a6>
 8000f4e:	428b      	cmp	r3, r1
 8000f50:	d915      	bls.n	8000f7e <__udivmoddi4+0x2a6>
 8000f52:	3802      	subs	r0, #2
 8000f54:	4429      	add	r1, r5
 8000f56:	1ac9      	subs	r1, r1, r3
 8000f58:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f5c:	e73b      	b.n	8000dd6 <__udivmoddi4+0xfe>
 8000f5e:	4637      	mov	r7, r6
 8000f60:	4630      	mov	r0, r6
 8000f62:	e709      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000f64:	4607      	mov	r7, r0
 8000f66:	e6e7      	b.n	8000d38 <__udivmoddi4+0x60>
 8000f68:	4618      	mov	r0, r3
 8000f6a:	e6fb      	b.n	8000d64 <__udivmoddi4+0x8c>
 8000f6c:	4541      	cmp	r1, r8
 8000f6e:	d2ab      	bcs.n	8000ec8 <__udivmoddi4+0x1f0>
 8000f70:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f74:	eb69 020e 	sbc.w	r2, r9, lr
 8000f78:	3801      	subs	r0, #1
 8000f7a:	4613      	mov	r3, r2
 8000f7c:	e7a4      	b.n	8000ec8 <__udivmoddi4+0x1f0>
 8000f7e:	4660      	mov	r0, ip
 8000f80:	e7e9      	b.n	8000f56 <__udivmoddi4+0x27e>
 8000f82:	4618      	mov	r0, r3
 8000f84:	e795      	b.n	8000eb2 <__udivmoddi4+0x1da>
 8000f86:	4667      	mov	r7, ip
 8000f88:	e7d1      	b.n	8000f2e <__udivmoddi4+0x256>
 8000f8a:	4681      	mov	r9, r0
 8000f8c:	e77c      	b.n	8000e88 <__udivmoddi4+0x1b0>
 8000f8e:	3802      	subs	r0, #2
 8000f90:	442c      	add	r4, r5
 8000f92:	e747      	b.n	8000e24 <__udivmoddi4+0x14c>
 8000f94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f98:	442b      	add	r3, r5
 8000f9a:	e72f      	b.n	8000dfc <__udivmoddi4+0x124>
 8000f9c:	4638      	mov	r0, r7
 8000f9e:	e708      	b.n	8000db2 <__udivmoddi4+0xda>
 8000fa0:	4637      	mov	r7, r6
 8000fa2:	e6e9      	b.n	8000d78 <__udivmoddi4+0xa0>

08000fa4 <__aeabi_idiv0>:
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop

08000fa8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fac:	4b0e      	ldr	r3, [pc, #56]	; (8000fe8 <HAL_Init+0x40>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a0d      	ldr	r2, [pc, #52]	; (8000fe8 <HAL_Init+0x40>)
 8000fb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fb6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fb8:	4b0b      	ldr	r3, [pc, #44]	; (8000fe8 <HAL_Init+0x40>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a0a      	ldr	r2, [pc, #40]	; (8000fe8 <HAL_Init+0x40>)
 8000fbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fc2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fc4:	4b08      	ldr	r3, [pc, #32]	; (8000fe8 <HAL_Init+0x40>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a07      	ldr	r2, [pc, #28]	; (8000fe8 <HAL_Init+0x40>)
 8000fca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fd0:	2003      	movs	r0, #3
 8000fd2:	f000 ff58 	bl	8001e86 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fd6:	2000      	movs	r0, #0
 8000fd8:	f013 fea2 	bl	8014d20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fdc:	f013 fab8 	bl	8014550 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fe0:	2300      	movs	r3, #0
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40023c00 	.word	0x40023c00

08000fec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ff0:	4b06      	ldr	r3, [pc, #24]	; (800100c <HAL_IncTick+0x20>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	4b06      	ldr	r3, [pc, #24]	; (8001010 <HAL_IncTick+0x24>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	4a04      	ldr	r2, [pc, #16]	; (8001010 <HAL_IncTick+0x24>)
 8000ffe:	6013      	str	r3, [r2, #0]
}
 8001000:	bf00      	nop
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	20000000 	.word	0x20000000
 8001010:	20006c50 	.word	0x20006c50

08001014 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  return uwTick;
 8001018:	4b03      	ldr	r3, [pc, #12]	; (8001028 <HAL_GetTick+0x14>)
 800101a:	681b      	ldr	r3, [r3, #0]
}
 800101c:	4618      	mov	r0, r3
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	20006c50 	.word	0x20006c50

0800102c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001034:	f7ff ffee 	bl	8001014 <HAL_GetTick>
 8001038:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001044:	d005      	beq.n	8001052 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001046:	4b09      	ldr	r3, [pc, #36]	; (800106c <HAL_Delay+0x40>)
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	461a      	mov	r2, r3
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	4413      	add	r3, r2
 8001050:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001052:	bf00      	nop
 8001054:	f7ff ffde 	bl	8001014 <HAL_GetTick>
 8001058:	4602      	mov	r2, r0
 800105a:	68bb      	ldr	r3, [r7, #8]
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	68fa      	ldr	r2, [r7, #12]
 8001060:	429a      	cmp	r2, r3
 8001062:	d8f7      	bhi.n	8001054 <HAL_Delay+0x28>
  {
  }
}
 8001064:	bf00      	nop
 8001066:	3710      	adds	r7, #16
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	20000000 	.word	0x20000000

08001070 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d101      	bne.n	8001082 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800107e:	2301      	movs	r3, #1
 8001080:	e0ed      	b.n	800125e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001088:	b2db      	uxtb	r3, r3
 800108a:	2b00      	cmp	r3, #0
 800108c:	d102      	bne.n	8001094 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	f013 fa8a 	bl	80145a8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f022 0202 	bic.w	r2, r2, #2
 80010a2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010a4:	f7ff ffb6 	bl	8001014 <HAL_GetTick>
 80010a8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80010aa:	e012      	b.n	80010d2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80010ac:	f7ff ffb2 	bl	8001014 <HAL_GetTick>
 80010b0:	4602      	mov	r2, r0
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	2b0a      	cmp	r3, #10
 80010b8:	d90b      	bls.n	80010d2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010be:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2205      	movs	r2, #5
 80010ca:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	e0c5      	b.n	800125e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f003 0302 	and.w	r3, r3, #2
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d1e5      	bne.n	80010ac <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f042 0201 	orr.w	r2, r2, #1
 80010ee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010f0:	f7ff ff90 	bl	8001014 <HAL_GetTick>
 80010f4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80010f6:	e012      	b.n	800111e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80010f8:	f7ff ff8c 	bl	8001014 <HAL_GetTick>
 80010fc:	4602      	mov	r2, r0
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	2b0a      	cmp	r3, #10
 8001104:	d90b      	bls.n	800111e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800110a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2205      	movs	r2, #5
 8001116:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
 800111c:	e09f      	b.n	800125e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f003 0301 	and.w	r3, r3, #1
 8001128:	2b00      	cmp	r3, #0
 800112a:	d0e5      	beq.n	80010f8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	7e1b      	ldrb	r3, [r3, #24]
 8001130:	2b01      	cmp	r3, #1
 8001132:	d108      	bne.n	8001146 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	e007      	b.n	8001156 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001154:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	7e5b      	ldrb	r3, [r3, #25]
 800115a:	2b01      	cmp	r3, #1
 800115c:	d108      	bne.n	8001170 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800116c:	601a      	str	r2, [r3, #0]
 800116e:	e007      	b.n	8001180 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800117e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	7e9b      	ldrb	r3, [r3, #26]
 8001184:	2b01      	cmp	r3, #1
 8001186:	d108      	bne.n	800119a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f042 0220 	orr.w	r2, r2, #32
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	e007      	b.n	80011aa <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f022 0220 	bic.w	r2, r2, #32
 80011a8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	7edb      	ldrb	r3, [r3, #27]
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d108      	bne.n	80011c4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f022 0210 	bic.w	r2, r2, #16
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	e007      	b.n	80011d4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f042 0210 	orr.w	r2, r2, #16
 80011d2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	7f1b      	ldrb	r3, [r3, #28]
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d108      	bne.n	80011ee <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f042 0208 	orr.w	r2, r2, #8
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	e007      	b.n	80011fe <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f022 0208 	bic.w	r2, r2, #8
 80011fc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	7f5b      	ldrb	r3, [r3, #29]
 8001202:	2b01      	cmp	r3, #1
 8001204:	d108      	bne.n	8001218 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f042 0204 	orr.w	r2, r2, #4
 8001214:	601a      	str	r2, [r3, #0]
 8001216:	e007      	b.n	8001228 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f022 0204 	bic.w	r2, r2, #4
 8001226:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	689a      	ldr	r2, [r3, #8]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	431a      	orrs	r2, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	691b      	ldr	r3, [r3, #16]
 8001236:	431a      	orrs	r2, r3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	695b      	ldr	r3, [r3, #20]
 800123c:	ea42 0103 	orr.w	r1, r2, r3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	1e5a      	subs	r2, r3, #1
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	430a      	orrs	r2, r1
 800124c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2200      	movs	r2, #0
 8001252:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2201      	movs	r2, #1
 8001258:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800125c:	2300      	movs	r3, #0
}
 800125e:	4618      	mov	r0, r3
 8001260:	3710      	adds	r7, #16
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
	...

08001268 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001268:	b480      	push	{r7}
 800126a:	b087      	sub	sp, #28
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800127e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001280:	7cfb      	ldrb	r3, [r7, #19]
 8001282:	2b01      	cmp	r3, #1
 8001284:	d003      	beq.n	800128e <HAL_CAN_ConfigFilter+0x26>
 8001286:	7cfb      	ldrb	r3, [r7, #19]
 8001288:	2b02      	cmp	r3, #2
 800128a:	f040 80be 	bne.w	800140a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800128e:	4b65      	ldr	r3, [pc, #404]	; (8001424 <HAL_CAN_ConfigFilter+0x1bc>)
 8001290:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001298:	f043 0201 	orr.w	r2, r3, #1
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80012a8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012bc:	021b      	lsls	r3, r3, #8
 80012be:	431a      	orrs	r2, r3
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	695b      	ldr	r3, [r3, #20]
 80012ca:	f003 031f 	and.w	r3, r3, #31
 80012ce:	2201      	movs	r2, #1
 80012d0:	fa02 f303 	lsl.w	r3, r2, r3
 80012d4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	43db      	mvns	r3, r3
 80012e0:	401a      	ands	r2, r3
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	69db      	ldr	r3, [r3, #28]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d123      	bne.n	8001338 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	43db      	mvns	r3, r3
 80012fa:	401a      	ands	r2, r3
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	68db      	ldr	r3, [r3, #12]
 8001306:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800130e:	683a      	ldr	r2, [r7, #0]
 8001310:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001312:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	3248      	adds	r2, #72	; 0x48
 8001318:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800132c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800132e:	6979      	ldr	r1, [r7, #20]
 8001330:	3348      	adds	r3, #72	; 0x48
 8001332:	00db      	lsls	r3, r3, #3
 8001334:	440b      	add	r3, r1
 8001336:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	69db      	ldr	r3, [r3, #28]
 800133c:	2b01      	cmp	r3, #1
 800133e:	d122      	bne.n	8001386 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	431a      	orrs	r2, r3
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800135c:	683a      	ldr	r2, [r7, #0]
 800135e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001360:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	3248      	adds	r2, #72	; 0x48
 8001366:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800137a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800137c:	6979      	ldr	r1, [r7, #20]
 800137e:	3348      	adds	r3, #72	; 0x48
 8001380:	00db      	lsls	r3, r3, #3
 8001382:	440b      	add	r3, r1
 8001384:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	699b      	ldr	r3, [r3, #24]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d109      	bne.n	80013a2 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	43db      	mvns	r3, r3
 8001398:	401a      	ands	r2, r3
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80013a0:	e007      	b.n	80013b2 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	431a      	orrs	r2, r3
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	691b      	ldr	r3, [r3, #16]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d109      	bne.n	80013ce <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	43db      	mvns	r3, r3
 80013c4:	401a      	ands	r2, r3
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80013cc:	e007      	b.n	80013de <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	431a      	orrs	r2, r3
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	6a1b      	ldr	r3, [r3, #32]
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d107      	bne.n	80013f6 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	431a      	orrs	r2, r3
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80013fc:	f023 0201 	bic.w	r2, r3, #1
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001406:	2300      	movs	r3, #0
 8001408:	e006      	b.n	8001418 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800140e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
  }
}
 8001418:	4618      	mov	r0, r3
 800141a:	371c      	adds	r7, #28
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr
 8001424:	40006400 	.word	0x40006400

08001428 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001436:	b2db      	uxtb	r3, r3
 8001438:	2b01      	cmp	r3, #1
 800143a:	d12e      	bne.n	800149a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2202      	movs	r2, #2
 8001440:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f022 0201 	bic.w	r2, r2, #1
 8001452:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001454:	f7ff fdde 	bl	8001014 <HAL_GetTick>
 8001458:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800145a:	e012      	b.n	8001482 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800145c:	f7ff fdda 	bl	8001014 <HAL_GetTick>
 8001460:	4602      	mov	r2, r0
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	2b0a      	cmp	r3, #10
 8001468:	d90b      	bls.n	8001482 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800146e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2205      	movs	r2, #5
 800147a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e012      	b.n	80014a8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f003 0301 	and.w	r3, r3, #1
 800148c:	2b00      	cmp	r3, #0
 800148e:	d1e5      	bne.n	800145c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2200      	movs	r2, #0
 8001494:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001496:	2300      	movs	r3, #0
 8001498:	e006      	b.n	80014a8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800149e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
  }
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3710      	adds	r7, #16
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b089      	sub	sp, #36	; 0x24
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	60f8      	str	r0, [r7, #12]
 80014b8:	60b9      	str	r1, [r7, #8]
 80014ba:	607a      	str	r2, [r7, #4]
 80014bc:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014c4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80014ce:	7ffb      	ldrb	r3, [r7, #31]
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d003      	beq.n	80014dc <HAL_CAN_AddTxMessage+0x2c>
 80014d4:	7ffb      	ldrb	r3, [r7, #31]
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	f040 80b8 	bne.w	800164c <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80014dc:	69bb      	ldr	r3, [r7, #24]
 80014de:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d10a      	bne.n	80014fc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80014e6:	69bb      	ldr	r3, [r7, #24]
 80014e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d105      	bne.n	80014fc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80014f0:	69bb      	ldr	r3, [r7, #24]
 80014f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	f000 80a0 	beq.w	800163c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80014fc:	69bb      	ldr	r3, [r7, #24]
 80014fe:	0e1b      	lsrs	r3, r3, #24
 8001500:	f003 0303 	and.w	r3, r3, #3
 8001504:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	2b02      	cmp	r3, #2
 800150a:	d907      	bls.n	800151c <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001510:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	e09e      	b.n	800165a <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800151c:	2201      	movs	r2, #1
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	409a      	lsls	r2, r3
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001526:	68bb      	ldr	r3, [r7, #8]
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d10d      	bne.n	800154a <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001538:	68f9      	ldr	r1, [r7, #12]
 800153a:	6809      	ldr	r1, [r1, #0]
 800153c:	431a      	orrs	r2, r3
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	3318      	adds	r3, #24
 8001542:	011b      	lsls	r3, r3, #4
 8001544:	440b      	add	r3, r1
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	e00f      	b.n	800156a <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001554:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800155a:	68f9      	ldr	r1, [r7, #12]
 800155c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800155e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	3318      	adds	r3, #24
 8001564:	011b      	lsls	r3, r3, #4
 8001566:	440b      	add	r3, r1
 8001568:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	6819      	ldr	r1, [r3, #0]
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	691a      	ldr	r2, [r3, #16]
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	3318      	adds	r3, #24
 8001576:	011b      	lsls	r3, r3, #4
 8001578:	440b      	add	r3, r1
 800157a:	3304      	adds	r3, #4
 800157c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800157e:	68bb      	ldr	r3, [r7, #8]
 8001580:	7d1b      	ldrb	r3, [r3, #20]
 8001582:	2b01      	cmp	r3, #1
 8001584:	d111      	bne.n	80015aa <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	3318      	adds	r3, #24
 800158e:	011b      	lsls	r3, r3, #4
 8001590:	4413      	add	r3, r2
 8001592:	3304      	adds	r3, #4
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	68fa      	ldr	r2, [r7, #12]
 8001598:	6811      	ldr	r1, [r2, #0]
 800159a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	3318      	adds	r3, #24
 80015a2:	011b      	lsls	r3, r3, #4
 80015a4:	440b      	add	r3, r1
 80015a6:	3304      	adds	r3, #4
 80015a8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	3307      	adds	r3, #7
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	061a      	lsls	r2, r3, #24
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	3306      	adds	r3, #6
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	041b      	lsls	r3, r3, #16
 80015ba:	431a      	orrs	r2, r3
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	3305      	adds	r3, #5
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	021b      	lsls	r3, r3, #8
 80015c4:	4313      	orrs	r3, r2
 80015c6:	687a      	ldr	r2, [r7, #4]
 80015c8:	3204      	adds	r2, #4
 80015ca:	7812      	ldrb	r2, [r2, #0]
 80015cc:	4610      	mov	r0, r2
 80015ce:	68fa      	ldr	r2, [r7, #12]
 80015d0:	6811      	ldr	r1, [r2, #0]
 80015d2:	ea43 0200 	orr.w	r2, r3, r0
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	011b      	lsls	r3, r3, #4
 80015da:	440b      	add	r3, r1
 80015dc:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80015e0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	3303      	adds	r3, #3
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	061a      	lsls	r2, r3, #24
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	3302      	adds	r3, #2
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	041b      	lsls	r3, r3, #16
 80015f2:	431a      	orrs	r2, r3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	3301      	adds	r3, #1
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	021b      	lsls	r3, r3, #8
 80015fc:	4313      	orrs	r3, r2
 80015fe:	687a      	ldr	r2, [r7, #4]
 8001600:	7812      	ldrb	r2, [r2, #0]
 8001602:	4610      	mov	r0, r2
 8001604:	68fa      	ldr	r2, [r7, #12]
 8001606:	6811      	ldr	r1, [r2, #0]
 8001608:	ea43 0200 	orr.w	r2, r3, r0
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	011b      	lsls	r3, r3, #4
 8001610:	440b      	add	r3, r1
 8001612:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001616:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	3318      	adds	r3, #24
 8001620:	011b      	lsls	r3, r3, #4
 8001622:	4413      	add	r3, r2
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	68fa      	ldr	r2, [r7, #12]
 8001628:	6811      	ldr	r1, [r2, #0]
 800162a:	f043 0201 	orr.w	r2, r3, #1
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	3318      	adds	r3, #24
 8001632:	011b      	lsls	r3, r3, #4
 8001634:	440b      	add	r3, r1
 8001636:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001638:	2300      	movs	r3, #0
 800163a:	e00e      	b.n	800165a <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001640:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e006      	b.n	800165a <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001650:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001658:	2301      	movs	r3, #1
  }
}
 800165a:	4618      	mov	r0, r3
 800165c:	3724      	adds	r7, #36	; 0x24
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr

08001666 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001666:	b480      	push	{r7}
 8001668:	b087      	sub	sp, #28
 800166a:	af00      	add	r7, sp, #0
 800166c:	60f8      	str	r0, [r7, #12]
 800166e:	60b9      	str	r1, [r7, #8]
 8001670:	607a      	str	r2, [r7, #4]
 8001672:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	f893 3020 	ldrb.w	r3, [r3, #32]
 800167a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800167c:	7dfb      	ldrb	r3, [r7, #23]
 800167e:	2b01      	cmp	r3, #1
 8001680:	d003      	beq.n	800168a <HAL_CAN_GetRxMessage+0x24>
 8001682:	7dfb      	ldrb	r3, [r7, #23]
 8001684:	2b02      	cmp	r3, #2
 8001686:	f040 80f4 	bne.w	8001872 <HAL_CAN_GetRxMessage+0x20c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800168a:	68bb      	ldr	r3, [r7, #8]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d10e      	bne.n	80016ae <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	68db      	ldr	r3, [r3, #12]
 8001696:	f003 0303 	and.w	r3, r3, #3
 800169a:	2b00      	cmp	r3, #0
 800169c:	d116      	bne.n	80016cc <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e0e8      	b.n	8001880 <HAL_CAN_GetRxMessage+0x21a>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	691b      	ldr	r3, [r3, #16]
 80016b4:	f003 0303 	and.w	r3, r3, #3
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d107      	bne.n	80016cc <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80016c8:	2301      	movs	r3, #1
 80016ca:	e0d9      	b.n	8001880 <HAL_CAN_GetRxMessage+0x21a>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	331b      	adds	r3, #27
 80016d4:	011b      	lsls	r3, r3, #4
 80016d6:	4413      	add	r3, r2
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 0204 	and.w	r2, r3, #4
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d10c      	bne.n	8001704 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	331b      	adds	r3, #27
 80016f2:	011b      	lsls	r3, r3, #4
 80016f4:	4413      	add	r3, r2
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	0d5b      	lsrs	r3, r3, #21
 80016fa:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	601a      	str	r2, [r3, #0]
 8001702:	e00b      	b.n	800171c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	331b      	adds	r3, #27
 800170c:	011b      	lsls	r3, r3, #4
 800170e:	4413      	add	r3, r2
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	08db      	lsrs	r3, r3, #3
 8001714:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	331b      	adds	r3, #27
 8001724:	011b      	lsls	r3, r3, #4
 8001726:	4413      	add	r3, r2
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	085b      	lsrs	r3, r3, #1
 800172c:	f003 0201 	and.w	r2, r3, #1
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	331b      	adds	r3, #27
 800173c:	011b      	lsls	r3, r3, #4
 800173e:	4413      	add	r3, r2
 8001740:	3304      	adds	r3, #4
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 020f 	and.w	r2, r3, #15
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	331b      	adds	r3, #27
 8001754:	011b      	lsls	r3, r3, #4
 8001756:	4413      	add	r3, r2
 8001758:	3304      	adds	r3, #4
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	0a1b      	lsrs	r3, r3, #8
 800175e:	b2da      	uxtb	r2, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	331b      	adds	r3, #27
 800176c:	011b      	lsls	r3, r3, #4
 800176e:	4413      	add	r3, r2
 8001770:	3304      	adds	r3, #4
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	0c1b      	lsrs	r3, r3, #16
 8001776:	b29a      	uxth	r2, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	011b      	lsls	r3, r3, #4
 8001784:	4413      	add	r3, r2
 8001786:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	b2da      	uxtb	r2, r3
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	011b      	lsls	r3, r3, #4
 800179a:	4413      	add	r3, r2
 800179c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	0a1a      	lsrs	r2, r3, #8
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	3301      	adds	r3, #1
 80017a8:	b2d2      	uxtb	r2, r2
 80017aa:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	011b      	lsls	r3, r3, #4
 80017b4:	4413      	add	r3, r2
 80017b6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	0c1a      	lsrs	r2, r3, #16
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	3302      	adds	r3, #2
 80017c2:	b2d2      	uxtb	r2, r2
 80017c4:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	011b      	lsls	r3, r3, #4
 80017ce:	4413      	add	r3, r2
 80017d0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	0e1a      	lsrs	r2, r3, #24
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	3303      	adds	r3, #3
 80017dc:	b2d2      	uxtb	r2, r2
 80017de:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	011b      	lsls	r3, r3, #4
 80017e8:	4413      	add	r3, r2
 80017ea:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	3304      	adds	r3, #4
 80017f4:	b2d2      	uxtb	r2, r2
 80017f6:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	011b      	lsls	r3, r3, #4
 8001800:	4413      	add	r3, r2
 8001802:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	0a1a      	lsrs	r2, r3, #8
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	3305      	adds	r3, #5
 800180e:	b2d2      	uxtb	r2, r2
 8001810:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	011b      	lsls	r3, r3, #4
 800181a:	4413      	add	r3, r2
 800181c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	0c1a      	lsrs	r2, r3, #16
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	3306      	adds	r3, #6
 8001828:	b2d2      	uxtb	r2, r2
 800182a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	011b      	lsls	r3, r3, #4
 8001834:	4413      	add	r3, r2
 8001836:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	0e1a      	lsrs	r2, r3, #24
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	3307      	adds	r3, #7
 8001842:	b2d2      	uxtb	r2, r2
 8001844:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d108      	bne.n	800185e <HAL_CAN_GetRxMessage+0x1f8>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	68da      	ldr	r2, [r3, #12]
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f042 0220 	orr.w	r2, r2, #32
 800185a:	60da      	str	r2, [r3, #12]
 800185c:	e007      	b.n	800186e <HAL_CAN_GetRxMessage+0x208>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	691a      	ldr	r2, [r3, #16]
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f042 0220 	orr.w	r2, r2, #32
 800186c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800186e:	2300      	movs	r3, #0
 8001870:	e006      	b.n	8001880 <HAL_CAN_GetRxMessage+0x21a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001876:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
  }
}
 8001880:	4618      	mov	r0, r3
 8001882:	371c      	adds	r7, #28
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr

0800188c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800188c:	b480      	push	{r7}
 800188e:	b085      	sub	sp, #20
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	f893 3020 	ldrb.w	r3, [r3, #32]
 800189c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800189e:	7bfb      	ldrb	r3, [r7, #15]
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d002      	beq.n	80018aa <HAL_CAN_ActivateNotification+0x1e>
 80018a4:	7bfb      	ldrb	r3, [r7, #15]
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d109      	bne.n	80018be <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	6959      	ldr	r1, [r3, #20]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	683a      	ldr	r2, [r7, #0]
 80018b6:	430a      	orrs	r2, r1
 80018b8:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80018ba:	2300      	movs	r3, #0
 80018bc:	e006      	b.n	80018cc <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
  }
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3714      	adds	r7, #20
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr

080018d8 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b08a      	sub	sp, #40	; 0x28
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80018e0:	2300      	movs	r3, #0
 80018e2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	695b      	ldr	r3, [r3, #20]
 80018ea:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	68db      	ldr	r3, [r3, #12]
 8001902:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	691b      	ldr	r3, [r3, #16]
 800190a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	699b      	ldr	r3, [r3, #24]
 8001912:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001914:	6a3b      	ldr	r3, [r7, #32]
 8001916:	f003 0301 	and.w	r3, r3, #1
 800191a:	2b00      	cmp	r3, #0
 800191c:	d07c      	beq.n	8001a18 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800191e:	69bb      	ldr	r3, [r7, #24]
 8001920:	f003 0301 	and.w	r3, r3, #1
 8001924:	2b00      	cmp	r3, #0
 8001926:	d023      	beq.n	8001970 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	2201      	movs	r2, #1
 800192e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	f003 0302 	and.w	r3, r3, #2
 8001936:	2b00      	cmp	r3, #0
 8001938:	d003      	beq.n	8001942 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f000 f97d 	bl	8001c3a <HAL_CAN_TxMailbox0CompleteCallback>
 8001940:	e016      	b.n	8001970 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001942:	69bb      	ldr	r3, [r7, #24]
 8001944:	f003 0304 	and.w	r3, r3, #4
 8001948:	2b00      	cmp	r3, #0
 800194a:	d004      	beq.n	8001956 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800194c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001952:	627b      	str	r3, [r7, #36]	; 0x24
 8001954:	e00c      	b.n	8001970 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	f003 0308 	and.w	r3, r3, #8
 800195c:	2b00      	cmp	r3, #0
 800195e:	d004      	beq.n	800196a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001962:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001966:	627b      	str	r3, [r7, #36]	; 0x24
 8001968:	e002      	b.n	8001970 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f000 f983 	bl	8001c76 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001970:	69bb      	ldr	r3, [r7, #24]
 8001972:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001976:	2b00      	cmp	r3, #0
 8001978:	d024      	beq.n	80019c4 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001982:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001984:	69bb      	ldr	r3, [r7, #24]
 8001986:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800198a:	2b00      	cmp	r3, #0
 800198c:	d003      	beq.n	8001996 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	f000 f95d 	bl	8001c4e <HAL_CAN_TxMailbox1CompleteCallback>
 8001994:	e016      	b.n	80019c4 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001996:	69bb      	ldr	r3, [r7, #24]
 8001998:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800199c:	2b00      	cmp	r3, #0
 800199e:	d004      	beq.n	80019aa <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80019a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80019a6:	627b      	str	r3, [r7, #36]	; 0x24
 80019a8:	e00c      	b.n	80019c4 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80019aa:	69bb      	ldr	r3, [r7, #24]
 80019ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d004      	beq.n	80019be <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80019b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019ba:	627b      	str	r3, [r7, #36]	; 0x24
 80019bc:	e002      	b.n	80019c4 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f000 f963 	bl	8001c8a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d024      	beq.n	8001a18 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80019d6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80019d8:	69bb      	ldr	r3, [r7, #24]
 80019da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d003      	beq.n	80019ea <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f000 f93d 	bl	8001c62 <HAL_CAN_TxMailbox2CompleteCallback>
 80019e8:	e016      	b.n	8001a18 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80019ea:	69bb      	ldr	r3, [r7, #24]
 80019ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d004      	beq.n	80019fe <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80019f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019fa:	627b      	str	r3, [r7, #36]	; 0x24
 80019fc:	e00c      	b.n	8001a18 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80019fe:	69bb      	ldr	r3, [r7, #24]
 8001a00:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d004      	beq.n	8001a12 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a0e:	627b      	str	r3, [r7, #36]	; 0x24
 8001a10:	e002      	b.n	8001a18 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f000 f943 	bl	8001c9e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001a18:	6a3b      	ldr	r3, [r7, #32]
 8001a1a:	f003 0308 	and.w	r3, r3, #8
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d00c      	beq.n	8001a3c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	f003 0310 	and.w	r3, r3, #16
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d007      	beq.n	8001a3c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a32:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	2210      	movs	r2, #16
 8001a3a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001a3c:	6a3b      	ldr	r3, [r7, #32]
 8001a3e:	f003 0304 	and.w	r3, r3, #4
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d00b      	beq.n	8001a5e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	f003 0308 	and.w	r3, r3, #8
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d006      	beq.n	8001a5e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	2208      	movs	r2, #8
 8001a56:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f000 f92a 	bl	8001cb2 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001a5e:	6a3b      	ldr	r3, [r7, #32]
 8001a60:	f003 0302 	and.w	r3, r3, #2
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d009      	beq.n	8001a7c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	68db      	ldr	r3, [r3, #12]
 8001a6e:	f003 0303 	and.w	r3, r3, #3
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d002      	beq.n	8001a7c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f00b fca0 	bl	800d3bc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001a7c:	6a3b      	ldr	r3, [r7, #32]
 8001a7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d00c      	beq.n	8001aa0 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	f003 0310 	and.w	r3, r3, #16
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d007      	beq.n	8001aa0 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a96:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	2210      	movs	r2, #16
 8001a9e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001aa0:	6a3b      	ldr	r3, [r7, #32]
 8001aa2:	f003 0320 	and.w	r3, r3, #32
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d00b      	beq.n	8001ac2 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	f003 0308 	and.w	r3, r3, #8
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d006      	beq.n	8001ac2 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	2208      	movs	r2, #8
 8001aba:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	f000 f90c 	bl	8001cda <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001ac2:	6a3b      	ldr	r3, [r7, #32]
 8001ac4:	f003 0310 	and.w	r3, r3, #16
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d009      	beq.n	8001ae0 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	691b      	ldr	r3, [r3, #16]
 8001ad2:	f003 0303 	and.w	r3, r3, #3
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d002      	beq.n	8001ae0 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f000 f8f3 	bl	8001cc6 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001ae0:	6a3b      	ldr	r3, [r7, #32]
 8001ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d00b      	beq.n	8001b02 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	f003 0310 	and.w	r3, r3, #16
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d006      	beq.n	8001b02 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2210      	movs	r2, #16
 8001afa:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f000 f8f6 	bl	8001cee <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001b02:	6a3b      	ldr	r3, [r7, #32]
 8001b04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d00b      	beq.n	8001b24 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	f003 0308 	and.w	r3, r3, #8
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d006      	beq.n	8001b24 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	2208      	movs	r2, #8
 8001b1c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f000 f8ef 	bl	8001d02 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001b24:	6a3b      	ldr	r3, [r7, #32]
 8001b26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d075      	beq.n	8001c1a <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	f003 0304 	and.w	r3, r3, #4
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d06c      	beq.n	8001c12 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001b38:	6a3b      	ldr	r3, [r7, #32]
 8001b3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d008      	beq.n	8001b54 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d003      	beq.n	8001b54 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4e:	f043 0301 	orr.w	r3, r3, #1
 8001b52:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001b54:	6a3b      	ldr	r3, [r7, #32]
 8001b56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d008      	beq.n	8001b70 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d003      	beq.n	8001b70 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6a:	f043 0302 	orr.w	r3, r3, #2
 8001b6e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001b70:	6a3b      	ldr	r3, [r7, #32]
 8001b72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d008      	beq.n	8001b8c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d003      	beq.n	8001b8c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b86:	f043 0304 	orr.w	r3, r3, #4
 8001b8a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001b8c:	6a3b      	ldr	r3, [r7, #32]
 8001b8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d03d      	beq.n	8001c12 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d038      	beq.n	8001c12 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001ba6:	2b30      	cmp	r3, #48	; 0x30
 8001ba8:	d017      	beq.n	8001bda <HAL_CAN_IRQHandler+0x302>
 8001baa:	2b30      	cmp	r3, #48	; 0x30
 8001bac:	d804      	bhi.n	8001bb8 <HAL_CAN_IRQHandler+0x2e0>
 8001bae:	2b10      	cmp	r3, #16
 8001bb0:	d009      	beq.n	8001bc6 <HAL_CAN_IRQHandler+0x2ee>
 8001bb2:	2b20      	cmp	r3, #32
 8001bb4:	d00c      	beq.n	8001bd0 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001bb6:	e024      	b.n	8001c02 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8001bb8:	2b50      	cmp	r3, #80	; 0x50
 8001bba:	d018      	beq.n	8001bee <HAL_CAN_IRQHandler+0x316>
 8001bbc:	2b60      	cmp	r3, #96	; 0x60
 8001bbe:	d01b      	beq.n	8001bf8 <HAL_CAN_IRQHandler+0x320>
 8001bc0:	2b40      	cmp	r3, #64	; 0x40
 8001bc2:	d00f      	beq.n	8001be4 <HAL_CAN_IRQHandler+0x30c>
            break;
 8001bc4:	e01d      	b.n	8001c02 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8001bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc8:	f043 0308 	orr.w	r3, r3, #8
 8001bcc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001bce:	e018      	b.n	8001c02 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd2:	f043 0310 	orr.w	r3, r3, #16
 8001bd6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001bd8:	e013      	b.n	8001c02 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bdc:	f043 0320 	orr.w	r3, r3, #32
 8001be0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001be2:	e00e      	b.n	8001c02 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8001be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001bea:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001bec:	e009      	b.n	8001c02 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8001bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bf4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001bf6:	e004      	b.n	8001c02 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bfe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c00:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	699a      	ldr	r2, [r3, #24]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001c10:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	2204      	movs	r2, #4
 8001c18:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d008      	beq.n	8001c32 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c26:	431a      	orrs	r2, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001c2c:	6878      	ldr	r0, [r7, #4]
 8001c2e:	f000 f872 	bl	8001d16 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001c32:	bf00      	nop
 8001c34:	3728      	adds	r7, #40	; 0x28
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}

08001c3a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001c3a:	b480      	push	{r7}
 8001c3c:	b083      	sub	sp, #12
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001c42:	bf00      	nop
 8001c44:	370c      	adds	r7, #12
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr

08001c4e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001c4e:	b480      	push	{r7}
 8001c50:	b083      	sub	sp, #12
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001c56:	bf00      	nop
 8001c58:	370c      	adds	r7, #12
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr

08001c62 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001c62:	b480      	push	{r7}
 8001c64:	b083      	sub	sp, #12
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001c6a:	bf00      	nop
 8001c6c:	370c      	adds	r7, #12
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr

08001c76 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001c76:	b480      	push	{r7}
 8001c78:	b083      	sub	sp, #12
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001c7e:	bf00      	nop
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr

08001c8a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001c8a:	b480      	push	{r7}
 8001c8c:	b083      	sub	sp, #12
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001c92:	bf00      	nop
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr

08001c9e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001c9e:	b480      	push	{r7}
 8001ca0:	b083      	sub	sp, #12
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001ca6:	bf00      	nop
 8001ca8:	370c      	adds	r7, #12
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr

08001cb2 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	b083      	sub	sp, #12
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001cba:	bf00      	nop
 8001cbc:	370c      	adds	r7, #12
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr

08001cc6 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	b083      	sub	sp, #12
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001cce:	bf00      	nop
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr

08001cda <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001cda:	b480      	push	{r7}
 8001cdc:	b083      	sub	sp, #12
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001ce2:	bf00      	nop
 8001ce4:	370c      	adds	r7, #12
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr

08001cee <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	b083      	sub	sp, #12
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001cf6:	bf00      	nop
 8001cf8:	370c      	adds	r7, #12
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr

08001d02 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001d02:	b480      	push	{r7}
 8001d04:	b083      	sub	sp, #12
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001d0a:	bf00      	nop
 8001d0c:	370c      	adds	r7, #12
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr

08001d16 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001d16:	b480      	push	{r7}
 8001d18:	b083      	sub	sp, #12
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001d1e:	bf00      	nop
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
	...

08001d2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b085      	sub	sp, #20
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	f003 0307 	and.w	r3, r3, #7
 8001d3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d3c:	4b0c      	ldr	r3, [pc, #48]	; (8001d70 <__NVIC_SetPriorityGrouping+0x44>)
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d42:	68ba      	ldr	r2, [r7, #8]
 8001d44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d48:	4013      	ands	r3, r2
 8001d4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d5e:	4a04      	ldr	r2, [pc, #16]	; (8001d70 <__NVIC_SetPriorityGrouping+0x44>)
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	60d3      	str	r3, [r2, #12]
}
 8001d64:	bf00      	nop
 8001d66:	3714      	adds	r7, #20
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr
 8001d70:	e000ed00 	.word	0xe000ed00

08001d74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d78:	4b04      	ldr	r3, [pc, #16]	; (8001d8c <__NVIC_GetPriorityGrouping+0x18>)
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	0a1b      	lsrs	r3, r3, #8
 8001d7e:	f003 0307 	and.w	r3, r3, #7
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr
 8001d8c:	e000ed00 	.word	0xe000ed00

08001d90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	4603      	mov	r3, r0
 8001d98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	db0b      	blt.n	8001dba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001da2:	79fb      	ldrb	r3, [r7, #7]
 8001da4:	f003 021f 	and.w	r2, r3, #31
 8001da8:	4907      	ldr	r1, [pc, #28]	; (8001dc8 <__NVIC_EnableIRQ+0x38>)
 8001daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dae:	095b      	lsrs	r3, r3, #5
 8001db0:	2001      	movs	r0, #1
 8001db2:	fa00 f202 	lsl.w	r2, r0, r2
 8001db6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001dba:	bf00      	nop
 8001dbc:	370c      	adds	r7, #12
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	e000e100 	.word	0xe000e100

08001dcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	6039      	str	r1, [r7, #0]
 8001dd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	db0a      	blt.n	8001df6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	b2da      	uxtb	r2, r3
 8001de4:	490c      	ldr	r1, [pc, #48]	; (8001e18 <__NVIC_SetPriority+0x4c>)
 8001de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dea:	0112      	lsls	r2, r2, #4
 8001dec:	b2d2      	uxtb	r2, r2
 8001dee:	440b      	add	r3, r1
 8001df0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001df4:	e00a      	b.n	8001e0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	b2da      	uxtb	r2, r3
 8001dfa:	4908      	ldr	r1, [pc, #32]	; (8001e1c <__NVIC_SetPriority+0x50>)
 8001dfc:	79fb      	ldrb	r3, [r7, #7]
 8001dfe:	f003 030f 	and.w	r3, r3, #15
 8001e02:	3b04      	subs	r3, #4
 8001e04:	0112      	lsls	r2, r2, #4
 8001e06:	b2d2      	uxtb	r2, r2
 8001e08:	440b      	add	r3, r1
 8001e0a:	761a      	strb	r2, [r3, #24]
}
 8001e0c:	bf00      	nop
 8001e0e:	370c      	adds	r7, #12
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr
 8001e18:	e000e100 	.word	0xe000e100
 8001e1c:	e000ed00 	.word	0xe000ed00

08001e20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b089      	sub	sp, #36	; 0x24
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	60f8      	str	r0, [r7, #12]
 8001e28:	60b9      	str	r1, [r7, #8]
 8001e2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	f003 0307 	and.w	r3, r3, #7
 8001e32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	f1c3 0307 	rsb	r3, r3, #7
 8001e3a:	2b04      	cmp	r3, #4
 8001e3c:	bf28      	it	cs
 8001e3e:	2304      	movcs	r3, #4
 8001e40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	3304      	adds	r3, #4
 8001e46:	2b06      	cmp	r3, #6
 8001e48:	d902      	bls.n	8001e50 <NVIC_EncodePriority+0x30>
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	3b03      	subs	r3, #3
 8001e4e:	e000      	b.n	8001e52 <NVIC_EncodePriority+0x32>
 8001e50:	2300      	movs	r3, #0
 8001e52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e54:	f04f 32ff 	mov.w	r2, #4294967295
 8001e58:	69bb      	ldr	r3, [r7, #24]
 8001e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5e:	43da      	mvns	r2, r3
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	401a      	ands	r2, r3
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e68:	f04f 31ff 	mov.w	r1, #4294967295
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e72:	43d9      	mvns	r1, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e78:	4313      	orrs	r3, r2
         );
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3724      	adds	r7, #36	; 0x24
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr

08001e86 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b082      	sub	sp, #8
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f7ff ff4c 	bl	8001d2c <__NVIC_SetPriorityGrouping>
}
 8001e94:	bf00      	nop
 8001e96:	3708      	adds	r7, #8
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}

08001e9c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b086      	sub	sp, #24
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	60b9      	str	r1, [r7, #8]
 8001ea6:	607a      	str	r2, [r7, #4]
 8001ea8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001eae:	f7ff ff61 	bl	8001d74 <__NVIC_GetPriorityGrouping>
 8001eb2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	68b9      	ldr	r1, [r7, #8]
 8001eb8:	6978      	ldr	r0, [r7, #20]
 8001eba:	f7ff ffb1 	bl	8001e20 <NVIC_EncodePriority>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ec4:	4611      	mov	r1, r2
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f7ff ff80 	bl	8001dcc <__NVIC_SetPriority>
}
 8001ecc:	bf00      	nop
 8001ece:	3718      	adds	r7, #24
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	4603      	mov	r3, r0
 8001edc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7ff ff54 	bl	8001d90 <__NVIC_EnableIRQ>
}
 8001ee8:	bf00      	nop
 8001eea:	3708      	adds	r7, #8
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b086      	sub	sp, #24
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001efc:	f7ff f88a 	bl	8001014 <HAL_GetTick>
 8001f00:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d101      	bne.n	8001f0c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e099      	b.n	8002040 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2202      	movs	r2, #2
 8001f18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f022 0201 	bic.w	r2, r2, #1
 8001f2a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f2c:	e00f      	b.n	8001f4e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f2e:	f7ff f871 	bl	8001014 <HAL_GetTick>
 8001f32:	4602      	mov	r2, r0
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	2b05      	cmp	r3, #5
 8001f3a:	d908      	bls.n	8001f4e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2220      	movs	r2, #32
 8001f40:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2203      	movs	r2, #3
 8001f46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e078      	b.n	8002040 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0301 	and.w	r3, r3, #1
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d1e8      	bne.n	8001f2e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001f64:	697a      	ldr	r2, [r7, #20]
 8001f66:	4b38      	ldr	r3, [pc, #224]	; (8002048 <HAL_DMA_Init+0x158>)
 8001f68:	4013      	ands	r3, r2
 8001f6a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	685a      	ldr	r2, [r3, #4]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	691b      	ldr	r3, [r3, #16]
 8001f80:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f86:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	699b      	ldr	r3, [r3, #24]
 8001f8c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f92:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6a1b      	ldr	r3, [r3, #32]
 8001f98:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f9a:	697a      	ldr	r2, [r7, #20]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa4:	2b04      	cmp	r3, #4
 8001fa6:	d107      	bne.n	8001fb8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	697a      	ldr	r2, [r7, #20]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	697a      	ldr	r2, [r7, #20]
 8001fbe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	695b      	ldr	r3, [r3, #20]
 8001fc6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	f023 0307 	bic.w	r3, r3, #7
 8001fce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd4:	697a      	ldr	r2, [r7, #20]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fde:	2b04      	cmp	r3, #4
 8001fe0:	d117      	bne.n	8002012 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fe6:	697a      	ldr	r2, [r7, #20]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d00e      	beq.n	8002012 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f000 faf7 	bl	80025e8 <DMA_CheckFifoParam>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d008      	beq.n	8002012 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2240      	movs	r2, #64	; 0x40
 8002004:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2201      	movs	r2, #1
 800200a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800200e:	2301      	movs	r3, #1
 8002010:	e016      	b.n	8002040 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	697a      	ldr	r2, [r7, #20]
 8002018:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f000 faae 	bl	800257c <DMA_CalcBaseAndBitshift>
 8002020:	4603      	mov	r3, r0
 8002022:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002028:	223f      	movs	r2, #63	; 0x3f
 800202a:	409a      	lsls	r2, r3
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2200      	movs	r2, #0
 8002034:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2201      	movs	r2, #1
 800203a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800203e:	2300      	movs	r3, #0
}
 8002040:	4618      	mov	r0, r3
 8002042:	3718      	adds	r7, #24
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	f010803f 	.word	0xf010803f

0800204c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b084      	sub	sp, #16
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d101      	bne.n	800205e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e050      	b.n	8002100 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002064:	b2db      	uxtb	r3, r3
 8002066:	2b02      	cmp	r3, #2
 8002068:	d101      	bne.n	800206e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800206a:	2302      	movs	r3, #2
 800206c:	e048      	b.n	8002100 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f022 0201 	bic.w	r2, r2, #1
 800207c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	2200      	movs	r2, #0
 8002084:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	2200      	movs	r2, #0
 800208c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	2200      	movs	r2, #0
 8002094:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	2200      	movs	r2, #0
 800209c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	2200      	movs	r2, #0
 80020a4:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	2221      	movs	r2, #33	; 0x21
 80020ac:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f000 fa64 	bl	800257c <DMA_CalcBaseAndBitshift>
 80020b4:	4603      	mov	r3, r0
 80020b6:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2200      	movs	r2, #0
 80020bc:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2200      	movs	r2, #0
 80020c2:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2200      	movs	r2, #0
 80020c8:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2200      	movs	r2, #0
 80020d4:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2200      	movs	r2, #0
 80020da:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020e0:	223f      	movs	r2, #63	; 0x3f
 80020e2:	409a      	lsls	r2, r3
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2200      	movs	r2, #0
 80020ec:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2200      	movs	r2, #0
 80020f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2200      	movs	r2, #0
 80020fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80020fe:	2300      	movs	r3, #0
}
 8002100:	4618      	mov	r0, r3
 8002102:	3710      	adds	r7, #16
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}

08002108 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b086      	sub	sp, #24
 800210c:	af00      	add	r7, sp, #0
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	60b9      	str	r1, [r7, #8]
 8002112:	607a      	str	r2, [r7, #4]
 8002114:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002116:	2300      	movs	r3, #0
 8002118:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800211e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002126:	2b01      	cmp	r3, #1
 8002128:	d101      	bne.n	800212e <HAL_DMA_Start_IT+0x26>
 800212a:	2302      	movs	r3, #2
 800212c:	e048      	b.n	80021c0 <HAL_DMA_Start_IT+0xb8>
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2201      	movs	r2, #1
 8002132:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800213c:	b2db      	uxtb	r3, r3
 800213e:	2b01      	cmp	r3, #1
 8002140:	d137      	bne.n	80021b2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	2202      	movs	r2, #2
 8002146:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	2200      	movs	r2, #0
 800214e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	68b9      	ldr	r1, [r7, #8]
 8002156:	68f8      	ldr	r0, [r7, #12]
 8002158:	f000 f9e2 	bl	8002520 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002160:	223f      	movs	r2, #63	; 0x3f
 8002162:	409a      	lsls	r2, r3
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f042 0216 	orr.w	r2, r2, #22
 8002176:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	695a      	ldr	r2, [r3, #20]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002186:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218c:	2b00      	cmp	r3, #0
 800218e:	d007      	beq.n	80021a0 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f042 0208 	orr.w	r2, r2, #8
 800219e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f042 0201 	orr.w	r2, r2, #1
 80021ae:	601a      	str	r2, [r3, #0]
 80021b0:	e005      	b.n	80021be <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2200      	movs	r2, #0
 80021b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80021ba:	2302      	movs	r3, #2
 80021bc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80021be:	7dfb      	ldrb	r3, [r7, #23]
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3718      	adds	r7, #24
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}

080021c8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	2b02      	cmp	r3, #2
 80021da:	d004      	beq.n	80021e6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2280      	movs	r2, #128	; 0x80
 80021e0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e00c      	b.n	8002200 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2205      	movs	r2, #5
 80021ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f022 0201 	bic.w	r2, r2, #1
 80021fc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80021fe:	2300      	movs	r3, #0
}
 8002200:	4618      	mov	r0, r3
 8002202:	370c      	adds	r7, #12
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr

0800220c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b086      	sub	sp, #24
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002214:	2300      	movs	r3, #0
 8002216:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002218:	4b92      	ldr	r3, [pc, #584]	; (8002464 <HAL_DMA_IRQHandler+0x258>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a92      	ldr	r2, [pc, #584]	; (8002468 <HAL_DMA_IRQHandler+0x25c>)
 800221e:	fba2 2303 	umull	r2, r3, r2, r3
 8002222:	0a9b      	lsrs	r3, r3, #10
 8002224:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800222a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002236:	2208      	movs	r2, #8
 8002238:	409a      	lsls	r2, r3
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	4013      	ands	r3, r2
 800223e:	2b00      	cmp	r3, #0
 8002240:	d01a      	beq.n	8002278 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 0304 	and.w	r3, r3, #4
 800224c:	2b00      	cmp	r3, #0
 800224e:	d013      	beq.n	8002278 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f022 0204 	bic.w	r2, r2, #4
 800225e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002264:	2208      	movs	r2, #8
 8002266:	409a      	lsls	r2, r3
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002270:	f043 0201 	orr.w	r2, r3, #1
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800227c:	2201      	movs	r2, #1
 800227e:	409a      	lsls	r2, r3
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	4013      	ands	r3, r2
 8002284:	2b00      	cmp	r3, #0
 8002286:	d012      	beq.n	80022ae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	695b      	ldr	r3, [r3, #20]
 800228e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002292:	2b00      	cmp	r3, #0
 8002294:	d00b      	beq.n	80022ae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800229a:	2201      	movs	r2, #1
 800229c:	409a      	lsls	r2, r3
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022a6:	f043 0202 	orr.w	r2, r3, #2
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022b2:	2204      	movs	r2, #4
 80022b4:	409a      	lsls	r2, r3
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	4013      	ands	r3, r2
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d012      	beq.n	80022e4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0302 	and.w	r3, r3, #2
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d00b      	beq.n	80022e4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022d0:	2204      	movs	r2, #4
 80022d2:	409a      	lsls	r2, r3
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022dc:	f043 0204 	orr.w	r2, r3, #4
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022e8:	2210      	movs	r2, #16
 80022ea:	409a      	lsls	r2, r3
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	4013      	ands	r3, r2
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d043      	beq.n	800237c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0308 	and.w	r3, r3, #8
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d03c      	beq.n	800237c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002306:	2210      	movs	r2, #16
 8002308:	409a      	lsls	r2, r3
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002318:	2b00      	cmp	r3, #0
 800231a:	d018      	beq.n	800234e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d108      	bne.n	800233c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232e:	2b00      	cmp	r3, #0
 8002330:	d024      	beq.n	800237c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	4798      	blx	r3
 800233a:	e01f      	b.n	800237c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002340:	2b00      	cmp	r3, #0
 8002342:	d01b      	beq.n	800237c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	4798      	blx	r3
 800234c:	e016      	b.n	800237c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002358:	2b00      	cmp	r3, #0
 800235a:	d107      	bne.n	800236c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f022 0208 	bic.w	r2, r2, #8
 800236a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002370:	2b00      	cmp	r3, #0
 8002372:	d003      	beq.n	800237c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002380:	2220      	movs	r2, #32
 8002382:	409a      	lsls	r2, r3
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	4013      	ands	r3, r2
 8002388:	2b00      	cmp	r3, #0
 800238a:	f000 808e 	beq.w	80024aa <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0310 	and.w	r3, r3, #16
 8002398:	2b00      	cmp	r3, #0
 800239a:	f000 8086 	beq.w	80024aa <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023a2:	2220      	movs	r2, #32
 80023a4:	409a      	lsls	r2, r3
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	2b05      	cmp	r3, #5
 80023b4:	d136      	bne.n	8002424 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f022 0216 	bic.w	r2, r2, #22
 80023c4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	695a      	ldr	r2, [r3, #20]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023d4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d103      	bne.n	80023e6 <HAL_DMA_IRQHandler+0x1da>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d007      	beq.n	80023f6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f022 0208 	bic.w	r2, r2, #8
 80023f4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023fa:	223f      	movs	r2, #63	; 0x3f
 80023fc:	409a      	lsls	r2, r3
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2200      	movs	r2, #0
 8002406:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2201      	movs	r2, #1
 800240e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002416:	2b00      	cmp	r3, #0
 8002418:	d07d      	beq.n	8002516 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	4798      	blx	r3
        }
        return;
 8002422:	e078      	b.n	8002516 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d01c      	beq.n	800246c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800243c:	2b00      	cmp	r3, #0
 800243e:	d108      	bne.n	8002452 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002444:	2b00      	cmp	r3, #0
 8002446:	d030      	beq.n	80024aa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	4798      	blx	r3
 8002450:	e02b      	b.n	80024aa <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002456:	2b00      	cmp	r3, #0
 8002458:	d027      	beq.n	80024aa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	4798      	blx	r3
 8002462:	e022      	b.n	80024aa <HAL_DMA_IRQHandler+0x29e>
 8002464:	200000d8 	.word	0x200000d8
 8002468:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002476:	2b00      	cmp	r3, #0
 8002478:	d10f      	bne.n	800249a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f022 0210 	bic.w	r2, r2, #16
 8002488:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2201      	movs	r2, #1
 8002496:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d003      	beq.n	80024aa <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d032      	beq.n	8002518 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024b6:	f003 0301 	and.w	r3, r3, #1
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d022      	beq.n	8002504 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2205      	movs	r2, #5
 80024c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f022 0201 	bic.w	r2, r2, #1
 80024d4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	3301      	adds	r3, #1
 80024da:	60bb      	str	r3, [r7, #8]
 80024dc:	697a      	ldr	r2, [r7, #20]
 80024de:	429a      	cmp	r2, r3
 80024e0:	d307      	bcc.n	80024f2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0301 	and.w	r3, r3, #1
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d1f2      	bne.n	80024d6 <HAL_DMA_IRQHandler+0x2ca>
 80024f0:	e000      	b.n	80024f4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80024f2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2200      	movs	r2, #0
 80024f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2201      	movs	r2, #1
 8002500:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002508:	2b00      	cmp	r3, #0
 800250a:	d005      	beq.n	8002518 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	4798      	blx	r3
 8002514:	e000      	b.n	8002518 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002516:	bf00      	nop
    }
  }
}
 8002518:	3718      	adds	r7, #24
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop

08002520 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002520:	b480      	push	{r7}
 8002522:	b085      	sub	sp, #20
 8002524:	af00      	add	r7, sp, #0
 8002526:	60f8      	str	r0, [r7, #12]
 8002528:	60b9      	str	r1, [r7, #8]
 800252a:	607a      	str	r2, [r7, #4]
 800252c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800253c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	683a      	ldr	r2, [r7, #0]
 8002544:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	2b40      	cmp	r3, #64	; 0x40
 800254c:	d108      	bne.n	8002560 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	68ba      	ldr	r2, [r7, #8]
 800255c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800255e:	e007      	b.n	8002570 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	68ba      	ldr	r2, [r7, #8]
 8002566:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	60da      	str	r2, [r3, #12]
}
 8002570:	bf00      	nop
 8002572:	3714      	adds	r7, #20
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr

0800257c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800257c:	b480      	push	{r7}
 800257e:	b085      	sub	sp, #20
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	b2db      	uxtb	r3, r3
 800258a:	3b10      	subs	r3, #16
 800258c:	4a14      	ldr	r2, [pc, #80]	; (80025e0 <DMA_CalcBaseAndBitshift+0x64>)
 800258e:	fba2 2303 	umull	r2, r3, r2, r3
 8002592:	091b      	lsrs	r3, r3, #4
 8002594:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002596:	4a13      	ldr	r2, [pc, #76]	; (80025e4 <DMA_CalcBaseAndBitshift+0x68>)
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	4413      	add	r3, r2
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	461a      	mov	r2, r3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2b03      	cmp	r3, #3
 80025a8:	d909      	bls.n	80025be <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80025b2:	f023 0303 	bic.w	r3, r3, #3
 80025b6:	1d1a      	adds	r2, r3, #4
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	659a      	str	r2, [r3, #88]	; 0x58
 80025bc:	e007      	b.n	80025ce <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80025c6:	f023 0303 	bic.w	r3, r3, #3
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3714      	adds	r7, #20
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	aaaaaaab 	.word	0xaaaaaaab
 80025e4:	080192fc 	.word	0x080192fc

080025e8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b085      	sub	sp, #20
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025f0:	2300      	movs	r3, #0
 80025f2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025f8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	699b      	ldr	r3, [r3, #24]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d11f      	bne.n	8002642 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	2b03      	cmp	r3, #3
 8002606:	d855      	bhi.n	80026b4 <DMA_CheckFifoParam+0xcc>
 8002608:	a201      	add	r2, pc, #4	; (adr r2, 8002610 <DMA_CheckFifoParam+0x28>)
 800260a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800260e:	bf00      	nop
 8002610:	08002621 	.word	0x08002621
 8002614:	08002633 	.word	0x08002633
 8002618:	08002621 	.word	0x08002621
 800261c:	080026b5 	.word	0x080026b5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002624:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002628:	2b00      	cmp	r3, #0
 800262a:	d045      	beq.n	80026b8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002630:	e042      	b.n	80026b8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002636:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800263a:	d13f      	bne.n	80026bc <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002640:	e03c      	b.n	80026bc <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	699b      	ldr	r3, [r3, #24]
 8002646:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800264a:	d121      	bne.n	8002690 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	2b03      	cmp	r3, #3
 8002650:	d836      	bhi.n	80026c0 <DMA_CheckFifoParam+0xd8>
 8002652:	a201      	add	r2, pc, #4	; (adr r2, 8002658 <DMA_CheckFifoParam+0x70>)
 8002654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002658:	08002669 	.word	0x08002669
 800265c:	0800266f 	.word	0x0800266f
 8002660:	08002669 	.word	0x08002669
 8002664:	08002681 	.word	0x08002681
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	73fb      	strb	r3, [r7, #15]
      break;
 800266c:	e02f      	b.n	80026ce <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002672:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d024      	beq.n	80026c4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800267e:	e021      	b.n	80026c4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002684:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002688:	d11e      	bne.n	80026c8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800268e:	e01b      	b.n	80026c8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	2b02      	cmp	r3, #2
 8002694:	d902      	bls.n	800269c <DMA_CheckFifoParam+0xb4>
 8002696:	2b03      	cmp	r3, #3
 8002698:	d003      	beq.n	80026a2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800269a:	e018      	b.n	80026ce <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	73fb      	strb	r3, [r7, #15]
      break;
 80026a0:	e015      	b.n	80026ce <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d00e      	beq.n	80026cc <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	73fb      	strb	r3, [r7, #15]
      break;
 80026b2:	e00b      	b.n	80026cc <DMA_CheckFifoParam+0xe4>
      break;
 80026b4:	bf00      	nop
 80026b6:	e00a      	b.n	80026ce <DMA_CheckFifoParam+0xe6>
      break;
 80026b8:	bf00      	nop
 80026ba:	e008      	b.n	80026ce <DMA_CheckFifoParam+0xe6>
      break;
 80026bc:	bf00      	nop
 80026be:	e006      	b.n	80026ce <DMA_CheckFifoParam+0xe6>
      break;
 80026c0:	bf00      	nop
 80026c2:	e004      	b.n	80026ce <DMA_CheckFifoParam+0xe6>
      break;
 80026c4:	bf00      	nop
 80026c6:	e002      	b.n	80026ce <DMA_CheckFifoParam+0xe6>
      break;   
 80026c8:	bf00      	nop
 80026ca:	e000      	b.n	80026ce <DMA_CheckFifoParam+0xe6>
      break;
 80026cc:	bf00      	nop
    }
  } 
  
  return status; 
 80026ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3714      	adds	r7, #20
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr

080026dc <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b086      	sub	sp, #24
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	60f8      	str	r0, [r7, #12]
 80026e4:	60b9      	str	r1, [r7, #8]
 80026e6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80026ee:	4b23      	ldr	r3, [pc, #140]	; (800277c <HAL_FLASH_Program+0xa0>)
 80026f0:	7e1b      	ldrb	r3, [r3, #24]
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d101      	bne.n	80026fa <HAL_FLASH_Program+0x1e>
 80026f6:	2302      	movs	r3, #2
 80026f8:	e03b      	b.n	8002772 <HAL_FLASH_Program+0x96>
 80026fa:	4b20      	ldr	r3, [pc, #128]	; (800277c <HAL_FLASH_Program+0xa0>)
 80026fc:	2201      	movs	r2, #1
 80026fe:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002700:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002704:	f000 f860 	bl	80027c8 <FLASH_WaitForLastOperation>
 8002708:	4603      	mov	r3, r0
 800270a:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 800270c:	7dfb      	ldrb	r3, [r7, #23]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d12b      	bne.n	800276a <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d105      	bne.n	8002724 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8002718:	783b      	ldrb	r3, [r7, #0]
 800271a:	4619      	mov	r1, r3
 800271c:	68b8      	ldr	r0, [r7, #8]
 800271e:	f000 f907 	bl	8002930 <FLASH_Program_Byte>
 8002722:	e016      	b.n	8002752 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2b01      	cmp	r3, #1
 8002728:	d105      	bne.n	8002736 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800272a:	883b      	ldrh	r3, [r7, #0]
 800272c:	4619      	mov	r1, r3
 800272e:	68b8      	ldr	r0, [r7, #8]
 8002730:	f000 f8da 	bl	80028e8 <FLASH_Program_HalfWord>
 8002734:	e00d      	b.n	8002752 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2b02      	cmp	r3, #2
 800273a:	d105      	bne.n	8002748 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	4619      	mov	r1, r3
 8002740:	68b8      	ldr	r0, [r7, #8]
 8002742:	f000 f8af 	bl	80028a4 <FLASH_Program_Word>
 8002746:	e004      	b.n	8002752 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8002748:	e9d7 2300 	ldrd	r2, r3, [r7]
 800274c:	68b8      	ldr	r0, [r7, #8]
 800274e:	f000 f87b 	bl	8002848 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002752:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002756:	f000 f837 	bl	80027c8 <FLASH_WaitForLastOperation>
 800275a:	4603      	mov	r3, r0
 800275c:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800275e:	4b08      	ldr	r3, [pc, #32]	; (8002780 <HAL_FLASH_Program+0xa4>)
 8002760:	691b      	ldr	r3, [r3, #16]
 8002762:	4a07      	ldr	r2, [pc, #28]	; (8002780 <HAL_FLASH_Program+0xa4>)
 8002764:	f023 0301 	bic.w	r3, r3, #1
 8002768:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800276a:	4b04      	ldr	r3, [pc, #16]	; (800277c <HAL_FLASH_Program+0xa0>)
 800276c:	2200      	movs	r2, #0
 800276e:	761a      	strb	r2, [r3, #24]
  
  return status;
 8002770:	7dfb      	ldrb	r3, [r7, #23]
}
 8002772:	4618      	mov	r0, r3
 8002774:	3718      	adds	r7, #24
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	20006c54 	.word	0x20006c54
 8002780:	40023c00 	.word	0x40023c00

08002784 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800278a:	2300      	movs	r3, #0
 800278c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800278e:	4b0b      	ldr	r3, [pc, #44]	; (80027bc <HAL_FLASH_Unlock+0x38>)
 8002790:	691b      	ldr	r3, [r3, #16]
 8002792:	2b00      	cmp	r3, #0
 8002794:	da0b      	bge.n	80027ae <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002796:	4b09      	ldr	r3, [pc, #36]	; (80027bc <HAL_FLASH_Unlock+0x38>)
 8002798:	4a09      	ldr	r2, [pc, #36]	; (80027c0 <HAL_FLASH_Unlock+0x3c>)
 800279a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800279c:	4b07      	ldr	r3, [pc, #28]	; (80027bc <HAL_FLASH_Unlock+0x38>)
 800279e:	4a09      	ldr	r2, [pc, #36]	; (80027c4 <HAL_FLASH_Unlock+0x40>)
 80027a0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80027a2:	4b06      	ldr	r3, [pc, #24]	; (80027bc <HAL_FLASH_Unlock+0x38>)
 80027a4:	691b      	ldr	r3, [r3, #16]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	da01      	bge.n	80027ae <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80027ae:	79fb      	ldrb	r3, [r7, #7]
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	370c      	adds	r7, #12
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr
 80027bc:	40023c00 	.word	0x40023c00
 80027c0:	45670123 	.word	0x45670123
 80027c4:	cdef89ab 	.word	0xcdef89ab

080027c8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80027d0:	2300      	movs	r3, #0
 80027d2:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80027d4:	4b1a      	ldr	r3, [pc, #104]	; (8002840 <FLASH_WaitForLastOperation+0x78>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80027da:	f7fe fc1b 	bl	8001014 <HAL_GetTick>
 80027de:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80027e0:	e010      	b.n	8002804 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027e8:	d00c      	beq.n	8002804 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d007      	beq.n	8002800 <FLASH_WaitForLastOperation+0x38>
 80027f0:	f7fe fc10 	bl	8001014 <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d201      	bcs.n	8002804 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8002800:	2303      	movs	r3, #3
 8002802:	e019      	b.n	8002838 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002804:	4b0f      	ldr	r3, [pc, #60]	; (8002844 <FLASH_WaitForLastOperation+0x7c>)
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800280c:	2b00      	cmp	r3, #0
 800280e:	d1e8      	bne.n	80027e2 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8002810:	4b0c      	ldr	r3, [pc, #48]	; (8002844 <FLASH_WaitForLastOperation+0x7c>)
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	f003 0301 	and.w	r3, r3, #1
 8002818:	2b00      	cmp	r3, #0
 800281a:	d002      	beq.n	8002822 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800281c:	4b09      	ldr	r3, [pc, #36]	; (8002844 <FLASH_WaitForLastOperation+0x7c>)
 800281e:	2201      	movs	r2, #1
 8002820:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8002822:	4b08      	ldr	r3, [pc, #32]	; (8002844 <FLASH_WaitForLastOperation+0x7c>)
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 800282a:	2b00      	cmp	r3, #0
 800282c:	d003      	beq.n	8002836 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800282e:	f000 f8a1 	bl	8002974 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e000      	b.n	8002838 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8002836:	2300      	movs	r3, #0
  
}  
 8002838:	4618      	mov	r0, r3
 800283a:	3710      	adds	r7, #16
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}
 8002840:	20006c54 	.word	0x20006c54
 8002844:	40023c00 	.word	0x40023c00

08002848 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8002848:	b490      	push	{r4, r7}
 800284a:	b084      	sub	sp, #16
 800284c:	af00      	add	r7, sp, #0
 800284e:	60f8      	str	r0, [r7, #12]
 8002850:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002854:	4b12      	ldr	r3, [pc, #72]	; (80028a0 <FLASH_Program_DoubleWord+0x58>)
 8002856:	691b      	ldr	r3, [r3, #16]
 8002858:	4a11      	ldr	r2, [pc, #68]	; (80028a0 <FLASH_Program_DoubleWord+0x58>)
 800285a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800285e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8002860:	4b0f      	ldr	r3, [pc, #60]	; (80028a0 <FLASH_Program_DoubleWord+0x58>)
 8002862:	691b      	ldr	r3, [r3, #16]
 8002864:	4a0e      	ldr	r2, [pc, #56]	; (80028a0 <FLASH_Program_DoubleWord+0x58>)
 8002866:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800286a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800286c:	4b0c      	ldr	r3, [pc, #48]	; (80028a0 <FLASH_Program_DoubleWord+0x58>)
 800286e:	691b      	ldr	r3, [r3, #16]
 8002870:	4a0b      	ldr	r2, [pc, #44]	; (80028a0 <FLASH_Program_DoubleWord+0x58>)
 8002872:	f043 0301 	orr.w	r3, r3, #1
 8002876:	6113      	str	r3, [r2, #16]

  /* Program the double-word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	683a      	ldr	r2, [r7, #0]
 800287c:	601a      	str	r2, [r3, #0]
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800287e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002882:	f04f 0300 	mov.w	r3, #0
 8002886:	f04f 0400 	mov.w	r4, #0
 800288a:	0013      	movs	r3, r2
 800288c:	2400      	movs	r4, #0
 800288e:	68fa      	ldr	r2, [r7, #12]
 8002890:	3204      	adds	r2, #4
 8002892:	6013      	str	r3, [r2, #0]
}
 8002894:	bf00      	nop
 8002896:	3710      	adds	r7, #16
 8002898:	46bd      	mov	sp, r7
 800289a:	bc90      	pop	{r4, r7}
 800289c:	4770      	bx	lr
 800289e:	bf00      	nop
 80028a0:	40023c00 	.word	0x40023c00

080028a4 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80028ae:	4b0d      	ldr	r3, [pc, #52]	; (80028e4 <FLASH_Program_Word+0x40>)
 80028b0:	691b      	ldr	r3, [r3, #16]
 80028b2:	4a0c      	ldr	r2, [pc, #48]	; (80028e4 <FLASH_Program_Word+0x40>)
 80028b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028b8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80028ba:	4b0a      	ldr	r3, [pc, #40]	; (80028e4 <FLASH_Program_Word+0x40>)
 80028bc:	691b      	ldr	r3, [r3, #16]
 80028be:	4a09      	ldr	r2, [pc, #36]	; (80028e4 <FLASH_Program_Word+0x40>)
 80028c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028c4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80028c6:	4b07      	ldr	r3, [pc, #28]	; (80028e4 <FLASH_Program_Word+0x40>)
 80028c8:	691b      	ldr	r3, [r3, #16]
 80028ca:	4a06      	ldr	r2, [pc, #24]	; (80028e4 <FLASH_Program_Word+0x40>)
 80028cc:	f043 0301 	orr.w	r3, r3, #1
 80028d0:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	683a      	ldr	r2, [r7, #0]
 80028d6:	601a      	str	r2, [r3, #0]
}
 80028d8:	bf00      	nop
 80028da:	370c      	adds	r7, #12
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr
 80028e4:	40023c00 	.word	0x40023c00

080028e8 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	460b      	mov	r3, r1
 80028f2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80028f4:	4b0d      	ldr	r3, [pc, #52]	; (800292c <FLASH_Program_HalfWord+0x44>)
 80028f6:	691b      	ldr	r3, [r3, #16]
 80028f8:	4a0c      	ldr	r2, [pc, #48]	; (800292c <FLASH_Program_HalfWord+0x44>)
 80028fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028fe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8002900:	4b0a      	ldr	r3, [pc, #40]	; (800292c <FLASH_Program_HalfWord+0x44>)
 8002902:	691b      	ldr	r3, [r3, #16]
 8002904:	4a09      	ldr	r2, [pc, #36]	; (800292c <FLASH_Program_HalfWord+0x44>)
 8002906:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800290a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800290c:	4b07      	ldr	r3, [pc, #28]	; (800292c <FLASH_Program_HalfWord+0x44>)
 800290e:	691b      	ldr	r3, [r3, #16]
 8002910:	4a06      	ldr	r2, [pc, #24]	; (800292c <FLASH_Program_HalfWord+0x44>)
 8002912:	f043 0301 	orr.w	r3, r3, #1
 8002916:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	887a      	ldrh	r2, [r7, #2]
 800291c:	801a      	strh	r2, [r3, #0]
}
 800291e:	bf00      	nop
 8002920:	370c      	adds	r7, #12
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	40023c00 	.word	0x40023c00

08002930 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	460b      	mov	r3, r1
 800293a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800293c:	4b0c      	ldr	r3, [pc, #48]	; (8002970 <FLASH_Program_Byte+0x40>)
 800293e:	691b      	ldr	r3, [r3, #16]
 8002940:	4a0b      	ldr	r2, [pc, #44]	; (8002970 <FLASH_Program_Byte+0x40>)
 8002942:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002946:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8002948:	4b09      	ldr	r3, [pc, #36]	; (8002970 <FLASH_Program_Byte+0x40>)
 800294a:	4a09      	ldr	r2, [pc, #36]	; (8002970 <FLASH_Program_Byte+0x40>)
 800294c:	691b      	ldr	r3, [r3, #16]
 800294e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002950:	4b07      	ldr	r3, [pc, #28]	; (8002970 <FLASH_Program_Byte+0x40>)
 8002952:	691b      	ldr	r3, [r3, #16]
 8002954:	4a06      	ldr	r2, [pc, #24]	; (8002970 <FLASH_Program_Byte+0x40>)
 8002956:	f043 0301 	orr.w	r3, r3, #1
 800295a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	78fa      	ldrb	r2, [r7, #3]
 8002960:	701a      	strb	r2, [r3, #0]
}
 8002962:	bf00      	nop
 8002964:	370c      	adds	r7, #12
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr
 800296e:	bf00      	nop
 8002970:	40023c00 	.word	0x40023c00

08002974 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8002978:	4b27      	ldr	r3, [pc, #156]	; (8002a18 <FLASH_SetErrorCode+0xa4>)
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	f003 0310 	and.w	r3, r3, #16
 8002980:	2b00      	cmp	r3, #0
 8002982:	d008      	beq.n	8002996 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002984:	4b25      	ldr	r3, [pc, #148]	; (8002a1c <FLASH_SetErrorCode+0xa8>)
 8002986:	69db      	ldr	r3, [r3, #28]
 8002988:	f043 0310 	orr.w	r3, r3, #16
 800298c:	4a23      	ldr	r2, [pc, #140]	; (8002a1c <FLASH_SetErrorCode+0xa8>)
 800298e:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8002990:	4b21      	ldr	r3, [pc, #132]	; (8002a18 <FLASH_SetErrorCode+0xa4>)
 8002992:	2210      	movs	r2, #16
 8002994:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8002996:	4b20      	ldr	r3, [pc, #128]	; (8002a18 <FLASH_SetErrorCode+0xa4>)
 8002998:	68db      	ldr	r3, [r3, #12]
 800299a:	f003 0320 	and.w	r3, r3, #32
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d008      	beq.n	80029b4 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80029a2:	4b1e      	ldr	r3, [pc, #120]	; (8002a1c <FLASH_SetErrorCode+0xa8>)
 80029a4:	69db      	ldr	r3, [r3, #28]
 80029a6:	f043 0308 	orr.w	r3, r3, #8
 80029aa:	4a1c      	ldr	r2, [pc, #112]	; (8002a1c <FLASH_SetErrorCode+0xa8>)
 80029ac:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80029ae:	4b1a      	ldr	r3, [pc, #104]	; (8002a18 <FLASH_SetErrorCode+0xa4>)
 80029b0:	2220      	movs	r2, #32
 80029b2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80029b4:	4b18      	ldr	r3, [pc, #96]	; (8002a18 <FLASH_SetErrorCode+0xa4>)
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d008      	beq.n	80029d2 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80029c0:	4b16      	ldr	r3, [pc, #88]	; (8002a1c <FLASH_SetErrorCode+0xa8>)
 80029c2:	69db      	ldr	r3, [r3, #28]
 80029c4:	f043 0304 	orr.w	r3, r3, #4
 80029c8:	4a14      	ldr	r2, [pc, #80]	; (8002a1c <FLASH_SetErrorCode+0xa8>)
 80029ca:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80029cc:	4b12      	ldr	r3, [pc, #72]	; (8002a18 <FLASH_SetErrorCode+0xa4>)
 80029ce:	2240      	movs	r2, #64	; 0x40
 80029d0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80029d2:	4b11      	ldr	r3, [pc, #68]	; (8002a18 <FLASH_SetErrorCode+0xa4>)
 80029d4:	68db      	ldr	r3, [r3, #12]
 80029d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d008      	beq.n	80029f0 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80029de:	4b0f      	ldr	r3, [pc, #60]	; (8002a1c <FLASH_SetErrorCode+0xa8>)
 80029e0:	69db      	ldr	r3, [r3, #28]
 80029e2:	f043 0302 	orr.w	r3, r3, #2
 80029e6:	4a0d      	ldr	r2, [pc, #52]	; (8002a1c <FLASH_SetErrorCode+0xa8>)
 80029e8:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80029ea:	4b0b      	ldr	r3, [pc, #44]	; (8002a18 <FLASH_SetErrorCode+0xa4>)
 80029ec:	2280      	movs	r2, #128	; 0x80
 80029ee:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80029f0:	4b09      	ldr	r3, [pc, #36]	; (8002a18 <FLASH_SetErrorCode+0xa4>)
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	f003 0302 	and.w	r3, r3, #2
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d008      	beq.n	8002a0e <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80029fc:	4b07      	ldr	r3, [pc, #28]	; (8002a1c <FLASH_SetErrorCode+0xa8>)
 80029fe:	69db      	ldr	r3, [r3, #28]
 8002a00:	f043 0320 	orr.w	r3, r3, #32
 8002a04:	4a05      	ldr	r2, [pc, #20]	; (8002a1c <FLASH_SetErrorCode+0xa8>)
 8002a06:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8002a08:	4b03      	ldr	r3, [pc, #12]	; (8002a18 <FLASH_SetErrorCode+0xa4>)
 8002a0a:	2202      	movs	r2, #2
 8002a0c:	60da      	str	r2, [r3, #12]
  }
}
 8002a0e:	bf00      	nop
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr
 8002a18:	40023c00 	.word	0x40023c00
 8002a1c:	20006c54 	.word	0x20006c54

08002a20 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002a32:	4b31      	ldr	r3, [pc, #196]	; (8002af8 <HAL_FLASHEx_Erase+0xd8>)
 8002a34:	7e1b      	ldrb	r3, [r3, #24]
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d101      	bne.n	8002a3e <HAL_FLASHEx_Erase+0x1e>
 8002a3a:	2302      	movs	r3, #2
 8002a3c:	e058      	b.n	8002af0 <HAL_FLASHEx_Erase+0xd0>
 8002a3e:	4b2e      	ldr	r3, [pc, #184]	; (8002af8 <HAL_FLASHEx_Erase+0xd8>)
 8002a40:	2201      	movs	r2, #1
 8002a42:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002a44:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002a48:	f7ff febe 	bl	80027c8 <FLASH_WaitForLastOperation>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8002a50:	7bfb      	ldrb	r3, [r7, #15]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d148      	bne.n	8002ae8 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	f04f 32ff 	mov.w	r2, #4294967295
 8002a5c:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d115      	bne.n	8002a92 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	691b      	ldr	r3, [r3, #16]
 8002a6a:	b2da      	uxtb	r2, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	4619      	mov	r1, r3
 8002a72:	4610      	mov	r0, r2
 8002a74:	f000 f844 	bl	8002b00 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002a78:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002a7c:	f7ff fea4 	bl	80027c8 <FLASH_WaitForLastOperation>
 8002a80:	4603      	mov	r3, r0
 8002a82:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8002a84:	4b1d      	ldr	r3, [pc, #116]	; (8002afc <HAL_FLASHEx_Erase+0xdc>)
 8002a86:	691b      	ldr	r3, [r3, #16]
 8002a88:	4a1c      	ldr	r2, [pc, #112]	; (8002afc <HAL_FLASHEx_Erase+0xdc>)
 8002a8a:	f023 0304 	bic.w	r3, r3, #4
 8002a8e:	6113      	str	r3, [r2, #16]
 8002a90:	e028      	b.n	8002ae4 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	60bb      	str	r3, [r7, #8]
 8002a98:	e01c      	b.n	8002ad4 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	68b8      	ldr	r0, [r7, #8]
 8002aa4:	f000 f850 	bl	8002b48 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002aa8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002aac:	f7ff fe8c 	bl	80027c8 <FLASH_WaitForLastOperation>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8002ab4:	4b11      	ldr	r3, [pc, #68]	; (8002afc <HAL_FLASHEx_Erase+0xdc>)
 8002ab6:	691b      	ldr	r3, [r3, #16]
 8002ab8:	4a10      	ldr	r2, [pc, #64]	; (8002afc <HAL_FLASHEx_Erase+0xdc>)
 8002aba:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8002abe:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8002ac0:	7bfb      	ldrb	r3, [r7, #15]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d003      	beq.n	8002ace <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	68ba      	ldr	r2, [r7, #8]
 8002aca:	601a      	str	r2, [r3, #0]
          break;
 8002acc:	e00a      	b.n	8002ae4 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	3301      	adds	r3, #1
 8002ad2:	60bb      	str	r3, [r7, #8]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	68da      	ldr	r2, [r3, #12]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	4413      	add	r3, r2
 8002ade:	68ba      	ldr	r2, [r7, #8]
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d3da      	bcc.n	8002a9a <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8002ae4:	f000 f878 	bl	8002bd8 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002ae8:	4b03      	ldr	r3, [pc, #12]	; (8002af8 <HAL_FLASHEx_Erase+0xd8>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	761a      	strb	r2, [r3, #24]

  return status;
 8002aee:	7bfb      	ldrb	r3, [r7, #15]
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3710      	adds	r7, #16
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	20006c54 	.word	0x20006c54
 8002afc:	40023c00 	.word	0x40023c00

08002b00 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b083      	sub	sp, #12
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	4603      	mov	r3, r0
 8002b08:	6039      	str	r1, [r7, #0]
 8002b0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002b0c:	4b0d      	ldr	r3, [pc, #52]	; (8002b44 <FLASH_MassErase+0x44>)
 8002b0e:	691b      	ldr	r3, [r3, #16]
 8002b10:	4a0c      	ldr	r2, [pc, #48]	; (8002b44 <FLASH_MassErase+0x44>)
 8002b12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b16:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8002b18:	4b0a      	ldr	r3, [pc, #40]	; (8002b44 <FLASH_MassErase+0x44>)
 8002b1a:	691b      	ldr	r3, [r3, #16]
 8002b1c:	4a09      	ldr	r2, [pc, #36]	; (8002b44 <FLASH_MassErase+0x44>)
 8002b1e:	f043 0304 	orr.w	r3, r3, #4
 8002b22:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8002b24:	4b07      	ldr	r3, [pc, #28]	; (8002b44 <FLASH_MassErase+0x44>)
 8002b26:	691a      	ldr	r2, [r3, #16]
 8002b28:	79fb      	ldrb	r3, [r7, #7]
 8002b2a:	021b      	lsls	r3, r3, #8
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	4a05      	ldr	r2, [pc, #20]	; (8002b44 <FLASH_MassErase+0x44>)
 8002b30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b34:	6113      	str	r3, [r2, #16]
}
 8002b36:	bf00      	nop
 8002b38:	370c      	adds	r7, #12
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr
 8002b42:	bf00      	nop
 8002b44:	40023c00 	.word	0x40023c00

08002b48 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b085      	sub	sp, #20
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	460b      	mov	r3, r1
 8002b52:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8002b54:	2300      	movs	r3, #0
 8002b56:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8002b58:	78fb      	ldrb	r3, [r7, #3]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d102      	bne.n	8002b64 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	60fb      	str	r3, [r7, #12]
 8002b62:	e010      	b.n	8002b86 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8002b64:	78fb      	ldrb	r3, [r7, #3]
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d103      	bne.n	8002b72 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8002b6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b6e:	60fb      	str	r3, [r7, #12]
 8002b70:	e009      	b.n	8002b86 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8002b72:	78fb      	ldrb	r3, [r7, #3]
 8002b74:	2b02      	cmp	r3, #2
 8002b76:	d103      	bne.n	8002b80 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8002b78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b7c:	60fb      	str	r3, [r7, #12]
 8002b7e:	e002      	b.n	8002b86 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8002b80:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002b84:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002b86:	4b13      	ldr	r3, [pc, #76]	; (8002bd4 <FLASH_Erase_Sector+0x8c>)
 8002b88:	691b      	ldr	r3, [r3, #16]
 8002b8a:	4a12      	ldr	r2, [pc, #72]	; (8002bd4 <FLASH_Erase_Sector+0x8c>)
 8002b8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b90:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8002b92:	4b10      	ldr	r3, [pc, #64]	; (8002bd4 <FLASH_Erase_Sector+0x8c>)
 8002b94:	691a      	ldr	r2, [r3, #16]
 8002b96:	490f      	ldr	r1, [pc, #60]	; (8002bd4 <FLASH_Erase_Sector+0x8c>)
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8002b9e:	4b0d      	ldr	r3, [pc, #52]	; (8002bd4 <FLASH_Erase_Sector+0x8c>)
 8002ba0:	691b      	ldr	r3, [r3, #16]
 8002ba2:	4a0c      	ldr	r2, [pc, #48]	; (8002bd4 <FLASH_Erase_Sector+0x8c>)
 8002ba4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002ba8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8002baa:	4b0a      	ldr	r3, [pc, #40]	; (8002bd4 <FLASH_Erase_Sector+0x8c>)
 8002bac:	691a      	ldr	r2, [r3, #16]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	00db      	lsls	r3, r3, #3
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	4a07      	ldr	r2, [pc, #28]	; (8002bd4 <FLASH_Erase_Sector+0x8c>)
 8002bb6:	f043 0302 	orr.w	r3, r3, #2
 8002bba:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8002bbc:	4b05      	ldr	r3, [pc, #20]	; (8002bd4 <FLASH_Erase_Sector+0x8c>)
 8002bbe:	691b      	ldr	r3, [r3, #16]
 8002bc0:	4a04      	ldr	r2, [pc, #16]	; (8002bd4 <FLASH_Erase_Sector+0x8c>)
 8002bc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bc6:	6113      	str	r3, [r2, #16]
}
 8002bc8:	bf00      	nop
 8002bca:	3714      	adds	r7, #20
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr
 8002bd4:	40023c00 	.word	0x40023c00

08002bd8 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8002bdc:	4b20      	ldr	r3, [pc, #128]	; (8002c60 <FLASH_FlushCaches+0x88>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d017      	beq.n	8002c18 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002be8:	4b1d      	ldr	r3, [pc, #116]	; (8002c60 <FLASH_FlushCaches+0x88>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a1c      	ldr	r2, [pc, #112]	; (8002c60 <FLASH_FlushCaches+0x88>)
 8002bee:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002bf2:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002bf4:	4b1a      	ldr	r3, [pc, #104]	; (8002c60 <FLASH_FlushCaches+0x88>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a19      	ldr	r2, [pc, #100]	; (8002c60 <FLASH_FlushCaches+0x88>)
 8002bfa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002bfe:	6013      	str	r3, [r2, #0]
 8002c00:	4b17      	ldr	r3, [pc, #92]	; (8002c60 <FLASH_FlushCaches+0x88>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a16      	ldr	r2, [pc, #88]	; (8002c60 <FLASH_FlushCaches+0x88>)
 8002c06:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002c0a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c0c:	4b14      	ldr	r3, [pc, #80]	; (8002c60 <FLASH_FlushCaches+0x88>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a13      	ldr	r2, [pc, #76]	; (8002c60 <FLASH_FlushCaches+0x88>)
 8002c12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c16:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8002c18:	4b11      	ldr	r3, [pc, #68]	; (8002c60 <FLASH_FlushCaches+0x88>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d017      	beq.n	8002c54 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8002c24:	4b0e      	ldr	r3, [pc, #56]	; (8002c60 <FLASH_FlushCaches+0x88>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a0d      	ldr	r2, [pc, #52]	; (8002c60 <FLASH_FlushCaches+0x88>)
 8002c2a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002c2e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8002c30:	4b0b      	ldr	r3, [pc, #44]	; (8002c60 <FLASH_FlushCaches+0x88>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a0a      	ldr	r2, [pc, #40]	; (8002c60 <FLASH_FlushCaches+0x88>)
 8002c36:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002c3a:	6013      	str	r3, [r2, #0]
 8002c3c:	4b08      	ldr	r3, [pc, #32]	; (8002c60 <FLASH_FlushCaches+0x88>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a07      	ldr	r2, [pc, #28]	; (8002c60 <FLASH_FlushCaches+0x88>)
 8002c42:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002c46:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c48:	4b05      	ldr	r3, [pc, #20]	; (8002c60 <FLASH_FlushCaches+0x88>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a04      	ldr	r2, [pc, #16]	; (8002c60 <FLASH_FlushCaches+0x88>)
 8002c4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c52:	6013      	str	r3, [r2, #0]
  }
}
 8002c54:	bf00      	nop
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop
 8002c60:	40023c00 	.word	0x40023c00

08002c64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b089      	sub	sp, #36	; 0x24
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c72:	2300      	movs	r3, #0
 8002c74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c76:	2300      	movs	r3, #0
 8002c78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	61fb      	str	r3, [r7, #28]
 8002c7e:	e16b      	b.n	8002f58 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c80:	2201      	movs	r2, #1
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	fa02 f303 	lsl.w	r3, r2, r3
 8002c88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	697a      	ldr	r2, [r7, #20]
 8002c90:	4013      	ands	r3, r2
 8002c92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c94:	693a      	ldr	r2, [r7, #16]
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	f040 815a 	bne.w	8002f52 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d003      	beq.n	8002cae <HAL_GPIO_Init+0x4a>
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	2b12      	cmp	r3, #18
 8002cac:	d123      	bne.n	8002cf6 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	08da      	lsrs	r2, r3, #3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	3208      	adds	r2, #8
 8002cb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	f003 0307 	and.w	r3, r3, #7
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	220f      	movs	r2, #15
 8002cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cca:	43db      	mvns	r3, r3
 8002ccc:	69ba      	ldr	r2, [r7, #24]
 8002cce:	4013      	ands	r3, r2
 8002cd0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	691a      	ldr	r2, [r3, #16]
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	f003 0307 	and.w	r3, r3, #7
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce2:	69ba      	ldr	r2, [r7, #24]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	08da      	lsrs	r2, r3, #3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	3208      	adds	r2, #8
 8002cf0:	69b9      	ldr	r1, [r7, #24]
 8002cf2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	005b      	lsls	r3, r3, #1
 8002d00:	2203      	movs	r2, #3
 8002d02:	fa02 f303 	lsl.w	r3, r2, r3
 8002d06:	43db      	mvns	r3, r3
 8002d08:	69ba      	ldr	r2, [r7, #24]
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	f003 0203 	and.w	r2, r3, #3
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	005b      	lsls	r3, r3, #1
 8002d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1e:	69ba      	ldr	r2, [r7, #24]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	69ba      	ldr	r2, [r7, #24]
 8002d28:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d00b      	beq.n	8002d4a <HAL_GPIO_Init+0xe6>
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d007      	beq.n	8002d4a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002d3e:	2b11      	cmp	r3, #17
 8002d40:	d003      	beq.n	8002d4a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	2b12      	cmp	r3, #18
 8002d48:	d130      	bne.n	8002dac <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	005b      	lsls	r3, r3, #1
 8002d54:	2203      	movs	r2, #3
 8002d56:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5a:	43db      	mvns	r3, r3
 8002d5c:	69ba      	ldr	r2, [r7, #24]
 8002d5e:	4013      	ands	r3, r2
 8002d60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	68da      	ldr	r2, [r3, #12]
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	005b      	lsls	r3, r3, #1
 8002d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6e:	69ba      	ldr	r2, [r7, #24]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	69ba      	ldr	r2, [r7, #24]
 8002d78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d80:	2201      	movs	r2, #1
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	fa02 f303 	lsl.w	r3, r2, r3
 8002d88:	43db      	mvns	r3, r3
 8002d8a:	69ba      	ldr	r2, [r7, #24]
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	091b      	lsrs	r3, r3, #4
 8002d96:	f003 0201 	and.w	r2, r3, #1
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002da0:	69ba      	ldr	r2, [r7, #24]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	69ba      	ldr	r2, [r7, #24]
 8002daa:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	005b      	lsls	r3, r3, #1
 8002db6:	2203      	movs	r2, #3
 8002db8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbc:	43db      	mvns	r3, r3
 8002dbe:	69ba      	ldr	r2, [r7, #24]
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	689a      	ldr	r2, [r3, #8]
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	005b      	lsls	r3, r3, #1
 8002dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd0:	69ba      	ldr	r2, [r7, #24]
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	69ba      	ldr	r2, [r7, #24]
 8002dda:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	f000 80b4 	beq.w	8002f52 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dea:	2300      	movs	r3, #0
 8002dec:	60fb      	str	r3, [r7, #12]
 8002dee:	4b5f      	ldr	r3, [pc, #380]	; (8002f6c <HAL_GPIO_Init+0x308>)
 8002df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002df2:	4a5e      	ldr	r2, [pc, #376]	; (8002f6c <HAL_GPIO_Init+0x308>)
 8002df4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002df8:	6453      	str	r3, [r2, #68]	; 0x44
 8002dfa:	4b5c      	ldr	r3, [pc, #368]	; (8002f6c <HAL_GPIO_Init+0x308>)
 8002dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e02:	60fb      	str	r3, [r7, #12]
 8002e04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e06:	4a5a      	ldr	r2, [pc, #360]	; (8002f70 <HAL_GPIO_Init+0x30c>)
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	089b      	lsrs	r3, r3, #2
 8002e0c:	3302      	adds	r3, #2
 8002e0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	f003 0303 	and.w	r3, r3, #3
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	220f      	movs	r2, #15
 8002e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e22:	43db      	mvns	r3, r3
 8002e24:	69ba      	ldr	r2, [r7, #24]
 8002e26:	4013      	ands	r3, r2
 8002e28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a51      	ldr	r2, [pc, #324]	; (8002f74 <HAL_GPIO_Init+0x310>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d02b      	beq.n	8002e8a <HAL_GPIO_Init+0x226>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a50      	ldr	r2, [pc, #320]	; (8002f78 <HAL_GPIO_Init+0x314>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d025      	beq.n	8002e86 <HAL_GPIO_Init+0x222>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4a4f      	ldr	r2, [pc, #316]	; (8002f7c <HAL_GPIO_Init+0x318>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d01f      	beq.n	8002e82 <HAL_GPIO_Init+0x21e>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a4e      	ldr	r2, [pc, #312]	; (8002f80 <HAL_GPIO_Init+0x31c>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d019      	beq.n	8002e7e <HAL_GPIO_Init+0x21a>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a4d      	ldr	r2, [pc, #308]	; (8002f84 <HAL_GPIO_Init+0x320>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d013      	beq.n	8002e7a <HAL_GPIO_Init+0x216>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a4c      	ldr	r2, [pc, #304]	; (8002f88 <HAL_GPIO_Init+0x324>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d00d      	beq.n	8002e76 <HAL_GPIO_Init+0x212>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4a4b      	ldr	r2, [pc, #300]	; (8002f8c <HAL_GPIO_Init+0x328>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d007      	beq.n	8002e72 <HAL_GPIO_Init+0x20e>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4a4a      	ldr	r2, [pc, #296]	; (8002f90 <HAL_GPIO_Init+0x32c>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d101      	bne.n	8002e6e <HAL_GPIO_Init+0x20a>
 8002e6a:	2307      	movs	r3, #7
 8002e6c:	e00e      	b.n	8002e8c <HAL_GPIO_Init+0x228>
 8002e6e:	2308      	movs	r3, #8
 8002e70:	e00c      	b.n	8002e8c <HAL_GPIO_Init+0x228>
 8002e72:	2306      	movs	r3, #6
 8002e74:	e00a      	b.n	8002e8c <HAL_GPIO_Init+0x228>
 8002e76:	2305      	movs	r3, #5
 8002e78:	e008      	b.n	8002e8c <HAL_GPIO_Init+0x228>
 8002e7a:	2304      	movs	r3, #4
 8002e7c:	e006      	b.n	8002e8c <HAL_GPIO_Init+0x228>
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e004      	b.n	8002e8c <HAL_GPIO_Init+0x228>
 8002e82:	2302      	movs	r3, #2
 8002e84:	e002      	b.n	8002e8c <HAL_GPIO_Init+0x228>
 8002e86:	2301      	movs	r3, #1
 8002e88:	e000      	b.n	8002e8c <HAL_GPIO_Init+0x228>
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	69fa      	ldr	r2, [r7, #28]
 8002e8e:	f002 0203 	and.w	r2, r2, #3
 8002e92:	0092      	lsls	r2, r2, #2
 8002e94:	4093      	lsls	r3, r2
 8002e96:	69ba      	ldr	r2, [r7, #24]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e9c:	4934      	ldr	r1, [pc, #208]	; (8002f70 <HAL_GPIO_Init+0x30c>)
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	089b      	lsrs	r3, r3, #2
 8002ea2:	3302      	adds	r3, #2
 8002ea4:	69ba      	ldr	r2, [r7, #24]
 8002ea6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002eaa:	4b3a      	ldr	r3, [pc, #232]	; (8002f94 <HAL_GPIO_Init+0x330>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	43db      	mvns	r3, r3
 8002eb4:	69ba      	ldr	r2, [r7, #24]
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d003      	beq.n	8002ece <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002ec6:	69ba      	ldr	r2, [r7, #24]
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ece:	4a31      	ldr	r2, [pc, #196]	; (8002f94 <HAL_GPIO_Init+0x330>)
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002ed4:	4b2f      	ldr	r3, [pc, #188]	; (8002f94 <HAL_GPIO_Init+0x330>)
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	43db      	mvns	r3, r3
 8002ede:	69ba      	ldr	r2, [r7, #24]
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d003      	beq.n	8002ef8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002ef0:	69ba      	ldr	r2, [r7, #24]
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ef8:	4a26      	ldr	r2, [pc, #152]	; (8002f94 <HAL_GPIO_Init+0x330>)
 8002efa:	69bb      	ldr	r3, [r7, #24]
 8002efc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002efe:	4b25      	ldr	r3, [pc, #148]	; (8002f94 <HAL_GPIO_Init+0x330>)
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	43db      	mvns	r3, r3
 8002f08:	69ba      	ldr	r2, [r7, #24]
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d003      	beq.n	8002f22 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002f1a:	69ba      	ldr	r2, [r7, #24]
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f22:	4a1c      	ldr	r2, [pc, #112]	; (8002f94 <HAL_GPIO_Init+0x330>)
 8002f24:	69bb      	ldr	r3, [r7, #24]
 8002f26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f28:	4b1a      	ldr	r3, [pc, #104]	; (8002f94 <HAL_GPIO_Init+0x330>)
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	43db      	mvns	r3, r3
 8002f32:	69ba      	ldr	r2, [r7, #24]
 8002f34:	4013      	ands	r3, r2
 8002f36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d003      	beq.n	8002f4c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002f44:	69ba      	ldr	r2, [r7, #24]
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f4c:	4a11      	ldr	r2, [pc, #68]	; (8002f94 <HAL_GPIO_Init+0x330>)
 8002f4e:	69bb      	ldr	r3, [r7, #24]
 8002f50:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	3301      	adds	r3, #1
 8002f56:	61fb      	str	r3, [r7, #28]
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	2b0f      	cmp	r3, #15
 8002f5c:	f67f ae90 	bls.w	8002c80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f60:	bf00      	nop
 8002f62:	3724      	adds	r7, #36	; 0x24
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr
 8002f6c:	40023800 	.word	0x40023800
 8002f70:	40013800 	.word	0x40013800
 8002f74:	40020000 	.word	0x40020000
 8002f78:	40020400 	.word	0x40020400
 8002f7c:	40020800 	.word	0x40020800
 8002f80:	40020c00 	.word	0x40020c00
 8002f84:	40021000 	.word	0x40021000
 8002f88:	40021400 	.word	0x40021400
 8002f8c:	40021800 	.word	0x40021800
 8002f90:	40021c00 	.word	0x40021c00
 8002f94:	40013c00 	.word	0x40013c00

08002f98 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b087      	sub	sp, #28
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8002faa:	2300      	movs	r3, #0
 8002fac:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fae:	2300      	movs	r3, #0
 8002fb0:	617b      	str	r3, [r7, #20]
 8002fb2:	e0cd      	b.n	8003150 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbc:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002fbe:	683a      	ldr	r2, [r7, #0]
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8002fc6:	68fa      	ldr	r2, [r7, #12]
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	f040 80bd 	bne.w	800314a <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002fd0:	4a64      	ldr	r2, [pc, #400]	; (8003164 <HAL_GPIO_DeInit+0x1cc>)
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	089b      	lsrs	r3, r3, #2
 8002fd6:	3302      	adds	r3, #2
 8002fd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fdc:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	f003 0303 	and.w	r3, r3, #3
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	220f      	movs	r2, #15
 8002fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fec:	68ba      	ldr	r2, [r7, #8]
 8002fee:	4013      	ands	r3, r2
 8002ff0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4a5c      	ldr	r2, [pc, #368]	; (8003168 <HAL_GPIO_DeInit+0x1d0>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d02b      	beq.n	8003052 <HAL_GPIO_DeInit+0xba>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4a5b      	ldr	r2, [pc, #364]	; (800316c <HAL_GPIO_DeInit+0x1d4>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d025      	beq.n	800304e <HAL_GPIO_DeInit+0xb6>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4a5a      	ldr	r2, [pc, #360]	; (8003170 <HAL_GPIO_DeInit+0x1d8>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d01f      	beq.n	800304a <HAL_GPIO_DeInit+0xb2>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4a59      	ldr	r2, [pc, #356]	; (8003174 <HAL_GPIO_DeInit+0x1dc>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d019      	beq.n	8003046 <HAL_GPIO_DeInit+0xae>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4a58      	ldr	r2, [pc, #352]	; (8003178 <HAL_GPIO_DeInit+0x1e0>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d013      	beq.n	8003042 <HAL_GPIO_DeInit+0xaa>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4a57      	ldr	r2, [pc, #348]	; (800317c <HAL_GPIO_DeInit+0x1e4>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d00d      	beq.n	800303e <HAL_GPIO_DeInit+0xa6>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4a56      	ldr	r2, [pc, #344]	; (8003180 <HAL_GPIO_DeInit+0x1e8>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d007      	beq.n	800303a <HAL_GPIO_DeInit+0xa2>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4a55      	ldr	r2, [pc, #340]	; (8003184 <HAL_GPIO_DeInit+0x1ec>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d101      	bne.n	8003036 <HAL_GPIO_DeInit+0x9e>
 8003032:	2307      	movs	r3, #7
 8003034:	e00e      	b.n	8003054 <HAL_GPIO_DeInit+0xbc>
 8003036:	2308      	movs	r3, #8
 8003038:	e00c      	b.n	8003054 <HAL_GPIO_DeInit+0xbc>
 800303a:	2306      	movs	r3, #6
 800303c:	e00a      	b.n	8003054 <HAL_GPIO_DeInit+0xbc>
 800303e:	2305      	movs	r3, #5
 8003040:	e008      	b.n	8003054 <HAL_GPIO_DeInit+0xbc>
 8003042:	2304      	movs	r3, #4
 8003044:	e006      	b.n	8003054 <HAL_GPIO_DeInit+0xbc>
 8003046:	2303      	movs	r3, #3
 8003048:	e004      	b.n	8003054 <HAL_GPIO_DeInit+0xbc>
 800304a:	2302      	movs	r3, #2
 800304c:	e002      	b.n	8003054 <HAL_GPIO_DeInit+0xbc>
 800304e:	2301      	movs	r3, #1
 8003050:	e000      	b.n	8003054 <HAL_GPIO_DeInit+0xbc>
 8003052:	2300      	movs	r3, #0
 8003054:	697a      	ldr	r2, [r7, #20]
 8003056:	f002 0203 	and.w	r2, r2, #3
 800305a:	0092      	lsls	r2, r2, #2
 800305c:	4093      	lsls	r3, r2
 800305e:	68ba      	ldr	r2, [r7, #8]
 8003060:	429a      	cmp	r2, r3
 8003062:	d132      	bne.n	80030ca <HAL_GPIO_DeInit+0x132>
      {
        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	f003 0303 	and.w	r3, r3, #3
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	220f      	movs	r2, #15
 800306e:	fa02 f303 	lsl.w	r3, r2, r3
 8003072:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003074:	4a3b      	ldr	r2, [pc, #236]	; (8003164 <HAL_GPIO_DeInit+0x1cc>)
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	089b      	lsrs	r3, r3, #2
 800307a:	3302      	adds	r3, #2
 800307c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	43da      	mvns	r2, r3
 8003084:	4837      	ldr	r0, [pc, #220]	; (8003164 <HAL_GPIO_DeInit+0x1cc>)
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	089b      	lsrs	r3, r3, #2
 800308a:	400a      	ands	r2, r1
 800308c:	3302      	adds	r3, #2
 800308e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003092:	4b3d      	ldr	r3, [pc, #244]	; (8003188 <HAL_GPIO_DeInit+0x1f0>)
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	43db      	mvns	r3, r3
 800309a:	493b      	ldr	r1, [pc, #236]	; (8003188 <HAL_GPIO_DeInit+0x1f0>)
 800309c:	4013      	ands	r3, r2
 800309e:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80030a0:	4b39      	ldr	r3, [pc, #228]	; (8003188 <HAL_GPIO_DeInit+0x1f0>)
 80030a2:	685a      	ldr	r2, [r3, #4]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	43db      	mvns	r3, r3
 80030a8:	4937      	ldr	r1, [pc, #220]	; (8003188 <HAL_GPIO_DeInit+0x1f0>)
 80030aa:	4013      	ands	r3, r2
 80030ac:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80030ae:	4b36      	ldr	r3, [pc, #216]	; (8003188 <HAL_GPIO_DeInit+0x1f0>)
 80030b0:	689a      	ldr	r2, [r3, #8]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	43db      	mvns	r3, r3
 80030b6:	4934      	ldr	r1, [pc, #208]	; (8003188 <HAL_GPIO_DeInit+0x1f0>)
 80030b8:	4013      	ands	r3, r2
 80030ba:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80030bc:	4b32      	ldr	r3, [pc, #200]	; (8003188 <HAL_GPIO_DeInit+0x1f0>)
 80030be:	68da      	ldr	r2, [r3, #12]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	43db      	mvns	r3, r3
 80030c4:	4930      	ldr	r1, [pc, #192]	; (8003188 <HAL_GPIO_DeInit+0x1f0>)
 80030c6:	4013      	ands	r3, r2
 80030c8:	60cb      	str	r3, [r1, #12]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	005b      	lsls	r3, r3, #1
 80030d2:	2103      	movs	r1, #3
 80030d4:	fa01 f303 	lsl.w	r3, r1, r3
 80030d8:	43db      	mvns	r3, r3
 80030da:	401a      	ands	r2, r3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	08da      	lsrs	r2, r3, #3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	3208      	adds	r2, #8
 80030e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	f003 0307 	and.w	r3, r3, #7
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	220f      	movs	r2, #15
 80030f6:	fa02 f303 	lsl.w	r3, r2, r3
 80030fa:	43db      	mvns	r3, r3
 80030fc:	697a      	ldr	r2, [r7, #20]
 80030fe:	08d2      	lsrs	r2, r2, #3
 8003100:	4019      	ands	r1, r3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	3208      	adds	r2, #8
 8003106:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	689a      	ldr	r2, [r3, #8]
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	005b      	lsls	r3, r3, #1
 8003112:	2103      	movs	r1, #3
 8003114:	fa01 f303 	lsl.w	r3, r1, r3
 8003118:	43db      	mvns	r3, r3
 800311a:	401a      	ands	r2, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	685a      	ldr	r2, [r3, #4]
 8003124:	2101      	movs	r1, #1
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	fa01 f303 	lsl.w	r3, r1, r3
 800312c:	43db      	mvns	r3, r3
 800312e:	401a      	ands	r2, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	68da      	ldr	r2, [r3, #12]
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	005b      	lsls	r3, r3, #1
 800313c:	2103      	movs	r1, #3
 800313e:	fa01 f303 	lsl.w	r3, r1, r3
 8003142:	43db      	mvns	r3, r3
 8003144:	401a      	ands	r2, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	60da      	str	r2, [r3, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	3301      	adds	r3, #1
 800314e:	617b      	str	r3, [r7, #20]
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	2b0f      	cmp	r3, #15
 8003154:	f67f af2e 	bls.w	8002fb4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003158:	bf00      	nop
 800315a:	371c      	adds	r7, #28
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr
 8003164:	40013800 	.word	0x40013800
 8003168:	40020000 	.word	0x40020000
 800316c:	40020400 	.word	0x40020400
 8003170:	40020800 	.word	0x40020800
 8003174:	40020c00 	.word	0x40020c00
 8003178:	40021000 	.word	0x40021000
 800317c:	40021400 	.word	0x40021400
 8003180:	40021800 	.word	0x40021800
 8003184:	40021c00 	.word	0x40021c00
 8003188:	40013c00 	.word	0x40013c00

0800318c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800318c:	b480      	push	{r7}
 800318e:	b085      	sub	sp, #20
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	460b      	mov	r3, r1
 8003196:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	691a      	ldr	r2, [r3, #16]
 800319c:	887b      	ldrh	r3, [r7, #2]
 800319e:	4013      	ands	r3, r2
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d002      	beq.n	80031aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80031a4:	2301      	movs	r3, #1
 80031a6:	73fb      	strb	r3, [r7, #15]
 80031a8:	e001      	b.n	80031ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80031aa:	2300      	movs	r3, #0
 80031ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80031ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3714      	adds	r7, #20
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr

080031bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031bc:	b480      	push	{r7}
 80031be:	b083      	sub	sp, #12
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	460b      	mov	r3, r1
 80031c6:	807b      	strh	r3, [r7, #2]
 80031c8:	4613      	mov	r3, r2
 80031ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80031cc:	787b      	ldrb	r3, [r7, #1]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d003      	beq.n	80031da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80031d2:	887a      	ldrh	r2, [r7, #2]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80031d8:	e003      	b.n	80031e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80031da:	887b      	ldrh	r3, [r7, #2]
 80031dc:	041a      	lsls	r2, r3, #16
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	619a      	str	r2, [r3, #24]
}
 80031e2:	bf00      	nop
 80031e4:	370c      	adds	r7, #12
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr

080031ee <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80031ee:	b480      	push	{r7}
 80031f0:	b083      	sub	sp, #12
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	6078      	str	r0, [r7, #4]
 80031f6:	460b      	mov	r3, r1
 80031f8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	695a      	ldr	r2, [r3, #20]
 80031fe:	887b      	ldrh	r3, [r7, #2]
 8003200:	401a      	ands	r2, r3
 8003202:	887b      	ldrh	r3, [r7, #2]
 8003204:	429a      	cmp	r2, r3
 8003206:	d104      	bne.n	8003212 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003208:	887b      	ldrh	r3, [r7, #2]
 800320a:	041a      	lsls	r2, r3, #16
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8003210:	e002      	b.n	8003218 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8003212:	887a      	ldrh	r2, [r7, #2]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	619a      	str	r2, [r3, #24]
}
 8003218:	bf00      	nop
 800321a:	370c      	adds	r7, #12
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr

08003224 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b082      	sub	sp, #8
 8003228:	af00      	add	r7, sp, #0
 800322a:	4603      	mov	r3, r0
 800322c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800322e:	4b08      	ldr	r3, [pc, #32]	; (8003250 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003230:	695a      	ldr	r2, [r3, #20]
 8003232:	88fb      	ldrh	r3, [r7, #6]
 8003234:	4013      	ands	r3, r2
 8003236:	2b00      	cmp	r3, #0
 8003238:	d006      	beq.n	8003248 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800323a:	4a05      	ldr	r2, [pc, #20]	; (8003250 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800323c:	88fb      	ldrh	r3, [r7, #6]
 800323e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003240:	88fb      	ldrh	r3, [r7, #6]
 8003242:	4618      	mov	r0, r3
 8003244:	f00f ff3c 	bl	80130c0 <HAL_GPIO_EXTI_Callback>
  }
}
 8003248:	bf00      	nop
 800324a:	3708      	adds	r7, #8
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}
 8003250:	40013c00 	.word	0x40013c00

08003254 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b084      	sub	sp, #16
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d101      	bne.n	8003266 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e10f      	b.n	8003486 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800326c:	b2db      	uxtb	r3, r3
 800326e:	2b00      	cmp	r3, #0
 8003270:	d106      	bne.n	8003280 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f011 f9e4 	bl	8014648 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2224      	movs	r2, #36	; 0x24
 8003284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f022 0201 	bic.w	r2, r2, #1
 8003296:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003298:	f002 fec0 	bl	800601c <HAL_RCC_GetPCLK1Freq>
 800329c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	4a7b      	ldr	r2, [pc, #492]	; (8003490 <HAL_I2C_Init+0x23c>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d807      	bhi.n	80032b8 <HAL_I2C_Init+0x64>
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	4a7a      	ldr	r2, [pc, #488]	; (8003494 <HAL_I2C_Init+0x240>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	bf94      	ite	ls
 80032b0:	2301      	movls	r3, #1
 80032b2:	2300      	movhi	r3, #0
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	e006      	b.n	80032c6 <HAL_I2C_Init+0x72>
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	4a77      	ldr	r2, [pc, #476]	; (8003498 <HAL_I2C_Init+0x244>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	bf94      	ite	ls
 80032c0:	2301      	movls	r3, #1
 80032c2:	2300      	movhi	r3, #0
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d001      	beq.n	80032ce <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e0db      	b.n	8003486 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	4a72      	ldr	r2, [pc, #456]	; (800349c <HAL_I2C_Init+0x248>)
 80032d2:	fba2 2303 	umull	r2, r3, r2, r3
 80032d6:	0c9b      	lsrs	r3, r3, #18
 80032d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	68ba      	ldr	r2, [r7, #8]
 80032ea:	430a      	orrs	r2, r1
 80032ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	6a1b      	ldr	r3, [r3, #32]
 80032f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	4a64      	ldr	r2, [pc, #400]	; (8003490 <HAL_I2C_Init+0x23c>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d802      	bhi.n	8003308 <HAL_I2C_Init+0xb4>
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	3301      	adds	r3, #1
 8003306:	e009      	b.n	800331c <HAL_I2C_Init+0xc8>
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800330e:	fb02 f303 	mul.w	r3, r2, r3
 8003312:	4a63      	ldr	r2, [pc, #396]	; (80034a0 <HAL_I2C_Init+0x24c>)
 8003314:	fba2 2303 	umull	r2, r3, r2, r3
 8003318:	099b      	lsrs	r3, r3, #6
 800331a:	3301      	adds	r3, #1
 800331c:	687a      	ldr	r2, [r7, #4]
 800331e:	6812      	ldr	r2, [r2, #0]
 8003320:	430b      	orrs	r3, r1
 8003322:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	69db      	ldr	r3, [r3, #28]
 800332a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800332e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	4956      	ldr	r1, [pc, #344]	; (8003490 <HAL_I2C_Init+0x23c>)
 8003338:	428b      	cmp	r3, r1
 800333a:	d80d      	bhi.n	8003358 <HAL_I2C_Init+0x104>
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	1e59      	subs	r1, r3, #1
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	005b      	lsls	r3, r3, #1
 8003346:	fbb1 f3f3 	udiv	r3, r1, r3
 800334a:	3301      	adds	r3, #1
 800334c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003350:	2b04      	cmp	r3, #4
 8003352:	bf38      	it	cc
 8003354:	2304      	movcc	r3, #4
 8003356:	e04f      	b.n	80033f8 <HAL_I2C_Init+0x1a4>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d111      	bne.n	8003384 <HAL_I2C_Init+0x130>
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	1e58      	subs	r0, r3, #1
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6859      	ldr	r1, [r3, #4]
 8003368:	460b      	mov	r3, r1
 800336a:	005b      	lsls	r3, r3, #1
 800336c:	440b      	add	r3, r1
 800336e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003372:	3301      	adds	r3, #1
 8003374:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003378:	2b00      	cmp	r3, #0
 800337a:	bf0c      	ite	eq
 800337c:	2301      	moveq	r3, #1
 800337e:	2300      	movne	r3, #0
 8003380:	b2db      	uxtb	r3, r3
 8003382:	e012      	b.n	80033aa <HAL_I2C_Init+0x156>
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	1e58      	subs	r0, r3, #1
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6859      	ldr	r1, [r3, #4]
 800338c:	460b      	mov	r3, r1
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	440b      	add	r3, r1
 8003392:	0099      	lsls	r1, r3, #2
 8003394:	440b      	add	r3, r1
 8003396:	fbb0 f3f3 	udiv	r3, r0, r3
 800339a:	3301      	adds	r3, #1
 800339c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	bf0c      	ite	eq
 80033a4:	2301      	moveq	r3, #1
 80033a6:	2300      	movne	r3, #0
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d001      	beq.n	80033b2 <HAL_I2C_Init+0x15e>
 80033ae:	2301      	movs	r3, #1
 80033b0:	e022      	b.n	80033f8 <HAL_I2C_Init+0x1a4>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d10e      	bne.n	80033d8 <HAL_I2C_Init+0x184>
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	1e58      	subs	r0, r3, #1
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6859      	ldr	r1, [r3, #4]
 80033c2:	460b      	mov	r3, r1
 80033c4:	005b      	lsls	r3, r3, #1
 80033c6:	440b      	add	r3, r1
 80033c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80033cc:	3301      	adds	r3, #1
 80033ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033d6:	e00f      	b.n	80033f8 <HAL_I2C_Init+0x1a4>
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	1e58      	subs	r0, r3, #1
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6859      	ldr	r1, [r3, #4]
 80033e0:	460b      	mov	r3, r1
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	440b      	add	r3, r1
 80033e6:	0099      	lsls	r1, r3, #2
 80033e8:	440b      	add	r3, r1
 80033ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80033ee:	3301      	adds	r3, #1
 80033f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80033f8:	6879      	ldr	r1, [r7, #4]
 80033fa:	6809      	ldr	r1, [r1, #0]
 80033fc:	4313      	orrs	r3, r2
 80033fe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	69da      	ldr	r2, [r3, #28]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6a1b      	ldr	r3, [r3, #32]
 8003412:	431a      	orrs	r2, r3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	430a      	orrs	r2, r1
 800341a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003426:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800342a:	687a      	ldr	r2, [r7, #4]
 800342c:	6911      	ldr	r1, [r2, #16]
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	68d2      	ldr	r2, [r2, #12]
 8003432:	4311      	orrs	r1, r2
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	6812      	ldr	r2, [r2, #0]
 8003438:	430b      	orrs	r3, r1
 800343a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	695a      	ldr	r2, [r3, #20]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	699b      	ldr	r3, [r3, #24]
 800344e:	431a      	orrs	r2, r3
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	430a      	orrs	r2, r1
 8003456:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f042 0201 	orr.w	r2, r2, #1
 8003466:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2200      	movs	r2, #0
 800346c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2220      	movs	r2, #32
 8003472:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2200      	movs	r2, #0
 8003480:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003484:	2300      	movs	r3, #0
}
 8003486:	4618      	mov	r0, r3
 8003488:	3710      	adds	r7, #16
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	000186a0 	.word	0x000186a0
 8003494:	001e847f 	.word	0x001e847f
 8003498:	003d08ff 	.word	0x003d08ff
 800349c:	431bde83 	.word	0x431bde83
 80034a0:	10624dd3 	.word	0x10624dd3

080034a4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b082      	sub	sp, #8
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d101      	bne.n	80034b6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e021      	b.n	80034fa <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2224      	movs	r2, #36	; 0x24
 80034ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f022 0201 	bic.w	r2, r2, #1
 80034cc:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f011 f95a 	bl	8014788 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80034f8:	2300      	movs	r3, #0
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3708      	adds	r7, #8
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
	...

08003504 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b088      	sub	sp, #32
 8003508:	af02      	add	r7, sp, #8
 800350a:	60f8      	str	r0, [r7, #12]
 800350c:	607a      	str	r2, [r7, #4]
 800350e:	461a      	mov	r2, r3
 8003510:	460b      	mov	r3, r1
 8003512:	817b      	strh	r3, [r7, #10]
 8003514:	4613      	mov	r3, r2
 8003516:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003518:	f7fd fd7c 	bl	8001014 <HAL_GetTick>
 800351c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003524:	b2db      	uxtb	r3, r3
 8003526:	2b20      	cmp	r3, #32
 8003528:	f040 80e0 	bne.w	80036ec <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	9300      	str	r3, [sp, #0]
 8003530:	2319      	movs	r3, #25
 8003532:	2201      	movs	r2, #1
 8003534:	4970      	ldr	r1, [pc, #448]	; (80036f8 <HAL_I2C_Master_Transmit+0x1f4>)
 8003536:	68f8      	ldr	r0, [r7, #12]
 8003538:	f001 f9de 	bl	80048f8 <I2C_WaitOnFlagUntilTimeout>
 800353c:	4603      	mov	r3, r0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d001      	beq.n	8003546 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003542:	2302      	movs	r3, #2
 8003544:	e0d3      	b.n	80036ee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800354c:	2b01      	cmp	r3, #1
 800354e:	d101      	bne.n	8003554 <HAL_I2C_Master_Transmit+0x50>
 8003550:	2302      	movs	r3, #2
 8003552:	e0cc      	b.n	80036ee <HAL_I2C_Master_Transmit+0x1ea>
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0301 	and.w	r3, r3, #1
 8003566:	2b01      	cmp	r3, #1
 8003568:	d007      	beq.n	800357a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f042 0201 	orr.w	r2, r2, #1
 8003578:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003588:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2221      	movs	r2, #33	; 0x21
 800358e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2210      	movs	r2, #16
 8003596:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2200      	movs	r2, #0
 800359e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	893a      	ldrh	r2, [r7, #8]
 80035aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035b0:	b29a      	uxth	r2, r3
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	4a50      	ldr	r2, [pc, #320]	; (80036fc <HAL_I2C_Master_Transmit+0x1f8>)
 80035ba:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80035bc:	8979      	ldrh	r1, [r7, #10]
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	6a3a      	ldr	r2, [r7, #32]
 80035c2:	68f8      	ldr	r0, [r7, #12]
 80035c4:	f000 ff12 	bl	80043ec <I2C_MasterRequestWrite>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d001      	beq.n	80035d2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e08d      	b.n	80036ee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035d2:	2300      	movs	r3, #0
 80035d4:	613b      	str	r3, [r7, #16]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	695b      	ldr	r3, [r3, #20]
 80035dc:	613b      	str	r3, [r7, #16]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	699b      	ldr	r3, [r3, #24]
 80035e4:	613b      	str	r3, [r7, #16]
 80035e6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80035e8:	e066      	b.n	80036b8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035ea:	697a      	ldr	r2, [r7, #20]
 80035ec:	6a39      	ldr	r1, [r7, #32]
 80035ee:	68f8      	ldr	r0, [r7, #12]
 80035f0:	f001 fa58 	bl	8004aa4 <I2C_WaitOnTXEFlagUntilTimeout>
 80035f4:	4603      	mov	r3, r0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d00d      	beq.n	8003616 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fe:	2b04      	cmp	r3, #4
 8003600:	d107      	bne.n	8003612 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003610:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e06b      	b.n	80036ee <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361a:	781a      	ldrb	r2, [r3, #0]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003626:	1c5a      	adds	r2, r3, #1
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003630:	b29b      	uxth	r3, r3
 8003632:	3b01      	subs	r3, #1
 8003634:	b29a      	uxth	r2, r3
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800363e:	3b01      	subs	r3, #1
 8003640:	b29a      	uxth	r2, r3
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	695b      	ldr	r3, [r3, #20]
 800364c:	f003 0304 	and.w	r3, r3, #4
 8003650:	2b04      	cmp	r3, #4
 8003652:	d11b      	bne.n	800368c <HAL_I2C_Master_Transmit+0x188>
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003658:	2b00      	cmp	r3, #0
 800365a:	d017      	beq.n	800368c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003660:	781a      	ldrb	r2, [r3, #0]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366c:	1c5a      	adds	r2, r3, #1
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003676:	b29b      	uxth	r3, r3
 8003678:	3b01      	subs	r3, #1
 800367a:	b29a      	uxth	r2, r3
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003684:	3b01      	subs	r3, #1
 8003686:	b29a      	uxth	r2, r3
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800368c:	697a      	ldr	r2, [r7, #20]
 800368e:	6a39      	ldr	r1, [r7, #32]
 8003690:	68f8      	ldr	r0, [r7, #12]
 8003692:	f001 fa48 	bl	8004b26 <I2C_WaitOnBTFFlagUntilTimeout>
 8003696:	4603      	mov	r3, r0
 8003698:	2b00      	cmp	r3, #0
 800369a:	d00d      	beq.n	80036b8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a0:	2b04      	cmp	r3, #4
 80036a2:	d107      	bne.n	80036b4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036b2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e01a      	b.n	80036ee <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d194      	bne.n	80035ea <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2220      	movs	r2, #32
 80036d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2200      	movs	r2, #0
 80036dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2200      	movs	r2, #0
 80036e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80036e8:	2300      	movs	r3, #0
 80036ea:	e000      	b.n	80036ee <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80036ec:	2302      	movs	r3, #2
  }
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3718      	adds	r7, #24
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	00100002 	.word	0x00100002
 80036fc:	ffff0000 	.word	0xffff0000

08003700 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b08c      	sub	sp, #48	; 0x30
 8003704:	af02      	add	r7, sp, #8
 8003706:	60f8      	str	r0, [r7, #12]
 8003708:	607a      	str	r2, [r7, #4]
 800370a:	461a      	mov	r2, r3
 800370c:	460b      	mov	r3, r1
 800370e:	817b      	strh	r3, [r7, #10]
 8003710:	4613      	mov	r3, r2
 8003712:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003714:	f7fd fc7e 	bl	8001014 <HAL_GetTick>
 8003718:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003720:	b2db      	uxtb	r3, r3
 8003722:	2b20      	cmp	r3, #32
 8003724:	f040 820b 	bne.w	8003b3e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372a:	9300      	str	r3, [sp, #0]
 800372c:	2319      	movs	r3, #25
 800372e:	2201      	movs	r2, #1
 8003730:	497c      	ldr	r1, [pc, #496]	; (8003924 <HAL_I2C_Master_Receive+0x224>)
 8003732:	68f8      	ldr	r0, [r7, #12]
 8003734:	f001 f8e0 	bl	80048f8 <I2C_WaitOnFlagUntilTimeout>
 8003738:	4603      	mov	r3, r0
 800373a:	2b00      	cmp	r3, #0
 800373c:	d001      	beq.n	8003742 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800373e:	2302      	movs	r3, #2
 8003740:	e1fe      	b.n	8003b40 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003748:	2b01      	cmp	r3, #1
 800374a:	d101      	bne.n	8003750 <HAL_I2C_Master_Receive+0x50>
 800374c:	2302      	movs	r3, #2
 800374e:	e1f7      	b.n	8003b40 <HAL_I2C_Master_Receive+0x440>
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2201      	movs	r2, #1
 8003754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0301 	and.w	r3, r3, #1
 8003762:	2b01      	cmp	r3, #1
 8003764:	d007      	beq.n	8003776 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f042 0201 	orr.w	r2, r2, #1
 8003774:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003784:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2222      	movs	r2, #34	; 0x22
 800378a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2210      	movs	r2, #16
 8003792:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2200      	movs	r2, #0
 800379a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	893a      	ldrh	r2, [r7, #8]
 80037a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ac:	b29a      	uxth	r2, r3
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	4a5c      	ldr	r2, [pc, #368]	; (8003928 <HAL_I2C_Master_Receive+0x228>)
 80037b6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80037b8:	8979      	ldrh	r1, [r7, #10]
 80037ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037be:	68f8      	ldr	r0, [r7, #12]
 80037c0:	f000 fe8a 	bl	80044d8 <I2C_MasterRequestRead>
 80037c4:	4603      	mov	r3, r0
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d001      	beq.n	80037ce <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e1b8      	b.n	8003b40 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d113      	bne.n	80037fe <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037d6:	2300      	movs	r3, #0
 80037d8:	623b      	str	r3, [r7, #32]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	695b      	ldr	r3, [r3, #20]
 80037e0:	623b      	str	r3, [r7, #32]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	699b      	ldr	r3, [r3, #24]
 80037e8:	623b      	str	r3, [r7, #32]
 80037ea:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037fa:	601a      	str	r2, [r3, #0]
 80037fc:	e18c      	b.n	8003b18 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003802:	2b01      	cmp	r3, #1
 8003804:	d11b      	bne.n	800383e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003814:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003816:	2300      	movs	r3, #0
 8003818:	61fb      	str	r3, [r7, #28]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	695b      	ldr	r3, [r3, #20]
 8003820:	61fb      	str	r3, [r7, #28]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	699b      	ldr	r3, [r3, #24]
 8003828:	61fb      	str	r3, [r7, #28]
 800382a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800383a:	601a      	str	r2, [r3, #0]
 800383c:	e16c      	b.n	8003b18 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003842:	2b02      	cmp	r3, #2
 8003844:	d11b      	bne.n	800387e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003854:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003864:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003866:	2300      	movs	r3, #0
 8003868:	61bb      	str	r3, [r7, #24]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	695b      	ldr	r3, [r3, #20]
 8003870:	61bb      	str	r3, [r7, #24]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	699b      	ldr	r3, [r3, #24]
 8003878:	61bb      	str	r3, [r7, #24]
 800387a:	69bb      	ldr	r3, [r7, #24]
 800387c:	e14c      	b.n	8003b18 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800388c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800388e:	2300      	movs	r3, #0
 8003890:	617b      	str	r3, [r7, #20]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	695b      	ldr	r3, [r3, #20]
 8003898:	617b      	str	r3, [r7, #20]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	699b      	ldr	r3, [r3, #24]
 80038a0:	617b      	str	r3, [r7, #20]
 80038a2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80038a4:	e138      	b.n	8003b18 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038aa:	2b03      	cmp	r3, #3
 80038ac:	f200 80f1 	bhi.w	8003a92 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d123      	bne.n	8003900 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80038bc:	68f8      	ldr	r0, [r7, #12]
 80038be:	f001 f973 	bl	8004ba8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80038c2:	4603      	mov	r3, r0
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d001      	beq.n	80038cc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e139      	b.n	8003b40 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	691a      	ldr	r2, [r3, #16]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d6:	b2d2      	uxtb	r2, r2
 80038d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038de:	1c5a      	adds	r2, r3, #1
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038e8:	3b01      	subs	r3, #1
 80038ea:	b29a      	uxth	r2, r3
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	3b01      	subs	r3, #1
 80038f8:	b29a      	uxth	r2, r3
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80038fe:	e10b      	b.n	8003b18 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003904:	2b02      	cmp	r3, #2
 8003906:	d14e      	bne.n	80039a6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390a:	9300      	str	r3, [sp, #0]
 800390c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800390e:	2200      	movs	r2, #0
 8003910:	4906      	ldr	r1, [pc, #24]	; (800392c <HAL_I2C_Master_Receive+0x22c>)
 8003912:	68f8      	ldr	r0, [r7, #12]
 8003914:	f000 fff0 	bl	80048f8 <I2C_WaitOnFlagUntilTimeout>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d008      	beq.n	8003930 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e10e      	b.n	8003b40 <HAL_I2C_Master_Receive+0x440>
 8003922:	bf00      	nop
 8003924:	00100002 	.word	0x00100002
 8003928:	ffff0000 	.word	0xffff0000
 800392c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800393e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	691a      	ldr	r2, [r3, #16]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394a:	b2d2      	uxtb	r2, r2
 800394c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003952:	1c5a      	adds	r2, r3, #1
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800395c:	3b01      	subs	r3, #1
 800395e:	b29a      	uxth	r2, r3
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003968:	b29b      	uxth	r3, r3
 800396a:	3b01      	subs	r3, #1
 800396c:	b29a      	uxth	r2, r3
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	691a      	ldr	r2, [r3, #16]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397c:	b2d2      	uxtb	r2, r2
 800397e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003984:	1c5a      	adds	r2, r3, #1
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800398e:	3b01      	subs	r3, #1
 8003990:	b29a      	uxth	r2, r3
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800399a:	b29b      	uxth	r3, r3
 800399c:	3b01      	subs	r3, #1
 800399e:	b29a      	uxth	r2, r3
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80039a4:	e0b8      	b.n	8003b18 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80039a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a8:	9300      	str	r3, [sp, #0]
 80039aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ac:	2200      	movs	r2, #0
 80039ae:	4966      	ldr	r1, [pc, #408]	; (8003b48 <HAL_I2C_Master_Receive+0x448>)
 80039b0:	68f8      	ldr	r0, [r7, #12]
 80039b2:	f000 ffa1 	bl	80048f8 <I2C_WaitOnFlagUntilTimeout>
 80039b6:	4603      	mov	r3, r0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d001      	beq.n	80039c0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e0bf      	b.n	8003b40 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	691a      	ldr	r2, [r3, #16]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039da:	b2d2      	uxtb	r2, r2
 80039dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e2:	1c5a      	adds	r2, r3, #1
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039ec:	3b01      	subs	r3, #1
 80039ee:	b29a      	uxth	r2, r3
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	3b01      	subs	r3, #1
 80039fc:	b29a      	uxth	r2, r3
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a04:	9300      	str	r3, [sp, #0]
 8003a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a08:	2200      	movs	r2, #0
 8003a0a:	494f      	ldr	r1, [pc, #316]	; (8003b48 <HAL_I2C_Master_Receive+0x448>)
 8003a0c:	68f8      	ldr	r0, [r7, #12]
 8003a0e:	f000 ff73 	bl	80048f8 <I2C_WaitOnFlagUntilTimeout>
 8003a12:	4603      	mov	r3, r0
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d001      	beq.n	8003a1c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e091      	b.n	8003b40 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a2a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	691a      	ldr	r2, [r3, #16]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a36:	b2d2      	uxtb	r2, r2
 8003a38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3e:	1c5a      	adds	r2, r3, #1
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a48:	3b01      	subs	r3, #1
 8003a4a:	b29a      	uxth	r2, r3
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	3b01      	subs	r3, #1
 8003a58:	b29a      	uxth	r2, r3
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	691a      	ldr	r2, [r3, #16]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a68:	b2d2      	uxtb	r2, r2
 8003a6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a70:	1c5a      	adds	r2, r3, #1
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a7a:	3b01      	subs	r3, #1
 8003a7c:	b29a      	uxth	r2, r3
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	3b01      	subs	r3, #1
 8003a8a:	b29a      	uxth	r2, r3
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003a90:	e042      	b.n	8003b18 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a94:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003a96:	68f8      	ldr	r0, [r7, #12]
 8003a98:	f001 f886 	bl	8004ba8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d001      	beq.n	8003aa6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e04c      	b.n	8003b40 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	691a      	ldr	r2, [r3, #16]
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab0:	b2d2      	uxtb	r2, r2
 8003ab2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab8:	1c5a      	adds	r2, r3, #1
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ac2:	3b01      	subs	r3, #1
 8003ac4:	b29a      	uxth	r2, r3
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	3b01      	subs	r3, #1
 8003ad2:	b29a      	uxth	r2, r3
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	695b      	ldr	r3, [r3, #20]
 8003ade:	f003 0304 	and.w	r3, r3, #4
 8003ae2:	2b04      	cmp	r3, #4
 8003ae4:	d118      	bne.n	8003b18 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	691a      	ldr	r2, [r3, #16]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af0:	b2d2      	uxtb	r2, r2
 8003af2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af8:	1c5a      	adds	r2, r3, #1
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b02:	3b01      	subs	r3, #1
 8003b04:	b29a      	uxth	r2, r3
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	3b01      	subs	r3, #1
 8003b12:	b29a      	uxth	r2, r3
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	f47f aec2 	bne.w	80038a6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2220      	movs	r2, #32
 8003b26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2200      	movs	r2, #0
 8003b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	e000      	b.n	8003b40 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003b3e:	2302      	movs	r3, #2
  }
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3728      	adds	r7, #40	; 0x28
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	00010004 	.word	0x00010004

08003b4c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b088      	sub	sp, #32
 8003b50:	af02      	add	r7, sp, #8
 8003b52:	60f8      	str	r0, [r7, #12]
 8003b54:	4608      	mov	r0, r1
 8003b56:	4611      	mov	r1, r2
 8003b58:	461a      	mov	r2, r3
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	817b      	strh	r3, [r7, #10]
 8003b5e:	460b      	mov	r3, r1
 8003b60:	813b      	strh	r3, [r7, #8]
 8003b62:	4613      	mov	r3, r2
 8003b64:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b66:	f7fd fa55 	bl	8001014 <HAL_GetTick>
 8003b6a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	2b20      	cmp	r3, #32
 8003b76:	f040 80d9 	bne.w	8003d2c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	9300      	str	r3, [sp, #0]
 8003b7e:	2319      	movs	r3, #25
 8003b80:	2201      	movs	r2, #1
 8003b82:	496d      	ldr	r1, [pc, #436]	; (8003d38 <HAL_I2C_Mem_Write+0x1ec>)
 8003b84:	68f8      	ldr	r0, [r7, #12]
 8003b86:	f000 feb7 	bl	80048f8 <I2C_WaitOnFlagUntilTimeout>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d001      	beq.n	8003b94 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003b90:	2302      	movs	r3, #2
 8003b92:	e0cc      	b.n	8003d2e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d101      	bne.n	8003ba2 <HAL_I2C_Mem_Write+0x56>
 8003b9e:	2302      	movs	r3, #2
 8003ba0:	e0c5      	b.n	8003d2e <HAL_I2C_Mem_Write+0x1e2>
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 0301 	and.w	r3, r3, #1
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d007      	beq.n	8003bc8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f042 0201 	orr.w	r2, r2, #1
 8003bc6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bd6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2221      	movs	r2, #33	; 0x21
 8003bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2240      	movs	r2, #64	; 0x40
 8003be4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2200      	movs	r2, #0
 8003bec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	6a3a      	ldr	r2, [r7, #32]
 8003bf2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003bf8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bfe:	b29a      	uxth	r2, r3
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	4a4d      	ldr	r2, [pc, #308]	; (8003d3c <HAL_I2C_Mem_Write+0x1f0>)
 8003c08:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c0a:	88f8      	ldrh	r0, [r7, #6]
 8003c0c:	893a      	ldrh	r2, [r7, #8]
 8003c0e:	8979      	ldrh	r1, [r7, #10]
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	9301      	str	r3, [sp, #4]
 8003c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c16:	9300      	str	r3, [sp, #0]
 8003c18:	4603      	mov	r3, r0
 8003c1a:	68f8      	ldr	r0, [r7, #12]
 8003c1c:	f000 fd12 	bl	8004644 <I2C_RequestMemoryWrite>
 8003c20:	4603      	mov	r3, r0
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d052      	beq.n	8003ccc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e081      	b.n	8003d2e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c2a:	697a      	ldr	r2, [r7, #20]
 8003c2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c2e:	68f8      	ldr	r0, [r7, #12]
 8003c30:	f000 ff38 	bl	8004aa4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d00d      	beq.n	8003c56 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3e:	2b04      	cmp	r3, #4
 8003c40:	d107      	bne.n	8003c52 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c50:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e06b      	b.n	8003d2e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5a:	781a      	ldrb	r2, [r3, #0]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c66:	1c5a      	adds	r2, r3, #1
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c70:	3b01      	subs	r3, #1
 8003c72:	b29a      	uxth	r2, r3
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	3b01      	subs	r3, #1
 8003c80:	b29a      	uxth	r2, r3
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	695b      	ldr	r3, [r3, #20]
 8003c8c:	f003 0304 	and.w	r3, r3, #4
 8003c90:	2b04      	cmp	r3, #4
 8003c92:	d11b      	bne.n	8003ccc <HAL_I2C_Mem_Write+0x180>
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d017      	beq.n	8003ccc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca0:	781a      	ldrb	r2, [r3, #0]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cac:	1c5a      	adds	r2, r3, #1
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cb6:	3b01      	subs	r3, #1
 8003cb8:	b29a      	uxth	r2, r3
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cc2:	b29b      	uxth	r3, r3
 8003cc4:	3b01      	subs	r3, #1
 8003cc6:	b29a      	uxth	r2, r3
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d1aa      	bne.n	8003c2a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cd4:	697a      	ldr	r2, [r7, #20]
 8003cd6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003cd8:	68f8      	ldr	r0, [r7, #12]
 8003cda:	f000 ff24 	bl	8004b26 <I2C_WaitOnBTFFlagUntilTimeout>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d00d      	beq.n	8003d00 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce8:	2b04      	cmp	r3, #4
 8003cea:	d107      	bne.n	8003cfc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cfa:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e016      	b.n	8003d2e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2220      	movs	r2, #32
 8003d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2200      	movs	r2, #0
 8003d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	e000      	b.n	8003d2e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003d2c:	2302      	movs	r3, #2
  }
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3718      	adds	r7, #24
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	bf00      	nop
 8003d38:	00100002 	.word	0x00100002
 8003d3c:	ffff0000 	.word	0xffff0000

08003d40 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b08c      	sub	sp, #48	; 0x30
 8003d44:	af02      	add	r7, sp, #8
 8003d46:	60f8      	str	r0, [r7, #12]
 8003d48:	4608      	mov	r0, r1
 8003d4a:	4611      	mov	r1, r2
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	4603      	mov	r3, r0
 8003d50:	817b      	strh	r3, [r7, #10]
 8003d52:	460b      	mov	r3, r1
 8003d54:	813b      	strh	r3, [r7, #8]
 8003d56:	4613      	mov	r3, r2
 8003d58:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d5a:	f7fd f95b 	bl	8001014 <HAL_GetTick>
 8003d5e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	2b20      	cmp	r3, #32
 8003d6a:	f040 8208 	bne.w	800417e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d70:	9300      	str	r3, [sp, #0]
 8003d72:	2319      	movs	r3, #25
 8003d74:	2201      	movs	r2, #1
 8003d76:	497b      	ldr	r1, [pc, #492]	; (8003f64 <HAL_I2C_Mem_Read+0x224>)
 8003d78:	68f8      	ldr	r0, [r7, #12]
 8003d7a:	f000 fdbd 	bl	80048f8 <I2C_WaitOnFlagUntilTimeout>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d001      	beq.n	8003d88 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003d84:	2302      	movs	r3, #2
 8003d86:	e1fb      	b.n	8004180 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d101      	bne.n	8003d96 <HAL_I2C_Mem_Read+0x56>
 8003d92:	2302      	movs	r3, #2
 8003d94:	e1f4      	b.n	8004180 <HAL_I2C_Mem_Read+0x440>
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2201      	movs	r2, #1
 8003d9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 0301 	and.w	r3, r3, #1
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d007      	beq.n	8003dbc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f042 0201 	orr.w	r2, r2, #1
 8003dba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003dca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2222      	movs	r2, #34	; 0x22
 8003dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2240      	movs	r2, #64	; 0x40
 8003dd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2200      	movs	r2, #0
 8003de0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003de6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003dec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003df2:	b29a      	uxth	r2, r3
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	4a5b      	ldr	r2, [pc, #364]	; (8003f68 <HAL_I2C_Mem_Read+0x228>)
 8003dfc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003dfe:	88f8      	ldrh	r0, [r7, #6]
 8003e00:	893a      	ldrh	r2, [r7, #8]
 8003e02:	8979      	ldrh	r1, [r7, #10]
 8003e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e06:	9301      	str	r3, [sp, #4]
 8003e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e0a:	9300      	str	r3, [sp, #0]
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	68f8      	ldr	r0, [r7, #12]
 8003e10:	f000 fca2 	bl	8004758 <I2C_RequestMemoryRead>
 8003e14:	4603      	mov	r3, r0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d001      	beq.n	8003e1e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e1b0      	b.n	8004180 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d113      	bne.n	8003e4e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e26:	2300      	movs	r3, #0
 8003e28:	623b      	str	r3, [r7, #32]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	695b      	ldr	r3, [r3, #20]
 8003e30:	623b      	str	r3, [r7, #32]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	699b      	ldr	r3, [r3, #24]
 8003e38:	623b      	str	r3, [r7, #32]
 8003e3a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e4a:	601a      	str	r2, [r3, #0]
 8003e4c:	e184      	b.n	8004158 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d11b      	bne.n	8003e8e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e64:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e66:	2300      	movs	r3, #0
 8003e68:	61fb      	str	r3, [r7, #28]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	695b      	ldr	r3, [r3, #20]
 8003e70:	61fb      	str	r3, [r7, #28]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	699b      	ldr	r3, [r3, #24]
 8003e78:	61fb      	str	r3, [r7, #28]
 8003e7a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e8a:	601a      	str	r2, [r3, #0]
 8003e8c:	e164      	b.n	8004158 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e92:	2b02      	cmp	r3, #2
 8003e94:	d11b      	bne.n	8003ece <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ea4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003eb4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	61bb      	str	r3, [r7, #24]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	695b      	ldr	r3, [r3, #20]
 8003ec0:	61bb      	str	r3, [r7, #24]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	699b      	ldr	r3, [r3, #24]
 8003ec8:	61bb      	str	r3, [r7, #24]
 8003eca:	69bb      	ldr	r3, [r7, #24]
 8003ecc:	e144      	b.n	8004158 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ece:	2300      	movs	r3, #0
 8003ed0:	617b      	str	r3, [r7, #20]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	695b      	ldr	r3, [r3, #20]
 8003ed8:	617b      	str	r3, [r7, #20]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	699b      	ldr	r3, [r3, #24]
 8003ee0:	617b      	str	r3, [r7, #20]
 8003ee2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003ee4:	e138      	b.n	8004158 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eea:	2b03      	cmp	r3, #3
 8003eec:	f200 80f1 	bhi.w	80040d2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d123      	bne.n	8003f40 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ef8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003efa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003efc:	68f8      	ldr	r0, [r7, #12]
 8003efe:	f000 fe53 	bl	8004ba8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f02:	4603      	mov	r3, r0
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d001      	beq.n	8003f0c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e139      	b.n	8004180 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	691a      	ldr	r2, [r3, #16]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f16:	b2d2      	uxtb	r2, r2
 8003f18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1e:	1c5a      	adds	r2, r3, #1
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f28:	3b01      	subs	r3, #1
 8003f2a:	b29a      	uxth	r2, r3
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	3b01      	subs	r3, #1
 8003f38:	b29a      	uxth	r2, r3
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f3e:	e10b      	b.n	8004158 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f44:	2b02      	cmp	r3, #2
 8003f46:	d14e      	bne.n	8003fe6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4a:	9300      	str	r3, [sp, #0]
 8003f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f4e:	2200      	movs	r2, #0
 8003f50:	4906      	ldr	r1, [pc, #24]	; (8003f6c <HAL_I2C_Mem_Read+0x22c>)
 8003f52:	68f8      	ldr	r0, [r7, #12]
 8003f54:	f000 fcd0 	bl	80048f8 <I2C_WaitOnFlagUntilTimeout>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d008      	beq.n	8003f70 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e10e      	b.n	8004180 <HAL_I2C_Mem_Read+0x440>
 8003f62:	bf00      	nop
 8003f64:	00100002 	.word	0x00100002
 8003f68:	ffff0000 	.word	0xffff0000
 8003f6c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f7e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	691a      	ldr	r2, [r3, #16]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8a:	b2d2      	uxtb	r2, r2
 8003f8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f92:	1c5a      	adds	r2, r3, #1
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f9c:	3b01      	subs	r3, #1
 8003f9e:	b29a      	uxth	r2, r3
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fa8:	b29b      	uxth	r3, r3
 8003faa:	3b01      	subs	r3, #1
 8003fac:	b29a      	uxth	r2, r3
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	691a      	ldr	r2, [r3, #16]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fbc:	b2d2      	uxtb	r2, r2
 8003fbe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc4:	1c5a      	adds	r2, r3, #1
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fce:	3b01      	subs	r3, #1
 8003fd0:	b29a      	uxth	r2, r3
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fda:	b29b      	uxth	r3, r3
 8003fdc:	3b01      	subs	r3, #1
 8003fde:	b29a      	uxth	r2, r3
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003fe4:	e0b8      	b.n	8004158 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe8:	9300      	str	r3, [sp, #0]
 8003fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fec:	2200      	movs	r2, #0
 8003fee:	4966      	ldr	r1, [pc, #408]	; (8004188 <HAL_I2C_Mem_Read+0x448>)
 8003ff0:	68f8      	ldr	r0, [r7, #12]
 8003ff2:	f000 fc81 	bl	80048f8 <I2C_WaitOnFlagUntilTimeout>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d001      	beq.n	8004000 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e0bf      	b.n	8004180 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800400e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	691a      	ldr	r2, [r3, #16]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401a:	b2d2      	uxtb	r2, r2
 800401c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004022:	1c5a      	adds	r2, r3, #1
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800402c:	3b01      	subs	r3, #1
 800402e:	b29a      	uxth	r2, r3
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004038:	b29b      	uxth	r3, r3
 800403a:	3b01      	subs	r3, #1
 800403c:	b29a      	uxth	r2, r3
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004044:	9300      	str	r3, [sp, #0]
 8004046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004048:	2200      	movs	r2, #0
 800404a:	494f      	ldr	r1, [pc, #316]	; (8004188 <HAL_I2C_Mem_Read+0x448>)
 800404c:	68f8      	ldr	r0, [r7, #12]
 800404e:	f000 fc53 	bl	80048f8 <I2C_WaitOnFlagUntilTimeout>
 8004052:	4603      	mov	r3, r0
 8004054:	2b00      	cmp	r3, #0
 8004056:	d001      	beq.n	800405c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	e091      	b.n	8004180 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800406a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	691a      	ldr	r2, [r3, #16]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004076:	b2d2      	uxtb	r2, r2
 8004078:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407e:	1c5a      	adds	r2, r3, #1
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004088:	3b01      	subs	r3, #1
 800408a:	b29a      	uxth	r2, r3
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004094:	b29b      	uxth	r3, r3
 8004096:	3b01      	subs	r3, #1
 8004098:	b29a      	uxth	r2, r3
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	691a      	ldr	r2, [r3, #16]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a8:	b2d2      	uxtb	r2, r2
 80040aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b0:	1c5a      	adds	r2, r3, #1
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040ba:	3b01      	subs	r3, #1
 80040bc:	b29a      	uxth	r2, r3
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	3b01      	subs	r3, #1
 80040ca:	b29a      	uxth	r2, r3
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	855a      	strh	r2, [r3, #42]	; 0x2a
 80040d0:	e042      	b.n	8004158 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040d4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80040d6:	68f8      	ldr	r0, [r7, #12]
 80040d8:	f000 fd66 	bl	8004ba8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80040dc:	4603      	mov	r3, r0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d001      	beq.n	80040e6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e04c      	b.n	8004180 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	691a      	ldr	r2, [r3, #16]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f0:	b2d2      	uxtb	r2, r2
 80040f2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f8:	1c5a      	adds	r2, r3, #1
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004102:	3b01      	subs	r3, #1
 8004104:	b29a      	uxth	r2, r3
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800410e:	b29b      	uxth	r3, r3
 8004110:	3b01      	subs	r3, #1
 8004112:	b29a      	uxth	r2, r3
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	695b      	ldr	r3, [r3, #20]
 800411e:	f003 0304 	and.w	r3, r3, #4
 8004122:	2b04      	cmp	r3, #4
 8004124:	d118      	bne.n	8004158 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	691a      	ldr	r2, [r3, #16]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004130:	b2d2      	uxtb	r2, r2
 8004132:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004138:	1c5a      	adds	r2, r3, #1
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004142:	3b01      	subs	r3, #1
 8004144:	b29a      	uxth	r2, r3
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800414e:	b29b      	uxth	r3, r3
 8004150:	3b01      	subs	r3, #1
 8004152:	b29a      	uxth	r2, r3
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800415c:	2b00      	cmp	r3, #0
 800415e:	f47f aec2 	bne.w	8003ee6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2220      	movs	r2, #32
 8004166:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2200      	movs	r2, #0
 800416e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2200      	movs	r2, #0
 8004176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800417a:	2300      	movs	r3, #0
 800417c:	e000      	b.n	8004180 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800417e:	2302      	movs	r3, #2
  }
}
 8004180:	4618      	mov	r0, r3
 8004182:	3728      	adds	r7, #40	; 0x28
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}
 8004188:	00010004 	.word	0x00010004

0800418c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b08a      	sub	sp, #40	; 0x28
 8004190:	af02      	add	r7, sp, #8
 8004192:	60f8      	str	r0, [r7, #12]
 8004194:	607a      	str	r2, [r7, #4]
 8004196:	603b      	str	r3, [r7, #0]
 8004198:	460b      	mov	r3, r1
 800419a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800419c:	f7fc ff3a 	bl	8001014 <HAL_GetTick>
 80041a0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80041a2:	2301      	movs	r3, #1
 80041a4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	2b20      	cmp	r3, #32
 80041b0:	f040 8105 	bne.w	80043be <HAL_I2C_IsDeviceReady+0x232>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80041b4:	69fb      	ldr	r3, [r7, #28]
 80041b6:	9300      	str	r3, [sp, #0]
 80041b8:	2319      	movs	r3, #25
 80041ba:	2201      	movs	r2, #1
 80041bc:	4982      	ldr	r1, [pc, #520]	; (80043c8 <HAL_I2C_IsDeviceReady+0x23c>)
 80041be:	68f8      	ldr	r0, [r7, #12]
 80041c0:	f000 fb9a 	bl	80048f8 <I2C_WaitOnFlagUntilTimeout>
 80041c4:	4603      	mov	r3, r0
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d001      	beq.n	80041ce <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80041ca:	2302      	movs	r3, #2
 80041cc:	e0f8      	b.n	80043c0 <HAL_I2C_IsDeviceReady+0x234>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d101      	bne.n	80041dc <HAL_I2C_IsDeviceReady+0x50>
 80041d8:	2302      	movs	r3, #2
 80041da:	e0f1      	b.n	80043c0 <HAL_I2C_IsDeviceReady+0x234>
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 0301 	and.w	r3, r3, #1
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d007      	beq.n	8004202 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f042 0201 	orr.w	r2, r2, #1
 8004200:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004210:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2224      	movs	r2, #36	; 0x24
 8004216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2200      	movs	r2, #0
 800421e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	4a6a      	ldr	r2, [pc, #424]	; (80043cc <HAL_I2C_IsDeviceReady+0x240>)
 8004224:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004234:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	9300      	str	r3, [sp, #0]
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	2200      	movs	r2, #0
 800423e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004242:	68f8      	ldr	r0, [r7, #12]
 8004244:	f000 fb58 	bl	80048f8 <I2C_WaitOnFlagUntilTimeout>
 8004248:	4603      	mov	r3, r0
 800424a:	2b00      	cmp	r3, #0
 800424c:	d001      	beq.n	8004252 <HAL_I2C_IsDeviceReady+0xc6>
      {
        return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e0b6      	b.n	80043c0 <HAL_I2C_IsDeviceReady+0x234>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004252:	897b      	ldrh	r3, [r7, #10]
 8004254:	b2db      	uxtb	r3, r3
 8004256:	461a      	mov	r2, r3
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004260:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004262:	f7fc fed7 	bl	8001014 <HAL_GetTick>
 8004266:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	695b      	ldr	r3, [r3, #20]
 800426e:	f003 0302 	and.w	r3, r3, #2
 8004272:	2b02      	cmp	r3, #2
 8004274:	bf0c      	ite	eq
 8004276:	2301      	moveq	r3, #1
 8004278:	2300      	movne	r3, #0
 800427a:	b2db      	uxtb	r3, r3
 800427c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	695b      	ldr	r3, [r3, #20]
 8004284:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004288:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800428c:	bf0c      	ite	eq
 800428e:	2301      	moveq	r3, #1
 8004290:	2300      	movne	r3, #0
 8004292:	b2db      	uxtb	r3, r3
 8004294:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004296:	e025      	b.n	80042e4 <HAL_I2C_IsDeviceReady+0x158>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004298:	f7fc febc 	bl	8001014 <HAL_GetTick>
 800429c:	4602      	mov	r2, r0
 800429e:	69fb      	ldr	r3, [r7, #28]
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	683a      	ldr	r2, [r7, #0]
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d302      	bcc.n	80042ae <HAL_I2C_IsDeviceReady+0x122>
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d103      	bne.n	80042b6 <HAL_I2C_IsDeviceReady+0x12a>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	22a0      	movs	r2, #160	; 0xa0
 80042b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	695b      	ldr	r3, [r3, #20]
 80042bc:	f003 0302 	and.w	r3, r3, #2
 80042c0:	2b02      	cmp	r3, #2
 80042c2:	bf0c      	ite	eq
 80042c4:	2301      	moveq	r3, #1
 80042c6:	2300      	movne	r3, #0
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	695b      	ldr	r3, [r3, #20]
 80042d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042da:	bf0c      	ite	eq
 80042dc:	2301      	moveq	r3, #1
 80042de:	2300      	movne	r3, #0
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	2ba0      	cmp	r3, #160	; 0xa0
 80042ee:	d005      	beq.n	80042fc <HAL_I2C_IsDeviceReady+0x170>
 80042f0:	7dfb      	ldrb	r3, [r7, #23]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d102      	bne.n	80042fc <HAL_I2C_IsDeviceReady+0x170>
 80042f6:	7dbb      	ldrb	r3, [r7, #22]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d0cd      	beq.n	8004298 <HAL_I2C_IsDeviceReady+0x10c>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2220      	movs	r2, #32
 8004300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	695b      	ldr	r3, [r3, #20]
 800430a:	f003 0302 	and.w	r3, r3, #2
 800430e:	2b02      	cmp	r3, #2
 8004310:	d129      	bne.n	8004366 <HAL_I2C_IsDeviceReady+0x1da>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004320:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004322:	2300      	movs	r3, #0
 8004324:	613b      	str	r3, [r7, #16]
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	695b      	ldr	r3, [r3, #20]
 800432c:	613b      	str	r3, [r7, #16]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	699b      	ldr	r3, [r3, #24]
 8004334:	613b      	str	r3, [r7, #16]
 8004336:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	9300      	str	r3, [sp, #0]
 800433c:	2319      	movs	r3, #25
 800433e:	2201      	movs	r2, #1
 8004340:	4921      	ldr	r1, [pc, #132]	; (80043c8 <HAL_I2C_IsDeviceReady+0x23c>)
 8004342:	68f8      	ldr	r0, [r7, #12]
 8004344:	f000 fad8 	bl	80048f8 <I2C_WaitOnFlagUntilTimeout>
 8004348:	4603      	mov	r3, r0
 800434a:	2b00      	cmp	r3, #0
 800434c:	d001      	beq.n	8004352 <HAL_I2C_IsDeviceReady+0x1c6>
        {
          return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e036      	b.n	80043c0 <HAL_I2C_IsDeviceReady+0x234>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2220      	movs	r2, #32
 8004356:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2200      	movs	r2, #0
 800435e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8004362:	2300      	movs	r3, #0
 8004364:	e02c      	b.n	80043c0 <HAL_I2C_IsDeviceReady+0x234>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004374:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800437e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004380:	69fb      	ldr	r3, [r7, #28]
 8004382:	9300      	str	r3, [sp, #0]
 8004384:	2319      	movs	r3, #25
 8004386:	2201      	movs	r2, #1
 8004388:	490f      	ldr	r1, [pc, #60]	; (80043c8 <HAL_I2C_IsDeviceReady+0x23c>)
 800438a:	68f8      	ldr	r0, [r7, #12]
 800438c:	f000 fab4 	bl	80048f8 <I2C_WaitOnFlagUntilTimeout>
 8004390:	4603      	mov	r3, r0
 8004392:	2b00      	cmp	r3, #0
 8004394:	d001      	beq.n	800439a <HAL_I2C_IsDeviceReady+0x20e>
        {
          return HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	e012      	b.n	80043c0 <HAL_I2C_IsDeviceReady+0x234>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800439a:	69bb      	ldr	r3, [r7, #24]
 800439c:	3301      	adds	r3, #1
 800439e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80043a0:	69ba      	ldr	r2, [r7, #24]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	429a      	cmp	r2, r3
 80043a6:	f4ff af3e 	bcc.w	8004226 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2220      	movs	r2, #32
 80043ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2200      	movs	r2, #0
 80043b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e000      	b.n	80043c0 <HAL_I2C_IsDeviceReady+0x234>
  }
  else
  {
    return HAL_BUSY;
 80043be:	2302      	movs	r3, #2
  }
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	3720      	adds	r7, #32
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}
 80043c8:	00100002 	.word	0x00100002
 80043cc:	ffff0000 	.word	0xffff0000

080043d0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b083      	sub	sp, #12
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043de:	b2db      	uxtb	r3, r3
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	370c      	adds	r7, #12
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr

080043ec <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b088      	sub	sp, #32
 80043f0:	af02      	add	r7, sp, #8
 80043f2:	60f8      	str	r0, [r7, #12]
 80043f4:	607a      	str	r2, [r7, #4]
 80043f6:	603b      	str	r3, [r7, #0]
 80043f8:	460b      	mov	r3, r1
 80043fa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004400:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	2b08      	cmp	r3, #8
 8004406:	d006      	beq.n	8004416 <I2C_MasterRequestWrite+0x2a>
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	2b01      	cmp	r3, #1
 800440c:	d003      	beq.n	8004416 <I2C_MasterRequestWrite+0x2a>
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004414:	d108      	bne.n	8004428 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004424:	601a      	str	r2, [r3, #0]
 8004426:	e00b      	b.n	8004440 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800442c:	2b12      	cmp	r3, #18
 800442e:	d107      	bne.n	8004440 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800443e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	9300      	str	r3, [sp, #0]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800444c:	68f8      	ldr	r0, [r7, #12]
 800444e:	f000 fa53 	bl	80048f8 <I2C_WaitOnFlagUntilTimeout>
 8004452:	4603      	mov	r3, r0
 8004454:	2b00      	cmp	r3, #0
 8004456:	d001      	beq.n	800445c <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	e035      	b.n	80044c8 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	691b      	ldr	r3, [r3, #16]
 8004460:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004464:	d108      	bne.n	8004478 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004466:	897b      	ldrh	r3, [r7, #10]
 8004468:	b2db      	uxtb	r3, r3
 800446a:	461a      	mov	r2, r3
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004474:	611a      	str	r2, [r3, #16]
 8004476:	e01b      	b.n	80044b0 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004478:	897b      	ldrh	r3, [r7, #10]
 800447a:	11db      	asrs	r3, r3, #7
 800447c:	b2db      	uxtb	r3, r3
 800447e:	f003 0306 	and.w	r3, r3, #6
 8004482:	b2db      	uxtb	r3, r3
 8004484:	f063 030f 	orn	r3, r3, #15
 8004488:	b2da      	uxtb	r2, r3
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	490e      	ldr	r1, [pc, #56]	; (80044d0 <I2C_MasterRequestWrite+0xe4>)
 8004496:	68f8      	ldr	r0, [r7, #12]
 8004498:	f000 fa85 	bl	80049a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800449c:	4603      	mov	r3, r0
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d001      	beq.n	80044a6 <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e010      	b.n	80044c8 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80044a6:	897b      	ldrh	r3, [r7, #10]
 80044a8:	b2da      	uxtb	r2, r3
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	4907      	ldr	r1, [pc, #28]	; (80044d4 <I2C_MasterRequestWrite+0xe8>)
 80044b6:	68f8      	ldr	r0, [r7, #12]
 80044b8:	f000 fa75 	bl	80049a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044bc:	4603      	mov	r3, r0
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d001      	beq.n	80044c6 <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e000      	b.n	80044c8 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 80044c6:	2300      	movs	r3, #0
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3718      	adds	r7, #24
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}
 80044d0:	00010008 	.word	0x00010008
 80044d4:	00010002 	.word	0x00010002

080044d8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b088      	sub	sp, #32
 80044dc:	af02      	add	r7, sp, #8
 80044de:	60f8      	str	r0, [r7, #12]
 80044e0:	607a      	str	r2, [r7, #4]
 80044e2:	603b      	str	r3, [r7, #0]
 80044e4:	460b      	mov	r3, r1
 80044e6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ec:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80044fc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	2b08      	cmp	r3, #8
 8004502:	d006      	beq.n	8004512 <I2C_MasterRequestRead+0x3a>
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	2b01      	cmp	r3, #1
 8004508:	d003      	beq.n	8004512 <I2C_MasterRequestRead+0x3a>
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004510:	d108      	bne.n	8004524 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004520:	601a      	str	r2, [r3, #0]
 8004522:	e00b      	b.n	800453c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004528:	2b11      	cmp	r3, #17
 800452a:	d107      	bne.n	800453c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800453a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	9300      	str	r3, [sp, #0]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004548:	68f8      	ldr	r0, [r7, #12]
 800454a:	f000 f9d5 	bl	80048f8 <I2C_WaitOnFlagUntilTimeout>
 800454e:	4603      	mov	r3, r0
 8004550:	2b00      	cmp	r3, #0
 8004552:	d001      	beq.n	8004558 <I2C_MasterRequestRead+0x80>
  {
    return HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	e06d      	b.n	8004634 <I2C_MasterRequestRead+0x15c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	691b      	ldr	r3, [r3, #16]
 800455c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004560:	d108      	bne.n	8004574 <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004562:	897b      	ldrh	r3, [r7, #10]
 8004564:	b2db      	uxtb	r3, r3
 8004566:	f043 0301 	orr.w	r3, r3, #1
 800456a:	b2da      	uxtb	r2, r3
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	611a      	str	r2, [r3, #16]
 8004572:	e053      	b.n	800461c <I2C_MasterRequestRead+0x144>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004574:	897b      	ldrh	r3, [r7, #10]
 8004576:	11db      	asrs	r3, r3, #7
 8004578:	b2db      	uxtb	r3, r3
 800457a:	f003 0306 	and.w	r3, r3, #6
 800457e:	b2db      	uxtb	r3, r3
 8004580:	f063 030f 	orn	r3, r3, #15
 8004584:	b2da      	uxtb	r2, r3
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	492a      	ldr	r1, [pc, #168]	; (800463c <I2C_MasterRequestRead+0x164>)
 8004592:	68f8      	ldr	r0, [r7, #12]
 8004594:	f000 fa07 	bl	80049a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004598:	4603      	mov	r3, r0
 800459a:	2b00      	cmp	r3, #0
 800459c:	d001      	beq.n	80045a2 <I2C_MasterRequestRead+0xca>
    {
      return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e048      	b.n	8004634 <I2C_MasterRequestRead+0x15c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80045a2:	897b      	ldrh	r3, [r7, #10]
 80045a4:	b2da      	uxtb	r2, r3
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	4923      	ldr	r1, [pc, #140]	; (8004640 <I2C_MasterRequestRead+0x168>)
 80045b2:	68f8      	ldr	r0, [r7, #12]
 80045b4:	f000 f9f7 	bl	80049a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80045b8:	4603      	mov	r3, r0
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d001      	beq.n	80045c2 <I2C_MasterRequestRead+0xea>
    {
      return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	e038      	b.n	8004634 <I2C_MasterRequestRead+0x15c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045c2:	2300      	movs	r3, #0
 80045c4:	613b      	str	r3, [r7, #16]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	695b      	ldr	r3, [r3, #20]
 80045cc:	613b      	str	r3, [r7, #16]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	699b      	ldr	r3, [r3, #24]
 80045d4:	613b      	str	r3, [r7, #16]
 80045d6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045e6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	9300      	str	r3, [sp, #0]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80045f4:	68f8      	ldr	r0, [r7, #12]
 80045f6:	f000 f97f 	bl	80048f8 <I2C_WaitOnFlagUntilTimeout>
 80045fa:	4603      	mov	r3, r0
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d001      	beq.n	8004604 <I2C_MasterRequestRead+0x12c>
    {
      return HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	e017      	b.n	8004634 <I2C_MasterRequestRead+0x15c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004604:	897b      	ldrh	r3, [r7, #10]
 8004606:	11db      	asrs	r3, r3, #7
 8004608:	b2db      	uxtb	r3, r3
 800460a:	f003 0306 	and.w	r3, r3, #6
 800460e:	b2db      	uxtb	r3, r3
 8004610:	f063 030e 	orn	r3, r3, #14
 8004614:	b2da      	uxtb	r2, r3
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	4907      	ldr	r1, [pc, #28]	; (8004640 <I2C_MasterRequestRead+0x168>)
 8004622:	68f8      	ldr	r0, [r7, #12]
 8004624:	f000 f9bf 	bl	80049a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004628:	4603      	mov	r3, r0
 800462a:	2b00      	cmp	r3, #0
 800462c:	d001      	beq.n	8004632 <I2C_MasterRequestRead+0x15a>
  {
    return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e000      	b.n	8004634 <I2C_MasterRequestRead+0x15c>
  }

  return HAL_OK;
 8004632:	2300      	movs	r3, #0
}
 8004634:	4618      	mov	r0, r3
 8004636:	3718      	adds	r7, #24
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}
 800463c:	00010008 	.word	0x00010008
 8004640:	00010002 	.word	0x00010002

08004644 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b088      	sub	sp, #32
 8004648:	af02      	add	r7, sp, #8
 800464a:	60f8      	str	r0, [r7, #12]
 800464c:	4608      	mov	r0, r1
 800464e:	4611      	mov	r1, r2
 8004650:	461a      	mov	r2, r3
 8004652:	4603      	mov	r3, r0
 8004654:	817b      	strh	r3, [r7, #10]
 8004656:	460b      	mov	r3, r1
 8004658:	813b      	strh	r3, [r7, #8]
 800465a:	4613      	mov	r3, r2
 800465c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800466c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800466e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004670:	9300      	str	r3, [sp, #0]
 8004672:	6a3b      	ldr	r3, [r7, #32]
 8004674:	2200      	movs	r2, #0
 8004676:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800467a:	68f8      	ldr	r0, [r7, #12]
 800467c:	f000 f93c 	bl	80048f8 <I2C_WaitOnFlagUntilTimeout>
 8004680:	4603      	mov	r3, r0
 8004682:	2b00      	cmp	r3, #0
 8004684:	d001      	beq.n	800468a <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e05f      	b.n	800474a <I2C_RequestMemoryWrite+0x106>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800468a:	897b      	ldrh	r3, [r7, #10]
 800468c:	b2db      	uxtb	r3, r3
 800468e:	461a      	mov	r2, r3
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004698:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800469a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469c:	6a3a      	ldr	r2, [r7, #32]
 800469e:	492d      	ldr	r1, [pc, #180]	; (8004754 <I2C_RequestMemoryWrite+0x110>)
 80046a0:	68f8      	ldr	r0, [r7, #12]
 80046a2:	f000 f980 	bl	80049a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046a6:	4603      	mov	r3, r0
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d001      	beq.n	80046b0 <I2C_RequestMemoryWrite+0x6c>
  {
    return HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	e04c      	b.n	800474a <I2C_RequestMemoryWrite+0x106>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046b0:	2300      	movs	r3, #0
 80046b2:	617b      	str	r3, [r7, #20]
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	695b      	ldr	r3, [r3, #20]
 80046ba:	617b      	str	r3, [r7, #20]
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	699b      	ldr	r3, [r3, #24]
 80046c2:	617b      	str	r3, [r7, #20]
 80046c4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046c8:	6a39      	ldr	r1, [r7, #32]
 80046ca:	68f8      	ldr	r0, [r7, #12]
 80046cc:	f000 f9ea 	bl	8004aa4 <I2C_WaitOnTXEFlagUntilTimeout>
 80046d0:	4603      	mov	r3, r0
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d00d      	beq.n	80046f2 <I2C_RequestMemoryWrite+0xae>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046da:	2b04      	cmp	r3, #4
 80046dc:	d107      	bne.n	80046ee <I2C_RequestMemoryWrite+0xaa>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046ec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	e02b      	b.n	800474a <I2C_RequestMemoryWrite+0x106>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80046f2:	88fb      	ldrh	r3, [r7, #6]
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d105      	bne.n	8004704 <I2C_RequestMemoryWrite+0xc0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80046f8:	893b      	ldrh	r3, [r7, #8]
 80046fa:	b2da      	uxtb	r2, r3
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	611a      	str	r2, [r3, #16]
 8004702:	e021      	b.n	8004748 <I2C_RequestMemoryWrite+0x104>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004704:	893b      	ldrh	r3, [r7, #8]
 8004706:	0a1b      	lsrs	r3, r3, #8
 8004708:	b29b      	uxth	r3, r3
 800470a:	b2da      	uxtb	r2, r3
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004712:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004714:	6a39      	ldr	r1, [r7, #32]
 8004716:	68f8      	ldr	r0, [r7, #12]
 8004718:	f000 f9c4 	bl	8004aa4 <I2C_WaitOnTXEFlagUntilTimeout>
 800471c:	4603      	mov	r3, r0
 800471e:	2b00      	cmp	r3, #0
 8004720:	d00d      	beq.n	800473e <I2C_RequestMemoryWrite+0xfa>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004726:	2b04      	cmp	r3, #4
 8004728:	d107      	bne.n	800473a <I2C_RequestMemoryWrite+0xf6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004738:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e005      	b.n	800474a <I2C_RequestMemoryWrite+0x106>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800473e:	893b      	ldrh	r3, [r7, #8]
 8004740:	b2da      	uxtb	r2, r3
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004748:	2300      	movs	r3, #0
}
 800474a:	4618      	mov	r0, r3
 800474c:	3718      	adds	r7, #24
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}
 8004752:	bf00      	nop
 8004754:	00010002 	.word	0x00010002

08004758 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b088      	sub	sp, #32
 800475c:	af02      	add	r7, sp, #8
 800475e:	60f8      	str	r0, [r7, #12]
 8004760:	4608      	mov	r0, r1
 8004762:	4611      	mov	r1, r2
 8004764:	461a      	mov	r2, r3
 8004766:	4603      	mov	r3, r0
 8004768:	817b      	strh	r3, [r7, #10]
 800476a:	460b      	mov	r3, r1
 800476c:	813b      	strh	r3, [r7, #8]
 800476e:	4613      	mov	r3, r2
 8004770:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004780:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004790:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004794:	9300      	str	r3, [sp, #0]
 8004796:	6a3b      	ldr	r3, [r7, #32]
 8004798:	2200      	movs	r2, #0
 800479a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800479e:	68f8      	ldr	r0, [r7, #12]
 80047a0:	f000 f8aa 	bl	80048f8 <I2C_WaitOnFlagUntilTimeout>
 80047a4:	4603      	mov	r3, r0
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d001      	beq.n	80047ae <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e09e      	b.n	80048ec <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80047ae:	897b      	ldrh	r3, [r7, #10]
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	461a      	mov	r2, r3
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80047bc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80047be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c0:	6a3a      	ldr	r2, [r7, #32]
 80047c2:	494c      	ldr	r1, [pc, #304]	; (80048f4 <I2C_RequestMemoryRead+0x19c>)
 80047c4:	68f8      	ldr	r0, [r7, #12]
 80047c6:	f000 f8ee 	bl	80049a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80047ca:	4603      	mov	r3, r0
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d001      	beq.n	80047d4 <I2C_RequestMemoryRead+0x7c>
  {
    return HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	e08b      	b.n	80048ec <I2C_RequestMemoryRead+0x194>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047d4:	2300      	movs	r3, #0
 80047d6:	617b      	str	r3, [r7, #20]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	695b      	ldr	r3, [r3, #20]
 80047de:	617b      	str	r3, [r7, #20]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	699b      	ldr	r3, [r3, #24]
 80047e6:	617b      	str	r3, [r7, #20]
 80047e8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047ec:	6a39      	ldr	r1, [r7, #32]
 80047ee:	68f8      	ldr	r0, [r7, #12]
 80047f0:	f000 f958 	bl	8004aa4 <I2C_WaitOnTXEFlagUntilTimeout>
 80047f4:	4603      	mov	r3, r0
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d00d      	beq.n	8004816 <I2C_RequestMemoryRead+0xbe>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047fe:	2b04      	cmp	r3, #4
 8004800:	d107      	bne.n	8004812 <I2C_RequestMemoryRead+0xba>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004810:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	e06a      	b.n	80048ec <I2C_RequestMemoryRead+0x194>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004816:	88fb      	ldrh	r3, [r7, #6]
 8004818:	2b01      	cmp	r3, #1
 800481a:	d105      	bne.n	8004828 <I2C_RequestMemoryRead+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800481c:	893b      	ldrh	r3, [r7, #8]
 800481e:	b2da      	uxtb	r2, r3
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	611a      	str	r2, [r3, #16]
 8004826:	e021      	b.n	800486c <I2C_RequestMemoryRead+0x114>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004828:	893b      	ldrh	r3, [r7, #8]
 800482a:	0a1b      	lsrs	r3, r3, #8
 800482c:	b29b      	uxth	r3, r3
 800482e:	b2da      	uxtb	r2, r3
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004836:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004838:	6a39      	ldr	r1, [r7, #32]
 800483a:	68f8      	ldr	r0, [r7, #12]
 800483c:	f000 f932 	bl	8004aa4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004840:	4603      	mov	r3, r0
 8004842:	2b00      	cmp	r3, #0
 8004844:	d00d      	beq.n	8004862 <I2C_RequestMemoryRead+0x10a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484a:	2b04      	cmp	r3, #4
 800484c:	d107      	bne.n	800485e <I2C_RequestMemoryRead+0x106>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800485c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e044      	b.n	80048ec <I2C_RequestMemoryRead+0x194>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004862:	893b      	ldrh	r3, [r7, #8]
 8004864:	b2da      	uxtb	r2, r3
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800486c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800486e:	6a39      	ldr	r1, [r7, #32]
 8004870:	68f8      	ldr	r0, [r7, #12]
 8004872:	f000 f917 	bl	8004aa4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004876:	4603      	mov	r3, r0
 8004878:	2b00      	cmp	r3, #0
 800487a:	d00d      	beq.n	8004898 <I2C_RequestMemoryRead+0x140>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004880:	2b04      	cmp	r3, #4
 8004882:	d107      	bne.n	8004894 <I2C_RequestMemoryRead+0x13c>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004892:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	e029      	b.n	80048ec <I2C_RequestMemoryRead+0x194>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048a6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80048a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048aa:	9300      	str	r3, [sp, #0]
 80048ac:	6a3b      	ldr	r3, [r7, #32]
 80048ae:	2200      	movs	r2, #0
 80048b0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80048b4:	68f8      	ldr	r0, [r7, #12]
 80048b6:	f000 f81f 	bl	80048f8 <I2C_WaitOnFlagUntilTimeout>
 80048ba:	4603      	mov	r3, r0
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d001      	beq.n	80048c4 <I2C_RequestMemoryRead+0x16c>
  {
    return HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	e013      	b.n	80048ec <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80048c4:	897b      	ldrh	r3, [r7, #10]
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	f043 0301 	orr.w	r3, r3, #1
 80048cc:	b2da      	uxtb	r2, r3
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80048d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d6:	6a3a      	ldr	r2, [r7, #32]
 80048d8:	4906      	ldr	r1, [pc, #24]	; (80048f4 <I2C_RequestMemoryRead+0x19c>)
 80048da:	68f8      	ldr	r0, [r7, #12]
 80048dc:	f000 f863 	bl	80049a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048e0:	4603      	mov	r3, r0
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d001      	beq.n	80048ea <I2C_RequestMemoryRead+0x192>
  {
    return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e000      	b.n	80048ec <I2C_RequestMemoryRead+0x194>
  }

  return HAL_OK;
 80048ea:	2300      	movs	r3, #0
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3718      	adds	r7, #24
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}
 80048f4:	00010002 	.word	0x00010002

080048f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b084      	sub	sp, #16
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	60f8      	str	r0, [r7, #12]
 8004900:	60b9      	str	r1, [r7, #8]
 8004902:	603b      	str	r3, [r7, #0]
 8004904:	4613      	mov	r3, r2
 8004906:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004908:	e025      	b.n	8004956 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004910:	d021      	beq.n	8004956 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004912:	f7fc fb7f 	bl	8001014 <HAL_GetTick>
 8004916:	4602      	mov	r2, r0
 8004918:	69bb      	ldr	r3, [r7, #24]
 800491a:	1ad3      	subs	r3, r2, r3
 800491c:	683a      	ldr	r2, [r7, #0]
 800491e:	429a      	cmp	r2, r3
 8004920:	d302      	bcc.n	8004928 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d116      	bne.n	8004956 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2200      	movs	r2, #0
 800492c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2220      	movs	r2, #32
 8004932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2200      	movs	r2, #0
 800493a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004942:	f043 0220 	orr.w	r2, r3, #32
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2200      	movs	r2, #0
 800494e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e023      	b.n	800499e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	0c1b      	lsrs	r3, r3, #16
 800495a:	b2db      	uxtb	r3, r3
 800495c:	2b01      	cmp	r3, #1
 800495e:	d10d      	bne.n	800497c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	695b      	ldr	r3, [r3, #20]
 8004966:	43da      	mvns	r2, r3
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	4013      	ands	r3, r2
 800496c:	b29b      	uxth	r3, r3
 800496e:	2b00      	cmp	r3, #0
 8004970:	bf0c      	ite	eq
 8004972:	2301      	moveq	r3, #1
 8004974:	2300      	movne	r3, #0
 8004976:	b2db      	uxtb	r3, r3
 8004978:	461a      	mov	r2, r3
 800497a:	e00c      	b.n	8004996 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	699b      	ldr	r3, [r3, #24]
 8004982:	43da      	mvns	r2, r3
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	4013      	ands	r3, r2
 8004988:	b29b      	uxth	r3, r3
 800498a:	2b00      	cmp	r3, #0
 800498c:	bf0c      	ite	eq
 800498e:	2301      	moveq	r3, #1
 8004990:	2300      	movne	r3, #0
 8004992:	b2db      	uxtb	r3, r3
 8004994:	461a      	mov	r2, r3
 8004996:	79fb      	ldrb	r3, [r7, #7]
 8004998:	429a      	cmp	r2, r3
 800499a:	d0b6      	beq.n	800490a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800499c:	2300      	movs	r3, #0
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3710      	adds	r7, #16
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}

080049a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80049a6:	b580      	push	{r7, lr}
 80049a8:	b084      	sub	sp, #16
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	60f8      	str	r0, [r7, #12]
 80049ae:	60b9      	str	r1, [r7, #8]
 80049b0:	607a      	str	r2, [r7, #4]
 80049b2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80049b4:	e051      	b.n	8004a5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	695b      	ldr	r3, [r3, #20]
 80049bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049c4:	d123      	bne.n	8004a0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049d4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80049de:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2200      	movs	r2, #0
 80049e4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2220      	movs	r2, #32
 80049ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2200      	movs	r2, #0
 80049f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fa:	f043 0204 	orr.w	r2, r3, #4
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2200      	movs	r2, #0
 8004a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e046      	b.n	8004a9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a14:	d021      	beq.n	8004a5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a16:	f7fc fafd 	bl	8001014 <HAL_GetTick>
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	1ad3      	subs	r3, r2, r3
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d302      	bcc.n	8004a2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d116      	bne.n	8004a5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2220      	movs	r2, #32
 8004a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a46:	f043 0220 	orr.w	r2, r3, #32
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2200      	movs	r2, #0
 8004a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e020      	b.n	8004a9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	0c1b      	lsrs	r3, r3, #16
 8004a5e:	b2db      	uxtb	r3, r3
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	d10c      	bne.n	8004a7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	695b      	ldr	r3, [r3, #20]
 8004a6a:	43da      	mvns	r2, r3
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	4013      	ands	r3, r2
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	bf14      	ite	ne
 8004a76:	2301      	movne	r3, #1
 8004a78:	2300      	moveq	r3, #0
 8004a7a:	b2db      	uxtb	r3, r3
 8004a7c:	e00b      	b.n	8004a96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	699b      	ldr	r3, [r3, #24]
 8004a84:	43da      	mvns	r2, r3
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	4013      	ands	r3, r2
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	bf14      	ite	ne
 8004a90:	2301      	movne	r3, #1
 8004a92:	2300      	moveq	r3, #0
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d18d      	bne.n	80049b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004a9a:	2300      	movs	r3, #0
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3710      	adds	r7, #16
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}

08004aa4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b084      	sub	sp, #16
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	60f8      	str	r0, [r7, #12]
 8004aac:	60b9      	str	r1, [r7, #8]
 8004aae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ab0:	e02d      	b.n	8004b0e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004ab2:	68f8      	ldr	r0, [r7, #12]
 8004ab4:	f000 f8ce 	bl	8004c54 <I2C_IsAcknowledgeFailed>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d001      	beq.n	8004ac2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e02d      	b.n	8004b1e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ac8:	d021      	beq.n	8004b0e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004aca:	f7fc faa3 	bl	8001014 <HAL_GetTick>
 8004ace:	4602      	mov	r2, r0
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	1ad3      	subs	r3, r2, r3
 8004ad4:	68ba      	ldr	r2, [r7, #8]
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d302      	bcc.n	8004ae0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d116      	bne.n	8004b0e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2220      	movs	r2, #32
 8004aea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2200      	movs	r2, #0
 8004af2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afa:	f043 0220 	orr.w	r2, r3, #32
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2200      	movs	r2, #0
 8004b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e007      	b.n	8004b1e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	695b      	ldr	r3, [r3, #20]
 8004b14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b18:	2b80      	cmp	r3, #128	; 0x80
 8004b1a:	d1ca      	bne.n	8004ab2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004b1c:	2300      	movs	r3, #0
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3710      	adds	r7, #16
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}

08004b26 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b26:	b580      	push	{r7, lr}
 8004b28:	b084      	sub	sp, #16
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	60f8      	str	r0, [r7, #12]
 8004b2e:	60b9      	str	r1, [r7, #8]
 8004b30:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004b32:	e02d      	b.n	8004b90 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004b34:	68f8      	ldr	r0, [r7, #12]
 8004b36:	f000 f88d 	bl	8004c54 <I2C_IsAcknowledgeFailed>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d001      	beq.n	8004b44 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	e02d      	b.n	8004ba0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b4a:	d021      	beq.n	8004b90 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b4c:	f7fc fa62 	bl	8001014 <HAL_GetTick>
 8004b50:	4602      	mov	r2, r0
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	1ad3      	subs	r3, r2, r3
 8004b56:	68ba      	ldr	r2, [r7, #8]
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d302      	bcc.n	8004b62 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d116      	bne.n	8004b90 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2200      	movs	r2, #0
 8004b66:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2220      	movs	r2, #32
 8004b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2200      	movs	r2, #0
 8004b74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7c:	f043 0220 	orr.w	r2, r3, #32
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2200      	movs	r2, #0
 8004b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	e007      	b.n	8004ba0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	695b      	ldr	r3, [r3, #20]
 8004b96:	f003 0304 	and.w	r3, r3, #4
 8004b9a:	2b04      	cmp	r3, #4
 8004b9c:	d1ca      	bne.n	8004b34 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004b9e:	2300      	movs	r3, #0
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3710      	adds	r7, #16
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}

08004ba8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b084      	sub	sp, #16
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	60f8      	str	r0, [r7, #12]
 8004bb0:	60b9      	str	r1, [r7, #8]
 8004bb2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004bb4:	e042      	b.n	8004c3c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	695b      	ldr	r3, [r3, #20]
 8004bbc:	f003 0310 	and.w	r3, r3, #16
 8004bc0:	2b10      	cmp	r3, #16
 8004bc2:	d119      	bne.n	8004bf8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f06f 0210 	mvn.w	r2, #16
 8004bcc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2220      	movs	r2, #32
 8004bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2200      	movs	r2, #0
 8004be0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e029      	b.n	8004c4c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bf8:	f7fc fa0c 	bl	8001014 <HAL_GetTick>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	68ba      	ldr	r2, [r7, #8]
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d302      	bcc.n	8004c0e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d116      	bne.n	8004c3c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2200      	movs	r2, #0
 8004c12:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2220      	movs	r2, #32
 8004c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c28:	f043 0220 	orr.w	r2, r3, #32
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2200      	movs	r2, #0
 8004c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e007      	b.n	8004c4c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	695b      	ldr	r3, [r3, #20]
 8004c42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c46:	2b40      	cmp	r3, #64	; 0x40
 8004c48:	d1b5      	bne.n	8004bb6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004c4a:	2300      	movs	r3, #0
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3710      	adds	r7, #16
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}

08004c54 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b083      	sub	sp, #12
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	695b      	ldr	r3, [r3, #20]
 8004c62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c6a:	d11b      	bne.n	8004ca4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004c74:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2220      	movs	r2, #32
 8004c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2200      	movs	r2, #0
 8004c88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c90:	f043 0204 	orr.w	r2, r3, #4
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e000      	b.n	8004ca6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004ca4:	2300      	movs	r3, #0
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	370c      	adds	r7, #12
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr
	...

08004cb4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b088      	sub	sp, #32
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d101      	bne.n	8004cc6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e128      	b.n	8004f18 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d109      	bne.n	8004ce6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4a90      	ldr	r2, [pc, #576]	; (8004f20 <HAL_I2S_Init+0x26c>)
 8004cde:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f00f fd8b 	bl	80147fc <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2202      	movs	r2, #2
 8004cea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	69db      	ldr	r3, [r3, #28]
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	6812      	ldr	r2, [r2, #0]
 8004cf8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004cfc:	f023 030f 	bic.w	r3, r3, #15
 8004d00:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	2202      	movs	r2, #2
 8004d08:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	695b      	ldr	r3, [r3, #20]
 8004d0e:	2b02      	cmp	r3, #2
 8004d10:	d060      	beq.n	8004dd4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	68db      	ldr	r3, [r3, #12]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d102      	bne.n	8004d20 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004d1a:	2310      	movs	r3, #16
 8004d1c:	617b      	str	r3, [r7, #20]
 8004d1e:	e001      	b.n	8004d24 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004d20:	2320      	movs	r3, #32
 8004d22:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	2b20      	cmp	r3, #32
 8004d2a:	d802      	bhi.n	8004d32 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	005b      	lsls	r3, r3, #1
 8004d30:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004d32:	2001      	movs	r0, #1
 8004d34:	f001 fada 	bl	80062ec <HAL_RCCEx_GetPeriphCLKFreq>
 8004d38:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	691b      	ldr	r3, [r3, #16]
 8004d3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d42:	d125      	bne.n	8004d90 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	68db      	ldr	r3, [r3, #12]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d010      	beq.n	8004d6e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	009b      	lsls	r3, r3, #2
 8004d50:	68fa      	ldr	r2, [r7, #12]
 8004d52:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d56:	4613      	mov	r3, r2
 8004d58:	009b      	lsls	r3, r3, #2
 8004d5a:	4413      	add	r3, r2
 8004d5c:	005b      	lsls	r3, r3, #1
 8004d5e:	461a      	mov	r2, r3
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	695b      	ldr	r3, [r3, #20]
 8004d64:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d68:	3305      	adds	r3, #5
 8004d6a:	613b      	str	r3, [r7, #16]
 8004d6c:	e01f      	b.n	8004dae <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	00db      	lsls	r3, r3, #3
 8004d72:	68fa      	ldr	r2, [r7, #12]
 8004d74:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d78:	4613      	mov	r3, r2
 8004d7a:	009b      	lsls	r3, r3, #2
 8004d7c:	4413      	add	r3, r2
 8004d7e:	005b      	lsls	r3, r3, #1
 8004d80:	461a      	mov	r2, r3
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	695b      	ldr	r3, [r3, #20]
 8004d86:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d8a:	3305      	adds	r3, #5
 8004d8c:	613b      	str	r3, [r7, #16]
 8004d8e:	e00e      	b.n	8004dae <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004d90:	68fa      	ldr	r2, [r7, #12]
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d98:	4613      	mov	r3, r2
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	4413      	add	r3, r2
 8004d9e:	005b      	lsls	r3, r3, #1
 8004da0:	461a      	mov	r2, r3
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	695b      	ldr	r3, [r3, #20]
 8004da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004daa:	3305      	adds	r3, #5
 8004dac:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	4a5c      	ldr	r2, [pc, #368]	; (8004f24 <HAL_I2S_Init+0x270>)
 8004db2:	fba2 2303 	umull	r2, r3, r2, r3
 8004db6:	08db      	lsrs	r3, r3, #3
 8004db8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	f003 0301 	and.w	r3, r3, #1
 8004dc0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004dc2:	693a      	ldr	r2, [r7, #16]
 8004dc4:	69bb      	ldr	r3, [r7, #24]
 8004dc6:	1ad3      	subs	r3, r2, r3
 8004dc8:	085b      	lsrs	r3, r3, #1
 8004dca:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004dcc:	69bb      	ldr	r3, [r7, #24]
 8004dce:	021b      	lsls	r3, r3, #8
 8004dd0:	61bb      	str	r3, [r7, #24]
 8004dd2:	e003      	b.n	8004ddc <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004dd4:	2302      	movs	r3, #2
 8004dd6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004ddc:	69fb      	ldr	r3, [r7, #28]
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d902      	bls.n	8004de8 <HAL_I2S_Init+0x134>
 8004de2:	69fb      	ldr	r3, [r7, #28]
 8004de4:	2bff      	cmp	r3, #255	; 0xff
 8004de6:	d907      	bls.n	8004df8 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dec:	f043 0210 	orr.w	r2, r3, #16
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	e08f      	b.n	8004f18 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	691a      	ldr	r2, [r3, #16]
 8004dfc:	69bb      	ldr	r3, [r7, #24]
 8004dfe:	ea42 0103 	orr.w	r1, r2, r3
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	69fa      	ldr	r2, [r7, #28]
 8004e08:	430a      	orrs	r2, r1
 8004e0a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	69db      	ldr	r3, [r3, #28]
 8004e12:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004e16:	f023 030f 	bic.w	r3, r3, #15
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	6851      	ldr	r1, [r2, #4]
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	6892      	ldr	r2, [r2, #8]
 8004e22:	4311      	orrs	r1, r2
 8004e24:	687a      	ldr	r2, [r7, #4]
 8004e26:	68d2      	ldr	r2, [r2, #12]
 8004e28:	4311      	orrs	r1, r2
 8004e2a:	687a      	ldr	r2, [r7, #4]
 8004e2c:	6992      	ldr	r2, [r2, #24]
 8004e2e:	430a      	orrs	r2, r1
 8004e30:	431a      	orrs	r2, r3
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e3a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6a1b      	ldr	r3, [r3, #32]
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d161      	bne.n	8004f08 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	4a38      	ldr	r2, [pc, #224]	; (8004f28 <HAL_I2S_Init+0x274>)
 8004e48:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a37      	ldr	r2, [pc, #220]	; (8004f2c <HAL_I2S_Init+0x278>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d101      	bne.n	8004e58 <HAL_I2S_Init+0x1a4>
 8004e54:	4b36      	ldr	r3, [pc, #216]	; (8004f30 <HAL_I2S_Init+0x27c>)
 8004e56:	e001      	b.n	8004e5c <HAL_I2S_Init+0x1a8>
 8004e58:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e5c:	69db      	ldr	r3, [r3, #28]
 8004e5e:	687a      	ldr	r2, [r7, #4]
 8004e60:	6812      	ldr	r2, [r2, #0]
 8004e62:	4932      	ldr	r1, [pc, #200]	; (8004f2c <HAL_I2S_Init+0x278>)
 8004e64:	428a      	cmp	r2, r1
 8004e66:	d101      	bne.n	8004e6c <HAL_I2S_Init+0x1b8>
 8004e68:	4a31      	ldr	r2, [pc, #196]	; (8004f30 <HAL_I2S_Init+0x27c>)
 8004e6a:	e001      	b.n	8004e70 <HAL_I2S_Init+0x1bc>
 8004e6c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8004e70:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004e74:	f023 030f 	bic.w	r3, r3, #15
 8004e78:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a2b      	ldr	r2, [pc, #172]	; (8004f2c <HAL_I2S_Init+0x278>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d101      	bne.n	8004e88 <HAL_I2S_Init+0x1d4>
 8004e84:	4b2a      	ldr	r3, [pc, #168]	; (8004f30 <HAL_I2S_Init+0x27c>)
 8004e86:	e001      	b.n	8004e8c <HAL_I2S_Init+0x1d8>
 8004e88:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e8c:	2202      	movs	r2, #2
 8004e8e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a25      	ldr	r2, [pc, #148]	; (8004f2c <HAL_I2S_Init+0x278>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d101      	bne.n	8004e9e <HAL_I2S_Init+0x1ea>
 8004e9a:	4b25      	ldr	r3, [pc, #148]	; (8004f30 <HAL_I2S_Init+0x27c>)
 8004e9c:	e001      	b.n	8004ea2 <HAL_I2S_Init+0x1ee>
 8004e9e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ea2:	69db      	ldr	r3, [r3, #28]
 8004ea4:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004eae:	d003      	beq.n	8004eb8 <HAL_I2S_Init+0x204>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d103      	bne.n	8004ec0 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004eb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004ebc:	613b      	str	r3, [r7, #16]
 8004ebe:	e001      	b.n	8004ec4 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	b299      	uxth	r1, r3
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	68db      	ldr	r3, [r3, #12]
 8004ed2:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	699b      	ldr	r3, [r3, #24]
 8004ed8:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8004eda:	4303      	orrs	r3, r0
 8004edc:	b29b      	uxth	r3, r3
 8004ede:	430b      	orrs	r3, r1
 8004ee0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	b29a      	uxth	r2, r3
 8004ee6:	897b      	ldrh	r3, [r7, #10]
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	b29b      	uxth	r3, r3
 8004eec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004ef0:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a0d      	ldr	r2, [pc, #52]	; (8004f2c <HAL_I2S_Init+0x278>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d101      	bne.n	8004f00 <HAL_I2S_Init+0x24c>
 8004efc:	4b0c      	ldr	r3, [pc, #48]	; (8004f30 <HAL_I2S_Init+0x27c>)
 8004efe:	e001      	b.n	8004f04 <HAL_I2S_Init+0x250>
 8004f00:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f04:	897a      	ldrh	r2, [r7, #10]
 8004f06:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2201      	movs	r2, #1
 8004f12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8004f16:	2300      	movs	r3, #0
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3720      	adds	r7, #32
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}
 8004f20:	08005245 	.word	0x08005245
 8004f24:	cccccccd 	.word	0xcccccccd
 8004f28:	08005359 	.word	0x08005359
 8004f2c:	40003800 	.word	0x40003800
 8004f30:	40003400 	.word	0x40003400

08004f34 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b086      	sub	sp, #24
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	60f8      	str	r0, [r7, #12]
 8004f3c:	60b9      	str	r1, [r7, #8]
 8004f3e:	4613      	mov	r3, r2
 8004f40:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d002      	beq.n	8004f4e <HAL_I2S_Transmit_DMA+0x1a>
 8004f48:	88fb      	ldrh	r3, [r7, #6]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d101      	bne.n	8004f52 <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e08e      	b.n	8005070 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f58:	b2db      	uxtb	r3, r3
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d101      	bne.n	8004f62 <HAL_I2S_Transmit_DMA+0x2e>
 8004f5e:	2302      	movs	r3, #2
 8004f60:	e086      	b.n	8005070 <HAL_I2S_Transmit_DMA+0x13c>
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2201      	movs	r2, #1
 8004f66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f70:	b2db      	uxtb	r3, r3
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d005      	beq.n	8004f82 <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8004f7e:	2302      	movs	r3, #2
 8004f80:	e076      	b.n	8005070 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2203      	movs	r2, #3
 8004f86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	68ba      	ldr	r2, [r7, #8]
 8004f94:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	69db      	ldr	r3, [r3, #28]
 8004f9c:	f003 0307 	and.w	r3, r3, #7
 8004fa0:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	2b03      	cmp	r3, #3
 8004fa6:	d002      	beq.n	8004fae <HAL_I2S_Transmit_DMA+0x7a>
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	2b05      	cmp	r3, #5
 8004fac:	d10a      	bne.n	8004fc4 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 8004fae:	88fb      	ldrh	r3, [r7, #6]
 8004fb0:	005b      	lsls	r3, r3, #1
 8004fb2:	b29a      	uxth	r2, r3
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8004fb8:	88fb      	ldrh	r3, [r7, #6]
 8004fba:	005b      	lsls	r3, r3, #1
 8004fbc:	b29a      	uxth	r2, r3
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004fc2:	e005      	b.n	8004fd0 <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	88fa      	ldrh	r2, [r7, #6]
 8004fc8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	88fa      	ldrh	r2, [r7, #6]
 8004fce:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fd4:	4a28      	ldr	r2, [pc, #160]	; (8005078 <HAL_I2S_Transmit_DMA+0x144>)
 8004fd6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fdc:	4a27      	ldr	r2, [pc, #156]	; (800507c <HAL_I2S_Transmit_DMA+0x148>)
 8004fde:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fe4:	4a26      	ldr	r2, [pc, #152]	; (8005080 <HAL_I2S_Transmit_DMA+0x14c>)
 8004fe6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx, (uint32_t)hi2s->pTxBuffPtr, (uint32_t)&hi2s->Instance->DR, hi2s->TxXferSize))
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff0:	4619      	mov	r1, r3
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	330c      	adds	r3, #12
 8004ff8:	461a      	mov	r2, r3
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	f7fd f882 	bl	8002108 <HAL_DMA_Start_IT>
 8005004:	4603      	mov	r3, r0
 8005006:	2b00      	cmp	r3, #0
 8005008:	d00f      	beq.n	800502a <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800500e:	f043 0208 	orr.w	r2, r3, #8
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2201      	movs	r2, #1
 800501a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2200      	movs	r2, #0
 8005022:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	e022      	b.n	8005070 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	69db      	ldr	r3, [r3, #28]
 8005030:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005034:	2b00      	cmp	r3, #0
 8005036:	d107      	bne.n	8005048 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	69da      	ldr	r2, [r3, #28]
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005046:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	f003 0302 	and.w	r3, r3, #2
 8005052:	2b00      	cmp	r3, #0
 8005054:	d107      	bne.n	8005066 <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	685a      	ldr	r2, [r3, #4]
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f042 0202 	orr.w	r2, r2, #2
 8005064:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2200      	movs	r2, #0
 800506a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 800506e:	2300      	movs	r3, #0
}
 8005070:	4618      	mov	r0, r3
 8005072:	3718      	adds	r7, #24
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}
 8005078:	08005123 	.word	0x08005123
 800507c:	080050e1 	.word	0x080050e1
 8005080:	0800513f 	.word	0x0800513f

08005084 <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b082      	sub	sp, #8
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  /* Call the IrqHandler ISR set during HAL_I2S_INIT */
  hi2s->IrqHandlerISR(hi2s);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	4798      	blx	r3
}
 8005094:	bf00      	nop
 8005096:	3708      	adds	r7, #8
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}

0800509c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800509c:	b480      	push	{r7}
 800509e:	b083      	sub	sp, #12
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80050a4:	bf00      	nop
 80050a6:	370c      	adds	r7, #12
 80050a8:	46bd      	mov	sp, r7
 80050aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ae:	4770      	bx	lr

080050b0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b083      	sub	sp, #12
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80050b8:	bf00      	nop
 80050ba:	370c      	adds	r7, #12
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr

080050c4 <HAL_I2S_GetState>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL state
  */
HAL_I2S_StateTypeDef HAL_I2S_GetState(I2S_HandleTypeDef *hi2s)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b083      	sub	sp, #12
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  return hi2s->State;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050d2:	b2db      	uxtb	r3, r3
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	370c      	adds	r7, #12
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr

080050e0 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b084      	sub	sp, #16
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ec:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	69db      	ldr	r3, [r3, #28]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d10e      	bne.n	8005114 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	685a      	ldr	r2, [r3, #4]
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f022 0202 	bic.w	r2, r2, #2
 8005104:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2200      	movs	r2, #0
 800510a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2201      	movs	r2, #1
 8005110:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8005114:	68f8      	ldr	r0, [r7, #12]
 8005116:	f00f f835 	bl	8014184 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800511a:	bf00      	nop
 800511c:	3710      	adds	r7, #16
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}

08005122 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005122:	b580      	push	{r7, lr}
 8005124:	b084      	sub	sp, #16
 8005126:	af00      	add	r7, sp, #0
 8005128:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800512e:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8005130:	68f8      	ldr	r0, [r7, #12]
 8005132:	f00f f839 	bl	80141a8 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005136:	bf00      	nop
 8005138:	3710      	adds	r7, #16
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}

0800513e <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 800513e:	b580      	push	{r7, lr}
 8005140:	b084      	sub	sp, #16
 8005142:	af00      	add	r7, sp, #0
 8005144:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800514a:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	685a      	ldr	r2, [r3, #4]
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f022 0203 	bic.w	r2, r2, #3
 800515a:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2200      	movs	r2, #0
 8005160:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2200      	movs	r2, #0
 8005166:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2201      	movs	r2, #1
 800516c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005174:	f043 0208 	orr.w	r2, r3, #8
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 800517c:	68f8      	ldr	r0, [r7, #12]
 800517e:	f7ff ff97 	bl	80050b0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005182:	bf00      	nop
 8005184:	3710      	adds	r7, #16
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}

0800518a <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800518a:	b580      	push	{r7, lr}
 800518c:	b082      	sub	sp, #8
 800518e:	af00      	add	r7, sp, #0
 8005190:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005196:	881a      	ldrh	r2, [r3, #0]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a2:	1c9a      	adds	r2, r3, #2
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051ac:	b29b      	uxth	r3, r3
 80051ae:	3b01      	subs	r3, #1
 80051b0:	b29a      	uxth	r2, r3
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051ba:	b29b      	uxth	r3, r3
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d10e      	bne.n	80051de <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	685a      	ldr	r2, [r3, #4]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80051ce:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2201      	movs	r2, #1
 80051d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f00e ffd3 	bl	8014184 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80051de:	bf00      	nop
 80051e0:	3708      	adds	r7, #8
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}

080051e6 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80051e6:	b580      	push	{r7, lr}
 80051e8:	b082      	sub	sp, #8
 80051ea:	af00      	add	r7, sp, #0
 80051ec:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	68da      	ldr	r2, [r3, #12]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051f8:	b292      	uxth	r2, r2
 80051fa:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005200:	1c9a      	adds	r2, r3, #2
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800520a:	b29b      	uxth	r3, r3
 800520c:	3b01      	subs	r3, #1
 800520e:	b29a      	uxth	r2, r3
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005218:	b29b      	uxth	r3, r3
 800521a:	2b00      	cmp	r3, #0
 800521c:	d10e      	bne.n	800523c <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	685a      	ldr	r2, [r3, #4]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800522c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2201      	movs	r2, #1
 8005232:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f7ff ff30 	bl	800509c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800523c:	bf00      	nop
 800523e:	3708      	adds	r7, #8
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}

08005244 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b086      	sub	sp, #24
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800525a:	b2db      	uxtb	r3, r3
 800525c:	2b04      	cmp	r3, #4
 800525e:	d13a      	bne.n	80052d6 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	f003 0301 	and.w	r3, r3, #1
 8005266:	2b01      	cmp	r3, #1
 8005268:	d109      	bne.n	800527e <I2S_IRQHandler+0x3a>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005274:	2b40      	cmp	r3, #64	; 0x40
 8005276:	d102      	bne.n	800527e <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f7ff ffb4 	bl	80051e6 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005284:	2b40      	cmp	r3, #64	; 0x40
 8005286:	d126      	bne.n	80052d6 <I2S_IRQHandler+0x92>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	f003 0320 	and.w	r3, r3, #32
 8005292:	2b20      	cmp	r3, #32
 8005294:	d11f      	bne.n	80052d6 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	685a      	ldr	r2, [r3, #4]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80052a4:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80052a6:	2300      	movs	r3, #0
 80052a8:	613b      	str	r3, [r7, #16]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	68db      	ldr	r3, [r3, #12]
 80052b0:	613b      	str	r3, [r7, #16]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	613b      	str	r3, [r7, #16]
 80052ba:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2201      	movs	r2, #1
 80052c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052c8:	f043 0202 	orr.w	r2, r3, #2
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	f7ff feed 	bl	80050b0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	2b03      	cmp	r3, #3
 80052e0:	d136      	bne.n	8005350 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	f003 0302 	and.w	r3, r3, #2
 80052e8:	2b02      	cmp	r3, #2
 80052ea:	d109      	bne.n	8005300 <I2S_IRQHandler+0xbc>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052f6:	2b80      	cmp	r3, #128	; 0x80
 80052f8:	d102      	bne.n	8005300 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f7ff ff45 	bl	800518a <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	f003 0308 	and.w	r3, r3, #8
 8005306:	2b08      	cmp	r3, #8
 8005308:	d122      	bne.n	8005350 <I2S_IRQHandler+0x10c>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	f003 0320 	and.w	r3, r3, #32
 8005314:	2b20      	cmp	r3, #32
 8005316:	d11b      	bne.n	8005350 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	685a      	ldr	r2, [r3, #4]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005326:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005328:	2300      	movs	r3, #0
 800532a:	60fb      	str	r3, [r7, #12]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	60fb      	str	r3, [r7, #12]
 8005334:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2201      	movs	r2, #1
 800533a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005342:	f043 0204 	orr.w	r2, r3, #4
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f7ff feb0 	bl	80050b0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005350:	bf00      	nop
 8005352:	3718      	adds	r7, #24
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}

08005358 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b088      	sub	sp, #32
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4aa2      	ldr	r2, [pc, #648]	; (80055f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d101      	bne.n	8005376 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8005372:	4ba2      	ldr	r3, [pc, #648]	; (80055fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005374:	e001      	b.n	800537a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8005376:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a9b      	ldr	r2, [pc, #620]	; (80055f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d101      	bne.n	8005394 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8005390:	4b9a      	ldr	r3, [pc, #616]	; (80055fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005392:	e001      	b.n	8005398 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8005394:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053a4:	d004      	beq.n	80053b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	f040 8099 	bne.w	80054e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80053b0:	69fb      	ldr	r3, [r7, #28]
 80053b2:	f003 0302 	and.w	r3, r3, #2
 80053b6:	2b02      	cmp	r3, #2
 80053b8:	d107      	bne.n	80053ca <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d002      	beq.n	80053ca <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	f000 f925 	bl	8005614 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80053ca:	69bb      	ldr	r3, [r7, #24]
 80053cc:	f003 0301 	and.w	r3, r3, #1
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d107      	bne.n	80053e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d002      	beq.n	80053e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f000 f9c8 	bl	8005774 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80053e4:	69bb      	ldr	r3, [r7, #24]
 80053e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ea:	2b40      	cmp	r3, #64	; 0x40
 80053ec:	d13a      	bne.n	8005464 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	f003 0320 	and.w	r3, r3, #32
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d035      	beq.n	8005464 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a7e      	ldr	r2, [pc, #504]	; (80055f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d101      	bne.n	8005406 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8005402:	4b7e      	ldr	r3, [pc, #504]	; (80055fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005404:	e001      	b.n	800540a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8005406:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800540a:	685a      	ldr	r2, [r3, #4]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4979      	ldr	r1, [pc, #484]	; (80055f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005412:	428b      	cmp	r3, r1
 8005414:	d101      	bne.n	800541a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8005416:	4b79      	ldr	r3, [pc, #484]	; (80055fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005418:	e001      	b.n	800541e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800541a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800541e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005422:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	685a      	ldr	r2, [r3, #4]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005432:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005434:	2300      	movs	r3, #0
 8005436:	60fb      	str	r3, [r7, #12]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	68db      	ldr	r3, [r3, #12]
 800543e:	60fb      	str	r3, [r7, #12]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	60fb      	str	r3, [r7, #12]
 8005448:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2201      	movs	r2, #1
 800544e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005456:	f043 0202 	orr.w	r2, r3, #2
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f7ff fe26 	bl	80050b0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005464:	69fb      	ldr	r3, [r7, #28]
 8005466:	f003 0308 	and.w	r3, r3, #8
 800546a:	2b08      	cmp	r3, #8
 800546c:	f040 80be 	bne.w	80055ec <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	f003 0320 	and.w	r3, r3, #32
 8005476:	2b00      	cmp	r3, #0
 8005478:	f000 80b8 	beq.w	80055ec <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	685a      	ldr	r2, [r3, #4]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800548a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a59      	ldr	r2, [pc, #356]	; (80055f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d101      	bne.n	800549a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8005496:	4b59      	ldr	r3, [pc, #356]	; (80055fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005498:	e001      	b.n	800549e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800549a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800549e:	685a      	ldr	r2, [r3, #4]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4954      	ldr	r1, [pc, #336]	; (80055f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80054a6:	428b      	cmp	r3, r1
 80054a8:	d101      	bne.n	80054ae <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80054aa:	4b54      	ldr	r3, [pc, #336]	; (80055fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80054ac:	e001      	b.n	80054b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80054ae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80054b2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80054b6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80054b8:	2300      	movs	r3, #0
 80054ba:	60bb      	str	r3, [r7, #8]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	689b      	ldr	r3, [r3, #8]
 80054c2:	60bb      	str	r3, [r7, #8]
 80054c4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2201      	movs	r2, #1
 80054ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054d2:	f043 0204 	orr.w	r2, r3, #4
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f7ff fde8 	bl	80050b0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80054e0:	e084      	b.n	80055ec <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80054e2:	69bb      	ldr	r3, [r7, #24]
 80054e4:	f003 0302 	and.w	r3, r3, #2
 80054e8:	2b02      	cmp	r3, #2
 80054ea:	d107      	bne.n	80054fc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d002      	beq.n	80054fc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f000 f8be 	bl	8005678 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80054fc:	69fb      	ldr	r3, [r7, #28]
 80054fe:	f003 0301 	and.w	r3, r3, #1
 8005502:	2b01      	cmp	r3, #1
 8005504:	d107      	bne.n	8005516 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800550c:	2b00      	cmp	r3, #0
 800550e:	d002      	beq.n	8005516 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f000 f8fd 	bl	8005710 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005516:	69fb      	ldr	r3, [r7, #28]
 8005518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800551c:	2b40      	cmp	r3, #64	; 0x40
 800551e:	d12f      	bne.n	8005580 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	f003 0320 	and.w	r3, r3, #32
 8005526:	2b00      	cmp	r3, #0
 8005528:	d02a      	beq.n	8005580 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	685a      	ldr	r2, [r3, #4]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005538:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a2e      	ldr	r2, [pc, #184]	; (80055f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d101      	bne.n	8005548 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8005544:	4b2d      	ldr	r3, [pc, #180]	; (80055fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005546:	e001      	b.n	800554c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8005548:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800554c:	685a      	ldr	r2, [r3, #4]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4929      	ldr	r1, [pc, #164]	; (80055f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005554:	428b      	cmp	r3, r1
 8005556:	d101      	bne.n	800555c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8005558:	4b28      	ldr	r3, [pc, #160]	; (80055fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800555a:	e001      	b.n	8005560 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800555c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005560:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005564:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2201      	movs	r2, #1
 800556a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005572:	f043 0202 	orr.w	r2, r3, #2
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f7ff fd98 	bl	80050b0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005580:	69bb      	ldr	r3, [r7, #24]
 8005582:	f003 0308 	and.w	r3, r3, #8
 8005586:	2b08      	cmp	r3, #8
 8005588:	d131      	bne.n	80055ee <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	f003 0320 	and.w	r3, r3, #32
 8005590:	2b00      	cmp	r3, #0
 8005592:	d02c      	beq.n	80055ee <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a17      	ldr	r2, [pc, #92]	; (80055f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d101      	bne.n	80055a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800559e:	4b17      	ldr	r3, [pc, #92]	; (80055fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80055a0:	e001      	b.n	80055a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80055a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80055a6:	685a      	ldr	r2, [r3, #4]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4912      	ldr	r1, [pc, #72]	; (80055f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80055ae:	428b      	cmp	r3, r1
 80055b0:	d101      	bne.n	80055b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80055b2:	4b12      	ldr	r3, [pc, #72]	; (80055fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80055b4:	e001      	b.n	80055ba <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80055b6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80055ba:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80055be:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	685a      	ldr	r2, [r3, #4]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80055ce:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2201      	movs	r2, #1
 80055d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055dc:	f043 0204 	orr.w	r2, r3, #4
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f7ff fd63 	bl	80050b0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80055ea:	e000      	b.n	80055ee <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80055ec:	bf00      	nop
}
 80055ee:	bf00      	nop
 80055f0:	3720      	adds	r7, #32
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}
 80055f6:	bf00      	nop
 80055f8:	40003800 	.word	0x40003800
 80055fc:	40003400 	.word	0x40003400

08005600 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005600:	b480      	push	{r7}
 8005602:	b083      	sub	sp, #12
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8005608:	bf00      	nop
 800560a:	370c      	adds	r7, #12
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr

08005614 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b082      	sub	sp, #8
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005620:	1c99      	adds	r1, r3, #2
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	6251      	str	r1, [r2, #36]	; 0x24
 8005626:	881a      	ldrh	r2, [r3, #0]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005632:	b29b      	uxth	r3, r3
 8005634:	3b01      	subs	r3, #1
 8005636:	b29a      	uxth	r2, r3
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005640:	b29b      	uxth	r3, r3
 8005642:	2b00      	cmp	r3, #0
 8005644:	d113      	bne.n	800566e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	685a      	ldr	r2, [r3, #4]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005654:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800565a:	b29b      	uxth	r3, r3
 800565c:	2b00      	cmp	r3, #0
 800565e:	d106      	bne.n	800566e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2201      	movs	r2, #1
 8005664:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f7ff ffc9 	bl	8005600 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800566e:	bf00      	nop
 8005670:	3708      	adds	r7, #8
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}
	...

08005678 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b082      	sub	sp, #8
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005684:	1c99      	adds	r1, r3, #2
 8005686:	687a      	ldr	r2, [r7, #4]
 8005688:	6251      	str	r1, [r2, #36]	; 0x24
 800568a:	8819      	ldrh	r1, [r3, #0]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a1d      	ldr	r2, [pc, #116]	; (8005708 <I2SEx_TxISR_I2SExt+0x90>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d101      	bne.n	800569a <I2SEx_TxISR_I2SExt+0x22>
 8005696:	4b1d      	ldr	r3, [pc, #116]	; (800570c <I2SEx_TxISR_I2SExt+0x94>)
 8005698:	e001      	b.n	800569e <I2SEx_TxISR_I2SExt+0x26>
 800569a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800569e:	460a      	mov	r2, r1
 80056a0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056a6:	b29b      	uxth	r3, r3
 80056a8:	3b01      	subs	r3, #1
 80056aa:	b29a      	uxth	r2, r3
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056b4:	b29b      	uxth	r3, r3
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d121      	bne.n	80056fe <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a12      	ldr	r2, [pc, #72]	; (8005708 <I2SEx_TxISR_I2SExt+0x90>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d101      	bne.n	80056c8 <I2SEx_TxISR_I2SExt+0x50>
 80056c4:	4b11      	ldr	r3, [pc, #68]	; (800570c <I2SEx_TxISR_I2SExt+0x94>)
 80056c6:	e001      	b.n	80056cc <I2SEx_TxISR_I2SExt+0x54>
 80056c8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80056cc:	685a      	ldr	r2, [r3, #4]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	490d      	ldr	r1, [pc, #52]	; (8005708 <I2SEx_TxISR_I2SExt+0x90>)
 80056d4:	428b      	cmp	r3, r1
 80056d6:	d101      	bne.n	80056dc <I2SEx_TxISR_I2SExt+0x64>
 80056d8:	4b0c      	ldr	r3, [pc, #48]	; (800570c <I2SEx_TxISR_I2SExt+0x94>)
 80056da:	e001      	b.n	80056e0 <I2SEx_TxISR_I2SExt+0x68>
 80056dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80056e0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80056e4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d106      	bne.n	80056fe <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2201      	movs	r2, #1
 80056f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f7ff ff81 	bl	8005600 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80056fe:	bf00      	nop
 8005700:	3708      	adds	r7, #8
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}
 8005706:	bf00      	nop
 8005708:	40003800 	.word	0x40003800
 800570c:	40003400 	.word	0x40003400

08005710 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b082      	sub	sp, #8
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	68d8      	ldr	r0, [r3, #12]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005722:	1c99      	adds	r1, r3, #2
 8005724:	687a      	ldr	r2, [r7, #4]
 8005726:	62d1      	str	r1, [r2, #44]	; 0x2c
 8005728:	b282      	uxth	r2, r0
 800572a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005730:	b29b      	uxth	r3, r3
 8005732:	3b01      	subs	r3, #1
 8005734:	b29a      	uxth	r2, r3
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800573e:	b29b      	uxth	r3, r3
 8005740:	2b00      	cmp	r3, #0
 8005742:	d113      	bne.n	800576c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	685a      	ldr	r2, [r3, #4]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005752:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005758:	b29b      	uxth	r3, r3
 800575a:	2b00      	cmp	r3, #0
 800575c:	d106      	bne.n	800576c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2201      	movs	r2, #1
 8005762:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f7ff ff4a 	bl	8005600 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800576c:	bf00      	nop
 800576e:	3708      	adds	r7, #8
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}

08005774 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b082      	sub	sp, #8
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a20      	ldr	r2, [pc, #128]	; (8005804 <I2SEx_RxISR_I2SExt+0x90>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d101      	bne.n	800578a <I2SEx_RxISR_I2SExt+0x16>
 8005786:	4b20      	ldr	r3, [pc, #128]	; (8005808 <I2SEx_RxISR_I2SExt+0x94>)
 8005788:	e001      	b.n	800578e <I2SEx_RxISR_I2SExt+0x1a>
 800578a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800578e:	68d8      	ldr	r0, [r3, #12]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005794:	1c99      	adds	r1, r3, #2
 8005796:	687a      	ldr	r2, [r7, #4]
 8005798:	62d1      	str	r1, [r2, #44]	; 0x2c
 800579a:	b282      	uxth	r2, r0
 800579c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80057a2:	b29b      	uxth	r3, r3
 80057a4:	3b01      	subs	r3, #1
 80057a6:	b29a      	uxth	r2, r3
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80057b0:	b29b      	uxth	r3, r3
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d121      	bne.n	80057fa <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a12      	ldr	r2, [pc, #72]	; (8005804 <I2SEx_RxISR_I2SExt+0x90>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d101      	bne.n	80057c4 <I2SEx_RxISR_I2SExt+0x50>
 80057c0:	4b11      	ldr	r3, [pc, #68]	; (8005808 <I2SEx_RxISR_I2SExt+0x94>)
 80057c2:	e001      	b.n	80057c8 <I2SEx_RxISR_I2SExt+0x54>
 80057c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80057c8:	685a      	ldr	r2, [r3, #4]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	490d      	ldr	r1, [pc, #52]	; (8005804 <I2SEx_RxISR_I2SExt+0x90>)
 80057d0:	428b      	cmp	r3, r1
 80057d2:	d101      	bne.n	80057d8 <I2SEx_RxISR_I2SExt+0x64>
 80057d4:	4b0c      	ldr	r3, [pc, #48]	; (8005808 <I2SEx_RxISR_I2SExt+0x94>)
 80057d6:	e001      	b.n	80057dc <I2SEx_RxISR_I2SExt+0x68>
 80057d8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80057dc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80057e0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057e6:	b29b      	uxth	r3, r3
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d106      	bne.n	80057fa <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2201      	movs	r2, #1
 80057f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f7ff ff03 	bl	8005600 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80057fa:	bf00      	nop
 80057fc:	3708      	adds	r7, #8
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}
 8005802:	bf00      	nop
 8005804:	40003800 	.word	0x40003800
 8005808:	40003400 	.word	0x40003400

0800580c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b086      	sub	sp, #24
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d101      	bne.n	800581e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800581a:	2301      	movs	r3, #1
 800581c:	e22d      	b.n	8005c7a <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f003 0301 	and.w	r3, r3, #1
 8005826:	2b00      	cmp	r3, #0
 8005828:	d075      	beq.n	8005916 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800582a:	4ba3      	ldr	r3, [pc, #652]	; (8005ab8 <HAL_RCC_OscConfig+0x2ac>)
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	f003 030c 	and.w	r3, r3, #12
 8005832:	2b04      	cmp	r3, #4
 8005834:	d00c      	beq.n	8005850 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005836:	4ba0      	ldr	r3, [pc, #640]	; (8005ab8 <HAL_RCC_OscConfig+0x2ac>)
 8005838:	689b      	ldr	r3, [r3, #8]
 800583a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800583e:	2b08      	cmp	r3, #8
 8005840:	d112      	bne.n	8005868 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005842:	4b9d      	ldr	r3, [pc, #628]	; (8005ab8 <HAL_RCC_OscConfig+0x2ac>)
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800584a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800584e:	d10b      	bne.n	8005868 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005850:	4b99      	ldr	r3, [pc, #612]	; (8005ab8 <HAL_RCC_OscConfig+0x2ac>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005858:	2b00      	cmp	r3, #0
 800585a:	d05b      	beq.n	8005914 <HAL_RCC_OscConfig+0x108>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d157      	bne.n	8005914 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005864:	2301      	movs	r3, #1
 8005866:	e208      	b.n	8005c7a <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005870:	d106      	bne.n	8005880 <HAL_RCC_OscConfig+0x74>
 8005872:	4b91      	ldr	r3, [pc, #580]	; (8005ab8 <HAL_RCC_OscConfig+0x2ac>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a90      	ldr	r2, [pc, #576]	; (8005ab8 <HAL_RCC_OscConfig+0x2ac>)
 8005878:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800587c:	6013      	str	r3, [r2, #0]
 800587e:	e01d      	b.n	80058bc <HAL_RCC_OscConfig+0xb0>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005888:	d10c      	bne.n	80058a4 <HAL_RCC_OscConfig+0x98>
 800588a:	4b8b      	ldr	r3, [pc, #556]	; (8005ab8 <HAL_RCC_OscConfig+0x2ac>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a8a      	ldr	r2, [pc, #552]	; (8005ab8 <HAL_RCC_OscConfig+0x2ac>)
 8005890:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005894:	6013      	str	r3, [r2, #0]
 8005896:	4b88      	ldr	r3, [pc, #544]	; (8005ab8 <HAL_RCC_OscConfig+0x2ac>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a87      	ldr	r2, [pc, #540]	; (8005ab8 <HAL_RCC_OscConfig+0x2ac>)
 800589c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058a0:	6013      	str	r3, [r2, #0]
 80058a2:	e00b      	b.n	80058bc <HAL_RCC_OscConfig+0xb0>
 80058a4:	4b84      	ldr	r3, [pc, #528]	; (8005ab8 <HAL_RCC_OscConfig+0x2ac>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a83      	ldr	r2, [pc, #524]	; (8005ab8 <HAL_RCC_OscConfig+0x2ac>)
 80058aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058ae:	6013      	str	r3, [r2, #0]
 80058b0:	4b81      	ldr	r3, [pc, #516]	; (8005ab8 <HAL_RCC_OscConfig+0x2ac>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a80      	ldr	r2, [pc, #512]	; (8005ab8 <HAL_RCC_OscConfig+0x2ac>)
 80058b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80058ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d013      	beq.n	80058ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058c4:	f7fb fba6 	bl	8001014 <HAL_GetTick>
 80058c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058ca:	e008      	b.n	80058de <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80058cc:	f7fb fba2 	bl	8001014 <HAL_GetTick>
 80058d0:	4602      	mov	r2, r0
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	1ad3      	subs	r3, r2, r3
 80058d6:	2b64      	cmp	r3, #100	; 0x64
 80058d8:	d901      	bls.n	80058de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80058da:	2303      	movs	r3, #3
 80058dc:	e1cd      	b.n	8005c7a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058de:	4b76      	ldr	r3, [pc, #472]	; (8005ab8 <HAL_RCC_OscConfig+0x2ac>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d0f0      	beq.n	80058cc <HAL_RCC_OscConfig+0xc0>
 80058ea:	e014      	b.n	8005916 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058ec:	f7fb fb92 	bl	8001014 <HAL_GetTick>
 80058f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80058f2:	e008      	b.n	8005906 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80058f4:	f7fb fb8e 	bl	8001014 <HAL_GetTick>
 80058f8:	4602      	mov	r2, r0
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	1ad3      	subs	r3, r2, r3
 80058fe:	2b64      	cmp	r3, #100	; 0x64
 8005900:	d901      	bls.n	8005906 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005902:	2303      	movs	r3, #3
 8005904:	e1b9      	b.n	8005c7a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005906:	4b6c      	ldr	r3, [pc, #432]	; (8005ab8 <HAL_RCC_OscConfig+0x2ac>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800590e:	2b00      	cmp	r3, #0
 8005910:	d1f0      	bne.n	80058f4 <HAL_RCC_OscConfig+0xe8>
 8005912:	e000      	b.n	8005916 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005914:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f003 0302 	and.w	r3, r3, #2
 800591e:	2b00      	cmp	r3, #0
 8005920:	d063      	beq.n	80059ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005922:	4b65      	ldr	r3, [pc, #404]	; (8005ab8 <HAL_RCC_OscConfig+0x2ac>)
 8005924:	689b      	ldr	r3, [r3, #8]
 8005926:	f003 030c 	and.w	r3, r3, #12
 800592a:	2b00      	cmp	r3, #0
 800592c:	d00b      	beq.n	8005946 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800592e:	4b62      	ldr	r3, [pc, #392]	; (8005ab8 <HAL_RCC_OscConfig+0x2ac>)
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005936:	2b08      	cmp	r3, #8
 8005938:	d11c      	bne.n	8005974 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800593a:	4b5f      	ldr	r3, [pc, #380]	; (8005ab8 <HAL_RCC_OscConfig+0x2ac>)
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005942:	2b00      	cmp	r3, #0
 8005944:	d116      	bne.n	8005974 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005946:	4b5c      	ldr	r3, [pc, #368]	; (8005ab8 <HAL_RCC_OscConfig+0x2ac>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f003 0302 	and.w	r3, r3, #2
 800594e:	2b00      	cmp	r3, #0
 8005950:	d005      	beq.n	800595e <HAL_RCC_OscConfig+0x152>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	68db      	ldr	r3, [r3, #12]
 8005956:	2b01      	cmp	r3, #1
 8005958:	d001      	beq.n	800595e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	e18d      	b.n	8005c7a <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800595e:	4b56      	ldr	r3, [pc, #344]	; (8005ab8 <HAL_RCC_OscConfig+0x2ac>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	691b      	ldr	r3, [r3, #16]
 800596a:	00db      	lsls	r3, r3, #3
 800596c:	4952      	ldr	r1, [pc, #328]	; (8005ab8 <HAL_RCC_OscConfig+0x2ac>)
 800596e:	4313      	orrs	r3, r2
 8005970:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005972:	e03a      	b.n	80059ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	68db      	ldr	r3, [r3, #12]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d020      	beq.n	80059be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800597c:	4b4f      	ldr	r3, [pc, #316]	; (8005abc <HAL_RCC_OscConfig+0x2b0>)
 800597e:	2201      	movs	r2, #1
 8005980:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005982:	f7fb fb47 	bl	8001014 <HAL_GetTick>
 8005986:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005988:	e008      	b.n	800599c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800598a:	f7fb fb43 	bl	8001014 <HAL_GetTick>
 800598e:	4602      	mov	r2, r0
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	1ad3      	subs	r3, r2, r3
 8005994:	2b02      	cmp	r3, #2
 8005996:	d901      	bls.n	800599c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005998:	2303      	movs	r3, #3
 800599a:	e16e      	b.n	8005c7a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800599c:	4b46      	ldr	r3, [pc, #280]	; (8005ab8 <HAL_RCC_OscConfig+0x2ac>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f003 0302 	and.w	r3, r3, #2
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d0f0      	beq.n	800598a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059a8:	4b43      	ldr	r3, [pc, #268]	; (8005ab8 <HAL_RCC_OscConfig+0x2ac>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	691b      	ldr	r3, [r3, #16]
 80059b4:	00db      	lsls	r3, r3, #3
 80059b6:	4940      	ldr	r1, [pc, #256]	; (8005ab8 <HAL_RCC_OscConfig+0x2ac>)
 80059b8:	4313      	orrs	r3, r2
 80059ba:	600b      	str	r3, [r1, #0]
 80059bc:	e015      	b.n	80059ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80059be:	4b3f      	ldr	r3, [pc, #252]	; (8005abc <HAL_RCC_OscConfig+0x2b0>)
 80059c0:	2200      	movs	r2, #0
 80059c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059c4:	f7fb fb26 	bl	8001014 <HAL_GetTick>
 80059c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80059ca:	e008      	b.n	80059de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80059cc:	f7fb fb22 	bl	8001014 <HAL_GetTick>
 80059d0:	4602      	mov	r2, r0
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	1ad3      	subs	r3, r2, r3
 80059d6:	2b02      	cmp	r3, #2
 80059d8:	d901      	bls.n	80059de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80059da:	2303      	movs	r3, #3
 80059dc:	e14d      	b.n	8005c7a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80059de:	4b36      	ldr	r3, [pc, #216]	; (8005ab8 <HAL_RCC_OscConfig+0x2ac>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f003 0302 	and.w	r3, r3, #2
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d1f0      	bne.n	80059cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f003 0308 	and.w	r3, r3, #8
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d030      	beq.n	8005a58 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	695b      	ldr	r3, [r3, #20]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d016      	beq.n	8005a2c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80059fe:	4b30      	ldr	r3, [pc, #192]	; (8005ac0 <HAL_RCC_OscConfig+0x2b4>)
 8005a00:	2201      	movs	r2, #1
 8005a02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a04:	f7fb fb06 	bl	8001014 <HAL_GetTick>
 8005a08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a0a:	e008      	b.n	8005a1e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a0c:	f7fb fb02 	bl	8001014 <HAL_GetTick>
 8005a10:	4602      	mov	r2, r0
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	1ad3      	subs	r3, r2, r3
 8005a16:	2b02      	cmp	r3, #2
 8005a18:	d901      	bls.n	8005a1e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005a1a:	2303      	movs	r3, #3
 8005a1c:	e12d      	b.n	8005c7a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a1e:	4b26      	ldr	r3, [pc, #152]	; (8005ab8 <HAL_RCC_OscConfig+0x2ac>)
 8005a20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a22:	f003 0302 	and.w	r3, r3, #2
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d0f0      	beq.n	8005a0c <HAL_RCC_OscConfig+0x200>
 8005a2a:	e015      	b.n	8005a58 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a2c:	4b24      	ldr	r3, [pc, #144]	; (8005ac0 <HAL_RCC_OscConfig+0x2b4>)
 8005a2e:	2200      	movs	r2, #0
 8005a30:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a32:	f7fb faef 	bl	8001014 <HAL_GetTick>
 8005a36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a38:	e008      	b.n	8005a4c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a3a:	f7fb faeb 	bl	8001014 <HAL_GetTick>
 8005a3e:	4602      	mov	r2, r0
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	1ad3      	subs	r3, r2, r3
 8005a44:	2b02      	cmp	r3, #2
 8005a46:	d901      	bls.n	8005a4c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005a48:	2303      	movs	r3, #3
 8005a4a:	e116      	b.n	8005c7a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a4c:	4b1a      	ldr	r3, [pc, #104]	; (8005ab8 <HAL_RCC_OscConfig+0x2ac>)
 8005a4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a50:	f003 0302 	and.w	r3, r3, #2
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d1f0      	bne.n	8005a3a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f003 0304 	and.w	r3, r3, #4
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	f000 80a0 	beq.w	8005ba6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a66:	2300      	movs	r3, #0
 8005a68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a6a:	4b13      	ldr	r3, [pc, #76]	; (8005ab8 <HAL_RCC_OscConfig+0x2ac>)
 8005a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d10f      	bne.n	8005a96 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a76:	2300      	movs	r3, #0
 8005a78:	60fb      	str	r3, [r7, #12]
 8005a7a:	4b0f      	ldr	r3, [pc, #60]	; (8005ab8 <HAL_RCC_OscConfig+0x2ac>)
 8005a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a7e:	4a0e      	ldr	r2, [pc, #56]	; (8005ab8 <HAL_RCC_OscConfig+0x2ac>)
 8005a80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a84:	6413      	str	r3, [r2, #64]	; 0x40
 8005a86:	4b0c      	ldr	r3, [pc, #48]	; (8005ab8 <HAL_RCC_OscConfig+0x2ac>)
 8005a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a8e:	60fb      	str	r3, [r7, #12]
 8005a90:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005a92:	2301      	movs	r3, #1
 8005a94:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a96:	4b0b      	ldr	r3, [pc, #44]	; (8005ac4 <HAL_RCC_OscConfig+0x2b8>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d121      	bne.n	8005ae6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005aa2:	4b08      	ldr	r3, [pc, #32]	; (8005ac4 <HAL_RCC_OscConfig+0x2b8>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a07      	ldr	r2, [pc, #28]	; (8005ac4 <HAL_RCC_OscConfig+0x2b8>)
 8005aa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005aac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005aae:	f7fb fab1 	bl	8001014 <HAL_GetTick>
 8005ab2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ab4:	e011      	b.n	8005ada <HAL_RCC_OscConfig+0x2ce>
 8005ab6:	bf00      	nop
 8005ab8:	40023800 	.word	0x40023800
 8005abc:	42470000 	.word	0x42470000
 8005ac0:	42470e80 	.word	0x42470e80
 8005ac4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ac8:	f7fb faa4 	bl	8001014 <HAL_GetTick>
 8005acc:	4602      	mov	r2, r0
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	1ad3      	subs	r3, r2, r3
 8005ad2:	2b02      	cmp	r3, #2
 8005ad4:	d901      	bls.n	8005ada <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005ad6:	2303      	movs	r3, #3
 8005ad8:	e0cf      	b.n	8005c7a <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ada:	4b6a      	ldr	r3, [pc, #424]	; (8005c84 <HAL_RCC_OscConfig+0x478>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d0f0      	beq.n	8005ac8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	2b01      	cmp	r3, #1
 8005aec:	d106      	bne.n	8005afc <HAL_RCC_OscConfig+0x2f0>
 8005aee:	4b66      	ldr	r3, [pc, #408]	; (8005c88 <HAL_RCC_OscConfig+0x47c>)
 8005af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005af2:	4a65      	ldr	r2, [pc, #404]	; (8005c88 <HAL_RCC_OscConfig+0x47c>)
 8005af4:	f043 0301 	orr.w	r3, r3, #1
 8005af8:	6713      	str	r3, [r2, #112]	; 0x70
 8005afa:	e01c      	b.n	8005b36 <HAL_RCC_OscConfig+0x32a>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	2b05      	cmp	r3, #5
 8005b02:	d10c      	bne.n	8005b1e <HAL_RCC_OscConfig+0x312>
 8005b04:	4b60      	ldr	r3, [pc, #384]	; (8005c88 <HAL_RCC_OscConfig+0x47c>)
 8005b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b08:	4a5f      	ldr	r2, [pc, #380]	; (8005c88 <HAL_RCC_OscConfig+0x47c>)
 8005b0a:	f043 0304 	orr.w	r3, r3, #4
 8005b0e:	6713      	str	r3, [r2, #112]	; 0x70
 8005b10:	4b5d      	ldr	r3, [pc, #372]	; (8005c88 <HAL_RCC_OscConfig+0x47c>)
 8005b12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b14:	4a5c      	ldr	r2, [pc, #368]	; (8005c88 <HAL_RCC_OscConfig+0x47c>)
 8005b16:	f043 0301 	orr.w	r3, r3, #1
 8005b1a:	6713      	str	r3, [r2, #112]	; 0x70
 8005b1c:	e00b      	b.n	8005b36 <HAL_RCC_OscConfig+0x32a>
 8005b1e:	4b5a      	ldr	r3, [pc, #360]	; (8005c88 <HAL_RCC_OscConfig+0x47c>)
 8005b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b22:	4a59      	ldr	r2, [pc, #356]	; (8005c88 <HAL_RCC_OscConfig+0x47c>)
 8005b24:	f023 0301 	bic.w	r3, r3, #1
 8005b28:	6713      	str	r3, [r2, #112]	; 0x70
 8005b2a:	4b57      	ldr	r3, [pc, #348]	; (8005c88 <HAL_RCC_OscConfig+0x47c>)
 8005b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b2e:	4a56      	ldr	r2, [pc, #344]	; (8005c88 <HAL_RCC_OscConfig+0x47c>)
 8005b30:	f023 0304 	bic.w	r3, r3, #4
 8005b34:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	689b      	ldr	r3, [r3, #8]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d015      	beq.n	8005b6a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b3e:	f7fb fa69 	bl	8001014 <HAL_GetTick>
 8005b42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b44:	e00a      	b.n	8005b5c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b46:	f7fb fa65 	bl	8001014 <HAL_GetTick>
 8005b4a:	4602      	mov	r2, r0
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	1ad3      	subs	r3, r2, r3
 8005b50:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d901      	bls.n	8005b5c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005b58:	2303      	movs	r3, #3
 8005b5a:	e08e      	b.n	8005c7a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b5c:	4b4a      	ldr	r3, [pc, #296]	; (8005c88 <HAL_RCC_OscConfig+0x47c>)
 8005b5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b60:	f003 0302 	and.w	r3, r3, #2
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d0ee      	beq.n	8005b46 <HAL_RCC_OscConfig+0x33a>
 8005b68:	e014      	b.n	8005b94 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b6a:	f7fb fa53 	bl	8001014 <HAL_GetTick>
 8005b6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b70:	e00a      	b.n	8005b88 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b72:	f7fb fa4f 	bl	8001014 <HAL_GetTick>
 8005b76:	4602      	mov	r2, r0
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	1ad3      	subs	r3, r2, r3
 8005b7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d901      	bls.n	8005b88 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005b84:	2303      	movs	r3, #3
 8005b86:	e078      	b.n	8005c7a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b88:	4b3f      	ldr	r3, [pc, #252]	; (8005c88 <HAL_RCC_OscConfig+0x47c>)
 8005b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b8c:	f003 0302 	and.w	r3, r3, #2
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d1ee      	bne.n	8005b72 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005b94:	7dfb      	ldrb	r3, [r7, #23]
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d105      	bne.n	8005ba6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b9a:	4b3b      	ldr	r3, [pc, #236]	; (8005c88 <HAL_RCC_OscConfig+0x47c>)
 8005b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b9e:	4a3a      	ldr	r2, [pc, #232]	; (8005c88 <HAL_RCC_OscConfig+0x47c>)
 8005ba0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ba4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	699b      	ldr	r3, [r3, #24]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d064      	beq.n	8005c78 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005bae:	4b36      	ldr	r3, [pc, #216]	; (8005c88 <HAL_RCC_OscConfig+0x47c>)
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	f003 030c 	and.w	r3, r3, #12
 8005bb6:	2b08      	cmp	r3, #8
 8005bb8:	d05c      	beq.n	8005c74 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	699b      	ldr	r3, [r3, #24]
 8005bbe:	2b02      	cmp	r3, #2
 8005bc0:	d141      	bne.n	8005c46 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bc2:	4b32      	ldr	r3, [pc, #200]	; (8005c8c <HAL_RCC_OscConfig+0x480>)
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bc8:	f7fb fa24 	bl	8001014 <HAL_GetTick>
 8005bcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bce:	e008      	b.n	8005be2 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005bd0:	f7fb fa20 	bl	8001014 <HAL_GetTick>
 8005bd4:	4602      	mov	r2, r0
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	1ad3      	subs	r3, r2, r3
 8005bda:	2b02      	cmp	r3, #2
 8005bdc:	d901      	bls.n	8005be2 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8005bde:	2303      	movs	r3, #3
 8005be0:	e04b      	b.n	8005c7a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005be2:	4b29      	ldr	r3, [pc, #164]	; (8005c88 <HAL_RCC_OscConfig+0x47c>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d1f0      	bne.n	8005bd0 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	69da      	ldr	r2, [r3, #28]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6a1b      	ldr	r3, [r3, #32]
 8005bf6:	431a      	orrs	r2, r3
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bfc:	019b      	lsls	r3, r3, #6
 8005bfe:	431a      	orrs	r2, r3
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c04:	085b      	lsrs	r3, r3, #1
 8005c06:	3b01      	subs	r3, #1
 8005c08:	041b      	lsls	r3, r3, #16
 8005c0a:	431a      	orrs	r2, r3
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c10:	061b      	lsls	r3, r3, #24
 8005c12:	491d      	ldr	r1, [pc, #116]	; (8005c88 <HAL_RCC_OscConfig+0x47c>)
 8005c14:	4313      	orrs	r3, r2
 8005c16:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c18:	4b1c      	ldr	r3, [pc, #112]	; (8005c8c <HAL_RCC_OscConfig+0x480>)
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c1e:	f7fb f9f9 	bl	8001014 <HAL_GetTick>
 8005c22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c24:	e008      	b.n	8005c38 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c26:	f7fb f9f5 	bl	8001014 <HAL_GetTick>
 8005c2a:	4602      	mov	r2, r0
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	1ad3      	subs	r3, r2, r3
 8005c30:	2b02      	cmp	r3, #2
 8005c32:	d901      	bls.n	8005c38 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8005c34:	2303      	movs	r3, #3
 8005c36:	e020      	b.n	8005c7a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c38:	4b13      	ldr	r3, [pc, #76]	; (8005c88 <HAL_RCC_OscConfig+0x47c>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d0f0      	beq.n	8005c26 <HAL_RCC_OscConfig+0x41a>
 8005c44:	e018      	b.n	8005c78 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c46:	4b11      	ldr	r3, [pc, #68]	; (8005c8c <HAL_RCC_OscConfig+0x480>)
 8005c48:	2200      	movs	r2, #0
 8005c4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c4c:	f7fb f9e2 	bl	8001014 <HAL_GetTick>
 8005c50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c52:	e008      	b.n	8005c66 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c54:	f7fb f9de 	bl	8001014 <HAL_GetTick>
 8005c58:	4602      	mov	r2, r0
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	1ad3      	subs	r3, r2, r3
 8005c5e:	2b02      	cmp	r3, #2
 8005c60:	d901      	bls.n	8005c66 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8005c62:	2303      	movs	r3, #3
 8005c64:	e009      	b.n	8005c7a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c66:	4b08      	ldr	r3, [pc, #32]	; (8005c88 <HAL_RCC_OscConfig+0x47c>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d1f0      	bne.n	8005c54 <HAL_RCC_OscConfig+0x448>
 8005c72:	e001      	b.n	8005c78 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8005c74:	2301      	movs	r3, #1
 8005c76:	e000      	b.n	8005c7a <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8005c78:	2300      	movs	r3, #0
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3718      	adds	r7, #24
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}
 8005c82:	bf00      	nop
 8005c84:	40007000 	.word	0x40007000
 8005c88:	40023800 	.word	0x40023800
 8005c8c:	42470060 	.word	0x42470060

08005c90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b084      	sub	sp, #16
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
 8005c98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d101      	bne.n	8005ca4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	e0ca      	b.n	8005e3a <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005ca4:	4b67      	ldr	r3, [pc, #412]	; (8005e44 <HAL_RCC_ClockConfig+0x1b4>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f003 030f 	and.w	r3, r3, #15
 8005cac:	683a      	ldr	r2, [r7, #0]
 8005cae:	429a      	cmp	r2, r3
 8005cb0:	d90c      	bls.n	8005ccc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cb2:	4b64      	ldr	r3, [pc, #400]	; (8005e44 <HAL_RCC_ClockConfig+0x1b4>)
 8005cb4:	683a      	ldr	r2, [r7, #0]
 8005cb6:	b2d2      	uxtb	r2, r2
 8005cb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cba:	4b62      	ldr	r3, [pc, #392]	; (8005e44 <HAL_RCC_ClockConfig+0x1b4>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f003 030f 	and.w	r3, r3, #15
 8005cc2:	683a      	ldr	r2, [r7, #0]
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	d001      	beq.n	8005ccc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005cc8:	2301      	movs	r3, #1
 8005cca:	e0b6      	b.n	8005e3a <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f003 0302 	and.w	r3, r3, #2
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d020      	beq.n	8005d1a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f003 0304 	and.w	r3, r3, #4
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d005      	beq.n	8005cf0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005ce4:	4b58      	ldr	r3, [pc, #352]	; (8005e48 <HAL_RCC_ClockConfig+0x1b8>)
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	4a57      	ldr	r2, [pc, #348]	; (8005e48 <HAL_RCC_ClockConfig+0x1b8>)
 8005cea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005cee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f003 0308 	and.w	r3, r3, #8
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d005      	beq.n	8005d08 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005cfc:	4b52      	ldr	r3, [pc, #328]	; (8005e48 <HAL_RCC_ClockConfig+0x1b8>)
 8005cfe:	689b      	ldr	r3, [r3, #8]
 8005d00:	4a51      	ldr	r2, [pc, #324]	; (8005e48 <HAL_RCC_ClockConfig+0x1b8>)
 8005d02:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005d06:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d08:	4b4f      	ldr	r3, [pc, #316]	; (8005e48 <HAL_RCC_ClockConfig+0x1b8>)
 8005d0a:	689b      	ldr	r3, [r3, #8]
 8005d0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	494c      	ldr	r1, [pc, #304]	; (8005e48 <HAL_RCC_ClockConfig+0x1b8>)
 8005d16:	4313      	orrs	r3, r2
 8005d18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f003 0301 	and.w	r3, r3, #1
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d044      	beq.n	8005db0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	2b01      	cmp	r3, #1
 8005d2c:	d107      	bne.n	8005d3e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d2e:	4b46      	ldr	r3, [pc, #280]	; (8005e48 <HAL_RCC_ClockConfig+0x1b8>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d119      	bne.n	8005d6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	e07d      	b.n	8005e3a <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	2b02      	cmp	r3, #2
 8005d44:	d003      	beq.n	8005d4e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d4a:	2b03      	cmp	r3, #3
 8005d4c:	d107      	bne.n	8005d5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d4e:	4b3e      	ldr	r3, [pc, #248]	; (8005e48 <HAL_RCC_ClockConfig+0x1b8>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d109      	bne.n	8005d6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	e06d      	b.n	8005e3a <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d5e:	4b3a      	ldr	r3, [pc, #232]	; (8005e48 <HAL_RCC_ClockConfig+0x1b8>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f003 0302 	and.w	r3, r3, #2
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d101      	bne.n	8005d6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	e065      	b.n	8005e3a <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005d6e:	4b36      	ldr	r3, [pc, #216]	; (8005e48 <HAL_RCC_ClockConfig+0x1b8>)
 8005d70:	689b      	ldr	r3, [r3, #8]
 8005d72:	f023 0203 	bic.w	r2, r3, #3
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	4933      	ldr	r1, [pc, #204]	; (8005e48 <HAL_RCC_ClockConfig+0x1b8>)
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005d80:	f7fb f948 	bl	8001014 <HAL_GetTick>
 8005d84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d86:	e00a      	b.n	8005d9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d88:	f7fb f944 	bl	8001014 <HAL_GetTick>
 8005d8c:	4602      	mov	r2, r0
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	1ad3      	subs	r3, r2, r3
 8005d92:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d901      	bls.n	8005d9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005d9a:	2303      	movs	r3, #3
 8005d9c:	e04d      	b.n	8005e3a <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d9e:	4b2a      	ldr	r3, [pc, #168]	; (8005e48 <HAL_RCC_ClockConfig+0x1b8>)
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	f003 020c 	and.w	r2, r3, #12
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	009b      	lsls	r3, r3, #2
 8005dac:	429a      	cmp	r2, r3
 8005dae:	d1eb      	bne.n	8005d88 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005db0:	4b24      	ldr	r3, [pc, #144]	; (8005e44 <HAL_RCC_ClockConfig+0x1b4>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f003 030f 	and.w	r3, r3, #15
 8005db8:	683a      	ldr	r2, [r7, #0]
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	d20c      	bcs.n	8005dd8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dbe:	4b21      	ldr	r3, [pc, #132]	; (8005e44 <HAL_RCC_ClockConfig+0x1b4>)
 8005dc0:	683a      	ldr	r2, [r7, #0]
 8005dc2:	b2d2      	uxtb	r2, r2
 8005dc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dc6:	4b1f      	ldr	r3, [pc, #124]	; (8005e44 <HAL_RCC_ClockConfig+0x1b4>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f003 030f 	and.w	r3, r3, #15
 8005dce:	683a      	ldr	r2, [r7, #0]
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	d001      	beq.n	8005dd8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	e030      	b.n	8005e3a <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f003 0304 	and.w	r3, r3, #4
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d008      	beq.n	8005df6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005de4:	4b18      	ldr	r3, [pc, #96]	; (8005e48 <HAL_RCC_ClockConfig+0x1b8>)
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	68db      	ldr	r3, [r3, #12]
 8005df0:	4915      	ldr	r1, [pc, #84]	; (8005e48 <HAL_RCC_ClockConfig+0x1b8>)
 8005df2:	4313      	orrs	r3, r2
 8005df4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f003 0308 	and.w	r3, r3, #8
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d009      	beq.n	8005e16 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005e02:	4b11      	ldr	r3, [pc, #68]	; (8005e48 <HAL_RCC_ClockConfig+0x1b8>)
 8005e04:	689b      	ldr	r3, [r3, #8]
 8005e06:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	691b      	ldr	r3, [r3, #16]
 8005e0e:	00db      	lsls	r3, r3, #3
 8005e10:	490d      	ldr	r1, [pc, #52]	; (8005e48 <HAL_RCC_ClockConfig+0x1b8>)
 8005e12:	4313      	orrs	r3, r2
 8005e14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005e16:	f000 f81d 	bl	8005e54 <HAL_RCC_GetSysClockFreq>
 8005e1a:	4601      	mov	r1, r0
 8005e1c:	4b0a      	ldr	r3, [pc, #40]	; (8005e48 <HAL_RCC_ClockConfig+0x1b8>)
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	091b      	lsrs	r3, r3, #4
 8005e22:	f003 030f 	and.w	r3, r3, #15
 8005e26:	4a09      	ldr	r2, [pc, #36]	; (8005e4c <HAL_RCC_ClockConfig+0x1bc>)
 8005e28:	5cd3      	ldrb	r3, [r2, r3]
 8005e2a:	fa21 f303 	lsr.w	r3, r1, r3
 8005e2e:	4a08      	ldr	r2, [pc, #32]	; (8005e50 <HAL_RCC_ClockConfig+0x1c0>)
 8005e30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8005e32:	2000      	movs	r0, #0
 8005e34:	f00e ff74 	bl	8014d20 <HAL_InitTick>

  return HAL_OK;
 8005e38:	2300      	movs	r3, #0
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3710      	adds	r7, #16
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}
 8005e42:	bf00      	nop
 8005e44:	40023c00 	.word	0x40023c00
 8005e48:	40023800 	.word	0x40023800
 8005e4c:	0802b334 	.word	0x0802b334
 8005e50:	200000d8 	.word	0x200000d8

08005e54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e56:	b085      	sub	sp, #20
 8005e58:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	607b      	str	r3, [r7, #4]
 8005e5e:	2300      	movs	r3, #0
 8005e60:	60fb      	str	r3, [r7, #12]
 8005e62:	2300      	movs	r3, #0
 8005e64:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005e66:	2300      	movs	r3, #0
 8005e68:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005e6a:	4b63      	ldr	r3, [pc, #396]	; (8005ff8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	f003 030c 	and.w	r3, r3, #12
 8005e72:	2b04      	cmp	r3, #4
 8005e74:	d007      	beq.n	8005e86 <HAL_RCC_GetSysClockFreq+0x32>
 8005e76:	2b08      	cmp	r3, #8
 8005e78:	d008      	beq.n	8005e8c <HAL_RCC_GetSysClockFreq+0x38>
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	f040 80b4 	bne.w	8005fe8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005e80:	4b5e      	ldr	r3, [pc, #376]	; (8005ffc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005e82:	60bb      	str	r3, [r7, #8]
       break;
 8005e84:	e0b3      	b.n	8005fee <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005e86:	4b5e      	ldr	r3, [pc, #376]	; (8006000 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8005e88:	60bb      	str	r3, [r7, #8]
      break;
 8005e8a:	e0b0      	b.n	8005fee <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005e8c:	4b5a      	ldr	r3, [pc, #360]	; (8005ff8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e94:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005e96:	4b58      	ldr	r3, [pc, #352]	; (8005ff8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d04a      	beq.n	8005f38 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ea2:	4b55      	ldr	r3, [pc, #340]	; (8005ff8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	099b      	lsrs	r3, r3, #6
 8005ea8:	f04f 0400 	mov.w	r4, #0
 8005eac:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005eb0:	f04f 0200 	mov.w	r2, #0
 8005eb4:	ea03 0501 	and.w	r5, r3, r1
 8005eb8:	ea04 0602 	and.w	r6, r4, r2
 8005ebc:	4629      	mov	r1, r5
 8005ebe:	4632      	mov	r2, r6
 8005ec0:	f04f 0300 	mov.w	r3, #0
 8005ec4:	f04f 0400 	mov.w	r4, #0
 8005ec8:	0154      	lsls	r4, r2, #5
 8005eca:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005ece:	014b      	lsls	r3, r1, #5
 8005ed0:	4619      	mov	r1, r3
 8005ed2:	4622      	mov	r2, r4
 8005ed4:	1b49      	subs	r1, r1, r5
 8005ed6:	eb62 0206 	sbc.w	r2, r2, r6
 8005eda:	f04f 0300 	mov.w	r3, #0
 8005ede:	f04f 0400 	mov.w	r4, #0
 8005ee2:	0194      	lsls	r4, r2, #6
 8005ee4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005ee8:	018b      	lsls	r3, r1, #6
 8005eea:	1a5b      	subs	r3, r3, r1
 8005eec:	eb64 0402 	sbc.w	r4, r4, r2
 8005ef0:	f04f 0100 	mov.w	r1, #0
 8005ef4:	f04f 0200 	mov.w	r2, #0
 8005ef8:	00e2      	lsls	r2, r4, #3
 8005efa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005efe:	00d9      	lsls	r1, r3, #3
 8005f00:	460b      	mov	r3, r1
 8005f02:	4614      	mov	r4, r2
 8005f04:	195b      	adds	r3, r3, r5
 8005f06:	eb44 0406 	adc.w	r4, r4, r6
 8005f0a:	f04f 0100 	mov.w	r1, #0
 8005f0e:	f04f 0200 	mov.w	r2, #0
 8005f12:	0262      	lsls	r2, r4, #9
 8005f14:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8005f18:	0259      	lsls	r1, r3, #9
 8005f1a:	460b      	mov	r3, r1
 8005f1c:	4614      	mov	r4, r2
 8005f1e:	4618      	mov	r0, r3
 8005f20:	4621      	mov	r1, r4
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f04f 0400 	mov.w	r4, #0
 8005f28:	461a      	mov	r2, r3
 8005f2a:	4623      	mov	r3, r4
 8005f2c:	f7fa febc 	bl	8000ca8 <__aeabi_uldivmod>
 8005f30:	4603      	mov	r3, r0
 8005f32:	460c      	mov	r4, r1
 8005f34:	60fb      	str	r3, [r7, #12]
 8005f36:	e049      	b.n	8005fcc <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f38:	4b2f      	ldr	r3, [pc, #188]	; (8005ff8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	099b      	lsrs	r3, r3, #6
 8005f3e:	f04f 0400 	mov.w	r4, #0
 8005f42:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005f46:	f04f 0200 	mov.w	r2, #0
 8005f4a:	ea03 0501 	and.w	r5, r3, r1
 8005f4e:	ea04 0602 	and.w	r6, r4, r2
 8005f52:	4629      	mov	r1, r5
 8005f54:	4632      	mov	r2, r6
 8005f56:	f04f 0300 	mov.w	r3, #0
 8005f5a:	f04f 0400 	mov.w	r4, #0
 8005f5e:	0154      	lsls	r4, r2, #5
 8005f60:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005f64:	014b      	lsls	r3, r1, #5
 8005f66:	4619      	mov	r1, r3
 8005f68:	4622      	mov	r2, r4
 8005f6a:	1b49      	subs	r1, r1, r5
 8005f6c:	eb62 0206 	sbc.w	r2, r2, r6
 8005f70:	f04f 0300 	mov.w	r3, #0
 8005f74:	f04f 0400 	mov.w	r4, #0
 8005f78:	0194      	lsls	r4, r2, #6
 8005f7a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005f7e:	018b      	lsls	r3, r1, #6
 8005f80:	1a5b      	subs	r3, r3, r1
 8005f82:	eb64 0402 	sbc.w	r4, r4, r2
 8005f86:	f04f 0100 	mov.w	r1, #0
 8005f8a:	f04f 0200 	mov.w	r2, #0
 8005f8e:	00e2      	lsls	r2, r4, #3
 8005f90:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005f94:	00d9      	lsls	r1, r3, #3
 8005f96:	460b      	mov	r3, r1
 8005f98:	4614      	mov	r4, r2
 8005f9a:	195b      	adds	r3, r3, r5
 8005f9c:	eb44 0406 	adc.w	r4, r4, r6
 8005fa0:	f04f 0100 	mov.w	r1, #0
 8005fa4:	f04f 0200 	mov.w	r2, #0
 8005fa8:	02a2      	lsls	r2, r4, #10
 8005faa:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005fae:	0299      	lsls	r1, r3, #10
 8005fb0:	460b      	mov	r3, r1
 8005fb2:	4614      	mov	r4, r2
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	4621      	mov	r1, r4
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f04f 0400 	mov.w	r4, #0
 8005fbe:	461a      	mov	r2, r3
 8005fc0:	4623      	mov	r3, r4
 8005fc2:	f7fa fe71 	bl	8000ca8 <__aeabi_uldivmod>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	460c      	mov	r4, r1
 8005fca:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005fcc:	4b0a      	ldr	r3, [pc, #40]	; (8005ff8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	0c1b      	lsrs	r3, r3, #16
 8005fd2:	f003 0303 	and.w	r3, r3, #3
 8005fd6:	3301      	adds	r3, #1
 8005fd8:	005b      	lsls	r3, r3, #1
 8005fda:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005fdc:	68fa      	ldr	r2, [r7, #12]
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fe4:	60bb      	str	r3, [r7, #8]
      break;
 8005fe6:	e002      	b.n	8005fee <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005fe8:	4b04      	ldr	r3, [pc, #16]	; (8005ffc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005fea:	60bb      	str	r3, [r7, #8]
      break;
 8005fec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005fee:	68bb      	ldr	r3, [r7, #8]
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	3714      	adds	r7, #20
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ff8:	40023800 	.word	0x40023800
 8005ffc:	00f42400 	.word	0x00f42400
 8006000:	007a1200 	.word	0x007a1200

08006004 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006004:	b480      	push	{r7}
 8006006:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006008:	4b03      	ldr	r3, [pc, #12]	; (8006018 <HAL_RCC_GetHCLKFreq+0x14>)
 800600a:	681b      	ldr	r3, [r3, #0]
}
 800600c:	4618      	mov	r0, r3
 800600e:	46bd      	mov	sp, r7
 8006010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006014:	4770      	bx	lr
 8006016:	bf00      	nop
 8006018:	200000d8 	.word	0x200000d8

0800601c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006020:	f7ff fff0 	bl	8006004 <HAL_RCC_GetHCLKFreq>
 8006024:	4601      	mov	r1, r0
 8006026:	4b05      	ldr	r3, [pc, #20]	; (800603c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	0a9b      	lsrs	r3, r3, #10
 800602c:	f003 0307 	and.w	r3, r3, #7
 8006030:	4a03      	ldr	r2, [pc, #12]	; (8006040 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006032:	5cd3      	ldrb	r3, [r2, r3]
 8006034:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006038:	4618      	mov	r0, r3
 800603a:	bd80      	pop	{r7, pc}
 800603c:	40023800 	.word	0x40023800
 8006040:	0802b344 	.word	0x0802b344

08006044 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006048:	f7ff ffdc 	bl	8006004 <HAL_RCC_GetHCLKFreq>
 800604c:	4601      	mov	r1, r0
 800604e:	4b05      	ldr	r3, [pc, #20]	; (8006064 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006050:	689b      	ldr	r3, [r3, #8]
 8006052:	0b5b      	lsrs	r3, r3, #13
 8006054:	f003 0307 	and.w	r3, r3, #7
 8006058:	4a03      	ldr	r2, [pc, #12]	; (8006068 <HAL_RCC_GetPCLK2Freq+0x24>)
 800605a:	5cd3      	ldrb	r3, [r2, r3]
 800605c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006060:	4618      	mov	r0, r3
 8006062:	bd80      	pop	{r7, pc}
 8006064:	40023800 	.word	0x40023800
 8006068:	0802b344 	.word	0x0802b344

0800606c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800606c:	b480      	push	{r7}
 800606e:	b083      	sub	sp, #12
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
 8006074:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	220f      	movs	r2, #15
 800607a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800607c:	4b12      	ldr	r3, [pc, #72]	; (80060c8 <HAL_RCC_GetClockConfig+0x5c>)
 800607e:	689b      	ldr	r3, [r3, #8]
 8006080:	f003 0203 	and.w	r2, r3, #3
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006088:	4b0f      	ldr	r3, [pc, #60]	; (80060c8 <HAL_RCC_GetClockConfig+0x5c>)
 800608a:	689b      	ldr	r3, [r3, #8]
 800608c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006094:	4b0c      	ldr	r3, [pc, #48]	; (80060c8 <HAL_RCC_GetClockConfig+0x5c>)
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80060a0:	4b09      	ldr	r3, [pc, #36]	; (80060c8 <HAL_RCC_GetClockConfig+0x5c>)
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	08db      	lsrs	r3, r3, #3
 80060a6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80060ae:	4b07      	ldr	r3, [pc, #28]	; (80060cc <HAL_RCC_GetClockConfig+0x60>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f003 020f 	and.w	r2, r3, #15
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	601a      	str	r2, [r3, #0]
}
 80060ba:	bf00      	nop
 80060bc:	370c      	adds	r7, #12
 80060be:	46bd      	mov	sp, r7
 80060c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c4:	4770      	bx	lr
 80060c6:	bf00      	nop
 80060c8:	40023800 	.word	0x40023800
 80060cc:	40023c00 	.word	0x40023c00

080060d0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b086      	sub	sp, #24
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80060d8:	2300      	movs	r3, #0
 80060da:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80060dc:	2300      	movs	r3, #0
 80060de:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f003 0301 	and.w	r3, r3, #1
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d105      	bne.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d035      	beq.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80060f8:	4b62      	ldr	r3, [pc, #392]	; (8006284 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80060fa:	2200      	movs	r2, #0
 80060fc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80060fe:	f7fa ff89 	bl	8001014 <HAL_GetTick>
 8006102:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006104:	e008      	b.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006106:	f7fa ff85 	bl	8001014 <HAL_GetTick>
 800610a:	4602      	mov	r2, r0
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	1ad3      	subs	r3, r2, r3
 8006110:	2b02      	cmp	r3, #2
 8006112:	d901      	bls.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006114:	2303      	movs	r3, #3
 8006116:	e0b0      	b.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006118:	4b5b      	ldr	r3, [pc, #364]	; (8006288 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006120:	2b00      	cmp	r3, #0
 8006122:	d1f0      	bne.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	685b      	ldr	r3, [r3, #4]
 8006128:	019a      	lsls	r2, r3, #6
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	689b      	ldr	r3, [r3, #8]
 800612e:	071b      	lsls	r3, r3, #28
 8006130:	4955      	ldr	r1, [pc, #340]	; (8006288 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006132:	4313      	orrs	r3, r2
 8006134:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006138:	4b52      	ldr	r3, [pc, #328]	; (8006284 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800613a:	2201      	movs	r2, #1
 800613c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800613e:	f7fa ff69 	bl	8001014 <HAL_GetTick>
 8006142:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006144:	e008      	b.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006146:	f7fa ff65 	bl	8001014 <HAL_GetTick>
 800614a:	4602      	mov	r2, r0
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	1ad3      	subs	r3, r2, r3
 8006150:	2b02      	cmp	r3, #2
 8006152:	d901      	bls.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006154:	2303      	movs	r3, #3
 8006156:	e090      	b.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006158:	4b4b      	ldr	r3, [pc, #300]	; (8006288 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006160:	2b00      	cmp	r3, #0
 8006162:	d0f0      	beq.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f003 0302 	and.w	r3, r3, #2
 800616c:	2b00      	cmp	r3, #0
 800616e:	f000 8083 	beq.w	8006278 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006172:	2300      	movs	r3, #0
 8006174:	60fb      	str	r3, [r7, #12]
 8006176:	4b44      	ldr	r3, [pc, #272]	; (8006288 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800617a:	4a43      	ldr	r2, [pc, #268]	; (8006288 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800617c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006180:	6413      	str	r3, [r2, #64]	; 0x40
 8006182:	4b41      	ldr	r3, [pc, #260]	; (8006288 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006186:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800618a:	60fb      	str	r3, [r7, #12]
 800618c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800618e:	4b3f      	ldr	r3, [pc, #252]	; (800628c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4a3e      	ldr	r2, [pc, #248]	; (800628c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006194:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006198:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800619a:	f7fa ff3b 	bl	8001014 <HAL_GetTick>
 800619e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80061a0:	e008      	b.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80061a2:	f7fa ff37 	bl	8001014 <HAL_GetTick>
 80061a6:	4602      	mov	r2, r0
 80061a8:	697b      	ldr	r3, [r7, #20]
 80061aa:	1ad3      	subs	r3, r2, r3
 80061ac:	2b02      	cmp	r3, #2
 80061ae:	d901      	bls.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80061b0:	2303      	movs	r3, #3
 80061b2:	e062      	b.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80061b4:	4b35      	ldr	r3, [pc, #212]	; (800628c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d0f0      	beq.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80061c0:	4b31      	ldr	r3, [pc, #196]	; (8006288 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80061c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061c8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d02f      	beq.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	68db      	ldr	r3, [r3, #12]
 80061d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061d8:	693a      	ldr	r2, [r7, #16]
 80061da:	429a      	cmp	r2, r3
 80061dc:	d028      	beq.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80061de:	4b2a      	ldr	r3, [pc, #168]	; (8006288 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80061e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061e6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80061e8:	4b29      	ldr	r3, [pc, #164]	; (8006290 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80061ea:	2201      	movs	r2, #1
 80061ec:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80061ee:	4b28      	ldr	r3, [pc, #160]	; (8006290 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80061f0:	2200      	movs	r2, #0
 80061f2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80061f4:	4a24      	ldr	r2, [pc, #144]	; (8006288 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80061fa:	4b23      	ldr	r3, [pc, #140]	; (8006288 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80061fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061fe:	f003 0301 	and.w	r3, r3, #1
 8006202:	2b01      	cmp	r3, #1
 8006204:	d114      	bne.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006206:	f7fa ff05 	bl	8001014 <HAL_GetTick>
 800620a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800620c:	e00a      	b.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800620e:	f7fa ff01 	bl	8001014 <HAL_GetTick>
 8006212:	4602      	mov	r2, r0
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	1ad3      	subs	r3, r2, r3
 8006218:	f241 3288 	movw	r2, #5000	; 0x1388
 800621c:	4293      	cmp	r3, r2
 800621e:	d901      	bls.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006220:	2303      	movs	r3, #3
 8006222:	e02a      	b.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006224:	4b18      	ldr	r3, [pc, #96]	; (8006288 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006228:	f003 0302 	and.w	r3, r3, #2
 800622c:	2b00      	cmp	r3, #0
 800622e:	d0ee      	beq.n	800620e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	68db      	ldr	r3, [r3, #12]
 8006234:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006238:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800623c:	d10d      	bne.n	800625a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800623e:	4b12      	ldr	r3, [pc, #72]	; (8006288 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006240:	689b      	ldr	r3, [r3, #8]
 8006242:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	68db      	ldr	r3, [r3, #12]
 800624a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800624e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006252:	490d      	ldr	r1, [pc, #52]	; (8006288 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006254:	4313      	orrs	r3, r2
 8006256:	608b      	str	r3, [r1, #8]
 8006258:	e005      	b.n	8006266 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800625a:	4b0b      	ldr	r3, [pc, #44]	; (8006288 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	4a0a      	ldr	r2, [pc, #40]	; (8006288 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006260:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006264:	6093      	str	r3, [r2, #8]
 8006266:	4b08      	ldr	r3, [pc, #32]	; (8006288 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006268:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	68db      	ldr	r3, [r3, #12]
 800626e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006272:	4905      	ldr	r1, [pc, #20]	; (8006288 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006274:	4313      	orrs	r3, r2
 8006276:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006278:	2300      	movs	r3, #0
}
 800627a:	4618      	mov	r0, r3
 800627c:	3718      	adds	r7, #24
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}
 8006282:	bf00      	nop
 8006284:	42470068 	.word	0x42470068
 8006288:	40023800 	.word	0x40023800
 800628c:	40007000 	.word	0x40007000
 8006290:	42470e40 	.word	0x42470e40

08006294 <HAL_RCCEx_GetPeriphCLKConfig>:
  * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
  * will be configured.
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006294:	b480      	push	{r7}
 8006296:	b085      	sub	sp, #20
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  uint32_t tempreg;

  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2203      	movs	r2, #3
 80062a0:	601a      	str	r2, [r3, #0]

  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 80062a2:	4b11      	ldr	r3, [pc, #68]	; (80062e8 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 80062a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062a8:	099b      	lsrs	r3, r3, #6
 80062aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80062b2:	4b0d      	ldr	r3, [pc, #52]	; (80062e8 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 80062b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062b8:	0f1b      	lsrs	r3, r3, #28
 80062ba:	f003 0207 	and.w	r2, r3, #7
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	609a      	str	r2, [r3, #8]
#if defined(STM32F411xE)
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM);
#endif /* STM32F411xE */
  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 80062c2:	4b09      	ldr	r3, [pc, #36]	; (80062e8 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 80062c4:	689b      	ldr	r3, [r3, #8]
 80062c6:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80062ca:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 80062cc:	4b06      	ldr	r3, [pc, #24]	; (80062e8 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 80062ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062d0:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	431a      	orrs	r2, r3
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	60da      	str	r2, [r3, #12]
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
}
 80062dc:	bf00      	nop
 80062de:	3714      	adds	r7, #20
 80062e0:	46bd      	mov	sp, r7
 80062e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e6:	4770      	bx	lr
 80062e8:	40023800 	.word	0x40023800

080062ec <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b087      	sub	sp, #28
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80062f4:	2300      	movs	r3, #0
 80062f6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80062f8:	2300      	movs	r3, #0
 80062fa:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80062fc:	2300      	movs	r3, #0
 80062fe:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8006300:	2300      	movs	r3, #0
 8006302:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2b01      	cmp	r3, #1
 8006308:	d13d      	bne.n	8006386 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800630a:	4b22      	ldr	r3, [pc, #136]	; (8006394 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800630c:	689b      	ldr	r3, [r3, #8]
 800630e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006312:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d004      	beq.n	8006324 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800631a:	2b01      	cmp	r3, #1
 800631c:	d12f      	bne.n	800637e <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800631e:	4b1e      	ldr	r3, [pc, #120]	; (8006398 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006320:	617b      	str	r3, [r7, #20]
          break;
 8006322:	e02f      	b.n	8006384 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006324:	4b1b      	ldr	r3, [pc, #108]	; (8006394 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800632c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006330:	d108      	bne.n	8006344 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006332:	4b18      	ldr	r3, [pc, #96]	; (8006394 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800633a:	4a18      	ldr	r2, [pc, #96]	; (800639c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800633c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006340:	613b      	str	r3, [r7, #16]
 8006342:	e007      	b.n	8006354 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006344:	4b13      	ldr	r3, [pc, #76]	; (8006394 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800634c:	4a14      	ldr	r2, [pc, #80]	; (80063a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800634e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006352:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006354:	4b0f      	ldr	r3, [pc, #60]	; (8006394 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8006356:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800635a:	099b      	lsrs	r3, r3, #6
 800635c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	fb02 f303 	mul.w	r3, r2, r3
 8006366:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006368:	4b0a      	ldr	r3, [pc, #40]	; (8006394 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800636a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800636e:	0f1b      	lsrs	r3, r3, #28
 8006370:	f003 0307 	and.w	r3, r3, #7
 8006374:	68ba      	ldr	r2, [r7, #8]
 8006376:	fbb2 f3f3 	udiv	r3, r2, r3
 800637a:	617b      	str	r3, [r7, #20]
          break;
 800637c:	e002      	b.n	8006384 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800637e:	2300      	movs	r3, #0
 8006380:	617b      	str	r3, [r7, #20]
          break;
 8006382:	bf00      	nop
        }
      }
      break;
 8006384:	bf00      	nop
    }
  }
  return frequency;
 8006386:	697b      	ldr	r3, [r7, #20]
}
 8006388:	4618      	mov	r0, r3
 800638a:	371c      	adds	r7, #28
 800638c:	46bd      	mov	sp, r7
 800638e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006392:	4770      	bx	lr
 8006394:	40023800 	.word	0x40023800
 8006398:	00bb8000 	.word	0x00bb8000
 800639c:	007a1200 	.word	0x007a1200
 80063a0:	00f42400 	.word	0x00f42400

080063a4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b082      	sub	sp, #8
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d101      	bne.n	80063b6 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80063b2:	2301      	movs	r3, #1
 80063b4:	e083      	b.n	80064be <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	7f5b      	ldrb	r3, [r3, #29]
 80063ba:	b2db      	uxtb	r3, r3
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d105      	bne.n	80063cc <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2200      	movs	r2, #0
 80063c4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f00e fac4 	bl	8014954 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2202      	movs	r2, #2
 80063d0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	22ca      	movs	r2, #202	; 0xca
 80063d8:	625a      	str	r2, [r3, #36]	; 0x24
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	2253      	movs	r2, #83	; 0x53
 80063e0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f000 faa8 	bl	8006938 <RTC_EnterInitMode>
 80063e8:	4603      	mov	r3, r0
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d008      	beq.n	8006400 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	22ff      	movs	r2, #255	; 0xff
 80063f4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2204      	movs	r2, #4
 80063fa:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80063fc:	2301      	movs	r3, #1
 80063fe:	e05e      	b.n	80064be <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	689b      	ldr	r3, [r3, #8]
 8006406:	687a      	ldr	r2, [r7, #4]
 8006408:	6812      	ldr	r2, [r2, #0]
 800640a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800640e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006412:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	6899      	ldr	r1, [r3, #8]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	685a      	ldr	r2, [r3, #4]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	691b      	ldr	r3, [r3, #16]
 8006422:	431a      	orrs	r2, r3
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	695b      	ldr	r3, [r3, #20]
 8006428:	431a      	orrs	r2, r3
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	430a      	orrs	r2, r1
 8006430:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	687a      	ldr	r2, [r7, #4]
 8006438:	68d2      	ldr	r2, [r2, #12]
 800643a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	6919      	ldr	r1, [r3, #16]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	041a      	lsls	r2, r3, #16
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	430a      	orrs	r2, r1
 800644e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	68da      	ldr	r2, [r3, #12]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800645e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	689b      	ldr	r3, [r3, #8]
 8006466:	f003 0320 	and.w	r3, r3, #32
 800646a:	2b00      	cmp	r3, #0
 800646c:	d10e      	bne.n	800648c <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f000 fa3a 	bl	80068e8 <HAL_RTC_WaitForSynchro>
 8006474:	4603      	mov	r3, r0
 8006476:	2b00      	cmp	r3, #0
 8006478:	d008      	beq.n	800648c <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	22ff      	movs	r2, #255	; 0xff
 8006480:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2204      	movs	r2, #4
 8006486:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8006488:	2301      	movs	r3, #1
 800648a:	e018      	b.n	80064be <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800649a:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	699a      	ldr	r2, [r3, #24]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	430a      	orrs	r2, r1
 80064ac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	22ff      	movs	r2, #255	; 0xff
 80064b4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2201      	movs	r2, #1
 80064ba:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80064bc:	2300      	movs	r3, #0
  }
}
 80064be:	4618      	mov	r0, r3
 80064c0:	3708      	adds	r7, #8
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}

080064c6 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80064c6:	b590      	push	{r4, r7, lr}
 80064c8:	b087      	sub	sp, #28
 80064ca:	af00      	add	r7, sp, #0
 80064cc:	60f8      	str	r0, [r7, #12]
 80064ce:	60b9      	str	r1, [r7, #8]
 80064d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80064d2:	2300      	movs	r3, #0
 80064d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	7f1b      	ldrb	r3, [r3, #28]
 80064da:	2b01      	cmp	r3, #1
 80064dc:	d101      	bne.n	80064e2 <HAL_RTC_SetTime+0x1c>
 80064de:	2302      	movs	r3, #2
 80064e0:	e0aa      	b.n	8006638 <HAL_RTC_SetTime+0x172>
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	2201      	movs	r2, #1
 80064e6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2202      	movs	r2, #2
 80064ec:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d126      	bne.n	8006542 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	689b      	ldr	r3, [r3, #8]
 80064fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d102      	bne.n	8006508 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	2200      	movs	r2, #0
 8006506:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	781b      	ldrb	r3, [r3, #0]
 800650c:	4618      	mov	r0, r3
 800650e:	f000 fa3f 	bl	8006990 <RTC_ByteToBcd2>
 8006512:	4603      	mov	r3, r0
 8006514:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	785b      	ldrb	r3, [r3, #1]
 800651a:	4618      	mov	r0, r3
 800651c:	f000 fa38 	bl	8006990 <RTC_ByteToBcd2>
 8006520:	4603      	mov	r3, r0
 8006522:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006524:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	789b      	ldrb	r3, [r3, #2]
 800652a:	4618      	mov	r0, r3
 800652c:	f000 fa30 	bl	8006990 <RTC_ByteToBcd2>
 8006530:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8006532:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	78db      	ldrb	r3, [r3, #3]
 800653a:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800653c:	4313      	orrs	r3, r2
 800653e:	617b      	str	r3, [r7, #20]
 8006540:	e018      	b.n	8006574 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	689b      	ldr	r3, [r3, #8]
 8006548:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800654c:	2b00      	cmp	r3, #0
 800654e:	d102      	bne.n	8006556 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	2200      	movs	r2, #0
 8006554:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	781b      	ldrb	r3, [r3, #0]
 800655a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	785b      	ldrb	r3, [r3, #1]
 8006560:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006562:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8006564:	68ba      	ldr	r2, [r7, #8]
 8006566:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8006568:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	78db      	ldrb	r3, [r3, #3]
 800656e:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006570:	4313      	orrs	r3, r2
 8006572:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	22ca      	movs	r2, #202	; 0xca
 800657a:	625a      	str	r2, [r3, #36]	; 0x24
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	2253      	movs	r2, #83	; 0x53
 8006582:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006584:	68f8      	ldr	r0, [r7, #12]
 8006586:	f000 f9d7 	bl	8006938 <RTC_EnterInitMode>
 800658a:	4603      	mov	r3, r0
 800658c:	2b00      	cmp	r3, #0
 800658e:	d00b      	beq.n	80065a8 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	22ff      	movs	r2, #255	; 0xff
 8006596:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	2204      	movs	r2, #4
 800659c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	2200      	movs	r2, #0
 80065a2:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80065a4:	2301      	movs	r3, #1
 80065a6:	e047      	b.n	8006638 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681a      	ldr	r2, [r3, #0]
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80065b2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80065b6:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	689a      	ldr	r2, [r3, #8]
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80065c6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	6899      	ldr	r1, [r3, #8]
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	68da      	ldr	r2, [r3, #12]
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	691b      	ldr	r3, [r3, #16]
 80065d6:	431a      	orrs	r2, r3
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	430a      	orrs	r2, r1
 80065de:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	68da      	ldr	r2, [r3, #12]
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80065ee:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	689b      	ldr	r3, [r3, #8]
 80065f6:	f003 0320 	and.w	r3, r3, #32
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d111      	bne.n	8006622 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80065fe:	68f8      	ldr	r0, [r7, #12]
 8006600:	f000 f972 	bl	80068e8 <HAL_RTC_WaitForSynchro>
 8006604:	4603      	mov	r3, r0
 8006606:	2b00      	cmp	r3, #0
 8006608:	d00b      	beq.n	8006622 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	22ff      	movs	r2, #255	; 0xff
 8006610:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	2204      	movs	r2, #4
 8006616:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	2200      	movs	r2, #0
 800661c:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800661e:	2301      	movs	r3, #1
 8006620:	e00a      	b.n	8006638 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	22ff      	movs	r2, #255	; 0xff
 8006628:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	2201      	movs	r2, #1
 800662e:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	2200      	movs	r2, #0
 8006634:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8006636:	2300      	movs	r3, #0
  }
}
 8006638:	4618      	mov	r0, r3
 800663a:	371c      	adds	r7, #28
 800663c:	46bd      	mov	sp, r7
 800663e:	bd90      	pop	{r4, r7, pc}

08006640 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b086      	sub	sp, #24
 8006644:	af00      	add	r7, sp, #0
 8006646:	60f8      	str	r0, [r7, #12]
 8006648:	60b9      	str	r1, [r7, #8]
 800664a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800664c:	2300      	movs	r3, #0
 800664e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	691b      	ldr	r3, [r3, #16]
 8006660:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006672:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006676:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	0c1b      	lsrs	r3, r3, #16
 800667c:	b2db      	uxtb	r3, r3
 800667e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006682:	b2da      	uxtb	r2, r3
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	0a1b      	lsrs	r3, r3, #8
 800668c:	b2db      	uxtb	r3, r3
 800668e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006692:	b2da      	uxtb	r2, r3
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	b2db      	uxtb	r3, r3
 800669c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066a0:	b2da      	uxtb	r2, r3
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	0c1b      	lsrs	r3, r3, #16
 80066aa:	b2db      	uxtb	r3, r3
 80066ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066b0:	b2da      	uxtb	r2, r3
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d11a      	bne.n	80066f2 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	781b      	ldrb	r3, [r3, #0]
 80066c0:	4618      	mov	r0, r3
 80066c2:	f000 f983 	bl	80069cc <RTC_Bcd2ToByte>
 80066c6:	4603      	mov	r3, r0
 80066c8:	461a      	mov	r2, r3
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	785b      	ldrb	r3, [r3, #1]
 80066d2:	4618      	mov	r0, r3
 80066d4:	f000 f97a 	bl	80069cc <RTC_Bcd2ToByte>
 80066d8:	4603      	mov	r3, r0
 80066da:	461a      	mov	r2, r3
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	789b      	ldrb	r3, [r3, #2]
 80066e4:	4618      	mov	r0, r3
 80066e6:	f000 f971 	bl	80069cc <RTC_Bcd2ToByte>
 80066ea:	4603      	mov	r3, r0
 80066ec:	461a      	mov	r2, r3
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80066f2:	2300      	movs	r3, #0
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	3718      	adds	r7, #24
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}

080066fc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80066fc:	b590      	push	{r4, r7, lr}
 80066fe:	b087      	sub	sp, #28
 8006700:	af00      	add	r7, sp, #0
 8006702:	60f8      	str	r0, [r7, #12]
 8006704:	60b9      	str	r1, [r7, #8]
 8006706:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006708:	2300      	movs	r3, #0
 800670a:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	7f1b      	ldrb	r3, [r3, #28]
 8006710:	2b01      	cmp	r3, #1
 8006712:	d101      	bne.n	8006718 <HAL_RTC_SetDate+0x1c>
 8006714:	2302      	movs	r3, #2
 8006716:	e094      	b.n	8006842 <HAL_RTC_SetDate+0x146>
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	2201      	movs	r2, #1
 800671c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	2202      	movs	r2, #2
 8006722:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d10e      	bne.n	8006748 <HAL_RTC_SetDate+0x4c>
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	785b      	ldrb	r3, [r3, #1]
 800672e:	f003 0310 	and.w	r3, r3, #16
 8006732:	2b00      	cmp	r3, #0
 8006734:	d008      	beq.n	8006748 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	785b      	ldrb	r3, [r3, #1]
 800673a:	f023 0310 	bic.w	r3, r3, #16
 800673e:	b2db      	uxtb	r3, r3
 8006740:	330a      	adds	r3, #10
 8006742:	b2da      	uxtb	r2, r3
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d11c      	bne.n	8006788 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	78db      	ldrb	r3, [r3, #3]
 8006752:	4618      	mov	r0, r3
 8006754:	f000 f91c 	bl	8006990 <RTC_ByteToBcd2>
 8006758:	4603      	mov	r3, r0
 800675a:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	785b      	ldrb	r3, [r3, #1]
 8006760:	4618      	mov	r0, r3
 8006762:	f000 f915 	bl	8006990 <RTC_ByteToBcd2>
 8006766:	4603      	mov	r3, r0
 8006768:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800676a:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	789b      	ldrb	r3, [r3, #2]
 8006770:	4618      	mov	r0, r3
 8006772:	f000 f90d 	bl	8006990 <RTC_ByteToBcd2>
 8006776:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8006778:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	781b      	ldrb	r3, [r3, #0]
 8006780:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006782:	4313      	orrs	r3, r2
 8006784:	617b      	str	r3, [r7, #20]
 8006786:	e00e      	b.n	80067a6 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	78db      	ldrb	r3, [r3, #3]
 800678c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	785b      	ldrb	r3, [r3, #1]
 8006792:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006794:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8006796:	68ba      	ldr	r2, [r7, #8]
 8006798:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800679a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	781b      	ldrb	r3, [r3, #0]
 80067a0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80067a2:	4313      	orrs	r3, r2
 80067a4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	22ca      	movs	r2, #202	; 0xca
 80067ac:	625a      	str	r2, [r3, #36]	; 0x24
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	2253      	movs	r2, #83	; 0x53
 80067b4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80067b6:	68f8      	ldr	r0, [r7, #12]
 80067b8:	f000 f8be 	bl	8006938 <RTC_EnterInitMode>
 80067bc:	4603      	mov	r3, r0
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d00b      	beq.n	80067da <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	22ff      	movs	r2, #255	; 0xff
 80067c8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	2204      	movs	r2, #4
 80067ce:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	2200      	movs	r2, #0
 80067d4:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80067d6:	2301      	movs	r3, #1
 80067d8:	e033      	b.n	8006842 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681a      	ldr	r2, [r3, #0]
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80067e4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80067e8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	68da      	ldr	r2, [r3, #12]
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80067f8:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	689b      	ldr	r3, [r3, #8]
 8006800:	f003 0320 	and.w	r3, r3, #32
 8006804:	2b00      	cmp	r3, #0
 8006806:	d111      	bne.n	800682c <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006808:	68f8      	ldr	r0, [r7, #12]
 800680a:	f000 f86d 	bl	80068e8 <HAL_RTC_WaitForSynchro>
 800680e:	4603      	mov	r3, r0
 8006810:	2b00      	cmp	r3, #0
 8006812:	d00b      	beq.n	800682c <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	22ff      	movs	r2, #255	; 0xff
 800681a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	2204      	movs	r2, #4
 8006820:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	2200      	movs	r2, #0
 8006826:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8006828:	2301      	movs	r3, #1
 800682a:	e00a      	b.n	8006842 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	22ff      	movs	r2, #255	; 0xff
 8006832:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	2201      	movs	r2, #1
 8006838:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	2200      	movs	r2, #0
 800683e:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8006840:	2300      	movs	r3, #0
  }
}
 8006842:	4618      	mov	r0, r3
 8006844:	371c      	adds	r7, #28
 8006846:	46bd      	mov	sp, r7
 8006848:	bd90      	pop	{r4, r7, pc}

0800684a <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800684a:	b580      	push	{r7, lr}
 800684c:	b086      	sub	sp, #24
 800684e:	af00      	add	r7, sp, #0
 8006850:	60f8      	str	r0, [r7, #12]
 8006852:	60b9      	str	r1, [r7, #8]
 8006854:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006856:	2300      	movs	r3, #0
 8006858:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006864:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006868:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	0c1b      	lsrs	r3, r3, #16
 800686e:	b2da      	uxtb	r2, r3
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	0a1b      	lsrs	r3, r3, #8
 8006878:	b2db      	uxtb	r3, r3
 800687a:	f003 031f 	and.w	r3, r3, #31
 800687e:	b2da      	uxtb	r2, r3
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	b2db      	uxtb	r3, r3
 8006888:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800688c:	b2da      	uxtb	r2, r3
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	0b5b      	lsrs	r3, r3, #13
 8006896:	b2db      	uxtb	r3, r3
 8006898:	f003 0307 	and.w	r3, r3, #7
 800689c:	b2da      	uxtb	r2, r3
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d11a      	bne.n	80068de <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	78db      	ldrb	r3, [r3, #3]
 80068ac:	4618      	mov	r0, r3
 80068ae:	f000 f88d 	bl	80069cc <RTC_Bcd2ToByte>
 80068b2:	4603      	mov	r3, r0
 80068b4:	461a      	mov	r2, r3
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	785b      	ldrb	r3, [r3, #1]
 80068be:	4618      	mov	r0, r3
 80068c0:	f000 f884 	bl	80069cc <RTC_Bcd2ToByte>
 80068c4:	4603      	mov	r3, r0
 80068c6:	461a      	mov	r2, r3
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	789b      	ldrb	r3, [r3, #2]
 80068d0:	4618      	mov	r0, r3
 80068d2:	f000 f87b 	bl	80069cc <RTC_Bcd2ToByte>
 80068d6:	4603      	mov	r3, r0
 80068d8:	461a      	mov	r2, r3
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80068de:	2300      	movs	r3, #0
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	3718      	adds	r7, #24
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}

080068e8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b084      	sub	sp, #16
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80068f0:	2300      	movs	r3, #0
 80068f2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	68da      	ldr	r2, [r3, #12]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006902:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006904:	f7fa fb86 	bl	8001014 <HAL_GetTick>
 8006908:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800690a:	e009      	b.n	8006920 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800690c:	f7fa fb82 	bl	8001014 <HAL_GetTick>
 8006910:	4602      	mov	r2, r0
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	1ad3      	subs	r3, r2, r3
 8006916:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800691a:	d901      	bls.n	8006920 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800691c:	2303      	movs	r3, #3
 800691e:	e007      	b.n	8006930 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	68db      	ldr	r3, [r3, #12]
 8006926:	f003 0320 	and.w	r3, r3, #32
 800692a:	2b00      	cmp	r3, #0
 800692c:	d0ee      	beq.n	800690c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800692e:	2300      	movs	r3, #0
}
 8006930:	4618      	mov	r0, r3
 8006932:	3710      	adds	r7, #16
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}

08006938 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b084      	sub	sp, #16
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006940:	2300      	movs	r3, #0
 8006942:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	68db      	ldr	r3, [r3, #12]
 800694a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800694e:	2b00      	cmp	r3, #0
 8006950:	d119      	bne.n	8006986 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f04f 32ff 	mov.w	r2, #4294967295
 800695a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800695c:	f7fa fb5a 	bl	8001014 <HAL_GetTick>
 8006960:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006962:	e009      	b.n	8006978 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006964:	f7fa fb56 	bl	8001014 <HAL_GetTick>
 8006968:	4602      	mov	r2, r0
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	1ad3      	subs	r3, r2, r3
 800696e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006972:	d901      	bls.n	8006978 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8006974:	2303      	movs	r3, #3
 8006976:	e007      	b.n	8006988 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	68db      	ldr	r3, [r3, #12]
 800697e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006982:	2b00      	cmp	r3, #0
 8006984:	d0ee      	beq.n	8006964 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8006986:	2300      	movs	r3, #0
}
 8006988:	4618      	mov	r0, r3
 800698a:	3710      	adds	r7, #16
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}

08006990 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006990:	b480      	push	{r7}
 8006992:	b085      	sub	sp, #20
 8006994:	af00      	add	r7, sp, #0
 8006996:	4603      	mov	r3, r0
 8006998:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800699a:	2300      	movs	r3, #0
 800699c:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 800699e:	e005      	b.n	80069ac <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	3301      	adds	r3, #1
 80069a4:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80069a6:	79fb      	ldrb	r3, [r7, #7]
 80069a8:	3b0a      	subs	r3, #10
 80069aa:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 80069ac:	79fb      	ldrb	r3, [r7, #7]
 80069ae:	2b09      	cmp	r3, #9
 80069b0:	d8f6      	bhi.n	80069a0 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	b2db      	uxtb	r3, r3
 80069b6:	011b      	lsls	r3, r3, #4
 80069b8:	b2da      	uxtb	r2, r3
 80069ba:	79fb      	ldrb	r3, [r7, #7]
 80069bc:	4313      	orrs	r3, r2
 80069be:	b2db      	uxtb	r3, r3
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	3714      	adds	r7, #20
 80069c4:	46bd      	mov	sp, r7
 80069c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ca:	4770      	bx	lr

080069cc <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80069cc:	b480      	push	{r7}
 80069ce:	b085      	sub	sp, #20
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	4603      	mov	r3, r0
 80069d4:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80069d6:	2300      	movs	r3, #0
 80069d8:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80069da:	79fb      	ldrb	r3, [r7, #7]
 80069dc:	091b      	lsrs	r3, r3, #4
 80069de:	b2db      	uxtb	r3, r3
 80069e0:	461a      	mov	r2, r3
 80069e2:	4613      	mov	r3, r2
 80069e4:	009b      	lsls	r3, r3, #2
 80069e6:	4413      	add	r3, r2
 80069e8:	005b      	lsls	r3, r3, #1
 80069ea:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80069ec:	79fb      	ldrb	r3, [r7, #7]
 80069ee:	f003 030f 	and.w	r3, r3, #15
 80069f2:	b2da      	uxtb	r2, r3
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	b2db      	uxtb	r3, r3
 80069f8:	4413      	add	r3, r2
 80069fa:	b2db      	uxtb	r3, r3
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	3714      	adds	r7, #20
 8006a00:	46bd      	mov	sp, r7
 8006a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a06:	4770      	bx	lr

08006a08 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b087      	sub	sp, #28
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	60f8      	str	r0, [r7, #12]
 8006a10:	60b9      	str	r1, [r7, #8]
 8006a12:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8006a14:	2300      	movs	r3, #0
 8006a16:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	3350      	adds	r3, #80	; 0x50
 8006a1e:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	009b      	lsls	r3, r3, #2
 8006a24:	697a      	ldr	r2, [r7, #20]
 8006a26:	4413      	add	r3, r2
 8006a28:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	687a      	ldr	r2, [r7, #4]
 8006a2e:	601a      	str	r2, [r3, #0]
}
 8006a30:	bf00      	nop
 8006a32:	371c      	adds	r7, #28
 8006a34:	46bd      	mov	sp, r7
 8006a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3a:	4770      	bx	lr

08006a3c <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b085      	sub	sp, #20
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
 8006a44:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8006a46:	2300      	movs	r3, #0
 8006a48:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	3350      	adds	r3, #80	; 0x50
 8006a50:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	009b      	lsls	r3, r3, #2
 8006a56:	68fa      	ldr	r2, [r7, #12]
 8006a58:	4413      	add	r3, r2
 8006a5a:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	3714      	adds	r7, #20
 8006a64:	46bd      	mov	sp, r7
 8006a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6a:	4770      	bx	lr

08006a6c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b082      	sub	sp, #8
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d101      	bne.n	8006a7e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	e056      	b.n	8006b2c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2200      	movs	r2, #0
 8006a82:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006a8a:	b2db      	uxtb	r3, r3
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d106      	bne.n	8006a9e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2200      	movs	r2, #0
 8006a94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f00d ff71 	bl	8014980 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2202      	movs	r2, #2
 8006aa2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	681a      	ldr	r2, [r3, #0]
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ab4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	685a      	ldr	r2, [r3, #4]
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	689b      	ldr	r3, [r3, #8]
 8006abe:	431a      	orrs	r2, r3
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	68db      	ldr	r3, [r3, #12]
 8006ac4:	431a      	orrs	r2, r3
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	691b      	ldr	r3, [r3, #16]
 8006aca:	431a      	orrs	r2, r3
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	695b      	ldr	r3, [r3, #20]
 8006ad0:	431a      	orrs	r2, r3
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	699b      	ldr	r3, [r3, #24]
 8006ad6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006ada:	431a      	orrs	r2, r3
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	69db      	ldr	r3, [r3, #28]
 8006ae0:	431a      	orrs	r2, r3
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6a1b      	ldr	r3, [r3, #32]
 8006ae6:	ea42 0103 	orr.w	r1, r2, r3
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	430a      	orrs	r2, r1
 8006af4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	699b      	ldr	r3, [r3, #24]
 8006afa:	0c1b      	lsrs	r3, r3, #16
 8006afc:	f003 0104 	and.w	r1, r3, #4
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	430a      	orrs	r2, r1
 8006b0a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	69da      	ldr	r2, [r3, #28]
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006b1a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2201      	movs	r2, #1
 8006b26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006b2a:	2300      	movs	r3, #0
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3708      	adds	r7, #8
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}

08006b34 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b08c      	sub	sp, #48	; 0x30
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	60f8      	str	r0, [r7, #12]
 8006b3c:	60b9      	str	r1, [r7, #8]
 8006b3e:	607a      	str	r2, [r7, #4]
 8006b40:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006b42:	2301      	movs	r3, #1
 8006b44:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006b46:	2300      	movs	r3, #0
 8006b48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006b52:	2b01      	cmp	r3, #1
 8006b54:	d101      	bne.n	8006b5a <HAL_SPI_TransmitReceive+0x26>
 8006b56:	2302      	movs	r3, #2
 8006b58:	e18a      	b.n	8006e70 <HAL_SPI_TransmitReceive+0x33c>
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	2201      	movs	r2, #1
 8006b5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006b62:	f7fa fa57 	bl	8001014 <HAL_GetTick>
 8006b66:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006b6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006b78:	887b      	ldrh	r3, [r7, #2]
 8006b7a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006b7c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006b80:	2b01      	cmp	r3, #1
 8006b82:	d00f      	beq.n	8006ba4 <HAL_SPI_TransmitReceive+0x70>
 8006b84:	69fb      	ldr	r3, [r7, #28]
 8006b86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b8a:	d107      	bne.n	8006b9c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	689b      	ldr	r3, [r3, #8]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d103      	bne.n	8006b9c <HAL_SPI_TransmitReceive+0x68>
 8006b94:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006b98:	2b04      	cmp	r3, #4
 8006b9a:	d003      	beq.n	8006ba4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006b9c:	2302      	movs	r3, #2
 8006b9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006ba2:	e15b      	b.n	8006e5c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d005      	beq.n	8006bb6 <HAL_SPI_TransmitReceive+0x82>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d002      	beq.n	8006bb6 <HAL_SPI_TransmitReceive+0x82>
 8006bb0:	887b      	ldrh	r3, [r7, #2]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d103      	bne.n	8006bbe <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006bbc:	e14e      	b.n	8006e5c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006bc4:	b2db      	uxtb	r3, r3
 8006bc6:	2b04      	cmp	r3, #4
 8006bc8:	d003      	beq.n	8006bd2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2205      	movs	r2, #5
 8006bce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	687a      	ldr	r2, [r7, #4]
 8006bdc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	887a      	ldrh	r2, [r7, #2]
 8006be2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	887a      	ldrh	r2, [r7, #2]
 8006be8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	68ba      	ldr	r2, [r7, #8]
 8006bee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	887a      	ldrh	r2, [r7, #2]
 8006bf4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	887a      	ldrh	r2, [r7, #2]
 8006bfa:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	2200      	movs	r2, #0
 8006c06:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c12:	2b40      	cmp	r3, #64	; 0x40
 8006c14:	d007      	beq.n	8006c26 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	681a      	ldr	r2, [r3, #0]
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c24:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	68db      	ldr	r3, [r3, #12]
 8006c2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c2e:	d178      	bne.n	8006d22 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	685b      	ldr	r3, [r3, #4]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d002      	beq.n	8006c3e <HAL_SPI_TransmitReceive+0x10a>
 8006c38:	8b7b      	ldrh	r3, [r7, #26]
 8006c3a:	2b01      	cmp	r3, #1
 8006c3c:	d166      	bne.n	8006d0c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c42:	881a      	ldrh	r2, [r3, #0]
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c4e:	1c9a      	adds	r2, r3, #2
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c58:	b29b      	uxth	r3, r3
 8006c5a:	3b01      	subs	r3, #1
 8006c5c:	b29a      	uxth	r2, r3
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006c62:	e053      	b.n	8006d0c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	689b      	ldr	r3, [r3, #8]
 8006c6a:	f003 0302 	and.w	r3, r3, #2
 8006c6e:	2b02      	cmp	r3, #2
 8006c70:	d11b      	bne.n	8006caa <HAL_SPI_TransmitReceive+0x176>
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c76:	b29b      	uxth	r3, r3
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d016      	beq.n	8006caa <HAL_SPI_TransmitReceive+0x176>
 8006c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c7e:	2b01      	cmp	r3, #1
 8006c80:	d113      	bne.n	8006caa <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c86:	881a      	ldrh	r2, [r3, #0]
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c92:	1c9a      	adds	r2, r3, #2
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c9c:	b29b      	uxth	r3, r3
 8006c9e:	3b01      	subs	r3, #1
 8006ca0:	b29a      	uxth	r2, r3
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	689b      	ldr	r3, [r3, #8]
 8006cb0:	f003 0301 	and.w	r3, r3, #1
 8006cb4:	2b01      	cmp	r3, #1
 8006cb6:	d119      	bne.n	8006cec <HAL_SPI_TransmitReceive+0x1b8>
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cbc:	b29b      	uxth	r3, r3
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d014      	beq.n	8006cec <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	68da      	ldr	r2, [r3, #12]
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ccc:	b292      	uxth	r2, r2
 8006cce:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cd4:	1c9a      	adds	r2, r3, #2
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cde:	b29b      	uxth	r3, r3
 8006ce0:	3b01      	subs	r3, #1
 8006ce2:	b29a      	uxth	r2, r3
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006ce8:	2301      	movs	r3, #1
 8006cea:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006cec:	f7fa f992 	bl	8001014 <HAL_GetTick>
 8006cf0:	4602      	mov	r2, r0
 8006cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf4:	1ad3      	subs	r3, r2, r3
 8006cf6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006cf8:	429a      	cmp	r2, r3
 8006cfa:	d807      	bhi.n	8006d0c <HAL_SPI_TransmitReceive+0x1d8>
 8006cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d02:	d003      	beq.n	8006d0c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006d04:	2303      	movs	r3, #3
 8006d06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006d0a:	e0a7      	b.n	8006e5c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d10:	b29b      	uxth	r3, r3
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d1a6      	bne.n	8006c64 <HAL_SPI_TransmitReceive+0x130>
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d1a:	b29b      	uxth	r3, r3
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d1a1      	bne.n	8006c64 <HAL_SPI_TransmitReceive+0x130>
 8006d20:	e07c      	b.n	8006e1c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	685b      	ldr	r3, [r3, #4]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d002      	beq.n	8006d30 <HAL_SPI_TransmitReceive+0x1fc>
 8006d2a:	8b7b      	ldrh	r3, [r7, #26]
 8006d2c:	2b01      	cmp	r3, #1
 8006d2e:	d16b      	bne.n	8006e08 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	330c      	adds	r3, #12
 8006d3a:	7812      	ldrb	r2, [r2, #0]
 8006d3c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d42:	1c5a      	adds	r2, r3, #1
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d4c:	b29b      	uxth	r3, r3
 8006d4e:	3b01      	subs	r3, #1
 8006d50:	b29a      	uxth	r2, r3
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006d56:	e057      	b.n	8006e08 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	689b      	ldr	r3, [r3, #8]
 8006d5e:	f003 0302 	and.w	r3, r3, #2
 8006d62:	2b02      	cmp	r3, #2
 8006d64:	d11c      	bne.n	8006da0 <HAL_SPI_TransmitReceive+0x26c>
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d6a:	b29b      	uxth	r3, r3
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d017      	beq.n	8006da0 <HAL_SPI_TransmitReceive+0x26c>
 8006d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d72:	2b01      	cmp	r3, #1
 8006d74:	d114      	bne.n	8006da0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	330c      	adds	r3, #12
 8006d80:	7812      	ldrb	r2, [r2, #0]
 8006d82:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d88:	1c5a      	adds	r2, r3, #1
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d92:	b29b      	uxth	r3, r3
 8006d94:	3b01      	subs	r3, #1
 8006d96:	b29a      	uxth	r2, r3
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	689b      	ldr	r3, [r3, #8]
 8006da6:	f003 0301 	and.w	r3, r3, #1
 8006daa:	2b01      	cmp	r3, #1
 8006dac:	d119      	bne.n	8006de2 <HAL_SPI_TransmitReceive+0x2ae>
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006db2:	b29b      	uxth	r3, r3
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d014      	beq.n	8006de2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	68da      	ldr	r2, [r3, #12]
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dc2:	b2d2      	uxtb	r2, r2
 8006dc4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dca:	1c5a      	adds	r2, r3, #1
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006dd4:	b29b      	uxth	r3, r3
 8006dd6:	3b01      	subs	r3, #1
 8006dd8:	b29a      	uxth	r2, r3
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006dde:	2301      	movs	r3, #1
 8006de0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006de2:	f7fa f917 	bl	8001014 <HAL_GetTick>
 8006de6:	4602      	mov	r2, r0
 8006de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dea:	1ad3      	subs	r3, r2, r3
 8006dec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006dee:	429a      	cmp	r2, r3
 8006df0:	d803      	bhi.n	8006dfa <HAL_SPI_TransmitReceive+0x2c6>
 8006df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006df8:	d102      	bne.n	8006e00 <HAL_SPI_TransmitReceive+0x2cc>
 8006dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d103      	bne.n	8006e08 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006e00:	2303      	movs	r3, #3
 8006e02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006e06:	e029      	b.n	8006e5c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e0c:	b29b      	uxth	r3, r3
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d1a2      	bne.n	8006d58 <HAL_SPI_TransmitReceive+0x224>
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e16:	b29b      	uxth	r3, r3
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d19d      	bne.n	8006d58 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006e1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e1e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006e20:	68f8      	ldr	r0, [r7, #12]
 8006e22:	f000 f893 	bl	8006f4c <SPI_EndRxTxTransaction>
 8006e26:	4603      	mov	r3, r0
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d006      	beq.n	8006e3a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	2220      	movs	r2, #32
 8006e36:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006e38:	e010      	b.n	8006e5c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	689b      	ldr	r3, [r3, #8]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d10b      	bne.n	8006e5a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006e42:	2300      	movs	r3, #0
 8006e44:	617b      	str	r3, [r7, #20]
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	68db      	ldr	r3, [r3, #12]
 8006e4c:	617b      	str	r3, [r7, #20]
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	689b      	ldr	r3, [r3, #8]
 8006e54:	617b      	str	r3, [r7, #20]
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	e000      	b.n	8006e5c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006e5a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	2201      	movs	r2, #1
 8006e60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	2200      	movs	r2, #0
 8006e68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006e6c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	3730      	adds	r7, #48	; 0x30
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bd80      	pop	{r7, pc}

08006e78 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b084      	sub	sp, #16
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	60f8      	str	r0, [r7, #12]
 8006e80:	60b9      	str	r1, [r7, #8]
 8006e82:	603b      	str	r3, [r7, #0]
 8006e84:	4613      	mov	r3, r2
 8006e86:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006e88:	e04c      	b.n	8006f24 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e90:	d048      	beq.n	8006f24 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006e92:	f7fa f8bf 	bl	8001014 <HAL_GetTick>
 8006e96:	4602      	mov	r2, r0
 8006e98:	69bb      	ldr	r3, [r7, #24]
 8006e9a:	1ad3      	subs	r3, r2, r3
 8006e9c:	683a      	ldr	r2, [r7, #0]
 8006e9e:	429a      	cmp	r2, r3
 8006ea0:	d902      	bls.n	8006ea8 <SPI_WaitFlagStateUntilTimeout+0x30>
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d13d      	bne.n	8006f24 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	685a      	ldr	r2, [r3, #4]
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006eb6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	685b      	ldr	r3, [r3, #4]
 8006ebc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ec0:	d111      	bne.n	8006ee6 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	689b      	ldr	r3, [r3, #8]
 8006ec6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006eca:	d004      	beq.n	8006ed6 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	689b      	ldr	r3, [r3, #8]
 8006ed0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ed4:	d107      	bne.n	8006ee6 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	681a      	ldr	r2, [r3, #0]
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ee4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006eee:	d10f      	bne.n	8006f10 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	681a      	ldr	r2, [r3, #0]
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006efe:	601a      	str	r2, [r3, #0]
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	681a      	ldr	r2, [r3, #0]
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006f0e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	2201      	movs	r2, #1
 8006f14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006f20:	2303      	movs	r3, #3
 8006f22:	e00f      	b.n	8006f44 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	689a      	ldr	r2, [r3, #8]
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	4013      	ands	r3, r2
 8006f2e:	68ba      	ldr	r2, [r7, #8]
 8006f30:	429a      	cmp	r2, r3
 8006f32:	bf0c      	ite	eq
 8006f34:	2301      	moveq	r3, #1
 8006f36:	2300      	movne	r3, #0
 8006f38:	b2db      	uxtb	r3, r3
 8006f3a:	461a      	mov	r2, r3
 8006f3c:	79fb      	ldrb	r3, [r7, #7]
 8006f3e:	429a      	cmp	r2, r3
 8006f40:	d1a3      	bne.n	8006e8a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8006f42:	2300      	movs	r3, #0
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	3710      	adds	r7, #16
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}

08006f4c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b088      	sub	sp, #32
 8006f50:	af02      	add	r7, sp, #8
 8006f52:	60f8      	str	r0, [r7, #12]
 8006f54:	60b9      	str	r1, [r7, #8]
 8006f56:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006f58:	4b1b      	ldr	r3, [pc, #108]	; (8006fc8 <SPI_EndRxTxTransaction+0x7c>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a1b      	ldr	r2, [pc, #108]	; (8006fcc <SPI_EndRxTxTransaction+0x80>)
 8006f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8006f62:	0d5b      	lsrs	r3, r3, #21
 8006f64:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006f68:	fb02 f303 	mul.w	r3, r2, r3
 8006f6c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	685b      	ldr	r3, [r3, #4]
 8006f72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f76:	d112      	bne.n	8006f9e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	9300      	str	r3, [sp, #0]
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	2180      	movs	r1, #128	; 0x80
 8006f82:	68f8      	ldr	r0, [r7, #12]
 8006f84:	f7ff ff78 	bl	8006e78 <SPI_WaitFlagStateUntilTimeout>
 8006f88:	4603      	mov	r3, r0
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d016      	beq.n	8006fbc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f92:	f043 0220 	orr.w	r2, r3, #32
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006f9a:	2303      	movs	r3, #3
 8006f9c:	e00f      	b.n	8006fbe <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006f9e:	697b      	ldr	r3, [r7, #20]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d00a      	beq.n	8006fba <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	3b01      	subs	r3, #1
 8006fa8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	689b      	ldr	r3, [r3, #8]
 8006fb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fb4:	2b80      	cmp	r3, #128	; 0x80
 8006fb6:	d0f2      	beq.n	8006f9e <SPI_EndRxTxTransaction+0x52>
 8006fb8:	e000      	b.n	8006fbc <SPI_EndRxTxTransaction+0x70>
        break;
 8006fba:	bf00      	nop
  }

  return HAL_OK;
 8006fbc:	2300      	movs	r3, #0
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3718      	adds	r7, #24
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}
 8006fc6:	bf00      	nop
 8006fc8:	200000d8 	.word	0x200000d8
 8006fcc:	165e9f81 	.word	0x165e9f81

08006fd0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b082      	sub	sp, #8
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d101      	bne.n	8006fe2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006fde:	2301      	movs	r3, #1
 8006fe0:	e01d      	b.n	800701e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fe8:	b2db      	uxtb	r3, r3
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d106      	bne.n	8006ffc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f000 f815 	bl	8007026 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2202      	movs	r2, #2
 8007000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681a      	ldr	r2, [r3, #0]
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	3304      	adds	r3, #4
 800700c:	4619      	mov	r1, r3
 800700e:	4610      	mov	r0, r2
 8007010:	f000 f968 	bl	80072e4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2201      	movs	r2, #1
 8007018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800701c:	2300      	movs	r3, #0
}
 800701e:	4618      	mov	r0, r3
 8007020:	3708      	adds	r7, #8
 8007022:	46bd      	mov	sp, r7
 8007024:	bd80      	pop	{r7, pc}

08007026 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007026:	b480      	push	{r7}
 8007028:	b083      	sub	sp, #12
 800702a:	af00      	add	r7, sp, #0
 800702c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800702e:	bf00      	nop
 8007030:	370c      	adds	r7, #12
 8007032:	46bd      	mov	sp, r7
 8007034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007038:	4770      	bx	lr

0800703a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800703a:	b480      	push	{r7}
 800703c:	b085      	sub	sp, #20
 800703e:	af00      	add	r7, sp, #0
 8007040:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	68da      	ldr	r2, [r3, #12]
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f042 0201 	orr.w	r2, r2, #1
 8007050:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	689b      	ldr	r3, [r3, #8]
 8007058:	f003 0307 	and.w	r3, r3, #7
 800705c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	2b06      	cmp	r3, #6
 8007062:	d007      	beq.n	8007074 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	681a      	ldr	r2, [r3, #0]
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f042 0201 	orr.w	r2, r2, #1
 8007072:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007074:	2300      	movs	r3, #0
}
 8007076:	4618      	mov	r0, r3
 8007078:	3714      	adds	r7, #20
 800707a:	46bd      	mov	sp, r7
 800707c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007080:	4770      	bx	lr

08007082 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007082:	b580      	push	{r7, lr}
 8007084:	b082      	sub	sp, #8
 8007086:	af00      	add	r7, sp, #0
 8007088:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	691b      	ldr	r3, [r3, #16]
 8007090:	f003 0302 	and.w	r3, r3, #2
 8007094:	2b02      	cmp	r3, #2
 8007096:	d122      	bne.n	80070de <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	68db      	ldr	r3, [r3, #12]
 800709e:	f003 0302 	and.w	r3, r3, #2
 80070a2:	2b02      	cmp	r3, #2
 80070a4:	d11b      	bne.n	80070de <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f06f 0202 	mvn.w	r2, #2
 80070ae:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2201      	movs	r2, #1
 80070b4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	699b      	ldr	r3, [r3, #24]
 80070bc:	f003 0303 	and.w	r3, r3, #3
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d003      	beq.n	80070cc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f000 f8ee 	bl	80072a6 <HAL_TIM_IC_CaptureCallback>
 80070ca:	e005      	b.n	80070d8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f000 f8e0 	bl	8007292 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f000 f8f1 	bl	80072ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2200      	movs	r2, #0
 80070dc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	691b      	ldr	r3, [r3, #16]
 80070e4:	f003 0304 	and.w	r3, r3, #4
 80070e8:	2b04      	cmp	r3, #4
 80070ea:	d122      	bne.n	8007132 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	68db      	ldr	r3, [r3, #12]
 80070f2:	f003 0304 	and.w	r3, r3, #4
 80070f6:	2b04      	cmp	r3, #4
 80070f8:	d11b      	bne.n	8007132 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f06f 0204 	mvn.w	r2, #4
 8007102:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2202      	movs	r2, #2
 8007108:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	699b      	ldr	r3, [r3, #24]
 8007110:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007114:	2b00      	cmp	r3, #0
 8007116:	d003      	beq.n	8007120 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	f000 f8c4 	bl	80072a6 <HAL_TIM_IC_CaptureCallback>
 800711e:	e005      	b.n	800712c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	f000 f8b6 	bl	8007292 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f000 f8c7 	bl	80072ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2200      	movs	r2, #0
 8007130:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	691b      	ldr	r3, [r3, #16]
 8007138:	f003 0308 	and.w	r3, r3, #8
 800713c:	2b08      	cmp	r3, #8
 800713e:	d122      	bne.n	8007186 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	68db      	ldr	r3, [r3, #12]
 8007146:	f003 0308 	and.w	r3, r3, #8
 800714a:	2b08      	cmp	r3, #8
 800714c:	d11b      	bne.n	8007186 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f06f 0208 	mvn.w	r2, #8
 8007156:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2204      	movs	r2, #4
 800715c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	69db      	ldr	r3, [r3, #28]
 8007164:	f003 0303 	and.w	r3, r3, #3
 8007168:	2b00      	cmp	r3, #0
 800716a:	d003      	beq.n	8007174 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f000 f89a 	bl	80072a6 <HAL_TIM_IC_CaptureCallback>
 8007172:	e005      	b.n	8007180 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	f000 f88c 	bl	8007292 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f000 f89d 	bl	80072ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2200      	movs	r2, #0
 8007184:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	691b      	ldr	r3, [r3, #16]
 800718c:	f003 0310 	and.w	r3, r3, #16
 8007190:	2b10      	cmp	r3, #16
 8007192:	d122      	bne.n	80071da <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	68db      	ldr	r3, [r3, #12]
 800719a:	f003 0310 	and.w	r3, r3, #16
 800719e:	2b10      	cmp	r3, #16
 80071a0:	d11b      	bne.n	80071da <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f06f 0210 	mvn.w	r2, #16
 80071aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2208      	movs	r2, #8
 80071b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	69db      	ldr	r3, [r3, #28]
 80071b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d003      	beq.n	80071c8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f000 f870 	bl	80072a6 <HAL_TIM_IC_CaptureCallback>
 80071c6:	e005      	b.n	80071d4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f000 f862 	bl	8007292 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f000 f873 	bl	80072ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2200      	movs	r2, #0
 80071d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	691b      	ldr	r3, [r3, #16]
 80071e0:	f003 0301 	and.w	r3, r3, #1
 80071e4:	2b01      	cmp	r3, #1
 80071e6:	d10e      	bne.n	8007206 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	68db      	ldr	r3, [r3, #12]
 80071ee:	f003 0301 	and.w	r3, r3, #1
 80071f2:	2b01      	cmp	r3, #1
 80071f4:	d107      	bne.n	8007206 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f06f 0201 	mvn.w	r2, #1
 80071fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f00c fd03 	bl	8013c0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	691b      	ldr	r3, [r3, #16]
 800720c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007210:	2b80      	cmp	r3, #128	; 0x80
 8007212:	d10e      	bne.n	8007232 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	68db      	ldr	r3, [r3, #12]
 800721a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800721e:	2b80      	cmp	r3, #128	; 0x80
 8007220:	d107      	bne.n	8007232 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800722a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800722c:	6878      	ldr	r0, [r7, #4]
 800722e:	f000 f903 	bl	8007438 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	691b      	ldr	r3, [r3, #16]
 8007238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800723c:	2b40      	cmp	r3, #64	; 0x40
 800723e:	d10e      	bne.n	800725e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	68db      	ldr	r3, [r3, #12]
 8007246:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800724a:	2b40      	cmp	r3, #64	; 0x40
 800724c:	d107      	bne.n	800725e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007256:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f000 f838 	bl	80072ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	691b      	ldr	r3, [r3, #16]
 8007264:	f003 0320 	and.w	r3, r3, #32
 8007268:	2b20      	cmp	r3, #32
 800726a:	d10e      	bne.n	800728a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	68db      	ldr	r3, [r3, #12]
 8007272:	f003 0320 	and.w	r3, r3, #32
 8007276:	2b20      	cmp	r3, #32
 8007278:	d107      	bne.n	800728a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f06f 0220 	mvn.w	r2, #32
 8007282:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007284:	6878      	ldr	r0, [r7, #4]
 8007286:	f000 f8cd 	bl	8007424 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800728a:	bf00      	nop
 800728c:	3708      	adds	r7, #8
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}

08007292 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007292:	b480      	push	{r7}
 8007294:	b083      	sub	sp, #12
 8007296:	af00      	add	r7, sp, #0
 8007298:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800729a:	bf00      	nop
 800729c:	370c      	adds	r7, #12
 800729e:	46bd      	mov	sp, r7
 80072a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a4:	4770      	bx	lr

080072a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80072a6:	b480      	push	{r7}
 80072a8:	b083      	sub	sp, #12
 80072aa:	af00      	add	r7, sp, #0
 80072ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80072ae:	bf00      	nop
 80072b0:	370c      	adds	r7, #12
 80072b2:	46bd      	mov	sp, r7
 80072b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b8:	4770      	bx	lr

080072ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80072ba:	b480      	push	{r7}
 80072bc:	b083      	sub	sp, #12
 80072be:	af00      	add	r7, sp, #0
 80072c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80072c2:	bf00      	nop
 80072c4:	370c      	adds	r7, #12
 80072c6:	46bd      	mov	sp, r7
 80072c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072cc:	4770      	bx	lr

080072ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80072ce:	b480      	push	{r7}
 80072d0:	b083      	sub	sp, #12
 80072d2:	af00      	add	r7, sp, #0
 80072d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80072d6:	bf00      	nop
 80072d8:	370c      	adds	r7, #12
 80072da:	46bd      	mov	sp, r7
 80072dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e0:	4770      	bx	lr
	...

080072e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b085      	sub	sp, #20
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
 80072ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	4a40      	ldr	r2, [pc, #256]	; (80073f8 <TIM_Base_SetConfig+0x114>)
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d013      	beq.n	8007324 <TIM_Base_SetConfig+0x40>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007302:	d00f      	beq.n	8007324 <TIM_Base_SetConfig+0x40>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	4a3d      	ldr	r2, [pc, #244]	; (80073fc <TIM_Base_SetConfig+0x118>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d00b      	beq.n	8007324 <TIM_Base_SetConfig+0x40>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	4a3c      	ldr	r2, [pc, #240]	; (8007400 <TIM_Base_SetConfig+0x11c>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d007      	beq.n	8007324 <TIM_Base_SetConfig+0x40>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	4a3b      	ldr	r2, [pc, #236]	; (8007404 <TIM_Base_SetConfig+0x120>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d003      	beq.n	8007324 <TIM_Base_SetConfig+0x40>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	4a3a      	ldr	r2, [pc, #232]	; (8007408 <TIM_Base_SetConfig+0x124>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d108      	bne.n	8007336 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800732a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	685b      	ldr	r3, [r3, #4]
 8007330:	68fa      	ldr	r2, [r7, #12]
 8007332:	4313      	orrs	r3, r2
 8007334:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	4a2f      	ldr	r2, [pc, #188]	; (80073f8 <TIM_Base_SetConfig+0x114>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d02b      	beq.n	8007396 <TIM_Base_SetConfig+0xb2>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007344:	d027      	beq.n	8007396 <TIM_Base_SetConfig+0xb2>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	4a2c      	ldr	r2, [pc, #176]	; (80073fc <TIM_Base_SetConfig+0x118>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d023      	beq.n	8007396 <TIM_Base_SetConfig+0xb2>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	4a2b      	ldr	r2, [pc, #172]	; (8007400 <TIM_Base_SetConfig+0x11c>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d01f      	beq.n	8007396 <TIM_Base_SetConfig+0xb2>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	4a2a      	ldr	r2, [pc, #168]	; (8007404 <TIM_Base_SetConfig+0x120>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d01b      	beq.n	8007396 <TIM_Base_SetConfig+0xb2>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	4a29      	ldr	r2, [pc, #164]	; (8007408 <TIM_Base_SetConfig+0x124>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d017      	beq.n	8007396 <TIM_Base_SetConfig+0xb2>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	4a28      	ldr	r2, [pc, #160]	; (800740c <TIM_Base_SetConfig+0x128>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d013      	beq.n	8007396 <TIM_Base_SetConfig+0xb2>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	4a27      	ldr	r2, [pc, #156]	; (8007410 <TIM_Base_SetConfig+0x12c>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d00f      	beq.n	8007396 <TIM_Base_SetConfig+0xb2>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	4a26      	ldr	r2, [pc, #152]	; (8007414 <TIM_Base_SetConfig+0x130>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d00b      	beq.n	8007396 <TIM_Base_SetConfig+0xb2>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	4a25      	ldr	r2, [pc, #148]	; (8007418 <TIM_Base_SetConfig+0x134>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d007      	beq.n	8007396 <TIM_Base_SetConfig+0xb2>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	4a24      	ldr	r2, [pc, #144]	; (800741c <TIM_Base_SetConfig+0x138>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d003      	beq.n	8007396 <TIM_Base_SetConfig+0xb2>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	4a23      	ldr	r2, [pc, #140]	; (8007420 <TIM_Base_SetConfig+0x13c>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d108      	bne.n	80073a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800739c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	68db      	ldr	r3, [r3, #12]
 80073a2:	68fa      	ldr	r2, [r7, #12]
 80073a4:	4313      	orrs	r3, r2
 80073a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	695b      	ldr	r3, [r3, #20]
 80073b2:	4313      	orrs	r3, r2
 80073b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	68fa      	ldr	r2, [r7, #12]
 80073ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	689a      	ldr	r2, [r3, #8]
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	681a      	ldr	r2, [r3, #0]
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	4a0a      	ldr	r2, [pc, #40]	; (80073f8 <TIM_Base_SetConfig+0x114>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d003      	beq.n	80073dc <TIM_Base_SetConfig+0xf8>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	4a0c      	ldr	r2, [pc, #48]	; (8007408 <TIM_Base_SetConfig+0x124>)
 80073d8:	4293      	cmp	r3, r2
 80073da:	d103      	bne.n	80073e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	691a      	ldr	r2, [r3, #16]
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2201      	movs	r2, #1
 80073e8:	615a      	str	r2, [r3, #20]
}
 80073ea:	bf00      	nop
 80073ec:	3714      	adds	r7, #20
 80073ee:	46bd      	mov	sp, r7
 80073f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f4:	4770      	bx	lr
 80073f6:	bf00      	nop
 80073f8:	40010000 	.word	0x40010000
 80073fc:	40000400 	.word	0x40000400
 8007400:	40000800 	.word	0x40000800
 8007404:	40000c00 	.word	0x40000c00
 8007408:	40010400 	.word	0x40010400
 800740c:	40014000 	.word	0x40014000
 8007410:	40014400 	.word	0x40014400
 8007414:	40014800 	.word	0x40014800
 8007418:	40001800 	.word	0x40001800
 800741c:	40001c00 	.word	0x40001c00
 8007420:	40002000 	.word	0x40002000

08007424 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007424:	b480      	push	{r7}
 8007426:	b083      	sub	sp, #12
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800742c:	bf00      	nop
 800742e:	370c      	adds	r7, #12
 8007430:	46bd      	mov	sp, r7
 8007432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007436:	4770      	bx	lr

08007438 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007438:	b480      	push	{r7}
 800743a:	b083      	sub	sp, #12
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007440:	bf00      	nop
 8007442:	370c      	adds	r7, #12
 8007444:	46bd      	mov	sp, r7
 8007446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744a:	4770      	bx	lr

0800744c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b082      	sub	sp, #8
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d101      	bne.n	800745e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800745a:	2301      	movs	r3, #1
 800745c:	e03f      	b.n	80074de <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007464:	b2db      	uxtb	r3, r3
 8007466:	2b00      	cmp	r3, #0
 8007468:	d106      	bne.n	8007478 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2200      	movs	r2, #0
 800746e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f00d facc 	bl	8014a10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2224      	movs	r2, #36	; 0x24
 800747c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	68da      	ldr	r2, [r3, #12]
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800748e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	f000 fc73 	bl	8007d7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	691a      	ldr	r2, [r3, #16]
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80074a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	695a      	ldr	r2, [r3, #20]
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80074b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	68da      	ldr	r2, [r3, #12]
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80074c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2200      	movs	r2, #0
 80074ca:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2220      	movs	r2, #32
 80074d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2220      	movs	r2, #32
 80074d8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80074dc:	2300      	movs	r3, #0
}
 80074de:	4618      	mov	r0, r3
 80074e0:	3708      	adds	r7, #8
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}

080074e6 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80074e6:	b580      	push	{r7, lr}
 80074e8:	b088      	sub	sp, #32
 80074ea:	af02      	add	r7, sp, #8
 80074ec:	60f8      	str	r0, [r7, #12]
 80074ee:	60b9      	str	r1, [r7, #8]
 80074f0:	603b      	str	r3, [r7, #0]
 80074f2:	4613      	mov	r3, r2
 80074f4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80074f6:	2300      	movs	r3, #0
 80074f8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007500:	b2db      	uxtb	r3, r3
 8007502:	2b20      	cmp	r3, #32
 8007504:	f040 8083 	bne.w	800760e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d002      	beq.n	8007514 <HAL_UART_Transmit+0x2e>
 800750e:	88fb      	ldrh	r3, [r7, #6]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d101      	bne.n	8007518 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8007514:	2301      	movs	r3, #1
 8007516:	e07b      	b.n	8007610 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800751e:	2b01      	cmp	r3, #1
 8007520:	d101      	bne.n	8007526 <HAL_UART_Transmit+0x40>
 8007522:	2302      	movs	r3, #2
 8007524:	e074      	b.n	8007610 <HAL_UART_Transmit+0x12a>
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	2201      	movs	r2, #1
 800752a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2200      	movs	r2, #0
 8007532:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	2221      	movs	r2, #33	; 0x21
 8007538:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800753c:	f7f9 fd6a 	bl	8001014 <HAL_GetTick>
 8007540:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	88fa      	ldrh	r2, [r7, #6]
 8007546:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	88fa      	ldrh	r2, [r7, #6]
 800754c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800754e:	e042      	b.n	80075d6 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007554:	b29b      	uxth	r3, r3
 8007556:	3b01      	subs	r3, #1
 8007558:	b29a      	uxth	r2, r3
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	689b      	ldr	r3, [r3, #8]
 8007562:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007566:	d122      	bne.n	80075ae <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	9300      	str	r3, [sp, #0]
 800756c:	697b      	ldr	r3, [r7, #20]
 800756e:	2200      	movs	r2, #0
 8007570:	2180      	movs	r1, #128	; 0x80
 8007572:	68f8      	ldr	r0, [r7, #12]
 8007574:	f000 fa80 	bl	8007a78 <UART_WaitOnFlagUntilTimeout>
 8007578:	4603      	mov	r3, r0
 800757a:	2b00      	cmp	r3, #0
 800757c:	d001      	beq.n	8007582 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 800757e:	2303      	movs	r3, #3
 8007580:	e046      	b.n	8007610 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8007586:	693b      	ldr	r3, [r7, #16]
 8007588:	881b      	ldrh	r3, [r3, #0]
 800758a:	461a      	mov	r2, r3
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007594:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	691b      	ldr	r3, [r3, #16]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d103      	bne.n	80075a6 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	3302      	adds	r3, #2
 80075a2:	60bb      	str	r3, [r7, #8]
 80075a4:	e017      	b.n	80075d6 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	3301      	adds	r3, #1
 80075aa:	60bb      	str	r3, [r7, #8]
 80075ac:	e013      	b.n	80075d6 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	9300      	str	r3, [sp, #0]
 80075b2:	697b      	ldr	r3, [r7, #20]
 80075b4:	2200      	movs	r2, #0
 80075b6:	2180      	movs	r1, #128	; 0x80
 80075b8:	68f8      	ldr	r0, [r7, #12]
 80075ba:	f000 fa5d 	bl	8007a78 <UART_WaitOnFlagUntilTimeout>
 80075be:	4603      	mov	r3, r0
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d001      	beq.n	80075c8 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 80075c4:	2303      	movs	r3, #3
 80075c6:	e023      	b.n	8007610 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	1c5a      	adds	r2, r3, #1
 80075cc:	60ba      	str	r2, [r7, #8]
 80075ce:	781a      	ldrb	r2, [r3, #0]
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80075da:	b29b      	uxth	r3, r3
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d1b7      	bne.n	8007550 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	9300      	str	r3, [sp, #0]
 80075e4:	697b      	ldr	r3, [r7, #20]
 80075e6:	2200      	movs	r2, #0
 80075e8:	2140      	movs	r1, #64	; 0x40
 80075ea:	68f8      	ldr	r0, [r7, #12]
 80075ec:	f000 fa44 	bl	8007a78 <UART_WaitOnFlagUntilTimeout>
 80075f0:	4603      	mov	r3, r0
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d001      	beq.n	80075fa <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80075f6:	2303      	movs	r3, #3
 80075f8:	e00a      	b.n	8007610 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	2220      	movs	r2, #32
 80075fe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	2200      	movs	r2, #0
 8007606:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800760a:	2300      	movs	r3, #0
 800760c:	e000      	b.n	8007610 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800760e:	2302      	movs	r3, #2
  }
}
 8007610:	4618      	mov	r0, r3
 8007612:	3718      	adds	r7, #24
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}

08007618 <HAL_UART_Receive_DMA>:
  * @param  Size Amount of data to be received
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b086      	sub	sp, #24
 800761c:	af00      	add	r7, sp, #0
 800761e:	60f8      	str	r0, [r7, #12]
 8007620:	60b9      	str	r1, [r7, #8]
 8007622:	4613      	mov	r3, r2
 8007624:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800762c:	b2db      	uxtb	r3, r3
 800762e:	2b20      	cmp	r3, #32
 8007630:	d166      	bne.n	8007700 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d002      	beq.n	800763e <HAL_UART_Receive_DMA+0x26>
 8007638:	88fb      	ldrh	r3, [r7, #6]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d101      	bne.n	8007642 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800763e:	2301      	movs	r3, #1
 8007640:	e05f      	b.n	8007702 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007648:	2b01      	cmp	r3, #1
 800764a:	d101      	bne.n	8007650 <HAL_UART_Receive_DMA+0x38>
 800764c:	2302      	movs	r3, #2
 800764e:	e058      	b.n	8007702 <HAL_UART_Receive_DMA+0xea>
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	2201      	movs	r2, #1
 8007654:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8007658:	68ba      	ldr	r2, [r7, #8]
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	88fa      	ldrh	r2, [r7, #6]
 8007662:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	2200      	movs	r2, #0
 8007668:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	2222      	movs	r2, #34	; 0x22
 800766e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007676:	4a25      	ldr	r2, [pc, #148]	; (800770c <HAL_UART_Receive_DMA+0xf4>)
 8007678:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800767e:	4a24      	ldr	r2, [pc, #144]	; (8007710 <HAL_UART_Receive_DMA+0xf8>)
 8007680:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007686:	4a23      	ldr	r2, [pc, #140]	; (8007714 <HAL_UART_Receive_DMA+0xfc>)
 8007688:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800768e:	2200      	movs	r2, #0
 8007690:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8007692:	f107 0308 	add.w	r3, r7, #8
 8007696:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	3304      	adds	r3, #4
 80076a2:	4619      	mov	r1, r3
 80076a4:	697b      	ldr	r3, [r7, #20]
 80076a6:	681a      	ldr	r2, [r3, #0]
 80076a8:	88fb      	ldrh	r3, [r7, #6]
 80076aa:	f7fa fd2d 	bl	8002108 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 80076ae:	2300      	movs	r3, #0
 80076b0:	613b      	str	r3, [r7, #16]
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	613b      	str	r3, [r7, #16]
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	685b      	ldr	r3, [r3, #4]
 80076c0:	613b      	str	r3, [r7, #16]
 80076c2:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	2200      	movs	r2, #0
 80076c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	68da      	ldr	r2, [r3, #12]
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80076da:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	695a      	ldr	r2, [r3, #20]
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f042 0201 	orr.w	r2, r2, #1
 80076ea:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	695a      	ldr	r2, [r3, #20]
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80076fa:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80076fc:	2300      	movs	r3, #0
 80076fe:	e000      	b.n	8007702 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8007700:	2302      	movs	r3, #2
  }
}
 8007702:	4618      	mov	r0, r3
 8007704:	3718      	adds	r7, #24
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}
 800770a:	bf00      	nop
 800770c:	08007961 	.word	0x08007961
 8007710:	080079c9 	.word	0x080079c9
 8007714:	080079e5 	.word	0x080079e5

08007718 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b088      	sub	sp, #32
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	68db      	ldr	r3, [r3, #12]
 800772e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	695b      	ldr	r3, [r3, #20]
 8007736:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8007738:	2300      	movs	r3, #0
 800773a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800773c:	2300      	movs	r3, #0
 800773e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007740:	69fb      	ldr	r3, [r7, #28]
 8007742:	f003 030f 	and.w	r3, r3, #15
 8007746:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8007748:	693b      	ldr	r3, [r7, #16]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d10d      	bne.n	800776a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800774e:	69fb      	ldr	r3, [r7, #28]
 8007750:	f003 0320 	and.w	r3, r3, #32
 8007754:	2b00      	cmp	r3, #0
 8007756:	d008      	beq.n	800776a <HAL_UART_IRQHandler+0x52>
 8007758:	69bb      	ldr	r3, [r7, #24]
 800775a:	f003 0320 	and.w	r3, r3, #32
 800775e:	2b00      	cmp	r3, #0
 8007760:	d003      	beq.n	800776a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f000 fa88 	bl	8007c78 <UART_Receive_IT>
      return;
 8007768:	e0cc      	b.n	8007904 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800776a:	693b      	ldr	r3, [r7, #16]
 800776c:	2b00      	cmp	r3, #0
 800776e:	f000 80ab 	beq.w	80078c8 <HAL_UART_IRQHandler+0x1b0>
 8007772:	697b      	ldr	r3, [r7, #20]
 8007774:	f003 0301 	and.w	r3, r3, #1
 8007778:	2b00      	cmp	r3, #0
 800777a:	d105      	bne.n	8007788 <HAL_UART_IRQHandler+0x70>
 800777c:	69bb      	ldr	r3, [r7, #24]
 800777e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007782:	2b00      	cmp	r3, #0
 8007784:	f000 80a0 	beq.w	80078c8 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007788:	69fb      	ldr	r3, [r7, #28]
 800778a:	f003 0301 	and.w	r3, r3, #1
 800778e:	2b00      	cmp	r3, #0
 8007790:	d00a      	beq.n	80077a8 <HAL_UART_IRQHandler+0x90>
 8007792:	69bb      	ldr	r3, [r7, #24]
 8007794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007798:	2b00      	cmp	r3, #0
 800779a:	d005      	beq.n	80077a8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077a0:	f043 0201 	orr.w	r2, r3, #1
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80077a8:	69fb      	ldr	r3, [r7, #28]
 80077aa:	f003 0304 	and.w	r3, r3, #4
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d00a      	beq.n	80077c8 <HAL_UART_IRQHandler+0xb0>
 80077b2:	697b      	ldr	r3, [r7, #20]
 80077b4:	f003 0301 	and.w	r3, r3, #1
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d005      	beq.n	80077c8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077c0:	f043 0202 	orr.w	r2, r3, #2
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80077c8:	69fb      	ldr	r3, [r7, #28]
 80077ca:	f003 0302 	and.w	r3, r3, #2
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d00a      	beq.n	80077e8 <HAL_UART_IRQHandler+0xd0>
 80077d2:	697b      	ldr	r3, [r7, #20]
 80077d4:	f003 0301 	and.w	r3, r3, #1
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d005      	beq.n	80077e8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077e0:	f043 0204 	orr.w	r2, r3, #4
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80077e8:	69fb      	ldr	r3, [r7, #28]
 80077ea:	f003 0308 	and.w	r3, r3, #8
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d00a      	beq.n	8007808 <HAL_UART_IRQHandler+0xf0>
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	f003 0301 	and.w	r3, r3, #1
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d005      	beq.n	8007808 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007800:	f043 0208 	orr.w	r2, r3, #8
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800780c:	2b00      	cmp	r3, #0
 800780e:	d078      	beq.n	8007902 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007810:	69fb      	ldr	r3, [r7, #28]
 8007812:	f003 0320 	and.w	r3, r3, #32
 8007816:	2b00      	cmp	r3, #0
 8007818:	d007      	beq.n	800782a <HAL_UART_IRQHandler+0x112>
 800781a:	69bb      	ldr	r3, [r7, #24]
 800781c:	f003 0320 	and.w	r3, r3, #32
 8007820:	2b00      	cmp	r3, #0
 8007822:	d002      	beq.n	800782a <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f000 fa27 	bl	8007c78 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	695b      	ldr	r3, [r3, #20]
 8007830:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007834:	2b40      	cmp	r3, #64	; 0x40
 8007836:	bf0c      	ite	eq
 8007838:	2301      	moveq	r3, #1
 800783a:	2300      	movne	r3, #0
 800783c:	b2db      	uxtb	r3, r3
 800783e:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007844:	f003 0308 	and.w	r3, r3, #8
 8007848:	2b00      	cmp	r3, #0
 800784a:	d102      	bne.n	8007852 <HAL_UART_IRQHandler+0x13a>
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d031      	beq.n	80078b6 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f000 f970 	bl	8007b38 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	695b      	ldr	r3, [r3, #20]
 800785e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007862:	2b40      	cmp	r3, #64	; 0x40
 8007864:	d123      	bne.n	80078ae <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	695a      	ldr	r2, [r3, #20]
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007874:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800787a:	2b00      	cmp	r3, #0
 800787c:	d013      	beq.n	80078a6 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007882:	4a22      	ldr	r2, [pc, #136]	; (800790c <HAL_UART_IRQHandler+0x1f4>)
 8007884:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800788a:	4618      	mov	r0, r3
 800788c:	f7fa fc9c 	bl	80021c8 <HAL_DMA_Abort_IT>
 8007890:	4603      	mov	r3, r0
 8007892:	2b00      	cmp	r3, #0
 8007894:	d016      	beq.n	80078c4 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800789a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800789c:	687a      	ldr	r2, [r7, #4]
 800789e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80078a0:	4610      	mov	r0, r2
 80078a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078a4:	e00e      	b.n	80078c4 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f000 f850 	bl	800794c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078ac:	e00a      	b.n	80078c4 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f000 f84c 	bl	800794c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078b4:	e006      	b.n	80078c4 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f000 f848 	bl	800794c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2200      	movs	r2, #0
 80078c0:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80078c2:	e01e      	b.n	8007902 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078c4:	bf00      	nop
    return;
 80078c6:	e01c      	b.n	8007902 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80078c8:	69fb      	ldr	r3, [r7, #28]
 80078ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d008      	beq.n	80078e4 <HAL_UART_IRQHandler+0x1cc>
 80078d2:	69bb      	ldr	r3, [r7, #24]
 80078d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d003      	beq.n	80078e4 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f000 f95d 	bl	8007b9c <UART_Transmit_IT>
    return;
 80078e2:	e00f      	b.n	8007904 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80078e4:	69fb      	ldr	r3, [r7, #28]
 80078e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d00a      	beq.n	8007904 <HAL_UART_IRQHandler+0x1ec>
 80078ee:	69bb      	ldr	r3, [r7, #24]
 80078f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d005      	beq.n	8007904 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f000 f9a5 	bl	8007c48 <UART_EndTransmit_IT>
    return;
 80078fe:	bf00      	nop
 8007900:	e000      	b.n	8007904 <HAL_UART_IRQHandler+0x1ec>
    return;
 8007902:	bf00      	nop
  }
}
 8007904:	3720      	adds	r7, #32
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}
 800790a:	bf00      	nop
 800790c:	08007b75 	.word	0x08007b75

08007910 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007910:	b480      	push	{r7}
 8007912:	b083      	sub	sp, #12
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007918:	bf00      	nop
 800791a:	370c      	adds	r7, #12
 800791c:	46bd      	mov	sp, r7
 800791e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007922:	4770      	bx	lr

08007924 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007924:	b480      	push	{r7}
 8007926:	b083      	sub	sp, #12
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800792c:	bf00      	nop
 800792e:	370c      	adds	r7, #12
 8007930:	46bd      	mov	sp, r7
 8007932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007936:	4770      	bx	lr

08007938 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007938:	b480      	push	{r7}
 800793a:	b083      	sub	sp, #12
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007940:	bf00      	nop
 8007942:	370c      	adds	r7, #12
 8007944:	46bd      	mov	sp, r7
 8007946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794a:	4770      	bx	lr

0800794c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800794c:	b480      	push	{r7}
 800794e:	b083      	sub	sp, #12
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007954:	bf00      	nop
 8007956:	370c      	adds	r7, #12
 8007958:	46bd      	mov	sp, r7
 800795a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795e:	4770      	bx	lr

08007960 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b084      	sub	sp, #16
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800796c:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007978:	2b00      	cmp	r3, #0
 800797a:	d11e      	bne.n	80079ba <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	2200      	movs	r2, #0
 8007980:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	68da      	ldr	r2, [r3, #12]
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007990:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	695a      	ldr	r2, [r3, #20]
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f022 0201 	bic.w	r2, r2, #1
 80079a0:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	695a      	ldr	r2, [r3, #20]
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80079b0:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	2220      	movs	r2, #32
 80079b6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80079ba:	68f8      	ldr	r0, [r7, #12]
 80079bc:	f7ff ffb2 	bl	8007924 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80079c0:	bf00      	nop
 80079c2:	3710      	adds	r7, #16
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bd80      	pop	{r7, pc}

080079c8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b084      	sub	sp, #16
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079d4:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80079d6:	68f8      	ldr	r0, [r7, #12]
 80079d8:	f7ff ffae 	bl	8007938 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80079dc:	bf00      	nop
 80079de:	3710      	adds	r7, #16
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bd80      	pop	{r7, pc}

080079e4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b084      	sub	sp, #16
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80079ec:	2300      	movs	r3, #0
 80079ee:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079f4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	695b      	ldr	r3, [r3, #20]
 80079fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a00:	2b80      	cmp	r3, #128	; 0x80
 8007a02:	bf0c      	ite	eq
 8007a04:	2301      	moveq	r3, #1
 8007a06:	2300      	movne	r3, #0
 8007a08:	b2db      	uxtb	r3, r3
 8007a0a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007a12:	b2db      	uxtb	r3, r3
 8007a14:	2b21      	cmp	r3, #33	; 0x21
 8007a16:	d108      	bne.n	8007a2a <UART_DMAError+0x46>
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d005      	beq.n	8007a2a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	2200      	movs	r2, #0
 8007a22:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007a24:	68b8      	ldr	r0, [r7, #8]
 8007a26:	f000 f871 	bl	8007b0c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007a2a:	68bb      	ldr	r3, [r7, #8]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	695b      	ldr	r3, [r3, #20]
 8007a30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a34:	2b40      	cmp	r3, #64	; 0x40
 8007a36:	bf0c      	ite	eq
 8007a38:	2301      	moveq	r3, #1
 8007a3a:	2300      	movne	r3, #0
 8007a3c:	b2db      	uxtb	r3, r3
 8007a3e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007a40:	68bb      	ldr	r3, [r7, #8]
 8007a42:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007a46:	b2db      	uxtb	r3, r3
 8007a48:	2b22      	cmp	r3, #34	; 0x22
 8007a4a:	d108      	bne.n	8007a5e <UART_DMAError+0x7a>
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d005      	beq.n	8007a5e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	2200      	movs	r2, #0
 8007a56:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007a58:	68b8      	ldr	r0, [r7, #8]
 8007a5a:	f000 f86d 	bl	8007b38 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007a5e:	68bb      	ldr	r3, [r7, #8]
 8007a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a62:	f043 0210 	orr.w	r2, r3, #16
 8007a66:	68bb      	ldr	r3, [r7, #8]
 8007a68:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007a6a:	68b8      	ldr	r0, [r7, #8]
 8007a6c:	f7ff ff6e 	bl	800794c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a70:	bf00      	nop
 8007a72:	3710      	adds	r7, #16
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd80      	pop	{r7, pc}

08007a78 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b084      	sub	sp, #16
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	60f8      	str	r0, [r7, #12]
 8007a80:	60b9      	str	r1, [r7, #8]
 8007a82:	603b      	str	r3, [r7, #0]
 8007a84:	4613      	mov	r3, r2
 8007a86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a88:	e02c      	b.n	8007ae4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a8a:	69bb      	ldr	r3, [r7, #24]
 8007a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a90:	d028      	beq.n	8007ae4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007a92:	69bb      	ldr	r3, [r7, #24]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d007      	beq.n	8007aa8 <UART_WaitOnFlagUntilTimeout+0x30>
 8007a98:	f7f9 fabc 	bl	8001014 <HAL_GetTick>
 8007a9c:	4602      	mov	r2, r0
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	1ad3      	subs	r3, r2, r3
 8007aa2:	69ba      	ldr	r2, [r7, #24]
 8007aa4:	429a      	cmp	r2, r3
 8007aa6:	d21d      	bcs.n	8007ae4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	68da      	ldr	r2, [r3, #12]
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007ab6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	695a      	ldr	r2, [r3, #20]
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f022 0201 	bic.w	r2, r2, #1
 8007ac6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	2220      	movs	r2, #32
 8007acc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	2220      	movs	r2, #32
 8007ad4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	2200      	movs	r2, #0
 8007adc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8007ae0:	2303      	movs	r3, #3
 8007ae2:	e00f      	b.n	8007b04 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	681a      	ldr	r2, [r3, #0]
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	4013      	ands	r3, r2
 8007aee:	68ba      	ldr	r2, [r7, #8]
 8007af0:	429a      	cmp	r2, r3
 8007af2:	bf0c      	ite	eq
 8007af4:	2301      	moveq	r3, #1
 8007af6:	2300      	movne	r3, #0
 8007af8:	b2db      	uxtb	r3, r3
 8007afa:	461a      	mov	r2, r3
 8007afc:	79fb      	ldrb	r3, [r7, #7]
 8007afe:	429a      	cmp	r2, r3
 8007b00:	d0c3      	beq.n	8007a8a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007b02:	2300      	movs	r3, #0
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	3710      	adds	r7, #16
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd80      	pop	{r7, pc}

08007b0c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	b083      	sub	sp, #12
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	68da      	ldr	r2, [r3, #12]
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8007b22:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2220      	movs	r2, #32
 8007b28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8007b2c:	bf00      	nop
 8007b2e:	370c      	adds	r7, #12
 8007b30:	46bd      	mov	sp, r7
 8007b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b36:	4770      	bx	lr

08007b38 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007b38:	b480      	push	{r7}
 8007b3a:	b083      	sub	sp, #12
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	68da      	ldr	r2, [r3, #12]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007b4e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	695a      	ldr	r2, [r3, #20]
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f022 0201 	bic.w	r2, r2, #1
 8007b5e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2220      	movs	r2, #32
 8007b64:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8007b68:	bf00      	nop
 8007b6a:	370c      	adds	r7, #12
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b72:	4770      	bx	lr

08007b74 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b084      	sub	sp, #16
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b80:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	2200      	movs	r2, #0
 8007b86:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007b8e:	68f8      	ldr	r0, [r7, #12]
 8007b90:	f7ff fedc 	bl	800794c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b94:	bf00      	nop
 8007b96:	3710      	adds	r7, #16
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	bd80      	pop	{r7, pc}

08007b9c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	b085      	sub	sp, #20
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007baa:	b2db      	uxtb	r3, r3
 8007bac:	2b21      	cmp	r3, #33	; 0x21
 8007bae:	d144      	bne.n	8007c3a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	689b      	ldr	r3, [r3, #8]
 8007bb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bb8:	d11a      	bne.n	8007bf0 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6a1b      	ldr	r3, [r3, #32]
 8007bbe:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	881b      	ldrh	r3, [r3, #0]
 8007bc4:	461a      	mov	r2, r3
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007bce:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	691b      	ldr	r3, [r3, #16]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d105      	bne.n	8007be4 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6a1b      	ldr	r3, [r3, #32]
 8007bdc:	1c9a      	adds	r2, r3, #2
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	621a      	str	r2, [r3, #32]
 8007be2:	e00e      	b.n	8007c02 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6a1b      	ldr	r3, [r3, #32]
 8007be8:	1c5a      	adds	r2, r3, #1
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	621a      	str	r2, [r3, #32]
 8007bee:	e008      	b.n	8007c02 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6a1b      	ldr	r3, [r3, #32]
 8007bf4:	1c59      	adds	r1, r3, #1
 8007bf6:	687a      	ldr	r2, [r7, #4]
 8007bf8:	6211      	str	r1, [r2, #32]
 8007bfa:	781a      	ldrb	r2, [r3, #0]
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007c06:	b29b      	uxth	r3, r3
 8007c08:	3b01      	subs	r3, #1
 8007c0a:	b29b      	uxth	r3, r3
 8007c0c:	687a      	ldr	r2, [r7, #4]
 8007c0e:	4619      	mov	r1, r3
 8007c10:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d10f      	bne.n	8007c36 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	68da      	ldr	r2, [r3, #12]
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007c24:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	68da      	ldr	r2, [r3, #12]
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007c34:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007c36:	2300      	movs	r3, #0
 8007c38:	e000      	b.n	8007c3c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007c3a:	2302      	movs	r3, #2
  }
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	3714      	adds	r7, #20
 8007c40:	46bd      	mov	sp, r7
 8007c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c46:	4770      	bx	lr

08007c48 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b082      	sub	sp, #8
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	68da      	ldr	r2, [r3, #12]
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c5e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2220      	movs	r2, #32
 8007c64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f7ff fe51 	bl	8007910 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007c6e:	2300      	movs	r3, #0
}
 8007c70:	4618      	mov	r0, r3
 8007c72:	3708      	adds	r7, #8
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}

08007c78 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b084      	sub	sp, #16
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007c86:	b2db      	uxtb	r3, r3
 8007c88:	2b22      	cmp	r3, #34	; 0x22
 8007c8a:	d171      	bne.n	8007d70 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	689b      	ldr	r3, [r3, #8]
 8007c90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c94:	d123      	bne.n	8007cde <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c9a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	691b      	ldr	r3, [r3, #16]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d10e      	bne.n	8007cc2 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	685b      	ldr	r3, [r3, #4]
 8007caa:	b29b      	uxth	r3, r3
 8007cac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cb0:	b29a      	uxth	r2, r3
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cba:	1c9a      	adds	r2, r3, #2
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	629a      	str	r2, [r3, #40]	; 0x28
 8007cc0:	e029      	b.n	8007d16 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	685b      	ldr	r3, [r3, #4]
 8007cc8:	b29b      	uxth	r3, r3
 8007cca:	b2db      	uxtb	r3, r3
 8007ccc:	b29a      	uxth	r2, r3
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cd6:	1c5a      	adds	r2, r3, #1
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	629a      	str	r2, [r3, #40]	; 0x28
 8007cdc:	e01b      	b.n	8007d16 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	691b      	ldr	r3, [r3, #16]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d10a      	bne.n	8007cfc <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	6858      	ldr	r0, [r3, #4]
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cf0:	1c59      	adds	r1, r3, #1
 8007cf2:	687a      	ldr	r2, [r7, #4]
 8007cf4:	6291      	str	r1, [r2, #40]	; 0x28
 8007cf6:	b2c2      	uxtb	r2, r0
 8007cf8:	701a      	strb	r2, [r3, #0]
 8007cfa:	e00c      	b.n	8007d16 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	685b      	ldr	r3, [r3, #4]
 8007d02:	b2da      	uxtb	r2, r3
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d08:	1c58      	adds	r0, r3, #1
 8007d0a:	6879      	ldr	r1, [r7, #4]
 8007d0c:	6288      	str	r0, [r1, #40]	; 0x28
 8007d0e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007d12:	b2d2      	uxtb	r2, r2
 8007d14:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007d1a:	b29b      	uxth	r3, r3
 8007d1c:	3b01      	subs	r3, #1
 8007d1e:	b29b      	uxth	r3, r3
 8007d20:	687a      	ldr	r2, [r7, #4]
 8007d22:	4619      	mov	r1, r3
 8007d24:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d120      	bne.n	8007d6c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	68da      	ldr	r2, [r3, #12]
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f022 0220 	bic.w	r2, r2, #32
 8007d38:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	68da      	ldr	r2, [r3, #12]
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007d48:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	695a      	ldr	r2, [r3, #20]
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f022 0201 	bic.w	r2, r2, #1
 8007d58:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2220      	movs	r2, #32
 8007d5e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8007d62:	6878      	ldr	r0, [r7, #4]
 8007d64:	f7ff fdde 	bl	8007924 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8007d68:	2300      	movs	r3, #0
 8007d6a:	e002      	b.n	8007d72 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	e000      	b.n	8007d72 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8007d70:	2302      	movs	r3, #2
  }
}
 8007d72:	4618      	mov	r0, r3
 8007d74:	3710      	adds	r7, #16
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bd80      	pop	{r7, pc}
	...

08007d7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007d7c:	b5b0      	push	{r4, r5, r7, lr}
 8007d7e:	b084      	sub	sp, #16
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	691b      	ldr	r3, [r3, #16]
 8007d8a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	68da      	ldr	r2, [r3, #12]
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	430a      	orrs	r2, r1
 8007d98:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	689a      	ldr	r2, [r3, #8]
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	691b      	ldr	r3, [r3, #16]
 8007da2:	431a      	orrs	r2, r3
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	695b      	ldr	r3, [r3, #20]
 8007da8:	431a      	orrs	r2, r3
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	69db      	ldr	r3, [r3, #28]
 8007dae:	4313      	orrs	r3, r2
 8007db0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	68db      	ldr	r3, [r3, #12]
 8007db8:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8007dbc:	f023 030c 	bic.w	r3, r3, #12
 8007dc0:	687a      	ldr	r2, [r7, #4]
 8007dc2:	6812      	ldr	r2, [r2, #0]
 8007dc4:	68f9      	ldr	r1, [r7, #12]
 8007dc6:	430b      	orrs	r3, r1
 8007dc8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	695b      	ldr	r3, [r3, #20]
 8007dd0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	699a      	ldr	r2, [r3, #24]
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	430a      	orrs	r2, r1
 8007dde:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	69db      	ldr	r3, [r3, #28]
 8007de4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007de8:	f040 80e4 	bne.w	8007fb4 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	4aab      	ldr	r2, [pc, #684]	; (80080a0 <UART_SetConfig+0x324>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d004      	beq.n	8007e00 <UART_SetConfig+0x84>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	4aaa      	ldr	r2, [pc, #680]	; (80080a4 <UART_SetConfig+0x328>)
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	d16c      	bne.n	8007eda <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8007e00:	f7fe f920 	bl	8006044 <HAL_RCC_GetPCLK2Freq>
 8007e04:	4602      	mov	r2, r0
 8007e06:	4613      	mov	r3, r2
 8007e08:	009b      	lsls	r3, r3, #2
 8007e0a:	4413      	add	r3, r2
 8007e0c:	009a      	lsls	r2, r3, #2
 8007e0e:	441a      	add	r2, r3
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	685b      	ldr	r3, [r3, #4]
 8007e14:	005b      	lsls	r3, r3, #1
 8007e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e1a:	4aa3      	ldr	r2, [pc, #652]	; (80080a8 <UART_SetConfig+0x32c>)
 8007e1c:	fba2 2303 	umull	r2, r3, r2, r3
 8007e20:	095b      	lsrs	r3, r3, #5
 8007e22:	011c      	lsls	r4, r3, #4
 8007e24:	f7fe f90e 	bl	8006044 <HAL_RCC_GetPCLK2Freq>
 8007e28:	4602      	mov	r2, r0
 8007e2a:	4613      	mov	r3, r2
 8007e2c:	009b      	lsls	r3, r3, #2
 8007e2e:	4413      	add	r3, r2
 8007e30:	009a      	lsls	r2, r3, #2
 8007e32:	441a      	add	r2, r3
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	685b      	ldr	r3, [r3, #4]
 8007e38:	005b      	lsls	r3, r3, #1
 8007e3a:	fbb2 f5f3 	udiv	r5, r2, r3
 8007e3e:	f7fe f901 	bl	8006044 <HAL_RCC_GetPCLK2Freq>
 8007e42:	4602      	mov	r2, r0
 8007e44:	4613      	mov	r3, r2
 8007e46:	009b      	lsls	r3, r3, #2
 8007e48:	4413      	add	r3, r2
 8007e4a:	009a      	lsls	r2, r3, #2
 8007e4c:	441a      	add	r2, r3
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	685b      	ldr	r3, [r3, #4]
 8007e52:	005b      	lsls	r3, r3, #1
 8007e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e58:	4a93      	ldr	r2, [pc, #588]	; (80080a8 <UART_SetConfig+0x32c>)
 8007e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8007e5e:	095b      	lsrs	r3, r3, #5
 8007e60:	2264      	movs	r2, #100	; 0x64
 8007e62:	fb02 f303 	mul.w	r3, r2, r3
 8007e66:	1aeb      	subs	r3, r5, r3
 8007e68:	00db      	lsls	r3, r3, #3
 8007e6a:	3332      	adds	r3, #50	; 0x32
 8007e6c:	4a8e      	ldr	r2, [pc, #568]	; (80080a8 <UART_SetConfig+0x32c>)
 8007e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8007e72:	095b      	lsrs	r3, r3, #5
 8007e74:	005b      	lsls	r3, r3, #1
 8007e76:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007e7a:	441c      	add	r4, r3
 8007e7c:	f7fe f8e2 	bl	8006044 <HAL_RCC_GetPCLK2Freq>
 8007e80:	4602      	mov	r2, r0
 8007e82:	4613      	mov	r3, r2
 8007e84:	009b      	lsls	r3, r3, #2
 8007e86:	4413      	add	r3, r2
 8007e88:	009a      	lsls	r2, r3, #2
 8007e8a:	441a      	add	r2, r3
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	685b      	ldr	r3, [r3, #4]
 8007e90:	005b      	lsls	r3, r3, #1
 8007e92:	fbb2 f5f3 	udiv	r5, r2, r3
 8007e96:	f7fe f8d5 	bl	8006044 <HAL_RCC_GetPCLK2Freq>
 8007e9a:	4602      	mov	r2, r0
 8007e9c:	4613      	mov	r3, r2
 8007e9e:	009b      	lsls	r3, r3, #2
 8007ea0:	4413      	add	r3, r2
 8007ea2:	009a      	lsls	r2, r3, #2
 8007ea4:	441a      	add	r2, r3
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	685b      	ldr	r3, [r3, #4]
 8007eaa:	005b      	lsls	r3, r3, #1
 8007eac:	fbb2 f3f3 	udiv	r3, r2, r3
 8007eb0:	4a7d      	ldr	r2, [pc, #500]	; (80080a8 <UART_SetConfig+0x32c>)
 8007eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8007eb6:	095b      	lsrs	r3, r3, #5
 8007eb8:	2264      	movs	r2, #100	; 0x64
 8007eba:	fb02 f303 	mul.w	r3, r2, r3
 8007ebe:	1aeb      	subs	r3, r5, r3
 8007ec0:	00db      	lsls	r3, r3, #3
 8007ec2:	3332      	adds	r3, #50	; 0x32
 8007ec4:	4a78      	ldr	r2, [pc, #480]	; (80080a8 <UART_SetConfig+0x32c>)
 8007ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8007eca:	095b      	lsrs	r3, r3, #5
 8007ecc:	f003 0207 	and.w	r2, r3, #7
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	4422      	add	r2, r4
 8007ed6:	609a      	str	r2, [r3, #8]
 8007ed8:	e154      	b.n	8008184 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8007eda:	f7fe f89f 	bl	800601c <HAL_RCC_GetPCLK1Freq>
 8007ede:	4602      	mov	r2, r0
 8007ee0:	4613      	mov	r3, r2
 8007ee2:	009b      	lsls	r3, r3, #2
 8007ee4:	4413      	add	r3, r2
 8007ee6:	009a      	lsls	r2, r3, #2
 8007ee8:	441a      	add	r2, r3
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	685b      	ldr	r3, [r3, #4]
 8007eee:	005b      	lsls	r3, r3, #1
 8007ef0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ef4:	4a6c      	ldr	r2, [pc, #432]	; (80080a8 <UART_SetConfig+0x32c>)
 8007ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8007efa:	095b      	lsrs	r3, r3, #5
 8007efc:	011c      	lsls	r4, r3, #4
 8007efe:	f7fe f88d 	bl	800601c <HAL_RCC_GetPCLK1Freq>
 8007f02:	4602      	mov	r2, r0
 8007f04:	4613      	mov	r3, r2
 8007f06:	009b      	lsls	r3, r3, #2
 8007f08:	4413      	add	r3, r2
 8007f0a:	009a      	lsls	r2, r3, #2
 8007f0c:	441a      	add	r2, r3
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	685b      	ldr	r3, [r3, #4]
 8007f12:	005b      	lsls	r3, r3, #1
 8007f14:	fbb2 f5f3 	udiv	r5, r2, r3
 8007f18:	f7fe f880 	bl	800601c <HAL_RCC_GetPCLK1Freq>
 8007f1c:	4602      	mov	r2, r0
 8007f1e:	4613      	mov	r3, r2
 8007f20:	009b      	lsls	r3, r3, #2
 8007f22:	4413      	add	r3, r2
 8007f24:	009a      	lsls	r2, r3, #2
 8007f26:	441a      	add	r2, r3
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	685b      	ldr	r3, [r3, #4]
 8007f2c:	005b      	lsls	r3, r3, #1
 8007f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f32:	4a5d      	ldr	r2, [pc, #372]	; (80080a8 <UART_SetConfig+0x32c>)
 8007f34:	fba2 2303 	umull	r2, r3, r2, r3
 8007f38:	095b      	lsrs	r3, r3, #5
 8007f3a:	2264      	movs	r2, #100	; 0x64
 8007f3c:	fb02 f303 	mul.w	r3, r2, r3
 8007f40:	1aeb      	subs	r3, r5, r3
 8007f42:	00db      	lsls	r3, r3, #3
 8007f44:	3332      	adds	r3, #50	; 0x32
 8007f46:	4a58      	ldr	r2, [pc, #352]	; (80080a8 <UART_SetConfig+0x32c>)
 8007f48:	fba2 2303 	umull	r2, r3, r2, r3
 8007f4c:	095b      	lsrs	r3, r3, #5
 8007f4e:	005b      	lsls	r3, r3, #1
 8007f50:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007f54:	441c      	add	r4, r3
 8007f56:	f7fe f861 	bl	800601c <HAL_RCC_GetPCLK1Freq>
 8007f5a:	4602      	mov	r2, r0
 8007f5c:	4613      	mov	r3, r2
 8007f5e:	009b      	lsls	r3, r3, #2
 8007f60:	4413      	add	r3, r2
 8007f62:	009a      	lsls	r2, r3, #2
 8007f64:	441a      	add	r2, r3
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	685b      	ldr	r3, [r3, #4]
 8007f6a:	005b      	lsls	r3, r3, #1
 8007f6c:	fbb2 f5f3 	udiv	r5, r2, r3
 8007f70:	f7fe f854 	bl	800601c <HAL_RCC_GetPCLK1Freq>
 8007f74:	4602      	mov	r2, r0
 8007f76:	4613      	mov	r3, r2
 8007f78:	009b      	lsls	r3, r3, #2
 8007f7a:	4413      	add	r3, r2
 8007f7c:	009a      	lsls	r2, r3, #2
 8007f7e:	441a      	add	r2, r3
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	685b      	ldr	r3, [r3, #4]
 8007f84:	005b      	lsls	r3, r3, #1
 8007f86:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f8a:	4a47      	ldr	r2, [pc, #284]	; (80080a8 <UART_SetConfig+0x32c>)
 8007f8c:	fba2 2303 	umull	r2, r3, r2, r3
 8007f90:	095b      	lsrs	r3, r3, #5
 8007f92:	2264      	movs	r2, #100	; 0x64
 8007f94:	fb02 f303 	mul.w	r3, r2, r3
 8007f98:	1aeb      	subs	r3, r5, r3
 8007f9a:	00db      	lsls	r3, r3, #3
 8007f9c:	3332      	adds	r3, #50	; 0x32
 8007f9e:	4a42      	ldr	r2, [pc, #264]	; (80080a8 <UART_SetConfig+0x32c>)
 8007fa0:	fba2 2303 	umull	r2, r3, r2, r3
 8007fa4:	095b      	lsrs	r3, r3, #5
 8007fa6:	f003 0207 	and.w	r2, r3, #7
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	4422      	add	r2, r4
 8007fb0:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8007fb2:	e0e7      	b.n	8008184 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	4a39      	ldr	r2, [pc, #228]	; (80080a0 <UART_SetConfig+0x324>)
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	d004      	beq.n	8007fc8 <UART_SetConfig+0x24c>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	4a38      	ldr	r2, [pc, #224]	; (80080a4 <UART_SetConfig+0x328>)
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	d171      	bne.n	80080ac <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8007fc8:	f7fe f83c 	bl	8006044 <HAL_RCC_GetPCLK2Freq>
 8007fcc:	4602      	mov	r2, r0
 8007fce:	4613      	mov	r3, r2
 8007fd0:	009b      	lsls	r3, r3, #2
 8007fd2:	4413      	add	r3, r2
 8007fd4:	009a      	lsls	r2, r3, #2
 8007fd6:	441a      	add	r2, r3
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	685b      	ldr	r3, [r3, #4]
 8007fdc:	009b      	lsls	r3, r3, #2
 8007fde:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fe2:	4a31      	ldr	r2, [pc, #196]	; (80080a8 <UART_SetConfig+0x32c>)
 8007fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8007fe8:	095b      	lsrs	r3, r3, #5
 8007fea:	011c      	lsls	r4, r3, #4
 8007fec:	f7fe f82a 	bl	8006044 <HAL_RCC_GetPCLK2Freq>
 8007ff0:	4602      	mov	r2, r0
 8007ff2:	4613      	mov	r3, r2
 8007ff4:	009b      	lsls	r3, r3, #2
 8007ff6:	4413      	add	r3, r2
 8007ff8:	009a      	lsls	r2, r3, #2
 8007ffa:	441a      	add	r2, r3
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	685b      	ldr	r3, [r3, #4]
 8008000:	009b      	lsls	r3, r3, #2
 8008002:	fbb2 f5f3 	udiv	r5, r2, r3
 8008006:	f7fe f81d 	bl	8006044 <HAL_RCC_GetPCLK2Freq>
 800800a:	4602      	mov	r2, r0
 800800c:	4613      	mov	r3, r2
 800800e:	009b      	lsls	r3, r3, #2
 8008010:	4413      	add	r3, r2
 8008012:	009a      	lsls	r2, r3, #2
 8008014:	441a      	add	r2, r3
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	685b      	ldr	r3, [r3, #4]
 800801a:	009b      	lsls	r3, r3, #2
 800801c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008020:	4a21      	ldr	r2, [pc, #132]	; (80080a8 <UART_SetConfig+0x32c>)
 8008022:	fba2 2303 	umull	r2, r3, r2, r3
 8008026:	095b      	lsrs	r3, r3, #5
 8008028:	2264      	movs	r2, #100	; 0x64
 800802a:	fb02 f303 	mul.w	r3, r2, r3
 800802e:	1aeb      	subs	r3, r5, r3
 8008030:	011b      	lsls	r3, r3, #4
 8008032:	3332      	adds	r3, #50	; 0x32
 8008034:	4a1c      	ldr	r2, [pc, #112]	; (80080a8 <UART_SetConfig+0x32c>)
 8008036:	fba2 2303 	umull	r2, r3, r2, r3
 800803a:	095b      	lsrs	r3, r3, #5
 800803c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008040:	441c      	add	r4, r3
 8008042:	f7fd ffff 	bl	8006044 <HAL_RCC_GetPCLK2Freq>
 8008046:	4602      	mov	r2, r0
 8008048:	4613      	mov	r3, r2
 800804a:	009b      	lsls	r3, r3, #2
 800804c:	4413      	add	r3, r2
 800804e:	009a      	lsls	r2, r3, #2
 8008050:	441a      	add	r2, r3
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	685b      	ldr	r3, [r3, #4]
 8008056:	009b      	lsls	r3, r3, #2
 8008058:	fbb2 f5f3 	udiv	r5, r2, r3
 800805c:	f7fd fff2 	bl	8006044 <HAL_RCC_GetPCLK2Freq>
 8008060:	4602      	mov	r2, r0
 8008062:	4613      	mov	r3, r2
 8008064:	009b      	lsls	r3, r3, #2
 8008066:	4413      	add	r3, r2
 8008068:	009a      	lsls	r2, r3, #2
 800806a:	441a      	add	r2, r3
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	685b      	ldr	r3, [r3, #4]
 8008070:	009b      	lsls	r3, r3, #2
 8008072:	fbb2 f3f3 	udiv	r3, r2, r3
 8008076:	4a0c      	ldr	r2, [pc, #48]	; (80080a8 <UART_SetConfig+0x32c>)
 8008078:	fba2 2303 	umull	r2, r3, r2, r3
 800807c:	095b      	lsrs	r3, r3, #5
 800807e:	2264      	movs	r2, #100	; 0x64
 8008080:	fb02 f303 	mul.w	r3, r2, r3
 8008084:	1aeb      	subs	r3, r5, r3
 8008086:	011b      	lsls	r3, r3, #4
 8008088:	3332      	adds	r3, #50	; 0x32
 800808a:	4a07      	ldr	r2, [pc, #28]	; (80080a8 <UART_SetConfig+0x32c>)
 800808c:	fba2 2303 	umull	r2, r3, r2, r3
 8008090:	095b      	lsrs	r3, r3, #5
 8008092:	f003 020f 	and.w	r2, r3, #15
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	4422      	add	r2, r4
 800809c:	609a      	str	r2, [r3, #8]
 800809e:	e071      	b.n	8008184 <UART_SetConfig+0x408>
 80080a0:	40011000 	.word	0x40011000
 80080a4:	40011400 	.word	0x40011400
 80080a8:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80080ac:	f7fd ffb6 	bl	800601c <HAL_RCC_GetPCLK1Freq>
 80080b0:	4602      	mov	r2, r0
 80080b2:	4613      	mov	r3, r2
 80080b4:	009b      	lsls	r3, r3, #2
 80080b6:	4413      	add	r3, r2
 80080b8:	009a      	lsls	r2, r3, #2
 80080ba:	441a      	add	r2, r3
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	685b      	ldr	r3, [r3, #4]
 80080c0:	009b      	lsls	r3, r3, #2
 80080c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80080c6:	4a31      	ldr	r2, [pc, #196]	; (800818c <UART_SetConfig+0x410>)
 80080c8:	fba2 2303 	umull	r2, r3, r2, r3
 80080cc:	095b      	lsrs	r3, r3, #5
 80080ce:	011c      	lsls	r4, r3, #4
 80080d0:	f7fd ffa4 	bl	800601c <HAL_RCC_GetPCLK1Freq>
 80080d4:	4602      	mov	r2, r0
 80080d6:	4613      	mov	r3, r2
 80080d8:	009b      	lsls	r3, r3, #2
 80080da:	4413      	add	r3, r2
 80080dc:	009a      	lsls	r2, r3, #2
 80080de:	441a      	add	r2, r3
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	685b      	ldr	r3, [r3, #4]
 80080e4:	009b      	lsls	r3, r3, #2
 80080e6:	fbb2 f5f3 	udiv	r5, r2, r3
 80080ea:	f7fd ff97 	bl	800601c <HAL_RCC_GetPCLK1Freq>
 80080ee:	4602      	mov	r2, r0
 80080f0:	4613      	mov	r3, r2
 80080f2:	009b      	lsls	r3, r3, #2
 80080f4:	4413      	add	r3, r2
 80080f6:	009a      	lsls	r2, r3, #2
 80080f8:	441a      	add	r2, r3
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	685b      	ldr	r3, [r3, #4]
 80080fe:	009b      	lsls	r3, r3, #2
 8008100:	fbb2 f3f3 	udiv	r3, r2, r3
 8008104:	4a21      	ldr	r2, [pc, #132]	; (800818c <UART_SetConfig+0x410>)
 8008106:	fba2 2303 	umull	r2, r3, r2, r3
 800810a:	095b      	lsrs	r3, r3, #5
 800810c:	2264      	movs	r2, #100	; 0x64
 800810e:	fb02 f303 	mul.w	r3, r2, r3
 8008112:	1aeb      	subs	r3, r5, r3
 8008114:	011b      	lsls	r3, r3, #4
 8008116:	3332      	adds	r3, #50	; 0x32
 8008118:	4a1c      	ldr	r2, [pc, #112]	; (800818c <UART_SetConfig+0x410>)
 800811a:	fba2 2303 	umull	r2, r3, r2, r3
 800811e:	095b      	lsrs	r3, r3, #5
 8008120:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008124:	441c      	add	r4, r3
 8008126:	f7fd ff79 	bl	800601c <HAL_RCC_GetPCLK1Freq>
 800812a:	4602      	mov	r2, r0
 800812c:	4613      	mov	r3, r2
 800812e:	009b      	lsls	r3, r3, #2
 8008130:	4413      	add	r3, r2
 8008132:	009a      	lsls	r2, r3, #2
 8008134:	441a      	add	r2, r3
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	685b      	ldr	r3, [r3, #4]
 800813a:	009b      	lsls	r3, r3, #2
 800813c:	fbb2 f5f3 	udiv	r5, r2, r3
 8008140:	f7fd ff6c 	bl	800601c <HAL_RCC_GetPCLK1Freq>
 8008144:	4602      	mov	r2, r0
 8008146:	4613      	mov	r3, r2
 8008148:	009b      	lsls	r3, r3, #2
 800814a:	4413      	add	r3, r2
 800814c:	009a      	lsls	r2, r3, #2
 800814e:	441a      	add	r2, r3
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	685b      	ldr	r3, [r3, #4]
 8008154:	009b      	lsls	r3, r3, #2
 8008156:	fbb2 f3f3 	udiv	r3, r2, r3
 800815a:	4a0c      	ldr	r2, [pc, #48]	; (800818c <UART_SetConfig+0x410>)
 800815c:	fba2 2303 	umull	r2, r3, r2, r3
 8008160:	095b      	lsrs	r3, r3, #5
 8008162:	2264      	movs	r2, #100	; 0x64
 8008164:	fb02 f303 	mul.w	r3, r2, r3
 8008168:	1aeb      	subs	r3, r5, r3
 800816a:	011b      	lsls	r3, r3, #4
 800816c:	3332      	adds	r3, #50	; 0x32
 800816e:	4a07      	ldr	r2, [pc, #28]	; (800818c <UART_SetConfig+0x410>)
 8008170:	fba2 2303 	umull	r2, r3, r2, r3
 8008174:	095b      	lsrs	r3, r3, #5
 8008176:	f003 020f 	and.w	r2, r3, #15
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	4422      	add	r2, r4
 8008180:	609a      	str	r2, [r3, #8]
}
 8008182:	e7ff      	b.n	8008184 <UART_SetConfig+0x408>
 8008184:	bf00      	nop
 8008186:	3710      	adds	r7, #16
 8008188:	46bd      	mov	sp, r7
 800818a:	bdb0      	pop	{r4, r5, r7, pc}
 800818c:	51eb851f 	.word	0x51eb851f

08008190 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008190:	b480      	push	{r7}
 8008192:	b085      	sub	sp, #20
 8008194:	af00      	add	r7, sp, #0
 8008196:	4603      	mov	r3, r0
 8008198:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800819a:	2300      	movs	r3, #0
 800819c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800819e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80081a2:	2b84      	cmp	r3, #132	; 0x84
 80081a4:	d005      	beq.n	80081b2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80081a6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	4413      	add	r3, r2
 80081ae:	3303      	adds	r3, #3
 80081b0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80081b2:	68fb      	ldr	r3, [r7, #12]
}
 80081b4:	4618      	mov	r0, r3
 80081b6:	3714      	adds	r7, #20
 80081b8:	46bd      	mov	sp, r7
 80081ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081be:	4770      	bx	lr

080081c0 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80081c0:	b480      	push	{r7}
 80081c2:	b083      	sub	sp, #12
 80081c4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80081c6:	f3ef 8305 	mrs	r3, IPSR
 80081ca:	607b      	str	r3, [r7, #4]
  return(result);
 80081cc:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	bf14      	ite	ne
 80081d2:	2301      	movne	r3, #1
 80081d4:	2300      	moveq	r3, #0
 80081d6:	b2db      	uxtb	r3, r3
}
 80081d8:	4618      	mov	r0, r3
 80081da:	370c      	adds	r7, #12
 80081dc:	46bd      	mov	sp, r7
 80081de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e2:	4770      	bx	lr

080081e4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80081e8:	f001 ffd2 	bl	800a190 <vTaskStartScheduler>
  
  return osOK;
 80081ec:	2300      	movs	r3, #0
}
 80081ee:	4618      	mov	r0, r3
 80081f0:	bd80      	pop	{r7, pc}

080081f2 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 80081f2:	b580      	push	{r7, lr}
 80081f4:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 80081f6:	f7ff ffe3 	bl	80081c0 <inHandlerMode>
 80081fa:	4603      	mov	r3, r0
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d003      	beq.n	8008208 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8008200:	f002 f8e4 	bl	800a3cc <xTaskGetTickCountFromISR>
 8008204:	4603      	mov	r3, r0
 8008206:	e002      	b.n	800820e <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8008208:	f002 f8d0 	bl	800a3ac <xTaskGetTickCount>
 800820c:	4603      	mov	r3, r0
  }
}
 800820e:	4618      	mov	r0, r3
 8008210:	bd80      	pop	{r7, pc}

08008212 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008212:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008214:	b089      	sub	sp, #36	; 0x24
 8008216:	af04      	add	r7, sp, #16
 8008218:	6078      	str	r0, [r7, #4]
 800821a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	695b      	ldr	r3, [r3, #20]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d020      	beq.n	8008266 <osThreadCreate+0x54>
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	699b      	ldr	r3, [r3, #24]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d01c      	beq.n	8008266 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	685c      	ldr	r4, [r3, #4]
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681d      	ldr	r5, [r3, #0]
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	691e      	ldr	r6, [r3, #16]
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800823e:	4618      	mov	r0, r3
 8008240:	f7ff ffa6 	bl	8008190 <makeFreeRtosPriority>
 8008244:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	695b      	ldr	r3, [r3, #20]
 800824a:	687a      	ldr	r2, [r7, #4]
 800824c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800824e:	9202      	str	r2, [sp, #8]
 8008250:	9301      	str	r3, [sp, #4]
 8008252:	9100      	str	r1, [sp, #0]
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	4632      	mov	r2, r6
 8008258:	4629      	mov	r1, r5
 800825a:	4620      	mov	r0, r4
 800825c:	f001 fd58 	bl	8009d10 <xTaskCreateStatic>
 8008260:	4603      	mov	r3, r0
 8008262:	60fb      	str	r3, [r7, #12]
 8008264:	e01c      	b.n	80082a0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	685c      	ldr	r4, [r3, #4]
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008272:	b29e      	uxth	r6, r3
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800827a:	4618      	mov	r0, r3
 800827c:	f7ff ff88 	bl	8008190 <makeFreeRtosPriority>
 8008280:	4602      	mov	r2, r0
 8008282:	f107 030c 	add.w	r3, r7, #12
 8008286:	9301      	str	r3, [sp, #4]
 8008288:	9200      	str	r2, [sp, #0]
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	4632      	mov	r2, r6
 800828e:	4629      	mov	r1, r5
 8008290:	4620      	mov	r0, r4
 8008292:	f001 fd96 	bl	8009dc2 <xTaskCreate>
 8008296:	4603      	mov	r3, r0
 8008298:	2b01      	cmp	r3, #1
 800829a:	d001      	beq.n	80082a0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800829c:	2300      	movs	r3, #0
 800829e:	e000      	b.n	80082a2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80082a0:	68fb      	ldr	r3, [r7, #12]
}
 80082a2:	4618      	mov	r0, r3
 80082a4:	3714      	adds	r7, #20
 80082a6:	46bd      	mov	sp, r7
 80082a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080082aa <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80082aa:	b580      	push	{r7, lr}
 80082ac:	b084      	sub	sp, #16
 80082ae:	af00      	add	r7, sp, #0
 80082b0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d001      	beq.n	80082c0 <osDelay+0x16>
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	e000      	b.n	80082c2 <osDelay+0x18>
 80082c0:	2301      	movs	r3, #1
 80082c2:	4618      	mov	r0, r3
 80082c4:	f001 ff30 	bl	800a128 <vTaskDelay>
  
  return osOK;
 80082c8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	3710      	adds	r7, #16
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}
	...

080082d4 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b086      	sub	sp, #24
 80082d8:	af02      	add	r7, sp, #8
 80082da:	60f8      	str	r0, [r7, #12]
 80082dc:	460b      	mov	r3, r1
 80082de:	607a      	str	r2, [r7, #4]
 80082e0:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	685b      	ldr	r3, [r3, #4]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d013      	beq.n	8008312 <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 80082ea:	7afb      	ldrb	r3, [r7, #11]
 80082ec:	2b01      	cmp	r3, #1
 80082ee:	d101      	bne.n	80082f4 <osTimerCreate+0x20>
 80082f0:	2101      	movs	r1, #1
 80082f2:	e000      	b.n	80082f6 <osTimerCreate+0x22>
 80082f4:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer,
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 80082fa:	68fa      	ldr	r2, [r7, #12]
 80082fc:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 80082fe:	9201      	str	r2, [sp, #4]
 8008300:	9300      	str	r3, [sp, #0]
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	460a      	mov	r2, r1
 8008306:	2101      	movs	r1, #1
 8008308:	480b      	ldr	r0, [pc, #44]	; (8008338 <osTimerCreate+0x64>)
 800830a:	f003 f85c 	bl	800b3c6 <xTimerCreateStatic>
 800830e:	4603      	mov	r3, r0
 8008310:	e00e      	b.n	8008330 <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 8008312:	7afb      	ldrb	r3, [r7, #11]
 8008314:	2b01      	cmp	r3, #1
 8008316:	d101      	bne.n	800831c <osTimerCreate+0x48>
 8008318:	2201      	movs	r2, #1
 800831a:	e000      	b.n	800831e <osTimerCreate+0x4a>
 800831c:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer);
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 8008322:	9300      	str	r3, [sp, #0]
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2101      	movs	r1, #1
 8008328:	4803      	ldr	r0, [pc, #12]	; (8008338 <osTimerCreate+0x64>)
 800832a:	f003 f82b 	bl	800b384 <xTimerCreate>
 800832e:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 8008330:	4618      	mov	r0, r3
 8008332:	3710      	adds	r7, #16
 8008334:	46bd      	mov	sp, r7
 8008336:	bd80      	pop	{r7, pc}
 8008338:	080188e8 	.word	0x080188e8

0800833c <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b088      	sub	sp, #32
 8008340:	af02      	add	r7, sp, #8
 8008342:	6078      	str	r0, [r7, #4]
 8008344:	6039      	str	r1, [r7, #0]
  osStatus result = osOK;
 8008346:	2300      	movs	r3, #0
 8008348:	617b      	str	r3, [r7, #20]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 800834a:	2300      	movs	r3, #0
 800834c:	60fb      	str	r3, [r7, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	613b      	str	r3, [r7, #16]

  if (ticks == 0)
 8008352:	693b      	ldr	r3, [r7, #16]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d101      	bne.n	800835c <osTimerStart+0x20>
    ticks = 1;
 8008358:	2301      	movs	r3, #1
 800835a:	613b      	str	r3, [r7, #16]
    
  if (inHandlerMode()) 
 800835c:	f7ff ff30 	bl	80081c0 <inHandlerMode>
 8008360:	4603      	mov	r3, r0
 8008362:	2b00      	cmp	r3, #0
 8008364:	d01b      	beq.n	800839e <osTimerStart+0x62>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 8008366:	f107 020c 	add.w	r2, r7, #12
 800836a:	2300      	movs	r3, #0
 800836c:	9300      	str	r3, [sp, #0]
 800836e:	4613      	mov	r3, r2
 8008370:	693a      	ldr	r2, [r7, #16]
 8008372:	2109      	movs	r1, #9
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f003 f893 	bl	800b4a0 <xTimerGenericCommand>
 800837a:	4603      	mov	r3, r0
 800837c:	2b01      	cmp	r3, #1
 800837e:	d002      	beq.n	8008386 <osTimerStart+0x4a>
    {
      result = osErrorOS;
 8008380:	23ff      	movs	r3, #255	; 0xff
 8008382:	617b      	str	r3, [r7, #20]
 8008384:	e018      	b.n	80083b8 <osTimerStart+0x7c>
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d015      	beq.n	80083b8 <osTimerStart+0x7c>
 800838c:	4b0d      	ldr	r3, [pc, #52]	; (80083c4 <osTimerStart+0x88>)
 800838e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008392:	601a      	str	r2, [r3, #0]
 8008394:	f3bf 8f4f 	dsb	sy
 8008398:	f3bf 8f6f 	isb	sy
 800839c:	e00c      	b.n	80083b8 <osTimerStart+0x7c>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 800839e:	2300      	movs	r3, #0
 80083a0:	9300      	str	r3, [sp, #0]
 80083a2:	2300      	movs	r3, #0
 80083a4:	693a      	ldr	r2, [r7, #16]
 80083a6:	2104      	movs	r1, #4
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	f003 f879 	bl	800b4a0 <xTimerGenericCommand>
 80083ae:	4603      	mov	r3, r0
 80083b0:	2b01      	cmp	r3, #1
 80083b2:	d001      	beq.n	80083b8 <osTimerStart+0x7c>
      result = osErrorOS;
 80083b4:	23ff      	movs	r3, #255	; 0xff
 80083b6:	617b      	str	r3, [r7, #20]
  }

#else 
  result = osErrorOS;
#endif
  return result;
 80083b8:	697b      	ldr	r3, [r7, #20]
}
 80083ba:	4618      	mov	r0, r3
 80083bc:	3718      	adds	r7, #24
 80083be:	46bd      	mov	sp, r7
 80083c0:	bd80      	pop	{r7, pc}
 80083c2:	bf00      	nop
 80083c4:	e000ed04 	.word	0xe000ed04

080083c8 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b082      	sub	sp, #8
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	685b      	ldr	r3, [r3, #4]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d007      	beq.n	80083e8 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	685b      	ldr	r3, [r3, #4]
 80083dc:	4619      	mov	r1, r3
 80083de:	2001      	movs	r0, #1
 80083e0:	f000 fe14 	bl	800900c <xQueueCreateMutexStatic>
 80083e4:	4603      	mov	r3, r0
 80083e6:	e003      	b.n	80083f0 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80083e8:	2001      	movs	r0, #1
 80083ea:	f000 fdf7 	bl	8008fdc <xQueueCreateMutex>
 80083ee:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	3708      	adds	r7, #8
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}

080083f8 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b084      	sub	sp, #16
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
 8008400:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8008402:	2300      	movs	r3, #0
 8008404:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d101      	bne.n	8008410 <osMutexWait+0x18>
    return osErrorParameter;
 800840c:	2380      	movs	r3, #128	; 0x80
 800840e:	e03a      	b.n	8008486 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8008410:	2300      	movs	r3, #0
 8008412:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800841a:	d103      	bne.n	8008424 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800841c:	f04f 33ff 	mov.w	r3, #4294967295
 8008420:	60fb      	str	r3, [r7, #12]
 8008422:	e009      	b.n	8008438 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d006      	beq.n	8008438 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d101      	bne.n	8008438 <osMutexWait+0x40>
      ticks = 1;
 8008434:	2301      	movs	r3, #1
 8008436:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8008438:	f7ff fec2 	bl	80081c0 <inHandlerMode>
 800843c:	4603      	mov	r3, r0
 800843e:	2b00      	cmp	r3, #0
 8008440:	d017      	beq.n	8008472 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8008442:	f107 0308 	add.w	r3, r7, #8
 8008446:	461a      	mov	r2, r3
 8008448:	2100      	movs	r1, #0
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	f001 fa5e 	bl	800990c <xQueueReceiveFromISR>
 8008450:	4603      	mov	r3, r0
 8008452:	2b01      	cmp	r3, #1
 8008454:	d001      	beq.n	800845a <osMutexWait+0x62>
      return osErrorOS;
 8008456:	23ff      	movs	r3, #255	; 0xff
 8008458:	e015      	b.n	8008486 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800845a:	68bb      	ldr	r3, [r7, #8]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d011      	beq.n	8008484 <osMutexWait+0x8c>
 8008460:	4b0b      	ldr	r3, [pc, #44]	; (8008490 <osMutexWait+0x98>)
 8008462:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008466:	601a      	str	r2, [r3, #0]
 8008468:	f3bf 8f4f 	dsb	sy
 800846c:	f3bf 8f6f 	isb	sy
 8008470:	e008      	b.n	8008484 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8008472:	68f9      	ldr	r1, [r7, #12]
 8008474:	6878      	ldr	r0, [r7, #4]
 8008476:	f001 f941 	bl	80096fc <xQueueSemaphoreTake>
 800847a:	4603      	mov	r3, r0
 800847c:	2b01      	cmp	r3, #1
 800847e:	d001      	beq.n	8008484 <osMutexWait+0x8c>
    return osErrorOS;
 8008480:	23ff      	movs	r3, #255	; 0xff
 8008482:	e000      	b.n	8008486 <osMutexWait+0x8e>
  }
  
  return osOK;
 8008484:	2300      	movs	r3, #0
}
 8008486:	4618      	mov	r0, r3
 8008488:	3710      	adds	r7, #16
 800848a:	46bd      	mov	sp, r7
 800848c:	bd80      	pop	{r7, pc}
 800848e:	bf00      	nop
 8008490:	e000ed04 	.word	0xe000ed04

08008494 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b084      	sub	sp, #16
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800849c:	2300      	movs	r3, #0
 800849e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80084a0:	2300      	movs	r3, #0
 80084a2:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 80084a4:	f7ff fe8c 	bl	80081c0 <inHandlerMode>
 80084a8:	4603      	mov	r3, r0
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d016      	beq.n	80084dc <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80084ae:	f107 0308 	add.w	r3, r7, #8
 80084b2:	4619      	mov	r1, r3
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	f000 ffbb 	bl	8009430 <xQueueGiveFromISR>
 80084ba:	4603      	mov	r3, r0
 80084bc:	2b01      	cmp	r3, #1
 80084be:	d001      	beq.n	80084c4 <osMutexRelease+0x30>
      return osErrorOS;
 80084c0:	23ff      	movs	r3, #255	; 0xff
 80084c2:	e017      	b.n	80084f4 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80084c4:	68bb      	ldr	r3, [r7, #8]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d013      	beq.n	80084f2 <osMutexRelease+0x5e>
 80084ca:	4b0c      	ldr	r3, [pc, #48]	; (80084fc <osMutexRelease+0x68>)
 80084cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084d0:	601a      	str	r2, [r3, #0]
 80084d2:	f3bf 8f4f 	dsb	sy
 80084d6:	f3bf 8f6f 	isb	sy
 80084da:	e00a      	b.n	80084f2 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 80084dc:	2300      	movs	r3, #0
 80084de:	2200      	movs	r2, #0
 80084e0:	2100      	movs	r1, #0
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f000 fe16 	bl	8009114 <xQueueGenericSend>
 80084e8:	4603      	mov	r3, r0
 80084ea:	2b01      	cmp	r3, #1
 80084ec:	d001      	beq.n	80084f2 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 80084ee:	23ff      	movs	r3, #255	; 0xff
 80084f0:	60fb      	str	r3, [r7, #12]
  }
  return result;
 80084f2:	68fb      	ldr	r3, [r7, #12]
}
 80084f4:	4618      	mov	r0, r3
 80084f6:	3710      	adds	r7, #16
 80084f8:	46bd      	mov	sp, r7
 80084fa:	bd80      	pop	{r7, pc}
 80084fc:	e000ed04 	.word	0xe000ed04

08008500 <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b086      	sub	sp, #24
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	685b      	ldr	r3, [r3, #4]
 800850c:	3303      	adds	r3, #3
 800850e:	f023 0303 	bic.w	r3, r3, #3
 8008512:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 8008514:	2014      	movs	r0, #20
 8008516:	f003 fcab 	bl	800be70 <pvPortMalloc>
 800851a:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 800851c:	697b      	ldr	r3, [r7, #20]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d046      	beq.n	80085b0 <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681a      	ldr	r2, [r3, #0]
 8008526:	697b      	ldr	r3, [r7, #20]
 8008528:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 800852a:	68fa      	ldr	r2, [r7, #12]
 800852c:	697b      	ldr	r3, [r7, #20]
 800852e:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 8008530:	697b      	ldr	r3, [r7, #20]
 8008532:	2200      	movs	r2, #0
 8008534:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	4618      	mov	r0, r3
 800853c:	f003 fc98 	bl	800be70 <pvPortMalloc>
 8008540:	4602      	mov	r2, r0
 8008542:	697b      	ldr	r3, [r7, #20]
 8008544:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 8008546:	697b      	ldr	r3, [r7, #20]
 8008548:	685b      	ldr	r3, [r3, #4]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d02b      	beq.n	80085a6 <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	68fa      	ldr	r2, [r7, #12]
 8008554:	fb02 f303 	mul.w	r3, r2, r3
 8008558:	4618      	mov	r0, r3
 800855a:	f003 fc89 	bl	800be70 <pvPortMalloc>
 800855e:	4602      	mov	r2, r0
 8008560:	697b      	ldr	r3, [r7, #20]
 8008562:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 8008564:	697b      	ldr	r3, [r7, #20]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d011      	beq.n	8008590 <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 800856c:	2300      	movs	r3, #0
 800856e:	613b      	str	r3, [r7, #16]
 8008570:	e008      	b.n	8008584 <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 8008572:	697b      	ldr	r3, [r7, #20]
 8008574:	685a      	ldr	r2, [r3, #4]
 8008576:	693b      	ldr	r3, [r7, #16]
 8008578:	4413      	add	r3, r2
 800857a:	2200      	movs	r2, #0
 800857c:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 800857e:	693b      	ldr	r3, [r7, #16]
 8008580:	3301      	adds	r3, #1
 8008582:	613b      	str	r3, [r7, #16]
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	693a      	ldr	r2, [r7, #16]
 800858a:	429a      	cmp	r2, r3
 800858c:	d3f1      	bcc.n	8008572 <osPoolCreate+0x72>
 800858e:	e00f      	b.n	80085b0 <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 8008590:	697b      	ldr	r3, [r7, #20]
 8008592:	685b      	ldr	r3, [r3, #4]
 8008594:	4618      	mov	r0, r3
 8008596:	f003 fd31 	bl	800bffc <vPortFree>
        vPortFree(thePool);
 800859a:	6978      	ldr	r0, [r7, #20]
 800859c:	f003 fd2e 	bl	800bffc <vPortFree>
        thePool = NULL;
 80085a0:	2300      	movs	r3, #0
 80085a2:	617b      	str	r3, [r7, #20]
 80085a4:	e004      	b.n	80085b0 <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 80085a6:	6978      	ldr	r0, [r7, #20]
 80085a8:	f003 fd28 	bl	800bffc <vPortFree>
      thePool = NULL;
 80085ac:	2300      	movs	r3, #0
 80085ae:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 80085b0:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	3718      	adds	r7, #24
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bd80      	pop	{r7, pc}

080085ba <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 80085ba:	b580      	push	{r7, lr}
 80085bc:	b08a      	sub	sp, #40	; 0x28
 80085be:	af00      	add	r7, sp, #0
 80085c0:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 80085c2:	2300      	movs	r3, #0
 80085c4:	627b      	str	r3, [r7, #36]	; 0x24
  void *p = NULL;
 80085c6:	2300      	movs	r3, #0
 80085c8:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 80085ca:	f7ff fdf9 	bl	80081c0 <inHandlerMode>
 80085ce:	4603      	mov	r3, r0
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d00e      	beq.n	80085f2 <osPoolAlloc+0x38>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80085d4:	f3ef 8211 	mrs	r2, BASEPRI
 80085d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085dc:	f383 8811 	msr	BASEPRI, r3
 80085e0:	f3bf 8f6f 	isb	sy
 80085e4:	f3bf 8f4f 	dsb	sy
 80085e8:	617a      	str	r2, [r7, #20]
 80085ea:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80085ec:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 80085ee:	627b      	str	r3, [r7, #36]	; 0x24
 80085f0:	e001      	b.n	80085f6 <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 80085f2:	f003 fb23 	bl	800bc3c <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 80085f6:	2300      	movs	r3, #0
 80085f8:	61fb      	str	r3, [r7, #28]
 80085fa:	e029      	b.n	8008650 <osPoolAlloc+0x96>
    index = pool_id->currentIndex + i;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	691b      	ldr	r3, [r3, #16]
 8008600:	69fa      	ldr	r2, [r7, #28]
 8008602:	4413      	add	r3, r2
 8008604:	61bb      	str	r3, [r7, #24]
    if (index >= pool_id->pool_sz) {
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	689b      	ldr	r3, [r3, #8]
 800860a:	69ba      	ldr	r2, [r7, #24]
 800860c:	429a      	cmp	r2, r3
 800860e:	d301      	bcc.n	8008614 <osPoolAlloc+0x5a>
      index = 0;
 8008610:	2300      	movs	r3, #0
 8008612:	61bb      	str	r3, [r7, #24]
    }
    
    if (pool_id->markers[index] == 0) {
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	685a      	ldr	r2, [r3, #4]
 8008618:	69bb      	ldr	r3, [r7, #24]
 800861a:	4413      	add	r3, r2
 800861c:	781b      	ldrb	r3, [r3, #0]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d113      	bne.n	800864a <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	685a      	ldr	r2, [r3, #4]
 8008626:	69bb      	ldr	r3, [r7, #24]
 8008628:	4413      	add	r3, r2
 800862a:	2201      	movs	r2, #1
 800862c:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	4619      	mov	r1, r3
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	68db      	ldr	r3, [r3, #12]
 8008638:	69ba      	ldr	r2, [r7, #24]
 800863a:	fb02 f303 	mul.w	r3, r2, r3
 800863e:	440b      	add	r3, r1
 8008640:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	69ba      	ldr	r2, [r7, #24]
 8008646:	611a      	str	r2, [r3, #16]
      break;
 8008648:	e007      	b.n	800865a <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 800864a:	69fb      	ldr	r3, [r7, #28]
 800864c:	3301      	adds	r3, #1
 800864e:	61fb      	str	r3, [r7, #28]
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	689b      	ldr	r3, [r3, #8]
 8008654:	69fa      	ldr	r2, [r7, #28]
 8008656:	429a      	cmp	r2, r3
 8008658:	d3d0      	bcc.n	80085fc <osPoolAlloc+0x42>
    }
  }
  
  if (inHandlerMode()) {
 800865a:	f7ff fdb1 	bl	80081c0 <inHandlerMode>
 800865e:	4603      	mov	r3, r0
 8008660:	2b00      	cmp	r3, #0
 8008662:	d005      	beq.n	8008670 <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 8008664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008666:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	f383 8811 	msr	BASEPRI, r3
 800866e:	e001      	b.n	8008674 <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 8008670:	f003 fb12 	bl	800bc98 <vPortExitCritical>
  }
  
  return p;
 8008674:	6a3b      	ldr	r3, [r7, #32]
}
 8008676:	4618      	mov	r0, r3
 8008678:	3728      	adds	r7, #40	; 0x28
 800867a:	46bd      	mov	sp, r7
 800867c:	bd80      	pop	{r7, pc}

0800867e <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 800867e:	b480      	push	{r7}
 8008680:	b085      	sub	sp, #20
 8008682:	af00      	add	r7, sp, #0
 8008684:	6078      	str	r0, [r7, #4]
 8008686:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d101      	bne.n	8008692 <osPoolFree+0x14>
    return osErrorParameter;
 800868e:	2380      	movs	r3, #128	; 0x80
 8008690:	e030      	b.n	80086f4 <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d101      	bne.n	800869c <osPoolFree+0x1e>
    return osErrorParameter;
 8008698:	2380      	movs	r3, #128	; 0x80
 800869a:	e02b      	b.n	80086f4 <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	683a      	ldr	r2, [r7, #0]
 80086a2:	429a      	cmp	r2, r3
 80086a4:	d201      	bcs.n	80086aa <osPoolFree+0x2c>
    return osErrorParameter;
 80086a6:	2380      	movs	r3, #128	; 0x80
 80086a8:	e024      	b.n	80086f4 <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	687a      	ldr	r2, [r7, #4]
 80086ae:	6812      	ldr	r2, [r2, #0]
 80086b0:	1a9b      	subs	r3, r3, r2
 80086b2:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	68da      	ldr	r2, [r3, #12]
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	fbb3 f1f2 	udiv	r1, r3, r2
 80086be:	fb02 f201 	mul.w	r2, r2, r1
 80086c2:	1a9b      	subs	r3, r3, r2
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d001      	beq.n	80086cc <osPoolFree+0x4e>
    return osErrorParameter;
 80086c8:	2380      	movs	r3, #128	; 0x80
 80086ca:	e013      	b.n	80086f4 <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	68db      	ldr	r3, [r3, #12]
 80086d0:	68fa      	ldr	r2, [r7, #12]
 80086d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80086d6:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	689b      	ldr	r3, [r3, #8]
 80086dc:	68fa      	ldr	r2, [r7, #12]
 80086de:	429a      	cmp	r2, r3
 80086e0:	d301      	bcc.n	80086e6 <osPoolFree+0x68>
    return osErrorParameter;
 80086e2:	2380      	movs	r3, #128	; 0x80
 80086e4:	e006      	b.n	80086f4 <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	685a      	ldr	r2, [r3, #4]
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	4413      	add	r3, r2
 80086ee:	2200      	movs	r2, #0
 80086f0:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 80086f2:	2300      	movs	r3, #0
}
 80086f4:	4618      	mov	r0, r3
 80086f6:	3714      	adds	r7, #20
 80086f8:	46bd      	mov	sp, r7
 80086fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fe:	4770      	bx	lr

08008700 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8008700:	b590      	push	{r4, r7, lr}
 8008702:	b085      	sub	sp, #20
 8008704:	af02      	add	r7, sp, #8
 8008706:	6078      	str	r0, [r7, #4]
 8008708:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	689b      	ldr	r3, [r3, #8]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d012      	beq.n	8008738 <osMessageCreate+0x38>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	68db      	ldr	r3, [r3, #12]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d00e      	beq.n	8008738 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6818      	ldr	r0, [r3, #0]
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	6859      	ldr	r1, [r3, #4]
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	689a      	ldr	r2, [r3, #8]
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	68dc      	ldr	r4, [r3, #12]
 800872a:	2300      	movs	r3, #0
 800872c:	9300      	str	r3, [sp, #0]
 800872e:	4623      	mov	r3, r4
 8008730:	f000 fb6c 	bl	8008e0c <xQueueGenericCreateStatic>
 8008734:	4603      	mov	r3, r0
 8008736:	e008      	b.n	800874a <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	6818      	ldr	r0, [r3, #0]
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	685b      	ldr	r3, [r3, #4]
 8008740:	2200      	movs	r2, #0
 8008742:	4619      	mov	r1, r3
 8008744:	f000 fbd4 	bl	8008ef0 <xQueueGenericCreate>
 8008748:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800874a:	4618      	mov	r0, r3
 800874c:	370c      	adds	r7, #12
 800874e:	46bd      	mov	sp, r7
 8008750:	bd90      	pop	{r4, r7, pc}
	...

08008754 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b086      	sub	sp, #24
 8008758:	af00      	add	r7, sp, #0
 800875a:	60f8      	str	r0, [r7, #12]
 800875c:	60b9      	str	r1, [r7, #8]
 800875e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8008760:	2300      	movs	r3, #0
 8008762:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8008768:	697b      	ldr	r3, [r7, #20]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d101      	bne.n	8008772 <osMessagePut+0x1e>
    ticks = 1;
 800876e:	2301      	movs	r3, #1
 8008770:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8008772:	f7ff fd25 	bl	80081c0 <inHandlerMode>
 8008776:	4603      	mov	r3, r0
 8008778:	2b00      	cmp	r3, #0
 800877a:	d018      	beq.n	80087ae <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800877c:	f107 0210 	add.w	r2, r7, #16
 8008780:	f107 0108 	add.w	r1, r7, #8
 8008784:	2300      	movs	r3, #0
 8008786:	68f8      	ldr	r0, [r7, #12]
 8008788:	f000 fdbe 	bl	8009308 <xQueueGenericSendFromISR>
 800878c:	4603      	mov	r3, r0
 800878e:	2b01      	cmp	r3, #1
 8008790:	d001      	beq.n	8008796 <osMessagePut+0x42>
      return osErrorOS;
 8008792:	23ff      	movs	r3, #255	; 0xff
 8008794:	e018      	b.n	80087c8 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008796:	693b      	ldr	r3, [r7, #16]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d014      	beq.n	80087c6 <osMessagePut+0x72>
 800879c:	4b0c      	ldr	r3, [pc, #48]	; (80087d0 <osMessagePut+0x7c>)
 800879e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087a2:	601a      	str	r2, [r3, #0]
 80087a4:	f3bf 8f4f 	dsb	sy
 80087a8:	f3bf 8f6f 	isb	sy
 80087ac:	e00b      	b.n	80087c6 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80087ae:	f107 0108 	add.w	r1, r7, #8
 80087b2:	2300      	movs	r3, #0
 80087b4:	697a      	ldr	r2, [r7, #20]
 80087b6:	68f8      	ldr	r0, [r7, #12]
 80087b8:	f000 fcac 	bl	8009114 <xQueueGenericSend>
 80087bc:	4603      	mov	r3, r0
 80087be:	2b01      	cmp	r3, #1
 80087c0:	d001      	beq.n	80087c6 <osMessagePut+0x72>
      return osErrorOS;
 80087c2:	23ff      	movs	r3, #255	; 0xff
 80087c4:	e000      	b.n	80087c8 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80087c6:	2300      	movs	r3, #0
}
 80087c8:	4618      	mov	r0, r3
 80087ca:	3718      	adds	r7, #24
 80087cc:	46bd      	mov	sp, r7
 80087ce:	bd80      	pop	{r7, pc}
 80087d0:	e000ed04 	.word	0xe000ed04

080087d4 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80087d4:	b590      	push	{r4, r7, lr}
 80087d6:	b08b      	sub	sp, #44	; 0x2c
 80087d8:	af00      	add	r7, sp, #0
 80087da:	60f8      	str	r0, [r7, #12]
 80087dc:	60b9      	str	r1, [r7, #8]
 80087de:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80087e4:	2300      	movs	r3, #0
 80087e6:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80087e8:	68bb      	ldr	r3, [r7, #8]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d10a      	bne.n	8008804 <osMessageGet+0x30>
    event.status = osErrorParameter;
 80087ee:	2380      	movs	r3, #128	; 0x80
 80087f0:	617b      	str	r3, [r7, #20]
    return event;
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	461c      	mov	r4, r3
 80087f6:	f107 0314 	add.w	r3, r7, #20
 80087fa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80087fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008802:	e054      	b.n	80088ae <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8008804:	2300      	movs	r3, #0
 8008806:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8008808:	2300      	movs	r3, #0
 800880a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008812:	d103      	bne.n	800881c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8008814:	f04f 33ff 	mov.w	r3, #4294967295
 8008818:	627b      	str	r3, [r7, #36]	; 0x24
 800881a:	e009      	b.n	8008830 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d006      	beq.n	8008830 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8008826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008828:	2b00      	cmp	r3, #0
 800882a:	d101      	bne.n	8008830 <osMessageGet+0x5c>
      ticks = 1;
 800882c:	2301      	movs	r3, #1
 800882e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8008830:	f7ff fcc6 	bl	80081c0 <inHandlerMode>
 8008834:	4603      	mov	r3, r0
 8008836:	2b00      	cmp	r3, #0
 8008838:	d01c      	beq.n	8008874 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800883a:	f107 0220 	add.w	r2, r7, #32
 800883e:	f107 0314 	add.w	r3, r7, #20
 8008842:	3304      	adds	r3, #4
 8008844:	4619      	mov	r1, r3
 8008846:	68b8      	ldr	r0, [r7, #8]
 8008848:	f001 f860 	bl	800990c <xQueueReceiveFromISR>
 800884c:	4603      	mov	r3, r0
 800884e:	2b01      	cmp	r3, #1
 8008850:	d102      	bne.n	8008858 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8008852:	2310      	movs	r3, #16
 8008854:	617b      	str	r3, [r7, #20]
 8008856:	e001      	b.n	800885c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8008858:	2300      	movs	r3, #0
 800885a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800885c:	6a3b      	ldr	r3, [r7, #32]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d01d      	beq.n	800889e <osMessageGet+0xca>
 8008862:	4b15      	ldr	r3, [pc, #84]	; (80088b8 <osMessageGet+0xe4>)
 8008864:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008868:	601a      	str	r2, [r3, #0]
 800886a:	f3bf 8f4f 	dsb	sy
 800886e:	f3bf 8f6f 	isb	sy
 8008872:	e014      	b.n	800889e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8008874:	f107 0314 	add.w	r3, r7, #20
 8008878:	3304      	adds	r3, #4
 800887a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800887c:	4619      	mov	r1, r3
 800887e:	68b8      	ldr	r0, [r7, #8]
 8008880:	f000 fe60 	bl	8009544 <xQueueReceive>
 8008884:	4603      	mov	r3, r0
 8008886:	2b01      	cmp	r3, #1
 8008888:	d102      	bne.n	8008890 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800888a:	2310      	movs	r3, #16
 800888c:	617b      	str	r3, [r7, #20]
 800888e:	e006      	b.n	800889e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8008890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008892:	2b00      	cmp	r3, #0
 8008894:	d101      	bne.n	800889a <osMessageGet+0xc6>
 8008896:	2300      	movs	r3, #0
 8008898:	e000      	b.n	800889c <osMessageGet+0xc8>
 800889a:	2340      	movs	r3, #64	; 0x40
 800889c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	461c      	mov	r4, r3
 80088a2:	f107 0314 	add.w	r3, r7, #20
 80088a6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80088aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80088ae:	68f8      	ldr	r0, [r7, #12]
 80088b0:	372c      	adds	r7, #44	; 0x2c
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bd90      	pop	{r4, r7, pc}
 80088b6:	bf00      	nop
 80088b8:	e000ed04 	.word	0xe000ed04

080088bc <osMailCreate>:
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 80088bc:	b590      	push	{r4, r7, lr}
 80088be:	b087      	sub	sp, #28
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
 80088c4:	6039      	str	r1, [r7, #0]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	60fb      	str	r3, [r7, #12]
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	685b      	ldr	r3, [r3, #4]
 80088d0:	613b      	str	r3, [r7, #16]
 80088d2:	2300      	movs	r3, #0
 80088d4:	617b      	str	r3, [r7, #20]
  
  /* Create a mail queue control block */

  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	689c      	ldr	r4, [r3, #8]
 80088da:	200c      	movs	r0, #12
 80088dc:	f003 fac8 	bl	800be70 <pvPortMalloc>
 80088e0:	4603      	mov	r3, r0
 80088e2:	6023      	str	r3, [r4, #0]

  if (*(queue_def->cb) == NULL) {
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	689b      	ldr	r3, [r3, #8]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d101      	bne.n	80088f2 <osMailCreate+0x36>
    return NULL;
 80088ee:	2300      	movs	r3, #0
 80088f0:	e038      	b.n	8008964 <osMailCreate+0xa8>
  }
  (*(queue_def->cb))->queue_def = queue_def;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	689b      	ldr	r3, [r3, #8]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	687a      	ldr	r2, [r7, #4]
 80088fa:	601a      	str	r2, [r3, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6818      	ldr	r0, [r3, #0]
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	689b      	ldr	r3, [r3, #8]
 8008904:	681c      	ldr	r4, [r3, #0]
 8008906:	2200      	movs	r2, #0
 8008908:	2104      	movs	r1, #4
 800890a:	f000 faf1 	bl	8008ef0 <xQueueGenericCreate>
 800890e:	4603      	mov	r3, r0
 8008910:	6063      	str	r3, [r4, #4]


  if ((*(queue_def->cb))->handle == NULL) {
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	689b      	ldr	r3, [r3, #8]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	685b      	ldr	r3, [r3, #4]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d107      	bne.n	800892e <osMailCreate+0x72>
    vPortFree(*(queue_def->cb));
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	689b      	ldr	r3, [r3, #8]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	4618      	mov	r0, r3
 8008926:	f003 fb69 	bl	800bffc <vPortFree>
    return NULL;
 800892a:	2300      	movs	r3, #0
 800892c:	e01a      	b.n	8008964 <osMailCreate+0xa8>
  }
  
  /* Create a mail pool */
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	689b      	ldr	r3, [r3, #8]
 8008932:	681c      	ldr	r4, [r3, #0]
 8008934:	f107 030c 	add.w	r3, r7, #12
 8008938:	4618      	mov	r0, r3
 800893a:	f7ff fde1 	bl	8008500 <osPoolCreate>
 800893e:	4603      	mov	r3, r0
 8008940:	60a3      	str	r3, [r4, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	689b      	ldr	r3, [r3, #8]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	689b      	ldr	r3, [r3, #8]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d107      	bne.n	800895e <osMailCreate+0xa2>
    //TODO: Delete queue. How to do it in FreeRTOS?
    vPortFree(*(queue_def->cb));
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	689b      	ldr	r3, [r3, #8]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	4618      	mov	r0, r3
 8008956:	f003 fb51 	bl	800bffc <vPortFree>
    return NULL;
 800895a:	2300      	movs	r3, #0
 800895c:	e002      	b.n	8008964 <osMailCreate+0xa8>
  }
  
  return *(queue_def->cb);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	689b      	ldr	r3, [r3, #8]
 8008962:	681b      	ldr	r3, [r3, #0]
#else
  return NULL;
#endif
}
 8008964:	4618      	mov	r0, r3
 8008966:	371c      	adds	r7, #28
 8008968:	46bd      	mov	sp, r7
 800896a:	bd90      	pop	{r4, r7, pc}

0800896c <osMailAlloc>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval pointer to memory block that can be filled with mail or NULL in case error.
* @note   MUST REMAIN UNCHANGED: \b osMailAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osMailAlloc (osMailQId queue_id, uint32_t millisec)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b084      	sub	sp, #16
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
 8008974:	6039      	str	r1, [r7, #0]
  (void) millisec;
  void *p;
  
  
  if (queue_id == NULL) {
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d101      	bne.n	8008980 <osMailAlloc+0x14>
    return NULL;
 800897c:	2300      	movs	r3, #0
 800897e:	e006      	b.n	800898e <osMailAlloc+0x22>
  }
  
  p = osPoolAlloc(queue_id->pool);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	689b      	ldr	r3, [r3, #8]
 8008984:	4618      	mov	r0, r3
 8008986:	f7ff fe18 	bl	80085ba <osPoolAlloc>
 800898a:	60f8      	str	r0, [r7, #12]
  
  return p;
 800898c:	68fb      	ldr	r3, [r7, #12]
}
 800898e:	4618      	mov	r0, r3
 8008990:	3710      	adds	r7, #16
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}
	...

08008998 <osMailPut>:
* @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAlloc.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailPut (osMailQId queue_id, void *mail)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b084      	sub	sp, #16
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
 80089a0:	6039      	str	r1, [r7, #0]
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d101      	bne.n	80089ac <osMailPut+0x14>
    return osErrorParameter;
 80089a8:	2380      	movs	r3, #128	; 0x80
 80089aa:	e02c      	b.n	8008a06 <osMailPut+0x6e>
  }
  
  taskWoken = pdFALSE;
 80089ac:	2300      	movs	r3, #0
 80089ae:	60fb      	str	r3, [r7, #12]
  
  if (inHandlerMode()) {
 80089b0:	f7ff fc06 	bl	80081c0 <inHandlerMode>
 80089b4:	4603      	mov	r3, r0
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d018      	beq.n	80089ec <osMailPut+0x54>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	6858      	ldr	r0, [r3, #4]
 80089be:	f107 020c 	add.w	r2, r7, #12
 80089c2:	4639      	mov	r1, r7
 80089c4:	2300      	movs	r3, #0
 80089c6:	f000 fc9f 	bl	8009308 <xQueueGenericSendFromISR>
 80089ca:	4603      	mov	r3, r0
 80089cc:	2b01      	cmp	r3, #1
 80089ce:	d001      	beq.n	80089d4 <osMailPut+0x3c>
      return osErrorOS;
 80089d0:	23ff      	movs	r3, #255	; 0xff
 80089d2:	e018      	b.n	8008a06 <osMailPut+0x6e>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d014      	beq.n	8008a04 <osMailPut+0x6c>
 80089da:	4b0d      	ldr	r3, [pc, #52]	; (8008a10 <osMailPut+0x78>)
 80089dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089e0:	601a      	str	r2, [r3, #0]
 80089e2:	f3bf 8f4f 	dsb	sy
 80089e6:	f3bf 8f6f 	isb	sy
 80089ea:	e00b      	b.n	8008a04 <osMailPut+0x6c>
  }
  else {
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	6858      	ldr	r0, [r3, #4]
 80089f0:	4639      	mov	r1, r7
 80089f2:	2300      	movs	r3, #0
 80089f4:	2200      	movs	r2, #0
 80089f6:	f000 fb8d 	bl	8009114 <xQueueGenericSend>
 80089fa:	4603      	mov	r3, r0
 80089fc:	2b01      	cmp	r3, #1
 80089fe:	d001      	beq.n	8008a04 <osMailPut+0x6c>
      return osErrorOS;
 8008a00:	23ff      	movs	r3, #255	; 0xff
 8008a02:	e000      	b.n	8008a06 <osMailPut+0x6e>
    }
  }
  
  return osOK;
 8008a04:	2300      	movs	r3, #0
}
 8008a06:	4618      	mov	r0, r3
 8008a08:	3710      	adds	r7, #16
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bd80      	pop	{r7, pc}
 8008a0e:	bf00      	nop
 8008a10:	e000ed04 	.word	0xe000ed04

08008a14 <osMailGet>:
* @param millisec    timeout value or 0 in case of no time-out
* @retval event that contains mail information or error code.
* @note   MUST REMAIN UNCHANGED: \b osMailGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMailGet (osMailQId queue_id, uint32_t millisec)
{
 8008a14:	b590      	push	{r4, r7, lr}
 8008a16:	b08b      	sub	sp, #44	; 0x2c
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	60f8      	str	r0, [r7, #12]
 8008a1c:	60b9      	str	r1, [r7, #8]
 8008a1e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.mail_id = queue_id;
 8008a20:	68bb      	ldr	r3, [r7, #8]
 8008a22:	61fb      	str	r3, [r7, #28]
  
  if (queue_id == NULL) {
 8008a24:	68bb      	ldr	r3, [r7, #8]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d10a      	bne.n	8008a40 <osMailGet+0x2c>
    event.status = osErrorParameter;
 8008a2a:	2380      	movs	r3, #128	; 0x80
 8008a2c:	617b      	str	r3, [r7, #20]
    return event;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	461c      	mov	r4, r3
 8008a32:	f107 0314 	add.w	r3, r7, #20
 8008a36:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008a3a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008a3e:	e056      	b.n	8008aee <osMailGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8008a40:	2300      	movs	r3, #0
 8008a42:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8008a44:	2300      	movs	r3, #0
 8008a46:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a4e:	d103      	bne.n	8008a58 <osMailGet+0x44>
    ticks = portMAX_DELAY;
 8008a50:	f04f 33ff 	mov.w	r3, #4294967295
 8008a54:	627b      	str	r3, [r7, #36]	; 0x24
 8008a56:	e009      	b.n	8008a6c <osMailGet+0x58>
  }
  else if (millisec != 0) {
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d006      	beq.n	8008a6c <osMailGet+0x58>
    ticks = millisec / portTICK_PERIOD_MS;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8008a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d101      	bne.n	8008a6c <osMailGet+0x58>
      ticks = 1;
 8008a68:	2301      	movs	r3, #1
 8008a6a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8008a6c:	f7ff fba8 	bl	80081c0 <inHandlerMode>
 8008a70:	4603      	mov	r3, r0
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d01d      	beq.n	8008ab2 <osMailGet+0x9e>
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 8008a76:	68bb      	ldr	r3, [r7, #8]
 8008a78:	6858      	ldr	r0, [r3, #4]
 8008a7a:	f107 0220 	add.w	r2, r7, #32
 8008a7e:	f107 0314 	add.w	r3, r7, #20
 8008a82:	3304      	adds	r3, #4
 8008a84:	4619      	mov	r1, r3
 8008a86:	f000 ff41 	bl	800990c <xQueueReceiveFromISR>
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	2b01      	cmp	r3, #1
 8008a8e:	d102      	bne.n	8008a96 <osMailGet+0x82>
      /* We have mail */
      event.status = osEventMail;
 8008a90:	2320      	movs	r3, #32
 8008a92:	617b      	str	r3, [r7, #20]
 8008a94:	e001      	b.n	8008a9a <osMailGet+0x86>
    }
    else {
      event.status = osOK;
 8008a96:	2300      	movs	r3, #0
 8008a98:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008a9a:	6a3b      	ldr	r3, [r7, #32]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d01e      	beq.n	8008ade <osMailGet+0xca>
 8008aa0:	4b15      	ldr	r3, [pc, #84]	; (8008af8 <osMailGet+0xe4>)
 8008aa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008aa6:	601a      	str	r2, [r3, #0]
 8008aa8:	f3bf 8f4f 	dsb	sy
 8008aac:	f3bf 8f6f 	isb	sy
 8008ab0:	e015      	b.n	8008ade <osMailGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
 8008ab2:	68bb      	ldr	r3, [r7, #8]
 8008ab4:	6858      	ldr	r0, [r3, #4]
 8008ab6:	f107 0314 	add.w	r3, r7, #20
 8008aba:	3304      	adds	r3, #4
 8008abc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008abe:	4619      	mov	r1, r3
 8008ac0:	f000 fd40 	bl	8009544 <xQueueReceive>
 8008ac4:	4603      	mov	r3, r0
 8008ac6:	2b01      	cmp	r3, #1
 8008ac8:	d102      	bne.n	8008ad0 <osMailGet+0xbc>
      /* We have mail */
      event.status = osEventMail;
 8008aca:	2320      	movs	r3, #32
 8008acc:	617b      	str	r3, [r7, #20]
 8008ace:	e006      	b.n	8008ade <osMailGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8008ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d101      	bne.n	8008ada <osMailGet+0xc6>
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	e000      	b.n	8008adc <osMailGet+0xc8>
 8008ada:	2340      	movs	r3, #64	; 0x40
 8008adc:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	461c      	mov	r4, r3
 8008ae2:	f107 0314 	add.w	r3, r7, #20
 8008ae6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008aea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8008aee:	68f8      	ldr	r0, [r7, #12]
 8008af0:	372c      	adds	r7, #44	; 0x2c
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd90      	pop	{r4, r7, pc}
 8008af6:	bf00      	nop
 8008af8:	e000ed04 	.word	0xe000ed04

08008afc <osMailFree>:
* @param  mail     pointer to the memory block that was obtained with \ref osMailGet.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailFree (osMailQId queue_id, void *mail)
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b082      	sub	sp, #8
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
 8008b04:	6039      	str	r1, [r7, #0]
  if (queue_id == NULL) {
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d101      	bne.n	8008b10 <osMailFree+0x14>
    return osErrorParameter;
 8008b0c:	2380      	movs	r3, #128	; 0x80
 8008b0e:	e006      	b.n	8008b1e <osMailFree+0x22>
  }
  
  return osPoolFree(queue_id->pool, mail);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	689b      	ldr	r3, [r3, #8]
 8008b14:	6839      	ldr	r1, [r7, #0]
 8008b16:	4618      	mov	r0, r3
 8008b18:	f7ff fdb1 	bl	800867e <osPoolFree>
 8008b1c:	4603      	mov	r3, r0
}
 8008b1e:	4618      	mov	r0, r3
 8008b20:	3708      	adds	r7, #8
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bd80      	pop	{r7, pc}

08008b26 <osRecursiveMutexCreate>:
* @brief  Create and Initialize a Recursive Mutex
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error..
*/
osMutexId osRecursiveMutexCreate (const osMutexDef_t *mutex_def)
{
 8008b26:	b580      	push	{r7, lr}
 8008b28:	b082      	sub	sp, #8
 8008b2a:	af00      	add	r7, sp, #0
 8008b2c:	6078      	str	r0, [r7, #4]
#if (configUSE_RECURSIVE_MUTEXES == 1)
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL){
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	685b      	ldr	r3, [r3, #4]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d007      	beq.n	8008b46 <osRecursiveMutexCreate+0x20>
    return xSemaphoreCreateRecursiveMutexStatic( mutex_def->controlblock );
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	685b      	ldr	r3, [r3, #4]
 8008b3a:	4619      	mov	r1, r3
 8008b3c:	2004      	movs	r0, #4
 8008b3e:	f000 fa65 	bl	800900c <xQueueCreateMutexStatic>
 8008b42:	4603      	mov	r3, r0
 8008b44:	e003      	b.n	8008b4e <osRecursiveMutexCreate+0x28>
  }
  else {
    return xSemaphoreCreateRecursiveMutex();
 8008b46:	2004      	movs	r0, #4
 8008b48:	f000 fa48 	bl	8008fdc <xQueueCreateMutex>
 8008b4c:	4603      	mov	r3, r0
  return xSemaphoreCreateRecursiveMutex();
#endif
#else
  return NULL;
#endif	
}
 8008b4e:	4618      	mov	r0, r3
 8008b50:	3708      	adds	r7, #8
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bd80      	pop	{r7, pc}

08008b56 <osRecursiveMutexRelease>:
* @brief  Release a Recursive Mutex
* @param   mutex_id      mutex ID obtained by \ref osRecursiveMutexCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osRecursiveMutexRelease (osMutexId mutex_id)
{
 8008b56:	b580      	push	{r7, lr}
 8008b58:	b084      	sub	sp, #16
 8008b5a:	af00      	add	r7, sp, #0
 8008b5c:	6078      	str	r0, [r7, #4]
#if (configUSE_RECURSIVE_MUTEXES == 1)
  osStatus result = osOK;
 8008b5e:	2300      	movs	r3, #0
 8008b60:	60fb      	str	r3, [r7, #12]
 
  if (xSemaphoreGiveRecursive(mutex_id) != pdTRUE) 
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	f000 fa6d 	bl	8009042 <xQueueGiveMutexRecursive>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	2b01      	cmp	r3, #1
 8008b6c:	d001      	beq.n	8008b72 <osRecursiveMutexRelease+0x1c>
  {
    result = osErrorOS;
 8008b6e:	23ff      	movs	r3, #255	; 0xff
 8008b70:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8008b72:	68fb      	ldr	r3, [r7, #12]
#else
	return osErrorResource;
#endif
}
 8008b74:	4618      	mov	r0, r3
 8008b76:	3710      	adds	r7, #16
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	bd80      	pop	{r7, pc}

08008b7c <osRecursiveMutexWait>:
* @param   mutex_id    mutex ID obtained by \ref osRecursiveMutexCreate.
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osRecursiveMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b084      	sub	sp, #16
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
 8008b84:	6039      	str	r1, [r7, #0]
#if (configUSE_RECURSIVE_MUTEXES == 1)
  TickType_t ticks;
  
  if (mutex_id == NULL)
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d101      	bne.n	8008b90 <osRecursiveMutexWait+0x14>
  {
    return osErrorParameter;
 8008b8c:	2380      	movs	r3, #128	; 0x80
 8008b8e:	e01d      	b.n	8008bcc <osRecursiveMutexWait+0x50>
  }
  
  ticks = 0;
 8008b90:	2300      	movs	r3, #0
 8008b92:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) 
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b9a:	d103      	bne.n	8008ba4 <osRecursiveMutexWait+0x28>
  {
    ticks = portMAX_DELAY;
 8008b9c:	f04f 33ff 	mov.w	r3, #4294967295
 8008ba0:	60fb      	str	r3, [r7, #12]
 8008ba2:	e009      	b.n	8008bb8 <osRecursiveMutexWait+0x3c>
  }
  else if (millisec != 0) 
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d006      	beq.n	8008bb8 <osRecursiveMutexWait+0x3c>
  {
    ticks = millisec / portTICK_PERIOD_MS;
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) 
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d101      	bne.n	8008bb8 <osRecursiveMutexWait+0x3c>
    {
      ticks = 1;
 8008bb4:	2301      	movs	r3, #1
 8008bb6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (xSemaphoreTakeRecursive(mutex_id, ticks) != pdTRUE) 
 8008bb8:	68f9      	ldr	r1, [r7, #12]
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f000 fa74 	bl	80090a8 <xQueueTakeMutexRecursive>
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	2b01      	cmp	r3, #1
 8008bc4:	d001      	beq.n	8008bca <osRecursiveMutexWait+0x4e>
  {
    return osErrorOS;
 8008bc6:	23ff      	movs	r3, #255	; 0xff
 8008bc8:	e000      	b.n	8008bcc <osRecursiveMutexWait+0x50>
  }
  return osOK;
 8008bca:	2300      	movs	r3, #0
#else
	return osErrorResource;
#endif
}
 8008bcc:	4618      	mov	r0, r3
 8008bce:	3710      	adds	r7, #16
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	bd80      	pop	{r7, pc}

08008bd4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	b083      	sub	sp, #12
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	f103 0208 	add.w	r2, r3, #8
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	f04f 32ff 	mov.w	r2, #4294967295
 8008bec:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	f103 0208 	add.w	r2, r3, #8
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	f103 0208 	add.w	r2, r3, #8
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	2200      	movs	r2, #0
 8008c06:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008c08:	bf00      	nop
 8008c0a:	370c      	adds	r7, #12
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c12:	4770      	bx	lr

08008c14 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008c14:	b480      	push	{r7}
 8008c16:	b083      	sub	sp, #12
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2200      	movs	r2, #0
 8008c20:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008c22:	bf00      	nop
 8008c24:	370c      	adds	r7, #12
 8008c26:	46bd      	mov	sp, r7
 8008c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2c:	4770      	bx	lr

08008c2e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008c2e:	b480      	push	{r7}
 8008c30:	b085      	sub	sp, #20
 8008c32:	af00      	add	r7, sp, #0
 8008c34:	6078      	str	r0, [r7, #4]
 8008c36:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	685b      	ldr	r3, [r3, #4]
 8008c3c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	68fa      	ldr	r2, [r7, #12]
 8008c42:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	689a      	ldr	r2, [r3, #8]
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	689b      	ldr	r3, [r3, #8]
 8008c50:	683a      	ldr	r2, [r7, #0]
 8008c52:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	683a      	ldr	r2, [r7, #0]
 8008c58:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	687a      	ldr	r2, [r7, #4]
 8008c5e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	1c5a      	adds	r2, r3, #1
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	601a      	str	r2, [r3, #0]
}
 8008c6a:	bf00      	nop
 8008c6c:	3714      	adds	r7, #20
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c74:	4770      	bx	lr

08008c76 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008c76:	b480      	push	{r7}
 8008c78:	b085      	sub	sp, #20
 8008c7a:	af00      	add	r7, sp, #0
 8008c7c:	6078      	str	r0, [r7, #4]
 8008c7e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008c86:	68bb      	ldr	r3, [r7, #8]
 8008c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c8c:	d103      	bne.n	8008c96 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	691b      	ldr	r3, [r3, #16]
 8008c92:	60fb      	str	r3, [r7, #12]
 8008c94:	e00c      	b.n	8008cb0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	3308      	adds	r3, #8
 8008c9a:	60fb      	str	r3, [r7, #12]
 8008c9c:	e002      	b.n	8008ca4 <vListInsert+0x2e>
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	685b      	ldr	r3, [r3, #4]
 8008ca2:	60fb      	str	r3, [r7, #12]
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	685b      	ldr	r3, [r3, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	68ba      	ldr	r2, [r7, #8]
 8008cac:	429a      	cmp	r2, r3
 8008cae:	d2f6      	bcs.n	8008c9e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	685a      	ldr	r2, [r3, #4]
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	685b      	ldr	r3, [r3, #4]
 8008cbc:	683a      	ldr	r2, [r7, #0]
 8008cbe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	68fa      	ldr	r2, [r7, #12]
 8008cc4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	683a      	ldr	r2, [r7, #0]
 8008cca:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	687a      	ldr	r2, [r7, #4]
 8008cd0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	1c5a      	adds	r2, r3, #1
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	601a      	str	r2, [r3, #0]
}
 8008cdc:	bf00      	nop
 8008cde:	3714      	adds	r7, #20
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce6:	4770      	bx	lr

08008ce8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008ce8:	b480      	push	{r7}
 8008cea:	b085      	sub	sp, #20
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	691b      	ldr	r3, [r3, #16]
 8008cf4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	685b      	ldr	r3, [r3, #4]
 8008cfa:	687a      	ldr	r2, [r7, #4]
 8008cfc:	6892      	ldr	r2, [r2, #8]
 8008cfe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	689b      	ldr	r3, [r3, #8]
 8008d04:	687a      	ldr	r2, [r7, #4]
 8008d06:	6852      	ldr	r2, [r2, #4]
 8008d08:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	685b      	ldr	r3, [r3, #4]
 8008d0e:	687a      	ldr	r2, [r7, #4]
 8008d10:	429a      	cmp	r2, r3
 8008d12:	d103      	bne.n	8008d1c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	689a      	ldr	r2, [r3, #8]
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2200      	movs	r2, #0
 8008d20:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	1e5a      	subs	r2, r3, #1
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	681b      	ldr	r3, [r3, #0]
}
 8008d30:	4618      	mov	r0, r3
 8008d32:	3714      	adds	r7, #20
 8008d34:	46bd      	mov	sp, r7
 8008d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3a:	4770      	bx	lr

08008d3c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b084      	sub	sp, #16
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
 8008d44:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d109      	bne.n	8008d64 <xQueueGenericReset+0x28>
	__asm volatile
 8008d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d54:	f383 8811 	msr	BASEPRI, r3
 8008d58:	f3bf 8f6f 	isb	sy
 8008d5c:	f3bf 8f4f 	dsb	sy
 8008d60:	60bb      	str	r3, [r7, #8]
 8008d62:	e7fe      	b.n	8008d62 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8008d64:	f002 ff6a 	bl	800bc3c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	681a      	ldr	r2, [r3, #0]
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d70:	68f9      	ldr	r1, [r7, #12]
 8008d72:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008d74:	fb01 f303 	mul.w	r3, r1, r3
 8008d78:	441a      	add	r2, r3
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	2200      	movs	r2, #0
 8008d82:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	681a      	ldr	r2, [r3, #0]
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	681a      	ldr	r2, [r3, #0]
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d94:	3b01      	subs	r3, #1
 8008d96:	68f9      	ldr	r1, [r7, #12]
 8008d98:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008d9a:	fb01 f303 	mul.w	r3, r1, r3
 8008d9e:	441a      	add	r2, r3
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	22ff      	movs	r2, #255	; 0xff
 8008da8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	22ff      	movs	r2, #255	; 0xff
 8008db0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d114      	bne.n	8008de4 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	691b      	ldr	r3, [r3, #16]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d01a      	beq.n	8008df8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	3310      	adds	r3, #16
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	f001 fc9c 	bl	800a704 <xTaskRemoveFromEventList>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d012      	beq.n	8008df8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008dd2:	4b0d      	ldr	r3, [pc, #52]	; (8008e08 <xQueueGenericReset+0xcc>)
 8008dd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008dd8:	601a      	str	r2, [r3, #0]
 8008dda:	f3bf 8f4f 	dsb	sy
 8008dde:	f3bf 8f6f 	isb	sy
 8008de2:	e009      	b.n	8008df8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	3310      	adds	r3, #16
 8008de8:	4618      	mov	r0, r3
 8008dea:	f7ff fef3 	bl	8008bd4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	3324      	adds	r3, #36	; 0x24
 8008df2:	4618      	mov	r0, r3
 8008df4:	f7ff feee 	bl	8008bd4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008df8:	f002 ff4e 	bl	800bc98 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008dfc:	2301      	movs	r3, #1
}
 8008dfe:	4618      	mov	r0, r3
 8008e00:	3710      	adds	r7, #16
 8008e02:	46bd      	mov	sp, r7
 8008e04:	bd80      	pop	{r7, pc}
 8008e06:	bf00      	nop
 8008e08:	e000ed04 	.word	0xe000ed04

08008e0c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b08e      	sub	sp, #56	; 0x38
 8008e10:	af02      	add	r7, sp, #8
 8008e12:	60f8      	str	r0, [r7, #12]
 8008e14:	60b9      	str	r1, [r7, #8]
 8008e16:	607a      	str	r2, [r7, #4]
 8008e18:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d109      	bne.n	8008e34 <xQueueGenericCreateStatic+0x28>
 8008e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e24:	f383 8811 	msr	BASEPRI, r3
 8008e28:	f3bf 8f6f 	isb	sy
 8008e2c:	f3bf 8f4f 	dsb	sy
 8008e30:	62bb      	str	r3, [r7, #40]	; 0x28
 8008e32:	e7fe      	b.n	8008e32 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d109      	bne.n	8008e4e <xQueueGenericCreateStatic+0x42>
 8008e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e3e:	f383 8811 	msr	BASEPRI, r3
 8008e42:	f3bf 8f6f 	isb	sy
 8008e46:	f3bf 8f4f 	dsb	sy
 8008e4a:	627b      	str	r3, [r7, #36]	; 0x24
 8008e4c:	e7fe      	b.n	8008e4c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d002      	beq.n	8008e5a <xQueueGenericCreateStatic+0x4e>
 8008e54:	68bb      	ldr	r3, [r7, #8]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d001      	beq.n	8008e5e <xQueueGenericCreateStatic+0x52>
 8008e5a:	2301      	movs	r3, #1
 8008e5c:	e000      	b.n	8008e60 <xQueueGenericCreateStatic+0x54>
 8008e5e:	2300      	movs	r3, #0
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d109      	bne.n	8008e78 <xQueueGenericCreateStatic+0x6c>
 8008e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e68:	f383 8811 	msr	BASEPRI, r3
 8008e6c:	f3bf 8f6f 	isb	sy
 8008e70:	f3bf 8f4f 	dsb	sy
 8008e74:	623b      	str	r3, [r7, #32]
 8008e76:	e7fe      	b.n	8008e76 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d102      	bne.n	8008e84 <xQueueGenericCreateStatic+0x78>
 8008e7e:	68bb      	ldr	r3, [r7, #8]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d101      	bne.n	8008e88 <xQueueGenericCreateStatic+0x7c>
 8008e84:	2301      	movs	r3, #1
 8008e86:	e000      	b.n	8008e8a <xQueueGenericCreateStatic+0x7e>
 8008e88:	2300      	movs	r3, #0
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d109      	bne.n	8008ea2 <xQueueGenericCreateStatic+0x96>
 8008e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e92:	f383 8811 	msr	BASEPRI, r3
 8008e96:	f3bf 8f6f 	isb	sy
 8008e9a:	f3bf 8f4f 	dsb	sy
 8008e9e:	61fb      	str	r3, [r7, #28]
 8008ea0:	e7fe      	b.n	8008ea0 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008ea2:	2348      	movs	r3, #72	; 0x48
 8008ea4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008ea6:	697b      	ldr	r3, [r7, #20]
 8008ea8:	2b48      	cmp	r3, #72	; 0x48
 8008eaa:	d009      	beq.n	8008ec0 <xQueueGenericCreateStatic+0xb4>
 8008eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eb0:	f383 8811 	msr	BASEPRI, r3
 8008eb4:	f3bf 8f6f 	isb	sy
 8008eb8:	f3bf 8f4f 	dsb	sy
 8008ebc:	61bb      	str	r3, [r7, #24]
 8008ebe:	e7fe      	b.n	8008ebe <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d00d      	beq.n	8008ee6 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ecc:	2201      	movs	r2, #1
 8008ece:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008ed2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ed8:	9300      	str	r3, [sp, #0]
 8008eda:	4613      	mov	r3, r2
 8008edc:	687a      	ldr	r2, [r7, #4]
 8008ede:	68b9      	ldr	r1, [r7, #8]
 8008ee0:	68f8      	ldr	r0, [r7, #12]
 8008ee2:	f000 f842 	bl	8008f6a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8008ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008ee8:	4618      	mov	r0, r3
 8008eea:	3730      	adds	r7, #48	; 0x30
 8008eec:	46bd      	mov	sp, r7
 8008eee:	bd80      	pop	{r7, pc}

08008ef0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b08a      	sub	sp, #40	; 0x28
 8008ef4:	af02      	add	r7, sp, #8
 8008ef6:	60f8      	str	r0, [r7, #12]
 8008ef8:	60b9      	str	r1, [r7, #8]
 8008efa:	4613      	mov	r3, r2
 8008efc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d109      	bne.n	8008f18 <xQueueGenericCreate+0x28>
 8008f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f08:	f383 8811 	msr	BASEPRI, r3
 8008f0c:	f3bf 8f6f 	isb	sy
 8008f10:	f3bf 8f4f 	dsb	sy
 8008f14:	613b      	str	r3, [r7, #16]
 8008f16:	e7fe      	b.n	8008f16 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8008f18:	68bb      	ldr	r3, [r7, #8]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d102      	bne.n	8008f24 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8008f1e:	2300      	movs	r3, #0
 8008f20:	61fb      	str	r3, [r7, #28]
 8008f22:	e004      	b.n	8008f2e <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	68ba      	ldr	r2, [r7, #8]
 8008f28:	fb02 f303 	mul.w	r3, r2, r3
 8008f2c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8008f2e:	69fb      	ldr	r3, [r7, #28]
 8008f30:	3348      	adds	r3, #72	; 0x48
 8008f32:	4618      	mov	r0, r3
 8008f34:	f002 ff9c 	bl	800be70 <pvPortMalloc>
 8008f38:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008f3a:	69bb      	ldr	r3, [r7, #24]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d00f      	beq.n	8008f60 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8008f40:	69bb      	ldr	r3, [r7, #24]
 8008f42:	3348      	adds	r3, #72	; 0x48
 8008f44:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008f46:	69bb      	ldr	r3, [r7, #24]
 8008f48:	2200      	movs	r2, #0
 8008f4a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008f4e:	79fa      	ldrb	r2, [r7, #7]
 8008f50:	69bb      	ldr	r3, [r7, #24]
 8008f52:	9300      	str	r3, [sp, #0]
 8008f54:	4613      	mov	r3, r2
 8008f56:	697a      	ldr	r2, [r7, #20]
 8008f58:	68b9      	ldr	r1, [r7, #8]
 8008f5a:	68f8      	ldr	r0, [r7, #12]
 8008f5c:	f000 f805 	bl	8008f6a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8008f60:	69bb      	ldr	r3, [r7, #24]
	}
 8008f62:	4618      	mov	r0, r3
 8008f64:	3720      	adds	r7, #32
 8008f66:	46bd      	mov	sp, r7
 8008f68:	bd80      	pop	{r7, pc}

08008f6a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008f6a:	b580      	push	{r7, lr}
 8008f6c:	b084      	sub	sp, #16
 8008f6e:	af00      	add	r7, sp, #0
 8008f70:	60f8      	str	r0, [r7, #12]
 8008f72:	60b9      	str	r1, [r7, #8]
 8008f74:	607a      	str	r2, [r7, #4]
 8008f76:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d103      	bne.n	8008f86 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008f7e:	69bb      	ldr	r3, [r7, #24]
 8008f80:	69ba      	ldr	r2, [r7, #24]
 8008f82:	601a      	str	r2, [r3, #0]
 8008f84:	e002      	b.n	8008f8c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008f86:	69bb      	ldr	r3, [r7, #24]
 8008f88:	687a      	ldr	r2, [r7, #4]
 8008f8a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008f8c:	69bb      	ldr	r3, [r7, #24]
 8008f8e:	68fa      	ldr	r2, [r7, #12]
 8008f90:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008f92:	69bb      	ldr	r3, [r7, #24]
 8008f94:	68ba      	ldr	r2, [r7, #8]
 8008f96:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008f98:	2101      	movs	r1, #1
 8008f9a:	69b8      	ldr	r0, [r7, #24]
 8008f9c:	f7ff fece 	bl	8008d3c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008fa0:	bf00      	nop
 8008fa2:	3710      	adds	r7, #16
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	bd80      	pop	{r7, pc}

08008fa8 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b082      	sub	sp, #8
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d00e      	beq.n	8008fd4 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	2200      	movs	r2, #0
 8008fba:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8008fc8:	2300      	movs	r3, #0
 8008fca:	2200      	movs	r2, #0
 8008fcc:	2100      	movs	r1, #0
 8008fce:	6878      	ldr	r0, [r7, #4]
 8008fd0:	f000 f8a0 	bl	8009114 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8008fd4:	bf00      	nop
 8008fd6:	3708      	adds	r7, #8
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	bd80      	pop	{r7, pc}

08008fdc <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b086      	sub	sp, #24
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	4603      	mov	r3, r0
 8008fe4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008fe6:	2301      	movs	r3, #1
 8008fe8:	617b      	str	r3, [r7, #20]
 8008fea:	2300      	movs	r3, #0
 8008fec:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8008fee:	79fb      	ldrb	r3, [r7, #7]
 8008ff0:	461a      	mov	r2, r3
 8008ff2:	6939      	ldr	r1, [r7, #16]
 8008ff4:	6978      	ldr	r0, [r7, #20]
 8008ff6:	f7ff ff7b 	bl	8008ef0 <xQueueGenericCreate>
 8008ffa:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8008ffc:	68f8      	ldr	r0, [r7, #12]
 8008ffe:	f7ff ffd3 	bl	8008fa8 <prvInitialiseMutex>

		return pxNewQueue;
 8009002:	68fb      	ldr	r3, [r7, #12]
	}
 8009004:	4618      	mov	r0, r3
 8009006:	3718      	adds	r7, #24
 8009008:	46bd      	mov	sp, r7
 800900a:	bd80      	pop	{r7, pc}

0800900c <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800900c:	b580      	push	{r7, lr}
 800900e:	b088      	sub	sp, #32
 8009010:	af02      	add	r7, sp, #8
 8009012:	4603      	mov	r3, r0
 8009014:	6039      	str	r1, [r7, #0]
 8009016:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009018:	2301      	movs	r3, #1
 800901a:	617b      	str	r3, [r7, #20]
 800901c:	2300      	movs	r3, #0
 800901e:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8009020:	79fb      	ldrb	r3, [r7, #7]
 8009022:	9300      	str	r3, [sp, #0]
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	2200      	movs	r2, #0
 8009028:	6939      	ldr	r1, [r7, #16]
 800902a:	6978      	ldr	r0, [r7, #20]
 800902c:	f7ff feee 	bl	8008e0c <xQueueGenericCreateStatic>
 8009030:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8009032:	68f8      	ldr	r0, [r7, #12]
 8009034:	f7ff ffb8 	bl	8008fa8 <prvInitialiseMutex>

		return pxNewQueue;
 8009038:	68fb      	ldr	r3, [r7, #12]
	}
 800903a:	4618      	mov	r0, r3
 800903c:	3718      	adds	r7, #24
 800903e:	46bd      	mov	sp, r7
 8009040:	bd80      	pop	{r7, pc}

08009042 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8009042:	b590      	push	{r4, r7, lr}
 8009044:	b087      	sub	sp, #28
 8009046:	af00      	add	r7, sp, #0
 8009048:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800904e:	693b      	ldr	r3, [r7, #16]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d109      	bne.n	8009068 <xQueueGiveMutexRecursive+0x26>
 8009054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009058:	f383 8811 	msr	BASEPRI, r3
 800905c:	f3bf 8f6f 	isb	sy
 8009060:	f3bf 8f4f 	dsb	sy
 8009064:	60fb      	str	r3, [r7, #12]
 8009066:	e7fe      	b.n	8009066 <xQueueGiveMutexRecursive+0x24>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
 8009068:	693b      	ldr	r3, [r7, #16]
 800906a:	685c      	ldr	r4, [r3, #4]
 800906c:	f001 fd08 	bl	800aa80 <xTaskGetCurrentTaskHandle>
 8009070:	4603      	mov	r3, r0
 8009072:	429c      	cmp	r4, r3
 8009074:	d111      	bne.n	800909a <xQueueGiveMutexRecursive+0x58>
			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.uxRecursiveCallCount )--;
 8009076:	693b      	ldr	r3, [r7, #16]
 8009078:	68db      	ldr	r3, [r3, #12]
 800907a:	1e5a      	subs	r2, r3, #1
 800907c:	693b      	ldr	r3, [r7, #16]
 800907e:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8009080:	693b      	ldr	r3, [r7, #16]
 8009082:	68db      	ldr	r3, [r3, #12]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d105      	bne.n	8009094 <xQueueGiveMutexRecursive+0x52>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8009088:	2300      	movs	r3, #0
 800908a:	2200      	movs	r2, #0
 800908c:	2100      	movs	r1, #0
 800908e:	6938      	ldr	r0, [r7, #16]
 8009090:	f000 f840 	bl	8009114 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8009094:	2301      	movs	r3, #1
 8009096:	617b      	str	r3, [r7, #20]
 8009098:	e001      	b.n	800909e <xQueueGiveMutexRecursive+0x5c>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800909a:	2300      	movs	r3, #0
 800909c:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800909e:	697b      	ldr	r3, [r7, #20]
	}
 80090a0:	4618      	mov	r0, r3
 80090a2:	371c      	adds	r7, #28
 80090a4:	46bd      	mov	sp, r7
 80090a6:	bd90      	pop	{r4, r7, pc}

080090a8 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80090a8:	b590      	push	{r4, r7, lr}
 80090aa:	b087      	sub	sp, #28
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
 80090b0:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80090b6:	693b      	ldr	r3, [r7, #16]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d109      	bne.n	80090d0 <xQueueTakeMutexRecursive+0x28>
 80090bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090c0:	f383 8811 	msr	BASEPRI, r3
 80090c4:	f3bf 8f6f 	isb	sy
 80090c8:	f3bf 8f4f 	dsb	sy
 80090cc:	60fb      	str	r3, [r7, #12]
 80090ce:	e7fe      	b.n	80090ce <xQueueTakeMutexRecursive+0x26>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80090d0:	693b      	ldr	r3, [r7, #16]
 80090d2:	685c      	ldr	r4, [r3, #4]
 80090d4:	f001 fcd4 	bl	800aa80 <xTaskGetCurrentTaskHandle>
 80090d8:	4603      	mov	r3, r0
 80090da:	429c      	cmp	r4, r3
 80090dc:	d107      	bne.n	80090ee <xQueueTakeMutexRecursive+0x46>
		{
			( pxMutex->u.uxRecursiveCallCount )++;
 80090de:	693b      	ldr	r3, [r7, #16]
 80090e0:	68db      	ldr	r3, [r3, #12]
 80090e2:	1c5a      	adds	r2, r3, #1
 80090e4:	693b      	ldr	r3, [r7, #16]
 80090e6:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80090e8:	2301      	movs	r3, #1
 80090ea:	617b      	str	r3, [r7, #20]
 80090ec:	e00c      	b.n	8009108 <xQueueTakeMutexRecursive+0x60>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80090ee:	6839      	ldr	r1, [r7, #0]
 80090f0:	6938      	ldr	r0, [r7, #16]
 80090f2:	f000 fb03 	bl	80096fc <xQueueSemaphoreTake>
 80090f6:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80090f8:	697b      	ldr	r3, [r7, #20]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d004      	beq.n	8009108 <xQueueTakeMutexRecursive+0x60>
			{
				( pxMutex->u.uxRecursiveCallCount )++;
 80090fe:	693b      	ldr	r3, [r7, #16]
 8009100:	68db      	ldr	r3, [r3, #12]
 8009102:	1c5a      	adds	r2, r3, #1
 8009104:	693b      	ldr	r3, [r7, #16]
 8009106:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8009108:	697b      	ldr	r3, [r7, #20]
	}
 800910a:	4618      	mov	r0, r3
 800910c:	371c      	adds	r7, #28
 800910e:	46bd      	mov	sp, r7
 8009110:	bd90      	pop	{r4, r7, pc}
	...

08009114 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b08e      	sub	sp, #56	; 0x38
 8009118:	af00      	add	r7, sp, #0
 800911a:	60f8      	str	r0, [r7, #12]
 800911c:	60b9      	str	r1, [r7, #8]
 800911e:	607a      	str	r2, [r7, #4]
 8009120:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009122:	2300      	movs	r3, #0
 8009124:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800912a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800912c:	2b00      	cmp	r3, #0
 800912e:	d109      	bne.n	8009144 <xQueueGenericSend+0x30>
 8009130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009134:	f383 8811 	msr	BASEPRI, r3
 8009138:	f3bf 8f6f 	isb	sy
 800913c:	f3bf 8f4f 	dsb	sy
 8009140:	62bb      	str	r3, [r7, #40]	; 0x28
 8009142:	e7fe      	b.n	8009142 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009144:	68bb      	ldr	r3, [r7, #8]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d103      	bne.n	8009152 <xQueueGenericSend+0x3e>
 800914a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800914c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800914e:	2b00      	cmp	r3, #0
 8009150:	d101      	bne.n	8009156 <xQueueGenericSend+0x42>
 8009152:	2301      	movs	r3, #1
 8009154:	e000      	b.n	8009158 <xQueueGenericSend+0x44>
 8009156:	2300      	movs	r3, #0
 8009158:	2b00      	cmp	r3, #0
 800915a:	d109      	bne.n	8009170 <xQueueGenericSend+0x5c>
 800915c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009160:	f383 8811 	msr	BASEPRI, r3
 8009164:	f3bf 8f6f 	isb	sy
 8009168:	f3bf 8f4f 	dsb	sy
 800916c:	627b      	str	r3, [r7, #36]	; 0x24
 800916e:	e7fe      	b.n	800916e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	2b02      	cmp	r3, #2
 8009174:	d103      	bne.n	800917e <xQueueGenericSend+0x6a>
 8009176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800917a:	2b01      	cmp	r3, #1
 800917c:	d101      	bne.n	8009182 <xQueueGenericSend+0x6e>
 800917e:	2301      	movs	r3, #1
 8009180:	e000      	b.n	8009184 <xQueueGenericSend+0x70>
 8009182:	2300      	movs	r3, #0
 8009184:	2b00      	cmp	r3, #0
 8009186:	d109      	bne.n	800919c <xQueueGenericSend+0x88>
 8009188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800918c:	f383 8811 	msr	BASEPRI, r3
 8009190:	f3bf 8f6f 	isb	sy
 8009194:	f3bf 8f4f 	dsb	sy
 8009198:	623b      	str	r3, [r7, #32]
 800919a:	e7fe      	b.n	800919a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800919c:	f001 fc80 	bl	800aaa0 <xTaskGetSchedulerState>
 80091a0:	4603      	mov	r3, r0
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d102      	bne.n	80091ac <xQueueGenericSend+0x98>
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d101      	bne.n	80091b0 <xQueueGenericSend+0x9c>
 80091ac:	2301      	movs	r3, #1
 80091ae:	e000      	b.n	80091b2 <xQueueGenericSend+0x9e>
 80091b0:	2300      	movs	r3, #0
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d109      	bne.n	80091ca <xQueueGenericSend+0xb6>
 80091b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091ba:	f383 8811 	msr	BASEPRI, r3
 80091be:	f3bf 8f6f 	isb	sy
 80091c2:	f3bf 8f4f 	dsb	sy
 80091c6:	61fb      	str	r3, [r7, #28]
 80091c8:	e7fe      	b.n	80091c8 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80091ca:	f002 fd37 	bl	800bc3c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80091ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80091d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091d6:	429a      	cmp	r2, r3
 80091d8:	d302      	bcc.n	80091e0 <xQueueGenericSend+0xcc>
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	2b02      	cmp	r3, #2
 80091de:	d129      	bne.n	8009234 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80091e0:	683a      	ldr	r2, [r7, #0]
 80091e2:	68b9      	ldr	r1, [r7, #8]
 80091e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80091e6:	f000 fc26 	bl	8009a36 <prvCopyDataToQueue>
 80091ea:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80091ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d010      	beq.n	8009216 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80091f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091f6:	3324      	adds	r3, #36	; 0x24
 80091f8:	4618      	mov	r0, r3
 80091fa:	f001 fa83 	bl	800a704 <xTaskRemoveFromEventList>
 80091fe:	4603      	mov	r3, r0
 8009200:	2b00      	cmp	r3, #0
 8009202:	d013      	beq.n	800922c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009204:	4b3f      	ldr	r3, [pc, #252]	; (8009304 <xQueueGenericSend+0x1f0>)
 8009206:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800920a:	601a      	str	r2, [r3, #0]
 800920c:	f3bf 8f4f 	dsb	sy
 8009210:	f3bf 8f6f 	isb	sy
 8009214:	e00a      	b.n	800922c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009218:	2b00      	cmp	r3, #0
 800921a:	d007      	beq.n	800922c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800921c:	4b39      	ldr	r3, [pc, #228]	; (8009304 <xQueueGenericSend+0x1f0>)
 800921e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009222:	601a      	str	r2, [r3, #0]
 8009224:	f3bf 8f4f 	dsb	sy
 8009228:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800922c:	f002 fd34 	bl	800bc98 <vPortExitCritical>
				return pdPASS;
 8009230:	2301      	movs	r3, #1
 8009232:	e063      	b.n	80092fc <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d103      	bne.n	8009242 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800923a:	f002 fd2d 	bl	800bc98 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800923e:	2300      	movs	r3, #0
 8009240:	e05c      	b.n	80092fc <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009242:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009244:	2b00      	cmp	r3, #0
 8009246:	d106      	bne.n	8009256 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009248:	f107 0314 	add.w	r3, r7, #20
 800924c:	4618      	mov	r0, r3
 800924e:	f001 fabb 	bl	800a7c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009252:	2301      	movs	r3, #1
 8009254:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009256:	f002 fd1f 	bl	800bc98 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800925a:	f000 fffd 	bl	800a258 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800925e:	f002 fced 	bl	800bc3c <vPortEnterCritical>
 8009262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009264:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009268:	b25b      	sxtb	r3, r3
 800926a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800926e:	d103      	bne.n	8009278 <xQueueGenericSend+0x164>
 8009270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009272:	2200      	movs	r2, #0
 8009274:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800927a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800927e:	b25b      	sxtb	r3, r3
 8009280:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009284:	d103      	bne.n	800928e <xQueueGenericSend+0x17a>
 8009286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009288:	2200      	movs	r2, #0
 800928a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800928e:	f002 fd03 	bl	800bc98 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009292:	1d3a      	adds	r2, r7, #4
 8009294:	f107 0314 	add.w	r3, r7, #20
 8009298:	4611      	mov	r1, r2
 800929a:	4618      	mov	r0, r3
 800929c:	f001 faaa 	bl	800a7f4 <xTaskCheckForTimeOut>
 80092a0:	4603      	mov	r3, r0
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d124      	bne.n	80092f0 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80092a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80092a8:	f000 fcbd 	bl	8009c26 <prvIsQueueFull>
 80092ac:	4603      	mov	r3, r0
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d018      	beq.n	80092e4 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80092b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092b4:	3310      	adds	r3, #16
 80092b6:	687a      	ldr	r2, [r7, #4]
 80092b8:	4611      	mov	r1, r2
 80092ba:	4618      	mov	r0, r3
 80092bc:	f001 f9d4 	bl	800a668 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80092c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80092c2:	f000 fc48 	bl	8009b56 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80092c6:	f000 ffd5 	bl	800a274 <xTaskResumeAll>
 80092ca:	4603      	mov	r3, r0
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	f47f af7c 	bne.w	80091ca <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80092d2:	4b0c      	ldr	r3, [pc, #48]	; (8009304 <xQueueGenericSend+0x1f0>)
 80092d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092d8:	601a      	str	r2, [r3, #0]
 80092da:	f3bf 8f4f 	dsb	sy
 80092de:	f3bf 8f6f 	isb	sy
 80092e2:	e772      	b.n	80091ca <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80092e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80092e6:	f000 fc36 	bl	8009b56 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80092ea:	f000 ffc3 	bl	800a274 <xTaskResumeAll>
 80092ee:	e76c      	b.n	80091ca <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80092f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80092f2:	f000 fc30 	bl	8009b56 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80092f6:	f000 ffbd 	bl	800a274 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80092fa:	2300      	movs	r3, #0
		}
	}
}
 80092fc:	4618      	mov	r0, r3
 80092fe:	3738      	adds	r7, #56	; 0x38
 8009300:	46bd      	mov	sp, r7
 8009302:	bd80      	pop	{r7, pc}
 8009304:	e000ed04 	.word	0xe000ed04

08009308 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b08e      	sub	sp, #56	; 0x38
 800930c:	af00      	add	r7, sp, #0
 800930e:	60f8      	str	r0, [r7, #12]
 8009310:	60b9      	str	r1, [r7, #8]
 8009312:	607a      	str	r2, [r7, #4]
 8009314:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800931a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800931c:	2b00      	cmp	r3, #0
 800931e:	d109      	bne.n	8009334 <xQueueGenericSendFromISR+0x2c>
 8009320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009324:	f383 8811 	msr	BASEPRI, r3
 8009328:	f3bf 8f6f 	isb	sy
 800932c:	f3bf 8f4f 	dsb	sy
 8009330:	627b      	str	r3, [r7, #36]	; 0x24
 8009332:	e7fe      	b.n	8009332 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009334:	68bb      	ldr	r3, [r7, #8]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d103      	bne.n	8009342 <xQueueGenericSendFromISR+0x3a>
 800933a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800933c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800933e:	2b00      	cmp	r3, #0
 8009340:	d101      	bne.n	8009346 <xQueueGenericSendFromISR+0x3e>
 8009342:	2301      	movs	r3, #1
 8009344:	e000      	b.n	8009348 <xQueueGenericSendFromISR+0x40>
 8009346:	2300      	movs	r3, #0
 8009348:	2b00      	cmp	r3, #0
 800934a:	d109      	bne.n	8009360 <xQueueGenericSendFromISR+0x58>
 800934c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009350:	f383 8811 	msr	BASEPRI, r3
 8009354:	f3bf 8f6f 	isb	sy
 8009358:	f3bf 8f4f 	dsb	sy
 800935c:	623b      	str	r3, [r7, #32]
 800935e:	e7fe      	b.n	800935e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009360:	683b      	ldr	r3, [r7, #0]
 8009362:	2b02      	cmp	r3, #2
 8009364:	d103      	bne.n	800936e <xQueueGenericSendFromISR+0x66>
 8009366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009368:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800936a:	2b01      	cmp	r3, #1
 800936c:	d101      	bne.n	8009372 <xQueueGenericSendFromISR+0x6a>
 800936e:	2301      	movs	r3, #1
 8009370:	e000      	b.n	8009374 <xQueueGenericSendFromISR+0x6c>
 8009372:	2300      	movs	r3, #0
 8009374:	2b00      	cmp	r3, #0
 8009376:	d109      	bne.n	800938c <xQueueGenericSendFromISR+0x84>
 8009378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800937c:	f383 8811 	msr	BASEPRI, r3
 8009380:	f3bf 8f6f 	isb	sy
 8009384:	f3bf 8f4f 	dsb	sy
 8009388:	61fb      	str	r3, [r7, #28]
 800938a:	e7fe      	b.n	800938a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800938c:	f002 fd32 	bl	800bdf4 <vPortValidateInterruptPriority>
	__asm volatile
 8009390:	f3ef 8211 	mrs	r2, BASEPRI
 8009394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009398:	f383 8811 	msr	BASEPRI, r3
 800939c:	f3bf 8f6f 	isb	sy
 80093a0:	f3bf 8f4f 	dsb	sy
 80093a4:	61ba      	str	r2, [r7, #24]
 80093a6:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80093a8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80093aa:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80093ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80093b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093b4:	429a      	cmp	r2, r3
 80093b6:	d302      	bcc.n	80093be <xQueueGenericSendFromISR+0xb6>
 80093b8:	683b      	ldr	r3, [r7, #0]
 80093ba:	2b02      	cmp	r3, #2
 80093bc:	d12c      	bne.n	8009418 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80093be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80093c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80093c8:	683a      	ldr	r2, [r7, #0]
 80093ca:	68b9      	ldr	r1, [r7, #8]
 80093cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80093ce:	f000 fb32 	bl	8009a36 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80093d2:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80093d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093da:	d112      	bne.n	8009402 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80093dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d016      	beq.n	8009412 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80093e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093e6:	3324      	adds	r3, #36	; 0x24
 80093e8:	4618      	mov	r0, r3
 80093ea:	f001 f98b 	bl	800a704 <xTaskRemoveFromEventList>
 80093ee:	4603      	mov	r3, r0
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d00e      	beq.n	8009412 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d00b      	beq.n	8009412 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	2201      	movs	r2, #1
 80093fe:	601a      	str	r2, [r3, #0]
 8009400:	e007      	b.n	8009412 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009402:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009406:	3301      	adds	r3, #1
 8009408:	b2db      	uxtb	r3, r3
 800940a:	b25a      	sxtb	r2, r3
 800940c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800940e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009412:	2301      	movs	r3, #1
 8009414:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8009416:	e001      	b.n	800941c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009418:	2300      	movs	r3, #0
 800941a:	637b      	str	r3, [r7, #52]	; 0x34
 800941c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800941e:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009420:	693b      	ldr	r3, [r7, #16]
 8009422:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009426:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009428:	4618      	mov	r0, r3
 800942a:	3738      	adds	r7, #56	; 0x38
 800942c:	46bd      	mov	sp, r7
 800942e:	bd80      	pop	{r7, pc}

08009430 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b08e      	sub	sp, #56	; 0x38
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
 8009438:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800943e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009440:	2b00      	cmp	r3, #0
 8009442:	d109      	bne.n	8009458 <xQueueGiveFromISR+0x28>
	__asm volatile
 8009444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009448:	f383 8811 	msr	BASEPRI, r3
 800944c:	f3bf 8f6f 	isb	sy
 8009450:	f3bf 8f4f 	dsb	sy
 8009454:	623b      	str	r3, [r7, #32]
 8009456:	e7fe      	b.n	8009456 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800945a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800945c:	2b00      	cmp	r3, #0
 800945e:	d009      	beq.n	8009474 <xQueueGiveFromISR+0x44>
 8009460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009464:	f383 8811 	msr	BASEPRI, r3
 8009468:	f3bf 8f6f 	isb	sy
 800946c:	f3bf 8f4f 	dsb	sy
 8009470:	61fb      	str	r3, [r7, #28]
 8009472:	e7fe      	b.n	8009472 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8009474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d103      	bne.n	8009484 <xQueueGiveFromISR+0x54>
 800947c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800947e:	685b      	ldr	r3, [r3, #4]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d101      	bne.n	8009488 <xQueueGiveFromISR+0x58>
 8009484:	2301      	movs	r3, #1
 8009486:	e000      	b.n	800948a <xQueueGiveFromISR+0x5a>
 8009488:	2300      	movs	r3, #0
 800948a:	2b00      	cmp	r3, #0
 800948c:	d109      	bne.n	80094a2 <xQueueGiveFromISR+0x72>
 800948e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009492:	f383 8811 	msr	BASEPRI, r3
 8009496:	f3bf 8f6f 	isb	sy
 800949a:	f3bf 8f4f 	dsb	sy
 800949e:	61bb      	str	r3, [r7, #24]
 80094a0:	e7fe      	b.n	80094a0 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80094a2:	f002 fca7 	bl	800bdf4 <vPortValidateInterruptPriority>
	__asm volatile
 80094a6:	f3ef 8211 	mrs	r2, BASEPRI
 80094aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094ae:	f383 8811 	msr	BASEPRI, r3
 80094b2:	f3bf 8f6f 	isb	sy
 80094b6:	f3bf 8f4f 	dsb	sy
 80094ba:	617a      	str	r2, [r7, #20]
 80094bc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80094be:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80094c0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80094c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094c6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80094c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80094ce:	429a      	cmp	r2, r3
 80094d0:	d22b      	bcs.n	800952a <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80094d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80094d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80094dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094de:	1c5a      	adds	r2, r3, #1
 80094e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094e2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80094e4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80094e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094ec:	d112      	bne.n	8009514 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80094ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d016      	beq.n	8009524 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80094f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094f8:	3324      	adds	r3, #36	; 0x24
 80094fa:	4618      	mov	r0, r3
 80094fc:	f001 f902 	bl	800a704 <xTaskRemoveFromEventList>
 8009500:	4603      	mov	r3, r0
 8009502:	2b00      	cmp	r3, #0
 8009504:	d00e      	beq.n	8009524 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d00b      	beq.n	8009524 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	2201      	movs	r2, #1
 8009510:	601a      	str	r2, [r3, #0]
 8009512:	e007      	b.n	8009524 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009514:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009518:	3301      	adds	r3, #1
 800951a:	b2db      	uxtb	r3, r3
 800951c:	b25a      	sxtb	r2, r3
 800951e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009520:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009524:	2301      	movs	r3, #1
 8009526:	637b      	str	r3, [r7, #52]	; 0x34
 8009528:	e001      	b.n	800952e <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800952a:	2300      	movs	r3, #0
 800952c:	637b      	str	r3, [r7, #52]	; 0x34
 800952e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009530:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009538:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800953a:	4618      	mov	r0, r3
 800953c:	3738      	adds	r7, #56	; 0x38
 800953e:	46bd      	mov	sp, r7
 8009540:	bd80      	pop	{r7, pc}
	...

08009544 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b08c      	sub	sp, #48	; 0x30
 8009548:	af00      	add	r7, sp, #0
 800954a:	60f8      	str	r0, [r7, #12]
 800954c:	60b9      	str	r1, [r7, #8]
 800954e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009550:	2300      	movs	r3, #0
 8009552:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800955a:	2b00      	cmp	r3, #0
 800955c:	d109      	bne.n	8009572 <xQueueReceive+0x2e>
	__asm volatile
 800955e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009562:	f383 8811 	msr	BASEPRI, r3
 8009566:	f3bf 8f6f 	isb	sy
 800956a:	f3bf 8f4f 	dsb	sy
 800956e:	623b      	str	r3, [r7, #32]
 8009570:	e7fe      	b.n	8009570 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009572:	68bb      	ldr	r3, [r7, #8]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d103      	bne.n	8009580 <xQueueReceive+0x3c>
 8009578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800957a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800957c:	2b00      	cmp	r3, #0
 800957e:	d101      	bne.n	8009584 <xQueueReceive+0x40>
 8009580:	2301      	movs	r3, #1
 8009582:	e000      	b.n	8009586 <xQueueReceive+0x42>
 8009584:	2300      	movs	r3, #0
 8009586:	2b00      	cmp	r3, #0
 8009588:	d109      	bne.n	800959e <xQueueReceive+0x5a>
 800958a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800958e:	f383 8811 	msr	BASEPRI, r3
 8009592:	f3bf 8f6f 	isb	sy
 8009596:	f3bf 8f4f 	dsb	sy
 800959a:	61fb      	str	r3, [r7, #28]
 800959c:	e7fe      	b.n	800959c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800959e:	f001 fa7f 	bl	800aaa0 <xTaskGetSchedulerState>
 80095a2:	4603      	mov	r3, r0
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d102      	bne.n	80095ae <xQueueReceive+0x6a>
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d101      	bne.n	80095b2 <xQueueReceive+0x6e>
 80095ae:	2301      	movs	r3, #1
 80095b0:	e000      	b.n	80095b4 <xQueueReceive+0x70>
 80095b2:	2300      	movs	r3, #0
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d109      	bne.n	80095cc <xQueueReceive+0x88>
 80095b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095bc:	f383 8811 	msr	BASEPRI, r3
 80095c0:	f3bf 8f6f 	isb	sy
 80095c4:	f3bf 8f4f 	dsb	sy
 80095c8:	61bb      	str	r3, [r7, #24]
 80095ca:	e7fe      	b.n	80095ca <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80095cc:	f002 fb36 	bl	800bc3c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80095d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095d4:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80095d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d01f      	beq.n	800961c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80095dc:	68b9      	ldr	r1, [r7, #8]
 80095de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80095e0:	f000 fa93 	bl	8009b0a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80095e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095e6:	1e5a      	subs	r2, r3, #1
 80095e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095ea:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80095ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095ee:	691b      	ldr	r3, [r3, #16]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d00f      	beq.n	8009614 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80095f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095f6:	3310      	adds	r3, #16
 80095f8:	4618      	mov	r0, r3
 80095fa:	f001 f883 	bl	800a704 <xTaskRemoveFromEventList>
 80095fe:	4603      	mov	r3, r0
 8009600:	2b00      	cmp	r3, #0
 8009602:	d007      	beq.n	8009614 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009604:	4b3c      	ldr	r3, [pc, #240]	; (80096f8 <xQueueReceive+0x1b4>)
 8009606:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800960a:	601a      	str	r2, [r3, #0]
 800960c:	f3bf 8f4f 	dsb	sy
 8009610:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009614:	f002 fb40 	bl	800bc98 <vPortExitCritical>
				return pdPASS;
 8009618:	2301      	movs	r3, #1
 800961a:	e069      	b.n	80096f0 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d103      	bne.n	800962a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009622:	f002 fb39 	bl	800bc98 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009626:	2300      	movs	r3, #0
 8009628:	e062      	b.n	80096f0 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800962a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800962c:	2b00      	cmp	r3, #0
 800962e:	d106      	bne.n	800963e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009630:	f107 0310 	add.w	r3, r7, #16
 8009634:	4618      	mov	r0, r3
 8009636:	f001 f8c7 	bl	800a7c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800963a:	2301      	movs	r3, #1
 800963c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800963e:	f002 fb2b 	bl	800bc98 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009642:	f000 fe09 	bl	800a258 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009646:	f002 faf9 	bl	800bc3c <vPortEnterCritical>
 800964a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800964c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009650:	b25b      	sxtb	r3, r3
 8009652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009656:	d103      	bne.n	8009660 <xQueueReceive+0x11c>
 8009658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800965a:	2200      	movs	r2, #0
 800965c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009662:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009666:	b25b      	sxtb	r3, r3
 8009668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800966c:	d103      	bne.n	8009676 <xQueueReceive+0x132>
 800966e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009670:	2200      	movs	r2, #0
 8009672:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009676:	f002 fb0f 	bl	800bc98 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800967a:	1d3a      	adds	r2, r7, #4
 800967c:	f107 0310 	add.w	r3, r7, #16
 8009680:	4611      	mov	r1, r2
 8009682:	4618      	mov	r0, r3
 8009684:	f001 f8b6 	bl	800a7f4 <xTaskCheckForTimeOut>
 8009688:	4603      	mov	r3, r0
 800968a:	2b00      	cmp	r3, #0
 800968c:	d123      	bne.n	80096d6 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800968e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009690:	f000 fab3 	bl	8009bfa <prvIsQueueEmpty>
 8009694:	4603      	mov	r3, r0
 8009696:	2b00      	cmp	r3, #0
 8009698:	d017      	beq.n	80096ca <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800969a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800969c:	3324      	adds	r3, #36	; 0x24
 800969e:	687a      	ldr	r2, [r7, #4]
 80096a0:	4611      	mov	r1, r2
 80096a2:	4618      	mov	r0, r3
 80096a4:	f000 ffe0 	bl	800a668 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80096a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80096aa:	f000 fa54 	bl	8009b56 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80096ae:	f000 fde1 	bl	800a274 <xTaskResumeAll>
 80096b2:	4603      	mov	r3, r0
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d189      	bne.n	80095cc <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80096b8:	4b0f      	ldr	r3, [pc, #60]	; (80096f8 <xQueueReceive+0x1b4>)
 80096ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096be:	601a      	str	r2, [r3, #0]
 80096c0:	f3bf 8f4f 	dsb	sy
 80096c4:	f3bf 8f6f 	isb	sy
 80096c8:	e780      	b.n	80095cc <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80096ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80096cc:	f000 fa43 	bl	8009b56 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80096d0:	f000 fdd0 	bl	800a274 <xTaskResumeAll>
 80096d4:	e77a      	b.n	80095cc <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80096d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80096d8:	f000 fa3d 	bl	8009b56 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80096dc:	f000 fdca 	bl	800a274 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80096e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80096e2:	f000 fa8a 	bl	8009bfa <prvIsQueueEmpty>
 80096e6:	4603      	mov	r3, r0
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	f43f af6f 	beq.w	80095cc <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80096ee:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80096f0:	4618      	mov	r0, r3
 80096f2:	3730      	adds	r7, #48	; 0x30
 80096f4:	46bd      	mov	sp, r7
 80096f6:	bd80      	pop	{r7, pc}
 80096f8:	e000ed04 	.word	0xe000ed04

080096fc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b08e      	sub	sp, #56	; 0x38
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
 8009704:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009706:	2300      	movs	r3, #0
 8009708:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800970e:	2300      	movs	r3, #0
 8009710:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009714:	2b00      	cmp	r3, #0
 8009716:	d109      	bne.n	800972c <xQueueSemaphoreTake+0x30>
 8009718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800971c:	f383 8811 	msr	BASEPRI, r3
 8009720:	f3bf 8f6f 	isb	sy
 8009724:	f3bf 8f4f 	dsb	sy
 8009728:	623b      	str	r3, [r7, #32]
 800972a:	e7fe      	b.n	800972a <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800972c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800972e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009730:	2b00      	cmp	r3, #0
 8009732:	d009      	beq.n	8009748 <xQueueSemaphoreTake+0x4c>
 8009734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009738:	f383 8811 	msr	BASEPRI, r3
 800973c:	f3bf 8f6f 	isb	sy
 8009740:	f3bf 8f4f 	dsb	sy
 8009744:	61fb      	str	r3, [r7, #28]
 8009746:	e7fe      	b.n	8009746 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009748:	f001 f9aa 	bl	800aaa0 <xTaskGetSchedulerState>
 800974c:	4603      	mov	r3, r0
 800974e:	2b00      	cmp	r3, #0
 8009750:	d102      	bne.n	8009758 <xQueueSemaphoreTake+0x5c>
 8009752:	683b      	ldr	r3, [r7, #0]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d101      	bne.n	800975c <xQueueSemaphoreTake+0x60>
 8009758:	2301      	movs	r3, #1
 800975a:	e000      	b.n	800975e <xQueueSemaphoreTake+0x62>
 800975c:	2300      	movs	r3, #0
 800975e:	2b00      	cmp	r3, #0
 8009760:	d109      	bne.n	8009776 <xQueueSemaphoreTake+0x7a>
 8009762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009766:	f383 8811 	msr	BASEPRI, r3
 800976a:	f3bf 8f6f 	isb	sy
 800976e:	f3bf 8f4f 	dsb	sy
 8009772:	61bb      	str	r3, [r7, #24]
 8009774:	e7fe      	b.n	8009774 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8009776:	f002 fa61 	bl	800bc3c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800977a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800977c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800977e:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009782:	2b00      	cmp	r3, #0
 8009784:	d024      	beq.n	80097d0 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009788:	1e5a      	subs	r2, r3, #1
 800978a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800978c:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800978e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d104      	bne.n	80097a0 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8009796:	f001 fb49 	bl	800ae2c <pvTaskIncrementMutexHeldCount>
 800979a:	4602      	mov	r2, r0
 800979c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800979e:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80097a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097a2:	691b      	ldr	r3, [r3, #16]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d00f      	beq.n	80097c8 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80097a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097aa:	3310      	adds	r3, #16
 80097ac:	4618      	mov	r0, r3
 80097ae:	f000 ffa9 	bl	800a704 <xTaskRemoveFromEventList>
 80097b2:	4603      	mov	r3, r0
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d007      	beq.n	80097c8 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80097b8:	4b53      	ldr	r3, [pc, #332]	; (8009908 <xQueueSemaphoreTake+0x20c>)
 80097ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097be:	601a      	str	r2, [r3, #0]
 80097c0:	f3bf 8f4f 	dsb	sy
 80097c4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80097c8:	f002 fa66 	bl	800bc98 <vPortExitCritical>
				return pdPASS;
 80097cc:	2301      	movs	r3, #1
 80097ce:	e096      	b.n	80098fe <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d110      	bne.n	80097f8 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80097d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d009      	beq.n	80097f0 <xQueueSemaphoreTake+0xf4>
 80097dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097e0:	f383 8811 	msr	BASEPRI, r3
 80097e4:	f3bf 8f6f 	isb	sy
 80097e8:	f3bf 8f4f 	dsb	sy
 80097ec:	617b      	str	r3, [r7, #20]
 80097ee:	e7fe      	b.n	80097ee <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80097f0:	f002 fa52 	bl	800bc98 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80097f4:	2300      	movs	r3, #0
 80097f6:	e082      	b.n	80098fe <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 80097f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d106      	bne.n	800980c <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80097fe:	f107 030c 	add.w	r3, r7, #12
 8009802:	4618      	mov	r0, r3
 8009804:	f000 ffe0 	bl	800a7c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009808:	2301      	movs	r3, #1
 800980a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800980c:	f002 fa44 	bl	800bc98 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009810:	f000 fd22 	bl	800a258 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009814:	f002 fa12 	bl	800bc3c <vPortEnterCritical>
 8009818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800981a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800981e:	b25b      	sxtb	r3, r3
 8009820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009824:	d103      	bne.n	800982e <xQueueSemaphoreTake+0x132>
 8009826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009828:	2200      	movs	r2, #0
 800982a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800982e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009830:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009834:	b25b      	sxtb	r3, r3
 8009836:	f1b3 3fff 	cmp.w	r3, #4294967295
 800983a:	d103      	bne.n	8009844 <xQueueSemaphoreTake+0x148>
 800983c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800983e:	2200      	movs	r2, #0
 8009840:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009844:	f002 fa28 	bl	800bc98 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009848:	463a      	mov	r2, r7
 800984a:	f107 030c 	add.w	r3, r7, #12
 800984e:	4611      	mov	r1, r2
 8009850:	4618      	mov	r0, r3
 8009852:	f000 ffcf 	bl	800a7f4 <xTaskCheckForTimeOut>
 8009856:	4603      	mov	r3, r0
 8009858:	2b00      	cmp	r3, #0
 800985a:	d132      	bne.n	80098c2 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800985c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800985e:	f000 f9cc 	bl	8009bfa <prvIsQueueEmpty>
 8009862:	4603      	mov	r3, r0
 8009864:	2b00      	cmp	r3, #0
 8009866:	d026      	beq.n	80098b6 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d109      	bne.n	8009884 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8009870:	f002 f9e4 	bl	800bc3c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8009874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009876:	685b      	ldr	r3, [r3, #4]
 8009878:	4618      	mov	r0, r3
 800987a:	f001 f92f 	bl	800aadc <xTaskPriorityInherit>
 800987e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8009880:	f002 fa0a 	bl	800bc98 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009886:	3324      	adds	r3, #36	; 0x24
 8009888:	683a      	ldr	r2, [r7, #0]
 800988a:	4611      	mov	r1, r2
 800988c:	4618      	mov	r0, r3
 800988e:	f000 feeb 	bl	800a668 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009892:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009894:	f000 f95f 	bl	8009b56 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009898:	f000 fcec 	bl	800a274 <xTaskResumeAll>
 800989c:	4603      	mov	r3, r0
 800989e:	2b00      	cmp	r3, #0
 80098a0:	f47f af69 	bne.w	8009776 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 80098a4:	4b18      	ldr	r3, [pc, #96]	; (8009908 <xQueueSemaphoreTake+0x20c>)
 80098a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098aa:	601a      	str	r2, [r3, #0]
 80098ac:	f3bf 8f4f 	dsb	sy
 80098b0:	f3bf 8f6f 	isb	sy
 80098b4:	e75f      	b.n	8009776 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80098b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80098b8:	f000 f94d 	bl	8009b56 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80098bc:	f000 fcda 	bl	800a274 <xTaskResumeAll>
 80098c0:	e759      	b.n	8009776 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80098c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80098c4:	f000 f947 	bl	8009b56 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80098c8:	f000 fcd4 	bl	800a274 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80098cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80098ce:	f000 f994 	bl	8009bfa <prvIsQueueEmpty>
 80098d2:	4603      	mov	r3, r0
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	f43f af4e 	beq.w	8009776 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80098da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d00d      	beq.n	80098fc <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 80098e0:	f002 f9ac 	bl	800bc3c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80098e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80098e6:	f000 f88e 	bl	8009a06 <prvGetDisinheritPriorityAfterTimeout>
 80098ea:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80098ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098ee:	685b      	ldr	r3, [r3, #4]
 80098f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80098f2:	4618      	mov	r0, r3
 80098f4:	f001 f9fc 	bl	800acf0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80098f8:	f002 f9ce 	bl	800bc98 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80098fc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80098fe:	4618      	mov	r0, r3
 8009900:	3738      	adds	r7, #56	; 0x38
 8009902:	46bd      	mov	sp, r7
 8009904:	bd80      	pop	{r7, pc}
 8009906:	bf00      	nop
 8009908:	e000ed04 	.word	0xe000ed04

0800990c <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b08e      	sub	sp, #56	; 0x38
 8009910:	af00      	add	r7, sp, #0
 8009912:	60f8      	str	r0, [r7, #12]
 8009914:	60b9      	str	r1, [r7, #8]
 8009916:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800991c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800991e:	2b00      	cmp	r3, #0
 8009920:	d109      	bne.n	8009936 <xQueueReceiveFromISR+0x2a>
 8009922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009926:	f383 8811 	msr	BASEPRI, r3
 800992a:	f3bf 8f6f 	isb	sy
 800992e:	f3bf 8f4f 	dsb	sy
 8009932:	623b      	str	r3, [r7, #32]
 8009934:	e7fe      	b.n	8009934 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009936:	68bb      	ldr	r3, [r7, #8]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d103      	bne.n	8009944 <xQueueReceiveFromISR+0x38>
 800993c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800993e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009940:	2b00      	cmp	r3, #0
 8009942:	d101      	bne.n	8009948 <xQueueReceiveFromISR+0x3c>
 8009944:	2301      	movs	r3, #1
 8009946:	e000      	b.n	800994a <xQueueReceiveFromISR+0x3e>
 8009948:	2300      	movs	r3, #0
 800994a:	2b00      	cmp	r3, #0
 800994c:	d109      	bne.n	8009962 <xQueueReceiveFromISR+0x56>
 800994e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009952:	f383 8811 	msr	BASEPRI, r3
 8009956:	f3bf 8f6f 	isb	sy
 800995a:	f3bf 8f4f 	dsb	sy
 800995e:	61fb      	str	r3, [r7, #28]
 8009960:	e7fe      	b.n	8009960 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009962:	f002 fa47 	bl	800bdf4 <vPortValidateInterruptPriority>
	__asm volatile
 8009966:	f3ef 8211 	mrs	r2, BASEPRI
 800996a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800996e:	f383 8811 	msr	BASEPRI, r3
 8009972:	f3bf 8f6f 	isb	sy
 8009976:	f3bf 8f4f 	dsb	sy
 800997a:	61ba      	str	r2, [r7, #24]
 800997c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800997e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009980:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009986:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800998a:	2b00      	cmp	r3, #0
 800998c:	d02f      	beq.n	80099ee <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800998e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009990:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009994:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009998:	68b9      	ldr	r1, [r7, #8]
 800999a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800999c:	f000 f8b5 	bl	8009b0a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80099a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099a2:	1e5a      	subs	r2, r3, #1
 80099a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099a6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80099a8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80099ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099b0:	d112      	bne.n	80099d8 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80099b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099b4:	691b      	ldr	r3, [r3, #16]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d016      	beq.n	80099e8 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80099ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099bc:	3310      	adds	r3, #16
 80099be:	4618      	mov	r0, r3
 80099c0:	f000 fea0 	bl	800a704 <xTaskRemoveFromEventList>
 80099c4:	4603      	mov	r3, r0
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d00e      	beq.n	80099e8 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d00b      	beq.n	80099e8 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	2201      	movs	r2, #1
 80099d4:	601a      	str	r2, [r3, #0]
 80099d6:	e007      	b.n	80099e8 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80099d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80099dc:	3301      	adds	r3, #1
 80099de:	b2db      	uxtb	r3, r3
 80099e0:	b25a      	sxtb	r2, r3
 80099e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80099e8:	2301      	movs	r3, #1
 80099ea:	637b      	str	r3, [r7, #52]	; 0x34
 80099ec:	e001      	b.n	80099f2 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 80099ee:	2300      	movs	r3, #0
 80099f0:	637b      	str	r3, [r7, #52]	; 0x34
 80099f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099f4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80099f6:	693b      	ldr	r3, [r7, #16]
 80099f8:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80099fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80099fe:	4618      	mov	r0, r3
 8009a00:	3738      	adds	r7, #56	; 0x38
 8009a02:	46bd      	mov	sp, r7
 8009a04:	bd80      	pop	{r7, pc}

08009a06 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009a06:	b480      	push	{r7}
 8009a08:	b085      	sub	sp, #20
 8009a0a:	af00      	add	r7, sp, #0
 8009a0c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d006      	beq.n	8009a24 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	f1c3 0307 	rsb	r3, r3, #7
 8009a20:	60fb      	str	r3, [r7, #12]
 8009a22:	e001      	b.n	8009a28 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009a24:	2300      	movs	r3, #0
 8009a26:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8009a28:	68fb      	ldr	r3, [r7, #12]
	}
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	3714      	adds	r7, #20
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a34:	4770      	bx	lr

08009a36 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009a36:	b580      	push	{r7, lr}
 8009a38:	b086      	sub	sp, #24
 8009a3a:	af00      	add	r7, sp, #0
 8009a3c:	60f8      	str	r0, [r7, #12]
 8009a3e:	60b9      	str	r1, [r7, #8]
 8009a40:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009a42:	2300      	movs	r3, #0
 8009a44:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a4a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d10d      	bne.n	8009a70 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d14d      	bne.n	8009af8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	685b      	ldr	r3, [r3, #4]
 8009a60:	4618      	mov	r0, r3
 8009a62:	f001 f8c1 	bl	800abe8 <xTaskPriorityDisinherit>
 8009a66:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	605a      	str	r2, [r3, #4]
 8009a6e:	e043      	b.n	8009af8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d119      	bne.n	8009aaa <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	6898      	ldr	r0, [r3, #8]
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a7e:	461a      	mov	r2, r3
 8009a80:	68b9      	ldr	r1, [r7, #8]
 8009a82:	f00b fb71 	bl	8015168 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	689a      	ldr	r2, [r3, #8]
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a8e:	441a      	add	r2, r3
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	689a      	ldr	r2, [r3, #8]
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	685b      	ldr	r3, [r3, #4]
 8009a9c:	429a      	cmp	r2, r3
 8009a9e:	d32b      	bcc.n	8009af8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	681a      	ldr	r2, [r3, #0]
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	609a      	str	r2, [r3, #8]
 8009aa8:	e026      	b.n	8009af8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	68d8      	ldr	r0, [r3, #12]
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ab2:	461a      	mov	r2, r3
 8009ab4:	68b9      	ldr	r1, [r7, #8]
 8009ab6:	f00b fb57 	bl	8015168 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	68da      	ldr	r2, [r3, #12]
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ac2:	425b      	negs	r3, r3
 8009ac4:	441a      	add	r2, r3
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	68da      	ldr	r2, [r3, #12]
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	429a      	cmp	r2, r3
 8009ad4:	d207      	bcs.n	8009ae6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	685a      	ldr	r2, [r3, #4]
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ade:	425b      	negs	r3, r3
 8009ae0:	441a      	add	r2, r3
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	2b02      	cmp	r3, #2
 8009aea:	d105      	bne.n	8009af8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009aec:	693b      	ldr	r3, [r7, #16]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d002      	beq.n	8009af8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009af2:	693b      	ldr	r3, [r7, #16]
 8009af4:	3b01      	subs	r3, #1
 8009af6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009af8:	693b      	ldr	r3, [r7, #16]
 8009afa:	1c5a      	adds	r2, r3, #1
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009b00:	697b      	ldr	r3, [r7, #20]
}
 8009b02:	4618      	mov	r0, r3
 8009b04:	3718      	adds	r7, #24
 8009b06:	46bd      	mov	sp, r7
 8009b08:	bd80      	pop	{r7, pc}

08009b0a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009b0a:	b580      	push	{r7, lr}
 8009b0c:	b082      	sub	sp, #8
 8009b0e:	af00      	add	r7, sp, #0
 8009b10:	6078      	str	r0, [r7, #4]
 8009b12:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d018      	beq.n	8009b4e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	68da      	ldr	r2, [r3, #12]
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b24:	441a      	add	r2, r3
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	68da      	ldr	r2, [r3, #12]
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	685b      	ldr	r3, [r3, #4]
 8009b32:	429a      	cmp	r2, r3
 8009b34:	d303      	bcc.n	8009b3e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681a      	ldr	r2, [r3, #0]
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	68d9      	ldr	r1, [r3, #12]
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b46:	461a      	mov	r2, r3
 8009b48:	6838      	ldr	r0, [r7, #0]
 8009b4a:	f00b fb0d 	bl	8015168 <memcpy>
	}
}
 8009b4e:	bf00      	nop
 8009b50:	3708      	adds	r7, #8
 8009b52:	46bd      	mov	sp, r7
 8009b54:	bd80      	pop	{r7, pc}

08009b56 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009b56:	b580      	push	{r7, lr}
 8009b58:	b084      	sub	sp, #16
 8009b5a:	af00      	add	r7, sp, #0
 8009b5c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009b5e:	f002 f86d 	bl	800bc3c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009b68:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009b6a:	e011      	b.n	8009b90 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d012      	beq.n	8009b9a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	3324      	adds	r3, #36	; 0x24
 8009b78:	4618      	mov	r0, r3
 8009b7a:	f000 fdc3 	bl	800a704 <xTaskRemoveFromEventList>
 8009b7e:	4603      	mov	r3, r0
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d001      	beq.n	8009b88 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009b84:	f000 fea6 	bl	800a8d4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009b88:	7bfb      	ldrb	r3, [r7, #15]
 8009b8a:	3b01      	subs	r3, #1
 8009b8c:	b2db      	uxtb	r3, r3
 8009b8e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009b90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	dce9      	bgt.n	8009b6c <prvUnlockQueue+0x16>
 8009b98:	e000      	b.n	8009b9c <prvUnlockQueue+0x46>
					break;
 8009b9a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	22ff      	movs	r2, #255	; 0xff
 8009ba0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009ba4:	f002 f878 	bl	800bc98 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009ba8:	f002 f848 	bl	800bc3c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009bb2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009bb4:	e011      	b.n	8009bda <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	691b      	ldr	r3, [r3, #16]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d012      	beq.n	8009be4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	3310      	adds	r3, #16
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	f000 fd9e 	bl	800a704 <xTaskRemoveFromEventList>
 8009bc8:	4603      	mov	r3, r0
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d001      	beq.n	8009bd2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009bce:	f000 fe81 	bl	800a8d4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009bd2:	7bbb      	ldrb	r3, [r7, #14]
 8009bd4:	3b01      	subs	r3, #1
 8009bd6:	b2db      	uxtb	r3, r3
 8009bd8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009bda:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	dce9      	bgt.n	8009bb6 <prvUnlockQueue+0x60>
 8009be2:	e000      	b.n	8009be6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009be4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	22ff      	movs	r2, #255	; 0xff
 8009bea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009bee:	f002 f853 	bl	800bc98 <vPortExitCritical>
}
 8009bf2:	bf00      	nop
 8009bf4:	3710      	adds	r7, #16
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	bd80      	pop	{r7, pc}

08009bfa <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009bfa:	b580      	push	{r7, lr}
 8009bfc:	b084      	sub	sp, #16
 8009bfe:	af00      	add	r7, sp, #0
 8009c00:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009c02:	f002 f81b 	bl	800bc3c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d102      	bne.n	8009c14 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009c0e:	2301      	movs	r3, #1
 8009c10:	60fb      	str	r3, [r7, #12]
 8009c12:	e001      	b.n	8009c18 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009c14:	2300      	movs	r3, #0
 8009c16:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009c18:	f002 f83e 	bl	800bc98 <vPortExitCritical>

	return xReturn;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
}
 8009c1e:	4618      	mov	r0, r3
 8009c20:	3710      	adds	r7, #16
 8009c22:	46bd      	mov	sp, r7
 8009c24:	bd80      	pop	{r7, pc}

08009c26 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009c26:	b580      	push	{r7, lr}
 8009c28:	b084      	sub	sp, #16
 8009c2a:	af00      	add	r7, sp, #0
 8009c2c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009c2e:	f002 f805 	bl	800bc3c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c3a:	429a      	cmp	r2, r3
 8009c3c:	d102      	bne.n	8009c44 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009c3e:	2301      	movs	r3, #1
 8009c40:	60fb      	str	r3, [r7, #12]
 8009c42:	e001      	b.n	8009c48 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009c44:	2300      	movs	r3, #0
 8009c46:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009c48:	f002 f826 	bl	800bc98 <vPortExitCritical>

	return xReturn;
 8009c4c:	68fb      	ldr	r3, [r7, #12]
}
 8009c4e:	4618      	mov	r0, r3
 8009c50:	3710      	adds	r7, #16
 8009c52:	46bd      	mov	sp, r7
 8009c54:	bd80      	pop	{r7, pc}
	...

08009c58 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009c58:	b480      	push	{r7}
 8009c5a:	b085      	sub	sp, #20
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
 8009c60:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009c62:	2300      	movs	r3, #0
 8009c64:	60fb      	str	r3, [r7, #12]
 8009c66:	e014      	b.n	8009c92 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009c68:	4a0e      	ldr	r2, [pc, #56]	; (8009ca4 <vQueueAddToRegistry+0x4c>)
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d10b      	bne.n	8009c8c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009c74:	490b      	ldr	r1, [pc, #44]	; (8009ca4 <vQueueAddToRegistry+0x4c>)
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	683a      	ldr	r2, [r7, #0]
 8009c7a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009c7e:	4a09      	ldr	r2, [pc, #36]	; (8009ca4 <vQueueAddToRegistry+0x4c>)
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	00db      	lsls	r3, r3, #3
 8009c84:	4413      	add	r3, r2
 8009c86:	687a      	ldr	r2, [r7, #4]
 8009c88:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009c8a:	e005      	b.n	8009c98 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	3301      	adds	r3, #1
 8009c90:	60fb      	str	r3, [r7, #12]
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	2b07      	cmp	r3, #7
 8009c96:	d9e7      	bls.n	8009c68 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009c98:	bf00      	nop
 8009c9a:	3714      	adds	r7, #20
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca2:	4770      	bx	lr
 8009ca4:	20006c74 	.word	0x20006c74

08009ca8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b086      	sub	sp, #24
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	60f8      	str	r0, [r7, #12]
 8009cb0:	60b9      	str	r1, [r7, #8]
 8009cb2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009cb8:	f001 ffc0 	bl	800bc3c <vPortEnterCritical>
 8009cbc:	697b      	ldr	r3, [r7, #20]
 8009cbe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009cc2:	b25b      	sxtb	r3, r3
 8009cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cc8:	d103      	bne.n	8009cd2 <vQueueWaitForMessageRestricted+0x2a>
 8009cca:	697b      	ldr	r3, [r7, #20]
 8009ccc:	2200      	movs	r2, #0
 8009cce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009cd2:	697b      	ldr	r3, [r7, #20]
 8009cd4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009cd8:	b25b      	sxtb	r3, r3
 8009cda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cde:	d103      	bne.n	8009ce8 <vQueueWaitForMessageRestricted+0x40>
 8009ce0:	697b      	ldr	r3, [r7, #20]
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009ce8:	f001 ffd6 	bl	800bc98 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009cec:	697b      	ldr	r3, [r7, #20]
 8009cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d106      	bne.n	8009d02 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009cf4:	697b      	ldr	r3, [r7, #20]
 8009cf6:	3324      	adds	r3, #36	; 0x24
 8009cf8:	687a      	ldr	r2, [r7, #4]
 8009cfa:	68b9      	ldr	r1, [r7, #8]
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	f000 fcd7 	bl	800a6b0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009d02:	6978      	ldr	r0, [r7, #20]
 8009d04:	f7ff ff27 	bl	8009b56 <prvUnlockQueue>
	}
 8009d08:	bf00      	nop
 8009d0a:	3718      	adds	r7, #24
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	bd80      	pop	{r7, pc}

08009d10 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b08e      	sub	sp, #56	; 0x38
 8009d14:	af04      	add	r7, sp, #16
 8009d16:	60f8      	str	r0, [r7, #12]
 8009d18:	60b9      	str	r1, [r7, #8]
 8009d1a:	607a      	str	r2, [r7, #4]
 8009d1c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009d1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d109      	bne.n	8009d38 <xTaskCreateStatic+0x28>
	__asm volatile
 8009d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d28:	f383 8811 	msr	BASEPRI, r3
 8009d2c:	f3bf 8f6f 	isb	sy
 8009d30:	f3bf 8f4f 	dsb	sy
 8009d34:	623b      	str	r3, [r7, #32]
 8009d36:	e7fe      	b.n	8009d36 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8009d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d109      	bne.n	8009d52 <xTaskCreateStatic+0x42>
 8009d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d42:	f383 8811 	msr	BASEPRI, r3
 8009d46:	f3bf 8f6f 	isb	sy
 8009d4a:	f3bf 8f4f 	dsb	sy
 8009d4e:	61fb      	str	r3, [r7, #28]
 8009d50:	e7fe      	b.n	8009d50 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009d52:	2354      	movs	r3, #84	; 0x54
 8009d54:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009d56:	693b      	ldr	r3, [r7, #16]
 8009d58:	2b54      	cmp	r3, #84	; 0x54
 8009d5a:	d009      	beq.n	8009d70 <xTaskCreateStatic+0x60>
 8009d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d60:	f383 8811 	msr	BASEPRI, r3
 8009d64:	f3bf 8f6f 	isb	sy
 8009d68:	f3bf 8f4f 	dsb	sy
 8009d6c:	61bb      	str	r3, [r7, #24]
 8009d6e:	e7fe      	b.n	8009d6e <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d01e      	beq.n	8009db4 <xTaskCreateStatic+0xa4>
 8009d76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d01b      	beq.n	8009db4 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d7e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009d84:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d88:	2202      	movs	r2, #2
 8009d8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009d8e:	2300      	movs	r3, #0
 8009d90:	9303      	str	r3, [sp, #12]
 8009d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d94:	9302      	str	r3, [sp, #8]
 8009d96:	f107 0314 	add.w	r3, r7, #20
 8009d9a:	9301      	str	r3, [sp, #4]
 8009d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d9e:	9300      	str	r3, [sp, #0]
 8009da0:	683b      	ldr	r3, [r7, #0]
 8009da2:	687a      	ldr	r2, [r7, #4]
 8009da4:	68b9      	ldr	r1, [r7, #8]
 8009da6:	68f8      	ldr	r0, [r7, #12]
 8009da8:	f000 f850 	bl	8009e4c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009dac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009dae:	f000 f8d7 	bl	8009f60 <prvAddNewTaskToReadyList>
 8009db2:	e001      	b.n	8009db8 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8009db4:	2300      	movs	r3, #0
 8009db6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009db8:	697b      	ldr	r3, [r7, #20]
	}
 8009dba:	4618      	mov	r0, r3
 8009dbc:	3728      	adds	r7, #40	; 0x28
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	bd80      	pop	{r7, pc}

08009dc2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009dc2:	b580      	push	{r7, lr}
 8009dc4:	b08c      	sub	sp, #48	; 0x30
 8009dc6:	af04      	add	r7, sp, #16
 8009dc8:	60f8      	str	r0, [r7, #12]
 8009dca:	60b9      	str	r1, [r7, #8]
 8009dcc:	603b      	str	r3, [r7, #0]
 8009dce:	4613      	mov	r3, r2
 8009dd0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009dd2:	88fb      	ldrh	r3, [r7, #6]
 8009dd4:	009b      	lsls	r3, r3, #2
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	f002 f84a 	bl	800be70 <pvPortMalloc>
 8009ddc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009dde:	697b      	ldr	r3, [r7, #20]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d00e      	beq.n	8009e02 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8009de4:	2054      	movs	r0, #84	; 0x54
 8009de6:	f002 f843 	bl	800be70 <pvPortMalloc>
 8009dea:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009dec:	69fb      	ldr	r3, [r7, #28]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d003      	beq.n	8009dfa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009df2:	69fb      	ldr	r3, [r7, #28]
 8009df4:	697a      	ldr	r2, [r7, #20]
 8009df6:	631a      	str	r2, [r3, #48]	; 0x30
 8009df8:	e005      	b.n	8009e06 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009dfa:	6978      	ldr	r0, [r7, #20]
 8009dfc:	f002 f8fe 	bl	800bffc <vPortFree>
 8009e00:	e001      	b.n	8009e06 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009e02:	2300      	movs	r3, #0
 8009e04:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009e06:	69fb      	ldr	r3, [r7, #28]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d017      	beq.n	8009e3c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009e0c:	69fb      	ldr	r3, [r7, #28]
 8009e0e:	2200      	movs	r2, #0
 8009e10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009e14:	88fa      	ldrh	r2, [r7, #6]
 8009e16:	2300      	movs	r3, #0
 8009e18:	9303      	str	r3, [sp, #12]
 8009e1a:	69fb      	ldr	r3, [r7, #28]
 8009e1c:	9302      	str	r3, [sp, #8]
 8009e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e20:	9301      	str	r3, [sp, #4]
 8009e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e24:	9300      	str	r3, [sp, #0]
 8009e26:	683b      	ldr	r3, [r7, #0]
 8009e28:	68b9      	ldr	r1, [r7, #8]
 8009e2a:	68f8      	ldr	r0, [r7, #12]
 8009e2c:	f000 f80e 	bl	8009e4c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009e30:	69f8      	ldr	r0, [r7, #28]
 8009e32:	f000 f895 	bl	8009f60 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009e36:	2301      	movs	r3, #1
 8009e38:	61bb      	str	r3, [r7, #24]
 8009e3a:	e002      	b.n	8009e42 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009e3c:	f04f 33ff 	mov.w	r3, #4294967295
 8009e40:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009e42:	69bb      	ldr	r3, [r7, #24]
	}
 8009e44:	4618      	mov	r0, r3
 8009e46:	3720      	adds	r7, #32
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	bd80      	pop	{r7, pc}

08009e4c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b088      	sub	sp, #32
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	60f8      	str	r0, [r7, #12]
 8009e54:	60b9      	str	r1, [r7, #8]
 8009e56:	607a      	str	r2, [r7, #4]
 8009e58:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e5c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	009b      	lsls	r3, r3, #2
 8009e62:	461a      	mov	r2, r3
 8009e64:	21a5      	movs	r1, #165	; 0xa5
 8009e66:	f00b f98a 	bl	801517e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8009e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009e74:	3b01      	subs	r3, #1
 8009e76:	009b      	lsls	r3, r3, #2
 8009e78:	4413      	add	r3, r2
 8009e7a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8009e7c:	69bb      	ldr	r3, [r7, #24]
 8009e7e:	f023 0307 	bic.w	r3, r3, #7
 8009e82:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009e84:	69bb      	ldr	r3, [r7, #24]
 8009e86:	f003 0307 	and.w	r3, r3, #7
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d009      	beq.n	8009ea2 <prvInitialiseNewTask+0x56>
 8009e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e92:	f383 8811 	msr	BASEPRI, r3
 8009e96:	f3bf 8f6f 	isb	sy
 8009e9a:	f3bf 8f4f 	dsb	sy
 8009e9e:	617b      	str	r3, [r7, #20]
 8009ea0:	e7fe      	b.n	8009ea0 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	61fb      	str	r3, [r7, #28]
 8009ea6:	e012      	b.n	8009ece <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009ea8:	68ba      	ldr	r2, [r7, #8]
 8009eaa:	69fb      	ldr	r3, [r7, #28]
 8009eac:	4413      	add	r3, r2
 8009eae:	7819      	ldrb	r1, [r3, #0]
 8009eb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009eb2:	69fb      	ldr	r3, [r7, #28]
 8009eb4:	4413      	add	r3, r2
 8009eb6:	3334      	adds	r3, #52	; 0x34
 8009eb8:	460a      	mov	r2, r1
 8009eba:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8009ebc:	68ba      	ldr	r2, [r7, #8]
 8009ebe:	69fb      	ldr	r3, [r7, #28]
 8009ec0:	4413      	add	r3, r2
 8009ec2:	781b      	ldrb	r3, [r3, #0]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d006      	beq.n	8009ed6 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009ec8:	69fb      	ldr	r3, [r7, #28]
 8009eca:	3301      	adds	r3, #1
 8009ecc:	61fb      	str	r3, [r7, #28]
 8009ece:	69fb      	ldr	r3, [r7, #28]
 8009ed0:	2b0f      	cmp	r3, #15
 8009ed2:	d9e9      	bls.n	8009ea8 <prvInitialiseNewTask+0x5c>
 8009ed4:	e000      	b.n	8009ed8 <prvInitialiseNewTask+0x8c>
		{
			break;
 8009ed6:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eda:	2200      	movs	r2, #0
 8009edc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ee2:	2b06      	cmp	r3, #6
 8009ee4:	d901      	bls.n	8009eea <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009ee6:	2306      	movs	r3, #6
 8009ee8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009eee:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ef2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009ef4:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8009ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ef8:	2200      	movs	r2, #0
 8009efa:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009efe:	3304      	adds	r3, #4
 8009f00:	4618      	mov	r0, r3
 8009f02:	f7fe fe87 	bl	8008c14 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f08:	3318      	adds	r3, #24
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	f7fe fe82 	bl	8008c14 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f14:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f18:	f1c3 0207 	rsb	r2, r3, #7
 8009f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f1e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f24:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f28:	2200      	movs	r2, #0
 8009f2a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f2e:	2200      	movs	r2, #0
 8009f30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	}
	#endif

	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		pxNewTCB->ucDelayAborted = pdFALSE;
 8009f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f36:	2200      	movs	r2, #0
 8009f38:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009f3c:	683a      	ldr	r2, [r7, #0]
 8009f3e:	68f9      	ldr	r1, [r7, #12]
 8009f40:	69b8      	ldr	r0, [r7, #24]
 8009f42:	f001 fd55 	bl	800b9f0 <pxPortInitialiseStack>
 8009f46:	4602      	mov	r2, r0
 8009f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f4a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8009f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d002      	beq.n	8009f58 <prvInitialiseNewTask+0x10c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f56:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009f58:	bf00      	nop
 8009f5a:	3720      	adds	r7, #32
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	bd80      	pop	{r7, pc}

08009f60 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b082      	sub	sp, #8
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009f68:	f001 fe68 	bl	800bc3c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009f6c:	4b2a      	ldr	r3, [pc, #168]	; (800a018 <prvAddNewTaskToReadyList+0xb8>)
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	3301      	adds	r3, #1
 8009f72:	4a29      	ldr	r2, [pc, #164]	; (800a018 <prvAddNewTaskToReadyList+0xb8>)
 8009f74:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009f76:	4b29      	ldr	r3, [pc, #164]	; (800a01c <prvAddNewTaskToReadyList+0xbc>)
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d109      	bne.n	8009f92 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009f7e:	4a27      	ldr	r2, [pc, #156]	; (800a01c <prvAddNewTaskToReadyList+0xbc>)
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009f84:	4b24      	ldr	r3, [pc, #144]	; (800a018 <prvAddNewTaskToReadyList+0xb8>)
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	2b01      	cmp	r3, #1
 8009f8a:	d110      	bne.n	8009fae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009f8c:	f000 fcb8 	bl	800a900 <prvInitialiseTaskLists>
 8009f90:	e00d      	b.n	8009fae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009f92:	4b23      	ldr	r3, [pc, #140]	; (800a020 <prvAddNewTaskToReadyList+0xc0>)
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d109      	bne.n	8009fae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009f9a:	4b20      	ldr	r3, [pc, #128]	; (800a01c <prvAddNewTaskToReadyList+0xbc>)
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fa4:	429a      	cmp	r2, r3
 8009fa6:	d802      	bhi.n	8009fae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009fa8:	4a1c      	ldr	r2, [pc, #112]	; (800a01c <prvAddNewTaskToReadyList+0xbc>)
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009fae:	4b1d      	ldr	r3, [pc, #116]	; (800a024 <prvAddNewTaskToReadyList+0xc4>)
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	3301      	adds	r3, #1
 8009fb4:	4a1b      	ldr	r2, [pc, #108]	; (800a024 <prvAddNewTaskToReadyList+0xc4>)
 8009fb6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fbc:	2201      	movs	r2, #1
 8009fbe:	409a      	lsls	r2, r3
 8009fc0:	4b19      	ldr	r3, [pc, #100]	; (800a028 <prvAddNewTaskToReadyList+0xc8>)
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	4313      	orrs	r3, r2
 8009fc6:	4a18      	ldr	r2, [pc, #96]	; (800a028 <prvAddNewTaskToReadyList+0xc8>)
 8009fc8:	6013      	str	r3, [r2, #0]
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fce:	4613      	mov	r3, r2
 8009fd0:	009b      	lsls	r3, r3, #2
 8009fd2:	4413      	add	r3, r2
 8009fd4:	009b      	lsls	r3, r3, #2
 8009fd6:	4a15      	ldr	r2, [pc, #84]	; (800a02c <prvAddNewTaskToReadyList+0xcc>)
 8009fd8:	441a      	add	r2, r3
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	3304      	adds	r3, #4
 8009fde:	4619      	mov	r1, r3
 8009fe0:	4610      	mov	r0, r2
 8009fe2:	f7fe fe24 	bl	8008c2e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009fe6:	f001 fe57 	bl	800bc98 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009fea:	4b0d      	ldr	r3, [pc, #52]	; (800a020 <prvAddNewTaskToReadyList+0xc0>)
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d00e      	beq.n	800a010 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009ff2:	4b0a      	ldr	r3, [pc, #40]	; (800a01c <prvAddNewTaskToReadyList+0xbc>)
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ffc:	429a      	cmp	r2, r3
 8009ffe:	d207      	bcs.n	800a010 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a000:	4b0b      	ldr	r3, [pc, #44]	; (800a030 <prvAddNewTaskToReadyList+0xd0>)
 800a002:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a006:	601a      	str	r2, [r3, #0]
 800a008:	f3bf 8f4f 	dsb	sy
 800a00c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a010:	bf00      	nop
 800a012:	3708      	adds	r7, #8
 800a014:	46bd      	mov	sp, r7
 800a016:	bd80      	pop	{r7, pc}
 800a018:	200003cc 	.word	0x200003cc
 800a01c:	200002cc 	.word	0x200002cc
 800a020:	200003d8 	.word	0x200003d8
 800a024:	200003e8 	.word	0x200003e8
 800a028:	200003d4 	.word	0x200003d4
 800a02c:	200002d0 	.word	0x200002d0
 800a030:	e000ed04 	.word	0xe000ed04

0800a034 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800a034:	b580      	push	{r7, lr}
 800a036:	b08a      	sub	sp, #40	; 0x28
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
 800a03c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800a03e:	2300      	movs	r3, #0
 800a040:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d109      	bne.n	800a05c <vTaskDelayUntil+0x28>
 800a048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a04c:	f383 8811 	msr	BASEPRI, r3
 800a050:	f3bf 8f6f 	isb	sy
 800a054:	f3bf 8f4f 	dsb	sy
 800a058:	617b      	str	r3, [r7, #20]
 800a05a:	e7fe      	b.n	800a05a <vTaskDelayUntil+0x26>
		configASSERT( ( xTimeIncrement > 0U ) );
 800a05c:	683b      	ldr	r3, [r7, #0]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d109      	bne.n	800a076 <vTaskDelayUntil+0x42>
 800a062:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a066:	f383 8811 	msr	BASEPRI, r3
 800a06a:	f3bf 8f6f 	isb	sy
 800a06e:	f3bf 8f4f 	dsb	sy
 800a072:	613b      	str	r3, [r7, #16]
 800a074:	e7fe      	b.n	800a074 <vTaskDelayUntil+0x40>
		configASSERT( uxSchedulerSuspended == 0 );
 800a076:	4b29      	ldr	r3, [pc, #164]	; (800a11c <vTaskDelayUntil+0xe8>)
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d009      	beq.n	800a092 <vTaskDelayUntil+0x5e>
 800a07e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a082:	f383 8811 	msr	BASEPRI, r3
 800a086:	f3bf 8f6f 	isb	sy
 800a08a:	f3bf 8f4f 	dsb	sy
 800a08e:	60fb      	str	r3, [r7, #12]
 800a090:	e7fe      	b.n	800a090 <vTaskDelayUntil+0x5c>

		vTaskSuspendAll();
 800a092:	f000 f8e1 	bl	800a258 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800a096:	4b22      	ldr	r3, [pc, #136]	; (800a120 <vTaskDelayUntil+0xec>)
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	683a      	ldr	r2, [r7, #0]
 800a0a2:	4413      	add	r3, r2
 800a0a4:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	6a3a      	ldr	r2, [r7, #32]
 800a0ac:	429a      	cmp	r2, r3
 800a0ae:	d20b      	bcs.n	800a0c8 <vTaskDelayUntil+0x94>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	69fa      	ldr	r2, [r7, #28]
 800a0b6:	429a      	cmp	r2, r3
 800a0b8:	d211      	bcs.n	800a0de <vTaskDelayUntil+0xaa>
 800a0ba:	69fa      	ldr	r2, [r7, #28]
 800a0bc:	6a3b      	ldr	r3, [r7, #32]
 800a0be:	429a      	cmp	r2, r3
 800a0c0:	d90d      	bls.n	800a0de <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 800a0c2:	2301      	movs	r3, #1
 800a0c4:	627b      	str	r3, [r7, #36]	; 0x24
 800a0c6:	e00a      	b.n	800a0de <vTaskDelayUntil+0xaa>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	69fa      	ldr	r2, [r7, #28]
 800a0ce:	429a      	cmp	r2, r3
 800a0d0:	d303      	bcc.n	800a0da <vTaskDelayUntil+0xa6>
 800a0d2:	69fa      	ldr	r2, [r7, #28]
 800a0d4:	6a3b      	ldr	r3, [r7, #32]
 800a0d6:	429a      	cmp	r2, r3
 800a0d8:	d901      	bls.n	800a0de <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 800a0da:	2301      	movs	r3, #1
 800a0dc:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	69fa      	ldr	r2, [r7, #28]
 800a0e2:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800a0e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d006      	beq.n	800a0f8 <vTaskDelayUntil+0xc4>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800a0ea:	69fa      	ldr	r2, [r7, #28]
 800a0ec:	6a3b      	ldr	r3, [r7, #32]
 800a0ee:	1ad3      	subs	r3, r2, r3
 800a0f0:	2100      	movs	r1, #0
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	f001 f894 	bl	800b220 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800a0f8:	f000 f8bc 	bl	800a274 <xTaskResumeAll>
 800a0fc:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a0fe:	69bb      	ldr	r3, [r7, #24]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d107      	bne.n	800a114 <vTaskDelayUntil+0xe0>
		{
			portYIELD_WITHIN_API();
 800a104:	4b07      	ldr	r3, [pc, #28]	; (800a124 <vTaskDelayUntil+0xf0>)
 800a106:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a10a:	601a      	str	r2, [r3, #0]
 800a10c:	f3bf 8f4f 	dsb	sy
 800a110:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a114:	bf00      	nop
 800a116:	3728      	adds	r7, #40	; 0x28
 800a118:	46bd      	mov	sp, r7
 800a11a:	bd80      	pop	{r7, pc}
 800a11c:	200003f4 	.word	0x200003f4
 800a120:	200003d0 	.word	0x200003d0
 800a124:	e000ed04 	.word	0xe000ed04

0800a128 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a128:	b580      	push	{r7, lr}
 800a12a:	b084      	sub	sp, #16
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a130:	2300      	movs	r3, #0
 800a132:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d016      	beq.n	800a168 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a13a:	4b13      	ldr	r3, [pc, #76]	; (800a188 <vTaskDelay+0x60>)
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d009      	beq.n	800a156 <vTaskDelay+0x2e>
 800a142:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a146:	f383 8811 	msr	BASEPRI, r3
 800a14a:	f3bf 8f6f 	isb	sy
 800a14e:	f3bf 8f4f 	dsb	sy
 800a152:	60bb      	str	r3, [r7, #8]
 800a154:	e7fe      	b.n	800a154 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800a156:	f000 f87f 	bl	800a258 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a15a:	2100      	movs	r1, #0
 800a15c:	6878      	ldr	r0, [r7, #4]
 800a15e:	f001 f85f 	bl	800b220 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a162:	f000 f887 	bl	800a274 <xTaskResumeAll>
 800a166:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d107      	bne.n	800a17e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800a16e:	4b07      	ldr	r3, [pc, #28]	; (800a18c <vTaskDelay+0x64>)
 800a170:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a174:	601a      	str	r2, [r3, #0]
 800a176:	f3bf 8f4f 	dsb	sy
 800a17a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a17e:	bf00      	nop
 800a180:	3710      	adds	r7, #16
 800a182:	46bd      	mov	sp, r7
 800a184:	bd80      	pop	{r7, pc}
 800a186:	bf00      	nop
 800a188:	200003f4 	.word	0x200003f4
 800a18c:	e000ed04 	.word	0xe000ed04

0800a190 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b08a      	sub	sp, #40	; 0x28
 800a194:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a196:	2300      	movs	r3, #0
 800a198:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a19a:	2300      	movs	r3, #0
 800a19c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a19e:	463a      	mov	r2, r7
 800a1a0:	1d39      	adds	r1, r7, #4
 800a1a2:	f107 0308 	add.w	r3, r7, #8
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	f008 fa0e 	bl	80125c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a1ac:	6839      	ldr	r1, [r7, #0]
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	68ba      	ldr	r2, [r7, #8]
 800a1b2:	9202      	str	r2, [sp, #8]
 800a1b4:	9301      	str	r3, [sp, #4]
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	9300      	str	r3, [sp, #0]
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	460a      	mov	r2, r1
 800a1be:	4920      	ldr	r1, [pc, #128]	; (800a240 <vTaskStartScheduler+0xb0>)
 800a1c0:	4820      	ldr	r0, [pc, #128]	; (800a244 <vTaskStartScheduler+0xb4>)
 800a1c2:	f7ff fda5 	bl	8009d10 <xTaskCreateStatic>
 800a1c6:	4602      	mov	r2, r0
 800a1c8:	4b1f      	ldr	r3, [pc, #124]	; (800a248 <vTaskStartScheduler+0xb8>)
 800a1ca:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a1cc:	4b1e      	ldr	r3, [pc, #120]	; (800a248 <vTaskStartScheduler+0xb8>)
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d002      	beq.n	800a1da <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a1d4:	2301      	movs	r3, #1
 800a1d6:	617b      	str	r3, [r7, #20]
 800a1d8:	e001      	b.n	800a1de <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a1da:	2300      	movs	r3, #0
 800a1dc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a1de:	697b      	ldr	r3, [r7, #20]
 800a1e0:	2b01      	cmp	r3, #1
 800a1e2:	d102      	bne.n	800a1ea <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a1e4:	f001 f886 	bl	800b2f4 <xTimerCreateTimerTask>
 800a1e8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a1ea:	697b      	ldr	r3, [r7, #20]
 800a1ec:	2b01      	cmp	r3, #1
 800a1ee:	d115      	bne.n	800a21c <vTaskStartScheduler+0x8c>
 800a1f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1f4:	f383 8811 	msr	BASEPRI, r3
 800a1f8:	f3bf 8f6f 	isb	sy
 800a1fc:	f3bf 8f4f 	dsb	sy
 800a200:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a202:	4b12      	ldr	r3, [pc, #72]	; (800a24c <vTaskStartScheduler+0xbc>)
 800a204:	f04f 32ff 	mov.w	r2, #4294967295
 800a208:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a20a:	4b11      	ldr	r3, [pc, #68]	; (800a250 <vTaskStartScheduler+0xc0>)
 800a20c:	2201      	movs	r2, #1
 800a20e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800a210:	4b10      	ldr	r3, [pc, #64]	; (800a254 <vTaskStartScheduler+0xc4>)
 800a212:	2200      	movs	r2, #0
 800a214:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a216:	f001 fc73 	bl	800bb00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a21a:	e00d      	b.n	800a238 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a21c:	697b      	ldr	r3, [r7, #20]
 800a21e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a222:	d109      	bne.n	800a238 <vTaskStartScheduler+0xa8>
 800a224:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a228:	f383 8811 	msr	BASEPRI, r3
 800a22c:	f3bf 8f6f 	isb	sy
 800a230:	f3bf 8f4f 	dsb	sy
 800a234:	60fb      	str	r3, [r7, #12]
 800a236:	e7fe      	b.n	800a236 <vTaskStartScheduler+0xa6>
}
 800a238:	bf00      	nop
 800a23a:	3718      	adds	r7, #24
 800a23c:	46bd      	mov	sp, r7
 800a23e:	bd80      	pop	{r7, pc}
 800a240:	080188ec 	.word	0x080188ec
 800a244:	0800a8ed 	.word	0x0800a8ed
 800a248:	200003f0 	.word	0x200003f0
 800a24c:	200003ec 	.word	0x200003ec
 800a250:	200003d8 	.word	0x200003d8
 800a254:	200003d0 	.word	0x200003d0

0800a258 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a258:	b480      	push	{r7}
 800a25a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800a25c:	4b04      	ldr	r3, [pc, #16]	; (800a270 <vTaskSuspendAll+0x18>)
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	3301      	adds	r3, #1
 800a262:	4a03      	ldr	r2, [pc, #12]	; (800a270 <vTaskSuspendAll+0x18>)
 800a264:	6013      	str	r3, [r2, #0]
}
 800a266:	bf00      	nop
 800a268:	46bd      	mov	sp, r7
 800a26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26e:	4770      	bx	lr
 800a270:	200003f4 	.word	0x200003f4

0800a274 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a274:	b580      	push	{r7, lr}
 800a276:	b084      	sub	sp, #16
 800a278:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a27a:	2300      	movs	r3, #0
 800a27c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a27e:	2300      	movs	r3, #0
 800a280:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a282:	4b41      	ldr	r3, [pc, #260]	; (800a388 <xTaskResumeAll+0x114>)
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d109      	bne.n	800a29e <xTaskResumeAll+0x2a>
 800a28a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a28e:	f383 8811 	msr	BASEPRI, r3
 800a292:	f3bf 8f6f 	isb	sy
 800a296:	f3bf 8f4f 	dsb	sy
 800a29a:	603b      	str	r3, [r7, #0]
 800a29c:	e7fe      	b.n	800a29c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a29e:	f001 fccd 	bl	800bc3c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a2a2:	4b39      	ldr	r3, [pc, #228]	; (800a388 <xTaskResumeAll+0x114>)
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	3b01      	subs	r3, #1
 800a2a8:	4a37      	ldr	r2, [pc, #220]	; (800a388 <xTaskResumeAll+0x114>)
 800a2aa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a2ac:	4b36      	ldr	r3, [pc, #216]	; (800a388 <xTaskResumeAll+0x114>)
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d161      	bne.n	800a378 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a2b4:	4b35      	ldr	r3, [pc, #212]	; (800a38c <xTaskResumeAll+0x118>)
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d05d      	beq.n	800a378 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a2bc:	e02e      	b.n	800a31c <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800a2be:	4b34      	ldr	r3, [pc, #208]	; (800a390 <xTaskResumeAll+0x11c>)
 800a2c0:	68db      	ldr	r3, [r3, #12]
 800a2c2:	68db      	ldr	r3, [r3, #12]
 800a2c4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	3318      	adds	r3, #24
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	f7fe fd0c 	bl	8008ce8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	3304      	adds	r3, #4
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	f7fe fd07 	bl	8008ce8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2de:	2201      	movs	r2, #1
 800a2e0:	409a      	lsls	r2, r3
 800a2e2:	4b2c      	ldr	r3, [pc, #176]	; (800a394 <xTaskResumeAll+0x120>)
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	4313      	orrs	r3, r2
 800a2e8:	4a2a      	ldr	r2, [pc, #168]	; (800a394 <xTaskResumeAll+0x120>)
 800a2ea:	6013      	str	r3, [r2, #0]
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2f0:	4613      	mov	r3, r2
 800a2f2:	009b      	lsls	r3, r3, #2
 800a2f4:	4413      	add	r3, r2
 800a2f6:	009b      	lsls	r3, r3, #2
 800a2f8:	4a27      	ldr	r2, [pc, #156]	; (800a398 <xTaskResumeAll+0x124>)
 800a2fa:	441a      	add	r2, r3
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	3304      	adds	r3, #4
 800a300:	4619      	mov	r1, r3
 800a302:	4610      	mov	r0, r2
 800a304:	f7fe fc93 	bl	8008c2e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a30c:	4b23      	ldr	r3, [pc, #140]	; (800a39c <xTaskResumeAll+0x128>)
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a312:	429a      	cmp	r2, r3
 800a314:	d302      	bcc.n	800a31c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800a316:	4b22      	ldr	r3, [pc, #136]	; (800a3a0 <xTaskResumeAll+0x12c>)
 800a318:	2201      	movs	r2, #1
 800a31a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a31c:	4b1c      	ldr	r3, [pc, #112]	; (800a390 <xTaskResumeAll+0x11c>)
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d1cc      	bne.n	800a2be <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d001      	beq.n	800a32e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a32a:	f000 fb83 	bl	800aa34 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800a32e:	4b1d      	ldr	r3, [pc, #116]	; (800a3a4 <xTaskResumeAll+0x130>)
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d010      	beq.n	800a35c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a33a:	f000 f859 	bl	800a3f0 <xTaskIncrementTick>
 800a33e:	4603      	mov	r3, r0
 800a340:	2b00      	cmp	r3, #0
 800a342:	d002      	beq.n	800a34a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800a344:	4b16      	ldr	r3, [pc, #88]	; (800a3a0 <xTaskResumeAll+0x12c>)
 800a346:	2201      	movs	r2, #1
 800a348:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	3b01      	subs	r3, #1
 800a34e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d1f1      	bne.n	800a33a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800a356:	4b13      	ldr	r3, [pc, #76]	; (800a3a4 <xTaskResumeAll+0x130>)
 800a358:	2200      	movs	r2, #0
 800a35a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a35c:	4b10      	ldr	r3, [pc, #64]	; (800a3a0 <xTaskResumeAll+0x12c>)
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d009      	beq.n	800a378 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a364:	2301      	movs	r3, #1
 800a366:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a368:	4b0f      	ldr	r3, [pc, #60]	; (800a3a8 <xTaskResumeAll+0x134>)
 800a36a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a36e:	601a      	str	r2, [r3, #0]
 800a370:	f3bf 8f4f 	dsb	sy
 800a374:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a378:	f001 fc8e 	bl	800bc98 <vPortExitCritical>

	return xAlreadyYielded;
 800a37c:	68bb      	ldr	r3, [r7, #8]
}
 800a37e:	4618      	mov	r0, r3
 800a380:	3710      	adds	r7, #16
 800a382:	46bd      	mov	sp, r7
 800a384:	bd80      	pop	{r7, pc}
 800a386:	bf00      	nop
 800a388:	200003f4 	.word	0x200003f4
 800a38c:	200003cc 	.word	0x200003cc
 800a390:	2000038c 	.word	0x2000038c
 800a394:	200003d4 	.word	0x200003d4
 800a398:	200002d0 	.word	0x200002d0
 800a39c:	200002cc 	.word	0x200002cc
 800a3a0:	200003e0 	.word	0x200003e0
 800a3a4:	200003dc 	.word	0x200003dc
 800a3a8:	e000ed04 	.word	0xe000ed04

0800a3ac <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a3ac:	b480      	push	{r7}
 800a3ae:	b083      	sub	sp, #12
 800a3b0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a3b2:	4b05      	ldr	r3, [pc, #20]	; (800a3c8 <xTaskGetTickCount+0x1c>)
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a3b8:	687b      	ldr	r3, [r7, #4]
}
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	370c      	adds	r7, #12
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c4:	4770      	bx	lr
 800a3c6:	bf00      	nop
 800a3c8:	200003d0 	.word	0x200003d0

0800a3cc <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b082      	sub	sp, #8
 800a3d0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a3d2:	f001 fd0f 	bl	800bdf4 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800a3da:	4b04      	ldr	r3, [pc, #16]	; (800a3ec <xTaskGetTickCountFromISR+0x20>)
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a3e0:	683b      	ldr	r3, [r7, #0]
}
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	3708      	adds	r7, #8
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	bd80      	pop	{r7, pc}
 800a3ea:	bf00      	nop
 800a3ec:	200003d0 	.word	0x200003d0

0800a3f0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b086      	sub	sp, #24
 800a3f4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a3fa:	4b50      	ldr	r3, [pc, #320]	; (800a53c <xTaskIncrementTick+0x14c>)
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	f040 808c 	bne.w	800a51c <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a404:	4b4e      	ldr	r3, [pc, #312]	; (800a540 <xTaskIncrementTick+0x150>)
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	3301      	adds	r3, #1
 800a40a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a40c:	4a4c      	ldr	r2, [pc, #304]	; (800a540 <xTaskIncrementTick+0x150>)
 800a40e:	693b      	ldr	r3, [r7, #16]
 800a410:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a412:	693b      	ldr	r3, [r7, #16]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d11f      	bne.n	800a458 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800a418:	4b4a      	ldr	r3, [pc, #296]	; (800a544 <xTaskIncrementTick+0x154>)
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d009      	beq.n	800a436 <xTaskIncrementTick+0x46>
 800a422:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a426:	f383 8811 	msr	BASEPRI, r3
 800a42a:	f3bf 8f6f 	isb	sy
 800a42e:	f3bf 8f4f 	dsb	sy
 800a432:	603b      	str	r3, [r7, #0]
 800a434:	e7fe      	b.n	800a434 <xTaskIncrementTick+0x44>
 800a436:	4b43      	ldr	r3, [pc, #268]	; (800a544 <xTaskIncrementTick+0x154>)
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	60fb      	str	r3, [r7, #12]
 800a43c:	4b42      	ldr	r3, [pc, #264]	; (800a548 <xTaskIncrementTick+0x158>)
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	4a40      	ldr	r2, [pc, #256]	; (800a544 <xTaskIncrementTick+0x154>)
 800a442:	6013      	str	r3, [r2, #0]
 800a444:	4a40      	ldr	r2, [pc, #256]	; (800a548 <xTaskIncrementTick+0x158>)
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	6013      	str	r3, [r2, #0]
 800a44a:	4b40      	ldr	r3, [pc, #256]	; (800a54c <xTaskIncrementTick+0x15c>)
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	3301      	adds	r3, #1
 800a450:	4a3e      	ldr	r2, [pc, #248]	; (800a54c <xTaskIncrementTick+0x15c>)
 800a452:	6013      	str	r3, [r2, #0]
 800a454:	f000 faee 	bl	800aa34 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a458:	4b3d      	ldr	r3, [pc, #244]	; (800a550 <xTaskIncrementTick+0x160>)
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	693a      	ldr	r2, [r7, #16]
 800a45e:	429a      	cmp	r2, r3
 800a460:	d34d      	bcc.n	800a4fe <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a462:	4b38      	ldr	r3, [pc, #224]	; (800a544 <xTaskIncrementTick+0x154>)
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d101      	bne.n	800a470 <xTaskIncrementTick+0x80>
 800a46c:	2301      	movs	r3, #1
 800a46e:	e000      	b.n	800a472 <xTaskIncrementTick+0x82>
 800a470:	2300      	movs	r3, #0
 800a472:	2b00      	cmp	r3, #0
 800a474:	d004      	beq.n	800a480 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a476:	4b36      	ldr	r3, [pc, #216]	; (800a550 <xTaskIncrementTick+0x160>)
 800a478:	f04f 32ff 	mov.w	r2, #4294967295
 800a47c:	601a      	str	r2, [r3, #0]
					break;
 800a47e:	e03e      	b.n	800a4fe <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800a480:	4b30      	ldr	r3, [pc, #192]	; (800a544 <xTaskIncrementTick+0x154>)
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	68db      	ldr	r3, [r3, #12]
 800a486:	68db      	ldr	r3, [r3, #12]
 800a488:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a48a:	68bb      	ldr	r3, [r7, #8]
 800a48c:	685b      	ldr	r3, [r3, #4]
 800a48e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a490:	693a      	ldr	r2, [r7, #16]
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	429a      	cmp	r2, r3
 800a496:	d203      	bcs.n	800a4a0 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a498:	4a2d      	ldr	r2, [pc, #180]	; (800a550 <xTaskIncrementTick+0x160>)
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	6013      	str	r3, [r2, #0]
						break;
 800a49e:	e02e      	b.n	800a4fe <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a4a0:	68bb      	ldr	r3, [r7, #8]
 800a4a2:	3304      	adds	r3, #4
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	f7fe fc1f 	bl	8008ce8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a4aa:	68bb      	ldr	r3, [r7, #8]
 800a4ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d004      	beq.n	800a4bc <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a4b2:	68bb      	ldr	r3, [r7, #8]
 800a4b4:	3318      	adds	r3, #24
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	f7fe fc16 	bl	8008ce8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a4bc:	68bb      	ldr	r3, [r7, #8]
 800a4be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4c0:	2201      	movs	r2, #1
 800a4c2:	409a      	lsls	r2, r3
 800a4c4:	4b23      	ldr	r3, [pc, #140]	; (800a554 <xTaskIncrementTick+0x164>)
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	4313      	orrs	r3, r2
 800a4ca:	4a22      	ldr	r2, [pc, #136]	; (800a554 <xTaskIncrementTick+0x164>)
 800a4cc:	6013      	str	r3, [r2, #0]
 800a4ce:	68bb      	ldr	r3, [r7, #8]
 800a4d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4d2:	4613      	mov	r3, r2
 800a4d4:	009b      	lsls	r3, r3, #2
 800a4d6:	4413      	add	r3, r2
 800a4d8:	009b      	lsls	r3, r3, #2
 800a4da:	4a1f      	ldr	r2, [pc, #124]	; (800a558 <xTaskIncrementTick+0x168>)
 800a4dc:	441a      	add	r2, r3
 800a4de:	68bb      	ldr	r3, [r7, #8]
 800a4e0:	3304      	adds	r3, #4
 800a4e2:	4619      	mov	r1, r3
 800a4e4:	4610      	mov	r0, r2
 800a4e6:	f7fe fba2 	bl	8008c2e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a4ea:	68bb      	ldr	r3, [r7, #8]
 800a4ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4ee:	4b1b      	ldr	r3, [pc, #108]	; (800a55c <xTaskIncrementTick+0x16c>)
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4f4:	429a      	cmp	r2, r3
 800a4f6:	d3b4      	bcc.n	800a462 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800a4f8:	2301      	movs	r3, #1
 800a4fa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a4fc:	e7b1      	b.n	800a462 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a4fe:	4b17      	ldr	r3, [pc, #92]	; (800a55c <xTaskIncrementTick+0x16c>)
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a504:	4914      	ldr	r1, [pc, #80]	; (800a558 <xTaskIncrementTick+0x168>)
 800a506:	4613      	mov	r3, r2
 800a508:	009b      	lsls	r3, r3, #2
 800a50a:	4413      	add	r3, r2
 800a50c:	009b      	lsls	r3, r3, #2
 800a50e:	440b      	add	r3, r1
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	2b01      	cmp	r3, #1
 800a514:	d907      	bls.n	800a526 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800a516:	2301      	movs	r3, #1
 800a518:	617b      	str	r3, [r7, #20]
 800a51a:	e004      	b.n	800a526 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800a51c:	4b10      	ldr	r3, [pc, #64]	; (800a560 <xTaskIncrementTick+0x170>)
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	3301      	adds	r3, #1
 800a522:	4a0f      	ldr	r2, [pc, #60]	; (800a560 <xTaskIncrementTick+0x170>)
 800a524:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800a526:	4b0f      	ldr	r3, [pc, #60]	; (800a564 <xTaskIncrementTick+0x174>)
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d001      	beq.n	800a532 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800a52e:	2301      	movs	r3, #1
 800a530:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800a532:	697b      	ldr	r3, [r7, #20]
}
 800a534:	4618      	mov	r0, r3
 800a536:	3718      	adds	r7, #24
 800a538:	46bd      	mov	sp, r7
 800a53a:	bd80      	pop	{r7, pc}
 800a53c:	200003f4 	.word	0x200003f4
 800a540:	200003d0 	.word	0x200003d0
 800a544:	20000384 	.word	0x20000384
 800a548:	20000388 	.word	0x20000388
 800a54c:	200003e4 	.word	0x200003e4
 800a550:	200003ec 	.word	0x200003ec
 800a554:	200003d4 	.word	0x200003d4
 800a558:	200002d0 	.word	0x200002d0
 800a55c:	200002cc 	.word	0x200002cc
 800a560:	200003dc 	.word	0x200003dc
 800a564:	200003e0 	.word	0x200003e0

0800a568 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a568:	b580      	push	{r7, lr}
 800a56a:	b088      	sub	sp, #32
 800a56c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a56e:	4b39      	ldr	r3, [pc, #228]	; (800a654 <vTaskSwitchContext+0xec>)
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	2b00      	cmp	r3, #0
 800a574:	d003      	beq.n	800a57e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a576:	4b38      	ldr	r3, [pc, #224]	; (800a658 <vTaskSwitchContext+0xf0>)
 800a578:	2201      	movs	r2, #1
 800a57a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a57c:	e065      	b.n	800a64a <vTaskSwitchContext+0xe2>
		xYieldPending = pdFALSE;
 800a57e:	4b36      	ldr	r3, [pc, #216]	; (800a658 <vTaskSwitchContext+0xf0>)
 800a580:	2200      	movs	r2, #0
 800a582:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800a584:	4b35      	ldr	r3, [pc, #212]	; (800a65c <vTaskSwitchContext+0xf4>)
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a58a:	61fb      	str	r3, [r7, #28]
 800a58c:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800a590:	61bb      	str	r3, [r7, #24]
 800a592:	69fb      	ldr	r3, [r7, #28]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	69ba      	ldr	r2, [r7, #24]
 800a598:	429a      	cmp	r2, r3
 800a59a:	d111      	bne.n	800a5c0 <vTaskSwitchContext+0x58>
 800a59c:	69fb      	ldr	r3, [r7, #28]
 800a59e:	3304      	adds	r3, #4
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	69ba      	ldr	r2, [r7, #24]
 800a5a4:	429a      	cmp	r2, r3
 800a5a6:	d10b      	bne.n	800a5c0 <vTaskSwitchContext+0x58>
 800a5a8:	69fb      	ldr	r3, [r7, #28]
 800a5aa:	3308      	adds	r3, #8
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	69ba      	ldr	r2, [r7, #24]
 800a5b0:	429a      	cmp	r2, r3
 800a5b2:	d105      	bne.n	800a5c0 <vTaskSwitchContext+0x58>
 800a5b4:	69fb      	ldr	r3, [r7, #28]
 800a5b6:	330c      	adds	r3, #12
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	69ba      	ldr	r2, [r7, #24]
 800a5bc:	429a      	cmp	r2, r3
 800a5be:	d008      	beq.n	800a5d2 <vTaskSwitchContext+0x6a>
 800a5c0:	4b26      	ldr	r3, [pc, #152]	; (800a65c <vTaskSwitchContext+0xf4>)
 800a5c2:	681a      	ldr	r2, [r3, #0]
 800a5c4:	4b25      	ldr	r3, [pc, #148]	; (800a65c <vTaskSwitchContext+0xf4>)
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	3334      	adds	r3, #52	; 0x34
 800a5ca:	4619      	mov	r1, r3
 800a5cc:	4610      	mov	r0, r2
 800a5ce:	f007 ffe9 	bl	80125a4 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800a5d2:	4b23      	ldr	r3, [pc, #140]	; (800a660 <vTaskSwitchContext+0xf8>)
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	fab3 f383 	clz	r3, r3
 800a5de:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800a5e0:	7afb      	ldrb	r3, [r7, #11]
 800a5e2:	f1c3 031f 	rsb	r3, r3, #31
 800a5e6:	617b      	str	r3, [r7, #20]
 800a5e8:	491e      	ldr	r1, [pc, #120]	; (800a664 <vTaskSwitchContext+0xfc>)
 800a5ea:	697a      	ldr	r2, [r7, #20]
 800a5ec:	4613      	mov	r3, r2
 800a5ee:	009b      	lsls	r3, r3, #2
 800a5f0:	4413      	add	r3, r2
 800a5f2:	009b      	lsls	r3, r3, #2
 800a5f4:	440b      	add	r3, r1
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d109      	bne.n	800a610 <vTaskSwitchContext+0xa8>
	__asm volatile
 800a5fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a600:	f383 8811 	msr	BASEPRI, r3
 800a604:	f3bf 8f6f 	isb	sy
 800a608:	f3bf 8f4f 	dsb	sy
 800a60c:	607b      	str	r3, [r7, #4]
 800a60e:	e7fe      	b.n	800a60e <vTaskSwitchContext+0xa6>
 800a610:	697a      	ldr	r2, [r7, #20]
 800a612:	4613      	mov	r3, r2
 800a614:	009b      	lsls	r3, r3, #2
 800a616:	4413      	add	r3, r2
 800a618:	009b      	lsls	r3, r3, #2
 800a61a:	4a12      	ldr	r2, [pc, #72]	; (800a664 <vTaskSwitchContext+0xfc>)
 800a61c:	4413      	add	r3, r2
 800a61e:	613b      	str	r3, [r7, #16]
 800a620:	693b      	ldr	r3, [r7, #16]
 800a622:	685b      	ldr	r3, [r3, #4]
 800a624:	685a      	ldr	r2, [r3, #4]
 800a626:	693b      	ldr	r3, [r7, #16]
 800a628:	605a      	str	r2, [r3, #4]
 800a62a:	693b      	ldr	r3, [r7, #16]
 800a62c:	685a      	ldr	r2, [r3, #4]
 800a62e:	693b      	ldr	r3, [r7, #16]
 800a630:	3308      	adds	r3, #8
 800a632:	429a      	cmp	r2, r3
 800a634:	d104      	bne.n	800a640 <vTaskSwitchContext+0xd8>
 800a636:	693b      	ldr	r3, [r7, #16]
 800a638:	685b      	ldr	r3, [r3, #4]
 800a63a:	685a      	ldr	r2, [r3, #4]
 800a63c:	693b      	ldr	r3, [r7, #16]
 800a63e:	605a      	str	r2, [r3, #4]
 800a640:	693b      	ldr	r3, [r7, #16]
 800a642:	685b      	ldr	r3, [r3, #4]
 800a644:	68db      	ldr	r3, [r3, #12]
 800a646:	4a05      	ldr	r2, [pc, #20]	; (800a65c <vTaskSwitchContext+0xf4>)
 800a648:	6013      	str	r3, [r2, #0]
}
 800a64a:	bf00      	nop
 800a64c:	3720      	adds	r7, #32
 800a64e:	46bd      	mov	sp, r7
 800a650:	bd80      	pop	{r7, pc}
 800a652:	bf00      	nop
 800a654:	200003f4 	.word	0x200003f4
 800a658:	200003e0 	.word	0x200003e0
 800a65c:	200002cc 	.word	0x200002cc
 800a660:	200003d4 	.word	0x200003d4
 800a664:	200002d0 	.word	0x200002d0

0800a668 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a668:	b580      	push	{r7, lr}
 800a66a:	b084      	sub	sp, #16
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
 800a670:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	2b00      	cmp	r3, #0
 800a676:	d109      	bne.n	800a68c <vTaskPlaceOnEventList+0x24>
 800a678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a67c:	f383 8811 	msr	BASEPRI, r3
 800a680:	f3bf 8f6f 	isb	sy
 800a684:	f3bf 8f4f 	dsb	sy
 800a688:	60fb      	str	r3, [r7, #12]
 800a68a:	e7fe      	b.n	800a68a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a68c:	4b07      	ldr	r3, [pc, #28]	; (800a6ac <vTaskPlaceOnEventList+0x44>)
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	3318      	adds	r3, #24
 800a692:	4619      	mov	r1, r3
 800a694:	6878      	ldr	r0, [r7, #4]
 800a696:	f7fe faee 	bl	8008c76 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a69a:	2101      	movs	r1, #1
 800a69c:	6838      	ldr	r0, [r7, #0]
 800a69e:	f000 fdbf 	bl	800b220 <prvAddCurrentTaskToDelayedList>
}
 800a6a2:	bf00      	nop
 800a6a4:	3710      	adds	r7, #16
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	bd80      	pop	{r7, pc}
 800a6aa:	bf00      	nop
 800a6ac:	200002cc 	.word	0x200002cc

0800a6b0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b086      	sub	sp, #24
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	60f8      	str	r0, [r7, #12]
 800a6b8:	60b9      	str	r1, [r7, #8]
 800a6ba:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d109      	bne.n	800a6d6 <vTaskPlaceOnEventListRestricted+0x26>
 800a6c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6c6:	f383 8811 	msr	BASEPRI, r3
 800a6ca:	f3bf 8f6f 	isb	sy
 800a6ce:	f3bf 8f4f 	dsb	sy
 800a6d2:	617b      	str	r3, [r7, #20]
 800a6d4:	e7fe      	b.n	800a6d4 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a6d6:	4b0a      	ldr	r3, [pc, #40]	; (800a700 <vTaskPlaceOnEventListRestricted+0x50>)
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	3318      	adds	r3, #24
 800a6dc:	4619      	mov	r1, r3
 800a6de:	68f8      	ldr	r0, [r7, #12]
 800a6e0:	f7fe faa5 	bl	8008c2e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d002      	beq.n	800a6f0 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800a6ea:	f04f 33ff 	mov.w	r3, #4294967295
 800a6ee:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a6f0:	6879      	ldr	r1, [r7, #4]
 800a6f2:	68b8      	ldr	r0, [r7, #8]
 800a6f4:	f000 fd94 	bl	800b220 <prvAddCurrentTaskToDelayedList>
	}
 800a6f8:	bf00      	nop
 800a6fa:	3718      	adds	r7, #24
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	bd80      	pop	{r7, pc}
 800a700:	200002cc 	.word	0x200002cc

0800a704 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a704:	b580      	push	{r7, lr}
 800a706:	b086      	sub	sp, #24
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	68db      	ldr	r3, [r3, #12]
 800a710:	68db      	ldr	r3, [r3, #12]
 800a712:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a714:	693b      	ldr	r3, [r7, #16]
 800a716:	2b00      	cmp	r3, #0
 800a718:	d109      	bne.n	800a72e <xTaskRemoveFromEventList+0x2a>
 800a71a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a71e:	f383 8811 	msr	BASEPRI, r3
 800a722:	f3bf 8f6f 	isb	sy
 800a726:	f3bf 8f4f 	dsb	sy
 800a72a:	60fb      	str	r3, [r7, #12]
 800a72c:	e7fe      	b.n	800a72c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a72e:	693b      	ldr	r3, [r7, #16]
 800a730:	3318      	adds	r3, #24
 800a732:	4618      	mov	r0, r3
 800a734:	f7fe fad8 	bl	8008ce8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a738:	4b1d      	ldr	r3, [pc, #116]	; (800a7b0 <xTaskRemoveFromEventList+0xac>)
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d11c      	bne.n	800a77a <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a740:	693b      	ldr	r3, [r7, #16]
 800a742:	3304      	adds	r3, #4
 800a744:	4618      	mov	r0, r3
 800a746:	f7fe facf 	bl	8008ce8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a74a:	693b      	ldr	r3, [r7, #16]
 800a74c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a74e:	2201      	movs	r2, #1
 800a750:	409a      	lsls	r2, r3
 800a752:	4b18      	ldr	r3, [pc, #96]	; (800a7b4 <xTaskRemoveFromEventList+0xb0>)
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	4313      	orrs	r3, r2
 800a758:	4a16      	ldr	r2, [pc, #88]	; (800a7b4 <xTaskRemoveFromEventList+0xb0>)
 800a75a:	6013      	str	r3, [r2, #0]
 800a75c:	693b      	ldr	r3, [r7, #16]
 800a75e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a760:	4613      	mov	r3, r2
 800a762:	009b      	lsls	r3, r3, #2
 800a764:	4413      	add	r3, r2
 800a766:	009b      	lsls	r3, r3, #2
 800a768:	4a13      	ldr	r2, [pc, #76]	; (800a7b8 <xTaskRemoveFromEventList+0xb4>)
 800a76a:	441a      	add	r2, r3
 800a76c:	693b      	ldr	r3, [r7, #16]
 800a76e:	3304      	adds	r3, #4
 800a770:	4619      	mov	r1, r3
 800a772:	4610      	mov	r0, r2
 800a774:	f7fe fa5b 	bl	8008c2e <vListInsertEnd>
 800a778:	e005      	b.n	800a786 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a77a:	693b      	ldr	r3, [r7, #16]
 800a77c:	3318      	adds	r3, #24
 800a77e:	4619      	mov	r1, r3
 800a780:	480e      	ldr	r0, [pc, #56]	; (800a7bc <xTaskRemoveFromEventList+0xb8>)
 800a782:	f7fe fa54 	bl	8008c2e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a786:	693b      	ldr	r3, [r7, #16]
 800a788:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a78a:	4b0d      	ldr	r3, [pc, #52]	; (800a7c0 <xTaskRemoveFromEventList+0xbc>)
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a790:	429a      	cmp	r2, r3
 800a792:	d905      	bls.n	800a7a0 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a794:	2301      	movs	r3, #1
 800a796:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a798:	4b0a      	ldr	r3, [pc, #40]	; (800a7c4 <xTaskRemoveFromEventList+0xc0>)
 800a79a:	2201      	movs	r2, #1
 800a79c:	601a      	str	r2, [r3, #0]
 800a79e:	e001      	b.n	800a7a4 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800a7a4:	697b      	ldr	r3, [r7, #20]
}
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	3718      	adds	r7, #24
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	bd80      	pop	{r7, pc}
 800a7ae:	bf00      	nop
 800a7b0:	200003f4 	.word	0x200003f4
 800a7b4:	200003d4 	.word	0x200003d4
 800a7b8:	200002d0 	.word	0x200002d0
 800a7bc:	2000038c 	.word	0x2000038c
 800a7c0:	200002cc 	.word	0x200002cc
 800a7c4:	200003e0 	.word	0x200003e0

0800a7c8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a7c8:	b480      	push	{r7}
 800a7ca:	b083      	sub	sp, #12
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a7d0:	4b06      	ldr	r3, [pc, #24]	; (800a7ec <vTaskInternalSetTimeOutState+0x24>)
 800a7d2:	681a      	ldr	r2, [r3, #0]
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a7d8:	4b05      	ldr	r3, [pc, #20]	; (800a7f0 <vTaskInternalSetTimeOutState+0x28>)
 800a7da:	681a      	ldr	r2, [r3, #0]
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	605a      	str	r2, [r3, #4]
}
 800a7e0:	bf00      	nop
 800a7e2:	370c      	adds	r7, #12
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ea:	4770      	bx	lr
 800a7ec:	200003e4 	.word	0x200003e4
 800a7f0:	200003d0 	.word	0x200003d0

0800a7f4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b088      	sub	sp, #32
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
 800a7fc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	2b00      	cmp	r3, #0
 800a802:	d109      	bne.n	800a818 <xTaskCheckForTimeOut+0x24>
 800a804:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a808:	f383 8811 	msr	BASEPRI, r3
 800a80c:	f3bf 8f6f 	isb	sy
 800a810:	f3bf 8f4f 	dsb	sy
 800a814:	613b      	str	r3, [r7, #16]
 800a816:	e7fe      	b.n	800a816 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800a818:	683b      	ldr	r3, [r7, #0]
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d109      	bne.n	800a832 <xTaskCheckForTimeOut+0x3e>
 800a81e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a822:	f383 8811 	msr	BASEPRI, r3
 800a826:	f3bf 8f6f 	isb	sy
 800a82a:	f3bf 8f4f 	dsb	sy
 800a82e:	60fb      	str	r3, [r7, #12]
 800a830:	e7fe      	b.n	800a830 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800a832:	f001 fa03 	bl	800bc3c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a836:	4b24      	ldr	r3, [pc, #144]	; (800a8c8 <xTaskCheckForTimeOut+0xd4>)
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	685b      	ldr	r3, [r3, #4]
 800a840:	69ba      	ldr	r2, [r7, #24]
 800a842:	1ad3      	subs	r3, r2, r3
 800a844:	617b      	str	r3, [r7, #20]

		#if( INCLUDE_xTaskAbortDelay == 1 )
			if( pxCurrentTCB->ucDelayAborted != pdFALSE )
 800a846:	4b21      	ldr	r3, [pc, #132]	; (800a8cc <xTaskCheckForTimeOut+0xd8>)
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d007      	beq.n	800a862 <xTaskCheckForTimeOut+0x6e>
			{
				/* The delay was aborted, which is not the same as a time out,
				but has the same result. */
				pxCurrentTCB->ucDelayAborted = pdFALSE;
 800a852:	4b1e      	ldr	r3, [pc, #120]	; (800a8cc <xTaskCheckForTimeOut+0xd8>)
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	2200      	movs	r2, #0
 800a858:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
				xReturn = pdTRUE;
 800a85c:	2301      	movs	r3, #1
 800a85e:	61fb      	str	r3, [r7, #28]
 800a860:	e02b      	b.n	800a8ba <xTaskCheckForTimeOut+0xc6>
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a862:	683b      	ldr	r3, [r7, #0]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a86a:	d102      	bne.n	800a872 <xTaskCheckForTimeOut+0x7e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a86c:	2300      	movs	r3, #0
 800a86e:	61fb      	str	r3, [r7, #28]
 800a870:	e023      	b.n	800a8ba <xTaskCheckForTimeOut+0xc6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681a      	ldr	r2, [r3, #0]
 800a876:	4b16      	ldr	r3, [pc, #88]	; (800a8d0 <xTaskCheckForTimeOut+0xdc>)
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	429a      	cmp	r2, r3
 800a87c:	d007      	beq.n	800a88e <xTaskCheckForTimeOut+0x9a>
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	685b      	ldr	r3, [r3, #4]
 800a882:	69ba      	ldr	r2, [r7, #24]
 800a884:	429a      	cmp	r2, r3
 800a886:	d302      	bcc.n	800a88e <xTaskCheckForTimeOut+0x9a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a888:	2301      	movs	r3, #1
 800a88a:	61fb      	str	r3, [r7, #28]
 800a88c:	e015      	b.n	800a8ba <xTaskCheckForTimeOut+0xc6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a88e:	683b      	ldr	r3, [r7, #0]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	697a      	ldr	r2, [r7, #20]
 800a894:	429a      	cmp	r2, r3
 800a896:	d20b      	bcs.n	800a8b0 <xTaskCheckForTimeOut+0xbc>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a898:	683b      	ldr	r3, [r7, #0]
 800a89a:	681a      	ldr	r2, [r3, #0]
 800a89c:	697b      	ldr	r3, [r7, #20]
 800a89e:	1ad2      	subs	r2, r2, r3
 800a8a0:	683b      	ldr	r3, [r7, #0]
 800a8a2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a8a4:	6878      	ldr	r0, [r7, #4]
 800a8a6:	f7ff ff8f 	bl	800a7c8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	61fb      	str	r3, [r7, #28]
 800a8ae:	e004      	b.n	800a8ba <xTaskCheckForTimeOut+0xc6>
		}
		else
		{
			*pxTicksToWait = 0;
 800a8b0:	683b      	ldr	r3, [r7, #0]
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a8b6:	2301      	movs	r3, #1
 800a8b8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a8ba:	f001 f9ed 	bl	800bc98 <vPortExitCritical>

	return xReturn;
 800a8be:	69fb      	ldr	r3, [r7, #28]
}
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	3720      	adds	r7, #32
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	bd80      	pop	{r7, pc}
 800a8c8:	200003d0 	.word	0x200003d0
 800a8cc:	200002cc 	.word	0x200002cc
 800a8d0:	200003e4 	.word	0x200003e4

0800a8d4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a8d4:	b480      	push	{r7}
 800a8d6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a8d8:	4b03      	ldr	r3, [pc, #12]	; (800a8e8 <vTaskMissedYield+0x14>)
 800a8da:	2201      	movs	r2, #1
 800a8dc:	601a      	str	r2, [r3, #0]
}
 800a8de:	bf00      	nop
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e6:	4770      	bx	lr
 800a8e8:	200003e0 	.word	0x200003e0

0800a8ec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	b082      	sub	sp, #8
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a8f4:	f000 f844 	bl	800a980 <prvCheckTasksWaitingTermination>
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800a8f8:	f008 fbda 	bl	80130b0 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800a8fc:	e7fa      	b.n	800a8f4 <prvIdleTask+0x8>
	...

0800a900 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a900:	b580      	push	{r7, lr}
 800a902:	b082      	sub	sp, #8
 800a904:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a906:	2300      	movs	r3, #0
 800a908:	607b      	str	r3, [r7, #4]
 800a90a:	e00c      	b.n	800a926 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a90c:	687a      	ldr	r2, [r7, #4]
 800a90e:	4613      	mov	r3, r2
 800a910:	009b      	lsls	r3, r3, #2
 800a912:	4413      	add	r3, r2
 800a914:	009b      	lsls	r3, r3, #2
 800a916:	4a12      	ldr	r2, [pc, #72]	; (800a960 <prvInitialiseTaskLists+0x60>)
 800a918:	4413      	add	r3, r2
 800a91a:	4618      	mov	r0, r3
 800a91c:	f7fe f95a 	bl	8008bd4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	3301      	adds	r3, #1
 800a924:	607b      	str	r3, [r7, #4]
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	2b06      	cmp	r3, #6
 800a92a:	d9ef      	bls.n	800a90c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a92c:	480d      	ldr	r0, [pc, #52]	; (800a964 <prvInitialiseTaskLists+0x64>)
 800a92e:	f7fe f951 	bl	8008bd4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a932:	480d      	ldr	r0, [pc, #52]	; (800a968 <prvInitialiseTaskLists+0x68>)
 800a934:	f7fe f94e 	bl	8008bd4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a938:	480c      	ldr	r0, [pc, #48]	; (800a96c <prvInitialiseTaskLists+0x6c>)
 800a93a:	f7fe f94b 	bl	8008bd4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a93e:	480c      	ldr	r0, [pc, #48]	; (800a970 <prvInitialiseTaskLists+0x70>)
 800a940:	f7fe f948 	bl	8008bd4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a944:	480b      	ldr	r0, [pc, #44]	; (800a974 <prvInitialiseTaskLists+0x74>)
 800a946:	f7fe f945 	bl	8008bd4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a94a:	4b0b      	ldr	r3, [pc, #44]	; (800a978 <prvInitialiseTaskLists+0x78>)
 800a94c:	4a05      	ldr	r2, [pc, #20]	; (800a964 <prvInitialiseTaskLists+0x64>)
 800a94e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a950:	4b0a      	ldr	r3, [pc, #40]	; (800a97c <prvInitialiseTaskLists+0x7c>)
 800a952:	4a05      	ldr	r2, [pc, #20]	; (800a968 <prvInitialiseTaskLists+0x68>)
 800a954:	601a      	str	r2, [r3, #0]
}
 800a956:	bf00      	nop
 800a958:	3708      	adds	r7, #8
 800a95a:	46bd      	mov	sp, r7
 800a95c:	bd80      	pop	{r7, pc}
 800a95e:	bf00      	nop
 800a960:	200002d0 	.word	0x200002d0
 800a964:	2000035c 	.word	0x2000035c
 800a968:	20000370 	.word	0x20000370
 800a96c:	2000038c 	.word	0x2000038c
 800a970:	200003a0 	.word	0x200003a0
 800a974:	200003b8 	.word	0x200003b8
 800a978:	20000384 	.word	0x20000384
 800a97c:	20000388 	.word	0x20000388

0800a980 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a980:	b580      	push	{r7, lr}
 800a982:	b082      	sub	sp, #8
 800a984:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a986:	e019      	b.n	800a9bc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a988:	f001 f958 	bl	800bc3c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800a98c:	4b0f      	ldr	r3, [pc, #60]	; (800a9cc <prvCheckTasksWaitingTermination+0x4c>)
 800a98e:	68db      	ldr	r3, [r3, #12]
 800a990:	68db      	ldr	r3, [r3, #12]
 800a992:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	3304      	adds	r3, #4
 800a998:	4618      	mov	r0, r3
 800a99a:	f7fe f9a5 	bl	8008ce8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a99e:	4b0c      	ldr	r3, [pc, #48]	; (800a9d0 <prvCheckTasksWaitingTermination+0x50>)
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	3b01      	subs	r3, #1
 800a9a4:	4a0a      	ldr	r2, [pc, #40]	; (800a9d0 <prvCheckTasksWaitingTermination+0x50>)
 800a9a6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a9a8:	4b0a      	ldr	r3, [pc, #40]	; (800a9d4 <prvCheckTasksWaitingTermination+0x54>)
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	3b01      	subs	r3, #1
 800a9ae:	4a09      	ldr	r2, [pc, #36]	; (800a9d4 <prvCheckTasksWaitingTermination+0x54>)
 800a9b0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a9b2:	f001 f971 	bl	800bc98 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a9b6:	6878      	ldr	r0, [r7, #4]
 800a9b8:	f000 f80e 	bl	800a9d8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a9bc:	4b05      	ldr	r3, [pc, #20]	; (800a9d4 <prvCheckTasksWaitingTermination+0x54>)
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d1e1      	bne.n	800a988 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a9c4:	bf00      	nop
 800a9c6:	3708      	adds	r7, #8
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	bd80      	pop	{r7, pc}
 800a9cc:	200003a0 	.word	0x200003a0
 800a9d0:	200003cc 	.word	0x200003cc
 800a9d4:	200003b4 	.word	0x200003b4

0800a9d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b084      	sub	sp, #16
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d108      	bne.n	800a9fc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	f001 fb04 	bl	800bffc <vPortFree>
				vPortFree( pxTCB );
 800a9f4:	6878      	ldr	r0, [r7, #4]
 800a9f6:	f001 fb01 	bl	800bffc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a9fa:	e017      	b.n	800aa2c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800aa02:	2b01      	cmp	r3, #1
 800aa04:	d103      	bne.n	800aa0e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800aa06:	6878      	ldr	r0, [r7, #4]
 800aa08:	f001 faf8 	bl	800bffc <vPortFree>
	}
 800aa0c:	e00e      	b.n	800aa2c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800aa14:	2b02      	cmp	r3, #2
 800aa16:	d009      	beq.n	800aa2c <prvDeleteTCB+0x54>
 800aa18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa1c:	f383 8811 	msr	BASEPRI, r3
 800aa20:	f3bf 8f6f 	isb	sy
 800aa24:	f3bf 8f4f 	dsb	sy
 800aa28:	60fb      	str	r3, [r7, #12]
 800aa2a:	e7fe      	b.n	800aa2a <prvDeleteTCB+0x52>
	}
 800aa2c:	bf00      	nop
 800aa2e:	3710      	adds	r7, #16
 800aa30:	46bd      	mov	sp, r7
 800aa32:	bd80      	pop	{r7, pc}

0800aa34 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800aa34:	b480      	push	{r7}
 800aa36:	b083      	sub	sp, #12
 800aa38:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aa3a:	4b0f      	ldr	r3, [pc, #60]	; (800aa78 <prvResetNextTaskUnblockTime+0x44>)
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d101      	bne.n	800aa48 <prvResetNextTaskUnblockTime+0x14>
 800aa44:	2301      	movs	r3, #1
 800aa46:	e000      	b.n	800aa4a <prvResetNextTaskUnblockTime+0x16>
 800aa48:	2300      	movs	r3, #0
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d004      	beq.n	800aa58 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800aa4e:	4b0b      	ldr	r3, [pc, #44]	; (800aa7c <prvResetNextTaskUnblockTime+0x48>)
 800aa50:	f04f 32ff 	mov.w	r2, #4294967295
 800aa54:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800aa56:	e008      	b.n	800aa6a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800aa58:	4b07      	ldr	r3, [pc, #28]	; (800aa78 <prvResetNextTaskUnblockTime+0x44>)
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	68db      	ldr	r3, [r3, #12]
 800aa5e:	68db      	ldr	r3, [r3, #12]
 800aa60:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	685b      	ldr	r3, [r3, #4]
 800aa66:	4a05      	ldr	r2, [pc, #20]	; (800aa7c <prvResetNextTaskUnblockTime+0x48>)
 800aa68:	6013      	str	r3, [r2, #0]
}
 800aa6a:	bf00      	nop
 800aa6c:	370c      	adds	r7, #12
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa74:	4770      	bx	lr
 800aa76:	bf00      	nop
 800aa78:	20000384 	.word	0x20000384
 800aa7c:	200003ec 	.word	0x200003ec

0800aa80 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800aa80:	b480      	push	{r7}
 800aa82:	b083      	sub	sp, #12
 800aa84:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800aa86:	4b05      	ldr	r3, [pc, #20]	; (800aa9c <xTaskGetCurrentTaskHandle+0x1c>)
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800aa8c:	687b      	ldr	r3, [r7, #4]
	}
 800aa8e:	4618      	mov	r0, r3
 800aa90:	370c      	adds	r7, #12
 800aa92:	46bd      	mov	sp, r7
 800aa94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa98:	4770      	bx	lr
 800aa9a:	bf00      	nop
 800aa9c:	200002cc 	.word	0x200002cc

0800aaa0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800aaa0:	b480      	push	{r7}
 800aaa2:	b083      	sub	sp, #12
 800aaa4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800aaa6:	4b0b      	ldr	r3, [pc, #44]	; (800aad4 <xTaskGetSchedulerState+0x34>)
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d102      	bne.n	800aab4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800aaae:	2301      	movs	r3, #1
 800aab0:	607b      	str	r3, [r7, #4]
 800aab2:	e008      	b.n	800aac6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aab4:	4b08      	ldr	r3, [pc, #32]	; (800aad8 <xTaskGetSchedulerState+0x38>)
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d102      	bne.n	800aac2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800aabc:	2302      	movs	r3, #2
 800aabe:	607b      	str	r3, [r7, #4]
 800aac0:	e001      	b.n	800aac6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800aac2:	2300      	movs	r3, #0
 800aac4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800aac6:	687b      	ldr	r3, [r7, #4]
	}
 800aac8:	4618      	mov	r0, r3
 800aaca:	370c      	adds	r7, #12
 800aacc:	46bd      	mov	sp, r7
 800aace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad2:	4770      	bx	lr
 800aad4:	200003d8 	.word	0x200003d8
 800aad8:	200003f4 	.word	0x200003f4

0800aadc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800aadc:	b580      	push	{r7, lr}
 800aade:	b084      	sub	sp, #16
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800aae8:	2300      	movs	r3, #0
 800aaea:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d06e      	beq.n	800abd0 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800aaf2:	68bb      	ldr	r3, [r7, #8]
 800aaf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aaf6:	4b39      	ldr	r3, [pc, #228]	; (800abdc <xTaskPriorityInherit+0x100>)
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aafc:	429a      	cmp	r2, r3
 800aafe:	d25e      	bcs.n	800abbe <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ab00:	68bb      	ldr	r3, [r7, #8]
 800ab02:	699b      	ldr	r3, [r3, #24]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	db06      	blt.n	800ab16 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab08:	4b34      	ldr	r3, [pc, #208]	; (800abdc <xTaskPriorityInherit+0x100>)
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab0e:	f1c3 0207 	rsb	r2, r3, #7
 800ab12:	68bb      	ldr	r3, [r7, #8]
 800ab14:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ab16:	68bb      	ldr	r3, [r7, #8]
 800ab18:	6959      	ldr	r1, [r3, #20]
 800ab1a:	68bb      	ldr	r3, [r7, #8]
 800ab1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab1e:	4613      	mov	r3, r2
 800ab20:	009b      	lsls	r3, r3, #2
 800ab22:	4413      	add	r3, r2
 800ab24:	009b      	lsls	r3, r3, #2
 800ab26:	4a2e      	ldr	r2, [pc, #184]	; (800abe0 <xTaskPriorityInherit+0x104>)
 800ab28:	4413      	add	r3, r2
 800ab2a:	4299      	cmp	r1, r3
 800ab2c:	d101      	bne.n	800ab32 <xTaskPriorityInherit+0x56>
 800ab2e:	2301      	movs	r3, #1
 800ab30:	e000      	b.n	800ab34 <xTaskPriorityInherit+0x58>
 800ab32:	2300      	movs	r3, #0
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d03a      	beq.n	800abae <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ab38:	68bb      	ldr	r3, [r7, #8]
 800ab3a:	3304      	adds	r3, #4
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	f7fe f8d3 	bl	8008ce8 <uxListRemove>
 800ab42:	4603      	mov	r3, r0
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d115      	bne.n	800ab74 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800ab48:	68bb      	ldr	r3, [r7, #8]
 800ab4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab4c:	4924      	ldr	r1, [pc, #144]	; (800abe0 <xTaskPriorityInherit+0x104>)
 800ab4e:	4613      	mov	r3, r2
 800ab50:	009b      	lsls	r3, r3, #2
 800ab52:	4413      	add	r3, r2
 800ab54:	009b      	lsls	r3, r3, #2
 800ab56:	440b      	add	r3, r1
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d10a      	bne.n	800ab74 <xTaskPriorityInherit+0x98>
 800ab5e:	68bb      	ldr	r3, [r7, #8]
 800ab60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab62:	2201      	movs	r2, #1
 800ab64:	fa02 f303 	lsl.w	r3, r2, r3
 800ab68:	43da      	mvns	r2, r3
 800ab6a:	4b1e      	ldr	r3, [pc, #120]	; (800abe4 <xTaskPriorityInherit+0x108>)
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	4013      	ands	r3, r2
 800ab70:	4a1c      	ldr	r2, [pc, #112]	; (800abe4 <xTaskPriorityInherit+0x108>)
 800ab72:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ab74:	4b19      	ldr	r3, [pc, #100]	; (800abdc <xTaskPriorityInherit+0x100>)
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab7a:	68bb      	ldr	r3, [r7, #8]
 800ab7c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ab7e:	68bb      	ldr	r3, [r7, #8]
 800ab80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab82:	2201      	movs	r2, #1
 800ab84:	409a      	lsls	r2, r3
 800ab86:	4b17      	ldr	r3, [pc, #92]	; (800abe4 <xTaskPriorityInherit+0x108>)
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	4313      	orrs	r3, r2
 800ab8c:	4a15      	ldr	r2, [pc, #84]	; (800abe4 <xTaskPriorityInherit+0x108>)
 800ab8e:	6013      	str	r3, [r2, #0]
 800ab90:	68bb      	ldr	r3, [r7, #8]
 800ab92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab94:	4613      	mov	r3, r2
 800ab96:	009b      	lsls	r3, r3, #2
 800ab98:	4413      	add	r3, r2
 800ab9a:	009b      	lsls	r3, r3, #2
 800ab9c:	4a10      	ldr	r2, [pc, #64]	; (800abe0 <xTaskPriorityInherit+0x104>)
 800ab9e:	441a      	add	r2, r3
 800aba0:	68bb      	ldr	r3, [r7, #8]
 800aba2:	3304      	adds	r3, #4
 800aba4:	4619      	mov	r1, r3
 800aba6:	4610      	mov	r0, r2
 800aba8:	f7fe f841 	bl	8008c2e <vListInsertEnd>
 800abac:	e004      	b.n	800abb8 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800abae:	4b0b      	ldr	r3, [pc, #44]	; (800abdc <xTaskPriorityInherit+0x100>)
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abb4:	68bb      	ldr	r3, [r7, #8]
 800abb6:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800abb8:	2301      	movs	r3, #1
 800abba:	60fb      	str	r3, [r7, #12]
 800abbc:	e008      	b.n	800abd0 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800abbe:	68bb      	ldr	r3, [r7, #8]
 800abc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800abc2:	4b06      	ldr	r3, [pc, #24]	; (800abdc <xTaskPriorityInherit+0x100>)
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abc8:	429a      	cmp	r2, r3
 800abca:	d201      	bcs.n	800abd0 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800abcc:	2301      	movs	r3, #1
 800abce:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800abd0:	68fb      	ldr	r3, [r7, #12]
	}
 800abd2:	4618      	mov	r0, r3
 800abd4:	3710      	adds	r7, #16
 800abd6:	46bd      	mov	sp, r7
 800abd8:	bd80      	pop	{r7, pc}
 800abda:	bf00      	nop
 800abdc:	200002cc 	.word	0x200002cc
 800abe0:	200002d0 	.word	0x200002d0
 800abe4:	200003d4 	.word	0x200003d4

0800abe8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800abe8:	b580      	push	{r7, lr}
 800abea:	b086      	sub	sp, #24
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800abf4:	2300      	movs	r3, #0
 800abf6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d06c      	beq.n	800acd8 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800abfe:	4b39      	ldr	r3, [pc, #228]	; (800ace4 <xTaskPriorityDisinherit+0xfc>)
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	693a      	ldr	r2, [r7, #16]
 800ac04:	429a      	cmp	r2, r3
 800ac06:	d009      	beq.n	800ac1c <xTaskPriorityDisinherit+0x34>
 800ac08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac0c:	f383 8811 	msr	BASEPRI, r3
 800ac10:	f3bf 8f6f 	isb	sy
 800ac14:	f3bf 8f4f 	dsb	sy
 800ac18:	60fb      	str	r3, [r7, #12]
 800ac1a:	e7fe      	b.n	800ac1a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800ac1c:	693b      	ldr	r3, [r7, #16]
 800ac1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d109      	bne.n	800ac38 <xTaskPriorityDisinherit+0x50>
 800ac24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac28:	f383 8811 	msr	BASEPRI, r3
 800ac2c:	f3bf 8f6f 	isb	sy
 800ac30:	f3bf 8f4f 	dsb	sy
 800ac34:	60bb      	str	r3, [r7, #8]
 800ac36:	e7fe      	b.n	800ac36 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800ac38:	693b      	ldr	r3, [r7, #16]
 800ac3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac3c:	1e5a      	subs	r2, r3, #1
 800ac3e:	693b      	ldr	r3, [r7, #16]
 800ac40:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ac42:	693b      	ldr	r3, [r7, #16]
 800ac44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac46:	693b      	ldr	r3, [r7, #16]
 800ac48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac4a:	429a      	cmp	r2, r3
 800ac4c:	d044      	beq.n	800acd8 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ac4e:	693b      	ldr	r3, [r7, #16]
 800ac50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d140      	bne.n	800acd8 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ac56:	693b      	ldr	r3, [r7, #16]
 800ac58:	3304      	adds	r3, #4
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	f7fe f844 	bl	8008ce8 <uxListRemove>
 800ac60:	4603      	mov	r3, r0
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d115      	bne.n	800ac92 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800ac66:	693b      	ldr	r3, [r7, #16]
 800ac68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac6a:	491f      	ldr	r1, [pc, #124]	; (800ace8 <xTaskPriorityDisinherit+0x100>)
 800ac6c:	4613      	mov	r3, r2
 800ac6e:	009b      	lsls	r3, r3, #2
 800ac70:	4413      	add	r3, r2
 800ac72:	009b      	lsls	r3, r3, #2
 800ac74:	440b      	add	r3, r1
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d10a      	bne.n	800ac92 <xTaskPriorityDisinherit+0xaa>
 800ac7c:	693b      	ldr	r3, [r7, #16]
 800ac7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac80:	2201      	movs	r2, #1
 800ac82:	fa02 f303 	lsl.w	r3, r2, r3
 800ac86:	43da      	mvns	r2, r3
 800ac88:	4b18      	ldr	r3, [pc, #96]	; (800acec <xTaskPriorityDisinherit+0x104>)
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	4013      	ands	r3, r2
 800ac8e:	4a17      	ldr	r2, [pc, #92]	; (800acec <xTaskPriorityDisinherit+0x104>)
 800ac90:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ac92:	693b      	ldr	r3, [r7, #16]
 800ac94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ac96:	693b      	ldr	r3, [r7, #16]
 800ac98:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ac9a:	693b      	ldr	r3, [r7, #16]
 800ac9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac9e:	f1c3 0207 	rsb	r2, r3, #7
 800aca2:	693b      	ldr	r3, [r7, #16]
 800aca4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800aca6:	693b      	ldr	r3, [r7, #16]
 800aca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acaa:	2201      	movs	r2, #1
 800acac:	409a      	lsls	r2, r3
 800acae:	4b0f      	ldr	r3, [pc, #60]	; (800acec <xTaskPriorityDisinherit+0x104>)
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	4313      	orrs	r3, r2
 800acb4:	4a0d      	ldr	r2, [pc, #52]	; (800acec <xTaskPriorityDisinherit+0x104>)
 800acb6:	6013      	str	r3, [r2, #0]
 800acb8:	693b      	ldr	r3, [r7, #16]
 800acba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acbc:	4613      	mov	r3, r2
 800acbe:	009b      	lsls	r3, r3, #2
 800acc0:	4413      	add	r3, r2
 800acc2:	009b      	lsls	r3, r3, #2
 800acc4:	4a08      	ldr	r2, [pc, #32]	; (800ace8 <xTaskPriorityDisinherit+0x100>)
 800acc6:	441a      	add	r2, r3
 800acc8:	693b      	ldr	r3, [r7, #16]
 800acca:	3304      	adds	r3, #4
 800accc:	4619      	mov	r1, r3
 800acce:	4610      	mov	r0, r2
 800acd0:	f7fd ffad 	bl	8008c2e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800acd4:	2301      	movs	r3, #1
 800acd6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800acd8:	697b      	ldr	r3, [r7, #20]
	}
 800acda:	4618      	mov	r0, r3
 800acdc:	3718      	adds	r7, #24
 800acde:	46bd      	mov	sp, r7
 800ace0:	bd80      	pop	{r7, pc}
 800ace2:	bf00      	nop
 800ace4:	200002cc 	.word	0x200002cc
 800ace8:	200002d0 	.word	0x200002d0
 800acec:	200003d4 	.word	0x200003d4

0800acf0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b088      	sub	sp, #32
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	6078      	str	r0, [r7, #4]
 800acf8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800acfe:	2301      	movs	r3, #1
 800ad00:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	f000 8086 	beq.w	800ae16 <vTaskPriorityDisinheritAfterTimeout+0x126>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ad0a:	69bb      	ldr	r3, [r7, #24]
 800ad0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d109      	bne.n	800ad26 <vTaskPriorityDisinheritAfterTimeout+0x36>
 800ad12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad16:	f383 8811 	msr	BASEPRI, r3
 800ad1a:	f3bf 8f6f 	isb	sy
 800ad1e:	f3bf 8f4f 	dsb	sy
 800ad22:	60fb      	str	r3, [r7, #12]
 800ad24:	e7fe      	b.n	800ad24 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ad26:	69bb      	ldr	r3, [r7, #24]
 800ad28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad2a:	683a      	ldr	r2, [r7, #0]
 800ad2c:	429a      	cmp	r2, r3
 800ad2e:	d902      	bls.n	800ad36 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ad30:	683b      	ldr	r3, [r7, #0]
 800ad32:	61fb      	str	r3, [r7, #28]
 800ad34:	e002      	b.n	800ad3c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800ad36:	69bb      	ldr	r3, [r7, #24]
 800ad38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad3a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ad3c:	69bb      	ldr	r3, [r7, #24]
 800ad3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad40:	69fa      	ldr	r2, [r7, #28]
 800ad42:	429a      	cmp	r2, r3
 800ad44:	d067      	beq.n	800ae16 <vTaskPriorityDisinheritAfterTimeout+0x126>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ad46:	69bb      	ldr	r3, [r7, #24]
 800ad48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ad4a:	697a      	ldr	r2, [r7, #20]
 800ad4c:	429a      	cmp	r2, r3
 800ad4e:	d162      	bne.n	800ae16 <vTaskPriorityDisinheritAfterTimeout+0x126>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800ad50:	4b33      	ldr	r3, [pc, #204]	; (800ae20 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	69ba      	ldr	r2, [r7, #24]
 800ad56:	429a      	cmp	r2, r3
 800ad58:	d109      	bne.n	800ad6e <vTaskPriorityDisinheritAfterTimeout+0x7e>
 800ad5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad5e:	f383 8811 	msr	BASEPRI, r3
 800ad62:	f3bf 8f6f 	isb	sy
 800ad66:	f3bf 8f4f 	dsb	sy
 800ad6a:	60bb      	str	r3, [r7, #8]
 800ad6c:	e7fe      	b.n	800ad6c <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ad6e:	69bb      	ldr	r3, [r7, #24]
 800ad70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad72:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ad74:	69bb      	ldr	r3, [r7, #24]
 800ad76:	69fa      	ldr	r2, [r7, #28]
 800ad78:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ad7a:	69bb      	ldr	r3, [r7, #24]
 800ad7c:	699b      	ldr	r3, [r3, #24]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	db04      	blt.n	800ad8c <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ad82:	69fb      	ldr	r3, [r7, #28]
 800ad84:	f1c3 0207 	rsb	r2, r3, #7
 800ad88:	69bb      	ldr	r3, [r7, #24]
 800ad8a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ad8c:	69bb      	ldr	r3, [r7, #24]
 800ad8e:	6959      	ldr	r1, [r3, #20]
 800ad90:	693a      	ldr	r2, [r7, #16]
 800ad92:	4613      	mov	r3, r2
 800ad94:	009b      	lsls	r3, r3, #2
 800ad96:	4413      	add	r3, r2
 800ad98:	009b      	lsls	r3, r3, #2
 800ad9a:	4a22      	ldr	r2, [pc, #136]	; (800ae24 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800ad9c:	4413      	add	r3, r2
 800ad9e:	4299      	cmp	r1, r3
 800ada0:	d101      	bne.n	800ada6 <vTaskPriorityDisinheritAfterTimeout+0xb6>
 800ada2:	2301      	movs	r3, #1
 800ada4:	e000      	b.n	800ada8 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 800ada6:	2300      	movs	r3, #0
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d034      	beq.n	800ae16 <vTaskPriorityDisinheritAfterTimeout+0x126>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800adac:	69bb      	ldr	r3, [r7, #24]
 800adae:	3304      	adds	r3, #4
 800adb0:	4618      	mov	r0, r3
 800adb2:	f7fd ff99 	bl	8008ce8 <uxListRemove>
 800adb6:	4603      	mov	r3, r0
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d115      	bne.n	800ade8 <vTaskPriorityDisinheritAfterTimeout+0xf8>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800adbc:	69bb      	ldr	r3, [r7, #24]
 800adbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adc0:	4918      	ldr	r1, [pc, #96]	; (800ae24 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800adc2:	4613      	mov	r3, r2
 800adc4:	009b      	lsls	r3, r3, #2
 800adc6:	4413      	add	r3, r2
 800adc8:	009b      	lsls	r3, r3, #2
 800adca:	440b      	add	r3, r1
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	2b00      	cmp	r3, #0
 800add0:	d10a      	bne.n	800ade8 <vTaskPriorityDisinheritAfterTimeout+0xf8>
 800add2:	69bb      	ldr	r3, [r7, #24]
 800add4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800add6:	2201      	movs	r2, #1
 800add8:	fa02 f303 	lsl.w	r3, r2, r3
 800addc:	43da      	mvns	r2, r3
 800adde:	4b12      	ldr	r3, [pc, #72]	; (800ae28 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	4013      	ands	r3, r2
 800ade4:	4a10      	ldr	r2, [pc, #64]	; (800ae28 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800ade6:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ade8:	69bb      	ldr	r3, [r7, #24]
 800adea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adec:	2201      	movs	r2, #1
 800adee:	409a      	lsls	r2, r3
 800adf0:	4b0d      	ldr	r3, [pc, #52]	; (800ae28 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	4313      	orrs	r3, r2
 800adf6:	4a0c      	ldr	r2, [pc, #48]	; (800ae28 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800adf8:	6013      	str	r3, [r2, #0]
 800adfa:	69bb      	ldr	r3, [r7, #24]
 800adfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adfe:	4613      	mov	r3, r2
 800ae00:	009b      	lsls	r3, r3, #2
 800ae02:	4413      	add	r3, r2
 800ae04:	009b      	lsls	r3, r3, #2
 800ae06:	4a07      	ldr	r2, [pc, #28]	; (800ae24 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800ae08:	441a      	add	r2, r3
 800ae0a:	69bb      	ldr	r3, [r7, #24]
 800ae0c:	3304      	adds	r3, #4
 800ae0e:	4619      	mov	r1, r3
 800ae10:	4610      	mov	r0, r2
 800ae12:	f7fd ff0c 	bl	8008c2e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ae16:	bf00      	nop
 800ae18:	3720      	adds	r7, #32
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	bd80      	pop	{r7, pc}
 800ae1e:	bf00      	nop
 800ae20:	200002cc 	.word	0x200002cc
 800ae24:	200002d0 	.word	0x200002d0
 800ae28:	200003d4 	.word	0x200003d4

0800ae2c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800ae2c:	b480      	push	{r7}
 800ae2e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ae30:	4b07      	ldr	r3, [pc, #28]	; (800ae50 <pvTaskIncrementMutexHeldCount+0x24>)
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d004      	beq.n	800ae42 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ae38:	4b05      	ldr	r3, [pc, #20]	; (800ae50 <pvTaskIncrementMutexHeldCount+0x24>)
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ae3e:	3201      	adds	r2, #1
 800ae40:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800ae42:	4b03      	ldr	r3, [pc, #12]	; (800ae50 <pvTaskIncrementMutexHeldCount+0x24>)
 800ae44:	681b      	ldr	r3, [r3, #0]
	}
 800ae46:	4618      	mov	r0, r3
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4e:	4770      	bx	lr
 800ae50:	200002cc 	.word	0x200002cc

0800ae54 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b086      	sub	sp, #24
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	60f8      	str	r0, [r7, #12]
 800ae5c:	60b9      	str	r1, [r7, #8]
 800ae5e:	607a      	str	r2, [r7, #4]
 800ae60:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800ae62:	f000 feeb 	bl	800bc3c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800ae66:	4b26      	ldr	r3, [pc, #152]	; (800af00 <xTaskNotifyWait+0xac>)
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ae6e:	b2db      	uxtb	r3, r3
 800ae70:	2b02      	cmp	r3, #2
 800ae72:	d01a      	beq.n	800aeaa <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800ae74:	4b22      	ldr	r3, [pc, #136]	; (800af00 <xTaskNotifyWait+0xac>)
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800ae7a:	68fa      	ldr	r2, [r7, #12]
 800ae7c:	43d2      	mvns	r2, r2
 800ae7e:	400a      	ands	r2, r1
 800ae80:	64da      	str	r2, [r3, #76]	; 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800ae82:	4b1f      	ldr	r3, [pc, #124]	; (800af00 <xTaskNotifyWait+0xac>)
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	2201      	movs	r2, #1
 800ae88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 800ae8c:	683b      	ldr	r3, [r7, #0]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d00b      	beq.n	800aeaa <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ae92:	2101      	movs	r1, #1
 800ae94:	6838      	ldr	r0, [r7, #0]
 800ae96:	f000 f9c3 	bl	800b220 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800ae9a:	4b1a      	ldr	r3, [pc, #104]	; (800af04 <xTaskNotifyWait+0xb0>)
 800ae9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aea0:	601a      	str	r2, [r3, #0]
 800aea2:	f3bf 8f4f 	dsb	sy
 800aea6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800aeaa:	f000 fef5 	bl	800bc98 <vPortExitCritical>

		taskENTER_CRITICAL();
 800aeae:	f000 fec5 	bl	800bc3c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d004      	beq.n	800aec2 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800aeb8:	4b11      	ldr	r3, [pc, #68]	; (800af00 <xTaskNotifyWait+0xac>)
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800aec2:	4b0f      	ldr	r3, [pc, #60]	; (800af00 <xTaskNotifyWait+0xac>)
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800aeca:	b2db      	uxtb	r3, r3
 800aecc:	2b02      	cmp	r3, #2
 800aece:	d002      	beq.n	800aed6 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800aed0:	2300      	movs	r3, #0
 800aed2:	617b      	str	r3, [r7, #20]
 800aed4:	e008      	b.n	800aee8 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800aed6:	4b0a      	ldr	r3, [pc, #40]	; (800af00 <xTaskNotifyWait+0xac>)
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800aedc:	68ba      	ldr	r2, [r7, #8]
 800aede:	43d2      	mvns	r2, r2
 800aee0:	400a      	ands	r2, r1
 800aee2:	64da      	str	r2, [r3, #76]	; 0x4c
				xReturn = pdTRUE;
 800aee4:	2301      	movs	r3, #1
 800aee6:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800aee8:	4b05      	ldr	r3, [pc, #20]	; (800af00 <xTaskNotifyWait+0xac>)
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	2200      	movs	r2, #0
 800aeee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 800aef2:	f000 fed1 	bl	800bc98 <vPortExitCritical>

		return xReturn;
 800aef6:	697b      	ldr	r3, [r7, #20]
	}
 800aef8:	4618      	mov	r0, r3
 800aefa:	3718      	adds	r7, #24
 800aefc:	46bd      	mov	sp, r7
 800aefe:	bd80      	pop	{r7, pc}
 800af00:	200002cc 	.word	0x200002cc
 800af04:	e000ed04 	.word	0xe000ed04

0800af08 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800af08:	b580      	push	{r7, lr}
 800af0a:	b08a      	sub	sp, #40	; 0x28
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	60f8      	str	r0, [r7, #12]
 800af10:	60b9      	str	r1, [r7, #8]
 800af12:	603b      	str	r3, [r7, #0]
 800af14:	4613      	mov	r3, r2
 800af16:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800af18:	2301      	movs	r3, #1
 800af1a:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d109      	bne.n	800af36 <xTaskGenericNotify+0x2e>
 800af22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af26:	f383 8811 	msr	BASEPRI, r3
 800af2a:	f3bf 8f6f 	isb	sy
 800af2e:	f3bf 8f4f 	dsb	sy
 800af32:	61bb      	str	r3, [r7, #24]
 800af34:	e7fe      	b.n	800af34 <xTaskGenericNotify+0x2c>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800af3a:	f000 fe7f 	bl	800bc3c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800af3e:	683b      	ldr	r3, [r7, #0]
 800af40:	2b00      	cmp	r3, #0
 800af42:	d003      	beq.n	800af4c <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800af44:	6a3b      	ldr	r3, [r7, #32]
 800af46:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800af48:	683b      	ldr	r3, [r7, #0]
 800af4a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800af4c:	6a3b      	ldr	r3, [r7, #32]
 800af4e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800af52:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800af54:	6a3b      	ldr	r3, [r7, #32]
 800af56:	2202      	movs	r2, #2
 800af58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 800af5c:	79fb      	ldrb	r3, [r7, #7]
 800af5e:	2b04      	cmp	r3, #4
 800af60:	d827      	bhi.n	800afb2 <xTaskGenericNotify+0xaa>
 800af62:	a201      	add	r2, pc, #4	; (adr r2, 800af68 <xTaskGenericNotify+0x60>)
 800af64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af68:	0800afb3 	.word	0x0800afb3
 800af6c:	0800af7d 	.word	0x0800af7d
 800af70:	0800af8b 	.word	0x0800af8b
 800af74:	0800af97 	.word	0x0800af97
 800af78:	0800af9f 	.word	0x0800af9f
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800af7c:	6a3b      	ldr	r3, [r7, #32]
 800af7e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800af80:	68bb      	ldr	r3, [r7, #8]
 800af82:	431a      	orrs	r2, r3
 800af84:	6a3b      	ldr	r3, [r7, #32]
 800af86:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 800af88:	e013      	b.n	800afb2 <xTaskGenericNotify+0xaa>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800af8a:	6a3b      	ldr	r3, [r7, #32]
 800af8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af8e:	1c5a      	adds	r2, r3, #1
 800af90:	6a3b      	ldr	r3, [r7, #32]
 800af92:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 800af94:	e00d      	b.n	800afb2 <xTaskGenericNotify+0xaa>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800af96:	6a3b      	ldr	r3, [r7, #32]
 800af98:	68ba      	ldr	r2, [r7, #8]
 800af9a:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 800af9c:	e009      	b.n	800afb2 <xTaskGenericNotify+0xaa>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800af9e:	7ffb      	ldrb	r3, [r7, #31]
 800afa0:	2b02      	cmp	r3, #2
 800afa2:	d003      	beq.n	800afac <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800afa4:	6a3b      	ldr	r3, [r7, #32]
 800afa6:	68ba      	ldr	r2, [r7, #8]
 800afa8:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800afaa:	e001      	b.n	800afb0 <xTaskGenericNotify+0xa8>
						xReturn = pdFAIL;
 800afac:	2300      	movs	r3, #0
 800afae:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800afb0:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800afb2:	7ffb      	ldrb	r3, [r7, #31]
 800afb4:	2b01      	cmp	r3, #1
 800afb6:	d138      	bne.n	800b02a <xTaskGenericNotify+0x122>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800afb8:	6a3b      	ldr	r3, [r7, #32]
 800afba:	3304      	adds	r3, #4
 800afbc:	4618      	mov	r0, r3
 800afbe:	f7fd fe93 	bl	8008ce8 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800afc2:	6a3b      	ldr	r3, [r7, #32]
 800afc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afc6:	2201      	movs	r2, #1
 800afc8:	409a      	lsls	r2, r3
 800afca:	4b1b      	ldr	r3, [pc, #108]	; (800b038 <xTaskGenericNotify+0x130>)
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	4313      	orrs	r3, r2
 800afd0:	4a19      	ldr	r2, [pc, #100]	; (800b038 <xTaskGenericNotify+0x130>)
 800afd2:	6013      	str	r3, [r2, #0]
 800afd4:	6a3b      	ldr	r3, [r7, #32]
 800afd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afd8:	4613      	mov	r3, r2
 800afda:	009b      	lsls	r3, r3, #2
 800afdc:	4413      	add	r3, r2
 800afde:	009b      	lsls	r3, r3, #2
 800afe0:	4a16      	ldr	r2, [pc, #88]	; (800b03c <xTaskGenericNotify+0x134>)
 800afe2:	441a      	add	r2, r3
 800afe4:	6a3b      	ldr	r3, [r7, #32]
 800afe6:	3304      	adds	r3, #4
 800afe8:	4619      	mov	r1, r3
 800afea:	4610      	mov	r0, r2
 800afec:	f7fd fe1f 	bl	8008c2e <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800aff0:	6a3b      	ldr	r3, [r7, #32]
 800aff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d009      	beq.n	800b00c <xTaskGenericNotify+0x104>
 800aff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800affc:	f383 8811 	msr	BASEPRI, r3
 800b000:	f3bf 8f6f 	isb	sy
 800b004:	f3bf 8f4f 	dsb	sy
 800b008:	617b      	str	r3, [r7, #20]
 800b00a:	e7fe      	b.n	800b00a <xTaskGenericNotify+0x102>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b00c:	6a3b      	ldr	r3, [r7, #32]
 800b00e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b010:	4b0b      	ldr	r3, [pc, #44]	; (800b040 <xTaskGenericNotify+0x138>)
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b016:	429a      	cmp	r2, r3
 800b018:	d907      	bls.n	800b02a <xTaskGenericNotify+0x122>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800b01a:	4b0a      	ldr	r3, [pc, #40]	; (800b044 <xTaskGenericNotify+0x13c>)
 800b01c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b020:	601a      	str	r2, [r3, #0]
 800b022:	f3bf 8f4f 	dsb	sy
 800b026:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800b02a:	f000 fe35 	bl	800bc98 <vPortExitCritical>

		return xReturn;
 800b02e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800b030:	4618      	mov	r0, r3
 800b032:	3728      	adds	r7, #40	; 0x28
 800b034:	46bd      	mov	sp, r7
 800b036:	bd80      	pop	{r7, pc}
 800b038:	200003d4 	.word	0x200003d4
 800b03c:	200002d0 	.word	0x200002d0
 800b040:	200002cc 	.word	0x200002cc
 800b044:	e000ed04 	.word	0xe000ed04

0800b048 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800b048:	b580      	push	{r7, lr}
 800b04a:	b08e      	sub	sp, #56	; 0x38
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	60f8      	str	r0, [r7, #12]
 800b050:	60b9      	str	r1, [r7, #8]
 800b052:	603b      	str	r3, [r7, #0]
 800b054:	4613      	mov	r3, r2
 800b056:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800b058:	2301      	movs	r3, #1
 800b05a:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d109      	bne.n	800b076 <xTaskGenericNotifyFromISR+0x2e>
 800b062:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b066:	f383 8811 	msr	BASEPRI, r3
 800b06a:	f3bf 8f6f 	isb	sy
 800b06e:	f3bf 8f4f 	dsb	sy
 800b072:	627b      	str	r3, [r7, #36]	; 0x24
 800b074:	e7fe      	b.n	800b074 <xTaskGenericNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b076:	f000 febd 	bl	800bdf4 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800b07e:	f3ef 8211 	mrs	r2, BASEPRI
 800b082:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b086:	f383 8811 	msr	BASEPRI, r3
 800b08a:	f3bf 8f6f 	isb	sy
 800b08e:	f3bf 8f4f 	dsb	sy
 800b092:	623a      	str	r2, [r7, #32]
 800b094:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800b096:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b098:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800b09a:	683b      	ldr	r3, [r7, #0]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d003      	beq.n	800b0a8 <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800b0a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b0a4:	683b      	ldr	r3, [r7, #0]
 800b0a6:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800b0a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0aa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b0ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800b0b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0b4:	2202      	movs	r2, #2
 800b0b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 800b0ba:	79fb      	ldrb	r3, [r7, #7]
 800b0bc:	2b04      	cmp	r3, #4
 800b0be:	d829      	bhi.n	800b114 <xTaskGenericNotifyFromISR+0xcc>
 800b0c0:	a201      	add	r2, pc, #4	; (adr r2, 800b0c8 <xTaskGenericNotifyFromISR+0x80>)
 800b0c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0c6:	bf00      	nop
 800b0c8:	0800b115 	.word	0x0800b115
 800b0cc:	0800b0dd 	.word	0x0800b0dd
 800b0d0:	0800b0eb 	.word	0x0800b0eb
 800b0d4:	0800b0f7 	.word	0x0800b0f7
 800b0d8:	0800b0ff 	.word	0x0800b0ff
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800b0dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b0e0:	68bb      	ldr	r3, [r7, #8]
 800b0e2:	431a      	orrs	r2, r3
 800b0e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0e6:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 800b0e8:	e014      	b.n	800b114 <xTaskGenericNotifyFromISR+0xcc>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800b0ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b0ee:	1c5a      	adds	r2, r3, #1
 800b0f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0f2:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 800b0f4:	e00e      	b.n	800b114 <xTaskGenericNotifyFromISR+0xcc>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800b0f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0f8:	68ba      	ldr	r2, [r7, #8]
 800b0fa:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 800b0fc:	e00a      	b.n	800b114 <xTaskGenericNotifyFromISR+0xcc>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800b0fe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b102:	2b02      	cmp	r3, #2
 800b104:	d003      	beq.n	800b10e <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800b106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b108:	68ba      	ldr	r2, [r7, #8]
 800b10a:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800b10c:	e001      	b.n	800b112 <xTaskGenericNotifyFromISR+0xca>
						xReturn = pdFAIL;
 800b10e:	2300      	movs	r3, #0
 800b110:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800b112:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800b114:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b118:	2b01      	cmp	r3, #1
 800b11a:	d145      	bne.n	800b1a8 <xTaskGenericNotifyFromISR+0x160>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800b11c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b11e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b120:	2b00      	cmp	r3, #0
 800b122:	d009      	beq.n	800b138 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 800b124:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b128:	f383 8811 	msr	BASEPRI, r3
 800b12c:	f3bf 8f6f 	isb	sy
 800b130:	f3bf 8f4f 	dsb	sy
 800b134:	61bb      	str	r3, [r7, #24]
 800b136:	e7fe      	b.n	800b136 <xTaskGenericNotifyFromISR+0xee>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b138:	4b20      	ldr	r3, [pc, #128]	; (800b1bc <xTaskGenericNotifyFromISR+0x174>)
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d11c      	bne.n	800b17a <xTaskGenericNotifyFromISR+0x132>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b142:	3304      	adds	r3, #4
 800b144:	4618      	mov	r0, r3
 800b146:	f7fd fdcf 	bl	8008ce8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b14a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b14c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b14e:	2201      	movs	r2, #1
 800b150:	409a      	lsls	r2, r3
 800b152:	4b1b      	ldr	r3, [pc, #108]	; (800b1c0 <xTaskGenericNotifyFromISR+0x178>)
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	4313      	orrs	r3, r2
 800b158:	4a19      	ldr	r2, [pc, #100]	; (800b1c0 <xTaskGenericNotifyFromISR+0x178>)
 800b15a:	6013      	str	r3, [r2, #0]
 800b15c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b15e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b160:	4613      	mov	r3, r2
 800b162:	009b      	lsls	r3, r3, #2
 800b164:	4413      	add	r3, r2
 800b166:	009b      	lsls	r3, r3, #2
 800b168:	4a16      	ldr	r2, [pc, #88]	; (800b1c4 <xTaskGenericNotifyFromISR+0x17c>)
 800b16a:	441a      	add	r2, r3
 800b16c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b16e:	3304      	adds	r3, #4
 800b170:	4619      	mov	r1, r3
 800b172:	4610      	mov	r0, r2
 800b174:	f7fd fd5b 	bl	8008c2e <vListInsertEnd>
 800b178:	e005      	b.n	800b186 <xTaskGenericNotifyFromISR+0x13e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800b17a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b17c:	3318      	adds	r3, #24
 800b17e:	4619      	mov	r1, r3
 800b180:	4811      	ldr	r0, [pc, #68]	; (800b1c8 <xTaskGenericNotifyFromISR+0x180>)
 800b182:	f7fd fd54 	bl	8008c2e <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b188:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b18a:	4b10      	ldr	r3, [pc, #64]	; (800b1cc <xTaskGenericNotifyFromISR+0x184>)
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b190:	429a      	cmp	r2, r3
 800b192:	d909      	bls.n	800b1a8 <xTaskGenericNotifyFromISR+0x160>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800b194:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b196:	2b00      	cmp	r3, #0
 800b198:	d003      	beq.n	800b1a2 <xTaskGenericNotifyFromISR+0x15a>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800b19a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b19c:	2201      	movs	r2, #1
 800b19e:	601a      	str	r2, [r3, #0]
 800b1a0:	e002      	b.n	800b1a8 <xTaskGenericNotifyFromISR+0x160>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 800b1a2:	4b0b      	ldr	r3, [pc, #44]	; (800b1d0 <xTaskGenericNotifyFromISR+0x188>)
 800b1a4:	2201      	movs	r2, #1
 800b1a6:	601a      	str	r2, [r3, #0]
 800b1a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1aa:	617b      	str	r3, [r7, #20]
	__asm volatile
 800b1ac:	697b      	ldr	r3, [r7, #20]
 800b1ae:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800b1b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	3738      	adds	r7, #56	; 0x38
 800b1b8:	46bd      	mov	sp, r7
 800b1ba:	bd80      	pop	{r7, pc}
 800b1bc:	200003f4 	.word	0x200003f4
 800b1c0:	200003d4 	.word	0x200003d4
 800b1c4:	200002d0 	.word	0x200002d0
 800b1c8:	2000038c 	.word	0x2000038c
 800b1cc:	200002cc 	.word	0x200002cc
 800b1d0:	200003e0 	.word	0x200003e0

0800b1d4 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	b084      	sub	sp, #16
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d102      	bne.n	800b1e8 <xTaskNotifyStateClear+0x14>
 800b1e2:	4b0e      	ldr	r3, [pc, #56]	; (800b21c <xTaskNotifyStateClear+0x48>)
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	e000      	b.n	800b1ea <xTaskNotifyStateClear+0x16>
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();
 800b1ec:	f000 fd26 	bl	800bc3c <vPortEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 800b1f0:	68bb      	ldr	r3, [r7, #8]
 800b1f2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b1f6:	b2db      	uxtb	r3, r3
 800b1f8:	2b02      	cmp	r3, #2
 800b1fa:	d106      	bne.n	800b20a <xTaskNotifyStateClear+0x36>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b1fc:	68bb      	ldr	r3, [r7, #8]
 800b1fe:	2200      	movs	r2, #0
 800b200:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				xReturn = pdPASS;
 800b204:	2301      	movs	r3, #1
 800b206:	60fb      	str	r3, [r7, #12]
 800b208:	e001      	b.n	800b20e <xTaskNotifyStateClear+0x3a>
			}
			else
			{
				xReturn = pdFAIL;
 800b20a:	2300      	movs	r3, #0
 800b20c:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 800b20e:	f000 fd43 	bl	800bc98 <vPortExitCritical>

		return xReturn;
 800b212:	68fb      	ldr	r3, [r7, #12]
	}
 800b214:	4618      	mov	r0, r3
 800b216:	3710      	adds	r7, #16
 800b218:	46bd      	mov	sp, r7
 800b21a:	bd80      	pop	{r7, pc}
 800b21c:	200002cc 	.word	0x200002cc

0800b220 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b220:	b580      	push	{r7, lr}
 800b222:	b084      	sub	sp, #16
 800b224:	af00      	add	r7, sp, #0
 800b226:	6078      	str	r0, [r7, #4]
 800b228:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b22a:	4b2b      	ldr	r3, [pc, #172]	; (800b2d8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	60fb      	str	r3, [r7, #12]
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 800b230:	4b2a      	ldr	r3, [pc, #168]	; (800b2dc <prvAddCurrentTaskToDelayedList+0xbc>)
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	2200      	movs	r2, #0
 800b236:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b23a:	4b28      	ldr	r3, [pc, #160]	; (800b2dc <prvAddCurrentTaskToDelayedList+0xbc>)
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	3304      	adds	r3, #4
 800b240:	4618      	mov	r0, r3
 800b242:	f7fd fd51 	bl	8008ce8 <uxListRemove>
 800b246:	4603      	mov	r3, r0
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d10b      	bne.n	800b264 <prvAddCurrentTaskToDelayedList+0x44>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800b24c:	4b23      	ldr	r3, [pc, #140]	; (800b2dc <prvAddCurrentTaskToDelayedList+0xbc>)
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b252:	2201      	movs	r2, #1
 800b254:	fa02 f303 	lsl.w	r3, r2, r3
 800b258:	43da      	mvns	r2, r3
 800b25a:	4b21      	ldr	r3, [pc, #132]	; (800b2e0 <prvAddCurrentTaskToDelayedList+0xc0>)
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	4013      	ands	r3, r2
 800b260:	4a1f      	ldr	r2, [pc, #124]	; (800b2e0 <prvAddCurrentTaskToDelayedList+0xc0>)
 800b262:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b26a:	d10a      	bne.n	800b282 <prvAddCurrentTaskToDelayedList+0x62>
 800b26c:	683b      	ldr	r3, [r7, #0]
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d007      	beq.n	800b282 <prvAddCurrentTaskToDelayedList+0x62>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b272:	4b1a      	ldr	r3, [pc, #104]	; (800b2dc <prvAddCurrentTaskToDelayedList+0xbc>)
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	3304      	adds	r3, #4
 800b278:	4619      	mov	r1, r3
 800b27a:	481a      	ldr	r0, [pc, #104]	; (800b2e4 <prvAddCurrentTaskToDelayedList+0xc4>)
 800b27c:	f7fd fcd7 	bl	8008c2e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b280:	e026      	b.n	800b2d0 <prvAddCurrentTaskToDelayedList+0xb0>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b282:	68fa      	ldr	r2, [r7, #12]
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	4413      	add	r3, r2
 800b288:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b28a:	4b14      	ldr	r3, [pc, #80]	; (800b2dc <prvAddCurrentTaskToDelayedList+0xbc>)
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	68ba      	ldr	r2, [r7, #8]
 800b290:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b292:	68ba      	ldr	r2, [r7, #8]
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	429a      	cmp	r2, r3
 800b298:	d209      	bcs.n	800b2ae <prvAddCurrentTaskToDelayedList+0x8e>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b29a:	4b13      	ldr	r3, [pc, #76]	; (800b2e8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b29c:	681a      	ldr	r2, [r3, #0]
 800b29e:	4b0f      	ldr	r3, [pc, #60]	; (800b2dc <prvAddCurrentTaskToDelayedList+0xbc>)
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	3304      	adds	r3, #4
 800b2a4:	4619      	mov	r1, r3
 800b2a6:	4610      	mov	r0, r2
 800b2a8:	f7fd fce5 	bl	8008c76 <vListInsert>
}
 800b2ac:	e010      	b.n	800b2d0 <prvAddCurrentTaskToDelayedList+0xb0>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b2ae:	4b0f      	ldr	r3, [pc, #60]	; (800b2ec <prvAddCurrentTaskToDelayedList+0xcc>)
 800b2b0:	681a      	ldr	r2, [r3, #0]
 800b2b2:	4b0a      	ldr	r3, [pc, #40]	; (800b2dc <prvAddCurrentTaskToDelayedList+0xbc>)
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	3304      	adds	r3, #4
 800b2b8:	4619      	mov	r1, r3
 800b2ba:	4610      	mov	r0, r2
 800b2bc:	f7fd fcdb 	bl	8008c76 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b2c0:	4b0b      	ldr	r3, [pc, #44]	; (800b2f0 <prvAddCurrentTaskToDelayedList+0xd0>)
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	68ba      	ldr	r2, [r7, #8]
 800b2c6:	429a      	cmp	r2, r3
 800b2c8:	d202      	bcs.n	800b2d0 <prvAddCurrentTaskToDelayedList+0xb0>
					xNextTaskUnblockTime = xTimeToWake;
 800b2ca:	4a09      	ldr	r2, [pc, #36]	; (800b2f0 <prvAddCurrentTaskToDelayedList+0xd0>)
 800b2cc:	68bb      	ldr	r3, [r7, #8]
 800b2ce:	6013      	str	r3, [r2, #0]
}
 800b2d0:	bf00      	nop
 800b2d2:	3710      	adds	r7, #16
 800b2d4:	46bd      	mov	sp, r7
 800b2d6:	bd80      	pop	{r7, pc}
 800b2d8:	200003d0 	.word	0x200003d0
 800b2dc:	200002cc 	.word	0x200002cc
 800b2e0:	200003d4 	.word	0x200003d4
 800b2e4:	200003b8 	.word	0x200003b8
 800b2e8:	20000388 	.word	0x20000388
 800b2ec:	20000384 	.word	0x20000384
 800b2f0:	200003ec 	.word	0x200003ec

0800b2f4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b2f4:	b580      	push	{r7, lr}
 800b2f6:	b08a      	sub	sp, #40	; 0x28
 800b2f8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b2fe:	f000 fb37 	bl	800b970 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b302:	4b1c      	ldr	r3, [pc, #112]	; (800b374 <xTimerCreateTimerTask+0x80>)
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	2b00      	cmp	r3, #0
 800b308:	d021      	beq.n	800b34e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b30a:	2300      	movs	r3, #0
 800b30c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b30e:	2300      	movs	r3, #0
 800b310:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b312:	1d3a      	adds	r2, r7, #4
 800b314:	f107 0108 	add.w	r1, r7, #8
 800b318:	f107 030c 	add.w	r3, r7, #12
 800b31c:	4618      	mov	r0, r3
 800b31e:	f007 f96d 	bl	80125fc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b322:	6879      	ldr	r1, [r7, #4]
 800b324:	68bb      	ldr	r3, [r7, #8]
 800b326:	68fa      	ldr	r2, [r7, #12]
 800b328:	9202      	str	r2, [sp, #8]
 800b32a:	9301      	str	r3, [sp, #4]
 800b32c:	2306      	movs	r3, #6
 800b32e:	9300      	str	r3, [sp, #0]
 800b330:	2300      	movs	r3, #0
 800b332:	460a      	mov	r2, r1
 800b334:	4910      	ldr	r1, [pc, #64]	; (800b378 <xTimerCreateTimerTask+0x84>)
 800b336:	4811      	ldr	r0, [pc, #68]	; (800b37c <xTimerCreateTimerTask+0x88>)
 800b338:	f7fe fcea 	bl	8009d10 <xTaskCreateStatic>
 800b33c:	4602      	mov	r2, r0
 800b33e:	4b10      	ldr	r3, [pc, #64]	; (800b380 <xTimerCreateTimerTask+0x8c>)
 800b340:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b342:	4b0f      	ldr	r3, [pc, #60]	; (800b380 <xTimerCreateTimerTask+0x8c>)
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d001      	beq.n	800b34e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b34a:	2301      	movs	r3, #1
 800b34c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b34e:	697b      	ldr	r3, [r7, #20]
 800b350:	2b00      	cmp	r3, #0
 800b352:	d109      	bne.n	800b368 <xTimerCreateTimerTask+0x74>
	__asm volatile
 800b354:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b358:	f383 8811 	msr	BASEPRI, r3
 800b35c:	f3bf 8f6f 	isb	sy
 800b360:	f3bf 8f4f 	dsb	sy
 800b364:	613b      	str	r3, [r7, #16]
 800b366:	e7fe      	b.n	800b366 <xTimerCreateTimerTask+0x72>
	return xReturn;
 800b368:	697b      	ldr	r3, [r7, #20]
}
 800b36a:	4618      	mov	r0, r3
 800b36c:	3718      	adds	r7, #24
 800b36e:	46bd      	mov	sp, r7
 800b370:	bd80      	pop	{r7, pc}
 800b372:	bf00      	nop
 800b374:	20000428 	.word	0x20000428
 800b378:	080188f4 	.word	0x080188f4
 800b37c:	0800b5b9 	.word	0x0800b5b9
 800b380:	2000042c 	.word	0x2000042c

0800b384 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800b384:	b580      	push	{r7, lr}
 800b386:	b088      	sub	sp, #32
 800b388:	af02      	add	r7, sp, #8
 800b38a:	60f8      	str	r0, [r7, #12]
 800b38c:	60b9      	str	r1, [r7, #8]
 800b38e:	607a      	str	r2, [r7, #4]
 800b390:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800b392:	202c      	movs	r0, #44	; 0x2c
 800b394:	f000 fd6c 	bl	800be70 <pvPortMalloc>
 800b398:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800b39a:	697b      	ldr	r3, [r7, #20]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d00d      	beq.n	800b3bc <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800b3a0:	697b      	ldr	r3, [r7, #20]
 800b3a2:	9301      	str	r3, [sp, #4]
 800b3a4:	6a3b      	ldr	r3, [r7, #32]
 800b3a6:	9300      	str	r3, [sp, #0]
 800b3a8:	683b      	ldr	r3, [r7, #0]
 800b3aa:	687a      	ldr	r2, [r7, #4]
 800b3ac:	68b9      	ldr	r1, [r7, #8]
 800b3ae:	68f8      	ldr	r0, [r7, #12]
 800b3b0:	f000 f844 	bl	800b43c <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 800b3b4:	697b      	ldr	r3, [r7, #20]
 800b3b6:	2200      	movs	r2, #0
 800b3b8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 800b3bc:	697b      	ldr	r3, [r7, #20]
	}
 800b3be:	4618      	mov	r0, r3
 800b3c0:	3718      	adds	r7, #24
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	bd80      	pop	{r7, pc}

0800b3c6 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800b3c6:	b580      	push	{r7, lr}
 800b3c8:	b08a      	sub	sp, #40	; 0x28
 800b3ca:	af02      	add	r7, sp, #8
 800b3cc:	60f8      	str	r0, [r7, #12]
 800b3ce:	60b9      	str	r1, [r7, #8]
 800b3d0:	607a      	str	r2, [r7, #4]
 800b3d2:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800b3d4:	232c      	movs	r3, #44	; 0x2c
 800b3d6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800b3d8:	693b      	ldr	r3, [r7, #16]
 800b3da:	2b2c      	cmp	r3, #44	; 0x2c
 800b3dc:	d009      	beq.n	800b3f2 <xTimerCreateStatic+0x2c>
 800b3de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3e2:	f383 8811 	msr	BASEPRI, r3
 800b3e6:	f3bf 8f6f 	isb	sy
 800b3ea:	f3bf 8f4f 	dsb	sy
 800b3ee:	61bb      	str	r3, [r7, #24]
 800b3f0:	e7fe      	b.n	800b3f0 <xTimerCreateStatic+0x2a>
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800b3f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d109      	bne.n	800b40c <xTimerCreateStatic+0x46>
 800b3f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3fc:	f383 8811 	msr	BASEPRI, r3
 800b400:	f3bf 8f6f 	isb	sy
 800b404:	f3bf 8f4f 	dsb	sy
 800b408:	617b      	str	r3, [r7, #20]
 800b40a:	e7fe      	b.n	800b40a <xTimerCreateStatic+0x44>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b40c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b40e:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800b410:	69fb      	ldr	r3, [r7, #28]
 800b412:	2b00      	cmp	r3, #0
 800b414:	d00d      	beq.n	800b432 <xTimerCreateStatic+0x6c>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800b416:	69fb      	ldr	r3, [r7, #28]
 800b418:	9301      	str	r3, [sp, #4]
 800b41a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b41c:	9300      	str	r3, [sp, #0]
 800b41e:	683b      	ldr	r3, [r7, #0]
 800b420:	687a      	ldr	r2, [r7, #4]
 800b422:	68b9      	ldr	r1, [r7, #8]
 800b424:	68f8      	ldr	r0, [r7, #12]
 800b426:	f000 f809 	bl	800b43c <prvInitialiseNewTimer>

			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically so note this
				timer was created statically in case it is later deleted. */
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 800b42a:	69fb      	ldr	r3, [r7, #28]
 800b42c:	2201      	movs	r2, #1
 800b42e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
		}

		return pxNewTimer;
 800b432:	69fb      	ldr	r3, [r7, #28]
	}
 800b434:	4618      	mov	r0, r3
 800b436:	3720      	adds	r7, #32
 800b438:	46bd      	mov	sp, r7
 800b43a:	bd80      	pop	{r7, pc}

0800b43c <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800b43c:	b580      	push	{r7, lr}
 800b43e:	b086      	sub	sp, #24
 800b440:	af00      	add	r7, sp, #0
 800b442:	60f8      	str	r0, [r7, #12]
 800b444:	60b9      	str	r1, [r7, #8]
 800b446:	607a      	str	r2, [r7, #4]
 800b448:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800b44a:	68bb      	ldr	r3, [r7, #8]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d109      	bne.n	800b464 <prvInitialiseNewTimer+0x28>
 800b450:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b454:	f383 8811 	msr	BASEPRI, r3
 800b458:	f3bf 8f6f 	isb	sy
 800b45c:	f3bf 8f4f 	dsb	sy
 800b460:	617b      	str	r3, [r7, #20]
 800b462:	e7fe      	b.n	800b462 <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 800b464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b466:	2b00      	cmp	r3, #0
 800b468:	d015      	beq.n	800b496 <prvInitialiseNewTimer+0x5a>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800b46a:	f000 fa81 	bl	800b970 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800b46e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b470:	68fa      	ldr	r2, [r7, #12]
 800b472:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800b474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b476:	68ba      	ldr	r2, [r7, #8]
 800b478:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 800b47a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b47c:	687a      	ldr	r2, [r7, #4]
 800b47e:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 800b480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b482:	683a      	ldr	r2, [r7, #0]
 800b484:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800b486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b488:	6a3a      	ldr	r2, [r7, #32]
 800b48a:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800b48c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b48e:	3304      	adds	r3, #4
 800b490:	4618      	mov	r0, r3
 800b492:	f7fd fbbf 	bl	8008c14 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800b496:	bf00      	nop
 800b498:	3718      	adds	r7, #24
 800b49a:	46bd      	mov	sp, r7
 800b49c:	bd80      	pop	{r7, pc}
	...

0800b4a0 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	b08a      	sub	sp, #40	; 0x28
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	60f8      	str	r0, [r7, #12]
 800b4a8:	60b9      	str	r1, [r7, #8]
 800b4aa:	607a      	str	r2, [r7, #4]
 800b4ac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b4ae:	2300      	movs	r3, #0
 800b4b0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d109      	bne.n	800b4cc <xTimerGenericCommand+0x2c>
 800b4b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4bc:	f383 8811 	msr	BASEPRI, r3
 800b4c0:	f3bf 8f6f 	isb	sy
 800b4c4:	f3bf 8f4f 	dsb	sy
 800b4c8:	623b      	str	r3, [r7, #32]
 800b4ca:	e7fe      	b.n	800b4ca <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b4cc:	4b19      	ldr	r3, [pc, #100]	; (800b534 <xTimerGenericCommand+0x94>)
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d02a      	beq.n	800b52a <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b4d4:	68bb      	ldr	r3, [r7, #8]
 800b4d6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b4e0:	68bb      	ldr	r3, [r7, #8]
 800b4e2:	2b05      	cmp	r3, #5
 800b4e4:	dc18      	bgt.n	800b518 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b4e6:	f7ff fadb 	bl	800aaa0 <xTaskGetSchedulerState>
 800b4ea:	4603      	mov	r3, r0
 800b4ec:	2b02      	cmp	r3, #2
 800b4ee:	d109      	bne.n	800b504 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b4f0:	4b10      	ldr	r3, [pc, #64]	; (800b534 <xTimerGenericCommand+0x94>)
 800b4f2:	6818      	ldr	r0, [r3, #0]
 800b4f4:	f107 0114 	add.w	r1, r7, #20
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b4fc:	f7fd fe0a 	bl	8009114 <xQueueGenericSend>
 800b500:	6278      	str	r0, [r7, #36]	; 0x24
 800b502:	e012      	b.n	800b52a <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b504:	4b0b      	ldr	r3, [pc, #44]	; (800b534 <xTimerGenericCommand+0x94>)
 800b506:	6818      	ldr	r0, [r3, #0]
 800b508:	f107 0114 	add.w	r1, r7, #20
 800b50c:	2300      	movs	r3, #0
 800b50e:	2200      	movs	r2, #0
 800b510:	f7fd fe00 	bl	8009114 <xQueueGenericSend>
 800b514:	6278      	str	r0, [r7, #36]	; 0x24
 800b516:	e008      	b.n	800b52a <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b518:	4b06      	ldr	r3, [pc, #24]	; (800b534 <xTimerGenericCommand+0x94>)
 800b51a:	6818      	ldr	r0, [r3, #0]
 800b51c:	f107 0114 	add.w	r1, r7, #20
 800b520:	2300      	movs	r3, #0
 800b522:	683a      	ldr	r2, [r7, #0]
 800b524:	f7fd fef0 	bl	8009308 <xQueueGenericSendFromISR>
 800b528:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b52a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b52c:	4618      	mov	r0, r3
 800b52e:	3728      	adds	r7, #40	; 0x28
 800b530:	46bd      	mov	sp, r7
 800b532:	bd80      	pop	{r7, pc}
 800b534:	20000428 	.word	0x20000428

0800b538 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b538:	b580      	push	{r7, lr}
 800b53a:	b088      	sub	sp, #32
 800b53c:	af02      	add	r7, sp, #8
 800b53e:	6078      	str	r0, [r7, #4]
 800b540:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b542:	4b1c      	ldr	r3, [pc, #112]	; (800b5b4 <prvProcessExpiredTimer+0x7c>)
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	68db      	ldr	r3, [r3, #12]
 800b548:	68db      	ldr	r3, [r3, #12]
 800b54a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b54c:	697b      	ldr	r3, [r7, #20]
 800b54e:	3304      	adds	r3, #4
 800b550:	4618      	mov	r0, r3
 800b552:	f7fd fbc9 	bl	8008ce8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800b556:	697b      	ldr	r3, [r7, #20]
 800b558:	69db      	ldr	r3, [r3, #28]
 800b55a:	2b01      	cmp	r3, #1
 800b55c:	d121      	bne.n	800b5a2 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b55e:	697b      	ldr	r3, [r7, #20]
 800b560:	699a      	ldr	r2, [r3, #24]
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	18d1      	adds	r1, r2, r3
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	683a      	ldr	r2, [r7, #0]
 800b56a:	6978      	ldr	r0, [r7, #20]
 800b56c:	f000 f8c8 	bl	800b700 <prvInsertTimerInActiveList>
 800b570:	4603      	mov	r3, r0
 800b572:	2b00      	cmp	r3, #0
 800b574:	d015      	beq.n	800b5a2 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b576:	2300      	movs	r3, #0
 800b578:	9300      	str	r3, [sp, #0]
 800b57a:	2300      	movs	r3, #0
 800b57c:	687a      	ldr	r2, [r7, #4]
 800b57e:	2100      	movs	r1, #0
 800b580:	6978      	ldr	r0, [r7, #20]
 800b582:	f7ff ff8d 	bl	800b4a0 <xTimerGenericCommand>
 800b586:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b588:	693b      	ldr	r3, [r7, #16]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d109      	bne.n	800b5a2 <prvProcessExpiredTimer+0x6a>
 800b58e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b592:	f383 8811 	msr	BASEPRI, r3
 800b596:	f3bf 8f6f 	isb	sy
 800b59a:	f3bf 8f4f 	dsb	sy
 800b59e:	60fb      	str	r3, [r7, #12]
 800b5a0:	e7fe      	b.n	800b5a0 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b5a2:	697b      	ldr	r3, [r7, #20]
 800b5a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5a6:	6978      	ldr	r0, [r7, #20]
 800b5a8:	4798      	blx	r3
}
 800b5aa:	bf00      	nop
 800b5ac:	3718      	adds	r7, #24
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	bd80      	pop	{r7, pc}
 800b5b2:	bf00      	nop
 800b5b4:	20000420 	.word	0x20000420

0800b5b8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800b5b8:	b580      	push	{r7, lr}
 800b5ba:	b084      	sub	sp, #16
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b5c0:	f107 0308 	add.w	r3, r7, #8
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	f000 f857 	bl	800b678 <prvGetNextExpireTime>
 800b5ca:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b5cc:	68bb      	ldr	r3, [r7, #8]
 800b5ce:	4619      	mov	r1, r3
 800b5d0:	68f8      	ldr	r0, [r7, #12]
 800b5d2:	f000 f803 	bl	800b5dc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b5d6:	f000 f8d5 	bl	800b784 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b5da:	e7f1      	b.n	800b5c0 <prvTimerTask+0x8>

0800b5dc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b5dc:	b580      	push	{r7, lr}
 800b5de:	b084      	sub	sp, #16
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6078      	str	r0, [r7, #4]
 800b5e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b5e6:	f7fe fe37 	bl	800a258 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b5ea:	f107 0308 	add.w	r3, r7, #8
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	f000 f866 	bl	800b6c0 <prvSampleTimeNow>
 800b5f4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b5f6:	68bb      	ldr	r3, [r7, #8]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d130      	bne.n	800b65e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b5fc:	683b      	ldr	r3, [r7, #0]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d10a      	bne.n	800b618 <prvProcessTimerOrBlockTask+0x3c>
 800b602:	687a      	ldr	r2, [r7, #4]
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	429a      	cmp	r2, r3
 800b608:	d806      	bhi.n	800b618 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b60a:	f7fe fe33 	bl	800a274 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b60e:	68f9      	ldr	r1, [r7, #12]
 800b610:	6878      	ldr	r0, [r7, #4]
 800b612:	f7ff ff91 	bl	800b538 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b616:	e024      	b.n	800b662 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b618:	683b      	ldr	r3, [r7, #0]
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d008      	beq.n	800b630 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b61e:	4b13      	ldr	r3, [pc, #76]	; (800b66c <prvProcessTimerOrBlockTask+0x90>)
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	2b00      	cmp	r3, #0
 800b626:	bf0c      	ite	eq
 800b628:	2301      	moveq	r3, #1
 800b62a:	2300      	movne	r3, #0
 800b62c:	b2db      	uxtb	r3, r3
 800b62e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b630:	4b0f      	ldr	r3, [pc, #60]	; (800b670 <prvProcessTimerOrBlockTask+0x94>)
 800b632:	6818      	ldr	r0, [r3, #0]
 800b634:	687a      	ldr	r2, [r7, #4]
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	1ad3      	subs	r3, r2, r3
 800b63a:	683a      	ldr	r2, [r7, #0]
 800b63c:	4619      	mov	r1, r3
 800b63e:	f7fe fb33 	bl	8009ca8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b642:	f7fe fe17 	bl	800a274 <xTaskResumeAll>
 800b646:	4603      	mov	r3, r0
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d10a      	bne.n	800b662 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b64c:	4b09      	ldr	r3, [pc, #36]	; (800b674 <prvProcessTimerOrBlockTask+0x98>)
 800b64e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b652:	601a      	str	r2, [r3, #0]
 800b654:	f3bf 8f4f 	dsb	sy
 800b658:	f3bf 8f6f 	isb	sy
}
 800b65c:	e001      	b.n	800b662 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b65e:	f7fe fe09 	bl	800a274 <xTaskResumeAll>
}
 800b662:	bf00      	nop
 800b664:	3710      	adds	r7, #16
 800b666:	46bd      	mov	sp, r7
 800b668:	bd80      	pop	{r7, pc}
 800b66a:	bf00      	nop
 800b66c:	20000424 	.word	0x20000424
 800b670:	20000428 	.word	0x20000428
 800b674:	e000ed04 	.word	0xe000ed04

0800b678 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b678:	b480      	push	{r7}
 800b67a:	b085      	sub	sp, #20
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b680:	4b0e      	ldr	r3, [pc, #56]	; (800b6bc <prvGetNextExpireTime+0x44>)
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	2b00      	cmp	r3, #0
 800b688:	bf0c      	ite	eq
 800b68a:	2301      	moveq	r3, #1
 800b68c:	2300      	movne	r3, #0
 800b68e:	b2db      	uxtb	r3, r3
 800b690:	461a      	mov	r2, r3
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d105      	bne.n	800b6aa <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b69e:	4b07      	ldr	r3, [pc, #28]	; (800b6bc <prvGetNextExpireTime+0x44>)
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	68db      	ldr	r3, [r3, #12]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	60fb      	str	r3, [r7, #12]
 800b6a8:	e001      	b.n	800b6ae <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b6ae:	68fb      	ldr	r3, [r7, #12]
}
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	3714      	adds	r7, #20
 800b6b4:	46bd      	mov	sp, r7
 800b6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ba:	4770      	bx	lr
 800b6bc:	20000420 	.word	0x20000420

0800b6c0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	b084      	sub	sp, #16
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b6c8:	f7fe fe70 	bl	800a3ac <xTaskGetTickCount>
 800b6cc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b6ce:	4b0b      	ldr	r3, [pc, #44]	; (800b6fc <prvSampleTimeNow+0x3c>)
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	68fa      	ldr	r2, [r7, #12]
 800b6d4:	429a      	cmp	r2, r3
 800b6d6:	d205      	bcs.n	800b6e4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b6d8:	f000 f8ea 	bl	800b8b0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	2201      	movs	r2, #1
 800b6e0:	601a      	str	r2, [r3, #0]
 800b6e2:	e002      	b.n	800b6ea <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	2200      	movs	r2, #0
 800b6e8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b6ea:	4a04      	ldr	r2, [pc, #16]	; (800b6fc <prvSampleTimeNow+0x3c>)
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b6f0:	68fb      	ldr	r3, [r7, #12]
}
 800b6f2:	4618      	mov	r0, r3
 800b6f4:	3710      	adds	r7, #16
 800b6f6:	46bd      	mov	sp, r7
 800b6f8:	bd80      	pop	{r7, pc}
 800b6fa:	bf00      	nop
 800b6fc:	20000430 	.word	0x20000430

0800b700 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b700:	b580      	push	{r7, lr}
 800b702:	b086      	sub	sp, #24
 800b704:	af00      	add	r7, sp, #0
 800b706:	60f8      	str	r0, [r7, #12]
 800b708:	60b9      	str	r1, [r7, #8]
 800b70a:	607a      	str	r2, [r7, #4]
 800b70c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b70e:	2300      	movs	r3, #0
 800b710:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	68ba      	ldr	r2, [r7, #8]
 800b716:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	68fa      	ldr	r2, [r7, #12]
 800b71c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b71e:	68ba      	ldr	r2, [r7, #8]
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	429a      	cmp	r2, r3
 800b724:	d812      	bhi.n	800b74c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b726:	687a      	ldr	r2, [r7, #4]
 800b728:	683b      	ldr	r3, [r7, #0]
 800b72a:	1ad2      	subs	r2, r2, r3
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	699b      	ldr	r3, [r3, #24]
 800b730:	429a      	cmp	r2, r3
 800b732:	d302      	bcc.n	800b73a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b734:	2301      	movs	r3, #1
 800b736:	617b      	str	r3, [r7, #20]
 800b738:	e01b      	b.n	800b772 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b73a:	4b10      	ldr	r3, [pc, #64]	; (800b77c <prvInsertTimerInActiveList+0x7c>)
 800b73c:	681a      	ldr	r2, [r3, #0]
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	3304      	adds	r3, #4
 800b742:	4619      	mov	r1, r3
 800b744:	4610      	mov	r0, r2
 800b746:	f7fd fa96 	bl	8008c76 <vListInsert>
 800b74a:	e012      	b.n	800b772 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b74c:	687a      	ldr	r2, [r7, #4]
 800b74e:	683b      	ldr	r3, [r7, #0]
 800b750:	429a      	cmp	r2, r3
 800b752:	d206      	bcs.n	800b762 <prvInsertTimerInActiveList+0x62>
 800b754:	68ba      	ldr	r2, [r7, #8]
 800b756:	683b      	ldr	r3, [r7, #0]
 800b758:	429a      	cmp	r2, r3
 800b75a:	d302      	bcc.n	800b762 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b75c:	2301      	movs	r3, #1
 800b75e:	617b      	str	r3, [r7, #20]
 800b760:	e007      	b.n	800b772 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b762:	4b07      	ldr	r3, [pc, #28]	; (800b780 <prvInsertTimerInActiveList+0x80>)
 800b764:	681a      	ldr	r2, [r3, #0]
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	3304      	adds	r3, #4
 800b76a:	4619      	mov	r1, r3
 800b76c:	4610      	mov	r0, r2
 800b76e:	f7fd fa82 	bl	8008c76 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b772:	697b      	ldr	r3, [r7, #20]
}
 800b774:	4618      	mov	r0, r3
 800b776:	3718      	adds	r7, #24
 800b778:	46bd      	mov	sp, r7
 800b77a:	bd80      	pop	{r7, pc}
 800b77c:	20000424 	.word	0x20000424
 800b780:	20000420 	.word	0x20000420

0800b784 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b784:	b580      	push	{r7, lr}
 800b786:	b08c      	sub	sp, #48	; 0x30
 800b788:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b78a:	e07f      	b.n	800b88c <prvProcessReceivedCommands+0x108>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b78c:	68bb      	ldr	r3, [r7, #8]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	db7b      	blt.n	800b88a <prvProcessReceivedCommands+0x106>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b792:	693b      	ldr	r3, [r7, #16]
 800b794:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b798:	695b      	ldr	r3, [r3, #20]
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d004      	beq.n	800b7a8 <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b79e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7a0:	3304      	adds	r3, #4
 800b7a2:	4618      	mov	r0, r3
 800b7a4:	f7fd faa0 	bl	8008ce8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b7a8:	1d3b      	adds	r3, r7, #4
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	f7ff ff88 	bl	800b6c0 <prvSampleTimeNow>
 800b7b0:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800b7b2:	68bb      	ldr	r3, [r7, #8]
 800b7b4:	2b09      	cmp	r3, #9
 800b7b6:	d869      	bhi.n	800b88c <prvProcessReceivedCommands+0x108>
 800b7b8:	a201      	add	r2, pc, #4	; (adr r2, 800b7c0 <prvProcessReceivedCommands+0x3c>)
 800b7ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7be:	bf00      	nop
 800b7c0:	0800b7e9 	.word	0x0800b7e9
 800b7c4:	0800b7e9 	.word	0x0800b7e9
 800b7c8:	0800b7e9 	.word	0x0800b7e9
 800b7cc:	0800b88d 	.word	0x0800b88d
 800b7d0:	0800b843 	.word	0x0800b843
 800b7d4:	0800b879 	.word	0x0800b879
 800b7d8:	0800b7e9 	.word	0x0800b7e9
 800b7dc:	0800b7e9 	.word	0x0800b7e9
 800b7e0:	0800b88d 	.word	0x0800b88d
 800b7e4:	0800b843 	.word	0x0800b843
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b7e8:	68fa      	ldr	r2, [r7, #12]
 800b7ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7ec:	699b      	ldr	r3, [r3, #24]
 800b7ee:	18d1      	adds	r1, r2, r3
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	6a3a      	ldr	r2, [r7, #32]
 800b7f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b7f6:	f7ff ff83 	bl	800b700 <prvInsertTimerInActiveList>
 800b7fa:	4603      	mov	r3, r0
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d045      	beq.n	800b88c <prvProcessReceivedCommands+0x108>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b804:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b806:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800b808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b80a:	69db      	ldr	r3, [r3, #28]
 800b80c:	2b01      	cmp	r3, #1
 800b80e:	d13d      	bne.n	800b88c <prvProcessReceivedCommands+0x108>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b810:	68fa      	ldr	r2, [r7, #12]
 800b812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b814:	699b      	ldr	r3, [r3, #24]
 800b816:	441a      	add	r2, r3
 800b818:	2300      	movs	r3, #0
 800b81a:	9300      	str	r3, [sp, #0]
 800b81c:	2300      	movs	r3, #0
 800b81e:	2100      	movs	r1, #0
 800b820:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b822:	f7ff fe3d 	bl	800b4a0 <xTimerGenericCommand>
 800b826:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800b828:	69fb      	ldr	r3, [r7, #28]
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d12e      	bne.n	800b88c <prvProcessReceivedCommands+0x108>
 800b82e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b832:	f383 8811 	msr	BASEPRI, r3
 800b836:	f3bf 8f6f 	isb	sy
 800b83a:	f3bf 8f4f 	dsb	sy
 800b83e:	61bb      	str	r3, [r7, #24]
 800b840:	e7fe      	b.n	800b840 <prvProcessReceivedCommands+0xbc>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b842:	68fa      	ldr	r2, [r7, #12]
 800b844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b846:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b84a:	699b      	ldr	r3, [r3, #24]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d109      	bne.n	800b864 <prvProcessReceivedCommands+0xe0>
 800b850:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b854:	f383 8811 	msr	BASEPRI, r3
 800b858:	f3bf 8f6f 	isb	sy
 800b85c:	f3bf 8f4f 	dsb	sy
 800b860:	617b      	str	r3, [r7, #20]
 800b862:	e7fe      	b.n	800b862 <prvProcessReceivedCommands+0xde>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b866:	699a      	ldr	r2, [r3, #24]
 800b868:	6a3b      	ldr	r3, [r7, #32]
 800b86a:	18d1      	adds	r1, r2, r3
 800b86c:	6a3b      	ldr	r3, [r7, #32]
 800b86e:	6a3a      	ldr	r2, [r7, #32]
 800b870:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b872:	f7ff ff45 	bl	800b700 <prvInsertTimerInActiveList>
					break;
 800b876:	e009      	b.n	800b88c <prvProcessReceivedCommands+0x108>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800b878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b87a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d104      	bne.n	800b88c <prvProcessReceivedCommands+0x108>
						{
							vPortFree( pxTimer );
 800b882:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b884:	f000 fbba 	bl	800bffc <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b888:	e000      	b.n	800b88c <prvProcessReceivedCommands+0x108>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b88a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b88c:	4b07      	ldr	r3, [pc, #28]	; (800b8ac <prvProcessReceivedCommands+0x128>)
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	f107 0108 	add.w	r1, r7, #8
 800b894:	2200      	movs	r2, #0
 800b896:	4618      	mov	r0, r3
 800b898:	f7fd fe54 	bl	8009544 <xQueueReceive>
 800b89c:	4603      	mov	r3, r0
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	f47f af74 	bne.w	800b78c <prvProcessReceivedCommands+0x8>
	}
}
 800b8a4:	bf00      	nop
 800b8a6:	3728      	adds	r7, #40	; 0x28
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	bd80      	pop	{r7, pc}
 800b8ac:	20000428 	.word	0x20000428

0800b8b0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b8b0:	b580      	push	{r7, lr}
 800b8b2:	b088      	sub	sp, #32
 800b8b4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b8b6:	e044      	b.n	800b942 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b8b8:	4b2b      	ldr	r3, [pc, #172]	; (800b968 <prvSwitchTimerLists+0xb8>)
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	68db      	ldr	r3, [r3, #12]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b8c2:	4b29      	ldr	r3, [pc, #164]	; (800b968 <prvSwitchTimerLists+0xb8>)
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	68db      	ldr	r3, [r3, #12]
 800b8c8:	68db      	ldr	r3, [r3, #12]
 800b8ca:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	3304      	adds	r3, #4
 800b8d0:	4618      	mov	r0, r3
 800b8d2:	f7fd fa09 	bl	8008ce8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8da:	68f8      	ldr	r0, [r7, #12]
 800b8dc:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	69db      	ldr	r3, [r3, #28]
 800b8e2:	2b01      	cmp	r3, #1
 800b8e4:	d12d      	bne.n	800b942 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	699b      	ldr	r3, [r3, #24]
 800b8ea:	693a      	ldr	r2, [r7, #16]
 800b8ec:	4413      	add	r3, r2
 800b8ee:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b8f0:	68ba      	ldr	r2, [r7, #8]
 800b8f2:	693b      	ldr	r3, [r7, #16]
 800b8f4:	429a      	cmp	r2, r3
 800b8f6:	d90e      	bls.n	800b916 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	68ba      	ldr	r2, [r7, #8]
 800b8fc:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	68fa      	ldr	r2, [r7, #12]
 800b902:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b904:	4b18      	ldr	r3, [pc, #96]	; (800b968 <prvSwitchTimerLists+0xb8>)
 800b906:	681a      	ldr	r2, [r3, #0]
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	3304      	adds	r3, #4
 800b90c:	4619      	mov	r1, r3
 800b90e:	4610      	mov	r0, r2
 800b910:	f7fd f9b1 	bl	8008c76 <vListInsert>
 800b914:	e015      	b.n	800b942 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b916:	2300      	movs	r3, #0
 800b918:	9300      	str	r3, [sp, #0]
 800b91a:	2300      	movs	r3, #0
 800b91c:	693a      	ldr	r2, [r7, #16]
 800b91e:	2100      	movs	r1, #0
 800b920:	68f8      	ldr	r0, [r7, #12]
 800b922:	f7ff fdbd 	bl	800b4a0 <xTimerGenericCommand>
 800b926:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d109      	bne.n	800b942 <prvSwitchTimerLists+0x92>
 800b92e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b932:	f383 8811 	msr	BASEPRI, r3
 800b936:	f3bf 8f6f 	isb	sy
 800b93a:	f3bf 8f4f 	dsb	sy
 800b93e:	603b      	str	r3, [r7, #0]
 800b940:	e7fe      	b.n	800b940 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b942:	4b09      	ldr	r3, [pc, #36]	; (800b968 <prvSwitchTimerLists+0xb8>)
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d1b5      	bne.n	800b8b8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b94c:	4b06      	ldr	r3, [pc, #24]	; (800b968 <prvSwitchTimerLists+0xb8>)
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b952:	4b06      	ldr	r3, [pc, #24]	; (800b96c <prvSwitchTimerLists+0xbc>)
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	4a04      	ldr	r2, [pc, #16]	; (800b968 <prvSwitchTimerLists+0xb8>)
 800b958:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b95a:	4a04      	ldr	r2, [pc, #16]	; (800b96c <prvSwitchTimerLists+0xbc>)
 800b95c:	697b      	ldr	r3, [r7, #20]
 800b95e:	6013      	str	r3, [r2, #0]
}
 800b960:	bf00      	nop
 800b962:	3718      	adds	r7, #24
 800b964:	46bd      	mov	sp, r7
 800b966:	bd80      	pop	{r7, pc}
 800b968:	20000420 	.word	0x20000420
 800b96c:	20000424 	.word	0x20000424

0800b970 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b970:	b580      	push	{r7, lr}
 800b972:	b082      	sub	sp, #8
 800b974:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b976:	f000 f961 	bl	800bc3c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b97a:	4b15      	ldr	r3, [pc, #84]	; (800b9d0 <prvCheckForValidListAndQueue+0x60>)
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d120      	bne.n	800b9c4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b982:	4814      	ldr	r0, [pc, #80]	; (800b9d4 <prvCheckForValidListAndQueue+0x64>)
 800b984:	f7fd f926 	bl	8008bd4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b988:	4813      	ldr	r0, [pc, #76]	; (800b9d8 <prvCheckForValidListAndQueue+0x68>)
 800b98a:	f7fd f923 	bl	8008bd4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b98e:	4b13      	ldr	r3, [pc, #76]	; (800b9dc <prvCheckForValidListAndQueue+0x6c>)
 800b990:	4a10      	ldr	r2, [pc, #64]	; (800b9d4 <prvCheckForValidListAndQueue+0x64>)
 800b992:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b994:	4b12      	ldr	r3, [pc, #72]	; (800b9e0 <prvCheckForValidListAndQueue+0x70>)
 800b996:	4a10      	ldr	r2, [pc, #64]	; (800b9d8 <prvCheckForValidListAndQueue+0x68>)
 800b998:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b99a:	2300      	movs	r3, #0
 800b99c:	9300      	str	r3, [sp, #0]
 800b99e:	4b11      	ldr	r3, [pc, #68]	; (800b9e4 <prvCheckForValidListAndQueue+0x74>)
 800b9a0:	4a11      	ldr	r2, [pc, #68]	; (800b9e8 <prvCheckForValidListAndQueue+0x78>)
 800b9a2:	210c      	movs	r1, #12
 800b9a4:	200a      	movs	r0, #10
 800b9a6:	f7fd fa31 	bl	8008e0c <xQueueGenericCreateStatic>
 800b9aa:	4602      	mov	r2, r0
 800b9ac:	4b08      	ldr	r3, [pc, #32]	; (800b9d0 <prvCheckForValidListAndQueue+0x60>)
 800b9ae:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b9b0:	4b07      	ldr	r3, [pc, #28]	; (800b9d0 <prvCheckForValidListAndQueue+0x60>)
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d005      	beq.n	800b9c4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b9b8:	4b05      	ldr	r3, [pc, #20]	; (800b9d0 <prvCheckForValidListAndQueue+0x60>)
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	490b      	ldr	r1, [pc, #44]	; (800b9ec <prvCheckForValidListAndQueue+0x7c>)
 800b9be:	4618      	mov	r0, r3
 800b9c0:	f7fe f94a 	bl	8009c58 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b9c4:	f000 f968 	bl	800bc98 <vPortExitCritical>
}
 800b9c8:	bf00      	nop
 800b9ca:	46bd      	mov	sp, r7
 800b9cc:	bd80      	pop	{r7, pc}
 800b9ce:	bf00      	nop
 800b9d0:	20000428 	.word	0x20000428
 800b9d4:	200003f8 	.word	0x200003f8
 800b9d8:	2000040c 	.word	0x2000040c
 800b9dc:	20000420 	.word	0x20000420
 800b9e0:	20000424 	.word	0x20000424
 800b9e4:	200004ac 	.word	0x200004ac
 800b9e8:	20000434 	.word	0x20000434
 800b9ec:	080188fc 	.word	0x080188fc

0800b9f0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b9f0:	b480      	push	{r7}
 800b9f2:	b085      	sub	sp, #20
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	60f8      	str	r0, [r7, #12]
 800b9f8:	60b9      	str	r1, [r7, #8]
 800b9fa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	3b04      	subs	r3, #4
 800ba00:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ba08:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	3b04      	subs	r3, #4
 800ba0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ba10:	68bb      	ldr	r3, [r7, #8]
 800ba12:	f023 0201 	bic.w	r2, r3, #1
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	3b04      	subs	r3, #4
 800ba1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ba20:	4a0c      	ldr	r2, [pc, #48]	; (800ba54 <pxPortInitialiseStack+0x64>)
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	3b14      	subs	r3, #20
 800ba2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ba2c:	687a      	ldr	r2, [r7, #4]
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	3b04      	subs	r3, #4
 800ba36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	f06f 0202 	mvn.w	r2, #2
 800ba3e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	3b20      	subs	r3, #32
 800ba44:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ba46:	68fb      	ldr	r3, [r7, #12]
}
 800ba48:	4618      	mov	r0, r3
 800ba4a:	3714      	adds	r7, #20
 800ba4c:	46bd      	mov	sp, r7
 800ba4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba52:	4770      	bx	lr
 800ba54:	0800ba59 	.word	0x0800ba59

0800ba58 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ba58:	b480      	push	{r7}
 800ba5a:	b085      	sub	sp, #20
 800ba5c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ba5e:	2300      	movs	r3, #0
 800ba60:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ba62:	4b11      	ldr	r3, [pc, #68]	; (800baa8 <prvTaskExitError+0x50>)
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba6a:	d009      	beq.n	800ba80 <prvTaskExitError+0x28>
 800ba6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba70:	f383 8811 	msr	BASEPRI, r3
 800ba74:	f3bf 8f6f 	isb	sy
 800ba78:	f3bf 8f4f 	dsb	sy
 800ba7c:	60fb      	str	r3, [r7, #12]
 800ba7e:	e7fe      	b.n	800ba7e <prvTaskExitError+0x26>
 800ba80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba84:	f383 8811 	msr	BASEPRI, r3
 800ba88:	f3bf 8f6f 	isb	sy
 800ba8c:	f3bf 8f4f 	dsb	sy
 800ba90:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ba92:	bf00      	nop
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d0fc      	beq.n	800ba94 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ba9a:	bf00      	nop
 800ba9c:	3714      	adds	r7, #20
 800ba9e:	46bd      	mov	sp, r7
 800baa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa4:	4770      	bx	lr
 800baa6:	bf00      	nop
 800baa8:	20000004 	.word	0x20000004
 800baac:	00000000 	.word	0x00000000

0800bab0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bab0:	4b07      	ldr	r3, [pc, #28]	; (800bad0 <pxCurrentTCBConst2>)
 800bab2:	6819      	ldr	r1, [r3, #0]
 800bab4:	6808      	ldr	r0, [r1, #0]
 800bab6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800baba:	f380 8809 	msr	PSP, r0
 800babe:	f3bf 8f6f 	isb	sy
 800bac2:	f04f 0000 	mov.w	r0, #0
 800bac6:	f380 8811 	msr	BASEPRI, r0
 800baca:	4770      	bx	lr
 800bacc:	f3af 8000 	nop.w

0800bad0 <pxCurrentTCBConst2>:
 800bad0:	200002cc 	.word	0x200002cc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bad4:	bf00      	nop
 800bad6:	bf00      	nop

0800bad8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bad8:	4808      	ldr	r0, [pc, #32]	; (800bafc <prvPortStartFirstTask+0x24>)
 800bada:	6800      	ldr	r0, [r0, #0]
 800badc:	6800      	ldr	r0, [r0, #0]
 800bade:	f380 8808 	msr	MSP, r0
 800bae2:	f04f 0000 	mov.w	r0, #0
 800bae6:	f380 8814 	msr	CONTROL, r0
 800baea:	b662      	cpsie	i
 800baec:	b661      	cpsie	f
 800baee:	f3bf 8f4f 	dsb	sy
 800baf2:	f3bf 8f6f 	isb	sy
 800baf6:	df00      	svc	0
 800baf8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bafa:	bf00      	nop
 800bafc:	e000ed08 	.word	0xe000ed08

0800bb00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bb00:	b580      	push	{r7, lr}
 800bb02:	b086      	sub	sp, #24
 800bb04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bb06:	4b44      	ldr	r3, [pc, #272]	; (800bc18 <xPortStartScheduler+0x118>)
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	4a44      	ldr	r2, [pc, #272]	; (800bc1c <xPortStartScheduler+0x11c>)
 800bb0c:	4293      	cmp	r3, r2
 800bb0e:	d109      	bne.n	800bb24 <xPortStartScheduler+0x24>
 800bb10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb14:	f383 8811 	msr	BASEPRI, r3
 800bb18:	f3bf 8f6f 	isb	sy
 800bb1c:	f3bf 8f4f 	dsb	sy
 800bb20:	613b      	str	r3, [r7, #16]
 800bb22:	e7fe      	b.n	800bb22 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bb24:	4b3c      	ldr	r3, [pc, #240]	; (800bc18 <xPortStartScheduler+0x118>)
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	4a3d      	ldr	r2, [pc, #244]	; (800bc20 <xPortStartScheduler+0x120>)
 800bb2a:	4293      	cmp	r3, r2
 800bb2c:	d109      	bne.n	800bb42 <xPortStartScheduler+0x42>
 800bb2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb32:	f383 8811 	msr	BASEPRI, r3
 800bb36:	f3bf 8f6f 	isb	sy
 800bb3a:	f3bf 8f4f 	dsb	sy
 800bb3e:	60fb      	str	r3, [r7, #12]
 800bb40:	e7fe      	b.n	800bb40 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bb42:	4b38      	ldr	r3, [pc, #224]	; (800bc24 <xPortStartScheduler+0x124>)
 800bb44:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bb46:	697b      	ldr	r3, [r7, #20]
 800bb48:	781b      	ldrb	r3, [r3, #0]
 800bb4a:	b2db      	uxtb	r3, r3
 800bb4c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bb4e:	697b      	ldr	r3, [r7, #20]
 800bb50:	22ff      	movs	r2, #255	; 0xff
 800bb52:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bb54:	697b      	ldr	r3, [r7, #20]
 800bb56:	781b      	ldrb	r3, [r3, #0]
 800bb58:	b2db      	uxtb	r3, r3
 800bb5a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bb5c:	78fb      	ldrb	r3, [r7, #3]
 800bb5e:	b2db      	uxtb	r3, r3
 800bb60:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800bb64:	b2da      	uxtb	r2, r3
 800bb66:	4b30      	ldr	r3, [pc, #192]	; (800bc28 <xPortStartScheduler+0x128>)
 800bb68:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bb6a:	4b30      	ldr	r3, [pc, #192]	; (800bc2c <xPortStartScheduler+0x12c>)
 800bb6c:	2207      	movs	r2, #7
 800bb6e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bb70:	e009      	b.n	800bb86 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800bb72:	4b2e      	ldr	r3, [pc, #184]	; (800bc2c <xPortStartScheduler+0x12c>)
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	3b01      	subs	r3, #1
 800bb78:	4a2c      	ldr	r2, [pc, #176]	; (800bc2c <xPortStartScheduler+0x12c>)
 800bb7a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bb7c:	78fb      	ldrb	r3, [r7, #3]
 800bb7e:	b2db      	uxtb	r3, r3
 800bb80:	005b      	lsls	r3, r3, #1
 800bb82:	b2db      	uxtb	r3, r3
 800bb84:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bb86:	78fb      	ldrb	r3, [r7, #3]
 800bb88:	b2db      	uxtb	r3, r3
 800bb8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb8e:	2b80      	cmp	r3, #128	; 0x80
 800bb90:	d0ef      	beq.n	800bb72 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bb92:	4b26      	ldr	r3, [pc, #152]	; (800bc2c <xPortStartScheduler+0x12c>)
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	f1c3 0307 	rsb	r3, r3, #7
 800bb9a:	2b04      	cmp	r3, #4
 800bb9c:	d009      	beq.n	800bbb2 <xPortStartScheduler+0xb2>
 800bb9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bba2:	f383 8811 	msr	BASEPRI, r3
 800bba6:	f3bf 8f6f 	isb	sy
 800bbaa:	f3bf 8f4f 	dsb	sy
 800bbae:	60bb      	str	r3, [r7, #8]
 800bbb0:	e7fe      	b.n	800bbb0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bbb2:	4b1e      	ldr	r3, [pc, #120]	; (800bc2c <xPortStartScheduler+0x12c>)
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	021b      	lsls	r3, r3, #8
 800bbb8:	4a1c      	ldr	r2, [pc, #112]	; (800bc2c <xPortStartScheduler+0x12c>)
 800bbba:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bbbc:	4b1b      	ldr	r3, [pc, #108]	; (800bc2c <xPortStartScheduler+0x12c>)
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bbc4:	4a19      	ldr	r2, [pc, #100]	; (800bc2c <xPortStartScheduler+0x12c>)
 800bbc6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	b2da      	uxtb	r2, r3
 800bbcc:	697b      	ldr	r3, [r7, #20]
 800bbce:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bbd0:	4b17      	ldr	r3, [pc, #92]	; (800bc30 <xPortStartScheduler+0x130>)
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	4a16      	ldr	r2, [pc, #88]	; (800bc30 <xPortStartScheduler+0x130>)
 800bbd6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bbda:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bbdc:	4b14      	ldr	r3, [pc, #80]	; (800bc30 <xPortStartScheduler+0x130>)
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	4a13      	ldr	r2, [pc, #76]	; (800bc30 <xPortStartScheduler+0x130>)
 800bbe2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800bbe6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bbe8:	f000 f8d6 	bl	800bd98 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bbec:	4b11      	ldr	r3, [pc, #68]	; (800bc34 <xPortStartScheduler+0x134>)
 800bbee:	2200      	movs	r2, #0
 800bbf0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bbf2:	f000 f8f5 	bl	800bde0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bbf6:	4b10      	ldr	r3, [pc, #64]	; (800bc38 <xPortStartScheduler+0x138>)
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	4a0f      	ldr	r2, [pc, #60]	; (800bc38 <xPortStartScheduler+0x138>)
 800bbfc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800bc00:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bc02:	f7ff ff69 	bl	800bad8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bc06:	f7fe fcaf 	bl	800a568 <vTaskSwitchContext>
	prvTaskExitError();
 800bc0a:	f7ff ff25 	bl	800ba58 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bc0e:	2300      	movs	r3, #0
}
 800bc10:	4618      	mov	r0, r3
 800bc12:	3718      	adds	r7, #24
 800bc14:	46bd      	mov	sp, r7
 800bc16:	bd80      	pop	{r7, pc}
 800bc18:	e000ed00 	.word	0xe000ed00
 800bc1c:	410fc271 	.word	0x410fc271
 800bc20:	410fc270 	.word	0x410fc270
 800bc24:	e000e400 	.word	0xe000e400
 800bc28:	200004f4 	.word	0x200004f4
 800bc2c:	200004f8 	.word	0x200004f8
 800bc30:	e000ed20 	.word	0xe000ed20
 800bc34:	20000004 	.word	0x20000004
 800bc38:	e000ef34 	.word	0xe000ef34

0800bc3c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bc3c:	b480      	push	{r7}
 800bc3e:	b083      	sub	sp, #12
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc46:	f383 8811 	msr	BASEPRI, r3
 800bc4a:	f3bf 8f6f 	isb	sy
 800bc4e:	f3bf 8f4f 	dsb	sy
 800bc52:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bc54:	4b0e      	ldr	r3, [pc, #56]	; (800bc90 <vPortEnterCritical+0x54>)
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	3301      	adds	r3, #1
 800bc5a:	4a0d      	ldr	r2, [pc, #52]	; (800bc90 <vPortEnterCritical+0x54>)
 800bc5c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bc5e:	4b0c      	ldr	r3, [pc, #48]	; (800bc90 <vPortEnterCritical+0x54>)
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	2b01      	cmp	r3, #1
 800bc64:	d10e      	bne.n	800bc84 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bc66:	4b0b      	ldr	r3, [pc, #44]	; (800bc94 <vPortEnterCritical+0x58>)
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	b2db      	uxtb	r3, r3
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d009      	beq.n	800bc84 <vPortEnterCritical+0x48>
 800bc70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc74:	f383 8811 	msr	BASEPRI, r3
 800bc78:	f3bf 8f6f 	isb	sy
 800bc7c:	f3bf 8f4f 	dsb	sy
 800bc80:	603b      	str	r3, [r7, #0]
 800bc82:	e7fe      	b.n	800bc82 <vPortEnterCritical+0x46>
	}
}
 800bc84:	bf00      	nop
 800bc86:	370c      	adds	r7, #12
 800bc88:	46bd      	mov	sp, r7
 800bc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc8e:	4770      	bx	lr
 800bc90:	20000004 	.word	0x20000004
 800bc94:	e000ed04 	.word	0xe000ed04

0800bc98 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bc98:	b480      	push	{r7}
 800bc9a:	b083      	sub	sp, #12
 800bc9c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bc9e:	4b11      	ldr	r3, [pc, #68]	; (800bce4 <vPortExitCritical+0x4c>)
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d109      	bne.n	800bcba <vPortExitCritical+0x22>
 800bca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcaa:	f383 8811 	msr	BASEPRI, r3
 800bcae:	f3bf 8f6f 	isb	sy
 800bcb2:	f3bf 8f4f 	dsb	sy
 800bcb6:	607b      	str	r3, [r7, #4]
 800bcb8:	e7fe      	b.n	800bcb8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800bcba:	4b0a      	ldr	r3, [pc, #40]	; (800bce4 <vPortExitCritical+0x4c>)
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	3b01      	subs	r3, #1
 800bcc0:	4a08      	ldr	r2, [pc, #32]	; (800bce4 <vPortExitCritical+0x4c>)
 800bcc2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bcc4:	4b07      	ldr	r3, [pc, #28]	; (800bce4 <vPortExitCritical+0x4c>)
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d104      	bne.n	800bcd6 <vPortExitCritical+0x3e>
 800bccc:	2300      	movs	r3, #0
 800bcce:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bcd0:	683b      	ldr	r3, [r7, #0]
 800bcd2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800bcd6:	bf00      	nop
 800bcd8:	370c      	adds	r7, #12
 800bcda:	46bd      	mov	sp, r7
 800bcdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce0:	4770      	bx	lr
 800bce2:	bf00      	nop
 800bce4:	20000004 	.word	0x20000004
	...

0800bcf0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bcf0:	f3ef 8009 	mrs	r0, PSP
 800bcf4:	f3bf 8f6f 	isb	sy
 800bcf8:	4b15      	ldr	r3, [pc, #84]	; (800bd50 <pxCurrentTCBConst>)
 800bcfa:	681a      	ldr	r2, [r3, #0]
 800bcfc:	f01e 0f10 	tst.w	lr, #16
 800bd00:	bf08      	it	eq
 800bd02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bd06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd0a:	6010      	str	r0, [r2, #0]
 800bd0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bd10:	f04f 0050 	mov.w	r0, #80	; 0x50
 800bd14:	f380 8811 	msr	BASEPRI, r0
 800bd18:	f3bf 8f4f 	dsb	sy
 800bd1c:	f3bf 8f6f 	isb	sy
 800bd20:	f7fe fc22 	bl	800a568 <vTaskSwitchContext>
 800bd24:	f04f 0000 	mov.w	r0, #0
 800bd28:	f380 8811 	msr	BASEPRI, r0
 800bd2c:	bc09      	pop	{r0, r3}
 800bd2e:	6819      	ldr	r1, [r3, #0]
 800bd30:	6808      	ldr	r0, [r1, #0]
 800bd32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd36:	f01e 0f10 	tst.w	lr, #16
 800bd3a:	bf08      	it	eq
 800bd3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bd40:	f380 8809 	msr	PSP, r0
 800bd44:	f3bf 8f6f 	isb	sy
 800bd48:	4770      	bx	lr
 800bd4a:	bf00      	nop
 800bd4c:	f3af 8000 	nop.w

0800bd50 <pxCurrentTCBConst>:
 800bd50:	200002cc 	.word	0x200002cc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bd54:	bf00      	nop
 800bd56:	bf00      	nop

0800bd58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bd58:	b580      	push	{r7, lr}
 800bd5a:	b082      	sub	sp, #8
 800bd5c:	af00      	add	r7, sp, #0
	__asm volatile
 800bd5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd62:	f383 8811 	msr	BASEPRI, r3
 800bd66:	f3bf 8f6f 	isb	sy
 800bd6a:	f3bf 8f4f 	dsb	sy
 800bd6e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bd70:	f7fe fb3e 	bl	800a3f0 <xTaskIncrementTick>
 800bd74:	4603      	mov	r3, r0
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d003      	beq.n	800bd82 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bd7a:	4b06      	ldr	r3, [pc, #24]	; (800bd94 <SysTick_Handler+0x3c>)
 800bd7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd80:	601a      	str	r2, [r3, #0]
 800bd82:	2300      	movs	r3, #0
 800bd84:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bd86:	683b      	ldr	r3, [r7, #0]
 800bd88:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800bd8c:	bf00      	nop
 800bd8e:	3708      	adds	r7, #8
 800bd90:	46bd      	mov	sp, r7
 800bd92:	bd80      	pop	{r7, pc}
 800bd94:	e000ed04 	.word	0xe000ed04

0800bd98 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bd98:	b480      	push	{r7}
 800bd9a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bd9c:	4b0b      	ldr	r3, [pc, #44]	; (800bdcc <vPortSetupTimerInterrupt+0x34>)
 800bd9e:	2200      	movs	r2, #0
 800bda0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bda2:	4b0b      	ldr	r3, [pc, #44]	; (800bdd0 <vPortSetupTimerInterrupt+0x38>)
 800bda4:	2200      	movs	r2, #0
 800bda6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bda8:	4b0a      	ldr	r3, [pc, #40]	; (800bdd4 <vPortSetupTimerInterrupt+0x3c>)
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	4a0a      	ldr	r2, [pc, #40]	; (800bdd8 <vPortSetupTimerInterrupt+0x40>)
 800bdae:	fba2 2303 	umull	r2, r3, r2, r3
 800bdb2:	099b      	lsrs	r3, r3, #6
 800bdb4:	4a09      	ldr	r2, [pc, #36]	; (800bddc <vPortSetupTimerInterrupt+0x44>)
 800bdb6:	3b01      	subs	r3, #1
 800bdb8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bdba:	4b04      	ldr	r3, [pc, #16]	; (800bdcc <vPortSetupTimerInterrupt+0x34>)
 800bdbc:	2207      	movs	r2, #7
 800bdbe:	601a      	str	r2, [r3, #0]
}
 800bdc0:	bf00      	nop
 800bdc2:	46bd      	mov	sp, r7
 800bdc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc8:	4770      	bx	lr
 800bdca:	bf00      	nop
 800bdcc:	e000e010 	.word	0xe000e010
 800bdd0:	e000e018 	.word	0xe000e018
 800bdd4:	200000d8 	.word	0x200000d8
 800bdd8:	10624dd3 	.word	0x10624dd3
 800bddc:	e000e014 	.word	0xe000e014

0800bde0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bde0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800bdf0 <vPortEnableVFP+0x10>
 800bde4:	6801      	ldr	r1, [r0, #0]
 800bde6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800bdea:	6001      	str	r1, [r0, #0]
 800bdec:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bdee:	bf00      	nop
 800bdf0:	e000ed88 	.word	0xe000ed88

0800bdf4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bdf4:	b480      	push	{r7}
 800bdf6:	b085      	sub	sp, #20
 800bdf8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bdfa:	f3ef 8305 	mrs	r3, IPSR
 800bdfe:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	2b0f      	cmp	r3, #15
 800be04:	d913      	bls.n	800be2e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800be06:	4a16      	ldr	r2, [pc, #88]	; (800be60 <vPortValidateInterruptPriority+0x6c>)
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	4413      	add	r3, r2
 800be0c:	781b      	ldrb	r3, [r3, #0]
 800be0e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800be10:	4b14      	ldr	r3, [pc, #80]	; (800be64 <vPortValidateInterruptPriority+0x70>)
 800be12:	781b      	ldrb	r3, [r3, #0]
 800be14:	7afa      	ldrb	r2, [r7, #11]
 800be16:	429a      	cmp	r2, r3
 800be18:	d209      	bcs.n	800be2e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800be1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be1e:	f383 8811 	msr	BASEPRI, r3
 800be22:	f3bf 8f6f 	isb	sy
 800be26:	f3bf 8f4f 	dsb	sy
 800be2a:	607b      	str	r3, [r7, #4]
 800be2c:	e7fe      	b.n	800be2c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800be2e:	4b0e      	ldr	r3, [pc, #56]	; (800be68 <vPortValidateInterruptPriority+0x74>)
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800be36:	4b0d      	ldr	r3, [pc, #52]	; (800be6c <vPortValidateInterruptPriority+0x78>)
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	429a      	cmp	r2, r3
 800be3c:	d909      	bls.n	800be52 <vPortValidateInterruptPriority+0x5e>
 800be3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be42:	f383 8811 	msr	BASEPRI, r3
 800be46:	f3bf 8f6f 	isb	sy
 800be4a:	f3bf 8f4f 	dsb	sy
 800be4e:	603b      	str	r3, [r7, #0]
 800be50:	e7fe      	b.n	800be50 <vPortValidateInterruptPriority+0x5c>
	}
 800be52:	bf00      	nop
 800be54:	3714      	adds	r7, #20
 800be56:	46bd      	mov	sp, r7
 800be58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be5c:	4770      	bx	lr
 800be5e:	bf00      	nop
 800be60:	e000e3f0 	.word	0xe000e3f0
 800be64:	200004f4 	.word	0x200004f4
 800be68:	e000ed0c 	.word	0xe000ed0c
 800be6c:	200004f8 	.word	0x200004f8

0800be70 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800be70:	b580      	push	{r7, lr}
 800be72:	b08a      	sub	sp, #40	; 0x28
 800be74:	af00      	add	r7, sp, #0
 800be76:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800be78:	2300      	movs	r3, #0
 800be7a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800be7c:	f7fe f9ec 	bl	800a258 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800be80:	4b59      	ldr	r3, [pc, #356]	; (800bfe8 <pvPortMalloc+0x178>)
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	2b00      	cmp	r3, #0
 800be86:	d101      	bne.n	800be8c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800be88:	f000 f910 	bl	800c0ac <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800be8c:	4b57      	ldr	r3, [pc, #348]	; (800bfec <pvPortMalloc+0x17c>)
 800be8e:	681a      	ldr	r2, [r3, #0]
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	4013      	ands	r3, r2
 800be94:	2b00      	cmp	r3, #0
 800be96:	f040 808c 	bne.w	800bfb2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d01c      	beq.n	800beda <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800bea0:	2208      	movs	r2, #8
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	4413      	add	r3, r2
 800bea6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	f003 0307 	and.w	r3, r3, #7
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d013      	beq.n	800beda <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	f023 0307 	bic.w	r3, r3, #7
 800beb8:	3308      	adds	r3, #8
 800beba:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	f003 0307 	and.w	r3, r3, #7
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d009      	beq.n	800beda <pvPortMalloc+0x6a>
 800bec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800beca:	f383 8811 	msr	BASEPRI, r3
 800bece:	f3bf 8f6f 	isb	sy
 800bed2:	f3bf 8f4f 	dsb	sy
 800bed6:	617b      	str	r3, [r7, #20]
 800bed8:	e7fe      	b.n	800bed8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d068      	beq.n	800bfb2 <pvPortMalloc+0x142>
 800bee0:	4b43      	ldr	r3, [pc, #268]	; (800bff0 <pvPortMalloc+0x180>)
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	687a      	ldr	r2, [r7, #4]
 800bee6:	429a      	cmp	r2, r3
 800bee8:	d863      	bhi.n	800bfb2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800beea:	4b42      	ldr	r3, [pc, #264]	; (800bff4 <pvPortMalloc+0x184>)
 800beec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800beee:	4b41      	ldr	r3, [pc, #260]	; (800bff4 <pvPortMalloc+0x184>)
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bef4:	e004      	b.n	800bf00 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800bef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bef8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800befa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bf00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf02:	685b      	ldr	r3, [r3, #4]
 800bf04:	687a      	ldr	r2, [r7, #4]
 800bf06:	429a      	cmp	r2, r3
 800bf08:	d903      	bls.n	800bf12 <pvPortMalloc+0xa2>
 800bf0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d1f1      	bne.n	800bef6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800bf12:	4b35      	ldr	r3, [pc, #212]	; (800bfe8 <pvPortMalloc+0x178>)
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf18:	429a      	cmp	r2, r3
 800bf1a:	d04a      	beq.n	800bfb2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bf1c:	6a3b      	ldr	r3, [r7, #32]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	2208      	movs	r2, #8
 800bf22:	4413      	add	r3, r2
 800bf24:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bf26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf28:	681a      	ldr	r2, [r3, #0]
 800bf2a:	6a3b      	ldr	r3, [r7, #32]
 800bf2c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bf2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf30:	685a      	ldr	r2, [r3, #4]
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	1ad2      	subs	r2, r2, r3
 800bf36:	2308      	movs	r3, #8
 800bf38:	005b      	lsls	r3, r3, #1
 800bf3a:	429a      	cmp	r2, r3
 800bf3c:	d91e      	bls.n	800bf7c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bf3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	4413      	add	r3, r2
 800bf44:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bf46:	69bb      	ldr	r3, [r7, #24]
 800bf48:	f003 0307 	and.w	r3, r3, #7
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d009      	beq.n	800bf64 <pvPortMalloc+0xf4>
 800bf50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf54:	f383 8811 	msr	BASEPRI, r3
 800bf58:	f3bf 8f6f 	isb	sy
 800bf5c:	f3bf 8f4f 	dsb	sy
 800bf60:	613b      	str	r3, [r7, #16]
 800bf62:	e7fe      	b.n	800bf62 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bf64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf66:	685a      	ldr	r2, [r3, #4]
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	1ad2      	subs	r2, r2, r3
 800bf6c:	69bb      	ldr	r3, [r7, #24]
 800bf6e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800bf70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf72:	687a      	ldr	r2, [r7, #4]
 800bf74:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bf76:	69b8      	ldr	r0, [r7, #24]
 800bf78:	f000 f8fa 	bl	800c170 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bf7c:	4b1c      	ldr	r3, [pc, #112]	; (800bff0 <pvPortMalloc+0x180>)
 800bf7e:	681a      	ldr	r2, [r3, #0]
 800bf80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf82:	685b      	ldr	r3, [r3, #4]
 800bf84:	1ad3      	subs	r3, r2, r3
 800bf86:	4a1a      	ldr	r2, [pc, #104]	; (800bff0 <pvPortMalloc+0x180>)
 800bf88:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bf8a:	4b19      	ldr	r3, [pc, #100]	; (800bff0 <pvPortMalloc+0x180>)
 800bf8c:	681a      	ldr	r2, [r3, #0]
 800bf8e:	4b1a      	ldr	r3, [pc, #104]	; (800bff8 <pvPortMalloc+0x188>)
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	429a      	cmp	r2, r3
 800bf94:	d203      	bcs.n	800bf9e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bf96:	4b16      	ldr	r3, [pc, #88]	; (800bff0 <pvPortMalloc+0x180>)
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	4a17      	ldr	r2, [pc, #92]	; (800bff8 <pvPortMalloc+0x188>)
 800bf9c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bf9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfa0:	685a      	ldr	r2, [r3, #4]
 800bfa2:	4b12      	ldr	r3, [pc, #72]	; (800bfec <pvPortMalloc+0x17c>)
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	431a      	orrs	r2, r3
 800bfa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfaa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bfac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfae:	2200      	movs	r2, #0
 800bfb0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800bfb2:	f7fe f95f 	bl	800a274 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800bfb6:	69fb      	ldr	r3, [r7, #28]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d101      	bne.n	800bfc0 <pvPortMalloc+0x150>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800bfbc:	f006 fafd 	bl	80125ba <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800bfc0:	69fb      	ldr	r3, [r7, #28]
 800bfc2:	f003 0307 	and.w	r3, r3, #7
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d009      	beq.n	800bfde <pvPortMalloc+0x16e>
 800bfca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfce:	f383 8811 	msr	BASEPRI, r3
 800bfd2:	f3bf 8f6f 	isb	sy
 800bfd6:	f3bf 8f4f 	dsb	sy
 800bfda:	60fb      	str	r3, [r7, #12]
 800bfdc:	e7fe      	b.n	800bfdc <pvPortMalloc+0x16c>
	return pvReturn;
 800bfde:	69fb      	ldr	r3, [r7, #28]
}
 800bfe0:	4618      	mov	r0, r3
 800bfe2:	3728      	adds	r7, #40	; 0x28
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	bd80      	pop	{r7, pc}
 800bfe8:	200066ac 	.word	0x200066ac
 800bfec:	200066b8 	.word	0x200066b8
 800bff0:	200066b0 	.word	0x200066b0
 800bff4:	200066a4 	.word	0x200066a4
 800bff8:	200066b4 	.word	0x200066b4

0800bffc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bffc:	b580      	push	{r7, lr}
 800bffe:	b086      	sub	sp, #24
 800c000:	af00      	add	r7, sp, #0
 800c002:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d046      	beq.n	800c09c <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c00e:	2308      	movs	r3, #8
 800c010:	425b      	negs	r3, r3
 800c012:	697a      	ldr	r2, [r7, #20]
 800c014:	4413      	add	r3, r2
 800c016:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c018:	697b      	ldr	r3, [r7, #20]
 800c01a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c01c:	693b      	ldr	r3, [r7, #16]
 800c01e:	685a      	ldr	r2, [r3, #4]
 800c020:	4b20      	ldr	r3, [pc, #128]	; (800c0a4 <vPortFree+0xa8>)
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	4013      	ands	r3, r2
 800c026:	2b00      	cmp	r3, #0
 800c028:	d109      	bne.n	800c03e <vPortFree+0x42>
 800c02a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c02e:	f383 8811 	msr	BASEPRI, r3
 800c032:	f3bf 8f6f 	isb	sy
 800c036:	f3bf 8f4f 	dsb	sy
 800c03a:	60fb      	str	r3, [r7, #12]
 800c03c:	e7fe      	b.n	800c03c <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c03e:	693b      	ldr	r3, [r7, #16]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	2b00      	cmp	r3, #0
 800c044:	d009      	beq.n	800c05a <vPortFree+0x5e>
 800c046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c04a:	f383 8811 	msr	BASEPRI, r3
 800c04e:	f3bf 8f6f 	isb	sy
 800c052:	f3bf 8f4f 	dsb	sy
 800c056:	60bb      	str	r3, [r7, #8]
 800c058:	e7fe      	b.n	800c058 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c05a:	693b      	ldr	r3, [r7, #16]
 800c05c:	685a      	ldr	r2, [r3, #4]
 800c05e:	4b11      	ldr	r3, [pc, #68]	; (800c0a4 <vPortFree+0xa8>)
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	4013      	ands	r3, r2
 800c064:	2b00      	cmp	r3, #0
 800c066:	d019      	beq.n	800c09c <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c068:	693b      	ldr	r3, [r7, #16]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d115      	bne.n	800c09c <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c070:	693b      	ldr	r3, [r7, #16]
 800c072:	685a      	ldr	r2, [r3, #4]
 800c074:	4b0b      	ldr	r3, [pc, #44]	; (800c0a4 <vPortFree+0xa8>)
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	43db      	mvns	r3, r3
 800c07a:	401a      	ands	r2, r3
 800c07c:	693b      	ldr	r3, [r7, #16]
 800c07e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c080:	f7fe f8ea 	bl	800a258 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c084:	693b      	ldr	r3, [r7, #16]
 800c086:	685a      	ldr	r2, [r3, #4]
 800c088:	4b07      	ldr	r3, [pc, #28]	; (800c0a8 <vPortFree+0xac>)
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	4413      	add	r3, r2
 800c08e:	4a06      	ldr	r2, [pc, #24]	; (800c0a8 <vPortFree+0xac>)
 800c090:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c092:	6938      	ldr	r0, [r7, #16]
 800c094:	f000 f86c 	bl	800c170 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800c098:	f7fe f8ec 	bl	800a274 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c09c:	bf00      	nop
 800c09e:	3718      	adds	r7, #24
 800c0a0:	46bd      	mov	sp, r7
 800c0a2:	bd80      	pop	{r7, pc}
 800c0a4:	200066b8 	.word	0x200066b8
 800c0a8:	200066b0 	.word	0x200066b0

0800c0ac <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c0ac:	b480      	push	{r7}
 800c0ae:	b085      	sub	sp, #20
 800c0b0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c0b2:	f246 13a8 	movw	r3, #25000	; 0x61a8
 800c0b6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c0b8:	4b27      	ldr	r3, [pc, #156]	; (800c158 <prvHeapInit+0xac>)
 800c0ba:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	f003 0307 	and.w	r3, r3, #7
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d00c      	beq.n	800c0e0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	3307      	adds	r3, #7
 800c0ca:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	f023 0307 	bic.w	r3, r3, #7
 800c0d2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c0d4:	68ba      	ldr	r2, [r7, #8]
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	1ad3      	subs	r3, r2, r3
 800c0da:	4a1f      	ldr	r2, [pc, #124]	; (800c158 <prvHeapInit+0xac>)
 800c0dc:	4413      	add	r3, r2
 800c0de:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c0e4:	4a1d      	ldr	r2, [pc, #116]	; (800c15c <prvHeapInit+0xb0>)
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c0ea:	4b1c      	ldr	r3, [pc, #112]	; (800c15c <prvHeapInit+0xb0>)
 800c0ec:	2200      	movs	r2, #0
 800c0ee:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	68ba      	ldr	r2, [r7, #8]
 800c0f4:	4413      	add	r3, r2
 800c0f6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c0f8:	2208      	movs	r2, #8
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	1a9b      	subs	r3, r3, r2
 800c0fe:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	f023 0307 	bic.w	r3, r3, #7
 800c106:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	4a15      	ldr	r2, [pc, #84]	; (800c160 <prvHeapInit+0xb4>)
 800c10c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c10e:	4b14      	ldr	r3, [pc, #80]	; (800c160 <prvHeapInit+0xb4>)
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	2200      	movs	r2, #0
 800c114:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c116:	4b12      	ldr	r3, [pc, #72]	; (800c160 <prvHeapInit+0xb4>)
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	2200      	movs	r2, #0
 800c11c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c122:	683b      	ldr	r3, [r7, #0]
 800c124:	68fa      	ldr	r2, [r7, #12]
 800c126:	1ad2      	subs	r2, r2, r3
 800c128:	683b      	ldr	r3, [r7, #0]
 800c12a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c12c:	4b0c      	ldr	r3, [pc, #48]	; (800c160 <prvHeapInit+0xb4>)
 800c12e:	681a      	ldr	r2, [r3, #0]
 800c130:	683b      	ldr	r3, [r7, #0]
 800c132:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c134:	683b      	ldr	r3, [r7, #0]
 800c136:	685b      	ldr	r3, [r3, #4]
 800c138:	4a0a      	ldr	r2, [pc, #40]	; (800c164 <prvHeapInit+0xb8>)
 800c13a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c13c:	683b      	ldr	r3, [r7, #0]
 800c13e:	685b      	ldr	r3, [r3, #4]
 800c140:	4a09      	ldr	r2, [pc, #36]	; (800c168 <prvHeapInit+0xbc>)
 800c142:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c144:	4b09      	ldr	r3, [pc, #36]	; (800c16c <prvHeapInit+0xc0>)
 800c146:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c14a:	601a      	str	r2, [r3, #0]
}
 800c14c:	bf00      	nop
 800c14e:	3714      	adds	r7, #20
 800c150:	46bd      	mov	sp, r7
 800c152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c156:	4770      	bx	lr
 800c158:	200004fc 	.word	0x200004fc
 800c15c:	200066a4 	.word	0x200066a4
 800c160:	200066ac 	.word	0x200066ac
 800c164:	200066b4 	.word	0x200066b4
 800c168:	200066b0 	.word	0x200066b0
 800c16c:	200066b8 	.word	0x200066b8

0800c170 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c170:	b480      	push	{r7}
 800c172:	b085      	sub	sp, #20
 800c174:	af00      	add	r7, sp, #0
 800c176:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c178:	4b28      	ldr	r3, [pc, #160]	; (800c21c <prvInsertBlockIntoFreeList+0xac>)
 800c17a:	60fb      	str	r3, [r7, #12]
 800c17c:	e002      	b.n	800c184 <prvInsertBlockIntoFreeList+0x14>
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	60fb      	str	r3, [r7, #12]
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	687a      	ldr	r2, [r7, #4]
 800c18a:	429a      	cmp	r2, r3
 800c18c:	d8f7      	bhi.n	800c17e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	685b      	ldr	r3, [r3, #4]
 800c196:	68ba      	ldr	r2, [r7, #8]
 800c198:	4413      	add	r3, r2
 800c19a:	687a      	ldr	r2, [r7, #4]
 800c19c:	429a      	cmp	r2, r3
 800c19e:	d108      	bne.n	800c1b2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	685a      	ldr	r2, [r3, #4]
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	685b      	ldr	r3, [r3, #4]
 800c1a8:	441a      	add	r2, r3
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	685b      	ldr	r3, [r3, #4]
 800c1ba:	68ba      	ldr	r2, [r7, #8]
 800c1bc:	441a      	add	r2, r3
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	429a      	cmp	r2, r3
 800c1c4:	d118      	bne.n	800c1f8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	681a      	ldr	r2, [r3, #0]
 800c1ca:	4b15      	ldr	r3, [pc, #84]	; (800c220 <prvInsertBlockIntoFreeList+0xb0>)
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	429a      	cmp	r2, r3
 800c1d0:	d00d      	beq.n	800c1ee <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	685a      	ldr	r2, [r3, #4]
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	685b      	ldr	r3, [r3, #4]
 800c1dc:	441a      	add	r2, r3
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	681a      	ldr	r2, [r3, #0]
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	601a      	str	r2, [r3, #0]
 800c1ec:	e008      	b.n	800c200 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c1ee:	4b0c      	ldr	r3, [pc, #48]	; (800c220 <prvInsertBlockIntoFreeList+0xb0>)
 800c1f0:	681a      	ldr	r2, [r3, #0]
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	601a      	str	r2, [r3, #0]
 800c1f6:	e003      	b.n	800c200 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	681a      	ldr	r2, [r3, #0]
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c200:	68fa      	ldr	r2, [r7, #12]
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	429a      	cmp	r2, r3
 800c206:	d002      	beq.n	800c20e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	687a      	ldr	r2, [r7, #4]
 800c20c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c20e:	bf00      	nop
 800c210:	3714      	adds	r7, #20
 800c212:	46bd      	mov	sp, r7
 800c214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c218:	4770      	bx	lr
 800c21a:	bf00      	nop
 800c21c:	200066a4 	.word	0x200066a4
 800c220:	200066ac 	.word	0x200066ac

0800c224 <FINGER_USART_IrqHandler>:
char FINGER_DMA_RX_Buffer[FINGER_DMA_RX_BUFFER_SIZE];
char FINGER_UART_RX_Buffer[FINGER_UART_RX_BUFFER_SIZE];
size_t finger_write, finger_len, finger_tocopy;
uint8_t *finger_ptr;

void FINGER_USART_IrqHandler(UART_HandleTypeDef *huart, DMA_HandleTypeDef *hdma) {
 800c224:	b580      	push	{r7, lr}
 800c226:	b084      	sub	sp, #16
 800c228:	af00      	add	r7, sp, #0
 800c22a:	6078      	str	r0, [r7, #4]
 800c22c:	6039      	str	r1, [r7, #0]
	if (huart->Instance->SR & UART_FLAG_IDLE) /* if Idle flag is set */
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	f003 0310 	and.w	r3, r3, #16
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d016      	beq.n	800c26a <FINGER_USART_IrqHandler+0x46>
	{
		__HAL_UART_CLEAR_IDLEFLAG(huart); /* Clear idle flag */
 800c23c:	2300      	movs	r3, #0
 800c23e:	60fb      	str	r3, [r7, #12]
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	60fb      	str	r3, [r7, #12]
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	685b      	ldr	r3, [r3, #4]
 800c24e:	60fb      	str	r3, [r7, #12]
 800c250:	68fb      	ldr	r3, [r7, #12]
		__HAL_DMA_DISABLE(hdma); /* Disabling DMA will force transfer complete interrupt if enabled */
 800c252:	683b      	ldr	r3, [r7, #0]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	681a      	ldr	r2, [r3, #0]
 800c258:	683b      	ldr	r3, [r7, #0]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	f022 0201 	bic.w	r2, r2, #1
 800c260:	601a      	str	r2, [r3, #0]
		FINGER_DMA_IrqHandler(hdma, huart);
 800c262:	6879      	ldr	r1, [r7, #4]
 800c264:	6838      	ldr	r0, [r7, #0]
 800c266:	f000 f805 	bl	800c274 <FINGER_DMA_IrqHandler>
	}
}
 800c26a:	bf00      	nop
 800c26c:	3710      	adds	r7, #16
 800c26e:	46bd      	mov	sp, r7
 800c270:	bd80      	pop	{r7, pc}
	...

0800c274 <FINGER_DMA_IrqHandler>:

void FINGER_DMA_IrqHandler(DMA_HandleTypeDef *hdma, UART_HandleTypeDef *huart) {
 800c274:	b580      	push	{r7, lr}
 800c276:	b082      	sub	sp, #8
 800c278:	af00      	add	r7, sp, #0
 800c27a:	6078      	str	r0, [r7, #4]
 800c27c:	6039      	str	r1, [r7, #0]
	if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET) // if the source is TC
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	f003 0310 	and.w	r3, r3, #16
 800c288:	2b00      	cmp	r3, #0
 800c28a:	f000 8211 	beq.w	800c6b0 <FINGER_DMA_IrqHandler+0x43c>
			{
		/* Clear the transfer complete flag */
		__HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	461a      	mov	r2, r3
 800c294:	4b99      	ldr	r3, [pc, #612]	; (800c4fc <FINGER_DMA_IrqHandler+0x288>)
 800c296:	429a      	cmp	r2, r3
 800c298:	d960      	bls.n	800c35c <FINGER_DMA_IrqHandler+0xe8>
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	4a98      	ldr	r2, [pc, #608]	; (800c500 <FINGER_DMA_IrqHandler+0x28c>)
 800c2a0:	4293      	cmp	r3, r2
 800c2a2:	d057      	beq.n	800c354 <FINGER_DMA_IrqHandler+0xe0>
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	4a96      	ldr	r2, [pc, #600]	; (800c504 <FINGER_DMA_IrqHandler+0x290>)
 800c2aa:	4293      	cmp	r3, r2
 800c2ac:	d050      	beq.n	800c350 <FINGER_DMA_IrqHandler+0xdc>
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	4a95      	ldr	r2, [pc, #596]	; (800c508 <FINGER_DMA_IrqHandler+0x294>)
 800c2b4:	4293      	cmp	r3, r2
 800c2b6:	d049      	beq.n	800c34c <FINGER_DMA_IrqHandler+0xd8>
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	4a93      	ldr	r2, [pc, #588]	; (800c50c <FINGER_DMA_IrqHandler+0x298>)
 800c2be:	4293      	cmp	r3, r2
 800c2c0:	d042      	beq.n	800c348 <FINGER_DMA_IrqHandler+0xd4>
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	4a92      	ldr	r2, [pc, #584]	; (800c510 <FINGER_DMA_IrqHandler+0x29c>)
 800c2c8:	4293      	cmp	r3, r2
 800c2ca:	d03a      	beq.n	800c342 <FINGER_DMA_IrqHandler+0xce>
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	4a90      	ldr	r2, [pc, #576]	; (800c514 <FINGER_DMA_IrqHandler+0x2a0>)
 800c2d2:	4293      	cmp	r3, r2
 800c2d4:	d032      	beq.n	800c33c <FINGER_DMA_IrqHandler+0xc8>
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	4a8f      	ldr	r2, [pc, #572]	; (800c518 <FINGER_DMA_IrqHandler+0x2a4>)
 800c2dc:	4293      	cmp	r3, r2
 800c2de:	d02a      	beq.n	800c336 <FINGER_DMA_IrqHandler+0xc2>
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	4a8d      	ldr	r2, [pc, #564]	; (800c51c <FINGER_DMA_IrqHandler+0x2a8>)
 800c2e6:	4293      	cmp	r3, r2
 800c2e8:	d022      	beq.n	800c330 <FINGER_DMA_IrqHandler+0xbc>
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	4a8c      	ldr	r2, [pc, #560]	; (800c520 <FINGER_DMA_IrqHandler+0x2ac>)
 800c2f0:	4293      	cmp	r3, r2
 800c2f2:	d01a      	beq.n	800c32a <FINGER_DMA_IrqHandler+0xb6>
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	4a8a      	ldr	r2, [pc, #552]	; (800c524 <FINGER_DMA_IrqHandler+0x2b0>)
 800c2fa:	4293      	cmp	r3, r2
 800c2fc:	d012      	beq.n	800c324 <FINGER_DMA_IrqHandler+0xb0>
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	4a89      	ldr	r2, [pc, #548]	; (800c528 <FINGER_DMA_IrqHandler+0x2b4>)
 800c304:	4293      	cmp	r3, r2
 800c306:	d00a      	beq.n	800c31e <FINGER_DMA_IrqHandler+0xaa>
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	4a87      	ldr	r2, [pc, #540]	; (800c52c <FINGER_DMA_IrqHandler+0x2b8>)
 800c30e:	4293      	cmp	r3, r2
 800c310:	d102      	bne.n	800c318 <FINGER_DMA_IrqHandler+0xa4>
 800c312:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800c316:	e01e      	b.n	800c356 <FINGER_DMA_IrqHandler+0xe2>
 800c318:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c31c:	e01b      	b.n	800c356 <FINGER_DMA_IrqHandler+0xe2>
 800c31e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800c322:	e018      	b.n	800c356 <FINGER_DMA_IrqHandler+0xe2>
 800c324:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800c328:	e015      	b.n	800c356 <FINGER_DMA_IrqHandler+0xe2>
 800c32a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800c32e:	e012      	b.n	800c356 <FINGER_DMA_IrqHandler+0xe2>
 800c330:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c334:	e00f      	b.n	800c356 <FINGER_DMA_IrqHandler+0xe2>
 800c336:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c33a:	e00c      	b.n	800c356 <FINGER_DMA_IrqHandler+0xe2>
 800c33c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c340:	e009      	b.n	800c356 <FINGER_DMA_IrqHandler+0xe2>
 800c342:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c346:	e006      	b.n	800c356 <FINGER_DMA_IrqHandler+0xe2>
 800c348:	2320      	movs	r3, #32
 800c34a:	e004      	b.n	800c356 <FINGER_DMA_IrqHandler+0xe2>
 800c34c:	2320      	movs	r3, #32
 800c34e:	e002      	b.n	800c356 <FINGER_DMA_IrqHandler+0xe2>
 800c350:	2320      	movs	r3, #32
 800c352:	e000      	b.n	800c356 <FINGER_DMA_IrqHandler+0xe2>
 800c354:	2320      	movs	r3, #32
 800c356:	4a76      	ldr	r2, [pc, #472]	; (800c530 <FINGER_DMA_IrqHandler+0x2bc>)
 800c358:	60d3      	str	r3, [r2, #12]
 800c35a:	e151      	b.n	800c600 <FINGER_DMA_IrqHandler+0x38c>
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	461a      	mov	r2, r3
 800c362:	4b74      	ldr	r3, [pc, #464]	; (800c534 <FINGER_DMA_IrqHandler+0x2c0>)
 800c364:	429a      	cmp	r2, r3
 800c366:	d960      	bls.n	800c42a <FINGER_DMA_IrqHandler+0x1b6>
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	4a64      	ldr	r2, [pc, #400]	; (800c500 <FINGER_DMA_IrqHandler+0x28c>)
 800c36e:	4293      	cmp	r3, r2
 800c370:	d057      	beq.n	800c422 <FINGER_DMA_IrqHandler+0x1ae>
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	4a63      	ldr	r2, [pc, #396]	; (800c504 <FINGER_DMA_IrqHandler+0x290>)
 800c378:	4293      	cmp	r3, r2
 800c37a:	d050      	beq.n	800c41e <FINGER_DMA_IrqHandler+0x1aa>
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	4a61      	ldr	r2, [pc, #388]	; (800c508 <FINGER_DMA_IrqHandler+0x294>)
 800c382:	4293      	cmp	r3, r2
 800c384:	d049      	beq.n	800c41a <FINGER_DMA_IrqHandler+0x1a6>
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	4a60      	ldr	r2, [pc, #384]	; (800c50c <FINGER_DMA_IrqHandler+0x298>)
 800c38c:	4293      	cmp	r3, r2
 800c38e:	d042      	beq.n	800c416 <FINGER_DMA_IrqHandler+0x1a2>
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	4a5e      	ldr	r2, [pc, #376]	; (800c510 <FINGER_DMA_IrqHandler+0x29c>)
 800c396:	4293      	cmp	r3, r2
 800c398:	d03a      	beq.n	800c410 <FINGER_DMA_IrqHandler+0x19c>
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	4a5d      	ldr	r2, [pc, #372]	; (800c514 <FINGER_DMA_IrqHandler+0x2a0>)
 800c3a0:	4293      	cmp	r3, r2
 800c3a2:	d032      	beq.n	800c40a <FINGER_DMA_IrqHandler+0x196>
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	4a5b      	ldr	r2, [pc, #364]	; (800c518 <FINGER_DMA_IrqHandler+0x2a4>)
 800c3aa:	4293      	cmp	r3, r2
 800c3ac:	d02a      	beq.n	800c404 <FINGER_DMA_IrqHandler+0x190>
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	4a5a      	ldr	r2, [pc, #360]	; (800c51c <FINGER_DMA_IrqHandler+0x2a8>)
 800c3b4:	4293      	cmp	r3, r2
 800c3b6:	d022      	beq.n	800c3fe <FINGER_DMA_IrqHandler+0x18a>
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	4a58      	ldr	r2, [pc, #352]	; (800c520 <FINGER_DMA_IrqHandler+0x2ac>)
 800c3be:	4293      	cmp	r3, r2
 800c3c0:	d01a      	beq.n	800c3f8 <FINGER_DMA_IrqHandler+0x184>
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	4a57      	ldr	r2, [pc, #348]	; (800c524 <FINGER_DMA_IrqHandler+0x2b0>)
 800c3c8:	4293      	cmp	r3, r2
 800c3ca:	d012      	beq.n	800c3f2 <FINGER_DMA_IrqHandler+0x17e>
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	4a55      	ldr	r2, [pc, #340]	; (800c528 <FINGER_DMA_IrqHandler+0x2b4>)
 800c3d2:	4293      	cmp	r3, r2
 800c3d4:	d00a      	beq.n	800c3ec <FINGER_DMA_IrqHandler+0x178>
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	4a54      	ldr	r2, [pc, #336]	; (800c52c <FINGER_DMA_IrqHandler+0x2b8>)
 800c3dc:	4293      	cmp	r3, r2
 800c3de:	d102      	bne.n	800c3e6 <FINGER_DMA_IrqHandler+0x172>
 800c3e0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800c3e4:	e01e      	b.n	800c424 <FINGER_DMA_IrqHandler+0x1b0>
 800c3e6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c3ea:	e01b      	b.n	800c424 <FINGER_DMA_IrqHandler+0x1b0>
 800c3ec:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800c3f0:	e018      	b.n	800c424 <FINGER_DMA_IrqHandler+0x1b0>
 800c3f2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800c3f6:	e015      	b.n	800c424 <FINGER_DMA_IrqHandler+0x1b0>
 800c3f8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800c3fc:	e012      	b.n	800c424 <FINGER_DMA_IrqHandler+0x1b0>
 800c3fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c402:	e00f      	b.n	800c424 <FINGER_DMA_IrqHandler+0x1b0>
 800c404:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c408:	e00c      	b.n	800c424 <FINGER_DMA_IrqHandler+0x1b0>
 800c40a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c40e:	e009      	b.n	800c424 <FINGER_DMA_IrqHandler+0x1b0>
 800c410:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c414:	e006      	b.n	800c424 <FINGER_DMA_IrqHandler+0x1b0>
 800c416:	2320      	movs	r3, #32
 800c418:	e004      	b.n	800c424 <FINGER_DMA_IrqHandler+0x1b0>
 800c41a:	2320      	movs	r3, #32
 800c41c:	e002      	b.n	800c424 <FINGER_DMA_IrqHandler+0x1b0>
 800c41e:	2320      	movs	r3, #32
 800c420:	e000      	b.n	800c424 <FINGER_DMA_IrqHandler+0x1b0>
 800c422:	2320      	movs	r3, #32
 800c424:	4a42      	ldr	r2, [pc, #264]	; (800c530 <FINGER_DMA_IrqHandler+0x2bc>)
 800c426:	6093      	str	r3, [r2, #8]
 800c428:	e0ea      	b.n	800c600 <FINGER_DMA_IrqHandler+0x38c>
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	461a      	mov	r2, r3
 800c430:	4b41      	ldr	r3, [pc, #260]	; (800c538 <FINGER_DMA_IrqHandler+0x2c4>)
 800c432:	429a      	cmp	r2, r3
 800c434:	f240 8084 	bls.w	800c540 <FINGER_DMA_IrqHandler+0x2cc>
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	4a30      	ldr	r2, [pc, #192]	; (800c500 <FINGER_DMA_IrqHandler+0x28c>)
 800c43e:	4293      	cmp	r3, r2
 800c440:	d057      	beq.n	800c4f2 <FINGER_DMA_IrqHandler+0x27e>
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	4a2f      	ldr	r2, [pc, #188]	; (800c504 <FINGER_DMA_IrqHandler+0x290>)
 800c448:	4293      	cmp	r3, r2
 800c44a:	d050      	beq.n	800c4ee <FINGER_DMA_IrqHandler+0x27a>
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	4a2d      	ldr	r2, [pc, #180]	; (800c508 <FINGER_DMA_IrqHandler+0x294>)
 800c452:	4293      	cmp	r3, r2
 800c454:	d049      	beq.n	800c4ea <FINGER_DMA_IrqHandler+0x276>
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	4a2c      	ldr	r2, [pc, #176]	; (800c50c <FINGER_DMA_IrqHandler+0x298>)
 800c45c:	4293      	cmp	r3, r2
 800c45e:	d042      	beq.n	800c4e6 <FINGER_DMA_IrqHandler+0x272>
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	4a2a      	ldr	r2, [pc, #168]	; (800c510 <FINGER_DMA_IrqHandler+0x29c>)
 800c466:	4293      	cmp	r3, r2
 800c468:	d03a      	beq.n	800c4e0 <FINGER_DMA_IrqHandler+0x26c>
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	4a29      	ldr	r2, [pc, #164]	; (800c514 <FINGER_DMA_IrqHandler+0x2a0>)
 800c470:	4293      	cmp	r3, r2
 800c472:	d032      	beq.n	800c4da <FINGER_DMA_IrqHandler+0x266>
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	4a27      	ldr	r2, [pc, #156]	; (800c518 <FINGER_DMA_IrqHandler+0x2a4>)
 800c47a:	4293      	cmp	r3, r2
 800c47c:	d02a      	beq.n	800c4d4 <FINGER_DMA_IrqHandler+0x260>
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	4a26      	ldr	r2, [pc, #152]	; (800c51c <FINGER_DMA_IrqHandler+0x2a8>)
 800c484:	4293      	cmp	r3, r2
 800c486:	d022      	beq.n	800c4ce <FINGER_DMA_IrqHandler+0x25a>
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	4a24      	ldr	r2, [pc, #144]	; (800c520 <FINGER_DMA_IrqHandler+0x2ac>)
 800c48e:	4293      	cmp	r3, r2
 800c490:	d01a      	beq.n	800c4c8 <FINGER_DMA_IrqHandler+0x254>
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	4a23      	ldr	r2, [pc, #140]	; (800c524 <FINGER_DMA_IrqHandler+0x2b0>)
 800c498:	4293      	cmp	r3, r2
 800c49a:	d012      	beq.n	800c4c2 <FINGER_DMA_IrqHandler+0x24e>
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	4a21      	ldr	r2, [pc, #132]	; (800c528 <FINGER_DMA_IrqHandler+0x2b4>)
 800c4a2:	4293      	cmp	r3, r2
 800c4a4:	d00a      	beq.n	800c4bc <FINGER_DMA_IrqHandler+0x248>
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	4a20      	ldr	r2, [pc, #128]	; (800c52c <FINGER_DMA_IrqHandler+0x2b8>)
 800c4ac:	4293      	cmp	r3, r2
 800c4ae:	d102      	bne.n	800c4b6 <FINGER_DMA_IrqHandler+0x242>
 800c4b0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800c4b4:	e01e      	b.n	800c4f4 <FINGER_DMA_IrqHandler+0x280>
 800c4b6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c4ba:	e01b      	b.n	800c4f4 <FINGER_DMA_IrqHandler+0x280>
 800c4bc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800c4c0:	e018      	b.n	800c4f4 <FINGER_DMA_IrqHandler+0x280>
 800c4c2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800c4c6:	e015      	b.n	800c4f4 <FINGER_DMA_IrqHandler+0x280>
 800c4c8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800c4cc:	e012      	b.n	800c4f4 <FINGER_DMA_IrqHandler+0x280>
 800c4ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c4d2:	e00f      	b.n	800c4f4 <FINGER_DMA_IrqHandler+0x280>
 800c4d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c4d8:	e00c      	b.n	800c4f4 <FINGER_DMA_IrqHandler+0x280>
 800c4da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c4de:	e009      	b.n	800c4f4 <FINGER_DMA_IrqHandler+0x280>
 800c4e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c4e4:	e006      	b.n	800c4f4 <FINGER_DMA_IrqHandler+0x280>
 800c4e6:	2320      	movs	r3, #32
 800c4e8:	e004      	b.n	800c4f4 <FINGER_DMA_IrqHandler+0x280>
 800c4ea:	2320      	movs	r3, #32
 800c4ec:	e002      	b.n	800c4f4 <FINGER_DMA_IrqHandler+0x280>
 800c4ee:	2320      	movs	r3, #32
 800c4f0:	e000      	b.n	800c4f4 <FINGER_DMA_IrqHandler+0x280>
 800c4f2:	2320      	movs	r3, #32
 800c4f4:	4a11      	ldr	r2, [pc, #68]	; (800c53c <FINGER_DMA_IrqHandler+0x2c8>)
 800c4f6:	60d3      	str	r3, [r2, #12]
 800c4f8:	e082      	b.n	800c600 <FINGER_DMA_IrqHandler+0x38c>
 800c4fa:	bf00      	nop
 800c4fc:	40026458 	.word	0x40026458
 800c500:	40026010 	.word	0x40026010
 800c504:	40026410 	.word	0x40026410
 800c508:	40026070 	.word	0x40026070
 800c50c:	40026470 	.word	0x40026470
 800c510:	40026028 	.word	0x40026028
 800c514:	40026428 	.word	0x40026428
 800c518:	40026088 	.word	0x40026088
 800c51c:	40026488 	.word	0x40026488
 800c520:	40026040 	.word	0x40026040
 800c524:	40026440 	.word	0x40026440
 800c528:	400260a0 	.word	0x400260a0
 800c52c:	400264a0 	.word	0x400264a0
 800c530:	40026400 	.word	0x40026400
 800c534:	400260b8 	.word	0x400260b8
 800c538:	40026058 	.word	0x40026058
 800c53c:	40026000 	.word	0x40026000
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	4a5c      	ldr	r2, [pc, #368]	; (800c6b8 <FINGER_DMA_IrqHandler+0x444>)
 800c546:	4293      	cmp	r3, r2
 800c548:	d057      	beq.n	800c5fa <FINGER_DMA_IrqHandler+0x386>
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	4a5b      	ldr	r2, [pc, #364]	; (800c6bc <FINGER_DMA_IrqHandler+0x448>)
 800c550:	4293      	cmp	r3, r2
 800c552:	d050      	beq.n	800c5f6 <FINGER_DMA_IrqHandler+0x382>
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	4a59      	ldr	r2, [pc, #356]	; (800c6c0 <FINGER_DMA_IrqHandler+0x44c>)
 800c55a:	4293      	cmp	r3, r2
 800c55c:	d049      	beq.n	800c5f2 <FINGER_DMA_IrqHandler+0x37e>
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	4a58      	ldr	r2, [pc, #352]	; (800c6c4 <FINGER_DMA_IrqHandler+0x450>)
 800c564:	4293      	cmp	r3, r2
 800c566:	d042      	beq.n	800c5ee <FINGER_DMA_IrqHandler+0x37a>
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	4a56      	ldr	r2, [pc, #344]	; (800c6c8 <FINGER_DMA_IrqHandler+0x454>)
 800c56e:	4293      	cmp	r3, r2
 800c570:	d03a      	beq.n	800c5e8 <FINGER_DMA_IrqHandler+0x374>
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	4a55      	ldr	r2, [pc, #340]	; (800c6cc <FINGER_DMA_IrqHandler+0x458>)
 800c578:	4293      	cmp	r3, r2
 800c57a:	d032      	beq.n	800c5e2 <FINGER_DMA_IrqHandler+0x36e>
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	4a53      	ldr	r2, [pc, #332]	; (800c6d0 <FINGER_DMA_IrqHandler+0x45c>)
 800c582:	4293      	cmp	r3, r2
 800c584:	d02a      	beq.n	800c5dc <FINGER_DMA_IrqHandler+0x368>
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	4a52      	ldr	r2, [pc, #328]	; (800c6d4 <FINGER_DMA_IrqHandler+0x460>)
 800c58c:	4293      	cmp	r3, r2
 800c58e:	d022      	beq.n	800c5d6 <FINGER_DMA_IrqHandler+0x362>
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	4a50      	ldr	r2, [pc, #320]	; (800c6d8 <FINGER_DMA_IrqHandler+0x464>)
 800c596:	4293      	cmp	r3, r2
 800c598:	d01a      	beq.n	800c5d0 <FINGER_DMA_IrqHandler+0x35c>
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	4a4f      	ldr	r2, [pc, #316]	; (800c6dc <FINGER_DMA_IrqHandler+0x468>)
 800c5a0:	4293      	cmp	r3, r2
 800c5a2:	d012      	beq.n	800c5ca <FINGER_DMA_IrqHandler+0x356>
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	4a4d      	ldr	r2, [pc, #308]	; (800c6e0 <FINGER_DMA_IrqHandler+0x46c>)
 800c5aa:	4293      	cmp	r3, r2
 800c5ac:	d00a      	beq.n	800c5c4 <FINGER_DMA_IrqHandler+0x350>
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	4a4c      	ldr	r2, [pc, #304]	; (800c6e4 <FINGER_DMA_IrqHandler+0x470>)
 800c5b4:	4293      	cmp	r3, r2
 800c5b6:	d102      	bne.n	800c5be <FINGER_DMA_IrqHandler+0x34a>
 800c5b8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800c5bc:	e01e      	b.n	800c5fc <FINGER_DMA_IrqHandler+0x388>
 800c5be:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c5c2:	e01b      	b.n	800c5fc <FINGER_DMA_IrqHandler+0x388>
 800c5c4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800c5c8:	e018      	b.n	800c5fc <FINGER_DMA_IrqHandler+0x388>
 800c5ca:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800c5ce:	e015      	b.n	800c5fc <FINGER_DMA_IrqHandler+0x388>
 800c5d0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800c5d4:	e012      	b.n	800c5fc <FINGER_DMA_IrqHandler+0x388>
 800c5d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c5da:	e00f      	b.n	800c5fc <FINGER_DMA_IrqHandler+0x388>
 800c5dc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c5e0:	e00c      	b.n	800c5fc <FINGER_DMA_IrqHandler+0x388>
 800c5e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c5e6:	e009      	b.n	800c5fc <FINGER_DMA_IrqHandler+0x388>
 800c5e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c5ec:	e006      	b.n	800c5fc <FINGER_DMA_IrqHandler+0x388>
 800c5ee:	2320      	movs	r3, #32
 800c5f0:	e004      	b.n	800c5fc <FINGER_DMA_IrqHandler+0x388>
 800c5f2:	2320      	movs	r3, #32
 800c5f4:	e002      	b.n	800c5fc <FINGER_DMA_IrqHandler+0x388>
 800c5f6:	2320      	movs	r3, #32
 800c5f8:	e000      	b.n	800c5fc <FINGER_DMA_IrqHandler+0x388>
 800c5fa:	2320      	movs	r3, #32
 800c5fc:	4a3a      	ldr	r2, [pc, #232]	; (800c6e8 <FINGER_DMA_IrqHandler+0x474>)
 800c5fe:	6093      	str	r3, [r2, #8]

		/* Get the finger_length of the data */
		finger_len = FINGER_DMA_RX_BUFFER_SIZE - hdma->Instance->NDTR;
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	685b      	ldr	r3, [r3, #4]
 800c606:	f1c3 0332 	rsb	r3, r3, #50	; 0x32
 800c60a:	4a38      	ldr	r2, [pc, #224]	; (800c6ec <FINGER_DMA_IrqHandler+0x478>)
 800c60c:	6013      	str	r3, [r2, #0]
		/* Only process if DMA is not empty */
		if (finger_len > 0) {
 800c60e:	4b37      	ldr	r3, [pc, #220]	; (800c6ec <FINGER_DMA_IrqHandler+0x478>)
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	2b00      	cmp	r3, #0
 800c614:	d044      	beq.n	800c6a0 <FINGER_DMA_IrqHandler+0x42c>
			/* Reset the buffer */
			FINGER_Reset_Buffer();
 800c616:	f000 f89d 	bl	800c754 <FINGER_Reset_Buffer>
			/* Get number of bytes we can copy to the end of buffer */
			finger_tocopy = FINGER_UART_RX_BUFFER_SIZE - finger_write;
 800c61a:	4b35      	ldr	r3, [pc, #212]	; (800c6f0 <FINGER_DMA_IrqHandler+0x47c>)
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	f1c3 0332 	rsb	r3, r3, #50	; 0x32
 800c622:	4a34      	ldr	r2, [pc, #208]	; (800c6f4 <FINGER_DMA_IrqHandler+0x480>)
 800c624:	6013      	str	r3, [r2, #0]
			/* finger_write received data for UART main buffer for manipulation later */
			finger_ptr = (uint8_t *) FINGER_DMA_RX_Buffer;
 800c626:	4b34      	ldr	r3, [pc, #208]	; (800c6f8 <FINGER_DMA_IrqHandler+0x484>)
 800c628:	4a34      	ldr	r2, [pc, #208]	; (800c6fc <FINGER_DMA_IrqHandler+0x488>)
 800c62a:	601a      	str	r2, [r3, #0]
			/* Check how many bytes to copy */
			if (finger_tocopy > finger_len) {
 800c62c:	4b31      	ldr	r3, [pc, #196]	; (800c6f4 <FINGER_DMA_IrqHandler+0x480>)
 800c62e:	681a      	ldr	r2, [r3, #0]
 800c630:	4b2e      	ldr	r3, [pc, #184]	; (800c6ec <FINGER_DMA_IrqHandler+0x478>)
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	429a      	cmp	r2, r3
 800c636:	d903      	bls.n	800c640 <FINGER_DMA_IrqHandler+0x3cc>
				finger_tocopy = finger_len;
 800c638:	4b2c      	ldr	r3, [pc, #176]	; (800c6ec <FINGER_DMA_IrqHandler+0x478>)
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	4a2d      	ldr	r2, [pc, #180]	; (800c6f4 <FINGER_DMA_IrqHandler+0x480>)
 800c63e:	6013      	str	r3, [r2, #0]
			}
			/* Copy first part */
			memcpy(&FINGER_UART_RX_Buffer[finger_write], finger_ptr, finger_tocopy);
 800c640:	4b2b      	ldr	r3, [pc, #172]	; (800c6f0 <FINGER_DMA_IrqHandler+0x47c>)
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	4a2e      	ldr	r2, [pc, #184]	; (800c700 <FINGER_DMA_IrqHandler+0x48c>)
 800c646:	1898      	adds	r0, r3, r2
 800c648:	4b2b      	ldr	r3, [pc, #172]	; (800c6f8 <FINGER_DMA_IrqHandler+0x484>)
 800c64a:	6819      	ldr	r1, [r3, #0]
 800c64c:	4b29      	ldr	r3, [pc, #164]	; (800c6f4 <FINGER_DMA_IrqHandler+0x480>)
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	461a      	mov	r2, r3
 800c652:	f008 fd89 	bl	8015168 <memcpy>
			/* Correct values for remaining data */
			finger_write += finger_tocopy;
 800c656:	4b26      	ldr	r3, [pc, #152]	; (800c6f0 <FINGER_DMA_IrqHandler+0x47c>)
 800c658:	681a      	ldr	r2, [r3, #0]
 800c65a:	4b26      	ldr	r3, [pc, #152]	; (800c6f4 <FINGER_DMA_IrqHandler+0x480>)
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	4413      	add	r3, r2
 800c660:	4a23      	ldr	r2, [pc, #140]	; (800c6f0 <FINGER_DMA_IrqHandler+0x47c>)
 800c662:	6013      	str	r3, [r2, #0]
			finger_len -= finger_tocopy;
 800c664:	4b21      	ldr	r3, [pc, #132]	; (800c6ec <FINGER_DMA_IrqHandler+0x478>)
 800c666:	681a      	ldr	r2, [r3, #0]
 800c668:	4b22      	ldr	r3, [pc, #136]	; (800c6f4 <FINGER_DMA_IrqHandler+0x480>)
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	1ad3      	subs	r3, r2, r3
 800c66e:	4a1f      	ldr	r2, [pc, #124]	; (800c6ec <FINGER_DMA_IrqHandler+0x478>)
 800c670:	6013      	str	r3, [r2, #0]
			finger_ptr += finger_tocopy;
 800c672:	4b21      	ldr	r3, [pc, #132]	; (800c6f8 <FINGER_DMA_IrqHandler+0x484>)
 800c674:	681a      	ldr	r2, [r3, #0]
 800c676:	4b1f      	ldr	r3, [pc, #124]	; (800c6f4 <FINGER_DMA_IrqHandler+0x480>)
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	4413      	add	r3, r2
 800c67c:	4a1e      	ldr	r2, [pc, #120]	; (800c6f8 <FINGER_DMA_IrqHandler+0x484>)
 800c67e:	6013      	str	r3, [r2, #0]

			/* If still data to finger_write for beginning of buffer */
			if (finger_len) {
 800c680:	4b1a      	ldr	r3, [pc, #104]	; (800c6ec <FINGER_DMA_IrqHandler+0x478>)
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	2b00      	cmp	r3, #0
 800c686:	d00b      	beq.n	800c6a0 <FINGER_DMA_IrqHandler+0x42c>
				/* Don't care if we override Read pointer now */
				memcpy(&FINGER_UART_RX_Buffer[0], finger_ptr, finger_len);
 800c688:	4b1b      	ldr	r3, [pc, #108]	; (800c6f8 <FINGER_DMA_IrqHandler+0x484>)
 800c68a:	6819      	ldr	r1, [r3, #0]
 800c68c:	4b17      	ldr	r3, [pc, #92]	; (800c6ec <FINGER_DMA_IrqHandler+0x478>)
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	461a      	mov	r2, r3
 800c692:	481b      	ldr	r0, [pc, #108]	; (800c700 <FINGER_DMA_IrqHandler+0x48c>)
 800c694:	f008 fd68 	bl	8015168 <memcpy>
				finger_write = finger_len;
 800c698:	4b14      	ldr	r3, [pc, #80]	; (800c6ec <FINGER_DMA_IrqHandler+0x478>)
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	4a14      	ldr	r2, [pc, #80]	; (800c6f0 <FINGER_DMA_IrqHandler+0x47c>)
 800c69e:	6013      	str	r3, [r2, #0]
			// set null at the end
			//			FINGER_UART_RX_Buffer[finger_write] = '\0';
		}

		/* Start DMA transfer again */
		hdma->Instance->CR |= DMA_SxCR_EN;
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	681a      	ldr	r2, [r3, #0]
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	f042 0201 	orr.w	r2, r2, #1
 800c6ae:	601a      	str	r2, [r3, #0]
	}
}
 800c6b0:	bf00      	nop
 800c6b2:	3708      	adds	r7, #8
 800c6b4:	46bd      	mov	sp, r7
 800c6b6:	bd80      	pop	{r7, pc}
 800c6b8:	40026010 	.word	0x40026010
 800c6bc:	40026410 	.word	0x40026410
 800c6c0:	40026070 	.word	0x40026070
 800c6c4:	40026470 	.word	0x40026470
 800c6c8:	40026028 	.word	0x40026028
 800c6cc:	40026428 	.word	0x40026428
 800c6d0:	40026088 	.word	0x40026088
 800c6d4:	40026488 	.word	0x40026488
 800c6d8:	40026040 	.word	0x40026040
 800c6dc:	40026440 	.word	0x40026440
 800c6e0:	400260a0 	.word	0x400260a0
 800c6e4:	400264a0 	.word	0x400264a0
 800c6e8:	40026000 	.word	0x40026000
 800c6ec:	20006cec 	.word	0x20006cec
 800c6f0:	20006d28 	.word	0x20006d28
 800c6f4:	20006cf0 	.word	0x20006cf0
 800c6f8:	20006cb4 	.word	0x20006cb4
 800c6fc:	20006cf4 	.word	0x20006cf4
 800c700:	20006cb8 	.word	0x20006cb8

0800c704 <FINGER_DMA_Init>:

void FINGER_DMA_Init(void) {
 800c704:	b580      	push	{r7, lr}
 800c706:	af00      	add	r7, sp, #0
	__HAL_UART_ENABLE_IT(&huart4, UART_IT_IDLE);      // enable idle line interrupt
 800c708:	4b0f      	ldr	r3, [pc, #60]	; (800c748 <FINGER_DMA_Init+0x44>)
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	68da      	ldr	r2, [r3, #12]
 800c70e:	4b0e      	ldr	r3, [pc, #56]	; (800c748 <FINGER_DMA_Init+0x44>)
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	f042 0210 	orr.w	r2, r2, #16
 800c716:	60da      	str	r2, [r3, #12]
	__HAL_DMA_ENABLE_IT(&hdma_uart4_rx, DMA_IT_TC);  // enable DMA Tx cplt interrupt
 800c718:	4b0c      	ldr	r3, [pc, #48]	; (800c74c <FINGER_DMA_Init+0x48>)
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	681a      	ldr	r2, [r3, #0]
 800c71e:	4b0b      	ldr	r3, [pc, #44]	; (800c74c <FINGER_DMA_Init+0x48>)
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	f042 0210 	orr.w	r2, r2, #16
 800c726:	601a      	str	r2, [r3, #0]
	__HAL_DMA_DISABLE_IT(&hdma_uart4_rx, DMA_IT_HT); // disable half complete interrupt
 800c728:	4b08      	ldr	r3, [pc, #32]	; (800c74c <FINGER_DMA_Init+0x48>)
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	681a      	ldr	r2, [r3, #0]
 800c72e:	4b07      	ldr	r3, [pc, #28]	; (800c74c <FINGER_DMA_Init+0x48>)
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	f022 0208 	bic.w	r2, r2, #8
 800c736:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(&huart4, (uint8_t *) FINGER_DMA_RX_Buffer, FINGER_DMA_RX_BUFFER_SIZE);
 800c738:	2232      	movs	r2, #50	; 0x32
 800c73a:	4905      	ldr	r1, [pc, #20]	; (800c750 <FINGER_DMA_Init+0x4c>)
 800c73c:	4802      	ldr	r0, [pc, #8]	; (800c748 <FINGER_DMA_Init+0x44>)
 800c73e:	f7fa ff6b 	bl	8007618 <HAL_UART_Receive_DMA>
}
 800c742:	bf00      	nop
 800c744:	bd80      	pop	{r7, pc}
 800c746:	bf00      	nop
 800c748:	20008814 	.word	0x20008814
 800c74c:	2000855c 	.word	0x2000855c
 800c750:	20006cf4 	.word	0x20006cf4

0800c754 <FINGER_Reset_Buffer>:

void FINGER_Reset_Buffer(void) {
 800c754:	b580      	push	{r7, lr}
 800c756:	af00      	add	r7, sp, #0
	// clear rx buffer
	memset(FINGER_UART_RX_Buffer, 0, sizeof(FINGER_UART_RX_Buffer));
 800c758:	2232      	movs	r2, #50	; 0x32
 800c75a:	2100      	movs	r1, #0
 800c75c:	4803      	ldr	r0, [pc, #12]	; (800c76c <FINGER_Reset_Buffer+0x18>)
 800c75e:	f008 fd0e 	bl	801517e <memset>
	// set index back to first
	finger_write = 0;
 800c762:	4b03      	ldr	r3, [pc, #12]	; (800c770 <FINGER_Reset_Buffer+0x1c>)
 800c764:	2200      	movs	r2, #0
 800c766:	601a      	str	r2, [r3, #0]
}
 800c768:	bf00      	nop
 800c76a:	bd80      	pop	{r7, pc}
 800c76c:	20006cb8 	.word	0x20006cb8
 800c770:	20006d28 	.word	0x20006d28

0800c774 <SIMCOM_USART_IrqHandler>:
char SIMCOM_DMA_RX_Buffer[SIMCOM_DMA_RX_BUFFER_SIZE];
char SIMCOM_UART_RX_Buffer[SIMCOM_UART_RX_BUFFER_SIZE];
size_t simcom_write, simcom_len, simcom_tocopy;
uint8_t *simcom_ptr;

void SIMCOM_USART_IrqHandler(UART_HandleTypeDef *huart, DMA_HandleTypeDef *hdma) {
 800c774:	b580      	push	{r7, lr}
 800c776:	b084      	sub	sp, #16
 800c778:	af00      	add	r7, sp, #0
 800c77a:	6078      	str	r0, [r7, #4]
 800c77c:	6039      	str	r1, [r7, #0]
	if (huart->Instance->SR & UART_FLAG_IDLE) /* if Idle flag is set */
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	f003 0310 	and.w	r3, r3, #16
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d016      	beq.n	800c7ba <SIMCOM_USART_IrqHandler+0x46>
	{
		__HAL_UART_CLEAR_IDLEFLAG(huart); /* Clear idle flag */
 800c78c:	2300      	movs	r3, #0
 800c78e:	60fb      	str	r3, [r7, #12]
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	60fb      	str	r3, [r7, #12]
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	685b      	ldr	r3, [r3, #4]
 800c79e:	60fb      	str	r3, [r7, #12]
 800c7a0:	68fb      	ldr	r3, [r7, #12]
		__HAL_DMA_DISABLE(hdma); /* Disabling DMA will force transfer complete interrupt if enabled */
 800c7a2:	683b      	ldr	r3, [r7, #0]
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	681a      	ldr	r2, [r3, #0]
 800c7a8:	683b      	ldr	r3, [r7, #0]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	f022 0201 	bic.w	r2, r2, #1
 800c7b0:	601a      	str	r2, [r3, #0]
		SIMCOM_DMA_IrqHandler(hdma, huart);
 800c7b2:	6879      	ldr	r1, [r7, #4]
 800c7b4:	6838      	ldr	r0, [r7, #0]
 800c7b6:	f000 f805 	bl	800c7c4 <SIMCOM_DMA_IrqHandler>
	}
}
 800c7ba:	bf00      	nop
 800c7bc:	3710      	adds	r7, #16
 800c7be:	46bd      	mov	sp, r7
 800c7c0:	bd80      	pop	{r7, pc}
	...

0800c7c4 <SIMCOM_DMA_IrqHandler>:

void SIMCOM_DMA_IrqHandler(DMA_HandleTypeDef *hdma, UART_HandleTypeDef *huart) {
 800c7c4:	b580      	push	{r7, lr}
 800c7c6:	b082      	sub	sp, #8
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	6078      	str	r0, [r7, #4]
 800c7cc:	6039      	str	r1, [r7, #0]
	if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET) { // if the source is TC
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	f003 0310 	and.w	r3, r3, #16
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	f000 8214 	beq.w	800cc06 <SIMCOM_DMA_IrqHandler+0x442>
		/* Clear the transfer complete flag */
		__HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	461a      	mov	r2, r3
 800c7e4:	4b99      	ldr	r3, [pc, #612]	; (800ca4c <SIMCOM_DMA_IrqHandler+0x288>)
 800c7e6:	429a      	cmp	r2, r3
 800c7e8:	d960      	bls.n	800c8ac <SIMCOM_DMA_IrqHandler+0xe8>
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	4a98      	ldr	r2, [pc, #608]	; (800ca50 <SIMCOM_DMA_IrqHandler+0x28c>)
 800c7f0:	4293      	cmp	r3, r2
 800c7f2:	d057      	beq.n	800c8a4 <SIMCOM_DMA_IrqHandler+0xe0>
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	4a96      	ldr	r2, [pc, #600]	; (800ca54 <SIMCOM_DMA_IrqHandler+0x290>)
 800c7fa:	4293      	cmp	r3, r2
 800c7fc:	d050      	beq.n	800c8a0 <SIMCOM_DMA_IrqHandler+0xdc>
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	4a95      	ldr	r2, [pc, #596]	; (800ca58 <SIMCOM_DMA_IrqHandler+0x294>)
 800c804:	4293      	cmp	r3, r2
 800c806:	d049      	beq.n	800c89c <SIMCOM_DMA_IrqHandler+0xd8>
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	4a93      	ldr	r2, [pc, #588]	; (800ca5c <SIMCOM_DMA_IrqHandler+0x298>)
 800c80e:	4293      	cmp	r3, r2
 800c810:	d042      	beq.n	800c898 <SIMCOM_DMA_IrqHandler+0xd4>
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	4a92      	ldr	r2, [pc, #584]	; (800ca60 <SIMCOM_DMA_IrqHandler+0x29c>)
 800c818:	4293      	cmp	r3, r2
 800c81a:	d03a      	beq.n	800c892 <SIMCOM_DMA_IrqHandler+0xce>
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	4a90      	ldr	r2, [pc, #576]	; (800ca64 <SIMCOM_DMA_IrqHandler+0x2a0>)
 800c822:	4293      	cmp	r3, r2
 800c824:	d032      	beq.n	800c88c <SIMCOM_DMA_IrqHandler+0xc8>
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	4a8f      	ldr	r2, [pc, #572]	; (800ca68 <SIMCOM_DMA_IrqHandler+0x2a4>)
 800c82c:	4293      	cmp	r3, r2
 800c82e:	d02a      	beq.n	800c886 <SIMCOM_DMA_IrqHandler+0xc2>
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	4a8d      	ldr	r2, [pc, #564]	; (800ca6c <SIMCOM_DMA_IrqHandler+0x2a8>)
 800c836:	4293      	cmp	r3, r2
 800c838:	d022      	beq.n	800c880 <SIMCOM_DMA_IrqHandler+0xbc>
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	4a8c      	ldr	r2, [pc, #560]	; (800ca70 <SIMCOM_DMA_IrqHandler+0x2ac>)
 800c840:	4293      	cmp	r3, r2
 800c842:	d01a      	beq.n	800c87a <SIMCOM_DMA_IrqHandler+0xb6>
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	4a8a      	ldr	r2, [pc, #552]	; (800ca74 <SIMCOM_DMA_IrqHandler+0x2b0>)
 800c84a:	4293      	cmp	r3, r2
 800c84c:	d012      	beq.n	800c874 <SIMCOM_DMA_IrqHandler+0xb0>
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	4a89      	ldr	r2, [pc, #548]	; (800ca78 <SIMCOM_DMA_IrqHandler+0x2b4>)
 800c854:	4293      	cmp	r3, r2
 800c856:	d00a      	beq.n	800c86e <SIMCOM_DMA_IrqHandler+0xaa>
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	4a87      	ldr	r2, [pc, #540]	; (800ca7c <SIMCOM_DMA_IrqHandler+0x2b8>)
 800c85e:	4293      	cmp	r3, r2
 800c860:	d102      	bne.n	800c868 <SIMCOM_DMA_IrqHandler+0xa4>
 800c862:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800c866:	e01e      	b.n	800c8a6 <SIMCOM_DMA_IrqHandler+0xe2>
 800c868:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c86c:	e01b      	b.n	800c8a6 <SIMCOM_DMA_IrqHandler+0xe2>
 800c86e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800c872:	e018      	b.n	800c8a6 <SIMCOM_DMA_IrqHandler+0xe2>
 800c874:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800c878:	e015      	b.n	800c8a6 <SIMCOM_DMA_IrqHandler+0xe2>
 800c87a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800c87e:	e012      	b.n	800c8a6 <SIMCOM_DMA_IrqHandler+0xe2>
 800c880:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c884:	e00f      	b.n	800c8a6 <SIMCOM_DMA_IrqHandler+0xe2>
 800c886:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c88a:	e00c      	b.n	800c8a6 <SIMCOM_DMA_IrqHandler+0xe2>
 800c88c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c890:	e009      	b.n	800c8a6 <SIMCOM_DMA_IrqHandler+0xe2>
 800c892:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c896:	e006      	b.n	800c8a6 <SIMCOM_DMA_IrqHandler+0xe2>
 800c898:	2320      	movs	r3, #32
 800c89a:	e004      	b.n	800c8a6 <SIMCOM_DMA_IrqHandler+0xe2>
 800c89c:	2320      	movs	r3, #32
 800c89e:	e002      	b.n	800c8a6 <SIMCOM_DMA_IrqHandler+0xe2>
 800c8a0:	2320      	movs	r3, #32
 800c8a2:	e000      	b.n	800c8a6 <SIMCOM_DMA_IrqHandler+0xe2>
 800c8a4:	2320      	movs	r3, #32
 800c8a6:	4a76      	ldr	r2, [pc, #472]	; (800ca80 <SIMCOM_DMA_IrqHandler+0x2bc>)
 800c8a8:	60d3      	str	r3, [r2, #12]
 800c8aa:	e151      	b.n	800cb50 <SIMCOM_DMA_IrqHandler+0x38c>
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	461a      	mov	r2, r3
 800c8b2:	4b74      	ldr	r3, [pc, #464]	; (800ca84 <SIMCOM_DMA_IrqHandler+0x2c0>)
 800c8b4:	429a      	cmp	r2, r3
 800c8b6:	d960      	bls.n	800c97a <SIMCOM_DMA_IrqHandler+0x1b6>
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	4a64      	ldr	r2, [pc, #400]	; (800ca50 <SIMCOM_DMA_IrqHandler+0x28c>)
 800c8be:	4293      	cmp	r3, r2
 800c8c0:	d057      	beq.n	800c972 <SIMCOM_DMA_IrqHandler+0x1ae>
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	4a63      	ldr	r2, [pc, #396]	; (800ca54 <SIMCOM_DMA_IrqHandler+0x290>)
 800c8c8:	4293      	cmp	r3, r2
 800c8ca:	d050      	beq.n	800c96e <SIMCOM_DMA_IrqHandler+0x1aa>
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	4a61      	ldr	r2, [pc, #388]	; (800ca58 <SIMCOM_DMA_IrqHandler+0x294>)
 800c8d2:	4293      	cmp	r3, r2
 800c8d4:	d049      	beq.n	800c96a <SIMCOM_DMA_IrqHandler+0x1a6>
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	4a60      	ldr	r2, [pc, #384]	; (800ca5c <SIMCOM_DMA_IrqHandler+0x298>)
 800c8dc:	4293      	cmp	r3, r2
 800c8de:	d042      	beq.n	800c966 <SIMCOM_DMA_IrqHandler+0x1a2>
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	4a5e      	ldr	r2, [pc, #376]	; (800ca60 <SIMCOM_DMA_IrqHandler+0x29c>)
 800c8e6:	4293      	cmp	r3, r2
 800c8e8:	d03a      	beq.n	800c960 <SIMCOM_DMA_IrqHandler+0x19c>
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	4a5d      	ldr	r2, [pc, #372]	; (800ca64 <SIMCOM_DMA_IrqHandler+0x2a0>)
 800c8f0:	4293      	cmp	r3, r2
 800c8f2:	d032      	beq.n	800c95a <SIMCOM_DMA_IrqHandler+0x196>
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	4a5b      	ldr	r2, [pc, #364]	; (800ca68 <SIMCOM_DMA_IrqHandler+0x2a4>)
 800c8fa:	4293      	cmp	r3, r2
 800c8fc:	d02a      	beq.n	800c954 <SIMCOM_DMA_IrqHandler+0x190>
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	4a5a      	ldr	r2, [pc, #360]	; (800ca6c <SIMCOM_DMA_IrqHandler+0x2a8>)
 800c904:	4293      	cmp	r3, r2
 800c906:	d022      	beq.n	800c94e <SIMCOM_DMA_IrqHandler+0x18a>
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	4a58      	ldr	r2, [pc, #352]	; (800ca70 <SIMCOM_DMA_IrqHandler+0x2ac>)
 800c90e:	4293      	cmp	r3, r2
 800c910:	d01a      	beq.n	800c948 <SIMCOM_DMA_IrqHandler+0x184>
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	4a57      	ldr	r2, [pc, #348]	; (800ca74 <SIMCOM_DMA_IrqHandler+0x2b0>)
 800c918:	4293      	cmp	r3, r2
 800c91a:	d012      	beq.n	800c942 <SIMCOM_DMA_IrqHandler+0x17e>
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	4a55      	ldr	r2, [pc, #340]	; (800ca78 <SIMCOM_DMA_IrqHandler+0x2b4>)
 800c922:	4293      	cmp	r3, r2
 800c924:	d00a      	beq.n	800c93c <SIMCOM_DMA_IrqHandler+0x178>
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	4a54      	ldr	r2, [pc, #336]	; (800ca7c <SIMCOM_DMA_IrqHandler+0x2b8>)
 800c92c:	4293      	cmp	r3, r2
 800c92e:	d102      	bne.n	800c936 <SIMCOM_DMA_IrqHandler+0x172>
 800c930:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800c934:	e01e      	b.n	800c974 <SIMCOM_DMA_IrqHandler+0x1b0>
 800c936:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c93a:	e01b      	b.n	800c974 <SIMCOM_DMA_IrqHandler+0x1b0>
 800c93c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800c940:	e018      	b.n	800c974 <SIMCOM_DMA_IrqHandler+0x1b0>
 800c942:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800c946:	e015      	b.n	800c974 <SIMCOM_DMA_IrqHandler+0x1b0>
 800c948:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800c94c:	e012      	b.n	800c974 <SIMCOM_DMA_IrqHandler+0x1b0>
 800c94e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c952:	e00f      	b.n	800c974 <SIMCOM_DMA_IrqHandler+0x1b0>
 800c954:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c958:	e00c      	b.n	800c974 <SIMCOM_DMA_IrqHandler+0x1b0>
 800c95a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c95e:	e009      	b.n	800c974 <SIMCOM_DMA_IrqHandler+0x1b0>
 800c960:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c964:	e006      	b.n	800c974 <SIMCOM_DMA_IrqHandler+0x1b0>
 800c966:	2320      	movs	r3, #32
 800c968:	e004      	b.n	800c974 <SIMCOM_DMA_IrqHandler+0x1b0>
 800c96a:	2320      	movs	r3, #32
 800c96c:	e002      	b.n	800c974 <SIMCOM_DMA_IrqHandler+0x1b0>
 800c96e:	2320      	movs	r3, #32
 800c970:	e000      	b.n	800c974 <SIMCOM_DMA_IrqHandler+0x1b0>
 800c972:	2320      	movs	r3, #32
 800c974:	4a42      	ldr	r2, [pc, #264]	; (800ca80 <SIMCOM_DMA_IrqHandler+0x2bc>)
 800c976:	6093      	str	r3, [r2, #8]
 800c978:	e0ea      	b.n	800cb50 <SIMCOM_DMA_IrqHandler+0x38c>
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	461a      	mov	r2, r3
 800c980:	4b41      	ldr	r3, [pc, #260]	; (800ca88 <SIMCOM_DMA_IrqHandler+0x2c4>)
 800c982:	429a      	cmp	r2, r3
 800c984:	f240 8084 	bls.w	800ca90 <SIMCOM_DMA_IrqHandler+0x2cc>
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	4a30      	ldr	r2, [pc, #192]	; (800ca50 <SIMCOM_DMA_IrqHandler+0x28c>)
 800c98e:	4293      	cmp	r3, r2
 800c990:	d057      	beq.n	800ca42 <SIMCOM_DMA_IrqHandler+0x27e>
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	4a2f      	ldr	r2, [pc, #188]	; (800ca54 <SIMCOM_DMA_IrqHandler+0x290>)
 800c998:	4293      	cmp	r3, r2
 800c99a:	d050      	beq.n	800ca3e <SIMCOM_DMA_IrqHandler+0x27a>
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	4a2d      	ldr	r2, [pc, #180]	; (800ca58 <SIMCOM_DMA_IrqHandler+0x294>)
 800c9a2:	4293      	cmp	r3, r2
 800c9a4:	d049      	beq.n	800ca3a <SIMCOM_DMA_IrqHandler+0x276>
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	4a2c      	ldr	r2, [pc, #176]	; (800ca5c <SIMCOM_DMA_IrqHandler+0x298>)
 800c9ac:	4293      	cmp	r3, r2
 800c9ae:	d042      	beq.n	800ca36 <SIMCOM_DMA_IrqHandler+0x272>
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	4a2a      	ldr	r2, [pc, #168]	; (800ca60 <SIMCOM_DMA_IrqHandler+0x29c>)
 800c9b6:	4293      	cmp	r3, r2
 800c9b8:	d03a      	beq.n	800ca30 <SIMCOM_DMA_IrqHandler+0x26c>
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	4a29      	ldr	r2, [pc, #164]	; (800ca64 <SIMCOM_DMA_IrqHandler+0x2a0>)
 800c9c0:	4293      	cmp	r3, r2
 800c9c2:	d032      	beq.n	800ca2a <SIMCOM_DMA_IrqHandler+0x266>
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	4a27      	ldr	r2, [pc, #156]	; (800ca68 <SIMCOM_DMA_IrqHandler+0x2a4>)
 800c9ca:	4293      	cmp	r3, r2
 800c9cc:	d02a      	beq.n	800ca24 <SIMCOM_DMA_IrqHandler+0x260>
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	4a26      	ldr	r2, [pc, #152]	; (800ca6c <SIMCOM_DMA_IrqHandler+0x2a8>)
 800c9d4:	4293      	cmp	r3, r2
 800c9d6:	d022      	beq.n	800ca1e <SIMCOM_DMA_IrqHandler+0x25a>
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	4a24      	ldr	r2, [pc, #144]	; (800ca70 <SIMCOM_DMA_IrqHandler+0x2ac>)
 800c9de:	4293      	cmp	r3, r2
 800c9e0:	d01a      	beq.n	800ca18 <SIMCOM_DMA_IrqHandler+0x254>
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	4a23      	ldr	r2, [pc, #140]	; (800ca74 <SIMCOM_DMA_IrqHandler+0x2b0>)
 800c9e8:	4293      	cmp	r3, r2
 800c9ea:	d012      	beq.n	800ca12 <SIMCOM_DMA_IrqHandler+0x24e>
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	4a21      	ldr	r2, [pc, #132]	; (800ca78 <SIMCOM_DMA_IrqHandler+0x2b4>)
 800c9f2:	4293      	cmp	r3, r2
 800c9f4:	d00a      	beq.n	800ca0c <SIMCOM_DMA_IrqHandler+0x248>
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	4a20      	ldr	r2, [pc, #128]	; (800ca7c <SIMCOM_DMA_IrqHandler+0x2b8>)
 800c9fc:	4293      	cmp	r3, r2
 800c9fe:	d102      	bne.n	800ca06 <SIMCOM_DMA_IrqHandler+0x242>
 800ca00:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800ca04:	e01e      	b.n	800ca44 <SIMCOM_DMA_IrqHandler+0x280>
 800ca06:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ca0a:	e01b      	b.n	800ca44 <SIMCOM_DMA_IrqHandler+0x280>
 800ca0c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800ca10:	e018      	b.n	800ca44 <SIMCOM_DMA_IrqHandler+0x280>
 800ca12:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800ca16:	e015      	b.n	800ca44 <SIMCOM_DMA_IrqHandler+0x280>
 800ca18:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800ca1c:	e012      	b.n	800ca44 <SIMCOM_DMA_IrqHandler+0x280>
 800ca1e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ca22:	e00f      	b.n	800ca44 <SIMCOM_DMA_IrqHandler+0x280>
 800ca24:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ca28:	e00c      	b.n	800ca44 <SIMCOM_DMA_IrqHandler+0x280>
 800ca2a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ca2e:	e009      	b.n	800ca44 <SIMCOM_DMA_IrqHandler+0x280>
 800ca30:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ca34:	e006      	b.n	800ca44 <SIMCOM_DMA_IrqHandler+0x280>
 800ca36:	2320      	movs	r3, #32
 800ca38:	e004      	b.n	800ca44 <SIMCOM_DMA_IrqHandler+0x280>
 800ca3a:	2320      	movs	r3, #32
 800ca3c:	e002      	b.n	800ca44 <SIMCOM_DMA_IrqHandler+0x280>
 800ca3e:	2320      	movs	r3, #32
 800ca40:	e000      	b.n	800ca44 <SIMCOM_DMA_IrqHandler+0x280>
 800ca42:	2320      	movs	r3, #32
 800ca44:	4a11      	ldr	r2, [pc, #68]	; (800ca8c <SIMCOM_DMA_IrqHandler+0x2c8>)
 800ca46:	60d3      	str	r3, [r2, #12]
 800ca48:	e082      	b.n	800cb50 <SIMCOM_DMA_IrqHandler+0x38c>
 800ca4a:	bf00      	nop
 800ca4c:	40026458 	.word	0x40026458
 800ca50:	40026010 	.word	0x40026010
 800ca54:	40026410 	.word	0x40026410
 800ca58:	40026070 	.word	0x40026070
 800ca5c:	40026470 	.word	0x40026470
 800ca60:	40026028 	.word	0x40026028
 800ca64:	40026428 	.word	0x40026428
 800ca68:	40026088 	.word	0x40026088
 800ca6c:	40026488 	.word	0x40026488
 800ca70:	40026040 	.word	0x40026040
 800ca74:	40026440 	.word	0x40026440
 800ca78:	400260a0 	.word	0x400260a0
 800ca7c:	400264a0 	.word	0x400264a0
 800ca80:	40026400 	.word	0x40026400
 800ca84:	400260b8 	.word	0x400260b8
 800ca88:	40026058 	.word	0x40026058
 800ca8c:	40026000 	.word	0x40026000
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	4a5e      	ldr	r2, [pc, #376]	; (800cc10 <SIMCOM_DMA_IrqHandler+0x44c>)
 800ca96:	4293      	cmp	r3, r2
 800ca98:	d057      	beq.n	800cb4a <SIMCOM_DMA_IrqHandler+0x386>
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	4a5d      	ldr	r2, [pc, #372]	; (800cc14 <SIMCOM_DMA_IrqHandler+0x450>)
 800caa0:	4293      	cmp	r3, r2
 800caa2:	d050      	beq.n	800cb46 <SIMCOM_DMA_IrqHandler+0x382>
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	4a5b      	ldr	r2, [pc, #364]	; (800cc18 <SIMCOM_DMA_IrqHandler+0x454>)
 800caaa:	4293      	cmp	r3, r2
 800caac:	d049      	beq.n	800cb42 <SIMCOM_DMA_IrqHandler+0x37e>
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	4a5a      	ldr	r2, [pc, #360]	; (800cc1c <SIMCOM_DMA_IrqHandler+0x458>)
 800cab4:	4293      	cmp	r3, r2
 800cab6:	d042      	beq.n	800cb3e <SIMCOM_DMA_IrqHandler+0x37a>
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	4a58      	ldr	r2, [pc, #352]	; (800cc20 <SIMCOM_DMA_IrqHandler+0x45c>)
 800cabe:	4293      	cmp	r3, r2
 800cac0:	d03a      	beq.n	800cb38 <SIMCOM_DMA_IrqHandler+0x374>
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	4a57      	ldr	r2, [pc, #348]	; (800cc24 <SIMCOM_DMA_IrqHandler+0x460>)
 800cac8:	4293      	cmp	r3, r2
 800caca:	d032      	beq.n	800cb32 <SIMCOM_DMA_IrqHandler+0x36e>
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	4a55      	ldr	r2, [pc, #340]	; (800cc28 <SIMCOM_DMA_IrqHandler+0x464>)
 800cad2:	4293      	cmp	r3, r2
 800cad4:	d02a      	beq.n	800cb2c <SIMCOM_DMA_IrqHandler+0x368>
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	4a54      	ldr	r2, [pc, #336]	; (800cc2c <SIMCOM_DMA_IrqHandler+0x468>)
 800cadc:	4293      	cmp	r3, r2
 800cade:	d022      	beq.n	800cb26 <SIMCOM_DMA_IrqHandler+0x362>
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	4a52      	ldr	r2, [pc, #328]	; (800cc30 <SIMCOM_DMA_IrqHandler+0x46c>)
 800cae6:	4293      	cmp	r3, r2
 800cae8:	d01a      	beq.n	800cb20 <SIMCOM_DMA_IrqHandler+0x35c>
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	4a51      	ldr	r2, [pc, #324]	; (800cc34 <SIMCOM_DMA_IrqHandler+0x470>)
 800caf0:	4293      	cmp	r3, r2
 800caf2:	d012      	beq.n	800cb1a <SIMCOM_DMA_IrqHandler+0x356>
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	4a4f      	ldr	r2, [pc, #316]	; (800cc38 <SIMCOM_DMA_IrqHandler+0x474>)
 800cafa:	4293      	cmp	r3, r2
 800cafc:	d00a      	beq.n	800cb14 <SIMCOM_DMA_IrqHandler+0x350>
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	4a4e      	ldr	r2, [pc, #312]	; (800cc3c <SIMCOM_DMA_IrqHandler+0x478>)
 800cb04:	4293      	cmp	r3, r2
 800cb06:	d102      	bne.n	800cb0e <SIMCOM_DMA_IrqHandler+0x34a>
 800cb08:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800cb0c:	e01e      	b.n	800cb4c <SIMCOM_DMA_IrqHandler+0x388>
 800cb0e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800cb12:	e01b      	b.n	800cb4c <SIMCOM_DMA_IrqHandler+0x388>
 800cb14:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800cb18:	e018      	b.n	800cb4c <SIMCOM_DMA_IrqHandler+0x388>
 800cb1a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800cb1e:	e015      	b.n	800cb4c <SIMCOM_DMA_IrqHandler+0x388>
 800cb20:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800cb24:	e012      	b.n	800cb4c <SIMCOM_DMA_IrqHandler+0x388>
 800cb26:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cb2a:	e00f      	b.n	800cb4c <SIMCOM_DMA_IrqHandler+0x388>
 800cb2c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cb30:	e00c      	b.n	800cb4c <SIMCOM_DMA_IrqHandler+0x388>
 800cb32:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cb36:	e009      	b.n	800cb4c <SIMCOM_DMA_IrqHandler+0x388>
 800cb38:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cb3c:	e006      	b.n	800cb4c <SIMCOM_DMA_IrqHandler+0x388>
 800cb3e:	2320      	movs	r3, #32
 800cb40:	e004      	b.n	800cb4c <SIMCOM_DMA_IrqHandler+0x388>
 800cb42:	2320      	movs	r3, #32
 800cb44:	e002      	b.n	800cb4c <SIMCOM_DMA_IrqHandler+0x388>
 800cb46:	2320      	movs	r3, #32
 800cb48:	e000      	b.n	800cb4c <SIMCOM_DMA_IrqHandler+0x388>
 800cb4a:	2320      	movs	r3, #32
 800cb4c:	4a3c      	ldr	r2, [pc, #240]	; (800cc40 <SIMCOM_DMA_IrqHandler+0x47c>)
 800cb4e:	6093      	str	r3, [r2, #8]
		/* Get the simcom_length of the data */
		simcom_len = SIMCOM_DMA_RX_BUFFER_SIZE - hdma->Instance->NDTR;
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	685b      	ldr	r3, [r3, #4]
 800cb56:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800cb5a:	4a3a      	ldr	r2, [pc, #232]	; (800cc44 <SIMCOM_DMA_IrqHandler+0x480>)
 800cb5c:	6013      	str	r3, [r2, #0]

		/* Only process if DMA is not empty */
		if (simcom_len > 0) {
 800cb5e:	4b39      	ldr	r3, [pc, #228]	; (800cc44 <SIMCOM_DMA_IrqHandler+0x480>)
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d047      	beq.n	800cbf6 <SIMCOM_DMA_IrqHandler+0x432>
			/* Get number of bytes we can copy to the end of buffer */
			simcom_tocopy = SIMCOM_UART_RX_BUFFER_SIZE - simcom_write;
 800cb66:	4b38      	ldr	r3, [pc, #224]	; (800cc48 <SIMCOM_DMA_IrqHandler+0x484>)
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 800cb6e:	4a37      	ldr	r2, [pc, #220]	; (800cc4c <SIMCOM_DMA_IrqHandler+0x488>)
 800cb70:	6013      	str	r3, [r2, #0]
			/* simcom_write received data for UART main buffer for manipulation later */
			simcom_ptr = (uint8_t *) SIMCOM_DMA_RX_Buffer;
 800cb72:	4b37      	ldr	r3, [pc, #220]	; (800cc50 <SIMCOM_DMA_IrqHandler+0x48c>)
 800cb74:	4a37      	ldr	r2, [pc, #220]	; (800cc54 <SIMCOM_DMA_IrqHandler+0x490>)
 800cb76:	601a      	str	r2, [r3, #0]
			/* Check how many bytes to copy */
			if (simcom_tocopy > simcom_len) {
 800cb78:	4b34      	ldr	r3, [pc, #208]	; (800cc4c <SIMCOM_DMA_IrqHandler+0x488>)
 800cb7a:	681a      	ldr	r2, [r3, #0]
 800cb7c:	4b31      	ldr	r3, [pc, #196]	; (800cc44 <SIMCOM_DMA_IrqHandler+0x480>)
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	429a      	cmp	r2, r3
 800cb82:	d903      	bls.n	800cb8c <SIMCOM_DMA_IrqHandler+0x3c8>
				simcom_tocopy = simcom_len;
 800cb84:	4b2f      	ldr	r3, [pc, #188]	; (800cc44 <SIMCOM_DMA_IrqHandler+0x480>)
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	4a30      	ldr	r2, [pc, #192]	; (800cc4c <SIMCOM_DMA_IrqHandler+0x488>)
 800cb8a:	6013      	str	r3, [r2, #0]
			}
			/* Copy first part */
			memcpy(&SIMCOM_UART_RX_Buffer[simcom_write], simcom_ptr, simcom_tocopy);
 800cb8c:	4b2e      	ldr	r3, [pc, #184]	; (800cc48 <SIMCOM_DMA_IrqHandler+0x484>)
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	4a31      	ldr	r2, [pc, #196]	; (800cc58 <SIMCOM_DMA_IrqHandler+0x494>)
 800cb92:	1898      	adds	r0, r3, r2
 800cb94:	4b2e      	ldr	r3, [pc, #184]	; (800cc50 <SIMCOM_DMA_IrqHandler+0x48c>)
 800cb96:	6819      	ldr	r1, [r3, #0]
 800cb98:	4b2c      	ldr	r3, [pc, #176]	; (800cc4c <SIMCOM_DMA_IrqHandler+0x488>)
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	461a      	mov	r2, r3
 800cb9e:	f008 fae3 	bl	8015168 <memcpy>
			/* Correct values for remaining data */
			simcom_write += simcom_tocopy;
 800cba2:	4b29      	ldr	r3, [pc, #164]	; (800cc48 <SIMCOM_DMA_IrqHandler+0x484>)
 800cba4:	681a      	ldr	r2, [r3, #0]
 800cba6:	4b29      	ldr	r3, [pc, #164]	; (800cc4c <SIMCOM_DMA_IrqHandler+0x488>)
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	4413      	add	r3, r2
 800cbac:	4a26      	ldr	r2, [pc, #152]	; (800cc48 <SIMCOM_DMA_IrqHandler+0x484>)
 800cbae:	6013      	str	r3, [r2, #0]
			simcom_len -= simcom_tocopy;
 800cbb0:	4b24      	ldr	r3, [pc, #144]	; (800cc44 <SIMCOM_DMA_IrqHandler+0x480>)
 800cbb2:	681a      	ldr	r2, [r3, #0]
 800cbb4:	4b25      	ldr	r3, [pc, #148]	; (800cc4c <SIMCOM_DMA_IrqHandler+0x488>)
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	1ad3      	subs	r3, r2, r3
 800cbba:	4a22      	ldr	r2, [pc, #136]	; (800cc44 <SIMCOM_DMA_IrqHandler+0x480>)
 800cbbc:	6013      	str	r3, [r2, #0]
			simcom_ptr += simcom_tocopy;
 800cbbe:	4b24      	ldr	r3, [pc, #144]	; (800cc50 <SIMCOM_DMA_IrqHandler+0x48c>)
 800cbc0:	681a      	ldr	r2, [r3, #0]
 800cbc2:	4b22      	ldr	r3, [pc, #136]	; (800cc4c <SIMCOM_DMA_IrqHandler+0x488>)
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	4413      	add	r3, r2
 800cbc8:	4a21      	ldr	r2, [pc, #132]	; (800cc50 <SIMCOM_DMA_IrqHandler+0x48c>)
 800cbca:	6013      	str	r3, [r2, #0]
			/* If still data to simcom_write for beginning of buffer */
			if (simcom_len) {
 800cbcc:	4b1d      	ldr	r3, [pc, #116]	; (800cc44 <SIMCOM_DMA_IrqHandler+0x480>)
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d00b      	beq.n	800cbec <SIMCOM_DMA_IrqHandler+0x428>
				/* Don't care if we override Read pointer now */
				memcpy(&SIMCOM_UART_RX_Buffer[0], simcom_ptr, simcom_len);
 800cbd4:	4b1e      	ldr	r3, [pc, #120]	; (800cc50 <SIMCOM_DMA_IrqHandler+0x48c>)
 800cbd6:	6819      	ldr	r1, [r3, #0]
 800cbd8:	4b1a      	ldr	r3, [pc, #104]	; (800cc44 <SIMCOM_DMA_IrqHandler+0x480>)
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	461a      	mov	r2, r3
 800cbde:	481e      	ldr	r0, [pc, #120]	; (800cc58 <SIMCOM_DMA_IrqHandler+0x494>)
 800cbe0:	f008 fac2 	bl	8015168 <memcpy>
				simcom_write = simcom_len;
 800cbe4:	4b17      	ldr	r3, [pc, #92]	; (800cc44 <SIMCOM_DMA_IrqHandler+0x480>)
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	4a17      	ldr	r2, [pc, #92]	; (800cc48 <SIMCOM_DMA_IrqHandler+0x484>)
 800cbea:	6013      	str	r3, [r2, #0]
			}
			// set null at the end
			SIMCOM_UART_RX_Buffer[simcom_write] = '\0';
 800cbec:	4b16      	ldr	r3, [pc, #88]	; (800cc48 <SIMCOM_DMA_IrqHandler+0x484>)
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	4a19      	ldr	r2, [pc, #100]	; (800cc58 <SIMCOM_DMA_IrqHandler+0x494>)
 800cbf2:	2100      	movs	r1, #0
 800cbf4:	54d1      	strb	r1, [r2, r3]
		}

		/* Start DMA transfer again */
		hdma->Instance->CR |= DMA_SxCR_EN;
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	681a      	ldr	r2, [r3, #0]
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	f042 0201 	orr.w	r2, r2, #1
 800cc04:	601a      	str	r2, [r3, #0]
	}
}
 800cc06:	bf00      	nop
 800cc08:	3708      	adds	r7, #8
 800cc0a:	46bd      	mov	sp, r7
 800cc0c:	bd80      	pop	{r7, pc}
 800cc0e:	bf00      	nop
 800cc10:	40026010 	.word	0x40026010
 800cc14:	40026410 	.word	0x40026410
 800cc18:	40026070 	.word	0x40026070
 800cc1c:	40026470 	.word	0x40026470
 800cc20:	40026028 	.word	0x40026028
 800cc24:	40026428 	.word	0x40026428
 800cc28:	40026088 	.word	0x40026088
 800cc2c:	40026488 	.word	0x40026488
 800cc30:	40026040 	.word	0x40026040
 800cc34:	40026440 	.word	0x40026440
 800cc38:	400260a0 	.word	0x400260a0
 800cc3c:	400264a0 	.word	0x400264a0
 800cc40:	40026000 	.word	0x40026000
 800cc44:	20007134 	.word	0x20007134
 800cc48:	20006d2c 	.word	0x20006d2c
 800cc4c:	20007130 	.word	0x20007130
 800cc50:	20007138 	.word	0x20007138
 800cc54:	2000713c 	.word	0x2000713c
 800cc58:	20006d30 	.word	0x20006d30

0800cc5c <SIMCOM_DMA_Init>:

void SIMCOM_DMA_Init(void) {
 800cc5c:	b580      	push	{r7, lr}
 800cc5e:	af00      	add	r7, sp, #0
	__HAL_UART_ENABLE_IT(&huart3, UART_IT_IDLE);      // enable idle line interrupt
 800cc60:	4b0f      	ldr	r3, [pc, #60]	; (800cca0 <SIMCOM_DMA_Init+0x44>)
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	68da      	ldr	r2, [r3, #12]
 800cc66:	4b0e      	ldr	r3, [pc, #56]	; (800cca0 <SIMCOM_DMA_Init+0x44>)
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	f042 0210 	orr.w	r2, r2, #16
 800cc6e:	60da      	str	r2, [r3, #12]
	__HAL_DMA_ENABLE_IT(&hdma_usart3_rx, DMA_IT_TC);  // enable DMA Tx cplt interrupt
 800cc70:	4b0c      	ldr	r3, [pc, #48]	; (800cca4 <SIMCOM_DMA_Init+0x48>)
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	681a      	ldr	r2, [r3, #0]
 800cc76:	4b0b      	ldr	r3, [pc, #44]	; (800cca4 <SIMCOM_DMA_Init+0x48>)
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	f042 0210 	orr.w	r2, r2, #16
 800cc7e:	601a      	str	r2, [r3, #0]
	__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT); // disable half complete interrupt
 800cc80:	4b08      	ldr	r3, [pc, #32]	; (800cca4 <SIMCOM_DMA_Init+0x48>)
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	681a      	ldr	r2, [r3, #0]
 800cc86:	4b07      	ldr	r3, [pc, #28]	; (800cca4 <SIMCOM_DMA_Init+0x48>)
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	f022 0208 	bic.w	r2, r2, #8
 800cc8e:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(&huart3, (uint8_t *) SIMCOM_DMA_RX_Buffer, SIMCOM_DMA_RX_BUFFER_SIZE);
 800cc90:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cc94:	4904      	ldr	r1, [pc, #16]	; (800cca8 <SIMCOM_DMA_Init+0x4c>)
 800cc96:	4802      	ldr	r0, [pc, #8]	; (800cca0 <SIMCOM_DMA_Init+0x44>)
 800cc98:	f7fa fcbe 	bl	8007618 <HAL_UART_Receive_DMA>
}
 800cc9c:	bf00      	nop
 800cc9e:	bd80      	pop	{r7, pc}
 800cca0:	200086d0 	.word	0x200086d0
 800cca4:	20008670 	.word	0x20008670
 800cca8:	2000713c 	.word	0x2000713c

0800ccac <SIMCOM_Reset_Buffer>:

void SIMCOM_Reset_Buffer(void) {
 800ccac:	b580      	push	{r7, lr}
 800ccae:	af00      	add	r7, sp, #0
	// clear rx buffer
	memset(SIMCOM_UART_RX_Buffer, 0, strlen(SIMCOM_UART_RX_Buffer));
 800ccb0:	4808      	ldr	r0, [pc, #32]	; (800ccd4 <SIMCOM_Reset_Buffer+0x28>)
 800ccb2:	f7f3 fa97 	bl	80001e4 <strlen>
 800ccb6:	4603      	mov	r3, r0
 800ccb8:	461a      	mov	r2, r3
 800ccba:	2100      	movs	r1, #0
 800ccbc:	4805      	ldr	r0, [pc, #20]	; (800ccd4 <SIMCOM_Reset_Buffer+0x28>)
 800ccbe:	f008 fa5e 	bl	801517e <memset>
	// wail until clear is done
	osDelay(50);
 800ccc2:	2032      	movs	r0, #50	; 0x32
 800ccc4:	f7fb faf1 	bl	80082aa <osDelay>
	// set index back to first
	simcom_write = 0;
 800ccc8:	4b03      	ldr	r3, [pc, #12]	; (800ccd8 <SIMCOM_Reset_Buffer+0x2c>)
 800ccca:	2200      	movs	r2, #0
 800cccc:	601a      	str	r2, [r3, #0]
	// set null at the end
	//	SIMCOM_UART_RX_Buffer[simcom_write] = '\0';
}
 800ccce:	bf00      	nop
 800ccd0:	bd80      	pop	{r7, pc}
 800ccd2:	bf00      	nop
 800ccd4:	20006d30 	.word	0x20006d30
 800ccd8:	20006d2c 	.word	0x20006d2c

0800ccdc <SIMCOM_Transmit>:

void SIMCOM_Transmit(char *pData, uint16_t Size) {
 800ccdc:	b580      	push	{r7, lr}
 800ccde:	b082      	sub	sp, #8
 800cce0:	af00      	add	r7, sp, #0
 800cce2:	6078      	str	r0, [r7, #4]
 800cce4:	460b      	mov	r3, r1
 800cce6:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart3, (uint8_t *) pData, Size, HAL_MAX_DELAY);
 800cce8:	887a      	ldrh	r2, [r7, #2]
 800ccea:	f04f 33ff 	mov.w	r3, #4294967295
 800ccee:	6879      	ldr	r1, [r7, #4]
 800ccf0:	4803      	ldr	r0, [pc, #12]	; (800cd00 <SIMCOM_Transmit+0x24>)
 800ccf2:	f7fa fbf8 	bl	80074e6 <HAL_UART_Transmit>
}
 800ccf6:	bf00      	nop
 800ccf8:	3708      	adds	r7, #8
 800ccfa:	46bd      	mov	sp, r7
 800ccfc:	bd80      	pop	{r7, pc}
 800ccfe:	bf00      	nop
 800cd00:	200086d0 	.word	0x200086d0

0800cd04 <UBLOX_USART_IrqHandler>:
char UBLOX_DMA_RX_Buffer[UBLOX_DMA_RX_BUFFER_SIZE];
char UBLOX_UART_RX_Buffer[UBLOX_UART_RX_BUFFER_SIZE];
size_t ublox_write, ublox_len, ublox_tocopy;
uint8_t *ublox_ptr;

void UBLOX_USART_IrqHandler(UART_HandleTypeDef *huart, DMA_HandleTypeDef *hdma) {
 800cd04:	b580      	push	{r7, lr}
 800cd06:	b084      	sub	sp, #16
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	6078      	str	r0, [r7, #4]
 800cd0c:	6039      	str	r1, [r7, #0]
	if (huart->Instance->SR & UART_FLAG_IDLE) /* if Idle flag is set */
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	f003 0310 	and.w	r3, r3, #16
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d016      	beq.n	800cd4a <UBLOX_USART_IrqHandler+0x46>
	{
		__HAL_UART_CLEAR_IDLEFLAG(huart); /* Clear idle flag */
 800cd1c:	2300      	movs	r3, #0
 800cd1e:	60fb      	str	r3, [r7, #12]
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	60fb      	str	r3, [r7, #12]
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	685b      	ldr	r3, [r3, #4]
 800cd2e:	60fb      	str	r3, [r7, #12]
 800cd30:	68fb      	ldr	r3, [r7, #12]
		__HAL_DMA_DISABLE(hdma); /* Disabling DMA will force transfer complete interrupt if enabled */
 800cd32:	683b      	ldr	r3, [r7, #0]
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	681a      	ldr	r2, [r3, #0]
 800cd38:	683b      	ldr	r3, [r7, #0]
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	f022 0201 	bic.w	r2, r2, #1
 800cd40:	601a      	str	r2, [r3, #0]
		UBLOX_DMA_IrqHandler(hdma, huart);
 800cd42:	6879      	ldr	r1, [r7, #4]
 800cd44:	6838      	ldr	r0, [r7, #0]
 800cd46:	f000 f805 	bl	800cd54 <UBLOX_DMA_IrqHandler>
	}
}
 800cd4a:	bf00      	nop
 800cd4c:	3710      	adds	r7, #16
 800cd4e:	46bd      	mov	sp, r7
 800cd50:	bd80      	pop	{r7, pc}
	...

0800cd54 <UBLOX_DMA_IrqHandler>:

void UBLOX_DMA_IrqHandler(DMA_HandleTypeDef *hdma, UART_HandleTypeDef *huart) {
 800cd54:	b580      	push	{r7, lr}
 800cd56:	b082      	sub	sp, #8
 800cd58:	af00      	add	r7, sp, #0
 800cd5a:	6078      	str	r0, [r7, #4]
 800cd5c:	6039      	str	r1, [r7, #0]
	if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET) { // if the source is TC
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	f003 0310 	and.w	r3, r3, #16
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	f000 8216 	beq.w	800d19a <UBLOX_DMA_IrqHandler+0x446>

		/* Clear the transfer complete flag */
		__HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	461a      	mov	r2, r3
 800cd74:	4b99      	ldr	r3, [pc, #612]	; (800cfdc <UBLOX_DMA_IrqHandler+0x288>)
 800cd76:	429a      	cmp	r2, r3
 800cd78:	d960      	bls.n	800ce3c <UBLOX_DMA_IrqHandler+0xe8>
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	4a98      	ldr	r2, [pc, #608]	; (800cfe0 <UBLOX_DMA_IrqHandler+0x28c>)
 800cd80:	4293      	cmp	r3, r2
 800cd82:	d057      	beq.n	800ce34 <UBLOX_DMA_IrqHandler+0xe0>
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	4a96      	ldr	r2, [pc, #600]	; (800cfe4 <UBLOX_DMA_IrqHandler+0x290>)
 800cd8a:	4293      	cmp	r3, r2
 800cd8c:	d050      	beq.n	800ce30 <UBLOX_DMA_IrqHandler+0xdc>
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	4a95      	ldr	r2, [pc, #596]	; (800cfe8 <UBLOX_DMA_IrqHandler+0x294>)
 800cd94:	4293      	cmp	r3, r2
 800cd96:	d049      	beq.n	800ce2c <UBLOX_DMA_IrqHandler+0xd8>
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	4a93      	ldr	r2, [pc, #588]	; (800cfec <UBLOX_DMA_IrqHandler+0x298>)
 800cd9e:	4293      	cmp	r3, r2
 800cda0:	d042      	beq.n	800ce28 <UBLOX_DMA_IrqHandler+0xd4>
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	4a92      	ldr	r2, [pc, #584]	; (800cff0 <UBLOX_DMA_IrqHandler+0x29c>)
 800cda8:	4293      	cmp	r3, r2
 800cdaa:	d03a      	beq.n	800ce22 <UBLOX_DMA_IrqHandler+0xce>
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	4a90      	ldr	r2, [pc, #576]	; (800cff4 <UBLOX_DMA_IrqHandler+0x2a0>)
 800cdb2:	4293      	cmp	r3, r2
 800cdb4:	d032      	beq.n	800ce1c <UBLOX_DMA_IrqHandler+0xc8>
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	4a8f      	ldr	r2, [pc, #572]	; (800cff8 <UBLOX_DMA_IrqHandler+0x2a4>)
 800cdbc:	4293      	cmp	r3, r2
 800cdbe:	d02a      	beq.n	800ce16 <UBLOX_DMA_IrqHandler+0xc2>
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	4a8d      	ldr	r2, [pc, #564]	; (800cffc <UBLOX_DMA_IrqHandler+0x2a8>)
 800cdc6:	4293      	cmp	r3, r2
 800cdc8:	d022      	beq.n	800ce10 <UBLOX_DMA_IrqHandler+0xbc>
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	4a8c      	ldr	r2, [pc, #560]	; (800d000 <UBLOX_DMA_IrqHandler+0x2ac>)
 800cdd0:	4293      	cmp	r3, r2
 800cdd2:	d01a      	beq.n	800ce0a <UBLOX_DMA_IrqHandler+0xb6>
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	4a8a      	ldr	r2, [pc, #552]	; (800d004 <UBLOX_DMA_IrqHandler+0x2b0>)
 800cdda:	4293      	cmp	r3, r2
 800cddc:	d012      	beq.n	800ce04 <UBLOX_DMA_IrqHandler+0xb0>
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	4a89      	ldr	r2, [pc, #548]	; (800d008 <UBLOX_DMA_IrqHandler+0x2b4>)
 800cde4:	4293      	cmp	r3, r2
 800cde6:	d00a      	beq.n	800cdfe <UBLOX_DMA_IrqHandler+0xaa>
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	4a87      	ldr	r2, [pc, #540]	; (800d00c <UBLOX_DMA_IrqHandler+0x2b8>)
 800cdee:	4293      	cmp	r3, r2
 800cdf0:	d102      	bne.n	800cdf8 <UBLOX_DMA_IrqHandler+0xa4>
 800cdf2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800cdf6:	e01e      	b.n	800ce36 <UBLOX_DMA_IrqHandler+0xe2>
 800cdf8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800cdfc:	e01b      	b.n	800ce36 <UBLOX_DMA_IrqHandler+0xe2>
 800cdfe:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800ce02:	e018      	b.n	800ce36 <UBLOX_DMA_IrqHandler+0xe2>
 800ce04:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800ce08:	e015      	b.n	800ce36 <UBLOX_DMA_IrqHandler+0xe2>
 800ce0a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800ce0e:	e012      	b.n	800ce36 <UBLOX_DMA_IrqHandler+0xe2>
 800ce10:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ce14:	e00f      	b.n	800ce36 <UBLOX_DMA_IrqHandler+0xe2>
 800ce16:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ce1a:	e00c      	b.n	800ce36 <UBLOX_DMA_IrqHandler+0xe2>
 800ce1c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ce20:	e009      	b.n	800ce36 <UBLOX_DMA_IrqHandler+0xe2>
 800ce22:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ce26:	e006      	b.n	800ce36 <UBLOX_DMA_IrqHandler+0xe2>
 800ce28:	2320      	movs	r3, #32
 800ce2a:	e004      	b.n	800ce36 <UBLOX_DMA_IrqHandler+0xe2>
 800ce2c:	2320      	movs	r3, #32
 800ce2e:	e002      	b.n	800ce36 <UBLOX_DMA_IrqHandler+0xe2>
 800ce30:	2320      	movs	r3, #32
 800ce32:	e000      	b.n	800ce36 <UBLOX_DMA_IrqHandler+0xe2>
 800ce34:	2320      	movs	r3, #32
 800ce36:	4a76      	ldr	r2, [pc, #472]	; (800d010 <UBLOX_DMA_IrqHandler+0x2bc>)
 800ce38:	60d3      	str	r3, [r2, #12]
 800ce3a:	e151      	b.n	800d0e0 <UBLOX_DMA_IrqHandler+0x38c>
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	461a      	mov	r2, r3
 800ce42:	4b74      	ldr	r3, [pc, #464]	; (800d014 <UBLOX_DMA_IrqHandler+0x2c0>)
 800ce44:	429a      	cmp	r2, r3
 800ce46:	d960      	bls.n	800cf0a <UBLOX_DMA_IrqHandler+0x1b6>
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	4a64      	ldr	r2, [pc, #400]	; (800cfe0 <UBLOX_DMA_IrqHandler+0x28c>)
 800ce4e:	4293      	cmp	r3, r2
 800ce50:	d057      	beq.n	800cf02 <UBLOX_DMA_IrqHandler+0x1ae>
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	4a63      	ldr	r2, [pc, #396]	; (800cfe4 <UBLOX_DMA_IrqHandler+0x290>)
 800ce58:	4293      	cmp	r3, r2
 800ce5a:	d050      	beq.n	800cefe <UBLOX_DMA_IrqHandler+0x1aa>
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	4a61      	ldr	r2, [pc, #388]	; (800cfe8 <UBLOX_DMA_IrqHandler+0x294>)
 800ce62:	4293      	cmp	r3, r2
 800ce64:	d049      	beq.n	800cefa <UBLOX_DMA_IrqHandler+0x1a6>
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	4a60      	ldr	r2, [pc, #384]	; (800cfec <UBLOX_DMA_IrqHandler+0x298>)
 800ce6c:	4293      	cmp	r3, r2
 800ce6e:	d042      	beq.n	800cef6 <UBLOX_DMA_IrqHandler+0x1a2>
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	4a5e      	ldr	r2, [pc, #376]	; (800cff0 <UBLOX_DMA_IrqHandler+0x29c>)
 800ce76:	4293      	cmp	r3, r2
 800ce78:	d03a      	beq.n	800cef0 <UBLOX_DMA_IrqHandler+0x19c>
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	4a5d      	ldr	r2, [pc, #372]	; (800cff4 <UBLOX_DMA_IrqHandler+0x2a0>)
 800ce80:	4293      	cmp	r3, r2
 800ce82:	d032      	beq.n	800ceea <UBLOX_DMA_IrqHandler+0x196>
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	4a5b      	ldr	r2, [pc, #364]	; (800cff8 <UBLOX_DMA_IrqHandler+0x2a4>)
 800ce8a:	4293      	cmp	r3, r2
 800ce8c:	d02a      	beq.n	800cee4 <UBLOX_DMA_IrqHandler+0x190>
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	4a5a      	ldr	r2, [pc, #360]	; (800cffc <UBLOX_DMA_IrqHandler+0x2a8>)
 800ce94:	4293      	cmp	r3, r2
 800ce96:	d022      	beq.n	800cede <UBLOX_DMA_IrqHandler+0x18a>
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	4a58      	ldr	r2, [pc, #352]	; (800d000 <UBLOX_DMA_IrqHandler+0x2ac>)
 800ce9e:	4293      	cmp	r3, r2
 800cea0:	d01a      	beq.n	800ced8 <UBLOX_DMA_IrqHandler+0x184>
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	4a57      	ldr	r2, [pc, #348]	; (800d004 <UBLOX_DMA_IrqHandler+0x2b0>)
 800cea8:	4293      	cmp	r3, r2
 800ceaa:	d012      	beq.n	800ced2 <UBLOX_DMA_IrqHandler+0x17e>
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	4a55      	ldr	r2, [pc, #340]	; (800d008 <UBLOX_DMA_IrqHandler+0x2b4>)
 800ceb2:	4293      	cmp	r3, r2
 800ceb4:	d00a      	beq.n	800cecc <UBLOX_DMA_IrqHandler+0x178>
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	4a54      	ldr	r2, [pc, #336]	; (800d00c <UBLOX_DMA_IrqHandler+0x2b8>)
 800cebc:	4293      	cmp	r3, r2
 800cebe:	d102      	bne.n	800cec6 <UBLOX_DMA_IrqHandler+0x172>
 800cec0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800cec4:	e01e      	b.n	800cf04 <UBLOX_DMA_IrqHandler+0x1b0>
 800cec6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ceca:	e01b      	b.n	800cf04 <UBLOX_DMA_IrqHandler+0x1b0>
 800cecc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800ced0:	e018      	b.n	800cf04 <UBLOX_DMA_IrqHandler+0x1b0>
 800ced2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800ced6:	e015      	b.n	800cf04 <UBLOX_DMA_IrqHandler+0x1b0>
 800ced8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800cedc:	e012      	b.n	800cf04 <UBLOX_DMA_IrqHandler+0x1b0>
 800cede:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cee2:	e00f      	b.n	800cf04 <UBLOX_DMA_IrqHandler+0x1b0>
 800cee4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cee8:	e00c      	b.n	800cf04 <UBLOX_DMA_IrqHandler+0x1b0>
 800ceea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ceee:	e009      	b.n	800cf04 <UBLOX_DMA_IrqHandler+0x1b0>
 800cef0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cef4:	e006      	b.n	800cf04 <UBLOX_DMA_IrqHandler+0x1b0>
 800cef6:	2320      	movs	r3, #32
 800cef8:	e004      	b.n	800cf04 <UBLOX_DMA_IrqHandler+0x1b0>
 800cefa:	2320      	movs	r3, #32
 800cefc:	e002      	b.n	800cf04 <UBLOX_DMA_IrqHandler+0x1b0>
 800cefe:	2320      	movs	r3, #32
 800cf00:	e000      	b.n	800cf04 <UBLOX_DMA_IrqHandler+0x1b0>
 800cf02:	2320      	movs	r3, #32
 800cf04:	4a42      	ldr	r2, [pc, #264]	; (800d010 <UBLOX_DMA_IrqHandler+0x2bc>)
 800cf06:	6093      	str	r3, [r2, #8]
 800cf08:	e0ea      	b.n	800d0e0 <UBLOX_DMA_IrqHandler+0x38c>
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	461a      	mov	r2, r3
 800cf10:	4b41      	ldr	r3, [pc, #260]	; (800d018 <UBLOX_DMA_IrqHandler+0x2c4>)
 800cf12:	429a      	cmp	r2, r3
 800cf14:	f240 8084 	bls.w	800d020 <UBLOX_DMA_IrqHandler+0x2cc>
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	4a30      	ldr	r2, [pc, #192]	; (800cfe0 <UBLOX_DMA_IrqHandler+0x28c>)
 800cf1e:	4293      	cmp	r3, r2
 800cf20:	d057      	beq.n	800cfd2 <UBLOX_DMA_IrqHandler+0x27e>
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	4a2f      	ldr	r2, [pc, #188]	; (800cfe4 <UBLOX_DMA_IrqHandler+0x290>)
 800cf28:	4293      	cmp	r3, r2
 800cf2a:	d050      	beq.n	800cfce <UBLOX_DMA_IrqHandler+0x27a>
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	4a2d      	ldr	r2, [pc, #180]	; (800cfe8 <UBLOX_DMA_IrqHandler+0x294>)
 800cf32:	4293      	cmp	r3, r2
 800cf34:	d049      	beq.n	800cfca <UBLOX_DMA_IrqHandler+0x276>
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	4a2c      	ldr	r2, [pc, #176]	; (800cfec <UBLOX_DMA_IrqHandler+0x298>)
 800cf3c:	4293      	cmp	r3, r2
 800cf3e:	d042      	beq.n	800cfc6 <UBLOX_DMA_IrqHandler+0x272>
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	4a2a      	ldr	r2, [pc, #168]	; (800cff0 <UBLOX_DMA_IrqHandler+0x29c>)
 800cf46:	4293      	cmp	r3, r2
 800cf48:	d03a      	beq.n	800cfc0 <UBLOX_DMA_IrqHandler+0x26c>
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	4a29      	ldr	r2, [pc, #164]	; (800cff4 <UBLOX_DMA_IrqHandler+0x2a0>)
 800cf50:	4293      	cmp	r3, r2
 800cf52:	d032      	beq.n	800cfba <UBLOX_DMA_IrqHandler+0x266>
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	4a27      	ldr	r2, [pc, #156]	; (800cff8 <UBLOX_DMA_IrqHandler+0x2a4>)
 800cf5a:	4293      	cmp	r3, r2
 800cf5c:	d02a      	beq.n	800cfb4 <UBLOX_DMA_IrqHandler+0x260>
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	4a26      	ldr	r2, [pc, #152]	; (800cffc <UBLOX_DMA_IrqHandler+0x2a8>)
 800cf64:	4293      	cmp	r3, r2
 800cf66:	d022      	beq.n	800cfae <UBLOX_DMA_IrqHandler+0x25a>
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	4a24      	ldr	r2, [pc, #144]	; (800d000 <UBLOX_DMA_IrqHandler+0x2ac>)
 800cf6e:	4293      	cmp	r3, r2
 800cf70:	d01a      	beq.n	800cfa8 <UBLOX_DMA_IrqHandler+0x254>
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	4a23      	ldr	r2, [pc, #140]	; (800d004 <UBLOX_DMA_IrqHandler+0x2b0>)
 800cf78:	4293      	cmp	r3, r2
 800cf7a:	d012      	beq.n	800cfa2 <UBLOX_DMA_IrqHandler+0x24e>
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	4a21      	ldr	r2, [pc, #132]	; (800d008 <UBLOX_DMA_IrqHandler+0x2b4>)
 800cf82:	4293      	cmp	r3, r2
 800cf84:	d00a      	beq.n	800cf9c <UBLOX_DMA_IrqHandler+0x248>
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	4a20      	ldr	r2, [pc, #128]	; (800d00c <UBLOX_DMA_IrqHandler+0x2b8>)
 800cf8c:	4293      	cmp	r3, r2
 800cf8e:	d102      	bne.n	800cf96 <UBLOX_DMA_IrqHandler+0x242>
 800cf90:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800cf94:	e01e      	b.n	800cfd4 <UBLOX_DMA_IrqHandler+0x280>
 800cf96:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800cf9a:	e01b      	b.n	800cfd4 <UBLOX_DMA_IrqHandler+0x280>
 800cf9c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800cfa0:	e018      	b.n	800cfd4 <UBLOX_DMA_IrqHandler+0x280>
 800cfa2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800cfa6:	e015      	b.n	800cfd4 <UBLOX_DMA_IrqHandler+0x280>
 800cfa8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800cfac:	e012      	b.n	800cfd4 <UBLOX_DMA_IrqHandler+0x280>
 800cfae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cfb2:	e00f      	b.n	800cfd4 <UBLOX_DMA_IrqHandler+0x280>
 800cfb4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cfb8:	e00c      	b.n	800cfd4 <UBLOX_DMA_IrqHandler+0x280>
 800cfba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cfbe:	e009      	b.n	800cfd4 <UBLOX_DMA_IrqHandler+0x280>
 800cfc0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cfc4:	e006      	b.n	800cfd4 <UBLOX_DMA_IrqHandler+0x280>
 800cfc6:	2320      	movs	r3, #32
 800cfc8:	e004      	b.n	800cfd4 <UBLOX_DMA_IrqHandler+0x280>
 800cfca:	2320      	movs	r3, #32
 800cfcc:	e002      	b.n	800cfd4 <UBLOX_DMA_IrqHandler+0x280>
 800cfce:	2320      	movs	r3, #32
 800cfd0:	e000      	b.n	800cfd4 <UBLOX_DMA_IrqHandler+0x280>
 800cfd2:	2320      	movs	r3, #32
 800cfd4:	4a11      	ldr	r2, [pc, #68]	; (800d01c <UBLOX_DMA_IrqHandler+0x2c8>)
 800cfd6:	60d3      	str	r3, [r2, #12]
 800cfd8:	e082      	b.n	800d0e0 <UBLOX_DMA_IrqHandler+0x38c>
 800cfda:	bf00      	nop
 800cfdc:	40026458 	.word	0x40026458
 800cfe0:	40026010 	.word	0x40026010
 800cfe4:	40026410 	.word	0x40026410
 800cfe8:	40026070 	.word	0x40026070
 800cfec:	40026470 	.word	0x40026470
 800cff0:	40026028 	.word	0x40026028
 800cff4:	40026428 	.word	0x40026428
 800cff8:	40026088 	.word	0x40026088
 800cffc:	40026488 	.word	0x40026488
 800d000:	40026040 	.word	0x40026040
 800d004:	40026440 	.word	0x40026440
 800d008:	400260a0 	.word	0x400260a0
 800d00c:	400264a0 	.word	0x400264a0
 800d010:	40026400 	.word	0x40026400
 800d014:	400260b8 	.word	0x400260b8
 800d018:	40026058 	.word	0x40026058
 800d01c:	40026000 	.word	0x40026000
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	4a5f      	ldr	r2, [pc, #380]	; (800d1a4 <UBLOX_DMA_IrqHandler+0x450>)
 800d026:	4293      	cmp	r3, r2
 800d028:	d057      	beq.n	800d0da <UBLOX_DMA_IrqHandler+0x386>
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	4a5e      	ldr	r2, [pc, #376]	; (800d1a8 <UBLOX_DMA_IrqHandler+0x454>)
 800d030:	4293      	cmp	r3, r2
 800d032:	d050      	beq.n	800d0d6 <UBLOX_DMA_IrqHandler+0x382>
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	4a5c      	ldr	r2, [pc, #368]	; (800d1ac <UBLOX_DMA_IrqHandler+0x458>)
 800d03a:	4293      	cmp	r3, r2
 800d03c:	d049      	beq.n	800d0d2 <UBLOX_DMA_IrqHandler+0x37e>
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	4a5b      	ldr	r2, [pc, #364]	; (800d1b0 <UBLOX_DMA_IrqHandler+0x45c>)
 800d044:	4293      	cmp	r3, r2
 800d046:	d042      	beq.n	800d0ce <UBLOX_DMA_IrqHandler+0x37a>
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	4a59      	ldr	r2, [pc, #356]	; (800d1b4 <UBLOX_DMA_IrqHandler+0x460>)
 800d04e:	4293      	cmp	r3, r2
 800d050:	d03a      	beq.n	800d0c8 <UBLOX_DMA_IrqHandler+0x374>
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	4a58      	ldr	r2, [pc, #352]	; (800d1b8 <UBLOX_DMA_IrqHandler+0x464>)
 800d058:	4293      	cmp	r3, r2
 800d05a:	d032      	beq.n	800d0c2 <UBLOX_DMA_IrqHandler+0x36e>
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	4a56      	ldr	r2, [pc, #344]	; (800d1bc <UBLOX_DMA_IrqHandler+0x468>)
 800d062:	4293      	cmp	r3, r2
 800d064:	d02a      	beq.n	800d0bc <UBLOX_DMA_IrqHandler+0x368>
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	4a55      	ldr	r2, [pc, #340]	; (800d1c0 <UBLOX_DMA_IrqHandler+0x46c>)
 800d06c:	4293      	cmp	r3, r2
 800d06e:	d022      	beq.n	800d0b6 <UBLOX_DMA_IrqHandler+0x362>
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	4a53      	ldr	r2, [pc, #332]	; (800d1c4 <UBLOX_DMA_IrqHandler+0x470>)
 800d076:	4293      	cmp	r3, r2
 800d078:	d01a      	beq.n	800d0b0 <UBLOX_DMA_IrqHandler+0x35c>
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	4a52      	ldr	r2, [pc, #328]	; (800d1c8 <UBLOX_DMA_IrqHandler+0x474>)
 800d080:	4293      	cmp	r3, r2
 800d082:	d012      	beq.n	800d0aa <UBLOX_DMA_IrqHandler+0x356>
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	4a50      	ldr	r2, [pc, #320]	; (800d1cc <UBLOX_DMA_IrqHandler+0x478>)
 800d08a:	4293      	cmp	r3, r2
 800d08c:	d00a      	beq.n	800d0a4 <UBLOX_DMA_IrqHandler+0x350>
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	4a4f      	ldr	r2, [pc, #316]	; (800d1d0 <UBLOX_DMA_IrqHandler+0x47c>)
 800d094:	4293      	cmp	r3, r2
 800d096:	d102      	bne.n	800d09e <UBLOX_DMA_IrqHandler+0x34a>
 800d098:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800d09c:	e01e      	b.n	800d0dc <UBLOX_DMA_IrqHandler+0x388>
 800d09e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d0a2:	e01b      	b.n	800d0dc <UBLOX_DMA_IrqHandler+0x388>
 800d0a4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800d0a8:	e018      	b.n	800d0dc <UBLOX_DMA_IrqHandler+0x388>
 800d0aa:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800d0ae:	e015      	b.n	800d0dc <UBLOX_DMA_IrqHandler+0x388>
 800d0b0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800d0b4:	e012      	b.n	800d0dc <UBLOX_DMA_IrqHandler+0x388>
 800d0b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d0ba:	e00f      	b.n	800d0dc <UBLOX_DMA_IrqHandler+0x388>
 800d0bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d0c0:	e00c      	b.n	800d0dc <UBLOX_DMA_IrqHandler+0x388>
 800d0c2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d0c6:	e009      	b.n	800d0dc <UBLOX_DMA_IrqHandler+0x388>
 800d0c8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d0cc:	e006      	b.n	800d0dc <UBLOX_DMA_IrqHandler+0x388>
 800d0ce:	2320      	movs	r3, #32
 800d0d0:	e004      	b.n	800d0dc <UBLOX_DMA_IrqHandler+0x388>
 800d0d2:	2320      	movs	r3, #32
 800d0d4:	e002      	b.n	800d0dc <UBLOX_DMA_IrqHandler+0x388>
 800d0d6:	2320      	movs	r3, #32
 800d0d8:	e000      	b.n	800d0dc <UBLOX_DMA_IrqHandler+0x388>
 800d0da:	2320      	movs	r3, #32
 800d0dc:	4a3d      	ldr	r2, [pc, #244]	; (800d1d4 <UBLOX_DMA_IrqHandler+0x480>)
 800d0de:	6093      	str	r3, [r2, #8]

		/* Get the ublox_length of the data */
		ublox_len = UBLOX_DMA_RX_BUFFER_SIZE - hdma->Instance->NDTR;
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	685b      	ldr	r3, [r3, #4]
 800d0e6:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 800d0ea:	4a3b      	ldr	r2, [pc, #236]	; (800d1d8 <UBLOX_DMA_IrqHandler+0x484>)
 800d0ec:	6013      	str	r3, [r2, #0]
		/* Only process if DMA is not empty */
		if (ublox_len > 0) {
 800d0ee:	4b3a      	ldr	r3, [pc, #232]	; (800d1d8 <UBLOX_DMA_IrqHandler+0x484>)
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d049      	beq.n	800d18a <UBLOX_DMA_IrqHandler+0x436>
			/* Reset the buffer */
			UBLOX_Reset_Buffer();
 800d0f6:	f000 f8a3 	bl	800d240 <UBLOX_Reset_Buffer>
			/* Get number of bytes we can copy to the end of buffer */
			ublox_tocopy = UBLOX_UART_RX_BUFFER_SIZE - ublox_write;
 800d0fa:	4b38      	ldr	r3, [pc, #224]	; (800d1dc <UBLOX_DMA_IrqHandler+0x488>)
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 800d102:	4a37      	ldr	r2, [pc, #220]	; (800d1e0 <UBLOX_DMA_IrqHandler+0x48c>)
 800d104:	6013      	str	r3, [r2, #0]
			/* ublox_write received data for UART main buffer for manipulation later */
			ublox_ptr = (uint8_t *) UBLOX_DMA_RX_Buffer;
 800d106:	4b37      	ldr	r3, [pc, #220]	; (800d1e4 <UBLOX_DMA_IrqHandler+0x490>)
 800d108:	4a37      	ldr	r2, [pc, #220]	; (800d1e8 <UBLOX_DMA_IrqHandler+0x494>)
 800d10a:	601a      	str	r2, [r3, #0]
			/* Check how many bytes to copy */
			if (ublox_tocopy > ublox_len) {
 800d10c:	4b34      	ldr	r3, [pc, #208]	; (800d1e0 <UBLOX_DMA_IrqHandler+0x48c>)
 800d10e:	681a      	ldr	r2, [r3, #0]
 800d110:	4b31      	ldr	r3, [pc, #196]	; (800d1d8 <UBLOX_DMA_IrqHandler+0x484>)
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	429a      	cmp	r2, r3
 800d116:	d903      	bls.n	800d120 <UBLOX_DMA_IrqHandler+0x3cc>
				ublox_tocopy = ublox_len;
 800d118:	4b2f      	ldr	r3, [pc, #188]	; (800d1d8 <UBLOX_DMA_IrqHandler+0x484>)
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	4a30      	ldr	r2, [pc, #192]	; (800d1e0 <UBLOX_DMA_IrqHandler+0x48c>)
 800d11e:	6013      	str	r3, [r2, #0]
			}
			/* Copy first part */
			memcpy(&UBLOX_UART_RX_Buffer[ublox_write], ublox_ptr, ublox_tocopy);
 800d120:	4b2e      	ldr	r3, [pc, #184]	; (800d1dc <UBLOX_DMA_IrqHandler+0x488>)
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	4a31      	ldr	r2, [pc, #196]	; (800d1ec <UBLOX_DMA_IrqHandler+0x498>)
 800d126:	1898      	adds	r0, r3, r2
 800d128:	4b2e      	ldr	r3, [pc, #184]	; (800d1e4 <UBLOX_DMA_IrqHandler+0x490>)
 800d12a:	6819      	ldr	r1, [r3, #0]
 800d12c:	4b2c      	ldr	r3, [pc, #176]	; (800d1e0 <UBLOX_DMA_IrqHandler+0x48c>)
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	461a      	mov	r2, r3
 800d132:	f008 f819 	bl	8015168 <memcpy>
			/* Correct values for remaining data */
			ublox_write += ublox_tocopy;
 800d136:	4b29      	ldr	r3, [pc, #164]	; (800d1dc <UBLOX_DMA_IrqHandler+0x488>)
 800d138:	681a      	ldr	r2, [r3, #0]
 800d13a:	4b29      	ldr	r3, [pc, #164]	; (800d1e0 <UBLOX_DMA_IrqHandler+0x48c>)
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	4413      	add	r3, r2
 800d140:	4a26      	ldr	r2, [pc, #152]	; (800d1dc <UBLOX_DMA_IrqHandler+0x488>)
 800d142:	6013      	str	r3, [r2, #0]
			ublox_len -= ublox_tocopy;
 800d144:	4b24      	ldr	r3, [pc, #144]	; (800d1d8 <UBLOX_DMA_IrqHandler+0x484>)
 800d146:	681a      	ldr	r2, [r3, #0]
 800d148:	4b25      	ldr	r3, [pc, #148]	; (800d1e0 <UBLOX_DMA_IrqHandler+0x48c>)
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	1ad3      	subs	r3, r2, r3
 800d14e:	4a22      	ldr	r2, [pc, #136]	; (800d1d8 <UBLOX_DMA_IrqHandler+0x484>)
 800d150:	6013      	str	r3, [r2, #0]
			ublox_ptr += ublox_tocopy;
 800d152:	4b24      	ldr	r3, [pc, #144]	; (800d1e4 <UBLOX_DMA_IrqHandler+0x490>)
 800d154:	681a      	ldr	r2, [r3, #0]
 800d156:	4b22      	ldr	r3, [pc, #136]	; (800d1e0 <UBLOX_DMA_IrqHandler+0x48c>)
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	4413      	add	r3, r2
 800d15c:	4a21      	ldr	r2, [pc, #132]	; (800d1e4 <UBLOX_DMA_IrqHandler+0x490>)
 800d15e:	6013      	str	r3, [r2, #0]

			/* If still data to ublox_write for beginning of buffer */
			if (ublox_len) {
 800d160:	4b1d      	ldr	r3, [pc, #116]	; (800d1d8 <UBLOX_DMA_IrqHandler+0x484>)
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	2b00      	cmp	r3, #0
 800d166:	d00b      	beq.n	800d180 <UBLOX_DMA_IrqHandler+0x42c>
				/* Don't care if we override Read pointer now */
				memcpy(&UBLOX_UART_RX_Buffer[0], ublox_ptr, ublox_len);
 800d168:	4b1e      	ldr	r3, [pc, #120]	; (800d1e4 <UBLOX_DMA_IrqHandler+0x490>)
 800d16a:	6819      	ldr	r1, [r3, #0]
 800d16c:	4b1a      	ldr	r3, [pc, #104]	; (800d1d8 <UBLOX_DMA_IrqHandler+0x484>)
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	461a      	mov	r2, r3
 800d172:	481e      	ldr	r0, [pc, #120]	; (800d1ec <UBLOX_DMA_IrqHandler+0x498>)
 800d174:	f007 fff8 	bl	8015168 <memcpy>
				ublox_write = ublox_len;
 800d178:	4b17      	ldr	r3, [pc, #92]	; (800d1d8 <UBLOX_DMA_IrqHandler+0x484>)
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	4a17      	ldr	r2, [pc, #92]	; (800d1dc <UBLOX_DMA_IrqHandler+0x488>)
 800d17e:	6013      	str	r3, [r2, #0]
			}
			// set null at the end
			UBLOX_UART_RX_Buffer[ublox_write] = '\0';
 800d180:	4b16      	ldr	r3, [pc, #88]	; (800d1dc <UBLOX_DMA_IrqHandler+0x488>)
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	4a19      	ldr	r2, [pc, #100]	; (800d1ec <UBLOX_DMA_IrqHandler+0x498>)
 800d186:	2100      	movs	r1, #0
 800d188:	54d1      	strb	r1, [r2, r3]
		}

		/* Start DMA transfer again */
		hdma->Instance->CR |= DMA_SxCR_EN;
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	681a      	ldr	r2, [r3, #0]
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	f042 0201 	orr.w	r2, r2, #1
 800d198:	601a      	str	r2, [r3, #0]
	}
}
 800d19a:	bf00      	nop
 800d19c:	3708      	adds	r7, #8
 800d19e:	46bd      	mov	sp, r7
 800d1a0:	bd80      	pop	{r7, pc}
 800d1a2:	bf00      	nop
 800d1a4:	40026010 	.word	0x40026010
 800d1a8:	40026410 	.word	0x40026410
 800d1ac:	40026070 	.word	0x40026070
 800d1b0:	40026470 	.word	0x40026470
 800d1b4:	40026028 	.word	0x40026028
 800d1b8:	40026428 	.word	0x40026428
 800d1bc:	40026088 	.word	0x40026088
 800d1c0:	40026488 	.word	0x40026488
 800d1c4:	40026040 	.word	0x40026040
 800d1c8:	40026440 	.word	0x40026440
 800d1cc:	400260a0 	.word	0x400260a0
 800d1d0:	400264a0 	.word	0x400264a0
 800d1d4:	40026000 	.word	0x40026000
 800d1d8:	20007340 	.word	0x20007340
 800d1dc:	20007344 	.word	0x20007344
 800d1e0:	20007348 	.word	0x20007348
 800d1e4:	2000733c 	.word	0x2000733c
 800d1e8:	2000734c 	.word	0x2000734c
 800d1ec:	2000774c 	.word	0x2000774c

0800d1f0 <UBLOX_DMA_Init>:

void UBLOX_DMA_Init(void) {
 800d1f0:	b580      	push	{r7, lr}
 800d1f2:	af00      	add	r7, sp, #0
	__HAL_UART_ENABLE_IT(&huart2, UART_IT_IDLE);      // enable idle line interrupt
 800d1f4:	4b0f      	ldr	r3, [pc, #60]	; (800d234 <UBLOX_DMA_Init+0x44>)
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	68da      	ldr	r2, [r3, #12]
 800d1fa:	4b0e      	ldr	r3, [pc, #56]	; (800d234 <UBLOX_DMA_Init+0x44>)
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	f042 0210 	orr.w	r2, r2, #16
 800d202:	60da      	str	r2, [r3, #12]
	__HAL_DMA_ENABLE_IT(&hdma_usart2_rx, DMA_IT_TC);  // enable DMA Tx cplt interrupt
 800d204:	4b0c      	ldr	r3, [pc, #48]	; (800d238 <UBLOX_DMA_Init+0x48>)
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	681a      	ldr	r2, [r3, #0]
 800d20a:	4b0b      	ldr	r3, [pc, #44]	; (800d238 <UBLOX_DMA_Init+0x48>)
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	f042 0210 	orr.w	r2, r2, #16
 800d212:	601a      	str	r2, [r3, #0]
	__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT); // disable half complete interrupt
 800d214:	4b08      	ldr	r3, [pc, #32]	; (800d238 <UBLOX_DMA_Init+0x48>)
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	681a      	ldr	r2, [r3, #0]
 800d21a:	4b07      	ldr	r3, [pc, #28]	; (800d238 <UBLOX_DMA_Init+0x48>)
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	f022 0208 	bic.w	r2, r2, #8
 800d222:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(&huart2, (uint8_t *) UBLOX_DMA_RX_Buffer, UBLOX_DMA_RX_BUFFER_SIZE);
 800d224:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d228:	4904      	ldr	r1, [pc, #16]	; (800d23c <UBLOX_DMA_Init+0x4c>)
 800d22a:	4802      	ldr	r0, [pc, #8]	; (800d234 <UBLOX_DMA_Init+0x44>)
 800d22c:	f7fa f9f4 	bl	8007618 <HAL_UART_Receive_DMA>
}
 800d230:	bf00      	nop
 800d232:	bd80      	pop	{r7, pc}
 800d234:	200088b4 	.word	0x200088b4
 800d238:	200085bc 	.word	0x200085bc
 800d23c:	2000734c 	.word	0x2000734c

0800d240 <UBLOX_Reset_Buffer>:

void UBLOX_Reset_Buffer(void) {
 800d240:	b480      	push	{r7}
 800d242:	af00      	add	r7, sp, #0
	// clear rx buffer
	//	memset(UBLOX_UART_RX_Buffer, 0, sizeof(UBLOX_UART_RX_Buffer));
	// set index back to first
	ublox_write = 0;
 800d244:	4b06      	ldr	r3, [pc, #24]	; (800d260 <UBLOX_Reset_Buffer+0x20>)
 800d246:	2200      	movs	r2, #0
 800d248:	601a      	str	r2, [r3, #0]
	//	 set null at the end
	UBLOX_UART_RX_Buffer[ublox_write] = '\0';
 800d24a:	4b05      	ldr	r3, [pc, #20]	; (800d260 <UBLOX_Reset_Buffer+0x20>)
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	4a05      	ldr	r2, [pc, #20]	; (800d264 <UBLOX_Reset_Buffer+0x24>)
 800d250:	2100      	movs	r1, #0
 800d252:	54d1      	strb	r1, [r2, r3]
}
 800d254:	bf00      	nop
 800d256:	46bd      	mov	sp, r7
 800d258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d25c:	4770      	bx	lr
 800d25e:	bf00      	nop
 800d260:	20007344 	.word	0x20007344
 800d264:	2000774c 	.word	0x2000774c

0800d268 <CAN_Init>:
extern CAN_HandleTypeDef hcan1;
extern osMailQId canRxMailHandle;
extern osMutexId CanTxMutexHandle;
CAN_HandleTypeDef * CanHandle = &hcan1;

void CAN_Init(void) {
 800d268:	b580      	push	{r7, lr}
 800d26a:	af00      	add	r7, sp, #0
	/* Configure the CAN Filter */
	if (CAN_Filter() != HAL_OK) {
 800d26c:	f000 f83a 	bl	800d2e4 <CAN_Filter>
 800d270:	4603      	mov	r3, r0
 800d272:	2b00      	cmp	r3, #0
 800d274:	d001      	beq.n	800d27a <CAN_Init+0x12>
		/* Start Error */
		Error_Handler();
 800d276:	f006 fcdb 	bl	8013c30 <Error_Handler>
	}

	/* Start the CAN peripheral */
	if (HAL_CAN_Start(CanHandle) != HAL_OK) {
 800d27a:	4b0b      	ldr	r3, [pc, #44]	; (800d2a8 <CAN_Init+0x40>)
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	4618      	mov	r0, r3
 800d280:	f7f4 f8d2 	bl	8001428 <HAL_CAN_Start>
 800d284:	4603      	mov	r3, r0
 800d286:	2b00      	cmp	r3, #0
 800d288:	d001      	beq.n	800d28e <CAN_Init+0x26>
		/* Start Error */
		Error_Handler();
 800d28a:	f006 fcd1 	bl	8013c30 <Error_Handler>
	}

	/* Activate CAN RX notification */
	if (HAL_CAN_ActivateNotification(CanHandle, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
 800d28e:	4b06      	ldr	r3, [pc, #24]	; (800d2a8 <CAN_Init+0x40>)
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	2102      	movs	r1, #2
 800d294:	4618      	mov	r0, r3
 800d296:	f7f4 faf9 	bl	800188c <HAL_CAN_ActivateNotification>
 800d29a:	4603      	mov	r3, r0
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d001      	beq.n	800d2a4 <CAN_Init+0x3c>
		/* Notification Error */
		Error_Handler();
 800d2a0:	f006 fcc6 	bl	8013c30 <Error_Handler>
	}
}
 800d2a4:	bf00      	nop
 800d2a6:	bd80      	pop	{r7, pc}
 800d2a8:	20000008 	.word	0x20000008

0800d2ac <CAN_Set_Tx_Header>:

void CAN_Set_Tx_Header(CAN_TxHeaderTypeDef* TxHeader, uint32_t StdId, uint32_t DLC) {
 800d2ac:	b480      	push	{r7}
 800d2ae:	b085      	sub	sp, #20
 800d2b0:	af00      	add	r7, sp, #0
 800d2b2:	60f8      	str	r0, [r7, #12]
 800d2b4:	60b9      	str	r1, [r7, #8]
 800d2b6:	607a      	str	r2, [r7, #4]
	/* Configure Global Transmission process */
	TxHeader->RTR = CAN_RTR_DATA;
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	2200      	movs	r2, #0
 800d2bc:	60da      	str	r2, [r3, #12]
	TxHeader->IDE = CAN_ID_STD;
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	2200      	movs	r2, #0
 800d2c2:	609a      	str	r2, [r3, #8]
	TxHeader->TransmitGlobalTime = DISABLE;
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	2200      	movs	r2, #0
 800d2c8:	751a      	strb	r2, [r3, #20]
	TxHeader->StdId = StdId;
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	68ba      	ldr	r2, [r7, #8]
 800d2ce:	601a      	str	r2, [r3, #0]
	TxHeader->DLC = DLC;
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	687a      	ldr	r2, [r7, #4]
 800d2d4:	611a      	str	r2, [r3, #16]
}
 800d2d6:	bf00      	nop
 800d2d8:	3714      	adds	r7, #20
 800d2da:	46bd      	mov	sp, r7
 800d2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e0:	4770      	bx	lr
	...

0800d2e4 <CAN_Filter>:

HAL_StatusTypeDef CAN_Filter(void) {
 800d2e4:	b580      	push	{r7, lr}
 800d2e6:	b08a      	sub	sp, #40	; 0x28
 800d2e8:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef sFilterConfig;

	/* Configure the CAN Filter */
	sFilterConfig.FilterBank = 0;
 800d2ea:	2300      	movs	r3, #0
 800d2ec:	617b      	str	r3, [r7, #20]
	// set filter to mask mode (not id_list mode)
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800d2ee:	2300      	movs	r3, #0
 800d2f0:	61bb      	str	r3, [r7, #24]
	// set 32-bit scale configuration
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800d2f2:	2301      	movs	r3, #1
 800d2f4:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterIdHigh = 0x0000;
 800d2f6:	2300      	movs	r3, #0
 800d2f8:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 800d2fa:	2300      	movs	r3, #0
 800d2fc:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 800d2fe:	2300      	movs	r3, #0
 800d300:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 800d302:	2300      	movs	r3, #0
 800d304:	60fb      	str	r3, [r7, #12]
	// assign filter to FIFO 0
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800d306:	2300      	movs	r3, #0
 800d308:	613b      	str	r3, [r7, #16]
	// activate filter
	sFilterConfig.FilterActivation = ENABLE;
 800d30a:	2301      	movs	r3, #1
 800d30c:	623b      	str	r3, [r7, #32]

	return HAL_CAN_ConfigFilter(CanHandle, &sFilterConfig);
 800d30e:	4b06      	ldr	r3, [pc, #24]	; (800d328 <CAN_Filter+0x44>)
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	463a      	mov	r2, r7
 800d314:	4611      	mov	r1, r2
 800d316:	4618      	mov	r0, r3
 800d318:	f7f3 ffa6 	bl	8001268 <HAL_CAN_ConfigFilter>
 800d31c:	4603      	mov	r3, r0
}
 800d31e:	4618      	mov	r0, r3
 800d320:	3728      	adds	r7, #40	; 0x28
 800d322:	46bd      	mov	sp, r7
 800d324:	bd80      	pop	{r7, pc}
 800d326:	bf00      	nop
 800d328:	20000008 	.word	0x20000008

0800d32c <CAN_Write>:

/*----------------------------------------------------------------------------
 wite a message to CAN peripheral and transmit it
 *----------------------------------------------------------------------------*/
uint8_t CAN_Write(CAN_Tx* TxCan) {
 800d32c:	b580      	push	{r7, lr}
 800d32e:	b084      	sub	sp, #16
 800d330:	af00      	add	r7, sp, #0
 800d332:	6078      	str	r0, [r7, #4]
	osMutexWait(CanTxMutexHandle, osWaitForever);
 800d334:	4b12      	ldr	r3, [pc, #72]	; (800d380 <CAN_Write+0x54>)
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	f04f 31ff 	mov.w	r1, #4294967295
 800d33c:	4618      	mov	r0, r3
 800d33e:	f7fb f85b 	bl	80083f8 <osMutexWait>

	uint32_t TxMailbox;
	HAL_StatusTypeDef status;
	/* Start the Transmission process */
	do {
		status = HAL_CAN_AddTxMessage(CanHandle, &(TxCan->TxHeader), (uint8_t *) &(TxCan->TxData), &TxMailbox);
 800d342:	4b10      	ldr	r3, [pc, #64]	; (800d384 <CAN_Write+0x58>)
 800d344:	6818      	ldr	r0, [r3, #0]
 800d346:	6879      	ldr	r1, [r7, #4]
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	f103 0218 	add.w	r2, r3, #24
 800d34e:	f107 0308 	add.w	r3, r7, #8
 800d352:	f7f4 f8ad 	bl	80014b0 <HAL_CAN_AddTxMessage>
 800d356:	4603      	mov	r3, r0
 800d358:	73fb      	strb	r3, [r7, #15]
	} while (status != HAL_OK);
 800d35a:	7bfb      	ldrb	r3, [r7, #15]
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d1f0      	bne.n	800d342 <CAN_Write+0x16>

	osMutexRelease(CanTxMutexHandle);
 800d360:	4b07      	ldr	r3, [pc, #28]	; (800d380 <CAN_Write+0x54>)
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	4618      	mov	r0, r3
 800d366:	f7fb f895 	bl	8008494 <osMutexRelease>
	return (status == HAL_OK);
 800d36a:	7bfb      	ldrb	r3, [r7, #15]
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	bf0c      	ite	eq
 800d370:	2301      	moveq	r3, #1
 800d372:	2300      	movne	r3, #0
 800d374:	b2db      	uxtb	r3, r3
}
 800d376:	4618      	mov	r0, r3
 800d378:	3710      	adds	r7, #16
 800d37a:	46bd      	mov	sp, r7
 800d37c:	bd80      	pop	{r7, pc}
 800d37e:	bf00      	nop
 800d380:	20008764 	.word	0x20008764
 800d384:	20000008 	.word	0x20000008

0800d388 <CAN_Read>:

/*----------------------------------------------------------------------------
 read a message from CAN peripheral and release it
 *----------------------------------------------------------------------------*/
uint8_t CAN_Read(CAN_Rx* RxCan) {
 800d388:	b580      	push	{r7, lr}
 800d38a:	b084      	sub	sp, #16
 800d38c:	af00      	add	r7, sp, #0
 800d38e:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status;

	/* Get RX message */
	status = HAL_CAN_GetRxMessage(CanHandle, CAN_RX_FIFO0, &(RxCan->RxHeader), RxCan->RxData);
 800d390:	4b09      	ldr	r3, [pc, #36]	; (800d3b8 <CAN_Read+0x30>)
 800d392:	6818      	ldr	r0, [r3, #0]
 800d394:	687a      	ldr	r2, [r7, #4]
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	331c      	adds	r3, #28
 800d39a:	2100      	movs	r1, #0
 800d39c:	f7f4 f963 	bl	8001666 <HAL_CAN_GetRxMessage>
 800d3a0:	4603      	mov	r3, r0
 800d3a2:	73fb      	strb	r3, [r7, #15]

	return (status == HAL_OK);
 800d3a4:	7bfb      	ldrb	r3, [r7, #15]
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	bf0c      	ite	eq
 800d3aa:	2301      	moveq	r3, #1
 800d3ac:	2300      	movne	r3, #0
 800d3ae:	b2db      	uxtb	r3, r3
}
 800d3b0:	4618      	mov	r0, r3
 800d3b2:	3710      	adds	r7, #16
 800d3b4:	46bd      	mov	sp, r7
 800d3b6:	bd80      	pop	{r7, pc}
 800d3b8:	20000008 	.word	0x20000008

0800d3bc <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef * hcan) {
 800d3bc:	b580      	push	{r7, lr}
 800d3be:	b084      	sub	sp, #16
 800d3c0:	af00      	add	r7, sp, #0
 800d3c2:	6078      	str	r0, [r7, #4]
	CAN_Rx * RxCan;

	// Allocate memory
	RxCan = osMailAlloc(canRxMailHandle, 0);
 800d3c4:	4b14      	ldr	r3, [pc, #80]	; (800d418 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	2100      	movs	r1, #0
 800d3ca:	4618      	mov	r0, r3
 800d3cc:	f7fb face 	bl	800896c <osMailAlloc>
 800d3d0:	60f8      	str	r0, [r7, #12]
	// check memory allocation result
	if (RxCan != NULL) {
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d01b      	beq.n	800d410 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>
		// read rx fifo
		if (CAN_Read(RxCan)) {
 800d3d8:	68f8      	ldr	r0, [r7, #12]
 800d3da:	f7ff ffd5 	bl	800d388 <CAN_Read>
 800d3de:	4603      	mov	r3, r0
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d00f      	beq.n	800d404 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>
			// Send Message
			if (osMailPut(canRxMailHandle, RxCan) != osOK) {
 800d3e4:	4b0c      	ldr	r3, [pc, #48]	; (800d418 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	68f9      	ldr	r1, [r7, #12]
 800d3ea:	4618      	mov	r0, r3
 800d3ec:	f7fb fad4 	bl	8008998 <osMailPut>
 800d3f0:	4603      	mov	r3, r0
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d00c      	beq.n	800d410 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>
				osMailFree(canRxMailHandle, RxCan);
 800d3f6:	4b08      	ldr	r3, [pc, #32]	; (800d418 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	68f9      	ldr	r1, [r7, #12]
 800d3fc:	4618      	mov	r0, r3
 800d3fe:	f7fb fb7d 	bl	8008afc <osMailFree>
			}
		} else {
			osMailFree(canRxMailHandle, RxCan);
		}
	}
}
 800d402:	e005      	b.n	800d410 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>
			osMailFree(canRxMailHandle, RxCan);
 800d404:	4b04      	ldr	r3, [pc, #16]	; (800d418 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	68f9      	ldr	r1, [r7, #12]
 800d40a:	4618      	mov	r0, r3
 800d40c:	f7fb fb76 	bl	8008afc <osMailFree>
}
 800d410:	bf00      	nop
 800d412:	3710      	adds	r7, #16
 800d414:	46bd      	mov	sp, r7
 800d416:	bd80      	pop	{r7, pc}
 800d418:	20008770 	.word	0x20008770

0800d41c <CANBUS_ECU_Switch>:

#include "_canbus.h"

// ==================================== ECU =========================================
#if (CAN_NODE & CAN_NODE_ECU)
uint8_t CANBUS_ECU_Switch(void) {
 800d41c:	b580      	push	{r7, lr}
 800d41e:	b088      	sub	sp, #32
 800d420:	af00      	add	r7, sp, #0
	extern uint8_t DB_MCU_Speed;
	extern timestamp_t DB_ECU_TimeStamp;
	extern uint32_t DB_ECU_Odometer;

	// set message
	TxCan.TxData[0] = DB_ECU_Switch[IDX_KEY_ABS].state;
 800d422:	4b3a      	ldr	r3, [pc, #232]	; (800d50c <CANBUS_ECU_Switch+0xf0>)
 800d424:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800d428:	763b      	strb	r3, [r7, #24]
	TxCan.TxData[0] |= DB_ECU_Switch[IDX_KEY_MIRRORING].state << 1;
 800d42a:	7e3b      	ldrb	r3, [r7, #24]
 800d42c:	b25a      	sxtb	r2, r3
 800d42e:	4b37      	ldr	r3, [pc, #220]	; (800d50c <CANBUS_ECU_Switch+0xf0>)
 800d430:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800d434:	005b      	lsls	r3, r3, #1
 800d436:	b25b      	sxtb	r3, r3
 800d438:	4313      	orrs	r3, r2
 800d43a:	b25b      	sxtb	r3, r3
 800d43c:	b2db      	uxtb	r3, r3
 800d43e:	763b      	strb	r3, [r7, #24]
	TxCan.TxData[0] |= DB_ECU_Switch[IDX_KEY_LAMP].state << 2;
 800d440:	7e3b      	ldrb	r3, [r7, #24]
 800d442:	b25a      	sxtb	r2, r3
 800d444:	4b31      	ldr	r3, [pc, #196]	; (800d50c <CANBUS_ECU_Switch+0xf0>)
 800d446:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800d44a:	009b      	lsls	r3, r3, #2
 800d44c:	b25b      	sxtb	r3, r3
 800d44e:	4313      	orrs	r3, r2
 800d450:	b25b      	sxtb	r3, r3
 800d452:	b2db      	uxtb	r3, r3
 800d454:	763b      	strb	r3, [r7, #24]
	TxCan.TxData[0] |= 0 << 3;
 800d456:	7e3b      	ldrb	r3, [r7, #24]
 800d458:	763b      	strb	r3, [r7, #24]
	TxCan.TxData[0] |= 0 << 4;
 800d45a:	7e3b      	ldrb	r3, [r7, #24]
 800d45c:	763b      	strb	r3, [r7, #24]
	TxCan.TxData[0] |= 0 << 5;
 800d45e:	7e3b      	ldrb	r3, [r7, #24]
 800d460:	763b      	strb	r3, [r7, #24]
	TxCan.TxData[0] |= 0 << 6;
 800d462:	7e3b      	ldrb	r3, [r7, #24]
 800d464:	763b      	strb	r3, [r7, #24]
	// check daylight (for auto brightness of HMI)
	TxCan.TxData[0] |= (DB_ECU_TimeStamp.time.Hours >= 5 && DB_ECU_TimeStamp.time.Hours <= 16) << 7;
 800d466:	7e3b      	ldrb	r3, [r7, #24]
 800d468:	b25a      	sxtb	r2, r3
 800d46a:	4b29      	ldr	r3, [pc, #164]	; (800d510 <CANBUS_ECU_Switch+0xf4>)
 800d46c:	791b      	ldrb	r3, [r3, #4]
 800d46e:	2b04      	cmp	r3, #4
 800d470:	d905      	bls.n	800d47e <CANBUS_ECU_Switch+0x62>
 800d472:	4b27      	ldr	r3, [pc, #156]	; (800d510 <CANBUS_ECU_Switch+0xf4>)
 800d474:	791b      	ldrb	r3, [r3, #4]
 800d476:	2b10      	cmp	r3, #16
 800d478:	d801      	bhi.n	800d47e <CANBUS_ECU_Switch+0x62>
 800d47a:	2301      	movs	r3, #1
 800d47c:	e000      	b.n	800d480 <CANBUS_ECU_Switch+0x64>
 800d47e:	2300      	movs	r3, #0
 800d480:	01db      	lsls	r3, r3, #7
 800d482:	b25b      	sxtb	r3, r3
 800d484:	4313      	orrs	r3, r2
 800d486:	b25b      	sxtb	r3, r3
 800d488:	b2db      	uxtb	r3, r3
 800d48a:	763b      	strb	r3, [r7, #24]

	// sein
	TxCan.TxData[1] = DB_ECU_Switch[IDX_KEY_SEIN_LEFT].state << 0;
 800d48c:	4b1f      	ldr	r3, [pc, #124]	; (800d50c <CANBUS_ECU_Switch+0xf0>)
 800d48e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d492:	767b      	strb	r3, [r7, #25]
	TxCan.TxData[1] |= DB_ECU_Switch[IDX_KEY_SEIN_RIGHT].state << 1;
 800d494:	7e7b      	ldrb	r3, [r7, #25]
 800d496:	b25a      	sxtb	r2, r3
 800d498:	4b1c      	ldr	r3, [pc, #112]	; (800d50c <CANBUS_ECU_Switch+0xf0>)
 800d49a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d49e:	005b      	lsls	r3, r3, #1
 800d4a0:	b25b      	sxtb	r3, r3
 800d4a2:	4313      	orrs	r3, r2
 800d4a4:	b25b      	sxtb	r3, r3
 800d4a6:	b2db      	uxtb	r3, r3
 800d4a8:	767b      	strb	r3, [r7, #25]

	// speed
	TxCan.TxData[2] = DB_MCU_Speed;
 800d4aa:	4b1a      	ldr	r3, [pc, #104]	; (800d514 <CANBUS_ECU_Switch+0xf8>)
 800d4ac:	781b      	ldrb	r3, [r3, #0]
 800d4ae:	76bb      	strb	r3, [r7, #26]

	// odometer
	TxCan.TxData[4] = (DB_ECU_Odometer & 0x000000FF);
 800d4b0:	4b19      	ldr	r3, [pc, #100]	; (800d518 <CANBUS_ECU_Switch+0xfc>)
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	b2db      	uxtb	r3, r3
 800d4b6:	773b      	strb	r3, [r7, #28]
	TxCan.TxData[5] = (DB_ECU_Odometer & 0x0000FF00) >> 8;
 800d4b8:	4b17      	ldr	r3, [pc, #92]	; (800d518 <CANBUS_ECU_Switch+0xfc>)
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	0a1b      	lsrs	r3, r3, #8
 800d4be:	b2db      	uxtb	r3, r3
 800d4c0:	777b      	strb	r3, [r7, #29]
	TxCan.TxData[6] = (DB_ECU_Odometer & 0x00FF0000) >> 16;
 800d4c2:	4b15      	ldr	r3, [pc, #84]	; (800d518 <CANBUS_ECU_Switch+0xfc>)
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	0c1b      	lsrs	r3, r3, #16
 800d4c8:	b2db      	uxtb	r3, r3
 800d4ca:	77bb      	strb	r3, [r7, #30]
	TxCan.TxData[7] = (DB_ECU_Odometer & 0xFF000000) >> 24;
 800d4cc:	4b12      	ldr	r3, [pc, #72]	; (800d518 <CANBUS_ECU_Switch+0xfc>)
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	0e1b      	lsrs	r3, r3, #24
 800d4d2:	b2db      	uxtb	r3, r3
 800d4d4:	77fb      	strb	r3, [r7, #31]

	// dummy algorithm
	DB_ECU_Odometer = (DB_ECU_Odometer >= ECU_ODOMETER_MAX ? 0 : (DB_ECU_Odometer + 1));
 800d4d6:	4b10      	ldr	r3, [pc, #64]	; (800d518 <CANBUS_ECU_Switch+0xfc>)
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	4a10      	ldr	r2, [pc, #64]	; (800d51c <CANBUS_ECU_Switch+0x100>)
 800d4dc:	4293      	cmp	r3, r2
 800d4de:	d803      	bhi.n	800d4e8 <CANBUS_ECU_Switch+0xcc>
 800d4e0:	4b0d      	ldr	r3, [pc, #52]	; (800d518 <CANBUS_ECU_Switch+0xfc>)
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	3301      	adds	r3, #1
 800d4e6:	e000      	b.n	800d4ea <CANBUS_ECU_Switch+0xce>
 800d4e8:	2300      	movs	r3, #0
 800d4ea:	4a0b      	ldr	r2, [pc, #44]	; (800d518 <CANBUS_ECU_Switch+0xfc>)
 800d4ec:	6013      	str	r3, [r2, #0]

	// set default header
	CAN_Set_Tx_Header(&(TxCan.TxHeader), CAN_ADDR_ECU_SWITCH, 8);
 800d4ee:	463b      	mov	r3, r7
 800d4f0:	2208      	movs	r2, #8
 800d4f2:	2100      	movs	r1, #0
 800d4f4:	4618      	mov	r0, r3
 800d4f6:	f7ff fed9 	bl	800d2ac <CAN_Set_Tx_Header>
	// send message
	return CAN_Write(&TxCan);
 800d4fa:	463b      	mov	r3, r7
 800d4fc:	4618      	mov	r0, r3
 800d4fe:	f7ff ff15 	bl	800d32c <CAN_Write>
 800d502:	4603      	mov	r3, r0
}
 800d504:	4618      	mov	r0, r3
 800d506:	3720      	adds	r7, #32
 800d508:	46bd      	mov	sp, r7
 800d50a:	bd80      	pop	{r7, pc}
 800d50c:	2000000c 	.word	0x2000000c
 800d510:	20007b4c 	.word	0x20007b4c
 800d514:	200066cc 	.word	0x200066cc
 800d518:	200066d0 	.word	0x200066d0
 800d51c:	0001869e 	.word	0x0001869e

0800d520 <CANBUS_ECU_RTC>:

uint8_t CANBUS_ECU_RTC(void) {
 800d520:	b580      	push	{r7, lr}
 800d522:	b088      	sub	sp, #32
 800d524:	af00      	add	r7, sp, #0
	CAN_Tx TxCan;
	extern timestamp_t DB_ECU_TimeStamp;

	// set message
	RTC_Read_RAW(&DB_ECU_TimeStamp);
 800d526:	4813      	ldr	r0, [pc, #76]	; (800d574 <CANBUS_ECU_RTC+0x54>)
 800d528:	f003 fe26 	bl	8011178 <RTC_Read_RAW>
	TxCan.TxData[0] = DB_ECU_TimeStamp.time.Seconds;
 800d52c:	4b11      	ldr	r3, [pc, #68]	; (800d574 <CANBUS_ECU_RTC+0x54>)
 800d52e:	799b      	ldrb	r3, [r3, #6]
 800d530:	763b      	strb	r3, [r7, #24]
	TxCan.TxData[1] = DB_ECU_TimeStamp.time.Minutes;
 800d532:	4b10      	ldr	r3, [pc, #64]	; (800d574 <CANBUS_ECU_RTC+0x54>)
 800d534:	795b      	ldrb	r3, [r3, #5]
 800d536:	767b      	strb	r3, [r7, #25]
	TxCan.TxData[2] = DB_ECU_TimeStamp.time.Hours;
 800d538:	4b0e      	ldr	r3, [pc, #56]	; (800d574 <CANBUS_ECU_RTC+0x54>)
 800d53a:	791b      	ldrb	r3, [r3, #4]
 800d53c:	76bb      	strb	r3, [r7, #26]
	TxCan.TxData[3] = DB_ECU_TimeStamp.date.Date;
 800d53e:	4b0d      	ldr	r3, [pc, #52]	; (800d574 <CANBUS_ECU_RTC+0x54>)
 800d540:	789b      	ldrb	r3, [r3, #2]
 800d542:	76fb      	strb	r3, [r7, #27]
	TxCan.TxData[4] = DB_ECU_TimeStamp.date.Month;
 800d544:	4b0b      	ldr	r3, [pc, #44]	; (800d574 <CANBUS_ECU_RTC+0x54>)
 800d546:	785b      	ldrb	r3, [r3, #1]
 800d548:	773b      	strb	r3, [r7, #28]
	TxCan.TxData[5] = DB_ECU_TimeStamp.date.Year;
 800d54a:	4b0a      	ldr	r3, [pc, #40]	; (800d574 <CANBUS_ECU_RTC+0x54>)
 800d54c:	78db      	ldrb	r3, [r3, #3]
 800d54e:	777b      	strb	r3, [r7, #29]
	TxCan.TxData[7] = DB_ECU_TimeStamp.date.WeekDay;
 800d550:	4b08      	ldr	r3, [pc, #32]	; (800d574 <CANBUS_ECU_RTC+0x54>)
 800d552:	781b      	ldrb	r3, [r3, #0]
 800d554:	77fb      	strb	r3, [r7, #31]

	// set default header
	CAN_Set_Tx_Header(&(TxCan.TxHeader), CAN_ADDR_ECU_RTC, 8);
 800d556:	463b      	mov	r3, r7
 800d558:	2208      	movs	r2, #8
 800d55a:	2101      	movs	r1, #1
 800d55c:	4618      	mov	r0, r3
 800d55e:	f7ff fea5 	bl	800d2ac <CAN_Set_Tx_Header>
	// send message
	return CAN_Write(&TxCan);
 800d562:	463b      	mov	r3, r7
 800d564:	4618      	mov	r0, r3
 800d566:	f7ff fee1 	bl	800d32c <CAN_Write>
 800d56a:	4603      	mov	r3, r0
}
 800d56c:	4618      	mov	r0, r3
 800d56e:	3720      	adds	r7, #32
 800d570:	46bd      	mov	sp, r7
 800d572:	bd80      	pop	{r7, pc}
 800d574:	20007b4c 	.word	0x20007b4c

0800d578 <CANBUS_ECU_Select_Set>:

uint8_t CANBUS_ECU_Select_Set(void) {
 800d578:	b580      	push	{r7, lr}
 800d57a:	b088      	sub	sp, #32
 800d57c:	af00      	add	r7, sp, #0
	CAN_Tx TxCan;
	extern switcher_t DB_HMI_Switcher;

	// set message
	TxCan.TxData[0] = DB_HMI_Switcher.mode_sub[SWITCH_MODE_DRIVE];
 800d57e:	4b29      	ldr	r3, [pc, #164]	; (800d624 <CANBUS_ECU_Select_Set+0xac>)
 800d580:	785b      	ldrb	r3, [r3, #1]
 800d582:	763b      	strb	r3, [r7, #24]
	TxCan.TxData[0] |= DB_HMI_Switcher.mode_sub[SWITCH_MODE_TRIP] << 2;
 800d584:	7e3b      	ldrb	r3, [r7, #24]
 800d586:	b25a      	sxtb	r2, r3
 800d588:	4b26      	ldr	r3, [pc, #152]	; (800d624 <CANBUS_ECU_Select_Set+0xac>)
 800d58a:	789b      	ldrb	r3, [r3, #2]
 800d58c:	009b      	lsls	r3, r3, #2
 800d58e:	b25b      	sxtb	r3, r3
 800d590:	4313      	orrs	r3, r2
 800d592:	b25b      	sxtb	r3, r3
 800d594:	b2db      	uxtb	r3, r3
 800d596:	763b      	strb	r3, [r7, #24]
	TxCan.TxData[0] |= DB_HMI_Switcher.mode_sub[SWITCH_MODE_REPORT] << 3;
 800d598:	7e3b      	ldrb	r3, [r7, #24]
 800d59a:	b25a      	sxtb	r2, r3
 800d59c:	4b21      	ldr	r3, [pc, #132]	; (800d624 <CANBUS_ECU_Select_Set+0xac>)
 800d59e:	78db      	ldrb	r3, [r3, #3]
 800d5a0:	00db      	lsls	r3, r3, #3
 800d5a2:	b25b      	sxtb	r3, r3
 800d5a4:	4313      	orrs	r3, r2
 800d5a6:	b25b      	sxtb	r3, r3
 800d5a8:	b2db      	uxtb	r3, r3
 800d5aa:	763b      	strb	r3, [r7, #24]
	TxCan.TxData[0] |= DB_HMI_Switcher.mode << 4;
 800d5ac:	7e3b      	ldrb	r3, [r7, #24]
 800d5ae:	b25a      	sxtb	r2, r3
 800d5b0:	4b1c      	ldr	r3, [pc, #112]	; (800d624 <CANBUS_ECU_Select_Set+0xac>)
 800d5b2:	781b      	ldrb	r3, [r3, #0]
 800d5b4:	011b      	lsls	r3, r3, #4
 800d5b6:	b25b      	sxtb	r3, r3
 800d5b8:	4313      	orrs	r3, r2
 800d5ba:	b25b      	sxtb	r3, r3
 800d5bc:	b2db      	uxtb	r3, r3
 800d5be:	763b      	strb	r3, [r7, #24]

	TxCan.TxData[1] = DB_HMI_Switcher.mode_sub_report[SWITCH_MODE_REPORT_RANGE];
 800d5c0:	4b18      	ldr	r3, [pc, #96]	; (800d624 <CANBUS_ECU_Select_Set+0xac>)
 800d5c2:	79db      	ldrb	r3, [r3, #7]
 800d5c4:	767b      	strb	r3, [r7, #25]
	TxCan.TxData[2] = DB_HMI_Switcher.mode_sub_report[SWITCH_MODE_REPORT_EFFICIENCY];
 800d5c6:	4b17      	ldr	r3, [pc, #92]	; (800d624 <CANBUS_ECU_Select_Set+0xac>)
 800d5c8:	7a1b      	ldrb	r3, [r3, #8]
 800d5ca:	76bb      	strb	r3, [r7, #26]

	// dummy algorithm
	if (!DB_HMI_Switcher.mode_sub_report[SWITCH_MODE_REPORT_RANGE]) {
 800d5cc:	4b15      	ldr	r3, [pc, #84]	; (800d624 <CANBUS_ECU_Select_Set+0xac>)
 800d5ce:	79db      	ldrb	r3, [r3, #7]
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d103      	bne.n	800d5dc <CANBUS_ECU_Select_Set+0x64>
		DB_HMI_Switcher.mode_sub_report[SWITCH_MODE_REPORT_RANGE] = 255;
 800d5d4:	4b13      	ldr	r3, [pc, #76]	; (800d624 <CANBUS_ECU_Select_Set+0xac>)
 800d5d6:	22ff      	movs	r2, #255	; 0xff
 800d5d8:	71da      	strb	r2, [r3, #7]
 800d5da:	e005      	b.n	800d5e8 <CANBUS_ECU_Select_Set+0x70>
	} else {
		DB_HMI_Switcher.mode_sub_report[SWITCH_MODE_REPORT_RANGE]--;
 800d5dc:	4b11      	ldr	r3, [pc, #68]	; (800d624 <CANBUS_ECU_Select_Set+0xac>)
 800d5de:	79db      	ldrb	r3, [r3, #7]
 800d5e0:	3b01      	subs	r3, #1
 800d5e2:	b2da      	uxtb	r2, r3
 800d5e4:	4b0f      	ldr	r3, [pc, #60]	; (800d624 <CANBUS_ECU_Select_Set+0xac>)
 800d5e6:	71da      	strb	r2, [r3, #7]
	}

	if (DB_HMI_Switcher.mode_sub_report[SWITCH_MODE_REPORT_EFFICIENCY] >= 255) {
 800d5e8:	4b0e      	ldr	r3, [pc, #56]	; (800d624 <CANBUS_ECU_Select_Set+0xac>)
 800d5ea:	7a1b      	ldrb	r3, [r3, #8]
 800d5ec:	2bff      	cmp	r3, #255	; 0xff
 800d5ee:	d103      	bne.n	800d5f8 <CANBUS_ECU_Select_Set+0x80>
		DB_HMI_Switcher.mode_sub_report[SWITCH_MODE_REPORT_EFFICIENCY] = 0;
 800d5f0:	4b0c      	ldr	r3, [pc, #48]	; (800d624 <CANBUS_ECU_Select_Set+0xac>)
 800d5f2:	2200      	movs	r2, #0
 800d5f4:	721a      	strb	r2, [r3, #8]
 800d5f6:	e005      	b.n	800d604 <CANBUS_ECU_Select_Set+0x8c>
	} else {
		DB_HMI_Switcher.mode_sub_report[SWITCH_MODE_REPORT_EFFICIENCY]++;
 800d5f8:	4b0a      	ldr	r3, [pc, #40]	; (800d624 <CANBUS_ECU_Select_Set+0xac>)
 800d5fa:	7a1b      	ldrb	r3, [r3, #8]
 800d5fc:	3301      	adds	r3, #1
 800d5fe:	b2da      	uxtb	r2, r3
 800d600:	4b08      	ldr	r3, [pc, #32]	; (800d624 <CANBUS_ECU_Select_Set+0xac>)
 800d602:	721a      	strb	r2, [r3, #8]
	}

	// set default header
	CAN_Set_Tx_Header(&(TxCan.TxHeader), CAN_ADDR_ECU_SELECT_SET, 3);
 800d604:	463b      	mov	r3, r7
 800d606:	2203      	movs	r2, #3
 800d608:	2102      	movs	r1, #2
 800d60a:	4618      	mov	r0, r3
 800d60c:	f7ff fe4e 	bl	800d2ac <CAN_Set_Tx_Header>
	// send message
	return CAN_Write(&TxCan);
 800d610:	463b      	mov	r3, r7
 800d612:	4618      	mov	r0, r3
 800d614:	f7ff fe8a 	bl	800d32c <CAN_Write>
 800d618:	4603      	mov	r3, r0
}
 800d61a:	4618      	mov	r0, r3
 800d61c:	3720      	adds	r7, #32
 800d61e:	46bd      	mov	sp, r7
 800d620:	bd80      	pop	{r7, pc}
 800d622:	bf00      	nop
 800d624:	2000007c 	.word	0x2000007c

0800d628 <CANBUS_ECU_Trip_Mode>:

uint8_t CANBUS_ECU_Trip_Mode(void) {
 800d628:	b580      	push	{r7, lr}
 800d62a:	b088      	sub	sp, #32
 800d62c:	af00      	add	r7, sp, #0
	CAN_Tx TxCan;
	extern switcher_t DB_HMI_Switcher;

	// set message
	TxCan.TxData[0] = (DB_HMI_Switcher.mode_sub_trip[SWITCH_MODE_TRIP_A] & 0x000000FF);
 800d62e:	4b31      	ldr	r3, [pc, #196]	; (800d6f4 <CANBUS_ECU_Trip_Mode+0xcc>)
 800d630:	68db      	ldr	r3, [r3, #12]
 800d632:	b2db      	uxtb	r3, r3
 800d634:	763b      	strb	r3, [r7, #24]
	TxCan.TxData[1] = (DB_HMI_Switcher.mode_sub_trip[SWITCH_MODE_TRIP_A] & 0x0000FF00) >> 8;
 800d636:	4b2f      	ldr	r3, [pc, #188]	; (800d6f4 <CANBUS_ECU_Trip_Mode+0xcc>)
 800d638:	68db      	ldr	r3, [r3, #12]
 800d63a:	0a1b      	lsrs	r3, r3, #8
 800d63c:	b2db      	uxtb	r3, r3
 800d63e:	767b      	strb	r3, [r7, #25]
	TxCan.TxData[2] = (DB_HMI_Switcher.mode_sub_trip[SWITCH_MODE_TRIP_A] & 0x00FF0000) >> 16;
 800d640:	4b2c      	ldr	r3, [pc, #176]	; (800d6f4 <CANBUS_ECU_Trip_Mode+0xcc>)
 800d642:	68db      	ldr	r3, [r3, #12]
 800d644:	0c1b      	lsrs	r3, r3, #16
 800d646:	b2db      	uxtb	r3, r3
 800d648:	76bb      	strb	r3, [r7, #26]
	TxCan.TxData[3] = (DB_HMI_Switcher.mode_sub_trip[SWITCH_MODE_TRIP_A] & 0xFF000000) >> 24;
 800d64a:	4b2a      	ldr	r3, [pc, #168]	; (800d6f4 <CANBUS_ECU_Trip_Mode+0xcc>)
 800d64c:	68db      	ldr	r3, [r3, #12]
 800d64e:	0e1b      	lsrs	r3, r3, #24
 800d650:	b2db      	uxtb	r3, r3
 800d652:	76fb      	strb	r3, [r7, #27]
	TxCan.TxData[4] = (DB_HMI_Switcher.mode_sub_trip[SWITCH_MODE_TRIP_B] & 0x000000FF);
 800d654:	4b27      	ldr	r3, [pc, #156]	; (800d6f4 <CANBUS_ECU_Trip_Mode+0xcc>)
 800d656:	691b      	ldr	r3, [r3, #16]
 800d658:	b2db      	uxtb	r3, r3
 800d65a:	773b      	strb	r3, [r7, #28]
	TxCan.TxData[5] = (DB_HMI_Switcher.mode_sub_trip[SWITCH_MODE_TRIP_B] & 0x0000FF00) >> 8;
 800d65c:	4b25      	ldr	r3, [pc, #148]	; (800d6f4 <CANBUS_ECU_Trip_Mode+0xcc>)
 800d65e:	691b      	ldr	r3, [r3, #16]
 800d660:	0a1b      	lsrs	r3, r3, #8
 800d662:	b2db      	uxtb	r3, r3
 800d664:	777b      	strb	r3, [r7, #29]
	TxCan.TxData[6] = (DB_HMI_Switcher.mode_sub_trip[SWITCH_MODE_TRIP_B] & 0x00FF0000) >> 16;
 800d666:	4b23      	ldr	r3, [pc, #140]	; (800d6f4 <CANBUS_ECU_Trip_Mode+0xcc>)
 800d668:	691b      	ldr	r3, [r3, #16]
 800d66a:	0c1b      	lsrs	r3, r3, #16
 800d66c:	b2db      	uxtb	r3, r3
 800d66e:	77bb      	strb	r3, [r7, #30]
	TxCan.TxData[7] = (DB_HMI_Switcher.mode_sub_trip[SWITCH_MODE_TRIP_B] & 0xFF000000) >> 24;
 800d670:	4b20      	ldr	r3, [pc, #128]	; (800d6f4 <CANBUS_ECU_Trip_Mode+0xcc>)
 800d672:	691b      	ldr	r3, [r3, #16]
 800d674:	0e1b      	lsrs	r3, r3, #24
 800d676:	b2db      	uxtb	r3, r3
 800d678:	77fb      	strb	r3, [r7, #31]

	// dummy algorithm
	if (DB_HMI_Switcher.mode_sub_trip[DB_HMI_Switcher.mode_sub[DB_HMI_Switcher.mode]] >= ECU_ODOMETER_MAX) {
 800d67a:	4b1e      	ldr	r3, [pc, #120]	; (800d6f4 <CANBUS_ECU_Trip_Mode+0xcc>)
 800d67c:	781b      	ldrb	r3, [r3, #0]
 800d67e:	461a      	mov	r2, r3
 800d680:	4b1c      	ldr	r3, [pc, #112]	; (800d6f4 <CANBUS_ECU_Trip_Mode+0xcc>)
 800d682:	4413      	add	r3, r2
 800d684:	785b      	ldrb	r3, [r3, #1]
 800d686:	4a1b      	ldr	r2, [pc, #108]	; (800d6f4 <CANBUS_ECU_Trip_Mode+0xcc>)
 800d688:	3302      	adds	r3, #2
 800d68a:	009b      	lsls	r3, r3, #2
 800d68c:	4413      	add	r3, r2
 800d68e:	685b      	ldr	r3, [r3, #4]
 800d690:	4a19      	ldr	r2, [pc, #100]	; (800d6f8 <CANBUS_ECU_Trip_Mode+0xd0>)
 800d692:	4293      	cmp	r3, r2
 800d694:	d90c      	bls.n	800d6b0 <CANBUS_ECU_Trip_Mode+0x88>
		DB_HMI_Switcher.mode_sub_trip[DB_HMI_Switcher.mode_sub[DB_HMI_Switcher.mode]] = 0;
 800d696:	4b17      	ldr	r3, [pc, #92]	; (800d6f4 <CANBUS_ECU_Trip_Mode+0xcc>)
 800d698:	781b      	ldrb	r3, [r3, #0]
 800d69a:	461a      	mov	r2, r3
 800d69c:	4b15      	ldr	r3, [pc, #84]	; (800d6f4 <CANBUS_ECU_Trip_Mode+0xcc>)
 800d69e:	4413      	add	r3, r2
 800d6a0:	785b      	ldrb	r3, [r3, #1]
 800d6a2:	4a14      	ldr	r2, [pc, #80]	; (800d6f4 <CANBUS_ECU_Trip_Mode+0xcc>)
 800d6a4:	3302      	adds	r3, #2
 800d6a6:	009b      	lsls	r3, r3, #2
 800d6a8:	4413      	add	r3, r2
 800d6aa:	2200      	movs	r2, #0
 800d6ac:	605a      	str	r2, [r3, #4]
 800d6ae:	e011      	b.n	800d6d4 <CANBUS_ECU_Trip_Mode+0xac>
	} else {
		DB_HMI_Switcher.mode_sub_trip[DB_HMI_Switcher.mode_sub[DB_HMI_Switcher.mode]]++;
 800d6b0:	4b10      	ldr	r3, [pc, #64]	; (800d6f4 <CANBUS_ECU_Trip_Mode+0xcc>)
 800d6b2:	781b      	ldrb	r3, [r3, #0]
 800d6b4:	461a      	mov	r2, r3
 800d6b6:	4b0f      	ldr	r3, [pc, #60]	; (800d6f4 <CANBUS_ECU_Trip_Mode+0xcc>)
 800d6b8:	4413      	add	r3, r2
 800d6ba:	785b      	ldrb	r3, [r3, #1]
 800d6bc:	461a      	mov	r2, r3
 800d6be:	490d      	ldr	r1, [pc, #52]	; (800d6f4 <CANBUS_ECU_Trip_Mode+0xcc>)
 800d6c0:	1c93      	adds	r3, r2, #2
 800d6c2:	009b      	lsls	r3, r3, #2
 800d6c4:	440b      	add	r3, r1
 800d6c6:	685b      	ldr	r3, [r3, #4]
 800d6c8:	1c59      	adds	r1, r3, #1
 800d6ca:	480a      	ldr	r0, [pc, #40]	; (800d6f4 <CANBUS_ECU_Trip_Mode+0xcc>)
 800d6cc:	1c93      	adds	r3, r2, #2
 800d6ce:	009b      	lsls	r3, r3, #2
 800d6d0:	4403      	add	r3, r0
 800d6d2:	6059      	str	r1, [r3, #4]
	}

	// set default header
	CAN_Set_Tx_Header(&(TxCan.TxHeader), CAN_ADDR_ECU_TRIP_MODE, 8);
 800d6d4:	463b      	mov	r3, r7
 800d6d6:	2208      	movs	r2, #8
 800d6d8:	2103      	movs	r1, #3
 800d6da:	4618      	mov	r0, r3
 800d6dc:	f7ff fde6 	bl	800d2ac <CAN_Set_Tx_Header>
	// send message
	return CAN_Write(&TxCan);
 800d6e0:	463b      	mov	r3, r7
 800d6e2:	4618      	mov	r0, r3
 800d6e4:	f7ff fe22 	bl	800d32c <CAN_Write>
 800d6e8:	4603      	mov	r3, r0
}
 800d6ea:	4618      	mov	r0, r3
 800d6ec:	3720      	adds	r7, #32
 800d6ee:	46bd      	mov	sp, r7
 800d6f0:	bd80      	pop	{r7, pc}
 800d6f2:	bf00      	nop
 800d6f4:	2000007c 	.word	0x2000007c
 800d6f8:	0001869e 	.word	0x0001869e

0800d6fc <BSP_Led_Write_All>:
 *      Author: Puja
 */

#include "_config.h"

void BSP_Led_Write_All(uint8_t state) {
 800d6fc:	b580      	push	{r7, lr}
 800d6fe:	b082      	sub	sp, #8
 800d700:	af00      	add	r7, sp, #0
 800d702:	4603      	mov	r3, r0
 800d704:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, state);
 800d706:	79fb      	ldrb	r3, [r7, #7]
 800d708:	461a      	mov	r2, r3
 800d70a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800d70e:	480e      	ldr	r0, [pc, #56]	; (800d748 <BSP_Led_Write_All+0x4c>)
 800d710:	f7f5 fd54 	bl	80031bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, state);
 800d714:	79fb      	ldrb	r3, [r7, #7]
 800d716:	461a      	mov	r2, r3
 800d718:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800d71c:	480a      	ldr	r0, [pc, #40]	; (800d748 <BSP_Led_Write_All+0x4c>)
 800d71e:	f7f5 fd4d 	bl	80031bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, state);
 800d722:	79fb      	ldrb	r3, [r7, #7]
 800d724:	461a      	mov	r2, r3
 800d726:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800d72a:	4807      	ldr	r0, [pc, #28]	; (800d748 <BSP_Led_Write_All+0x4c>)
 800d72c:	f7f5 fd46 	bl	80031bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, state);
 800d730:	79fb      	ldrb	r3, [r7, #7]
 800d732:	461a      	mov	r2, r3
 800d734:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800d738:	4803      	ldr	r0, [pc, #12]	; (800d748 <BSP_Led_Write_All+0x4c>)
 800d73a:	f7f5 fd3f 	bl	80031bc <HAL_GPIO_WritePin>
}
 800d73e:	bf00      	nop
 800d740:	3708      	adds	r7, #8
 800d742:	46bd      	mov	sp, r7
 800d744:	bd80      	pop	{r7, pc}
 800d746:	bf00      	nop
 800d748:	40020c00 	.word	0x40020c00

0800d74c <BSP_Led_Toggle_All>:

void BSP_Led_Toggle_All(void) {
 800d74c:	b580      	push	{r7, lr}
 800d74e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LD6_GPIO_Port, LD6_Pin);
 800d750:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800d754:	4809      	ldr	r0, [pc, #36]	; (800d77c <BSP_Led_Toggle_All+0x30>)
 800d756:	f7f5 fd4a 	bl	80031ee <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LD5_GPIO_Port, LD5_Pin);
 800d75a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800d75e:	4807      	ldr	r0, [pc, #28]	; (800d77c <BSP_Led_Toggle_All+0x30>)
 800d760:	f7f5 fd45 	bl	80031ee <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 800d764:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800d768:	4804      	ldr	r0, [pc, #16]	; (800d77c <BSP_Led_Toggle_All+0x30>)
 800d76a:	f7f5 fd40 	bl	80031ee <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 800d76e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800d772:	4802      	ldr	r0, [pc, #8]	; (800d77c <BSP_Led_Toggle_All+0x30>)
 800d774:	f7f5 fd3b 	bl	80031ee <HAL_GPIO_TogglePin>
}
 800d778:	bf00      	nop
 800d77a:	bd80      	pop	{r7, pc}
 800d77c:	40020c00 	.word	0x40020c00

0800d780 <BSP_Led_Disco>:

void BSP_Led_Disco(uint16_t ms) {
 800d780:	b580      	push	{r7, lr}
 800d782:	b084      	sub	sp, #16
 800d784:	af00      	add	r7, sp, #0
 800d786:	4603      	mov	r3, r0
 800d788:	80fb      	strh	r3, [r7, #6]
	uint8_t i = 100;
 800d78a:	2364      	movs	r3, #100	; 0x64
 800d78c:	73fb      	strb	r3, [r7, #15]
	uint16_t delay = ms / i;
 800d78e:	88fa      	ldrh	r2, [r7, #6]
 800d790:	7bfb      	ldrb	r3, [r7, #15]
 800d792:	fb92 f3f3 	sdiv	r3, r2, r3
 800d796:	81bb      	strh	r3, [r7, #12]

	while (i--) {
 800d798:	e005      	b.n	800d7a6 <BSP_Led_Disco+0x26>
		BSP_Led_Toggle_All();
 800d79a:	f7ff ffd7 	bl	800d74c <BSP_Led_Toggle_All>
		osDelay(delay);
 800d79e:	89bb      	ldrh	r3, [r7, #12]
 800d7a0:	4618      	mov	r0, r3
 800d7a2:	f7fa fd82 	bl	80082aa <osDelay>
	while (i--) {
 800d7a6:	7bfb      	ldrb	r3, [r7, #15]
 800d7a8:	1e5a      	subs	r2, r3, #1
 800d7aa:	73fa      	strb	r2, [r7, #15]
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d1f4      	bne.n	800d79a <BSP_Led_Disco+0x1a>
	}

}
 800d7b0:	bf00      	nop
 800d7b2:	3710      	adds	r7, #16
 800d7b4:	46bd      	mov	sp, r7
 800d7b6:	bd80      	pop	{r7, pc}

0800d7b8 <ftoa>:

// Converts a floating point number to string.
void ftoa(float f, char *str, char size) {
 800d7b8:	b580      	push	{r7, lr}
 800d7ba:	b0a0      	sub	sp, #128	; 0x80
 800d7bc:	af00      	add	r7, sp, #0
 800d7be:	ed87 0a03 	vstr	s0, [r7, #12]
 800d7c2:	60b8      	str	r0, [r7, #8]
 800d7c4:	460b      	mov	r3, r1
 800d7c6:	71fb      	strb	r3, [r7, #7]
	uint8_t pos;  // position in string
	char len;  // length of decimal part of result
	char curr[100];  // temp holder for next digit
	int value;  // decimal digit(s) to convert
	pos = 0;  // initialize pos, just to be sure
 800d7c8:	2300      	movs	r3, #0
 800d7ca:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

	value = (int) f;  // truncate the floating point number
 800d7ce:	edd7 7a03 	vldr	s15, [r7, #12]
 800d7d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d7d6:	ee17 3a90 	vmov	r3, s15
 800d7da:	67bb      	str	r3, [r7, #120]	; 0x78
	itoa(value, str, 10);  // this is kinda dangerous depending on the length of str
 800d7dc:	220a      	movs	r2, #10
 800d7de:	68b9      	ldr	r1, [r7, #8]
 800d7e0:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800d7e2:	f007 fcbf 	bl	8015164 <itoa>
	// now str array has the digits before the decimal

	if (f < 0)  // handle negative numbers
 800d7e6:	edd7 7a03 	vldr	s15, [r7, #12]
 800d7ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d7ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7f2:	d508      	bpl.n	800d806 <ftoa+0x4e>
			{
		f *= -1;
 800d7f4:	edd7 7a03 	vldr	s15, [r7, #12]
 800d7f8:	eef1 7a67 	vneg.f32	s15, s15
 800d7fc:	edc7 7a03 	vstr	s15, [r7, #12]
		value *= -1;
 800d800:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d802:	425b      	negs	r3, r3
 800d804:	67bb      	str	r3, [r7, #120]	; 0x78
	}

	len = strlen(str);  // find out how big the integer part was
 800d806:	68b8      	ldr	r0, [r7, #8]
 800d808:	f7f2 fcec 	bl	80001e4 <strlen>
 800d80c:	4603      	mov	r3, r0
 800d80e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	pos = len;  // position the pointer to the end of the integer part
 800d812:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800d816:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	str[pos++] = '.';  // add decimal point to string
 800d81a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d81e:	1c5a      	adds	r2, r3, #1
 800d820:	f887 207f 	strb.w	r2, [r7, #127]	; 0x7f
 800d824:	461a      	mov	r2, r3
 800d826:	68bb      	ldr	r3, [r7, #8]
 800d828:	4413      	add	r3, r2
 800d82a:	222e      	movs	r2, #46	; 0x2e
 800d82c:	701a      	strb	r2, [r3, #0]

	while (pos < (size + len + 1))  // process remaining digits
 800d82e:	e02a      	b.n	800d886 <ftoa+0xce>
	{
		f = f - (float) value;  // hack off the whole part of the number
 800d830:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d832:	ee07 3a90 	vmov	s15, r3
 800d836:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d83a:	ed97 7a03 	vldr	s14, [r7, #12]
 800d83e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d842:	edc7 7a03 	vstr	s15, [r7, #12]
		f *= 10;  // move next digit over
 800d846:	edd7 7a03 	vldr	s15, [r7, #12]
 800d84a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800d84e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d852:	edc7 7a03 	vstr	s15, [r7, #12]
		value = (int) f;  // get next digit
 800d856:	edd7 7a03 	vldr	s15, [r7, #12]
 800d85a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d85e:	ee17 3a90 	vmov	r3, s15
 800d862:	67bb      	str	r3, [r7, #120]	; 0x78
		itoa(value, curr, 10); // convert digit to string
 800d864:	f107 0310 	add.w	r3, r7, #16
 800d868:	220a      	movs	r2, #10
 800d86a:	4619      	mov	r1, r3
 800d86c:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800d86e:	f007 fc79 	bl	8015164 <itoa>
		str[pos++] = *curr; // add digit to result string and increment pointer
 800d872:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d876:	1c5a      	adds	r2, r3, #1
 800d878:	f887 207f 	strb.w	r2, [r7, #127]	; 0x7f
 800d87c:	461a      	mov	r2, r3
 800d87e:	68bb      	ldr	r3, [r7, #8]
 800d880:	4413      	add	r3, r2
 800d882:	7c3a      	ldrb	r2, [r7, #16]
 800d884:	701a      	strb	r2, [r3, #0]
	while (pos < (size + len + 1))  // process remaining digits
 800d886:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 800d88a:	79f9      	ldrb	r1, [r7, #7]
 800d88c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800d890:	440b      	add	r3, r1
 800d892:	3301      	adds	r3, #1
 800d894:	429a      	cmp	r2, r3
 800d896:	dbcb      	blt.n	800d830 <ftoa+0x78>
	}
}
 800d898:	bf00      	nop
 800d89a:	3780      	adds	r7, #128	; 0x80
 800d89c:	46bd      	mov	sp, r7
 800d89e:	bd80      	pop	{r7, pc}

0800d8a0 <EE_Init>:
 *   corruption after a power loss.
 * @param  None.
 * @retval - Flash error code: on write Flash error
 *         - FLASH_COMPLETE: on success
 */
uint16_t EE_Init(void) {
 800d8a0:	b580      	push	{r7, lr}
 800d8a2:	b08a      	sub	sp, #40	; 0x28
 800d8a4:	af00      	add	r7, sp, #0
	uint16_t PageStatus0 = 6, PageStatus1 = 6;
 800d8a6:	2306      	movs	r3, #6
 800d8a8:	847b      	strh	r3, [r7, #34]	; 0x22
 800d8aa:	2306      	movs	r3, #6
 800d8ac:	843b      	strh	r3, [r7, #32]
	uint16_t VarIdx = 0;
 800d8ae:	2300      	movs	r3, #0
 800d8b0:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t EepromStatus = 0, ReadStatus = 0;
 800d8b2:	2300      	movs	r3, #0
 800d8b4:	83fb      	strh	r3, [r7, #30]
 800d8b6:	2300      	movs	r3, #0
 800d8b8:	83bb      	strh	r3, [r7, #28]
	int16_t x = -1;
 800d8ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d8be:	84bb      	strh	r3, [r7, #36]	; 0x24
	HAL_StatusTypeDef FlashStatus;
	uint32_t SectorError = 0;
 800d8c0:	2300      	movs	r3, #0
 800d8c2:	617b      	str	r3, [r7, #20]
	FLASH_EraseInitTypeDef pEraseInit;

	/* Unlock the Flash Program Erase controller */
	HAL_FLASH_Unlock();
 800d8c4:	f7f4 ff5e 	bl	8002784 <HAL_FLASH_Unlock>

	/* Get Page0 status */
	PageStatus0 = (*(__IO uint16_t*) PAGE0_BASE_ADDRESS);
 800d8c8:	4b9f      	ldr	r3, [pc, #636]	; (800db48 <EE_Init+0x2a8>)
 800d8ca:	881b      	ldrh	r3, [r3, #0]
 800d8cc:	847b      	strh	r3, [r7, #34]	; 0x22
	/* Get Page1 status */
	PageStatus1 = (*(__IO uint16_t*) PAGE1_BASE_ADDRESS);
 800d8ce:	4b9f      	ldr	r3, [pc, #636]	; (800db4c <EE_Init+0x2ac>)
 800d8d0:	881b      	ldrh	r3, [r3, #0]
 800d8d2:	843b      	strh	r3, [r7, #32]

	pEraseInit.TypeErase = TYPEERASE_SECTORS;
 800d8d4:	2300      	movs	r3, #0
 800d8d6:	603b      	str	r3, [r7, #0]
	pEraseInit.Sector = PAGE0_ID;
 800d8d8:	230a      	movs	r3, #10
 800d8da:	60bb      	str	r3, [r7, #8]
	pEraseInit.NbSectors = 1;
 800d8dc:	2301      	movs	r3, #1
 800d8de:	60fb      	str	r3, [r7, #12]
	pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800d8e0:	2302      	movs	r3, #2
 800d8e2:	613b      	str	r3, [r7, #16]

	/* Check for invalid header states and repair if necessary */
	switch (PageStatus0) {
 800d8e4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d8e6:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 800d8ea:	4293      	cmp	r3, r2
 800d8ec:	d057      	beq.n	800d99e <EE_Init+0xfe>
 800d8ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d8f2:	4293      	cmp	r3, r2
 800d8f4:	d003      	beq.n	800d8fe <EE_Init+0x5e>
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	f000 80f4 	beq.w	800dae4 <EE_Init+0x244>
 800d8fc:	e18d      	b.n	800dc1a <EE_Init+0x37a>
		case ERASED:
			if (PageStatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 800d8fe:	8c3b      	ldrh	r3, [r7, #32]
 800d900:	2b00      	cmp	r3, #0
 800d902:	d116      	bne.n	800d932 <EE_Init+0x92>
			{
				/* Erase Page0 */
				if (!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS)) {
 800d904:	4890      	ldr	r0, [pc, #576]	; (800db48 <EE_Init+0x2a8>)
 800d906:	f000 f9a9 	bl	800dc5c <EE_VerifyPageFullyErased>
 800d90a:	4603      	mov	r3, r0
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	f040 818e 	bne.w	800dc2e <EE_Init+0x38e>
					FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800d912:	f107 0214 	add.w	r2, r7, #20
 800d916:	463b      	mov	r3, r7
 800d918:	4611      	mov	r1, r2
 800d91a:	4618      	mov	r0, r3
 800d91c:	f7f5 f880 	bl	8002a20 <HAL_FLASHEx_Erase>
 800d920:	4603      	mov	r3, r0
 800d922:	76fb      	strb	r3, [r7, #27]
					/* If erase operation was failed, a Flash error code is returned */
					if (FlashStatus != HAL_OK) {
 800d924:	7efb      	ldrb	r3, [r7, #27]
 800d926:	2b00      	cmp	r3, #0
 800d928:	f000 8181 	beq.w	800dc2e <EE_Init+0x38e>
						return FlashStatus;
 800d92c:	7efb      	ldrb	r3, [r7, #27]
 800d92e:	b29b      	uxth	r3, r3
 800d930:	e185      	b.n	800dc3e <EE_Init+0x39e>
					}
				}
			} else if (PageStatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 800d932:	8c3b      	ldrh	r3, [r7, #32]
 800d934:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 800d938:	4293      	cmp	r3, r2
 800d93a:	d125      	bne.n	800d988 <EE_Init+0xe8>
			{
				/* Erase Page0 */
				if (!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS)) {
 800d93c:	4882      	ldr	r0, [pc, #520]	; (800db48 <EE_Init+0x2a8>)
 800d93e:	f000 f98d 	bl	800dc5c <EE_VerifyPageFullyErased>
 800d942:	4603      	mov	r3, r0
 800d944:	2b00      	cmp	r3, #0
 800d946:	d10e      	bne.n	800d966 <EE_Init+0xc6>
					FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800d948:	f107 0214 	add.w	r2, r7, #20
 800d94c:	463b      	mov	r3, r7
 800d94e:	4611      	mov	r1, r2
 800d950:	4618      	mov	r0, r3
 800d952:	f7f5 f865 	bl	8002a20 <HAL_FLASHEx_Erase>
 800d956:	4603      	mov	r3, r0
 800d958:	76fb      	strb	r3, [r7, #27]
					/* If erase operation was failed, a Flash error code is returned */
					if (FlashStatus != HAL_OK) {
 800d95a:	7efb      	ldrb	r3, [r7, #27]
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d002      	beq.n	800d966 <EE_Init+0xc6>
						return FlashStatus;
 800d960:	7efb      	ldrb	r3, [r7, #27]
 800d962:	b29b      	uxth	r3, r3
 800d964:	e16b      	b.n	800dc3e <EE_Init+0x39e>
					}
				}
				/* Mark Page1 as valid */
				FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);
 800d966:	f04f 0200 	mov.w	r2, #0
 800d96a:	f04f 0300 	mov.w	r3, #0
 800d96e:	4977      	ldr	r1, [pc, #476]	; (800db4c <EE_Init+0x2ac>)
 800d970:	2001      	movs	r0, #1
 800d972:	f7f4 feb3 	bl	80026dc <HAL_FLASH_Program>
 800d976:	4603      	mov	r3, r0
 800d978:	76fb      	strb	r3, [r7, #27]
				/* If program operation was failed, a Flash error code is returned */
				if (FlashStatus != HAL_OK) {
 800d97a:	7efb      	ldrb	r3, [r7, #27]
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	f000 8156 	beq.w	800dc2e <EE_Init+0x38e>
					return FlashStatus;
 800d982:	7efb      	ldrb	r3, [r7, #27]
 800d984:	b29b      	uxth	r3, r3
 800d986:	e15a      	b.n	800dc3e <EE_Init+0x39e>
				}
			} else /* First EEPROM access (Page0&1 are erased) or invalid state -> format EEPROM */
			{
				/* Erase both Page0 and Page1 and set Page0 as valid page */
				FlashStatus = EE_Format();
 800d988:	f000 f9fa 	bl	800dd80 <EE_Format>
 800d98c:	4603      	mov	r3, r0
 800d98e:	76fb      	strb	r3, [r7, #27]
				/* If erase/program operation was failed, a Flash error code is returned */
				if (FlashStatus != HAL_OK) {
 800d990:	7efb      	ldrb	r3, [r7, #27]
 800d992:	2b00      	cmp	r3, #0
 800d994:	f000 814b 	beq.w	800dc2e <EE_Init+0x38e>
					return FlashStatus;
 800d998:	7efb      	ldrb	r3, [r7, #27]
 800d99a:	b29b      	uxth	r3, r3
 800d99c:	e14f      	b.n	800dc3e <EE_Init+0x39e>
				}
			}
			break;

		case RECEIVE_DATA:
			if (PageStatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 800d99e:	8c3b      	ldrh	r3, [r7, #32]
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d163      	bne.n	800da6c <EE_Init+0x1cc>
			{
				/* Transfer data from Page1 to Page0 */
				for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++) {
 800d9a4:	2300      	movs	r3, #0
 800d9a6:	84fb      	strh	r3, [r7, #38]	; 0x26
 800d9a8:	e030      	b.n	800da0c <EE_Init+0x16c>
					if ((*(__IO uint16_t*) (PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx]) {
 800d9aa:	4b69      	ldr	r3, [pc, #420]	; (800db50 <EE_Init+0x2b0>)
 800d9ac:	881b      	ldrh	r3, [r3, #0]
 800d9ae:	b29a      	uxth	r2, r3
 800d9b0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d9b2:	4968      	ldr	r1, [pc, #416]	; (800db54 <EE_Init+0x2b4>)
 800d9b4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800d9b8:	429a      	cmp	r2, r3
 800d9ba:	d101      	bne.n	800d9c0 <EE_Init+0x120>
						x = VarIdx;
 800d9bc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d9be:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
					if (VarIdx != x) {
 800d9c0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800d9c2:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800d9c6:	429a      	cmp	r2, r3
 800d9c8:	d01d      	beq.n	800da06 <EE_Init+0x166>
						/* Read the last variables' updates */
						ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 800d9ca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d9cc:	4a61      	ldr	r2, [pc, #388]	; (800db54 <EE_Init+0x2b4>)
 800d9ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d9d2:	4961      	ldr	r1, [pc, #388]	; (800db58 <EE_Init+0x2b8>)
 800d9d4:	4618      	mov	r0, r3
 800d9d6:	f000 f967 	bl	800dca8 <EE_ReadVariable>
 800d9da:	4603      	mov	r3, r0
 800d9dc:	83bb      	strh	r3, [r7, #28]
						/* In case variable corresponding to the virtual address was found */
						if (ReadStatus != 0x1) {
 800d9de:	8bbb      	ldrh	r3, [r7, #28]
 800d9e0:	2b01      	cmp	r3, #1
 800d9e2:	d010      	beq.n	800da06 <EE_Init+0x166>
							/* Transfer the variable to the Page0 */
							EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 800d9e4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d9e6:	4a5b      	ldr	r2, [pc, #364]	; (800db54 <EE_Init+0x2b4>)
 800d9e8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800d9ec:	4b5a      	ldr	r3, [pc, #360]	; (800db58 <EE_Init+0x2b8>)
 800d9ee:	881b      	ldrh	r3, [r3, #0]
 800d9f0:	4619      	mov	r1, r3
 800d9f2:	4610      	mov	r0, r2
 800d9f4:	f000 fa5c 	bl	800deb0 <EE_VerifyPageFullWriteVariable>
 800d9f8:	4603      	mov	r3, r0
 800d9fa:	83fb      	strh	r3, [r7, #30]
							/* If program operation was failed, a Flash error code is returned */
							if (EepromStatus != HAL_OK) {
 800d9fc:	8bfb      	ldrh	r3, [r7, #30]
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d001      	beq.n	800da06 <EE_Init+0x166>
								return EepromStatus;
 800da02:	8bfb      	ldrh	r3, [r7, #30]
 800da04:	e11b      	b.n	800dc3e <EE_Init+0x39e>
				for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++) {
 800da06:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800da08:	3301      	adds	r3, #1
 800da0a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800da0c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800da0e:	2b01      	cmp	r3, #1
 800da10:	d9cb      	bls.n	800d9aa <EE_Init+0x10a>
							}
						}
					}
				}
				/* Mark Page0 as valid */
				FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 800da12:	f04f 0200 	mov.w	r2, #0
 800da16:	f04f 0300 	mov.w	r3, #0
 800da1a:	494b      	ldr	r1, [pc, #300]	; (800db48 <EE_Init+0x2a8>)
 800da1c:	2001      	movs	r0, #1
 800da1e:	f7f4 fe5d 	bl	80026dc <HAL_FLASH_Program>
 800da22:	4603      	mov	r3, r0
 800da24:	76fb      	strb	r3, [r7, #27]
				/* If program operation was failed, a Flash error code is returned */
				if (FlashStatus != HAL_OK) {
 800da26:	7efb      	ldrb	r3, [r7, #27]
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d002      	beq.n	800da32 <EE_Init+0x192>
					return FlashStatus;
 800da2c:	7efb      	ldrb	r3, [r7, #27]
 800da2e:	b29b      	uxth	r3, r3
 800da30:	e105      	b.n	800dc3e <EE_Init+0x39e>
				}
				pEraseInit.Sector = PAGE1_ID;
 800da32:	230b      	movs	r3, #11
 800da34:	60bb      	str	r3, [r7, #8]
				pEraseInit.NbSectors = 1;
 800da36:	2301      	movs	r3, #1
 800da38:	60fb      	str	r3, [r7, #12]
				pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800da3a:	2302      	movs	r3, #2
 800da3c:	613b      	str	r3, [r7, #16]
				/* Erase Page1 */
				if (!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS)) {
 800da3e:	4843      	ldr	r0, [pc, #268]	; (800db4c <EE_Init+0x2ac>)
 800da40:	f000 f90c 	bl	800dc5c <EE_VerifyPageFullyErased>
 800da44:	4603      	mov	r3, r0
 800da46:	2b00      	cmp	r3, #0
 800da48:	f040 80f3 	bne.w	800dc32 <EE_Init+0x392>
					FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800da4c:	f107 0214 	add.w	r2, r7, #20
 800da50:	463b      	mov	r3, r7
 800da52:	4611      	mov	r1, r2
 800da54:	4618      	mov	r0, r3
 800da56:	f7f4 ffe3 	bl	8002a20 <HAL_FLASHEx_Erase>
 800da5a:	4603      	mov	r3, r0
 800da5c:	76fb      	strb	r3, [r7, #27]
					/* If erase operation was failed, a Flash error code is returned */
					if (FlashStatus != HAL_OK) {
 800da5e:	7efb      	ldrb	r3, [r7, #27]
 800da60:	2b00      	cmp	r3, #0
 800da62:	f000 80e6 	beq.w	800dc32 <EE_Init+0x392>
						return FlashStatus;
 800da66:	7efb      	ldrb	r3, [r7, #27]
 800da68:	b29b      	uxth	r3, r3
 800da6a:	e0e8      	b.n	800dc3e <EE_Init+0x39e>
					}
				}
			} else if (PageStatus1 == ERASED) /* Page0 receive, Page1 erased */
 800da6c:	8c3b      	ldrh	r3, [r7, #32]
 800da6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800da72:	4293      	cmp	r3, r2
 800da74:	d12b      	bne.n	800dace <EE_Init+0x22e>
			{
				pEraseInit.Sector = PAGE1_ID;
 800da76:	230b      	movs	r3, #11
 800da78:	60bb      	str	r3, [r7, #8]
				pEraseInit.NbSectors = 1;
 800da7a:	2301      	movs	r3, #1
 800da7c:	60fb      	str	r3, [r7, #12]
				pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800da7e:	2302      	movs	r3, #2
 800da80:	613b      	str	r3, [r7, #16]
				/* Erase Page1 */
				if (!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS)) {
 800da82:	4832      	ldr	r0, [pc, #200]	; (800db4c <EE_Init+0x2ac>)
 800da84:	f000 f8ea 	bl	800dc5c <EE_VerifyPageFullyErased>
 800da88:	4603      	mov	r3, r0
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d10e      	bne.n	800daac <EE_Init+0x20c>
					FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800da8e:	f107 0214 	add.w	r2, r7, #20
 800da92:	463b      	mov	r3, r7
 800da94:	4611      	mov	r1, r2
 800da96:	4618      	mov	r0, r3
 800da98:	f7f4 ffc2 	bl	8002a20 <HAL_FLASHEx_Erase>
 800da9c:	4603      	mov	r3, r0
 800da9e:	76fb      	strb	r3, [r7, #27]
					/* If erase operation was failed, a Flash error code is returned */
					if (FlashStatus != HAL_OK) {
 800daa0:	7efb      	ldrb	r3, [r7, #27]
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d002      	beq.n	800daac <EE_Init+0x20c>
						return FlashStatus;
 800daa6:	7efb      	ldrb	r3, [r7, #27]
 800daa8:	b29b      	uxth	r3, r3
 800daaa:	e0c8      	b.n	800dc3e <EE_Init+0x39e>
					}
				}
				/* Mark Page0 as valid */
				FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 800daac:	f04f 0200 	mov.w	r2, #0
 800dab0:	f04f 0300 	mov.w	r3, #0
 800dab4:	4924      	ldr	r1, [pc, #144]	; (800db48 <EE_Init+0x2a8>)
 800dab6:	2001      	movs	r0, #1
 800dab8:	f7f4 fe10 	bl	80026dc <HAL_FLASH_Program>
 800dabc:	4603      	mov	r3, r0
 800dabe:	76fb      	strb	r3, [r7, #27]
				/* If program operation was failed, a Flash error code is returned */
				if (FlashStatus != HAL_OK) {
 800dac0:	7efb      	ldrb	r3, [r7, #27]
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	f000 80b5 	beq.w	800dc32 <EE_Init+0x392>
					return FlashStatus;
 800dac8:	7efb      	ldrb	r3, [r7, #27]
 800daca:	b29b      	uxth	r3, r3
 800dacc:	e0b7      	b.n	800dc3e <EE_Init+0x39e>
				}
			} else /* Invalid state -> format eeprom */
			{
				/* Erase both Page0 and Page1 and set Page0 as valid page */
				FlashStatus = EE_Format();
 800dace:	f000 f957 	bl	800dd80 <EE_Format>
 800dad2:	4603      	mov	r3, r0
 800dad4:	76fb      	strb	r3, [r7, #27]
				/* If erase/program operation was failed, a Flash error code is returned */
				if (FlashStatus != HAL_OK) {
 800dad6:	7efb      	ldrb	r3, [r7, #27]
 800dad8:	2b00      	cmp	r3, #0
 800dada:	f000 80aa 	beq.w	800dc32 <EE_Init+0x392>
					return FlashStatus;
 800dade:	7efb      	ldrb	r3, [r7, #27]
 800dae0:	b29b      	uxth	r3, r3
 800dae2:	e0ac      	b.n	800dc3e <EE_Init+0x39e>
				}
			}
			break;

		case VALID_PAGE:
			if (PageStatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 800dae4:	8c3b      	ldrh	r3, [r7, #32]
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d10a      	bne.n	800db00 <EE_Init+0x260>
			{
				/* Erase both Page0 and Page1 and set Page0 as valid page */
				FlashStatus = EE_Format();
 800daea:	f000 f949 	bl	800dd80 <EE_Format>
 800daee:	4603      	mov	r3, r0
 800daf0:	76fb      	strb	r3, [r7, #27]
				/* If erase/program operation was failed, a Flash error code is returned */
				if (FlashStatus != HAL_OK) {
 800daf2:	7efb      	ldrb	r3, [r7, #27]
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	f000 809e 	beq.w	800dc36 <EE_Init+0x396>
					return FlashStatus;
 800dafa:	7efb      	ldrb	r3, [r7, #27]
 800dafc:	b29b      	uxth	r3, r3
 800dafe:	e09e      	b.n	800dc3e <EE_Init+0x39e>
				}
			} else if (PageStatus1 == ERASED) /* Page0 valid, Page1 erased */
 800db00:	8c3b      	ldrh	r3, [r7, #32]
 800db02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800db06:	4293      	cmp	r3, r2
 800db08:	d11b      	bne.n	800db42 <EE_Init+0x2a2>
			{
				pEraseInit.Sector = PAGE1_ID;
 800db0a:	230b      	movs	r3, #11
 800db0c:	60bb      	str	r3, [r7, #8]
				pEraseInit.NbSectors = 1;
 800db0e:	2301      	movs	r3, #1
 800db10:	60fb      	str	r3, [r7, #12]
				pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800db12:	2302      	movs	r3, #2
 800db14:	613b      	str	r3, [r7, #16]
				/* Erase Page1 */
				if (!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS)) {
 800db16:	480d      	ldr	r0, [pc, #52]	; (800db4c <EE_Init+0x2ac>)
 800db18:	f000 f8a0 	bl	800dc5c <EE_VerifyPageFullyErased>
 800db1c:	4603      	mov	r3, r0
 800db1e:	2b00      	cmp	r3, #0
 800db20:	f040 8089 	bne.w	800dc36 <EE_Init+0x396>
					FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800db24:	f107 0214 	add.w	r2, r7, #20
 800db28:	463b      	mov	r3, r7
 800db2a:	4611      	mov	r1, r2
 800db2c:	4618      	mov	r0, r3
 800db2e:	f7f4 ff77 	bl	8002a20 <HAL_FLASHEx_Erase>
 800db32:	4603      	mov	r3, r0
 800db34:	76fb      	strb	r3, [r7, #27]
					/* If erase operation was failed, a Flash error code is returned */
					if (FlashStatus != HAL_OK) {
 800db36:	7efb      	ldrb	r3, [r7, #27]
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d07c      	beq.n	800dc36 <EE_Init+0x396>
						return FlashStatus;
 800db3c:	7efb      	ldrb	r3, [r7, #27]
 800db3e:	b29b      	uxth	r3, r3
 800db40:	e07d      	b.n	800dc3e <EE_Init+0x39e>
					}
				}
			} else /* Page0 valid, Page1 receive */
			{
				/* Transfer data from Page0 to Page1 */
				for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++) {
 800db42:	2300      	movs	r3, #0
 800db44:	84fb      	strh	r3, [r7, #38]	; 0x26
 800db46:	e03a      	b.n	800dbbe <EE_Init+0x31e>
 800db48:	080d0000 	.word	0x080d0000
 800db4c:	080f0000 	.word	0x080f0000
 800db50:	080d0006 	.word	0x080d0006
 800db54:	20000094 	.word	0x20000094
 800db58:	200066d4 	.word	0x200066d4
					if ((*(__IO uint16_t*) (PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx]) {
 800db5c:	4b3a      	ldr	r3, [pc, #232]	; (800dc48 <EE_Init+0x3a8>)
 800db5e:	881b      	ldrh	r3, [r3, #0]
 800db60:	b29a      	uxth	r2, r3
 800db62:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800db64:	4939      	ldr	r1, [pc, #228]	; (800dc4c <EE_Init+0x3ac>)
 800db66:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800db6a:	429a      	cmp	r2, r3
 800db6c:	d101      	bne.n	800db72 <EE_Init+0x2d2>
						x = VarIdx;
 800db6e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800db70:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
					if (VarIdx != x) {
 800db72:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800db74:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800db78:	429a      	cmp	r2, r3
 800db7a:	d01d      	beq.n	800dbb8 <EE_Init+0x318>
						/* Read the last variables' updates */
						ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 800db7c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800db7e:	4a33      	ldr	r2, [pc, #204]	; (800dc4c <EE_Init+0x3ac>)
 800db80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800db84:	4932      	ldr	r1, [pc, #200]	; (800dc50 <EE_Init+0x3b0>)
 800db86:	4618      	mov	r0, r3
 800db88:	f000 f88e 	bl	800dca8 <EE_ReadVariable>
 800db8c:	4603      	mov	r3, r0
 800db8e:	83bb      	strh	r3, [r7, #28]
						/* In case variable corresponding to the virtual address was found */
						if (ReadStatus != 0x1) {
 800db90:	8bbb      	ldrh	r3, [r7, #28]
 800db92:	2b01      	cmp	r3, #1
 800db94:	d010      	beq.n	800dbb8 <EE_Init+0x318>
							/* Transfer the variable to the Page1 */
							EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 800db96:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800db98:	4a2c      	ldr	r2, [pc, #176]	; (800dc4c <EE_Init+0x3ac>)
 800db9a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800db9e:	4b2c      	ldr	r3, [pc, #176]	; (800dc50 <EE_Init+0x3b0>)
 800dba0:	881b      	ldrh	r3, [r3, #0]
 800dba2:	4619      	mov	r1, r3
 800dba4:	4610      	mov	r0, r2
 800dba6:	f000 f983 	bl	800deb0 <EE_VerifyPageFullWriteVariable>
 800dbaa:	4603      	mov	r3, r0
 800dbac:	83fb      	strh	r3, [r7, #30]
							/* If program operation was failed, a Flash error code is returned */
							if (EepromStatus != HAL_OK) {
 800dbae:	8bfb      	ldrh	r3, [r7, #30]
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d001      	beq.n	800dbb8 <EE_Init+0x318>
								return EepromStatus;
 800dbb4:	8bfb      	ldrh	r3, [r7, #30]
 800dbb6:	e042      	b.n	800dc3e <EE_Init+0x39e>
				for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++) {
 800dbb8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800dbba:	3301      	adds	r3, #1
 800dbbc:	84fb      	strh	r3, [r7, #38]	; 0x26
 800dbbe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800dbc0:	2b01      	cmp	r3, #1
 800dbc2:	d9cb      	bls.n	800db5c <EE_Init+0x2bc>
							}
						}
					}
				}
				/* Mark Page1 as valid */
				FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);
 800dbc4:	f04f 0200 	mov.w	r2, #0
 800dbc8:	f04f 0300 	mov.w	r3, #0
 800dbcc:	4921      	ldr	r1, [pc, #132]	; (800dc54 <EE_Init+0x3b4>)
 800dbce:	2001      	movs	r0, #1
 800dbd0:	f7f4 fd84 	bl	80026dc <HAL_FLASH_Program>
 800dbd4:	4603      	mov	r3, r0
 800dbd6:	76fb      	strb	r3, [r7, #27]
				/* If program operation was failed, a Flash error code is returned */
				if (FlashStatus != HAL_OK) {
 800dbd8:	7efb      	ldrb	r3, [r7, #27]
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d002      	beq.n	800dbe4 <EE_Init+0x344>
					return FlashStatus;
 800dbde:	7efb      	ldrb	r3, [r7, #27]
 800dbe0:	b29b      	uxth	r3, r3
 800dbe2:	e02c      	b.n	800dc3e <EE_Init+0x39e>
				}
				pEraseInit.Sector = PAGE0_ID;
 800dbe4:	230a      	movs	r3, #10
 800dbe6:	60bb      	str	r3, [r7, #8]
				pEraseInit.NbSectors = 1;
 800dbe8:	2301      	movs	r3, #1
 800dbea:	60fb      	str	r3, [r7, #12]
				pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800dbec:	2302      	movs	r3, #2
 800dbee:	613b      	str	r3, [r7, #16]
				/* Erase Page0 */
				if (!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS)) {
 800dbf0:	4819      	ldr	r0, [pc, #100]	; (800dc58 <EE_Init+0x3b8>)
 800dbf2:	f000 f833 	bl	800dc5c <EE_VerifyPageFullyErased>
 800dbf6:	4603      	mov	r3, r0
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d11c      	bne.n	800dc36 <EE_Init+0x396>
					FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800dbfc:	f107 0214 	add.w	r2, r7, #20
 800dc00:	463b      	mov	r3, r7
 800dc02:	4611      	mov	r1, r2
 800dc04:	4618      	mov	r0, r3
 800dc06:	f7f4 ff0b 	bl	8002a20 <HAL_FLASHEx_Erase>
 800dc0a:	4603      	mov	r3, r0
 800dc0c:	76fb      	strb	r3, [r7, #27]
					/* If erase operation was failed, a Flash error code is returned */
					if (FlashStatus != HAL_OK) {
 800dc0e:	7efb      	ldrb	r3, [r7, #27]
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d010      	beq.n	800dc36 <EE_Init+0x396>
						return FlashStatus;
 800dc14:	7efb      	ldrb	r3, [r7, #27]
 800dc16:	b29b      	uxth	r3, r3
 800dc18:	e011      	b.n	800dc3e <EE_Init+0x39e>
			}
			break;

		default: /* Any other state -> format eeprom */
			/* Erase both Page0 and Page1 and set Page0 as valid page */
			FlashStatus = EE_Format();
 800dc1a:	f000 f8b1 	bl	800dd80 <EE_Format>
 800dc1e:	4603      	mov	r3, r0
 800dc20:	76fb      	strb	r3, [r7, #27]
			/* If erase/program operation was failed, a Flash error code is returned */
			if (FlashStatus != HAL_OK) {
 800dc22:	7efb      	ldrb	r3, [r7, #27]
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d008      	beq.n	800dc3a <EE_Init+0x39a>
				return FlashStatus;
 800dc28:	7efb      	ldrb	r3, [r7, #27]
 800dc2a:	b29b      	uxth	r3, r3
 800dc2c:	e007      	b.n	800dc3e <EE_Init+0x39e>
			break;
 800dc2e:	bf00      	nop
 800dc30:	e004      	b.n	800dc3c <EE_Init+0x39c>
			break;
 800dc32:	bf00      	nop
 800dc34:	e002      	b.n	800dc3c <EE_Init+0x39c>
			break;
 800dc36:	bf00      	nop
 800dc38:	e000      	b.n	800dc3c <EE_Init+0x39c>
			}
			break;
 800dc3a:	bf00      	nop
	}

	return HAL_OK;
 800dc3c:	2300      	movs	r3, #0
}
 800dc3e:	4618      	mov	r0, r3
 800dc40:	3728      	adds	r7, #40	; 0x28
 800dc42:	46bd      	mov	sp, r7
 800dc44:	bd80      	pop	{r7, pc}
 800dc46:	bf00      	nop
 800dc48:	080f0006 	.word	0x080f0006
 800dc4c:	20000094 	.word	0x20000094
 800dc50:	200066d4 	.word	0x200066d4
 800dc54:	080f0000 	.word	0x080f0000
 800dc58:	080d0000 	.word	0x080d0000

0800dc5c <EE_VerifyPageFullyErased>:
 *     @arg PAGE1_BASE_ADDRESS: Page1 base address
 * @retval page fully erased status:
 *           - 0: if Page not erased
 *           - 1: if Page erased
 */
uint16_t EE_VerifyPageFullyErased(uint32_t Address) {
 800dc5c:	b480      	push	{r7}
 800dc5e:	b085      	sub	sp, #20
 800dc60:	af00      	add	r7, sp, #0
 800dc62:	6078      	str	r0, [r7, #4]
	uint32_t ReadStatus = 1;
 800dc64:	2301      	movs	r3, #1
 800dc66:	60fb      	str	r3, [r7, #12]
	uint16_t AddressValue = 0x5555;
 800dc68:	f245 5355 	movw	r3, #21845	; 0x5555
 800dc6c:	817b      	strh	r3, [r7, #10]

	/* Check each active page address starting from end */
	while (Address <= PAGE0_END_ADDRESS) {
 800dc6e:	e00d      	b.n	800dc8c <EE_VerifyPageFullyErased+0x30>
		/* Get the current location content to be compared with virtual address */
		AddressValue = (*(__IO uint16_t*) Address);
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	881b      	ldrh	r3, [r3, #0]
 800dc74:	817b      	strh	r3, [r7, #10]

		/* Compare the read address with the virtual address */
		if (AddressValue != ERASED) {
 800dc76:	897b      	ldrh	r3, [r7, #10]
 800dc78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dc7c:	4293      	cmp	r3, r2
 800dc7e:	d002      	beq.n	800dc86 <EE_VerifyPageFullyErased+0x2a>

			/* In case variable value is read, reset ReadStatus flag */
			ReadStatus = 0;
 800dc80:	2300      	movs	r3, #0
 800dc82:	60fb      	str	r3, [r7, #12]

			break;
 800dc84:	e006      	b.n	800dc94 <EE_VerifyPageFullyErased+0x38>
		}
		/* Next address location */
		Address = Address + 4;
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	3304      	adds	r3, #4
 800dc8a:	607b      	str	r3, [r7, #4]
	while (Address <= PAGE0_END_ADDRESS) {
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	4a05      	ldr	r2, [pc, #20]	; (800dca4 <EE_VerifyPageFullyErased+0x48>)
 800dc90:	4293      	cmp	r3, r2
 800dc92:	d9ed      	bls.n	800dc70 <EE_VerifyPageFullyErased+0x14>
	}

	/* Return ReadStatus value: (0: Page not erased, 1: Sector erased) */
	return ReadStatus;
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	b29b      	uxth	r3, r3
}
 800dc98:	4618      	mov	r0, r3
 800dc9a:	3714      	adds	r7, #20
 800dc9c:	46bd      	mov	sp, r7
 800dc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dca2:	4770      	bx	lr
 800dca4:	080effff 	.word	0x080effff

0800dca8 <EE_ReadVariable>:
 * @retval Success or error status:
 *           - 0: if variable was found
 *           - 1: if the variable was not found
 *           - NO_VALID_PAGE: if no valid page was found.
 */
uint16_t EE_ReadVariable(uint16_t VirtAddress, uint16_t* Data) {
 800dca8:	b580      	push	{r7, lr}
 800dcaa:	b086      	sub	sp, #24
 800dcac:	af00      	add	r7, sp, #0
 800dcae:	4603      	mov	r3, r0
 800dcb0:	6039      	str	r1, [r7, #0]
 800dcb2:	80fb      	strh	r3, [r7, #6]
	uint16_t ValidPage = PAGE0;
 800dcb4:	2300      	movs	r3, #0
 800dcb6:	81fb      	strh	r3, [r7, #14]
	uint16_t AddressValue = 0x5555, ReadStatus = 1;
 800dcb8:	f245 5355 	movw	r3, #21845	; 0x5555
 800dcbc:	81bb      	strh	r3, [r7, #12]
 800dcbe:	2301      	movs	r3, #1
 800dcc0:	82fb      	strh	r3, [r7, #22]
	uint32_t Address = EEPROM_START_ADDRESS, PageStartAddress = EEPROM_START_ADDRESS;
 800dcc2:	4b1c      	ldr	r3, [pc, #112]	; (800dd34 <EE_ReadVariable+0x8c>)
 800dcc4:	613b      	str	r3, [r7, #16]
 800dcc6:	4b1b      	ldr	r3, [pc, #108]	; (800dd34 <EE_ReadVariable+0x8c>)
 800dcc8:	60bb      	str	r3, [r7, #8]

	/* Get active Page for read operation */
	ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 800dcca:	2000      	movs	r0, #0
 800dccc:	f000 f8aa 	bl	800de24 <EE_FindValidPage>
 800dcd0:	4603      	mov	r3, r0
 800dcd2:	81fb      	strh	r3, [r7, #14]

	/* Check if there is no valid page */
	if (ValidPage == NO_VALID_PAGE) {
 800dcd4:	89fb      	ldrh	r3, [r7, #14]
 800dcd6:	2bab      	cmp	r3, #171	; 0xab
 800dcd8:	d101      	bne.n	800dcde <EE_ReadVariable+0x36>
		return NO_VALID_PAGE;
 800dcda:	23ab      	movs	r3, #171	; 0xab
 800dcdc:	e026      	b.n	800dd2c <EE_ReadVariable+0x84>
	}

	/* Get the valid Page start Address */
	PageStartAddress = (uint32_t) (EEPROM_START_ADDRESS + (uint32_t) (ValidPage * PAGE_SIZE ));
 800dcde:	89fb      	ldrh	r3, [r7, #14]
 800dce0:	045b      	lsls	r3, r3, #17
 800dce2:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800dce6:	f503 2350 	add.w	r3, r3, #851968	; 0xd0000
 800dcea:	60bb      	str	r3, [r7, #8]

	/* Get the valid Page end Address */
	Address = (uint32_t) ((EEPROM_START_ADDRESS - 2) + (uint32_t) ((1 + ValidPage) * PAGE_SIZE ));
 800dcec:	89fb      	ldrh	r3, [r7, #14]
 800dcee:	3301      	adds	r3, #1
 800dcf0:	045a      	lsls	r2, r3, #17
 800dcf2:	4b11      	ldr	r3, [pc, #68]	; (800dd38 <EE_ReadVariable+0x90>)
 800dcf4:	4413      	add	r3, r2
 800dcf6:	613b      	str	r3, [r7, #16]

	/* Check each active page address starting from end */
	while (Address > (PageStartAddress + 2)) {
 800dcf8:	e012      	b.n	800dd20 <EE_ReadVariable+0x78>
		/* Get the current location content to be compared with virtual address */
		AddressValue = (*(__IO uint16_t*) Address);
 800dcfa:	693b      	ldr	r3, [r7, #16]
 800dcfc:	881b      	ldrh	r3, [r3, #0]
 800dcfe:	81bb      	strh	r3, [r7, #12]

		/* Compare the read address with the virtual address */
		if (AddressValue == VirtAddress) {
 800dd00:	89ba      	ldrh	r2, [r7, #12]
 800dd02:	88fb      	ldrh	r3, [r7, #6]
 800dd04:	429a      	cmp	r2, r3
 800dd06:	d108      	bne.n	800dd1a <EE_ReadVariable+0x72>
			/* Get content of Address-2 which is variable value */
			*Data = (*(__IO uint16_t*) (Address - 2));
 800dd08:	693b      	ldr	r3, [r7, #16]
 800dd0a:	3b02      	subs	r3, #2
 800dd0c:	881b      	ldrh	r3, [r3, #0]
 800dd0e:	b29a      	uxth	r2, r3
 800dd10:	683b      	ldr	r3, [r7, #0]
 800dd12:	801a      	strh	r2, [r3, #0]

			/* In case variable value is read, reset ReadStatus flag */
			ReadStatus = 0;
 800dd14:	2300      	movs	r3, #0
 800dd16:	82fb      	strh	r3, [r7, #22]

			break;
 800dd18:	e007      	b.n	800dd2a <EE_ReadVariable+0x82>
		} else {
			/* Next address location */
			Address = Address - 4;
 800dd1a:	693b      	ldr	r3, [r7, #16]
 800dd1c:	3b04      	subs	r3, #4
 800dd1e:	613b      	str	r3, [r7, #16]
	while (Address > (PageStartAddress + 2)) {
 800dd20:	68bb      	ldr	r3, [r7, #8]
 800dd22:	3302      	adds	r3, #2
 800dd24:	693a      	ldr	r2, [r7, #16]
 800dd26:	429a      	cmp	r2, r3
 800dd28:	d8e7      	bhi.n	800dcfa <EE_ReadVariable+0x52>
		}
	}

	/* Return ReadStatus value: (0: variable exist, 1: variable doesn't exist) */
	return ReadStatus;
 800dd2a:	8afb      	ldrh	r3, [r7, #22]
}
 800dd2c:	4618      	mov	r0, r3
 800dd2e:	3718      	adds	r7, #24
 800dd30:	46bd      	mov	sp, r7
 800dd32:	bd80      	pop	{r7, pc}
 800dd34:	080d0000 	.word	0x080d0000
 800dd38:	080cfffe 	.word	0x080cfffe

0800dd3c <EE_WriteVariable>:
 *           - FLASH_COMPLETE: on success
 *           - PAGE_FULL: if valid page is full
 *           - NO_VALID_PAGE: if no valid page was found
 *           - Flash error code: on write Flash error
 */
uint16_t EE_WriteVariable(uint16_t VirtAddress, uint16_t Data) {
 800dd3c:	b580      	push	{r7, lr}
 800dd3e:	b084      	sub	sp, #16
 800dd40:	af00      	add	r7, sp, #0
 800dd42:	4603      	mov	r3, r0
 800dd44:	460a      	mov	r2, r1
 800dd46:	80fb      	strh	r3, [r7, #6]
 800dd48:	4613      	mov	r3, r2
 800dd4a:	80bb      	strh	r3, [r7, #4]
	uint16_t Status = 0;
 800dd4c:	2300      	movs	r3, #0
 800dd4e:	81fb      	strh	r3, [r7, #14]

	/* Write the variable virtual address and value in the EEPROM */
	Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 800dd50:	88ba      	ldrh	r2, [r7, #4]
 800dd52:	88fb      	ldrh	r3, [r7, #6]
 800dd54:	4611      	mov	r1, r2
 800dd56:	4618      	mov	r0, r3
 800dd58:	f000 f8aa 	bl	800deb0 <EE_VerifyPageFullWriteVariable>
 800dd5c:	4603      	mov	r3, r0
 800dd5e:	81fb      	strh	r3, [r7, #14]

	/* In case the EEPROM active page is full */
	if (Status == PAGE_FULL) {
 800dd60:	89fb      	ldrh	r3, [r7, #14]
 800dd62:	2b80      	cmp	r3, #128	; 0x80
 800dd64:	d107      	bne.n	800dd76 <EE_WriteVariable+0x3a>
		/* Perform Page transfer */
		Status = EE_PageTransfer(VirtAddress, Data);
 800dd66:	88ba      	ldrh	r2, [r7, #4]
 800dd68:	88fb      	ldrh	r3, [r7, #6]
 800dd6a:	4611      	mov	r1, r2
 800dd6c:	4618      	mov	r0, r3
 800dd6e:	f000 f8ff 	bl	800df70 <EE_PageTransfer>
 800dd72:	4603      	mov	r3, r0
 800dd74:	81fb      	strh	r3, [r7, #14]
	}

	/* Return last operation status */
	return Status;
 800dd76:	89fb      	ldrh	r3, [r7, #14]
}
 800dd78:	4618      	mov	r0, r3
 800dd7a:	3710      	adds	r7, #16
 800dd7c:	46bd      	mov	sp, r7
 800dd7e:	bd80      	pop	{r7, pc}

0800dd80 <EE_Format>:
 * @brief  Erases PAGE and PAGE1 and writes VALID_PAGE header to PAGE
 * @param  None
 * @retval Status of the last operation (Flash write or erase) done during
 *         EEPROM formating
 */
static HAL_StatusTypeDef EE_Format(void) {
 800dd80:	b580      	push	{r7, lr}
 800dd82:	b088      	sub	sp, #32
 800dd84:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef FlashStatus = HAL_OK;
 800dd86:	2300      	movs	r3, #0
 800dd88:	77fb      	strb	r3, [r7, #31]
	uint32_t SectorError = 0;
 800dd8a:	2300      	movs	r3, #0
 800dd8c:	61bb      	str	r3, [r7, #24]
	FLASH_EraseInitTypeDef pEraseInit;

	pEraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;
 800dd8e:	2300      	movs	r3, #0
 800dd90:	607b      	str	r3, [r7, #4]
	pEraseInit.Sector = PAGE0_ID;
 800dd92:	230a      	movs	r3, #10
 800dd94:	60fb      	str	r3, [r7, #12]
	pEraseInit.NbSectors = 1;
 800dd96:	2301      	movs	r3, #1
 800dd98:	613b      	str	r3, [r7, #16]
	pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800dd9a:	2302      	movs	r3, #2
 800dd9c:	617b      	str	r3, [r7, #20]
	/* Erase Page0 */
	if (!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS)) {
 800dd9e:	481f      	ldr	r0, [pc, #124]	; (800de1c <EE_Format+0x9c>)
 800dda0:	f7ff ff5c 	bl	800dc5c <EE_VerifyPageFullyErased>
 800dda4:	4603      	mov	r3, r0
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d10d      	bne.n	800ddc6 <EE_Format+0x46>
		FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800ddaa:	f107 0218 	add.w	r2, r7, #24
 800ddae:	1d3b      	adds	r3, r7, #4
 800ddb0:	4611      	mov	r1, r2
 800ddb2:	4618      	mov	r0, r3
 800ddb4:	f7f4 fe34 	bl	8002a20 <HAL_FLASHEx_Erase>
 800ddb8:	4603      	mov	r3, r0
 800ddba:	77fb      	strb	r3, [r7, #31]
		/* If erase operation was failed, a Flash error code is returned */
		if (FlashStatus != HAL_OK) {
 800ddbc:	7ffb      	ldrb	r3, [r7, #31]
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d001      	beq.n	800ddc6 <EE_Format+0x46>
			return FlashStatus;
 800ddc2:	7ffb      	ldrb	r3, [r7, #31]
 800ddc4:	e025      	b.n	800de12 <EE_Format+0x92>
		}
	}
	/* Set Page0 as valid page: Write VALID_PAGE at Page0 base address */
	FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 800ddc6:	f04f 0200 	mov.w	r2, #0
 800ddca:	f04f 0300 	mov.w	r3, #0
 800ddce:	4913      	ldr	r1, [pc, #76]	; (800de1c <EE_Format+0x9c>)
 800ddd0:	2001      	movs	r0, #1
 800ddd2:	f7f4 fc83 	bl	80026dc <HAL_FLASH_Program>
 800ddd6:	4603      	mov	r3, r0
 800ddd8:	77fb      	strb	r3, [r7, #31]
	/* If program operation was failed, a Flash error code is returned */
	if (FlashStatus != HAL_OK) {
 800ddda:	7ffb      	ldrb	r3, [r7, #31]
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d001      	beq.n	800dde4 <EE_Format+0x64>
		return FlashStatus;
 800dde0:	7ffb      	ldrb	r3, [r7, #31]
 800dde2:	e016      	b.n	800de12 <EE_Format+0x92>
	}

	pEraseInit.Sector = PAGE1_ID;
 800dde4:	230b      	movs	r3, #11
 800dde6:	60fb      	str	r3, [r7, #12]
	/* Erase Page1 */
	if (!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS)) {
 800dde8:	480d      	ldr	r0, [pc, #52]	; (800de20 <EE_Format+0xa0>)
 800ddea:	f7ff ff37 	bl	800dc5c <EE_VerifyPageFullyErased>
 800ddee:	4603      	mov	r3, r0
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d10d      	bne.n	800de10 <EE_Format+0x90>
		FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800ddf4:	f107 0218 	add.w	r2, r7, #24
 800ddf8:	1d3b      	adds	r3, r7, #4
 800ddfa:	4611      	mov	r1, r2
 800ddfc:	4618      	mov	r0, r3
 800ddfe:	f7f4 fe0f 	bl	8002a20 <HAL_FLASHEx_Erase>
 800de02:	4603      	mov	r3, r0
 800de04:	77fb      	strb	r3, [r7, #31]
		/* If erase operation was failed, a Flash error code is returned */
		if (FlashStatus != HAL_OK) {
 800de06:	7ffb      	ldrb	r3, [r7, #31]
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d001      	beq.n	800de10 <EE_Format+0x90>
			return FlashStatus;
 800de0c:	7ffb      	ldrb	r3, [r7, #31]
 800de0e:	e000      	b.n	800de12 <EE_Format+0x92>
		}
	}

	return HAL_OK;
 800de10:	2300      	movs	r3, #0
}
 800de12:	4618      	mov	r0, r3
 800de14:	3720      	adds	r7, #32
 800de16:	46bd      	mov	sp, r7
 800de18:	bd80      	pop	{r7, pc}
 800de1a:	bf00      	nop
 800de1c:	080d0000 	.word	0x080d0000
 800de20:	080f0000 	.word	0x080f0000

0800de24 <EE_FindValidPage>:
 *     @arg READ_FROM_VALID_PAGE: read operation from valid page
 *     @arg WRITE_IN_VALID_PAGE: write operation from valid page
 * @retval Valid page number (PAGE or PAGE1) or NO_VALID_PAGE in case
 *   of no valid page was found
 */
static uint16_t EE_FindValidPage(uint8_t Operation) {
 800de24:	b480      	push	{r7}
 800de26:	b085      	sub	sp, #20
 800de28:	af00      	add	r7, sp, #0
 800de2a:	4603      	mov	r3, r0
 800de2c:	71fb      	strb	r3, [r7, #7]
	uint16_t PageStatus0 = 6, PageStatus1 = 6;
 800de2e:	2306      	movs	r3, #6
 800de30:	81fb      	strh	r3, [r7, #14]
 800de32:	2306      	movs	r3, #6
 800de34:	81bb      	strh	r3, [r7, #12]

	/* Get Page0 actual status */
	PageStatus0 = (*(__IO uint16_t*) PAGE0_BASE_ADDRESS);
 800de36:	4b1c      	ldr	r3, [pc, #112]	; (800dea8 <EE_FindValidPage+0x84>)
 800de38:	881b      	ldrh	r3, [r3, #0]
 800de3a:	81fb      	strh	r3, [r7, #14]

	/* Get Page1 actual status */
	PageStatus1 = (*(__IO uint16_t*) PAGE1_BASE_ADDRESS);
 800de3c:	4b1b      	ldr	r3, [pc, #108]	; (800deac <EE_FindValidPage+0x88>)
 800de3e:	881b      	ldrh	r3, [r3, #0]
 800de40:	81bb      	strh	r3, [r7, #12]

	/* Write or read operation */
	switch (Operation) {
 800de42:	79fb      	ldrb	r3, [r7, #7]
 800de44:	2b00      	cmp	r3, #0
 800de46:	d01b      	beq.n	800de80 <EE_FindValidPage+0x5c>
 800de48:	2b01      	cmp	r3, #1
 800de4a:	d125      	bne.n	800de98 <EE_FindValidPage+0x74>
		case WRITE_IN_VALID_PAGE: /* ---- Write operation ---- */
			if (PageStatus1 == VALID_PAGE) {
 800de4c:	89bb      	ldrh	r3, [r7, #12]
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d108      	bne.n	800de64 <EE_FindValidPage+0x40>
				/* Page0 receiving data */
				if (PageStatus0 == RECEIVE_DATA) {
 800de52:	89fb      	ldrh	r3, [r7, #14]
 800de54:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 800de58:	4293      	cmp	r3, r2
 800de5a:	d101      	bne.n	800de60 <EE_FindValidPage+0x3c>
					return PAGE0; /* Page0 valid */
 800de5c:	2300      	movs	r3, #0
 800de5e:	e01c      	b.n	800de9a <EE_FindValidPage+0x76>
				} else {
					return PAGE1; /* Page1 valid */
 800de60:	2301      	movs	r3, #1
 800de62:	e01a      	b.n	800de9a <EE_FindValidPage+0x76>
				}
			} else if (PageStatus0 == VALID_PAGE) {
 800de64:	89fb      	ldrh	r3, [r7, #14]
 800de66:	2b00      	cmp	r3, #0
 800de68:	d108      	bne.n	800de7c <EE_FindValidPage+0x58>
				/* Page1 receiving data */
				if (PageStatus1 == RECEIVE_DATA) {
 800de6a:	89bb      	ldrh	r3, [r7, #12]
 800de6c:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 800de70:	4293      	cmp	r3, r2
 800de72:	d101      	bne.n	800de78 <EE_FindValidPage+0x54>
					return PAGE1; /* Page1 valid */
 800de74:	2301      	movs	r3, #1
 800de76:	e010      	b.n	800de9a <EE_FindValidPage+0x76>
				} else {
					return PAGE0; /* Page0 valid */
 800de78:	2300      	movs	r3, #0
 800de7a:	e00e      	b.n	800de9a <EE_FindValidPage+0x76>
				}
			} else {
				return NO_VALID_PAGE; /* No valid Page */
 800de7c:	23ab      	movs	r3, #171	; 0xab
 800de7e:	e00c      	b.n	800de9a <EE_FindValidPage+0x76>
			}

		case READ_FROM_VALID_PAGE: /* ---- Read operation ---- */
			if (PageStatus0 == VALID_PAGE) {
 800de80:	89fb      	ldrh	r3, [r7, #14]
 800de82:	2b00      	cmp	r3, #0
 800de84:	d101      	bne.n	800de8a <EE_FindValidPage+0x66>
				return PAGE0; /* Page0 valid */
 800de86:	2300      	movs	r3, #0
 800de88:	e007      	b.n	800de9a <EE_FindValidPage+0x76>
			} else if (PageStatus1 == VALID_PAGE) {
 800de8a:	89bb      	ldrh	r3, [r7, #12]
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d101      	bne.n	800de94 <EE_FindValidPage+0x70>
				return PAGE1; /* Page1 valid */
 800de90:	2301      	movs	r3, #1
 800de92:	e002      	b.n	800de9a <EE_FindValidPage+0x76>
			} else {
				return NO_VALID_PAGE; /* No valid Page */
 800de94:	23ab      	movs	r3, #171	; 0xab
 800de96:	e000      	b.n	800de9a <EE_FindValidPage+0x76>
			}

		default:
			return PAGE0; /* Page0 valid */
 800de98:	2300      	movs	r3, #0
	}
}
 800de9a:	4618      	mov	r0, r3
 800de9c:	3714      	adds	r7, #20
 800de9e:	46bd      	mov	sp, r7
 800dea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dea4:	4770      	bx	lr
 800dea6:	bf00      	nop
 800dea8:	080d0000 	.word	0x080d0000
 800deac:	080f0000 	.word	0x080f0000

0800deb0 <EE_VerifyPageFullWriteVariable>:
 *           - FLASH_COMPLETE: on success
 *           - PAGE_FULL: if valid page is full
 *           - NO_VALID_PAGE: if no valid page was found
 *           - Flash error code: on write Flash error
 */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data) {
 800deb0:	b590      	push	{r4, r7, lr}
 800deb2:	b087      	sub	sp, #28
 800deb4:	af00      	add	r7, sp, #0
 800deb6:	4603      	mov	r3, r0
 800deb8:	460a      	mov	r2, r1
 800deba:	80fb      	strh	r3, [r7, #6]
 800debc:	4613      	mov	r3, r2
 800debe:	80bb      	strh	r3, [r7, #4]
	HAL_StatusTypeDef FlashStatus = HAL_OK;
 800dec0:	2300      	movs	r3, #0
 800dec2:	74fb      	strb	r3, [r7, #19]
	uint16_t ValidPage = PAGE0;
 800dec4:	2300      	movs	r3, #0
 800dec6:	823b      	strh	r3, [r7, #16]
	uint32_t Address = EEPROM_START_ADDRESS, PageEndAddress = EEPROM_START_ADDRESS + PAGE_SIZE;
 800dec8:	4b26      	ldr	r3, [pc, #152]	; (800df64 <EE_VerifyPageFullWriteVariable+0xb4>)
 800deca:	617b      	str	r3, [r7, #20]
 800decc:	4b26      	ldr	r3, [pc, #152]	; (800df68 <EE_VerifyPageFullWriteVariable+0xb8>)
 800dece:	60fb      	str	r3, [r7, #12]

	/* Get valid Page for write operation */
	ValidPage = EE_FindValidPage(WRITE_IN_VALID_PAGE);
 800ded0:	2001      	movs	r0, #1
 800ded2:	f7ff ffa7 	bl	800de24 <EE_FindValidPage>
 800ded6:	4603      	mov	r3, r0
 800ded8:	823b      	strh	r3, [r7, #16]

	/* Check if there is no valid page */
	if (ValidPage == NO_VALID_PAGE) {
 800deda:	8a3b      	ldrh	r3, [r7, #16]
 800dedc:	2bab      	cmp	r3, #171	; 0xab
 800dede:	d101      	bne.n	800dee4 <EE_VerifyPageFullWriteVariable+0x34>
		return NO_VALID_PAGE;
 800dee0:	23ab      	movs	r3, #171	; 0xab
 800dee2:	e03a      	b.n	800df5a <EE_VerifyPageFullWriteVariable+0xaa>
	}

	/* Get the valid Page start Address */
	Address = (uint32_t) (EEPROM_START_ADDRESS + (uint32_t) (ValidPage * PAGE_SIZE ));
 800dee4:	8a3b      	ldrh	r3, [r7, #16]
 800dee6:	045b      	lsls	r3, r3, #17
 800dee8:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800deec:	f503 2350 	add.w	r3, r3, #851968	; 0xd0000
 800def0:	617b      	str	r3, [r7, #20]

	/* Get the valid Page end Address */
	PageEndAddress = (uint32_t) ((EEPROM_START_ADDRESS - 1) + (uint32_t) ((ValidPage + 1) * PAGE_SIZE ));
 800def2:	8a3b      	ldrh	r3, [r7, #16]
 800def4:	3301      	adds	r3, #1
 800def6:	045a      	lsls	r2, r3, #17
 800def8:	4b1c      	ldr	r3, [pc, #112]	; (800df6c <EE_VerifyPageFullWriteVariable+0xbc>)
 800defa:	4413      	add	r3, r2
 800defc:	60fb      	str	r3, [r7, #12]

	/* Check each active page address starting from begining */
	while (Address < PageEndAddress) {
 800defe:	e027      	b.n	800df50 <EE_VerifyPageFullWriteVariable+0xa0>
		/* Verify if Address and Address+2 contents are 0xFFFFFFFF */
		if ((*(__IO uint32_t*) Address) == 0xFFFFFFFF) {
 800df00:	697b      	ldr	r3, [r7, #20]
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df08:	d11f      	bne.n	800df4a <EE_VerifyPageFullWriteVariable+0x9a>
			/* Set variable data */
			FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Address, Data);
 800df0a:	88bb      	ldrh	r3, [r7, #4]
 800df0c:	f04f 0400 	mov.w	r4, #0
 800df10:	461a      	mov	r2, r3
 800df12:	4623      	mov	r3, r4
 800df14:	6979      	ldr	r1, [r7, #20]
 800df16:	2001      	movs	r0, #1
 800df18:	f7f4 fbe0 	bl	80026dc <HAL_FLASH_Program>
 800df1c:	4603      	mov	r3, r0
 800df1e:	74fb      	strb	r3, [r7, #19]
			/* If program operation was failed, a Flash error code is returned */
			if (FlashStatus != HAL_OK) {
 800df20:	7cfb      	ldrb	r3, [r7, #19]
 800df22:	2b00      	cmp	r3, #0
 800df24:	d002      	beq.n	800df2c <EE_VerifyPageFullWriteVariable+0x7c>
				return FlashStatus;
 800df26:	7cfb      	ldrb	r3, [r7, #19]
 800df28:	b29b      	uxth	r3, r3
 800df2a:	e016      	b.n	800df5a <EE_VerifyPageFullWriteVariable+0xaa>
			}
			/* Set variable virtual address */
			FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Address + 2, VirtAddress);
 800df2c:	697b      	ldr	r3, [r7, #20]
 800df2e:	1c99      	adds	r1, r3, #2
 800df30:	88fb      	ldrh	r3, [r7, #6]
 800df32:	f04f 0400 	mov.w	r4, #0
 800df36:	461a      	mov	r2, r3
 800df38:	4623      	mov	r3, r4
 800df3a:	2001      	movs	r0, #1
 800df3c:	f7f4 fbce 	bl	80026dc <HAL_FLASH_Program>
 800df40:	4603      	mov	r3, r0
 800df42:	74fb      	strb	r3, [r7, #19]
			/* Return program operation status */
			return FlashStatus;
 800df44:	7cfb      	ldrb	r3, [r7, #19]
 800df46:	b29b      	uxth	r3, r3
 800df48:	e007      	b.n	800df5a <EE_VerifyPageFullWriteVariable+0xaa>
		} else {
			/* Next address location */
			Address = Address + 4;
 800df4a:	697b      	ldr	r3, [r7, #20]
 800df4c:	3304      	adds	r3, #4
 800df4e:	617b      	str	r3, [r7, #20]
	while (Address < PageEndAddress) {
 800df50:	697a      	ldr	r2, [r7, #20]
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	429a      	cmp	r2, r3
 800df56:	d3d3      	bcc.n	800df00 <EE_VerifyPageFullWriteVariable+0x50>
		}
	}

	/* Return PAGE_FULL in case the valid page is full */
	return PAGE_FULL;
 800df58:	2380      	movs	r3, #128	; 0x80
}
 800df5a:	4618      	mov	r0, r3
 800df5c:	371c      	adds	r7, #28
 800df5e:	46bd      	mov	sp, r7
 800df60:	bd90      	pop	{r4, r7, pc}
 800df62:	bf00      	nop
 800df64:	080d0000 	.word	0x080d0000
 800df68:	080f0000 	.word	0x080f0000
 800df6c:	080cffff 	.word	0x080cffff

0800df70 <EE_PageTransfer>:
 *           - FLASH_COMPLETE: on success
 *           - PAGE_FULL: if valid page is full
 *           - NO_VALID_PAGE: if no valid page was found
 *           - Flash error code: on write Flash error
 */
static uint16_t EE_PageTransfer(uint16_t VirtAddress, uint16_t Data) {
 800df70:	b580      	push	{r7, lr}
 800df72:	b08c      	sub	sp, #48	; 0x30
 800df74:	af00      	add	r7, sp, #0
 800df76:	4603      	mov	r3, r0
 800df78:	460a      	mov	r2, r1
 800df7a:	80fb      	strh	r3, [r7, #6]
 800df7c:	4613      	mov	r3, r2
 800df7e:	80bb      	strh	r3, [r7, #4]
	HAL_StatusTypeDef FlashStatus = HAL_OK;
 800df80:	2300      	movs	r3, #0
 800df82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t NewPageAddress = EEPROM_START_ADDRESS;
 800df86:	4b54      	ldr	r3, [pc, #336]	; (800e0d8 <EE_PageTransfer+0x168>)
 800df88:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint16_t OldPageId = 0;
 800df8a:	2300      	movs	r3, #0
 800df8c:	857b      	strh	r3, [r7, #42]	; 0x2a
	uint16_t ValidPage = PAGE0, VarIdx = 0;
 800df8e:	2300      	movs	r3, #0
 800df90:	84bb      	strh	r3, [r7, #36]	; 0x24
 800df92:	2300      	movs	r3, #0
 800df94:	853b      	strh	r3, [r7, #40]	; 0x28
	uint16_t EepromStatus = 0, ReadStatus = 0;
 800df96:	2300      	movs	r3, #0
 800df98:	847b      	strh	r3, [r7, #34]	; 0x22
 800df9a:	2300      	movs	r3, #0
 800df9c:	843b      	strh	r3, [r7, #32]
	uint32_t SectorError = 0;
 800df9e:	2300      	movs	r3, #0
 800dfa0:	61fb      	str	r3, [r7, #28]
	FLASH_EraseInitTypeDef pEraseInit;

	/* Get active Page for read operation */
	ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 800dfa2:	2000      	movs	r0, #0
 800dfa4:	f7ff ff3e 	bl	800de24 <EE_FindValidPage>
 800dfa8:	4603      	mov	r3, r0
 800dfaa:	84bb      	strh	r3, [r7, #36]	; 0x24

	if (ValidPage == PAGE1) /* Page1 valid */
 800dfac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dfae:	2b01      	cmp	r3, #1
 800dfb0:	d104      	bne.n	800dfbc <EE_PageTransfer+0x4c>
	{
		/* New page address where variable will be moved to */
		NewPageAddress = PAGE0_BASE_ADDRESS;
 800dfb2:	4b49      	ldr	r3, [pc, #292]	; (800e0d8 <EE_PageTransfer+0x168>)
 800dfb4:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Old page ID where variable will be taken from */
		OldPageId = PAGE1_ID;
 800dfb6:	230b      	movs	r3, #11
 800dfb8:	857b      	strh	r3, [r7, #42]	; 0x2a
 800dfba:	e009      	b.n	800dfd0 <EE_PageTransfer+0x60>
	} else if (ValidPage == PAGE0) /* Page0 valid */
 800dfbc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d104      	bne.n	800dfcc <EE_PageTransfer+0x5c>
	{
		/* New page address  where variable will be moved to */
		NewPageAddress = PAGE1_BASE_ADDRESS;
 800dfc2:	4b46      	ldr	r3, [pc, #280]	; (800e0dc <EE_PageTransfer+0x16c>)
 800dfc4:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Old page ID where variable will be taken from */
		OldPageId = PAGE0_ID;
 800dfc6:	230a      	movs	r3, #10
 800dfc8:	857b      	strh	r3, [r7, #42]	; 0x2a
 800dfca:	e001      	b.n	800dfd0 <EE_PageTransfer+0x60>
	} else {
		return NO_VALID_PAGE; /* No valid Page */
 800dfcc:	23ab      	movs	r3, #171	; 0xab
 800dfce:	e07e      	b.n	800e0ce <EE_PageTransfer+0x15e>
	}

	/* Set the new Page status to RECEIVE_DATA status */
	FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, NewPageAddress, RECEIVE_DATA);
 800dfd0:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 800dfd4:	f04f 0300 	mov.w	r3, #0
 800dfd8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dfda:	2001      	movs	r0, #1
 800dfdc:	f7f4 fb7e 	bl	80026dc <HAL_FLASH_Program>
 800dfe0:	4603      	mov	r3, r0
 800dfe2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	/* If program operation was failed, a Flash error code is returned */
	if (FlashStatus != HAL_OK) {
 800dfe6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d003      	beq.n	800dff6 <EE_PageTransfer+0x86>
		return FlashStatus;
 800dfee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dff2:	b29b      	uxth	r3, r3
 800dff4:	e06b      	b.n	800e0ce <EE_PageTransfer+0x15e>
	}

	/* Write the variable passed as parameter in the new active page */
	EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 800dff6:	88ba      	ldrh	r2, [r7, #4]
 800dff8:	88fb      	ldrh	r3, [r7, #6]
 800dffa:	4611      	mov	r1, r2
 800dffc:	4618      	mov	r0, r3
 800dffe:	f7ff ff57 	bl	800deb0 <EE_VerifyPageFullWriteVariable>
 800e002:	4603      	mov	r3, r0
 800e004:	847b      	strh	r3, [r7, #34]	; 0x22
	/* If program operation was failed, a Flash error code is returned */
	if (EepromStatus != HAL_OK) {
 800e006:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d001      	beq.n	800e010 <EE_PageTransfer+0xa0>
		return EepromStatus;
 800e00c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e00e:	e05e      	b.n	800e0ce <EE_PageTransfer+0x15e>
	}

	/* Transfer process: transfer variables from old to the new active page */
	for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++) {
 800e010:	2300      	movs	r3, #0
 800e012:	853b      	strh	r3, [r7, #40]	; 0x28
 800e014:	e027      	b.n	800e066 <EE_PageTransfer+0xf6>
		if (VirtAddVarTab[VarIdx] != VirtAddress) /* Check each variable except the one passed as parameter */
 800e016:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e018:	4a31      	ldr	r2, [pc, #196]	; (800e0e0 <EE_PageTransfer+0x170>)
 800e01a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e01e:	88fa      	ldrh	r2, [r7, #6]
 800e020:	429a      	cmp	r2, r3
 800e022:	d01d      	beq.n	800e060 <EE_PageTransfer+0xf0>
		{
			/* Read the other last variable updates */
			ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 800e024:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e026:	4a2e      	ldr	r2, [pc, #184]	; (800e0e0 <EE_PageTransfer+0x170>)
 800e028:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e02c:	492d      	ldr	r1, [pc, #180]	; (800e0e4 <EE_PageTransfer+0x174>)
 800e02e:	4618      	mov	r0, r3
 800e030:	f7ff fe3a 	bl	800dca8 <EE_ReadVariable>
 800e034:	4603      	mov	r3, r0
 800e036:	843b      	strh	r3, [r7, #32]
			/* In case variable corresponding to the virtual address was found */
			if (ReadStatus != 0x1) {
 800e038:	8c3b      	ldrh	r3, [r7, #32]
 800e03a:	2b01      	cmp	r3, #1
 800e03c:	d010      	beq.n	800e060 <EE_PageTransfer+0xf0>
				/* Transfer the variable to the new active page */
				EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 800e03e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e040:	4a27      	ldr	r2, [pc, #156]	; (800e0e0 <EE_PageTransfer+0x170>)
 800e042:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800e046:	4b27      	ldr	r3, [pc, #156]	; (800e0e4 <EE_PageTransfer+0x174>)
 800e048:	881b      	ldrh	r3, [r3, #0]
 800e04a:	4619      	mov	r1, r3
 800e04c:	4610      	mov	r0, r2
 800e04e:	f7ff ff2f 	bl	800deb0 <EE_VerifyPageFullWriteVariable>
 800e052:	4603      	mov	r3, r0
 800e054:	847b      	strh	r3, [r7, #34]	; 0x22
				/* If program operation was failed, a Flash error code is returned */
				if (EepromStatus != HAL_OK) {
 800e056:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d001      	beq.n	800e060 <EE_PageTransfer+0xf0>
					return EepromStatus;
 800e05c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e05e:	e036      	b.n	800e0ce <EE_PageTransfer+0x15e>
	for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++) {
 800e060:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e062:	3301      	adds	r3, #1
 800e064:	853b      	strh	r3, [r7, #40]	; 0x28
 800e066:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e068:	2b01      	cmp	r3, #1
 800e06a:	d9d4      	bls.n	800e016 <EE_PageTransfer+0xa6>
				}
			}
		}
	}

	pEraseInit.TypeErase = TYPEERASE_SECTORS;
 800e06c:	2300      	movs	r3, #0
 800e06e:	60bb      	str	r3, [r7, #8]
	pEraseInit.Sector = OldPageId;
 800e070:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e072:	613b      	str	r3, [r7, #16]
	pEraseInit.NbSectors = 1;
 800e074:	2301      	movs	r3, #1
 800e076:	617b      	str	r3, [r7, #20]
	pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800e078:	2302      	movs	r3, #2
 800e07a:	61bb      	str	r3, [r7, #24]

	/* Erase the old Page: Set old Page status to ERASED status */
	FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800e07c:	f107 021c 	add.w	r2, r7, #28
 800e080:	f107 0308 	add.w	r3, r7, #8
 800e084:	4611      	mov	r1, r2
 800e086:	4618      	mov	r0, r3
 800e088:	f7f4 fcca 	bl	8002a20 <HAL_FLASHEx_Erase>
 800e08c:	4603      	mov	r3, r0
 800e08e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	/* If erase operation was failed, a Flash error code is returned */
	if (FlashStatus != HAL_OK) {
 800e092:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e096:	2b00      	cmp	r3, #0
 800e098:	d003      	beq.n	800e0a2 <EE_PageTransfer+0x132>
		return FlashStatus;
 800e09a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e09e:	b29b      	uxth	r3, r3
 800e0a0:	e015      	b.n	800e0ce <EE_PageTransfer+0x15e>
	}

	/* Set new Page status to VALID_PAGE status */
	FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, NewPageAddress, VALID_PAGE);
 800e0a2:	f04f 0200 	mov.w	r2, #0
 800e0a6:	f04f 0300 	mov.w	r3, #0
 800e0aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e0ac:	2001      	movs	r0, #1
 800e0ae:	f7f4 fb15 	bl	80026dc <HAL_FLASH_Program>
 800e0b2:	4603      	mov	r3, r0
 800e0b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	/* If program operation was failed, a Flash error code is returned */
	if (FlashStatus != HAL_OK) {
 800e0b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d003      	beq.n	800e0c8 <EE_PageTransfer+0x158>
		return FlashStatus;
 800e0c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e0c4:	b29b      	uxth	r3, r3
 800e0c6:	e002      	b.n	800e0ce <EE_PageTransfer+0x15e>
	}

	/* Return last operation flash status */
	return FlashStatus;
 800e0c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e0cc:	b29b      	uxth	r3, r3
}
 800e0ce:	4618      	mov	r0, r3
 800e0d0:	3730      	adds	r7, #48	; 0x30
 800e0d2:	46bd      	mov	sp, r7
 800e0d4:	bd80      	pop	{r7, pc}
 800e0d6:	bf00      	nop
 800e0d8:	080d0000 	.word	0x080d0000
 800e0dc:	080f0000 	.word	0x080f0000
 800e0e0:	20000094 	.word	0x20000094
 800e0e4:	200066d4 	.word	0x200066d4

0800e0e8 <Finger_On>:
extern uint16_t fingerConfidence;
extern osMutexId FingerRecMutexHandle;
/* Private variable ---------------------------------------------------------*/
char str[50];

void Finger_On(void) {
 800e0e8:	b580      	push	{r7, lr}
 800e0ea:	af00      	add	r7, sp, #0
	osRecursiveMutexWait(FingerRecMutexHandle, osWaitForever);
 800e0ec:	4b05      	ldr	r3, [pc, #20]	; (800e104 <Finger_On+0x1c>)
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	f04f 31ff 	mov.w	r1, #4294967295
 800e0f4:	4618      	mov	r0, r3
 800e0f6:	f7fa fd41 	bl	8008b7c <osRecursiveMutexWait>
	FZ3387_SET_POWER(0);
 800e0fa:	2000      	movs	r0, #0
 800e0fc:	f000 faf8 	bl	800e6f0 <FZ3387_SET_POWER>
}
 800e100:	bf00      	nop
 800e102:	bd80      	pop	{r7, pc}
 800e104:	2000896c 	.word	0x2000896c

0800e108 <Finger_Off>:

void Finger_Off(void) {
 800e108:	b580      	push	{r7, lr}
 800e10a:	af00      	add	r7, sp, #0
	FZ3387_SET_POWER(1);
 800e10c:	2001      	movs	r0, #1
 800e10e:	f000 faef 	bl	800e6f0 <FZ3387_SET_POWER>
	osDelay(50);
 800e112:	2032      	movs	r0, #50	; 0x32
 800e114:	f7fa f8c9 	bl	80082aa <osDelay>
	osRecursiveMutexRelease(FingerRecMutexHandle);
 800e118:	4b03      	ldr	r3, [pc, #12]	; (800e128 <Finger_Off+0x20>)
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	4618      	mov	r0, r3
 800e11e:	f7fa fd1a 	bl	8008b56 <osRecursiveMutexRelease>
}
 800e122:	bf00      	nop
 800e124:	bd80      	pop	{r7, pc}
 800e126:	bf00      	nop
 800e128:	2000896c 	.word	0x2000896c

0800e12c <Finger_Init>:

void Finger_Init(void) {
 800e12c:	b580      	push	{r7, lr}
 800e12e:	b082      	sub	sp, #8
 800e130:	af00      	add	r7, sp, #0
	uint8_t verified = 0;
 800e132:	2300      	movs	r3, #0
 800e134:	71fb      	strb	r3, [r7, #7]

	//	 verify password and check hardware
	do {
		SWV_SendStrLn("Finger_Init");
 800e136:	480b      	ldr	r0, [pc, #44]	; (800e164 <Finger_Init+0x38>)
 800e138:	f003 fe84 	bl	8011e44 <SWV_SendStrLn>

		Finger_On();
 800e13c:	f7ff ffd4 	bl	800e0e8 <Finger_On>
		verified = FZ3387_verifyPassword();
 800e140:	f000 fb38 	bl	800e7b4 <FZ3387_verifyPassword>
 800e144:	4603      	mov	r3, r0
 800e146:	71fb      	strb	r3, [r7, #7]
		Finger_Off();
 800e148:	f7ff ffde 	bl	800e108 <Finger_Off>

		osDelay(500);
 800e14c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e150:	f7fa f8ab 	bl	80082aa <osDelay>
	} while (!verified);
 800e154:	79fb      	ldrb	r3, [r7, #7]
 800e156:	2b00      	cmp	r3, #0
 800e158:	d0ed      	beq.n	800e136 <Finger_Init+0xa>
}
 800e15a:	bf00      	nop
 800e15c:	3708      	adds	r7, #8
 800e15e:	46bd      	mov	sp, r7
 800e160:	bd80      	pop	{r7, pc}
 800e162:	bf00      	nop
 800e164:	08018940 	.word	0x08018940

0800e168 <Finger_Enroll>:

uint8_t Finger_Enroll(uint8_t id) {
 800e168:	b580      	push	{r7, lr}
 800e16a:	b086      	sub	sp, #24
 800e16c:	af00      	add	r7, sp, #0
 800e16e:	4603      	mov	r3, r0
 800e170:	71fb      	strb	r3, [r7, #7]
	uint32_t tick, timeout_tick;
	int p = -1, error = 0;
 800e172:	f04f 33ff 	mov.w	r3, #4294967295
 800e176:	617b      	str	r3, [r7, #20]
 800e178:	2300      	movs	r3, #0
 800e17a:	613b      	str	r3, [r7, #16]

	Finger_On();
 800e17c:	f7ff ffb4 	bl	800e0e8 <Finger_On>
	// convert time to tick
	timeout_tick = osKernelSysTickMicroSec(FINGER_SCAN_TIMEOUT*1000*1000);
 800e180:	f644 6320 	movw	r3, #20000	; 0x4e20
 800e184:	60fb      	str	r3, [r7, #12]
	//	Take Image
	sprintf(str, "Waiting for valid finger to enroll as # %d", id);
 800e186:	79fb      	ldrb	r3, [r7, #7]
 800e188:	461a      	mov	r2, r3
 800e18a:	49b9      	ldr	r1, [pc, #740]	; (800e470 <Finger_Enroll+0x308>)
 800e18c:	48b9      	ldr	r0, [pc, #740]	; (800e474 <Finger_Enroll+0x30c>)
 800e18e:	f006 ffff 	bl	8015190 <siprintf>
	SWV_SendStrLn(str);
 800e192:	48b8      	ldr	r0, [pc, #736]	; (800e474 <Finger_Enroll+0x30c>)
 800e194:	f003 fe56 	bl	8011e44 <SWV_SendStrLn>

	// set timeout guard
	tick = osKernelSysTick();
 800e198:	f7fa f82b 	bl	80081f2 <osKernelSysTick>
 800e19c:	60b8      	str	r0, [r7, #8]
	while (p != FINGERPRINT_OK && !error) {
 800e19e:	e031      	b.n	800e204 <Finger_Enroll+0x9c>
		// handle timeout
		if ((osKernelSysTick() - tick) > timeout_tick) {
 800e1a0:	f7fa f827 	bl	80081f2 <osKernelSysTick>
 800e1a4:	4602      	mov	r2, r0
 800e1a6:	68bb      	ldr	r3, [r7, #8]
 800e1a8:	1ad3      	subs	r3, r2, r3
 800e1aa:	68fa      	ldr	r2, [r7, #12]
 800e1ac:	429a      	cmp	r2, r3
 800e1ae:	d201      	bcs.n	800e1b4 <Finger_Enroll+0x4c>
			error = 1;
 800e1b0:	2301      	movs	r3, #1
 800e1b2:	613b      	str	r3, [r7, #16]
		}
		// send command
		BSP_Led_Toggle_All();
 800e1b4:	f7ff faca 	bl	800d74c <BSP_Led_Toggle_All>
		p = FZ3387_getImage();
 800e1b8:	f000 fb28 	bl	800e80c <FZ3387_getImage>
 800e1bc:	4603      	mov	r3, r0
 800e1be:	617b      	str	r3, [r7, #20]
		// check response
		switch (p) {
 800e1c0:	697b      	ldr	r3, [r7, #20]
 800e1c2:	2b03      	cmp	r3, #3
 800e1c4:	d81a      	bhi.n	800e1fc <Finger_Enroll+0x94>
 800e1c6:	a201      	add	r2, pc, #4	; (adr r2, 800e1cc <Finger_Enroll+0x64>)
 800e1c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1cc:	0800e1dd 	.word	0x0800e1dd
 800e1d0:	0800e1ed 	.word	0x0800e1ed
 800e1d4:	0800e1e5 	.word	0x0800e1e5
 800e1d8:	0800e1f5 	.word	0x0800e1f5
			case FINGERPRINT_OK:
				SWV_SendStrLn("Image taken");
 800e1dc:	48a6      	ldr	r0, [pc, #664]	; (800e478 <Finger_Enroll+0x310>)
 800e1de:	f003 fe31 	bl	8011e44 <SWV_SendStrLn>
				break;
 800e1e2:	e00f      	b.n	800e204 <Finger_Enroll+0x9c>
			case FINGERPRINT_NOFINGER:
				SWV_SendStrLn(".");
 800e1e4:	48a5      	ldr	r0, [pc, #660]	; (800e47c <Finger_Enroll+0x314>)
 800e1e6:	f003 fe2d 	bl	8011e44 <SWV_SendStrLn>
				break;
 800e1ea:	e00b      	b.n	800e204 <Finger_Enroll+0x9c>
			case FINGERPRINT_PACKETRECIEVEERR:
				SWV_SendStrLn("Communication error");
 800e1ec:	48a4      	ldr	r0, [pc, #656]	; (800e480 <Finger_Enroll+0x318>)
 800e1ee:	f003 fe29 	bl	8011e44 <SWV_SendStrLn>
				break;
 800e1f2:	e007      	b.n	800e204 <Finger_Enroll+0x9c>
			case FINGERPRINT_IMAGEFAIL:
				SWV_SendStrLn("Imaging error");
 800e1f4:	48a3      	ldr	r0, [pc, #652]	; (800e484 <Finger_Enroll+0x31c>)
 800e1f6:	f003 fe25 	bl	8011e44 <SWV_SendStrLn>
				break;
 800e1fa:	e003      	b.n	800e204 <Finger_Enroll+0x9c>
			default:
				SWV_SendStrLn("Unknown error");
 800e1fc:	48a2      	ldr	r0, [pc, #648]	; (800e488 <Finger_Enroll+0x320>)
 800e1fe:	f003 fe21 	bl	8011e44 <SWV_SendStrLn>
				break;
 800e202:	bf00      	nop
	while (p != FINGERPRINT_OK && !error) {
 800e204:	697b      	ldr	r3, [r7, #20]
 800e206:	2b00      	cmp	r3, #0
 800e208:	d002      	beq.n	800e210 <Finger_Enroll+0xa8>
 800e20a:	693b      	ldr	r3, [r7, #16]
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d0c7      	beq.n	800e1a0 <Finger_Enroll+0x38>
		}
	}

	if (!error) {
 800e210:	693b      	ldr	r3, [r7, #16]
 800e212:	2b00      	cmp	r3, #0
 800e214:	d152      	bne.n	800e2bc <Finger_Enroll+0x154>
		// set default to error, then set to fix
		error = 1;
 800e216:	2301      	movs	r3, #1
 800e218:	613b      	str	r3, [r7, #16]
		//	put image to buffer 1
		p = FZ3387_image2Tz(1);
 800e21a:	2001      	movs	r0, #1
 800e21c:	f000 fb05 	bl	800e82a <FZ3387_image2Tz>
 800e220:	4603      	mov	r3, r0
 800e222:	617b      	str	r3, [r7, #20]
		switch (p) {
 800e224:	697b      	ldr	r3, [r7, #20]
 800e226:	2b15      	cmp	r3, #21
 800e228:	d844      	bhi.n	800e2b4 <Finger_Enroll+0x14c>
 800e22a:	a201      	add	r2, pc, #4	; (adr r2, 800e230 <Finger_Enroll+0xc8>)
 800e22c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e230:	0800e289 	.word	0x0800e289
 800e234:	0800e29d 	.word	0x0800e29d
 800e238:	0800e2b5 	.word	0x0800e2b5
 800e23c:	0800e2b5 	.word	0x0800e2b5
 800e240:	0800e2b5 	.word	0x0800e2b5
 800e244:	0800e2b5 	.word	0x0800e2b5
 800e248:	0800e295 	.word	0x0800e295
 800e24c:	0800e2a5 	.word	0x0800e2a5
 800e250:	0800e2b5 	.word	0x0800e2b5
 800e254:	0800e2b5 	.word	0x0800e2b5
 800e258:	0800e2b5 	.word	0x0800e2b5
 800e25c:	0800e2b5 	.word	0x0800e2b5
 800e260:	0800e2b5 	.word	0x0800e2b5
 800e264:	0800e2b5 	.word	0x0800e2b5
 800e268:	0800e2b5 	.word	0x0800e2b5
 800e26c:	0800e2b5 	.word	0x0800e2b5
 800e270:	0800e2b5 	.word	0x0800e2b5
 800e274:	0800e2b5 	.word	0x0800e2b5
 800e278:	0800e2b5 	.word	0x0800e2b5
 800e27c:	0800e2b5 	.word	0x0800e2b5
 800e280:	0800e2b5 	.word	0x0800e2b5
 800e284:	0800e2ad 	.word	0x0800e2ad
			case FINGERPRINT_OK:
				SWV_SendStrLn("Image converted");
 800e288:	4880      	ldr	r0, [pc, #512]	; (800e48c <Finger_Enroll+0x324>)
 800e28a:	f003 fddb 	bl	8011e44 <SWV_SendStrLn>
				error = 0;
 800e28e:	2300      	movs	r3, #0
 800e290:	613b      	str	r3, [r7, #16]
				break;
 800e292:	e014      	b.n	800e2be <Finger_Enroll+0x156>
			case FINGERPRINT_IMAGEMESS:
				SWV_SendStrLn("Image too messy");
 800e294:	487e      	ldr	r0, [pc, #504]	; (800e490 <Finger_Enroll+0x328>)
 800e296:	f003 fdd5 	bl	8011e44 <SWV_SendStrLn>
				break;
 800e29a:	e010      	b.n	800e2be <Finger_Enroll+0x156>
			case FINGERPRINT_PACKETRECIEVEERR:
				SWV_SendStrLn("Communication error");
 800e29c:	4878      	ldr	r0, [pc, #480]	; (800e480 <Finger_Enroll+0x318>)
 800e29e:	f003 fdd1 	bl	8011e44 <SWV_SendStrLn>
				break;
 800e2a2:	e00c      	b.n	800e2be <Finger_Enroll+0x156>
			case FINGERPRINT_FEATUREFAIL:
				SWV_SendStrLn("Could not find finger print features");
 800e2a4:	487b      	ldr	r0, [pc, #492]	; (800e494 <Finger_Enroll+0x32c>)
 800e2a6:	f003 fdcd 	bl	8011e44 <SWV_SendStrLn>
				break;
 800e2aa:	e008      	b.n	800e2be <Finger_Enroll+0x156>
			case FINGERPRINT_INVALIDIMAGE:
				SWV_SendStrLn("Could not find finger print features");
 800e2ac:	4879      	ldr	r0, [pc, #484]	; (800e494 <Finger_Enroll+0x32c>)
 800e2ae:	f003 fdc9 	bl	8011e44 <SWV_SendStrLn>
				break;
 800e2b2:	e004      	b.n	800e2be <Finger_Enroll+0x156>
			default:
				SWV_SendStrLn("Unknown error");
 800e2b4:	4874      	ldr	r0, [pc, #464]	; (800e488 <Finger_Enroll+0x320>)
 800e2b6:	f003 fdc5 	bl	8011e44 <SWV_SendStrLn>
				break;
 800e2ba:	e000      	b.n	800e2be <Finger_Enroll+0x156>
		}
	}
 800e2bc:	bf00      	nop

	if (!error) {
 800e2be:	693b      	ldr	r3, [r7, #16]
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d14b      	bne.n	800e35c <Finger_Enroll+0x1f4>
		//	 Wait for put your finger up
		BSP_Led_Write_All(0);
 800e2c4:	2000      	movs	r0, #0
 800e2c6:	f7ff fa19 	bl	800d6fc <BSP_Led_Write_All>
		SWV_SendStrLn("Remove finger");
 800e2ca:	4873      	ldr	r0, [pc, #460]	; (800e498 <Finger_Enroll+0x330>)
 800e2cc:	f003 fdba 	bl	8011e44 <SWV_SendStrLn>
		osDelay(2000);
 800e2d0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800e2d4:	f7f9 ffe9 	bl	80082aa <osDelay>

		//	Take Image again
		SWV_SendStrLn("Place same finger again");
 800e2d8:	4870      	ldr	r0, [pc, #448]	; (800e49c <Finger_Enroll+0x334>)
 800e2da:	f003 fdb3 	bl	8011e44 <SWV_SendStrLn>
		p = -1;
 800e2de:	f04f 33ff 	mov.w	r3, #4294967295
 800e2e2:	617b      	str	r3, [r7, #20]
		// set timeout guard
		tick = osKernelSysTick();
 800e2e4:	f7f9 ff85 	bl	80081f2 <osKernelSysTick>
 800e2e8:	60b8      	str	r0, [r7, #8]
		while (p != FINGERPRINT_OK && !error) {
 800e2ea:	e031      	b.n	800e350 <Finger_Enroll+0x1e8>
			// handle timeout
			if ((osKernelSysTick() - tick) > timeout_tick) {
 800e2ec:	f7f9 ff81 	bl	80081f2 <osKernelSysTick>
 800e2f0:	4602      	mov	r2, r0
 800e2f2:	68bb      	ldr	r3, [r7, #8]
 800e2f4:	1ad3      	subs	r3, r2, r3
 800e2f6:	68fa      	ldr	r2, [r7, #12]
 800e2f8:	429a      	cmp	r2, r3
 800e2fa:	d201      	bcs.n	800e300 <Finger_Enroll+0x198>
				error = 1;
 800e2fc:	2301      	movs	r3, #1
 800e2fe:	613b      	str	r3, [r7, #16]
			}
			// send command
			BSP_Led_Toggle_All();
 800e300:	f7ff fa24 	bl	800d74c <BSP_Led_Toggle_All>
			p = FZ3387_getImage();
 800e304:	f000 fa82 	bl	800e80c <FZ3387_getImage>
 800e308:	4603      	mov	r3, r0
 800e30a:	617b      	str	r3, [r7, #20]
			// handle response
			switch (p) {
 800e30c:	697b      	ldr	r3, [r7, #20]
 800e30e:	2b03      	cmp	r3, #3
 800e310:	d81a      	bhi.n	800e348 <Finger_Enroll+0x1e0>
 800e312:	a201      	add	r2, pc, #4	; (adr r2, 800e318 <Finger_Enroll+0x1b0>)
 800e314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e318:	0800e329 	.word	0x0800e329
 800e31c:	0800e339 	.word	0x0800e339
 800e320:	0800e331 	.word	0x0800e331
 800e324:	0800e341 	.word	0x0800e341
				case FINGERPRINT_OK:
					SWV_SendStrLn("Image taken");
 800e328:	4853      	ldr	r0, [pc, #332]	; (800e478 <Finger_Enroll+0x310>)
 800e32a:	f003 fd8b 	bl	8011e44 <SWV_SendStrLn>
					break;
 800e32e:	e00f      	b.n	800e350 <Finger_Enroll+0x1e8>
				case FINGERPRINT_NOFINGER:
					SWV_SendStr(".");
 800e330:	4852      	ldr	r0, [pc, #328]	; (800e47c <Finger_Enroll+0x314>)
 800e332:	f003 fd65 	bl	8011e00 <SWV_SendStr>
					break;
 800e336:	e00b      	b.n	800e350 <Finger_Enroll+0x1e8>
				case FINGERPRINT_PACKETRECIEVEERR:
					SWV_SendStrLn("Communication error");
 800e338:	4851      	ldr	r0, [pc, #324]	; (800e480 <Finger_Enroll+0x318>)
 800e33a:	f003 fd83 	bl	8011e44 <SWV_SendStrLn>
					break;
 800e33e:	e007      	b.n	800e350 <Finger_Enroll+0x1e8>
				case FINGERPRINT_IMAGEFAIL:
					SWV_SendStrLn("Imaging error");
 800e340:	4850      	ldr	r0, [pc, #320]	; (800e484 <Finger_Enroll+0x31c>)
 800e342:	f003 fd7f 	bl	8011e44 <SWV_SendStrLn>
					break;
 800e346:	e003      	b.n	800e350 <Finger_Enroll+0x1e8>
				default:
					SWV_SendStrLn("Unknown error");
 800e348:	484f      	ldr	r0, [pc, #316]	; (800e488 <Finger_Enroll+0x320>)
 800e34a:	f003 fd7b 	bl	8011e44 <SWV_SendStrLn>
					break;
 800e34e:	bf00      	nop
		while (p != FINGERPRINT_OK && !error) {
 800e350:	697b      	ldr	r3, [r7, #20]
 800e352:	2b00      	cmp	r3, #0
 800e354:	d002      	beq.n	800e35c <Finger_Enroll+0x1f4>
 800e356:	693b      	ldr	r3, [r7, #16]
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d0c7      	beq.n	800e2ec <Finger_Enroll+0x184>
			}
		}
	}

	if (!error) {
 800e35c:	693b      	ldr	r3, [r7, #16]
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d152      	bne.n	800e408 <Finger_Enroll+0x2a0>
		error = 1;
 800e362:	2301      	movs	r3, #1
 800e364:	613b      	str	r3, [r7, #16]
		//	put image to buffer 2
		p = FZ3387_image2Tz(2);
 800e366:	2002      	movs	r0, #2
 800e368:	f000 fa5f 	bl	800e82a <FZ3387_image2Tz>
 800e36c:	4603      	mov	r3, r0
 800e36e:	617b      	str	r3, [r7, #20]
		switch (p) {
 800e370:	697b      	ldr	r3, [r7, #20]
 800e372:	2b15      	cmp	r3, #21
 800e374:	d844      	bhi.n	800e400 <Finger_Enroll+0x298>
 800e376:	a201      	add	r2, pc, #4	; (adr r2, 800e37c <Finger_Enroll+0x214>)
 800e378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e37c:	0800e3d5 	.word	0x0800e3d5
 800e380:	0800e3e9 	.word	0x0800e3e9
 800e384:	0800e401 	.word	0x0800e401
 800e388:	0800e401 	.word	0x0800e401
 800e38c:	0800e401 	.word	0x0800e401
 800e390:	0800e401 	.word	0x0800e401
 800e394:	0800e3e1 	.word	0x0800e3e1
 800e398:	0800e3f1 	.word	0x0800e3f1
 800e39c:	0800e401 	.word	0x0800e401
 800e3a0:	0800e401 	.word	0x0800e401
 800e3a4:	0800e401 	.word	0x0800e401
 800e3a8:	0800e401 	.word	0x0800e401
 800e3ac:	0800e401 	.word	0x0800e401
 800e3b0:	0800e401 	.word	0x0800e401
 800e3b4:	0800e401 	.word	0x0800e401
 800e3b8:	0800e401 	.word	0x0800e401
 800e3bc:	0800e401 	.word	0x0800e401
 800e3c0:	0800e401 	.word	0x0800e401
 800e3c4:	0800e401 	.word	0x0800e401
 800e3c8:	0800e401 	.word	0x0800e401
 800e3cc:	0800e401 	.word	0x0800e401
 800e3d0:	0800e3f9 	.word	0x0800e3f9
			case FINGERPRINT_OK:
				SWV_SendStrLn("Image converted");
 800e3d4:	482d      	ldr	r0, [pc, #180]	; (800e48c <Finger_Enroll+0x324>)
 800e3d6:	f003 fd35 	bl	8011e44 <SWV_SendStrLn>
				error = 0;
 800e3da:	2300      	movs	r3, #0
 800e3dc:	613b      	str	r3, [r7, #16]
				break;
 800e3de:	e014      	b.n	800e40a <Finger_Enroll+0x2a2>
			case FINGERPRINT_IMAGEMESS:
				SWV_SendStrLn("Image too messy");
 800e3e0:	482b      	ldr	r0, [pc, #172]	; (800e490 <Finger_Enroll+0x328>)
 800e3e2:	f003 fd2f 	bl	8011e44 <SWV_SendStrLn>
				break;
 800e3e6:	e010      	b.n	800e40a <Finger_Enroll+0x2a2>
			case FINGERPRINT_PACKETRECIEVEERR:
				SWV_SendStrLn("Communication error");
 800e3e8:	4825      	ldr	r0, [pc, #148]	; (800e480 <Finger_Enroll+0x318>)
 800e3ea:	f003 fd2b 	bl	8011e44 <SWV_SendStrLn>
				break;
 800e3ee:	e00c      	b.n	800e40a <Finger_Enroll+0x2a2>
			case FINGERPRINT_FEATUREFAIL:
				SWV_SendStrLn("Could not find fingerprint features");
 800e3f0:	482b      	ldr	r0, [pc, #172]	; (800e4a0 <Finger_Enroll+0x338>)
 800e3f2:	f003 fd27 	bl	8011e44 <SWV_SendStrLn>
				break;
 800e3f6:	e008      	b.n	800e40a <Finger_Enroll+0x2a2>
			case FINGERPRINT_INVALIDIMAGE:
				SWV_SendStrLn("Could not find fingerprint features");
 800e3f8:	4829      	ldr	r0, [pc, #164]	; (800e4a0 <Finger_Enroll+0x338>)
 800e3fa:	f003 fd23 	bl	8011e44 <SWV_SendStrLn>
				break;
 800e3fe:	e004      	b.n	800e40a <Finger_Enroll+0x2a2>
			default:
				SWV_SendStrLn("Unknown error");
 800e400:	4821      	ldr	r0, [pc, #132]	; (800e488 <Finger_Enroll+0x320>)
 800e402:	f003 fd1f 	bl	8011e44 <SWV_SendStrLn>
				break;
 800e406:	e000      	b.n	800e40a <Finger_Enroll+0x2a2>
		}
	}
 800e408:	bf00      	nop

	if (!error) {
 800e40a:	693b      	ldr	r3, [r7, #16]
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d152      	bne.n	800e4b6 <Finger_Enroll+0x34e>
		//	 Wait for put your finger up
		BSP_Led_Write_All(0);
 800e410:	2000      	movs	r0, #0
 800e412:	f7ff f973 	bl	800d6fc <BSP_Led_Write_All>
		SWV_SendStrLn("Remove finger");
 800e416:	4820      	ldr	r0, [pc, #128]	; (800e498 <Finger_Enroll+0x330>)
 800e418:	f003 fd14 	bl	8011e44 <SWV_SendStrLn>
		osDelay(2000);
 800e41c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800e420:	f7f9 ff43 	bl	80082aa <osDelay>
		//	Create Register model
		error = 1;
 800e424:	2301      	movs	r3, #1
 800e426:	613b      	str	r3, [r7, #16]
		sprintf(str, "Creating model for #%d", id);
 800e428:	79fb      	ldrb	r3, [r7, #7]
 800e42a:	461a      	mov	r2, r3
 800e42c:	491d      	ldr	r1, [pc, #116]	; (800e4a4 <Finger_Enroll+0x33c>)
 800e42e:	4811      	ldr	r0, [pc, #68]	; (800e474 <Finger_Enroll+0x30c>)
 800e430:	f006 feae 	bl	8015190 <siprintf>
		SWV_SendStrLn(str);
 800e434:	480f      	ldr	r0, [pc, #60]	; (800e474 <Finger_Enroll+0x30c>)
 800e436:	f003 fd05 	bl	8011e44 <SWV_SendStrLn>

		p = FZ3387_createModel();
 800e43a:	f000 fa0a 	bl	800e852 <FZ3387_createModel>
 800e43e:	4603      	mov	r3, r0
 800e440:	617b      	str	r3, [r7, #20]
		if (p == FINGERPRINT_OK) {
 800e442:	697b      	ldr	r3, [r7, #20]
 800e444:	2b00      	cmp	r3, #0
 800e446:	d105      	bne.n	800e454 <Finger_Enroll+0x2ec>
			SWV_SendStrLn("Prints matched!");
 800e448:	4817      	ldr	r0, [pc, #92]	; (800e4a8 <Finger_Enroll+0x340>)
 800e44a:	f003 fcfb 	bl	8011e44 <SWV_SendStrLn>
			error = 0;
 800e44e:	2300      	movs	r3, #0
 800e450:	613b      	str	r3, [r7, #16]
 800e452:	e030      	b.n	800e4b6 <Finger_Enroll+0x34e>
		} else if (p == FINGERPRINT_PACKETRECIEVEERR) {
 800e454:	697b      	ldr	r3, [r7, #20]
 800e456:	2b01      	cmp	r3, #1
 800e458:	d103      	bne.n	800e462 <Finger_Enroll+0x2fa>
			SWV_SendStrLn("Communication error");
 800e45a:	4809      	ldr	r0, [pc, #36]	; (800e480 <Finger_Enroll+0x318>)
 800e45c:	f003 fcf2 	bl	8011e44 <SWV_SendStrLn>
 800e460:	e029      	b.n	800e4b6 <Finger_Enroll+0x34e>
		} else if (p == FINGERPRINT_ENROLLMISMATCH) {
 800e462:	697b      	ldr	r3, [r7, #20]
 800e464:	2b0a      	cmp	r3, #10
 800e466:	d123      	bne.n	800e4b0 <Finger_Enroll+0x348>
			SWV_SendStrLn("Fingerprints did not match");
 800e468:	4810      	ldr	r0, [pc, #64]	; (800e4ac <Finger_Enroll+0x344>)
 800e46a:	f003 fceb 	bl	8011e44 <SWV_SendStrLn>
 800e46e:	e022      	b.n	800e4b6 <Finger_Enroll+0x34e>
 800e470:	0801894c 	.word	0x0801894c
 800e474:	20007b64 	.word	0x20007b64
 800e478:	08018978 	.word	0x08018978
 800e47c:	08018984 	.word	0x08018984
 800e480:	08018988 	.word	0x08018988
 800e484:	0801899c 	.word	0x0801899c
 800e488:	080189ac 	.word	0x080189ac
 800e48c:	080189bc 	.word	0x080189bc
 800e490:	080189cc 	.word	0x080189cc
 800e494:	080189dc 	.word	0x080189dc
 800e498:	08018a04 	.word	0x08018a04
 800e49c:	08018a14 	.word	0x08018a14
 800e4a0:	08018a2c 	.word	0x08018a2c
 800e4a4:	08018a50 	.word	0x08018a50
 800e4a8:	08018a68 	.word	0x08018a68
 800e4ac:	08018a78 	.word	0x08018a78
		} else {
			SWV_SendStrLn("Unknown error");
 800e4b0:	4820      	ldr	r0, [pc, #128]	; (800e534 <Finger_Enroll+0x3cc>)
 800e4b2:	f003 fcc7 	bl	8011e44 <SWV_SendStrLn>
		}
	}

	if (!error) {
 800e4b6:	693b      	ldr	r3, [r7, #16]
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d132      	bne.n	800e522 <Finger_Enroll+0x3ba>
		error = 1;
 800e4bc:	2301      	movs	r3, #1
 800e4be:	613b      	str	r3, [r7, #16]
		//	Store in memory
		sprintf(str, "ID %d", id);
 800e4c0:	79fb      	ldrb	r3, [r7, #7]
 800e4c2:	461a      	mov	r2, r3
 800e4c4:	491c      	ldr	r1, [pc, #112]	; (800e538 <Finger_Enroll+0x3d0>)
 800e4c6:	481d      	ldr	r0, [pc, #116]	; (800e53c <Finger_Enroll+0x3d4>)
 800e4c8:	f006 fe62 	bl	8015190 <siprintf>
		SWV_SendStrLn(str);
 800e4cc:	481b      	ldr	r0, [pc, #108]	; (800e53c <Finger_Enroll+0x3d4>)
 800e4ce:	f003 fcb9 	bl	8011e44 <SWV_SendStrLn>

		p = FZ3387_storeModel(id);
 800e4d2:	79fb      	ldrb	r3, [r7, #7]
 800e4d4:	b29b      	uxth	r3, r3
 800e4d6:	4618      	mov	r0, r3
 800e4d8:	f000 f9ca 	bl	800e870 <FZ3387_storeModel>
 800e4dc:	4603      	mov	r3, r0
 800e4de:	617b      	str	r3, [r7, #20]
		if (p == FINGERPRINT_OK) {
 800e4e0:	697b      	ldr	r3, [r7, #20]
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d105      	bne.n	800e4f2 <Finger_Enroll+0x38a>
			SWV_SendStrLn("Stored!");
 800e4e6:	4816      	ldr	r0, [pc, #88]	; (800e540 <Finger_Enroll+0x3d8>)
 800e4e8:	f003 fcac 	bl	8011e44 <SWV_SendStrLn>
			error = 0;
 800e4ec:	2300      	movs	r3, #0
 800e4ee:	613b      	str	r3, [r7, #16]
 800e4f0:	e017      	b.n	800e522 <Finger_Enroll+0x3ba>
		} else if (p == FINGERPRINT_PACKETRECIEVEERR) {
 800e4f2:	697b      	ldr	r3, [r7, #20]
 800e4f4:	2b01      	cmp	r3, #1
 800e4f6:	d103      	bne.n	800e500 <Finger_Enroll+0x398>
			SWV_SendStrLn("Communication error");
 800e4f8:	4812      	ldr	r0, [pc, #72]	; (800e544 <Finger_Enroll+0x3dc>)
 800e4fa:	f003 fca3 	bl	8011e44 <SWV_SendStrLn>
 800e4fe:	e010      	b.n	800e522 <Finger_Enroll+0x3ba>
		} else if (p == FINGERPRINT_BADLOCATION) {
 800e500:	697b      	ldr	r3, [r7, #20]
 800e502:	2b0b      	cmp	r3, #11
 800e504:	d103      	bne.n	800e50e <Finger_Enroll+0x3a6>
			SWV_SendStrLn("Could not store in that location");
 800e506:	4810      	ldr	r0, [pc, #64]	; (800e548 <Finger_Enroll+0x3e0>)
 800e508:	f003 fc9c 	bl	8011e44 <SWV_SendStrLn>
 800e50c:	e009      	b.n	800e522 <Finger_Enroll+0x3ba>
		} else if (p == FINGERPRINT_FLASHERR) {
 800e50e:	697b      	ldr	r3, [r7, #20]
 800e510:	2b18      	cmp	r3, #24
 800e512:	d103      	bne.n	800e51c <Finger_Enroll+0x3b4>
			SWV_SendStrLn("Error writing to flash");
 800e514:	480d      	ldr	r0, [pc, #52]	; (800e54c <Finger_Enroll+0x3e4>)
 800e516:	f003 fc95 	bl	8011e44 <SWV_SendStrLn>
 800e51a:	e002      	b.n	800e522 <Finger_Enroll+0x3ba>
		} else {
			SWV_SendStrLn("Unknown error");
 800e51c:	4805      	ldr	r0, [pc, #20]	; (800e534 <Finger_Enroll+0x3cc>)
 800e51e:	f003 fc91 	bl	8011e44 <SWV_SendStrLn>
		}
	}

	Finger_Off();
 800e522:	f7ff fdf1 	bl	800e108 <Finger_Off>
	return p;
 800e526:	697b      	ldr	r3, [r7, #20]
 800e528:	b2db      	uxtb	r3, r3
}
 800e52a:	4618      	mov	r0, r3
 800e52c:	3718      	adds	r7, #24
 800e52e:	46bd      	mov	sp, r7
 800e530:	bd80      	pop	{r7, pc}
 800e532:	bf00      	nop
 800e534:	080189ac 	.word	0x080189ac
 800e538:	08018a94 	.word	0x08018a94
 800e53c:	20007b64 	.word	0x20007b64
 800e540:	08018a9c 	.word	0x08018a9c
 800e544:	08018988 	.word	0x08018988
 800e548:	08018aa4 	.word	0x08018aa4
 800e54c:	08018ac8 	.word	0x08018ac8

0800e550 <Finger_Delete_ID>:

uint8_t Finger_Delete_ID(uint8_t id) {
 800e550:	b580      	push	{r7, lr}
 800e552:	b084      	sub	sp, #16
 800e554:	af00      	add	r7, sp, #0
 800e556:	4603      	mov	r3, r0
 800e558:	71fb      	strb	r3, [r7, #7]
	uint8_t p = -1;
 800e55a:	23ff      	movs	r3, #255	; 0xff
 800e55c:	73fb      	strb	r3, [r7, #15]

	Finger_On();
 800e55e:	f7ff fdc3 	bl	800e0e8 <Finger_On>
	p = FZ3387_deleteModel(id);
 800e562:	79fb      	ldrb	r3, [r7, #7]
 800e564:	b29b      	uxth	r3, r3
 800e566:	4618      	mov	r0, r3
 800e568:	f000 f99e 	bl	800e8a8 <FZ3387_deleteModel>
 800e56c:	4603      	mov	r3, r0
 800e56e:	73fb      	strb	r3, [r7, #15]
	Finger_Off();
 800e570:	f7ff fdca 	bl	800e108 <Finger_Off>

	if (p == FINGERPRINT_OK) {
 800e574:	7bfb      	ldrb	r3, [r7, #15]
 800e576:	2b00      	cmp	r3, #0
 800e578:	d103      	bne.n	800e582 <Finger_Delete_ID+0x32>
		SWV_SendStrLn("Deleted!");
 800e57a:	4813      	ldr	r0, [pc, #76]	; (800e5c8 <Finger_Delete_ID+0x78>)
 800e57c:	f003 fc62 	bl	8011e44 <SWV_SendStrLn>
 800e580:	e01d      	b.n	800e5be <Finger_Delete_ID+0x6e>
	} else if (p == FINGERPRINT_PACKETRECIEVEERR) {
 800e582:	7bfb      	ldrb	r3, [r7, #15]
 800e584:	2b01      	cmp	r3, #1
 800e586:	d103      	bne.n	800e590 <Finger_Delete_ID+0x40>
		SWV_SendStrLn("Communication error");
 800e588:	4810      	ldr	r0, [pc, #64]	; (800e5cc <Finger_Delete_ID+0x7c>)
 800e58a:	f003 fc5b 	bl	8011e44 <SWV_SendStrLn>
 800e58e:	e016      	b.n	800e5be <Finger_Delete_ID+0x6e>
	} else if (p == FINGERPRINT_BADLOCATION) {
 800e590:	7bfb      	ldrb	r3, [r7, #15]
 800e592:	2b0b      	cmp	r3, #11
 800e594:	d103      	bne.n	800e59e <Finger_Delete_ID+0x4e>
		SWV_SendStrLn("Could not delete in that location");
 800e596:	480e      	ldr	r0, [pc, #56]	; (800e5d0 <Finger_Delete_ID+0x80>)
 800e598:	f003 fc54 	bl	8011e44 <SWV_SendStrLn>
 800e59c:	e00f      	b.n	800e5be <Finger_Delete_ID+0x6e>
	} else if (p == FINGERPRINT_FLASHERR) {
 800e59e:	7bfb      	ldrb	r3, [r7, #15]
 800e5a0:	2b18      	cmp	r3, #24
 800e5a2:	d103      	bne.n	800e5ac <Finger_Delete_ID+0x5c>
		SWV_SendStrLn("Error writing to flash");
 800e5a4:	480b      	ldr	r0, [pc, #44]	; (800e5d4 <Finger_Delete_ID+0x84>)
 800e5a6:	f003 fc4d 	bl	8011e44 <SWV_SendStrLn>
 800e5aa:	e008      	b.n	800e5be <Finger_Delete_ID+0x6e>
	} else {
		sprintf(str, "Unknown error: 0x%02x", p);
 800e5ac:	7bfb      	ldrb	r3, [r7, #15]
 800e5ae:	461a      	mov	r2, r3
 800e5b0:	4909      	ldr	r1, [pc, #36]	; (800e5d8 <Finger_Delete_ID+0x88>)
 800e5b2:	480a      	ldr	r0, [pc, #40]	; (800e5dc <Finger_Delete_ID+0x8c>)
 800e5b4:	f006 fdec 	bl	8015190 <siprintf>
		SWV_SendStrLn(str);
 800e5b8:	4808      	ldr	r0, [pc, #32]	; (800e5dc <Finger_Delete_ID+0x8c>)
 800e5ba:	f003 fc43 	bl	8011e44 <SWV_SendStrLn>
	}

	return p;
 800e5be:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5c0:	4618      	mov	r0, r3
 800e5c2:	3710      	adds	r7, #16
 800e5c4:	46bd      	mov	sp, r7
 800e5c6:	bd80      	pop	{r7, pc}
 800e5c8:	08018ae0 	.word	0x08018ae0
 800e5cc:	08018988 	.word	0x08018988
 800e5d0:	08018aec 	.word	0x08018aec
 800e5d4:	08018ac8 	.word	0x08018ac8
 800e5d8:	08018b10 	.word	0x08018b10
 800e5dc:	20007b64 	.word	0x20007b64

0800e5e0 <Finger_Empty_Database>:

uint8_t Finger_Empty_Database(void) {
 800e5e0:	b580      	push	{r7, lr}
 800e5e2:	b082      	sub	sp, #8
 800e5e4:	af00      	add	r7, sp, #0
	uint8_t p = -1;
 800e5e6:	23ff      	movs	r3, #255	; 0xff
 800e5e8:	71fb      	strb	r3, [r7, #7]

	Finger_On();
 800e5ea:	f7ff fd7d 	bl	800e0e8 <Finger_On>
	p = FZ3387_emptyDatabase();
 800e5ee:	f000 f979 	bl	800e8e4 <FZ3387_emptyDatabase>
 800e5f2:	4603      	mov	r3, r0
 800e5f4:	71fb      	strb	r3, [r7, #7]
	Finger_Off();
 800e5f6:	f7ff fd87 	bl	800e108 <Finger_Off>

	return p;
 800e5fa:	79fb      	ldrb	r3, [r7, #7]
}
 800e5fc:	4618      	mov	r0, r3
 800e5fe:	3708      	adds	r7, #8
 800e600:	46bd      	mov	sp, r7
 800e602:	bd80      	pop	{r7, pc}

0800e604 <Finger_Auth_Fast>:
	}

	return -1;
}

int8_t Finger_Auth_Fast(void) {
 800e604:	b580      	push	{r7, lr}
 800e606:	b082      	sub	sp, #8
 800e608:	af00      	add	r7, sp, #0
	uint8_t p = -1;
 800e60a:	23ff      	movs	r3, #255	; 0xff
 800e60c:	71fb      	strb	r3, [r7, #7]

	Finger_On();
 800e60e:	f7ff fd6b 	bl	800e0e8 <Finger_On>

	p = FZ3387_getImage();
 800e612:	f000 f8fb 	bl	800e80c <FZ3387_getImage>
 800e616:	4603      	mov	r3, r0
 800e618:	71fb      	strb	r3, [r7, #7]

	if (p == FINGERPRINT_OK) {
 800e61a:	79fb      	ldrb	r3, [r7, #7]
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d104      	bne.n	800e62a <Finger_Auth_Fast+0x26>
		p = FZ3387_image2Tz(1);
 800e620:	2001      	movs	r0, #1
 800e622:	f000 f902 	bl	800e82a <FZ3387_image2Tz>
 800e626:	4603      	mov	r3, r0
 800e628:	71fb      	strb	r3, [r7, #7]
	}

	if (p == FINGERPRINT_OK) {
 800e62a:	79fb      	ldrb	r3, [r7, #7]
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d103      	bne.n	800e638 <Finger_Auth_Fast+0x34>
		p = FZ3387_fingerFastSearch();
 800e630:	f000 f968 	bl	800e904 <FZ3387_fingerFastSearch>
 800e634:	4603      	mov	r3, r0
 800e636:	71fb      	strb	r3, [r7, #7]
	}

	Finger_Off();
 800e638:	f7ff fd66 	bl	800e108 <Finger_Off>

	if (p == FINGERPRINT_OK) {
 800e63c:	79fb      	ldrb	r3, [r7, #7]
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d113      	bne.n	800e66a <Finger_Auth_Fast+0x66>
		// found a match!
		sprintf(str, "Found ID #%d  with confidence of %d", fingerID, fingerConfidence);
 800e642:	4b0d      	ldr	r3, [pc, #52]	; (800e678 <Finger_Auth_Fast+0x74>)
 800e644:	881b      	ldrh	r3, [r3, #0]
 800e646:	461a      	mov	r2, r3
 800e648:	4b0c      	ldr	r3, [pc, #48]	; (800e67c <Finger_Auth_Fast+0x78>)
 800e64a:	881b      	ldrh	r3, [r3, #0]
 800e64c:	490c      	ldr	r1, [pc, #48]	; (800e680 <Finger_Auth_Fast+0x7c>)
 800e64e:	480d      	ldr	r0, [pc, #52]	; (800e684 <Finger_Auth_Fast+0x80>)
 800e650:	f006 fd9e 	bl	8015190 <siprintf>
		SWV_SendStrLn(str);
 800e654:	480b      	ldr	r0, [pc, #44]	; (800e684 <Finger_Auth_Fast+0x80>)
 800e656:	f003 fbf5 	bl	8011e44 <SWV_SendStrLn>

		if (fingerConfidence > FINGER_CONFIDENCE_MIN) {
 800e65a:	4b08      	ldr	r3, [pc, #32]	; (800e67c <Finger_Auth_Fast+0x78>)
 800e65c:	881b      	ldrh	r3, [r3, #0]
 800e65e:	2b0a      	cmp	r3, #10
 800e660:	d903      	bls.n	800e66a <Finger_Auth_Fast+0x66>
			return fingerID;
 800e662:	4b05      	ldr	r3, [pc, #20]	; (800e678 <Finger_Auth_Fast+0x74>)
 800e664:	881b      	ldrh	r3, [r3, #0]
 800e666:	b25b      	sxtb	r3, r3
 800e668:	e001      	b.n	800e66e <Finger_Auth_Fast+0x6a>
		}
	}

	return -1;
 800e66a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e66e:	4618      	mov	r0, r3
 800e670:	3708      	adds	r7, #8
 800e672:	46bd      	mov	sp, r7
 800e674:	bd80      	pop	{r7, pc}
 800e676:	bf00      	nop
 800e678:	20007b98 	.word	0x20007b98
 800e67c:	20007be8 	.word	0x20007be8
 800e680:	08018b6c 	.word	0x08018b6c
 800e684:	20007b64 	.word	0x20007b64

0800e688 <Flash_Save_Odometer>:

#include "_flash.h"

uint16_t VirtAddVarTab[NB_OF_VAR] = { VADDR_ODOMETER_L, VADDR_ODOMETER_H };

void Flash_Save_Odometer(uint32_t odometer) {
 800e688:	b580      	push	{r7, lr}
 800e68a:	b082      	sub	sp, #8
 800e68c:	af00      	add	r7, sp, #0
 800e68e:	6078      	str	r0, [r7, #4]
	EE_WriteVariable(VADDR_ODOMETER_L, (uint16_t) odometer);
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	b29b      	uxth	r3, r3
 800e694:	4619      	mov	r1, r3
 800e696:	2000      	movs	r0, #0
 800e698:	f7ff fb50 	bl	800dd3c <EE_WriteVariable>
	EE_WriteVariable(VADDR_ODOMETER_H, (uint16_t) odometer >> 16);
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	b29b      	uxth	r3, r3
 800e6a0:	141b      	asrs	r3, r3, #16
 800e6a2:	b29b      	uxth	r3, r3
 800e6a4:	4619      	mov	r1, r3
 800e6a6:	2001      	movs	r0, #1
 800e6a8:	f7ff fb48 	bl	800dd3c <EE_WriteVariable>
}
 800e6ac:	bf00      	nop
 800e6ae:	3708      	adds	r7, #8
 800e6b0:	46bd      	mov	sp, r7
 800e6b2:	bd80      	pop	{r7, pc}

0800e6b4 <Flash_Get_Odometer>:

uint32_t Flash_Get_Odometer(void) {
 800e6b4:	b580      	push	{r7, lr}
 800e6b6:	b082      	sub	sp, #8
 800e6b8:	af00      	add	r7, sp, #0
	uint16_t odom_L, odom_H;

	if (EE_ReadVariable(VADDR_ODOMETER_L, &odom_L) == HAL_OK) {
 800e6ba:	1dbb      	adds	r3, r7, #6
 800e6bc:	4619      	mov	r1, r3
 800e6be:	2000      	movs	r0, #0
 800e6c0:	f7ff faf2 	bl	800dca8 <EE_ReadVariable>
 800e6c4:	4603      	mov	r3, r0
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d10c      	bne.n	800e6e4 <Flash_Get_Odometer+0x30>
		if (EE_ReadVariable(VADDR_ODOMETER_H, &odom_H) == HAL_OK) {
 800e6ca:	1d3b      	adds	r3, r7, #4
 800e6cc:	4619      	mov	r1, r3
 800e6ce:	2001      	movs	r0, #1
 800e6d0:	f7ff faea 	bl	800dca8 <EE_ReadVariable>
 800e6d4:	4603      	mov	r3, r0
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d104      	bne.n	800e6e4 <Flash_Get_Odometer+0x30>
			return (odom_H << 16) | odom_L;
 800e6da:	88bb      	ldrh	r3, [r7, #4]
 800e6dc:	041b      	lsls	r3, r3, #16
 800e6de:	88fa      	ldrh	r2, [r7, #6]
 800e6e0:	4313      	orrs	r3, r2
 800e6e2:	e000      	b.n	800e6e6 <Flash_Get_Odometer+0x32>
		}
	}
	return 0;
 800e6e4:	2300      	movs	r3, #0
}
 800e6e6:	4618      	mov	r0, r3
 800e6e8:	3708      	adds	r7, #8
 800e6ea:	46bd      	mov	sp, r7
 800e6ec:	bd80      	pop	{r7, pc}
	...

0800e6f0 <FZ3387_SET_POWER>:
uint16_t fingerTemplateCount;

/***************************************************************************
 FUNCTIONS
 ***************************************************************************/
void FZ3387_SET_POWER(uint8_t state){
 800e6f0:	b580      	push	{r7, lr}
 800e6f2:	b082      	sub	sp, #8
 800e6f4:	af00      	add	r7, sp, #0
 800e6f6:	4603      	mov	r3, r0
 800e6f8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(FINGER_PWR_GPIO_Port, FINGER_PWR_Pin, state);
 800e6fa:	79fb      	ldrb	r3, [r7, #7]
 800e6fc:	461a      	mov	r2, r3
 800e6fe:	2104      	movs	r1, #4
 800e700:	4805      	ldr	r0, [pc, #20]	; (800e718 <FZ3387_SET_POWER+0x28>)
 800e702:	f7f4 fd5b 	bl	80031bc <HAL_GPIO_WritePin>
	osDelay(500);
 800e706:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e70a:	f7f9 fdce 	bl	80082aa <osDelay>
}
 800e70e:	bf00      	nop
 800e710:	3708      	adds	r7, #8
 800e712:	46bd      	mov	sp, r7
 800e714:	bd80      	pop	{r7, pc}
 800e716:	bf00      	nop
 800e718:	40020800 	.word	0x40020800

0800e71c <FZ3387_SERIAL_WRITE>:

void FZ3387_SERIAL_WRITE(uint8_t c){
 800e71c:	b580      	push	{r7, lr}
 800e71e:	b082      	sub	sp, #8
 800e720:	af00      	add	r7, sp, #0
 800e722:	4603      	mov	r3, r0
 800e724:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart4, &c, 1, HAL_MAX_DELAY);
 800e726:	1df9      	adds	r1, r7, #7
 800e728:	f04f 33ff 	mov.w	r3, #4294967295
 800e72c:	2201      	movs	r2, #1
 800e72e:	4803      	ldr	r0, [pc, #12]	; (800e73c <FZ3387_SERIAL_WRITE+0x20>)
 800e730:	f7f8 fed9 	bl	80074e6 <HAL_UART_Transmit>
}
 800e734:	bf00      	nop
 800e736:	3708      	adds	r7, #8
 800e738:	46bd      	mov	sp, r7
 800e73a:	bd80      	pop	{r7, pc}
 800e73c:	20008814 	.word	0x20008814

0800e740 <FZ3387_SERIAL_WRITE_U16>:

void FZ3387_SERIAL_WRITE_U16(uint16_t cc){
 800e740:	b580      	push	{r7, lr}
 800e742:	b082      	sub	sp, #8
 800e744:	af00      	add	r7, sp, #0
 800e746:	4603      	mov	r3, r0
 800e748:	80fb      	strh	r3, [r7, #6]
	FZ3387_SERIAL_WRITE((uint8_t)(cc>>8)); FZ3387_SERIAL_WRITE((uint8_t)(cc & 0xFF));
 800e74a:	88fb      	ldrh	r3, [r7, #6]
 800e74c:	0a1b      	lsrs	r3, r3, #8
 800e74e:	b29b      	uxth	r3, r3
 800e750:	b2db      	uxtb	r3, r3
 800e752:	4618      	mov	r0, r3
 800e754:	f7ff ffe2 	bl	800e71c <FZ3387_SERIAL_WRITE>
 800e758:	88fb      	ldrh	r3, [r7, #6]
 800e75a:	b2db      	uxtb	r3, r3
 800e75c:	4618      	mov	r0, r3
 800e75e:	f7ff ffdd 	bl	800e71c <FZ3387_SERIAL_WRITE>
}
 800e762:	bf00      	nop
 800e764:	3708      	adds	r7, #8
 800e766:	46bd      	mov	sp, r7
 800e768:	bd80      	pop	{r7, pc}
	...

0800e76c <FZ3387_SEND_CMD_PACKET>:

uint8_t FZ3387_SEND_CMD_PACKET(uint8_t *data, uint8_t size){
 800e76c:	b580      	push	{r7, lr}
 800e76e:	b082      	sub	sp, #8
 800e770:	af00      	add	r7, sp, #0
 800e772:	6078      	str	r0, [r7, #4]
 800e774:	460b      	mov	r3, r1
 800e776:	70fb      	strb	r3, [r7, #3]
	FZ3387_setPacket(FINGERPRINT_COMMANDPACKET, size, data);
 800e778:	78fb      	ldrb	r3, [r7, #3]
 800e77a:	b29b      	uxth	r3, r3
 800e77c:	687a      	ldr	r2, [r7, #4]
 800e77e:	4619      	mov	r1, r3
 800e780:	2001      	movs	r0, #1
 800e782:	f000 f90d 	bl	800e9a0 <FZ3387_setPacket>
	FZ3387_writeStructuredPacket();
 800e786:	f000 f951 	bl	800ea2c <FZ3387_writeStructuredPacket>

	if (FZ3387_getStructuredPacket() != FINGERPRINT_OK) {
 800e78a:	f000 f9ad 	bl	800eae8 <FZ3387_getStructuredPacket>
 800e78e:	4603      	mov	r3, r0
 800e790:	2b00      	cmp	r3, #0
 800e792:	d001      	beq.n	800e798 <FZ3387_SEND_CMD_PACKET+0x2c>
		return FINGERPRINT_PACKETRECIEVEERR;
 800e794:	2301      	movs	r3, #1
 800e796:	e007      	b.n	800e7a8 <FZ3387_SEND_CMD_PACKET+0x3c>
	}
	if (packet.type != FINGERPRINT_ACKPACKET) {
 800e798:	4b05      	ldr	r3, [pc, #20]	; (800e7b0 <FZ3387_SEND_CMD_PACKET+0x44>)
 800e79a:	799b      	ldrb	r3, [r3, #6]
 800e79c:	2b07      	cmp	r3, #7
 800e79e:	d001      	beq.n	800e7a4 <FZ3387_SEND_CMD_PACKET+0x38>
		return FINGERPRINT_PACKETRECIEVEERR;
 800e7a0:	2301      	movs	r3, #1
 800e7a2:	e001      	b.n	800e7a8 <FZ3387_SEND_CMD_PACKET+0x3c>
	}
	return packet.data[0];
 800e7a4:	4b02      	ldr	r3, [pc, #8]	; (800e7b0 <FZ3387_SEND_CMD_PACKET+0x44>)
 800e7a6:	7a9b      	ldrb	r3, [r3, #10]
}
 800e7a8:	4618      	mov	r0, r3
 800e7aa:	3708      	adds	r7, #8
 800e7ac:	46bd      	mov	sp, r7
 800e7ae:	bd80      	pop	{r7, pc}
 800e7b0:	20007b9c 	.word	0x20007b9c

0800e7b4 <FZ3387_verifyPassword>:
/*!
    @brief  Verifies the sensors' access password (default password is 0x0000000). A good way to also check if the sensors is active and responding
    @returns True if password is correct
 */
/**************************************************************************/
bool FZ3387_verifyPassword(void) {
 800e7b4:	b580      	push	{r7, lr}
 800e7b6:	af00      	add	r7, sp, #0
	return FZ3387_checkPassword() == FINGERPRINT_OK;
 800e7b8:	f000 f808 	bl	800e7cc <FZ3387_checkPassword>
 800e7bc:	4603      	mov	r3, r0
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	bf0c      	ite	eq
 800e7c2:	2301      	moveq	r3, #1
 800e7c4:	2300      	movne	r3, #0
 800e7c6:	b2db      	uxtb	r3, r3
}
 800e7c8:	4618      	mov	r0, r3
 800e7ca:	bd80      	pop	{r7, pc}

0800e7cc <FZ3387_checkPassword>:

uint8_t FZ3387_checkPassword(void) {
 800e7cc:	b580      	push	{r7, lr}
 800e7ce:	b082      	sub	sp, #8
 800e7d0:	af00      	add	r7, sp, #0
	uint8_t data[] = {
 800e7d2:	2313      	movs	r3, #19
 800e7d4:	703b      	strb	r3, [r7, #0]
 800e7d6:	2300      	movs	r3, #0
 800e7d8:	707b      	strb	r3, [r7, #1]
 800e7da:	2300      	movs	r3, #0
 800e7dc:	70bb      	strb	r3, [r7, #2]
 800e7de:	2300      	movs	r3, #0
 800e7e0:	70fb      	strb	r3, [r7, #3]
 800e7e2:	2300      	movs	r3, #0
 800e7e4:	713b      	strb	r3, [r7, #4]
			(uint8_t)(FINGERPRINT_PASSWORD >> 16),
			(uint8_t)(FINGERPRINT_PASSWORD >> 8),
			(uint8_t)(FINGERPRINT_PASSWORD & 0xFF)
	};

	FZ3387_SEND_CMD_PACKET(data, sizeof(data));
 800e7e6:	463b      	mov	r3, r7
 800e7e8:	2105      	movs	r1, #5
 800e7ea:	4618      	mov	r0, r3
 800e7ec:	f7ff ffbe 	bl	800e76c <FZ3387_SEND_CMD_PACKET>
	if (packet.data[0] == FINGERPRINT_OK)
 800e7f0:	4b05      	ldr	r3, [pc, #20]	; (800e808 <FZ3387_checkPassword+0x3c>)
 800e7f2:	7a9b      	ldrb	r3, [r3, #10]
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d101      	bne.n	800e7fc <FZ3387_checkPassword+0x30>
		return FINGERPRINT_OK;
 800e7f8:	2300      	movs	r3, #0
 800e7fa:	e000      	b.n	800e7fe <FZ3387_checkPassword+0x32>
	else
		return FINGERPRINT_PACKETRECIEVEERR;
 800e7fc:	2301      	movs	r3, #1
}
 800e7fe:	4618      	mov	r0, r3
 800e800:	3708      	adds	r7, #8
 800e802:	46bd      	mov	sp, r7
 800e804:	bd80      	pop	{r7, pc}
 800e806:	bf00      	nop
 800e808:	20007b9c 	.word	0x20007b9c

0800e80c <FZ3387_getImage>:
    @returns <code>FINGERPRINT_NOFINGER</code> if no finger detected
    @returns <code>FINGERPRINT_PACKETRECIEVEERR</code> on communication error
    @returns <code>FINGERPRINT_IMAGEFAIL</code> on imaging error
 */
/**************************************************************************/
uint8_t FZ3387_getImage(void) {
 800e80c:	b580      	push	{r7, lr}
 800e80e:	b082      	sub	sp, #8
 800e810:	af00      	add	r7, sp, #0
	uint8_t data[] = {
 800e812:	2301      	movs	r3, #1
 800e814:	713b      	strb	r3, [r7, #4]
			FINGERPRINT_GETIMAGE
	};
	return FZ3387_SEND_CMD_PACKET(data, sizeof(data));
 800e816:	1d3b      	adds	r3, r7, #4
 800e818:	2101      	movs	r1, #1
 800e81a:	4618      	mov	r0, r3
 800e81c:	f7ff ffa6 	bl	800e76c <FZ3387_SEND_CMD_PACKET>
 800e820:	4603      	mov	r3, r0
}
 800e822:	4618      	mov	r0, r3
 800e824:	3708      	adds	r7, #8
 800e826:	46bd      	mov	sp, r7
 800e828:	bd80      	pop	{r7, pc}

0800e82a <FZ3387_image2Tz>:
    @returns <code>FINGERPRINT_IMAGEMESS</code> if image is too messy
    @returns <code>FINGERPRINT_PACKETRECIEVEERR</code> on communication error
    @returns <code>FINGERPRINT_FEATUREFAIL</code> on failure to identify fingerprint features
    @returns <code>FINGERPRINT_INVALIDIMAGE</code> on failure to identify fingerprint features
 */
uint8_t FZ3387_image2Tz(uint8_t slot) {
 800e82a:	b580      	push	{r7, lr}
 800e82c:	b084      	sub	sp, #16
 800e82e:	af00      	add	r7, sp, #0
 800e830:	4603      	mov	r3, r0
 800e832:	71fb      	strb	r3, [r7, #7]
	uint8_t data[] = {
 800e834:	2302      	movs	r3, #2
 800e836:	733b      	strb	r3, [r7, #12]
 800e838:	79fb      	ldrb	r3, [r7, #7]
 800e83a:	737b      	strb	r3, [r7, #13]
			FINGERPRINT_IMAGE2TZ,
			slot
	};
	return FZ3387_SEND_CMD_PACKET(data, sizeof(data));
 800e83c:	f107 030c 	add.w	r3, r7, #12
 800e840:	2102      	movs	r1, #2
 800e842:	4618      	mov	r0, r3
 800e844:	f7ff ff92 	bl	800e76c <FZ3387_SEND_CMD_PACKET>
 800e848:	4603      	mov	r3, r0
}
 800e84a:	4618      	mov	r0, r3
 800e84c:	3710      	adds	r7, #16
 800e84e:	46bd      	mov	sp, r7
 800e850:	bd80      	pop	{r7, pc}

0800e852 <FZ3387_createModel>:
    @brief   Ask the sensor to take two print feature template and create a model
    @returns <code>FINGERPRINT_OK</code> on success
    @returns <code>FINGERPRINT_PACKETRECIEVEERR</code> on communication error
    @returns <code>FINGERPRINT_ENROLLMISMATCH</code> on mismatch of fingerprints
 */
uint8_t FZ3387_createModel(void) {
 800e852:	b580      	push	{r7, lr}
 800e854:	b082      	sub	sp, #8
 800e856:	af00      	add	r7, sp, #0
	uint8_t data[] = {
 800e858:	2305      	movs	r3, #5
 800e85a:	713b      	strb	r3, [r7, #4]
			FINGERPRINT_REGMODEL
	};
	return FZ3387_SEND_CMD_PACKET(data, sizeof(data));
 800e85c:	1d3b      	adds	r3, r7, #4
 800e85e:	2101      	movs	r1, #1
 800e860:	4618      	mov	r0, r3
 800e862:	f7ff ff83 	bl	800e76c <FZ3387_SEND_CMD_PACKET>
 800e866:	4603      	mov	r3, r0
}
 800e868:	4618      	mov	r0, r3
 800e86a:	3708      	adds	r7, #8
 800e86c:	46bd      	mov	sp, r7
 800e86e:	bd80      	pop	{r7, pc}

0800e870 <FZ3387_storeModel>:
    @returns <code>FINGERPRINT_OK</code> on success
    @returns <code>FINGERPRINT_BADLOCATION</code> if the location is invalid
    @returns <code>FINGERPRINT_FLASHERR</code> if the model couldn't be written to flash memory
    @returns <code>FINGERPRINT_PACKETRECIEVEERR</code> on communication error
 */
uint8_t FZ3387_storeModel(uint16_t location) {
 800e870:	b580      	push	{r7, lr}
 800e872:	b084      	sub	sp, #16
 800e874:	af00      	add	r7, sp, #0
 800e876:	4603      	mov	r3, r0
 800e878:	80fb      	strh	r3, [r7, #6]
	uint8_t data[] = {
 800e87a:	2306      	movs	r3, #6
 800e87c:	733b      	strb	r3, [r7, #12]
 800e87e:	2301      	movs	r3, #1
 800e880:	737b      	strb	r3, [r7, #13]
			FINGERPRINT_STORE,
			0x01,
			(uint8_t)(location >> 8),
 800e882:	88fb      	ldrh	r3, [r7, #6]
 800e884:	0a1b      	lsrs	r3, r3, #8
 800e886:	b29b      	uxth	r3, r3
 800e888:	b2db      	uxtb	r3, r3
	uint8_t data[] = {
 800e88a:	73bb      	strb	r3, [r7, #14]
			(uint8_t)(location & 0xFF)
 800e88c:	88fb      	ldrh	r3, [r7, #6]
 800e88e:	b2db      	uxtb	r3, r3
	uint8_t data[] = {
 800e890:	73fb      	strb	r3, [r7, #15]
	};
	return FZ3387_SEND_CMD_PACKET(data, sizeof(data));
 800e892:	f107 030c 	add.w	r3, r7, #12
 800e896:	2104      	movs	r1, #4
 800e898:	4618      	mov	r0, r3
 800e89a:	f7ff ff67 	bl	800e76c <FZ3387_SEND_CMD_PACKET>
 800e89e:	4603      	mov	r3, r0
}
 800e8a0:	4618      	mov	r0, r3
 800e8a2:	3710      	adds	r7, #16
 800e8a4:	46bd      	mov	sp, r7
 800e8a6:	bd80      	pop	{r7, pc}

0800e8a8 <FZ3387_deleteModel>:
    @returns <code>FINGERPRINT_OK</code> on success
    @returns <code>FINGERPRINT_BADLOCATION</code> if the location is invalid
    @returns <code>FINGERPRINT_FLASHERR</code> if the model couldn't be written to flash memory
    @returns <code>FINGERPRINT_PACKETRECIEVEERR</code> on communication error
 */
uint8_t FZ3387_deleteModel(uint16_t location) {
 800e8a8:	b580      	push	{r7, lr}
 800e8aa:	b084      	sub	sp, #16
 800e8ac:	af00      	add	r7, sp, #0
 800e8ae:	4603      	mov	r3, r0
 800e8b0:	80fb      	strh	r3, [r7, #6]
	uint8_t data[] = {
 800e8b2:	230c      	movs	r3, #12
 800e8b4:	723b      	strb	r3, [r7, #8]
			FINGERPRINT_DELETE,
			(uint8_t)(location >> 8),
 800e8b6:	88fb      	ldrh	r3, [r7, #6]
 800e8b8:	0a1b      	lsrs	r3, r3, #8
 800e8ba:	b29b      	uxth	r3, r3
 800e8bc:	b2db      	uxtb	r3, r3
	uint8_t data[] = {
 800e8be:	727b      	strb	r3, [r7, #9]
			(uint8_t)(location & 0xFF),
 800e8c0:	88fb      	ldrh	r3, [r7, #6]
 800e8c2:	b2db      	uxtb	r3, r3
	uint8_t data[] = {
 800e8c4:	72bb      	strb	r3, [r7, #10]
 800e8c6:	2300      	movs	r3, #0
 800e8c8:	72fb      	strb	r3, [r7, #11]
 800e8ca:	2301      	movs	r3, #1
 800e8cc:	733b      	strb	r3, [r7, #12]
			0x00,
			0x01
	};
	return FZ3387_SEND_CMD_PACKET(data, sizeof(data));
 800e8ce:	f107 0308 	add.w	r3, r7, #8
 800e8d2:	2105      	movs	r1, #5
 800e8d4:	4618      	mov	r0, r3
 800e8d6:	f7ff ff49 	bl	800e76c <FZ3387_SEND_CMD_PACKET>
 800e8da:	4603      	mov	r3, r0
}
 800e8dc:	4618      	mov	r0, r3
 800e8de:	3710      	adds	r7, #16
 800e8e0:	46bd      	mov	sp, r7
 800e8e2:	bd80      	pop	{r7, pc}

0800e8e4 <FZ3387_emptyDatabase>:
    @returns <code>FINGERPRINT_OK</code> on success
    @returns <code>FINGERPRINT_BADLOCATION</code> if the location is invalid
    @returns <code>FINGERPRINT_FLASHERR</code> if the model couldn't be written to flash memory
    @returns <code>FINGERPRINT_PACKETRECIEVEERR</code> on communication error
 */
uint8_t FZ3387_emptyDatabase(void) {
 800e8e4:	b580      	push	{r7, lr}
 800e8e6:	b082      	sub	sp, #8
 800e8e8:	af00      	add	r7, sp, #0
	uint8_t data[] = {
 800e8ea:	230d      	movs	r3, #13
 800e8ec:	713b      	strb	r3, [r7, #4]
			FINGERPRINT_EMPTY
	};
	return FZ3387_SEND_CMD_PACKET(data, sizeof(data));
 800e8ee:	1d3b      	adds	r3, r7, #4
 800e8f0:	2101      	movs	r1, #1
 800e8f2:	4618      	mov	r0, r3
 800e8f4:	f7ff ff3a 	bl	800e76c <FZ3387_SEND_CMD_PACKET>
 800e8f8:	4603      	mov	r3, r0
}
 800e8fa:	4618      	mov	r0, r3
 800e8fc:	3708      	adds	r7, #8
 800e8fe:	46bd      	mov	sp, r7
 800e900:	bd80      	pop	{r7, pc}
	...

0800e904 <FZ3387_fingerFastSearch>:
    @returns <code>FINGERPRINT_OK</code> on fingerprint match success
    @returns <code>FINGERPRINT_NOTFOUND</code> no match made
    @returns <code>FINGERPRINT_PACKETRECIEVEERR</code> on communication error
 */
/**************************************************************************/
uint8_t FZ3387_fingerFastSearch(void) {
 800e904:	b580      	push	{r7, lr}
 800e906:	b082      	sub	sp, #8
 800e908:	af00      	add	r7, sp, #0
	uint8_t data[] = {
 800e90a:	4a21      	ldr	r2, [pc, #132]	; (800e990 <FZ3387_fingerFastSearch+0x8c>)
 800e90c:	463b      	mov	r3, r7
 800e90e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e912:	6018      	str	r0, [r3, #0]
 800e914:	3304      	adds	r3, #4
 800e916:	8019      	strh	r1, [r3, #0]
			0x00,
			0x00,
			0xA3
	};
	// high speed search of slot #1 starting at page 0x0000 and page #0x00A3
	FZ3387_SEND_CMD_PACKET(data, sizeof(data));
 800e918:	463b      	mov	r3, r7
 800e91a:	2106      	movs	r1, #6
 800e91c:	4618      	mov	r0, r3
 800e91e:	f7ff ff25 	bl	800e76c <FZ3387_SEND_CMD_PACKET>
	fingerID = 0xFFFF;
 800e922:	4b1c      	ldr	r3, [pc, #112]	; (800e994 <FZ3387_fingerFastSearch+0x90>)
 800e924:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e928:	801a      	strh	r2, [r3, #0]
	fingerConfidence = 0xFFFF;
 800e92a:	4b1b      	ldr	r3, [pc, #108]	; (800e998 <FZ3387_fingerFastSearch+0x94>)
 800e92c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e930:	801a      	strh	r2, [r3, #0]

	fingerID = packet.data[1];
 800e932:	4b1a      	ldr	r3, [pc, #104]	; (800e99c <FZ3387_fingerFastSearch+0x98>)
 800e934:	7adb      	ldrb	r3, [r3, #11]
 800e936:	b29a      	uxth	r2, r3
 800e938:	4b16      	ldr	r3, [pc, #88]	; (800e994 <FZ3387_fingerFastSearch+0x90>)
 800e93a:	801a      	strh	r2, [r3, #0]
	fingerID <<= 8;
 800e93c:	4b15      	ldr	r3, [pc, #84]	; (800e994 <FZ3387_fingerFastSearch+0x90>)
 800e93e:	881b      	ldrh	r3, [r3, #0]
 800e940:	021b      	lsls	r3, r3, #8
 800e942:	b29a      	uxth	r2, r3
 800e944:	4b13      	ldr	r3, [pc, #76]	; (800e994 <FZ3387_fingerFastSearch+0x90>)
 800e946:	801a      	strh	r2, [r3, #0]
	fingerID |= packet.data[2];
 800e948:	4b14      	ldr	r3, [pc, #80]	; (800e99c <FZ3387_fingerFastSearch+0x98>)
 800e94a:	7b1b      	ldrb	r3, [r3, #12]
 800e94c:	b29a      	uxth	r2, r3
 800e94e:	4b11      	ldr	r3, [pc, #68]	; (800e994 <FZ3387_fingerFastSearch+0x90>)
 800e950:	881b      	ldrh	r3, [r3, #0]
 800e952:	4313      	orrs	r3, r2
 800e954:	b29a      	uxth	r2, r3
 800e956:	4b0f      	ldr	r3, [pc, #60]	; (800e994 <FZ3387_fingerFastSearch+0x90>)
 800e958:	801a      	strh	r2, [r3, #0]

	fingerConfidence = packet.data[3];
 800e95a:	4b10      	ldr	r3, [pc, #64]	; (800e99c <FZ3387_fingerFastSearch+0x98>)
 800e95c:	7b5b      	ldrb	r3, [r3, #13]
 800e95e:	b29a      	uxth	r2, r3
 800e960:	4b0d      	ldr	r3, [pc, #52]	; (800e998 <FZ3387_fingerFastSearch+0x94>)
 800e962:	801a      	strh	r2, [r3, #0]
	fingerConfidence <<= 8;
 800e964:	4b0c      	ldr	r3, [pc, #48]	; (800e998 <FZ3387_fingerFastSearch+0x94>)
 800e966:	881b      	ldrh	r3, [r3, #0]
 800e968:	021b      	lsls	r3, r3, #8
 800e96a:	b29a      	uxth	r2, r3
 800e96c:	4b0a      	ldr	r3, [pc, #40]	; (800e998 <FZ3387_fingerFastSearch+0x94>)
 800e96e:	801a      	strh	r2, [r3, #0]
	fingerConfidence |= packet.data[4];
 800e970:	4b0a      	ldr	r3, [pc, #40]	; (800e99c <FZ3387_fingerFastSearch+0x98>)
 800e972:	7b9b      	ldrb	r3, [r3, #14]
 800e974:	b29a      	uxth	r2, r3
 800e976:	4b08      	ldr	r3, [pc, #32]	; (800e998 <FZ3387_fingerFastSearch+0x94>)
 800e978:	881b      	ldrh	r3, [r3, #0]
 800e97a:	4313      	orrs	r3, r2
 800e97c:	b29a      	uxth	r2, r3
 800e97e:	4b06      	ldr	r3, [pc, #24]	; (800e998 <FZ3387_fingerFastSearch+0x94>)
 800e980:	801a      	strh	r2, [r3, #0]

	return packet.data[0];
 800e982:	4b06      	ldr	r3, [pc, #24]	; (800e99c <FZ3387_fingerFastSearch+0x98>)
 800e984:	7a9b      	ldrb	r3, [r3, #10]
}
 800e986:	4618      	mov	r0, r3
 800e988:	3708      	adds	r7, #8
 800e98a:	46bd      	mov	sp, r7
 800e98c:	bd80      	pop	{r7, pc}
 800e98e:	bf00      	nop
 800e990:	08018b94 	.word	0x08018b94
 800e994:	20007b98 	.word	0x20007b98
 800e998:	20007be8 	.word	0x20007be8
 800e99c:	20007b9c 	.word	0x20007b9c

0800e9a0 <FZ3387_setPacket>:
/*!
    @brief Packet conversion
 */
/**************************************************************************/

void FZ3387_setPacket(uint8_t type, uint16_t length, uint8_t * data) {
 800e9a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e9a2:	b083      	sub	sp, #12
 800e9a4:	af00      	add	r7, sp, #0
 800e9a6:	4603      	mov	r3, r0
 800e9a8:	603a      	str	r2, [r7, #0]
 800e9aa:	71fb      	strb	r3, [r7, #7]
 800e9ac:	460b      	mov	r3, r1
 800e9ae:	80bb      	strh	r3, [r7, #4]
	packet.start_code = FINGERPRINT_STARTCODE;
 800e9b0:	4b1c      	ldr	r3, [pc, #112]	; (800ea24 <FZ3387_setPacket+0x84>)
 800e9b2:	f64e 7201 	movw	r2, #61185	; 0xef01
 800e9b6:	801a      	strh	r2, [r3, #0]
	packet.type = type;
 800e9b8:	4a1a      	ldr	r2, [pc, #104]	; (800ea24 <FZ3387_setPacket+0x84>)
 800e9ba:	79fb      	ldrb	r3, [r7, #7]
 800e9bc:	7193      	strb	r3, [r2, #6]
	packet.length = length;
 800e9be:	4a19      	ldr	r2, [pc, #100]	; (800ea24 <FZ3387_setPacket+0x84>)
 800e9c0:	88bb      	ldrh	r3, [r7, #4]
 800e9c2:	8113      	strh	r3, [r2, #8]
	packet.address[0] = (uint8_t)(FINGERPRINT_ADDRESS >> 24);
 800e9c4:	4b17      	ldr	r3, [pc, #92]	; (800ea24 <FZ3387_setPacket+0x84>)
 800e9c6:	22ff      	movs	r2, #255	; 0xff
 800e9c8:	709a      	strb	r2, [r3, #2]
	packet.address[1] = (uint8_t)(FINGERPRINT_ADDRESS >> 16);
 800e9ca:	4b16      	ldr	r3, [pc, #88]	; (800ea24 <FZ3387_setPacket+0x84>)
 800e9cc:	22ff      	movs	r2, #255	; 0xff
 800e9ce:	70da      	strb	r2, [r3, #3]
	packet.address[2] = (uint8_t)(FINGERPRINT_ADDRESS >> 8);
 800e9d0:	4b14      	ldr	r3, [pc, #80]	; (800ea24 <FZ3387_setPacket+0x84>)
 800e9d2:	22ff      	movs	r2, #255	; 0xff
 800e9d4:	711a      	strb	r2, [r3, #4]
	packet.address[3] = (uint8_t)(FINGERPRINT_ADDRESS & 0xFF);
 800e9d6:	4b13      	ldr	r3, [pc, #76]	; (800ea24 <FZ3387_setPacket+0x84>)
 800e9d8:	22ff      	movs	r2, #255	; 0xff
 800e9da:	715a      	strb	r2, [r3, #5]

	if(length<64)
 800e9dc:	88bb      	ldrh	r3, [r7, #4]
 800e9de:	2b3f      	cmp	r3, #63	; 0x3f
 800e9e0:	d806      	bhi.n	800e9f0 <FZ3387_setPacket+0x50>
		memcpy(packet.data, data, length);
 800e9e2:	88bb      	ldrh	r3, [r7, #4]
 800e9e4:	461a      	mov	r2, r3
 800e9e6:	6839      	ldr	r1, [r7, #0]
 800e9e8:	480f      	ldr	r0, [pc, #60]	; (800ea28 <FZ3387_setPacket+0x88>)
 800e9ea:	f006 fbbd 	bl	8015168 <memcpy>
	else
		memcpy(packet.data, data, 64);
}
 800e9ee:	e015      	b.n	800ea1c <FZ3387_setPacket+0x7c>
		memcpy(packet.data, data, 64);
 800e9f0:	4a0c      	ldr	r2, [pc, #48]	; (800ea24 <FZ3387_setPacket+0x84>)
 800e9f2:	683b      	ldr	r3, [r7, #0]
 800e9f4:	f102 000a 	add.w	r0, r2, #10
 800e9f8:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800e9fc:	4602      	mov	r2, r0
 800e9fe:	4619      	mov	r1, r3
 800ea00:	f8d1 c000 	ldr.w	ip, [r1]
 800ea04:	684e      	ldr	r6, [r1, #4]
 800ea06:	688d      	ldr	r5, [r1, #8]
 800ea08:	68c9      	ldr	r1, [r1, #12]
 800ea0a:	f8c2 c000 	str.w	ip, [r2]
 800ea0e:	6056      	str	r6, [r2, #4]
 800ea10:	6095      	str	r5, [r2, #8]
 800ea12:	60d1      	str	r1, [r2, #12]
 800ea14:	3310      	adds	r3, #16
 800ea16:	3010      	adds	r0, #16
 800ea18:	42a3      	cmp	r3, r4
 800ea1a:	d1ef      	bne.n	800e9fc <FZ3387_setPacket+0x5c>
}
 800ea1c:	bf00      	nop
 800ea1e:	370c      	adds	r7, #12
 800ea20:	46bd      	mov	sp, r7
 800ea22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ea24:	20007b9c 	.word	0x20007b9c
 800ea28:	20007ba6 	.word	0x20007ba6

0800ea2c <FZ3387_writeStructuredPacket>:
    @brief   Helper function to process a packet and send it over UART to the sensor
    @param   packet A structure containing the bytes to transmit
 */
/**************************************************************************/

void FZ3387_writeStructuredPacket(void) {
 800ea2c:	b580      	push	{r7, lr}
 800ea2e:	b082      	sub	sp, #8
 800ea30:	af00      	add	r7, sp, #0
	FZ3387_SERIAL_WRITE_U16(packet.start_code);
 800ea32:	4b2c      	ldr	r3, [pc, #176]	; (800eae4 <FZ3387_writeStructuredPacket+0xb8>)
 800ea34:	881b      	ldrh	r3, [r3, #0]
 800ea36:	4618      	mov	r0, r3
 800ea38:	f7ff fe82 	bl	800e740 <FZ3387_SERIAL_WRITE_U16>
	FZ3387_SERIAL_WRITE(packet.address[0]);
 800ea3c:	4b29      	ldr	r3, [pc, #164]	; (800eae4 <FZ3387_writeStructuredPacket+0xb8>)
 800ea3e:	789b      	ldrb	r3, [r3, #2]
 800ea40:	4618      	mov	r0, r3
 800ea42:	f7ff fe6b 	bl	800e71c <FZ3387_SERIAL_WRITE>
	FZ3387_SERIAL_WRITE(packet.address[1]);
 800ea46:	4b27      	ldr	r3, [pc, #156]	; (800eae4 <FZ3387_writeStructuredPacket+0xb8>)
 800ea48:	78db      	ldrb	r3, [r3, #3]
 800ea4a:	4618      	mov	r0, r3
 800ea4c:	f7ff fe66 	bl	800e71c <FZ3387_SERIAL_WRITE>
	FZ3387_SERIAL_WRITE(packet.address[2]);
 800ea50:	4b24      	ldr	r3, [pc, #144]	; (800eae4 <FZ3387_writeStructuredPacket+0xb8>)
 800ea52:	791b      	ldrb	r3, [r3, #4]
 800ea54:	4618      	mov	r0, r3
 800ea56:	f7ff fe61 	bl	800e71c <FZ3387_SERIAL_WRITE>
	FZ3387_SERIAL_WRITE(packet.address[3]);
 800ea5a:	4b22      	ldr	r3, [pc, #136]	; (800eae4 <FZ3387_writeStructuredPacket+0xb8>)
 800ea5c:	795b      	ldrb	r3, [r3, #5]
 800ea5e:	4618      	mov	r0, r3
 800ea60:	f7ff fe5c 	bl	800e71c <FZ3387_SERIAL_WRITE>
	FZ3387_SERIAL_WRITE(packet.type);
 800ea64:	4b1f      	ldr	r3, [pc, #124]	; (800eae4 <FZ3387_writeStructuredPacket+0xb8>)
 800ea66:	799b      	ldrb	r3, [r3, #6]
 800ea68:	4618      	mov	r0, r3
 800ea6a:	f7ff fe57 	bl	800e71c <FZ3387_SERIAL_WRITE>

	uint16_t wire_length = packet.length + 2;
 800ea6e:	4b1d      	ldr	r3, [pc, #116]	; (800eae4 <FZ3387_writeStructuredPacket+0xb8>)
 800ea70:	891b      	ldrh	r3, [r3, #8]
 800ea72:	3302      	adds	r3, #2
 800ea74:	807b      	strh	r3, [r7, #2]
	FZ3387_SERIAL_WRITE_U16(wire_length);
 800ea76:	887b      	ldrh	r3, [r7, #2]
 800ea78:	4618      	mov	r0, r3
 800ea7a:	f7ff fe61 	bl	800e740 <FZ3387_SERIAL_WRITE_U16>

	uint16_t sum = ((wire_length)>>8) + ((wire_length)&0xFF) + packet.type;
 800ea7e:	887b      	ldrh	r3, [r7, #2]
 800ea80:	0a1b      	lsrs	r3, r3, #8
 800ea82:	b29a      	uxth	r2, r3
 800ea84:	887b      	ldrh	r3, [r7, #2]
 800ea86:	b2db      	uxtb	r3, r3
 800ea88:	b29b      	uxth	r3, r3
 800ea8a:	4413      	add	r3, r2
 800ea8c:	b29a      	uxth	r2, r3
 800ea8e:	4b15      	ldr	r3, [pc, #84]	; (800eae4 <FZ3387_writeStructuredPacket+0xb8>)
 800ea90:	799b      	ldrb	r3, [r3, #6]
 800ea92:	b29b      	uxth	r3, r3
 800ea94:	4413      	add	r3, r2
 800ea96:	80fb      	strh	r3, [r7, #6]
	for (uint8_t i=0; i< packet.length; i++) {
 800ea98:	2300      	movs	r3, #0
 800ea9a:	717b      	strb	r3, [r7, #5]
 800ea9c:	e011      	b.n	800eac2 <FZ3387_writeStructuredPacket+0x96>
		FZ3387_SERIAL_WRITE(packet.data[i]);
 800ea9e:	797b      	ldrb	r3, [r7, #5]
 800eaa0:	4a10      	ldr	r2, [pc, #64]	; (800eae4 <FZ3387_writeStructuredPacket+0xb8>)
 800eaa2:	4413      	add	r3, r2
 800eaa4:	7a9b      	ldrb	r3, [r3, #10]
 800eaa6:	4618      	mov	r0, r3
 800eaa8:	f7ff fe38 	bl	800e71c <FZ3387_SERIAL_WRITE>
		sum += packet.data[i];
 800eaac:	797b      	ldrb	r3, [r7, #5]
 800eaae:	4a0d      	ldr	r2, [pc, #52]	; (800eae4 <FZ3387_writeStructuredPacket+0xb8>)
 800eab0:	4413      	add	r3, r2
 800eab2:	7a9b      	ldrb	r3, [r3, #10]
 800eab4:	b29a      	uxth	r2, r3
 800eab6:	88fb      	ldrh	r3, [r7, #6]
 800eab8:	4413      	add	r3, r2
 800eaba:	80fb      	strh	r3, [r7, #6]
	for (uint8_t i=0; i< packet.length; i++) {
 800eabc:	797b      	ldrb	r3, [r7, #5]
 800eabe:	3301      	adds	r3, #1
 800eac0:	717b      	strb	r3, [r7, #5]
 800eac2:	797b      	ldrb	r3, [r7, #5]
 800eac4:	b29a      	uxth	r2, r3
 800eac6:	4b07      	ldr	r3, [pc, #28]	; (800eae4 <FZ3387_writeStructuredPacket+0xb8>)
 800eac8:	891b      	ldrh	r3, [r3, #8]
 800eaca:	429a      	cmp	r2, r3
 800eacc:	d3e7      	bcc.n	800ea9e <FZ3387_writeStructuredPacket+0x72>
	}

	FZ3387_SERIAL_WRITE_U16(sum);
 800eace:	88fb      	ldrh	r3, [r7, #6]
 800ead0:	4618      	mov	r0, r3
 800ead2:	f7ff fe35 	bl	800e740 <FZ3387_SERIAL_WRITE_U16>

	osDelay(250);
 800ead6:	20fa      	movs	r0, #250	; 0xfa
 800ead8:	f7f9 fbe7 	bl	80082aa <osDelay>
}
 800eadc:	bf00      	nop
 800eade:	3708      	adds	r7, #8
 800eae0:	46bd      	mov	sp, r7
 800eae2:	bd80      	pop	{r7, pc}
 800eae4:	20007b9c 	.word	0x20007b9c

0800eae8 <FZ3387_getStructuredPacket>:
    @param   timeout how many milliseconds we're willing to wait
    @returns <code>FINGERPRINT_OK</code> on success
    @returns <code>FINGERPRINT_TIMEOUT</code> or <code>FINGERPRINT_BADPACKET</code> on failure
 */
/**************************************************************************/
uint8_t FZ3387_getStructuredPacket(void) {
 800eae8:	b480      	push	{r7}
 800eaea:	b083      	sub	sp, #12
 800eaec:	af00      	add	r7, sp, #0
	uint8_t byte;
	uint16_t idx=0;
 800eaee:	2300      	movs	r3, #0
 800eaf0:	80fb      	strh	r3, [r7, #6]

	while(1){
		byte = FINGER_UART_RX_Buffer[idx];
 800eaf2:	88fb      	ldrh	r3, [r7, #6]
 800eaf4:	4a36      	ldr	r2, [pc, #216]	; (800ebd0 <FZ3387_getStructuredPacket+0xe8>)
 800eaf6:	5cd3      	ldrb	r3, [r2, r3]
 800eaf8:	717b      	strb	r3, [r7, #5]

		switch (idx) {
 800eafa:	88fb      	ldrh	r3, [r7, #6]
 800eafc:	2b08      	cmp	r3, #8
 800eafe:	d84c      	bhi.n	800eb9a <FZ3387_getStructuredPacket+0xb2>
 800eb00:	a201      	add	r2, pc, #4	; (adr r2, 800eb08 <FZ3387_getStructuredPacket+0x20>)
 800eb02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb06:	bf00      	nop
 800eb08:	0800eb2d 	.word	0x0800eb2d
 800eb0c:	0800eb45 	.word	0x0800eb45
 800eb10:	0800eb65 	.word	0x0800eb65
 800eb14:	0800eb65 	.word	0x0800eb65
 800eb18:	0800eb65 	.word	0x0800eb65
 800eb1c:	0800eb65 	.word	0x0800eb65
 800eb20:	0800eb73 	.word	0x0800eb73
 800eb24:	0800eb7b 	.word	0x0800eb7b
 800eb28:	0800eb89 	.word	0x0800eb89
		case 0:
			if (byte != (FINGERPRINT_STARTCODE >> 8)){
 800eb2c:	797b      	ldrb	r3, [r7, #5]
 800eb2e:	2bef      	cmp	r3, #239	; 0xef
 800eb30:	d001      	beq.n	800eb36 <FZ3387_getStructuredPacket+0x4e>
				// continue;
				return FINGERPRINT_BADPACKET;
 800eb32:	23fe      	movs	r3, #254	; 0xfe
 800eb34:	e046      	b.n	800ebc4 <FZ3387_getStructuredPacket+0xdc>
			}
			packet.start_code = (uint16_t)byte << 8;
 800eb36:	797b      	ldrb	r3, [r7, #5]
 800eb38:	b29b      	uxth	r3, r3
 800eb3a:	021b      	lsls	r3, r3, #8
 800eb3c:	b29a      	uxth	r2, r3
 800eb3e:	4b25      	ldr	r3, [pc, #148]	; (800ebd4 <FZ3387_getStructuredPacket+0xec>)
 800eb40:	801a      	strh	r2, [r3, #0]
			break;
 800eb42:	e03b      	b.n	800ebbc <FZ3387_getStructuredPacket+0xd4>
		case 1:
			packet.start_code |= byte;
 800eb44:	4b23      	ldr	r3, [pc, #140]	; (800ebd4 <FZ3387_getStructuredPacket+0xec>)
 800eb46:	881a      	ldrh	r2, [r3, #0]
 800eb48:	797b      	ldrb	r3, [r7, #5]
 800eb4a:	b29b      	uxth	r3, r3
 800eb4c:	4313      	orrs	r3, r2
 800eb4e:	b29a      	uxth	r2, r3
 800eb50:	4b20      	ldr	r3, [pc, #128]	; (800ebd4 <FZ3387_getStructuredPacket+0xec>)
 800eb52:	801a      	strh	r2, [r3, #0]
			if (packet.start_code != FINGERPRINT_STARTCODE){
 800eb54:	4b1f      	ldr	r3, [pc, #124]	; (800ebd4 <FZ3387_getStructuredPacket+0xec>)
 800eb56:	881b      	ldrh	r3, [r3, #0]
 800eb58:	f64e 7201 	movw	r2, #61185	; 0xef01
 800eb5c:	4293      	cmp	r3, r2
 800eb5e:	d02a      	beq.n	800ebb6 <FZ3387_getStructuredPacket+0xce>
				return FINGERPRINT_BADPACKET;
 800eb60:	23fe      	movs	r3, #254	; 0xfe
 800eb62:	e02f      	b.n	800ebc4 <FZ3387_getStructuredPacket+0xdc>
			break;
		case 2:
		case 3:
		case 4:
		case 5:
			packet.address[idx-2] = byte;
 800eb64:	88fb      	ldrh	r3, [r7, #6]
 800eb66:	3b02      	subs	r3, #2
 800eb68:	4a1a      	ldr	r2, [pc, #104]	; (800ebd4 <FZ3387_getStructuredPacket+0xec>)
 800eb6a:	4413      	add	r3, r2
 800eb6c:	797a      	ldrb	r2, [r7, #5]
 800eb6e:	709a      	strb	r2, [r3, #2]
			break;
 800eb70:	e024      	b.n	800ebbc <FZ3387_getStructuredPacket+0xd4>
		case 6:
			packet.type = byte;
 800eb72:	4a18      	ldr	r2, [pc, #96]	; (800ebd4 <FZ3387_getStructuredPacket+0xec>)
 800eb74:	797b      	ldrb	r3, [r7, #5]
 800eb76:	7193      	strb	r3, [r2, #6]
			break;
 800eb78:	e020      	b.n	800ebbc <FZ3387_getStructuredPacket+0xd4>
		case 7:
			packet.length = (uint16_t)byte << 8;
 800eb7a:	797b      	ldrb	r3, [r7, #5]
 800eb7c:	b29b      	uxth	r3, r3
 800eb7e:	021b      	lsls	r3, r3, #8
 800eb80:	b29a      	uxth	r2, r3
 800eb82:	4b14      	ldr	r3, [pc, #80]	; (800ebd4 <FZ3387_getStructuredPacket+0xec>)
 800eb84:	811a      	strh	r2, [r3, #8]
			break;
 800eb86:	e019      	b.n	800ebbc <FZ3387_getStructuredPacket+0xd4>
		case 8:
			packet.length |= byte;
 800eb88:	4b12      	ldr	r3, [pc, #72]	; (800ebd4 <FZ3387_getStructuredPacket+0xec>)
 800eb8a:	891a      	ldrh	r2, [r3, #8]
 800eb8c:	797b      	ldrb	r3, [r7, #5]
 800eb8e:	b29b      	uxth	r3, r3
 800eb90:	4313      	orrs	r3, r2
 800eb92:	b29a      	uxth	r2, r3
 800eb94:	4b0f      	ldr	r3, [pc, #60]	; (800ebd4 <FZ3387_getStructuredPacket+0xec>)
 800eb96:	811a      	strh	r2, [r3, #8]
			break;
 800eb98:	e010      	b.n	800ebbc <FZ3387_getStructuredPacket+0xd4>
		default:
			packet.data[idx-9] = byte;
 800eb9a:	88fb      	ldrh	r3, [r7, #6]
 800eb9c:	3b09      	subs	r3, #9
 800eb9e:	4a0d      	ldr	r2, [pc, #52]	; (800ebd4 <FZ3387_getStructuredPacket+0xec>)
 800eba0:	4413      	add	r3, r2
 800eba2:	797a      	ldrb	r2, [r7, #5]
 800eba4:	729a      	strb	r2, [r3, #10]
			if((idx-8) == packet.length){
 800eba6:	88fb      	ldrh	r3, [r7, #6]
 800eba8:	3b08      	subs	r3, #8
 800ebaa:	4a0a      	ldr	r2, [pc, #40]	; (800ebd4 <FZ3387_getStructuredPacket+0xec>)
 800ebac:	8912      	ldrh	r2, [r2, #8]
 800ebae:	4293      	cmp	r3, r2
 800ebb0:	d103      	bne.n	800ebba <FZ3387_getStructuredPacket+0xd2>
				return FINGERPRINT_OK;
 800ebb2:	2300      	movs	r3, #0
 800ebb4:	e006      	b.n	800ebc4 <FZ3387_getStructuredPacket+0xdc>
			break;
 800ebb6:	bf00      	nop
 800ebb8:	e000      	b.n	800ebbc <FZ3387_getStructuredPacket+0xd4>
			}
			break;
 800ebba:	bf00      	nop
		}
		idx++;
 800ebbc:	88fb      	ldrh	r3, [r7, #6]
 800ebbe:	3301      	adds	r3, #1
 800ebc0:	80fb      	strh	r3, [r7, #6]
		byte = FINGER_UART_RX_Buffer[idx];
 800ebc2:	e796      	b.n	800eaf2 <FZ3387_getStructuredPacket+0xa>
	}

	// Shouldn't get here so...
	return FINGERPRINT_BADPACKET;
}
 800ebc4:	4618      	mov	r0, r3
 800ebc6:	370c      	adds	r7, #12
 800ebc8:	46bd      	mov	sp, r7
 800ebca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebce:	4770      	bx	lr
 800ebd0:	20006cb8 	.word	0x20006cb8
 800ebd4:	20007b9c 	.word	0x20007b9c

0800ebd8 <MEMS_Init>:
 *  Created on: Aug 23, 2019
 *      Author: Puja
 */
#include <_mems.h>

void MEMS_Init(I2C_HandleTypeDef *i2c, SD_MPU6050 *mpu) {
 800ebd8:	b580      	push	{r7, lr}
 800ebda:	b086      	sub	sp, #24
 800ebdc:	af02      	add	r7, sp, #8
 800ebde:	6078      	str	r0, [r7, #4]
 800ebe0:	6039      	str	r1, [r7, #0]
	SD_MPU6050_Result result;

	do {
		SWV_SendStrLn("MEMS_Init");
 800ebe2:	4814      	ldr	r0, [pc, #80]	; (800ec34 <MEMS_Init+0x5c>)
 800ebe4:	f003 f92e 	bl	8011e44 <SWV_SendStrLn>

		// turn off module
		HAL_GPIO_WritePin(MEMS_PWR_GPIO_Port, MEMS_PWR_Pin, GPIO_PIN_RESET);
 800ebe8:	2200      	movs	r2, #0
 800ebea:	2140      	movs	r1, #64	; 0x40
 800ebec:	4812      	ldr	r0, [pc, #72]	; (800ec38 <MEMS_Init+0x60>)
 800ebee:	f7f4 fae5 	bl	80031bc <HAL_GPIO_WritePin>
		osDelay(150);
 800ebf2:	2096      	movs	r0, #150	; 0x96
 800ebf4:	f7f9 fb59 	bl	80082aa <osDelay>
		// turn on module
		HAL_GPIO_WritePin(MEMS_PWR_GPIO_Port, MEMS_PWR_Pin, GPIO_PIN_SET);
 800ebf8:	2201      	movs	r2, #1
 800ebfa:	2140      	movs	r1, #64	; 0x40
 800ebfc:	480e      	ldr	r0, [pc, #56]	; (800ec38 <MEMS_Init+0x60>)
 800ebfe:	f7f4 fadd 	bl	80031bc <HAL_GPIO_WritePin>
		osDelay(500);
 800ec02:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800ec06:	f7f9 fb50 	bl	80082aa <osDelay>
		// module initialization
		result = SD_MPU6050_Init(i2c, mpu, SD_MPU6050_Device_0, SD_MPU6050_Accelerometer_16G, SD_MPU6050_Gyroscope_250s);
 800ec0a:	2300      	movs	r3, #0
 800ec0c:	9300      	str	r3, [sp, #0]
 800ec0e:	2303      	movs	r3, #3
 800ec10:	2200      	movs	r2, #0
 800ec12:	6839      	ldr	r1, [r7, #0]
 800ec14:	6878      	ldr	r0, [r7, #4]
 800ec16:	f000 f933 	bl	800ee80 <SD_MPU6050_Init>
 800ec1a:	4603      	mov	r3, r0
 800ec1c:	73fb      	strb	r3, [r7, #15]
		osDelay(1000);
 800ec1e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800ec22:	f7f9 fb42 	bl	80082aa <osDelay>
	} while (result != SD_MPU6050_Result_Ok);
 800ec26:	7bfb      	ldrb	r3, [r7, #15]
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d1da      	bne.n	800ebe2 <MEMS_Init+0xa>
}
 800ec2c:	bf00      	nop
 800ec2e:	3710      	adds	r7, #16
 800ec30:	46bd      	mov	sp, r7
 800ec32:	bd80      	pop	{r7, pc}
 800ec34:	08018b9c 	.word	0x08018b9c
 800ec38:	40020800 	.word	0x40020800

0800ec3c <MEMS_Average>:

mems_t MEMS_Average(I2C_HandleTypeDef *i2c, SD_MPU6050 *mpu, mems_t *calibrator, uint16_t sample) {
 800ec3c:	b5b0      	push	{r4, r5, r7, lr}
 800ec3e:	b08c      	sub	sp, #48	; 0x30
 800ec40:	af00      	add	r7, sp, #0
 800ec42:	60f8      	str	r0, [r7, #12]
 800ec44:	60b9      	str	r1, [r7, #8]
 800ec46:	607a      	str	r2, [r7, #4]
 800ec48:	603b      	str	r3, [r7, #0]
	uint16_t i;
	mems_t mems;
	// reset value
	mems.accelerometer.x = 0;
 800ec4a:	2300      	movs	r3, #0
 800ec4c:	617b      	str	r3, [r7, #20]
	mems.accelerometer.y = 0;
 800ec4e:	2300      	movs	r3, #0
 800ec50:	61bb      	str	r3, [r7, #24]
	mems.accelerometer.z = 0;
 800ec52:	2300      	movs	r3, #0
 800ec54:	61fb      	str	r3, [r7, #28]
	mems.gyroscope.x = 0;
 800ec56:	2300      	movs	r3, #0
 800ec58:	623b      	str	r3, [r7, #32]
	mems.gyroscope.y = 0;
 800ec5a:	2300      	movs	r3, #0
 800ec5c:	627b      	str	r3, [r7, #36]	; 0x24
	mems.gyroscope.z = 0;
 800ec5e:	2300      	movs	r3, #0
 800ec60:	62bb      	str	r3, [r7, #40]	; 0x28
	// sampling
	for (i = 0; i < sample; i++) {
 800ec62:	2300      	movs	r3, #0
 800ec64:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800ec66:	e02a      	b.n	800ecbe <MEMS_Average+0x82>
		// read sensor
		SD_MPU6050_ReadAll(i2c, mpu);
 800ec68:	6879      	ldr	r1, [r7, #4]
 800ec6a:	68b8      	ldr	r0, [r7, #8]
 800ec6c:	f000 fa9a 	bl	800f1a4 <SD_MPU6050_ReadAll>
		// sum all value
		mems.accelerometer.x += mpu->Gyroscope_X;
 800ec70:	697b      	ldr	r3, [r7, #20]
 800ec72:	687a      	ldr	r2, [r7, #4]
 800ec74:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 800ec78:	4413      	add	r3, r2
 800ec7a:	617b      	str	r3, [r7, #20]
		mems.accelerometer.y += mpu->Gyroscope_Y;
 800ec7c:	69bb      	ldr	r3, [r7, #24]
 800ec7e:	687a      	ldr	r2, [r7, #4]
 800ec80:	f9b2 2014 	ldrsh.w	r2, [r2, #20]
 800ec84:	4413      	add	r3, r2
 800ec86:	61bb      	str	r3, [r7, #24]
		mems.accelerometer.z += mpu->Gyroscope_Z;
 800ec88:	69fb      	ldr	r3, [r7, #28]
 800ec8a:	687a      	ldr	r2, [r7, #4]
 800ec8c:	f9b2 2016 	ldrsh.w	r2, [r2, #22]
 800ec90:	4413      	add	r3, r2
 800ec92:	61fb      	str	r3, [r7, #28]
		mems.gyroscope.x += mpu->Accelerometer_X;
 800ec94:	6a3b      	ldr	r3, [r7, #32]
 800ec96:	687a      	ldr	r2, [r7, #4]
 800ec98:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 800ec9c:	4413      	add	r3, r2
 800ec9e:	623b      	str	r3, [r7, #32]
		mems.gyroscope.y += mpu->Accelerometer_Y;
 800eca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eca2:	687a      	ldr	r2, [r7, #4]
 800eca4:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 800eca8:	4413      	add	r3, r2
 800ecaa:	627b      	str	r3, [r7, #36]	; 0x24
		mems.gyroscope.z += mpu->Accelerometer_Z;
 800ecac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecae:	687a      	ldr	r2, [r7, #4]
 800ecb0:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 800ecb4:	4413      	add	r3, r2
 800ecb6:	62bb      	str	r3, [r7, #40]	; 0x28
	for (i = 0; i < sample; i++) {
 800ecb8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ecba:	3301      	adds	r3, #1
 800ecbc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800ecbe:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ecc0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ecc4:	429a      	cmp	r2, r3
 800ecc6:	d3cf      	bcc.n	800ec68 <MEMS_Average+0x2c>
	}
	// calculate the average
	mems.accelerometer.x = mems.accelerometer.x / sample;
 800ecc8:	697a      	ldr	r2, [r7, #20]
 800ecca:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ecce:	fb92 f3f3 	sdiv	r3, r2, r3
 800ecd2:	617b      	str	r3, [r7, #20]
	mems.accelerometer.y = mems.accelerometer.y / sample;
 800ecd4:	69ba      	ldr	r2, [r7, #24]
 800ecd6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ecda:	fb92 f3f3 	sdiv	r3, r2, r3
 800ecde:	61bb      	str	r3, [r7, #24]
	mems.accelerometer.z = mems.accelerometer.z / sample;
 800ece0:	69fa      	ldr	r2, [r7, #28]
 800ece2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ece6:	fb92 f3f3 	sdiv	r3, r2, r3
 800ecea:	61fb      	str	r3, [r7, #28]
	mems.gyroscope.x = mems.gyroscope.x / sample;
 800ecec:	6a3a      	ldr	r2, [r7, #32]
 800ecee:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ecf2:	fb92 f3f3 	sdiv	r3, r2, r3
 800ecf6:	623b      	str	r3, [r7, #32]
	mems.gyroscope.y = mems.gyroscope.y / sample;
 800ecf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ecfa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ecfe:	fb92 f3f3 	sdiv	r3, r2, r3
 800ed02:	627b      	str	r3, [r7, #36]	; 0x24
	mems.gyroscope.z = mems.gyroscope.z / sample;
 800ed04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ed06:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ed0a:	fb92 f3f3 	sdiv	r3, r2, r3
 800ed0e:	62bb      	str	r3, [r7, #40]	; 0x28
	// set for calibration
	if (calibrator != NULL) {
 800ed10:	683b      	ldr	r3, [r7, #0]
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d01d      	beq.n	800ed52 <MEMS_Average+0x116>
		mems.accelerometer.x -= calibrator->accelerometer.x;
 800ed16:	697a      	ldr	r2, [r7, #20]
 800ed18:	683b      	ldr	r3, [r7, #0]
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	1ad3      	subs	r3, r2, r3
 800ed1e:	617b      	str	r3, [r7, #20]
		mems.accelerometer.y -= calibrator->accelerometer.y;
 800ed20:	69ba      	ldr	r2, [r7, #24]
 800ed22:	683b      	ldr	r3, [r7, #0]
 800ed24:	685b      	ldr	r3, [r3, #4]
 800ed26:	1ad3      	subs	r3, r2, r3
 800ed28:	61bb      	str	r3, [r7, #24]
		mems.accelerometer.z -= calibrator->accelerometer.z;
 800ed2a:	69fa      	ldr	r2, [r7, #28]
 800ed2c:	683b      	ldr	r3, [r7, #0]
 800ed2e:	689b      	ldr	r3, [r3, #8]
 800ed30:	1ad3      	subs	r3, r2, r3
 800ed32:	61fb      	str	r3, [r7, #28]
		mems.gyroscope.x -= calibrator->gyroscope.x;
 800ed34:	6a3a      	ldr	r2, [r7, #32]
 800ed36:	683b      	ldr	r3, [r7, #0]
 800ed38:	68db      	ldr	r3, [r3, #12]
 800ed3a:	1ad3      	subs	r3, r2, r3
 800ed3c:	623b      	str	r3, [r7, #32]
		mems.gyroscope.y -= calibrator->gyroscope.y;
 800ed3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ed40:	683b      	ldr	r3, [r7, #0]
 800ed42:	691b      	ldr	r3, [r3, #16]
 800ed44:	1ad3      	subs	r3, r2, r3
 800ed46:	627b      	str	r3, [r7, #36]	; 0x24
		mems.gyroscope.z -= calibrator->gyroscope.z;
 800ed48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ed4a:	683b      	ldr	r3, [r7, #0]
 800ed4c:	695b      	ldr	r3, [r3, #20]
 800ed4e:	1ad3      	subs	r3, r2, r3
 800ed50:	62bb      	str	r3, [r7, #40]	; 0x28
	}

	return mems;
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	461d      	mov	r5, r3
 800ed56:	f107 0414 	add.w	r4, r7, #20
 800ed5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ed5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ed5e:	e894 0003 	ldmia.w	r4, {r0, r1}
 800ed62:	e885 0003 	stmia.w	r5, {r0, r1}
}
 800ed66:	68f8      	ldr	r0, [r7, #12]
 800ed68:	3730      	adds	r7, #48	; 0x30
 800ed6a:	46bd      	mov	sp, r7
 800ed6c:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800ed70 <MEMS_Decision>:

mems_decision_t MEMS_Decision(I2C_HandleTypeDef *i2c, SD_MPU6050 *mpu, mems_t *calibrator, uint16_t sample) {
 800ed70:	b5b0      	push	{r4, r5, r7, lr}
 800ed72:	b092      	sub	sp, #72	; 0x48
 800ed74:	af02      	add	r7, sp, #8
 800ed76:	60f8      	str	r0, [r7, #12]
 800ed78:	60b9      	str	r1, [r7, #8]
 800ed7a:	607a      	str	r2, [r7, #4]
 800ed7c:	807b      	strh	r3, [r7, #2]
	int32_t g_force, accel_limit = 46000, gyro_limit = 10000;
 800ed7e:	f24b 33b0 	movw	r3, #46000	; 0xb3b0
 800ed82:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ed84:	f242 7310 	movw	r3, #10000	; 0x2710
 800ed88:	63bb      	str	r3, [r7, #56]	; 0x38
	mems_decision_t mems_decision;
	mems_t mems;
	//	char str[200];

	// get mems data
	mems = MEMS_Average(i2c, mpu, calibrator, sample);
 800ed8a:	f107 0014 	add.w	r0, r7, #20
 800ed8e:	887b      	ldrh	r3, [r7, #2]
 800ed90:	9300      	str	r3, [sp, #0]
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	68ba      	ldr	r2, [r7, #8]
 800ed96:	68f9      	ldr	r1, [r7, #12]
 800ed98:	f7ff ff50 	bl	800ec3c <MEMS_Average>
	// calculate g-force
	g_force = sqrt(pow(mems.accelerometer.x, 2) + pow(mems.accelerometer.y, 2) + pow(mems.accelerometer.z, 2));
 800ed9c:	697b      	ldr	r3, [r7, #20]
 800ed9e:	4618      	mov	r0, r3
 800eda0:	f7f1 fbd0 	bl	8000544 <__aeabi_i2d>
 800eda4:	4603      	mov	r3, r0
 800eda6:	460c      	mov	r4, r1
 800eda8:	ed9f 1b33 	vldr	d1, [pc, #204]	; 800ee78 <MEMS_Decision+0x108>
 800edac:	ec44 3b10 	vmov	d0, r3, r4
 800edb0:	f008 fcdc 	bl	801776c <pow>
 800edb4:	ec55 4b10 	vmov	r4, r5, d0
 800edb8:	69bb      	ldr	r3, [r7, #24]
 800edba:	4618      	mov	r0, r3
 800edbc:	f7f1 fbc2 	bl	8000544 <__aeabi_i2d>
 800edc0:	4602      	mov	r2, r0
 800edc2:	460b      	mov	r3, r1
 800edc4:	ed9f 1b2c 	vldr	d1, [pc, #176]	; 800ee78 <MEMS_Decision+0x108>
 800edc8:	ec43 2b10 	vmov	d0, r2, r3
 800edcc:	f008 fcce 	bl	801776c <pow>
 800edd0:	ec53 2b10 	vmov	r2, r3, d0
 800edd4:	4620      	mov	r0, r4
 800edd6:	4629      	mov	r1, r5
 800edd8:	f7f1 fa68 	bl	80002ac <__adddf3>
 800eddc:	4603      	mov	r3, r0
 800edde:	460c      	mov	r4, r1
 800ede0:	4625      	mov	r5, r4
 800ede2:	461c      	mov	r4, r3
 800ede4:	69fb      	ldr	r3, [r7, #28]
 800ede6:	4618      	mov	r0, r3
 800ede8:	f7f1 fbac 	bl	8000544 <__aeabi_i2d>
 800edec:	4602      	mov	r2, r0
 800edee:	460b      	mov	r3, r1
 800edf0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800ee78 <MEMS_Decision+0x108>
 800edf4:	ec43 2b10 	vmov	d0, r2, r3
 800edf8:	f008 fcb8 	bl	801776c <pow>
 800edfc:	ec53 2b10 	vmov	r2, r3, d0
 800ee00:	4620      	mov	r0, r4
 800ee02:	4629      	mov	r1, r5
 800ee04:	f7f1 fa52 	bl	80002ac <__adddf3>
 800ee08:	4603      	mov	r3, r0
 800ee0a:	460c      	mov	r4, r1
 800ee0c:	ec44 3b17 	vmov	d7, r3, r4
 800ee10:	eeb0 0a47 	vmov.f32	s0, s14
 800ee14:	eef0 0a67 	vmov.f32	s1, s15
 800ee18:	f008 fe18 	bl	8017a4c <sqrt>
 800ee1c:	ec54 3b10 	vmov	r3, r4, d0
 800ee20:	4618      	mov	r0, r3
 800ee22:	4621      	mov	r1, r4
 800ee24:	f7f1 fea8 	bl	8000b78 <__aeabi_d2iz>
 800ee28:	4603      	mov	r3, r0
 800ee2a:	637b      	str	r3, [r7, #52]	; 0x34
	mems_decision.crash = (g_force > accel_limit);
 800ee2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ee2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee30:	429a      	cmp	r2, r3
 800ee32:	bfcc      	ite	gt
 800ee34:	2301      	movgt	r3, #1
 800ee36:	2300      	movle	r3, #0
 800ee38:	b2db      	uxtb	r3, r3
 800ee3a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	// calculate movement change
	mems_decision.fall = (abs(mems.gyroscope.z) > gyro_limit);
 800ee3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	bfb8      	it	lt
 800ee44:	425b      	neglt	r3, r3
 800ee46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ee48:	429a      	cmp	r2, r3
 800ee4a:	bfb4      	ite	lt
 800ee4c:	2301      	movlt	r3, #1
 800ee4e:	2300      	movge	r3, #0
 800ee50:	b2db      	uxtb	r3, r3
 800ee52:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	//			mems.accelerometer.x, mems.accelerometer.y, mems.accelerometer.z,
	//			mems.gyroscope.x, mems.gyroscope.y, mems.gyroscope.z
	//	);
	//	SWV_SendStr(str);

	return mems_decision;
 800ee56:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ee58:	863b      	strh	r3, [r7, #48]	; 0x30
 800ee5a:	2300      	movs	r3, #0
 800ee5c:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800ee60:	f362 0307 	bfi	r3, r2, #0, #8
 800ee64:	f897 2031 	ldrb.w	r2, [r7, #49]	; 0x31
 800ee68:	f362 230f 	bfi	r3, r2, #8, #8
}
 800ee6c:	4618      	mov	r0, r3
 800ee6e:	3740      	adds	r7, #64	; 0x40
 800ee70:	46bd      	mov	sp, r7
 800ee72:	bdb0      	pop	{r4, r5, r7, pc}
 800ee74:	f3af 8000 	nop.w
 800ee78:	00000000 	.word	0x00000000
 800ee7c:	40000000 	.word	0x40000000

0800ee80 <SD_MPU6050_Init>:
#define MPU6050_ACCE_SENS_4			((float) 8192)
#define MPU6050_ACCE_SENS_8			((float) 4096)
#define MPU6050_ACCE_SENS_16		((float) 2048)

SD_MPU6050_Result SD_MPU6050_Init(I2C_HandleTypeDef *I2Cx, SD_MPU6050 *DataStruct, SD_MPU6050_Device DeviceNumber,
		SD_MPU6050_Accelerometer AccelerometerSensitivity, SD_MPU6050_Gyroscope GyroscopeSensitivity) {
 800ee80:	b580      	push	{r7, lr}
 800ee82:	b08a      	sub	sp, #40	; 0x28
 800ee84:	af02      	add	r7, sp, #8
 800ee86:	60f8      	str	r0, [r7, #12]
 800ee88:	60b9      	str	r1, [r7, #8]
 800ee8a:	4611      	mov	r1, r2
 800ee8c:	461a      	mov	r2, r3
 800ee8e:	460b      	mov	r3, r1
 800ee90:	71fb      	strb	r3, [r7, #7]
 800ee92:	4613      	mov	r3, r2
 800ee94:	71bb      	strb	r3, [r7, #6]
	uint8_t WHO_AM_I = (uint8_t) MPU6050_WHO_AM_I;
 800ee96:	2375      	movs	r3, #117	; 0x75
 800ee98:	76bb      	strb	r3, [r7, #26]
	uint8_t temp;
	I2C_HandleTypeDef *Handle = I2Cx;
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	61fb      	str	r3, [r7, #28]
	uint8_t d[2];

	/* Format I2C address */
	DataStruct->Address = MPU6050_I2C_ADDR | (uint8_t) DeviceNumber;
 800ee9e:	79fb      	ldrb	r3, [r7, #7]
 800eea0:	f063 032f 	orn	r3, r3, #47	; 0x2f
 800eea4:	b2da      	uxtb	r2, r3
 800eea6:	68bb      	ldr	r3, [r7, #8]
 800eea8:	701a      	strb	r2, [r3, #0]
	uint8_t address = DataStruct->Address;
 800eeaa:	68bb      	ldr	r3, [r7, #8]
 800eeac:	781b      	ldrb	r3, [r3, #0]
 800eeae:	76fb      	strb	r3, [r7, #27]

	/* Check if device is connected */
	if (HAL_I2C_IsDeviceReady(Handle, address, 2, 5) != HAL_OK) {
 800eeb0:	7efb      	ldrb	r3, [r7, #27]
 800eeb2:	b299      	uxth	r1, r3
 800eeb4:	2305      	movs	r3, #5
 800eeb6:	2202      	movs	r2, #2
 800eeb8:	69f8      	ldr	r0, [r7, #28]
 800eeba:	f7f5 f967 	bl	800418c <HAL_I2C_IsDeviceReady>
 800eebe:	4603      	mov	r3, r0
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	d004      	beq.n	800eece <SD_MPU6050_Init+0x4e>
		SWV_SendStrLn("!HAL_I2C_IsDeviceReady");
 800eec4:	482f      	ldr	r0, [pc, #188]	; (800ef84 <SD_MPU6050_Init+0x104>)
 800eec6:	f002 ffbd 	bl	8011e44 <SWV_SendStrLn>
		return SD_MPU6050_Result_Error;
 800eeca:	2301      	movs	r3, #1
 800eecc:	e055      	b.n	800ef7a <SD_MPU6050_Init+0xfa>
	}
	/* Check who am I */
	//------------------
	/* Send address */
	if (HAL_I2C_Master_Transmit(Handle, address, &WHO_AM_I, 1, 1000) != HAL_OK) {
 800eece:	7efb      	ldrb	r3, [r7, #27]
 800eed0:	b299      	uxth	r1, r3
 800eed2:	f107 021a 	add.w	r2, r7, #26
 800eed6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800eeda:	9300      	str	r3, [sp, #0]
 800eedc:	2301      	movs	r3, #1
 800eede:	69f8      	ldr	r0, [r7, #28]
 800eee0:	f7f4 fb10 	bl	8003504 <HAL_I2C_Master_Transmit>
 800eee4:	4603      	mov	r3, r0
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	d004      	beq.n	800eef4 <SD_MPU6050_Init+0x74>
		SWV_SendStrLn("!HAL_I2C_Master_Transmit");
 800eeea:	4827      	ldr	r0, [pc, #156]	; (800ef88 <SD_MPU6050_Init+0x108>)
 800eeec:	f002 ffaa 	bl	8011e44 <SWV_SendStrLn>
		return SD_MPU6050_Result_Error;
 800eef0:	2301      	movs	r3, #1
 800eef2:	e042      	b.n	800ef7a <SD_MPU6050_Init+0xfa>
	}

	/* Receive multiple byte */
	if (HAL_I2C_Master_Receive(Handle, address, &temp, 1, 1000) != HAL_OK) {
 800eef4:	7efb      	ldrb	r3, [r7, #27]
 800eef6:	b299      	uxth	r1, r3
 800eef8:	f107 0219 	add.w	r2, r7, #25
 800eefc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ef00:	9300      	str	r3, [sp, #0]
 800ef02:	2301      	movs	r3, #1
 800ef04:	69f8      	ldr	r0, [r7, #28]
 800ef06:	f7f4 fbfb 	bl	8003700 <HAL_I2C_Master_Receive>
 800ef0a:	4603      	mov	r3, r0
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d009      	beq.n	800ef24 <SD_MPU6050_Init+0xa4>
		SWV_SendStrLn("!HAL_I2C_Master_Receive");
 800ef10:	481e      	ldr	r0, [pc, #120]	; (800ef8c <SD_MPU6050_Init+0x10c>)
 800ef12:	f002 ff97 	bl	8011e44 <SWV_SendStrLn>
		return SD_MPU6050_Result_Error;
 800ef16:	2301      	movs	r3, #1
 800ef18:	e02f      	b.n	800ef7a <SD_MPU6050_Init+0xfa>
	}

	/* Checking */
	while (temp != MPU6050_I_AM) {
		SWV_SendStrLn("!MPU6050_I_AM");
 800ef1a:	481d      	ldr	r0, [pc, #116]	; (800ef90 <SD_MPU6050_Init+0x110>)
 800ef1c:	f002 ff92 	bl	8011e44 <SWV_SendStrLn>
		/* Return error */
		return SD_MPU6050_Result_DeviceInvalid;
 800ef20:	2303      	movs	r3, #3
 800ef22:	e02a      	b.n	800ef7a <SD_MPU6050_Init+0xfa>
	while (temp != MPU6050_I_AM) {
 800ef24:	bf00      	nop
 800ef26:	7e7b      	ldrb	r3, [r7, #25]
 800ef28:	2b72      	cmp	r3, #114	; 0x72
 800ef2a:	d1f6      	bne.n	800ef1a <SD_MPU6050_Init+0x9a>
	//------------------

	/* Wakeup MPU6050 */
	//------------------
	/* Format array to send */
	d[0] = MPU6050_PWR_MGMT_1;
 800ef2c:	236b      	movs	r3, #107	; 0x6b
 800ef2e:	753b      	strb	r3, [r7, #20]
	d[1] = 0x00;
 800ef30:	2300      	movs	r3, #0
 800ef32:	757b      	strb	r3, [r7, #21]

	/* Try to transmit via I2C */
	if (HAL_I2C_Master_Transmit(Handle, (uint16_t) address, (uint8_t*) d, 2, 1000) != HAL_OK) {
 800ef34:	7efb      	ldrb	r3, [r7, #27]
 800ef36:	b299      	uxth	r1, r3
 800ef38:	f107 0214 	add.w	r2, r7, #20
 800ef3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ef40:	9300      	str	r3, [sp, #0]
 800ef42:	2302      	movs	r3, #2
 800ef44:	69f8      	ldr	r0, [r7, #28]
 800ef46:	f7f4 fadd 	bl	8003504 <HAL_I2C_Master_Transmit>
 800ef4a:	4603      	mov	r3, r0
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d001      	beq.n	800ef54 <SD_MPU6050_Init+0xd4>
		return SD_MPU6050_Result_Error;
 800ef50:	2301      	movs	r3, #1
 800ef52:	e012      	b.n	800ef7a <SD_MPU6050_Init+0xfa>
	}
	//------------------

	/* Set sample rate to 1kHz */
	SD_MPU6050_SetDataRate(I2Cx, DataStruct, SD_MPU6050_DataRate_8KHz);
 800ef54:	2200      	movs	r2, #0
 800ef56:	68b9      	ldr	r1, [r7, #8]
 800ef58:	68f8      	ldr	r0, [r7, #12]
 800ef5a:	f000 f81b 	bl	800ef94 <SD_MPU6050_SetDataRate>

	/* Config accelerometer */
	SD_MPU6050_SetAccelerometer(I2Cx, DataStruct, AccelerometerSensitivity);
 800ef5e:	79bb      	ldrb	r3, [r7, #6]
 800ef60:	461a      	mov	r2, r3
 800ef62:	68b9      	ldr	r1, [r7, #8]
 800ef64:	68f8      	ldr	r0, [r7, #12]
 800ef66:	f000 f839 	bl	800efdc <SD_MPU6050_SetAccelerometer>

	/* Config Gyroscope */
	SD_MPU6050_SetGyroscope(I2Cx, DataStruct, GyroscopeSensitivity);
 800ef6a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ef6e:	461a      	mov	r2, r3
 800ef70:	68b9      	ldr	r1, [r7, #8]
 800ef72:	68f8      	ldr	r0, [r7, #12]
 800ef74:	f000 f8a2 	bl	800f0bc <SD_MPU6050_SetGyroscope>

	/* Return OK */
	return SD_MPU6050_Result_Ok;
 800ef78:	2300      	movs	r3, #0
}
 800ef7a:	4618      	mov	r0, r3
 800ef7c:	3720      	adds	r7, #32
 800ef7e:	46bd      	mov	sp, r7
 800ef80:	bd80      	pop	{r7, pc}
 800ef82:	bf00      	nop
 800ef84:	08018ba8 	.word	0x08018ba8
 800ef88:	08018bc0 	.word	0x08018bc0
 800ef8c:	08018bdc 	.word	0x08018bdc
 800ef90:	08018bf4 	.word	0x08018bf4

0800ef94 <SD_MPU6050_SetDataRate>:

SD_MPU6050_Result SD_MPU6050_SetDataRate(I2C_HandleTypeDef *I2Cx, SD_MPU6050 *DataStruct, uint8_t rate) {
 800ef94:	b580      	push	{r7, lr}
 800ef96:	b088      	sub	sp, #32
 800ef98:	af02      	add	r7, sp, #8
 800ef9a:	60f8      	str	r0, [r7, #12]
 800ef9c:	60b9      	str	r1, [r7, #8]
 800ef9e:	4613      	mov	r3, r2
 800efa0:	71fb      	strb	r3, [r7, #7]
	uint8_t d[2];
	I2C_HandleTypeDef *Handle = I2Cx;
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	617b      	str	r3, [r7, #20]
	uint8_t address = DataStruct->Address;
 800efa6:	68bb      	ldr	r3, [r7, #8]
 800efa8:	781b      	ldrb	r3, [r3, #0]
 800efaa:	74fb      	strb	r3, [r7, #19]
	/* Format array to send */
	d[0] = MPU6050_SMPLRT_DIV;
 800efac:	2319      	movs	r3, #25
 800efae:	743b      	strb	r3, [r7, #16]
	d[1] = rate;
 800efb0:	79fb      	ldrb	r3, [r7, #7]
 800efb2:	747b      	strb	r3, [r7, #17]

	/* Set data sample rate */
	while (HAL_I2C_Master_Transmit(Handle, (uint16_t) address, (uint8_t*) d, 2, 1000) != HAL_OK)
 800efb4:	bf00      	nop
 800efb6:	7cfb      	ldrb	r3, [r7, #19]
 800efb8:	b299      	uxth	r1, r3
 800efba:	f107 0210 	add.w	r2, r7, #16
 800efbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800efc2:	9300      	str	r3, [sp, #0]
 800efc4:	2302      	movs	r3, #2
 800efc6:	6978      	ldr	r0, [r7, #20]
 800efc8:	f7f4 fa9c 	bl	8003504 <HAL_I2C_Master_Transmit>
 800efcc:	4603      	mov	r3, r0
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d1f1      	bne.n	800efb6 <SD_MPU6050_SetDataRate+0x22>
	/*{
	 return SD_MPU6050_Result_Error;
	 }*/

	/* Return OK */
	return SD_MPU6050_Result_Ok;
 800efd2:	2300      	movs	r3, #0
}
 800efd4:	4618      	mov	r0, r3
 800efd6:	3718      	adds	r7, #24
 800efd8:	46bd      	mov	sp, r7
 800efda:	bd80      	pop	{r7, pc}

0800efdc <SD_MPU6050_SetAccelerometer>:

SD_MPU6050_Result SD_MPU6050_SetAccelerometer(I2C_HandleTypeDef *I2Cx, SD_MPU6050 *DataStruct,
		SD_MPU6050_Accelerometer AccelerometerSensitivity) {
 800efdc:	b580      	push	{r7, lr}
 800efde:	b088      	sub	sp, #32
 800efe0:	af02      	add	r7, sp, #8
 800efe2:	60f8      	str	r0, [r7, #12]
 800efe4:	60b9      	str	r1, [r7, #8]
 800efe6:	4613      	mov	r3, r2
 800efe8:	71fb      	strb	r3, [r7, #7]
	uint8_t temp;
	I2C_HandleTypeDef *Handle = I2Cx;
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	617b      	str	r3, [r7, #20]
	uint8_t address = DataStruct->Address;
 800efee:	68bb      	ldr	r3, [r7, #8]
 800eff0:	781b      	ldrb	r3, [r3, #0]
 800eff2:	74fb      	strb	r3, [r7, #19]
	uint8_t regAdd = (uint8_t) MPU6050_ACCEL_CONFIG;
 800eff4:	231c      	movs	r3, #28
 800eff6:	747b      	strb	r3, [r7, #17]

	/* Config accelerometer */
	while (HAL_I2C_Master_Transmit(Handle, (uint16_t) address, &regAdd, 1, 1000) != HAL_OK)
 800eff8:	bf00      	nop
 800effa:	7cfb      	ldrb	r3, [r7, #19]
 800effc:	b299      	uxth	r1, r3
 800effe:	f107 0211 	add.w	r2, r7, #17
 800f002:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f006:	9300      	str	r3, [sp, #0]
 800f008:	2301      	movs	r3, #1
 800f00a:	6978      	ldr	r0, [r7, #20]
 800f00c:	f7f4 fa7a 	bl	8003504 <HAL_I2C_Master_Transmit>
 800f010:	4603      	mov	r3, r0
 800f012:	2b00      	cmp	r3, #0
 800f014:	d1f1      	bne.n	800effa <SD_MPU6050_SetAccelerometer+0x1e>
		;
	/*{
	 return SD_MPU6050_Result_Error;
	 }*/
	while (HAL_I2C_Master_Receive(Handle, (uint16_t) address, &temp, 1, 1000) != HAL_OK)
 800f016:	bf00      	nop
 800f018:	7cfb      	ldrb	r3, [r7, #19]
 800f01a:	b299      	uxth	r1, r3
 800f01c:	f107 0212 	add.w	r2, r7, #18
 800f020:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f024:	9300      	str	r3, [sp, #0]
 800f026:	2301      	movs	r3, #1
 800f028:	6978      	ldr	r0, [r7, #20]
 800f02a:	f7f4 fb69 	bl	8003700 <HAL_I2C_Master_Receive>
 800f02e:	4603      	mov	r3, r0
 800f030:	2b00      	cmp	r3, #0
 800f032:	d1f1      	bne.n	800f018 <SD_MPU6050_SetAccelerometer+0x3c>
		;
	/*{
	 return SD_MPU6050_Result_Error;
	 }*/
	temp = (temp & 0xE7) | (uint8_t) AccelerometerSensitivity << 3;
 800f034:	7cbb      	ldrb	r3, [r7, #18]
 800f036:	b25b      	sxtb	r3, r3
 800f038:	f023 0318 	bic.w	r3, r3, #24
 800f03c:	b25a      	sxtb	r2, r3
 800f03e:	79fb      	ldrb	r3, [r7, #7]
 800f040:	00db      	lsls	r3, r3, #3
 800f042:	b25b      	sxtb	r3, r3
 800f044:	4313      	orrs	r3, r2
 800f046:	b25b      	sxtb	r3, r3
 800f048:	b2db      	uxtb	r3, r3
 800f04a:	74bb      	strb	r3, [r7, #18]
	while (HAL_I2C_Master_Transmit(Handle, (uint16_t) address, &temp, 1, 1000) != HAL_OK)
 800f04c:	bf00      	nop
 800f04e:	7cfb      	ldrb	r3, [r7, #19]
 800f050:	b299      	uxth	r1, r3
 800f052:	f107 0212 	add.w	r2, r7, #18
 800f056:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f05a:	9300      	str	r3, [sp, #0]
 800f05c:	2301      	movs	r3, #1
 800f05e:	6978      	ldr	r0, [r7, #20]
 800f060:	f7f4 fa50 	bl	8003504 <HAL_I2C_Master_Transmit>
 800f064:	4603      	mov	r3, r0
 800f066:	2b00      	cmp	r3, #0
 800f068:	d1f1      	bne.n	800f04e <SD_MPU6050_SetAccelerometer+0x72>
	/*{
	 return SD_MPU6050_Result_Error;
	 }*/

	/* Set sensitivities for multiplying gyro and accelerometer data */
	switch (AccelerometerSensitivity) {
 800f06a:	79fb      	ldrb	r3, [r7, #7]
 800f06c:	2b03      	cmp	r3, #3
 800f06e:	d81f      	bhi.n	800f0b0 <SD_MPU6050_SetAccelerometer+0xd4>
 800f070:	a201      	add	r2, pc, #4	; (adr r2, 800f078 <SD_MPU6050_SetAccelerometer+0x9c>)
 800f072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f076:	bf00      	nop
 800f078:	0800f089 	.word	0x0800f089
 800f07c:	0800f093 	.word	0x0800f093
 800f080:	0800f09d 	.word	0x0800f09d
 800f084:	0800f0a7 	.word	0x0800f0a7
		case SD_MPU6050_Accelerometer_2G:
			DataStruct->Acce_Mult = (float) 1 / MPU6050_ACCE_SENS_2;
 800f088:	68bb      	ldr	r3, [r7, #8]
 800f08a:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 800f08e:	609a      	str	r2, [r3, #8]
			break;
 800f090:	e00f      	b.n	800f0b2 <SD_MPU6050_SetAccelerometer+0xd6>
		case SD_MPU6050_Accelerometer_4G:
			DataStruct->Acce_Mult = (float) 1 / MPU6050_ACCE_SENS_4;
 800f092:	68bb      	ldr	r3, [r7, #8]
 800f094:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 800f098:	609a      	str	r2, [r3, #8]
			break;
 800f09a:	e00a      	b.n	800f0b2 <SD_MPU6050_SetAccelerometer+0xd6>
		case SD_MPU6050_Accelerometer_8G:
			DataStruct->Acce_Mult = (float) 1 / MPU6050_ACCE_SENS_8;
 800f09c:	68bb      	ldr	r3, [r7, #8]
 800f09e:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 800f0a2:	609a      	str	r2, [r3, #8]
			break;
 800f0a4:	e005      	b.n	800f0b2 <SD_MPU6050_SetAccelerometer+0xd6>
		case SD_MPU6050_Accelerometer_16G:
			DataStruct->Acce_Mult = (float) 1 / MPU6050_ACCE_SENS_16;
 800f0a6:	68bb      	ldr	r3, [r7, #8]
 800f0a8:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 800f0ac:	609a      	str	r2, [r3, #8]
			break;
 800f0ae:	e000      	b.n	800f0b2 <SD_MPU6050_SetAccelerometer+0xd6>
		default:
			break;
 800f0b0:	bf00      	nop
	}

	/* Return OK */
	return SD_MPU6050_Result_Ok;
 800f0b2:	2300      	movs	r3, #0
}
 800f0b4:	4618      	mov	r0, r3
 800f0b6:	3718      	adds	r7, #24
 800f0b8:	46bd      	mov	sp, r7
 800f0ba:	bd80      	pop	{r7, pc}

0800f0bc <SD_MPU6050_SetGyroscope>:

SD_MPU6050_Result SD_MPU6050_SetGyroscope(I2C_HandleTypeDef *I2Cx, SD_MPU6050 *DataStruct, SD_MPU6050_Gyroscope GyroscopeSensitivity) {
 800f0bc:	b580      	push	{r7, lr}
 800f0be:	b088      	sub	sp, #32
 800f0c0:	af02      	add	r7, sp, #8
 800f0c2:	60f8      	str	r0, [r7, #12]
 800f0c4:	60b9      	str	r1, [r7, #8]
 800f0c6:	4613      	mov	r3, r2
 800f0c8:	71fb      	strb	r3, [r7, #7]
	uint8_t temp;
	I2C_HandleTypeDef *Handle = I2Cx;
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	617b      	str	r3, [r7, #20]
	uint8_t address = DataStruct->Address;
 800f0ce:	68bb      	ldr	r3, [r7, #8]
 800f0d0:	781b      	ldrb	r3, [r3, #0]
 800f0d2:	74fb      	strb	r3, [r7, #19]
	uint8_t regAdd = (uint8_t) MPU6050_GYRO_CONFIG;
 800f0d4:	231b      	movs	r3, #27
 800f0d6:	747b      	strb	r3, [r7, #17]

	/* Config gyroscope */
	while (HAL_I2C_Master_Transmit(Handle, (uint16_t) address, &regAdd, 1, 1000) != HAL_OK)
 800f0d8:	bf00      	nop
 800f0da:	7cfb      	ldrb	r3, [r7, #19]
 800f0dc:	b299      	uxth	r1, r3
 800f0de:	f107 0211 	add.w	r2, r7, #17
 800f0e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f0e6:	9300      	str	r3, [sp, #0]
 800f0e8:	2301      	movs	r3, #1
 800f0ea:	6978      	ldr	r0, [r7, #20]
 800f0ec:	f7f4 fa0a 	bl	8003504 <HAL_I2C_Master_Transmit>
 800f0f0:	4603      	mov	r3, r0
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d1f1      	bne.n	800f0da <SD_MPU6050_SetGyroscope+0x1e>
		;
	/*{
	 return SD_MPU6050_Result_Error;
	 }*/
	while (HAL_I2C_Master_Receive(Handle, (uint16_t) address, &temp, 1, 1000) != HAL_OK)
 800f0f6:	bf00      	nop
 800f0f8:	7cfb      	ldrb	r3, [r7, #19]
 800f0fa:	b299      	uxth	r1, r3
 800f0fc:	f107 0212 	add.w	r2, r7, #18
 800f100:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f104:	9300      	str	r3, [sp, #0]
 800f106:	2301      	movs	r3, #1
 800f108:	6978      	ldr	r0, [r7, #20]
 800f10a:	f7f4 faf9 	bl	8003700 <HAL_I2C_Master_Receive>
 800f10e:	4603      	mov	r3, r0
 800f110:	2b00      	cmp	r3, #0
 800f112:	d1f1      	bne.n	800f0f8 <SD_MPU6050_SetGyroscope+0x3c>
		;
	/*{
	 return SD_MPU6050_Result_Error;
	 }*/
	temp = (temp & 0xE7) | (uint8_t) GyroscopeSensitivity << 3;
 800f114:	7cbb      	ldrb	r3, [r7, #18]
 800f116:	b25b      	sxtb	r3, r3
 800f118:	f023 0318 	bic.w	r3, r3, #24
 800f11c:	b25a      	sxtb	r2, r3
 800f11e:	79fb      	ldrb	r3, [r7, #7]
 800f120:	00db      	lsls	r3, r3, #3
 800f122:	b25b      	sxtb	r3, r3
 800f124:	4313      	orrs	r3, r2
 800f126:	b25b      	sxtb	r3, r3
 800f128:	b2db      	uxtb	r3, r3
 800f12a:	74bb      	strb	r3, [r7, #18]
	while (HAL_I2C_Master_Transmit(Handle, (uint16_t) address, &temp, 1, 1000) != HAL_OK)
 800f12c:	bf00      	nop
 800f12e:	7cfb      	ldrb	r3, [r7, #19]
 800f130:	b299      	uxth	r1, r3
 800f132:	f107 0212 	add.w	r2, r7, #18
 800f136:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f13a:	9300      	str	r3, [sp, #0]
 800f13c:	2301      	movs	r3, #1
 800f13e:	6978      	ldr	r0, [r7, #20]
 800f140:	f7f4 f9e0 	bl	8003504 <HAL_I2C_Master_Transmit>
 800f144:	4603      	mov	r3, r0
 800f146:	2b00      	cmp	r3, #0
 800f148:	d1f1      	bne.n	800f12e <SD_MPU6050_SetGyroscope+0x72>
		;
	/*{
	 return SD_MPU6050_Result_Error;
	 }*/

	switch (GyroscopeSensitivity) {
 800f14a:	79fb      	ldrb	r3, [r7, #7]
 800f14c:	2b03      	cmp	r3, #3
 800f14e:	d81b      	bhi.n	800f188 <SD_MPU6050_SetGyroscope+0xcc>
 800f150:	a201      	add	r2, pc, #4	; (adr r2, 800f158 <SD_MPU6050_SetGyroscope+0x9c>)
 800f152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f156:	bf00      	nop
 800f158:	0800f169 	.word	0x0800f169
 800f15c:	0800f171 	.word	0x0800f171
 800f160:	0800f179 	.word	0x0800f179
 800f164:	0800f181 	.word	0x0800f181
		case SD_MPU6050_Gyroscope_250s:
			DataStruct->Gyro_Mult = (float) 1 / MPU6050_GYRO_SENS_250;
 800f168:	68bb      	ldr	r3, [r7, #8]
 800f16a:	4a0a      	ldr	r2, [pc, #40]	; (800f194 <SD_MPU6050_SetGyroscope+0xd8>)
 800f16c:	605a      	str	r2, [r3, #4]
			break;
 800f16e:	e00c      	b.n	800f18a <SD_MPU6050_SetGyroscope+0xce>
		case SD_MPU6050_Gyroscope_500s:
			DataStruct->Gyro_Mult = (float) 1 / MPU6050_GYRO_SENS_500;
 800f170:	68bb      	ldr	r3, [r7, #8]
 800f172:	4a09      	ldr	r2, [pc, #36]	; (800f198 <SD_MPU6050_SetGyroscope+0xdc>)
 800f174:	605a      	str	r2, [r3, #4]
			break;
 800f176:	e008      	b.n	800f18a <SD_MPU6050_SetGyroscope+0xce>
		case SD_MPU6050_Gyroscope_1000s:
			DataStruct->Gyro_Mult = (float) 1 / MPU6050_GYRO_SENS_1000;
 800f178:	68bb      	ldr	r3, [r7, #8]
 800f17a:	4a08      	ldr	r2, [pc, #32]	; (800f19c <SD_MPU6050_SetGyroscope+0xe0>)
 800f17c:	605a      	str	r2, [r3, #4]
			break;
 800f17e:	e004      	b.n	800f18a <SD_MPU6050_SetGyroscope+0xce>
		case SD_MPU6050_Gyroscope_2000s:
			DataStruct->Gyro_Mult = (float) 1 / MPU6050_GYRO_SENS_2000;
 800f180:	68bb      	ldr	r3, [r7, #8]
 800f182:	4a07      	ldr	r2, [pc, #28]	; (800f1a0 <SD_MPU6050_SetGyroscope+0xe4>)
 800f184:	605a      	str	r2, [r3, #4]
			break;
 800f186:	e000      	b.n	800f18a <SD_MPU6050_SetGyroscope+0xce>
		default:
			break;
 800f188:	bf00      	nop
	}
	/* Return OK */
	return SD_MPU6050_Result_Ok;
 800f18a:	2300      	movs	r3, #0
}
 800f18c:	4618      	mov	r0, r3
 800f18e:	3718      	adds	r7, #24
 800f190:	46bd      	mov	sp, r7
 800f192:	bd80      	pop	{r7, pc}
 800f194:	3bfa232d 	.word	0x3bfa232d
 800f198:	3c7a232d 	.word	0x3c7a232d
 800f19c:	3cf9c190 	.word	0x3cf9c190
 800f1a0:	3d79c190 	.word	0x3d79c190

0800f1a4 <SD_MPU6050_ReadAll>:
	DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);

	/* Return OK */
	return SD_MPU6050_Result_Ok;
}
SD_MPU6050_Result SD_MPU6050_ReadAll(I2C_HandleTypeDef *I2Cx, SD_MPU6050 *DataStruct) {
 800f1a4:	b580      	push	{r7, lr}
 800f1a6:	b08c      	sub	sp, #48	; 0x30
 800f1a8:	af02      	add	r7, sp, #8
 800f1aa:	6078      	str	r0, [r7, #4]
 800f1ac:	6039      	str	r1, [r7, #0]
	uint8_t data[14];
	int16_t temp;
	uint8_t reg = MPU6050_ACCEL_XOUT_H;
 800f1ae:	233b      	movs	r3, #59	; 0x3b
 800f1b0:	73fb      	strb	r3, [r7, #15]
	I2C_HandleTypeDef *Handle = I2Cx;
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t address = DataStruct->Address;
 800f1b6:	683b      	ldr	r3, [r7, #0]
 800f1b8:	781b      	ldrb	r3, [r3, #0]
 800f1ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	/* Read full raw data, 14bytes */
	while (HAL_I2C_Master_Transmit(Handle, (uint16_t) address, &reg, 1, 1000) != HAL_OK)
 800f1be:	bf00      	nop
 800f1c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f1c4:	b299      	uxth	r1, r3
 800f1c6:	f107 020f 	add.w	r2, r7, #15
 800f1ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f1ce:	9300      	str	r3, [sp, #0]
 800f1d0:	2301      	movs	r3, #1
 800f1d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f1d4:	f7f4 f996 	bl	8003504 <HAL_I2C_Master_Transmit>
 800f1d8:	4603      	mov	r3, r0
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d1f0      	bne.n	800f1c0 <SD_MPU6050_ReadAll+0x1c>
		;

	while (HAL_I2C_Master_Receive(Handle, (uint16_t) address, data, 14, 1000) != HAL_OK)
 800f1de:	bf00      	nop
 800f1e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f1e4:	b299      	uxth	r1, r3
 800f1e6:	f107 0210 	add.w	r2, r7, #16
 800f1ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f1ee:	9300      	str	r3, [sp, #0]
 800f1f0:	230e      	movs	r3, #14
 800f1f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f1f4:	f7f4 fa84 	bl	8003700 <HAL_I2C_Master_Receive>
 800f1f8:	4603      	mov	r3, r0
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d1f0      	bne.n	800f1e0 <SD_MPU6050_ReadAll+0x3c>
		;

	/* Format accelerometer data */
	DataStruct->Accelerometer_X = (int16_t) (data[0] << 8 | data[1]);
 800f1fe:	7c3b      	ldrb	r3, [r7, #16]
 800f200:	021b      	lsls	r3, r3, #8
 800f202:	b21a      	sxth	r2, r3
 800f204:	7c7b      	ldrb	r3, [r7, #17]
 800f206:	b21b      	sxth	r3, r3
 800f208:	4313      	orrs	r3, r2
 800f20a:	b21a      	sxth	r2, r3
 800f20c:	683b      	ldr	r3, [r7, #0]
 800f20e:	819a      	strh	r2, [r3, #12]
	DataStruct->Accelerometer_Y = (int16_t) (data[2] << 8 | data[3]);
 800f210:	7cbb      	ldrb	r3, [r7, #18]
 800f212:	021b      	lsls	r3, r3, #8
 800f214:	b21a      	sxth	r2, r3
 800f216:	7cfb      	ldrb	r3, [r7, #19]
 800f218:	b21b      	sxth	r3, r3
 800f21a:	4313      	orrs	r3, r2
 800f21c:	b21a      	sxth	r2, r3
 800f21e:	683b      	ldr	r3, [r7, #0]
 800f220:	81da      	strh	r2, [r3, #14]
	DataStruct->Accelerometer_Z = (int16_t) (data[4] << 8 | data[5]);
 800f222:	7d3b      	ldrb	r3, [r7, #20]
 800f224:	021b      	lsls	r3, r3, #8
 800f226:	b21a      	sxth	r2, r3
 800f228:	7d7b      	ldrb	r3, [r7, #21]
 800f22a:	b21b      	sxth	r3, r3
 800f22c:	4313      	orrs	r3, r2
 800f22e:	b21a      	sxth	r2, r3
 800f230:	683b      	ldr	r3, [r7, #0]
 800f232:	821a      	strh	r2, [r3, #16]

	/* Format temperature */
	temp = (data[6] << 8 | data[7]);
 800f234:	7dbb      	ldrb	r3, [r7, #22]
 800f236:	021b      	lsls	r3, r3, #8
 800f238:	b21a      	sxth	r2, r3
 800f23a:	7dfb      	ldrb	r3, [r7, #23]
 800f23c:	b21b      	sxth	r3, r3
 800f23e:	4313      	orrs	r3, r2
 800f240:	843b      	strh	r3, [r7, #32]
	DataStruct->Temperature = (float) ((float) ((int16_t) temp) / (float) 340.0 + (float) 36.53);
 800f242:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f246:	ee07 3a90 	vmov	s15, r3
 800f24a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f24e:	eddf 6a15 	vldr	s13, [pc, #84]	; 800f2a4 <SD_MPU6050_ReadAll+0x100>
 800f252:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800f256:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800f2a8 <SD_MPU6050_ReadAll+0x104>
 800f25a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f25e:	683b      	ldr	r3, [r7, #0]
 800f260:	edc3 7a06 	vstr	s15, [r3, #24]

	/* Format gyroscope data */
	DataStruct->Gyroscope_X = (int16_t) (data[8] << 8 | data[9]);
 800f264:	7e3b      	ldrb	r3, [r7, #24]
 800f266:	021b      	lsls	r3, r3, #8
 800f268:	b21a      	sxth	r2, r3
 800f26a:	7e7b      	ldrb	r3, [r7, #25]
 800f26c:	b21b      	sxth	r3, r3
 800f26e:	4313      	orrs	r3, r2
 800f270:	b21a      	sxth	r2, r3
 800f272:	683b      	ldr	r3, [r7, #0]
 800f274:	825a      	strh	r2, [r3, #18]
	DataStruct->Gyroscope_Y = (int16_t) (data[10] << 8 | data[11]);
 800f276:	7ebb      	ldrb	r3, [r7, #26]
 800f278:	021b      	lsls	r3, r3, #8
 800f27a:	b21a      	sxth	r2, r3
 800f27c:	7efb      	ldrb	r3, [r7, #27]
 800f27e:	b21b      	sxth	r3, r3
 800f280:	4313      	orrs	r3, r2
 800f282:	b21a      	sxth	r2, r3
 800f284:	683b      	ldr	r3, [r7, #0]
 800f286:	829a      	strh	r2, [r3, #20]
	DataStruct->Gyroscope_Z = (int16_t) (data[12] << 8 | data[13]);
 800f288:	7f3b      	ldrb	r3, [r7, #28]
 800f28a:	021b      	lsls	r3, r3, #8
 800f28c:	b21a      	sxth	r2, r3
 800f28e:	7f7b      	ldrb	r3, [r7, #29]
 800f290:	b21b      	sxth	r3, r3
 800f292:	4313      	orrs	r3, r2
 800f294:	b21a      	sxth	r2, r3
 800f296:	683b      	ldr	r3, [r7, #0]
 800f298:	82da      	strh	r2, [r3, #22]

	/* Return OK */
	return SD_MPU6050_Result_Ok;
 800f29a:	2300      	movs	r3, #0
}
 800f29c:	4618      	mov	r0, r3
 800f29e:	3728      	adds	r7, #40	; 0x28
 800f2a0:	46bd      	mov	sp, r7
 800f2a2:	bd80      	pop	{r7, pc}
 800f2a4:	43aa0000 	.word	0x43aa0000
 800f2a8:	42121eb8 	.word	0x42121eb8

0800f2ac <parse_number>:
 * \param[in]       gh: GPS handle
 * \param[in]       t: Text to parse. Set to `NULL` to parse current GPS term
 * \return          Parsed integer
 */
static int32_t
parse_number(gps_t* gh, const char* t) {
 800f2ac:	b480      	push	{r7}
 800f2ae:	b085      	sub	sp, #20
 800f2b0:	af00      	add	r7, sp, #0
 800f2b2:	6078      	str	r0, [r7, #4]
 800f2b4:	6039      	str	r1, [r7, #0]
	int32_t res = 0;
 800f2b6:	2300      	movs	r3, #0
 800f2b8:	60fb      	str	r3, [r7, #12]
	uint8_t minus;

	if (t == NULL) {
 800f2ba:	683b      	ldr	r3, [r7, #0]
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d106      	bne.n	800f2ce <parse_number+0x22>
		t = gh->p.term_str;
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	3345      	adds	r3, #69	; 0x45
 800f2c4:	603b      	str	r3, [r7, #0]
	}
	for (; t != NULL && *t == ' '; t++) {}      /* Strip leading spaces */
 800f2c6:	e002      	b.n	800f2ce <parse_number+0x22>
 800f2c8:	683b      	ldr	r3, [r7, #0]
 800f2ca:	3301      	adds	r3, #1
 800f2cc:	603b      	str	r3, [r7, #0]
 800f2ce:	683b      	ldr	r3, [r7, #0]
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d003      	beq.n	800f2dc <parse_number+0x30>
 800f2d4:	683b      	ldr	r3, [r7, #0]
 800f2d6:	781b      	ldrb	r3, [r3, #0]
 800f2d8:	2b20      	cmp	r3, #32
 800f2da:	d0f5      	beq.n	800f2c8 <parse_number+0x1c>

	minus = (*t == '-' ? (t++, 1) : 0);
 800f2dc:	683b      	ldr	r3, [r7, #0]
 800f2de:	781b      	ldrb	r3, [r3, #0]
 800f2e0:	2b2d      	cmp	r3, #45	; 0x2d
 800f2e2:	d104      	bne.n	800f2ee <parse_number+0x42>
 800f2e4:	683b      	ldr	r3, [r7, #0]
 800f2e6:	3301      	adds	r3, #1
 800f2e8:	603b      	str	r3, [r7, #0]
 800f2ea:	2301      	movs	r3, #1
 800f2ec:	e000      	b.n	800f2f0 <parse_number+0x44>
 800f2ee:	2300      	movs	r3, #0
 800f2f0:	72fb      	strb	r3, [r7, #11]
	for (; t != NULL && CIN(*t); t++) {
 800f2f2:	e00d      	b.n	800f310 <parse_number+0x64>
		res = 10 * res + CTN(*t);
 800f2f4:	68fa      	ldr	r2, [r7, #12]
 800f2f6:	4613      	mov	r3, r2
 800f2f8:	009b      	lsls	r3, r3, #2
 800f2fa:	4413      	add	r3, r2
 800f2fc:	005b      	lsls	r3, r3, #1
 800f2fe:	461a      	mov	r2, r3
 800f300:	683b      	ldr	r3, [r7, #0]
 800f302:	781b      	ldrb	r3, [r3, #0]
 800f304:	3b30      	subs	r3, #48	; 0x30
 800f306:	4413      	add	r3, r2
 800f308:	60fb      	str	r3, [r7, #12]
	for (; t != NULL && CIN(*t); t++) {
 800f30a:	683b      	ldr	r3, [r7, #0]
 800f30c:	3301      	adds	r3, #1
 800f30e:	603b      	str	r3, [r7, #0]
 800f310:	683b      	ldr	r3, [r7, #0]
 800f312:	2b00      	cmp	r3, #0
 800f314:	d007      	beq.n	800f326 <parse_number+0x7a>
 800f316:	683b      	ldr	r3, [r7, #0]
 800f318:	781b      	ldrb	r3, [r3, #0]
 800f31a:	2b2f      	cmp	r3, #47	; 0x2f
 800f31c:	d903      	bls.n	800f326 <parse_number+0x7a>
 800f31e:	683b      	ldr	r3, [r7, #0]
 800f320:	781b      	ldrb	r3, [r3, #0]
 800f322:	2b39      	cmp	r3, #57	; 0x39
 800f324:	d9e6      	bls.n	800f2f4 <parse_number+0x48>
	}
	return minus ? -res : res;
 800f326:	7afb      	ldrb	r3, [r7, #11]
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d002      	beq.n	800f332 <parse_number+0x86>
 800f32c:	68fb      	ldr	r3, [r7, #12]
 800f32e:	425b      	negs	r3, r3
 800f330:	e000      	b.n	800f334 <parse_number+0x88>
 800f332:	68fb      	ldr	r3, [r7, #12]
}
 800f334:	4618      	mov	r0, r3
 800f336:	3714      	adds	r7, #20
 800f338:	46bd      	mov	sp, r7
 800f33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f33e:	4770      	bx	lr

0800f340 <parse_float_number>:
 * \param[in]       gh: GPS handle
 * \param[in]       t: Text to parse. Set to `NULL` to parse current GPS term
 * \return          Parsed double in \ref gps_float_t format
 */
static gps_float_t
parse_float_number(gps_t* gh, const char* t) {
 800f340:	b580      	push	{r7, lr}
 800f342:	b084      	sub	sp, #16
 800f344:	af00      	add	r7, sp, #0
 800f346:	6078      	str	r0, [r7, #4]
 800f348:	6039      	str	r1, [r7, #0]
	gps_float_t res;

	if (t == NULL) {
 800f34a:	683b      	ldr	r3, [r7, #0]
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d106      	bne.n	800f35e <parse_float_number+0x1e>
		t = gh->p.term_str;
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	3345      	adds	r3, #69	; 0x45
 800f354:	603b      	str	r3, [r7, #0]
	}
	for (; t != NULL && *t == ' '; t++) {}      /* Strip leading spaces */
 800f356:	e002      	b.n	800f35e <parse_float_number+0x1e>
 800f358:	683b      	ldr	r3, [r7, #0]
 800f35a:	3301      	adds	r3, #1
 800f35c:	603b      	str	r3, [r7, #0]
 800f35e:	683b      	ldr	r3, [r7, #0]
 800f360:	2b00      	cmp	r3, #0
 800f362:	d003      	beq.n	800f36c <parse_float_number+0x2c>
 800f364:	683b      	ldr	r3, [r7, #0]
 800f366:	781b      	ldrb	r3, [r3, #0]
 800f368:	2b20      	cmp	r3, #32
 800f36a:	d0f5      	beq.n	800f358 <parse_float_number+0x18>

#if GPS_CFG_DOUBLE
	res = strtod(t, NULL);                      /* Parse string to double */
#else /* GPS_CFG_DOUBLE */
	res = strtof(t, NULL);                      /* Parse string to float */
 800f36c:	2100      	movs	r1, #0
 800f36e:	6838      	ldr	r0, [r7, #0]
 800f370:	f006 fd96 	bl	8015ea0 <strtof>
 800f374:	ed87 0a03 	vstr	s0, [r7, #12]
#endif /* !GPS_CFG_DOUBLE */

	return FLT(res);                            /* Return casted value, based on float size */
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	ee07 3a90 	vmov	s15, r3
}
 800f37e:	eeb0 0a67 	vmov.f32	s0, s15
 800f382:	3710      	adds	r7, #16
 800f384:	46bd      	mov	sp, r7
 800f386:	bd80      	pop	{r7, pc}

0800f388 <parse_lat_long>:
 *                  NMEA output for latitude is ddmm.sss and longitude is dddmm.sss
 * \param[in]       gh: GPS handle
 * \return          Latitude/Longitude value in degrees
 */
static gps_float_t
parse_lat_long(gps_t* gh) {
 800f388:	b580      	push	{r7, lr}
 800f38a:	b086      	sub	sp, #24
 800f38c:	af00      	add	r7, sp, #0
 800f38e:	6078      	str	r0, [r7, #4]
	gps_float_t ll, deg, min;

	ll = parse_float_number(gh, NULL);          /* Parse value as double */
 800f390:	2100      	movs	r1, #0
 800f392:	6878      	ldr	r0, [r7, #4]
 800f394:	f7ff ffd4 	bl	800f340 <parse_float_number>
 800f398:	ed87 0a05 	vstr	s0, [r7, #20]
	deg = FLT((int)((int)ll / 100));            /* Get absolute degrees value, interested in integer part only */
 800f39c:	edd7 7a05 	vldr	s15, [r7, #20]
 800f3a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f3a4:	ee17 1a90 	vmov	r1, s15
 800f3a8:	4b15      	ldr	r3, [pc, #84]	; (800f400 <parse_lat_long+0x78>)
 800f3aa:	fb83 2301 	smull	r2, r3, r3, r1
 800f3ae:	115a      	asrs	r2, r3, #5
 800f3b0:	17cb      	asrs	r3, r1, #31
 800f3b2:	1ad3      	subs	r3, r2, r3
 800f3b4:	ee07 3a90 	vmov	s15, r3
 800f3b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f3bc:	edc7 7a04 	vstr	s15, [r7, #16]
	min = ll - (deg * FLT(100));                /* Get remaining part from full number, minutes */
 800f3c0:	edd7 7a04 	vldr	s15, [r7, #16]
 800f3c4:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800f404 <parse_lat_long+0x7c>
 800f3c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f3cc:	ed97 7a05 	vldr	s14, [r7, #20]
 800f3d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f3d4:	edc7 7a03 	vstr	s15, [r7, #12]
	ll = deg + (min / FLT(60));               /* Calculate latitude/longitude */
 800f3d8:	ed97 7a03 	vldr	s14, [r7, #12]
 800f3dc:	eddf 6a0a 	vldr	s13, [pc, #40]	; 800f408 <parse_lat_long+0x80>
 800f3e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800f3e4:	ed97 7a04 	vldr	s14, [r7, #16]
 800f3e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f3ec:	edc7 7a05 	vstr	s15, [r7, #20]

	return ll;
 800f3f0:	697b      	ldr	r3, [r7, #20]
 800f3f2:	ee07 3a90 	vmov	s15, r3
}
 800f3f6:	eeb0 0a67 	vmov.f32	s0, s15
 800f3fa:	3718      	adds	r7, #24
 800f3fc:	46bd      	mov	sp, r7
 800f3fe:	bd80      	pop	{r7, pc}
 800f400:	51eb851f 	.word	0x51eb851f
 800f404:	42c80000 	.word	0x42c80000
 800f408:	42700000 	.word	0x42700000

0800f40c <parse_term>:
 * \brief           Parse received term
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
parse_term(gps_t* gh) {
 800f40c:	b580      	push	{r7, lr}
 800f40e:	b082      	sub	sp, #8
 800f410:	af00      	add	r7, sp, #0
 800f412:	6078      	str	r0, [r7, #4]
	if (gh->p.term_num == 0) {                  /* Check string type */
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d169      	bne.n	800f4f2 <parse_term+0xe6>
		if (0) {
#if GPS_CFG_STATEMENT_GPGGA
		} else if (!strncmp(gh->p.term_str, "$GPGGA", 6) || !strncmp(gh->p.term_str, "$GNGGA", 6)) {
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	3345      	adds	r3, #69	; 0x45
 800f422:	2206      	movs	r2, #6
 800f424:	49c4      	ldr	r1, [pc, #784]	; (800f738 <parse_term+0x32c>)
 800f426:	4618      	mov	r0, r3
 800f428:	f005 fee7 	bl	80151fa <strncmp>
 800f42c:	4603      	mov	r3, r0
 800f42e:	2b00      	cmp	r3, #0
 800f430:	d009      	beq.n	800f446 <parse_term+0x3a>
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	3345      	adds	r3, #69	; 0x45
 800f436:	2206      	movs	r2, #6
 800f438:	49c0      	ldr	r1, [pc, #768]	; (800f73c <parse_term+0x330>)
 800f43a:	4618      	mov	r0, r3
 800f43c:	f005 fedd 	bl	80151fa <strncmp>
 800f440:	4603      	mov	r3, r0
 800f442:	2b00      	cmp	r3, #0
 800f444:	d104      	bne.n	800f450 <parse_term+0x44>
			gh->p.stat = STAT_GGA;
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	2201      	movs	r2, #1
 800f44a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f44e:	e04e      	b.n	800f4ee <parse_term+0xe2>
#endif /* GPS_CFG_STATEMENT_GPGGA */
#if GPS_CFG_STATEMENT_GPGSA
		} else if (!strncmp(gh->p.term_str, "$GPGSA", 6) || !strncmp(gh->p.term_str, "$GNGSA", 6)) {
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	3345      	adds	r3, #69	; 0x45
 800f454:	2206      	movs	r2, #6
 800f456:	49ba      	ldr	r1, [pc, #744]	; (800f740 <parse_term+0x334>)
 800f458:	4618      	mov	r0, r3
 800f45a:	f005 fece 	bl	80151fa <strncmp>
 800f45e:	4603      	mov	r3, r0
 800f460:	2b00      	cmp	r3, #0
 800f462:	d009      	beq.n	800f478 <parse_term+0x6c>
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	3345      	adds	r3, #69	; 0x45
 800f468:	2206      	movs	r2, #6
 800f46a:	49b6      	ldr	r1, [pc, #728]	; (800f744 <parse_term+0x338>)
 800f46c:	4618      	mov	r0, r3
 800f46e:	f005 fec4 	bl	80151fa <strncmp>
 800f472:	4603      	mov	r3, r0
 800f474:	2b00      	cmp	r3, #0
 800f476:	d104      	bne.n	800f482 <parse_term+0x76>
			gh->p.stat = STAT_GSA;
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	2202      	movs	r2, #2
 800f47c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f480:	e035      	b.n	800f4ee <parse_term+0xe2>
#endif /* GPS_CFG_STATEMENT_GPGSA */
#if GPS_CFG_STATEMENT_GPGSV
		} else if (!strncmp(gh->p.term_str, "$GPGSV", 6) || !strncmp(gh->p.term_str, "$GNGSV", 6)) {
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	3345      	adds	r3, #69	; 0x45
 800f486:	2206      	movs	r2, #6
 800f488:	49af      	ldr	r1, [pc, #700]	; (800f748 <parse_term+0x33c>)
 800f48a:	4618      	mov	r0, r3
 800f48c:	f005 feb5 	bl	80151fa <strncmp>
 800f490:	4603      	mov	r3, r0
 800f492:	2b00      	cmp	r3, #0
 800f494:	d009      	beq.n	800f4aa <parse_term+0x9e>
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	3345      	adds	r3, #69	; 0x45
 800f49a:	2206      	movs	r2, #6
 800f49c:	49ab      	ldr	r1, [pc, #684]	; (800f74c <parse_term+0x340>)
 800f49e:	4618      	mov	r0, r3
 800f4a0:	f005 feab 	bl	80151fa <strncmp>
 800f4a4:	4603      	mov	r3, r0
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d104      	bne.n	800f4b4 <parse_term+0xa8>
			gh->p.stat = STAT_GSV;
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	2203      	movs	r2, #3
 800f4ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f4b2:	e01c      	b.n	800f4ee <parse_term+0xe2>
#endif /* GPS_CFG_STATEMENT_GPGSV */
#if GPS_CFG_STATEMENT_GPRMC
		} else if (!strncmp(gh->p.term_str, "$GPRMC", 6) || !strncmp(gh->p.term_str, "$GNRMC", 6)) {
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	3345      	adds	r3, #69	; 0x45
 800f4b8:	2206      	movs	r2, #6
 800f4ba:	49a5      	ldr	r1, [pc, #660]	; (800f750 <parse_term+0x344>)
 800f4bc:	4618      	mov	r0, r3
 800f4be:	f005 fe9c 	bl	80151fa <strncmp>
 800f4c2:	4603      	mov	r3, r0
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	d009      	beq.n	800f4dc <parse_term+0xd0>
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	3345      	adds	r3, #69	; 0x45
 800f4cc:	2206      	movs	r2, #6
 800f4ce:	49a1      	ldr	r1, [pc, #644]	; (800f754 <parse_term+0x348>)
 800f4d0:	4618      	mov	r0, r3
 800f4d2:	f005 fe92 	bl	80151fa <strncmp>
 800f4d6:	4603      	mov	r3, r0
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d104      	bne.n	800f4e6 <parse_term+0xda>
			gh->p.stat = STAT_RMC;
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	2204      	movs	r2, #4
 800f4e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f4e4:	e003      	b.n	800f4ee <parse_term+0xe2>
#endif /* GPS_CFG_STATEMENT_GPRMC */
		} else {
			gh->p.stat = STAT_UNKNOWN;          /* Invalid statement for library */
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	2200      	movs	r2, #0
 800f4ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		}
		return 1;
 800f4ee:	2301      	movs	r3, #1
 800f4f0:	e21d      	b.n	800f92e <parse_term+0x522>
	}

	/* Start parsing terms */
	if (gh->p.stat == STAT_UNKNOWN) {
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	f000 8217 	beq.w	800f92c <parse_term+0x520>
#if GPS_CFG_STATEMENT_GPGGA
	} else if (gh->p.stat == STAT_GGA) {        /* Process GPGGA statement */
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f504:	2b01      	cmp	r3, #1
 800f506:	f040 80c0 	bne.w	800f68a <parse_term+0x27e>
		switch (gh->p.term_num) {
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800f510:	3b01      	subs	r3, #1
 800f512:	2b0a      	cmp	r3, #10
 800f514:	f200 81fd 	bhi.w	800f912 <parse_term+0x506>
 800f518:	a201      	add	r2, pc, #4	; (adr r2, 800f520 <parse_term+0x114>)
 800f51a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f51e:	bf00      	nop
 800f520:	0800f54d 	.word	0x0800f54d
 800f524:	0800f5c7 	.word	0x0800f5c7
 800f528:	0800f5d9 	.word	0x0800f5d9
 800f52c:	0800f601 	.word	0x0800f601
 800f530:	0800f613 	.word	0x0800f613
 800f534:	0800f63b 	.word	0x0800f63b
 800f538:	0800f64f 	.word	0x0800f64f
 800f53c:	0800f913 	.word	0x0800f913
 800f540:	0800f663 	.word	0x0800f663
 800f544:	0800f913 	.word	0x0800f913
 800f548:	0800f677 	.word	0x0800f677
		case 1:                             /* Process UTC time */
			gh->p.data.gga.hours = 10 * CTN(gh->p.term_str[0]) + CTN(gh->p.term_str[1]);
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f552:	3b30      	subs	r3, #48	; 0x30
 800f554:	b2db      	uxtb	r3, r3
 800f556:	461a      	mov	r2, r3
 800f558:	0092      	lsls	r2, r2, #2
 800f55a:	4413      	add	r3, r2
 800f55c:	005b      	lsls	r3, r3, #1
 800f55e:	b2da      	uxtb	r2, r3
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800f566:	4413      	add	r3, r2
 800f568:	b2db      	uxtb	r3, r3
 800f56a:	3b30      	subs	r3, #48	; 0x30
 800f56c:	b2da      	uxtb	r2, r3
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
			gh->p.data.gga.minutes = 10 * CTN(gh->p.term_str[2]) + CTN(gh->p.term_str[3]);
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800f57a:	3b30      	subs	r3, #48	; 0x30
 800f57c:	b2db      	uxtb	r3, r3
 800f57e:	461a      	mov	r2, r3
 800f580:	0092      	lsls	r2, r2, #2
 800f582:	4413      	add	r3, r2
 800f584:	005b      	lsls	r3, r3, #1
 800f586:	b2da      	uxtb	r2, r3
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800f58e:	4413      	add	r3, r2
 800f590:	b2db      	uxtb	r3, r3
 800f592:	3b30      	subs	r3, #48	; 0x30
 800f594:	b2da      	uxtb	r2, r3
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
			gh->p.data.gga.seconds = 10 * CTN(gh->p.term_str[4]) + CTN(gh->p.term_str[5]);
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800f5a2:	3b30      	subs	r3, #48	; 0x30
 800f5a4:	b2db      	uxtb	r3, r3
 800f5a6:	461a      	mov	r2, r3
 800f5a8:	0092      	lsls	r2, r2, #2
 800f5aa:	4413      	add	r3, r2
 800f5ac:	005b      	lsls	r3, r3, #1
 800f5ae:	b2da      	uxtb	r2, r3
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800f5b6:	4413      	add	r3, r2
 800f5b8:	b2db      	uxtb	r3, r3
 800f5ba:	3b30      	subs	r3, #48	; 0x30
 800f5bc:	b2da      	uxtb	r2, r3
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
			break;
 800f5c4:	e1b2      	b.n	800f92c <parse_term+0x520>
		case 2:                             /* Latitude */
			gh->p.data.gga.latitude = parse_lat_long(gh);   /* Parse latitude */
 800f5c6:	6878      	ldr	r0, [r7, #4]
 800f5c8:	f7ff fede 	bl	800f388 <parse_lat_long>
 800f5cc:	eef0 7a40 	vmov.f32	s15, s0
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
			break;
 800f5d6:	e1a9      	b.n	800f92c <parse_term+0x520>
		case 3:                             /* Latitude north/south information */
			if (gh->p.term_str[0] == 'S' || gh->p.term_str[0] == 's') {
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f5de:	2b53      	cmp	r3, #83	; 0x53
 800f5e0:	d005      	beq.n	800f5ee <parse_term+0x1e2>
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f5e8:	2b73      	cmp	r3, #115	; 0x73
 800f5ea:	f040 8194 	bne.w	800f916 <parse_term+0x50a>
				gh->p.data.gga.latitude = -gh->p.data.gga.latitude;
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800f5f4:	eef1 7a67 	vneg.f32	s15, s15
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
			}
			break;
 800f5fe:	e18a      	b.n	800f916 <parse_term+0x50a>
		case 4:                             /* Longitude */
			gh->p.data.gga.longitude = parse_lat_long(gh);  /* Parse longitude */
 800f600:	6878      	ldr	r0, [r7, #4]
 800f602:	f7ff fec1 	bl	800f388 <parse_lat_long>
 800f606:	eef0 7a40 	vmov.f32	s15, s0
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
			break;
 800f610:	e18c      	b.n	800f92c <parse_term+0x520>
		case 5:                             /* Longitude east/west information */
			if (gh->p.term_str[0] == 'W' || gh->p.term_str[0] == 'w') {
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f618:	2b57      	cmp	r3, #87	; 0x57
 800f61a:	d005      	beq.n	800f628 <parse_term+0x21c>
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f622:	2b77      	cmp	r3, #119	; 0x77
 800f624:	f040 8179 	bne.w	800f91a <parse_term+0x50e>
				gh->p.data.gga.longitude = -gh->p.data.gga.longitude;
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 800f62e:	eef1 7a67 	vneg.f32	s15, s15
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
			}
			break;
 800f638:	e16f      	b.n	800f91a <parse_term+0x50e>
		case 6:                             /* Fix status */
			gh->p.data.gga.fix = (uint8_t)parse_number(gh, NULL);
 800f63a:	2100      	movs	r1, #0
 800f63c:	6878      	ldr	r0, [r7, #4]
 800f63e:	f7ff fe35 	bl	800f2ac <parse_number>
 800f642:	4603      	mov	r3, r0
 800f644:	b2da      	uxtb	r2, r3
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
			break;
 800f64c:	e16e      	b.n	800f92c <parse_term+0x520>
		case 7:                             /* Satellites in use */
			gh->p.data.gga.sats_in_use = (uint8_t)parse_number(gh, NULL);
 800f64e:	2100      	movs	r1, #0
 800f650:	6878      	ldr	r0, [r7, #4]
 800f652:	f7ff fe2b 	bl	800f2ac <parse_number>
 800f656:	4603      	mov	r3, r0
 800f658:	b2da      	uxtb	r2, r3
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
			break;
 800f660:	e164      	b.n	800f92c <parse_term+0x520>
		case 9:                             /* Altitude */
			gh->p.data.gga.altitude = parse_float_number(gh, NULL);
 800f662:	2100      	movs	r1, #0
 800f664:	6878      	ldr	r0, [r7, #4]
 800f666:	f7ff fe6b 	bl	800f340 <parse_float_number>
 800f66a:	eef0 7a40 	vmov.f32	s15, s0
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
			break;
 800f674:	e15a      	b.n	800f92c <parse_term+0x520>
		case 11:                            /* Altitude above ellipsoid */
			gh->p.data.gga.geo_sep = parse_float_number(gh, NULL);
 800f676:	2100      	movs	r1, #0
 800f678:	6878      	ldr	r0, [r7, #4]
 800f67a:	f7ff fe61 	bl	800f340 <parse_float_number>
 800f67e:	eef0 7a40 	vmov.f32	s15, s0
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
			break;
 800f688:	e150      	b.n	800f92c <parse_term+0x520>
		default: break;
		}
#endif /* GPS_CFG_STATEMENT_GPGGA */
#if GPS_CFG_STATEMENT_GPGSA
	} else if (gh->p.stat == STAT_GSA) {        /* Process GPGSA statement */
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f690:	2b02      	cmp	r3, #2
 800f692:	d17e      	bne.n	800f792 <parse_term+0x386>
		switch (gh->p.term_num) {
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800f69a:	3b02      	subs	r3, #2
 800f69c:	2b0f      	cmp	r3, #15
 800f69e:	d85b      	bhi.n	800f758 <parse_term+0x34c>
 800f6a0:	a201      	add	r2, pc, #4	; (adr r2, 800f6a8 <parse_term+0x29c>)
 800f6a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6a6:	bf00      	nop
 800f6a8:	0800f6e9 	.word	0x0800f6e9
 800f6ac:	0800f759 	.word	0x0800f759
 800f6b0:	0800f759 	.word	0x0800f759
 800f6b4:	0800f759 	.word	0x0800f759
 800f6b8:	0800f759 	.word	0x0800f759
 800f6bc:	0800f759 	.word	0x0800f759
 800f6c0:	0800f759 	.word	0x0800f759
 800f6c4:	0800f759 	.word	0x0800f759
 800f6c8:	0800f759 	.word	0x0800f759
 800f6cc:	0800f759 	.word	0x0800f759
 800f6d0:	0800f759 	.word	0x0800f759
 800f6d4:	0800f759 	.word	0x0800f759
 800f6d8:	0800f759 	.word	0x0800f759
 800f6dc:	0800f6fd 	.word	0x0800f6fd
 800f6e0:	0800f711 	.word	0x0800f711
 800f6e4:	0800f725 	.word	0x0800f725
		case 2:                             /* Process fix mode */
			gh->p.data.gsa.fix_mode = (uint8_t)parse_number(gh, NULL);
 800f6e8:	2100      	movs	r1, #0
 800f6ea:	6878      	ldr	r0, [r7, #4]
 800f6ec:	f7ff fdde 	bl	800f2ac <parse_number>
 800f6f0:	4603      	mov	r3, r0
 800f6f2:	b2da      	uxtb	r2, r3
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
			break;
 800f6fa:	e117      	b.n	800f92c <parse_term+0x520>
		case 15:                            /* Process PDOP */
			gh->p.data.gsa.dop_p = parse_float_number(gh, NULL);
 800f6fc:	2100      	movs	r1, #0
 800f6fe:	6878      	ldr	r0, [r7, #4]
 800f700:	f7ff fe1e 	bl	800f340 <parse_float_number>
 800f704:	eef0 7a40 	vmov.f32	s15, s0
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
			break;
 800f70e:	e10d      	b.n	800f92c <parse_term+0x520>
		case 16:                            /* Process HDOP */
			gh->p.data.gsa.dop_h = parse_float_number(gh, NULL);
 800f710:	2100      	movs	r1, #0
 800f712:	6878      	ldr	r0, [r7, #4]
 800f714:	f7ff fe14 	bl	800f340 <parse_float_number>
 800f718:	eef0 7a40 	vmov.f32	s15, s0
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
			break;
 800f722:	e103      	b.n	800f92c <parse_term+0x520>
		case 17:                            /* Process VDOP */
			gh->p.data.gsa.dop_v = parse_float_number(gh, NULL);
 800f724:	2100      	movs	r1, #0
 800f726:	6878      	ldr	r0, [r7, #4]
 800f728:	f7ff fe0a 	bl	800f340 <parse_float_number>
 800f72c:	eef0 7a40 	vmov.f32	s15, s0
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
			break;
 800f736:	e0f9      	b.n	800f92c <parse_term+0x520>
 800f738:	08018c08 	.word	0x08018c08
 800f73c:	08018c10 	.word	0x08018c10
 800f740:	08018c18 	.word	0x08018c18
 800f744:	08018c20 	.word	0x08018c20
 800f748:	08018c28 	.word	0x08018c28
 800f74c:	08018c30 	.word	0x08018c30
 800f750:	08018c38 	.word	0x08018c38
 800f754:	08018c40 	.word	0x08018c40
		default:
			/* Parse satellite IDs */
			if (gh->p.term_num >= 3 && gh->p.term_num <= 14) {
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800f75e:	2b02      	cmp	r3, #2
 800f760:	f240 80dd 	bls.w	800f91e <parse_term+0x512>
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800f76a:	2b0e      	cmp	r3, #14
 800f76c:	f200 80d7 	bhi.w	800f91e <parse_term+0x512>
				gh->p.data.gsa.satellites_ids[gh->p.term_num - 3] = (uint8_t)parse_number(gh, NULL);
 800f770:	2100      	movs	r1, #0
 800f772:	6878      	ldr	r0, [r7, #4]
 800f774:	f7ff fd9a 	bl	800f2ac <parse_number>
 800f778:	4602      	mov	r2, r0
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800f780:	3b03      	subs	r3, #3
 800f782:	b2d1      	uxtb	r1, r2
 800f784:	687a      	ldr	r2, [r7, #4]
 800f786:	4413      	add	r3, r2
 800f788:	460a      	mov	r2, r1
 800f78a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
			}
			break;
 800f78e:	bf00      	nop
 800f790:	e0c5      	b.n	800f91e <parse_term+0x512>
		}
#endif /* GPS_CFG_STATEMENT_GPGSA */
#if GPS_CFG_STATEMENT_GPGSV
	} else if (gh->p.stat == STAT_GSV) {        /* Process GPGSV statement */
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f798:	2b03      	cmp	r3, #3
 800f79a:	d11b      	bne.n	800f7d4 <parse_term+0x3c8>
		switch (gh->p.term_num) {
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800f7a2:	2b02      	cmp	r3, #2
 800f7a4:	d002      	beq.n	800f7ac <parse_term+0x3a0>
 800f7a6:	2b03      	cmp	r3, #3
 800f7a8:	d00a      	beq.n	800f7c0 <parse_term+0x3b4>
					default: break;
					}
				}
			}
#endif /* GPS_CFG_STATEMENT_GPGSV_SAT_DET */
			break;
 800f7aa:	e0bf      	b.n	800f92c <parse_term+0x520>
			gh->p.data.gsv.stat_num = (uint8_t)parse_number(gh, NULL);
 800f7ac:	2100      	movs	r1, #0
 800f7ae:	6878      	ldr	r0, [r7, #4]
 800f7b0:	f7ff fd7c 	bl	800f2ac <parse_number>
 800f7b4:	4603      	mov	r3, r0
 800f7b6:	b2da      	uxtb	r2, r3
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			break;
 800f7be:	e0b5      	b.n	800f92c <parse_term+0x520>
			gh->p.data.gsv.sats_in_view = (uint8_t)parse_number(gh, NULL);
 800f7c0:	2100      	movs	r1, #0
 800f7c2:	6878      	ldr	r0, [r7, #4]
 800f7c4:	f7ff fd72 	bl	800f2ac <parse_number>
 800f7c8:	4603      	mov	r3, r0
 800f7ca:	b2da      	uxtb	r2, r3
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			break;
 800f7d2:	e0ab      	b.n	800f92c <parse_term+0x520>
		}
#endif /* GPS_CFG_STATEMENT_GPGSV */
#if GPS_CFG_STATEMENT_GPRMC
	} else if (gh->p.stat == STAT_RMC) {        /* Process GPRMC statement */
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f7da:	2b04      	cmp	r3, #4
 800f7dc:	f040 80a1 	bne.w	800f922 <parse_term+0x516>
		switch (gh->p.term_num) {
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800f7e6:	3b02      	subs	r3, #2
 800f7e8:	2b09      	cmp	r3, #9
 800f7ea:	f200 809c 	bhi.w	800f926 <parse_term+0x51a>
 800f7ee:	a201      	add	r2, pc, #4	; (adr r2, 800f7f4 <parse_term+0x3e8>)
 800f7f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7f4:	0800f81d 	.word	0x0800f81d
 800f7f8:	0800f927 	.word	0x0800f927
 800f7fc:	0800f927 	.word	0x0800f927
 800f800:	0800f927 	.word	0x0800f927
 800f804:	0800f927 	.word	0x0800f927
 800f808:	0800f837 	.word	0x0800f837
 800f80c:	0800f84b 	.word	0x0800f84b
 800f810:	0800f85f 	.word	0x0800f85f
 800f814:	0800f8d9 	.word	0x0800f8d9
 800f818:	0800f8ed 	.word	0x0800f8ed
		case 2:                             /* Process valid status */
			gh->p.data.rmc.is_valid = (gh->p.term_str[0] == 'A');
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f822:	2b41      	cmp	r3, #65	; 0x41
 800f824:	bf0c      	ite	eq
 800f826:	2301      	moveq	r3, #1
 800f828:	2300      	movne	r3, #0
 800f82a:	b2db      	uxtb	r3, r3
 800f82c:	461a      	mov	r2, r3
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			break;
 800f834:	e07a      	b.n	800f92c <parse_term+0x520>
		case 7:                             /* Process ground speed in knots */
			gh->p.data.rmc.speed = parse_float_number(gh, NULL);
 800f836:	2100      	movs	r1, #0
 800f838:	6878      	ldr	r0, [r7, #4]
 800f83a:	f7ff fd81 	bl	800f340 <parse_float_number>
 800f83e:	eef0 7a40 	vmov.f32	s15, s0
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
			break;
 800f848:	e070      	b.n	800f92c <parse_term+0x520>
		case 8:                             /* Process true ground coarse */
			gh->p.data.rmc.coarse = parse_float_number(gh, NULL);
 800f84a:	2100      	movs	r1, #0
 800f84c:	6878      	ldr	r0, [r7, #4]
 800f84e:	f7ff fd77 	bl	800f340 <parse_float_number>
 800f852:	eef0 7a40 	vmov.f32	s15, s0
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
			break;
 800f85c:	e066      	b.n	800f92c <parse_term+0x520>
		case 9:                             /* Process date */
			gh->p.data.rmc.date = (uint8_t)(10 * CTN(gh->p.term_str[0]) + CTN(gh->p.term_str[1]));
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f864:	3b30      	subs	r3, #48	; 0x30
 800f866:	b2db      	uxtb	r3, r3
 800f868:	461a      	mov	r2, r3
 800f86a:	0092      	lsls	r2, r2, #2
 800f86c:	4413      	add	r3, r2
 800f86e:	005b      	lsls	r3, r3, #1
 800f870:	b2da      	uxtb	r2, r3
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800f878:	4413      	add	r3, r2
 800f87a:	b2db      	uxtb	r3, r3
 800f87c:	3b30      	subs	r3, #48	; 0x30
 800f87e:	b2da      	uxtb	r2, r3
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			gh->p.data.rmc.month = (uint8_t)(10 * CTN(gh->p.term_str[2]) + CTN(gh->p.term_str[3]));
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800f88c:	3b30      	subs	r3, #48	; 0x30
 800f88e:	b2db      	uxtb	r3, r3
 800f890:	461a      	mov	r2, r3
 800f892:	0092      	lsls	r2, r2, #2
 800f894:	4413      	add	r3, r2
 800f896:	005b      	lsls	r3, r3, #1
 800f898:	b2da      	uxtb	r2, r3
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800f8a0:	4413      	add	r3, r2
 800f8a2:	b2db      	uxtb	r3, r3
 800f8a4:	3b30      	subs	r3, #48	; 0x30
 800f8a6:	b2da      	uxtb	r2, r3
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
			gh->p.data.rmc.year = (uint8_t)(10 * CTN(gh->p.term_str[4]) + CTN(gh->p.term_str[5]));
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800f8b4:	3b30      	subs	r3, #48	; 0x30
 800f8b6:	b2db      	uxtb	r3, r3
 800f8b8:	461a      	mov	r2, r3
 800f8ba:	0092      	lsls	r2, r2, #2
 800f8bc:	4413      	add	r3, r2
 800f8be:	005b      	lsls	r3, r3, #1
 800f8c0:	b2da      	uxtb	r2, r3
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800f8c8:	4413      	add	r3, r2
 800f8ca:	b2db      	uxtb	r3, r3
 800f8cc:	3b30      	subs	r3, #48	; 0x30
 800f8ce:	b2da      	uxtb	r2, r3
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
			break;
 800f8d6:	e029      	b.n	800f92c <parse_term+0x520>
		case 10:                            /* Process magnetic variation */
			gh->p.data.rmc.variation = parse_float_number(gh, NULL);
 800f8d8:	2100      	movs	r1, #0
 800f8da:	6878      	ldr	r0, [r7, #4]
 800f8dc:	f7ff fd30 	bl	800f340 <parse_float_number>
 800f8e0:	eef0 7a40 	vmov.f32	s15, s0
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
			break;
 800f8ea:	e01f      	b.n	800f92c <parse_term+0x520>
		case 11:                            /* Process magnetic variation east/west */
			if (gh->p.term_str[0] == 'W' || gh->p.term_str[0] == 'w') {
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f8f2:	2b57      	cmp	r3, #87	; 0x57
 800f8f4:	d004      	beq.n	800f900 <parse_term+0x4f4>
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f8fc:	2b77      	cmp	r3, #119	; 0x77
 800f8fe:	d114      	bne.n	800f92a <parse_term+0x51e>
				gh->p.data.rmc.variation = -gh->p.data.rmc.variation;
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 800f906:	eef1 7a67 	vneg.f32	s15, s15
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
			}
			break;
 800f910:	e00b      	b.n	800f92a <parse_term+0x51e>
		default: break;
 800f912:	bf00      	nop
 800f914:	e00a      	b.n	800f92c <parse_term+0x520>
			break;
 800f916:	bf00      	nop
 800f918:	e008      	b.n	800f92c <parse_term+0x520>
			break;
 800f91a:	bf00      	nop
 800f91c:	e006      	b.n	800f92c <parse_term+0x520>
			break;
 800f91e:	bf00      	nop
 800f920:	e004      	b.n	800f92c <parse_term+0x520>
		default: break;
		}
#endif /* GPS_CFG_STATEMENT_GPRMC */
	}
 800f922:	bf00      	nop
 800f924:	e002      	b.n	800f92c <parse_term+0x520>
		default: break;
 800f926:	bf00      	nop
 800f928:	e000      	b.n	800f92c <parse_term+0x520>
			break;
 800f92a:	bf00      	nop
	return 1;
 800f92c:	2301      	movs	r3, #1
}
 800f92e:	4618      	mov	r0, r3
 800f930:	3708      	adds	r7, #8
 800f932:	46bd      	mov	sp, r7
 800f934:	bd80      	pop	{r7, pc}
 800f936:	bf00      	nop

0800f938 <check_crc>:
 * \brief           Compare calculated CRC with received CRC
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
check_crc(gps_t* gh) {
 800f938:	b480      	push	{r7}
 800f93a:	b085      	sub	sp, #20
 800f93c:	af00      	add	r7, sp, #0
 800f93e:	6078      	str	r0, [r7, #4]
	uint8_t crc;
	crc = (uint8_t)((CHTN(gh->p.term_str[0]) & 0x0F) << 0x04) | (CHTN(gh->p.term_str[1]) & 0x0F);   /* Convert received CRC from string (hex) to number */
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f946:	2b2f      	cmp	r3, #47	; 0x2f
 800f948:	d90b      	bls.n	800f962 <check_crc+0x2a>
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f950:	2b39      	cmp	r3, #57	; 0x39
 800f952:	d806      	bhi.n	800f962 <check_crc+0x2a>
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f95a:	011b      	lsls	r3, r3, #4
 800f95c:	b2db      	uxtb	r3, r3
 800f95e:	b25a      	sxtb	r2, r3
 800f960:	e026      	b.n	800f9b0 <check_crc+0x78>
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f968:	2b60      	cmp	r3, #96	; 0x60
 800f96a:	d90d      	bls.n	800f988 <check_crc+0x50>
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f972:	2b7a      	cmp	r3, #122	; 0x7a
 800f974:	d808      	bhi.n	800f988 <check_crc+0x50>
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f97c:	3b57      	subs	r3, #87	; 0x57
 800f97e:	b2db      	uxtb	r3, r3
 800f980:	011b      	lsls	r3, r3, #4
 800f982:	b2db      	uxtb	r3, r3
 800f984:	b25a      	sxtb	r2, r3
 800f986:	e013      	b.n	800f9b0 <check_crc+0x78>
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f98e:	2b40      	cmp	r3, #64	; 0x40
 800f990:	d90d      	bls.n	800f9ae <check_crc+0x76>
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f998:	2b5a      	cmp	r3, #90	; 0x5a
 800f99a:	d808      	bhi.n	800f9ae <check_crc+0x76>
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f9a2:	3b37      	subs	r3, #55	; 0x37
 800f9a4:	b2db      	uxtb	r3, r3
 800f9a6:	011b      	lsls	r3, r3, #4
 800f9a8:	b2db      	uxtb	r3, r3
 800f9aa:	b25a      	sxtb	r2, r3
 800f9ac:	e000      	b.n	800f9b0 <check_crc+0x78>
 800f9ae:	2200      	movs	r2, #0
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800f9b6:	2b2f      	cmp	r3, #47	; 0x2f
 800f9b8:	d90c      	bls.n	800f9d4 <check_crc+0x9c>
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800f9c0:	2b39      	cmp	r3, #57	; 0x39
 800f9c2:	d807      	bhi.n	800f9d4 <check_crc+0x9c>
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800f9ca:	b25b      	sxtb	r3, r3
 800f9cc:	f003 030f 	and.w	r3, r3, #15
 800f9d0:	b25b      	sxtb	r3, r3
 800f9d2:	e028      	b.n	800fa26 <check_crc+0xee>
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800f9da:	2b60      	cmp	r3, #96	; 0x60
 800f9dc:	d90e      	bls.n	800f9fc <check_crc+0xc4>
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800f9e4:	2b7a      	cmp	r3, #122	; 0x7a
 800f9e6:	d809      	bhi.n	800f9fc <check_crc+0xc4>
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800f9ee:	3b57      	subs	r3, #87	; 0x57
 800f9f0:	b2db      	uxtb	r3, r3
 800f9f2:	b25b      	sxtb	r3, r3
 800f9f4:	f003 030f 	and.w	r3, r3, #15
 800f9f8:	b25b      	sxtb	r3, r3
 800f9fa:	e014      	b.n	800fa26 <check_crc+0xee>
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800fa02:	2b40      	cmp	r3, #64	; 0x40
 800fa04:	d90e      	bls.n	800fa24 <check_crc+0xec>
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800fa0c:	2b5a      	cmp	r3, #90	; 0x5a
 800fa0e:	d809      	bhi.n	800fa24 <check_crc+0xec>
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800fa16:	3b37      	subs	r3, #55	; 0x37
 800fa18:	b2db      	uxtb	r3, r3
 800fa1a:	b25b      	sxtb	r3, r3
 800fa1c:	f003 030f 	and.w	r3, r3, #15
 800fa20:	b25b      	sxtb	r3, r3
 800fa22:	e000      	b.n	800fa26 <check_crc+0xee>
 800fa24:	2300      	movs	r3, #0
 800fa26:	4313      	orrs	r3, r2
 800fa28:	b25b      	sxtb	r3, r3
 800fa2a:	73fb      	strb	r3, [r7, #15]
	return gh->p.crc_calc == crc;               /* They must match! */
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800fa32:	7bfa      	ldrb	r2, [r7, #15]
 800fa34:	429a      	cmp	r2, r3
 800fa36:	bf0c      	ite	eq
 800fa38:	2301      	moveq	r3, #1
 800fa3a:	2300      	movne	r3, #0
 800fa3c:	b2db      	uxtb	r3, r3
}
 800fa3e:	4618      	mov	r0, r3
 800fa40:	3714      	adds	r7, #20
 800fa42:	46bd      	mov	sp, r7
 800fa44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa48:	4770      	bx	lr

0800fa4a <copy_from_tmp_memory>:
 * \brief           Copy temporary memory to user memory
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
copy_from_tmp_memory(gps_t* gh) {
 800fa4a:	b580      	push	{r7, lr}
 800fa4c:	b082      	sub	sp, #8
 800fa4e:	af00      	add	r7, sp, #0
 800fa50:	6078      	str	r0, [r7, #4]
	if (0) {
#if GPS_CFG_STATEMENT_GPGGA
	} else if (gh->p.stat == STAT_GGA) {
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fa58:	2b01      	cmp	r3, #1
 800fa5a:	d129      	bne.n	800fab0 <copy_from_tmp_memory+0x66>
		gh->latitude = gh->p.data.gga.latitude;
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	601a      	str	r2, [r3, #0]
		gh->longitude = gh->p.data.gga.longitude;
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	605a      	str	r2, [r3, #4]
		gh->altitude = gh->p.data.gga.altitude;
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	609a      	str	r2, [r3, #8]
		gh->geo_sep = gh->p.data.gga.geo_sep;
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	60da      	str	r2, [r3, #12]
		gh->sats_in_use = gh->p.data.gga.sats_in_use;
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	741a      	strb	r2, [r3, #16]
		gh->fix = gh->p.data.gga.fix;
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	f893 2069 	ldrb.w	r2, [r3, #105]	; 0x69
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	745a      	strb	r2, [r3, #17]
		gh->hours = gh->p.data.gga.hours;
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	f893 206a 	ldrb.w	r2, [r3, #106]	; 0x6a
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	749a      	strb	r2, [r3, #18]
		gh->minutes = gh->p.data.gga.minutes;
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	f893 206b 	ldrb.w	r2, [r3, #107]	; 0x6b
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	74da      	strb	r2, [r3, #19]
		gh->seconds = gh->p.data.gga.seconds;
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	f893 206c 	ldrb.w	r2, [r3, #108]	; 0x6c
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	751a      	strb	r2, [r3, #20]
 800faae:	e055      	b.n	800fb5c <copy_from_tmp_memory+0x112>
#endif /* GPS_CFG_STATEMENT_GPGGA */
#if GPS_CFG_STATEMENT_GPGSA
	} else if (gh->p.stat == STAT_GSA) {
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fab6:	2b02      	cmp	r3, #2
 800fab8:	d11b      	bne.n	800faf2 <copy_from_tmp_memory+0xa8>
		gh->dop_h = gh->p.data.gsa.dop_h;
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	619a      	str	r2, [r3, #24]
		gh->dop_p = gh->p.data.gsa.dop_p;
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	621a      	str	r2, [r3, #32]
		gh->dop_v = gh->p.data.gsa.dop_v;
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	61da      	str	r2, [r3, #28]
		gh->fix_mode = gh->p.data.gsa.fix_mode;
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		memcpy(gh->satellites_ids, gh->p.data.gsa.satellites_ids, sizeof(gh->satellites_ids));
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	f103 0025 	add.w	r0, r3, #37	; 0x25
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	3365      	adds	r3, #101	; 0x65
 800fae8:	220c      	movs	r2, #12
 800faea:	4619      	mov	r1, r3
 800faec:	f005 fb3c 	bl	8015168 <memcpy>
 800faf0:	e034      	b.n	800fb5c <copy_from_tmp_memory+0x112>
#endif /* GPS_CFG_STATEMENT_GPGSA */
#if GPS_CFG_STATEMENT_GPGSV
	} else if (gh->p.stat == STAT_GSV) {
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800faf8:	2b03      	cmp	r3, #3
 800fafa:	d106      	bne.n	800fb0a <copy_from_tmp_memory+0xc0>
		gh->sats_in_view = gh->p.data.gsv.sats_in_view;
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800fb08:	e028      	b.n	800fb5c <copy_from_tmp_memory+0x112>
#endif /* GPS_CFG_STATEMENT_GPGSV */
#if GPS_CFG_STATEMENT_GPRMC
	} else if (gh->p.stat == STAT_RMC) {
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fb10:	2b04      	cmp	r3, #4
 800fb12:	d123      	bne.n	800fb5c <copy_from_tmp_memory+0x112>
		gh->coarse = gh->p.data.rmc.coarse;
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	639a      	str	r2, [r3, #56]	; 0x38
		gh->is_valid = gh->p.data.rmc.is_valid;
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
		gh->speed = gh->p.data.rmc.speed;
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	635a      	str	r2, [r3, #52]	; 0x34
		gh->variation = gh->p.data.rmc.variation;
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	63da      	str	r2, [r3, #60]	; 0x3c
		gh->date = gh->p.data.rmc.date;
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		gh->month = gh->p.data.rmc.month;
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	f893 205a 	ldrb.w	r2, [r3, #90]	; 0x5a
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
		gh->year = gh->p.data.rmc.year;
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	f893 205b 	ldrb.w	r2, [r3, #91]	; 0x5b
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
#endif /* GPS_CFG_STATEMENT_GPRMC */
	}
	return 1;
 800fb5c:	2301      	movs	r3, #1
}
 800fb5e:	4618      	mov	r0, r3
 800fb60:	3708      	adds	r7, #8
 800fb62:	46bd      	mov	sp, r7
 800fb64:	bd80      	pop	{r7, pc}

0800fb66 <gps_init>:
 * \brief           Init GPS handle
 * \param[in]       gh: GPS handle structure
 * \return          `1` on success, `0` otherwise
 */
uint8_t
gps_init(gps_t* gh) {
 800fb66:	b580      	push	{r7, lr}
 800fb68:	b082      	sub	sp, #8
 800fb6a:	af00      	add	r7, sp, #0
 800fb6c:	6078      	str	r0, [r7, #4]
	memset(gh, 0x00, sizeof(*gh));              /* Reset structure */
 800fb6e:	2274      	movs	r2, #116	; 0x74
 800fb70:	2100      	movs	r1, #0
 800fb72:	6878      	ldr	r0, [r7, #4]
 800fb74:	f005 fb03 	bl	801517e <memset>
	return 1;
 800fb78:	2301      	movs	r3, #1
}
 800fb7a:	4618      	mov	r0, r3
 800fb7c:	3708      	adds	r7, #8
 800fb7e:	46bd      	mov	sp, r7
 800fb80:	bd80      	pop	{r7, pc}

0800fb82 <gps_process>:
 * \param[in]       data: Received data
 * \param[in]       len: Number of bytes to process
 * \return          `1` on success, `0` otherwise
 */
uint8_t
gps_process(gps_t* gh, const void* data, size_t len) {
 800fb82:	b580      	push	{r7, lr}
 800fb84:	b086      	sub	sp, #24
 800fb86:	af00      	add	r7, sp, #0
 800fb88:	60f8      	str	r0, [r7, #12]
 800fb8a:	60b9      	str	r1, [r7, #8]
 800fb8c:	607a      	str	r2, [r7, #4]
	const uint8_t* d = data;
 800fb8e:	68bb      	ldr	r3, [r7, #8]
 800fb90:	617b      	str	r3, [r7, #20]

	while (len--) {                             /* Process all bytes */
 800fb92:	e0a4      	b.n	800fcde <gps_process+0x15c>
		if (*d == '$') {                        /* Check for beginning of NMEA line */
 800fb94:	697b      	ldr	r3, [r7, #20]
 800fb96:	781b      	ldrb	r3, [r3, #0]
 800fb98:	2b24      	cmp	r3, #36	; 0x24
 800fb9a:	d125      	bne.n	800fbe8 <gps_process+0x66>
			memset(&gh->p, 0x00, sizeof(gh->p));/* Reset private memory */
 800fb9c:	68fb      	ldr	r3, [r7, #12]
 800fb9e:	3344      	adds	r3, #68	; 0x44
 800fba0:	2230      	movs	r2, #48	; 0x30
 800fba2:	2100      	movs	r1, #0
 800fba4:	4618      	mov	r0, r3
 800fba6:	f005 faea 	bl	801517e <memset>
			TERM_ADD(gh, *d);                   /* Add character to term */
 800fbaa:	68fb      	ldr	r3, [r7, #12]
 800fbac:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800fbb0:	2b0b      	cmp	r3, #11
 800fbb2:	f200 8091 	bhi.w	800fcd8 <gps_process+0x156>
 800fbb6:	68fb      	ldr	r3, [r7, #12]
 800fbb8:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800fbbc:	1c5a      	adds	r2, r3, #1
 800fbbe:	b2d1      	uxtb	r1, r2
 800fbc0:	68fa      	ldr	r2, [r7, #12]
 800fbc2:	f882 1052 	strb.w	r1, [r2, #82]	; 0x52
 800fbc6:	4619      	mov	r1, r3
 800fbc8:	697b      	ldr	r3, [r7, #20]
 800fbca:	781a      	ldrb	r2, [r3, #0]
 800fbcc:	68fb      	ldr	r3, [r7, #12]
 800fbce:	440b      	add	r3, r1
 800fbd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fbd4:	68fb      	ldr	r3, [r7, #12]
 800fbd6:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800fbda:	461a      	mov	r2, r3
 800fbdc:	68fb      	ldr	r3, [r7, #12]
 800fbde:	4413      	add	r3, r2
 800fbe0:	2200      	movs	r2, #0
 800fbe2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fbe6:	e077      	b.n	800fcd8 <gps_process+0x156>
		} else if (*d == ',') {                 /* Term separator character */
 800fbe8:	697b      	ldr	r3, [r7, #20]
 800fbea:	781b      	ldrb	r3, [r3, #0]
 800fbec:	2b2c      	cmp	r3, #44	; 0x2c
 800fbee:	d11d      	bne.n	800fc2c <gps_process+0xaa>
			parse_term(gh);                     /* Parse term we have currently in memory */
 800fbf0:	68f8      	ldr	r0, [r7, #12]
 800fbf2:	f7ff fc0b 	bl	800f40c <parse_term>
			CRC_ADD(gh, *d);                    /* Add character to CRC computation */
 800fbf6:	68fb      	ldr	r3, [r7, #12]
 800fbf8:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 800fbfc:	697b      	ldr	r3, [r7, #20]
 800fbfe:	781b      	ldrb	r3, [r3, #0]
 800fc00:	4053      	eors	r3, r2
 800fc02:	b2da      	uxtb	r2, r3
 800fc04:	68fb      	ldr	r3, [r7, #12]
 800fc06:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			TERM_NEXT(gh);                      /* Start with next term */
 800fc0a:	68fb      	ldr	r3, [r7, #12]
 800fc0c:	2200      	movs	r2, #0
 800fc0e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 800fc12:	68fb      	ldr	r3, [r7, #12]
 800fc14:	2200      	movs	r2, #0
 800fc16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fc1a:	68fb      	ldr	r3, [r7, #12]
 800fc1c:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800fc20:	3301      	adds	r3, #1
 800fc22:	b2da      	uxtb	r2, r3
 800fc24:	68fb      	ldr	r3, [r7, #12]
 800fc26:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 800fc2a:	e055      	b.n	800fcd8 <gps_process+0x156>
		} else if (*d == '*') {                 /* Start indicates end of data for CRC computation */
 800fc2c:	697b      	ldr	r3, [r7, #20]
 800fc2e:	781b      	ldrb	r3, [r3, #0]
 800fc30:	2b2a      	cmp	r3, #42	; 0x2a
 800fc32:	d117      	bne.n	800fc64 <gps_process+0xe2>
			parse_term(gh);                     /* Parse term we have currently in memory */
 800fc34:	68f8      	ldr	r0, [r7, #12]
 800fc36:	f7ff fbe9 	bl	800f40c <parse_term>
			gh->p.star = 1;                     /* STAR detected */
 800fc3a:	68fb      	ldr	r3, [r7, #12]
 800fc3c:	2201      	movs	r2, #1
 800fc3e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			TERM_NEXT(gh);                      /* Start with next term */
 800fc42:	68fb      	ldr	r3, [r7, #12]
 800fc44:	2200      	movs	r2, #0
 800fc46:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 800fc4a:	68fb      	ldr	r3, [r7, #12]
 800fc4c:	2200      	movs	r2, #0
 800fc4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fc52:	68fb      	ldr	r3, [r7, #12]
 800fc54:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800fc58:	3301      	adds	r3, #1
 800fc5a:	b2da      	uxtb	r2, r3
 800fc5c:	68fb      	ldr	r3, [r7, #12]
 800fc5e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 800fc62:	e039      	b.n	800fcd8 <gps_process+0x156>
		} else if (*d == '\r') {
 800fc64:	697b      	ldr	r3, [r7, #20]
 800fc66:	781b      	ldrb	r3, [r3, #0]
 800fc68:	2b0d      	cmp	r3, #13
 800fc6a:	d109      	bne.n	800fc80 <gps_process+0xfe>
			if (check_crc(gh)) {                /* Check for CRC result */
 800fc6c:	68f8      	ldr	r0, [r7, #12]
 800fc6e:	f7ff fe63 	bl	800f938 <check_crc>
 800fc72:	4603      	mov	r3, r0
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	d02f      	beq.n	800fcd8 <gps_process+0x156>
				/* CRC is OK, in theory we can copy data from statements to user data */
				copy_from_tmp_memory(gh);       /* Copy memory from temporary to user memory */
 800fc78:	68f8      	ldr	r0, [r7, #12]
 800fc7a:	f7ff fee6 	bl	800fa4a <copy_from_tmp_memory>
 800fc7e:	e02b      	b.n	800fcd8 <gps_process+0x156>
			}
		} else {
			if (!gh->p.star) {                  /* Add to CRC only if star not yet detected */
 800fc80:	68fb      	ldr	r3, [r7, #12]
 800fc82:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d109      	bne.n	800fc9e <gps_process+0x11c>
				CRC_ADD(gh, *d);                /* Add to CRC */
 800fc8a:	68fb      	ldr	r3, [r7, #12]
 800fc8c:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 800fc90:	697b      	ldr	r3, [r7, #20]
 800fc92:	781b      	ldrb	r3, [r3, #0]
 800fc94:	4053      	eors	r3, r2
 800fc96:	b2da      	uxtb	r2, r3
 800fc98:	68fb      	ldr	r3, [r7, #12]
 800fc9a:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			TERM_ADD(gh, *d);                   /* Add character to term */
 800fc9e:	68fb      	ldr	r3, [r7, #12]
 800fca0:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800fca4:	2b0b      	cmp	r3, #11
 800fca6:	d817      	bhi.n	800fcd8 <gps_process+0x156>
 800fca8:	68fb      	ldr	r3, [r7, #12]
 800fcaa:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800fcae:	1c5a      	adds	r2, r3, #1
 800fcb0:	b2d1      	uxtb	r1, r2
 800fcb2:	68fa      	ldr	r2, [r7, #12]
 800fcb4:	f882 1052 	strb.w	r1, [r2, #82]	; 0x52
 800fcb8:	4619      	mov	r1, r3
 800fcba:	697b      	ldr	r3, [r7, #20]
 800fcbc:	781a      	ldrb	r2, [r3, #0]
 800fcbe:	68fb      	ldr	r3, [r7, #12]
 800fcc0:	440b      	add	r3, r1
 800fcc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fcc6:	68fb      	ldr	r3, [r7, #12]
 800fcc8:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800fccc:	461a      	mov	r2, r3
 800fcce:	68fb      	ldr	r3, [r7, #12]
 800fcd0:	4413      	add	r3, r2
 800fcd2:	2200      	movs	r2, #0
 800fcd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
		}
		d++;                                    /* Process next character */
 800fcd8:	697b      	ldr	r3, [r7, #20]
 800fcda:	3301      	adds	r3, #1
 800fcdc:	617b      	str	r3, [r7, #20]
	while (len--) {                             /* Process all bytes */
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	1e5a      	subs	r2, r3, #1
 800fce2:	607a      	str	r2, [r7, #4]
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	f47f af55 	bne.w	800fb94 <gps_process+0x12>
	}
	return 1;
 800fcea:	2301      	movs	r3, #1
}
 800fcec:	4618      	mov	r0, r3
 800fcee:	3718      	adds	r7, #24
 800fcf0:	46bd      	mov	sp, r7
 800fcf2:	bd80      	pop	{r7, pc}

0800fcf4 <gps_to_speed>:
 * \param[in]       sik: Speed in knots, received from GPS NMEA statement
 * \param[in]       ts: Target speed to convert to from knots
 * \return          Speed calculated from knots
 */
gps_float_t
gps_to_speed(gps_float_t sik, gps_speed_t ts) {
 800fcf4:	b480      	push	{r7}
 800fcf6:	b083      	sub	sp, #12
 800fcf8:	af00      	add	r7, sp, #0
 800fcfa:	ed87 0a01 	vstr	s0, [r7, #4]
 800fcfe:	4603      	mov	r3, r0
 800fd00:	70fb      	strb	r3, [r7, #3]
	switch (ts) {
 800fd02:	78fb      	ldrb	r3, [r7, #3]
 800fd04:	2b0e      	cmp	r3, #14
 800fd06:	f200 8086 	bhi.w	800fe16 <gps_to_speed+0x122>
 800fd0a:	a201      	add	r2, pc, #4	; (adr r2, 800fd10 <gps_to_speed+0x1c>)
 800fd0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd10:	0800fd4d 	.word	0x0800fd4d
 800fd14:	0800fd5b 	.word	0x0800fd5b
 800fd18:	0800fd69 	.word	0x0800fd69
 800fd1c:	0800fd77 	.word	0x0800fd77
 800fd20:	0800fd85 	.word	0x0800fd85
 800fd24:	0800fd93 	.word	0x0800fd93
 800fd28:	0800fda1 	.word	0x0800fda1
 800fd2c:	0800fdaf 	.word	0x0800fdaf
 800fd30:	0800fdbd 	.word	0x0800fdbd
 800fd34:	0800fdcb 	.word	0x0800fdcb
 800fd38:	0800fdd9 	.word	0x0800fdd9
 800fd3c:	0800fde7 	.word	0x0800fde7
 800fd40:	0800fdf5 	.word	0x0800fdf5
 800fd44:	0800fe03 	.word	0x0800fe03
 800fd48:	0800fe11 	.word	0x0800fe11
	case gps_speed_kps:     return FLT(sik * FLT(0.000514));
 800fd4c:	edd7 7a01 	vldr	s15, [r7, #4]
 800fd50:	ed9f 7a35 	vldr	s14, [pc, #212]	; 800fe28 <gps_to_speed+0x134>
 800fd54:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fd58:	e05f      	b.n	800fe1a <gps_to_speed+0x126>
	case gps_speed_kph:     return FLT(sik * FLT(1.852));
 800fd5a:	edd7 7a01 	vldr	s15, [r7, #4]
 800fd5e:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800fe2c <gps_to_speed+0x138>
 800fd62:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fd66:	e058      	b.n	800fe1a <gps_to_speed+0x126>
	case gps_speed_mps:     return FLT(sik * FLT(0.5144));
 800fd68:	edd7 7a01 	vldr	s15, [r7, #4]
 800fd6c:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800fe30 <gps_to_speed+0x13c>
 800fd70:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fd74:	e051      	b.n	800fe1a <gps_to_speed+0x126>
	case gps_speed_mpm:     return FLT(sik * FLT(30.87));
 800fd76:	edd7 7a01 	vldr	s15, [r7, #4]
 800fd7a:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 800fe34 <gps_to_speed+0x140>
 800fd7e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fd82:	e04a      	b.n	800fe1a <gps_to_speed+0x126>

	case gps_speed_mips:    return FLT(sik * FLT(0.0003197));
 800fd84:	edd7 7a01 	vldr	s15, [r7, #4]
 800fd88:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 800fe38 <gps_to_speed+0x144>
 800fd8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fd90:	e043      	b.n	800fe1a <gps_to_speed+0x126>
	case gps_speed_mph:     return FLT(sik * FLT(1.151));
 800fd92:	edd7 7a01 	vldr	s15, [r7, #4]
 800fd96:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800fe3c <gps_to_speed+0x148>
 800fd9a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fd9e:	e03c      	b.n	800fe1a <gps_to_speed+0x126>
	case gps_speed_fps:     return FLT(sik * FLT(1.688));
 800fda0:	edd7 7a01 	vldr	s15, [r7, #4]
 800fda4:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800fe40 <gps_to_speed+0x14c>
 800fda8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fdac:	e035      	b.n	800fe1a <gps_to_speed+0x126>
	case gps_speed_fpm:     return FLT(sik * FLT(101.3));
 800fdae:	edd7 7a01 	vldr	s15, [r7, #4]
 800fdb2:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800fe44 <gps_to_speed+0x150>
 800fdb6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fdba:	e02e      	b.n	800fe1a <gps_to_speed+0x126>

	case gps_speed_mpk:     return FLT(sik * FLT(32.4));
 800fdbc:	edd7 7a01 	vldr	s15, [r7, #4]
 800fdc0:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800fe48 <gps_to_speed+0x154>
 800fdc4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fdc8:	e027      	b.n	800fe1a <gps_to_speed+0x126>
	case gps_speed_spk:     return FLT(sik * FLT(1944.0));
 800fdca:	edd7 7a01 	vldr	s15, [r7, #4]
 800fdce:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800fe4c <gps_to_speed+0x158>
 800fdd2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fdd6:	e020      	b.n	800fe1a <gps_to_speed+0x126>
	case gps_speed_sp100m:  return FLT(sik * FLT(194.4));
 800fdd8:	edd7 7a01 	vldr	s15, [r7, #4]
 800fddc:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800fe50 <gps_to_speed+0x15c>
 800fde0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fde4:	e019      	b.n	800fe1a <gps_to_speed+0x126>
	case gps_speed_mipm:    return FLT(sik * FLT(52.14));
 800fde6:	edd7 7a01 	vldr	s15, [r7, #4]
 800fdea:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800fe54 <gps_to_speed+0x160>
 800fdee:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fdf2:	e012      	b.n	800fe1a <gps_to_speed+0x126>
	case gps_speed_spm:     return FLT(sik * FLT(3128.0));
 800fdf4:	edd7 7a01 	vldr	s15, [r7, #4]
 800fdf8:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800fe58 <gps_to_speed+0x164>
 800fdfc:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fe00:	e00b      	b.n	800fe1a <gps_to_speed+0x126>
	case gps_speed_sp100y:  return FLT(sik * FLT(177.7));
 800fe02:	edd7 7a01 	vldr	s15, [r7, #4]
 800fe06:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800fe5c <gps_to_speed+0x168>
 800fe0a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fe0e:	e004      	b.n	800fe1a <gps_to_speed+0x126>

	case gps_speed_smph:    return FLT(sik * FLT(1.0));
 800fe10:	edd7 7a01 	vldr	s15, [r7, #4]
 800fe14:	e001      	b.n	800fe1a <gps_to_speed+0x126>
	default: return 0;
 800fe16:	eddf 7a12 	vldr	s15, [pc, #72]	; 800fe60 <gps_to_speed+0x16c>
	}
}
 800fe1a:	eeb0 0a67 	vmov.f32	s0, s15
 800fe1e:	370c      	adds	r7, #12
 800fe20:	46bd      	mov	sp, r7
 800fe22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe26:	4770      	bx	lr
 800fe28:	3a06bdf5 	.word	0x3a06bdf5
 800fe2c:	3fed0e56 	.word	0x3fed0e56
 800fe30:	3f03afb8 	.word	0x3f03afb8
 800fe34:	41f6f5c3 	.word	0x41f6f5c3
 800fe38:	39a79d68 	.word	0x39a79d68
 800fe3c:	3f9353f8 	.word	0x3f9353f8
 800fe40:	3fd81062 	.word	0x3fd81062
 800fe44:	42ca999a 	.word	0x42ca999a
 800fe48:	4201999a 	.word	0x4201999a
 800fe4c:	44f30000 	.word	0x44f30000
 800fe50:	43426666 	.word	0x43426666
 800fe54:	42508f5c 	.word	0x42508f5c
 800fe58:	45438000 	.word	0x45438000
 800fe5c:	4331b333 	.word	0x4331b333
 800fe60:	00000000 	.word	0x00000000

0800fe64 <ce_set>:
static const uint8_t tx_address[5] = { 0, 0, 0, 0, 1 };
static const uint8_t rx_address[5] = { 0, 0, 0, 0, 2 };

nrf24l01 nrf;

static void ce_set(nrf24l01* dev) {
 800fe64:	b580      	push	{r7, lr}
 800fe66:	b082      	sub	sp, #8
 800fe68:	af00      	add	r7, sp, #0
 800fe6a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(dev->config.ce_port, dev->config.ce_pin, GPIO_PIN_SET);
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fe74:	2201      	movs	r2, #1
 800fe76:	4619      	mov	r1, r3
 800fe78:	f7f3 f9a0 	bl	80031bc <HAL_GPIO_WritePin>
}
 800fe7c:	bf00      	nop
 800fe7e:	3708      	adds	r7, #8
 800fe80:	46bd      	mov	sp, r7
 800fe82:	bd80      	pop	{r7, pc}

0800fe84 <ce_reset>:

static void ce_reset(nrf24l01* dev) {
 800fe84:	b580      	push	{r7, lr}
 800fe86:	b082      	sub	sp, #8
 800fe88:	af00      	add	r7, sp, #0
 800fe8a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(dev->config.ce_port, dev->config.ce_pin, GPIO_PIN_RESET);
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fe94:	2200      	movs	r2, #0
 800fe96:	4619      	mov	r1, r3
 800fe98:	f7f3 f990 	bl	80031bc <HAL_GPIO_WritePin>
}
 800fe9c:	bf00      	nop
 800fe9e:	3708      	adds	r7, #8
 800fea0:	46bd      	mov	sp, r7
 800fea2:	bd80      	pop	{r7, pc}

0800fea4 <csn_set>:

static void csn_set(nrf24l01* dev) {
 800fea4:	b580      	push	{r7, lr}
 800fea6:	b082      	sub	sp, #8
 800fea8:	af00      	add	r7, sp, #0
 800feaa:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(dev->config.csn_port, dev->config.csn_pin, GPIO_PIN_SET);
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	69d8      	ldr	r0, [r3, #28]
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	8c1b      	ldrh	r3, [r3, #32]
 800feb4:	2201      	movs	r2, #1
 800feb6:	4619      	mov	r1, r3
 800feb8:	f7f3 f980 	bl	80031bc <HAL_GPIO_WritePin>
}
 800febc:	bf00      	nop
 800febe:	3708      	adds	r7, #8
 800fec0:	46bd      	mov	sp, r7
 800fec2:	bd80      	pop	{r7, pc}

0800fec4 <csn_reset>:

static void csn_reset(nrf24l01* dev) {
 800fec4:	b580      	push	{r7, lr}
 800fec6:	b082      	sub	sp, #8
 800fec8:	af00      	add	r7, sp, #0
 800feca:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(dev->config.csn_port, dev->config.csn_pin, GPIO_PIN_RESET);
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	69d8      	ldr	r0, [r3, #28]
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	8c1b      	ldrh	r3, [r3, #32]
 800fed4:	2200      	movs	r2, #0
 800fed6:	4619      	mov	r1, r3
 800fed8:	f7f3 f970 	bl	80031bc <HAL_GPIO_WritePin>
}
 800fedc:	bf00      	nop
 800fede:	3708      	adds	r7, #8
 800fee0:	46bd      	mov	sp, r7
 800fee2:	bd80      	pop	{r7, pc}

0800fee4 <nrf_set_config>:

NRF_RESULT nrf_set_config(nrf24l01_config* config, uint32_t* rx_data, uint8_t payloadSize32) {
 800fee4:	b480      	push	{r7}
 800fee6:	b085      	sub	sp, #20
 800fee8:	af00      	add	r7, sp, #0
 800feea:	60f8      	str	r0, [r7, #12]
 800feec:	60b9      	str	r1, [r7, #8]
 800feee:	4613      	mov	r3, r2
 800fef0:	71fb      	strb	r3, [r7, #7]
	config->data_rate = NRF_DATA_RATE_250KBPS;
 800fef2:	68fb      	ldr	r3, [r7, #12]
 800fef4:	2201      	movs	r2, #1
 800fef6:	701a      	strb	r2, [r3, #0]
	config->tx_power = NRF_TX_PWR_0dBm;
 800fef8:	68fb      	ldr	r3, [r7, #12]
 800fefa:	2203      	movs	r2, #3
 800fefc:	705a      	strb	r2, [r3, #1]
	config->crc_width = NRF_CRC_WIDTH_1B;
 800fefe:	68fb      	ldr	r3, [r7, #12]
 800ff00:	2200      	movs	r2, #0
 800ff02:	709a      	strb	r2, [r3, #2]
	config->addr_width = NRF_ADDR_WIDTH_5;
 800ff04:	68fb      	ldr	r3, [r7, #12]
 800ff06:	2203      	movs	r2, #3
 800ff08:	70da      	strb	r2, [r3, #3]
	config->retransmit_count = 15;   // maximum is 15 times
 800ff0a:	68fb      	ldr	r3, [r7, #12]
 800ff0c:	220f      	movs	r2, #15
 800ff0e:	715a      	strb	r2, [r3, #5]
	config->retransmit_delay = 0x0F; // 4000us, LSB:250us
 800ff10:	68fb      	ldr	r3, [r7, #12]
 800ff12:	220f      	movs	r2, #15
 800ff14:	719a      	strb	r2, [r3, #6]
	config->rf_channel = 110;
 800ff16:	68fb      	ldr	r3, [r7, #12]
 800ff18:	226e      	movs	r2, #110	; 0x6e
 800ff1a:	71da      	strb	r2, [r3, #7]
	config->rx_address = rx_address;
 800ff1c:	68fb      	ldr	r3, [r7, #12]
 800ff1e:	4a17      	ldr	r2, [pc, #92]	; (800ff7c <nrf_set_config+0x98>)
 800ff20:	609a      	str	r2, [r3, #8]
	config->tx_address = tx_address;
 800ff22:	68fb      	ldr	r3, [r7, #12]
 800ff24:	4a16      	ldr	r2, [pc, #88]	; (800ff80 <nrf_set_config+0x9c>)
 800ff26:	60da      	str	r2, [r3, #12]
	config->payload_length = payloadSize32 * 4;    // maximum is 32 bytes
 800ff28:	79fb      	ldrb	r3, [r7, #7]
 800ff2a:	009b      	lsls	r3, r3, #2
 800ff2c:	b2da      	uxtb	r2, r3
 800ff2e:	68fb      	ldr	r3, [r7, #12]
 800ff30:	711a      	strb	r2, [r3, #4]
	config->rx_buffer = (uint8_t*) rx_data;
 800ff32:	68fb      	ldr	r3, [r7, #12]
 800ff34:	68ba      	ldr	r2, [r7, #8]
 800ff36:	611a      	str	r2, [r3, #16]

	config->spi = &hspi1;
 800ff38:	68fb      	ldr	r3, [r7, #12]
 800ff3a:	4a12      	ldr	r2, [pc, #72]	; (800ff84 <nrf_set_config+0xa0>)
 800ff3c:	615a      	str	r2, [r3, #20]
	config->spi_timeout = 100; // milliseconds
 800ff3e:	68fb      	ldr	r3, [r7, #12]
 800ff40:	2264      	movs	r2, #100	; 0x64
 800ff42:	619a      	str	r2, [r3, #24]
	config->csn_port = NRF24_CSN_GPIO_Port;
 800ff44:	68fb      	ldr	r3, [r7, #12]
 800ff46:	4a10      	ldr	r2, [pc, #64]	; (800ff88 <nrf_set_config+0xa4>)
 800ff48:	61da      	str	r2, [r3, #28]
	config->csn_pin = NRF24_CSN_Pin;
 800ff4a:	68fb      	ldr	r3, [r7, #12]
 800ff4c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800ff50:	841a      	strh	r2, [r3, #32]
	config->ce_port = NRF24_CE_GPIO_Port;
 800ff52:	68fb      	ldr	r3, [r7, #12]
 800ff54:	4a0d      	ldr	r2, [pc, #52]	; (800ff8c <nrf_set_config+0xa8>)
 800ff56:	625a      	str	r2, [r3, #36]	; 0x24
	config->ce_pin = NRF24_CE_Pin;
 800ff58:	68fb      	ldr	r3, [r7, #12]
 800ff5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800ff5e:	851a      	strh	r2, [r3, #40]	; 0x28
	config->irq_port = NRF24_IRQ_GPIO_Port;
 800ff60:	68fb      	ldr	r3, [r7, #12]
 800ff62:	4a0a      	ldr	r2, [pc, #40]	; (800ff8c <nrf_set_config+0xa8>)
 800ff64:	62da      	str	r2, [r3, #44]	; 0x2c
	config->irq_pin = NRF24_IRQ_Pin;
 800ff66:	68fb      	ldr	r3, [r7, #12]
 800ff68:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800ff6c:	861a      	strh	r2, [r3, #48]	; 0x30

	return NRF_OK;
 800ff6e:	2300      	movs	r3, #0
}
 800ff70:	4618      	mov	r0, r3
 800ff72:	3714      	adds	r7, #20
 800ff74:	46bd      	mov	sp, r7
 800ff76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff7a:	4770      	bx	lr
 800ff7c:	0802b2cc 	.word	0x0802b2cc
 800ff80:	0802b2c4 	.word	0x0802b2c4
 800ff84:	20008854 	.word	0x20008854
 800ff88:	40020000 	.word	0x40020000
 800ff8c:	40021000 	.word	0x40021000

0800ff90 <nrf_init>:

NRF_RESULT nrf_init(nrf24l01* dev, nrf24l01_config* config) {
 800ff90:	b5b0      	push	{r4, r5, r7, lr}
 800ff92:	b084      	sub	sp, #16
 800ff94:	af00      	add	r7, sp, #0
 800ff96:	6078      	str	r0, [r7, #4]
 800ff98:	6039      	str	r1, [r7, #0]
	dev->config = *config;
 800ff9a:	687a      	ldr	r2, [r7, #4]
 800ff9c:	683b      	ldr	r3, [r7, #0]
 800ff9e:	4614      	mov	r4, r2
 800ffa0:	461d      	mov	r5, r3
 800ffa2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ffa4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ffa6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ffa8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ffaa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ffac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ffae:	682b      	ldr	r3, [r5, #0]
 800ffb0:	6023      	str	r3, [r4, #0]

	// check hardware
	NRF_RESULT result;
	do {
		SWV_SendStrLn("NRF24 Init");
 800ffb2:	4847      	ldr	r0, [pc, #284]	; (80100d0 <nrf_init+0x140>)
 800ffb4:	f001 ff46 	bl	8011e44 <SWV_SendStrLn>
		result = nrf_check(&nrf);
 800ffb8:	4846      	ldr	r0, [pc, #280]	; (80100d4 <nrf_init+0x144>)
 800ffba:	f000 f88d 	bl	80100d8 <nrf_check>
 800ffbe:	4603      	mov	r3, r0
 800ffc0:	73fb      	strb	r3, [r7, #15]

		osDelay(1000);
 800ffc2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800ffc6:	f7f8 f970 	bl	80082aa <osDelay>
	} while (result == NRF_ERROR);
 800ffca:	7bfb      	ldrb	r3, [r7, #15]
 800ffcc:	2b01      	cmp	r3, #1
 800ffce:	d0f0      	beq.n	800ffb2 <nrf_init+0x22>

	ce_reset(dev);
 800ffd0:	6878      	ldr	r0, [r7, #4]
 800ffd2:	f7ff ff57 	bl	800fe84 <ce_reset>
	csn_reset(dev);
 800ffd6:	6878      	ldr	r0, [r7, #4]
 800ffd8:	f7ff ff74 	bl	800fec4 <csn_reset>

	nrf_power_up(dev, true);
 800ffdc:	2101      	movs	r1, #1
 800ffde:	6878      	ldr	r0, [r7, #4]
 800ffe0:	f000 fd7a 	bl	8010ad8 <nrf_power_up>

	uint8_t config_reg = 0;
 800ffe4:	2300      	movs	r3, #0
 800ffe6:	73bb      	strb	r3, [r7, #14]

	while ((config_reg & 2) == 0) { // wait for powerup
 800ffe8:	e006      	b.n	800fff8 <nrf_init+0x68>
		nrf_read_register(dev, NRF_CONFIG, &config_reg);
 800ffea:	f107 030e 	add.w	r3, r7, #14
 800ffee:	461a      	mov	r2, r3
 800fff0:	2100      	movs	r1, #0
 800fff2:	6878      	ldr	r0, [r7, #4]
 800fff4:	f000 fa3f 	bl	8010476 <nrf_read_register>
	while ((config_reg & 2) == 0) { // wait for powerup
 800fff8:	7bbb      	ldrb	r3, [r7, #14]
 800fffa:	f003 0302 	and.w	r3, r3, #2
 800fffe:	2b00      	cmp	r3, #0
 8010000:	d0f3      	beq.n	800ffea <nrf_init+0x5a>
	}

	// openWritingPipe
	nrf_set_rx_payload_width_p0(dev, dev->config.payload_length);
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	791b      	ldrb	r3, [r3, #4]
 8010006:	4619      	mov	r1, r3
 8010008:	6878      	ldr	r0, [r7, #4]
 801000a:	f000 fea5 	bl	8010d58 <nrf_set_rx_payload_width_p0>
	//	nrf_set_rx_payload_width_p1(dev, dev->config.payload_length);
	nrf_set_rx_address_p0(dev, dev->config.rx_address);
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	689b      	ldr	r3, [r3, #8]
 8010012:	4619      	mov	r1, r3
 8010014:	6878      	ldr	r0, [r7, #4]
 8010016:	f000 fe67 	bl	8010ce8 <nrf_set_rx_address_p0>
	//	nrf_set_rx_address_p1(dev, dev->config.rx_address);
	// openReadingPipe
	nrf_set_tx_address(dev, dev->config.tx_address);
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	68db      	ldr	r3, [r3, #12]
 801001e:	4619      	mov	r1, r3
 8010020:	6878      	ldr	r0, [r7, #4]
 8010022:	f000 fe7d 	bl	8010d20 <nrf_set_tx_address>
	// set interrupt
	nrf_enable_rx_data_ready_irq(dev, 1);
 8010026:	2101      	movs	r1, #1
 8010028:	6878      	ldr	r0, [r7, #4]
 801002a:	f000 fdbb 	bl	8010ba4 <nrf_enable_rx_data_ready_irq>
	nrf_enable_tx_data_sent_irq(dev, 1);
 801002e:	2101      	movs	r1, #1
 8010030:	6878      	ldr	r0, [r7, #4]
 8010032:	f000 fded 	bl	8010c10 <nrf_enable_tx_data_sent_irq>
	nrf_enable_max_retransmit_irq(dev, 1);
 8010036:	2101      	movs	r1, #1
 8010038:	6878      	ldr	r0, [r7, #4]
 801003a:	f000 fe1f 	bl	8010c7c <nrf_enable_max_retransmit_irq>
	// CRC
	nrf_enable_crc(dev, 1);
 801003e:	2101      	movs	r1, #1
 8010040:	6878      	ldr	r0, [r7, #4]
 8010042:	f000 fce0 	bl	8010a06 <nrf_enable_crc>
	nrf_set_crc_width(dev, dev->config.crc_width);
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	789b      	ldrb	r3, [r3, #2]
 801004a:	4619      	mov	r1, r3
 801004c:	6878      	ldr	r0, [r7, #4]
 801004e:	f000 fd0d 	bl	8010a6c <nrf_set_crc_width>
	// address width
	nrf_set_address_width(dev, dev->config.addr_width);
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	78db      	ldrb	r3, [r3, #3]
 8010056:	4619      	mov	r1, r3
 8010058:	6878      	ldr	r0, [r7, #4]
 801005a:	f000 fc5c 	bl	8010916 <nrf_set_address_width>
	// channel
	nrf_set_rf_channel(dev, dev->config.rf_channel);
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	79db      	ldrb	r3, [r3, #7]
 8010062:	4619      	mov	r1, r3
 8010064:	6878      	ldr	r0, [r7, #4]
 8010066:	f000 fbb5 	bl	80107d4 <nrf_set_rf_channel>
	// data rate
	nrf_set_data_rate(dev, dev->config.data_rate);
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	781b      	ldrb	r3, [r3, #0]
 801006e:	4619      	mov	r1, r3
 8010070:	6878      	ldr	r0, [r7, #4]
 8010072:	f000 fb09 	bl	8010688 <nrf_set_data_rate>
	// tx power
	nrf_set_tx_power(dev, dev->config.tx_power);
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	785b      	ldrb	r3, [r3, #1]
 801007a:	4619      	mov	r1, r3
 801007c:	6878      	ldr	r0, [r7, #4]
 801007e:	f000 fb4b 	bl	8010718 <nrf_set_tx_power>
	// retransmission
	nrf_set_retransmittion_count(dev, dev->config.retransmit_count);
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	795b      	ldrb	r3, [r3, #5]
 8010086:	4619      	mov	r1, r3
 8010088:	6878      	ldr	r0, [r7, #4]
 801008a:	f000 fbd4 	bl	8010836 <nrf_set_retransmittion_count>
	nrf_set_retransmittion_delay(dev, dev->config.retransmit_delay);
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	799b      	ldrb	r3, [r3, #6]
 8010092:	4619      	mov	r1, r3
 8010094:	6878      	ldr	r0, [r7, #4]
 8010096:	f000 fc04 	bl	80108a2 <nrf_set_retransmittion_delay>
	// pipes (only pipe 0)
	nrf_set_rx_pipes(dev, 0x01);
 801009a:	2101      	movs	r1, #1
 801009c:	6878      	ldr	r0, [r7, #4]
 801009e:	f000 fc6c 	bl	801097a <nrf_set_rx_pipes>
	// auto ack (Enhanced ShockBurst)
	nrf_enable_auto_ack(dev, 0x00);
 80100a2:	2100      	movs	r1, #0
 80100a4:	6878      	ldr	r0, [r7, #4]
 80100a6:	f000 fc7e 	bl	80109a6 <nrf_enable_auto_ack>
	// clear interrupt
	nrf_clear_interrupts(dev);
 80100aa:	6878      	ldr	r0, [r7, #4]
 80100ac:	f000 fb6a 	bl	8010784 <nrf_clear_interrupts>
	// set as PRX
	nrf_rx_tx_control(dev, NRF_STATE_RX);
 80100b0:	2101      	movs	r1, #1
 80100b2:	6878      	ldr	r0, [r7, #4]
 80100b4:	f000 fd43 	bl	8010b3e <nrf_rx_tx_control>
	// clear RX FIFO
	nrf_flush_rx(dev);
 80100b8:	6878      	ldr	r0, [r7, #4]
 80100ba:	f000 fac8 	bl	801064e <nrf_flush_rx>

	ce_set(dev);
 80100be:	6878      	ldr	r0, [r7, #4]
 80100c0:	f7ff fed0 	bl	800fe64 <ce_set>

	return NRF_OK;
 80100c4:	2300      	movs	r3, #0
}
 80100c6:	4618      	mov	r0, r3
 80100c8:	3710      	adds	r7, #16
 80100ca:	46bd      	mov	sp, r7
 80100cc:	bdb0      	pop	{r4, r5, r7, pc}
 80100ce:	bf00      	nop
 80100d0:	08018c48 	.word	0x08018c48
 80100d4:	20007bec 	.word	0x20007bec

080100d8 <nrf_check>:

// Checks the presence of the nRF24L01
NRF_RESULT nrf_check(nrf24l01* dev) {
 80100d8:	b580      	push	{r7, lr}
 80100da:	b086      	sub	sp, #24
 80100dc:	af00      	add	r7, sp, #0
 80100de:	6078      	str	r0, [r7, #4]
	char *nRF24_TEST_ADDR = "nRF24";
 80100e0:	4b19      	ldr	r3, [pc, #100]	; (8010148 <nrf_check+0x70>)
 80100e2:	60fb      	str	r3, [r7, #12]
	uint8_t rxbuf[sizeof(nRF24_TEST_ADDR) - 1U];
	uint8_t *ptr = (uint8_t *) nRF24_TEST_ADDR;
 80100e4:	68fb      	ldr	r3, [r7, #12]
 80100e6:	617b      	str	r3, [r7, #20]
	uint8_t idx;

	ce_reset(dev);
 80100e8:	6878      	ldr	r0, [r7, #4]
 80100ea:	f7ff fecb 	bl	800fe84 <ce_reset>

	// Write the test address to the TX_ADDR register
	nrf_write_register_mb(dev, NRF_TX_ADDR, ptr, sizeof(nRF24_TEST_ADDR) - 1U);
 80100ee:	2303      	movs	r3, #3
 80100f0:	697a      	ldr	r2, [r7, #20]
 80100f2:	2110      	movs	r1, #16
 80100f4:	6878      	ldr	r0, [r7, #4]
 80100f6:	f000 fa23 	bl	8010540 <nrf_write_register_mb>

	// Read it back to the buffer
	nrf_read_register_mb(dev, NRF_TX_ADDR, rxbuf, sizeof(nRF24_TEST_ADDR) - 1U);
 80100fa:	f107 0208 	add.w	r2, r7, #8
 80100fe:	2303      	movs	r3, #3
 8010100:	2110      	movs	r1, #16
 8010102:	6878      	ldr	r0, [r7, #4]
 8010104:	f000 f9d3 	bl	80104ae <nrf_read_register_mb>

	ce_set(dev);
 8010108:	6878      	ldr	r0, [r7, #4]
 801010a:	f7ff feab 	bl	800fe64 <ce_set>

	// Compare transmitted and received data...
	for (idx = 0U; idx < sizeof(nRF24_TEST_ADDR) - 1U; idx++) {
 801010e:	2300      	movs	r3, #0
 8010110:	74fb      	strb	r3, [r7, #19]
 8010112:	e010      	b.n	8010136 <nrf_check+0x5e>
		if (rxbuf[idx] != *ptr++) {
 8010114:	7cfb      	ldrb	r3, [r7, #19]
 8010116:	f107 0218 	add.w	r2, r7, #24
 801011a:	4413      	add	r3, r2
 801011c:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8010120:	697b      	ldr	r3, [r7, #20]
 8010122:	1c59      	adds	r1, r3, #1
 8010124:	6179      	str	r1, [r7, #20]
 8010126:	781b      	ldrb	r3, [r3, #0]
 8010128:	429a      	cmp	r2, r3
 801012a:	d001      	beq.n	8010130 <nrf_check+0x58>
			// The transceiver is absent
			return NRF_ERROR;
 801012c:	2301      	movs	r3, #1
 801012e:	e006      	b.n	801013e <nrf_check+0x66>
	for (idx = 0U; idx < sizeof(nRF24_TEST_ADDR) - 1U; idx++) {
 8010130:	7cfb      	ldrb	r3, [r7, #19]
 8010132:	3301      	adds	r3, #1
 8010134:	74fb      	strb	r3, [r7, #19]
 8010136:	7cfb      	ldrb	r3, [r7, #19]
 8010138:	2b02      	cmp	r3, #2
 801013a:	d9eb      	bls.n	8010114 <nrf_check+0x3c>
		}
	}

	// The transceiver is present
	return NRF_OK;
 801013c:	2300      	movs	r3, #0
}
 801013e:	4618      	mov	r0, r3
 8010140:	3718      	adds	r7, #24
 8010142:	46bd      	mov	sp, r7
 8010144:	bd80      	pop	{r7, pc}
 8010146:	bf00      	nop
 8010148:	08018c54 	.word	0x08018c54

0801014c <nrf_send_command>:

NRF_RESULT nrf_send_command(nrf24l01* dev, NRF_COMMAND cmd, const uint8_t* tx, uint8_t* rx, uint8_t len) {
 801014c:	b5b0      	push	{r4, r5, r7, lr}
 801014e:	b08c      	sub	sp, #48	; 0x30
 8010150:	af02      	add	r7, sp, #8
 8010152:	60f8      	str	r0, [r7, #12]
 8010154:	607a      	str	r2, [r7, #4]
 8010156:	603b      	str	r3, [r7, #0]
 8010158:	460b      	mov	r3, r1
 801015a:	72fb      	strb	r3, [r7, #11]
 801015c:	466b      	mov	r3, sp
 801015e:	461d      	mov	r5, r3
	uint8_t myTX[len + 1];
 8010160:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8010164:	1c58      	adds	r0, r3, #1
 8010166:	1e43      	subs	r3, r0, #1
 8010168:	623b      	str	r3, [r7, #32]
 801016a:	4603      	mov	r3, r0
 801016c:	4619      	mov	r1, r3
 801016e:	f04f 0200 	mov.w	r2, #0
 8010172:	f04f 0300 	mov.w	r3, #0
 8010176:	f04f 0400 	mov.w	r4, #0
 801017a:	00d4      	lsls	r4, r2, #3
 801017c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8010180:	00cb      	lsls	r3, r1, #3
 8010182:	4603      	mov	r3, r0
 8010184:	4619      	mov	r1, r3
 8010186:	f04f 0200 	mov.w	r2, #0
 801018a:	f04f 0300 	mov.w	r3, #0
 801018e:	f04f 0400 	mov.w	r4, #0
 8010192:	00d4      	lsls	r4, r2, #3
 8010194:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8010198:	00cb      	lsls	r3, r1, #3
 801019a:	4603      	mov	r3, r0
 801019c:	3307      	adds	r3, #7
 801019e:	08db      	lsrs	r3, r3, #3
 80101a0:	00db      	lsls	r3, r3, #3
 80101a2:	ebad 0d03 	sub.w	sp, sp, r3
 80101a6:	ab02      	add	r3, sp, #8
 80101a8:	3300      	adds	r3, #0
 80101aa:	61fb      	str	r3, [r7, #28]
	uint8_t myRX[len + 1];
 80101ac:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80101b0:	1c58      	adds	r0, r3, #1
 80101b2:	1e43      	subs	r3, r0, #1
 80101b4:	61bb      	str	r3, [r7, #24]
 80101b6:	4603      	mov	r3, r0
 80101b8:	4619      	mov	r1, r3
 80101ba:	f04f 0200 	mov.w	r2, #0
 80101be:	f04f 0300 	mov.w	r3, #0
 80101c2:	f04f 0400 	mov.w	r4, #0
 80101c6:	00d4      	lsls	r4, r2, #3
 80101c8:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80101cc:	00cb      	lsls	r3, r1, #3
 80101ce:	4603      	mov	r3, r0
 80101d0:	4619      	mov	r1, r3
 80101d2:	f04f 0200 	mov.w	r2, #0
 80101d6:	f04f 0300 	mov.w	r3, #0
 80101da:	f04f 0400 	mov.w	r4, #0
 80101de:	00d4      	lsls	r4, r2, #3
 80101e0:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80101e4:	00cb      	lsls	r3, r1, #3
 80101e6:	4603      	mov	r3, r0
 80101e8:	3307      	adds	r3, #7
 80101ea:	08db      	lsrs	r3, r3, #3
 80101ec:	00db      	lsls	r3, r3, #3
 80101ee:	ebad 0d03 	sub.w	sp, sp, r3
 80101f2:	ab02      	add	r3, sp, #8
 80101f4:	3300      	adds	r3, #0
 80101f6:	617b      	str	r3, [r7, #20]
	myTX[0] = cmd;
 80101f8:	69fb      	ldr	r3, [r7, #28]
 80101fa:	7afa      	ldrb	r2, [r7, #11]
 80101fc:	701a      	strb	r2, [r3, #0]

	int i = 0;
 80101fe:	2300      	movs	r3, #0
 8010200:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 0; i < len; i++) {
 8010202:	2300      	movs	r3, #0
 8010204:	627b      	str	r3, [r7, #36]	; 0x24
 8010206:	e00f      	b.n	8010228 <nrf_send_command+0xdc>
		myTX[1 + i] = tx[i];
 8010208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801020a:	687a      	ldr	r2, [r7, #4]
 801020c:	441a      	add	r2, r3
 801020e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010210:	3301      	adds	r3, #1
 8010212:	7811      	ldrb	r1, [r2, #0]
 8010214:	69fa      	ldr	r2, [r7, #28]
 8010216:	54d1      	strb	r1, [r2, r3]
		myRX[i] = 0;
 8010218:	697a      	ldr	r2, [r7, #20]
 801021a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801021c:	4413      	add	r3, r2
 801021e:	2200      	movs	r2, #0
 8010220:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < len; i++) {
 8010222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010224:	3301      	adds	r3, #1
 8010226:	627b      	str	r3, [r7, #36]	; 0x24
 8010228:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 801022c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801022e:	429a      	cmp	r2, r3
 8010230:	dbea      	blt.n	8010208 <nrf_send_command+0xbc>
	}

	csn_reset(dev);
 8010232:	68f8      	ldr	r0, [r7, #12]
 8010234:	f7ff fe46 	bl	800fec4 <csn_reset>

	/* Wait for SPIx Busy flag */
	while (__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_BSY) != RESET)
 8010238:	bf00      	nop
 801023a:	4b1f      	ldr	r3, [pc, #124]	; (80102b8 <nrf_send_command+0x16c>)
 801023c:	681b      	ldr	r3, [r3, #0]
 801023e:	689b      	ldr	r3, [r3, #8]
 8010240:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010244:	2b80      	cmp	r3, #128	; 0x80
 8010246:	d0f8      	beq.n	801023a <nrf_send_command+0xee>
		;
	//	Tx buffer empty flag
	while (__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE) == RESET)
 8010248:	bf00      	nop
 801024a:	4b1b      	ldr	r3, [pc, #108]	; (80102b8 <nrf_send_command+0x16c>)
 801024c:	681b      	ldr	r3, [r3, #0]
 801024e:	689b      	ldr	r3, [r3, #8]
 8010250:	f003 0302 	and.w	r3, r3, #2
 8010254:	2b02      	cmp	r3, #2
 8010256:	d1f8      	bne.n	801024a <nrf_send_command+0xfe>
		;

	if (HAL_SPI_TransmitReceive(dev->config.spi, myTX, myRX, 1 + len, dev->config.spi_timeout) != HAL_OK) {
 8010258:	68fb      	ldr	r3, [r7, #12]
 801025a:	6958      	ldr	r0, [r3, #20]
 801025c:	69f9      	ldr	r1, [r7, #28]
 801025e:	697a      	ldr	r2, [r7, #20]
 8010260:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8010264:	b29b      	uxth	r3, r3
 8010266:	3301      	adds	r3, #1
 8010268:	b29c      	uxth	r4, r3
 801026a:	68fb      	ldr	r3, [r7, #12]
 801026c:	699b      	ldr	r3, [r3, #24]
 801026e:	9300      	str	r3, [sp, #0]
 8010270:	4623      	mov	r3, r4
 8010272:	f7f6 fc5f 	bl	8006b34 <HAL_SPI_TransmitReceive>
 8010276:	4603      	mov	r3, r0
 8010278:	2b00      	cmp	r3, #0
 801027a:	d001      	beq.n	8010280 <nrf_send_command+0x134>
		return NRF_ERROR;
 801027c:	2301      	movs	r3, #1
 801027e:	e016      	b.n	80102ae <nrf_send_command+0x162>
	}

	for (i = 0; i < len; i++) {
 8010280:	2300      	movs	r3, #0
 8010282:	627b      	str	r3, [r7, #36]	; 0x24
 8010284:	e00a      	b.n	801029c <nrf_send_command+0x150>
		rx[i] = myRX[1 + i];
 8010286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010288:	1c5a      	adds	r2, r3, #1
 801028a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801028c:	6839      	ldr	r1, [r7, #0]
 801028e:	440b      	add	r3, r1
 8010290:	6979      	ldr	r1, [r7, #20]
 8010292:	5c8a      	ldrb	r2, [r1, r2]
 8010294:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < len; i++) {
 8010296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010298:	3301      	adds	r3, #1
 801029a:	627b      	str	r3, [r7, #36]	; 0x24
 801029c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80102a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80102a2:	429a      	cmp	r2, r3
 80102a4:	dbef      	blt.n	8010286 <nrf_send_command+0x13a>
	}

	csn_set(dev);
 80102a6:	68f8      	ldr	r0, [r7, #12]
 80102a8:	f7ff fdfc 	bl	800fea4 <csn_set>

	return NRF_OK;
 80102ac:	2300      	movs	r3, #0
 80102ae:	46ad      	mov	sp, r5
}
 80102b0:	4618      	mov	r0, r3
 80102b2:	3728      	adds	r7, #40	; 0x28
 80102b4:	46bd      	mov	sp, r7
 80102b6:	bdb0      	pop	{r4, r5, r7, pc}
 80102b8:	20008854 	.word	0x20008854

080102bc <nrf_send_command_single>:

uint8_t nrf_send_command_single(nrf24l01* dev, uint8_t data) {
 80102bc:	b580      	push	{r7, lr}
 80102be:	b086      	sub	sp, #24
 80102c0:	af02      	add	r7, sp, #8
 80102c2:	6078      	str	r0, [r7, #4]
 80102c4:	460b      	mov	r3, r1
 80102c6:	70fb      	strb	r3, [r7, #3]
	uint8_t rx;
	/* Wait for SPIx Busy flag */
	while (__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_BSY) != RESET)
 80102c8:	bf00      	nop
 80102ca:	4b0f      	ldr	r3, [pc, #60]	; (8010308 <nrf_send_command_single+0x4c>)
 80102cc:	681b      	ldr	r3, [r3, #0]
 80102ce:	689b      	ldr	r3, [r3, #8]
 80102d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80102d4:	2b80      	cmp	r3, #128	; 0x80
 80102d6:	d0f8      	beq.n	80102ca <nrf_send_command_single+0xe>
		;
	//	Tx buffer empty flag
	while (__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE) == RESET)
 80102d8:	bf00      	nop
 80102da:	4b0b      	ldr	r3, [pc, #44]	; (8010308 <nrf_send_command_single+0x4c>)
 80102dc:	681b      	ldr	r3, [r3, #0]
 80102de:	689b      	ldr	r3, [r3, #8]
 80102e0:	f003 0302 	and.w	r3, r3, #2
 80102e4:	2b02      	cmp	r3, #2
 80102e6:	d1f8      	bne.n	80102da <nrf_send_command_single+0x1e>
		;

	HAL_SPI_TransmitReceive(dev->config.spi, &data, &rx, 1, dev->config.spi_timeout);
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	6958      	ldr	r0, [r3, #20]
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	699b      	ldr	r3, [r3, #24]
 80102f0:	f107 020f 	add.w	r2, r7, #15
 80102f4:	1cf9      	adds	r1, r7, #3
 80102f6:	9300      	str	r3, [sp, #0]
 80102f8:	2301      	movs	r3, #1
 80102fa:	f7f6 fc1b 	bl	8006b34 <HAL_SPI_TransmitReceive>

	return rx;
 80102fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8010300:	4618      	mov	r0, r3
 8010302:	3710      	adds	r7, #16
 8010304:	46bd      	mov	sp, r7
 8010306:	bd80      	pop	{r7, pc}
 8010308:	20008854 	.word	0x20008854

0801030c <nrf_irq_handler>:

void nrf_irq_handler(nrf24l01* dev) {
 801030c:	b580      	push	{r7, lr}
 801030e:	b084      	sub	sp, #16
 8010310:	af00      	add	r7, sp, #0
 8010312:	6078      	str	r0, [r7, #4]
	uint8_t status = 0;
 8010314:	2300      	movs	r3, #0
 8010316:	72fb      	strb	r3, [r7, #11]
	if (nrf_read_register(dev, NRF_STATUS, &status) != NRF_OK) {
 8010318:	f107 030b 	add.w	r3, r7, #11
 801031c:	461a      	mov	r2, r3
 801031e:	2107      	movs	r1, #7
 8010320:	6878      	ldr	r0, [r7, #4]
 8010322:	f000 f8a8 	bl	8010476 <nrf_read_register>
 8010326:	4603      	mov	r3, r0
 8010328:	2b00      	cmp	r3, #0
 801032a:	f040 8091 	bne.w	8010450 <nrf_irq_handler+0x144>
		return;
	}

	if ((status & (1 << 6))) { // RX FIFO Interrupt
 801032e:	7afb      	ldrb	r3, [r7, #11]
 8010330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010334:	2b00      	cmp	r3, #0
 8010336:	d031      	beq.n	801039c <nrf_irq_handler+0x90>
		uint8_t fifo_status = 0;
 8010338:	2300      	movs	r3, #0
 801033a:	72bb      	strb	r3, [r7, #10]
		ce_reset(dev);
 801033c:	6878      	ldr	r0, [r7, #4]
 801033e:	f7ff fda1 	bl	800fe84 <ce_reset>
		nrf_write_register(dev, NRF_STATUS, &status);
 8010342:	f107 030b 	add.w	r3, r7, #11
 8010346:	461a      	mov	r2, r3
 8010348:	2107      	movs	r1, #7
 801034a:	6878      	ldr	r0, [r7, #4]
 801034c:	f000 f8d8 	bl	8010500 <nrf_write_register>
		nrf_read_register(dev, NRF_FIFO_STATUS, &fifo_status);
 8010350:	f107 030a 	add.w	r3, r7, #10
 8010354:	461a      	mov	r2, r3
 8010356:	2117      	movs	r1, #23
 8010358:	6878      	ldr	r0, [r7, #4]
 801035a:	f000 f88c 	bl	8010476 <nrf_read_register>
		if ((fifo_status & 1) == 0) {
 801035e:	7abb      	ldrb	r3, [r7, #10]
 8010360:	f003 0301 	and.w	r3, r3, #1
 8010364:	2b00      	cmp	r3, #0
 8010366:	d116      	bne.n	8010396 <nrf_irq_handler+0x8a>
			uint8_t* rx_buffer = dev->config.rx_buffer;
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	691b      	ldr	r3, [r3, #16]
 801036c:	60fb      	str	r3, [r7, #12]
			nrf_read_rx_payload(dev, rx_buffer);
 801036e:	68f9      	ldr	r1, [r7, #12]
 8010370:	6878      	ldr	r0, [r7, #4]
 8010372:	f000 f910 	bl	8010596 <nrf_read_rx_payload>
			status |= 1 << 6;
 8010376:	7afb      	ldrb	r3, [r7, #11]
 8010378:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801037c:	b2db      	uxtb	r3, r3
 801037e:	72fb      	strb	r3, [r7, #11]
			nrf_write_register(dev, NRF_STATUS, &status);
 8010380:	f107 030b 	add.w	r3, r7, #11
 8010384:	461a      	mov	r2, r3
 8010386:	2107      	movs	r1, #7
 8010388:	6878      	ldr	r0, [r7, #4]
 801038a:	f000 f8b9 	bl	8010500 <nrf_write_register>
			// nrf_flush_rx(dev);
			nrf_packet_received_callback(dev, rx_buffer);
 801038e:	68f9      	ldr	r1, [r7, #12]
 8010390:	6878      	ldr	r0, [r7, #4]
 8010392:	f000 f861 	bl	8010458 <nrf_packet_received_callback>
		}
		ce_set(dev);
 8010396:	6878      	ldr	r0, [r7, #4]
 8010398:	f7ff fd64 	bl	800fe64 <ce_set>
	}
	if ((status & (1 << 5))) { // TX Data Sent Interrupt
 801039c:	7afb      	ldrb	r3, [r7, #11]
 801039e:	f003 0320 	and.w	r3, r3, #32
 80103a2:	2b00      	cmp	r3, #0
 80103a4:	d021      	beq.n	80103ea <nrf_irq_handler+0xde>
		status |= 1 << 5;      // clear the interrupt flag
 80103a6:	7afb      	ldrb	r3, [r7, #11]
 80103a8:	f043 0320 	orr.w	r3, r3, #32
 80103ac:	b2db      	uxtb	r3, r3
 80103ae:	72fb      	strb	r3, [r7, #11]
		ce_reset(dev);
 80103b0:	6878      	ldr	r0, [r7, #4]
 80103b2:	f7ff fd67 	bl	800fe84 <ce_reset>
		nrf_rx_tx_control(dev, NRF_STATE_RX);
 80103b6:	2101      	movs	r1, #1
 80103b8:	6878      	ldr	r0, [r7, #4]
 80103ba:	f000 fbc0 	bl	8010b3e <nrf_rx_tx_control>
		dev->state = NRF_STATE_RX;
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	2201      	movs	r2, #1
 80103c2:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
		ce_set(dev);
 80103c6:	6878      	ldr	r0, [r7, #4]
 80103c8:	f7ff fd4c 	bl	800fe64 <ce_set>
		nrf_write_register(dev, NRF_STATUS, &status);
 80103cc:	f107 030b 	add.w	r3, r7, #11
 80103d0:	461a      	mov	r2, r3
 80103d2:	2107      	movs	r1, #7
 80103d4:	6878      	ldr	r0, [r7, #4]
 80103d6:	f000 f893 	bl	8010500 <nrf_write_register>
		dev->tx_result = NRF_OK;
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	2200      	movs	r2, #0
 80103de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
		dev->tx_busy = 0;
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	2200      	movs	r2, #0
 80103e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}
	if ((status & (1 << 4))) { // MaxRetransmits reached
 80103ea:	7afb      	ldrb	r3, [r7, #11]
 80103ec:	f003 0310 	and.w	r3, r3, #16
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	d02e      	beq.n	8010452 <nrf_irq_handler+0x146>
		status |= 1 << 4;
 80103f4:	7afb      	ldrb	r3, [r7, #11]
 80103f6:	f043 0310 	orr.w	r3, r3, #16
 80103fa:	b2db      	uxtb	r3, r3
 80103fc:	72fb      	strb	r3, [r7, #11]

		nrf_flush_tx(dev);
 80103fe:	6878      	ldr	r0, [r7, #4]
 8010400:	f000 f908 	bl	8010614 <nrf_flush_tx>
		nrf_power_up(dev, 0); // power down
 8010404:	2100      	movs	r1, #0
 8010406:	6878      	ldr	r0, [r7, #4]
 8010408:	f000 fb66 	bl	8010ad8 <nrf_power_up>
		nrf_power_up(dev, 1); // power up
 801040c:	2101      	movs	r1, #1
 801040e:	6878      	ldr	r0, [r7, #4]
 8010410:	f000 fb62 	bl	8010ad8 <nrf_power_up>

		ce_reset(dev);
 8010414:	6878      	ldr	r0, [r7, #4]
 8010416:	f7ff fd35 	bl	800fe84 <ce_reset>
		nrf_rx_tx_control(dev, NRF_STATE_RX);
 801041a:	2101      	movs	r1, #1
 801041c:	6878      	ldr	r0, [r7, #4]
 801041e:	f000 fb8e 	bl	8010b3e <nrf_rx_tx_control>
		dev->state = NRF_STATE_RX;
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	2201      	movs	r2, #1
 8010426:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
		ce_set(dev);
 801042a:	6878      	ldr	r0, [r7, #4]
 801042c:	f7ff fd1a 	bl	800fe64 <ce_set>

		nrf_write_register(dev, NRF_STATUS, &status);
 8010430:	f107 030b 	add.w	r3, r7, #11
 8010434:	461a      	mov	r2, r3
 8010436:	2107      	movs	r1, #7
 8010438:	6878      	ldr	r0, [r7, #4]
 801043a:	f000 f861 	bl	8010500 <nrf_write_register>
		dev->tx_result = NRF_ERROR;
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	2201      	movs	r2, #1
 8010442:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
		dev->tx_busy = 0;
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	2200      	movs	r2, #0
 801044a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 801044e:	e000      	b.n	8010452 <nrf_irq_handler+0x146>
		return;
 8010450:	bf00      	nop
	}
}
 8010452:	3710      	adds	r7, #16
 8010454:	46bd      	mov	sp, r7
 8010456:	bd80      	pop	{r7, pc}

08010458 <nrf_packet_received_callback>:

__weak void nrf_packet_received_callback(nrf24l01* dev, uint8_t* data) {
 8010458:	b480      	push	{r7}
 801045a:	b083      	sub	sp, #12
 801045c:	af00      	add	r7, sp, #0
 801045e:	6078      	str	r0, [r7, #4]
 8010460:	6039      	str	r1, [r7, #0]
	// default implementation (__weak) is used in favor of nrf_receive_packet
	dev->rx_busy = 0;
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	2200      	movs	r2, #0
 8010466:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
}
 801046a:	bf00      	nop
 801046c:	370c      	adds	r7, #12
 801046e:	46bd      	mov	sp, r7
 8010470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010474:	4770      	bx	lr

08010476 <nrf_read_register>:

NRF_RESULT nrf_read_register(nrf24l01* dev, uint8_t reg, uint8_t* data) {
 8010476:	b580      	push	{r7, lr}
 8010478:	b088      	sub	sp, #32
 801047a:	af02      	add	r7, sp, #8
 801047c:	60f8      	str	r0, [r7, #12]
 801047e:	460b      	mov	r3, r1
 8010480:	607a      	str	r2, [r7, #4]
 8010482:	72fb      	strb	r3, [r7, #11]
	uint8_t tx = 0;
 8010484:	2300      	movs	r3, #0
 8010486:	75fb      	strb	r3, [r7, #23]
	if (nrf_send_command(dev, NRF_CMD_R_REGISTER | reg, &tx, data, 1) != NRF_OK) {
 8010488:	f107 0217 	add.w	r2, r7, #23
 801048c:	7af9      	ldrb	r1, [r7, #11]
 801048e:	2301      	movs	r3, #1
 8010490:	9300      	str	r3, [sp, #0]
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	68f8      	ldr	r0, [r7, #12]
 8010496:	f7ff fe59 	bl	801014c <nrf_send_command>
 801049a:	4603      	mov	r3, r0
 801049c:	2b00      	cmp	r3, #0
 801049e:	d001      	beq.n	80104a4 <nrf_read_register+0x2e>
		return NRF_ERROR;
 80104a0:	2301      	movs	r3, #1
 80104a2:	e000      	b.n	80104a6 <nrf_read_register+0x30>
	}
	return NRF_OK;
 80104a4:	2300      	movs	r3, #0
}
 80104a6:	4618      	mov	r0, r3
 80104a8:	3718      	adds	r7, #24
 80104aa:	46bd      	mov	sp, r7
 80104ac:	bd80      	pop	{r7, pc}

080104ae <nrf_read_register_mb>:

NRF_RESULT nrf_read_register_mb(nrf24l01* dev, uint8_t reg, uint8_t* data, uint8_t count) {
 80104ae:	b590      	push	{r4, r7, lr}
 80104b0:	b085      	sub	sp, #20
 80104b2:	af00      	add	r7, sp, #0
 80104b4:	60f8      	str	r0, [r7, #12]
 80104b6:	607a      	str	r2, [r7, #4]
 80104b8:	461a      	mov	r2, r3
 80104ba:	460b      	mov	r3, r1
 80104bc:	72fb      	strb	r3, [r7, #11]
 80104be:	4613      	mov	r3, r2
 80104c0:	72bb      	strb	r3, [r7, #10]
	csn_reset(dev);
 80104c2:	68f8      	ldr	r0, [r7, #12]
 80104c4:	f7ff fcfe 	bl	800fec4 <csn_reset>
	nrf_send_command_single(dev, NRF_CMD_R_REGISTER | reg);
 80104c8:	7afb      	ldrb	r3, [r7, #11]
 80104ca:	4619      	mov	r1, r3
 80104cc:	68f8      	ldr	r0, [r7, #12]
 80104ce:	f7ff fef5 	bl	80102bc <nrf_send_command_single>
	while (count--) {
 80104d2:	e008      	b.n	80104e6 <nrf_read_register_mb+0x38>
		*data++ = nrf_send_command_single(dev, NRF_CMD_NOP);
 80104d4:	687c      	ldr	r4, [r7, #4]
 80104d6:	1c63      	adds	r3, r4, #1
 80104d8:	607b      	str	r3, [r7, #4]
 80104da:	21ff      	movs	r1, #255	; 0xff
 80104dc:	68f8      	ldr	r0, [r7, #12]
 80104de:	f7ff feed 	bl	80102bc <nrf_send_command_single>
 80104e2:	4603      	mov	r3, r0
 80104e4:	7023      	strb	r3, [r4, #0]
	while (count--) {
 80104e6:	7abb      	ldrb	r3, [r7, #10]
 80104e8:	1e5a      	subs	r2, r3, #1
 80104ea:	72ba      	strb	r2, [r7, #10]
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	d1f1      	bne.n	80104d4 <nrf_read_register_mb+0x26>
	}
	csn_set(dev);
 80104f0:	68f8      	ldr	r0, [r7, #12]
 80104f2:	f7ff fcd7 	bl	800fea4 <csn_set>
	return NRF_OK;
 80104f6:	2300      	movs	r3, #0
}
 80104f8:	4618      	mov	r0, r3
 80104fa:	3714      	adds	r7, #20
 80104fc:	46bd      	mov	sp, r7
 80104fe:	bd90      	pop	{r4, r7, pc}

08010500 <nrf_write_register>:

NRF_RESULT nrf_write_register(nrf24l01* dev, uint8_t reg, uint8_t* data) {
 8010500:	b580      	push	{r7, lr}
 8010502:	b088      	sub	sp, #32
 8010504:	af02      	add	r7, sp, #8
 8010506:	60f8      	str	r0, [r7, #12]
 8010508:	460b      	mov	r3, r1
 801050a:	607a      	str	r2, [r7, #4]
 801050c:	72fb      	strb	r3, [r7, #11]
	uint8_t rx = 0;
 801050e:	2300      	movs	r3, #0
 8010510:	75fb      	strb	r3, [r7, #23]
	if (nrf_send_command(dev, NRF_CMD_W_REGISTER | reg, data, &rx, 1) != NRF_OK) {
 8010512:	7afb      	ldrb	r3, [r7, #11]
 8010514:	f043 0320 	orr.w	r3, r3, #32
 8010518:	b2d9      	uxtb	r1, r3
 801051a:	f107 0217 	add.w	r2, r7, #23
 801051e:	2301      	movs	r3, #1
 8010520:	9300      	str	r3, [sp, #0]
 8010522:	4613      	mov	r3, r2
 8010524:	687a      	ldr	r2, [r7, #4]
 8010526:	68f8      	ldr	r0, [r7, #12]
 8010528:	f7ff fe10 	bl	801014c <nrf_send_command>
 801052c:	4603      	mov	r3, r0
 801052e:	2b00      	cmp	r3, #0
 8010530:	d001      	beq.n	8010536 <nrf_write_register+0x36>
		return NRF_ERROR;
 8010532:	2301      	movs	r3, #1
 8010534:	e000      	b.n	8010538 <nrf_write_register+0x38>
	}
	return NRF_OK;
 8010536:	2300      	movs	r3, #0
}
 8010538:	4618      	mov	r0, r3
 801053a:	3718      	adds	r7, #24
 801053c:	46bd      	mov	sp, r7
 801053e:	bd80      	pop	{r7, pc}

08010540 <nrf_write_register_mb>:

NRF_RESULT nrf_write_register_mb(nrf24l01* dev, uint8_t reg, uint8_t* data, uint8_t count) {
 8010540:	b580      	push	{r7, lr}
 8010542:	b084      	sub	sp, #16
 8010544:	af00      	add	r7, sp, #0
 8010546:	60f8      	str	r0, [r7, #12]
 8010548:	607a      	str	r2, [r7, #4]
 801054a:	461a      	mov	r2, r3
 801054c:	460b      	mov	r3, r1
 801054e:	72fb      	strb	r3, [r7, #11]
 8010550:	4613      	mov	r3, r2
 8010552:	72bb      	strb	r3, [r7, #10]
	csn_reset(dev);
 8010554:	68f8      	ldr	r0, [r7, #12]
 8010556:	f7ff fcb5 	bl	800fec4 <csn_reset>
	nrf_send_command_single(dev, NRF_CMD_W_REGISTER | reg);
 801055a:	7afb      	ldrb	r3, [r7, #11]
 801055c:	f043 0320 	orr.w	r3, r3, #32
 8010560:	b2db      	uxtb	r3, r3
 8010562:	4619      	mov	r1, r3
 8010564:	68f8      	ldr	r0, [r7, #12]
 8010566:	f7ff fea9 	bl	80102bc <nrf_send_command_single>
	while (count--) {
 801056a:	e007      	b.n	801057c <nrf_write_register_mb+0x3c>
		nrf_send_command_single(dev, *data++);
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	1c5a      	adds	r2, r3, #1
 8010570:	607a      	str	r2, [r7, #4]
 8010572:	781b      	ldrb	r3, [r3, #0]
 8010574:	4619      	mov	r1, r3
 8010576:	68f8      	ldr	r0, [r7, #12]
 8010578:	f7ff fea0 	bl	80102bc <nrf_send_command_single>
	while (count--) {
 801057c:	7abb      	ldrb	r3, [r7, #10]
 801057e:	1e5a      	subs	r2, r3, #1
 8010580:	72ba      	strb	r2, [r7, #10]
 8010582:	2b00      	cmp	r3, #0
 8010584:	d1f2      	bne.n	801056c <nrf_write_register_mb+0x2c>
	}
	csn_set(dev);
 8010586:	68f8      	ldr	r0, [r7, #12]
 8010588:	f7ff fc8c 	bl	800fea4 <csn_set>
	return NRF_OK;
 801058c:	2300      	movs	r3, #0
}
 801058e:	4618      	mov	r0, r3
 8010590:	3710      	adds	r7, #16
 8010592:	46bd      	mov	sp, r7
 8010594:	bd80      	pop	{r7, pc}

08010596 <nrf_read_rx_payload>:

NRF_RESULT nrf_read_rx_payload(nrf24l01* dev, uint8_t* data) {
 8010596:	b5b0      	push	{r4, r5, r7, lr}
 8010598:	b086      	sub	sp, #24
 801059a:	af02      	add	r7, sp, #8
 801059c:	6078      	str	r0, [r7, #4]
 801059e:	6039      	str	r1, [r7, #0]
 80105a0:	466b      	mov	r3, sp
 80105a2:	461d      	mov	r5, r3
	uint8_t tx[dev->config.payload_length];
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	7918      	ldrb	r0, [r3, #4]
 80105a8:	4603      	mov	r3, r0
 80105aa:	3b01      	subs	r3, #1
 80105ac:	60fb      	str	r3, [r7, #12]
 80105ae:	b2c1      	uxtb	r1, r0
 80105b0:	f04f 0200 	mov.w	r2, #0
 80105b4:	f04f 0300 	mov.w	r3, #0
 80105b8:	f04f 0400 	mov.w	r4, #0
 80105bc:	00d4      	lsls	r4, r2, #3
 80105be:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80105c2:	00cb      	lsls	r3, r1, #3
 80105c4:	b2c1      	uxtb	r1, r0
 80105c6:	f04f 0200 	mov.w	r2, #0
 80105ca:	f04f 0300 	mov.w	r3, #0
 80105ce:	f04f 0400 	mov.w	r4, #0
 80105d2:	00d4      	lsls	r4, r2, #3
 80105d4:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80105d8:	00cb      	lsls	r3, r1, #3
 80105da:	4603      	mov	r3, r0
 80105dc:	3307      	adds	r3, #7
 80105de:	08db      	lsrs	r3, r3, #3
 80105e0:	00db      	lsls	r3, r3, #3
 80105e2:	ebad 0d03 	sub.w	sp, sp, r3
 80105e6:	ab02      	add	r3, sp, #8
 80105e8:	3300      	adds	r3, #0
 80105ea:	60bb      	str	r3, [r7, #8]
	if (nrf_send_command(dev, NRF_CMD_R_RX_PAYLOAD, tx, data, dev->config.payload_length) != NRF_OK) {
 80105ec:	68ba      	ldr	r2, [r7, #8]
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	791b      	ldrb	r3, [r3, #4]
 80105f2:	9300      	str	r3, [sp, #0]
 80105f4:	683b      	ldr	r3, [r7, #0]
 80105f6:	2161      	movs	r1, #97	; 0x61
 80105f8:	6878      	ldr	r0, [r7, #4]
 80105fa:	f7ff fda7 	bl	801014c <nrf_send_command>
 80105fe:	4603      	mov	r3, r0
 8010600:	2b00      	cmp	r3, #0
 8010602:	d001      	beq.n	8010608 <nrf_read_rx_payload+0x72>
		return NRF_ERROR;
 8010604:	2301      	movs	r3, #1
 8010606:	e000      	b.n	801060a <nrf_read_rx_payload+0x74>
	}
	return NRF_OK;
 8010608:	2300      	movs	r3, #0
 801060a:	46ad      	mov	sp, r5
}
 801060c:	4618      	mov	r0, r3
 801060e:	3710      	adds	r7, #16
 8010610:	46bd      	mov	sp, r7
 8010612:	bdb0      	pop	{r4, r5, r7, pc}

08010614 <nrf_flush_tx>:
		return NRF_ERROR;
	}
	return NRF_OK;
}

NRF_RESULT nrf_flush_tx(nrf24l01* dev) {
 8010614:	b580      	push	{r7, lr}
 8010616:	b086      	sub	sp, #24
 8010618:	af02      	add	r7, sp, #8
 801061a:	6078      	str	r0, [r7, #4]
	uint8_t rx = 0;
 801061c:	2300      	movs	r3, #0
 801061e:	73fb      	strb	r3, [r7, #15]
	uint8_t tx = 0;
 8010620:	2300      	movs	r3, #0
 8010622:	73bb      	strb	r3, [r7, #14]
	if (nrf_send_command(dev, NRF_CMD_FLUSH_TX, &tx, &rx, 0) != NRF_OK) {
 8010624:	f107 010f 	add.w	r1, r7, #15
 8010628:	f107 020e 	add.w	r2, r7, #14
 801062c:	2300      	movs	r3, #0
 801062e:	9300      	str	r3, [sp, #0]
 8010630:	460b      	mov	r3, r1
 8010632:	21e1      	movs	r1, #225	; 0xe1
 8010634:	6878      	ldr	r0, [r7, #4]
 8010636:	f7ff fd89 	bl	801014c <nrf_send_command>
 801063a:	4603      	mov	r3, r0
 801063c:	2b00      	cmp	r3, #0
 801063e:	d001      	beq.n	8010644 <nrf_flush_tx+0x30>
		return NRF_ERROR;
 8010640:	2301      	movs	r3, #1
 8010642:	e000      	b.n	8010646 <nrf_flush_tx+0x32>
	}
	return NRF_OK;
 8010644:	2300      	movs	r3, #0
}
 8010646:	4618      	mov	r0, r3
 8010648:	3710      	adds	r7, #16
 801064a:	46bd      	mov	sp, r7
 801064c:	bd80      	pop	{r7, pc}

0801064e <nrf_flush_rx>:

NRF_RESULT nrf_flush_rx(nrf24l01* dev) {
 801064e:	b580      	push	{r7, lr}
 8010650:	b086      	sub	sp, #24
 8010652:	af02      	add	r7, sp, #8
 8010654:	6078      	str	r0, [r7, #4]
	uint8_t rx = 0;
 8010656:	2300      	movs	r3, #0
 8010658:	73fb      	strb	r3, [r7, #15]
	uint8_t tx = 0;
 801065a:	2300      	movs	r3, #0
 801065c:	73bb      	strb	r3, [r7, #14]
	if (nrf_send_command(dev, NRF_CMD_FLUSH_RX, &tx, &rx, 0) != NRF_OK) {
 801065e:	f107 010f 	add.w	r1, r7, #15
 8010662:	f107 020e 	add.w	r2, r7, #14
 8010666:	2300      	movs	r3, #0
 8010668:	9300      	str	r3, [sp, #0]
 801066a:	460b      	mov	r3, r1
 801066c:	21e2      	movs	r1, #226	; 0xe2
 801066e:	6878      	ldr	r0, [r7, #4]
 8010670:	f7ff fd6c 	bl	801014c <nrf_send_command>
 8010674:	4603      	mov	r3, r0
 8010676:	2b00      	cmp	r3, #0
 8010678:	d001      	beq.n	801067e <nrf_flush_rx+0x30>
		return NRF_ERROR;
 801067a:	2301      	movs	r3, #1
 801067c:	e000      	b.n	8010680 <nrf_flush_rx+0x32>
	}
	return NRF_OK;
 801067e:	2300      	movs	r3, #0
}
 8010680:	4618      	mov	r0, r3
 8010682:	3710      	adds	r7, #16
 8010684:	46bd      	mov	sp, r7
 8010686:	bd80      	pop	{r7, pc}

08010688 <nrf_set_data_rate>:

NRF_RESULT nrf_set_data_rate(nrf24l01* dev, NRF_DATA_RATE rate) {
 8010688:	b580      	push	{r7, lr}
 801068a:	b084      	sub	sp, #16
 801068c:	af00      	add	r7, sp, #0
 801068e:	6078      	str	r0, [r7, #4]
 8010690:	460b      	mov	r3, r1
 8010692:	70fb      	strb	r3, [r7, #3]
	uint8_t reg = 0;
 8010694:	2300      	movs	r3, #0
 8010696:	73fb      	strb	r3, [r7, #15]
	if (nrf_read_register(dev, NRF_RF_SETUP, &reg) != NRF_OK) {
 8010698:	f107 030f 	add.w	r3, r7, #15
 801069c:	461a      	mov	r2, r3
 801069e:	2106      	movs	r1, #6
 80106a0:	6878      	ldr	r0, [r7, #4]
 80106a2:	f7ff fee8 	bl	8010476 <nrf_read_register>
 80106a6:	4603      	mov	r3, r0
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	d001      	beq.n	80106b0 <nrf_set_data_rate+0x28>
		return NRF_ERROR;
 80106ac:	2301      	movs	r3, #1
 80106ae:	e02f      	b.n	8010710 <nrf_set_data_rate+0x88>
	}
	if (rate & 1) { // low bit set
 80106b0:	78fb      	ldrb	r3, [r7, #3]
 80106b2:	f003 0301 	and.w	r3, r3, #1
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	d005      	beq.n	80106c6 <nrf_set_data_rate+0x3e>
		reg |= 1 << 5;
 80106ba:	7bfb      	ldrb	r3, [r7, #15]
 80106bc:	f043 0320 	orr.w	r3, r3, #32
 80106c0:	b2db      	uxtb	r3, r3
 80106c2:	73fb      	strb	r3, [r7, #15]
 80106c4:	e004      	b.n	80106d0 <nrf_set_data_rate+0x48>
	} else { // low bit clear
		reg &= ~(1 << 5);
 80106c6:	7bfb      	ldrb	r3, [r7, #15]
 80106c8:	f023 0320 	bic.w	r3, r3, #32
 80106cc:	b2db      	uxtb	r3, r3
 80106ce:	73fb      	strb	r3, [r7, #15]
	}

	if (rate & 2) { // high bit set
 80106d0:	78fb      	ldrb	r3, [r7, #3]
 80106d2:	f003 0302 	and.w	r3, r3, #2
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	d005      	beq.n	80106e6 <nrf_set_data_rate+0x5e>
		reg |= 1 << 3;
 80106da:	7bfb      	ldrb	r3, [r7, #15]
 80106dc:	f043 0308 	orr.w	r3, r3, #8
 80106e0:	b2db      	uxtb	r3, r3
 80106e2:	73fb      	strb	r3, [r7, #15]
 80106e4:	e004      	b.n	80106f0 <nrf_set_data_rate+0x68>
	} else { // high bit clear
		reg &= ~(1 << 3);
 80106e6:	7bfb      	ldrb	r3, [r7, #15]
 80106e8:	f023 0308 	bic.w	r3, r3, #8
 80106ec:	b2db      	uxtb	r3, r3
 80106ee:	73fb      	strb	r3, [r7, #15]
	}

	if (nrf_write_register(dev, NRF_RF_SETUP, &reg) != NRF_OK) {
 80106f0:	f107 030f 	add.w	r3, r7, #15
 80106f4:	461a      	mov	r2, r3
 80106f6:	2106      	movs	r1, #6
 80106f8:	6878      	ldr	r0, [r7, #4]
 80106fa:	f7ff ff01 	bl	8010500 <nrf_write_register>
 80106fe:	4603      	mov	r3, r0
 8010700:	2b00      	cmp	r3, #0
 8010702:	d001      	beq.n	8010708 <nrf_set_data_rate+0x80>
		return NRF_ERROR;
 8010704:	2301      	movs	r3, #1
 8010706:	e003      	b.n	8010710 <nrf_set_data_rate+0x88>
	}
	dev->config.data_rate = rate;
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	78fa      	ldrb	r2, [r7, #3]
 801070c:	701a      	strb	r2, [r3, #0]
	return NRF_OK;
 801070e:	2300      	movs	r3, #0
}
 8010710:	4618      	mov	r0, r3
 8010712:	3710      	adds	r7, #16
 8010714:	46bd      	mov	sp, r7
 8010716:	bd80      	pop	{r7, pc}

08010718 <nrf_set_tx_power>:

NRF_RESULT nrf_set_tx_power(nrf24l01* dev, NRF_TX_PWR pwr) {
 8010718:	b580      	push	{r7, lr}
 801071a:	b084      	sub	sp, #16
 801071c:	af00      	add	r7, sp, #0
 801071e:	6078      	str	r0, [r7, #4]
 8010720:	460b      	mov	r3, r1
 8010722:	70fb      	strb	r3, [r7, #3]
	uint8_t reg = 0;
 8010724:	2300      	movs	r3, #0
 8010726:	73fb      	strb	r3, [r7, #15]
	if (nrf_read_register(dev, NRF_RF_SETUP, &reg) != NRF_OK) {
 8010728:	f107 030f 	add.w	r3, r7, #15
 801072c:	461a      	mov	r2, r3
 801072e:	2106      	movs	r1, #6
 8010730:	6878      	ldr	r0, [r7, #4]
 8010732:	f7ff fea0 	bl	8010476 <nrf_read_register>
 8010736:	4603      	mov	r3, r0
 8010738:	2b00      	cmp	r3, #0
 801073a:	d001      	beq.n	8010740 <nrf_set_tx_power+0x28>
		return NRF_ERROR;
 801073c:	2301      	movs	r3, #1
 801073e:	e01d      	b.n	801077c <nrf_set_tx_power+0x64>
	}
	reg &= 0xF9;     // clear bits 1,2
 8010740:	7bfb      	ldrb	r3, [r7, #15]
 8010742:	f023 0306 	bic.w	r3, r3, #6
 8010746:	b2db      	uxtb	r3, r3
 8010748:	73fb      	strb	r3, [r7, #15]
	reg |= pwr << 1; // set bits 1,2
 801074a:	78fb      	ldrb	r3, [r7, #3]
 801074c:	005b      	lsls	r3, r3, #1
 801074e:	b25a      	sxtb	r2, r3
 8010750:	7bfb      	ldrb	r3, [r7, #15]
 8010752:	b25b      	sxtb	r3, r3
 8010754:	4313      	orrs	r3, r2
 8010756:	b25b      	sxtb	r3, r3
 8010758:	b2db      	uxtb	r3, r3
 801075a:	73fb      	strb	r3, [r7, #15]
	if (nrf_write_register(dev, NRF_RF_SETUP, &reg) != NRF_OK) {
 801075c:	f107 030f 	add.w	r3, r7, #15
 8010760:	461a      	mov	r2, r3
 8010762:	2106      	movs	r1, #6
 8010764:	6878      	ldr	r0, [r7, #4]
 8010766:	f7ff fecb 	bl	8010500 <nrf_write_register>
 801076a:	4603      	mov	r3, r0
 801076c:	2b00      	cmp	r3, #0
 801076e:	d001      	beq.n	8010774 <nrf_set_tx_power+0x5c>
		return NRF_ERROR;
 8010770:	2301      	movs	r3, #1
 8010772:	e003      	b.n	801077c <nrf_set_tx_power+0x64>
	}
	dev->config.tx_power = pwr;
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	78fa      	ldrb	r2, [r7, #3]
 8010778:	705a      	strb	r2, [r3, #1]
	return NRF_OK;
 801077a:	2300      	movs	r3, #0
}
 801077c:	4618      	mov	r0, r3
 801077e:	3710      	adds	r7, #16
 8010780:	46bd      	mov	sp, r7
 8010782:	bd80      	pop	{r7, pc}

08010784 <nrf_clear_interrupts>:
		return NRF_ERROR;
	}
	return NRF_OK;
}

NRF_RESULT nrf_clear_interrupts(nrf24l01* dev) {
 8010784:	b580      	push	{r7, lr}
 8010786:	b084      	sub	sp, #16
 8010788:	af00      	add	r7, sp, #0
 801078a:	6078      	str	r0, [r7, #4]
	uint8_t reg = 0;
 801078c:	2300      	movs	r3, #0
 801078e:	73fb      	strb	r3, [r7, #15]
	if (nrf_read_register(dev, NRF_STATUS, &reg) != NRF_OK) {
 8010790:	f107 030f 	add.w	r3, r7, #15
 8010794:	461a      	mov	r2, r3
 8010796:	2107      	movs	r1, #7
 8010798:	6878      	ldr	r0, [r7, #4]
 801079a:	f7ff fe6c 	bl	8010476 <nrf_read_register>
 801079e:	4603      	mov	r3, r0
 80107a0:	2b00      	cmp	r3, #0
 80107a2:	d001      	beq.n	80107a8 <nrf_clear_interrupts+0x24>
		return NRF_ERROR;
 80107a4:	2301      	movs	r3, #1
 80107a6:	e011      	b.n	80107cc <nrf_clear_interrupts+0x48>
	}

	reg |= 7 << 4; // setting bits 4,5,6
 80107a8:	7bfb      	ldrb	r3, [r7, #15]
 80107aa:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80107ae:	b2db      	uxtb	r3, r3
 80107b0:	73fb      	strb	r3, [r7, #15]

	if (nrf_write_register(dev, NRF_STATUS, &reg) != NRF_OK) {
 80107b2:	f107 030f 	add.w	r3, r7, #15
 80107b6:	461a      	mov	r2, r3
 80107b8:	2107      	movs	r1, #7
 80107ba:	6878      	ldr	r0, [r7, #4]
 80107bc:	f7ff fea0 	bl	8010500 <nrf_write_register>
 80107c0:	4603      	mov	r3, r0
 80107c2:	2b00      	cmp	r3, #0
 80107c4:	d001      	beq.n	80107ca <nrf_clear_interrupts+0x46>
		return NRF_ERROR;
 80107c6:	2301      	movs	r3, #1
 80107c8:	e000      	b.n	80107cc <nrf_clear_interrupts+0x48>
	}
	return NRF_OK;
 80107ca:	2300      	movs	r3, #0
}
 80107cc:	4618      	mov	r0, r3
 80107ce:	3710      	adds	r7, #16
 80107d0:	46bd      	mov	sp, r7
 80107d2:	bd80      	pop	{r7, pc}

080107d4 <nrf_set_rf_channel>:

NRF_RESULT nrf_set_rf_channel(nrf24l01* dev, uint8_t ch) {
 80107d4:	b580      	push	{r7, lr}
 80107d6:	b084      	sub	sp, #16
 80107d8:	af00      	add	r7, sp, #0
 80107da:	6078      	str	r0, [r7, #4]
 80107dc:	460b      	mov	r3, r1
 80107de:	70fb      	strb	r3, [r7, #3]
	ch &= 0x7F;
 80107e0:	78fb      	ldrb	r3, [r7, #3]
 80107e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80107e6:	70fb      	strb	r3, [r7, #3]
	uint8_t reg = 0;
 80107e8:	2300      	movs	r3, #0
 80107ea:	73fb      	strb	r3, [r7, #15]
	if (nrf_read_register(dev, NRF_RF_CH, &reg) != NRF_OK) {
 80107ec:	f107 030f 	add.w	r3, r7, #15
 80107f0:	461a      	mov	r2, r3
 80107f2:	2105      	movs	r1, #5
 80107f4:	6878      	ldr	r0, [r7, #4]
 80107f6:	f7ff fe3e 	bl	8010476 <nrf_read_register>
 80107fa:	4603      	mov	r3, r0
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	d001      	beq.n	8010804 <nrf_set_rf_channel+0x30>
		return NRF_ERROR;
 8010800:	2301      	movs	r3, #1
 8010802:	e014      	b.n	801082e <nrf_set_rf_channel+0x5a>
	}

	reg |= ch; // setting channel
 8010804:	7bfa      	ldrb	r2, [r7, #15]
 8010806:	78fb      	ldrb	r3, [r7, #3]
 8010808:	4313      	orrs	r3, r2
 801080a:	b2db      	uxtb	r3, r3
 801080c:	73fb      	strb	r3, [r7, #15]

	if (nrf_write_register(dev, NRF_RF_CH, &reg) != NRF_OK) {
 801080e:	f107 030f 	add.w	r3, r7, #15
 8010812:	461a      	mov	r2, r3
 8010814:	2105      	movs	r1, #5
 8010816:	6878      	ldr	r0, [r7, #4]
 8010818:	f7ff fe72 	bl	8010500 <nrf_write_register>
 801081c:	4603      	mov	r3, r0
 801081e:	2b00      	cmp	r3, #0
 8010820:	d001      	beq.n	8010826 <nrf_set_rf_channel+0x52>
		return NRF_ERROR;
 8010822:	2301      	movs	r3, #1
 8010824:	e003      	b.n	801082e <nrf_set_rf_channel+0x5a>
	}
	dev->config.rf_channel = ch;
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	78fa      	ldrb	r2, [r7, #3]
 801082a:	71da      	strb	r2, [r3, #7]
	return NRF_OK;
 801082c:	2300      	movs	r3, #0
}
 801082e:	4618      	mov	r0, r3
 8010830:	3710      	adds	r7, #16
 8010832:	46bd      	mov	sp, r7
 8010834:	bd80      	pop	{r7, pc}

08010836 <nrf_set_retransmittion_count>:

NRF_RESULT nrf_set_retransmittion_count(nrf24l01* dev, uint8_t count) {
 8010836:	b580      	push	{r7, lr}
 8010838:	b084      	sub	sp, #16
 801083a:	af00      	add	r7, sp, #0
 801083c:	6078      	str	r0, [r7, #4]
 801083e:	460b      	mov	r3, r1
 8010840:	70fb      	strb	r3, [r7, #3]
	count &= 0x0F;
 8010842:	78fb      	ldrb	r3, [r7, #3]
 8010844:	f003 030f 	and.w	r3, r3, #15
 8010848:	70fb      	strb	r3, [r7, #3]
	uint8_t reg = 0;
 801084a:	2300      	movs	r3, #0
 801084c:	73fb      	strb	r3, [r7, #15]
	if (nrf_read_register(dev, NRF_SETUP_RETR, &reg) != NRF_OK) {
 801084e:	f107 030f 	add.w	r3, r7, #15
 8010852:	461a      	mov	r2, r3
 8010854:	2104      	movs	r1, #4
 8010856:	6878      	ldr	r0, [r7, #4]
 8010858:	f7ff fe0d 	bl	8010476 <nrf_read_register>
 801085c:	4603      	mov	r3, r0
 801085e:	2b00      	cmp	r3, #0
 8010860:	d001      	beq.n	8010866 <nrf_set_retransmittion_count+0x30>
		return NRF_ERROR;
 8010862:	2301      	movs	r3, #1
 8010864:	e019      	b.n	801089a <nrf_set_retransmittion_count+0x64>
	}

	reg &= 0xF0;  // clearing bits 0,1,2,3
 8010866:	7bfb      	ldrb	r3, [r7, #15]
 8010868:	f023 030f 	bic.w	r3, r3, #15
 801086c:	b2db      	uxtb	r3, r3
 801086e:	73fb      	strb	r3, [r7, #15]
	reg |= count; // setting count
 8010870:	7bfa      	ldrb	r2, [r7, #15]
 8010872:	78fb      	ldrb	r3, [r7, #3]
 8010874:	4313      	orrs	r3, r2
 8010876:	b2db      	uxtb	r3, r3
 8010878:	73fb      	strb	r3, [r7, #15]

	if (nrf_write_register(dev, NRF_SETUP_RETR, &reg) != NRF_OK) {
 801087a:	f107 030f 	add.w	r3, r7, #15
 801087e:	461a      	mov	r2, r3
 8010880:	2104      	movs	r1, #4
 8010882:	6878      	ldr	r0, [r7, #4]
 8010884:	f7ff fe3c 	bl	8010500 <nrf_write_register>
 8010888:	4603      	mov	r3, r0
 801088a:	2b00      	cmp	r3, #0
 801088c:	d001      	beq.n	8010892 <nrf_set_retransmittion_count+0x5c>
		return NRF_ERROR;
 801088e:	2301      	movs	r3, #1
 8010890:	e003      	b.n	801089a <nrf_set_retransmittion_count+0x64>
	}
	dev->config.retransmit_count = count;
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	78fa      	ldrb	r2, [r7, #3]
 8010896:	715a      	strb	r2, [r3, #5]
	return NRF_OK;
 8010898:	2300      	movs	r3, #0
}
 801089a:	4618      	mov	r0, r3
 801089c:	3710      	adds	r7, #16
 801089e:	46bd      	mov	sp, r7
 80108a0:	bd80      	pop	{r7, pc}

080108a2 <nrf_set_retransmittion_delay>:

NRF_RESULT nrf_set_retransmittion_delay(nrf24l01* dev, uint8_t delay) {
 80108a2:	b580      	push	{r7, lr}
 80108a4:	b084      	sub	sp, #16
 80108a6:	af00      	add	r7, sp, #0
 80108a8:	6078      	str	r0, [r7, #4]
 80108aa:	460b      	mov	r3, r1
 80108ac:	70fb      	strb	r3, [r7, #3]
	delay &= 0x0F;
 80108ae:	78fb      	ldrb	r3, [r7, #3]
 80108b0:	f003 030f 	and.w	r3, r3, #15
 80108b4:	70fb      	strb	r3, [r7, #3]
	uint8_t reg = 0;
 80108b6:	2300      	movs	r3, #0
 80108b8:	73fb      	strb	r3, [r7, #15]
	if (nrf_read_register(dev, NRF_SETUP_RETR, &reg) != NRF_OK) {
 80108ba:	f107 030f 	add.w	r3, r7, #15
 80108be:	461a      	mov	r2, r3
 80108c0:	2104      	movs	r1, #4
 80108c2:	6878      	ldr	r0, [r7, #4]
 80108c4:	f7ff fdd7 	bl	8010476 <nrf_read_register>
 80108c8:	4603      	mov	r3, r0
 80108ca:	2b00      	cmp	r3, #0
 80108cc:	d001      	beq.n	80108d2 <nrf_set_retransmittion_delay+0x30>
		return NRF_ERROR;
 80108ce:	2301      	movs	r3, #1
 80108d0:	e01d      	b.n	801090e <nrf_set_retransmittion_delay+0x6c>
	}

	reg &= 0x0F;       // clearing bits 1,2,6,7
 80108d2:	7bfb      	ldrb	r3, [r7, #15]
 80108d4:	f003 030f 	and.w	r3, r3, #15
 80108d8:	b2db      	uxtb	r3, r3
 80108da:	73fb      	strb	r3, [r7, #15]
	reg |= delay << 4; // setting delay
 80108dc:	78fb      	ldrb	r3, [r7, #3]
 80108de:	011b      	lsls	r3, r3, #4
 80108e0:	b25a      	sxtb	r2, r3
 80108e2:	7bfb      	ldrb	r3, [r7, #15]
 80108e4:	b25b      	sxtb	r3, r3
 80108e6:	4313      	orrs	r3, r2
 80108e8:	b25b      	sxtb	r3, r3
 80108ea:	b2db      	uxtb	r3, r3
 80108ec:	73fb      	strb	r3, [r7, #15]

	if (nrf_write_register(dev, NRF_SETUP_RETR, &reg) != NRF_OK) {
 80108ee:	f107 030f 	add.w	r3, r7, #15
 80108f2:	461a      	mov	r2, r3
 80108f4:	2104      	movs	r1, #4
 80108f6:	6878      	ldr	r0, [r7, #4]
 80108f8:	f7ff fe02 	bl	8010500 <nrf_write_register>
 80108fc:	4603      	mov	r3, r0
 80108fe:	2b00      	cmp	r3, #0
 8010900:	d001      	beq.n	8010906 <nrf_set_retransmittion_delay+0x64>
		return NRF_ERROR;
 8010902:	2301      	movs	r3, #1
 8010904:	e003      	b.n	801090e <nrf_set_retransmittion_delay+0x6c>
	}
	dev->config.retransmit_delay = delay;
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	78fa      	ldrb	r2, [r7, #3]
 801090a:	719a      	strb	r2, [r3, #6]
	return NRF_OK;
 801090c:	2300      	movs	r3, #0
}
 801090e:	4618      	mov	r0, r3
 8010910:	3710      	adds	r7, #16
 8010912:	46bd      	mov	sp, r7
 8010914:	bd80      	pop	{r7, pc}

08010916 <nrf_set_address_width>:

NRF_RESULT nrf_set_address_width(nrf24l01* dev, NRF_ADDR_WIDTH width) {
 8010916:	b580      	push	{r7, lr}
 8010918:	b084      	sub	sp, #16
 801091a:	af00      	add	r7, sp, #0
 801091c:	6078      	str	r0, [r7, #4]
 801091e:	460b      	mov	r3, r1
 8010920:	70fb      	strb	r3, [r7, #3]
	uint8_t reg = 0;
 8010922:	2300      	movs	r3, #0
 8010924:	73fb      	strb	r3, [r7, #15]
	if (nrf_read_register(dev, NRF_SETUP_AW, &reg) != NRF_OK) {
 8010926:	f107 030f 	add.w	r3, r7, #15
 801092a:	461a      	mov	r2, r3
 801092c:	2103      	movs	r1, #3
 801092e:	6878      	ldr	r0, [r7, #4]
 8010930:	f7ff fda1 	bl	8010476 <nrf_read_register>
 8010934:	4603      	mov	r3, r0
 8010936:	2b00      	cmp	r3, #0
 8010938:	d001      	beq.n	801093e <nrf_set_address_width+0x28>
		return NRF_ERROR;
 801093a:	2301      	movs	r3, #1
 801093c:	e019      	b.n	8010972 <nrf_set_address_width+0x5c>
	}

	reg &= 0x03;  // clearing bits 0,1
 801093e:	7bfb      	ldrb	r3, [r7, #15]
 8010940:	f003 0303 	and.w	r3, r3, #3
 8010944:	b2db      	uxtb	r3, r3
 8010946:	73fb      	strb	r3, [r7, #15]
	reg |= width; // setting delay
 8010948:	7bfa      	ldrb	r2, [r7, #15]
 801094a:	78fb      	ldrb	r3, [r7, #3]
 801094c:	4313      	orrs	r3, r2
 801094e:	b2db      	uxtb	r3, r3
 8010950:	73fb      	strb	r3, [r7, #15]

	if (nrf_write_register(dev, NRF_SETUP_AW, &reg) != NRF_OK) {
 8010952:	f107 030f 	add.w	r3, r7, #15
 8010956:	461a      	mov	r2, r3
 8010958:	2103      	movs	r1, #3
 801095a:	6878      	ldr	r0, [r7, #4]
 801095c:	f7ff fdd0 	bl	8010500 <nrf_write_register>
 8010960:	4603      	mov	r3, r0
 8010962:	2b00      	cmp	r3, #0
 8010964:	d001      	beq.n	801096a <nrf_set_address_width+0x54>
		return NRF_ERROR;
 8010966:	2301      	movs	r3, #1
 8010968:	e003      	b.n	8010972 <nrf_set_address_width+0x5c>
	}
	dev->config.addr_width = width;
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	78fa      	ldrb	r2, [r7, #3]
 801096e:	70da      	strb	r2, [r3, #3]
	return NRF_OK;
 8010970:	2300      	movs	r3, #0
}
 8010972:	4618      	mov	r0, r3
 8010974:	3710      	adds	r7, #16
 8010976:	46bd      	mov	sp, r7
 8010978:	bd80      	pop	{r7, pc}

0801097a <nrf_set_rx_pipes>:

NRF_RESULT nrf_set_rx_pipes(nrf24l01* dev, uint8_t pipes) {
 801097a:	b580      	push	{r7, lr}
 801097c:	b082      	sub	sp, #8
 801097e:	af00      	add	r7, sp, #0
 8010980:	6078      	str	r0, [r7, #4]
 8010982:	460b      	mov	r3, r1
 8010984:	70fb      	strb	r3, [r7, #3]
	if (nrf_write_register(dev, NRF_EN_RXADDR, &pipes) != NRF_OK) {
 8010986:	1cfb      	adds	r3, r7, #3
 8010988:	461a      	mov	r2, r3
 801098a:	2102      	movs	r1, #2
 801098c:	6878      	ldr	r0, [r7, #4]
 801098e:	f7ff fdb7 	bl	8010500 <nrf_write_register>
 8010992:	4603      	mov	r3, r0
 8010994:	2b00      	cmp	r3, #0
 8010996:	d001      	beq.n	801099c <nrf_set_rx_pipes+0x22>
		return NRF_ERROR;
 8010998:	2301      	movs	r3, #1
 801099a:	e000      	b.n	801099e <nrf_set_rx_pipes+0x24>
	}
	return NRF_OK;
 801099c:	2300      	movs	r3, #0
}
 801099e:	4618      	mov	r0, r3
 80109a0:	3708      	adds	r7, #8
 80109a2:	46bd      	mov	sp, r7
 80109a4:	bd80      	pop	{r7, pc}

080109a6 <nrf_enable_auto_ack>:

NRF_RESULT nrf_enable_auto_ack(nrf24l01* dev, uint8_t pipe) {
 80109a6:	b580      	push	{r7, lr}
 80109a8:	b084      	sub	sp, #16
 80109aa:	af00      	add	r7, sp, #0
 80109ac:	6078      	str	r0, [r7, #4]
 80109ae:	460b      	mov	r3, r1
 80109b0:	70fb      	strb	r3, [r7, #3]
	uint8_t reg = 0;
 80109b2:	2300      	movs	r3, #0
 80109b4:	73fb      	strb	r3, [r7, #15]
	if (nrf_read_register(dev, NRF_EN_AA, &reg) != NRF_OK) {
 80109b6:	f107 030f 	add.w	r3, r7, #15
 80109ba:	461a      	mov	r2, r3
 80109bc:	2101      	movs	r1, #1
 80109be:	6878      	ldr	r0, [r7, #4]
 80109c0:	f7ff fd59 	bl	8010476 <nrf_read_register>
 80109c4:	4603      	mov	r3, r0
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	d001      	beq.n	80109ce <nrf_enable_auto_ack+0x28>
		return NRF_ERROR;
 80109ca:	2301      	movs	r3, #1
 80109cc:	e017      	b.n	80109fe <nrf_enable_auto_ack+0x58>
	}

	reg |= 1 << pipe;
 80109ce:	78fb      	ldrb	r3, [r7, #3]
 80109d0:	2201      	movs	r2, #1
 80109d2:	fa02 f303 	lsl.w	r3, r2, r3
 80109d6:	b25a      	sxtb	r2, r3
 80109d8:	7bfb      	ldrb	r3, [r7, #15]
 80109da:	b25b      	sxtb	r3, r3
 80109dc:	4313      	orrs	r3, r2
 80109de:	b25b      	sxtb	r3, r3
 80109e0:	b2db      	uxtb	r3, r3
 80109e2:	73fb      	strb	r3, [r7, #15]

	if (nrf_write_register(dev, NRF_EN_AA, &reg) != NRF_OK) {
 80109e4:	f107 030f 	add.w	r3, r7, #15
 80109e8:	461a      	mov	r2, r3
 80109ea:	2101      	movs	r1, #1
 80109ec:	6878      	ldr	r0, [r7, #4]
 80109ee:	f7ff fd87 	bl	8010500 <nrf_write_register>
 80109f2:	4603      	mov	r3, r0
 80109f4:	2b00      	cmp	r3, #0
 80109f6:	d001      	beq.n	80109fc <nrf_enable_auto_ack+0x56>
		return NRF_ERROR;
 80109f8:	2301      	movs	r3, #1
 80109fa:	e000      	b.n	80109fe <nrf_enable_auto_ack+0x58>
	}
	return NRF_OK;
 80109fc:	2300      	movs	r3, #0
}
 80109fe:	4618      	mov	r0, r3
 8010a00:	3710      	adds	r7, #16
 8010a02:	46bd      	mov	sp, r7
 8010a04:	bd80      	pop	{r7, pc}

08010a06 <nrf_enable_crc>:

NRF_RESULT nrf_enable_crc(nrf24l01* dev, bool activate) {
 8010a06:	b580      	push	{r7, lr}
 8010a08:	b084      	sub	sp, #16
 8010a0a:	af00      	add	r7, sp, #0
 8010a0c:	6078      	str	r0, [r7, #4]
 8010a0e:	460b      	mov	r3, r1
 8010a10:	70fb      	strb	r3, [r7, #3]
	uint8_t reg = 0;
 8010a12:	2300      	movs	r3, #0
 8010a14:	73fb      	strb	r3, [r7, #15]
	if (nrf_read_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8010a16:	f107 030f 	add.w	r3, r7, #15
 8010a1a:	461a      	mov	r2, r3
 8010a1c:	2100      	movs	r1, #0
 8010a1e:	6878      	ldr	r0, [r7, #4]
 8010a20:	f7ff fd29 	bl	8010476 <nrf_read_register>
 8010a24:	4603      	mov	r3, r0
 8010a26:	2b00      	cmp	r3, #0
 8010a28:	d001      	beq.n	8010a2e <nrf_enable_crc+0x28>
		return NRF_ERROR;
 8010a2a:	2301      	movs	r3, #1
 8010a2c:	e01a      	b.n	8010a64 <nrf_enable_crc+0x5e>
	}

	if (activate) {
 8010a2e:	78fb      	ldrb	r3, [r7, #3]
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	d005      	beq.n	8010a40 <nrf_enable_crc+0x3a>
		reg |= 1 << 3;
 8010a34:	7bfb      	ldrb	r3, [r7, #15]
 8010a36:	f043 0308 	orr.w	r3, r3, #8
 8010a3a:	b2db      	uxtb	r3, r3
 8010a3c:	73fb      	strb	r3, [r7, #15]
 8010a3e:	e004      	b.n	8010a4a <nrf_enable_crc+0x44>
	} else {
		reg &= ~(1 << 3);
 8010a40:	7bfb      	ldrb	r3, [r7, #15]
 8010a42:	f023 0308 	bic.w	r3, r3, #8
 8010a46:	b2db      	uxtb	r3, r3
 8010a48:	73fb      	strb	r3, [r7, #15]
	}

	if (nrf_write_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8010a4a:	f107 030f 	add.w	r3, r7, #15
 8010a4e:	461a      	mov	r2, r3
 8010a50:	2100      	movs	r1, #0
 8010a52:	6878      	ldr	r0, [r7, #4]
 8010a54:	f7ff fd54 	bl	8010500 <nrf_write_register>
 8010a58:	4603      	mov	r3, r0
 8010a5a:	2b00      	cmp	r3, #0
 8010a5c:	d001      	beq.n	8010a62 <nrf_enable_crc+0x5c>
		return NRF_ERROR;
 8010a5e:	2301      	movs	r3, #1
 8010a60:	e000      	b.n	8010a64 <nrf_enable_crc+0x5e>
	}
	return NRF_OK;
 8010a62:	2300      	movs	r3, #0
}
 8010a64:	4618      	mov	r0, r3
 8010a66:	3710      	adds	r7, #16
 8010a68:	46bd      	mov	sp, r7
 8010a6a:	bd80      	pop	{r7, pc}

08010a6c <nrf_set_crc_width>:

NRF_RESULT nrf_set_crc_width(nrf24l01* dev, NRF_CRC_WIDTH width) {
 8010a6c:	b580      	push	{r7, lr}
 8010a6e:	b084      	sub	sp, #16
 8010a70:	af00      	add	r7, sp, #0
 8010a72:	6078      	str	r0, [r7, #4]
 8010a74:	460b      	mov	r3, r1
 8010a76:	70fb      	strb	r3, [r7, #3]
	uint8_t reg = 0;
 8010a78:	2300      	movs	r3, #0
 8010a7a:	73fb      	strb	r3, [r7, #15]
	if (nrf_read_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8010a7c:	f107 030f 	add.w	r3, r7, #15
 8010a80:	461a      	mov	r2, r3
 8010a82:	2100      	movs	r1, #0
 8010a84:	6878      	ldr	r0, [r7, #4]
 8010a86:	f7ff fcf6 	bl	8010476 <nrf_read_register>
 8010a8a:	4603      	mov	r3, r0
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	d001      	beq.n	8010a94 <nrf_set_crc_width+0x28>
		return NRF_ERROR;
 8010a90:	2301      	movs	r3, #1
 8010a92:	e01d      	b.n	8010ad0 <nrf_set_crc_width+0x64>
	}

	if (width == NRF_CRC_WIDTH_2B) {
 8010a94:	78fb      	ldrb	r3, [r7, #3]
 8010a96:	2b01      	cmp	r3, #1
 8010a98:	d105      	bne.n	8010aa6 <nrf_set_crc_width+0x3a>
		reg |= 1 << 2;
 8010a9a:	7bfb      	ldrb	r3, [r7, #15]
 8010a9c:	f043 0304 	orr.w	r3, r3, #4
 8010aa0:	b2db      	uxtb	r3, r3
 8010aa2:	73fb      	strb	r3, [r7, #15]
 8010aa4:	e004      	b.n	8010ab0 <nrf_set_crc_width+0x44>
	} else {
		reg &= ~(1 << 3);
 8010aa6:	7bfb      	ldrb	r3, [r7, #15]
 8010aa8:	f023 0308 	bic.w	r3, r3, #8
 8010aac:	b2db      	uxtb	r3, r3
 8010aae:	73fb      	strb	r3, [r7, #15]
	}

	if (nrf_write_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8010ab0:	f107 030f 	add.w	r3, r7, #15
 8010ab4:	461a      	mov	r2, r3
 8010ab6:	2100      	movs	r1, #0
 8010ab8:	6878      	ldr	r0, [r7, #4]
 8010aba:	f7ff fd21 	bl	8010500 <nrf_write_register>
 8010abe:	4603      	mov	r3, r0
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	d001      	beq.n	8010ac8 <nrf_set_crc_width+0x5c>
		return NRF_ERROR;
 8010ac4:	2301      	movs	r3, #1
 8010ac6:	e003      	b.n	8010ad0 <nrf_set_crc_width+0x64>
	}
	dev->config.crc_width = width;
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	78fa      	ldrb	r2, [r7, #3]
 8010acc:	709a      	strb	r2, [r3, #2]
	return NRF_OK;
 8010ace:	2300      	movs	r3, #0
}
 8010ad0:	4618      	mov	r0, r3
 8010ad2:	3710      	adds	r7, #16
 8010ad4:	46bd      	mov	sp, r7
 8010ad6:	bd80      	pop	{r7, pc}

08010ad8 <nrf_power_up>:

NRF_RESULT nrf_power_up(nrf24l01* dev, bool power_up) {
 8010ad8:	b580      	push	{r7, lr}
 8010ada:	b084      	sub	sp, #16
 8010adc:	af00      	add	r7, sp, #0
 8010ade:	6078      	str	r0, [r7, #4]
 8010ae0:	460b      	mov	r3, r1
 8010ae2:	70fb      	strb	r3, [r7, #3]
	uint8_t reg = 0;
 8010ae4:	2300      	movs	r3, #0
 8010ae6:	73fb      	strb	r3, [r7, #15]
	if (nrf_read_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8010ae8:	f107 030f 	add.w	r3, r7, #15
 8010aec:	461a      	mov	r2, r3
 8010aee:	2100      	movs	r1, #0
 8010af0:	6878      	ldr	r0, [r7, #4]
 8010af2:	f7ff fcc0 	bl	8010476 <nrf_read_register>
 8010af6:	4603      	mov	r3, r0
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	d001      	beq.n	8010b00 <nrf_power_up+0x28>
		return NRF_ERROR;
 8010afc:	2301      	movs	r3, #1
 8010afe:	e01a      	b.n	8010b36 <nrf_power_up+0x5e>
	}

	if (power_up) {
 8010b00:	78fb      	ldrb	r3, [r7, #3]
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	d005      	beq.n	8010b12 <nrf_power_up+0x3a>
		reg |= 1 << 1;
 8010b06:	7bfb      	ldrb	r3, [r7, #15]
 8010b08:	f043 0302 	orr.w	r3, r3, #2
 8010b0c:	b2db      	uxtb	r3, r3
 8010b0e:	73fb      	strb	r3, [r7, #15]
 8010b10:	e004      	b.n	8010b1c <nrf_power_up+0x44>
	} else {
		reg &= ~(1 << 1);
 8010b12:	7bfb      	ldrb	r3, [r7, #15]
 8010b14:	f023 0302 	bic.w	r3, r3, #2
 8010b18:	b2db      	uxtb	r3, r3
 8010b1a:	73fb      	strb	r3, [r7, #15]
	}

	if (nrf_write_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8010b1c:	f107 030f 	add.w	r3, r7, #15
 8010b20:	461a      	mov	r2, r3
 8010b22:	2100      	movs	r1, #0
 8010b24:	6878      	ldr	r0, [r7, #4]
 8010b26:	f7ff fceb 	bl	8010500 <nrf_write_register>
 8010b2a:	4603      	mov	r3, r0
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	d001      	beq.n	8010b34 <nrf_power_up+0x5c>
		return NRF_ERROR;
 8010b30:	2301      	movs	r3, #1
 8010b32:	e000      	b.n	8010b36 <nrf_power_up+0x5e>
	}
	return NRF_OK;
 8010b34:	2300      	movs	r3, #0
}
 8010b36:	4618      	mov	r0, r3
 8010b38:	3710      	adds	r7, #16
 8010b3a:	46bd      	mov	sp, r7
 8010b3c:	bd80      	pop	{r7, pc}

08010b3e <nrf_rx_tx_control>:

NRF_RESULT nrf_rx_tx_control(nrf24l01* dev, NRF_TXRX_STATE rx) {
 8010b3e:	b580      	push	{r7, lr}
 8010b40:	b084      	sub	sp, #16
 8010b42:	af00      	add	r7, sp, #0
 8010b44:	6078      	str	r0, [r7, #4]
 8010b46:	460b      	mov	r3, r1
 8010b48:	70fb      	strb	r3, [r7, #3]
	uint8_t reg = 0;
 8010b4a:	2300      	movs	r3, #0
 8010b4c:	73fb      	strb	r3, [r7, #15]
	if (nrf_read_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8010b4e:	f107 030f 	add.w	r3, r7, #15
 8010b52:	461a      	mov	r2, r3
 8010b54:	2100      	movs	r1, #0
 8010b56:	6878      	ldr	r0, [r7, #4]
 8010b58:	f7ff fc8d 	bl	8010476 <nrf_read_register>
 8010b5c:	4603      	mov	r3, r0
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	d001      	beq.n	8010b66 <nrf_rx_tx_control+0x28>
		return NRF_ERROR;
 8010b62:	2301      	movs	r3, #1
 8010b64:	e01a      	b.n	8010b9c <nrf_rx_tx_control+0x5e>
	}

	if (rx) {
 8010b66:	78fb      	ldrb	r3, [r7, #3]
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	d005      	beq.n	8010b78 <nrf_rx_tx_control+0x3a>
		reg |= 1;
 8010b6c:	7bfb      	ldrb	r3, [r7, #15]
 8010b6e:	f043 0301 	orr.w	r3, r3, #1
 8010b72:	b2db      	uxtb	r3, r3
 8010b74:	73fb      	strb	r3, [r7, #15]
 8010b76:	e004      	b.n	8010b82 <nrf_rx_tx_control+0x44>
	} else {
		reg &= ~(1);
 8010b78:	7bfb      	ldrb	r3, [r7, #15]
 8010b7a:	f023 0301 	bic.w	r3, r3, #1
 8010b7e:	b2db      	uxtb	r3, r3
 8010b80:	73fb      	strb	r3, [r7, #15]
	}

	if (nrf_write_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8010b82:	f107 030f 	add.w	r3, r7, #15
 8010b86:	461a      	mov	r2, r3
 8010b88:	2100      	movs	r1, #0
 8010b8a:	6878      	ldr	r0, [r7, #4]
 8010b8c:	f7ff fcb8 	bl	8010500 <nrf_write_register>
 8010b90:	4603      	mov	r3, r0
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	d001      	beq.n	8010b9a <nrf_rx_tx_control+0x5c>
		return NRF_ERROR;
 8010b96:	2301      	movs	r3, #1
 8010b98:	e000      	b.n	8010b9c <nrf_rx_tx_control+0x5e>
	}
	return NRF_OK;
 8010b9a:	2300      	movs	r3, #0
}
 8010b9c:	4618      	mov	r0, r3
 8010b9e:	3710      	adds	r7, #16
 8010ba0:	46bd      	mov	sp, r7
 8010ba2:	bd80      	pop	{r7, pc}

08010ba4 <nrf_enable_rx_data_ready_irq>:

NRF_RESULT nrf_enable_rx_data_ready_irq(nrf24l01* dev, bool activate) {
 8010ba4:	b580      	push	{r7, lr}
 8010ba6:	b084      	sub	sp, #16
 8010ba8:	af00      	add	r7, sp, #0
 8010baa:	6078      	str	r0, [r7, #4]
 8010bac:	460b      	mov	r3, r1
 8010bae:	70fb      	strb	r3, [r7, #3]
	uint8_t reg = 0;
 8010bb0:	2300      	movs	r3, #0
 8010bb2:	73fb      	strb	r3, [r7, #15]
	if (nrf_read_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8010bb4:	f107 030f 	add.w	r3, r7, #15
 8010bb8:	461a      	mov	r2, r3
 8010bba:	2100      	movs	r1, #0
 8010bbc:	6878      	ldr	r0, [r7, #4]
 8010bbe:	f7ff fc5a 	bl	8010476 <nrf_read_register>
 8010bc2:	4603      	mov	r3, r0
 8010bc4:	2b00      	cmp	r3, #0
 8010bc6:	d001      	beq.n	8010bcc <nrf_enable_rx_data_ready_irq+0x28>
		return NRF_ERROR;
 8010bc8:	2301      	movs	r3, #1
 8010bca:	e01d      	b.n	8010c08 <nrf_enable_rx_data_ready_irq+0x64>
	}

	if (!activate) {
 8010bcc:	78fb      	ldrb	r3, [r7, #3]
 8010bce:	f083 0301 	eor.w	r3, r3, #1
 8010bd2:	b2db      	uxtb	r3, r3
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	d005      	beq.n	8010be4 <nrf_enable_rx_data_ready_irq+0x40>
		reg |= 1 << 6;
 8010bd8:	7bfb      	ldrb	r3, [r7, #15]
 8010bda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010bde:	b2db      	uxtb	r3, r3
 8010be0:	73fb      	strb	r3, [r7, #15]
 8010be2:	e004      	b.n	8010bee <nrf_enable_rx_data_ready_irq+0x4a>
	} else {
		reg &= ~(1 << 6);
 8010be4:	7bfb      	ldrb	r3, [r7, #15]
 8010be6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010bea:	b2db      	uxtb	r3, r3
 8010bec:	73fb      	strb	r3, [r7, #15]
	}

	if (nrf_write_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8010bee:	f107 030f 	add.w	r3, r7, #15
 8010bf2:	461a      	mov	r2, r3
 8010bf4:	2100      	movs	r1, #0
 8010bf6:	6878      	ldr	r0, [r7, #4]
 8010bf8:	f7ff fc82 	bl	8010500 <nrf_write_register>
 8010bfc:	4603      	mov	r3, r0
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	d001      	beq.n	8010c06 <nrf_enable_rx_data_ready_irq+0x62>
		return NRF_ERROR;
 8010c02:	2301      	movs	r3, #1
 8010c04:	e000      	b.n	8010c08 <nrf_enable_rx_data_ready_irq+0x64>
	}
	return NRF_OK;
 8010c06:	2300      	movs	r3, #0
}
 8010c08:	4618      	mov	r0, r3
 8010c0a:	3710      	adds	r7, #16
 8010c0c:	46bd      	mov	sp, r7
 8010c0e:	bd80      	pop	{r7, pc}

08010c10 <nrf_enable_tx_data_sent_irq>:

NRF_RESULT nrf_enable_tx_data_sent_irq(nrf24l01* dev, bool activate) {
 8010c10:	b580      	push	{r7, lr}
 8010c12:	b084      	sub	sp, #16
 8010c14:	af00      	add	r7, sp, #0
 8010c16:	6078      	str	r0, [r7, #4]
 8010c18:	460b      	mov	r3, r1
 8010c1a:	70fb      	strb	r3, [r7, #3]
	uint8_t reg = 0;
 8010c1c:	2300      	movs	r3, #0
 8010c1e:	73fb      	strb	r3, [r7, #15]
	if (nrf_read_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8010c20:	f107 030f 	add.w	r3, r7, #15
 8010c24:	461a      	mov	r2, r3
 8010c26:	2100      	movs	r1, #0
 8010c28:	6878      	ldr	r0, [r7, #4]
 8010c2a:	f7ff fc24 	bl	8010476 <nrf_read_register>
 8010c2e:	4603      	mov	r3, r0
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	d001      	beq.n	8010c38 <nrf_enable_tx_data_sent_irq+0x28>
		return NRF_ERROR;
 8010c34:	2301      	movs	r3, #1
 8010c36:	e01d      	b.n	8010c74 <nrf_enable_tx_data_sent_irq+0x64>
	}
	if (!activate) {
 8010c38:	78fb      	ldrb	r3, [r7, #3]
 8010c3a:	f083 0301 	eor.w	r3, r3, #1
 8010c3e:	b2db      	uxtb	r3, r3
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	d005      	beq.n	8010c50 <nrf_enable_tx_data_sent_irq+0x40>
		reg |= 1 << 5;
 8010c44:	7bfb      	ldrb	r3, [r7, #15]
 8010c46:	f043 0320 	orr.w	r3, r3, #32
 8010c4a:	b2db      	uxtb	r3, r3
 8010c4c:	73fb      	strb	r3, [r7, #15]
 8010c4e:	e004      	b.n	8010c5a <nrf_enable_tx_data_sent_irq+0x4a>
	} else {
		reg &= ~(1 << 5);
 8010c50:	7bfb      	ldrb	r3, [r7, #15]
 8010c52:	f023 0320 	bic.w	r3, r3, #32
 8010c56:	b2db      	uxtb	r3, r3
 8010c58:	73fb      	strb	r3, [r7, #15]
	}
	if (nrf_write_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8010c5a:	f107 030f 	add.w	r3, r7, #15
 8010c5e:	461a      	mov	r2, r3
 8010c60:	2100      	movs	r1, #0
 8010c62:	6878      	ldr	r0, [r7, #4]
 8010c64:	f7ff fc4c 	bl	8010500 <nrf_write_register>
 8010c68:	4603      	mov	r3, r0
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	d001      	beq.n	8010c72 <nrf_enable_tx_data_sent_irq+0x62>
		return NRF_ERROR;
 8010c6e:	2301      	movs	r3, #1
 8010c70:	e000      	b.n	8010c74 <nrf_enable_tx_data_sent_irq+0x64>
	}
	return NRF_OK;
 8010c72:	2300      	movs	r3, #0
}
 8010c74:	4618      	mov	r0, r3
 8010c76:	3710      	adds	r7, #16
 8010c78:	46bd      	mov	sp, r7
 8010c7a:	bd80      	pop	{r7, pc}

08010c7c <nrf_enable_max_retransmit_irq>:

NRF_RESULT nrf_enable_max_retransmit_irq(nrf24l01* dev, bool activate) {
 8010c7c:	b580      	push	{r7, lr}
 8010c7e:	b084      	sub	sp, #16
 8010c80:	af00      	add	r7, sp, #0
 8010c82:	6078      	str	r0, [r7, #4]
 8010c84:	460b      	mov	r3, r1
 8010c86:	70fb      	strb	r3, [r7, #3]
	uint8_t reg = 0;
 8010c88:	2300      	movs	r3, #0
 8010c8a:	73fb      	strb	r3, [r7, #15]
	if (nrf_read_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8010c8c:	f107 030f 	add.w	r3, r7, #15
 8010c90:	461a      	mov	r2, r3
 8010c92:	2100      	movs	r1, #0
 8010c94:	6878      	ldr	r0, [r7, #4]
 8010c96:	f7ff fbee 	bl	8010476 <nrf_read_register>
 8010c9a:	4603      	mov	r3, r0
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d001      	beq.n	8010ca4 <nrf_enable_max_retransmit_irq+0x28>
		return NRF_ERROR;
 8010ca0:	2301      	movs	r3, #1
 8010ca2:	e01d      	b.n	8010ce0 <nrf_enable_max_retransmit_irq+0x64>
	}
	if (!activate) {
 8010ca4:	78fb      	ldrb	r3, [r7, #3]
 8010ca6:	f083 0301 	eor.w	r3, r3, #1
 8010caa:	b2db      	uxtb	r3, r3
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	d005      	beq.n	8010cbc <nrf_enable_max_retransmit_irq+0x40>
		reg |= 1 << 4;
 8010cb0:	7bfb      	ldrb	r3, [r7, #15]
 8010cb2:	f043 0310 	orr.w	r3, r3, #16
 8010cb6:	b2db      	uxtb	r3, r3
 8010cb8:	73fb      	strb	r3, [r7, #15]
 8010cba:	e004      	b.n	8010cc6 <nrf_enable_max_retransmit_irq+0x4a>
	} else {
		reg &= ~(1 << 4);
 8010cbc:	7bfb      	ldrb	r3, [r7, #15]
 8010cbe:	f023 0310 	bic.w	r3, r3, #16
 8010cc2:	b2db      	uxtb	r3, r3
 8010cc4:	73fb      	strb	r3, [r7, #15]
	}
	if (nrf_write_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8010cc6:	f107 030f 	add.w	r3, r7, #15
 8010cca:	461a      	mov	r2, r3
 8010ccc:	2100      	movs	r1, #0
 8010cce:	6878      	ldr	r0, [r7, #4]
 8010cd0:	f7ff fc16 	bl	8010500 <nrf_write_register>
 8010cd4:	4603      	mov	r3, r0
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	d001      	beq.n	8010cde <nrf_enable_max_retransmit_irq+0x62>
		return NRF_ERROR;
 8010cda:	2301      	movs	r3, #1
 8010cdc:	e000      	b.n	8010ce0 <nrf_enable_max_retransmit_irq+0x64>
	}
	return NRF_OK;
 8010cde:	2300      	movs	r3, #0
}
 8010ce0:	4618      	mov	r0, r3
 8010ce2:	3710      	adds	r7, #16
 8010ce4:	46bd      	mov	sp, r7
 8010ce6:	bd80      	pop	{r7, pc}

08010ce8 <nrf_set_rx_address_p0>:

NRF_RESULT nrf_set_rx_address_p0(nrf24l01* dev, const uint8_t* address) {
 8010ce8:	b580      	push	{r7, lr}
 8010cea:	b086      	sub	sp, #24
 8010cec:	af02      	add	r7, sp, #8
 8010cee:	6078      	str	r0, [r7, #4]
 8010cf0:	6039      	str	r1, [r7, #0]
	uint8_t rx[5];
	if (nrf_send_command(dev, NRF_CMD_W_REGISTER | NRF_RX_ADDR_P0, address, rx, 5) != NRF_OK) {
 8010cf2:	f107 0208 	add.w	r2, r7, #8
 8010cf6:	2305      	movs	r3, #5
 8010cf8:	9300      	str	r3, [sp, #0]
 8010cfa:	4613      	mov	r3, r2
 8010cfc:	683a      	ldr	r2, [r7, #0]
 8010cfe:	212a      	movs	r1, #42	; 0x2a
 8010d00:	6878      	ldr	r0, [r7, #4]
 8010d02:	f7ff fa23 	bl	801014c <nrf_send_command>
 8010d06:	4603      	mov	r3, r0
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	d001      	beq.n	8010d10 <nrf_set_rx_address_p0+0x28>
		return NRF_ERROR;
 8010d0c:	2301      	movs	r3, #1
 8010d0e:	e003      	b.n	8010d18 <nrf_set_rx_address_p0+0x30>
	}
	dev->config.rx_address = address;
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	683a      	ldr	r2, [r7, #0]
 8010d14:	609a      	str	r2, [r3, #8]
	return NRF_OK;
 8010d16:	2300      	movs	r3, #0
}
 8010d18:	4618      	mov	r0, r3
 8010d1a:	3710      	adds	r7, #16
 8010d1c:	46bd      	mov	sp, r7
 8010d1e:	bd80      	pop	{r7, pc}

08010d20 <nrf_set_tx_address>:
	}
	dev->config.rx_address = address;
	return NRF_OK;
}

NRF_RESULT nrf_set_tx_address(nrf24l01* dev, const uint8_t* address) {
 8010d20:	b580      	push	{r7, lr}
 8010d22:	b086      	sub	sp, #24
 8010d24:	af02      	add	r7, sp, #8
 8010d26:	6078      	str	r0, [r7, #4]
 8010d28:	6039      	str	r1, [r7, #0]
	uint8_t rx[5];
	if (nrf_send_command(dev, NRF_CMD_W_REGISTER | NRF_TX_ADDR, address, rx, 5) != NRF_OK) {
 8010d2a:	f107 0208 	add.w	r2, r7, #8
 8010d2e:	2305      	movs	r3, #5
 8010d30:	9300      	str	r3, [sp, #0]
 8010d32:	4613      	mov	r3, r2
 8010d34:	683a      	ldr	r2, [r7, #0]
 8010d36:	2130      	movs	r1, #48	; 0x30
 8010d38:	6878      	ldr	r0, [r7, #4]
 8010d3a:	f7ff fa07 	bl	801014c <nrf_send_command>
 8010d3e:	4603      	mov	r3, r0
 8010d40:	2b00      	cmp	r3, #0
 8010d42:	d001      	beq.n	8010d48 <nrf_set_tx_address+0x28>
		return NRF_ERROR;
 8010d44:	2301      	movs	r3, #1
 8010d46:	e003      	b.n	8010d50 <nrf_set_tx_address+0x30>
	}
	dev->config.tx_address = address;
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	683a      	ldr	r2, [r7, #0]
 8010d4c:	60da      	str	r2, [r3, #12]
	return NRF_OK;
 8010d4e:	2300      	movs	r3, #0
}
 8010d50:	4618      	mov	r0, r3
 8010d52:	3710      	adds	r7, #16
 8010d54:	46bd      	mov	sp, r7
 8010d56:	bd80      	pop	{r7, pc}

08010d58 <nrf_set_rx_payload_width_p0>:

NRF_RESULT nrf_set_rx_payload_width_p0(nrf24l01* dev, uint8_t width) {
 8010d58:	b580      	push	{r7, lr}
 8010d5a:	b082      	sub	sp, #8
 8010d5c:	af00      	add	r7, sp, #0
 8010d5e:	6078      	str	r0, [r7, #4]
 8010d60:	460b      	mov	r3, r1
 8010d62:	70fb      	strb	r3, [r7, #3]
	width &= 0x3F;
 8010d64:	78fb      	ldrb	r3, [r7, #3]
 8010d66:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010d6a:	b2db      	uxtb	r3, r3
 8010d6c:	70fb      	strb	r3, [r7, #3]
	if (nrf_write_register(dev, NRF_RX_PW_P0, &width) != NRF_OK) {
 8010d6e:	1cfb      	adds	r3, r7, #3
 8010d70:	461a      	mov	r2, r3
 8010d72:	2111      	movs	r1, #17
 8010d74:	6878      	ldr	r0, [r7, #4]
 8010d76:	f7ff fbc3 	bl	8010500 <nrf_write_register>
 8010d7a:	4603      	mov	r3, r0
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	d004      	beq.n	8010d8a <nrf_set_rx_payload_width_p0+0x32>
		dev->config.payload_length = 0;
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	2200      	movs	r2, #0
 8010d84:	711a      	strb	r2, [r3, #4]
		return NRF_ERROR;
 8010d86:	2301      	movs	r3, #1
 8010d88:	e003      	b.n	8010d92 <nrf_set_rx_payload_width_p0+0x3a>
	}
	dev->config.payload_length = width;
 8010d8a:	78fa      	ldrb	r2, [r7, #3]
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	711a      	strb	r2, [r3, #4]
	return NRF_OK;
 8010d90:	2300      	movs	r3, #0
}
 8010d92:	4618      	mov	r0, r3
 8010d94:	3708      	adds	r7, #8
 8010d96:	46bd      	mov	sp, r7
 8010d98:	bd80      	pop	{r7, pc}

08010d9a <nrf_receive_packet>:
	} // wait for end of transmittion

	return dev->tx_result;
}

const uint8_t* nrf_receive_packet(nrf24l01* dev) {
 8010d9a:	b580      	push	{r7, lr}
 8010d9c:	b082      	sub	sp, #8
 8010d9e:	af00      	add	r7, sp, #0
 8010da0:	6078      	str	r0, [r7, #4]

	dev->rx_busy = 1;
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	2201      	movs	r2, #1
 8010da6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

	ce_reset(dev);
 8010daa:	6878      	ldr	r0, [r7, #4]
 8010dac:	f7ff f86a 	bl	800fe84 <ce_reset>
	nrf_rx_tx_control(dev, NRF_STATE_RX);
 8010db0:	2101      	movs	r1, #1
 8010db2:	6878      	ldr	r0, [r7, #4]
 8010db4:	f7ff fec3 	bl	8010b3e <nrf_rx_tx_control>
	ce_set(dev);
 8010db8:	6878      	ldr	r0, [r7, #4]
 8010dba:	f7ff f853 	bl	800fe64 <ce_set>

	while (dev->rx_busy == 1) {
 8010dbe:	bf00      	nop
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8010dc6:	b2db      	uxtb	r3, r3
 8010dc8:	2b01      	cmp	r3, #1
 8010dca:	d0f9      	beq.n	8010dc0 <nrf_receive_packet+0x26>
	} // wait for reception

	return dev->config.rx_buffer;
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	691b      	ldr	r3, [r3, #16]
}
 8010dd0:	4618      	mov	r0, r3
 8010dd2:	3708      	adds	r7, #8
 8010dd4:	46bd      	mov	sp, r7
 8010dd6:	bd80      	pop	{r7, pc}

08010dd8 <Reporter_Reset>:
char POSITION_DATA[REPORT_POS_DATA_LENGTH];
char PAYLOAD[REPORT_POS_HEADER_LENGTH + REPORT_POS_DATA_LENGTH];
report_t report;

// function list
void Reporter_Reset(void) {
 8010dd8:	b580      	push	{r7, lr}
 8010dda:	af00      	add	r7, sp, #0
	// set initial data
	strcpy(report.header.prefix, "@P");
 8010ddc:	4b32      	ldr	r3, [pc, #200]	; (8010ea8 <Reporter_Reset+0xd0>)
 8010dde:	4a33      	ldr	r2, [pc, #204]	; (8010eac <Reporter_Reset+0xd4>)
 8010de0:	6812      	ldr	r2, [r2, #0]
 8010de2:	4611      	mov	r1, r2
 8010de4:	8019      	strh	r1, [r3, #0]
 8010de6:	3302      	adds	r3, #2
 8010de8:	0c12      	lsrs	r2, r2, #16
 8010dea:	701a      	strb	r2, [r3, #0]
	strcpy(report.header.unit_id, "354453");
 8010dec:	4b30      	ldr	r3, [pc, #192]	; (8010eb0 <Reporter_Reset+0xd8>)
 8010dee:	4a31      	ldr	r2, [pc, #196]	; (8010eb4 <Reporter_Reset+0xdc>)
 8010df0:	6810      	ldr	r0, [r2, #0]
 8010df2:	6018      	str	r0, [r3, #0]
 8010df4:	8891      	ldrh	r1, [r2, #4]
 8010df6:	7992      	ldrb	r2, [r2, #6]
 8010df8:	8099      	strh	r1, [r3, #4]
 8010dfa:	719a      	strb	r2, [r3, #6]
	report.header.crc = 0;
 8010dfc:	4b2a      	ldr	r3, [pc, #168]	; (8010ea8 <Reporter_Reset+0xd0>)
 8010dfe:	2200      	movs	r2, #0
 8010e00:	809a      	strh	r2, [r3, #4]
	report.header.length = 0;
 8010e02:	4b29      	ldr	r3, [pc, #164]	; (8010ea8 <Reporter_Reset+0xd0>)
 8010e04:	2200      	movs	r2, #0
 8010e06:	80da      	strh	r2, [r3, #6]
	report.header.seq_id = 0;
 8010e08:	4b27      	ldr	r3, [pc, #156]	; (8010ea8 <Reporter_Reset+0xd0>)
 8010e0a:	2200      	movs	r2, #0
 8010e0c:	811a      	strh	r2, [r3, #8]

	strcpy(report.data.datetime_rtc, "");
 8010e0e:	4b26      	ldr	r3, [pc, #152]	; (8010ea8 <Reporter_Reset+0xd0>)
 8010e10:	2200      	movs	r2, #0
 8010e12:	751a      	strb	r2, [r3, #20]
	strcpy(report.data.datetime_sending, "");
 8010e14:	4b24      	ldr	r3, [pc, #144]	; (8010ea8 <Reporter_Reset+0xd0>)
 8010e16:	2200      	movs	r2, #0
 8010e18:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	strcpy(report.data.speed, "0");
 8010e1c:	4a26      	ldr	r2, [pc, #152]	; (8010eb8 <Reporter_Reset+0xe0>)
 8010e1e:	4b27      	ldr	r3, [pc, #156]	; (8010ebc <Reporter_Reset+0xe4>)
 8010e20:	881b      	ldrh	r3, [r3, #0]
 8010e22:	8013      	strh	r3, [r2, #0]
	strcpy(report.data.driver_id, "31313");
 8010e24:	4b26      	ldr	r3, [pc, #152]	; (8010ec0 <Reporter_Reset+0xe8>)
 8010e26:	4a27      	ldr	r2, [pc, #156]	; (8010ec4 <Reporter_Reset+0xec>)
 8010e28:	6810      	ldr	r0, [r2, #0]
 8010e2a:	6018      	str	r0, [r3, #0]
 8010e2c:	8892      	ldrh	r2, [r2, #4]
 8010e2e:	809a      	strh	r2, [r3, #4]
	strcpy(report.data.message, "");
 8010e30:	4b1d      	ldr	r3, [pc, #116]	; (8010ea8 <Reporter_Reset+0xd0>)
 8010e32:	2200      	movs	r2, #0
 8010e34:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	report.data.reportd_id = REPORT_OK;
 8010e38:	4b1b      	ldr	r3, [pc, #108]	; (8010ea8 <Reporter_Reset+0xd0>)
 8010e3a:	2200      	movs	r2, #0
 8010e3c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	report.data.odometer = Flash_Get_Odometer();
 8010e40:	f7fd fc38 	bl	800e6b4 <Flash_Get_Odometer>
 8010e44:	4602      	mov	r2, r0
 8010e46:	4b18      	ldr	r3, [pc, #96]	; (8010ea8 <Reporter_Reset+0xd0>)
 8010e48:	635a      	str	r2, [r3, #52]	; 0x34
	report.data.status_input = 0;
 8010e4a:	4b17      	ldr	r3, [pc, #92]	; (8010ea8 <Reporter_Reset+0xd0>)
 8010e4c:	2200      	movs	r2, #0
 8010e4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	report.data.status_output = 0;
 8010e52:	4b15      	ldr	r3, [pc, #84]	; (8010ea8 <Reporter_Reset+0xd0>)
 8010e54:	2200      	movs	r2, #0
 8010e56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	report.data.analog_input = 0;
 8010e5a:	4b13      	ldr	r3, [pc, #76]	; (8010ea8 <Reporter_Reset+0xd0>)
 8010e5c:	2200      	movs	r2, #0
 8010e5e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	report.data.temp_sensor1 = 2000;
 8010e62:	4b11      	ldr	r3, [pc, #68]	; (8010ea8 <Reporter_Reset+0xd0>)
 8010e64:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8010e68:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	report.data.temp_sensor2 = 2000;
 8010e6c:	4b0e      	ldr	r3, [pc, #56]	; (8010ea8 <Reporter_Reset+0xd0>)
 8010e6e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8010e72:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

	strcpy(report.data.gps.datetime, "");
 8010e76:	4b0c      	ldr	r3, [pc, #48]	; (8010ea8 <Reporter_Reset+0xd0>)
 8010e78:	2200      	movs	r2, #0
 8010e7a:	f883 224c 	strb.w	r2, [r3, #588]	; 0x24c
	strcpy(report.data.gps.longitude, "0");
 8010e7e:	4a12      	ldr	r2, [pc, #72]	; (8010ec8 <Reporter_Reset+0xf0>)
 8010e80:	4b0e      	ldr	r3, [pc, #56]	; (8010ebc <Reporter_Reset+0xe4>)
 8010e82:	881b      	ldrh	r3, [r3, #0]
 8010e84:	8013      	strh	r3, [r2, #0]
	strcpy(report.data.gps.latitude, "0");
 8010e86:	4a11      	ldr	r2, [pc, #68]	; (8010ecc <Reporter_Reset+0xf4>)
 8010e88:	4b0c      	ldr	r3, [pc, #48]	; (8010ebc <Reporter_Reset+0xe4>)
 8010e8a:	881b      	ldrh	r3, [r3, #0]
 8010e8c:	8013      	strh	r3, [r2, #0]
	strcpy(report.data.gps.heading, "108");
 8010e8e:	4b10      	ldr	r3, [pc, #64]	; (8010ed0 <Reporter_Reset+0xf8>)
 8010e90:	4a10      	ldr	r2, [pc, #64]	; (8010ed4 <Reporter_Reset+0xfc>)
 8010e92:	6810      	ldr	r0, [r2, #0]
 8010e94:	6018      	str	r0, [r3, #0]
	strcpy(report.data.gps.hdop, "0");
 8010e96:	4b10      	ldr	r3, [pc, #64]	; (8010ed8 <Reporter_Reset+0x100>)
 8010e98:	2230      	movs	r2, #48	; 0x30
 8010e9a:	801a      	strh	r2, [r3, #0]
	strcpy(report.data.gps.datetime, "");
 8010e9c:	4b02      	ldr	r3, [pc, #8]	; (8010ea8 <Reporter_Reset+0xd0>)
 8010e9e:	2200      	movs	r2, #0
 8010ea0:	f883 224c 	strb.w	r2, [r3, #588]	; 0x24c
}
 8010ea4:	bf00      	nop
 8010ea6:	bd80      	pop	{r7, pc}
 8010ea8:	20008194 	.word	0x20008194
 8010eac:	08018c5c 	.word	0x08018c5c
 8010eb0:	2000819e 	.word	0x2000819e
 8010eb4:	08018c60 	.word	0x08018c60
 8010eb8:	200081cd 	.word	0x200081cd
 8010ebc:	08018c68 	.word	0x08018c68
 8010ec0:	200081d6 	.word	0x200081d6
 8010ec4:	08018c6c 	.word	0x08018c6c
 8010ec8:	200083ef 	.word	0x200083ef
 8010ecc:	20008403 	.word	0x20008403
 8010ed0:	20008417 	.word	0x20008417
 8010ed4:	08018c74 	.word	0x08018c74
 8010ed8:	2000841c 	.word	0x2000841c

08010edc <Reporter_Set_Message>:

void Reporter_Set_Message(char* msg) {
 8010edc:	b580      	push	{r7, lr}
 8010ede:	b082      	sub	sp, #8
 8010ee0:	af00      	add	r7, sp, #0
 8010ee2:	6078      	str	r0, [r7, #4]
	sprintf(report.data.message, "%s\x1E", msg);
 8010ee4:	687a      	ldr	r2, [r7, #4]
 8010ee6:	4904      	ldr	r1, [pc, #16]	; (8010ef8 <Reporter_Set_Message+0x1c>)
 8010ee8:	4804      	ldr	r0, [pc, #16]	; (8010efc <Reporter_Set_Message+0x20>)
 8010eea:	f004 f951 	bl	8015190 <siprintf>
}
 8010eee:	bf00      	nop
 8010ef0:	3708      	adds	r7, #8
 8010ef2:	46bd      	mov	sp, r7
 8010ef4:	bd80      	pop	{r7, pc}
 8010ef6:	bf00      	nop
 8010ef8:	08018c78 	.word	0x08018c78
 8010efc:	200081ec 	.word	0x200081ec

08010f00 <Reporter_Set_Report_ID>:

void Reporter_Set_Report_ID(report_id_t reportID) {
 8010f00:	b480      	push	{r7}
 8010f02:	b083      	sub	sp, #12
 8010f04:	af00      	add	r7, sp, #0
 8010f06:	4603      	mov	r3, r0
 8010f08:	71fb      	strb	r3, [r7, #7]
	report.data.reportd_id = reportID;
 8010f0a:	4a05      	ldr	r2, [pc, #20]	; (8010f20 <Reporter_Set_Report_ID+0x20>)
 8010f0c:	79fb      	ldrb	r3, [r7, #7]
 8010f0e:	f882 3032 	strb.w	r3, [r2, #50]	; 0x32
}
 8010f12:	bf00      	nop
 8010f14:	370c      	adds	r7, #12
 8010f16:	46bd      	mov	sp, r7
 8010f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f1c:	4770      	bx	lr
 8010f1e:	bf00      	nop
 8010f20:	20008194 	.word	0x20008194

08010f24 <Reporter_Convert_GPS>:

void Reporter_Convert_GPS(gps_t *hgps) {
 8010f24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010f26:	ed2d 8b02 	vpush	{d8}
 8010f2a:	b087      	sub	sp, #28
 8010f2c:	af04      	add	r7, sp, #16
 8010f2e:	6078      	str	r0, [r7, #4]
	// parse gps data
	if (hgps->fix > 0) {
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	7c5b      	ldrb	r3, [r3, #17]
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	d069      	beq.n	801100c <Reporter_Convert_GPS+0xe8>
		Reporter_Set_Odometer(report.data.odometer + (gps_to_speed(hgps->speed, gps_speed_mps) * REPORT_INTERVAL));
 8010f38:	4b37      	ldr	r3, [pc, #220]	; (8011018 <Reporter_Convert_GPS+0xf4>)
 8010f3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f3c:	ee07 3a90 	vmov	s15, r3
 8010f40:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8010f4a:	2002      	movs	r0, #2
 8010f4c:	eeb0 0a67 	vmov.f32	s0, s15
 8010f50:	f7fe fed0 	bl	800fcf4 <gps_to_speed>
 8010f54:	eeb0 7a40 	vmov.f32	s14, s0
 8010f58:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 8010f5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010f60:	ee78 7a27 	vadd.f32	s15, s16, s15
 8010f64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010f68:	ee17 0a90 	vmov	r0, s15
 8010f6c:	f000 f8f4 	bl	8011158 <Reporter_Set_Odometer>
		ftoa(hgps->latitude, report.data.gps.latitude, 6);
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	edd3 7a00 	vldr	s15, [r3]
 8010f76:	2106      	movs	r1, #6
 8010f78:	4828      	ldr	r0, [pc, #160]	; (801101c <Reporter_Convert_GPS+0xf8>)
 8010f7a:	eeb0 0a67 	vmov.f32	s0, s15
 8010f7e:	f7fc fc1b 	bl	800d7b8 <ftoa>
		ftoa(hgps->longitude, report.data.gps.longitude, 6);
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	edd3 7a01 	vldr	s15, [r3, #4]
 8010f88:	2106      	movs	r1, #6
 8010f8a:	4825      	ldr	r0, [pc, #148]	; (8011020 <Reporter_Convert_GPS+0xfc>)
 8010f8c:	eeb0 0a67 	vmov.f32	s0, s15
 8010f90:	f7fc fc12 	bl	800d7b8 <ftoa>
		ftoa(hgps->dop_h, report.data.gps.hdop, 3);
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	edd3 7a06 	vldr	s15, [r3, #24]
 8010f9a:	2103      	movs	r1, #3
 8010f9c:	4821      	ldr	r0, [pc, #132]	; (8011024 <Reporter_Convert_GPS+0x100>)
 8010f9e:	eeb0 0a67 	vmov.f32	s0, s15
 8010fa2:	f7fc fc09 	bl	800d7b8 <ftoa>
		ftoa(gps_to_speed(hgps->speed, gps_speed_kph), report.data.speed, 1);
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8010fac:	2001      	movs	r0, #1
 8010fae:	eeb0 0a67 	vmov.f32	s0, s15
 8010fb2:	f7fe fe9f 	bl	800fcf4 <gps_to_speed>
 8010fb6:	eef0 7a40 	vmov.f32	s15, s0
 8010fba:	2101      	movs	r1, #1
 8010fbc:	481a      	ldr	r0, [pc, #104]	; (8011028 <Reporter_Convert_GPS+0x104>)
 8010fbe:	eeb0 0a67 	vmov.f32	s0, s15
 8010fc2:	f7fc fbf9 	bl	800d7b8 <ftoa>
		sprintf(report.data.gps.datetime, "20%02d%02d%02d%02d%02d%02d", hgps->year, hgps->month, hgps->date, RTC_Offset(hgps->hours, GMT_TIME),
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010fcc:	461d      	mov	r5, r3
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010fd4:	461e      	mov	r6, r3
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010fdc:	461c      	mov	r4, r3
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	7c9b      	ldrb	r3, [r3, #18]
 8010fe2:	2107      	movs	r1, #7
 8010fe4:	4618      	mov	r0, r3
 8010fe6:	f000 f983 	bl	80112f0 <RTC_Offset>
 8010fea:	4603      	mov	r3, r0
 8010fec:	461a      	mov	r2, r3
				hgps->minutes, hgps->seconds);
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	7cdb      	ldrb	r3, [r3, #19]
		sprintf(report.data.gps.datetime, "20%02d%02d%02d%02d%02d%02d", hgps->year, hgps->month, hgps->date, RTC_Offset(hgps->hours, GMT_TIME),
 8010ff2:	4619      	mov	r1, r3
				hgps->minutes, hgps->seconds);
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	7d1b      	ldrb	r3, [r3, #20]
		sprintf(report.data.gps.datetime, "20%02d%02d%02d%02d%02d%02d", hgps->year, hgps->month, hgps->date, RTC_Offset(hgps->hours, GMT_TIME),
 8010ff8:	9303      	str	r3, [sp, #12]
 8010ffa:	9102      	str	r1, [sp, #8]
 8010ffc:	9201      	str	r2, [sp, #4]
 8010ffe:	9400      	str	r4, [sp, #0]
 8011000:	4633      	mov	r3, r6
 8011002:	462a      	mov	r2, r5
 8011004:	4909      	ldr	r1, [pc, #36]	; (801102c <Reporter_Convert_GPS+0x108>)
 8011006:	480a      	ldr	r0, [pc, #40]	; (8011030 <Reporter_Convert_GPS+0x10c>)
 8011008:	f004 f8c2 	bl	8015190 <siprintf>
	}
}
 801100c:	bf00      	nop
 801100e:	370c      	adds	r7, #12
 8011010:	46bd      	mov	sp, r7
 8011012:	ecbd 8b02 	vpop	{d8}
 8011016:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011018:	20008194 	.word	0x20008194
 801101c:	20008403 	.word	0x20008403
 8011020:	200083ef 	.word	0x200083ef
 8011024:	2000841c 	.word	0x2000841c
 8011028:	200081cd 	.word	0x200081cd
 801102c:	08018c7c 	.word	0x08018c7c
 8011030:	200083e0 	.word	0x200083e0

08011034 <Reporter_Set_Sending_Time>:

void Reporter_Set_Sending_Time(void) {
 8011034:	b580      	push	{r7, lr}
 8011036:	af00      	add	r7, sp, #0
	RTC_Read(report.data.datetime_sending);
 8011038:	4802      	ldr	r0, [pc, #8]	; (8011044 <Reporter_Set_Sending_Time+0x10>)
 801103a:	f000 f8b5 	bl	80111a8 <RTC_Read>

	// FIXME datetime sending should updated
	//	str_replace(PAYLOAD, "_SENDING_TIME_", report.data.datetime_sending);
}
 801103e:	bf00      	nop
 8011040:	bd80      	pop	{r7, pc}
 8011042:	bf00      	nop
 8011044:	200081b7 	.word	0x200081b7

08011048 <Reporter_Set_Payload>:

void Reporter_Set_Payload(void) {
 8011048:	b5f0      	push	{r4, r5, r6, r7, lr}
 801104a:	b091      	sub	sp, #68	; 0x44
 801104c:	af0e      	add	r7, sp, #56	; 0x38
	// parse rtc datetime
	RTC_Read(report.data.datetime_rtc);
 801104e:	4831      	ldr	r0, [pc, #196]	; (8011114 <Reporter_Set_Payload+0xcc>)
 8011050:	f000 f8aa 	bl	80111a8 <RTC_Read>
	//Reconstruct the data
	sprintf(POSITION_DATA, "%s,%s,_SENDING_TIME_,%s,%s,"
			"%s,%d,%lu,%s,%d,"
			"%s,%d,%d,%s,%d,"
			"%d,%s\r\n", report.data.gps.datetime, report.data.datetime_rtc, report.data.gps.longitude, report.data.gps.latitude,
			report.data.gps.heading, report.data.reportd_id, report.data.odometer, report.data.gps.hdop, report.data.status_input,
 8011054:	4b30      	ldr	r3, [pc, #192]	; (8011118 <Reporter_Set_Payload+0xd0>)
 8011056:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
	sprintf(POSITION_DATA, "%s,%s,_SENDING_TIME_,%s,%s,"
 801105a:	4619      	mov	r1, r3
 801105c:	4b2e      	ldr	r3, [pc, #184]	; (8011118 <Reporter_Set_Payload+0xd0>)
 801105e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
			report.data.gps.heading, report.data.reportd_id, report.data.odometer, report.data.gps.hdop, report.data.status_input,
 8011060:	4a2d      	ldr	r2, [pc, #180]	; (8011118 <Reporter_Set_Payload+0xd0>)
 8011062:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
	sprintf(POSITION_DATA, "%s,%s,_SENDING_TIME_,%s,%s,"
 8011066:	4610      	mov	r0, r2
			report.data.speed, report.data.status_output, report.data.analog_input, report.data.driver_id, report.data.temp_sensor1,
 8011068:	4a2b      	ldr	r2, [pc, #172]	; (8011118 <Reporter_Set_Payload+0xd0>)
 801106a:	f892 203e 	ldrb.w	r2, [r2, #62]	; 0x3e
	sprintf(POSITION_DATA, "%s,%s,_SENDING_TIME_,%s,%s,"
 801106e:	4614      	mov	r4, r2
			report.data.speed, report.data.status_output, report.data.analog_input, report.data.driver_id, report.data.temp_sensor1,
 8011070:	4a29      	ldr	r2, [pc, #164]	; (8011118 <Reporter_Set_Payload+0xd0>)
 8011072:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
	sprintf(POSITION_DATA, "%s,%s,_SENDING_TIME_,%s,%s,"
 8011076:	4615      	mov	r5, r2
			report.data.speed, report.data.status_output, report.data.analog_input, report.data.driver_id, report.data.temp_sensor1,
 8011078:	4a27      	ldr	r2, [pc, #156]	; (8011118 <Reporter_Set_Payload+0xd0>)
 801107a:	f9b2 2054 	ldrsh.w	r2, [r2, #84]	; 0x54
	sprintf(POSITION_DATA, "%s,%s,_SENDING_TIME_,%s,%s,"
 801107e:	4616      	mov	r6, r2
			report.data.temp_sensor2, report.data.message);
 8011080:	4a25      	ldr	r2, [pc, #148]	; (8011118 <Reporter_Set_Payload+0xd0>)
 8011082:	f9b2 2056 	ldrsh.w	r2, [r2, #86]	; 0x56
	sprintf(POSITION_DATA, "%s,%s,_SENDING_TIME_,%s,%s,"
 8011086:	607a      	str	r2, [r7, #4]
 8011088:	4a24      	ldr	r2, [pc, #144]	; (801111c <Reporter_Set_Payload+0xd4>)
 801108a:	920d      	str	r2, [sp, #52]	; 0x34
 801108c:	687a      	ldr	r2, [r7, #4]
 801108e:	920c      	str	r2, [sp, #48]	; 0x30
 8011090:	960b      	str	r6, [sp, #44]	; 0x2c
 8011092:	4a23      	ldr	r2, [pc, #140]	; (8011120 <Reporter_Set_Payload+0xd8>)
 8011094:	920a      	str	r2, [sp, #40]	; 0x28
 8011096:	9509      	str	r5, [sp, #36]	; 0x24
 8011098:	9408      	str	r4, [sp, #32]
 801109a:	4a22      	ldr	r2, [pc, #136]	; (8011124 <Reporter_Set_Payload+0xdc>)
 801109c:	9207      	str	r2, [sp, #28]
 801109e:	9006      	str	r0, [sp, #24]
 80110a0:	4a21      	ldr	r2, [pc, #132]	; (8011128 <Reporter_Set_Payload+0xe0>)
 80110a2:	9205      	str	r2, [sp, #20]
 80110a4:	9304      	str	r3, [sp, #16]
 80110a6:	9103      	str	r1, [sp, #12]
 80110a8:	4b20      	ldr	r3, [pc, #128]	; (801112c <Reporter_Set_Payload+0xe4>)
 80110aa:	9302      	str	r3, [sp, #8]
 80110ac:	4b20      	ldr	r3, [pc, #128]	; (8011130 <Reporter_Set_Payload+0xe8>)
 80110ae:	9301      	str	r3, [sp, #4]
 80110b0:	4b20      	ldr	r3, [pc, #128]	; (8011134 <Reporter_Set_Payload+0xec>)
 80110b2:	9300      	str	r3, [sp, #0]
 80110b4:	4b17      	ldr	r3, [pc, #92]	; (8011114 <Reporter_Set_Payload+0xcc>)
 80110b6:	4a20      	ldr	r2, [pc, #128]	; (8011138 <Reporter_Set_Payload+0xf0>)
 80110b8:	4920      	ldr	r1, [pc, #128]	; (801113c <Reporter_Set_Payload+0xf4>)
 80110ba:	4821      	ldr	r0, [pc, #132]	; (8011140 <Reporter_Set_Payload+0xf8>)
 80110bc:	f004 f868 	bl	8015190 <siprintf>
	//Reconstruct the header
	report.header.length = strlen(POSITION_DATA);
 80110c0:	481f      	ldr	r0, [pc, #124]	; (8011140 <Reporter_Set_Payload+0xf8>)
 80110c2:	f7ef f88f 	bl	80001e4 <strlen>
 80110c6:	4603      	mov	r3, r0
 80110c8:	b29a      	uxth	r2, r3
 80110ca:	4b13      	ldr	r3, [pc, #76]	; (8011118 <Reporter_Set_Payload+0xd0>)
 80110cc:	80da      	strh	r2, [r3, #6]
	report.header.seq_id++;
 80110ce:	4b12      	ldr	r3, [pc, #72]	; (8011118 <Reporter_Set_Payload+0xd0>)
 80110d0:	891b      	ldrh	r3, [r3, #8]
 80110d2:	3301      	adds	r3, #1
 80110d4:	b29a      	uxth	r2, r3
 80110d6:	4b10      	ldr	r3, [pc, #64]	; (8011118 <Reporter_Set_Payload+0xd0>)
 80110d8:	811a      	strh	r2, [r3, #8]
	sprintf(POSITION_HEADER, "%s,%d,%d,%d,%s", report.header.prefix, report.header.crc, report.header.length, report.header.seq_id,
 80110da:	4b0f      	ldr	r3, [pc, #60]	; (8011118 <Reporter_Set_Payload+0xd0>)
 80110dc:	889b      	ldrh	r3, [r3, #4]
 80110de:	4618      	mov	r0, r3
 80110e0:	4b0d      	ldr	r3, [pc, #52]	; (8011118 <Reporter_Set_Payload+0xd0>)
 80110e2:	88db      	ldrh	r3, [r3, #6]
 80110e4:	461a      	mov	r2, r3
 80110e6:	4b0c      	ldr	r3, [pc, #48]	; (8011118 <Reporter_Set_Payload+0xd0>)
 80110e8:	891b      	ldrh	r3, [r3, #8]
 80110ea:	4619      	mov	r1, r3
 80110ec:	4b15      	ldr	r3, [pc, #84]	; (8011144 <Reporter_Set_Payload+0xfc>)
 80110ee:	9302      	str	r3, [sp, #8]
 80110f0:	9101      	str	r1, [sp, #4]
 80110f2:	9200      	str	r2, [sp, #0]
 80110f4:	4603      	mov	r3, r0
 80110f6:	4a08      	ldr	r2, [pc, #32]	; (8011118 <Reporter_Set_Payload+0xd0>)
 80110f8:	4913      	ldr	r1, [pc, #76]	; (8011148 <Reporter_Set_Payload+0x100>)
 80110fa:	4814      	ldr	r0, [pc, #80]	; (801114c <Reporter_Set_Payload+0x104>)
 80110fc:	f004 f848 	bl	8015190 <siprintf>
			report.header.unit_id);
	//Reconstruct the position
	sprintf(PAYLOAD, "%s,%s", POSITION_HEADER, POSITION_DATA);
 8011100:	4b0f      	ldr	r3, [pc, #60]	; (8011140 <Reporter_Set_Payload+0xf8>)
 8011102:	4a12      	ldr	r2, [pc, #72]	; (801114c <Reporter_Set_Payload+0x104>)
 8011104:	4912      	ldr	r1, [pc, #72]	; (8011150 <Reporter_Set_Payload+0x108>)
 8011106:	4813      	ldr	r0, [pc, #76]	; (8011154 <Reporter_Set_Payload+0x10c>)
 8011108:	f004 f842 	bl	8015190 <siprintf>
}
 801110c:	bf00      	nop
 801110e:	370c      	adds	r7, #12
 8011110:	46bd      	mov	sp, r7
 8011112:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011114:	200081a8 	.word	0x200081a8
 8011118:	20008194 	.word	0x20008194
 801111c:	200081ec 	.word	0x200081ec
 8011120:	200081d6 	.word	0x200081d6
 8011124:	200081cd 	.word	0x200081cd
 8011128:	2000841c 	.word	0x2000841c
 801112c:	20008417 	.word	0x20008417
 8011130:	20008403 	.word	0x20008403
 8011134:	200083ef 	.word	0x200083ef
 8011138:	200083e0 	.word	0x200083e0
 801113c:	08018c98 	.word	0x08018c98
 8011140:	20007efc 	.word	0x20007efc
 8011144:	2000819e 	.word	0x2000819e
 8011148:	08018cdc 	.word	0x08018cdc
 801114c:	20007edc 	.word	0x20007edc
 8011150:	08018cec 	.word	0x08018cec
 8011154:	20007c24 	.word	0x20007c24

08011158 <Reporter_Set_Odometer>:

void Reporter_Set_Odometer(uint32_t odom) {
 8011158:	b580      	push	{r7, lr}
 801115a:	b082      	sub	sp, #8
 801115c:	af00      	add	r7, sp, #0
 801115e:	6078      	str	r0, [r7, #4]
	report.data.odometer = odom;
 8011160:	4a04      	ldr	r2, [pc, #16]	; (8011174 <Reporter_Set_Odometer+0x1c>)
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	6353      	str	r3, [r2, #52]	; 0x34
	Flash_Save_Odometer(odom);
 8011166:	6878      	ldr	r0, [r7, #4]
 8011168:	f7fd fa8e 	bl	800e688 <Flash_Save_Odometer>
}
 801116c:	bf00      	nop
 801116e:	3708      	adds	r7, #8
 8011170:	46bd      	mov	sp, r7
 8011172:	bd80      	pop	{r7, pc}
 8011174:	20008194 	.word	0x20008194

08011178 <RTC_Read_RAW>:

#include "_rtc.h"

extern RTC_HandleTypeDef hrtc;

void RTC_Read_RAW(timestamp_t * timestamp) {
 8011178:	b580      	push	{r7, lr}
 801117a:	b082      	sub	sp, #8
 801117c:	af00      	add	r7, sp, #0
 801117e:	6078      	str	r0, [r7, #4]
	// get the RTC
	HAL_RTC_GetTime(&hrtc, &(timestamp->time), RTC_FORMAT_BIN);
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	3304      	adds	r3, #4
 8011184:	2200      	movs	r2, #0
 8011186:	4619      	mov	r1, r3
 8011188:	4806      	ldr	r0, [pc, #24]	; (80111a4 <RTC_Read_RAW+0x2c>)
 801118a:	f7f5 fa59 	bl	8006640 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &(timestamp->date), RTC_FORMAT_BIN);
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	2200      	movs	r2, #0
 8011192:	4619      	mov	r1, r3
 8011194:	4803      	ldr	r0, [pc, #12]	; (80111a4 <RTC_Read_RAW+0x2c>)
 8011196:	f7f5 fb58 	bl	800684a <HAL_RTC_GetDate>
}
 801119a:	bf00      	nop
 801119c:	3708      	adds	r7, #8
 801119e:	46bd      	mov	sp, r7
 80111a0:	bd80      	pop	{r7, pc}
 80111a2:	bf00      	nop
 80111a4:	200087e8 	.word	0x200087e8

080111a8 <RTC_Read>:

void RTC_Read(char *dateTime) {
 80111a8:	b5b0      	push	{r4, r5, r7, lr}
 80111aa:	b08c      	sub	sp, #48	; 0x30
 80111ac:	af04      	add	r7, sp, #16
 80111ae:	6078      	str	r0, [r7, #4]
	timestamp_t timestamp;

	// get the RTC
	RTC_Read_RAW(&timestamp);
 80111b0:	f107 0308 	add.w	r3, r7, #8
 80111b4:	4618      	mov	r0, r3
 80111b6:	f7ff ffdf 	bl	8011178 <RTC_Read_RAW>

	// combine RTC datetime
	sprintf(dateTime, "20%02d%02d%02d%02d%02d%02d", timestamp.date.Year, timestamp.date.Month, timestamp.date.Date, timestamp.time.Hours,
 80111ba:	7afb      	ldrb	r3, [r7, #11]
 80111bc:	461c      	mov	r4, r3
 80111be:	7a7b      	ldrb	r3, [r7, #9]
 80111c0:	461d      	mov	r5, r3
 80111c2:	7abb      	ldrb	r3, [r7, #10]
 80111c4:	7b3a      	ldrb	r2, [r7, #12]
			timestamp.time.Minutes, timestamp.time.Seconds);
 80111c6:	7b79      	ldrb	r1, [r7, #13]
 80111c8:	7bb8      	ldrb	r0, [r7, #14]
	sprintf(dateTime, "20%02d%02d%02d%02d%02d%02d", timestamp.date.Year, timestamp.date.Month, timestamp.date.Date, timestamp.time.Hours,
 80111ca:	9003      	str	r0, [sp, #12]
 80111cc:	9102      	str	r1, [sp, #8]
 80111ce:	9201      	str	r2, [sp, #4]
 80111d0:	9300      	str	r3, [sp, #0]
 80111d2:	462b      	mov	r3, r5
 80111d4:	4622      	mov	r2, r4
 80111d6:	4904      	ldr	r1, [pc, #16]	; (80111e8 <RTC_Read+0x40>)
 80111d8:	6878      	ldr	r0, [r7, #4]
 80111da:	f003 ffd9 	bl	8015190 <siprintf>
}
 80111de:	bf00      	nop
 80111e0:	3720      	adds	r7, #32
 80111e2:	46bd      	mov	sp, r7
 80111e4:	bdb0      	pop	{r4, r5, r7, pc}
 80111e6:	bf00      	nop
 80111e8:	08018cf4 	.word	0x08018cf4

080111ec <RTC_Write>:

void RTC_Write(char *dateTime) {
 80111ec:	b580      	push	{r7, lr}
 80111ee:	b08e      	sub	sp, #56	; 0x38
 80111f0:	af00      	add	r7, sp, #0
 80111f2:	6078      	str	r0, [r7, #4]
	// format dateTime: YYYYMMDDHHMMSS
	char Y[2], M[2], D[2], H[2], I[2], S[2];
	timestamp_t timestamp;

	// parsing
	strncpy(Y, dateTime + 2, 2);
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	1c99      	adds	r1, r3, #2
 80111f8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80111fc:	2202      	movs	r2, #2
 80111fe:	4618      	mov	r0, r3
 8011200:	f004 f80d 	bl	801521e <strncpy>
	strncpy(M, dateTime + 4, 2);
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	1d19      	adds	r1, r3, #4
 8011208:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801120c:	2202      	movs	r2, #2
 801120e:	4618      	mov	r0, r3
 8011210:	f004 f805 	bl	801521e <strncpy>
	strncpy(D, dateTime + 6, 2);
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	1d99      	adds	r1, r3, #6
 8011218:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801121c:	2202      	movs	r2, #2
 801121e:	4618      	mov	r0, r3
 8011220:	f003 fffd 	bl	801521e <strncpy>
	strncpy(H, dateTime + 8, 2);
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	f103 0108 	add.w	r1, r3, #8
 801122a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801122e:	2202      	movs	r2, #2
 8011230:	4618      	mov	r0, r3
 8011232:	f003 fff4 	bl	801521e <strncpy>
	strncpy(I, dateTime + 10, 2);
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	f103 010a 	add.w	r1, r3, #10
 801123c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011240:	2202      	movs	r2, #2
 8011242:	4618      	mov	r0, r3
 8011244:	f003 ffeb 	bl	801521e <strncpy>
	strncpy(S, dateTime + 12, 2);
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	f103 010c 	add.w	r1, r3, #12
 801124e:	f107 0320 	add.w	r3, r7, #32
 8011252:	2202      	movs	r2, #2
 8011254:	4618      	mov	r0, r3
 8011256:	f003 ffe2 	bl	801521e <strncpy>

	// assing to object
	// FIXME day is ignored
	timestamp.date.WeekDay = RTC_WEEKDAY_SUNDAY;
 801125a:	2307      	movs	r3, #7
 801125c:	723b      	strb	r3, [r7, #8]
	timestamp.date.Year = atoi(Y);
 801125e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8011262:	4618      	mov	r0, r3
 8011264:	f003 ff37 	bl	80150d6 <atoi>
 8011268:	4603      	mov	r3, r0
 801126a:	b2db      	uxtb	r3, r3
 801126c:	72fb      	strb	r3, [r7, #11]
	timestamp.date.Month = atoi(M);
 801126e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011272:	4618      	mov	r0, r3
 8011274:	f003 ff2f 	bl	80150d6 <atoi>
 8011278:	4603      	mov	r3, r0
 801127a:	b2db      	uxtb	r3, r3
 801127c:	727b      	strb	r3, [r7, #9]
	timestamp.date.Date = atoi(D);
 801127e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011282:	4618      	mov	r0, r3
 8011284:	f003 ff27 	bl	80150d6 <atoi>
 8011288:	4603      	mov	r3, r0
 801128a:	b2db      	uxtb	r3, r3
 801128c:	72bb      	strb	r3, [r7, #10]
	timestamp.time.Hours = atoi(H);
 801128e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011292:	4618      	mov	r0, r3
 8011294:	f003 ff1f 	bl	80150d6 <atoi>
 8011298:	4603      	mov	r3, r0
 801129a:	b2db      	uxtb	r3, r3
 801129c:	733b      	strb	r3, [r7, #12]
	timestamp.time.Minutes = atoi(I);
 801129e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80112a2:	4618      	mov	r0, r3
 80112a4:	f003 ff17 	bl	80150d6 <atoi>
 80112a8:	4603      	mov	r3, r0
 80112aa:	b2db      	uxtb	r3, r3
 80112ac:	737b      	strb	r3, [r7, #13]
	timestamp.time.Seconds = atoi(S);
 80112ae:	f107 0320 	add.w	r3, r7, #32
 80112b2:	4618      	mov	r0, r3
 80112b4:	f003 ff0f 	bl	80150d6 <atoi>
 80112b8:	4603      	mov	r3, r0
 80112ba:	b2db      	uxtb	r3, r3
 80112bc:	73bb      	strb	r3, [r7, #14]
	timestamp.time.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80112be:	2300      	movs	r3, #0
 80112c0:	61bb      	str	r3, [r7, #24]
	timestamp.time.StoreOperation = RTC_STOREOPERATION_RESET;
 80112c2:	2300      	movs	r3, #0
 80112c4:	61fb      	str	r3, [r7, #28]

	// set the RTC
	HAL_RTC_SetTime(&hrtc, &(timestamp.time), RTC_FORMAT_BIN);
 80112c6:	f107 0308 	add.w	r3, r7, #8
 80112ca:	3304      	adds	r3, #4
 80112cc:	2200      	movs	r2, #0
 80112ce:	4619      	mov	r1, r3
 80112d0:	4806      	ldr	r0, [pc, #24]	; (80112ec <RTC_Write+0x100>)
 80112d2:	f7f5 f8f8 	bl	80064c6 <HAL_RTC_SetTime>
	HAL_RTC_SetDate(&hrtc, &(timestamp.date), RTC_FORMAT_BIN);
 80112d6:	f107 0308 	add.w	r3, r7, #8
 80112da:	2200      	movs	r2, #0
 80112dc:	4619      	mov	r1, r3
 80112de:	4803      	ldr	r0, [pc, #12]	; (80112ec <RTC_Write+0x100>)
 80112e0:	f7f5 fa0c 	bl	80066fc <HAL_RTC_SetDate>
}
 80112e4:	bf00      	nop
 80112e6:	3738      	adds	r7, #56	; 0x38
 80112e8:	46bd      	mov	sp, r7
 80112ea:	bd80      	pop	{r7, pc}
 80112ec:	200087e8 	.word	0x200087e8

080112f0 <RTC_Offset>:

uint8_t RTC_Offset(uint8_t hour, int offset) {
 80112f0:	b480      	push	{r7}
 80112f2:	b083      	sub	sp, #12
 80112f4:	af00      	add	r7, sp, #0
 80112f6:	4603      	mov	r3, r0
 80112f8:	6039      	str	r1, [r7, #0]
 80112fa:	71fb      	strb	r3, [r7, #7]
	return (hour + offset) > 23 ? ((hour + offset) - 24) : (hour + offset);
 80112fc:	79fa      	ldrb	r2, [r7, #7]
 80112fe:	683b      	ldr	r3, [r7, #0]
 8011300:	4413      	add	r3, r2
 8011302:	2b17      	cmp	r3, #23
 8011304:	dd07      	ble.n	8011316 <RTC_Offset+0x26>
 8011306:	683b      	ldr	r3, [r7, #0]
 8011308:	b2da      	uxtb	r2, r3
 801130a:	79fb      	ldrb	r3, [r7, #7]
 801130c:	4413      	add	r3, r2
 801130e:	b2db      	uxtb	r3, r3
 8011310:	3b18      	subs	r3, #24
 8011312:	b2db      	uxtb	r3, r3
 8011314:	e004      	b.n	8011320 <RTC_Offset+0x30>
 8011316:	683b      	ldr	r3, [r7, #0]
 8011318:	b2da      	uxtb	r2, r3
 801131a:	79fb      	ldrb	r3, [r7, #7]
 801131c:	4413      	add	r3, r2
 801131e:	b2db      	uxtb	r3, r3
}
 8011320:	4618      	mov	r0, r3
 8011322:	370c      	adds	r7, #12
 8011324:	46bd      	mov	sp, r7
 8011326:	f85d 7b04 	ldr.w	r7, [sp], #4
 801132a:	4770      	bx	lr

0801132c <Ublox_Init>:
extern char PAYLOAD[];
char CIPSEND[50], CIPOPEN[50], CGSOCKCONT[50], CSOCKAUTH[65];
simcom_t simcom;

/* USER CODE END PV */
void Ublox_Init(gps_t *hgps) {
 801132c:	b580      	push	{r7, lr}
 801132e:	b082      	sub	sp, #8
 8011330:	af00      	add	r7, sp, #0
 8011332:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(UBLOX_PWR_GPIO_Port, UBLOX_PWR_Pin, GPIO_PIN_SET);
 8011334:	2201      	movs	r2, #1
 8011336:	2102      	movs	r1, #2
 8011338:	4806      	ldr	r0, [pc, #24]	; (8011354 <Ublox_Init+0x28>)
 801133a:	f7f1 ff3f 	bl	80031bc <HAL_GPIO_WritePin>
	osDelay(100);
 801133e:	2064      	movs	r0, #100	; 0x64
 8011340:	f7f6 ffb3 	bl	80082aa <osDelay>
	gps_init(hgps);
 8011344:	6878      	ldr	r0, [r7, #4]
 8011346:	f7fe fc0e 	bl	800fb66 <gps_init>
}
 801134a:	bf00      	nop
 801134c:	3708      	adds	r7, #8
 801134e:	46bd      	mov	sp, r7
 8011350:	bd80      	pop	{r7, pc}
 8011352:	bf00      	nop
 8011354:	40020800 	.word	0x40020800

08011358 <Simcom_On>:

static void Simcom_On(void) {
 8011358:	b580      	push	{r7, lr}
 801135a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SIMCOM_PWR_GPIO_Port, SIMCOM_PWR_Pin, GPIO_PIN_RESET);
 801135c:	2200      	movs	r2, #0
 801135e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8011362:	4808      	ldr	r0, [pc, #32]	; (8011384 <Simcom_On+0x2c>)
 8011364:	f7f1 ff2a 	bl	80031bc <HAL_GPIO_WritePin>
	osDelay(100);
 8011368:	2064      	movs	r0, #100	; 0x64
 801136a:	f7f6 ff9e 	bl	80082aa <osDelay>
	HAL_GPIO_WritePin(SIMCOM_PWR_GPIO_Port, SIMCOM_PWR_Pin, GPIO_PIN_SET);
 801136e:	2201      	movs	r2, #1
 8011370:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8011374:	4803      	ldr	r0, [pc, #12]	; (8011384 <Simcom_On+0x2c>)
 8011376:	f7f1 ff21 	bl	80031bc <HAL_GPIO_WritePin>
	osDelay(100);
 801137a:	2064      	movs	r0, #100	; 0x64
 801137c:	f7f6 ff95 	bl	80082aa <osDelay>
}
 8011380:	bf00      	nop
 8011382:	bd80      	pop	{r7, pc}
 8011384:	40020c00 	.word	0x40020c00

08011388 <Simcom_Reset>:

static void Simcom_Reset(void) {
 8011388:	b580      	push	{r7, lr}
 801138a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SIMCOM_RST_GPIO_Port, SIMCOM_RST_Pin, GPIO_PIN_RESET);
 801138c:	2200      	movs	r2, #0
 801138e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8011392:	4808      	ldr	r0, [pc, #32]	; (80113b4 <Simcom_Reset+0x2c>)
 8011394:	f7f1 ff12 	bl	80031bc <HAL_GPIO_WritePin>
	osDelay(100);
 8011398:	2064      	movs	r0, #100	; 0x64
 801139a:	f7f6 ff86 	bl	80082aa <osDelay>
	HAL_GPIO_WritePin(SIMCOM_RST_GPIO_Port, SIMCOM_RST_Pin, GPIO_PIN_SET);
 801139e:	2201      	movs	r2, #1
 80113a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80113a4:	4803      	ldr	r0, [pc, #12]	; (80113b4 <Simcom_Reset+0x2c>)
 80113a6:	f7f1 ff09 	bl	80031bc <HAL_GPIO_WritePin>
	osDelay(100);
 80113aa:	2064      	movs	r0, #100	; 0x64
 80113ac:	f7f6 ff7d 	bl	80082aa <osDelay>
}
 80113b0:	bf00      	nop
 80113b2:	bd80      	pop	{r7, pc}
 80113b4:	40020400 	.word	0x40020400

080113b8 <Simcom_Boot>:

static uint8_t Simcom_Boot(void) {
 80113b8:	b590      	push	{r4, r7, lr}
 80113ba:	b085      	sub	sp, #20
 80113bc:	af00      	add	r7, sp, #0
	uint32_t tick;
	uint64_t timeout_tick;

	// reset rx buffer
	SIMCOM_Reset_Buffer();
 80113be:	f7fb fc75 	bl	800ccac <SIMCOM_Reset_Buffer>
	// reset the state of simcom module
	Simcom_Reset();
 80113c2:	f7ff ffe1 	bl	8011388 <Simcom_Reset>
	// turn off sequence
	Simcom_On();
 80113c6:	f7ff ffc7 	bl	8011358 <Simcom_On>
	// set timeout guard (for first boot)
	timeout_tick = osKernelSysTickMicroSec(simcom.boot_timeout*1000*1000);
 80113ca:	4b23      	ldr	r3, [pc, #140]	; (8011458 <Simcom_Boot+0xa0>)
 80113cc:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80113d0:	b2db      	uxtb	r3, r3
 80113d2:	f04f 0400 	mov.w	r4, #0
 80113d6:	4a21      	ldr	r2, [pc, #132]	; (801145c <Simcom_Boot+0xa4>)
 80113d8:	fb02 f104 	mul.w	r1, r2, r4
 80113dc:	2200      	movs	r2, #0
 80113de:	fb02 f203 	mul.w	r2, r2, r3
 80113e2:	440a      	add	r2, r1
 80113e4:	491d      	ldr	r1, [pc, #116]	; (801145c <Simcom_Boot+0xa4>)
 80113e6:	fba3 0101 	umull	r0, r1, r3, r1
 80113ea:	1853      	adds	r3, r2, r1
 80113ec:	4619      	mov	r1, r3
 80113ee:	4a1c      	ldr	r2, [pc, #112]	; (8011460 <Simcom_Boot+0xa8>)
 80113f0:	f04f 0300 	mov.w	r3, #0
 80113f4:	f7ef fc58 	bl	8000ca8 <__aeabi_uldivmod>
 80113f8:	4603      	mov	r3, r0
 80113fa:	460c      	mov	r4, r1
 80113fc:	e9c7 3402 	strd	r3, r4, [r7, #8]
	tick = osKernelSysTick();
 8011400:	f7f6 fef7 	bl	80081f2 <osKernelSysTick>
 8011404:	6078      	str	r0, [r7, #4]
	// wait until booting is done
	while (!(Simcom_Response(SIMCOM_STATUS_READY) || (osKernelSysTick() - tick) > timeout_tick)) {
 8011406:	bf00      	nop
 8011408:	4816      	ldr	r0, [pc, #88]	; (8011464 <Simcom_Boot+0xac>)
 801140a:	f000 f82d 	bl	8011468 <Simcom_Response>
 801140e:	4603      	mov	r3, r0
 8011410:	2b00      	cmp	r3, #0
 8011412:	d10c      	bne.n	801142e <Simcom_Boot+0x76>
 8011414:	f7f6 feed 	bl	80081f2 <osKernelSysTick>
 8011418:	4602      	mov	r2, r0
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	1ad3      	subs	r3, r2, r3
 801141e:	f04f 0400 	mov.w	r4, #0
 8011422:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8011426:	42a2      	cmp	r2, r4
 8011428:	bf08      	it	eq
 801142a:	4299      	cmpeq	r1, r3
 801142c:	d2ec      	bcs.n	8011408 <Simcom_Boot+0x50>
	};
	// handle timeout
	return (uint8_t) ((osKernelSysTick() - tick) < timeout_tick);
 801142e:	f7f6 fee0 	bl	80081f2 <osKernelSysTick>
 8011432:	4602      	mov	r2, r0
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	1ad3      	subs	r3, r2, r3
 8011438:	4619      	mov	r1, r3
 801143a:	f04f 0200 	mov.w	r2, #0
 801143e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8011442:	42a2      	cmp	r2, r4
 8011444:	bf08      	it	eq
 8011446:	4299      	cmpeq	r1, r3
 8011448:	bf34      	ite	cc
 801144a:	2301      	movcc	r3, #1
 801144c:	2300      	movcs	r3, #0
 801144e:	b2db      	uxtb	r3, r3
}
 8011450:	4618      	mov	r0, r3
 8011452:	3714      	adds	r7, #20
 8011454:	46bd      	mov	sp, r7
 8011456:	bd90      	pop	{r4, r7, pc}
 8011458:	20008424 	.word	0x20008424
 801145c:	3b9aca00 	.word	0x3b9aca00
 8011460:	000f4240 	.word	0x000f4240
 8011464:	08018d10 	.word	0x08018d10

08011468 <Simcom_Response>:

static uint8_t Simcom_Response(char *str) {
 8011468:	b580      	push	{r7, lr}
 801146a:	b082      	sub	sp, #8
 801146c:	af00      	add	r7, sp, #0
 801146e:	6078      	str	r0, [r7, #4]
	if (strstr(SIMCOM_UART_RX_Buffer, str) != NULL) {
 8011470:	6879      	ldr	r1, [r7, #4]
 8011472:	4806      	ldr	r0, [pc, #24]	; (801148c <Simcom_Response+0x24>)
 8011474:	f003 fee8 	bl	8015248 <strstr>
 8011478:	4603      	mov	r3, r0
 801147a:	2b00      	cmp	r3, #0
 801147c:	d001      	beq.n	8011482 <Simcom_Response+0x1a>

		return 1;
 801147e:	2301      	movs	r3, #1
 8011480:	e000      	b.n	8011484 <Simcom_Response+0x1c>
	}
	return 0;
 8011482:	2300      	movs	r3, #0
}
 8011484:	4618      	mov	r0, r3
 8011486:	3708      	adds	r7, #8
 8011488:	46bd      	mov	sp, r7
 801148a:	bd80      	pop	{r7, pc}
 801148c:	20006d30 	.word	0x20006d30

08011490 <Simcom_Send>:

static uint8_t Simcom_Send(char *cmd, uint32_t ms) {
 8011490:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011492:	b087      	sub	sp, #28
 8011494:	af00      	add	r7, sp, #0
 8011496:	6078      	str	r0, [r7, #4]
 8011498:	6039      	str	r1, [r7, #0]
	osRecursiveMutexWait(SimcomRecMutexHandle, osWaitForever);
 801149a:	4b63      	ldr	r3, [pc, #396]	; (8011628 <Simcom_Send+0x198>)
 801149c:	681b      	ldr	r3, [r3, #0]
 801149e:	f04f 31ff 	mov.w	r1, #4294967295
 80114a2:	4618      	mov	r0, r3
 80114a4:	f7f7 fb6a 	bl	8008b7c <osRecursiveMutexWait>

	uint8_t ret;
	uint32_t tick, timeout_tick = 0;
 80114a8:	2300      	movs	r3, #0
 80114aa:	617b      	str	r3, [r7, #20]
	// reset rx buffer
	SIMCOM_Reset_Buffer();
 80114ac:	f7fb fbfe 	bl	800ccac <SIMCOM_Reset_Buffer>
	// print command for debugger
	if (strstr(cmd, SIMCOM_MESSAGE_END) == NULL) {
 80114b0:	211a      	movs	r1, #26
 80114b2:	6878      	ldr	r0, [r7, #4]
 80114b4:	f003 fe8c 	bl	80151d0 <strchr>
 80114b8:	4603      	mov	r3, r0
 80114ba:	2b00      	cmp	r3, #0
 80114bc:	d10e      	bne.n	80114dc <Simcom_Send+0x4c>
		SWV_SendStr("\n=> ");
 80114be:	485b      	ldr	r0, [pc, #364]	; (801162c <Simcom_Send+0x19c>)
 80114c0:	f000 fc9e 	bl	8011e00 <SWV_SendStr>
		SWV_SendBuf(cmd, strlen(cmd));
 80114c4:	6878      	ldr	r0, [r7, #4]
 80114c6:	f7ee fe8d 	bl	80001e4 <strlen>
 80114ca:	4603      	mov	r3, r0
 80114cc:	b29b      	uxth	r3, r3
 80114ce:	4619      	mov	r1, r3
 80114d0:	6878      	ldr	r0, [r7, #4]
 80114d2:	f000 fcdd 	bl	8011e90 <SWV_SendBuf>
		SWV_SendStrLn("");
 80114d6:	4856      	ldr	r0, [pc, #344]	; (8011630 <Simcom_Send+0x1a0>)
 80114d8:	f000 fcb4 	bl	8011e44 <SWV_SendStrLn>
	}
	// transmit to serial
	SIMCOM_Transmit(cmd, strlen(cmd));
 80114dc:	6878      	ldr	r0, [r7, #4]
 80114de:	f7ee fe81 	bl	80001e4 <strlen>
 80114e2:	4603      	mov	r3, r0
 80114e4:	b29b      	uxth	r3, r3
 80114e6:	4619      	mov	r1, r3
 80114e8:	6878      	ldr	r0, [r7, #4]
 80114ea:	f7fb fbf7 	bl	800ccdc <SIMCOM_Transmit>
	// convert time to tick
	timeout_tick = osKernelSysTickMicroSec(ms*1000);
 80114ee:	683b      	ldr	r3, [r7, #0]
 80114f0:	461d      	mov	r5, r3
 80114f2:	f04f 0600 	mov.w	r6, #0
 80114f6:	462b      	mov	r3, r5
 80114f8:	4634      	mov	r4, r6
 80114fa:	f04f 0100 	mov.w	r1, #0
 80114fe:	f04f 0200 	mov.w	r2, #0
 8011502:	0162      	lsls	r2, r4, #5
 8011504:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8011508:	0159      	lsls	r1, r3, #5
 801150a:	460b      	mov	r3, r1
 801150c:	4614      	mov	r4, r2
 801150e:	1b5b      	subs	r3, r3, r5
 8011510:	eb64 0406 	sbc.w	r4, r4, r6
 8011514:	f04f 0100 	mov.w	r1, #0
 8011518:	f04f 0200 	mov.w	r2, #0
 801151c:	0262      	lsls	r2, r4, #9
 801151e:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8011522:	0259      	lsls	r1, r3, #9
 8011524:	460b      	mov	r3, r1
 8011526:	4614      	mov	r4, r2
 8011528:	195b      	adds	r3, r3, r5
 801152a:	eb44 0406 	adc.w	r4, r4, r6
 801152e:	f04f 0100 	mov.w	r1, #0
 8011532:	f04f 0200 	mov.w	r2, #0
 8011536:	01a2      	lsls	r2, r4, #6
 8011538:	ea42 6293 	orr.w	r2, r2, r3, lsr #26
 801153c:	0199      	lsls	r1, r3, #6
 801153e:	1ac9      	subs	r1, r1, r3
 8011540:	eb62 0204 	sbc.w	r2, r2, r4
 8011544:	194b      	adds	r3, r1, r5
 8011546:	eb42 0406 	adc.w	r4, r2, r6
 801154a:	4618      	mov	r0, r3
 801154c:	4621      	mov	r1, r4
 801154e:	4a39      	ldr	r2, [pc, #228]	; (8011634 <Simcom_Send+0x1a4>)
 8011550:	f04f 0300 	mov.w	r3, #0
 8011554:	f7ef fba8 	bl	8000ca8 <__aeabi_uldivmod>
 8011558:	4603      	mov	r3, r0
 801155a:	460c      	mov	r4, r1
 801155c:	617b      	str	r3, [r7, #20]
	// set timeout guard
	tick = osKernelSysTick();
 801155e:	f7f6 fe48 	bl	80081f2 <osKernelSysTick>
 8011562:	6138      	str	r0, [r7, #16]
	// wait response from SIMCOM
	while (!(Simcom_Response(SIMCOM_STATUS_SEND) || Simcom_Response(SIMCOM_STATUS_CIPSEND) || Simcom_Response(SIMCOM_STATUS_OK)
 8011564:	bf00      	nop
 8011566:	4834      	ldr	r0, [pc, #208]	; (8011638 <Simcom_Send+0x1a8>)
 8011568:	f7ff ff7e 	bl	8011468 <Simcom_Response>
 801156c:	4603      	mov	r3, r0
 801156e:	2b00      	cmp	r3, #0
 8011570:	d11f      	bne.n	80115b2 <Simcom_Send+0x122>
 8011572:	4832      	ldr	r0, [pc, #200]	; (801163c <Simcom_Send+0x1ac>)
 8011574:	f7ff ff78 	bl	8011468 <Simcom_Response>
 8011578:	4603      	mov	r3, r0
 801157a:	2b00      	cmp	r3, #0
 801157c:	d119      	bne.n	80115b2 <Simcom_Send+0x122>
 801157e:	4830      	ldr	r0, [pc, #192]	; (8011640 <Simcom_Send+0x1b0>)
 8011580:	f7ff ff72 	bl	8011468 <Simcom_Response>
 8011584:	4603      	mov	r3, r0
 8011586:	2b00      	cmp	r3, #0
 8011588:	d113      	bne.n	80115b2 <Simcom_Send+0x122>
			|| Simcom_Response(SIMCOM_STATUS_RESTARTED) || Simcom_Response(SIMCOM_STATUS_ERROR) || (osKernelSysTick() - tick) >= timeout_tick))
 801158a:	482e      	ldr	r0, [pc, #184]	; (8011644 <Simcom_Send+0x1b4>)
 801158c:	f7ff ff6c 	bl	8011468 <Simcom_Response>
 8011590:	4603      	mov	r3, r0
 8011592:	2b00      	cmp	r3, #0
 8011594:	d10d      	bne.n	80115b2 <Simcom_Send+0x122>
 8011596:	482c      	ldr	r0, [pc, #176]	; (8011648 <Simcom_Send+0x1b8>)
 8011598:	f7ff ff66 	bl	8011468 <Simcom_Response>
 801159c:	4603      	mov	r3, r0
 801159e:	2b00      	cmp	r3, #0
 80115a0:	d107      	bne.n	80115b2 <Simcom_Send+0x122>
 80115a2:	f7f6 fe26 	bl	80081f2 <osKernelSysTick>
 80115a6:	4602      	mov	r2, r0
 80115a8:	693b      	ldr	r3, [r7, #16]
 80115aa:	1ad3      	subs	r3, r2, r3
	while (!(Simcom_Response(SIMCOM_STATUS_SEND) || Simcom_Response(SIMCOM_STATUS_CIPSEND) || Simcom_Response(SIMCOM_STATUS_OK)
 80115ac:	697a      	ldr	r2, [r7, #20]
 80115ae:	429a      	cmp	r2, r3
 80115b0:	d8d9      	bhi.n	8011566 <Simcom_Send+0xd6>
		;
	// handle timeout & error
	ret = !(Simcom_Response(SIMCOM_STATUS_ERROR) || Simcom_Response(SIMCOM_STATUS_RESTARTED) || (osKernelSysTick() - tick) > timeout_tick);
 80115b2:	4825      	ldr	r0, [pc, #148]	; (8011648 <Simcom_Send+0x1b8>)
 80115b4:	f7ff ff58 	bl	8011468 <Simcom_Response>
 80115b8:	4603      	mov	r3, r0
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	d10f      	bne.n	80115de <Simcom_Send+0x14e>
 80115be:	4821      	ldr	r0, [pc, #132]	; (8011644 <Simcom_Send+0x1b4>)
 80115c0:	f7ff ff52 	bl	8011468 <Simcom_Response>
 80115c4:	4603      	mov	r3, r0
 80115c6:	2b00      	cmp	r3, #0
 80115c8:	d109      	bne.n	80115de <Simcom_Send+0x14e>
 80115ca:	f7f6 fe12 	bl	80081f2 <osKernelSysTick>
 80115ce:	4602      	mov	r2, r0
 80115d0:	693b      	ldr	r3, [r7, #16]
 80115d2:	1ad3      	subs	r3, r2, r3
 80115d4:	697a      	ldr	r2, [r7, #20]
 80115d6:	429a      	cmp	r2, r3
 80115d8:	d301      	bcc.n	80115de <Simcom_Send+0x14e>
 80115da:	2301      	movs	r3, #1
 80115dc:	e000      	b.n	80115e0 <Simcom_Send+0x150>
 80115de:	2300      	movs	r3, #0
 80115e0:	73fb      	strb	r3, [r7, #15]
	// print response for debugger
	SWV_SendBuf(SIMCOM_UART_RX_Buffer, strlen(SIMCOM_UART_RX_Buffer));
 80115e2:	481a      	ldr	r0, [pc, #104]	; (801164c <Simcom_Send+0x1bc>)
 80115e4:	f7ee fdfe 	bl	80001e4 <strlen>
 80115e8:	4603      	mov	r3, r0
 80115ea:	b29b      	uxth	r3, r3
 80115ec:	4619      	mov	r1, r3
 80115ee:	4817      	ldr	r0, [pc, #92]	; (801164c <Simcom_Send+0x1bc>)
 80115f0:	f000 fc4e 	bl	8011e90 <SWV_SendBuf>
	SWV_SendStrLn("");
 80115f4:	480e      	ldr	r0, [pc, #56]	; (8011630 <Simcom_Send+0x1a0>)
 80115f6:	f000 fc25 	bl	8011e44 <SWV_SendStrLn>
	// check if it has new command
	if (Simcom_Check_Command()) {
 80115fa:	f000 fae9 	bl	8011bd0 <Simcom_Check_Command>
 80115fe:	4603      	mov	r3, r0
 8011600:	2b00      	cmp	r3, #0
 8011602:	d006      	beq.n	8011612 <Simcom_Send+0x182>
		xTaskNotify(CommandTaskHandle, EVENT_COMMAND_ARRIVED, eSetBits);
 8011604:	4b12      	ldr	r3, [pc, #72]	; (8011650 <Simcom_Send+0x1c0>)
 8011606:	6818      	ldr	r0, [r3, #0]
 8011608:	2300      	movs	r3, #0
 801160a:	2201      	movs	r2, #1
 801160c:	2101      	movs	r1, #1
 801160e:	f7f9 fc7b 	bl	800af08 <xTaskGenericNotify>
	}

	osRecursiveMutexRelease(SimcomRecMutexHandle);
 8011612:	4b05      	ldr	r3, [pc, #20]	; (8011628 <Simcom_Send+0x198>)
 8011614:	681b      	ldr	r3, [r3, #0]
 8011616:	4618      	mov	r0, r3
 8011618:	f7f7 fa9d 	bl	8008b56 <osRecursiveMutexRelease>
	return ret;
 801161c:	7bfb      	ldrb	r3, [r7, #15]
}
 801161e:	4618      	mov	r0, r3
 8011620:	371c      	adds	r7, #28
 8011622:	46bd      	mov	sp, r7
 8011624:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011626:	bf00      	nop
 8011628:	20008970 	.word	0x20008970
 801162c:	08018d1c 	.word	0x08018d1c
 8011630:	08018d24 	.word	0x08018d24
 8011634:	000f4240 	.word	0x000f4240
 8011638:	08018d28 	.word	0x08018d28
 801163c:	08018d2c 	.word	0x08018d2c
 8011640:	08018d38 	.word	0x08018d38
 8011644:	08018d40 	.word	0x08018d40
 8011648:	08018d48 	.word	0x08018d48
 801164c:	20006d30 	.word	0x20006d30
 8011650:	20008810 	.word	0x20008810

08011654 <Simcom_Send_Response_Repeat>:

static uint8_t Simcom_Send_Response_Repeat(char *command, char *response, uint8_t n, uint32_t ms) {
 8011654:	b580      	push	{r7, lr}
 8011656:	b086      	sub	sp, #24
 8011658:	af00      	add	r7, sp, #0
 801165a:	60f8      	str	r0, [r7, #12]
 801165c:	60b9      	str	r1, [r7, #8]
 801165e:	603b      	str	r3, [r7, #0]
 8011660:	4613      	mov	r3, r2
 8011662:	71fb      	strb	r3, [r7, #7]
	osRecursiveMutexWait(SimcomRecMutexHandle, osWaitForever);
 8011664:	4b27      	ldr	r3, [pc, #156]	; (8011704 <Simcom_Send_Response_Repeat+0xb0>)
 8011666:	681b      	ldr	r3, [r3, #0]
 8011668:	f04f 31ff 	mov.w	r1, #4294967295
 801166c:	4618      	mov	r0, r3
 801166e:	f7f7 fa85 	bl	8008b7c <osRecursiveMutexWait>

	uint8_t ret = 1, seq = 1;
 8011672:	2301      	movs	r3, #1
 8011674:	75fb      	strb	r3, [r7, #23]
 8011676:	2301      	movs	r3, #1
 8011678:	75bb      	strb	r3, [r7, #22]
	// check is it on reboot state
	if (Simcom_Response(SIMCOM_STATUS_RESTARTED)) {
 801167a:	4823      	ldr	r0, [pc, #140]	; (8011708 <Simcom_Send_Response_Repeat+0xb4>)
 801167c:	f7ff fef4 	bl	8011468 <Simcom_Response>
 8011680:	4603      	mov	r3, r0
 8011682:	2b00      	cmp	r3, #0
 8011684:	d002      	beq.n	801168c <Simcom_Send_Response_Repeat+0x38>
		ret = 0;
 8011686:	2300      	movs	r3, #0
 8011688:	75fb      	strb	r3, [r7, #23]
 801168a:	e030      	b.n	80116ee <Simcom_Send_Response_Repeat+0x9a>
	} else {
		// repeat command until desired response
		do {
			if (seq > 1) {
 801168c:	7dbb      	ldrb	r3, [r7, #22]
 801168e:	2b01      	cmp	r3, #1
 8011690:	d90a      	bls.n	80116a8 <Simcom_Send_Response_Repeat+0x54>
				// execute command every timeout guard elapsed
				osDelay(simcom.repeat_delay * 1000);
 8011692:	4b1e      	ldr	r3, [pc, #120]	; (801170c <Simcom_Send_Response_Repeat+0xb8>)
 8011694:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8011698:	461a      	mov	r2, r3
 801169a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801169e:	fb03 f302 	mul.w	r3, r3, r2
 80116a2:	4618      	mov	r0, r3
 80116a4:	f7f6 fe01 	bl	80082aa <osDelay>
			}
			// send command
			if (seq <= n) {
 80116a8:	7dba      	ldrb	r2, [r7, #22]
 80116aa:	79fb      	ldrb	r3, [r7, #7]
 80116ac:	429a      	cmp	r2, r3
 80116ae:	d812      	bhi.n	80116d6 <Simcom_Send_Response_Repeat+0x82>
				Simcom_Send(command, ms);
 80116b0:	6839      	ldr	r1, [r7, #0]
 80116b2:	68f8      	ldr	r0, [r7, #12]
 80116b4:	f7ff feec 	bl	8011490 <Simcom_Send>
				// if device error, break
				if (Simcom_Response(SIMCOM_STATUS_RESTARTED) || Simcom_Response("+IP ERROR")) {
 80116b8:	4813      	ldr	r0, [pc, #76]	; (8011708 <Simcom_Send_Response_Repeat+0xb4>)
 80116ba:	f7ff fed5 	bl	8011468 <Simcom_Response>
 80116be:	4603      	mov	r3, r0
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	d105      	bne.n	80116d0 <Simcom_Send_Response_Repeat+0x7c>
 80116c4:	4812      	ldr	r0, [pc, #72]	; (8011710 <Simcom_Send_Response_Repeat+0xbc>)
 80116c6:	f7ff fecf 	bl	8011468 <Simcom_Response>
 80116ca:	4603      	mov	r3, r0
 80116cc:	2b00      	cmp	r3, #0
 80116ce:	d005      	beq.n	80116dc <Simcom_Send_Response_Repeat+0x88>
					ret = 0;
 80116d0:	2300      	movs	r3, #0
 80116d2:	75fb      	strb	r3, [r7, #23]
					break;
 80116d4:	e00b      	b.n	80116ee <Simcom_Send_Response_Repeat+0x9a>
				}
			} else {
				// if until max sequence still error, break
				ret = 0;
 80116d6:	2300      	movs	r3, #0
 80116d8:	75fb      	strb	r3, [r7, #23]
				break;
 80116da:	e008      	b.n	80116ee <Simcom_Send_Response_Repeat+0x9a>
			}
			// increment sequence
			seq++;
 80116dc:	7dbb      	ldrb	r3, [r7, #22]
 80116de:	3301      	adds	r3, #1
 80116e0:	75bb      	strb	r3, [r7, #22]
		} while (!Simcom_Response(response));
 80116e2:	68b8      	ldr	r0, [r7, #8]
 80116e4:	f7ff fec0 	bl	8011468 <Simcom_Response>
 80116e8:	4603      	mov	r3, r0
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	d0ce      	beq.n	801168c <Simcom_Send_Response_Repeat+0x38>
	}

	osRecursiveMutexRelease(SimcomRecMutexHandle);
 80116ee:	4b05      	ldr	r3, [pc, #20]	; (8011704 <Simcom_Send_Response_Repeat+0xb0>)
 80116f0:	681b      	ldr	r3, [r3, #0]
 80116f2:	4618      	mov	r0, r3
 80116f4:	f7f7 fa2f 	bl	8008b56 <osRecursiveMutexRelease>
	return ret;
 80116f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80116fa:	4618      	mov	r0, r3
 80116fc:	3718      	adds	r7, #24
 80116fe:	46bd      	mov	sp, r7
 8011700:	bd80      	pop	{r7, pc}
 8011702:	bf00      	nop
 8011704:	20008970 	.word	0x20008970
 8011708:	08018d40 	.word	0x08018d40
 801170c:	20008424 	.word	0x20008424
 8011710:	08018d50 	.word	0x08018d50

08011714 <Simcom_Prepare>:

static void Simcom_Prepare(void) {
 8011714:	b5b0      	push	{r4, r5, r7, lr}
 8011716:	af00      	add	r7, sp, #0
	strcpy(simcom.server_ip, "180.247.126.111");
 8011718:	4b24      	ldr	r3, [pc, #144]	; (80117ac <Simcom_Prepare+0x98>)
 801171a:	4a25      	ldr	r2, [pc, #148]	; (80117b0 <Simcom_Prepare+0x9c>)
 801171c:	1c5c      	adds	r4, r3, #1
 801171e:	4615      	mov	r5, r2
 8011720:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011722:	6020      	str	r0, [r4, #0]
 8011724:	6061      	str	r1, [r4, #4]
 8011726:	60a2      	str	r2, [r4, #8]
 8011728:	60e3      	str	r3, [r4, #12]
	simcom.server_port = 5044;
 801172a:	4b20      	ldr	r3, [pc, #128]	; (80117ac <Simcom_Prepare+0x98>)
 801172c:	f241 32b4 	movw	r2, #5044	; 0x13b4
 8011730:	825a      	strh	r2, [r3, #18]
	simcom.local_port = 5044;
 8011732:	4b1e      	ldr	r3, [pc, #120]	; (80117ac <Simcom_Prepare+0x98>)
 8011734:	f241 32b4 	movw	r2, #5044	; 0x13b4
 8011738:	829a      	strh	r2, [r3, #20]
	strcpy(simcom.network_apn, "3gprs"); 					// "telkomsel"
 801173a:	4b1e      	ldr	r3, [pc, #120]	; (80117b4 <Simcom_Prepare+0xa0>)
 801173c:	4a1e      	ldr	r2, [pc, #120]	; (80117b8 <Simcom_Prepare+0xa4>)
 801173e:	6810      	ldr	r0, [r2, #0]
 8011740:	6018      	str	r0, [r3, #0]
 8011742:	8892      	ldrh	r2, [r2, #4]
 8011744:	809a      	strh	r2, [r3, #4]
	strcpy(simcom.network_username, "3gprs");			// "wap"
 8011746:	4b1d      	ldr	r3, [pc, #116]	; (80117bc <Simcom_Prepare+0xa8>)
 8011748:	4a1b      	ldr	r2, [pc, #108]	; (80117b8 <Simcom_Prepare+0xa4>)
 801174a:	6810      	ldr	r0, [r2, #0]
 801174c:	6018      	str	r0, [r3, #0]
 801174e:	8892      	ldrh	r2, [r2, #4]
 8011750:	809a      	strh	r2, [r3, #4]
	strcpy(simcom.network_password, "3gprs");			// "wap123"
 8011752:	4b1b      	ldr	r3, [pc, #108]	; (80117c0 <Simcom_Prepare+0xac>)
 8011754:	4a18      	ldr	r2, [pc, #96]	; (80117b8 <Simcom_Prepare+0xa4>)
 8011756:	6810      	ldr	r0, [r2, #0]
 8011758:	6018      	str	r0, [r3, #0]
 801175a:	8892      	ldrh	r2, [r2, #4]
 801175c:	809a      	strh	r2, [r3, #4]
	simcom.signal = SIGNAL_3G;
 801175e:	4b13      	ldr	r3, [pc, #76]	; (80117ac <Simcom_Prepare+0x98>)
 8011760:	220e      	movs	r2, #14
 8011762:	701a      	strb	r2, [r3, #0]
	simcom.boot_timeout = 60;
 8011764:	4b11      	ldr	r3, [pc, #68]	; (80117ac <Simcom_Prepare+0x98>)
 8011766:	223c      	movs	r2, #60	; 0x3c
 8011768:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	simcom.repeat_delay = 5;
 801176c:	4b0f      	ldr	r3, [pc, #60]	; (80117ac <Simcom_Prepare+0x98>)
 801176e:	2205      	movs	r2, #5
 8011770:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	// prepare command sequence
	sprintf(CIPSEND, "AT+CIPSEND=0,,\"%s\",%d\r", simcom.server_ip, simcom.server_port);
 8011774:	4b0d      	ldr	r3, [pc, #52]	; (80117ac <Simcom_Prepare+0x98>)
 8011776:	8a5b      	ldrh	r3, [r3, #18]
 8011778:	4a12      	ldr	r2, [pc, #72]	; (80117c4 <Simcom_Prepare+0xb0>)
 801177a:	4913      	ldr	r1, [pc, #76]	; (80117c8 <Simcom_Prepare+0xb4>)
 801177c:	4813      	ldr	r0, [pc, #76]	; (80117cc <Simcom_Prepare+0xb8>)
 801177e:	f003 fd07 	bl	8015190 <siprintf>
	sprintf(CIPOPEN, "AT+CIPOPEN=0,\"UDP\",,,%d\r", simcom.local_port);
 8011782:	4b0a      	ldr	r3, [pc, #40]	; (80117ac <Simcom_Prepare+0x98>)
 8011784:	8a9b      	ldrh	r3, [r3, #20]
 8011786:	461a      	mov	r2, r3
 8011788:	4911      	ldr	r1, [pc, #68]	; (80117d0 <Simcom_Prepare+0xbc>)
 801178a:	4812      	ldr	r0, [pc, #72]	; (80117d4 <Simcom_Prepare+0xc0>)
 801178c:	f003 fd00 	bl	8015190 <siprintf>
	sprintf(CGSOCKCONT, "AT+CGSOCKCONT=1,\"IP\",\"%s\"\r", simcom.network_apn);
 8011790:	4a08      	ldr	r2, [pc, #32]	; (80117b4 <Simcom_Prepare+0xa0>)
 8011792:	4911      	ldr	r1, [pc, #68]	; (80117d8 <Simcom_Prepare+0xc4>)
 8011794:	4811      	ldr	r0, [pc, #68]	; (80117dc <Simcom_Prepare+0xc8>)
 8011796:	f003 fcfb 	bl	8015190 <siprintf>
	sprintf(CSOCKAUTH, "AT+CSOCKAUTH=1,1,\"%s\",\"%s\"\r", simcom.network_username, simcom.network_password);
 801179a:	4b09      	ldr	r3, [pc, #36]	; (80117c0 <Simcom_Prepare+0xac>)
 801179c:	4a07      	ldr	r2, [pc, #28]	; (80117bc <Simcom_Prepare+0xa8>)
 801179e:	4910      	ldr	r1, [pc, #64]	; (80117e0 <Simcom_Prepare+0xcc>)
 80117a0:	4810      	ldr	r0, [pc, #64]	; (80117e4 <Simcom_Prepare+0xd0>)
 80117a2:	f003 fcf5 	bl	8015190 <siprintf>
}
 80117a6:	bf00      	nop
 80117a8:	bdb0      	pop	{r4, r5, r7, pc}
 80117aa:	bf00      	nop
 80117ac:	20008424 	.word	0x20008424
 80117b0:	08018d5c 	.word	0x08018d5c
 80117b4:	2000843a 	.word	0x2000843a
 80117b8:	08018d6c 	.word	0x08018d6c
 80117bc:	2000844e 	.word	0x2000844e
 80117c0:	20008462 	.word	0x20008462
 80117c4:	20008425 	.word	0x20008425
 80117c8:	08018d74 	.word	0x08018d74
 80117cc:	200084f0 	.word	0x200084f0
 80117d0:	08018d8c 	.word	0x08018d8c
 80117d4:	20008524 	.word	0x20008524
 80117d8:	08018da8 	.word	0x08018da8
 80117dc:	20008478 	.word	0x20008478
 80117e0:	08018dc4 	.word	0x08018dc4
 80117e4:	200084ac 	.word	0x200084ac

080117e8 <Simcom_Init>:

void Simcom_Init(uint8_t skipFirstBoot) {
 80117e8:	b580      	push	{r7, lr}
 80117ea:	b084      	sub	sp, #16
 80117ec:	af00      	add	r7, sp, #0
 80117ee:	4603      	mov	r3, r0
 80117f0:	71fb      	strb	r3, [r7, #7]
	uint8_t p, boot = 1;
 80117f2:	2301      	movs	r3, #1
 80117f4:	73bb      	strb	r3, [r7, #14]
	// this do-while is complicated, but it doesn't use recursive function, so it's stack safe
	do {
		// show previous response
		SWV_SendStrLn("=========================");
 80117f6:	487f      	ldr	r0, [pc, #508]	; (80119f4 <Simcom_Init+0x20c>)
 80117f8:	f000 fb24 	bl	8011e44 <SWV_SendStrLn>
		SWV_SendStrLn("       BEFORE BOOT       ");
 80117fc:	487e      	ldr	r0, [pc, #504]	; (80119f8 <Simcom_Init+0x210>)
 80117fe:	f000 fb21 	bl	8011e44 <SWV_SendStrLn>
		SWV_SendBuf(SIMCOM_UART_RX_Buffer, strlen(SIMCOM_UART_RX_Buffer));
 8011802:	487e      	ldr	r0, [pc, #504]	; (80119fc <Simcom_Init+0x214>)
 8011804:	f7ee fcee 	bl	80001e4 <strlen>
 8011808:	4603      	mov	r3, r0
 801180a:	b29b      	uxth	r3, r3
 801180c:	4619      	mov	r1, r3
 801180e:	487b      	ldr	r0, [pc, #492]	; (80119fc <Simcom_Init+0x214>)
 8011810:	f000 fb3e 	bl	8011e90 <SWV_SendBuf>
		SWV_SendStrLn("\n=========================");
 8011814:	487a      	ldr	r0, [pc, #488]	; (8011a00 <Simcom_Init+0x218>)
 8011816:	f000 fb15 	bl	8011e44 <SWV_SendStrLn>

		SWV_SendStrLn("Simcom_Init");
 801181a:	487a      	ldr	r0, [pc, #488]	; (8011a04 <Simcom_Init+0x21c>)
 801181c:	f000 fb12 	bl	8011e44 <SWV_SendStrLn>

		p = 0;
 8011820:	2300      	movs	r3, #0
 8011822:	73fb      	strb	r3, [r7, #15]
		// Turn on the module & wait till ready
		if (boot && !skipFirstBoot) {
 8011824:	7bbb      	ldrb	r3, [r7, #14]
 8011826:	2b00      	cmp	r3, #0
 8011828:	d042      	beq.n	80118b0 <Simcom_Init+0xc8>
 801182a:	79fb      	ldrb	r3, [r7, #7]
 801182c:	2b00      	cmp	r3, #0
 801182e:	d13f      	bne.n	80118b0 <Simcom_Init+0xc8>
			skipFirstBoot = 0;
 8011830:	2300      	movs	r3, #0
 8011832:	71fb      	strb	r3, [r7, #7]
			//set default value to variable
			Simcom_Prepare();
 8011834:	f7ff ff6e 	bl	8011714 <Simcom_Prepare>
			// booting
			p = Simcom_Boot();
 8011838:	f7ff fdbe 	bl	80113b8 <Simcom_Boot>
 801183c:	4603      	mov	r3, r0
 801183e:	73fb      	strb	r3, [r7, #15]
			// Execute only on first setup
			if (p) {
 8011840:	7bfb      	ldrb	r3, [r7, #15]
 8011842:	2b00      	cmp	r3, #0
 8011844:	d02c      	beq.n	80118a0 <Simcom_Init+0xb8>
				// show boot response
				SWV_SendStrLn("=========================");
 8011846:	486b      	ldr	r0, [pc, #428]	; (80119f4 <Simcom_Init+0x20c>)
 8011848:	f000 fafc 	bl	8011e44 <SWV_SendStrLn>
				SWV_SendStrLn("        AFTER BOOT       ");
 801184c:	486e      	ldr	r0, [pc, #440]	; (8011a08 <Simcom_Init+0x220>)
 801184e:	f000 faf9 	bl	8011e44 <SWV_SendStrLn>
				SWV_SendBuf(SIMCOM_UART_RX_Buffer, strlen(SIMCOM_UART_RX_Buffer));
 8011852:	486a      	ldr	r0, [pc, #424]	; (80119fc <Simcom_Init+0x214>)
 8011854:	f7ee fcc6 	bl	80001e4 <strlen>
 8011858:	4603      	mov	r3, r0
 801185a:	b29b      	uxth	r3, r3
 801185c:	4619      	mov	r1, r3
 801185e:	4867      	ldr	r0, [pc, #412]	; (80119fc <Simcom_Init+0x214>)
 8011860:	f000 fb16 	bl	8011e90 <SWV_SendBuf>
				SWV_SendStrLn("\n=========================");
 8011864:	4866      	ldr	r0, [pc, #408]	; (8011a00 <Simcom_Init+0x218>)
 8011866:	f000 faed 	bl	8011e44 <SWV_SendStrLn>
				//disable command echo
				p = Simcom_Send("ATE1\r", 500);
 801186a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 801186e:	4867      	ldr	r0, [pc, #412]	; (8011a0c <Simcom_Init+0x224>)
 8011870:	f7ff fe0e 	bl	8011490 <Simcom_Send>
 8011874:	4603      	mov	r3, r0
 8011876:	73fb      	strb	r3, [r7, #15]
				//set permanent baudrate
				if (p) {
 8011878:	7bfb      	ldrb	r3, [r7, #15]
 801187a:	2b00      	cmp	r3, #0
 801187c:	d006      	beq.n	801188c <Simcom_Init+0xa4>
					p = Simcom_Send("AT+IPREX=9600\r", 500);
 801187e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8011882:	4863      	ldr	r0, [pc, #396]	; (8011a10 <Simcom_Init+0x228>)
 8011884:	f7ff fe04 	bl	8011490 <Simcom_Send>
 8011888:	4603      	mov	r3, r0
 801188a:	73fb      	strb	r3, [r7, #15]
				}
				//save user setting to ME
				if (p) {
 801188c:	7bfb      	ldrb	r3, [r7, #15]
 801188e:	2b00      	cmp	r3, #0
 8011890:	d006      	beq.n	80118a0 <Simcom_Init+0xb8>
					p = Simcom_Send("AT&W\r", 500);
 8011892:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8011896:	485f      	ldr	r0, [pc, #380]	; (8011a14 <Simcom_Init+0x22c>)
 8011898:	f7ff fdfa 	bl	8011490 <Simcom_Send>
 801189c:	4603      	mov	r3, r0
 801189e:	73fb      	strb	r3, [r7, #15]
				}
			}
			// if boot sequence ok, then disable it
			boot = !p;
 80118a0:	7bfb      	ldrb	r3, [r7, #15]
 80118a2:	2b00      	cmp	r3, #0
 80118a4:	bf0c      	ite	eq
 80118a6:	2301      	moveq	r3, #1
 80118a8:	2300      	movne	r3, #0
 80118aa:	b2db      	uxtb	r3, r3
 80118ac:	73bb      	strb	r3, [r7, #14]
 80118ae:	e001      	b.n	80118b4 <Simcom_Init+0xcc>
		} else {
			p = 1;
 80118b0:	2301      	movs	r3, #1
 80118b2:	73fb      	strb	r3, [r7, #15]
		}
		//Hide “+IPD” header
		if (p) {
 80118b4:	7bfb      	ldrb	r3, [r7, #15]
 80118b6:	2b00      	cmp	r3, #0
 80118b8:	d006      	beq.n	80118c8 <Simcom_Init+0xe0>
			p = Simcom_Send("AT+CIPHEAD=0\r", 500);
 80118ba:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80118be:	4856      	ldr	r0, [pc, #344]	; (8011a18 <Simcom_Init+0x230>)
 80118c0:	f7ff fde6 	bl	8011490 <Simcom_Send>
 80118c4:	4603      	mov	r3, r0
 80118c6:	73fb      	strb	r3, [r7, #15]
		}
		//Hide “RECV FROM” header
		if (p) {
 80118c8:	7bfb      	ldrb	r3, [r7, #15]
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	d006      	beq.n	80118dc <Simcom_Init+0xf4>
			p = Simcom_Send("AT+CIPSRIP=0\r", 500);
 80118ce:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80118d2:	4852      	ldr	r0, [pc, #328]	; (8011a1c <Simcom_Init+0x234>)
 80118d4:	f7ff fddc 	bl	8011490 <Simcom_Send>
 80118d8:	4603      	mov	r3, r0
 80118da:	73fb      	strb	r3, [r7, #15]
		}
		//Set module to cache received data.
		if (p) {
 80118dc:	7bfb      	ldrb	r3, [r7, #15]
 80118de:	2b00      	cmp	r3, #0
 80118e0:	d006      	beq.n	80118f0 <Simcom_Init+0x108>
			p = Simcom_Send("AT+CIPRXGET=1\r", 500);
 80118e2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80118e6:	484e      	ldr	r0, [pc, #312]	; (8011a20 <Simcom_Init+0x238>)
 80118e8:	f7ff fdd2 	bl	8011490 <Simcom_Send>
 80118ec:	4603      	mov	r3, r0
 80118ee:	73fb      	strb	r3, [r7, #15]
		}
		// Set signal
		if (p) {
 80118f0:	7bfb      	ldrb	r3, [r7, #15]
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	d006      	beq.n	8011904 <Simcom_Init+0x11c>
			p = Simcom_Set_Signal(simcom.signal);
 80118f6:	4b4b      	ldr	r3, [pc, #300]	; (8011a24 <Simcom_Init+0x23c>)
 80118f8:	781b      	ldrb	r3, [r3, #0]
 80118fa:	4618      	mov	r0, r3
 80118fc:	f000 f8d8 	bl	8011ab0 <Simcom_Set_Signal>
 8011900:	4603      	mov	r3, r0
 8011902:	73fb      	strb	r3, [r7, #15]
		}

		//Check network registration
		if (p) {
 8011904:	7bfb      	ldrb	r3, [r7, #15]
 8011906:	2b00      	cmp	r3, #0
 8011908:	d008      	beq.n	801191c <Simcom_Init+0x134>
			p = Simcom_Send_Response_Repeat("AT+CREG?\r", "+CREG: 0,1", 10, 500);
 801190a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 801190e:	220a      	movs	r2, #10
 8011910:	4945      	ldr	r1, [pc, #276]	; (8011a28 <Simcom_Init+0x240>)
 8011912:	4846      	ldr	r0, [pc, #280]	; (8011a2c <Simcom_Init+0x244>)
 8011914:	f7ff fe9e 	bl	8011654 <Simcom_Send_Response_Repeat>
 8011918:	4603      	mov	r3, r0
 801191a:	73fb      	strb	r3, [r7, #15]
		}
		//Check signal
		if (p) {
 801191c:	7bfb      	ldrb	r3, [r7, #15]
 801191e:	2b00      	cmp	r3, #0
 8011920:	d00b      	beq.n	801193a <Simcom_Init+0x152>
			// wait until signal catch up
			p = Simcom_Signal_Locked(10);
 8011922:	200a      	movs	r0, #10
 8011924:	f000 f896 	bl	8011a54 <Simcom_Signal_Locked>
 8011928:	4603      	mov	r3, r0
 801192a:	73fb      	strb	r3, [r7, #15]
			// restart module to fix it
			boot = !p;
 801192c:	7bfb      	ldrb	r3, [r7, #15]
 801192e:	2b00      	cmp	r3, #0
 8011930:	bf0c      	ite	eq
 8011932:	2301      	moveq	r3, #1
 8011934:	2300      	movne	r3, #0
 8011936:	b2db      	uxtb	r3, r3
 8011938:	73bb      	strb	r3, [r7, #14]
		}
		//Check GPSRS network registration
		if (simcom.signal == SIGNAL_2G) {
 801193a:	4b3a      	ldr	r3, [pc, #232]	; (8011a24 <Simcom_Init+0x23c>)
 801193c:	781b      	ldrb	r3, [r3, #0]
 801193e:	2b0d      	cmp	r3, #13
 8011940:	d10b      	bne.n	801195a <Simcom_Init+0x172>
			if (p) {
 8011942:	7bfb      	ldrb	r3, [r7, #15]
 8011944:	2b00      	cmp	r3, #0
 8011946:	d008      	beq.n	801195a <Simcom_Init+0x172>
				p = Simcom_Send_Response_Repeat("AT+CGREG?\r", "+CGREG: 0,1", 10, 500);
 8011948:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 801194c:	220a      	movs	r2, #10
 801194e:	4938      	ldr	r1, [pc, #224]	; (8011a30 <Simcom_Init+0x248>)
 8011950:	4838      	ldr	r0, [pc, #224]	; (8011a34 <Simcom_Init+0x24c>)
 8011952:	f7ff fe7f 	bl	8011654 <Simcom_Send_Response_Repeat>
 8011956:	4603      	mov	r3, r0
 8011958:	73fb      	strb	r3, [r7, #15]
			}
		}

		//Define socket PDP context (APN Settings)
		if (p) {
 801195a:	7bfb      	ldrb	r3, [r7, #15]
 801195c:	2b00      	cmp	r3, #0
 801195e:	d006      	beq.n	801196e <Simcom_Init+0x186>
			p = Simcom_Send(CGSOCKCONT, 500);
 8011960:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8011964:	4834      	ldr	r0, [pc, #208]	; (8011a38 <Simcom_Init+0x250>)
 8011966:	f7ff fd93 	bl	8011490 <Simcom_Send>
 801196a:	4603      	mov	r3, r0
 801196c:	73fb      	strb	r3, [r7, #15]
		}
		//Set active PDP context profile number
		if (p) {
 801196e:	7bfb      	ldrb	r3, [r7, #15]
 8011970:	2b00      	cmp	r3, #0
 8011972:	d006      	beq.n	8011982 <Simcom_Init+0x19a>
			p = Simcom_Send("AT+CSOCKSETPN=1\r", 500);
 8011974:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8011978:	4830      	ldr	r0, [pc, #192]	; (8011a3c <Simcom_Init+0x254>)
 801197a:	f7ff fd89 	bl	8011490 <Simcom_Send>
 801197e:	4603      	mov	r3, r0
 8011980:	73fb      	strb	r3, [r7, #15]
		}
		//Set type of authentication for PDP-IP connections of socket
		if (p) {
 8011982:	7bfb      	ldrb	r3, [r7, #15]
 8011984:	2b00      	cmp	r3, #0
 8011986:	d006      	beq.n	8011996 <Simcom_Init+0x1ae>
			p = Simcom_Send(CSOCKAUTH, 500);
 8011988:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 801198c:	482c      	ldr	r0, [pc, #176]	; (8011a40 <Simcom_Init+0x258>)
 801198e:	f7ff fd7f 	bl	8011490 <Simcom_Send>
 8011992:	4603      	mov	r3, r0
 8011994:	73fb      	strb	r3, [r7, #15]
		}
		//Select TCPIP application mode (0: Non Transparent (command mode), 1: Transparent (data mode))
		if (p) {
 8011996:	7bfb      	ldrb	r3, [r7, #15]
 8011998:	2b00      	cmp	r3, #0
 801199a:	d006      	beq.n	80119aa <Simcom_Init+0x1c2>
			p = Simcom_Send("AT+CIPMODE=0\r", 500);
 801199c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80119a0:	4828      	ldr	r0, [pc, #160]	; (8011a44 <Simcom_Init+0x25c>)
 80119a2:	f7ff fd75 	bl	8011490 <Simcom_Send>
 80119a6:	4603      	mov	r3, r0
 80119a8:	73fb      	strb	r3, [r7, #15]
		}
		//Open network
		if (p) {
 80119aa:	7bfb      	ldrb	r3, [r7, #15]
 80119ac:	2b00      	cmp	r3, #0
 80119ae:	d006      	beq.n	80119be <Simcom_Init+0x1d6>
			p = Simcom_Send("AT+NETOPEN\r", 1000);
 80119b0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80119b4:	4824      	ldr	r0, [pc, #144]	; (8011a48 <Simcom_Init+0x260>)
 80119b6:	f7ff fd6b 	bl	8011490 <Simcom_Send>
 80119ba:	4603      	mov	r3, r0
 80119bc:	73fb      	strb	r3, [r7, #15]
		}
		//Open local UDP Connection
		if (p) {
 80119be:	7bfb      	ldrb	r3, [r7, #15]
 80119c0:	2b00      	cmp	r3, #0
 80119c2:	d00f      	beq.n	80119e4 <Simcom_Init+0x1fc>
			p = Simcom_Send_Response_Repeat(CIPOPEN, SIMCOM_STATUS_OK, 10, 1000);
 80119c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80119c8:	220a      	movs	r2, #10
 80119ca:	4920      	ldr	r1, [pc, #128]	; (8011a4c <Simcom_Init+0x264>)
 80119cc:	4820      	ldr	r0, [pc, #128]	; (8011a50 <Simcom_Init+0x268>)
 80119ce:	f7ff fe41 	bl	8011654 <Simcom_Send_Response_Repeat>
 80119d2:	4603      	mov	r3, r0
 80119d4:	73fb      	strb	r3, [r7, #15]
			// restart module to fix it
			boot = !p;
 80119d6:	7bfb      	ldrb	r3, [r7, #15]
 80119d8:	2b00      	cmp	r3, #0
 80119da:	bf0c      	ite	eq
 80119dc:	2301      	moveq	r3, #1
 80119de:	2300      	movne	r3, #0
 80119e0:	b2db      	uxtb	r3, r3
 80119e2:	73bb      	strb	r3, [r7, #14]
		}
	} while (p == 0);
 80119e4:	7bfb      	ldrb	r3, [r7, #15]
 80119e6:	2b00      	cmp	r3, #0
 80119e8:	f43f af05 	beq.w	80117f6 <Simcom_Init+0xe>
}
 80119ec:	bf00      	nop
 80119ee:	3710      	adds	r7, #16
 80119f0:	46bd      	mov	sp, r7
 80119f2:	bd80      	pop	{r7, pc}
 80119f4:	08018de0 	.word	0x08018de0
 80119f8:	08018dfc 	.word	0x08018dfc
 80119fc:	20006d30 	.word	0x20006d30
 8011a00:	08018e18 	.word	0x08018e18
 8011a04:	08018e34 	.word	0x08018e34
 8011a08:	08018e40 	.word	0x08018e40
 8011a0c:	08018e5c 	.word	0x08018e5c
 8011a10:	08018e64 	.word	0x08018e64
 8011a14:	08018e74 	.word	0x08018e74
 8011a18:	08018e7c 	.word	0x08018e7c
 8011a1c:	08018e8c 	.word	0x08018e8c
 8011a20:	08018e9c 	.word	0x08018e9c
 8011a24:	20008424 	.word	0x20008424
 8011a28:	08018eac 	.word	0x08018eac
 8011a2c:	08018eb8 	.word	0x08018eb8
 8011a30:	08018ec4 	.word	0x08018ec4
 8011a34:	08018ed0 	.word	0x08018ed0
 8011a38:	20008478 	.word	0x20008478
 8011a3c:	08018edc 	.word	0x08018edc
 8011a40:	200084ac 	.word	0x200084ac
 8011a44:	08018ef0 	.word	0x08018ef0
 8011a48:	08018f00 	.word	0x08018f00
 8011a4c:	08018d38 	.word	0x08018d38
 8011a50:	20008524 	.word	0x20008524

08011a54 <Simcom_Signal_Locked>:

uint8_t Simcom_Signal_Locked(uint8_t n) {
 8011a54:	b580      	push	{r7, lr}
 8011a56:	b086      	sub	sp, #24
 8011a58:	af00      	add	r7, sp, #0
 8011a5a:	4603      	mov	r3, r0
 8011a5c:	71fb      	strb	r3, [r7, #7]
	uint8_t p = 0;
 8011a5e:	2300      	movs	r3, #0
 8011a60:	75fb      	strb	r3, [r7, #23]
	char ONLINE[14];

	// Inquiring UE system information
	sprintf(ONLINE, "%s,Online,", simcom.signal == SIGNAL_3G ? "WCDMA" : "GSM");
 8011a62:	4b0e      	ldr	r3, [pc, #56]	; (8011a9c <Simcom_Signal_Locked+0x48>)
 8011a64:	781b      	ldrb	r3, [r3, #0]
 8011a66:	2b0e      	cmp	r3, #14
 8011a68:	d101      	bne.n	8011a6e <Simcom_Signal_Locked+0x1a>
 8011a6a:	4a0d      	ldr	r2, [pc, #52]	; (8011aa0 <Simcom_Signal_Locked+0x4c>)
 8011a6c:	e000      	b.n	8011a70 <Simcom_Signal_Locked+0x1c>
 8011a6e:	4a0d      	ldr	r2, [pc, #52]	; (8011aa4 <Simcom_Signal_Locked+0x50>)
 8011a70:	f107 0308 	add.w	r3, r7, #8
 8011a74:	490c      	ldr	r1, [pc, #48]	; (8011aa8 <Simcom_Signal_Locked+0x54>)
 8011a76:	4618      	mov	r0, r3
 8011a78:	f003 fb8a 	bl	8015190 <siprintf>
	p = Simcom_Send_Response_Repeat("AT+CPSI?\r", ONLINE, n, 500);
 8011a7c:	79fa      	ldrb	r2, [r7, #7]
 8011a7e:	f107 0108 	add.w	r1, r7, #8
 8011a82:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8011a86:	4809      	ldr	r0, [pc, #36]	; (8011aac <Simcom_Signal_Locked+0x58>)
 8011a88:	f7ff fde4 	bl	8011654 <Simcom_Send_Response_Repeat>
 8011a8c:	4603      	mov	r3, r0
 8011a8e:	75fb      	strb	r3, [r7, #23]

	return p;
 8011a90:	7dfb      	ldrb	r3, [r7, #23]
}
 8011a92:	4618      	mov	r0, r3
 8011a94:	3718      	adds	r7, #24
 8011a96:	46bd      	mov	sp, r7
 8011a98:	bd80      	pop	{r7, pc}
 8011a9a:	bf00      	nop
 8011a9c:	20008424 	.word	0x20008424
 8011aa0:	08018f0c 	.word	0x08018f0c
 8011aa4:	08018f14 	.word	0x08018f14
 8011aa8:	08018f18 	.word	0x08018f18
 8011aac:	08018f24 	.word	0x08018f24

08011ab0 <Simcom_Set_Signal>:

uint8_t Simcom_Set_Signal(signal_t signal) {
 8011ab0:	b580      	push	{r7, lr}
 8011ab2:	b086      	sub	sp, #24
 8011ab4:	af00      	add	r7, sp, #0
 8011ab6:	4603      	mov	r3, r0
 8011ab8:	71fb      	strb	r3, [r7, #7]
	uint8_t p;
	char CNMP[11];

	//Lock to WCDMA
	sprintf(CNMP, "AT+CNMP=%d\r", signal);
 8011aba:	79fa      	ldrb	r2, [r7, #7]
 8011abc:	f107 030c 	add.w	r3, r7, #12
 8011ac0:	4908      	ldr	r1, [pc, #32]	; (8011ae4 <Simcom_Set_Signal+0x34>)
 8011ac2:	4618      	mov	r0, r3
 8011ac4:	f003 fb64 	bl	8015190 <siprintf>
	p = Simcom_Send(CNMP, 500);
 8011ac8:	f107 030c 	add.w	r3, r7, #12
 8011acc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8011ad0:	4618      	mov	r0, r3
 8011ad2:	f7ff fcdd 	bl	8011490 <Simcom_Send>
 8011ad6:	4603      	mov	r3, r0
 8011ad8:	75fb      	strb	r3, [r7, #23]

	return p;
 8011ada:	7dfb      	ldrb	r3, [r7, #23]
}
 8011adc:	4618      	mov	r0, r3
 8011ade:	3718      	adds	r7, #24
 8011ae0:	46bd      	mov	sp, r7
 8011ae2:	bd80      	pop	{r7, pc}
 8011ae4:	08018f30 	.word	0x08018f30

08011ae8 <Simcom_Send_Payload>:

uint8_t Simcom_Send_Payload(void) {
 8011ae8:	b580      	push	{r7, lr}
 8011aea:	af00      	add	r7, sp, #0
	// set sending time
	Reporter_Set_Sending_Time();
 8011aec:	f7ff faa2 	bl	8011034 <Reporter_Set_Sending_Time>
	// send payload
	return Simcom_To_Server(PAYLOAD, strlen(PAYLOAD));
 8011af0:	4805      	ldr	r0, [pc, #20]	; (8011b08 <Simcom_Send_Payload+0x20>)
 8011af2:	f7ee fb77 	bl	80001e4 <strlen>
 8011af6:	4603      	mov	r3, r0
 8011af8:	b29b      	uxth	r3, r3
 8011afa:	4619      	mov	r1, r3
 8011afc:	4802      	ldr	r0, [pc, #8]	; (8011b08 <Simcom_Send_Payload+0x20>)
 8011afe:	f000 f805 	bl	8011b0c <Simcom_To_Server>
 8011b02:	4603      	mov	r3, r0
}
 8011b04:	4618      	mov	r0, r3
 8011b06:	bd80      	pop	{r7, pc}
 8011b08:	20007c24 	.word	0x20007c24

08011b0c <Simcom_To_Server>:

uint8_t Simcom_To_Server(char *message, uint16_t length) {
 8011b0c:	b5b0      	push	{r4, r5, r7, lr}
 8011b0e:	b086      	sub	sp, #24
 8011b10:	af00      	add	r7, sp, #0
 8011b12:	6078      	str	r0, [r7, #4]
 8011b14:	460b      	mov	r3, r1
 8011b16:	807b      	strh	r3, [r7, #2]
 8011b18:	466b      	mov	r3, sp
 8011b1a:	461d      	mov	r5, r3
	osRecursiveMutexWait(SimcomRecMutexHandle, osWaitForever);
 8011b1c:	4b28      	ldr	r3, [pc, #160]	; (8011bc0 <Simcom_To_Server+0xb4>)
 8011b1e:	681b      	ldr	r3, [r3, #0]
 8011b20:	f04f 31ff 	mov.w	r1, #4294967295
 8011b24:	4618      	mov	r0, r3
 8011b26:	f7f7 f829 	bl	8008b7c <osRecursiveMutexWait>

	uint8_t ret = 0;
 8011b2a:	2300      	movs	r3, #0
 8011b2c:	75fb      	strb	r3, [r7, #23]
	char str[length + 1];
 8011b2e:	887b      	ldrh	r3, [r7, #2]
 8011b30:	1c58      	adds	r0, r3, #1
 8011b32:	1e43      	subs	r3, r0, #1
 8011b34:	613b      	str	r3, [r7, #16]
 8011b36:	4603      	mov	r3, r0
 8011b38:	4619      	mov	r1, r3
 8011b3a:	f04f 0200 	mov.w	r2, #0
 8011b3e:	f04f 0300 	mov.w	r3, #0
 8011b42:	f04f 0400 	mov.w	r4, #0
 8011b46:	00d4      	lsls	r4, r2, #3
 8011b48:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8011b4c:	00cb      	lsls	r3, r1, #3
 8011b4e:	4603      	mov	r3, r0
 8011b50:	4619      	mov	r1, r3
 8011b52:	f04f 0200 	mov.w	r2, #0
 8011b56:	f04f 0300 	mov.w	r3, #0
 8011b5a:	f04f 0400 	mov.w	r4, #0
 8011b5e:	00d4      	lsls	r4, r2, #3
 8011b60:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8011b64:	00cb      	lsls	r3, r1, #3
 8011b66:	4603      	mov	r3, r0
 8011b68:	3307      	adds	r3, #7
 8011b6a:	08db      	lsrs	r3, r3, #3
 8011b6c:	00db      	lsls	r3, r3, #3
 8011b6e:	ebad 0d03 	sub.w	sp, sp, r3
 8011b72:	466b      	mov	r3, sp
 8011b74:	3300      	adds	r3, #0
 8011b76:	60fb      	str	r3, [r7, #12]
	// add message end character
	sprintf(str, "%s%s", message, SIMCOM_MESSAGE_END);
 8011b78:	68f8      	ldr	r0, [r7, #12]
 8011b7a:	4b12      	ldr	r3, [pc, #72]	; (8011bc4 <Simcom_To_Server+0xb8>)
 8011b7c:	687a      	ldr	r2, [r7, #4]
 8011b7e:	4912      	ldr	r1, [pc, #72]	; (8011bc8 <Simcom_To_Server+0xbc>)
 8011b80:	f003 fb06 	bl	8015190 <siprintf>
	// confirm to server that command is executed
	if (Simcom_Send(CIPSEND, 500)) {
 8011b84:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8011b88:	4810      	ldr	r0, [pc, #64]	; (8011bcc <Simcom_To_Server+0xc0>)
 8011b8a:	f7ff fc81 	bl	8011490 <Simcom_Send>
 8011b8e:	4603      	mov	r3, r0
 8011b90:	2b00      	cmp	r3, #0
 8011b92:	d00a      	beq.n	8011baa <Simcom_To_Server+0x9e>
		// send response
		if (Simcom_Send(str, 500)) {
 8011b94:	68fb      	ldr	r3, [r7, #12]
 8011b96:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8011b9a:	4618      	mov	r0, r3
 8011b9c:	f7ff fc78 	bl	8011490 <Simcom_Send>
 8011ba0:	4603      	mov	r3, r0
 8011ba2:	2b00      	cmp	r3, #0
 8011ba4:	d001      	beq.n	8011baa <Simcom_To_Server+0x9e>
			ret = 1;
 8011ba6:	2301      	movs	r3, #1
 8011ba8:	75fb      	strb	r3, [r7, #23]
		}
	}

	osRecursiveMutexRelease(SimcomRecMutexHandle);
 8011baa:	4b05      	ldr	r3, [pc, #20]	; (8011bc0 <Simcom_To_Server+0xb4>)
 8011bac:	681b      	ldr	r3, [r3, #0]
 8011bae:	4618      	mov	r0, r3
 8011bb0:	f7f6 ffd1 	bl	8008b56 <osRecursiveMutexRelease>
	return ret;
 8011bb4:	7dfb      	ldrb	r3, [r7, #23]
 8011bb6:	46ad      	mov	sp, r5
}
 8011bb8:	4618      	mov	r0, r3
 8011bba:	3718      	adds	r7, #24
 8011bbc:	46bd      	mov	sp, r7
 8011bbe:	bdb0      	pop	{r4, r5, r7, pc}
 8011bc0:	20008970 	.word	0x20008970
 8011bc4:	08018f3c 	.word	0x08018f3c
 8011bc8:	08018f40 	.word	0x08018f40
 8011bcc:	200084f0 	.word	0x200084f0

08011bd0 <Simcom_Check_Command>:

uint8_t Simcom_Check_Command(void) {
 8011bd0:	b580      	push	{r7, lr}
 8011bd2:	af00      	add	r7, sp, #0
	// check if it has new command
	return (strstr(SIMCOM_UART_RX_Buffer, "+CIPRXGET: 1") != NULL);
 8011bd4:	4905      	ldr	r1, [pc, #20]	; (8011bec <Simcom_Check_Command+0x1c>)
 8011bd6:	4806      	ldr	r0, [pc, #24]	; (8011bf0 <Simcom_Check_Command+0x20>)
 8011bd8:	f003 fb36 	bl	8015248 <strstr>
 8011bdc:	4603      	mov	r3, r0
 8011bde:	2b00      	cmp	r3, #0
 8011be0:	bf14      	ite	ne
 8011be2:	2301      	movne	r3, #1
 8011be4:	2300      	moveq	r3, #0
 8011be6:	b2db      	uxtb	r3, r3
}
 8011be8:	4618      	mov	r0, r3
 8011bea:	bd80      	pop	{r7, pc}
 8011bec:	08018f48 	.word	0x08018f48
 8011bf0:	20006d30 	.word	0x20006d30

08011bf4 <Simcom_Get_Command>:

uint8_t Simcom_Get_Command(command_t *command) {
 8011bf4:	b580      	push	{r7, lr}
 8011bf6:	b086      	sub	sp, #24
 8011bf8:	af00      	add	r7, sp, #0
 8011bfa:	6078      	str	r0, [r7, #4]
	osRecursiveMutexWait(SimcomRecMutexHandle, osWaitForever);
 8011bfc:	4b40      	ldr	r3, [pc, #256]	; (8011d00 <Simcom_Get_Command+0x10c>)
 8011bfe:	681b      	ldr	r3, [r3, #0]
 8011c00:	f04f 31ff 	mov.w	r1, #4294967295
 8011c04:	4618      	mov	r0, r3
 8011c06:	f7f6 ffb9 	bl	8008b7c <osRecursiveMutexWait>

	uint8_t ret = 0;
 8011c0a:	2300      	movs	r3, #0
 8011c0c:	75fb      	strb	r3, [r7, #23]
	char *start, *delim, *end;

	if (Simcom_Send("AT+CIPRXGET=2,0\r", 500)) {
 8011c0e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8011c12:	483c      	ldr	r0, [pc, #240]	; (8011d04 <Simcom_Get_Command+0x110>)
 8011c14:	f7ff fc3c 	bl	8011490 <Simcom_Send>
 8011c18:	4603      	mov	r3, r0
 8011c1a:	2b00      	cmp	r3, #0
 8011c1c:	d065      	beq.n	8011cea <Simcom_Get_Command+0xf6>
		// get pointer reference
		start = strstr(SIMCOM_UART_RX_Buffer, "AT$");
 8011c1e:	493a      	ldr	r1, [pc, #232]	; (8011d08 <Simcom_Get_Command+0x114>)
 8011c20:	483a      	ldr	r0, [pc, #232]	; (8011d0c <Simcom_Get_Command+0x118>)
 8011c22:	f003 fb11 	bl	8015248 <strstr>
 8011c26:	6138      	str	r0, [r7, #16]
		end = strstr(start, "\r\n\r\n");
 8011c28:	4939      	ldr	r1, [pc, #228]	; (8011d10 <Simcom_Get_Command+0x11c>)
 8011c2a:	6938      	ldr	r0, [r7, #16]
 8011c2c:	f003 fb0c 	bl	8015248 <strstr>
 8011c30:	60f8      	str	r0, [r7, #12]
		delim = strchr(start, '=');
 8011c32:	213d      	movs	r1, #61	; 0x3d
 8011c34:	6938      	ldr	r0, [r7, #16]
 8011c36:	f003 facb 	bl	80151d0 <strchr>
 8011c3a:	60b8      	str	r0, [r7, #8]

		// check if command has value
		if (delim != NULL) {
 8011c3c:	68bb      	ldr	r3, [r7, #8]
 8011c3e:	2b00      	cmp	r3, #0
 8011c40:	d025      	beq.n	8011c8e <Simcom_Get_Command+0x9a>
			// get command
			strncpy(command->var, start + 3, delim - (start + 3));
 8011c42:	6878      	ldr	r0, [r7, #4]
 8011c44:	693b      	ldr	r3, [r7, #16]
 8011c46:	1cd9      	adds	r1, r3, #3
 8011c48:	68bb      	ldr	r3, [r7, #8]
 8011c4a:	693a      	ldr	r2, [r7, #16]
 8011c4c:	3203      	adds	r2, #3
 8011c4e:	1a9b      	subs	r3, r3, r2
 8011c50:	461a      	mov	r2, r3
 8011c52:	f003 fae4 	bl	801521e <strncpy>
			*(command->var + (delim - (start + 3))) = '\0';
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	68ba      	ldr	r2, [r7, #8]
 8011c5a:	6939      	ldr	r1, [r7, #16]
 8011c5c:	3103      	adds	r1, #3
 8011c5e:	1a52      	subs	r2, r2, r1
 8011c60:	4413      	add	r3, r2
 8011c62:	2200      	movs	r2, #0
 8011c64:	701a      	strb	r2, [r3, #0]
			// get value
			strncpy(command->val, delim + 1, end - delim);
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	f103 0014 	add.w	r0, r3, #20
 8011c6c:	68bb      	ldr	r3, [r7, #8]
 8011c6e:	1c59      	adds	r1, r3, #1
 8011c70:	68fa      	ldr	r2, [r7, #12]
 8011c72:	68bb      	ldr	r3, [r7, #8]
 8011c74:	1ad3      	subs	r3, r2, r3
 8011c76:	461a      	mov	r2, r3
 8011c78:	f003 fad1 	bl	801521e <strncpy>
			*(command->val + (end - delim)) = '\0';
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	3314      	adds	r3, #20
 8011c80:	68f9      	ldr	r1, [r7, #12]
 8011c82:	68ba      	ldr	r2, [r7, #8]
 8011c84:	1a8a      	subs	r2, r1, r2
 8011c86:	4413      	add	r3, r2
 8011c88:	2200      	movs	r2, #0
 8011c8a:	701a      	strb	r2, [r3, #0]
 8011c8c:	e014      	b.n	8011cb8 <Simcom_Get_Command+0xc4>
		} else {
			// get command
			strncpy(command->var, start + 3, end - (start + 3));
 8011c8e:	6878      	ldr	r0, [r7, #4]
 8011c90:	693b      	ldr	r3, [r7, #16]
 8011c92:	1cd9      	adds	r1, r3, #3
 8011c94:	68fb      	ldr	r3, [r7, #12]
 8011c96:	693a      	ldr	r2, [r7, #16]
 8011c98:	3203      	adds	r2, #3
 8011c9a:	1a9b      	subs	r3, r3, r2
 8011c9c:	461a      	mov	r2, r3
 8011c9e:	f003 fabe 	bl	801521e <strncpy>
			*(command->var + (end - (start + 3))) = '\0';
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	68fa      	ldr	r2, [r7, #12]
 8011ca6:	6939      	ldr	r1, [r7, #16]
 8011ca8:	3103      	adds	r1, #3
 8011caa:	1a52      	subs	r2, r2, r1
 8011cac:	4413      	add	r3, r2
 8011cae:	2200      	movs	r2, #0
 8011cb0:	701a      	strb	r2, [r3, #0]
			// set value
			*(command->val) = '\0';
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	2200      	movs	r2, #0
 8011cb6:	751a      	strb	r2, [r3, #20]
		}

		// get full command
		strncpy(command->cmd, start + 3, end - (start + 3));
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8011cbe:	693b      	ldr	r3, [r7, #16]
 8011cc0:	1cd9      	adds	r1, r3, #3
 8011cc2:	68fb      	ldr	r3, [r7, #12]
 8011cc4:	693a      	ldr	r2, [r7, #16]
 8011cc6:	3203      	adds	r2, #3
 8011cc8:	1a9b      	subs	r3, r3, r2
 8011cca:	461a      	mov	r2, r3
 8011ccc:	f003 faa7 	bl	801521e <strncpy>
		*(command->cmd + (end - (start + 3))) = '\0';
 8011cd0:	687b      	ldr	r3, [r7, #4]
 8011cd2:	3328      	adds	r3, #40	; 0x28
 8011cd4:	68fa      	ldr	r2, [r7, #12]
 8011cd6:	6939      	ldr	r1, [r7, #16]
 8011cd8:	3103      	adds	r1, #3
 8011cda:	1a52      	subs	r2, r2, r1
 8011cdc:	4413      	add	r3, r2
 8011cde:	2200      	movs	r2, #0
 8011ce0:	701a      	strb	r2, [r3, #0]

		// reset rx buffer
		SIMCOM_Reset_Buffer();
 8011ce2:	f7fa ffe3 	bl	800ccac <SIMCOM_Reset_Buffer>

		ret = 1;
 8011ce6:	2301      	movs	r3, #1
 8011ce8:	75fb      	strb	r3, [r7, #23]
	}

	osRecursiveMutexRelease(SimcomRecMutexHandle);
 8011cea:	4b05      	ldr	r3, [pc, #20]	; (8011d00 <Simcom_Get_Command+0x10c>)
 8011cec:	681b      	ldr	r3, [r3, #0]
 8011cee:	4618      	mov	r0, r3
 8011cf0:	f7f6 ff31 	bl	8008b56 <osRecursiveMutexRelease>
	return ret;
 8011cf4:	7dfb      	ldrb	r3, [r7, #23]
}
 8011cf6:	4618      	mov	r0, r3
 8011cf8:	3718      	adds	r7, #24
 8011cfa:	46bd      	mov	sp, r7
 8011cfc:	bd80      	pop	{r7, pc}
 8011cfe:	bf00      	nop
 8011d00:	20008970 	.word	0x20008970
 8011d04:	08018f58 	.word	0x08018f58
 8011d08:	08018f6c 	.word	0x08018f6c
 8011d0c:	20006d30 	.word	0x20006d30
 8011d10:	08018f70 	.word	0x08018f70

08011d14 <SWV_SendChar>:

#include "_swv.h"

extern osMutexId SwvMutexHandle;

void SWV_SendChar(char ch) {
 8011d14:	b480      	push	{r7}
 8011d16:	b083      	sub	sp, #12
 8011d18:	af00      	add	r7, sp, #0
 8011d1a:	4603      	mov	r3, r0
 8011d1c:	71fb      	strb	r3, [r7, #7]
#if SWV_DEBUG
	// wait if busy
	while (ITM->PORT[0].u32 == 0)
 8011d1e:	bf00      	nop
 8011d20:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8011d24:	681b      	ldr	r3, [r3, #0]
 8011d26:	2b00      	cmp	r3, #0
 8011d28:	d0fa      	beq.n	8011d20 <SWV_SendChar+0xc>
		;
	// send to ITM0
	ITM->PORT[0].u8 = (uint8_t) ch;
 8011d2a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8011d2e:	79fb      	ldrb	r3, [r7, #7]
 8011d30:	7013      	strb	r3, [r2, #0]
#endif
}
 8011d32:	bf00      	nop
 8011d34:	370c      	adds	r7, #12
 8011d36:	46bd      	mov	sp, r7
 8011d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d3c:	4770      	bx	lr
	...

08011d40 <SWV_SendHex8>:
		SWV_SendChar(str[i]);

	osMutexRelease(SwvMutexHandle);
}

void SWV_SendHex8(uint16_t num) {
 8011d40:	b580      	push	{r7, lr}
 8011d42:	b082      	sub	sp, #8
 8011d44:	af00      	add	r7, sp, #0
 8011d46:	4603      	mov	r3, r0
 8011d48:	80fb      	strh	r3, [r7, #6]
	osMutexWait(SwvMutexHandle, osWaitForever);
 8011d4a:	4b11      	ldr	r3, [pc, #68]	; (8011d90 <SWV_SendHex8+0x50>)
 8011d4c:	681b      	ldr	r3, [r3, #0]
 8011d4e:	f04f 31ff 	mov.w	r1, #4294967295
 8011d52:	4618      	mov	r0, r3
 8011d54:	f7f6 fb50 	bl	80083f8 <osMutexWait>

	SWV_SendChar(HEX_CHARS[(num >> 4) % 0x10]);
 8011d58:	88fb      	ldrh	r3, [r7, #6]
 8011d5a:	091b      	lsrs	r3, r3, #4
 8011d5c:	b29b      	uxth	r3, r3
 8011d5e:	f003 030f 	and.w	r3, r3, #15
 8011d62:	4a0c      	ldr	r2, [pc, #48]	; (8011d94 <SWV_SendHex8+0x54>)
 8011d64:	5cd3      	ldrb	r3, [r2, r3]
 8011d66:	4618      	mov	r0, r3
 8011d68:	f7ff ffd4 	bl	8011d14 <SWV_SendChar>
	SWV_SendChar(HEX_CHARS[(num & 0x0f) % 0x10]);
 8011d6c:	88fb      	ldrh	r3, [r7, #6]
 8011d6e:	f003 030f 	and.w	r3, r3, #15
 8011d72:	4a08      	ldr	r2, [pc, #32]	; (8011d94 <SWV_SendHex8+0x54>)
 8011d74:	5cd3      	ldrb	r3, [r2, r3]
 8011d76:	4618      	mov	r0, r3
 8011d78:	f7ff ffcc 	bl	8011d14 <SWV_SendChar>

	osMutexRelease(SwvMutexHandle);
 8011d7c:	4b04      	ldr	r3, [pc, #16]	; (8011d90 <SWV_SendHex8+0x50>)
 8011d7e:	681b      	ldr	r3, [r3, #0]
 8011d80:	4618      	mov	r0, r3
 8011d82:	f7f6 fb87 	bl	8008494 <osMutexRelease>
}
 8011d86:	bf00      	nop
 8011d88:	3708      	adds	r7, #8
 8011d8a:	46bd      	mov	sp, r7
 8011d8c:	bd80      	pop	{r7, pc}
 8011d8e:	bf00      	nop
 8011d90:	20008808 	.word	0x20008808
 8011d94:	08018f78 	.word	0x08018f78

08011d98 <SWV_SendHex32>:
	SWV_SendChar(HEX_CHARS[(num & 0x0f) % 0x10]);

	osMutexRelease(SwvMutexHandle);
}

void SWV_SendHex32(uint32_t num) {
 8011d98:	b580      	push	{r7, lr}
 8011d9a:	b084      	sub	sp, #16
 8011d9c:	af00      	add	r7, sp, #0
 8011d9e:	6078      	str	r0, [r7, #4]
	osMutexWait(SwvMutexHandle, osWaitForever);
 8011da0:	4b15      	ldr	r3, [pc, #84]	; (8011df8 <SWV_SendHex32+0x60>)
 8011da2:	681b      	ldr	r3, [r3, #0]
 8011da4:	f04f 31ff 	mov.w	r1, #4294967295
 8011da8:	4618      	mov	r0, r3
 8011daa:	f7f6 fb25 	bl	80083f8 <osMutexWait>

	uint8_t i;
	for (i = 28; i > 0; i -= 4)
 8011dae:	231c      	movs	r3, #28
 8011db0:	73fb      	strb	r3, [r7, #15]
 8011db2:	e00d      	b.n	8011dd0 <SWV_SendHex32+0x38>
		SWV_SendChar(HEX_CHARS[(num >> i) % 0x10]);
 8011db4:	7bfb      	ldrb	r3, [r7, #15]
 8011db6:	687a      	ldr	r2, [r7, #4]
 8011db8:	fa22 f303 	lsr.w	r3, r2, r3
 8011dbc:	f003 030f 	and.w	r3, r3, #15
 8011dc0:	4a0e      	ldr	r2, [pc, #56]	; (8011dfc <SWV_SendHex32+0x64>)
 8011dc2:	5cd3      	ldrb	r3, [r2, r3]
 8011dc4:	4618      	mov	r0, r3
 8011dc6:	f7ff ffa5 	bl	8011d14 <SWV_SendChar>
	for (i = 28; i > 0; i -= 4)
 8011dca:	7bfb      	ldrb	r3, [r7, #15]
 8011dcc:	3b04      	subs	r3, #4
 8011dce:	73fb      	strb	r3, [r7, #15]
 8011dd0:	7bfb      	ldrb	r3, [r7, #15]
 8011dd2:	2b00      	cmp	r3, #0
 8011dd4:	d1ee      	bne.n	8011db4 <SWV_SendHex32+0x1c>
	SWV_SendChar(HEX_CHARS[(num & 0x0f) % 0x10]);
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	f003 030f 	and.w	r3, r3, #15
 8011ddc:	4a07      	ldr	r2, [pc, #28]	; (8011dfc <SWV_SendHex32+0x64>)
 8011dde:	5cd3      	ldrb	r3, [r2, r3]
 8011de0:	4618      	mov	r0, r3
 8011de2:	f7ff ff97 	bl	8011d14 <SWV_SendChar>

	osMutexRelease(SwvMutexHandle);
 8011de6:	4b04      	ldr	r3, [pc, #16]	; (8011df8 <SWV_SendHex32+0x60>)
 8011de8:	681b      	ldr	r3, [r3, #0]
 8011dea:	4618      	mov	r0, r3
 8011dec:	f7f6 fb52 	bl	8008494 <osMutexRelease>
}
 8011df0:	bf00      	nop
 8011df2:	3710      	adds	r7, #16
 8011df4:	46bd      	mov	sp, r7
 8011df6:	bd80      	pop	{r7, pc}
 8011df8:	20008808 	.word	0x20008808
 8011dfc:	08018f78 	.word	0x08018f78

08011e00 <SWV_SendStr>:

void SWV_SendStr(char *str) {
 8011e00:	b580      	push	{r7, lr}
 8011e02:	b082      	sub	sp, #8
 8011e04:	af00      	add	r7, sp, #0
 8011e06:	6078      	str	r0, [r7, #4]
	osMutexWait(SwvMutexHandle, osWaitForever);
 8011e08:	4b0d      	ldr	r3, [pc, #52]	; (8011e40 <SWV_SendStr+0x40>)
 8011e0a:	681b      	ldr	r3, [r3, #0]
 8011e0c:	f04f 31ff 	mov.w	r1, #4294967295
 8011e10:	4618      	mov	r0, r3
 8011e12:	f7f6 faf1 	bl	80083f8 <osMutexWait>

	while (*str != '\0')
 8011e16:	e006      	b.n	8011e26 <SWV_SendStr+0x26>
		SWV_SendChar(*str++);
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	1c5a      	adds	r2, r3, #1
 8011e1c:	607a      	str	r2, [r7, #4]
 8011e1e:	781b      	ldrb	r3, [r3, #0]
 8011e20:	4618      	mov	r0, r3
 8011e22:	f7ff ff77 	bl	8011d14 <SWV_SendChar>
	while (*str != '\0')
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	781b      	ldrb	r3, [r3, #0]
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	d1f4      	bne.n	8011e18 <SWV_SendStr+0x18>

	osMutexRelease(SwvMutexHandle);
 8011e2e:	4b04      	ldr	r3, [pc, #16]	; (8011e40 <SWV_SendStr+0x40>)
 8011e30:	681b      	ldr	r3, [r3, #0]
 8011e32:	4618      	mov	r0, r3
 8011e34:	f7f6 fb2e 	bl	8008494 <osMutexRelease>
}
 8011e38:	bf00      	nop
 8011e3a:	3708      	adds	r7, #8
 8011e3c:	46bd      	mov	sp, r7
 8011e3e:	bd80      	pop	{r7, pc}
 8011e40:	20008808 	.word	0x20008808

08011e44 <SWV_SendStrLn>:

void SWV_SendStrLn(char *str) {
 8011e44:	b580      	push	{r7, lr}
 8011e46:	b082      	sub	sp, #8
 8011e48:	af00      	add	r7, sp, #0
 8011e4a:	6078      	str	r0, [r7, #4]
	osMutexWait(SwvMutexHandle, osWaitForever);
 8011e4c:	4b0f      	ldr	r3, [pc, #60]	; (8011e8c <SWV_SendStrLn+0x48>)
 8011e4e:	681b      	ldr	r3, [r3, #0]
 8011e50:	f04f 31ff 	mov.w	r1, #4294967295
 8011e54:	4618      	mov	r0, r3
 8011e56:	f7f6 facf 	bl	80083f8 <osMutexWait>

	while (*str != '\0')
 8011e5a:	e006      	b.n	8011e6a <SWV_SendStrLn+0x26>
		SWV_SendChar(*str++);
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	1c5a      	adds	r2, r3, #1
 8011e60:	607a      	str	r2, [r7, #4]
 8011e62:	781b      	ldrb	r3, [r3, #0]
 8011e64:	4618      	mov	r0, r3
 8011e66:	f7ff ff55 	bl	8011d14 <SWV_SendChar>
	while (*str != '\0')
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	781b      	ldrb	r3, [r3, #0]
 8011e6e:	2b00      	cmp	r3, #0
 8011e70:	d1f4      	bne.n	8011e5c <SWV_SendStrLn+0x18>
	SWV_SendChar('\n');
 8011e72:	200a      	movs	r0, #10
 8011e74:	f7ff ff4e 	bl	8011d14 <SWV_SendChar>

	osMutexRelease(SwvMutexHandle);
 8011e78:	4b04      	ldr	r3, [pc, #16]	; (8011e8c <SWV_SendStrLn+0x48>)
 8011e7a:	681b      	ldr	r3, [r3, #0]
 8011e7c:	4618      	mov	r0, r3
 8011e7e:	f7f6 fb09 	bl	8008494 <osMutexRelease>
}
 8011e82:	bf00      	nop
 8011e84:	3708      	adds	r7, #8
 8011e86:	46bd      	mov	sp, r7
 8011e88:	bd80      	pop	{r7, pc}
 8011e8a:	bf00      	nop
 8011e8c:	20008808 	.word	0x20008808

08011e90 <SWV_SendBuf>:

void SWV_SendBuf(char *buf, uint16_t bufsize) {
 8011e90:	b580      	push	{r7, lr}
 8011e92:	b084      	sub	sp, #16
 8011e94:	af00      	add	r7, sp, #0
 8011e96:	6078      	str	r0, [r7, #4]
 8011e98:	460b      	mov	r3, r1
 8011e9a:	807b      	strh	r3, [r7, #2]
	osMutexWait(SwvMutexHandle, osWaitForever);
 8011e9c:	4b10      	ldr	r3, [pc, #64]	; (8011ee0 <SWV_SendBuf+0x50>)
 8011e9e:	681b      	ldr	r3, [r3, #0]
 8011ea0:	f04f 31ff 	mov.w	r1, #4294967295
 8011ea4:	4618      	mov	r0, r3
 8011ea6:	f7f6 faa7 	bl	80083f8 <osMutexWait>

	uint16_t i;
	for (i = 0; i < bufsize; i++)
 8011eaa:	2300      	movs	r3, #0
 8011eac:	81fb      	strh	r3, [r7, #14]
 8011eae:	e009      	b.n	8011ec4 <SWV_SendBuf+0x34>
		SWV_SendChar(*buf++);
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	1c5a      	adds	r2, r3, #1
 8011eb4:	607a      	str	r2, [r7, #4]
 8011eb6:	781b      	ldrb	r3, [r3, #0]
 8011eb8:	4618      	mov	r0, r3
 8011eba:	f7ff ff2b 	bl	8011d14 <SWV_SendChar>
	for (i = 0; i < bufsize; i++)
 8011ebe:	89fb      	ldrh	r3, [r7, #14]
 8011ec0:	3301      	adds	r3, #1
 8011ec2:	81fb      	strh	r3, [r7, #14]
 8011ec4:	89fa      	ldrh	r2, [r7, #14]
 8011ec6:	887b      	ldrh	r3, [r7, #2]
 8011ec8:	429a      	cmp	r2, r3
 8011eca:	d3f1      	bcc.n	8011eb0 <SWV_SendBuf+0x20>

	osMutexRelease(SwvMutexHandle);
 8011ecc:	4b04      	ldr	r3, [pc, #16]	; (8011ee0 <SWV_SendBuf+0x50>)
 8011ece:	681b      	ldr	r3, [r3, #0]
 8011ed0:	4618      	mov	r0, r3
 8011ed2:	f7f6 fadf 	bl	8008494 <osMutexRelease>
}
 8011ed6:	bf00      	nop
 8011ed8:	3710      	adds	r7, #16
 8011eda:	46bd      	mov	sp, r7
 8011edc:	bd80      	pop	{r7, pc}
 8011ede:	bf00      	nop
 8011ee0:	20008808 	.word	0x20008808

08011ee4 <cs43l22_Init>:
 * @param OutputDevice: can be OUTPUT_DEVICE_SPEAKER, OUTPUT_DEVICE_HEADPHONE,
 *                       OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO .
 * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
 * @retval 0 if correct communication, else wrong communication
 */
uint32_t cs43l22_Init(uint16_t DeviceAddr, uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq) {
 8011ee4:	b580      	push	{r7, lr}
 8011ee6:	b086      	sub	sp, #24
 8011ee8:	af00      	add	r7, sp, #0
 8011eea:	607b      	str	r3, [r7, #4]
 8011eec:	4603      	mov	r3, r0
 8011eee:	81fb      	strh	r3, [r7, #14]
 8011ef0:	460b      	mov	r3, r1
 8011ef2:	81bb      	strh	r3, [r7, #12]
 8011ef4:	4613      	mov	r3, r2
 8011ef6:	72fb      	strb	r3, [r7, #11]
	uint32_t counter = 0;
 8011ef8:	2300      	movs	r3, #0
 8011efa:	617b      	str	r3, [r7, #20]

	/* Initialize the Control interface of the Audio Codec */
	AUDIO_IO_Init();
 8011efc:	f001 ff84 	bl	8013e08 <AUDIO_IO_Init>

	/* Keep Codec powered OFF */
	counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);
 8011f00:	89fb      	ldrh	r3, [r7, #14]
 8011f02:	b2db      	uxtb	r3, r3
 8011f04:	2201      	movs	r2, #1
 8011f06:	2102      	movs	r1, #2
 8011f08:	4618      	mov	r0, r3
 8011f0a:	f000 fb34 	bl	8012576 <CODEC_IO_Write>
 8011f0e:	4603      	mov	r3, r0
 8011f10:	461a      	mov	r2, r3
 8011f12:	697b      	ldr	r3, [r7, #20]
 8011f14:	4413      	add	r3, r2
 8011f16:	617b      	str	r3, [r7, #20]

	/*Save Output device for mute ON/OFF procedure*/
	switch (OutputDevice) {
 8011f18:	89bb      	ldrh	r3, [r7, #12]
 8011f1a:	3b01      	subs	r3, #1
 8011f1c:	2b03      	cmp	r3, #3
 8011f1e:	d81b      	bhi.n	8011f58 <cs43l22_Init+0x74>
 8011f20:	a201      	add	r2, pc, #4	; (adr r2, 8011f28 <cs43l22_Init+0x44>)
 8011f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f26:	bf00      	nop
 8011f28:	08011f39 	.word	0x08011f39
 8011f2c:	08011f41 	.word	0x08011f41
 8011f30:	08011f49 	.word	0x08011f49
 8011f34:	08011f51 	.word	0x08011f51
		case OUTPUT_DEVICE_SPEAKER:
			OutputDev = 0xFA;
 8011f38:	4b4f      	ldr	r3, [pc, #316]	; (8012078 <cs43l22_Init+0x194>)
 8011f3a:	22fa      	movs	r2, #250	; 0xfa
 8011f3c:	701a      	strb	r2, [r3, #0]
			break;
 8011f3e:	e00f      	b.n	8011f60 <cs43l22_Init+0x7c>

		case OUTPUT_DEVICE_HEADPHONE:
			OutputDev = 0xAF;
 8011f40:	4b4d      	ldr	r3, [pc, #308]	; (8012078 <cs43l22_Init+0x194>)
 8011f42:	22af      	movs	r2, #175	; 0xaf
 8011f44:	701a      	strb	r2, [r3, #0]
			break;
 8011f46:	e00b      	b.n	8011f60 <cs43l22_Init+0x7c>

		case OUTPUT_DEVICE_BOTH:
			OutputDev = 0xAA;
 8011f48:	4b4b      	ldr	r3, [pc, #300]	; (8012078 <cs43l22_Init+0x194>)
 8011f4a:	22aa      	movs	r2, #170	; 0xaa
 8011f4c:	701a      	strb	r2, [r3, #0]
			break;
 8011f4e:	e007      	b.n	8011f60 <cs43l22_Init+0x7c>

		case OUTPUT_DEVICE_AUTO:
			OutputDev = 0x05;
 8011f50:	4b49      	ldr	r3, [pc, #292]	; (8012078 <cs43l22_Init+0x194>)
 8011f52:	2205      	movs	r2, #5
 8011f54:	701a      	strb	r2, [r3, #0]
			break;
 8011f56:	e003      	b.n	8011f60 <cs43l22_Init+0x7c>

		default:
			OutputDev = 0x05;
 8011f58:	4b47      	ldr	r3, [pc, #284]	; (8012078 <cs43l22_Init+0x194>)
 8011f5a:	2205      	movs	r2, #5
 8011f5c:	701a      	strb	r2, [r3, #0]
			break;
 8011f5e:	bf00      	nop
	}

	counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8011f60:	89fb      	ldrh	r3, [r7, #14]
 8011f62:	b2d8      	uxtb	r0, r3
 8011f64:	4b44      	ldr	r3, [pc, #272]	; (8012078 <cs43l22_Init+0x194>)
 8011f66:	781b      	ldrb	r3, [r3, #0]
 8011f68:	b2db      	uxtb	r3, r3
 8011f6a:	461a      	mov	r2, r3
 8011f6c:	2104      	movs	r1, #4
 8011f6e:	f000 fb02 	bl	8012576 <CODEC_IO_Write>
 8011f72:	4603      	mov	r3, r0
 8011f74:	461a      	mov	r2, r3
 8011f76:	697b      	ldr	r3, [r7, #20]
 8011f78:	4413      	add	r3, r2
 8011f7a:	617b      	str	r3, [r7, #20]

	/* Clock configuration: Auto detection */
	counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_CLOCKING_CTL, 0x81);
 8011f7c:	89fb      	ldrh	r3, [r7, #14]
 8011f7e:	b2db      	uxtb	r3, r3
 8011f80:	2281      	movs	r2, #129	; 0x81
 8011f82:	2105      	movs	r1, #5
 8011f84:	4618      	mov	r0, r3
 8011f86:	f000 faf6 	bl	8012576 <CODEC_IO_Write>
 8011f8a:	4603      	mov	r3, r0
 8011f8c:	461a      	mov	r2, r3
 8011f8e:	697b      	ldr	r3, [r7, #20]
 8011f90:	4413      	add	r3, r2
 8011f92:	617b      	str	r3, [r7, #20]

	/* Set the Slave Mode and the audio Standard */
	counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_INTERFACE_CTL1, CODEC_STANDARD);
 8011f94:	89fb      	ldrh	r3, [r7, #14]
 8011f96:	b2db      	uxtb	r3, r3
 8011f98:	2204      	movs	r2, #4
 8011f9a:	2106      	movs	r1, #6
 8011f9c:	4618      	mov	r0, r3
 8011f9e:	f000 faea 	bl	8012576 <CODEC_IO_Write>
 8011fa2:	4603      	mov	r3, r0
 8011fa4:	461a      	mov	r2, r3
 8011fa6:	697b      	ldr	r3, [r7, #20]
 8011fa8:	4413      	add	r3, r2
 8011faa:	617b      	str	r3, [r7, #20]

	/* Set the Master volume */
	counter += cs43l22_SetVolume(DeviceAddr, Volume);
 8011fac:	7afa      	ldrb	r2, [r7, #11]
 8011fae:	89fb      	ldrh	r3, [r7, #14]
 8011fb0:	4611      	mov	r1, r2
 8011fb2:	4618      	mov	r0, r3
 8011fb4:	f000 f94c 	bl	8012250 <cs43l22_SetVolume>
 8011fb8:	4602      	mov	r2, r0
 8011fba:	697b      	ldr	r3, [r7, #20]
 8011fbc:	4413      	add	r3, r2
 8011fbe:	617b      	str	r3, [r7, #20]

	/* If the Speaker is enabled, set the Mono mode and volume attenuation level */
	if (OutputDevice != OUTPUT_DEVICE_HEADPHONE) {
 8011fc0:	89bb      	ldrh	r3, [r7, #12]
 8011fc2:	2b02      	cmp	r3, #2
 8011fc4:	d023      	beq.n	801200e <cs43l22_Init+0x12a>
		/* Set the Speaker Mono mode */
		counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PLAYBACK_CTL2, 0x06);
 8011fc6:	89fb      	ldrh	r3, [r7, #14]
 8011fc8:	b2db      	uxtb	r3, r3
 8011fca:	2206      	movs	r2, #6
 8011fcc:	210f      	movs	r1, #15
 8011fce:	4618      	mov	r0, r3
 8011fd0:	f000 fad1 	bl	8012576 <CODEC_IO_Write>
 8011fd4:	4603      	mov	r3, r0
 8011fd6:	461a      	mov	r2, r3
 8011fd8:	697b      	ldr	r3, [r7, #20]
 8011fda:	4413      	add	r3, r2
 8011fdc:	617b      	str	r3, [r7, #20]

		/* Set the Speaker attenuation level */
		counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_A_VOL, 0x00);
 8011fde:	89fb      	ldrh	r3, [r7, #14]
 8011fe0:	b2db      	uxtb	r3, r3
 8011fe2:	2200      	movs	r2, #0
 8011fe4:	2124      	movs	r1, #36	; 0x24
 8011fe6:	4618      	mov	r0, r3
 8011fe8:	f000 fac5 	bl	8012576 <CODEC_IO_Write>
 8011fec:	4603      	mov	r3, r0
 8011fee:	461a      	mov	r2, r3
 8011ff0:	697b      	ldr	r3, [r7, #20]
 8011ff2:	4413      	add	r3, r2
 8011ff4:	617b      	str	r3, [r7, #20]
		counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_B_VOL, 0x00);
 8011ff6:	89fb      	ldrh	r3, [r7, #14]
 8011ff8:	b2db      	uxtb	r3, r3
 8011ffa:	2200      	movs	r2, #0
 8011ffc:	2125      	movs	r1, #37	; 0x25
 8011ffe:	4618      	mov	r0, r3
 8012000:	f000 fab9 	bl	8012576 <CODEC_IO_Write>
 8012004:	4603      	mov	r3, r0
 8012006:	461a      	mov	r2, r3
 8012008:	697b      	ldr	r3, [r7, #20]
 801200a:	4413      	add	r3, r2
 801200c:	617b      	str	r3, [r7, #20]
	 off the I2S peripheral MCLK clock (which is the operating clock for Codec).
	 If this delay is not inserted, then the codec will not shut down properly and
	 it results in high noise after shut down. */

	/* Disable the analog soft ramp */
	counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_ANALOG_ZC_SR_SETT, 0x00);
 801200e:	89fb      	ldrh	r3, [r7, #14]
 8012010:	b2db      	uxtb	r3, r3
 8012012:	2200      	movs	r2, #0
 8012014:	210a      	movs	r1, #10
 8012016:	4618      	mov	r0, r3
 8012018:	f000 faad 	bl	8012576 <CODEC_IO_Write>
 801201c:	4603      	mov	r3, r0
 801201e:	461a      	mov	r2, r3
 8012020:	697b      	ldr	r3, [r7, #20]
 8012022:	4413      	add	r3, r2
 8012024:	617b      	str	r3, [r7, #20]
	/* Disable the digital soft ramp */
	counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 8012026:	89fb      	ldrh	r3, [r7, #14]
 8012028:	b2db      	uxtb	r3, r3
 801202a:	2204      	movs	r2, #4
 801202c:	210e      	movs	r1, #14
 801202e:	4618      	mov	r0, r3
 8012030:	f000 faa1 	bl	8012576 <CODEC_IO_Write>
 8012034:	4603      	mov	r3, r0
 8012036:	461a      	mov	r2, r3
 8012038:	697b      	ldr	r3, [r7, #20]
 801203a:	4413      	add	r3, r2
 801203c:	617b      	str	r3, [r7, #20]
	/* Disable the limiter attack level */
	counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_LIMIT_CTL1, 0x00);
 801203e:	89fb      	ldrh	r3, [r7, #14]
 8012040:	b2db      	uxtb	r3, r3
 8012042:	2200      	movs	r2, #0
 8012044:	2127      	movs	r1, #39	; 0x27
 8012046:	4618      	mov	r0, r3
 8012048:	f000 fa95 	bl	8012576 <CODEC_IO_Write>
 801204c:	4603      	mov	r3, r0
 801204e:	461a      	mov	r2, r3
 8012050:	697b      	ldr	r3, [r7, #20]
 8012052:	4413      	add	r3, r2
 8012054:	617b      	str	r3, [r7, #20]
	/* Adjust Bass and Treble levels */
	counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_TONE_CTL, 0x0F);
 8012056:	89fb      	ldrh	r3, [r7, #14]
 8012058:	b2db      	uxtb	r3, r3
 801205a:	220f      	movs	r2, #15
 801205c:	211f      	movs	r1, #31
 801205e:	4618      	mov	r0, r3
 8012060:	f000 fa89 	bl	8012576 <CODEC_IO_Write>
 8012064:	4603      	mov	r3, r0
 8012066:	461a      	mov	r2, r3
 8012068:	697b      	ldr	r3, [r7, #20]
 801206a:	4413      	add	r3, r2
 801206c:	617b      	str	r3, [r7, #20]
	/* Adjust PCM volume level */
//	counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMA_VOL, 0x0A);
//	counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMB_VOL, 0x0A);
	/* Return communication control value */
	return counter;
 801206e:	697b      	ldr	r3, [r7, #20]
}
 8012070:	4618      	mov	r0, r3
 8012072:	3718      	adds	r7, #24
 8012074:	46bd      	mov	sp, r7
 8012076:	bd80      	pop	{r7, pc}
 8012078:	200066d6 	.word	0x200066d6

0801207c <cs43l22_DeInit>:
/**
 * @brief  Deinitializes the audio codec.
 * @param  None
 * @retval  None
 */
void cs43l22_DeInit(void) {
 801207c:	b580      	push	{r7, lr}
 801207e:	af00      	add	r7, sp, #0
	/* Deinitialize Audio Codec interface */
	AUDIO_IO_DeInit();
 8012080:	f001 fefa 	bl	8013e78 <AUDIO_IO_DeInit>
}
 8012084:	bf00      	nop
 8012086:	bd80      	pop	{r7, pc}

08012088 <cs43l22_ReadID>:
/**
 * @brief  Get the CS43L22 ID.
 * @param DeviceAddr: Device address on communication Bus.
 * @retval The CS43L22 ID
 */
uint32_t cs43l22_ReadID(uint16_t DeviceAddr) {
 8012088:	b580      	push	{r7, lr}
 801208a:	b084      	sub	sp, #16
 801208c:	af00      	add	r7, sp, #0
 801208e:	4603      	mov	r3, r0
 8012090:	80fb      	strh	r3, [r7, #6]
	uint8_t Value;
	/* Initialize the Control interface of the Audio Codec */
	AUDIO_IO_Init();
 8012092:	f001 feb9 	bl	8013e08 <AUDIO_IO_Init>

	Value = AUDIO_IO_Read(DeviceAddr, CS43L22_CHIPID_ADDR);
 8012096:	88fb      	ldrh	r3, [r7, #6]
 8012098:	b2db      	uxtb	r3, r3
 801209a:	2101      	movs	r1, #1
 801209c:	4618      	mov	r0, r3
 801209e:	f001 ff05 	bl	8013eac <AUDIO_IO_Read>
 80120a2:	4603      	mov	r3, r0
 80120a4:	73fb      	strb	r3, [r7, #15]
	Value = (Value & CS43L22_ID_MASK);
 80120a6:	7bfb      	ldrb	r3, [r7, #15]
 80120a8:	f023 0307 	bic.w	r3, r3, #7
 80120ac:	73fb      	strb	r3, [r7, #15]

	return ((uint32_t) Value);
 80120ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80120b0:	4618      	mov	r0, r3
 80120b2:	3710      	adds	r7, #16
 80120b4:	46bd      	mov	sp, r7
 80120b6:	bd80      	pop	{r7, pc}

080120b8 <cs43l22_Play>:
 * @brief Start the audio Codec play feature.
 * @note For this codec no Play options are required.
 * @param DeviceAddr: Device address on communication Bus.
 * @retval 0 if correct communication, else wrong communication
 */
uint32_t cs43l22_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size) {
 80120b8:	b580      	push	{r7, lr}
 80120ba:	b084      	sub	sp, #16
 80120bc:	af00      	add	r7, sp, #0
 80120be:	4603      	mov	r3, r0
 80120c0:	6039      	str	r1, [r7, #0]
 80120c2:	80fb      	strh	r3, [r7, #6]
 80120c4:	4613      	mov	r3, r2
 80120c6:	80bb      	strh	r3, [r7, #4]
	uint32_t counter = 0;
 80120c8:	2300      	movs	r3, #0
 80120ca:	60fb      	str	r3, [r7, #12]

	if (Is_cs43l22_Stop == 1) {
 80120cc:	4b16      	ldr	r3, [pc, #88]	; (8012128 <cs43l22_Play+0x70>)
 80120ce:	781b      	ldrb	r3, [r3, #0]
 80120d0:	2b01      	cmp	r3, #1
 80120d2:	d123      	bne.n	801211c <cs43l22_Play+0x64>
		/* Enable the digital soft ramp */
		counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x06);
 80120d4:	88fb      	ldrh	r3, [r7, #6]
 80120d6:	b2db      	uxtb	r3, r3
 80120d8:	2206      	movs	r2, #6
 80120da:	210e      	movs	r1, #14
 80120dc:	4618      	mov	r0, r3
 80120de:	f000 fa4a 	bl	8012576 <CODEC_IO_Write>
 80120e2:	4603      	mov	r3, r0
 80120e4:	461a      	mov	r2, r3
 80120e6:	68fb      	ldr	r3, [r7, #12]
 80120e8:	4413      	add	r3, r2
 80120ea:	60fb      	str	r3, [r7, #12]

		/* Enable Output device */
		counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80120ec:	88fb      	ldrh	r3, [r7, #6]
 80120ee:	2100      	movs	r1, #0
 80120f0:	4618      	mov	r0, r3
 80120f2:	f000 f905 	bl	8012300 <cs43l22_SetMute>
 80120f6:	4602      	mov	r2, r0
 80120f8:	68fb      	ldr	r3, [r7, #12]
 80120fa:	4413      	add	r3, r2
 80120fc:	60fb      	str	r3, [r7, #12]

		/* Power on the Codec */
		counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E);
 80120fe:	88fb      	ldrh	r3, [r7, #6]
 8012100:	b2db      	uxtb	r3, r3
 8012102:	229e      	movs	r2, #158	; 0x9e
 8012104:	2102      	movs	r1, #2
 8012106:	4618      	mov	r0, r3
 8012108:	f000 fa35 	bl	8012576 <CODEC_IO_Write>
 801210c:	4603      	mov	r3, r0
 801210e:	461a      	mov	r2, r3
 8012110:	68fb      	ldr	r3, [r7, #12]
 8012112:	4413      	add	r3, r2
 8012114:	60fb      	str	r3, [r7, #12]
		Is_cs43l22_Stop = 0;
 8012116:	4b04      	ldr	r3, [pc, #16]	; (8012128 <cs43l22_Play+0x70>)
 8012118:	2200      	movs	r2, #0
 801211a:	701a      	strb	r2, [r3, #0]
	}

	/* Return communication control value */
	return counter;
 801211c:	68fb      	ldr	r3, [r7, #12]
}
 801211e:	4618      	mov	r0, r3
 8012120:	3710      	adds	r7, #16
 8012122:	46bd      	mov	sp, r7
 8012124:	bd80      	pop	{r7, pc}
 8012126:	bf00      	nop
 8012128:	200000d0 	.word	0x200000d0

0801212c <cs43l22_Pause>:
/**
 * @brief Pauses playing on the audio codec.
 * @param DeviceAddr: Device address on communication Bus.
 * @retval 0 if correct communication, else wrong communication
 */
uint32_t cs43l22_Pause(uint16_t DeviceAddr) {
 801212c:	b580      	push	{r7, lr}
 801212e:	b084      	sub	sp, #16
 8012130:	af00      	add	r7, sp, #0
 8012132:	4603      	mov	r3, r0
 8012134:	80fb      	strh	r3, [r7, #6]
	uint32_t counter = 0;
 8012136:	2300      	movs	r3, #0
 8012138:	60fb      	str	r3, [r7, #12]

	/* Pause the audio file playing */
	/* Mute the output first */
	counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 801213a:	88fb      	ldrh	r3, [r7, #6]
 801213c:	2101      	movs	r1, #1
 801213e:	4618      	mov	r0, r3
 8012140:	f000 f8de 	bl	8012300 <cs43l22_SetMute>
 8012144:	4602      	mov	r2, r0
 8012146:	68fb      	ldr	r3, [r7, #12]
 8012148:	4413      	add	r3, r2
 801214a:	60fb      	str	r3, [r7, #12]

	/* Put the Codec in Power save mode */
	counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);
 801214c:	88fb      	ldrh	r3, [r7, #6]
 801214e:	b2db      	uxtb	r3, r3
 8012150:	2201      	movs	r2, #1
 8012152:	2102      	movs	r1, #2
 8012154:	4618      	mov	r0, r3
 8012156:	f000 fa0e 	bl	8012576 <CODEC_IO_Write>
 801215a:	4603      	mov	r3, r0
 801215c:	461a      	mov	r2, r3
 801215e:	68fb      	ldr	r3, [r7, #12]
 8012160:	4413      	add	r3, r2
 8012162:	60fb      	str	r3, [r7, #12]

	return counter;
 8012164:	68fb      	ldr	r3, [r7, #12]
}
 8012166:	4618      	mov	r0, r3
 8012168:	3710      	adds	r7, #16
 801216a:	46bd      	mov	sp, r7
 801216c:	bd80      	pop	{r7, pc}
	...

08012170 <cs43l22_Resume>:
/**
 * @brief Resumes playing on the audio codec.
 * @param DeviceAddr: Device address on communication Bus.
 * @retval 0 if correct communication, else wrong communication
 */
uint32_t cs43l22_Resume(uint16_t DeviceAddr) {
 8012170:	b580      	push	{r7, lr}
 8012172:	b084      	sub	sp, #16
 8012174:	af00      	add	r7, sp, #0
 8012176:	4603      	mov	r3, r0
 8012178:	80fb      	strh	r3, [r7, #6]
	uint32_t counter = 0;
 801217a:	2300      	movs	r3, #0
 801217c:	60fb      	str	r3, [r7, #12]
	volatile uint32_t index = 0x00;
 801217e:	2300      	movs	r3, #0
 8012180:	60bb      	str	r3, [r7, #8]
	/* Resumes the audio file playing */
	/* Unmute the output first */
	counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8012182:	88fb      	ldrh	r3, [r7, #6]
 8012184:	2100      	movs	r1, #0
 8012186:	4618      	mov	r0, r3
 8012188:	f000 f8ba 	bl	8012300 <cs43l22_SetMute>
 801218c:	4602      	mov	r2, r0
 801218e:	68fb      	ldr	r3, [r7, #12]
 8012190:	4413      	add	r3, r2
 8012192:	60fb      	str	r3, [r7, #12]

	for (index = 0x00; index < 0xFF; index++)
 8012194:	2300      	movs	r3, #0
 8012196:	60bb      	str	r3, [r7, #8]
 8012198:	e002      	b.n	80121a0 <cs43l22_Resume+0x30>
 801219a:	68bb      	ldr	r3, [r7, #8]
 801219c:	3301      	adds	r3, #1
 801219e:	60bb      	str	r3, [r7, #8]
 80121a0:	68bb      	ldr	r3, [r7, #8]
 80121a2:	2bfe      	cmp	r3, #254	; 0xfe
 80121a4:	d9f9      	bls.n	801219a <cs43l22_Resume+0x2a>
		;

	counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 80121a6:	88fb      	ldrh	r3, [r7, #6]
 80121a8:	b2d8      	uxtb	r0, r3
 80121aa:	4b0e      	ldr	r3, [pc, #56]	; (80121e4 <cs43l22_Resume+0x74>)
 80121ac:	781b      	ldrb	r3, [r3, #0]
 80121ae:	b2db      	uxtb	r3, r3
 80121b0:	461a      	mov	r2, r3
 80121b2:	2104      	movs	r1, #4
 80121b4:	f000 f9df 	bl	8012576 <CODEC_IO_Write>
 80121b8:	4603      	mov	r3, r0
 80121ba:	461a      	mov	r2, r3
 80121bc:	68fb      	ldr	r3, [r7, #12]
 80121be:	4413      	add	r3, r2
 80121c0:	60fb      	str	r3, [r7, #12]

	/* Exit the Power save mode */
	counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E);
 80121c2:	88fb      	ldrh	r3, [r7, #6]
 80121c4:	b2db      	uxtb	r3, r3
 80121c6:	229e      	movs	r2, #158	; 0x9e
 80121c8:	2102      	movs	r1, #2
 80121ca:	4618      	mov	r0, r3
 80121cc:	f000 f9d3 	bl	8012576 <CODEC_IO_Write>
 80121d0:	4603      	mov	r3, r0
 80121d2:	461a      	mov	r2, r3
 80121d4:	68fb      	ldr	r3, [r7, #12]
 80121d6:	4413      	add	r3, r2
 80121d8:	60fb      	str	r3, [r7, #12]

	return counter;
 80121da:	68fb      	ldr	r3, [r7, #12]
}
 80121dc:	4618      	mov	r0, r3
 80121de:	3710      	adds	r7, #16
 80121e0:	46bd      	mov	sp, r7
 80121e2:	bd80      	pop	{r7, pc}
 80121e4:	200066d6 	.word	0x200066d6

080121e8 <cs43l22_Stop>:
 *                           mode, the codec is set to default configuration
 *                           (user should re-Initialize the codec in order to
 *                            play again the audio stream).
 * @retval 0 if correct communication, else wrong communication
 */
uint32_t cs43l22_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode) {
 80121e8:	b580      	push	{r7, lr}
 80121ea:	b084      	sub	sp, #16
 80121ec:	af00      	add	r7, sp, #0
 80121ee:	4603      	mov	r3, r0
 80121f0:	6039      	str	r1, [r7, #0]
 80121f2:	80fb      	strh	r3, [r7, #6]
	uint32_t counter = 0;
 80121f4:	2300      	movs	r3, #0
 80121f6:	60fb      	str	r3, [r7, #12]

	/* Mute the output first */
	counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 80121f8:	88fb      	ldrh	r3, [r7, #6]
 80121fa:	2101      	movs	r1, #1
 80121fc:	4618      	mov	r0, r3
 80121fe:	f000 f87f 	bl	8012300 <cs43l22_SetMute>
 8012202:	4602      	mov	r2, r0
 8012204:	68fb      	ldr	r3, [r7, #12]
 8012206:	4413      	add	r3, r2
 8012208:	60fb      	str	r3, [r7, #12]

	/* Disable the digital soft ramp */
	counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 801220a:	88fb      	ldrh	r3, [r7, #6]
 801220c:	b2db      	uxtb	r3, r3
 801220e:	2204      	movs	r2, #4
 8012210:	210e      	movs	r1, #14
 8012212:	4618      	mov	r0, r3
 8012214:	f000 f9af 	bl	8012576 <CODEC_IO_Write>
 8012218:	4603      	mov	r3, r0
 801221a:	461a      	mov	r2, r3
 801221c:	68fb      	ldr	r3, [r7, #12]
 801221e:	4413      	add	r3, r2
 8012220:	60fb      	str	r3, [r7, #12]

	/* Power down the DAC and the speaker (PMDAC and PMSPK bits)*/
	counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9F);
 8012222:	88fb      	ldrh	r3, [r7, #6]
 8012224:	b2db      	uxtb	r3, r3
 8012226:	229f      	movs	r2, #159	; 0x9f
 8012228:	2102      	movs	r1, #2
 801222a:	4618      	mov	r0, r3
 801222c:	f000 f9a3 	bl	8012576 <CODEC_IO_Write>
 8012230:	4603      	mov	r3, r0
 8012232:	461a      	mov	r2, r3
 8012234:	68fb      	ldr	r3, [r7, #12]
 8012236:	4413      	add	r3, r2
 8012238:	60fb      	str	r3, [r7, #12]

	Is_cs43l22_Stop = 1;
 801223a:	4b04      	ldr	r3, [pc, #16]	; (801224c <cs43l22_Stop+0x64>)
 801223c:	2201      	movs	r2, #1
 801223e:	701a      	strb	r2, [r3, #0]
	return counter;
 8012240:	68fb      	ldr	r3, [r7, #12]
}
 8012242:	4618      	mov	r0, r3
 8012244:	3710      	adds	r7, #16
 8012246:	46bd      	mov	sp, r7
 8012248:	bd80      	pop	{r7, pc}
 801224a:	bf00      	nop
 801224c:	200000d0 	.word	0x200000d0

08012250 <cs43l22_SetVolume>:
 * @param Volume: a byte value from 0 to 255 (refer to codec registers
 *                description for more details).
 *
 * @retval 0 if correct communication, else wrong communication
 */
uint32_t cs43l22_SetVolume(uint16_t DeviceAddr, uint8_t Volume) {
 8012250:	b580      	push	{r7, lr}
 8012252:	b084      	sub	sp, #16
 8012254:	af00      	add	r7, sp, #0
 8012256:	4603      	mov	r3, r0
 8012258:	460a      	mov	r2, r1
 801225a:	80fb      	strh	r3, [r7, #6]
 801225c:	4613      	mov	r3, r2
 801225e:	717b      	strb	r3, [r7, #5]
	uint32_t counter = 0;
 8012260:	2300      	movs	r3, #0
 8012262:	60fb      	str	r3, [r7, #12]
//		/* Set the Master volume */
//		counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol + 0x19);
//		counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol + 0x19);
//	}

	counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, VOLUME_CONVERT2(Volume));
 8012264:	88fb      	ldrh	r3, [r7, #6]
 8012266:	b2d8      	uxtb	r0, r3
 8012268:	797b      	ldrb	r3, [r7, #5]
 801226a:	2b64      	cmp	r3, #100	; 0x64
 801226c:	d80c      	bhi.n	8012288 <cs43l22_SetVolume+0x38>
 801226e:	797a      	ldrb	r2, [r7, #5]
 8012270:	4613      	mov	r3, r2
 8012272:	005b      	lsls	r3, r3, #1
 8012274:	4413      	add	r3, r2
 8012276:	00db      	lsls	r3, r3, #3
 8012278:	4a19      	ldr	r2, [pc, #100]	; (80122e0 <cs43l22_SetVolume+0x90>)
 801227a:	fb82 1203 	smull	r1, r2, r2, r3
 801227e:	1152      	asrs	r2, r2, #5
 8012280:	17db      	asrs	r3, r3, #31
 8012282:	1ad3      	subs	r3, r2, r3
 8012284:	b2db      	uxtb	r3, r3
 8012286:	e000      	b.n	801228a <cs43l22_SetVolume+0x3a>
 8012288:	2318      	movs	r3, #24
 801228a:	461a      	mov	r2, r3
 801228c:	2120      	movs	r1, #32
 801228e:	f000 f972 	bl	8012576 <CODEC_IO_Write>
 8012292:	4603      	mov	r3, r0
 8012294:	461a      	mov	r2, r3
 8012296:	68fb      	ldr	r3, [r7, #12]
 8012298:	4413      	add	r3, r2
 801229a:	60fb      	str	r3, [r7, #12]
	counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, VOLUME_CONVERT2(Volume));
 801229c:	88fb      	ldrh	r3, [r7, #6]
 801229e:	b2d8      	uxtb	r0, r3
 80122a0:	797b      	ldrb	r3, [r7, #5]
 80122a2:	2b64      	cmp	r3, #100	; 0x64
 80122a4:	d80c      	bhi.n	80122c0 <cs43l22_SetVolume+0x70>
 80122a6:	797a      	ldrb	r2, [r7, #5]
 80122a8:	4613      	mov	r3, r2
 80122aa:	005b      	lsls	r3, r3, #1
 80122ac:	4413      	add	r3, r2
 80122ae:	00db      	lsls	r3, r3, #3
 80122b0:	4a0b      	ldr	r2, [pc, #44]	; (80122e0 <cs43l22_SetVolume+0x90>)
 80122b2:	fb82 1203 	smull	r1, r2, r2, r3
 80122b6:	1152      	asrs	r2, r2, #5
 80122b8:	17db      	asrs	r3, r3, #31
 80122ba:	1ad3      	subs	r3, r2, r3
 80122bc:	b2db      	uxtb	r3, r3
 80122be:	e000      	b.n	80122c2 <cs43l22_SetVolume+0x72>
 80122c0:	2318      	movs	r3, #24
 80122c2:	461a      	mov	r2, r3
 80122c4:	2121      	movs	r1, #33	; 0x21
 80122c6:	f000 f956 	bl	8012576 <CODEC_IO_Write>
 80122ca:	4603      	mov	r3, r0
 80122cc:	461a      	mov	r2, r3
 80122ce:	68fb      	ldr	r3, [r7, #12]
 80122d0:	4413      	add	r3, r2
 80122d2:	60fb      	str	r3, [r7, #12]

	return counter;
 80122d4:	68fb      	ldr	r3, [r7, #12]
}
 80122d6:	4618      	mov	r0, r3
 80122d8:	3710      	adds	r7, #16
 80122da:	46bd      	mov	sp, r7
 80122dc:	bd80      	pop	{r7, pc}
 80122de:	bf00      	nop
 80122e0:	51eb851f 	.word	0x51eb851f

080122e4 <cs43l22_SetFrequency>:
 * @brief Sets new frequency.
 * @param DeviceAddr: Device address on communication Bus.
 * @param AudioFreq: Audio frequency used to play the audio stream.
 * @retval 0 if correct communication, else wrong communication
 */
uint32_t cs43l22_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq) {
 80122e4:	b480      	push	{r7}
 80122e6:	b083      	sub	sp, #12
 80122e8:	af00      	add	r7, sp, #0
 80122ea:	4603      	mov	r3, r0
 80122ec:	6039      	str	r1, [r7, #0]
 80122ee:	80fb      	strh	r3, [r7, #6]
	return 0;
 80122f0:	2300      	movs	r3, #0
}
 80122f2:	4618      	mov	r0, r3
 80122f4:	370c      	adds	r7, #12
 80122f6:	46bd      	mov	sp, r7
 80122f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122fc:	4770      	bx	lr
	...

08012300 <cs43l22_SetMute>:
 * @param DeviceAddr: Device address on communication Bus.
 * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
 *             mute mode.
 * @retval 0 if correct communication, else wrong communication
 */
uint32_t cs43l22_SetMute(uint16_t DeviceAddr, uint32_t Cmd) {
 8012300:	b580      	push	{r7, lr}
 8012302:	b084      	sub	sp, #16
 8012304:	af00      	add	r7, sp, #0
 8012306:	4603      	mov	r3, r0
 8012308:	6039      	str	r1, [r7, #0]
 801230a:	80fb      	strh	r3, [r7, #6]
	uint32_t counter = 0;
 801230c:	2300      	movs	r3, #0
 801230e:	60fb      	str	r3, [r7, #12]

	/* Set the Mute mode */
	if (Cmd == AUDIO_MUTE_ON) {
 8012310:	683b      	ldr	r3, [r7, #0]
 8012312:	2b01      	cmp	r3, #1
 8012314:	d124      	bne.n	8012360 <cs43l22_SetMute+0x60>
		counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFF);
 8012316:	88fb      	ldrh	r3, [r7, #6]
 8012318:	b2db      	uxtb	r3, r3
 801231a:	22ff      	movs	r2, #255	; 0xff
 801231c:	2104      	movs	r1, #4
 801231e:	4618      	mov	r0, r3
 8012320:	f000 f929 	bl	8012576 <CODEC_IO_Write>
 8012324:	4603      	mov	r3, r0
 8012326:	461a      	mov	r2, r3
 8012328:	68fb      	ldr	r3, [r7, #12]
 801232a:	4413      	add	r3, r2
 801232c:	60fb      	str	r3, [r7, #12]
		counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x01);
 801232e:	88fb      	ldrh	r3, [r7, #6]
 8012330:	b2db      	uxtb	r3, r3
 8012332:	2201      	movs	r2, #1
 8012334:	2122      	movs	r1, #34	; 0x22
 8012336:	4618      	mov	r0, r3
 8012338:	f000 f91d 	bl	8012576 <CODEC_IO_Write>
 801233c:	4603      	mov	r3, r0
 801233e:	461a      	mov	r2, r3
 8012340:	68fb      	ldr	r3, [r7, #12]
 8012342:	4413      	add	r3, r2
 8012344:	60fb      	str	r3, [r7, #12]
		counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x01);
 8012346:	88fb      	ldrh	r3, [r7, #6]
 8012348:	b2db      	uxtb	r3, r3
 801234a:	2201      	movs	r2, #1
 801234c:	2123      	movs	r1, #35	; 0x23
 801234e:	4618      	mov	r0, r3
 8012350:	f000 f911 	bl	8012576 <CODEC_IO_Write>
 8012354:	4603      	mov	r3, r0
 8012356:	461a      	mov	r2, r3
 8012358:	68fb      	ldr	r3, [r7, #12]
 801235a:	4413      	add	r3, r2
 801235c:	60fb      	str	r3, [r7, #12]
 801235e:	e025      	b.n	80123ac <cs43l22_SetMute+0xac>
	} else /* AUDIO_MUTE_OFF Disable the Mute */
	{
		counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x00);
 8012360:	88fb      	ldrh	r3, [r7, #6]
 8012362:	b2db      	uxtb	r3, r3
 8012364:	2200      	movs	r2, #0
 8012366:	2122      	movs	r1, #34	; 0x22
 8012368:	4618      	mov	r0, r3
 801236a:	f000 f904 	bl	8012576 <CODEC_IO_Write>
 801236e:	4603      	mov	r3, r0
 8012370:	461a      	mov	r2, r3
 8012372:	68fb      	ldr	r3, [r7, #12]
 8012374:	4413      	add	r3, r2
 8012376:	60fb      	str	r3, [r7, #12]
		counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x00);
 8012378:	88fb      	ldrh	r3, [r7, #6]
 801237a:	b2db      	uxtb	r3, r3
 801237c:	2200      	movs	r2, #0
 801237e:	2123      	movs	r1, #35	; 0x23
 8012380:	4618      	mov	r0, r3
 8012382:	f000 f8f8 	bl	8012576 <CODEC_IO_Write>
 8012386:	4603      	mov	r3, r0
 8012388:	461a      	mov	r2, r3
 801238a:	68fb      	ldr	r3, [r7, #12]
 801238c:	4413      	add	r3, r2
 801238e:	60fb      	str	r3, [r7, #12]
		counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8012390:	88fb      	ldrh	r3, [r7, #6]
 8012392:	b2d8      	uxtb	r0, r3
 8012394:	4b08      	ldr	r3, [pc, #32]	; (80123b8 <cs43l22_SetMute+0xb8>)
 8012396:	781b      	ldrb	r3, [r3, #0]
 8012398:	b2db      	uxtb	r3, r3
 801239a:	461a      	mov	r2, r3
 801239c:	2104      	movs	r1, #4
 801239e:	f000 f8ea 	bl	8012576 <CODEC_IO_Write>
 80123a2:	4603      	mov	r3, r0
 80123a4:	461a      	mov	r2, r3
 80123a6:	68fb      	ldr	r3, [r7, #12]
 80123a8:	4413      	add	r3, r2
 80123aa:	60fb      	str	r3, [r7, #12]
	}
	return counter;
 80123ac:	68fb      	ldr	r3, [r7, #12]
}
 80123ae:	4618      	mov	r0, r3
 80123b0:	3710      	adds	r7, #16
 80123b2:	46bd      	mov	sp, r7
 80123b4:	bd80      	pop	{r7, pc}
 80123b6:	bf00      	nop
 80123b8:	200066d6 	.word	0x200066d6

080123bc <cs43l22_SetOutputMode>:
 * @param DeviceAddr: Device address on communication Bus.
 * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
 *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO
 * @retval 0 if correct communication, else wrong communication
 */
uint32_t cs43l22_SetOutputMode(uint16_t DeviceAddr, uint8_t Output) {
 80123bc:	b580      	push	{r7, lr}
 80123be:	b084      	sub	sp, #16
 80123c0:	af00      	add	r7, sp, #0
 80123c2:	4603      	mov	r3, r0
 80123c4:	460a      	mov	r2, r1
 80123c6:	80fb      	strh	r3, [r7, #6]
 80123c8:	4613      	mov	r3, r2
 80123ca:	717b      	strb	r3, [r7, #5]
	uint32_t counter = 0;
 80123cc:	2300      	movs	r3, #0
 80123ce:	60fb      	str	r3, [r7, #12]

	switch (Output) {
 80123d0:	797b      	ldrb	r3, [r7, #5]
 80123d2:	3b01      	subs	r3, #1
 80123d4:	2b03      	cmp	r3, #3
 80123d6:	d84b      	bhi.n	8012470 <cs43l22_SetOutputMode+0xb4>
 80123d8:	a201      	add	r2, pc, #4	; (adr r2, 80123e0 <cs43l22_SetOutputMode+0x24>)
 80123da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80123de:	bf00      	nop
 80123e0:	080123f1 	.word	0x080123f1
 80123e4:	08012411 	.word	0x08012411
 80123e8:	08012431 	.word	0x08012431
 80123ec:	08012451 	.word	0x08012451
		case OUTPUT_DEVICE_SPEAKER:
			counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFA); /* SPK always ON & HP always OFF */
 80123f0:	88fb      	ldrh	r3, [r7, #6]
 80123f2:	b2db      	uxtb	r3, r3
 80123f4:	22fa      	movs	r2, #250	; 0xfa
 80123f6:	2104      	movs	r1, #4
 80123f8:	4618      	mov	r0, r3
 80123fa:	f000 f8bc 	bl	8012576 <CODEC_IO_Write>
 80123fe:	4603      	mov	r3, r0
 8012400:	461a      	mov	r2, r3
 8012402:	68fb      	ldr	r3, [r7, #12]
 8012404:	4413      	add	r3, r2
 8012406:	60fb      	str	r3, [r7, #12]
			OutputDev = 0xFA;
 8012408:	4b24      	ldr	r3, [pc, #144]	; (801249c <cs43l22_SetOutputMode+0xe0>)
 801240a:	22fa      	movs	r2, #250	; 0xfa
 801240c:	701a      	strb	r2, [r3, #0]
			break;
 801240e:	e03f      	b.n	8012490 <cs43l22_SetOutputMode+0xd4>

		case OUTPUT_DEVICE_HEADPHONE:
			counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xAF); /* SPK always OFF & HP always ON */
 8012410:	88fb      	ldrh	r3, [r7, #6]
 8012412:	b2db      	uxtb	r3, r3
 8012414:	22af      	movs	r2, #175	; 0xaf
 8012416:	2104      	movs	r1, #4
 8012418:	4618      	mov	r0, r3
 801241a:	f000 f8ac 	bl	8012576 <CODEC_IO_Write>
 801241e:	4603      	mov	r3, r0
 8012420:	461a      	mov	r2, r3
 8012422:	68fb      	ldr	r3, [r7, #12]
 8012424:	4413      	add	r3, r2
 8012426:	60fb      	str	r3, [r7, #12]
			OutputDev = 0xAF;
 8012428:	4b1c      	ldr	r3, [pc, #112]	; (801249c <cs43l22_SetOutputMode+0xe0>)
 801242a:	22af      	movs	r2, #175	; 0xaf
 801242c:	701a      	strb	r2, [r3, #0]
			break;
 801242e:	e02f      	b.n	8012490 <cs43l22_SetOutputMode+0xd4>

		case OUTPUT_DEVICE_BOTH:
			counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xAA); /* SPK always ON & HP always ON */
 8012430:	88fb      	ldrh	r3, [r7, #6]
 8012432:	b2db      	uxtb	r3, r3
 8012434:	22aa      	movs	r2, #170	; 0xaa
 8012436:	2104      	movs	r1, #4
 8012438:	4618      	mov	r0, r3
 801243a:	f000 f89c 	bl	8012576 <CODEC_IO_Write>
 801243e:	4603      	mov	r3, r0
 8012440:	461a      	mov	r2, r3
 8012442:	68fb      	ldr	r3, [r7, #12]
 8012444:	4413      	add	r3, r2
 8012446:	60fb      	str	r3, [r7, #12]
			OutputDev = 0xAA;
 8012448:	4b14      	ldr	r3, [pc, #80]	; (801249c <cs43l22_SetOutputMode+0xe0>)
 801244a:	22aa      	movs	r2, #170	; 0xaa
 801244c:	701a      	strb	r2, [r3, #0]
			break;
 801244e:	e01f      	b.n	8012490 <cs43l22_SetOutputMode+0xd4>

		case OUTPUT_DEVICE_AUTO:
			counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0x05); /* Detect the HP or the SPK automatically */
 8012450:	88fb      	ldrh	r3, [r7, #6]
 8012452:	b2db      	uxtb	r3, r3
 8012454:	2205      	movs	r2, #5
 8012456:	2104      	movs	r1, #4
 8012458:	4618      	mov	r0, r3
 801245a:	f000 f88c 	bl	8012576 <CODEC_IO_Write>
 801245e:	4603      	mov	r3, r0
 8012460:	461a      	mov	r2, r3
 8012462:	68fb      	ldr	r3, [r7, #12]
 8012464:	4413      	add	r3, r2
 8012466:	60fb      	str	r3, [r7, #12]
			OutputDev = 0x05;
 8012468:	4b0c      	ldr	r3, [pc, #48]	; (801249c <cs43l22_SetOutputMode+0xe0>)
 801246a:	2205      	movs	r2, #5
 801246c:	701a      	strb	r2, [r3, #0]
			break;
 801246e:	e00f      	b.n	8012490 <cs43l22_SetOutputMode+0xd4>

		default:
			counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0x05); /* Detect the HP or the SPK automatically */
 8012470:	88fb      	ldrh	r3, [r7, #6]
 8012472:	b2db      	uxtb	r3, r3
 8012474:	2205      	movs	r2, #5
 8012476:	2104      	movs	r1, #4
 8012478:	4618      	mov	r0, r3
 801247a:	f000 f87c 	bl	8012576 <CODEC_IO_Write>
 801247e:	4603      	mov	r3, r0
 8012480:	461a      	mov	r2, r3
 8012482:	68fb      	ldr	r3, [r7, #12]
 8012484:	4413      	add	r3, r2
 8012486:	60fb      	str	r3, [r7, #12]
			OutputDev = 0x05;
 8012488:	4b04      	ldr	r3, [pc, #16]	; (801249c <cs43l22_SetOutputMode+0xe0>)
 801248a:	2205      	movs	r2, #5
 801248c:	701a      	strb	r2, [r3, #0]
			break;
 801248e:	bf00      	nop
	}
	return counter;
 8012490:	68fb      	ldr	r3, [r7, #12]
}
 8012492:	4618      	mov	r0, r3
 8012494:	3710      	adds	r7, #16
 8012496:	46bd      	mov	sp, r7
 8012498:	bd80      	pop	{r7, pc}
 801249a:	bf00      	nop
 801249c:	200066d6 	.word	0x200066d6

080124a0 <cs43l22_Reset>:
/**
 * @brief Resets cs43l22 registers.
 * @param DeviceAddr: Device address on communication Bus.
 * @retval 0 if correct communication, else wrong communication
 */
uint32_t cs43l22_Reset(uint16_t DeviceAddr) {
 80124a0:	b480      	push	{r7}
 80124a2:	b083      	sub	sp, #12
 80124a4:	af00      	add	r7, sp, #0
 80124a6:	4603      	mov	r3, r0
 80124a8:	80fb      	strh	r3, [r7, #6]
	return 0;
 80124aa:	2300      	movs	r3, #0
}
 80124ac:	4618      	mov	r0, r3
 80124ae:	370c      	adds	r7, #12
 80124b0:	46bd      	mov	sp, r7
 80124b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124b6:	4770      	bx	lr

080124b8 <cs43l22_SetBeep>:

uint32_t cs43l22_SetBeep(uint16_t DeviceAddr, uint8_t Frequency, uint8_t OnTime, uint8_t OffTime) {
 80124b8:	b590      	push	{r4, r7, lr}
 80124ba:	b085      	sub	sp, #20
 80124bc:	af00      	add	r7, sp, #0
 80124be:	4604      	mov	r4, r0
 80124c0:	4608      	mov	r0, r1
 80124c2:	4611      	mov	r1, r2
 80124c4:	461a      	mov	r2, r3
 80124c6:	4623      	mov	r3, r4
 80124c8:	80fb      	strh	r3, [r7, #6]
 80124ca:	4603      	mov	r3, r0
 80124cc:	717b      	strb	r3, [r7, #5]
 80124ce:	460b      	mov	r3, r1
 80124d0:	713b      	strb	r3, [r7, #4]
 80124d2:	4613      	mov	r3, r2
 80124d4:	70fb      	strb	r3, [r7, #3]
	uint32_t counter = 0;
 80124d6:	2300      	movs	r3, #0
 80124d8:	60fb      	str	r3, [r7, #12]

	/* Set frequency of beep and on time */
	counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_BEEP_FREQ_ON_TIME, (Frequency << 4) | OnTime);
 80124da:	88fb      	ldrh	r3, [r7, #6]
 80124dc:	b2d8      	uxtb	r0, r3
 80124de:	797b      	ldrb	r3, [r7, #5]
 80124e0:	011b      	lsls	r3, r3, #4
 80124e2:	b25a      	sxtb	r2, r3
 80124e4:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80124e8:	4313      	orrs	r3, r2
 80124ea:	b25b      	sxtb	r3, r3
 80124ec:	b2db      	uxtb	r3, r3
 80124ee:	461a      	mov	r2, r3
 80124f0:	211c      	movs	r1, #28
 80124f2:	f000 f840 	bl	8012576 <CODEC_IO_Write>
 80124f6:	4603      	mov	r3, r0
 80124f8:	461a      	mov	r2, r3
 80124fa:	68fb      	ldr	r3, [r7, #12]
 80124fc:	4413      	add	r3, r2
 80124fe:	60fb      	str	r3, [r7, #12]
	/* Set volume of beep (max), and off time */
	counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_BEEP_VOL_OFF_TIME, (OffTime << 5) | 0x06);
 8012500:	88fb      	ldrh	r3, [r7, #6]
 8012502:	b2d8      	uxtb	r0, r3
 8012504:	78fb      	ldrb	r3, [r7, #3]
 8012506:	015b      	lsls	r3, r3, #5
 8012508:	b25b      	sxtb	r3, r3
 801250a:	f043 0306 	orr.w	r3, r3, #6
 801250e:	b25b      	sxtb	r3, r3
 8012510:	b2db      	uxtb	r3, r3
 8012512:	461a      	mov	r2, r3
 8012514:	211d      	movs	r1, #29
 8012516:	f000 f82e 	bl	8012576 <CODEC_IO_Write>
 801251a:	4603      	mov	r3, r0
 801251c:	461a      	mov	r2, r3
 801251e:	68fb      	ldr	r3, [r7, #12]
 8012520:	4413      	add	r3, r2
 8012522:	60fb      	str	r3, [r7, #12]

	return counter;
 8012524:	68fb      	ldr	r3, [r7, #12]
}
 8012526:	4618      	mov	r0, r3
 8012528:	3714      	adds	r7, #20
 801252a:	46bd      	mov	sp, r7
 801252c:	bd90      	pop	{r4, r7, pc}

0801252e <cs43l22_Beep>:

uint32_t cs43l22_Beep(uint16_t DeviceAddr, uint8_t Mode, uint8_t Mix) {
 801252e:	b580      	push	{r7, lr}
 8012530:	b084      	sub	sp, #16
 8012532:	af00      	add	r7, sp, #0
 8012534:	4603      	mov	r3, r0
 8012536:	80fb      	strh	r3, [r7, #6]
 8012538:	460b      	mov	r3, r1
 801253a:	717b      	strb	r3, [r7, #5]
 801253c:	4613      	mov	r3, r2
 801253e:	713b      	strb	r3, [r7, #4]
	uint32_t counter = 0;
 8012540:	2300      	movs	r3, #0
 8012542:	60fb      	str	r3, [r7, #12]

	/* Set mode beep play and mix with serial sound*/
	counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_BEEP_TONE_CFG, (Mode << 6) | (Mix << 5));
 8012544:	88fb      	ldrh	r3, [r7, #6]
 8012546:	b2d8      	uxtb	r0, r3
 8012548:	797b      	ldrb	r3, [r7, #5]
 801254a:	019b      	lsls	r3, r3, #6
 801254c:	b25a      	sxtb	r2, r3
 801254e:	793b      	ldrb	r3, [r7, #4]
 8012550:	015b      	lsls	r3, r3, #5
 8012552:	b25b      	sxtb	r3, r3
 8012554:	4313      	orrs	r3, r2
 8012556:	b25b      	sxtb	r3, r3
 8012558:	b2db      	uxtb	r3, r3
 801255a:	461a      	mov	r2, r3
 801255c:	211e      	movs	r1, #30
 801255e:	f000 f80a 	bl	8012576 <CODEC_IO_Write>
 8012562:	4603      	mov	r3, r0
 8012564:	461a      	mov	r2, r3
 8012566:	68fb      	ldr	r3, [r7, #12]
 8012568:	4413      	add	r3, r2
 801256a:	60fb      	str	r3, [r7, #12]

	return counter;
 801256c:	68fb      	ldr	r3, [r7, #12]
}
 801256e:	4618      	mov	r0, r3
 8012570:	3710      	adds	r7, #16
 8012572:	46bd      	mov	sp, r7
 8012574:	bd80      	pop	{r7, pc}

08012576 <CODEC_IO_Write>:
 * @param  Addr: I2C address
 * @param  Reg: Reg address
 * @param  Value: Data to be written
 * @retval None
 */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value) {
 8012576:	b580      	push	{r7, lr}
 8012578:	b084      	sub	sp, #16
 801257a:	af00      	add	r7, sp, #0
 801257c:	4603      	mov	r3, r0
 801257e:	71fb      	strb	r3, [r7, #7]
 8012580:	460b      	mov	r3, r1
 8012582:	71bb      	strb	r3, [r7, #6]
 8012584:	4613      	mov	r3, r2
 8012586:	717b      	strb	r3, [r7, #5]
	uint32_t result = 0;
 8012588:	2300      	movs	r3, #0
 801258a:	60fb      	str	r3, [r7, #12]

	AUDIO_IO_Write(Addr, Reg, Value);
 801258c:	797a      	ldrb	r2, [r7, #5]
 801258e:	79b9      	ldrb	r1, [r7, #6]
 8012590:	79fb      	ldrb	r3, [r7, #7]
 8012592:	4618      	mov	r0, r3
 8012594:	f001 fc77 	bl	8013e86 <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
	/* Verify that the data has been correctly written */
	result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */

	return result;
 8012598:	68fb      	ldr	r3, [r7, #12]
 801259a:	b2db      	uxtb	r3, r3
}
 801259c:	4618      	mov	r0, r3
 801259e:	3710      	adds	r7, #16
 80125a0:	46bd      	mov	sp, r7
 80125a2:	bd80      	pop	{r7, pc}

080125a4 <vApplicationStackOverflowHook>:
}
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80125a4:	b480      	push	{r7}
 80125a6:	b083      	sub	sp, #12
 80125a8:	af00      	add	r7, sp, #0
 80125aa:	6078      	str	r0, [r7, #4]
 80125ac:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80125ae:	bf00      	nop
 80125b0:	370c      	adds	r7, #12
 80125b2:	46bd      	mov	sp, r7
 80125b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125b8:	4770      	bx	lr

080125ba <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 80125ba:	b480      	push	{r7}
 80125bc:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 80125be:	bf00      	nop
 80125c0:	46bd      	mov	sp, r7
 80125c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125c6:	4770      	bx	lr

080125c8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80125c8:	b480      	push	{r7}
 80125ca:	b085      	sub	sp, #20
 80125cc:	af00      	add	r7, sp, #0
 80125ce:	60f8      	str	r0, [r7, #12]
 80125d0:	60b9      	str	r1, [r7, #8]
 80125d2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80125d4:	68fb      	ldr	r3, [r7, #12]
 80125d6:	4a07      	ldr	r2, [pc, #28]	; (80125f4 <vApplicationGetIdleTaskMemory+0x2c>)
 80125d8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80125da:	68bb      	ldr	r3, [r7, #8]
 80125dc:	4a06      	ldr	r2, [pc, #24]	; (80125f8 <vApplicationGetIdleTaskMemory+0x30>)
 80125de:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80125e0:	687b      	ldr	r3, [r7, #4]
 80125e2:	2280      	movs	r2, #128	; 0x80
 80125e4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 80125e6:	bf00      	nop
 80125e8:	3714      	adds	r7, #20
 80125ea:	46bd      	mov	sp, r7
 80125ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125f0:	4770      	bx	lr
 80125f2:	bf00      	nop
 80125f4:	200066d8 	.word	0x200066d8
 80125f8:	2000672c 	.word	0x2000672c

080125fc <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];
  
void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )  
{
 80125fc:	b480      	push	{r7}
 80125fe:	b085      	sub	sp, #20
 8012600:	af00      	add	r7, sp, #0
 8012602:	60f8      	str	r0, [r7, #12]
 8012604:	60b9      	str	r1, [r7, #8]
 8012606:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8012608:	68fb      	ldr	r3, [r7, #12]
 801260a:	4a07      	ldr	r2, [pc, #28]	; (8012628 <vApplicationGetTimerTaskMemory+0x2c>)
 801260c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 801260e:	68bb      	ldr	r3, [r7, #8]
 8012610:	4a06      	ldr	r2, [pc, #24]	; (801262c <vApplicationGetTimerTaskMemory+0x30>)
 8012612:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8012614:	687b      	ldr	r3, [r7, #4]
 8012616:	2280      	movs	r2, #128	; 0x80
 8012618:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 801261a:	bf00      	nop
 801261c:	3714      	adds	r7, #20
 801261e:	46bd      	mov	sp, r7
 8012620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012624:	4770      	bx	lr
 8012626:	bf00      	nop
 8012628:	2000692c 	.word	0x2000692c
 801262c:	20006980 	.word	0x20006980

08012630 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8012630:	b5b0      	push	{r4, r5, r7, lr}
 8012632:	b0de      	sub	sp, #376	; 0x178
 8012634:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8012636:	f7ee fcb7 	bl	8000fa8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 801263a:	f000 f9ab 	bl	8012994 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 801263e:	f000 fbe7 	bl	8012e10 <MX_GPIO_Init>
	MX_DMA_Init();
 8012642:	f000 fbad 	bl	8012da0 <MX_DMA_Init>
	MX_CAN1_Init();
 8012646:	f000 fa2b 	bl	8012aa0 <MX_CAN1_Init>
	MX_I2C3_Init();
 801264a:	f000 fa5f 	bl	8012b0c <MX_I2C3_Init>
	MX_USART3_UART_Init();
 801264e:	f000 fb7d 	bl	8012d4c <MX_USART3_UART_Init>
	MX_USART2_UART_Init();
 8012652:	f000 fb51 	bl	8012cf8 <MX_USART2_UART_Init>
	MX_UART4_Init();
 8012656:	f000 fb25 	bl	8012ca4 <MX_UART4_Init>
	MX_SPI1_Init();
 801265a:	f000 faed 	bl	8012c38 <MX_SPI1_Init>
	MX_RTC_Init();
 801265e:	f000 fa83 	bl	8012b68 <MX_RTC_Init>
	/* USER CODE BEGIN 2 */
	EE_Init();
 8012662:	f7fb f91d 	bl	800d8a0 <EE_Init>
	CAN_Init();
 8012666:	f7fa fdff 	bl	800d268 <CAN_Init>
	/* USER CODE END 2 */

	/* Create the mutex(es) */
	/* definition and creation of AudioBeepMutex */
	osMutexDef(AudioBeepMutex);
 801266a:	2300      	movs	r3, #0
 801266c:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8012670:	2300      	movs	r3, #0
 8012672:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
	AudioBeepMutexHandle = osMutexCreate(osMutex(AudioBeepMutex));
 8012676:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 801267a:	4618      	mov	r0, r3
 801267c:	f7f5 fea4 	bl	80083c8 <osMutexCreate>
 8012680:	4602      	mov	r2, r0
 8012682:	4ba5      	ldr	r3, [pc, #660]	; (8012918 <main+0x2e8>)
 8012684:	601a      	str	r2, [r3, #0]

	/* definition and creation of SwvMutex */
	osMutexDef(SwvMutex);
 8012686:	2300      	movs	r3, #0
 8012688:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 801268c:	2300      	movs	r3, #0
 801268e:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
	SwvMutexHandle = osMutexCreate(osMutex(SwvMutex));
 8012692:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8012696:	4618      	mov	r0, r3
 8012698:	f7f5 fe96 	bl	80083c8 <osMutexCreate>
 801269c:	4602      	mov	r2, r0
 801269e:	4b9f      	ldr	r3, [pc, #636]	; (801291c <main+0x2ec>)
 80126a0:	601a      	str	r2, [r3, #0]

	/* definition and creation of CanTxMutex */
	osMutexDef(CanTxMutex);
 80126a2:	2300      	movs	r3, #0
 80126a4:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 80126a8:	2300      	movs	r3, #0
 80126aa:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
	CanTxMutexHandle = osMutexCreate(osMutex(CanTxMutex));
 80126ae:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80126b2:	4618      	mov	r0, r3
 80126b4:	f7f5 fe88 	bl	80083c8 <osMutexCreate>
 80126b8:	4602      	mov	r2, r0
 80126ba:	4b99      	ldr	r3, [pc, #612]	; (8012920 <main+0x2f0>)
 80126bc:	601a      	str	r2, [r3, #0]

	/* Create the recursive mutex(es) */
	/* definition and creation of SimcomRecMutex */
	osMutexDef(SimcomRecMutex);
 80126be:	2300      	movs	r3, #0
 80126c0:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80126c4:	2300      	movs	r3, #0
 80126c6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
	SimcomRecMutexHandle = osRecursiveMutexCreate(osMutex(SimcomRecMutex));
 80126ca:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80126ce:	4618      	mov	r0, r3
 80126d0:	f7f6 fa29 	bl	8008b26 <osRecursiveMutexCreate>
 80126d4:	4602      	mov	r2, r0
 80126d6:	4b93      	ldr	r3, [pc, #588]	; (8012924 <main+0x2f4>)
 80126d8:	601a      	str	r2, [r3, #0]

	/* definition and creation of FingerRecMutex */
	osMutexDef(FingerRecMutex);
 80126da:	2300      	movs	r3, #0
 80126dc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80126e0:	2300      	movs	r3, #0
 80126e2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
	FingerRecMutexHandle = osRecursiveMutexCreate(osMutex(FingerRecMutex));
 80126e6:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80126ea:	4618      	mov	r0, r3
 80126ec:	f7f6 fa1b 	bl	8008b26 <osRecursiveMutexCreate>
 80126f0:	4602      	mov	r2, r0
 80126f2:	4b8d      	ldr	r3, [pc, #564]	; (8012928 <main+0x2f8>)
 80126f4:	601a      	str	r2, [r3, #0]
	/* add semaphores, ... */
	/* USER CODE END RTOS_SEMAPHORES */

	/* Create the timer(s) */
	/* definition and creation of Timer500 */
	osTimerDef(Timer500, CallbackTimer500);
 80126f6:	4b8d      	ldr	r3, [pc, #564]	; (801292c <main+0x2fc>)
 80126f8:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 80126fc:	2300      	movs	r3, #0
 80126fe:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
	Timer500Handle = osTimerCreate(osTimer(Timer500), osTimerPeriodic, NULL);
 8012702:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8012706:	2200      	movs	r2, #0
 8012708:	2101      	movs	r1, #1
 801270a:	4618      	mov	r0, r3
 801270c:	f7f5 fde2 	bl	80082d4 <osTimerCreate>
 8012710:	4602      	mov	r2, r0
 8012712:	4b87      	ldr	r3, [pc, #540]	; (8012930 <main+0x300>)
 8012714:	601a      	str	r2, [r3, #0]

	/* USER CODE BEGIN RTOS_TIMERS */
	/* start timers, add new ones, ... */
	osTimerStart(Timer500Handle, 500);
 8012716:	4b86      	ldr	r3, [pc, #536]	; (8012930 <main+0x300>)
 8012718:	681b      	ldr	r3, [r3, #0]
 801271a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 801271e:	4618      	mov	r0, r3
 8012720:	f7f5 fe0c 	bl	800833c <osTimerStart>
	/* USER CODE END RTOS_TIMERS */

	/* Create the queue(s) */
	/* definition and creation of AudioVolQueue */
	osMessageQDef(AudioVolQueue, 1, uint8_t);
 8012724:	4b83      	ldr	r3, [pc, #524]	; (8012934 <main+0x304>)
 8012726:	f507 749c 	add.w	r4, r7, #312	; 0x138
 801272a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801272c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	AudioVolQueueHandle = osMessageCreate(osMessageQ(AudioVolQueue), NULL);
 8012730:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012734:	2100      	movs	r1, #0
 8012736:	4618      	mov	r0, r3
 8012738:	f7f5 ffe2 	bl	8008700 <osMessageCreate>
 801273c:	4602      	mov	r2, r0
 801273e:	4b7e      	ldr	r3, [pc, #504]	; (8012938 <main+0x308>)
 8012740:	601a      	str	r2, [r3, #0]

	/* USER CODE BEGIN RTOS_QUEUES */
	/* add queues, ... */
	osMailQDef(GpsMail, 1, gps_t);
 8012742:	2301      	movs	r3, #1
 8012744:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8012748:	2374      	movs	r3, #116	; 0x74
 801274a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 801274e:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8012752:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	GpsMailHandle = osMailCreate(osMailQ(GpsMail), NULL);
 8012756:	f507 7394 	add.w	r3, r7, #296	; 0x128
 801275a:	2100      	movs	r1, #0
 801275c:	4618      	mov	r0, r3
 801275e:	f7f6 f8ad 	bl	80088bc <osMailCreate>
 8012762:	4602      	mov	r2, r0
 8012764:	4b75      	ldr	r3, [pc, #468]	; (801293c <main+0x30c>)
 8012766:	601a      	str	r2, [r3, #0]

	osMailQDef(canRxMail, 10, CAN_Rx);
 8012768:	230a      	movs	r3, #10
 801276a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 801276e:	2324      	movs	r3, #36	; 0x24
 8012770:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8012774:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8012778:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	canRxMailHandle = osMailCreate(osMailQ(canRxMail), NULL);
 801277c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8012780:	2100      	movs	r1, #0
 8012782:	4618      	mov	r0, r3
 8012784:	f7f6 f89a 	bl	80088bc <osMailCreate>
 8012788:	4602      	mov	r2, r0
 801278a:	4b6d      	ldr	r3, [pc, #436]	; (8012940 <main+0x310>)
 801278c:	601a      	str	r2, [r3, #0]
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of IotTask */
	osThreadDef(IotTask, StartIotTask, osPriorityNormal, 0, 512);
 801278e:	4b6d      	ldr	r3, [pc, #436]	; (8012944 <main+0x314>)
 8012790:	f107 04fc 	add.w	r4, r7, #252	; 0xfc
 8012794:	461d      	mov	r5, r3
 8012796:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012798:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801279a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801279e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	IotTaskHandle = osThreadCreate(osThread(IotTask), NULL);
 80127a2:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80127a6:	2100      	movs	r1, #0
 80127a8:	4618      	mov	r0, r3
 80127aa:	f7f5 fd32 	bl	8008212 <osThreadCreate>
 80127ae:	4602      	mov	r2, r0
 80127b0:	4b65      	ldr	r3, [pc, #404]	; (8012948 <main+0x318>)
 80127b2:	601a      	str	r2, [r3, #0]

	/* definition and creation of GyroTask */
	osThreadDef(GyroTask, StartGyroTask, osPriorityNormal, 0, 512);
 80127b4:	4b65      	ldr	r3, [pc, #404]	; (801294c <main+0x31c>)
 80127b6:	f107 04e0 	add.w	r4, r7, #224	; 0xe0
 80127ba:	461d      	mov	r5, r3
 80127bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80127be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80127c0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80127c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	GyroTaskHandle = osThreadCreate(osThread(GyroTask), NULL);
 80127c8:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80127cc:	2100      	movs	r1, #0
 80127ce:	4618      	mov	r0, r3
 80127d0:	f7f5 fd1f 	bl	8008212 <osThreadCreate>
 80127d4:	4602      	mov	r2, r0
 80127d6:	4b5e      	ldr	r3, [pc, #376]	; (8012950 <main+0x320>)
 80127d8:	601a      	str	r2, [r3, #0]

	/* definition and creation of CommandTask */
	osThreadDef(CommandTask, StartCommandTask, osPriorityNormal, 0, 256);
 80127da:	4b5e      	ldr	r3, [pc, #376]	; (8012954 <main+0x324>)
 80127dc:	f107 04c4 	add.w	r4, r7, #196	; 0xc4
 80127e0:	461d      	mov	r5, r3
 80127e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80127e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80127e6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80127ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	CommandTaskHandle = osThreadCreate(osThread(CommandTask), NULL);
 80127ee:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80127f2:	2100      	movs	r1, #0
 80127f4:	4618      	mov	r0, r3
 80127f6:	f7f5 fd0c 	bl	8008212 <osThreadCreate>
 80127fa:	4602      	mov	r2, r0
 80127fc:	4b56      	ldr	r3, [pc, #344]	; (8012958 <main+0x328>)
 80127fe:	601a      	str	r2, [r3, #0]

	/* definition and creation of GpsTask */
	osThreadDef(GpsTask, StartGpsTask, osPriorityNormal, 0, 256);
 8012800:	4b56      	ldr	r3, [pc, #344]	; (801295c <main+0x32c>)
 8012802:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 8012806:	461d      	mov	r5, r3
 8012808:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801280a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801280c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8012810:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	GpsTaskHandle = osThreadCreate(osThread(GpsTask), NULL);
 8012814:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8012818:	2100      	movs	r1, #0
 801281a:	4618      	mov	r0, r3
 801281c:	f7f5 fcf9 	bl	8008212 <osThreadCreate>
 8012820:	4602      	mov	r2, r0
 8012822:	4b4f      	ldr	r3, [pc, #316]	; (8012960 <main+0x330>)
 8012824:	601a      	str	r2, [r3, #0]

	/* definition and creation of FingerTask */
	osThreadDef(FingerTask, StartFingerTask, osPriorityNormal, 0, 256);
 8012826:	4b4f      	ldr	r3, [pc, #316]	; (8012964 <main+0x334>)
 8012828:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 801282c:	461d      	mov	r5, r3
 801282e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012830:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012832:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8012836:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	FingerTaskHandle = osThreadCreate(osThread(FingerTask), NULL);
 801283a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801283e:	2100      	movs	r1, #0
 8012840:	4618      	mov	r0, r3
 8012842:	f7f5 fce6 	bl	8008212 <osThreadCreate>
 8012846:	4602      	mov	r2, r0
 8012848:	4b47      	ldr	r3, [pc, #284]	; (8012968 <main+0x338>)
 801284a:	601a      	str	r2, [r3, #0]

	/* definition and creation of AudioTask */
	osThreadDef(AudioTask, StartAudioTask, osPriorityNormal, 0, 128);
 801284c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8012850:	4a46      	ldr	r2, [pc, #280]	; (801296c <main+0x33c>)
 8012852:	461c      	mov	r4, r3
 8012854:	4615      	mov	r5, r2
 8012856:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012858:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801285a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801285e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	AudioTaskHandle = osThreadCreate(osThread(AudioTask), NULL);
 8012862:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8012866:	2100      	movs	r1, #0
 8012868:	4618      	mov	r0, r3
 801286a:	f7f5 fcd2 	bl	8008212 <osThreadCreate>
 801286e:	4602      	mov	r2, r0
 8012870:	4b3f      	ldr	r3, [pc, #252]	; (8012970 <main+0x340>)
 8012872:	601a      	str	r2, [r3, #0]

	/* definition and creation of KeylessTask */
	osThreadDef(KeylessTask, StartKeylessTask, osPriorityNormal, 0, 256);
 8012874:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8012878:	4a3e      	ldr	r2, [pc, #248]	; (8012974 <main+0x344>)
 801287a:	461c      	mov	r4, r3
 801287c:	4615      	mov	r5, r2
 801287e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012880:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012882:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8012886:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	KeylessTaskHandle = osThreadCreate(osThread(KeylessTask), NULL);
 801288a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801288e:	2100      	movs	r1, #0
 8012890:	4618      	mov	r0, r3
 8012892:	f7f5 fcbe 	bl	8008212 <osThreadCreate>
 8012896:	4602      	mov	r2, r0
 8012898:	4b37      	ldr	r3, [pc, #220]	; (8012978 <main+0x348>)
 801289a:	601a      	str	r2, [r3, #0]

	/* definition and creation of ReporterTask */
	osThreadDef(ReporterTask, StartReporterTask, osPriorityNormal, 0, 512);
 801289c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80128a0:	4a36      	ldr	r2, [pc, #216]	; (801297c <main+0x34c>)
 80128a2:	461c      	mov	r4, r3
 80128a4:	4615      	mov	r5, r2
 80128a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80128a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80128aa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80128ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	ReporterTaskHandle = osThreadCreate(osThread(ReporterTask), NULL);
 80128b2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80128b6:	2100      	movs	r1, #0
 80128b8:	4618      	mov	r0, r3
 80128ba:	f7f5 fcaa 	bl	8008212 <osThreadCreate>
 80128be:	4602      	mov	r2, r0
 80128c0:	4b2f      	ldr	r3, [pc, #188]	; (8012980 <main+0x350>)
 80128c2:	601a      	str	r2, [r3, #0]

	/* definition and creation of CanRxTask */
	osThreadDef(CanRxTask, StartCanRxTask, osPriorityNormal, 0, 128);
 80128c4:	f107 031c 	add.w	r3, r7, #28
 80128c8:	4a2e      	ldr	r2, [pc, #184]	; (8012984 <main+0x354>)
 80128ca:	461c      	mov	r4, r3
 80128cc:	4615      	mov	r5, r2
 80128ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80128d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80128d2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80128d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	CanRxTaskHandle = osThreadCreate(osThread(CanRxTask), NULL);
 80128da:	f107 031c 	add.w	r3, r7, #28
 80128de:	2100      	movs	r1, #0
 80128e0:	4618      	mov	r0, r3
 80128e2:	f7f5 fc96 	bl	8008212 <osThreadCreate>
 80128e6:	4602      	mov	r2, r0
 80128e8:	4b27      	ldr	r3, [pc, #156]	; (8012988 <main+0x358>)
 80128ea:	601a      	str	r2, [r3, #0]

	/* definition and creation of SwitchTask */
	osThreadDef(SwitchTask, StartSwitchTask, osPriorityNormal, 0, 128);
 80128ec:	463b      	mov	r3, r7
 80128ee:	4a27      	ldr	r2, [pc, #156]	; (801298c <main+0x35c>)
 80128f0:	461c      	mov	r4, r3
 80128f2:	4615      	mov	r5, r2
 80128f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80128f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80128f8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80128fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	SwitchTaskHandle = osThreadCreate(osThread(SwitchTask), NULL);
 8012900:	463b      	mov	r3, r7
 8012902:	2100      	movs	r1, #0
 8012904:	4618      	mov	r0, r3
 8012906:	f7f5 fc84 	bl	8008212 <osThreadCreate>
 801290a:	4602      	mov	r2, r0
 801290c:	4b20      	ldr	r3, [pc, #128]	; (8012990 <main+0x360>)
 801290e:	601a      	str	r2, [r3, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 8012910:	f7f5 fc68 	bl	80081e4 <osKernelStart>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	// FIXME use IWDG or WWDG for auto reset on malfunction
	// FIXME use tickless idle feature for low power mode
	while (1) {
 8012914:	e7fe      	b.n	8012914 <main+0x2e4>
 8012916:	bf00      	nop
 8012918:	2000876c 	.word	0x2000876c
 801291c:	20008808 	.word	0x20008808
 8012920:	20008764 	.word	0x20008764
 8012924:	20008970 	.word	0x20008970
 8012928:	2000896c 	.word	0x2000896c
 801292c:	08013be9 	.word	0x08013be9
 8012930:	200087dc 	.word	0x200087dc
 8012934:	08018f8c 	.word	0x08018f8c
 8012938:	2000891c 	.word	0x2000891c
 801293c:	20008558 	.word	0x20008558
 8012940:	20008770 	.word	0x20008770
 8012944:	08018fa4 	.word	0x08018fa4
 8012948:	200088b0 	.word	0x200088b0
 801294c:	08018fcc 	.word	0x08018fcc
 8012950:	200087e0 	.word	0x200087e0
 8012954:	08018ff4 	.word	0x08018ff4
 8012958:	20008810 	.word	0x20008810
 801295c:	08019018 	.word	0x08019018
 8012960:	2000880c 	.word	0x2000880c
 8012964:	08019040 	.word	0x08019040
 8012968:	20008774 	.word	0x20008774
 801296c:	08019068 	.word	0x08019068
 8012970:	20008968 	.word	0x20008968
 8012974:	08019090 	.word	0x08019090
 8012978:	20008768 	.word	0x20008768
 801297c:	080190bc 	.word	0x080190bc
 8012980:	200087d8 	.word	0x200087d8
 8012984:	080190e4 	.word	0x080190e4
 8012988:	200087e4 	.word	0x200087e4
 801298c:	0801910c 	.word	0x0801910c
 8012990:	200088ac 	.word	0x200088ac

08012994 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8012994:	b580      	push	{r7, lr}
 8012996:	b098      	sub	sp, #96	; 0x60
 8012998:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 801299a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801299e:	2230      	movs	r2, #48	; 0x30
 80129a0:	2100      	movs	r1, #0
 80129a2:	4618      	mov	r0, r3
 80129a4:	f002 fbeb 	bl	801517e <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80129a8:	f107 031c 	add.w	r3, r7, #28
 80129ac:	2200      	movs	r2, #0
 80129ae:	601a      	str	r2, [r3, #0]
 80129b0:	605a      	str	r2, [r3, #4]
 80129b2:	609a      	str	r2, [r3, #8]
 80129b4:	60da      	str	r2, [r3, #12]
 80129b6:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 80129b8:	f107 030c 	add.w	r3, r7, #12
 80129bc:	2200      	movs	r2, #0
 80129be:	601a      	str	r2, [r3, #0]
 80129c0:	605a      	str	r2, [r3, #4]
 80129c2:	609a      	str	r2, [r3, #8]
 80129c4:	60da      	str	r2, [r3, #12]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE()
 80129c6:	2300      	movs	r3, #0
 80129c8:	60bb      	str	r3, [r7, #8]
 80129ca:	4b33      	ldr	r3, [pc, #204]	; (8012a98 <SystemClock_Config+0x104>)
 80129cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80129ce:	4a32      	ldr	r2, [pc, #200]	; (8012a98 <SystemClock_Config+0x104>)
 80129d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80129d4:	6413      	str	r3, [r2, #64]	; 0x40
 80129d6:	4b30      	ldr	r3, [pc, #192]	; (8012a98 <SystemClock_Config+0x104>)
 80129d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80129da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80129de:	60bb      	str	r3, [r7, #8]
 80129e0:	68bb      	ldr	r3, [r7, #8]
	;
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80129e2:	2300      	movs	r3, #0
 80129e4:	607b      	str	r3, [r7, #4]
 80129e6:	4b2d      	ldr	r3, [pc, #180]	; (8012a9c <SystemClock_Config+0x108>)
 80129e8:	681b      	ldr	r3, [r3, #0]
 80129ea:	4a2c      	ldr	r2, [pc, #176]	; (8012a9c <SystemClock_Config+0x108>)
 80129ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80129f0:	6013      	str	r3, [r2, #0]
 80129f2:	4b2a      	ldr	r3, [pc, #168]	; (8012a9c <SystemClock_Config+0x108>)
 80129f4:	681b      	ldr	r3, [r3, #0]
 80129f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80129fa:	607b      	str	r3, [r7, #4]
 80129fc:	687b      	ldr	r3, [r7, #4]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_LSE;
 80129fe:	2305      	movs	r3, #5
 8012a00:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8012a02:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8012a06:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8012a08:	2301      	movs	r3, #1
 8012a0a:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8012a0c:	2302      	movs	r3, #2
 8012a0e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8012a10:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8012a14:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8012a16:	2308      	movs	r3, #8
 8012a18:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 336;
 8012a1a:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8012a1e:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8012a20:	2302      	movs	r3, #2
 8012a22:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8012a24:	2307      	movs	r3, #7
 8012a26:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8012a28:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8012a2c:	4618      	mov	r0, r3
 8012a2e:	f7f2 feed 	bl	800580c <HAL_RCC_OscConfig>
 8012a32:	4603      	mov	r3, r0
 8012a34:	2b00      	cmp	r3, #0
 8012a36:	d001      	beq.n	8012a3c <SystemClock_Config+0xa8>
		Error_Handler();
 8012a38:	f001 f8fa 	bl	8013c30 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8012a3c:	230f      	movs	r3, #15
 8012a3e:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8012a40:	2302      	movs	r3, #2
 8012a42:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8012a44:	2300      	movs	r3, #0
 8012a46:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8012a48:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8012a4c:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8012a4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012a52:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8012a54:	f107 031c 	add.w	r3, r7, #28
 8012a58:	2105      	movs	r1, #5
 8012a5a:	4618      	mov	r0, r3
 8012a5c:	f7f3 f918 	bl	8005c90 <HAL_RCC_ClockConfig>
 8012a60:	4603      	mov	r3, r0
 8012a62:	2b00      	cmp	r3, #0
 8012a64:	d001      	beq.n	8012a6a <SystemClock_Config+0xd6>
		Error_Handler();
 8012a66:	f001 f8e3 	bl	8013c30 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
 8012a6a:	2303      	movs	r3, #3
 8012a6c:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8012a6e:	23c0      	movs	r3, #192	; 0xc0
 8012a70:	613b      	str	r3, [r7, #16]
	PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8012a72:	2302      	movs	r3, #2
 8012a74:	617b      	str	r3, [r7, #20]
	PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8012a76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012a7a:	61bb      	str	r3, [r7, #24]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8012a7c:	f107 030c 	add.w	r3, r7, #12
 8012a80:	4618      	mov	r0, r3
 8012a82:	f7f3 fb25 	bl	80060d0 <HAL_RCCEx_PeriphCLKConfig>
 8012a86:	4603      	mov	r3, r0
 8012a88:	2b00      	cmp	r3, #0
 8012a8a:	d001      	beq.n	8012a90 <SystemClock_Config+0xfc>
		Error_Handler();
 8012a8c:	f001 f8d0 	bl	8013c30 <Error_Handler>
	}
}
 8012a90:	bf00      	nop
 8012a92:	3760      	adds	r7, #96	; 0x60
 8012a94:	46bd      	mov	sp, r7
 8012a96:	bd80      	pop	{r7, pc}
 8012a98:	40023800 	.word	0x40023800
 8012a9c:	40007000 	.word	0x40007000

08012aa0 <MX_CAN1_Init>:
/**
 * @brief CAN1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN1_Init(void) {
 8012aa0:	b580      	push	{r7, lr}
 8012aa2:	af00      	add	r7, sp, #0
	/* USER CODE END CAN1_Init 0 */

	/* USER CODE BEGIN CAN1_Init 1 */

	/* USER CODE END CAN1_Init 1 */
	hcan1.Instance = CAN1;
 8012aa4:	4b17      	ldr	r3, [pc, #92]	; (8012b04 <MX_CAN1_Init+0x64>)
 8012aa6:	4a18      	ldr	r2, [pc, #96]	; (8012b08 <MX_CAN1_Init+0x68>)
 8012aa8:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 6;
 8012aaa:	4b16      	ldr	r3, [pc, #88]	; (8012b04 <MX_CAN1_Init+0x64>)
 8012aac:	2206      	movs	r2, #6
 8012aae:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 8012ab0:	4b14      	ldr	r3, [pc, #80]	; (8012b04 <MX_CAN1_Init+0x64>)
 8012ab2:	2200      	movs	r2, #0
 8012ab4:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8012ab6:	4b13      	ldr	r3, [pc, #76]	; (8012b04 <MX_CAN1_Init+0x64>)
 8012ab8:	2200      	movs	r2, #0
 8012aba:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 8012abc:	4b11      	ldr	r3, [pc, #68]	; (8012b04 <MX_CAN1_Init+0x64>)
 8012abe:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 8012ac2:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8012ac4:	4b0f      	ldr	r3, [pc, #60]	; (8012b04 <MX_CAN1_Init+0x64>)
 8012ac6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8012aca:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 8012acc:	4b0d      	ldr	r3, [pc, #52]	; (8012b04 <MX_CAN1_Init+0x64>)
 8012ace:	2200      	movs	r2, #0
 8012ad0:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = ENABLE;
 8012ad2:	4b0c      	ldr	r3, [pc, #48]	; (8012b04 <MX_CAN1_Init+0x64>)
 8012ad4:	2201      	movs	r2, #1
 8012ad6:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 8012ad8:	4b0a      	ldr	r3, [pc, #40]	; (8012b04 <MX_CAN1_Init+0x64>)
 8012ada:	2200      	movs	r2, #0
 8012adc:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = DISABLE;
 8012ade:	4b09      	ldr	r3, [pc, #36]	; (8012b04 <MX_CAN1_Init+0x64>)
 8012ae0:	2200      	movs	r2, #0
 8012ae2:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 8012ae4:	4b07      	ldr	r3, [pc, #28]	; (8012b04 <MX_CAN1_Init+0x64>)
 8012ae6:	2200      	movs	r2, #0
 8012ae8:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 8012aea:	4b06      	ldr	r3, [pc, #24]	; (8012b04 <MX_CAN1_Init+0x64>)
 8012aec:	2200      	movs	r2, #0
 8012aee:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK) {
 8012af0:	4804      	ldr	r0, [pc, #16]	; (8012b04 <MX_CAN1_Init+0x64>)
 8012af2:	f7ee fabd 	bl	8001070 <HAL_CAN_Init>
 8012af6:	4603      	mov	r3, r0
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	d001      	beq.n	8012b00 <MX_CAN1_Init+0x60>
		Error_Handler();
 8012afc:	f001 f898 	bl	8013c30 <Error_Handler>
	}
	/* USER CODE BEGIN CAN1_Init 2 */

	/* USER CODE END CAN1_Init 2 */

}
 8012b00:	bf00      	nop
 8012b02:	bd80      	pop	{r7, pc}
 8012b04:	200088f4 	.word	0x200088f4
 8012b08:	40006400 	.word	0x40006400

08012b0c <MX_I2C3_Init>:
/**
 * @brief I2C3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C3_Init(void) {
 8012b0c:	b580      	push	{r7, lr}
 8012b0e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C3_Init 0 */

	/* USER CODE BEGIN I2C3_Init 1 */

	/* USER CODE END I2C3_Init 1 */
	hi2c3.Instance = I2C3;
 8012b10:	4b12      	ldr	r3, [pc, #72]	; (8012b5c <MX_I2C3_Init+0x50>)
 8012b12:	4a13      	ldr	r2, [pc, #76]	; (8012b60 <MX_I2C3_Init+0x54>)
 8012b14:	601a      	str	r2, [r3, #0]
	hi2c3.Init.ClockSpeed = 100000;
 8012b16:	4b11      	ldr	r3, [pc, #68]	; (8012b5c <MX_I2C3_Init+0x50>)
 8012b18:	4a12      	ldr	r2, [pc, #72]	; (8012b64 <MX_I2C3_Init+0x58>)
 8012b1a:	605a      	str	r2, [r3, #4]
	hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8012b1c:	4b0f      	ldr	r3, [pc, #60]	; (8012b5c <MX_I2C3_Init+0x50>)
 8012b1e:	2200      	movs	r2, #0
 8012b20:	609a      	str	r2, [r3, #8]
	hi2c3.Init.OwnAddress1 = 0;
 8012b22:	4b0e      	ldr	r3, [pc, #56]	; (8012b5c <MX_I2C3_Init+0x50>)
 8012b24:	2200      	movs	r2, #0
 8012b26:	60da      	str	r2, [r3, #12]
	hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8012b28:	4b0c      	ldr	r3, [pc, #48]	; (8012b5c <MX_I2C3_Init+0x50>)
 8012b2a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8012b2e:	611a      	str	r2, [r3, #16]
	hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8012b30:	4b0a      	ldr	r3, [pc, #40]	; (8012b5c <MX_I2C3_Init+0x50>)
 8012b32:	2200      	movs	r2, #0
 8012b34:	615a      	str	r2, [r3, #20]
	hi2c3.Init.OwnAddress2 = 0;
 8012b36:	4b09      	ldr	r3, [pc, #36]	; (8012b5c <MX_I2C3_Init+0x50>)
 8012b38:	2200      	movs	r2, #0
 8012b3a:	619a      	str	r2, [r3, #24]
	hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8012b3c:	4b07      	ldr	r3, [pc, #28]	; (8012b5c <MX_I2C3_Init+0x50>)
 8012b3e:	2200      	movs	r2, #0
 8012b40:	61da      	str	r2, [r3, #28]
	hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8012b42:	4b06      	ldr	r3, [pc, #24]	; (8012b5c <MX_I2C3_Init+0x50>)
 8012b44:	2200      	movs	r2, #0
 8012b46:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c3) != HAL_OK) {
 8012b48:	4804      	ldr	r0, [pc, #16]	; (8012b5c <MX_I2C3_Init+0x50>)
 8012b4a:	f7f0 fb83 	bl	8003254 <HAL_I2C_Init>
 8012b4e:	4603      	mov	r3, r0
 8012b50:	2b00      	cmp	r3, #0
 8012b52:	d001      	beq.n	8012b58 <MX_I2C3_Init+0x4c>
		Error_Handler();
 8012b54:	f001 f86c 	bl	8013c30 <Error_Handler>
	}
	/* USER CODE BEGIN I2C3_Init 2 */

	/* USER CODE END I2C3_Init 2 */

}
 8012b58:	bf00      	nop
 8012b5a:	bd80      	pop	{r7, pc}
 8012b5c:	2000861c 	.word	0x2000861c
 8012b60:	40005c00 	.word	0x40005c00
 8012b64:	000186a0 	.word	0x000186a0

08012b68 <MX_RTC_Init>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 8012b68:	b580      	push	{r7, lr}
 8012b6a:	b086      	sub	sp, #24
 8012b6c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RTC_Init 0 */

	/* USER CODE END RTC_Init 0 */

	RTC_TimeTypeDef sTime = { 0 };
 8012b6e:	1d3b      	adds	r3, r7, #4
 8012b70:	2200      	movs	r2, #0
 8012b72:	601a      	str	r2, [r3, #0]
 8012b74:	605a      	str	r2, [r3, #4]
 8012b76:	609a      	str	r2, [r3, #8]
 8012b78:	60da      	str	r2, [r3, #12]
 8012b7a:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = { 0 };
 8012b7c:	2300      	movs	r3, #0
 8012b7e:	603b      	str	r3, [r7, #0]
	/* USER CODE BEGIN RTC_Init 1 */

	/* USER CODE END RTC_Init 1 */
	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 8012b80:	4b2b      	ldr	r3, [pc, #172]	; (8012c30 <MX_RTC_Init+0xc8>)
 8012b82:	4a2c      	ldr	r2, [pc, #176]	; (8012c34 <MX_RTC_Init+0xcc>)
 8012b84:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8012b86:	4b2a      	ldr	r3, [pc, #168]	; (8012c30 <MX_RTC_Init+0xc8>)
 8012b88:	2200      	movs	r2, #0
 8012b8a:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 8012b8c:	4b28      	ldr	r3, [pc, #160]	; (8012c30 <MX_RTC_Init+0xc8>)
 8012b8e:	227f      	movs	r2, #127	; 0x7f
 8012b90:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 8012b92:	4b27      	ldr	r3, [pc, #156]	; (8012c30 <MX_RTC_Init+0xc8>)
 8012b94:	22ff      	movs	r2, #255	; 0xff
 8012b96:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8012b98:	4b25      	ldr	r3, [pc, #148]	; (8012c30 <MX_RTC_Init+0xc8>)
 8012b9a:	2200      	movs	r2, #0
 8012b9c:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8012b9e:	4b24      	ldr	r3, [pc, #144]	; (8012c30 <MX_RTC_Init+0xc8>)
 8012ba0:	2200      	movs	r2, #0
 8012ba2:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8012ba4:	4b22      	ldr	r3, [pc, #136]	; (8012c30 <MX_RTC_Init+0xc8>)
 8012ba6:	2200      	movs	r2, #0
 8012ba8:	619a      	str	r2, [r3, #24]
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 8012baa:	4821      	ldr	r0, [pc, #132]	; (8012c30 <MX_RTC_Init+0xc8>)
 8012bac:	f7f3 fbfa 	bl	80063a4 <HAL_RTC_Init>
 8012bb0:	4603      	mov	r3, r0
 8012bb2:	2b00      	cmp	r3, #0
 8012bb4:	d001      	beq.n	8012bba <MX_RTC_Init+0x52>
		Error_Handler();
 8012bb6:	f001 f83b 	bl	8013c30 <Error_Handler>
	}

	/* USER CODE BEGIN Check_RTC_BKUP */
	//	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR0, 0);  // uncomment this to reset RTC
	if (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR0) != 0x32F2) {
 8012bba:	2100      	movs	r1, #0
 8012bbc:	481c      	ldr	r0, [pc, #112]	; (8012c30 <MX_RTC_Init+0xc8>)
 8012bbe:	f7f3 ff3d 	bl	8006a3c <HAL_RTCEx_BKUPRead>
 8012bc2:	4602      	mov	r2, r0
 8012bc4:	f243 23f2 	movw	r3, #13042	; 0x32f2
 8012bc8:	429a      	cmp	r2, r3
 8012bca:	d02d      	beq.n	8012c28 <MX_RTC_Init+0xc0>
		/* USER CODE END Check_RTC_BKUP */

		/** Initialize RTC and set the Time and Date
		 */
		sTime.Hours = 0x10;
 8012bcc:	2310      	movs	r3, #16
 8012bce:	713b      	strb	r3, [r7, #4]
		sTime.Minutes = 0x20;
 8012bd0:	2320      	movs	r3, #32
 8012bd2:	717b      	strb	r3, [r7, #5]
		sTime.Seconds = 0x0;
 8012bd4:	2300      	movs	r3, #0
 8012bd6:	71bb      	strb	r3, [r7, #6]
		sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8012bd8:	2300      	movs	r3, #0
 8012bda:	613b      	str	r3, [r7, #16]
		sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8012bdc:	2300      	movs	r3, #0
 8012bde:	617b      	str	r3, [r7, #20]
		if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK) {
 8012be0:	1d3b      	adds	r3, r7, #4
 8012be2:	2201      	movs	r2, #1
 8012be4:	4619      	mov	r1, r3
 8012be6:	4812      	ldr	r0, [pc, #72]	; (8012c30 <MX_RTC_Init+0xc8>)
 8012be8:	f7f3 fc6d 	bl	80064c6 <HAL_RTC_SetTime>
 8012bec:	4603      	mov	r3, r0
 8012bee:	2b00      	cmp	r3, #0
 8012bf0:	d001      	beq.n	8012bf6 <MX_RTC_Init+0x8e>
			Error_Handler();
 8012bf2:	f001 f81d 	bl	8013c30 <Error_Handler>
		}
		sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 8012bf6:	2303      	movs	r3, #3
 8012bf8:	703b      	strb	r3, [r7, #0]
		sDate.Month = RTC_MONTH_OCTOBER;
 8012bfa:	2310      	movs	r3, #16
 8012bfc:	707b      	strb	r3, [r7, #1]
		sDate.Date = 0x2;
 8012bfe:	2302      	movs	r3, #2
 8012c00:	70bb      	strb	r3, [r7, #2]
		sDate.Year = 0x19;
 8012c02:	2319      	movs	r3, #25
 8012c04:	70fb      	strb	r3, [r7, #3]

		if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK) {
 8012c06:	463b      	mov	r3, r7
 8012c08:	2201      	movs	r2, #1
 8012c0a:	4619      	mov	r1, r3
 8012c0c:	4808      	ldr	r0, [pc, #32]	; (8012c30 <MX_RTC_Init+0xc8>)
 8012c0e:	f7f3 fd75 	bl	80066fc <HAL_RTC_SetDate>
 8012c12:	4603      	mov	r3, r0
 8012c14:	2b00      	cmp	r3, #0
 8012c16:	d001      	beq.n	8012c1c <MX_RTC_Init+0xb4>
			Error_Handler();
 8012c18:	f001 f80a 	bl	8013c30 <Error_Handler>
		}
		/* USER CODE BEGIN RTC_Init 2 */
		// write backup register for the 1st time
		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR0, 0x32F2);
 8012c1c:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8012c20:	2100      	movs	r1, #0
 8012c22:	4803      	ldr	r0, [pc, #12]	; (8012c30 <MX_RTC_Init+0xc8>)
 8012c24:	f7f3 fef0 	bl	8006a08 <HAL_RTCEx_BKUPWrite>
	}
	/* USER CODE END RTC_Init 2 */

}
 8012c28:	bf00      	nop
 8012c2a:	3718      	adds	r7, #24
 8012c2c:	46bd      	mov	sp, r7
 8012c2e:	bd80      	pop	{r7, pc}
 8012c30:	200087e8 	.word	0x200087e8
 8012c34:	40002800 	.word	0x40002800

08012c38 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8012c38:	b580      	push	{r7, lr}
 8012c3a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8012c3c:	4b17      	ldr	r3, [pc, #92]	; (8012c9c <MX_SPI1_Init+0x64>)
 8012c3e:	4a18      	ldr	r2, [pc, #96]	; (8012ca0 <MX_SPI1_Init+0x68>)
 8012c40:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8012c42:	4b16      	ldr	r3, [pc, #88]	; (8012c9c <MX_SPI1_Init+0x64>)
 8012c44:	f44f 7282 	mov.w	r2, #260	; 0x104
 8012c48:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8012c4a:	4b14      	ldr	r3, [pc, #80]	; (8012c9c <MX_SPI1_Init+0x64>)
 8012c4c:	2200      	movs	r2, #0
 8012c4e:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8012c50:	4b12      	ldr	r3, [pc, #72]	; (8012c9c <MX_SPI1_Init+0x64>)
 8012c52:	2200      	movs	r2, #0
 8012c54:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8012c56:	4b11      	ldr	r3, [pc, #68]	; (8012c9c <MX_SPI1_Init+0x64>)
 8012c58:	2200      	movs	r2, #0
 8012c5a:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8012c5c:	4b0f      	ldr	r3, [pc, #60]	; (8012c9c <MX_SPI1_Init+0x64>)
 8012c5e:	2200      	movs	r2, #0
 8012c60:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8012c62:	4b0e      	ldr	r3, [pc, #56]	; (8012c9c <MX_SPI1_Init+0x64>)
 8012c64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012c68:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8012c6a:	4b0c      	ldr	r3, [pc, #48]	; (8012c9c <MX_SPI1_Init+0x64>)
 8012c6c:	2218      	movs	r2, #24
 8012c6e:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8012c70:	4b0a      	ldr	r3, [pc, #40]	; (8012c9c <MX_SPI1_Init+0x64>)
 8012c72:	2200      	movs	r2, #0
 8012c74:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8012c76:	4b09      	ldr	r3, [pc, #36]	; (8012c9c <MX_SPI1_Init+0x64>)
 8012c78:	2200      	movs	r2, #0
 8012c7a:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8012c7c:	4b07      	ldr	r3, [pc, #28]	; (8012c9c <MX_SPI1_Init+0x64>)
 8012c7e:	2200      	movs	r2, #0
 8012c80:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8012c82:	4b06      	ldr	r3, [pc, #24]	; (8012c9c <MX_SPI1_Init+0x64>)
 8012c84:	220a      	movs	r2, #10
 8012c86:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8012c88:	4804      	ldr	r0, [pc, #16]	; (8012c9c <MX_SPI1_Init+0x64>)
 8012c8a:	f7f3 feef 	bl	8006a6c <HAL_SPI_Init>
 8012c8e:	4603      	mov	r3, r0
 8012c90:	2b00      	cmp	r3, #0
 8012c92:	d001      	beq.n	8012c98 <MX_SPI1_Init+0x60>
		Error_Handler();
 8012c94:	f000 ffcc 	bl	8013c30 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8012c98:	bf00      	nop
 8012c9a:	bd80      	pop	{r7, pc}
 8012c9c:	20008854 	.word	0x20008854
 8012ca0:	40013000 	.word	0x40013000

08012ca4 <MX_UART4_Init>:
/**
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void) {
 8012ca4:	b580      	push	{r7, lr}
 8012ca6:	af00      	add	r7, sp, #0
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 8012ca8:	4b11      	ldr	r3, [pc, #68]	; (8012cf0 <MX_UART4_Init+0x4c>)
 8012caa:	4a12      	ldr	r2, [pc, #72]	; (8012cf4 <MX_UART4_Init+0x50>)
 8012cac:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = 57600;
 8012cae:	4b10      	ldr	r3, [pc, #64]	; (8012cf0 <MX_UART4_Init+0x4c>)
 8012cb0:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8012cb4:	605a      	str	r2, [r3, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8012cb6:	4b0e      	ldr	r3, [pc, #56]	; (8012cf0 <MX_UART4_Init+0x4c>)
 8012cb8:	2200      	movs	r2, #0
 8012cba:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 8012cbc:	4b0c      	ldr	r3, [pc, #48]	; (8012cf0 <MX_UART4_Init+0x4c>)
 8012cbe:	2200      	movs	r2, #0
 8012cc0:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 8012cc2:	4b0b      	ldr	r3, [pc, #44]	; (8012cf0 <MX_UART4_Init+0x4c>)
 8012cc4:	2200      	movs	r2, #0
 8012cc6:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 8012cc8:	4b09      	ldr	r3, [pc, #36]	; (8012cf0 <MX_UART4_Init+0x4c>)
 8012cca:	220c      	movs	r2, #12
 8012ccc:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8012cce:	4b08      	ldr	r3, [pc, #32]	; (8012cf0 <MX_UART4_Init+0x4c>)
 8012cd0:	2200      	movs	r2, #0
 8012cd2:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8012cd4:	4b06      	ldr	r3, [pc, #24]	; (8012cf0 <MX_UART4_Init+0x4c>)
 8012cd6:	2200      	movs	r2, #0
 8012cd8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart4) != HAL_OK) {
 8012cda:	4805      	ldr	r0, [pc, #20]	; (8012cf0 <MX_UART4_Init+0x4c>)
 8012cdc:	f7f4 fbb6 	bl	800744c <HAL_UART_Init>
 8012ce0:	4603      	mov	r3, r0
 8012ce2:	2b00      	cmp	r3, #0
 8012ce4:	d001      	beq.n	8012cea <MX_UART4_Init+0x46>
		Error_Handler();
 8012ce6:	f000 ffa3 	bl	8013c30 <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */

	/* USER CODE END UART4_Init 2 */

}
 8012cea:	bf00      	nop
 8012cec:	bd80      	pop	{r7, pc}
 8012cee:	bf00      	nop
 8012cf0:	20008814 	.word	0x20008814
 8012cf4:	40004c00 	.word	0x40004c00

08012cf8 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8012cf8:	b580      	push	{r7, lr}
 8012cfa:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8012cfc:	4b11      	ldr	r3, [pc, #68]	; (8012d44 <MX_USART2_UART_Init+0x4c>)
 8012cfe:	4a12      	ldr	r2, [pc, #72]	; (8012d48 <MX_USART2_UART_Init+0x50>)
 8012d00:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 9600;
 8012d02:	4b10      	ldr	r3, [pc, #64]	; (8012d44 <MX_USART2_UART_Init+0x4c>)
 8012d04:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8012d08:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8012d0a:	4b0e      	ldr	r3, [pc, #56]	; (8012d44 <MX_USART2_UART_Init+0x4c>)
 8012d0c:	2200      	movs	r2, #0
 8012d0e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8012d10:	4b0c      	ldr	r3, [pc, #48]	; (8012d44 <MX_USART2_UART_Init+0x4c>)
 8012d12:	2200      	movs	r2, #0
 8012d14:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8012d16:	4b0b      	ldr	r3, [pc, #44]	; (8012d44 <MX_USART2_UART_Init+0x4c>)
 8012d18:	2200      	movs	r2, #0
 8012d1a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_RX;
 8012d1c:	4b09      	ldr	r3, [pc, #36]	; (8012d44 <MX_USART2_UART_Init+0x4c>)
 8012d1e:	2204      	movs	r2, #4
 8012d20:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8012d22:	4b08      	ldr	r3, [pc, #32]	; (8012d44 <MX_USART2_UART_Init+0x4c>)
 8012d24:	2200      	movs	r2, #0
 8012d26:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8012d28:	4b06      	ldr	r3, [pc, #24]	; (8012d44 <MX_USART2_UART_Init+0x4c>)
 8012d2a:	2200      	movs	r2, #0
 8012d2c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8012d2e:	4805      	ldr	r0, [pc, #20]	; (8012d44 <MX_USART2_UART_Init+0x4c>)
 8012d30:	f7f4 fb8c 	bl	800744c <HAL_UART_Init>
 8012d34:	4603      	mov	r3, r0
 8012d36:	2b00      	cmp	r3, #0
 8012d38:	d001      	beq.n	8012d3e <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8012d3a:	f000 ff79 	bl	8013c30 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8012d3e:	bf00      	nop
 8012d40:	bd80      	pop	{r7, pc}
 8012d42:	bf00      	nop
 8012d44:	200088b4 	.word	0x200088b4
 8012d48:	40004400 	.word	0x40004400

08012d4c <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8012d4c:	b580      	push	{r7, lr}
 8012d4e:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN USART3_Init 1 */

	//  huart3.Init.BaudRate = 115200;
	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8012d50:	4b11      	ldr	r3, [pc, #68]	; (8012d98 <MX_USART3_UART_Init+0x4c>)
 8012d52:	4a12      	ldr	r2, [pc, #72]	; (8012d9c <MX_USART3_UART_Init+0x50>)
 8012d54:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 9600;
 8012d56:	4b10      	ldr	r3, [pc, #64]	; (8012d98 <MX_USART3_UART_Init+0x4c>)
 8012d58:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8012d5c:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8012d5e:	4b0e      	ldr	r3, [pc, #56]	; (8012d98 <MX_USART3_UART_Init+0x4c>)
 8012d60:	2200      	movs	r2, #0
 8012d62:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8012d64:	4b0c      	ldr	r3, [pc, #48]	; (8012d98 <MX_USART3_UART_Init+0x4c>)
 8012d66:	2200      	movs	r2, #0
 8012d68:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8012d6a:	4b0b      	ldr	r3, [pc, #44]	; (8012d98 <MX_USART3_UART_Init+0x4c>)
 8012d6c:	2200      	movs	r2, #0
 8012d6e:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8012d70:	4b09      	ldr	r3, [pc, #36]	; (8012d98 <MX_USART3_UART_Init+0x4c>)
 8012d72:	220c      	movs	r2, #12
 8012d74:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8012d76:	4b08      	ldr	r3, [pc, #32]	; (8012d98 <MX_USART3_UART_Init+0x4c>)
 8012d78:	2200      	movs	r2, #0
 8012d7a:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8012d7c:	4b06      	ldr	r3, [pc, #24]	; (8012d98 <MX_USART3_UART_Init+0x4c>)
 8012d7e:	2200      	movs	r2, #0
 8012d80:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 8012d82:	4805      	ldr	r0, [pc, #20]	; (8012d98 <MX_USART3_UART_Init+0x4c>)
 8012d84:	f7f4 fb62 	bl	800744c <HAL_UART_Init>
 8012d88:	4603      	mov	r3, r0
 8012d8a:	2b00      	cmp	r3, #0
 8012d8c:	d001      	beq.n	8012d92 <MX_USART3_UART_Init+0x46>
		Error_Handler();
 8012d8e:	f000 ff4f 	bl	8013c30 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8012d92:	bf00      	nop
 8012d94:	bd80      	pop	{r7, pc}
 8012d96:	bf00      	nop
 8012d98:	200086d0 	.word	0x200086d0
 8012d9c:	40004800 	.word	0x40004800

08012da0 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8012da0:	b580      	push	{r7, lr}
 8012da2:	b082      	sub	sp, #8
 8012da4:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE()
 8012da6:	2300      	movs	r3, #0
 8012da8:	607b      	str	r3, [r7, #4]
 8012daa:	4b18      	ldr	r3, [pc, #96]	; (8012e0c <MX_DMA_Init+0x6c>)
 8012dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012dae:	4a17      	ldr	r2, [pc, #92]	; (8012e0c <MX_DMA_Init+0x6c>)
 8012db0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8012db4:	6313      	str	r3, [r2, #48]	; 0x30
 8012db6:	4b15      	ldr	r3, [pc, #84]	; (8012e0c <MX_DMA_Init+0x6c>)
 8012db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012dba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8012dbe:	607b      	str	r3, [r7, #4]
 8012dc0:	687b      	ldr	r3, [r7, #4]
	;

	/* DMA interrupt init */
	/* DMA1_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8012dc2:	2200      	movs	r2, #0
 8012dc4:	2105      	movs	r1, #5
 8012dc6:	200c      	movs	r0, #12
 8012dc8:	f7ef f868 	bl	8001e9c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8012dcc:	200c      	movs	r0, #12
 8012dce:	f7ef f881 	bl	8001ed4 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8012dd2:	2200      	movs	r2, #0
 8012dd4:	2105      	movs	r1, #5
 8012dd6:	200d      	movs	r0, #13
 8012dd8:	f7ef f860 	bl	8001e9c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8012ddc:	200d      	movs	r0, #13
 8012dde:	f7ef f879 	bl	8001ed4 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8012de2:	2200      	movs	r2, #0
 8012de4:	2105      	movs	r1, #5
 8012de6:	2010      	movs	r0, #16
 8012de8:	f7ef f858 	bl	8001e9c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8012dec:	2010      	movs	r0, #16
 8012dee:	f7ef f871 	bl	8001ed4 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream7_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8012df2:	2200      	movs	r2, #0
 8012df4:	2105      	movs	r1, #5
 8012df6:	202f      	movs	r0, #47	; 0x2f
 8012df8:	f7ef f850 	bl	8001e9c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8012dfc:	202f      	movs	r0, #47	; 0x2f
 8012dfe:	f7ef f869 	bl	8001ed4 <HAL_NVIC_EnableIRQ>

}
 8012e02:	bf00      	nop
 8012e04:	3708      	adds	r7, #8
 8012e06:	46bd      	mov	sp, r7
 8012e08:	bd80      	pop	{r7, pc}
 8012e0a:	bf00      	nop
 8012e0c:	40023800 	.word	0x40023800

08012e10 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8012e10:	b580      	push	{r7, lr}
 8012e12:	b08c      	sub	sp, #48	; 0x30
 8012e14:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8012e16:	f107 031c 	add.w	r3, r7, #28
 8012e1a:	2200      	movs	r2, #0
 8012e1c:	601a      	str	r2, [r3, #0]
 8012e1e:	605a      	str	r2, [r3, #4]
 8012e20:	609a      	str	r2, [r3, #8]
 8012e22:	60da      	str	r2, [r3, #12]
 8012e24:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE()
 8012e26:	2300      	movs	r3, #0
 8012e28:	61bb      	str	r3, [r7, #24]
 8012e2a:	4b98      	ldr	r3, [pc, #608]	; (801308c <MX_GPIO_Init+0x27c>)
 8012e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012e2e:	4a97      	ldr	r2, [pc, #604]	; (801308c <MX_GPIO_Init+0x27c>)
 8012e30:	f043 0310 	orr.w	r3, r3, #16
 8012e34:	6313      	str	r3, [r2, #48]	; 0x30
 8012e36:	4b95      	ldr	r3, [pc, #596]	; (801308c <MX_GPIO_Init+0x27c>)
 8012e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012e3a:	f003 0310 	and.w	r3, r3, #16
 8012e3e:	61bb      	str	r3, [r7, #24]
 8012e40:	69bb      	ldr	r3, [r7, #24]
	;
	__HAL_RCC_GPIOC_CLK_ENABLE()
 8012e42:	2300      	movs	r3, #0
 8012e44:	617b      	str	r3, [r7, #20]
 8012e46:	4b91      	ldr	r3, [pc, #580]	; (801308c <MX_GPIO_Init+0x27c>)
 8012e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012e4a:	4a90      	ldr	r2, [pc, #576]	; (801308c <MX_GPIO_Init+0x27c>)
 8012e4c:	f043 0304 	orr.w	r3, r3, #4
 8012e50:	6313      	str	r3, [r2, #48]	; 0x30
 8012e52:	4b8e      	ldr	r3, [pc, #568]	; (801308c <MX_GPIO_Init+0x27c>)
 8012e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012e56:	f003 0304 	and.w	r3, r3, #4
 8012e5a:	617b      	str	r3, [r7, #20]
 8012e5c:	697b      	ldr	r3, [r7, #20]
	;
	__HAL_RCC_GPIOH_CLK_ENABLE()
 8012e5e:	2300      	movs	r3, #0
 8012e60:	613b      	str	r3, [r7, #16]
 8012e62:	4b8a      	ldr	r3, [pc, #552]	; (801308c <MX_GPIO_Init+0x27c>)
 8012e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012e66:	4a89      	ldr	r2, [pc, #548]	; (801308c <MX_GPIO_Init+0x27c>)
 8012e68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8012e6e:	4b87      	ldr	r3, [pc, #540]	; (801308c <MX_GPIO_Init+0x27c>)
 8012e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012e72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012e76:	613b      	str	r3, [r7, #16]
 8012e78:	693b      	ldr	r3, [r7, #16]
	;
	__HAL_RCC_GPIOA_CLK_ENABLE()
 8012e7a:	2300      	movs	r3, #0
 8012e7c:	60fb      	str	r3, [r7, #12]
 8012e7e:	4b83      	ldr	r3, [pc, #524]	; (801308c <MX_GPIO_Init+0x27c>)
 8012e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012e82:	4a82      	ldr	r2, [pc, #520]	; (801308c <MX_GPIO_Init+0x27c>)
 8012e84:	f043 0301 	orr.w	r3, r3, #1
 8012e88:	6313      	str	r3, [r2, #48]	; 0x30
 8012e8a:	4b80      	ldr	r3, [pc, #512]	; (801308c <MX_GPIO_Init+0x27c>)
 8012e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012e8e:	f003 0301 	and.w	r3, r3, #1
 8012e92:	60fb      	str	r3, [r7, #12]
 8012e94:	68fb      	ldr	r3, [r7, #12]
	;
	__HAL_RCC_GPIOB_CLK_ENABLE()
 8012e96:	2300      	movs	r3, #0
 8012e98:	60bb      	str	r3, [r7, #8]
 8012e9a:	4b7c      	ldr	r3, [pc, #496]	; (801308c <MX_GPIO_Init+0x27c>)
 8012e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012e9e:	4a7b      	ldr	r2, [pc, #492]	; (801308c <MX_GPIO_Init+0x27c>)
 8012ea0:	f043 0302 	orr.w	r3, r3, #2
 8012ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8012ea6:	4b79      	ldr	r3, [pc, #484]	; (801308c <MX_GPIO_Init+0x27c>)
 8012ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012eaa:	f003 0302 	and.w	r3, r3, #2
 8012eae:	60bb      	str	r3, [r7, #8]
 8012eb0:	68bb      	ldr	r3, [r7, #8]
	;
	__HAL_RCC_GPIOD_CLK_ENABLE()
 8012eb2:	2300      	movs	r3, #0
 8012eb4:	607b      	str	r3, [r7, #4]
 8012eb6:	4b75      	ldr	r3, [pc, #468]	; (801308c <MX_GPIO_Init+0x27c>)
 8012eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012eba:	4a74      	ldr	r2, [pc, #464]	; (801308c <MX_GPIO_Init+0x27c>)
 8012ebc:	f043 0308 	orr.w	r3, r3, #8
 8012ec0:	6313      	str	r3, [r2, #48]	; 0x30
 8012ec2:	4b72      	ldr	r3, [pc, #456]	; (801308c <MX_GPIO_Init+0x27c>)
 8012ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012ec6:	f003 0308 	and.w	r3, r3, #8
 8012eca:	607b      	str	r3, [r7, #4]
 8012ecc:	687b      	ldr	r3, [r7, #4]
	;

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, UBLOX_PWR_Pin | MEMS_PWR_Pin, GPIO_PIN_RESET);
 8012ece:	2200      	movs	r2, #0
 8012ed0:	2142      	movs	r1, #66	; 0x42
 8012ed2:	486f      	ldr	r0, [pc, #444]	; (8013090 <MX_GPIO_Init+0x280>)
 8012ed4:	f7f0 f972 	bl	80031bc <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(FINGER_PWR_GPIO_Port, FINGER_PWR_Pin, GPIO_PIN_SET);
 8012ed8:	2201      	movs	r2, #1
 8012eda:	2104      	movs	r1, #4
 8012edc:	486c      	ldr	r0, [pc, #432]	; (8013090 <MX_GPIO_Init+0x280>)
 8012ede:	f7f0 f96d 	bl	80031bc <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_RESET);
 8012ee2:	2200      	movs	r2, #0
 8012ee4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8012ee8:	486a      	ldr	r0, [pc, #424]	; (8013094 <MX_GPIO_Init+0x284>)
 8012eea:	f7f0 f967 	bl	80031bc <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SIMCOM_RST_GPIO_Port, SIMCOM_RST_Pin, GPIO_PIN_SET);
 8012eee:	2201      	movs	r2, #1
 8012ef0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8012ef4:	4868      	ldr	r0, [pc, #416]	; (8013098 <MX_GPIO_Init+0x288>)
 8012ef6:	f7f0 f961 	bl	80031bc <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SIMCOM_PWR_GPIO_Port, SIMCOM_PWR_Pin, GPIO_PIN_SET);
 8012efa:	2201      	movs	r2, #1
 8012efc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8012f00:	4866      	ldr	r0, [pc, #408]	; (801309c <MX_GPIO_Init+0x28c>)
 8012f02:	f7f0 f95b 	bl	80031bc <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin, GPIO_PIN_RESET);
 8012f06:	2200      	movs	r2, #0
 8012f08:	f24f 0110 	movw	r1, #61456	; 0xf010
 8012f0c:	4863      	ldr	r0, [pc, #396]	; (801309c <MX_GPIO_Init+0x28c>)
 8012f0e:	f7f0 f955 	bl	80031bc <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(NRF24_CSN_GPIO_Port, NRF24_CSN_Pin, GPIO_PIN_SET);
 8012f12:	2201      	movs	r2, #1
 8012f14:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8012f18:	4861      	ldr	r0, [pc, #388]	; (80130a0 <MX_GPIO_Init+0x290>)
 8012f1a:	f7f0 f94f 	bl	80031bc <HAL_GPIO_WritePin>

	/*Configure GPIO pins : KEY_SELECT_Pin KEY_SET_Pin KEY_MIRROR_Pin KEY_LAMP_Pin
	 KEY_ABS_Pin KEY_SEIN_L_Pin KEY_SEIN_R_Pin */
	GPIO_InitStruct.Pin = KEY_SELECT_Pin | KEY_SET_Pin | KEY_MIRROR_Pin | KEY_LAMP_Pin | KEY_ABS_Pin | KEY_SEIN_L_Pin | KEY_SEIN_R_Pin;
 8012f1e:	237f      	movs	r3, #127	; 0x7f
 8012f20:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8012f22:	4b60      	ldr	r3, [pc, #384]	; (80130a4 <MX_GPIO_Init+0x294>)
 8012f24:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8012f26:	2302      	movs	r3, #2
 8012f28:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8012f2a:	f107 031c 	add.w	r3, r7, #28
 8012f2e:	4619      	mov	r1, r3
 8012f30:	4858      	ldr	r0, [pc, #352]	; (8013094 <MX_GPIO_Init+0x284>)
 8012f32:	f7ef fe97 	bl	8002c64 <HAL_GPIO_Init>

	/*Configure GPIO pins : UBLOX_PWR_Pin FINGER_PWR_Pin MEMS_PWR_Pin */
	GPIO_InitStruct.Pin = UBLOX_PWR_Pin | FINGER_PWR_Pin | MEMS_PWR_Pin;
 8012f36:	2346      	movs	r3, #70	; 0x46
 8012f38:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8012f3a:	2301      	movs	r3, #1
 8012f3c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012f3e:	2300      	movs	r3, #0
 8012f40:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012f42:	2300      	movs	r3, #0
 8012f44:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8012f46:	f107 031c 	add.w	r3, r7, #28
 8012f4a:	4619      	mov	r1, r3
 8012f4c:	4850      	ldr	r0, [pc, #320]	; (8013090 <MX_GPIO_Init+0x280>)
 8012f4e:	f7ef fe89 	bl	8002c64 <HAL_GPIO_Init>

	/*Configure GPIO pin : BOOT1_Pin */
	GPIO_InitStruct.Pin = BOOT1_Pin;
 8012f52:	2304      	movs	r3, #4
 8012f54:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8012f56:	2300      	movs	r3, #0
 8012f58:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012f5a:	2300      	movs	r3, #0
 8012f5c:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8012f5e:	f107 031c 	add.w	r3, r7, #28
 8012f62:	4619      	mov	r1, r3
 8012f64:	484c      	ldr	r0, [pc, #304]	; (8013098 <MX_GPIO_Init+0x288>)
 8012f66:	f7ef fe7d 	bl	8002c64 <HAL_GPIO_Init>

	/*Configure GPIO pin : FINGER_IRQ_Pin */
	GPIO_InitStruct.Pin = FINGER_IRQ_Pin;
 8012f6a:	2380      	movs	r3, #128	; 0x80
 8012f6c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8012f6e:	4b4e      	ldr	r3, [pc, #312]	; (80130a8 <MX_GPIO_Init+0x298>)
 8012f70:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012f72:	2300      	movs	r3, #0
 8012f74:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(FINGER_IRQ_GPIO_Port, &GPIO_InitStruct);
 8012f76:	f107 031c 	add.w	r3, r7, #28
 8012f7a:	4619      	mov	r1, r3
 8012f7c:	4845      	ldr	r0, [pc, #276]	; (8013094 <MX_GPIO_Init+0x284>)
 8012f7e:	f7ef fe71 	bl	8002c64 <HAL_GPIO_Init>

	/*Configure GPIO pin : NRF24_CE_Pin */
	GPIO_InitStruct.Pin = NRF24_CE_Pin;
 8012f82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012f86:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8012f88:	2301      	movs	r3, #1
 8012f8a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012f8c:	2300      	movs	r3, #0
 8012f8e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8012f90:	2302      	movs	r3, #2
 8012f92:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(NRF24_CE_GPIO_Port, &GPIO_InitStruct);
 8012f94:	f107 031c 	add.w	r3, r7, #28
 8012f98:	4619      	mov	r1, r3
 8012f9a:	483e      	ldr	r0, [pc, #248]	; (8013094 <MX_GPIO_Init+0x284>)
 8012f9c:	f7ef fe62 	bl	8002c64 <HAL_GPIO_Init>

	/*Configure GPIO pin : NRF24_IRQ_Pin */
	GPIO_InitStruct.Pin = NRF24_IRQ_Pin;
 8012fa0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012fa4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8012fa6:	4b41      	ldr	r3, [pc, #260]	; (80130ac <MX_GPIO_Init+0x29c>)
 8012fa8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8012faa:	2301      	movs	r3, #1
 8012fac:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(NRF24_IRQ_GPIO_Port, &GPIO_InitStruct);
 8012fae:	f107 031c 	add.w	r3, r7, #28
 8012fb2:	4619      	mov	r1, r3
 8012fb4:	4837      	ldr	r0, [pc, #220]	; (8013094 <MX_GPIO_Init+0x284>)
 8012fb6:	f7ef fe55 	bl	8002c64 <HAL_GPIO_Init>

	/*Configure GPIO pin : SIMCOM_RST_Pin */
	GPIO_InitStruct.Pin = SIMCOM_RST_Pin;
 8012fba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8012fbe:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8012fc0:	2301      	movs	r3, #1
 8012fc2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012fc4:	2300      	movs	r3, #0
 8012fc6:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012fc8:	2300      	movs	r3, #0
 8012fca:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(SIMCOM_RST_GPIO_Port, &GPIO_InitStruct);
 8012fcc:	f107 031c 	add.w	r3, r7, #28
 8012fd0:	4619      	mov	r1, r3
 8012fd2:	4831      	ldr	r0, [pc, #196]	; (8013098 <MX_GPIO_Init+0x288>)
 8012fd4:	f7ef fe46 	bl	8002c64 <HAL_GPIO_Init>

	/*Configure GPIO pins : SIMCOM_PWR_Pin LD4_Pin LD3_Pin LD5_Pin
	 LD6_Pin Audio_RST_Pin */
	GPIO_InitStruct.Pin = SIMCOM_PWR_Pin | LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin;
 8012fd8:	f24f 4310 	movw	r3, #62480	; 0xf410
 8012fdc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8012fde:	2301      	movs	r3, #1
 8012fe0:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012fe2:	2300      	movs	r3, #0
 8012fe4:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012fe6:	2300      	movs	r3, #0
 8012fe8:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8012fea:	f107 031c 	add.w	r3, r7, #28
 8012fee:	4619      	mov	r1, r3
 8012ff0:	482a      	ldr	r0, [pc, #168]	; (801309c <MX_GPIO_Init+0x28c>)
 8012ff2:	f7ef fe37 	bl	8002c64 <HAL_GPIO_Init>

	/*Configure GPIO pin : NRF24_CSN_Pin */
	GPIO_InitStruct.Pin = NRF24_CSN_Pin;
 8012ff6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012ffa:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8012ffc:	2301      	movs	r3, #1
 8012ffe:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013000:	2300      	movs	r3, #0
 8013002:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8013004:	2302      	movs	r3, #2
 8013006:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(NRF24_CSN_GPIO_Port, &GPIO_InitStruct);
 8013008:	f107 031c 	add.w	r3, r7, #28
 801300c:	4619      	mov	r1, r3
 801300e:	4824      	ldr	r0, [pc, #144]	; (80130a0 <MX_GPIO_Init+0x290>)
 8013010:	f7ef fe28 	bl	8002c64 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8013014:	2200      	movs	r2, #0
 8013016:	2105      	movs	r1, #5
 8013018:	2006      	movs	r0, #6
 801301a:	f7ee ff3f 	bl	8001e9c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 801301e:	2006      	movs	r0, #6
 8013020:	f7ee ff58 	bl	8001ed4 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8013024:	2200      	movs	r2, #0
 8013026:	2105      	movs	r1, #5
 8013028:	2007      	movs	r0, #7
 801302a:	f7ee ff37 	bl	8001e9c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 801302e:	2007      	movs	r0, #7
 8013030:	f7ee ff50 	bl	8001ed4 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8013034:	2200      	movs	r2, #0
 8013036:	2105      	movs	r1, #5
 8013038:	2008      	movs	r0, #8
 801303a:	f7ee ff2f 	bl	8001e9c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 801303e:	2008      	movs	r0, #8
 8013040:	f7ee ff48 	bl	8001ed4 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8013044:	2200      	movs	r2, #0
 8013046:	2105      	movs	r1, #5
 8013048:	2009      	movs	r0, #9
 801304a:	f7ee ff27 	bl	8001e9c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 801304e:	2009      	movs	r0, #9
 8013050:	f7ee ff40 	bl	8001ed4 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8013054:	2200      	movs	r2, #0
 8013056:	2105      	movs	r1, #5
 8013058:	200a      	movs	r0, #10
 801305a:	f7ee ff1f 	bl	8001e9c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 801305e:	200a      	movs	r0, #10
 8013060:	f7ee ff38 	bl	8001ed4 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8013064:	2200      	movs	r2, #0
 8013066:	2105      	movs	r1, #5
 8013068:	2017      	movs	r0, #23
 801306a:	f7ee ff17 	bl	8001e9c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 801306e:	2017      	movs	r0, #23
 8013070:	f7ee ff30 	bl	8001ed4 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8013074:	2200      	movs	r2, #0
 8013076:	2105      	movs	r1, #5
 8013078:	2028      	movs	r0, #40	; 0x28
 801307a:	f7ee ff0f 	bl	8001e9c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 801307e:	2028      	movs	r0, #40	; 0x28
 8013080:	f7ee ff28 	bl	8001ed4 <HAL_NVIC_EnableIRQ>

}
 8013084:	bf00      	nop
 8013086:	3730      	adds	r7, #48	; 0x30
 8013088:	46bd      	mov	sp, r7
 801308a:	bd80      	pop	{r7, pc}
 801308c:	40023800 	.word	0x40023800
 8013090:	40020800 	.word	0x40020800
 8013094:	40021000 	.word	0x40021000
 8013098:	40020400 	.word	0x40020400
 801309c:	40020c00 	.word	0x40020c00
 80130a0:	40020000 	.word	0x40020000
 80130a4:	10310000 	.word	0x10310000
 80130a8:	10110000 	.word	0x10110000
 80130ac:	10210000 	.word	0x10210000

080130b0 <vApplicationIdleHook>:

/* USER CODE BEGIN 4 */
void vApplicationIdleHook(void) {
 80130b0:	b480      	push	{r7}
 80130b2:	af00      	add	r7, sp, #0
	// nothing yet to do
}
 80130b4:	bf00      	nop
 80130b6:	46bd      	mov	sp, r7
 80130b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130bc:	4770      	bx	lr
	...

080130c0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80130c0:	b580      	push	{r7, lr}
 80130c2:	b086      	sub	sp, #24
 80130c4:	af02      	add	r7, sp, #8
 80130c6:	4603      	mov	r3, r0
 80130c8:	80fb      	strh	r3, [r7, #6]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80130ca:	2300      	movs	r3, #0
 80130cc:	60fb      	str	r3, [r7, #12]
	extern nrf24l01 nrf;

	switch (GPIO_Pin) {
 80130ce:	88fb      	ldrh	r3, [r7, #6]
 80130d0:	2b80      	cmp	r3, #128	; 0x80
 80130d2:	d006      	beq.n	80130e2 <HAL_GPIO_EXTI_Callback+0x22>
 80130d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80130d8:	d10e      	bne.n	80130f8 <HAL_GPIO_EXTI_Callback+0x38>
		case NRF24_IRQ_Pin:
			nrf_irq_handler(&nrf);
 80130da:	4814      	ldr	r0, [pc, #80]	; (801312c <HAL_GPIO_EXTI_Callback+0x6c>)
 80130dc:	f7fd f916 	bl	801030c <nrf_irq_handler>
			break;
 80130e0:	e015      	b.n	801310e <HAL_GPIO_EXTI_Callback+0x4e>
		case FINGER_IRQ_Pin:
			xTaskNotifyFromISR(FingerTaskHandle, EVENT_FINGER_PLACED, eSetBits, &xHigherPriorityTaskWoken);
 80130e2:	4b13      	ldr	r3, [pc, #76]	; (8013130 <HAL_GPIO_EXTI_Callback+0x70>)
 80130e4:	6818      	ldr	r0, [r3, #0]
 80130e6:	f107 030c 	add.w	r3, r7, #12
 80130ea:	9300      	str	r3, [sp, #0]
 80130ec:	2300      	movs	r3, #0
 80130ee:	2201      	movs	r2, #1
 80130f0:	2101      	movs	r1, #1
 80130f2:	f7f7 ffa9 	bl	800b048 <xTaskGenericNotifyFromISR>
			break;
 80130f6:	e00a      	b.n	801310e <HAL_GPIO_EXTI_Callback+0x4e>
		default:
			xTaskNotifyFromISR(SwitchTaskHandle, (uint32_t ) GPIO_Pin, eSetBits, &xHigherPriorityTaskWoken);
 80130f8:	4b0e      	ldr	r3, [pc, #56]	; (8013134 <HAL_GPIO_EXTI_Callback+0x74>)
 80130fa:	6818      	ldr	r0, [r3, #0]
 80130fc:	88f9      	ldrh	r1, [r7, #6]
 80130fe:	f107 030c 	add.w	r3, r7, #12
 8013102:	9300      	str	r3, [sp, #0]
 8013104:	2300      	movs	r3, #0
 8013106:	2201      	movs	r2, #1
 8013108:	f7f7 ff9e 	bl	800b048 <xTaskGenericNotifyFromISR>
			break;
 801310c:	bf00      	nop
	}

	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 801310e:	68fb      	ldr	r3, [r7, #12]
 8013110:	2b00      	cmp	r3, #0
 8013112:	d007      	beq.n	8013124 <HAL_GPIO_EXTI_Callback+0x64>
 8013114:	4b08      	ldr	r3, [pc, #32]	; (8013138 <HAL_GPIO_EXTI_Callback+0x78>)
 8013116:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801311a:	601a      	str	r2, [r3, #0]
 801311c:	f3bf 8f4f 	dsb	sy
 8013120:	f3bf 8f6f 	isb	sy
}
 8013124:	bf00      	nop
 8013126:	3710      	adds	r7, #16
 8013128:	46bd      	mov	sp, r7
 801312a:	bd80      	pop	{r7, pc}
 801312c:	20007bec 	.word	0x20007bec
 8013130:	20008774 	.word	0x20008774
 8013134:	200088ac 	.word	0x200088ac
 8013138:	e000ed04 	.word	0xe000ed04

0801313c <StartIotTask>:
 * @brief  Function implementing the iotTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartIotTask */
void StartIotTask(void const * argument) {
 801313c:	b580      	push	{r7, lr}
 801313e:	b084      	sub	sp, #16
 8013140:	af00      	add	r7, sp, #0
 8013142:	6078      	str	r0, [r7, #4]

	/* USER CODE BEGIN 5 */
	uint32_t ulNotifiedValue;
	// Start simcom module
	SIMCOM_DMA_Init();
 8013144:	f7f9 fd8a 	bl	800cc5c <SIMCOM_DMA_Init>
	Simcom_Init(0);
 8013148:	2000      	movs	r0, #0
 801314a:	f7fe fb4d 	bl	80117e8 <Simcom_Init>
	/* Infinite loop */
	for (;;) {
		// get event data
		xTaskNotifyWait(0x00, ULONG_MAX, &ulNotifiedValue, portMAX_DELAY);
 801314e:	f107 020c 	add.w	r2, r7, #12
 8013152:	f04f 33ff 	mov.w	r3, #4294967295
 8013156:	f04f 31ff 	mov.w	r1, #4294967295
 801315a:	2000      	movs	r0, #0
 801315c:	f7f7 fe7a 	bl	800ae54 <xTaskNotifyWait>

		// check every event
		if (ulNotifiedValue & EVENT_IOT_SEND_REPORT) {
 8013160:	68fb      	ldr	r3, [r7, #12]
 8013162:	f003 0301 	and.w	r3, r3, #1
 8013166:	2b00      	cmp	r3, #0
 8013168:	d0f1      	beq.n	801314e <StartIotTask+0x12>
			// Send payload
			if (!Simcom_Send_Payload()) {
 801316a:	f7fe fcbd 	bl	8011ae8 <Simcom_Send_Payload>
 801316e:	4603      	mov	r3, r0
 8013170:	2b00      	cmp	r3, #0
 8013172:	d1ec      	bne.n	801314e <StartIotTask+0x12>
				// If signal lost, force restart directly
				if (!Simcom_Signal_Locked(1)) {
 8013174:	2001      	movs	r0, #1
 8013176:	f7fe fc6d 	bl	8011a54 <Simcom_Signal_Locked>
 801317a:	4603      	mov	r3, r0
 801317c:	2b00      	cmp	r3, #0
 801317e:	d1e6      	bne.n	801314e <StartIotTask+0x12>
					// FIXME remove my warning
					//					WaveBeepPlay(BEEP_FREQ_2000_HZ, 5000);
					BSP_Led_Disco(5000);
 8013180:	f241 3088 	movw	r0, #5000	; 0x1388
 8013184:	f7fa fafc 	bl	800d780 <BSP_Led_Disco>
					// restart module
					Simcom_Init(0);
 8013188:	2000      	movs	r0, #0
 801318a:	f7fe fb2d 	bl	80117e8 <Simcom_Init>
		xTaskNotifyWait(0x00, ULONG_MAX, &ulNotifiedValue, portMAX_DELAY);
 801318e:	e7de      	b.n	801314e <StartIotTask+0x12>

08013190 <StartGyroTask>:
 * @brief Function implementing the gyroTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartGyroTask */
void StartGyroTask(void const * argument) {
 8013190:	b5b0      	push	{r4, r5, r7, lr}
 8013192:	b098      	sub	sp, #96	; 0x60
 8013194:	af02      	add	r7, sp, #8
 8013196:	61f8      	str	r0, [r7, #28]
	/* USER CODE BEGIN StartGyroTask */
	mems_t mems_calibration;
	mems_decision_t mems_decision;
	SD_MPU6050 mpu;
	/* MPU6050 Initialization*/
	MEMS_Init(&hi2c3, &mpu);
 8013198:	f107 0320 	add.w	r3, r7, #32
 801319c:	4619      	mov	r1, r3
 801319e:	4826      	ldr	r0, [pc, #152]	; (8013238 <StartGyroTask+0xa8>)
 80131a0:	f7fb fd1a 	bl	800ebd8 <MEMS_Init>
	// Set calibrator
	mems_calibration = MEMS_Average(&hi2c3, &mpu, NULL, 500);
 80131a4:	4638      	mov	r0, r7
 80131a6:	f107 0220 	add.w	r2, r7, #32
 80131aa:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80131ae:	9300      	str	r3, [sp, #0]
 80131b0:	2300      	movs	r3, #0
 80131b2:	4921      	ldr	r1, [pc, #132]	; (8013238 <StartGyroTask+0xa8>)
 80131b4:	f7fb fd42 	bl	800ec3c <MEMS_Average>
 80131b8:	f107 0440 	add.w	r4, r7, #64	; 0x40
 80131bc:	463d      	mov	r5, r7
 80131be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80131c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80131c2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80131c6:	e884 0003 	stmia.w	r4, {r0, r1}
	// Give success indicator
	WaveBeepPlay(BEEP_FREQ_2000_HZ, 50);
 80131ca:	2132      	movs	r1, #50	; 0x32
 80131cc:	200e      	movs	r0, #14
 80131ce:	f000 fec9 	bl	8013f64 <WaveBeepPlay>
	/* Infinite loop */
	for (;;) {
		// Read all accelerometer, gyroscope (average)
		mems_decision = MEMS_Decision(&hi2c3, &mpu, &mems_calibration, 25);
 80131d2:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80131d6:	f107 0120 	add.w	r1, r7, #32
 80131da:	2319      	movs	r3, #25
 80131dc:	4816      	ldr	r0, [pc, #88]	; (8013238 <StartGyroTask+0xa8>)
 80131de:	f7fb fdc7 	bl	800ed70 <MEMS_Decision>
 80131e2:	4603      	mov	r3, r0
 80131e4:	87bb      	strh	r3, [r7, #60]	; 0x3c
		// Check accelerometer, happens when impact detected
		if (mems_decision.crash) {
 80131e6:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80131ea:	2b00      	cmp	r3, #0
 80131ec:	d006      	beq.n	80131fc <StartGyroTask+0x6c>
			xTaskNotify(ReporterTaskHandle, EVENT_REPORTER_CRASH, eSetBits);
 80131ee:	4b13      	ldr	r3, [pc, #76]	; (801323c <StartGyroTask+0xac>)
 80131f0:	6818      	ldr	r0, [r3, #0]
 80131f2:	2300      	movs	r3, #0
 80131f4:	2201      	movs	r2, #1
 80131f6:	2101      	movs	r1, #1
 80131f8:	f7f7 fe86 	bl	800af08 <xTaskGenericNotify>
		}
		// Check gyroscope, happens when fall detected
		if (mems_decision.fall) {
 80131fc:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8013200:	2b00      	cmp	r3, #0
 8013202:	d00b      	beq.n	801321c <StartGyroTask+0x8c>
			xTaskNotify(ReporterTaskHandle, EVENT_REPORTER_FALL, eSetBits);
 8013204:	4b0d      	ldr	r3, [pc, #52]	; (801323c <StartGyroTask+0xac>)
 8013206:	6818      	ldr	r0, [r3, #0]
 8013208:	2300      	movs	r3, #0
 801320a:	2201      	movs	r2, #1
 801320c:	2102      	movs	r1, #2
 801320e:	f7f7 fe7b 	bl	800af08 <xTaskGenericNotify>
			WaveBeepPlay(BEEP_FREQ_2000_HZ, 0);
 8013212:	2100      	movs	r1, #0
 8013214:	200e      	movs	r0, #14
 8013216:	f000 fea5 	bl	8013f64 <WaveBeepPlay>
 801321a:	e008      	b.n	801322e <StartGyroTask+0x9e>
		} else {
			xTaskNotify(ReporterTaskHandle, EVENT_REPORTER_FALL_FIXED, eSetBits);
 801321c:	4b07      	ldr	r3, [pc, #28]	; (801323c <StartGyroTask+0xac>)
 801321e:	6818      	ldr	r0, [r3, #0]
 8013220:	2300      	movs	r3, #0
 8013222:	2201      	movs	r2, #1
 8013224:	2104      	movs	r1, #4
 8013226:	f7f7 fe6f 	bl	800af08 <xTaskGenericNotify>
			WaveBeepStop();
 801322a:	f000 fed5 	bl	8013fd8 <WaveBeepStop>
		}
		osDelay(1);
 801322e:	2001      	movs	r0, #1
 8013230:	f7f5 f83b 	bl	80082aa <osDelay>
		mems_decision = MEMS_Decision(&hi2c3, &mpu, &mems_calibration, 25);
 8013234:	e7cd      	b.n	80131d2 <StartGyroTask+0x42>
 8013236:	bf00      	nop
 8013238:	2000861c 	.word	0x2000861c
 801323c:	200087d8 	.word	0x200087d8

08013240 <StartCommandTask>:
 * @brief Function implementing the commandTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartCommandTask */
void StartCommandTask(void const * argument) {
 8013240:	b5b0      	push	{r4, r5, r7, lr}
 8013242:	b0b4      	sub	sp, #208	; 0xd0
 8013244:	af00      	add	r7, sp, #0
 8013246:	6078      	str	r0, [r7, #4]
	uint32_t ulNotifiedValue;
	BaseType_t xResult;
	command_t command;
	char response[100];
	int p;
	uint8_t newCommand = 0;
 8013248:	2300      	movs	r3, #0
 801324a:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
	uint32_t val;
	/* Infinite loop */
	for (;;) {
		// check if command arrived from IOT Task
		xResult = xTaskNotifyWait(0x00, ULONG_MAX, &ulNotifiedValue, 0);
 801324e:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 8013252:	2300      	movs	r3, #0
 8013254:	f04f 31ff 	mov.w	r1, #4294967295
 8013258:	2000      	movs	r0, #0
 801325a:	f7f7 fdfb 	bl	800ae54 <xTaskNotifyWait>
 801325e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
		if (xResult == pdTRUE) {
 8013262:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8013266:	2b01      	cmp	r3, #1
 8013268:	d108      	bne.n	801327c <StartCommandTask+0x3c>
			if ((ulNotifiedValue & EVENT_COMMAND_ARRIVED)) {
 801326a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801326e:	f003 0301 	and.w	r3, r3, #1
 8013272:	2b00      	cmp	r3, #0
 8013274:	d002      	beq.n	801327c <StartCommandTask+0x3c>
				newCommand = 1;
 8013276:	2301      	movs	r3, #1
 8013278:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
			}
		}

		if (Simcom_Check_Command() || newCommand) {
 801327c:	f7fe fca8 	bl	8011bd0 <Simcom_Check_Command>
 8013280:	4603      	mov	r3, r0
 8013282:	2b00      	cmp	r3, #0
 8013284:	d104      	bne.n	8013290 <StartCommandTask+0x50>
 8013286:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 801328a:	2b00      	cmp	r3, #0
 801328c:	f000 815d 	beq.w	801354a <StartCommandTask+0x30a>
			newCommand = 0;
 8013290:	2300      	movs	r3, #0
 8013292:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
			// read the command & execute
			if (Simcom_Get_Command(&command)) {
 8013296:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801329a:	4618      	mov	r0, r3
 801329c:	f7fe fcaa 	bl	8011bf4 <Simcom_Get_Command>
 80132a0:	4603      	mov	r3, r0
 80132a2:	2b00      	cmp	r3, #0
 80132a4:	f000 8151 	beq.w	801354a <StartCommandTask+0x30a>
				// generic command response
				sprintf(response, "%s executed.", command.cmd);
 80132a8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80132ac:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80132b0:	f107 0308 	add.w	r3, r7, #8
 80132b4:	49a7      	ldr	r1, [pc, #668]	; (8013554 <StartCommandTask+0x314>)
 80132b6:	4618      	mov	r0, r3
 80132b8:	f001 ff6a 	bl	8015190 <siprintf>

				// BSP Led configuration
				if (strstr(command.var, "LED") != NULL) {
 80132bc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80132c0:	49a5      	ldr	r1, [pc, #660]	; (8013558 <StartCommandTask+0x318>)
 80132c2:	4618      	mov	r0, r3
 80132c4:	f001 ffc0 	bl	8015248 <strstr>
 80132c8:	4603      	mov	r3, r0
 80132ca:	2b00      	cmp	r3, #0
 80132cc:	d02f      	beq.n	801332e <StartCommandTask+0xee>
					val = atoi(command.val);
 80132ce:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80132d2:	3314      	adds	r3, #20
 80132d4:	4618      	mov	r0, r3
 80132d6:	f001 fefe 	bl	80150d6 <atoi>
 80132da:	4603      	mov	r3, r0
 80132dc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
					if (strcmp(command.var, "LED1") == 0) {
 80132e0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80132e4:	499d      	ldr	r1, [pc, #628]	; (801355c <StartCommandTask+0x31c>)
 80132e6:	4618      	mov	r0, r3
 80132e8:	f7ec ff72 	bl	80001d0 <strcmp>
 80132ec:	4603      	mov	r3, r0
 80132ee:	2b00      	cmp	r3, #0
 80132f0:	d109      	bne.n	8013306 <StartCommandTask+0xc6>
						HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, val);
 80132f2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80132f6:	b2db      	uxtb	r3, r3
 80132f8:	461a      	mov	r2, r3
 80132fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80132fe:	4898      	ldr	r0, [pc, #608]	; (8013560 <StartCommandTask+0x320>)
 8013300:	f7ef ff5c 	bl	80031bc <HAL_GPIO_WritePin>
 8013304:	e114      	b.n	8013530 <StartCommandTask+0x2f0>
					} else if (strcmp(command.var, "LED2") == 0) {
 8013306:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801330a:	4996      	ldr	r1, [pc, #600]	; (8013564 <StartCommandTask+0x324>)
 801330c:	4618      	mov	r0, r3
 801330e:	f7ec ff5f 	bl	80001d0 <strcmp>
 8013312:	4603      	mov	r3, r0
 8013314:	2b00      	cmp	r3, #0
 8013316:	f040 810b 	bne.w	8013530 <StartCommandTask+0x2f0>
						HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, val);
 801331a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801331e:	b2db      	uxtb	r3, r3
 8013320:	461a      	mov	r2, r3
 8013322:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8013326:	488e      	ldr	r0, [pc, #568]	; (8013560 <StartCommandTask+0x320>)
 8013328:	f7ef ff48 	bl	80031bc <HAL_GPIO_WritePin>
 801332c:	e100      	b.n	8013530 <StartCommandTask+0x2f0>
					}
				}

				// RTC configuration
				else if (strcmp(command.var, "RTC") == 0) {
 801332e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8013332:	498d      	ldr	r1, [pc, #564]	; (8013568 <StartCommandTask+0x328>)
 8013334:	4618      	mov	r0, r3
 8013336:	f7ec ff4b 	bl	80001d0 <strcmp>
 801333a:	4603      	mov	r3, r0
 801333c:	2b00      	cmp	r3, #0
 801333e:	d106      	bne.n	801334e <StartCommandTask+0x10e>
					RTC_Write(command.val);
 8013340:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8013344:	3314      	adds	r3, #20
 8013346:	4618      	mov	r0, r3
 8013348:	f7fd ff50 	bl	80111ec <RTC_Write>
 801334c:	e0f0      	b.n	8013530 <StartCommandTask+0x2f0>
				}

				// Odometer configuration
				else if (strcmp(command.var, "ODOM") == 0) {
 801334e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8013352:	4986      	ldr	r1, [pc, #536]	; (801356c <StartCommandTask+0x32c>)
 8013354:	4618      	mov	r0, r3
 8013356:	f7ec ff3b 	bl	80001d0 <strcmp>
 801335a:	4603      	mov	r3, r0
 801335c:	2b00      	cmp	r3, #0
 801335e:	d10d      	bne.n	801337c <StartCommandTask+0x13c>
					val = atoi(command.val);
 8013360:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8013364:	3314      	adds	r3, #20
 8013366:	4618      	mov	r0, r3
 8013368:	f001 feb5 	bl	80150d6 <atoi>
 801336c:	4603      	mov	r3, r0
 801336e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
					Reporter_Set_Odometer(val);
 8013372:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8013376:	f7fd feef 	bl	8011158 <Reporter_Set_Odometer>
 801337a:	e0d9      	b.n	8013530 <StartCommandTask+0x2f0>
				}

				// Information detail
				else if (strcmp(command.var, "INFO") == 0) {
 801337c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8013380:	497b      	ldr	r1, [pc, #492]	; (8013570 <StartCommandTask+0x330>)
 8013382:	4618      	mov	r0, r3
 8013384:	f7ec ff24 	bl	80001d0 <strcmp>
 8013388:	4603      	mov	r3, r0
 801338a:	2b00      	cmp	r3, #0
 801338c:	d10b      	bne.n	80133a6 <StartCommandTask+0x166>
					sprintf(response, "HUB v.1.0\nGEN Indonesia @ 2019\n");
 801338e:	f107 0308 	add.w	r3, r7, #8
 8013392:	4a78      	ldr	r2, [pc, #480]	; (8013574 <StartCommandTask+0x334>)
 8013394:	461c      	mov	r4, r3
 8013396:	4615      	mov	r5, r2
 8013398:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801339a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801339c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80133a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80133a4:	e0c4      	b.n	8013530 <StartCommandTask+0x2f0>
				}

				// Audio configuration
				else if (strstr(command.var, "AUDIO_") != NULL) {
 80133a6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80133aa:	4973      	ldr	r1, [pc, #460]	; (8013578 <StartCommandTask+0x338>)
 80133ac:	4618      	mov	r0, r3
 80133ae:	f001 ff4b 	bl	8015248 <strstr>
 80133b2:	4603      	mov	r3, r0
 80133b4:	2b00      	cmp	r3, #0
 80133b6:	d04b      	beq.n	8013450 <StartCommandTask+0x210>
					if (strcmp(command.var, "AUDIO_BEEP") == 0) {
 80133b8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80133bc:	496f      	ldr	r1, [pc, #444]	; (801357c <StartCommandTask+0x33c>)
 80133be:	4618      	mov	r0, r3
 80133c0:	f7ec ff06 	bl	80001d0 <strcmp>
 80133c4:	4603      	mov	r3, r0
 80133c6:	2b00      	cmp	r3, #0
 80133c8:	d107      	bne.n	80133da <StartCommandTask+0x19a>
						xTaskNotify(AudioTaskHandle, EVENT_AUDIO_BEEP, eSetBits);
 80133ca:	4b6d      	ldr	r3, [pc, #436]	; (8013580 <StartCommandTask+0x340>)
 80133cc:	6818      	ldr	r0, [r3, #0]
 80133ce:	2300      	movs	r3, #0
 80133d0:	2201      	movs	r2, #1
 80133d2:	2101      	movs	r1, #1
 80133d4:	f7f7 fd98 	bl	800af08 <xTaskGenericNotify>
 80133d8:	e0aa      	b.n	8013530 <StartCommandTask+0x2f0>
					}

					else {
						val = atoi(command.val);
 80133da:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80133de:	3314      	adds	r3, #20
 80133e0:	4618      	mov	r0, r3
 80133e2:	f001 fe78 	bl	80150d6 <atoi>
 80133e6:	4603      	mov	r3, r0
 80133e8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

						if (strcmp(command.var, "AUDIO_MUTE") == 0) {
 80133ec:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80133f0:	4964      	ldr	r1, [pc, #400]	; (8013584 <StartCommandTask+0x344>)
 80133f2:	4618      	mov	r0, r3
 80133f4:	f7ec feec 	bl	80001d0 <strcmp>
 80133f8:	4603      	mov	r3, r0
 80133fa:	2b00      	cmp	r3, #0
 80133fc:	d113      	bne.n	8013426 <StartCommandTask+0x1e6>
							if (val) {
 80133fe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8013402:	2b00      	cmp	r3, #0
 8013404:	d007      	beq.n	8013416 <StartCommandTask+0x1d6>
								xTaskNotify(AudioTaskHandle, EVENT_AUDIO_MUTE_ON, eSetBits);
 8013406:	4b5e      	ldr	r3, [pc, #376]	; (8013580 <StartCommandTask+0x340>)
 8013408:	6818      	ldr	r0, [r3, #0]
 801340a:	2300      	movs	r3, #0
 801340c:	2201      	movs	r2, #1
 801340e:	2102      	movs	r1, #2
 8013410:	f7f7 fd7a 	bl	800af08 <xTaskGenericNotify>
 8013414:	e08c      	b.n	8013530 <StartCommandTask+0x2f0>
							} else {
								xTaskNotify(AudioTaskHandle, EVENT_AUDIO_MUTE_OFF, eSetBits);
 8013416:	4b5a      	ldr	r3, [pc, #360]	; (8013580 <StartCommandTask+0x340>)
 8013418:	6818      	ldr	r0, [r3, #0]
 801341a:	2300      	movs	r3, #0
 801341c:	2201      	movs	r2, #1
 801341e:	2104      	movs	r1, #4
 8013420:	f7f7 fd72 	bl	800af08 <xTaskGenericNotify>
 8013424:	e084      	b.n	8013530 <StartCommandTask+0x2f0>
							}
						}

						else if (strcmp(command.var, "AUDIO_VOL") == 0) {
 8013426:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801342a:	4957      	ldr	r1, [pc, #348]	; (8013588 <StartCommandTask+0x348>)
 801342c:	4618      	mov	r0, r3
 801342e:	f7ec fecf 	bl	80001d0 <strcmp>
 8013432:	4603      	mov	r3, r0
 8013434:	2b00      	cmp	r3, #0
 8013436:	d17b      	bne.n	8013530 <StartCommandTask+0x2f0>
							osMessagePut(AudioVolQueueHandle, (uint8_t) val, osWaitForever);
 8013438:	4b54      	ldr	r3, [pc, #336]	; (801358c <StartCommandTask+0x34c>)
 801343a:	681b      	ldr	r3, [r3, #0]
 801343c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8013440:	b2d2      	uxtb	r2, r2
 8013442:	4611      	mov	r1, r2
 8013444:	f04f 32ff 	mov.w	r2, #4294967295
 8013448:	4618      	mov	r0, r3
 801344a:	f7f5 f983 	bl	8008754 <osMessagePut>
 801344e:	e06f      	b.n	8013530 <StartCommandTask+0x2f0>
					}

				}

				// Finger print configuration
				else if (strstr(command.var, "FINGER_") != NULL) {
 8013450:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8013454:	494e      	ldr	r1, [pc, #312]	; (8013590 <StartCommandTask+0x350>)
 8013456:	4618      	mov	r0, r3
 8013458:	f001 fef6 	bl	8015248 <strstr>
 801345c:	4603      	mov	r3, r0
 801345e:	2b00      	cmp	r3, #0
 8013460:	d05c      	beq.n	801351c <StartCommandTask+0x2dc>
					val = atoi(command.val);
 8013462:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8013466:	3314      	adds	r3, #20
 8013468:	4618      	mov	r0, r3
 801346a:	f001 fe34 	bl	80150d6 <atoi>
 801346e:	4603      	mov	r3, r0
 8013470:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

					if (strcmp(command.var, "FINGER_ADD") == 0) {
 8013474:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8013478:	4946      	ldr	r1, [pc, #280]	; (8013594 <StartCommandTask+0x354>)
 801347a:	4618      	mov	r0, r3
 801347c:	f7ec fea8 	bl	80001d0 <strcmp>
 8013480:	4603      	mov	r3, r0
 8013482:	2b00      	cmp	r3, #0
 8013484:	d109      	bne.n	801349a <StartCommandTask+0x25a>
						p = Finger_Enroll(val);
 8013486:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801348a:	b2db      	uxtb	r3, r3
 801348c:	4618      	mov	r0, r3
 801348e:	f7fa fe6b 	bl	800e168 <Finger_Enroll>
 8013492:	4603      	mov	r3, r0
 8013494:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8013498:	e020      	b.n	80134dc <StartCommandTask+0x29c>
					}

					else if (strcmp(command.var, "FINGER_DELETE") == 0) {
 801349a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801349e:	493e      	ldr	r1, [pc, #248]	; (8013598 <StartCommandTask+0x358>)
 80134a0:	4618      	mov	r0, r3
 80134a2:	f7ec fe95 	bl	80001d0 <strcmp>
 80134a6:	4603      	mov	r3, r0
 80134a8:	2b00      	cmp	r3, #0
 80134aa:	d109      	bne.n	80134c0 <StartCommandTask+0x280>
						p = Finger_Delete_ID(val);
 80134ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80134b0:	b2db      	uxtb	r3, r3
 80134b2:	4618      	mov	r0, r3
 80134b4:	f7fb f84c 	bl	800e550 <Finger_Delete_ID>
 80134b8:	4603      	mov	r3, r0
 80134ba:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80134be:	e00d      	b.n	80134dc <StartCommandTask+0x29c>
					}

					else if (strcmp(command.var, "FINGER_RESET") == 0) {
 80134c0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80134c4:	4935      	ldr	r1, [pc, #212]	; (801359c <StartCommandTask+0x35c>)
 80134c6:	4618      	mov	r0, r3
 80134c8:	f7ec fe82 	bl	80001d0 <strcmp>
 80134cc:	4603      	mov	r3, r0
 80134ce:	2b00      	cmp	r3, #0
 80134d0:	d104      	bne.n	80134dc <StartCommandTask+0x29c>
						p = Finger_Empty_Database();
 80134d2:	f7fb f885 	bl	800e5e0 <Finger_Empty_Database>
 80134d6:	4603      	mov	r3, r0
 80134d8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
					}

					sprintf(response, "%s", command.cmd);
 80134dc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80134e0:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80134e4:	f107 0308 	add.w	r3, r7, #8
 80134e8:	4611      	mov	r1, r2
 80134ea:	4618      	mov	r0, r3
 80134ec:	f001 fe7d 	bl	80151ea <strcpy>
					if (p == FINGERPRINT_OK) {
 80134f0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80134f4:	2b00      	cmp	r3, #0
 80134f6:	d108      	bne.n	801350a <StartCommandTask+0x2ca>
						sprintf(response, "%s OK", response);
 80134f8:	f107 0208 	add.w	r2, r7, #8
 80134fc:	f107 0308 	add.w	r3, r7, #8
 8013500:	4927      	ldr	r1, [pc, #156]	; (80135a0 <StartCommandTask+0x360>)
 8013502:	4618      	mov	r0, r3
 8013504:	f001 fe44 	bl	8015190 <siprintf>
 8013508:	e012      	b.n	8013530 <StartCommandTask+0x2f0>
					} else {
						sprintf(response, "%s ERROR", response);
 801350a:	f107 0208 	add.w	r2, r7, #8
 801350e:	f107 0308 	add.w	r3, r7, #8
 8013512:	4924      	ldr	r1, [pc, #144]	; (80135a4 <StartCommandTask+0x364>)
 8013514:	4618      	mov	r0, r3
 8013516:	f001 fe3b 	bl	8015190 <siprintf>
 801351a:	e009      	b.n	8013530 <StartCommandTask+0x2f0>
					}
				}

				else {
					sprintf(response, "%s not found.", command.cmd);
 801351c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8013520:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8013524:	f107 0308 	add.w	r3, r7, #8
 8013528:	491f      	ldr	r1, [pc, #124]	; (80135a8 <StartCommandTask+0x368>)
 801352a:	4618      	mov	r0, r3
 801352c:	f001 fe30 	bl	8015190 <siprintf>
				}

				// send confirmation
				Simcom_To_Server(response, strlen(response));
 8013530:	f107 0308 	add.w	r3, r7, #8
 8013534:	4618      	mov	r0, r3
 8013536:	f7ec fe55 	bl	80001e4 <strlen>
 801353a:	4603      	mov	r3, r0
 801353c:	b29a      	uxth	r2, r3
 801353e:	f107 0308 	add.w	r3, r7, #8
 8013542:	4611      	mov	r1, r2
 8013544:	4618      	mov	r0, r3
 8013546:	f7fe fae1 	bl	8011b0c <Simcom_To_Server>
			}
		}
		osDelay(100);
 801354a:	2064      	movs	r0, #100	; 0x64
 801354c:	f7f4 fead 	bl	80082aa <osDelay>
		xResult = xTaskNotifyWait(0x00, ULONG_MAX, &ulNotifiedValue, 0);
 8013550:	e67d      	b.n	801324e <StartCommandTask+0xe>
 8013552:	bf00      	nop
 8013554:	08019128 	.word	0x08019128
 8013558:	08019138 	.word	0x08019138
 801355c:	0801913c 	.word	0x0801913c
 8013560:	40020c00 	.word	0x40020c00
 8013564:	08019144 	.word	0x08019144
 8013568:	0801914c 	.word	0x0801914c
 801356c:	08019150 	.word	0x08019150
 8013570:	08019158 	.word	0x08019158
 8013574:	08019160 	.word	0x08019160
 8013578:	08019180 	.word	0x08019180
 801357c:	08019188 	.word	0x08019188
 8013580:	20008968 	.word	0x20008968
 8013584:	08019194 	.word	0x08019194
 8013588:	080191a0 	.word	0x080191a0
 801358c:	2000891c 	.word	0x2000891c
 8013590:	080191ac 	.word	0x080191ac
 8013594:	080191b4 	.word	0x080191b4
 8013598:	080191c0 	.word	0x080191c0
 801359c:	080191d0 	.word	0x080191d0
 80135a0:	080191e0 	.word	0x080191e0
 80135a4:	080191e8 	.word	0x080191e8
 80135a8:	080191f4 	.word	0x080191f4

080135ac <StartGpsTask>:
 * @brief Function implementing the GpsTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartGpsTask */
void StartGpsTask(void const * argument) {
 80135ac:	b580      	push	{r7, lr}
 80135ae:	b086      	sub	sp, #24
 80135b0:	af00      	add	r7, sp, #0
 80135b2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartGpsTask */
	extern char UBLOX_UART_RX_Buffer[UBLOX_UART_RX_BUFFER_SIZE];
	const TickType_t xDelay_ms = pdMS_TO_TICKS(REPORT_INTERVAL*1000);
 80135b4:	f241 3388 	movw	r3, #5000	; 0x1388
 80135b8:	617b      	str	r3, [r7, #20]
	TickType_t xLastWakeTime;
	gps_t * hgps;

	// Start GPS module
	UBLOX_DMA_Init();
 80135ba:	f7f9 fe19 	bl	800d1f0 <UBLOX_DMA_Init>
	// Allocate memory once, and never free it
	hgps = osMailAlloc(GpsMailHandle, osWaitForever);
 80135be:	4b12      	ldr	r3, [pc, #72]	; (8013608 <StartGpsTask+0x5c>)
 80135c0:	681b      	ldr	r3, [r3, #0]
 80135c2:	f04f 31ff 	mov.w	r1, #4294967295
 80135c6:	4618      	mov	r0, r3
 80135c8:	f7f5 f9d0 	bl	800896c <osMailAlloc>
 80135cc:	6138      	str	r0, [r7, #16]
	Ublox_Init(hgps);
 80135ce:	6938      	ldr	r0, [r7, #16]
 80135d0:	f7fd feac 	bl	801132c <Ublox_Init>
	/* Infinite loop */
	xLastWakeTime = xTaskGetTickCount();
 80135d4:	f7f6 feea 	bl	800a3ac <xTaskGetTickCount>
 80135d8:	4603      	mov	r3, r0
 80135da:	60fb      	str	r3, [r7, #12]
	for (;;) {
		// get GPS info
		gps_process(hgps, UBLOX_UART_RX_Buffer, strlen(UBLOX_UART_RX_Buffer));
 80135dc:	480b      	ldr	r0, [pc, #44]	; (801360c <StartGpsTask+0x60>)
 80135de:	f7ec fe01 	bl	80001e4 <strlen>
 80135e2:	4603      	mov	r3, r0
 80135e4:	461a      	mov	r2, r3
 80135e6:	4909      	ldr	r1, [pc, #36]	; (801360c <StartGpsTask+0x60>)
 80135e8:	6938      	ldr	r0, [r7, #16]
 80135ea:	f7fc faca 	bl	800fb82 <gps_process>
		// hand-over data to IOT_Task
		osMailPut(GpsMailHandle, hgps);
 80135ee:	4b06      	ldr	r3, [pc, #24]	; (8013608 <StartGpsTask+0x5c>)
 80135f0:	681b      	ldr	r3, [r3, #0]
 80135f2:	6939      	ldr	r1, [r7, #16]
 80135f4:	4618      	mov	r0, r3
 80135f6:	f7f5 f9cf 	bl	8008998 <osMailPut>

		// Report interval in second
		vTaskDelayUntil(&xLastWakeTime, xDelay_ms);
 80135fa:	f107 030c 	add.w	r3, r7, #12
 80135fe:	6979      	ldr	r1, [r7, #20]
 8013600:	4618      	mov	r0, r3
 8013602:	f7f6 fd17 	bl	800a034 <vTaskDelayUntil>
		gps_process(hgps, UBLOX_UART_RX_Buffer, strlen(UBLOX_UART_RX_Buffer));
 8013606:	e7e9      	b.n	80135dc <StartGpsTask+0x30>
 8013608:	20008558 	.word	0x20008558
 801360c:	2000774c 	.word	0x2000774c

08013610 <StartFingerTask>:
 * @brief Function implementing the FingerTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartFingerTask */
void StartFingerTask(void const * argument) {
 8013610:	b580      	push	{r7, lr}
 8013612:	b084      	sub	sp, #16
 8013614:	af00      	add	r7, sp, #0
 8013616:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartFingerTask */
	uint32_t ulNotifiedValue;
	// Initialization
	FINGER_DMA_Init();
 8013618:	f7f9 f874 	bl	800c704 <FINGER_DMA_Init>
	Finger_Init();
 801361c:	f7fa fd86 	bl	800e12c <Finger_Init>
	/* Infinite loop */
	for (;;) {
		// check if user put finger
		xTaskNotifyWait(ULONG_MAX, ULONG_MAX, &ulNotifiedValue, portMAX_DELAY);
 8013620:	f107 020c 	add.w	r2, r7, #12
 8013624:	f04f 33ff 	mov.w	r3, #4294967295
 8013628:	f04f 31ff 	mov.w	r1, #4294967295
 801362c:	f04f 30ff 	mov.w	r0, #4294967295
 8013630:	f7f7 fc10 	bl	800ae54 <xTaskNotifyWait>
		// proceed event
		if ((ulNotifiedValue & EVENT_FINGER_PLACED)) {
 8013634:	68fb      	ldr	r3, [r7, #12]
 8013636:	f003 0301 	and.w	r3, r3, #1
 801363a:	2b00      	cmp	r3, #0
 801363c:	d00b      	beq.n	8013656 <StartFingerTask+0x46>
			if (Finger_Auth_Fast() > 0) {
 801363e:	f7fa ffe1 	bl	800e604 <Finger_Auth_Fast>
 8013642:	4603      	mov	r3, r0
 8013644:	2b00      	cmp	r3, #0
 8013646:	dd06      	ble.n	8013656 <StartFingerTask+0x46>
				// indicator when finger is registered
				BSP_Led_Write_All(1);
 8013648:	2001      	movs	r0, #1
 801364a:	f7fa f857 	bl	800d6fc <BSP_Led_Write_All>
				osDelay(1000);
 801364e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8013652:	f7f4 fe2a 	bl	80082aa <osDelay>
			}
		}
		BSP_Led_Write_All(0);
 8013656:	2000      	movs	r0, #0
 8013658:	f7fa f850 	bl	800d6fc <BSP_Led_Write_All>
		xTaskNotifyWait(ULONG_MAX, ULONG_MAX, &ulNotifiedValue, portMAX_DELAY);
 801365c:	e7e0      	b.n	8013620 <StartFingerTask+0x10>
	...

08013660 <StartAudioTask>:
 * @brief Function implementing the AudioTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartAudioTask */
void StartAudioTask(void const * argument) {
 8013660:	b580      	push	{r7, lr}
 8013662:	b088      	sub	sp, #32
 8013664:	af00      	add	r7, sp, #0
 8013666:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartAudioTask */
	uint32_t ulNotifiedValue;
	BaseType_t xResult;
	osEvent evt;
	/* Initialize Wave player (Codec, DMA, I2C) */
	WaveInit();
 8013668:	f000 fc34 	bl	8013ed4 <WaveInit>
	// Play wave loop forever, handover to DMA, so CPU is free
	WavePlay();
 801366c:	f000 fc54 	bl	8013f18 <WavePlay>
	/* Infinite loop */
	for (;;) {
		// check if get volume message
		evt = osMessageGet(AudioVolQueueHandle, 0);
 8013670:	4b20      	ldr	r3, [pc, #128]	; (80136f4 <StartAudioTask+0x94>)
 8013672:	6819      	ldr	r1, [r3, #0]
 8013674:	f107 030c 	add.w	r3, r7, #12
 8013678:	2200      	movs	r2, #0
 801367a:	4618      	mov	r0, r3
 801367c:	f7f5 f8aa 	bl	80087d4 <osMessageGet>
		// do this if message arrived
		if (evt.status == osEventMessage) {
 8013680:	68fb      	ldr	r3, [r7, #12]
 8013682:	2b10      	cmp	r3, #16
 8013684:	d104      	bne.n	8013690 <StartAudioTask+0x30>
			BSP_AUDIO_OUT_SetVolume((uint8_t) evt.value.v);
 8013686:	693b      	ldr	r3, [r7, #16]
 8013688:	b2db      	uxtb	r3, r3
 801368a:	4618      	mov	r0, r3
 801368c:	f000 fd4c 	bl	8014128 <BSP_AUDIO_OUT_SetVolume>
		}

		// check if event happen
		xResult = xTaskNotifyWait(0x00, ULONG_MAX, &ulNotifiedValue, 0);
 8013690:	f107 0218 	add.w	r2, r7, #24
 8013694:	2300      	movs	r3, #0
 8013696:	f04f 31ff 	mov.w	r1, #4294967295
 801369a:	2000      	movs	r0, #0
 801369c:	f7f7 fbda 	bl	800ae54 <xTaskNotifyWait>
 80136a0:	61f8      	str	r0, [r7, #28]
		// do this if events occurred
		if (xResult == pdTRUE) {
 80136a2:	69fb      	ldr	r3, [r7, #28]
 80136a4:	2b01      	cmp	r3, #1
 80136a6:	d11f      	bne.n	80136e8 <StartAudioTask+0x88>
			// Beep command
			if ((ulNotifiedValue & EVENT_AUDIO_BEEP)) {
 80136a8:	69bb      	ldr	r3, [r7, #24]
 80136aa:	f003 0301 	and.w	r3, r3, #1
 80136ae:	2b00      	cmp	r3, #0
 80136b0:	d00a      	beq.n	80136c8 <StartAudioTask+0x68>
				// Beep
				WaveBeepPlay(BEEP_FREQ_2000_HZ, 250);
 80136b2:	21fa      	movs	r1, #250	; 0xfa
 80136b4:	200e      	movs	r0, #14
 80136b6:	f000 fc55 	bl	8013f64 <WaveBeepPlay>
				osDelay(250);
 80136ba:	20fa      	movs	r0, #250	; 0xfa
 80136bc:	f7f4 fdf5 	bl	80082aa <osDelay>
				WaveBeepPlay(BEEP_FREQ_2000_HZ, 250);
 80136c0:	21fa      	movs	r1, #250	; 0xfa
 80136c2:	200e      	movs	r0, #14
 80136c4:	f000 fc4e 	bl	8013f64 <WaveBeepPlay>
			}
			// Mute command
			if ((ulNotifiedValue & EVENT_AUDIO_MUTE_ON)) {
 80136c8:	69bb      	ldr	r3, [r7, #24]
 80136ca:	f003 0302 	and.w	r3, r3, #2
 80136ce:	2b00      	cmp	r3, #0
 80136d0:	d002      	beq.n	80136d8 <StartAudioTask+0x78>
				BSP_AUDIO_OUT_SetMute(AUDIO_MUTE_ON);
 80136d2:	2001      	movs	r0, #1
 80136d4:	f000 fd40 	bl	8014158 <BSP_AUDIO_OUT_SetMute>
			}
			if ((ulNotifiedValue & EVENT_AUDIO_MUTE_OFF)) {
 80136d8:	69bb      	ldr	r3, [r7, #24]
 80136da:	f003 0304 	and.w	r3, r3, #4
 80136de:	2b00      	cmp	r3, #0
 80136e0:	d002      	beq.n	80136e8 <StartAudioTask+0x88>
				BSP_AUDIO_OUT_SetMute(AUDIO_MUTE_OFF);
 80136e2:	2000      	movs	r0, #0
 80136e4:	f000 fd38 	bl	8014158 <BSP_AUDIO_OUT_SetMute>
			}
		}

		osDelay(500);
 80136e8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80136ec:	f7f4 fddd 	bl	80082aa <osDelay>
		evt = osMessageGet(AudioVolQueueHandle, 0);
 80136f0:	e7be      	b.n	8013670 <StartAudioTask+0x10>
 80136f2:	bf00      	nop
 80136f4:	2000891c 	.word	0x2000891c

080136f8 <StartKeylessTask>:
 * @brief Function implementing the KeylessTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartKeylessTask */
void StartKeylessTask(void const * argument) {
 80136f8:	b590      	push	{r4, r7, lr}
 80136fa:	b093      	sub	sp, #76	; 0x4c
 80136fc:	af00      	add	r7, sp, #0
 80136fe:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartKeylessTask */
	extern nrf24l01 nrf;
	nrf24l01_config config;

	uint8_t payloadSize32 = 32 / 4;
 8013700:	2308      	movs	r3, #8
 8013702:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t payloadReceived[payloadSize32];
 8013706:	f897 0047 	ldrb.w	r0, [r7, #71]	; 0x47
 801370a:	4603      	mov	r3, r0
 801370c:	3b01      	subs	r3, #1
 801370e:	643b      	str	r3, [r7, #64]	; 0x40
 8013710:	b2c1      	uxtb	r1, r0
 8013712:	f04f 0200 	mov.w	r2, #0
 8013716:	f04f 0300 	mov.w	r3, #0
 801371a:	f04f 0400 	mov.w	r4, #0
 801371e:	0154      	lsls	r4, r2, #5
 8013720:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8013724:	014b      	lsls	r3, r1, #5
 8013726:	b2c1      	uxtb	r1, r0
 8013728:	f04f 0200 	mov.w	r2, #0
 801372c:	f04f 0300 	mov.w	r3, #0
 8013730:	f04f 0400 	mov.w	r4, #0
 8013734:	0154      	lsls	r4, r2, #5
 8013736:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 801373a:	014b      	lsls	r3, r1, #5
 801373c:	4603      	mov	r3, r0
 801373e:	009b      	lsls	r3, r3, #2
 8013740:	3303      	adds	r3, #3
 8013742:	3307      	adds	r3, #7
 8013744:	08db      	lsrs	r3, r3, #3
 8013746:	00db      	lsls	r3, r3, #3
 8013748:	ebad 0d03 	sub.w	sp, sp, r3
 801374c:	466b      	mov	r3, sp
 801374e:	3303      	adds	r3, #3
 8013750:	089b      	lsrs	r3, r3, #2
 8013752:	009b      	lsls	r3, r3, #2
 8013754:	63fb      	str	r3, [r7, #60]	; 0x3c
	//	uint8_t i, packetGood;

	// set configuration
	nrf_set_config(&config, payloadReceived, payloadSize32);
 8013756:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013758:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 801375c:	f107 0308 	add.w	r3, r7, #8
 8013760:	4618      	mov	r0, r3
 8013762:	f7fc fbbf 	bl	800fee4 <nrf_set_config>
	// initialization
	nrf_init(&nrf, &config);
 8013766:	f107 0308 	add.w	r3, r7, #8
 801376a:	4619      	mov	r1, r3
 801376c:	4814      	ldr	r0, [pc, #80]	; (80137c0 <StartKeylessTask+0xc8>)
 801376e:	f7fc fc0f 	bl	800ff90 <nrf_init>
	/* Infinite loop */
	for (;;) {
		SWV_SendStrLn("NRF waiting packet.");
 8013772:	4814      	ldr	r0, [pc, #80]	; (80137c4 <StartKeylessTask+0xcc>)
 8013774:	f7fe fb66 	bl	8011e44 <SWV_SendStrLn>
		// receive packet (blocking)
		nrf_receive_packet(&nrf);
 8013778:	4811      	ldr	r0, [pc, #68]	; (80137c0 <StartKeylessTask+0xc8>)
 801377a:	f7fd fb0e 	bl	8010d9a <nrf_receive_packet>
		//				packetGood = 0;
		//			}
		//		}

		//		if (packetGood) {
		if (payloadReceived[payloadSize32 - 1] == EVENT_KEYLESS_FINDER) {
 801377e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8013782:	1e5a      	subs	r2, r3, #1
 8013784:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013786:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801378a:	2b02      	cmp	r3, #2
 801378c:	d105      	bne.n	801379a <StartKeylessTask+0xa2>
			WaveBeepPlay(BEEP_FREQ_2000_HZ, 500);
 801378e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8013792:	200e      	movs	r0, #14
 8013794:	f000 fbe6 	bl	8013f64 <WaveBeepPlay>
 8013798:	e00c      	b.n	80137b4 <StartKeylessTask+0xbc>
		} else if (payloadReceived[payloadSize32 - 1] == EVENT_KEYLESS_BROADCAST) {
 801379a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801379e:	1e5a      	subs	r2, r3, #1
 80137a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80137a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80137a6:	4a08      	ldr	r2, [pc, #32]	; (80137c8 <StartKeylessTask+0xd0>)
 80137a8:	4293      	cmp	r3, r2
 80137aa:	d103      	bne.n	80137b4 <StartKeylessTask+0xbc>
			WaveBeepPlay(BEEP_FREQ_2000_HZ, 100);
 80137ac:	2164      	movs	r1, #100	; 0x64
 80137ae:	200e      	movs	r0, #14
 80137b0:	f000 fbd8 	bl	8013f64 <WaveBeepPlay>
		}

		// indicator
		BSP_Led_Toggle_All();
 80137b4:	f7f9 ffca 	bl	800d74c <BSP_Led_Toggle_All>
		osDelay(10);
 80137b8:	200a      	movs	r0, #10
 80137ba:	f7f4 fd76 	bl	80082aa <osDelay>
		SWV_SendStrLn("NRF waiting packet.");
 80137be:	e7d8      	b.n	8013772 <StartKeylessTask+0x7a>
 80137c0:	20007bec 	.word	0x20007bec
 80137c4:	08019204 	.word	0x08019204
 80137c8:	12345678 	.word	0x12345678

080137cc <StartReporterTask>:
 * @brief Function implementing the ReporterTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartReporterTask */
void StartReporterTask(void const * argument) {
 80137cc:	b580      	push	{r7, lr}
 80137ce:	f5ad 7d08 	sub.w	sp, sp, #544	; 0x220
 80137d2:	af00      	add	r7, sp, #0
 80137d4:	1d3b      	adds	r3, r7, #4
 80137d6:	6018      	str	r0, [r3, #0]
	/* USER CODE BEGIN StartReporterTask */
	const TickType_t xDelay_ms = pdMS_TO_TICKS(REPORT_INTERVAL*1000);
 80137d8:	f241 3388 	movw	r3, #5000	; 0x1388
 80137dc:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
	osEvent evt;

	char msg[REPORT_MESSAGE_LENGTH];
	report_id_t reportID;
	// reset data to default
	Reporter_Reset();
 80137e0:	f7fd fafa 	bl	8010dd8 <Reporter_Reset>
	/* Infinite loop */
	xLastWakeTime = xTaskGetTickCount();
 80137e4:	f7f6 fde2 	bl	800a3ac <xTaskGetTickCount>
 80137e8:	4603      	mov	r3, r0
 80137ea:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
	for (;;) {
		// reset message & report
		reportID = REPORT_OK;
 80137ee:	2300      	movs	r3, #0
 80137f0:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
		sprintf(msg, "%s", "");
 80137f4:	f107 030c 	add.w	r3, r7, #12
 80137f8:	2200      	movs	r2, #0
 80137fa:	701a      	strb	r2, [r3, #0]

		// get event data
		xResult = xTaskNotifyWait(0x00, ULONG_MAX, &ulNotifiedValue, 0);
 80137fc:	f507 7203 	add.w	r2, r7, #524	; 0x20c
 8013800:	2300      	movs	r3, #0
 8013802:	f04f 31ff 	mov.w	r1, #4294967295
 8013806:	2000      	movs	r0, #0
 8013808:	f7f7 fb24 	bl	800ae54 <xTaskNotifyWait>
 801380c:	f8c7 0214 	str.w	r0, [r7, #532]	; 0x214

		// do this if events occurred
		if (xResult == pdTRUE) {
 8013810:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8013814:	2b01      	cmp	r3, #1
 8013816:	d117      	bne.n	8013848 <StartReporterTask+0x7c>
			// check every event
			if (ulNotifiedValue & EVENT_REPORTER_CRASH) {
 8013818:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 801381c:	f003 0301 	and.w	r3, r3, #1
 8013820:	2b00      	cmp	r3, #0
 8013822:	d002      	beq.n	801382a <StartReporterTask+0x5e>
				reportID = REPORT_BIKE_CRASHED;
 8013824:	2302      	movs	r3, #2
 8013826:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
			}
			if ((ulNotifiedValue & EVENT_REPORTER_FALL) && !(ulNotifiedValue & EVENT_REPORTER_FALL_FIXED)) {
 801382a:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 801382e:	f003 0302 	and.w	r3, r3, #2
 8013832:	2b00      	cmp	r3, #0
 8013834:	d008      	beq.n	8013848 <StartReporterTask+0x7c>
 8013836:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 801383a:	f003 0304 	and.w	r3, r3, #4
 801383e:	2b00      	cmp	r3, #0
 8013840:	d102      	bne.n	8013848 <StartReporterTask+0x7c>
				reportID = REPORT_BIKE_FALLING;
 8013842:	2301      	movs	r3, #1
 8013844:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
			}
		}

		// set report
		Reporter_Set_Report_ID(reportID);
 8013848:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 801384c:	4618      	mov	r0, r3
 801384e:	f7fd fb57 	bl	8010f00 <Reporter_Set_Report_ID>

		// set message
		Reporter_Set_Message(msg);
 8013852:	f107 030c 	add.w	r3, r7, #12
 8013856:	4618      	mov	r0, r3
 8013858:	f7fd fb40 	bl	8010edc <Reporter_Set_Message>

		// get processed gps data
		evt = osMailGet(GpsMailHandle, 0);
 801385c:	4b10      	ldr	r3, [pc, #64]	; (80138a0 <StartReporterTask+0xd4>)
 801385e:	6819      	ldr	r1, [r3, #0]
 8013860:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013864:	2200      	movs	r2, #0
 8013866:	4618      	mov	r0, r3
 8013868:	f7f5 f8d4 	bl	8008a14 <osMailGet>
		// Convert Ublox data to Simcom payload compatible
		if (evt.status == osEventMail) {
 801386c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8013870:	2b20      	cmp	r3, #32
 8013872:	d104      	bne.n	801387e <StartReporterTask+0xb2>
			Reporter_Convert_GPS(evt.value.p);
 8013874:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8013878:	4618      	mov	r0, r3
 801387a:	f7fd fb53 	bl	8010f24 <Reporter_Convert_GPS>
		}

		// Set payload (all data)
		Reporter_Set_Payload();
 801387e:	f7fd fbe3 	bl	8011048 <Reporter_Set_Payload>

		// Report is ready, do what you want
		xTaskNotify(IotTaskHandle, EVENT_IOT_SEND_REPORT, eSetBits);
 8013882:	4b08      	ldr	r3, [pc, #32]	; (80138a4 <StartReporterTask+0xd8>)
 8013884:	6818      	ldr	r0, [r3, #0]
 8013886:	2300      	movs	r3, #0
 8013888:	2201      	movs	r2, #1
 801388a:	2101      	movs	r1, #1
 801388c:	f7f7 fb3c 	bl	800af08 <xTaskGenericNotify>

		// Report interval in second
		vTaskDelayUntil(&xLastWakeTime, xDelay_ms);
 8013890:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8013894:	f8d7 1218 	ldr.w	r1, [r7, #536]	; 0x218
 8013898:	4618      	mov	r0, r3
 801389a:	f7f6 fbcb 	bl	800a034 <vTaskDelayUntil>
		reportID = REPORT_OK;
 801389e:	e7a6      	b.n	80137ee <StartReporterTask+0x22>
 80138a0:	20008558 	.word	0x20008558
 80138a4:	200088b0 	.word	0x200088b0

080138a8 <StartCanRxTask>:
 * @brief Function implementing the CanRxTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartCanRxTask */
void StartCanRxTask(void const * argument) {
 80138a8:	b580      	push	{r7, lr}
 80138aa:	b088      	sub	sp, #32
 80138ac:	af00      	add	r7, sp, #0
 80138ae:	6078      	str	r0, [r7, #4]
	uint8_t i;

	extern uint8_t DB_MCU_Speed;
	/* Infinite loop */
	for (;;) {
		evt = osMailGet(canRxMailHandle, osWaitForever);
 80138b0:	4b2b      	ldr	r3, [pc, #172]	; (8013960 <StartCanRxTask+0xb8>)
 80138b2:	6819      	ldr	r1, [r3, #0]
 80138b4:	f107 030c 	add.w	r3, r7, #12
 80138b8:	f04f 32ff 	mov.w	r2, #4294967295
 80138bc:	4618      	mov	r0, r3
 80138be:	f7f5 f8a9 	bl	8008a14 <osMailGet>
		if (evt.status == osEventMail) {
 80138c2:	68fb      	ldr	r3, [r7, #12]
 80138c4:	2b20      	cmp	r3, #32
 80138c6:	d1f3      	bne.n	80138b0 <StartCanRxTask+0x8>
			RxCan = evt.value.p;
 80138c8:	693b      	ldr	r3, [r7, #16]
 80138ca:	61bb      	str	r3, [r7, #24]

			// handle message
			switch (RxCan->RxHeader.StdId) {
 80138cc:	69bb      	ldr	r3, [r7, #24]
 80138ce:	681b      	ldr	r3, [r3, #0]
 80138d0:	f5b3 6ff4 	cmp.w	r3, #1952	; 0x7a0
 80138d4:	d000      	beq.n	80138d8 <StartCanRxTask+0x30>
					DB_MCU_Speed = ((RxCan->RxData[1] << 8) | (RxCan->RxData[0])) * MCU_SPEED_MAX / MCU_RPM_MAX;
					// set volume
					osMessagePut(AudioVolQueueHandle, DB_MCU_Speed, osWaitForever);
					break;
				default:
					break;
 80138d6:	e01b      	b.n	8013910 <StartCanRxTask+0x68>
					DB_MCU_Speed = ((RxCan->RxData[1] << 8) | (RxCan->RxData[0])) * MCU_SPEED_MAX / MCU_RPM_MAX;
 80138d8:	69bb      	ldr	r3, [r7, #24]
 80138da:	7f5b      	ldrb	r3, [r3, #29]
 80138dc:	021b      	lsls	r3, r3, #8
 80138de:	69ba      	ldr	r2, [r7, #24]
 80138e0:	7f12      	ldrb	r2, [r2, #28]
 80138e2:	4313      	orrs	r3, r2
 80138e4:	22c8      	movs	r2, #200	; 0xc8
 80138e6:	fb02 f303 	mul.w	r3, r2, r3
 80138ea:	4a1e      	ldr	r2, [pc, #120]	; (8013964 <StartCanRxTask+0xbc>)
 80138ec:	fb82 1203 	smull	r1, r2, r2, r3
 80138f0:	1312      	asrs	r2, r2, #12
 80138f2:	17db      	asrs	r3, r3, #31
 80138f4:	1ad3      	subs	r3, r2, r3
 80138f6:	b2da      	uxtb	r2, r3
 80138f8:	4b1b      	ldr	r3, [pc, #108]	; (8013968 <StartCanRxTask+0xc0>)
 80138fa:	701a      	strb	r2, [r3, #0]
					osMessagePut(AudioVolQueueHandle, DB_MCU_Speed, osWaitForever);
 80138fc:	4b1b      	ldr	r3, [pc, #108]	; (801396c <StartCanRxTask+0xc4>)
 80138fe:	6818      	ldr	r0, [r3, #0]
 8013900:	4b19      	ldr	r3, [pc, #100]	; (8013968 <StartCanRxTask+0xc0>)
 8013902:	781b      	ldrb	r3, [r3, #0]
 8013904:	f04f 32ff 	mov.w	r2, #4294967295
 8013908:	4619      	mov	r1, r3
 801390a:	f7f4 ff23 	bl	8008754 <osMessagePut>
					break;
 801390e:	bf00      	nop
			}

			// show this message
			SWV_SendStr("ID: ");
 8013910:	4817      	ldr	r0, [pc, #92]	; (8013970 <StartCanRxTask+0xc8>)
 8013912:	f7fe fa75 	bl	8011e00 <SWV_SendStr>
			SWV_SendHex32(RxCan->RxHeader.StdId);
 8013916:	69bb      	ldr	r3, [r7, #24]
 8013918:	681b      	ldr	r3, [r3, #0]
 801391a:	4618      	mov	r0, r3
 801391c:	f7fe fa3c 	bl	8011d98 <SWV_SendHex32>
			SWV_SendStr(", Data: ");
 8013920:	4814      	ldr	r0, [pc, #80]	; (8013974 <StartCanRxTask+0xcc>)
 8013922:	f7fe fa6d 	bl	8011e00 <SWV_SendStr>
			for (i = 0; i < RxCan->RxHeader.DLC; i++) {
 8013926:	2300      	movs	r3, #0
 8013928:	77fb      	strb	r3, [r7, #31]
 801392a:	e00a      	b.n	8013942 <StartCanRxTask+0x9a>
				SWV_SendHex8(RxCan->RxData[i]);
 801392c:	7ffb      	ldrb	r3, [r7, #31]
 801392e:	69ba      	ldr	r2, [r7, #24]
 8013930:	4413      	add	r3, r2
 8013932:	7f1b      	ldrb	r3, [r3, #28]
 8013934:	b29b      	uxth	r3, r3
 8013936:	4618      	mov	r0, r3
 8013938:	f7fe fa02 	bl	8011d40 <SWV_SendHex8>
			for (i = 0; i < RxCan->RxHeader.DLC; i++) {
 801393c:	7ffb      	ldrb	r3, [r7, #31]
 801393e:	3301      	adds	r3, #1
 8013940:	77fb      	strb	r3, [r7, #31]
 8013942:	7ffa      	ldrb	r2, [r7, #31]
 8013944:	69bb      	ldr	r3, [r7, #24]
 8013946:	691b      	ldr	r3, [r3, #16]
 8013948:	429a      	cmp	r2, r3
 801394a:	d3ef      	bcc.n	801392c <StartCanRxTask+0x84>
			}
			SWV_SendStrLn("");
 801394c:	480a      	ldr	r0, [pc, #40]	; (8013978 <StartCanRxTask+0xd0>)
 801394e:	f7fe fa79 	bl	8011e44 <SWV_SendStrLn>

			osMailFree(canRxMailHandle, RxCan);
 8013952:	4b03      	ldr	r3, [pc, #12]	; (8013960 <StartCanRxTask+0xb8>)
 8013954:	681b      	ldr	r3, [r3, #0]
 8013956:	69b9      	ldr	r1, [r7, #24]
 8013958:	4618      	mov	r0, r3
 801395a:	f7f5 f8cf 	bl	8008afc <osMailFree>
		evt = osMailGet(canRxMailHandle, osWaitForever);
 801395e:	e7a7      	b.n	80138b0 <StartCanRxTask+0x8>
 8013960:	20008770 	.word	0x20008770
 8013964:	68db8bad 	.word	0x68db8bad
 8013968:	200066cc 	.word	0x200066cc
 801396c:	2000891c 	.word	0x2000891c
 8013970:	08019218 	.word	0x08019218
 8013974:	08019220 	.word	0x08019220
 8013978:	0801922c 	.word	0x0801922c

0801397c <StartSwitchTask>:
 * @brief Function implementing the SwitchTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartSwitchTask */
void StartSwitchTask(void const * argument) {
 801397c:	b590      	push	{r4, r7, lr}
 801397e:	b089      	sub	sp, #36	; 0x24
 8013980:	af00      	add	r7, sp, #0
 8013982:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartSwitchTask */
	// NOTED add 'cost' to all constant
	const uint64_t tickSecond = osKernelSysTickMicroSec(1000000);
 8013984:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8013988:	f04f 0400 	mov.w	r4, #0
 801398c:	e9c7 3404 	strd	r3, r4, [r7, #16]
	extern switcher_t DB_HMI_Switcher;
	// FIXME use me as binary event
	uint32_t ulNotifiedValue;
	uint8_t i;
	// Read all initial state
	for (i = 0; i < DB_ECU_Switch_Size; i++) {
 8013990:	2300      	movs	r3, #0
 8013992:	77fb      	strb	r3, [r7, #31]
 8013994:	e01a      	b.n	80139cc <StartSwitchTask+0x50>
		DB_ECU_Switch[i].state = HAL_GPIO_ReadPin(DB_ECU_Switch[i].port, DB_ECU_Switch[i].pin);
 8013996:	7ffb      	ldrb	r3, [r7, #31]
 8013998:	4a8f      	ldr	r2, [pc, #572]	; (8013bd8 <StartSwitchTask+0x25c>)
 801399a:	011b      	lsls	r3, r3, #4
 801399c:	4413      	add	r3, r2
 801399e:	3308      	adds	r3, #8
 80139a0:	6818      	ldr	r0, [r3, #0]
 80139a2:	7ffb      	ldrb	r3, [r7, #31]
 80139a4:	4a8c      	ldr	r2, [pc, #560]	; (8013bd8 <StartSwitchTask+0x25c>)
 80139a6:	011b      	lsls	r3, r3, #4
 80139a8:	4413      	add	r3, r2
 80139aa:	3304      	adds	r3, #4
 80139ac:	881b      	ldrh	r3, [r3, #0]
 80139ae:	7ffc      	ldrb	r4, [r7, #31]
 80139b0:	4619      	mov	r1, r3
 80139b2:	f7ef fbeb 	bl	800318c <HAL_GPIO_ReadPin>
 80139b6:	4603      	mov	r3, r0
 80139b8:	4619      	mov	r1, r3
 80139ba:	4a87      	ldr	r2, [pc, #540]	; (8013bd8 <StartSwitchTask+0x25c>)
 80139bc:	0123      	lsls	r3, r4, #4
 80139be:	4413      	add	r3, r2
 80139c0:	330c      	adds	r3, #12
 80139c2:	460a      	mov	r2, r1
 80139c4:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < DB_ECU_Switch_Size; i++) {
 80139c6:	7ffb      	ldrb	r3, [r7, #31]
 80139c8:	3301      	adds	r3, #1
 80139ca:	77fb      	strb	r3, [r7, #31]
 80139cc:	4b83      	ldr	r3, [pc, #524]	; (8013bdc <StartSwitchTask+0x260>)
 80139ce:	781b      	ldrb	r3, [r3, #0]
 80139d0:	7ffa      	ldrb	r2, [r7, #31]
 80139d2:	429a      	cmp	r2, r3
 80139d4:	d3df      	bcc.n	8013996 <StartSwitchTask+0x1a>
	}
	/* Infinite loop */
	for (;;) {
		xTaskNotifyStateClear(NULL);
 80139d6:	2000      	movs	r0, #0
 80139d8:	f7f7 fbfc 	bl	800b1d4 <xTaskNotifyStateClear>
		xTaskNotifyWait(0x00, ULONG_MAX, &ulNotifiedValue, portMAX_DELAY);
 80139dc:	f107 020c 	add.w	r2, r7, #12
 80139e0:	f04f 33ff 	mov.w	r3, #4294967295
 80139e4:	f04f 31ff 	mov.w	r1, #4294967295
 80139e8:	2000      	movs	r0, #0
 80139ea:	f7f7 fa33 	bl	800ae54 <xTaskNotifyWait>
		// handle bounce effect
		osDelay(50);
 80139ee:	2032      	movs	r0, #50	; 0x32
 80139f0:	f7f4 fc5b 	bl	80082aa <osDelay>

		// Read all (to handle multiple switch change at the same time)
		for (i = 0; i < DB_ECU_Switch_Size; i++) {
 80139f4:	2300      	movs	r3, #0
 80139f6:	77fb      	strb	r3, [r7, #31]
 80139f8:	e090      	b.n	8013b1c <StartSwitchTask+0x1a0>
			DB_ECU_Switch[i].state = HAL_GPIO_ReadPin(DB_ECU_Switch[i].port, DB_ECU_Switch[i].pin);
 80139fa:	7ffb      	ldrb	r3, [r7, #31]
 80139fc:	4a76      	ldr	r2, [pc, #472]	; (8013bd8 <StartSwitchTask+0x25c>)
 80139fe:	011b      	lsls	r3, r3, #4
 8013a00:	4413      	add	r3, r2
 8013a02:	3308      	adds	r3, #8
 8013a04:	6818      	ldr	r0, [r3, #0]
 8013a06:	7ffb      	ldrb	r3, [r7, #31]
 8013a08:	4a73      	ldr	r2, [pc, #460]	; (8013bd8 <StartSwitchTask+0x25c>)
 8013a0a:	011b      	lsls	r3, r3, #4
 8013a0c:	4413      	add	r3, r2
 8013a0e:	3304      	adds	r3, #4
 8013a10:	881b      	ldrh	r3, [r3, #0]
 8013a12:	7ffc      	ldrb	r4, [r7, #31]
 8013a14:	4619      	mov	r1, r3
 8013a16:	f7ef fbb9 	bl	800318c <HAL_GPIO_ReadPin>
 8013a1a:	4603      	mov	r3, r0
 8013a1c:	4619      	mov	r1, r3
 8013a1e:	4a6e      	ldr	r2, [pc, #440]	; (8013bd8 <StartSwitchTask+0x25c>)
 8013a20:	0123      	lsls	r3, r4, #4
 8013a22:	4413      	add	r3, r2
 8013a24:	330c      	adds	r3, #12
 8013a26:	460a      	mov	r2, r1
 8013a28:	701a      	strb	r2, [r3, #0]
			// handle select & set timer
			if (i == IDX_KEY_SELECT || i == IDX_KEY_SET) {
 8013a2a:	7ffb      	ldrb	r3, [r7, #31]
 8013a2c:	2b00      	cmp	r3, #0
 8013a2e:	d002      	beq.n	8013a36 <StartSwitchTask+0xba>
 8013a30:	7ffb      	ldrb	r3, [r7, #31]
 8013a32:	2b01      	cmp	r3, #1
 8013a34:	d16f      	bne.n	8013b16 <StartSwitchTask+0x19a>
				// reset time
				DB_ECU_Switch_Timer[i].time = 0;
 8013a36:	7ffb      	ldrb	r3, [r7, #31]
 8013a38:	4a69      	ldr	r2, [pc, #420]	; (8013be0 <StartSwitchTask+0x264>)
 8013a3a:	00db      	lsls	r3, r3, #3
 8013a3c:	4413      	add	r3, r2
 8013a3e:	2200      	movs	r2, #0
 8013a40:	715a      	strb	r2, [r3, #5]
				// next job
				if (DB_ECU_Switch[i].state) {
 8013a42:	7ffb      	ldrb	r3, [r7, #31]
 8013a44:	4a64      	ldr	r2, [pc, #400]	; (8013bd8 <StartSwitchTask+0x25c>)
 8013a46:	011b      	lsls	r3, r3, #4
 8013a48:	4413      	add	r3, r2
 8013a4a:	330c      	adds	r3, #12
 8013a4c:	781b      	ldrb	r3, [r3, #0]
 8013a4e:	2b00      	cmp	r3, #0
 8013a50:	d027      	beq.n	8013aa2 <StartSwitchTask+0x126>
					if (!DB_ECU_Switch_Timer[i].running) {
 8013a52:	7ffb      	ldrb	r3, [r7, #31]
 8013a54:	4a62      	ldr	r2, [pc, #392]	; (8013be0 <StartSwitchTask+0x264>)
 8013a56:	00db      	lsls	r3, r3, #3
 8013a58:	4413      	add	r3, r2
 8013a5a:	791b      	ldrb	r3, [r3, #4]
 8013a5c:	2b00      	cmp	r3, #0
 8013a5e:	d10c      	bne.n	8013a7a <StartSwitchTask+0xfe>
						// set flag
						DB_ECU_Switch_Timer[i].running = 1;
 8013a60:	7ffb      	ldrb	r3, [r7, #31]
 8013a62:	4a5f      	ldr	r2, [pc, #380]	; (8013be0 <StartSwitchTask+0x264>)
 8013a64:	00db      	lsls	r3, r3, #3
 8013a66:	4413      	add	r3, r2
 8013a68:	2201      	movs	r2, #1
 8013a6a:	711a      	strb	r2, [r3, #4]
						// start timer for select
						DB_ECU_Switch_Timer[i].start = osKernelSysTick();
 8013a6c:	7ffc      	ldrb	r4, [r7, #31]
 8013a6e:	f7f4 fbc0 	bl	80081f2 <osKernelSysTick>
 8013a72:	4602      	mov	r2, r0
 8013a74:	4b5a      	ldr	r3, [pc, #360]	; (8013be0 <StartSwitchTask+0x264>)
 8013a76:	f843 2034 	str.w	r2, [r3, r4, lsl #3]
					}
					// reverse it
					DB_ECU_Switch[i].state = !DB_ECU_Switch[i].state;
 8013a7a:	7ffb      	ldrb	r3, [r7, #31]
 8013a7c:	4a56      	ldr	r2, [pc, #344]	; (8013bd8 <StartSwitchTask+0x25c>)
 8013a7e:	011b      	lsls	r3, r3, #4
 8013a80:	4413      	add	r3, r2
 8013a82:	330c      	adds	r3, #12
 8013a84:	781b      	ldrb	r3, [r3, #0]
 8013a86:	2b00      	cmp	r3, #0
 8013a88:	bf0c      	ite	eq
 8013a8a:	2301      	moveq	r3, #1
 8013a8c:	2300      	movne	r3, #0
 8013a8e:	b2da      	uxtb	r2, r3
 8013a90:	7ffb      	ldrb	r3, [r7, #31]
 8013a92:	4611      	mov	r1, r2
 8013a94:	4a50      	ldr	r2, [pc, #320]	; (8013bd8 <StartSwitchTask+0x25c>)
 8013a96:	011b      	lsls	r3, r3, #4
 8013a98:	4413      	add	r3, r2
 8013a9a:	330c      	adds	r3, #12
 8013a9c:	460a      	mov	r2, r1
 8013a9e:	701a      	strb	r2, [r3, #0]
 8013aa0:	e039      	b.n	8013b16 <StartSwitchTask+0x19a>
				} else {
					if (DB_ECU_Switch_Timer[i].running) {
 8013aa2:	7ffb      	ldrb	r3, [r7, #31]
 8013aa4:	4a4e      	ldr	r2, [pc, #312]	; (8013be0 <StartSwitchTask+0x264>)
 8013aa6:	00db      	lsls	r3, r3, #3
 8013aa8:	4413      	add	r3, r2
 8013aaa:	791b      	ldrb	r3, [r3, #4]
 8013aac:	2b00      	cmp	r3, #0
 8013aae:	d032      	beq.n	8013b16 <StartSwitchTask+0x19a>
						// set flag
						DB_ECU_Switch_Timer[i].running = 0;
 8013ab0:	7ffb      	ldrb	r3, [r7, #31]
 8013ab2:	4a4b      	ldr	r2, [pc, #300]	; (8013be0 <StartSwitchTask+0x264>)
 8013ab4:	00db      	lsls	r3, r3, #3
 8013ab6:	4413      	add	r3, r2
 8013ab8:	2200      	movs	r2, #0
 8013aba:	711a      	strb	r2, [r3, #4]
						// stop timer
						DB_ECU_Switch_Timer[i].time = (uint8_t) ((osKernelSysTick() - DB_ECU_Switch_Timer[i].start) / tickSecond);
 8013abc:	f7f4 fb99 	bl	80081f2 <osKernelSysTick>
 8013ac0:	4601      	mov	r1, r0
 8013ac2:	7ffb      	ldrb	r3, [r7, #31]
 8013ac4:	4a46      	ldr	r2, [pc, #280]	; (8013be0 <StartSwitchTask+0x264>)
 8013ac6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8013aca:	1acb      	subs	r3, r1, r3
 8013acc:	4618      	mov	r0, r3
 8013ace:	f04f 0100 	mov.w	r1, #0
 8013ad2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8013ad6:	f7ed f8e7 	bl	8000ca8 <__aeabi_uldivmod>
 8013ada:	4603      	mov	r3, r0
 8013adc:	460c      	mov	r4, r1
 8013ade:	4619      	mov	r1, r3
 8013ae0:	4622      	mov	r2, r4
 8013ae2:	7ffb      	ldrb	r3, [r7, #31]
 8013ae4:	b2c9      	uxtb	r1, r1
 8013ae6:	4a3e      	ldr	r2, [pc, #248]	; (8013be0 <StartSwitchTask+0x264>)
 8013ae8:	00db      	lsls	r3, r3, #3
 8013aea:	4413      	add	r3, r2
 8013aec:	460a      	mov	r2, r1
 8013aee:	715a      	strb	r2, [r3, #5]
						// reverse it
						DB_ECU_Switch[i].state = !DB_ECU_Switch[i].state;
 8013af0:	7ffb      	ldrb	r3, [r7, #31]
 8013af2:	4a39      	ldr	r2, [pc, #228]	; (8013bd8 <StartSwitchTask+0x25c>)
 8013af4:	011b      	lsls	r3, r3, #4
 8013af6:	4413      	add	r3, r2
 8013af8:	330c      	adds	r3, #12
 8013afa:	781b      	ldrb	r3, [r3, #0]
 8013afc:	2b00      	cmp	r3, #0
 8013afe:	bf0c      	ite	eq
 8013b00:	2301      	moveq	r3, #1
 8013b02:	2300      	movne	r3, #0
 8013b04:	b2da      	uxtb	r2, r3
 8013b06:	7ffb      	ldrb	r3, [r7, #31]
 8013b08:	4611      	mov	r1, r2
 8013b0a:	4a33      	ldr	r2, [pc, #204]	; (8013bd8 <StartSwitchTask+0x25c>)
 8013b0c:	011b      	lsls	r3, r3, #4
 8013b0e:	4413      	add	r3, r2
 8013b10:	330c      	adds	r3, #12
 8013b12:	460a      	mov	r2, r1
 8013b14:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < DB_ECU_Switch_Size; i++) {
 8013b16:	7ffb      	ldrb	r3, [r7, #31]
 8013b18:	3301      	adds	r3, #1
 8013b1a:	77fb      	strb	r3, [r7, #31]
 8013b1c:	4b2f      	ldr	r3, [pc, #188]	; (8013bdc <StartSwitchTask+0x260>)
 8013b1e:	781b      	ldrb	r3, [r3, #0]
 8013b20:	7ffa      	ldrb	r2, [r7, #31]
 8013b22:	429a      	cmp	r2, r3
 8013b24:	f4ff af69 	bcc.w	80139fa <StartSwitchTask+0x7e>
					}
				}
			}
		}
		// handle Select & Set
		if (DB_ECU_Switch[IDX_KEY_SELECT].state || DB_ECU_Switch[IDX_KEY_SET].state) {
 8013b28:	4b2b      	ldr	r3, [pc, #172]	; (8013bd8 <StartSwitchTask+0x25c>)
 8013b2a:	7b1b      	ldrb	r3, [r3, #12]
 8013b2c:	2b00      	cmp	r3, #0
 8013b2e:	d104      	bne.n	8013b3a <StartSwitchTask+0x1be>
 8013b30:	4b29      	ldr	r3, [pc, #164]	; (8013bd8 <StartSwitchTask+0x25c>)
 8013b32:	7f1b      	ldrb	r3, [r3, #28]
 8013b34:	2b00      	cmp	r3, #0
 8013b36:	f43f af4e 	beq.w	80139d6 <StartSwitchTask+0x5a>
			// handle select key
			if (DB_ECU_Switch[IDX_KEY_SELECT].state) {
 8013b3a:	4b27      	ldr	r3, [pc, #156]	; (8013bd8 <StartSwitchTask+0x25c>)
 8013b3c:	7b1b      	ldrb	r3, [r3, #12]
 8013b3e:	2b00      	cmp	r3, #0
 8013b40:	d00d      	beq.n	8013b5e <StartSwitchTask+0x1e2>
				// change mode position
				if (DB_HMI_Switcher.mode == SWITCH_MODE_MAX) {
 8013b42:	4b28      	ldr	r3, [pc, #160]	; (8013be4 <StartSwitchTask+0x268>)
 8013b44:	781b      	ldrb	r3, [r3, #0]
 8013b46:	2b02      	cmp	r3, #2
 8013b48:	d103      	bne.n	8013b52 <StartSwitchTask+0x1d6>
					DB_HMI_Switcher.mode = 0;
 8013b4a:	4b26      	ldr	r3, [pc, #152]	; (8013be4 <StartSwitchTask+0x268>)
 8013b4c:	2200      	movs	r2, #0
 8013b4e:	701a      	strb	r2, [r3, #0]
 8013b50:	e005      	b.n	8013b5e <StartSwitchTask+0x1e2>
				} else {
					DB_HMI_Switcher.mode++;
 8013b52:	4b24      	ldr	r3, [pc, #144]	; (8013be4 <StartSwitchTask+0x268>)
 8013b54:	781b      	ldrb	r3, [r3, #0]
 8013b56:	3301      	adds	r3, #1
 8013b58:	b2da      	uxtb	r2, r3
 8013b5a:	4b22      	ldr	r3, [pc, #136]	; (8013be4 <StartSwitchTask+0x268>)
 8013b5c:	701a      	strb	r2, [r3, #0]
				}
			}

			// handle set key
			if (DB_ECU_Switch[IDX_KEY_SET].state) {
 8013b5e:	4b1e      	ldr	r3, [pc, #120]	; (8013bd8 <StartSwitchTask+0x25c>)
 8013b60:	7f1b      	ldrb	r3, [r3, #28]
 8013b62:	2b00      	cmp	r3, #0
 8013b64:	f43f af37 	beq.w	80139d6 <StartSwitchTask+0x5a>
				// handle reset only if push more than 5sec, and in trip mode
				if (DB_ECU_Switch_Timer[IDX_KEY_SET].time > 5 && DB_HMI_Switcher.mode == SWITCH_MODE_TRIP) {
 8013b68:	4b1d      	ldr	r3, [pc, #116]	; (8013be0 <StartSwitchTask+0x264>)
 8013b6a:	7b5b      	ldrb	r3, [r3, #13]
 8013b6c:	2b05      	cmp	r3, #5
 8013b6e:	d910      	bls.n	8013b92 <StartSwitchTask+0x216>
 8013b70:	4b1c      	ldr	r3, [pc, #112]	; (8013be4 <StartSwitchTask+0x268>)
 8013b72:	781b      	ldrb	r3, [r3, #0]
 8013b74:	2b01      	cmp	r3, #1
 8013b76:	d10c      	bne.n	8013b92 <StartSwitchTask+0x216>
					// reset value
					DB_HMI_Switcher.mode_sub_trip[DB_HMI_Switcher.mode_sub[DB_HMI_Switcher.mode]] = 0;
 8013b78:	4b1a      	ldr	r3, [pc, #104]	; (8013be4 <StartSwitchTask+0x268>)
 8013b7a:	781b      	ldrb	r3, [r3, #0]
 8013b7c:	461a      	mov	r2, r3
 8013b7e:	4b19      	ldr	r3, [pc, #100]	; (8013be4 <StartSwitchTask+0x268>)
 8013b80:	4413      	add	r3, r2
 8013b82:	785b      	ldrb	r3, [r3, #1]
 8013b84:	4a17      	ldr	r2, [pc, #92]	; (8013be4 <StartSwitchTask+0x268>)
 8013b86:	3302      	adds	r3, #2
 8013b88:	009b      	lsls	r3, r3, #2
 8013b8a:	4413      	add	r3, r2
 8013b8c:	2200      	movs	r2, #0
 8013b8e:	605a      	str	r2, [r3, #4]
 8013b90:	e020      	b.n	8013bd4 <StartSwitchTask+0x258>
				} else {
					if (DB_HMI_Switcher.mode_sub[DB_HMI_Switcher.mode] == DB_HMI_Switcher.mode_sub_max[DB_HMI_Switcher.mode]) {
 8013b92:	4b14      	ldr	r3, [pc, #80]	; (8013be4 <StartSwitchTask+0x268>)
 8013b94:	781b      	ldrb	r3, [r3, #0]
 8013b96:	461a      	mov	r2, r3
 8013b98:	4b12      	ldr	r3, [pc, #72]	; (8013be4 <StartSwitchTask+0x268>)
 8013b9a:	4413      	add	r3, r2
 8013b9c:	785a      	ldrb	r2, [r3, #1]
 8013b9e:	4b11      	ldr	r3, [pc, #68]	; (8013be4 <StartSwitchTask+0x268>)
 8013ba0:	781b      	ldrb	r3, [r3, #0]
 8013ba2:	4619      	mov	r1, r3
 8013ba4:	4b0f      	ldr	r3, [pc, #60]	; (8013be4 <StartSwitchTask+0x268>)
 8013ba6:	440b      	add	r3, r1
 8013ba8:	791b      	ldrb	r3, [r3, #4]
 8013baa:	429a      	cmp	r2, r3
 8013bac:	d107      	bne.n	8013bbe <StartSwitchTask+0x242>
						DB_HMI_Switcher.mode_sub[DB_HMI_Switcher.mode] = 0;
 8013bae:	4b0d      	ldr	r3, [pc, #52]	; (8013be4 <StartSwitchTask+0x268>)
 8013bb0:	781b      	ldrb	r3, [r3, #0]
 8013bb2:	461a      	mov	r2, r3
 8013bb4:	4b0b      	ldr	r3, [pc, #44]	; (8013be4 <StartSwitchTask+0x268>)
 8013bb6:	4413      	add	r3, r2
 8013bb8:	2200      	movs	r2, #0
 8013bba:	705a      	strb	r2, [r3, #1]
 8013bbc:	e70b      	b.n	80139d6 <StartSwitchTask+0x5a>
					} else {
						DB_HMI_Switcher.mode_sub[DB_HMI_Switcher.mode]++;
 8013bbe:	4b09      	ldr	r3, [pc, #36]	; (8013be4 <StartSwitchTask+0x268>)
 8013bc0:	781b      	ldrb	r3, [r3, #0]
 8013bc2:	4a08      	ldr	r2, [pc, #32]	; (8013be4 <StartSwitchTask+0x268>)
 8013bc4:	441a      	add	r2, r3
 8013bc6:	7852      	ldrb	r2, [r2, #1]
 8013bc8:	3201      	adds	r2, #1
 8013bca:	b2d1      	uxtb	r1, r2
 8013bcc:	4a05      	ldr	r2, [pc, #20]	; (8013be4 <StartSwitchTask+0x268>)
 8013bce:	4413      	add	r3, r2
 8013bd0:	460a      	mov	r2, r1
 8013bd2:	705a      	strb	r2, [r3, #1]
		xTaskNotifyStateClear(NULL);
 8013bd4:	e6ff      	b.n	80139d6 <StartSwitchTask+0x5a>
 8013bd6:	bf00      	nop
 8013bd8:	2000000c 	.word	0x2000000c
 8013bdc:	20000090 	.word	0x20000090
 8013be0:	200066bc 	.word	0x200066bc
 8013be4:	2000007c 	.word	0x2000007c

08013be8 <CallbackTimer500>:
	}
	/* USER CODE END StartSwitchTask */
}

/* CallbackTimer500 function */
void CallbackTimer500(void const * argument) {
 8013be8:	b580      	push	{r7, lr}
 8013bea:	b082      	sub	sp, #8
 8013bec:	af00      	add	r7, sp, #0
 8013bee:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN CallbackTimer500 */
	CANBUS_ECU_Switch();
 8013bf0:	f7f9 fc14 	bl	800d41c <CANBUS_ECU_Switch>
	CANBUS_ECU_RTC();
 8013bf4:	f7f9 fc94 	bl	800d520 <CANBUS_ECU_RTC>
	CANBUS_ECU_Select_Set();
 8013bf8:	f7f9 fcbe 	bl	800d578 <CANBUS_ECU_Select_Set>
	CANBUS_ECU_Trip_Mode();
 8013bfc:	f7f9 fd14 	bl	800d628 <CANBUS_ECU_Trip_Mode>

	BSP_Led_Toggle_All();
 8013c00:	f7f9 fda4 	bl	800d74c <BSP_Led_Toggle_All>
	/* USER CODE END CallbackTimer500 */
}
 8013c04:	bf00      	nop
 8013c06:	3708      	adds	r7, #8
 8013c08:	46bd      	mov	sp, r7
 8013c0a:	bd80      	pop	{r7, pc}

08013c0c <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8013c0c:	b580      	push	{r7, lr}
 8013c0e:	b082      	sub	sp, #8
 8013c10:	af00      	add	r7, sp, #0
 8013c12:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 8013c14:	687b      	ldr	r3, [r7, #4]
 8013c16:	681b      	ldr	r3, [r3, #0]
 8013c18:	4a04      	ldr	r2, [pc, #16]	; (8013c2c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8013c1a:	4293      	cmp	r3, r2
 8013c1c:	d101      	bne.n	8013c22 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8013c1e:	f7ed f9e5 	bl	8000fec <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8013c22:	bf00      	nop
 8013c24:	3708      	adds	r7, #8
 8013c26:	46bd      	mov	sp, r7
 8013c28:	bd80      	pop	{r7, pc}
 8013c2a:	bf00      	nop
 8013c2c:	40010000 	.word	0x40010000

08013c30 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8013c30:	b580      	push	{r7, lr}
 8013c32:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	SWV_SendStrLn("Error Handler fired.");
 8013c34:	4801      	ldr	r0, [pc, #4]	; (8013c3c <Error_Handler+0xc>)
 8013c36:	f7fe f905 	bl	8011e44 <SWV_SendStrLn>

	while (1)
 8013c3a:	e7fe      	b.n	8013c3a <Error_Handler+0xa>
 8013c3c:	08019230 	.word	0x08019230

08013c40 <I2Cx_Init>:

/******************************* I2C Routines**********************************/
/**
 * @brief  Configures I2C interface.
 */
static void I2Cx_Init(void) {
 8013c40:	b580      	push	{r7, lr}
 8013c42:	af00      	add	r7, sp, #0
	if (HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET) {
 8013c44:	480e      	ldr	r0, [pc, #56]	; (8013c80 <I2Cx_Init+0x40>)
 8013c46:	f7f0 fbc3 	bl	80043d0 <HAL_I2C_GetState>
 8013c4a:	4603      	mov	r3, r0
 8013c4c:	2b00      	cmp	r3, #0
 8013c4e:	d114      	bne.n	8013c7a <I2Cx_Init+0x3a>
		/* DISCOVERY_I2Cx peripheral configuration */
		I2cHandle.Init.ClockSpeed = BSP_I2C_SPEED;
 8013c50:	4b0b      	ldr	r3, [pc, #44]	; (8013c80 <I2Cx_Init+0x40>)
 8013c52:	4a0c      	ldr	r2, [pc, #48]	; (8013c84 <I2Cx_Init+0x44>)
 8013c54:	605a      	str	r2, [r3, #4]
		I2cHandle.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8013c56:	4b0a      	ldr	r3, [pc, #40]	; (8013c80 <I2Cx_Init+0x40>)
 8013c58:	2200      	movs	r2, #0
 8013c5a:	609a      	str	r2, [r3, #8]
		I2cHandle.Init.OwnAddress1 = 0x33;
 8013c5c:	4b08      	ldr	r3, [pc, #32]	; (8013c80 <I2Cx_Init+0x40>)
 8013c5e:	2233      	movs	r2, #51	; 0x33
 8013c60:	60da      	str	r2, [r3, #12]
		I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8013c62:	4b07      	ldr	r3, [pc, #28]	; (8013c80 <I2Cx_Init+0x40>)
 8013c64:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8013c68:	611a      	str	r2, [r3, #16]
		I2cHandle.Instance = DISCOVERY_I2Cx;
 8013c6a:	4b05      	ldr	r3, [pc, #20]	; (8013c80 <I2Cx_Init+0x40>)
 8013c6c:	4a06      	ldr	r2, [pc, #24]	; (8013c88 <I2Cx_Init+0x48>)
 8013c6e:	601a      	str	r2, [r3, #0]

		/* Init the I2C */
		I2Cx_MspInit();
 8013c70:	f000 f876 	bl	8013d60 <I2Cx_MspInit>
		HAL_I2C_Init(&I2cHandle);
 8013c74:	4802      	ldr	r0, [pc, #8]	; (8013c80 <I2Cx_Init+0x40>)
 8013c76:	f7ef faed 	bl	8003254 <HAL_I2C_Init>
	}
}
 8013c7a:	bf00      	nop
 8013c7c:	bd80      	pop	{r7, pc}
 8013c7e:	bf00      	nop
 8013c80:	20006b80 	.word	0x20006b80
 8013c84:	000186a0 	.word	0x000186a0
 8013c88:	40005400 	.word	0x40005400

08013c8c <I2Cx_WriteData>:
 * @param  Addr: Device address on BUS Bus.
 * @param  Reg: The target register address to write
 * @param  Value: The target register value to be written
 * @retval HAL status
 */
static void I2Cx_WriteData(uint8_t Addr, uint8_t Reg, uint8_t Value) {
 8013c8c:	b580      	push	{r7, lr}
 8013c8e:	b088      	sub	sp, #32
 8013c90:	af04      	add	r7, sp, #16
 8013c92:	4603      	mov	r3, r0
 8013c94:	71fb      	strb	r3, [r7, #7]
 8013c96:	460b      	mov	r3, r1
 8013c98:	71bb      	strb	r3, [r7, #6]
 8013c9a:	4613      	mov	r3, r2
 8013c9c:	717b      	strb	r3, [r7, #5]
	HAL_StatusTypeDef status = HAL_OK;
 8013c9e:	2300      	movs	r3, #0
 8013ca0:	73fb      	strb	r3, [r7, #15]

	status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t) Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 8013ca2:	79fb      	ldrb	r3, [r7, #7]
 8013ca4:	b299      	uxth	r1, r3
 8013ca6:	79bb      	ldrb	r3, [r7, #6]
 8013ca8:	b29a      	uxth	r2, r3
 8013caa:	4b0c      	ldr	r3, [pc, #48]	; (8013cdc <I2Cx_WriteData+0x50>)
 8013cac:	681b      	ldr	r3, [r3, #0]
 8013cae:	9302      	str	r3, [sp, #8]
 8013cb0:	2301      	movs	r3, #1
 8013cb2:	9301      	str	r3, [sp, #4]
 8013cb4:	1d7b      	adds	r3, r7, #5
 8013cb6:	9300      	str	r3, [sp, #0]
 8013cb8:	2301      	movs	r3, #1
 8013cba:	4809      	ldr	r0, [pc, #36]	; (8013ce0 <I2Cx_WriteData+0x54>)
 8013cbc:	f7ef ff46 	bl	8003b4c <HAL_I2C_Mem_Write>
 8013cc0:	4603      	mov	r3, r0
 8013cc2:	73fb      	strb	r3, [r7, #15]

	/* Check the communication status */
	if (status != HAL_OK) {
 8013cc4:	7bfb      	ldrb	r3, [r7, #15]
 8013cc6:	2b00      	cmp	r3, #0
 8013cc8:	d003      	beq.n	8013cd2 <I2Cx_WriteData+0x46>
		/* Execute user timeout callback */
		I2Cx_Error(Addr);
 8013cca:	79fb      	ldrb	r3, [r7, #7]
 8013ccc:	4618      	mov	r0, r3
 8013cce:	f000 f837 	bl	8013d40 <I2Cx_Error>
	}
}
 8013cd2:	bf00      	nop
 8013cd4:	3710      	adds	r7, #16
 8013cd6:	46bd      	mov	sp, r7
 8013cd8:	bd80      	pop	{r7, pc}
 8013cda:	bf00      	nop
 8013cdc:	200000d4 	.word	0x200000d4
 8013ce0:	20006b80 	.word	0x20006b80

08013ce4 <I2Cx_ReadData>:
 * @brief  Read a register of the device through BUS
 * @param  Addr: Device address on BUS
 * @param  Reg: The target register address to read
 * @retval HAL status
 */
static uint8_t I2Cx_ReadData(uint8_t Addr, uint8_t Reg) {
 8013ce4:	b580      	push	{r7, lr}
 8013ce6:	b088      	sub	sp, #32
 8013ce8:	af04      	add	r7, sp, #16
 8013cea:	4603      	mov	r3, r0
 8013cec:	460a      	mov	r2, r1
 8013cee:	71fb      	strb	r3, [r7, #7]
 8013cf0:	4613      	mov	r3, r2
 8013cf2:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef status = HAL_OK;
 8013cf4:	2300      	movs	r3, #0
 8013cf6:	73fb      	strb	r3, [r7, #15]
	uint8_t value = 0;
 8013cf8:	2300      	movs	r3, #0
 8013cfa:	73bb      	strb	r3, [r7, #14]

	status = HAL_I2C_Mem_Read(&I2cHandle, Addr, (uint16_t) Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8013cfc:	79fb      	ldrb	r3, [r7, #7]
 8013cfe:	b299      	uxth	r1, r3
 8013d00:	79bb      	ldrb	r3, [r7, #6]
 8013d02:	b29a      	uxth	r2, r3
 8013d04:	4b0c      	ldr	r3, [pc, #48]	; (8013d38 <I2Cx_ReadData+0x54>)
 8013d06:	681b      	ldr	r3, [r3, #0]
 8013d08:	9302      	str	r3, [sp, #8]
 8013d0a:	2301      	movs	r3, #1
 8013d0c:	9301      	str	r3, [sp, #4]
 8013d0e:	f107 030e 	add.w	r3, r7, #14
 8013d12:	9300      	str	r3, [sp, #0]
 8013d14:	2301      	movs	r3, #1
 8013d16:	4809      	ldr	r0, [pc, #36]	; (8013d3c <I2Cx_ReadData+0x58>)
 8013d18:	f7f0 f812 	bl	8003d40 <HAL_I2C_Mem_Read>
 8013d1c:	4603      	mov	r3, r0
 8013d1e:	73fb      	strb	r3, [r7, #15]

	/* Check the communication status */
	if (status != HAL_OK) {
 8013d20:	7bfb      	ldrb	r3, [r7, #15]
 8013d22:	2b00      	cmp	r3, #0
 8013d24:	d003      	beq.n	8013d2e <I2Cx_ReadData+0x4a>
		/* Execute user timeout callback */
		I2Cx_Error(Addr);
 8013d26:	79fb      	ldrb	r3, [r7, #7]
 8013d28:	4618      	mov	r0, r3
 8013d2a:	f000 f809 	bl	8013d40 <I2Cx_Error>
	}
	return value;
 8013d2e:	7bbb      	ldrb	r3, [r7, #14]
}
 8013d30:	4618      	mov	r0, r3
 8013d32:	3710      	adds	r7, #16
 8013d34:	46bd      	mov	sp, r7
 8013d36:	bd80      	pop	{r7, pc}
 8013d38:	200000d4 	.word	0x200000d4
 8013d3c:	20006b80 	.word	0x20006b80

08013d40 <I2Cx_Error>:

/**
 * @brief  Manages error callback by re-initializing I2C.
 * @param  Addr: I2C Address
 */
static void I2Cx_Error(uint8_t Addr) {
 8013d40:	b580      	push	{r7, lr}
 8013d42:	b082      	sub	sp, #8
 8013d44:	af00      	add	r7, sp, #0
 8013d46:	4603      	mov	r3, r0
 8013d48:	71fb      	strb	r3, [r7, #7]
	/* De-initialize the I2C communication bus */
	HAL_I2C_DeInit(&I2cHandle);
 8013d4a:	4804      	ldr	r0, [pc, #16]	; (8013d5c <I2Cx_Error+0x1c>)
 8013d4c:	f7ef fbaa 	bl	80034a4 <HAL_I2C_DeInit>

	/* Re-Initialize the I2C communication bus */
	I2Cx_Init();
 8013d50:	f7ff ff76 	bl	8013c40 <I2Cx_Init>
}
 8013d54:	bf00      	nop
 8013d56:	3708      	adds	r7, #8
 8013d58:	46bd      	mov	sp, r7
 8013d5a:	bd80      	pop	{r7, pc}
 8013d5c:	20006b80 	.word	0x20006b80

08013d60 <I2Cx_MspInit>:

/**
 * @brief I2C MSP Initialization
 */
static void I2Cx_MspInit(void) {
 8013d60:	b580      	push	{r7, lr}
 8013d62:	b088      	sub	sp, #32
 8013d64:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;

	/* Enable I2C GPIO clocks */
	DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE()
 8013d66:	2300      	movs	r3, #0
 8013d68:	60bb      	str	r3, [r7, #8]
 8013d6a:	4b25      	ldr	r3, [pc, #148]	; (8013e00 <I2Cx_MspInit+0xa0>)
 8013d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013d6e:	4a24      	ldr	r2, [pc, #144]	; (8013e00 <I2Cx_MspInit+0xa0>)
 8013d70:	f043 0302 	orr.w	r3, r3, #2
 8013d74:	6313      	str	r3, [r2, #48]	; 0x30
 8013d76:	4b22      	ldr	r3, [pc, #136]	; (8013e00 <I2Cx_MspInit+0xa0>)
 8013d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013d7a:	f003 0302 	and.w	r3, r3, #2
 8013d7e:	60bb      	str	r3, [r7, #8]
 8013d80:	68bb      	ldr	r3, [r7, #8]
	;

	/* DISCOVERY_I2Cx SCL and SDA pins configuration ---------------------------*/
	GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8013d82:	f44f 7310 	mov.w	r3, #576	; 0x240
 8013d86:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8013d88:	2312      	movs	r3, #18
 8013d8a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8013d8c:	2302      	movs	r3, #2
 8013d8e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013d90:	2300      	movs	r3, #0
 8013d92:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8013d94:	2304      	movs	r3, #4
 8013d96:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &GPIO_InitStruct);
 8013d98:	f107 030c 	add.w	r3, r7, #12
 8013d9c:	4619      	mov	r1, r3
 8013d9e:	4819      	ldr	r0, [pc, #100]	; (8013e04 <I2Cx_MspInit+0xa4>)
 8013da0:	f7ee ff60 	bl	8002c64 <HAL_GPIO_Init>

	/* Enable the DISCOVERY_I2Cx peripheral clock */
	DISCOVERY_I2Cx_CLK_ENABLE()
 8013da4:	2300      	movs	r3, #0
 8013da6:	607b      	str	r3, [r7, #4]
 8013da8:	4b15      	ldr	r3, [pc, #84]	; (8013e00 <I2Cx_MspInit+0xa0>)
 8013daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013dac:	4a14      	ldr	r2, [pc, #80]	; (8013e00 <I2Cx_MspInit+0xa0>)
 8013dae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8013db2:	6413      	str	r3, [r2, #64]	; 0x40
 8013db4:	4b12      	ldr	r3, [pc, #72]	; (8013e00 <I2Cx_MspInit+0xa0>)
 8013db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013db8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8013dbc:	607b      	str	r3, [r7, #4]
 8013dbe:	687b      	ldr	r3, [r7, #4]
	;

	/* Force the I2C peripheral clock reset */
	DISCOVERY_I2Cx_FORCE_RESET();
 8013dc0:	4b0f      	ldr	r3, [pc, #60]	; (8013e00 <I2Cx_MspInit+0xa0>)
 8013dc2:	6a1b      	ldr	r3, [r3, #32]
 8013dc4:	4a0e      	ldr	r2, [pc, #56]	; (8013e00 <I2Cx_MspInit+0xa0>)
 8013dc6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8013dca:	6213      	str	r3, [r2, #32]

	/* Release the I2C peripheral clock reset */
	DISCOVERY_I2Cx_RELEASE_RESET();
 8013dcc:	4b0c      	ldr	r3, [pc, #48]	; (8013e00 <I2Cx_MspInit+0xa0>)
 8013dce:	6a1b      	ldr	r3, [r3, #32]
 8013dd0:	4a0b      	ldr	r2, [pc, #44]	; (8013e00 <I2Cx_MspInit+0xa0>)
 8013dd2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8013dd6:	6213      	str	r3, [r2, #32]

	/* Enable and set I2Cx Interrupt to the highest priority */
	HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0, 0);
 8013dd8:	2200      	movs	r2, #0
 8013dda:	2100      	movs	r1, #0
 8013ddc:	201f      	movs	r0, #31
 8013dde:	f7ee f85d 	bl	8001e9c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8013de2:	201f      	movs	r0, #31
 8013de4:	f7ee f876 	bl	8001ed4 <HAL_NVIC_EnableIRQ>

	/* Enable and set I2Cx Interrupt to the highest priority */
	HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0, 0);
 8013de8:	2200      	movs	r2, #0
 8013dea:	2100      	movs	r1, #0
 8013dec:	2020      	movs	r0, #32
 8013dee:	f7ee f855 	bl	8001e9c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8013df2:	2020      	movs	r0, #32
 8013df4:	f7ee f86e 	bl	8001ed4 <HAL_NVIC_EnableIRQ>
}
 8013df8:	bf00      	nop
 8013dfa:	3720      	adds	r7, #32
 8013dfc:	46bd      	mov	sp, r7
 8013dfe:	bd80      	pop	{r7, pc}
 8013e00:	40023800 	.word	0x40023800
 8013e04:	40020400 	.word	0x40020400

08013e08 <AUDIO_IO_Init>:
/********************************* LINK AUDIO *********************************/

/**
 * @brief  Initializes Audio low level.
 */
void AUDIO_IO_Init(void) {
 8013e08:	b580      	push	{r7, lr}
 8013e0a:	b086      	sub	sp, #24
 8013e0c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;

	/* Enable Reset GPIO Clock */
	AUDIO_RESET_GPIO_CLK_ENABLE()
 8013e0e:	2300      	movs	r3, #0
 8013e10:	603b      	str	r3, [r7, #0]
 8013e12:	4b17      	ldr	r3, [pc, #92]	; (8013e70 <AUDIO_IO_Init+0x68>)
 8013e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013e16:	4a16      	ldr	r2, [pc, #88]	; (8013e70 <AUDIO_IO_Init+0x68>)
 8013e18:	f043 0308 	orr.w	r3, r3, #8
 8013e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8013e1e:	4b14      	ldr	r3, [pc, #80]	; (8013e70 <AUDIO_IO_Init+0x68>)
 8013e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013e22:	f003 0308 	and.w	r3, r3, #8
 8013e26:	603b      	str	r3, [r7, #0]
 8013e28:	683b      	ldr	r3, [r7, #0]
	;

	/* Audio reset pin configuration */
	GPIO_InitStruct.Pin = AUDIO_RESET_PIN;
 8013e2a:	2310      	movs	r3, #16
 8013e2c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8013e2e:	2301      	movs	r3, #1
 8013e30:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8013e32:	2302      	movs	r3, #2
 8013e34:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013e36:	2300      	movs	r3, #0
 8013e38:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStruct);
 8013e3a:	1d3b      	adds	r3, r7, #4
 8013e3c:	4619      	mov	r1, r3
 8013e3e:	480d      	ldr	r0, [pc, #52]	; (8013e74 <AUDIO_IO_Init+0x6c>)
 8013e40:	f7ee ff10 	bl	8002c64 <HAL_GPIO_Init>

	I2Cx_Init();
 8013e44:	f7ff fefc 	bl	8013c40 <I2Cx_Init>

	/* Power Down the codec */
	HAL_GPIO_WritePin(AUDIO_RESET_GPIO, AUDIO_RESET_PIN, GPIO_PIN_RESET);
 8013e48:	2200      	movs	r2, #0
 8013e4a:	2110      	movs	r1, #16
 8013e4c:	4809      	ldr	r0, [pc, #36]	; (8013e74 <AUDIO_IO_Init+0x6c>)
 8013e4e:	f7ef f9b5 	bl	80031bc <HAL_GPIO_WritePin>

	/* Wait for a delay to insure registers erasing */
	HAL_Delay(5);
 8013e52:	2005      	movs	r0, #5
 8013e54:	f7ed f8ea 	bl	800102c <HAL_Delay>

	/* Power on the codec */
	HAL_GPIO_WritePin(AUDIO_RESET_GPIO, AUDIO_RESET_PIN, GPIO_PIN_SET);
 8013e58:	2201      	movs	r2, #1
 8013e5a:	2110      	movs	r1, #16
 8013e5c:	4805      	ldr	r0, [pc, #20]	; (8013e74 <AUDIO_IO_Init+0x6c>)
 8013e5e:	f7ef f9ad 	bl	80031bc <HAL_GPIO_WritePin>

	/* Wait for a delay to insure registers erasing */
	HAL_Delay(5);
 8013e62:	2005      	movs	r0, #5
 8013e64:	f7ed f8e2 	bl	800102c <HAL_Delay>
}
 8013e68:	bf00      	nop
 8013e6a:	3718      	adds	r7, #24
 8013e6c:	46bd      	mov	sp, r7
 8013e6e:	bd80      	pop	{r7, pc}
 8013e70:	40023800 	.word	0x40023800
 8013e74:	40020c00 	.word	0x40020c00

08013e78 <AUDIO_IO_DeInit>:

/**
 * @brief  DeInitializes Audio low level.
 */
void AUDIO_IO_DeInit(void) {
 8013e78:	b480      	push	{r7}
 8013e7a:	af00      	add	r7, sp, #0

}
 8013e7c:	bf00      	nop
 8013e7e:	46bd      	mov	sp, r7
 8013e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e84:	4770      	bx	lr

08013e86 <AUDIO_IO_Write>:
 * @brief  Writes a single data.
 * @param  Addr: I2C address
 * @param  Reg: Reg address
 * @param  Value: Data to be written
 */
void AUDIO_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value) {
 8013e86:	b580      	push	{r7, lr}
 8013e88:	b082      	sub	sp, #8
 8013e8a:	af00      	add	r7, sp, #0
 8013e8c:	4603      	mov	r3, r0
 8013e8e:	71fb      	strb	r3, [r7, #7]
 8013e90:	460b      	mov	r3, r1
 8013e92:	71bb      	strb	r3, [r7, #6]
 8013e94:	4613      	mov	r3, r2
 8013e96:	717b      	strb	r3, [r7, #5]
	I2Cx_WriteData(Addr, Reg, Value);
 8013e98:	797a      	ldrb	r2, [r7, #5]
 8013e9a:	79b9      	ldrb	r1, [r7, #6]
 8013e9c:	79fb      	ldrb	r3, [r7, #7]
 8013e9e:	4618      	mov	r0, r3
 8013ea0:	f7ff fef4 	bl	8013c8c <I2Cx_WriteData>
}
 8013ea4:	bf00      	nop
 8013ea6:	3708      	adds	r7, #8
 8013ea8:	46bd      	mov	sp, r7
 8013eaa:	bd80      	pop	{r7, pc}

08013eac <AUDIO_IO_Read>:
 * @brief  Reads a single data.
 * @param  Addr: I2C address
 * @param  Reg: Reg address
 * @retval Data to be read
 */
uint8_t AUDIO_IO_Read(uint8_t Addr, uint8_t Reg) {
 8013eac:	b580      	push	{r7, lr}
 8013eae:	b082      	sub	sp, #8
 8013eb0:	af00      	add	r7, sp, #0
 8013eb2:	4603      	mov	r3, r0
 8013eb4:	460a      	mov	r2, r1
 8013eb6:	71fb      	strb	r3, [r7, #7]
 8013eb8:	4613      	mov	r3, r2
 8013eba:	71bb      	strb	r3, [r7, #6]
	return I2Cx_ReadData(Addr, Reg);
 8013ebc:	79ba      	ldrb	r2, [r7, #6]
 8013ebe:	79fb      	ldrb	r3, [r7, #7]
 8013ec0:	4611      	mov	r1, r2
 8013ec2:	4618      	mov	r0, r3
 8013ec4:	f7ff ff0e 	bl	8013ce4 <I2Cx_ReadData>
 8013ec8:	4603      	mov	r3, r0
}
 8013eca:	4618      	mov	r0, r3
 8013ecc:	3708      	adds	r7, #8
 8013ece:	46bd      	mov	sp, r7
 8013ed0:	bd80      	pop	{r7, pc}
	...

08013ed4 <WaveInit>:
/* Audio wave remaining data length to be played */
static uint32_t AudioRemSize;
/* Audio wave to be played data at the moment */
static uint16_t AudioPlaySize;

void WaveInit(void) {
 8013ed4:	b580      	push	{r7, lr}
 8013ed6:	b082      	sub	sp, #8
 8013ed8:	af00      	add	r7, sp, #0
	uint8_t ret;
	do {
		SWV_SendStrLn("WaveInit");
 8013eda:	480c      	ldr	r0, [pc, #48]	; (8013f0c <WaveInit+0x38>)
 8013edc:	f7fd ffb2 	bl	8011e44 <SWV_SendStrLn>

		/* Initialize Wave player (Codec, DMA, I2C) */
		ret = BSP_AUDIO_OUT_Init(OUTPUT_DEVICE_AUTO, Volume, AUDIO_SAMPLE_FREQ);
 8013ee0:	4b0b      	ldr	r3, [pc, #44]	; (8013f10 <WaveInit+0x3c>)
 8013ee2:	7819      	ldrb	r1, [r3, #0]
 8013ee4:	4b0b      	ldr	r3, [pc, #44]	; (8013f14 <WaveInit+0x40>)
 8013ee6:	681b      	ldr	r3, [r3, #0]
 8013ee8:	461a      	mov	r2, r3
 8013eea:	2004      	movs	r0, #4
 8013eec:	f000 f890 	bl	8014010 <BSP_AUDIO_OUT_Init>
 8013ef0:	4603      	mov	r3, r0
 8013ef2:	71fb      	strb	r3, [r7, #7]

		osDelay(500);
 8013ef4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8013ef8:	f7f4 f9d7 	bl	80082aa <osDelay>
	} while (ret != 0);
 8013efc:	79fb      	ldrb	r3, [r7, #7]
 8013efe:	2b00      	cmp	r3, #0
 8013f00:	d1eb      	bne.n	8013eda <WaveInit+0x6>
}
 8013f02:	bf00      	nop
 8013f04:	3708      	adds	r7, #8
 8013f06:	46bd      	mov	sp, r7
 8013f08:	bd80      	pop	{r7, pc}
 8013f0a:	bf00      	nop
 8013f0c:	08019248 	.word	0x08019248
 8013f10:	20006bd9 	.word	0x20006bd9
 8013f14:	08019304 	.word	0x08019304

08013f18 <WavePlay>:

void WavePlay(void) {
 8013f18:	b580      	push	{r7, lr}
 8013f1a:	af00      	add	r7, sp, #0
	/* Get data size from audio file */
	AudioRemSize = AUDIO_SAMPLE_SIZE;
 8013f1c:	4b0d      	ldr	r3, [pc, #52]	; (8013f54 <WavePlay+0x3c>)
 8013f1e:	681b      	ldr	r3, [r3, #0]
 8013f20:	4a0d      	ldr	r2, [pc, #52]	; (8013f58 <WavePlay+0x40>)
 8013f22:	6013      	str	r3, [r2, #0]
	/* Get total data to be played */
	if (AUDIO_SAMPLE_SIZE > AUDIO_BUFFER_SIZE) {
 8013f24:	4b0b      	ldr	r3, [pc, #44]	; (8013f54 <WavePlay+0x3c>)
 8013f26:	681b      	ldr	r3, [r3, #0]
 8013f28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013f2c:	d904      	bls.n	8013f38 <WavePlay+0x20>
		AudioPlaySize = AUDIO_BUFFER_SIZE;
 8013f2e:	4b0b      	ldr	r3, [pc, #44]	; (8013f5c <WavePlay+0x44>)
 8013f30:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8013f34:	801a      	strh	r2, [r3, #0]
 8013f36:	e004      	b.n	8013f42 <WavePlay+0x2a>
	} else {
		AudioPlaySize = AUDIO_SAMPLE_SIZE;
 8013f38:	4b06      	ldr	r3, [pc, #24]	; (8013f54 <WavePlay+0x3c>)
 8013f3a:	681b      	ldr	r3, [r3, #0]
 8013f3c:	b29a      	uxth	r2, r3
 8013f3e:	4b07      	ldr	r3, [pc, #28]	; (8013f5c <WavePlay+0x44>)
 8013f40:	801a      	strh	r2, [r3, #0]
	}

	/* Start playing Wave */
	BSP_AUDIO_OUT_Play((uint16_t*) AUDIO_SAMPLE, AudioPlaySize);
 8013f42:	4b06      	ldr	r3, [pc, #24]	; (8013f5c <WavePlay+0x44>)
 8013f44:	881b      	ldrh	r3, [r3, #0]
 8013f46:	4619      	mov	r1, r3
 8013f48:	4805      	ldr	r0, [pc, #20]	; (8013f60 <WavePlay+0x48>)
 8013f4a:	f000 f8af 	bl	80140ac <BSP_AUDIO_OUT_Play>
}
 8013f4e:	bf00      	nop
 8013f50:	bd80      	pop	{r7, pc}
 8013f52:	bf00      	nop
 8013f54:	08019308 	.word	0x08019308
 8013f58:	20006bdc 	.word	0x20006bdc
 8013f5c:	20006be0 	.word	0x20006be0
 8013f60:	0801930c 	.word	0x0801930c

08013f64 <WaveBeepPlay>:

void WaveBeepPlay(uint8_t Frequency, uint16_t TimeMS) {
 8013f64:	b590      	push	{r4, r7, lr}
 8013f66:	b083      	sub	sp, #12
 8013f68:	af00      	add	r7, sp, #0
 8013f6a:	4603      	mov	r3, r0
 8013f6c:	460a      	mov	r2, r1
 8013f6e:	71fb      	strb	r3, [r7, #7]
 8013f70:	4613      	mov	r3, r2
 8013f72:	80bb      	strh	r3, [r7, #4]
	osRecursiveMutexWait(AudioBeepMutexHandle, osWaitForever);
 8013f74:	4b16      	ldr	r3, [pc, #88]	; (8013fd0 <WaveBeepPlay+0x6c>)
 8013f76:	681b      	ldr	r3, [r3, #0]
 8013f78:	f04f 31ff 	mov.w	r1, #4294967295
 8013f7c:	4618      	mov	r0, r3
 8013f7e:	f7f4 fdfd 	bl	8008b7c <osRecursiveMutexWait>
	pAudioDrv->SetBeep(AUDIO_I2C_ADDRESS, Frequency, 0, 0);
 8013f82:	4b14      	ldr	r3, [pc, #80]	; (8013fd4 <WaveBeepPlay+0x70>)
 8013f84:	681b      	ldr	r3, [r3, #0]
 8013f86:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8013f88:	79f9      	ldrb	r1, [r7, #7]
 8013f8a:	2300      	movs	r3, #0
 8013f8c:	2200      	movs	r2, #0
 8013f8e:	2094      	movs	r0, #148	; 0x94
 8013f90:	47a0      	blx	r4
	pAudioDrv->Beep(AUDIO_I2C_ADDRESS, BEEP_MODE_CONTINUOUS, BEEP_MIX_OFF);
 8013f92:	4b10      	ldr	r3, [pc, #64]	; (8013fd4 <WaveBeepPlay+0x70>)
 8013f94:	681b      	ldr	r3, [r3, #0]
 8013f96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013f98:	2201      	movs	r2, #1
 8013f9a:	2103      	movs	r1, #3
 8013f9c:	2094      	movs	r0, #148	; 0x94
 8013f9e:	4798      	blx	r3

	if (TimeMS > 0) {
 8013fa0:	88bb      	ldrh	r3, [r7, #4]
 8013fa2:	2b00      	cmp	r3, #0
 8013fa4:	d00a      	beq.n	8013fbc <WaveBeepPlay+0x58>
		// delay with RTOS
		osDelay(TimeMS);
 8013fa6:	88bb      	ldrh	r3, [r7, #4]
 8013fa8:	4618      	mov	r0, r3
 8013faa:	f7f4 f97e 	bl	80082aa <osDelay>
		// than stop
		pAudioDrv->Beep(AUDIO_I2C_ADDRESS, BEEP_MODE_OFF, BEEP_MIX_OFF);
 8013fae:	4b09      	ldr	r3, [pc, #36]	; (8013fd4 <WaveBeepPlay+0x70>)
 8013fb0:	681b      	ldr	r3, [r3, #0]
 8013fb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013fb4:	2201      	movs	r2, #1
 8013fb6:	2100      	movs	r1, #0
 8013fb8:	2094      	movs	r0, #148	; 0x94
 8013fba:	4798      	blx	r3
	}
	osRecursiveMutexRelease(AudioBeepMutexHandle);
 8013fbc:	4b04      	ldr	r3, [pc, #16]	; (8013fd0 <WaveBeepPlay+0x6c>)
 8013fbe:	681b      	ldr	r3, [r3, #0]
 8013fc0:	4618      	mov	r0, r3
 8013fc2:	f7f4 fdc8 	bl	8008b56 <osRecursiveMutexRelease>
}
 8013fc6:	bf00      	nop
 8013fc8:	370c      	adds	r7, #12
 8013fca:	46bd      	mov	sp, r7
 8013fcc:	bd90      	pop	{r4, r7, pc}
 8013fce:	bf00      	nop
 8013fd0:	2000876c 	.word	0x2000876c
 8013fd4:	20006bd4 	.word	0x20006bd4

08013fd8 <WaveBeepStop>:

void WaveBeepStop(void) {
 8013fd8:	b580      	push	{r7, lr}
 8013fda:	af00      	add	r7, sp, #0
	osRecursiveMutexWait(AudioBeepMutexHandle, osWaitForever);
 8013fdc:	4b0a      	ldr	r3, [pc, #40]	; (8014008 <WaveBeepStop+0x30>)
 8013fde:	681b      	ldr	r3, [r3, #0]
 8013fe0:	f04f 31ff 	mov.w	r1, #4294967295
 8013fe4:	4618      	mov	r0, r3
 8013fe6:	f7f4 fdc9 	bl	8008b7c <osRecursiveMutexWait>

	pAudioDrv->Beep(AUDIO_I2C_ADDRESS, BEEP_MODE_OFF, BEEP_MIX_OFF);
 8013fea:	4b08      	ldr	r3, [pc, #32]	; (801400c <WaveBeepStop+0x34>)
 8013fec:	681b      	ldr	r3, [r3, #0]
 8013fee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013ff0:	2201      	movs	r2, #1
 8013ff2:	2100      	movs	r1, #0
 8013ff4:	2094      	movs	r0, #148	; 0x94
 8013ff6:	4798      	blx	r3

	osRecursiveMutexRelease(AudioBeepMutexHandle);
 8013ff8:	4b03      	ldr	r3, [pc, #12]	; (8014008 <WaveBeepStop+0x30>)
 8013ffa:	681b      	ldr	r3, [r3, #0]
 8013ffc:	4618      	mov	r0, r3
 8013ffe:	f7f4 fdaa 	bl	8008b56 <osRecursiveMutexRelease>
}
 8014002:	bf00      	nop
 8014004:	bd80      	pop	{r7, pc}
 8014006:	bf00      	nop
 8014008:	2000876c 	.word	0x2000876c
 801400c:	20006bd4 	.word	0x20006bd4

08014010 <BSP_AUDIO_OUT_Init>:
 *                       OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO .
 * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
 * @param  AudioFreq: Audio frequency used to play the audio stream.
 * @retval AUDIO_OK if correct communication, else wrong communication
 */
uint8_t BSP_AUDIO_OUT_Init(uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq) {
 8014010:	b590      	push	{r4, r7, lr}
 8014012:	b085      	sub	sp, #20
 8014014:	af00      	add	r7, sp, #0
 8014016:	4603      	mov	r3, r0
 8014018:	603a      	str	r2, [r7, #0]
 801401a:	80fb      	strh	r3, [r7, #6]
 801401c:	460b      	mov	r3, r1
 801401e:	717b      	strb	r3, [r7, #5]
	uint8_t ret = AUDIO_OK;
 8014020:	2300      	movs	r3, #0
 8014022:	73fb      	strb	r3, [r7, #15]

	/* PLL clock is set depending by the AudioFreq (44.1khz vs 48khz groups) */
	BSP_AUDIO_OUT_ClockConfig(&hi2s3, AudioFreq, NULL);
 8014024:	2200      	movs	r2, #0
 8014026:	6839      	ldr	r1, [r7, #0]
 8014028:	481c      	ldr	r0, [pc, #112]	; (801409c <BSP_AUDIO_OUT_Init+0x8c>)
 801402a:	f000 f8cf 	bl	80141cc <BSP_AUDIO_OUT_ClockConfig>

	/* I2S data transfer preparation:
	 Prepare the Media to be used for the audio transfer from memory to I2S peripheral */
	hi2s3.Instance = I2S3;
 801402e:	4b1b      	ldr	r3, [pc, #108]	; (801409c <BSP_AUDIO_OUT_Init+0x8c>)
 8014030:	4a1b      	ldr	r2, [pc, #108]	; (80140a0 <BSP_AUDIO_OUT_Init+0x90>)
 8014032:	601a      	str	r2, [r3, #0]
	if (HAL_I2S_GetState(&hi2s3) == HAL_I2S_STATE_RESET) {
 8014034:	4819      	ldr	r0, [pc, #100]	; (801409c <BSP_AUDIO_OUT_Init+0x8c>)
 8014036:	f7f1 f845 	bl	80050c4 <HAL_I2S_GetState>
 801403a:	4603      	mov	r3, r0
 801403c:	2b00      	cmp	r3, #0
 801403e:	d103      	bne.n	8014048 <BSP_AUDIO_OUT_Init+0x38>
		/* Init the I2S MSP: this __weak function can be redefined by the application*/
		BSP_AUDIO_OUT_MspInit(&hi2s3, NULL);
 8014040:	2100      	movs	r1, #0
 8014042:	4816      	ldr	r0, [pc, #88]	; (801409c <BSP_AUDIO_OUT_Init+0x8c>)
 8014044:	f000 f91a 	bl	801427c <BSP_AUDIO_OUT_MspInit>
	}

	/* I2S data transfer preparation:
	 Prepare the Media to be used for the audio transfer from memory to I2S peripheral */
	/* Configure the I2S peripheral */
	if (I2S3_Init(AudioFreq) != AUDIO_OK) {
 8014048:	6838      	ldr	r0, [r7, #0]
 801404a:	f000 fa49 	bl	80144e0 <I2S3_Init>
 801404e:	4603      	mov	r3, r0
 8014050:	2b00      	cmp	r3, #0
 8014052:	d001      	beq.n	8014058 <BSP_AUDIO_OUT_Init+0x48>
		ret = AUDIO_ERROR;
 8014054:	2301      	movs	r3, #1
 8014056:	73fb      	strb	r3, [r7, #15]
	}

	if (ret == AUDIO_OK) {
 8014058:	7bfb      	ldrb	r3, [r7, #15]
 801405a:	2b00      	cmp	r3, #0
 801405c:	d10e      	bne.n	801407c <BSP_AUDIO_OUT_Init+0x6c>
		/* Retieve audio codec identifier */
		if (((cs43l22_drv.ReadID(AUDIO_I2C_ADDRESS)) & CS43L22_ID_MASK) == CS43L22_ID) {
 801405e:	4b11      	ldr	r3, [pc, #68]	; (80140a4 <BSP_AUDIO_OUT_Init+0x94>)
 8014060:	689b      	ldr	r3, [r3, #8]
 8014062:	2094      	movs	r0, #148	; 0x94
 8014064:	4798      	blx	r3
 8014066:	4603      	mov	r3, r0
 8014068:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801406c:	2be0      	cmp	r3, #224	; 0xe0
 801406e:	d103      	bne.n	8014078 <BSP_AUDIO_OUT_Init+0x68>
			/* Initialize the audio driver structure */
			pAudioDrv = &cs43l22_drv;
 8014070:	4b0d      	ldr	r3, [pc, #52]	; (80140a8 <BSP_AUDIO_OUT_Init+0x98>)
 8014072:	4a0c      	ldr	r2, [pc, #48]	; (80140a4 <BSP_AUDIO_OUT_Init+0x94>)
 8014074:	601a      	str	r2, [r3, #0]
 8014076:	e001      	b.n	801407c <BSP_AUDIO_OUT_Init+0x6c>
		} else {
			ret = AUDIO_ERROR;
 8014078:	2301      	movs	r3, #1
 801407a:	73fb      	strb	r3, [r7, #15]
		}
	}

	if (ret == AUDIO_OK) {
 801407c:	7bfb      	ldrb	r3, [r7, #15]
 801407e:	2b00      	cmp	r3, #0
 8014080:	d107      	bne.n	8014092 <BSP_AUDIO_OUT_Init+0x82>
		pAudioDrv->Init(AUDIO_I2C_ADDRESS, OutputDevice, Volume, AudioFreq);
 8014082:	4b09      	ldr	r3, [pc, #36]	; (80140a8 <BSP_AUDIO_OUT_Init+0x98>)
 8014084:	681b      	ldr	r3, [r3, #0]
 8014086:	681c      	ldr	r4, [r3, #0]
 8014088:	797a      	ldrb	r2, [r7, #5]
 801408a:	88f9      	ldrh	r1, [r7, #6]
 801408c:	683b      	ldr	r3, [r7, #0]
 801408e:	2094      	movs	r0, #148	; 0x94
 8014090:	47a0      	blx	r4
	}

	return ret;
 8014092:	7bfb      	ldrb	r3, [r7, #15]
}
 8014094:	4618      	mov	r0, r3
 8014096:	3714      	adds	r7, #20
 8014098:	46bd      	mov	sp, r7
 801409a:	bd90      	pop	{r4, r7, pc}
 801409c:	20008920 	.word	0x20008920
 80140a0:	40003c00 	.word	0x40003c00
 80140a4:	20000098 	.word	0x20000098
 80140a8:	20006bd4 	.word	0x20006bd4

080140ac <BSP_AUDIO_OUT_Play>:
 * @brief  Starts playing audio stream from a data buffer for a determined size.
 * @param  pBuffer: Pointer to the buffer
 * @param  Size: Number of audio data BYTES.
 * @retval AUDIO_OK if correct communication, else wrong communication
 */
uint8_t BSP_AUDIO_OUT_Play(uint16_t* pBuffer, uint32_t Size) {
 80140ac:	b580      	push	{r7, lr}
 80140ae:	b082      	sub	sp, #8
 80140b0:	af00      	add	r7, sp, #0
 80140b2:	6078      	str	r0, [r7, #4]
 80140b4:	6039      	str	r1, [r7, #0]
	/* Call the audio Codec Play function */
	if (pAudioDrv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0) {
 80140b6:	4b10      	ldr	r3, [pc, #64]	; (80140f8 <BSP_AUDIO_OUT_Play+0x4c>)
 80140b8:	681b      	ldr	r3, [r3, #0]
 80140ba:	68db      	ldr	r3, [r3, #12]
 80140bc:	683a      	ldr	r2, [r7, #0]
 80140be:	b292      	uxth	r2, r2
 80140c0:	6879      	ldr	r1, [r7, #4]
 80140c2:	2094      	movs	r0, #148	; 0x94
 80140c4:	4798      	blx	r3
 80140c6:	4603      	mov	r3, r0
 80140c8:	2b00      	cmp	r3, #0
 80140ca:	d001      	beq.n	80140d0 <BSP_AUDIO_OUT_Play+0x24>
		return AUDIO_ERROR;
 80140cc:	2301      	movs	r3, #1
 80140ce:	e00f      	b.n	80140f0 <BSP_AUDIO_OUT_Play+0x44>
	} else {
		/* Update the Media layer and enable it for play */
		HAL_I2S_Transmit_DMA(&hi2s3, pBuffer, DMA_MAX(Size/AUDIODATA_SIZE));
 80140d0:	683b      	ldr	r3, [r7, #0]
 80140d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80140d6:	d203      	bcs.n	80140e0 <BSP_AUDIO_OUT_Play+0x34>
 80140d8:	683b      	ldr	r3, [r7, #0]
 80140da:	085b      	lsrs	r3, r3, #1
 80140dc:	b29b      	uxth	r3, r3
 80140de:	e001      	b.n	80140e4 <BSP_AUDIO_OUT_Play+0x38>
 80140e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80140e4:	461a      	mov	r2, r3
 80140e6:	6879      	ldr	r1, [r7, #4]
 80140e8:	4804      	ldr	r0, [pc, #16]	; (80140fc <BSP_AUDIO_OUT_Play+0x50>)
 80140ea:	f7f0 ff23 	bl	8004f34 <HAL_I2S_Transmit_DMA>

		/* Return AUDIO_OK when all operations are correctly done */
		return AUDIO_OK;
 80140ee:	2300      	movs	r3, #0
	}
}
 80140f0:	4618      	mov	r0, r3
 80140f2:	3708      	adds	r7, #8
 80140f4:	46bd      	mov	sp, r7
 80140f6:	bd80      	pop	{r7, pc}
 80140f8:	20006bd4 	.word	0x20006bd4
 80140fc:	20008920 	.word	0x20008920

08014100 <BSP_AUDIO_OUT_ChangeBuffer>:
/**
 * @brief  Sends n-Bytes on the I2S interface.
 * @param  pData: Pointer to data address
 * @param  Size: Number of data to be written
 */
void BSP_AUDIO_OUT_ChangeBuffer(uint16_t *pData, uint16_t Size) {
 8014100:	b580      	push	{r7, lr}
 8014102:	b082      	sub	sp, #8
 8014104:	af00      	add	r7, sp, #0
 8014106:	6078      	str	r0, [r7, #4]
 8014108:	460b      	mov	r3, r1
 801410a:	807b      	strh	r3, [r7, #2]
	HAL_I2S_Transmit_DMA(&hi2s3, pData, DMA_MAX(Size/AUDIODATA_SIZE));
 801410c:	887b      	ldrh	r3, [r7, #2]
 801410e:	085b      	lsrs	r3, r3, #1
 8014110:	b29b      	uxth	r3, r3
 8014112:	461a      	mov	r2, r3
 8014114:	6879      	ldr	r1, [r7, #4]
 8014116:	4803      	ldr	r0, [pc, #12]	; (8014124 <BSP_AUDIO_OUT_ChangeBuffer+0x24>)
 8014118:	f7f0 ff0c 	bl	8004f34 <HAL_I2S_Transmit_DMA>
}
 801411c:	bf00      	nop
 801411e:	3708      	adds	r7, #8
 8014120:	46bd      	mov	sp, r7
 8014122:	bd80      	pop	{r7, pc}
 8014124:	20008920 	.word	0x20008920

08014128 <BSP_AUDIO_OUT_SetVolume>:
 * @brief  Controls the current audio volume level.
 * @param  Volume: Volume level to be set in percentage from 0% to 100% (0 for
 *         Mute and 100 for Max volume level).
 * @retval AUDIO_OK if correct communication, else wrong communication
 */
uint8_t BSP_AUDIO_OUT_SetVolume(uint8_t Volume) {
 8014128:	b580      	push	{r7, lr}
 801412a:	b082      	sub	sp, #8
 801412c:	af00      	add	r7, sp, #0
 801412e:	4603      	mov	r3, r0
 8014130:	71fb      	strb	r3, [r7, #7]
	/* Call the codec volume control function with converted volume value */
	if (pAudioDrv->SetVolume(AUDIO_I2C_ADDRESS, Volume) != 0) {
 8014132:	4b08      	ldr	r3, [pc, #32]	; (8014154 <BSP_AUDIO_OUT_SetVolume+0x2c>)
 8014134:	681b      	ldr	r3, [r3, #0]
 8014136:	6a1b      	ldr	r3, [r3, #32]
 8014138:	79fa      	ldrb	r2, [r7, #7]
 801413a:	4611      	mov	r1, r2
 801413c:	2094      	movs	r0, #148	; 0x94
 801413e:	4798      	blx	r3
 8014140:	4603      	mov	r3, r0
 8014142:	2b00      	cmp	r3, #0
 8014144:	d001      	beq.n	801414a <BSP_AUDIO_OUT_SetVolume+0x22>
		return AUDIO_ERROR;
 8014146:	2301      	movs	r3, #1
 8014148:	e000      	b.n	801414c <BSP_AUDIO_OUT_SetVolume+0x24>
	} else {
		/* Return AUDIO_OK when all operations are correctly done */
		return AUDIO_OK;
 801414a:	2300      	movs	r3, #0
	}
}
 801414c:	4618      	mov	r0, r3
 801414e:	3708      	adds	r7, #8
 8014150:	46bd      	mov	sp, r7
 8014152:	bd80      	pop	{r7, pc}
 8014154:	20006bd4 	.word	0x20006bd4

08014158 <BSP_AUDIO_OUT_SetMute>:
 * @brief  Enables or disables the MUTE mode by software
 * @param  Cmd: could be AUDIO_MUTE_ON to mute sound or AUDIO_MUTE_OFF to
 *         unmute the codec and restore previous volume level.
 * @retval AUDIO_OK if correct communication, else wrong communication
 */
uint8_t BSP_AUDIO_OUT_SetMute(uint32_t Cmd) {
 8014158:	b580      	push	{r7, lr}
 801415a:	b082      	sub	sp, #8
 801415c:	af00      	add	r7, sp, #0
 801415e:	6078      	str	r0, [r7, #4]
	/* Call the Codec Mute function */
	if (pAudioDrv->SetMute(AUDIO_I2C_ADDRESS, Cmd) != 0) {
 8014160:	4b07      	ldr	r3, [pc, #28]	; (8014180 <BSP_AUDIO_OUT_SetMute+0x28>)
 8014162:	681b      	ldr	r3, [r3, #0]
 8014164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014166:	6879      	ldr	r1, [r7, #4]
 8014168:	2094      	movs	r0, #148	; 0x94
 801416a:	4798      	blx	r3
 801416c:	4603      	mov	r3, r0
 801416e:	2b00      	cmp	r3, #0
 8014170:	d001      	beq.n	8014176 <BSP_AUDIO_OUT_SetMute+0x1e>
		return AUDIO_ERROR;
 8014172:	2301      	movs	r3, #1
 8014174:	e000      	b.n	8014178 <BSP_AUDIO_OUT_SetMute+0x20>
	} else {
		/* Return AUDIO_OK when all operations are correctly done */
		return AUDIO_OK;
 8014176:	2300      	movs	r3, #0
	}
}
 8014178:	4618      	mov	r0, r3
 801417a:	3708      	adds	r7, #8
 801417c:	46bd      	mov	sp, r7
 801417e:	bd80      	pop	{r7, pc}
 8014180:	20006bd4 	.word	0x20006bd4

08014184 <HAL_I2S_TxCpltCallback>:

/**
 * @brief  Tx Transfer completed callbacks.
 * @param  hi2s: I2S handle
 */
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s) {
 8014184:	b580      	push	{r7, lr}
 8014186:	b082      	sub	sp, #8
 8014188:	af00      	add	r7, sp, #0
 801418a:	6078      	str	r0, [r7, #4]
	if (hi2s->Instance == I2S3) {
 801418c:	687b      	ldr	r3, [r7, #4]
 801418e:	681b      	ldr	r3, [r3, #0]
 8014190:	4a04      	ldr	r2, [pc, #16]	; (80141a4 <HAL_I2S_TxCpltCallback+0x20>)
 8014192:	4293      	cmp	r3, r2
 8014194:	d101      	bne.n	801419a <HAL_I2S_TxCpltCallback+0x16>
		/* Call the user function which will manage directly transfer complete */
		BSP_AUDIO_OUT_TransferComplete_CallBack();
 8014196:	f000 f931 	bl	80143fc <BSP_AUDIO_OUT_TransferComplete_CallBack>
	}
}
 801419a:	bf00      	nop
 801419c:	3708      	adds	r7, #8
 801419e:	46bd      	mov	sp, r7
 80141a0:	bd80      	pop	{r7, pc}
 80141a2:	bf00      	nop
 80141a4:	40003c00 	.word	0x40003c00

080141a8 <HAL_I2S_TxHalfCpltCallback>:

/**
 * @brief  Tx Half Transfer completed callbacks.
 * @param  hi2s: I2S handle
 */
void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s) {
 80141a8:	b580      	push	{r7, lr}
 80141aa:	b082      	sub	sp, #8
 80141ac:	af00      	add	r7, sp, #0
 80141ae:	6078      	str	r0, [r7, #4]
	if (hi2s->Instance == I2S3) {
 80141b0:	687b      	ldr	r3, [r7, #4]
 80141b2:	681b      	ldr	r3, [r3, #0]
 80141b4:	4a04      	ldr	r2, [pc, #16]	; (80141c8 <HAL_I2S_TxHalfCpltCallback+0x20>)
 80141b6:	4293      	cmp	r3, r2
 80141b8:	d101      	bne.n	80141be <HAL_I2S_TxHalfCpltCallback+0x16>
		/* Manage the remaining file size and new address offset: This function should
		 be coded by user (its prototype is already declared in stm32f4_discovery_audio.h) */
		BSP_AUDIO_OUT_HalfTransfer_CallBack();
 80141ba:	f000 f969 	bl	8014490 <BSP_AUDIO_OUT_HalfTransfer_CallBack>
	}
}
 80141be:	bf00      	nop
 80141c0:	3708      	adds	r7, #8
 80141c2:	46bd      	mov	sp, r7
 80141c4:	bd80      	pop	{r7, pc}
 80141c6:	bf00      	nop
 80141c8:	40003c00 	.word	0x40003c00

080141cc <BSP_AUDIO_OUT_ClockConfig>:
 * @param  AudioFreq: Audio frequency used to play the audio stream.
 * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
 *         Being __weak it can be overwritten by the application
 * @param  Params : pointer on additional configuration parameters, can be NULL.
 */
__weak void BSP_AUDIO_OUT_ClockConfig(I2S_HandleTypeDef *hi2s, uint32_t AudioFreq, void *Params) {
 80141cc:	b580      	push	{r7, lr}
 80141ce:	b08a      	sub	sp, #40	; 0x28
 80141d0:	af00      	add	r7, sp, #0
 80141d2:	60f8      	str	r0, [r7, #12]
 80141d4:	60b9      	str	r1, [r7, #8]
 80141d6:	607a      	str	r2, [r7, #4]
	RCC_PeriphCLKInitTypeDef rccclkinit;
	uint8_t index = 0, freqindex = 0xFF;
 80141d8:	2300      	movs	r3, #0
 80141da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80141de:	23ff      	movs	r3, #255	; 0xff
 80141e0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	for (index = 0; index < 8; index++) {
 80141e4:	2300      	movs	r3, #0
 80141e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80141ea:	e010      	b.n	801420e <BSP_AUDIO_OUT_ClockConfig+0x42>
		if (I2SFreq[index] == AudioFreq) {
 80141ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80141f0:	4a1f      	ldr	r2, [pc, #124]	; (8014270 <BSP_AUDIO_OUT_ClockConfig+0xa4>)
 80141f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80141f6:	68ba      	ldr	r2, [r7, #8]
 80141f8:	429a      	cmp	r2, r3
 80141fa:	d103      	bne.n	8014204 <BSP_AUDIO_OUT_ClockConfig+0x38>
			freqindex = index;
 80141fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014200:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	for (index = 0; index < 8; index++) {
 8014204:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014208:	3301      	adds	r3, #1
 801420a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801420e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014212:	2b07      	cmp	r3, #7
 8014214:	d9ea      	bls.n	80141ec <BSP_AUDIO_OUT_ClockConfig+0x20>
		}
	}
	/* Enable PLLI2S clock */
	HAL_RCCEx_GetPeriphCLKConfig(&rccclkinit);
 8014216:	f107 0314 	add.w	r3, r7, #20
 801421a:	4618      	mov	r0, r3
 801421c:	f7f2 f83a 	bl	8006294 <HAL_RCCEx_GetPeriphCLKConfig>
	/* PLLI2S_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	// FIXME: why this bellow code unlogicable
	//	if ((freqindex & 0x7) == 0) {
	if (freqindex != 0xFF) {
 8014220:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014224:	2bff      	cmp	r3, #255	; 0xff
 8014226:	d013      	beq.n	8014250 <BSP_AUDIO_OUT_ClockConfig+0x84>
		/* I2S clock config
		 PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) � (PLLI2SN/PLLM)
		 I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
		rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8014228:	2301      	movs	r3, #1
 801422a:	617b      	str	r3, [r7, #20]
		rccclkinit.PLLI2S.PLLI2SN = I2SPLLN[freqindex];
 801422c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014230:	4a10      	ldr	r2, [pc, #64]	; (8014274 <BSP_AUDIO_OUT_ClockConfig+0xa8>)
 8014232:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014236:	61bb      	str	r3, [r7, #24]
		rccclkinit.PLLI2S.PLLI2SR = I2SPLLR[freqindex];
 8014238:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801423c:	4a0e      	ldr	r2, [pc, #56]	; (8014278 <BSP_AUDIO_OUT_ClockConfig+0xac>)
 801423e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014242:	61fb      	str	r3, [r7, #28]
		HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8014244:	f107 0314 	add.w	r3, r7, #20
 8014248:	4618      	mov	r0, r3
 801424a:	f7f1 ff41 	bl	80060d0 <HAL_RCCEx_PeriphCLKConfig>
		rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
		rccclkinit.PLLI2S.PLLI2SN = 258;
		rccclkinit.PLLI2S.PLLI2SR = 3;
		HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
	}
}
 801424e:	e00b      	b.n	8014268 <BSP_AUDIO_OUT_ClockConfig+0x9c>
		rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8014250:	2301      	movs	r3, #1
 8014252:	617b      	str	r3, [r7, #20]
		rccclkinit.PLLI2S.PLLI2SN = 258;
 8014254:	f44f 7381 	mov.w	r3, #258	; 0x102
 8014258:	61bb      	str	r3, [r7, #24]
		rccclkinit.PLLI2S.PLLI2SR = 3;
 801425a:	2303      	movs	r3, #3
 801425c:	61fb      	str	r3, [r7, #28]
		HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 801425e:	f107 0314 	add.w	r3, r7, #20
 8014262:	4618      	mov	r0, r3
 8014264:	f7f1 ff34 	bl	80060d0 <HAL_RCCEx_PeriphCLKConfig>
}
 8014268:	bf00      	nop
 801426a:	3728      	adds	r7, #40	; 0x28
 801426c:	46bd      	mov	sp, r7
 801426e:	bd80      	pop	{r7, pc}
 8014270:	0802b2d4 	.word	0x0802b2d4
 8014274:	0802b2f4 	.word	0x0802b2f4
 8014278:	0802b314 	.word	0x0802b314

0801427c <BSP_AUDIO_OUT_MspInit>:
/**
 * @brief  AUDIO OUT I2S MSP Init.
 * @param  hi2s: might be required to set audio peripheral predivider if any.
 * @param  Params : pointer on additional configuration parameters, can be NULL.
 */
__weak void BSP_AUDIO_OUT_MspInit(I2S_HandleTypeDef *hi2s, void *Params) {
 801427c:	b580      	push	{r7, lr}
 801427e:	b08c      	sub	sp, #48	; 0x30
 8014280:	af00      	add	r7, sp, #0
 8014282:	6078      	str	r0, [r7, #4]
 8014284:	6039      	str	r1, [r7, #0]
	static DMA_HandleTypeDef hdma_i2sTx;
	GPIO_InitTypeDef GPIO_InitStruct;

	/* Enable I2S3 clock */
	I2S3_CLK_ENABLE()
 8014286:	2300      	movs	r3, #0
 8014288:	61bb      	str	r3, [r7, #24]
 801428a:	4b56      	ldr	r3, [pc, #344]	; (80143e4 <BSP_AUDIO_OUT_MspInit+0x168>)
 801428c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801428e:	4a55      	ldr	r2, [pc, #340]	; (80143e4 <BSP_AUDIO_OUT_MspInit+0x168>)
 8014290:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8014294:	6413      	str	r3, [r2, #64]	; 0x40
 8014296:	4b53      	ldr	r3, [pc, #332]	; (80143e4 <BSP_AUDIO_OUT_MspInit+0x168>)
 8014298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801429a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801429e:	61bb      	str	r3, [r7, #24]
 80142a0:	69bb      	ldr	r3, [r7, #24]
	;

	/*** Configure the GPIOs ***/
	/* Enable I2S GPIO clocks */
	I2S3_SCK_SD_CLK_ENABLE()
 80142a2:	2300      	movs	r3, #0
 80142a4:	617b      	str	r3, [r7, #20]
 80142a6:	4b4f      	ldr	r3, [pc, #316]	; (80143e4 <BSP_AUDIO_OUT_MspInit+0x168>)
 80142a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80142aa:	4a4e      	ldr	r2, [pc, #312]	; (80143e4 <BSP_AUDIO_OUT_MspInit+0x168>)
 80142ac:	f043 0304 	orr.w	r3, r3, #4
 80142b0:	6313      	str	r3, [r2, #48]	; 0x30
 80142b2:	4b4c      	ldr	r3, [pc, #304]	; (80143e4 <BSP_AUDIO_OUT_MspInit+0x168>)
 80142b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80142b6:	f003 0304 	and.w	r3, r3, #4
 80142ba:	617b      	str	r3, [r7, #20]
 80142bc:	697b      	ldr	r3, [r7, #20]
	;
	I2S3_WS_CLK_ENABLE()
 80142be:	2300      	movs	r3, #0
 80142c0:	613b      	str	r3, [r7, #16]
 80142c2:	4b48      	ldr	r3, [pc, #288]	; (80143e4 <BSP_AUDIO_OUT_MspInit+0x168>)
 80142c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80142c6:	4a47      	ldr	r2, [pc, #284]	; (80143e4 <BSP_AUDIO_OUT_MspInit+0x168>)
 80142c8:	f043 0301 	orr.w	r3, r3, #1
 80142cc:	6313      	str	r3, [r2, #48]	; 0x30
 80142ce:	4b45      	ldr	r3, [pc, #276]	; (80143e4 <BSP_AUDIO_OUT_MspInit+0x168>)
 80142d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80142d2:	f003 0301 	and.w	r3, r3, #1
 80142d6:	613b      	str	r3, [r7, #16]
 80142d8:	693b      	ldr	r3, [r7, #16]
	;

	/* I2S3 pins configuration: WS, SCK and SD pins ----------------------------*/
	GPIO_InitStruct.Pin = I2S3_SCK_PIN | I2S3_SD_PIN;
 80142da:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80142de:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80142e0:	2302      	movs	r3, #2
 80142e2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80142e4:	2300      	movs	r3, #0
 80142e6:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80142e8:	2302      	movs	r3, #2
 80142ea:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = I2S3_SCK_SD_WS_AF;
 80142ec:	2306      	movs	r3, #6
 80142ee:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(I2S3_SCK_SD_GPIO_PORT, &GPIO_InitStruct);
 80142f0:	f107 031c 	add.w	r3, r7, #28
 80142f4:	4619      	mov	r1, r3
 80142f6:	483c      	ldr	r0, [pc, #240]	; (80143e8 <BSP_AUDIO_OUT_MspInit+0x16c>)
 80142f8:	f7ee fcb4 	bl	8002c64 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = I2S3_WS_PIN;
 80142fc:	2310      	movs	r3, #16
 80142fe:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(I2S3_WS_GPIO_PORT, &GPIO_InitStruct);
 8014300:	f107 031c 	add.w	r3, r7, #28
 8014304:	4619      	mov	r1, r3
 8014306:	4839      	ldr	r0, [pc, #228]	; (80143ec <BSP_AUDIO_OUT_MspInit+0x170>)
 8014308:	f7ee fcac 	bl	8002c64 <HAL_GPIO_Init>

	/* I2S3 pins configuration: MCK pin */
	I2S3_MCK_CLK_ENABLE()
 801430c:	2300      	movs	r3, #0
 801430e:	60fb      	str	r3, [r7, #12]
 8014310:	4b34      	ldr	r3, [pc, #208]	; (80143e4 <BSP_AUDIO_OUT_MspInit+0x168>)
 8014312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014314:	4a33      	ldr	r2, [pc, #204]	; (80143e4 <BSP_AUDIO_OUT_MspInit+0x168>)
 8014316:	f043 0304 	orr.w	r3, r3, #4
 801431a:	6313      	str	r3, [r2, #48]	; 0x30
 801431c:	4b31      	ldr	r3, [pc, #196]	; (80143e4 <BSP_AUDIO_OUT_MspInit+0x168>)
 801431e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014320:	f003 0304 	and.w	r3, r3, #4
 8014324:	60fb      	str	r3, [r7, #12]
 8014326:	68fb      	ldr	r3, [r7, #12]
	;
	GPIO_InitStruct.Pin = I2S3_MCK_PIN;
 8014328:	2380      	movs	r3, #128	; 0x80
 801432a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(I2S3_MCK_GPIO_PORT, &GPIO_InitStruct);
 801432c:	f107 031c 	add.w	r3, r7, #28
 8014330:	4619      	mov	r1, r3
 8014332:	482d      	ldr	r0, [pc, #180]	; (80143e8 <BSP_AUDIO_OUT_MspInit+0x16c>)
 8014334:	f7ee fc96 	bl	8002c64 <HAL_GPIO_Init>

	/* Enable the I2S DMA clock */
	I2S3_DMAx_CLK_ENABLE()
 8014338:	2300      	movs	r3, #0
 801433a:	60bb      	str	r3, [r7, #8]
 801433c:	4b29      	ldr	r3, [pc, #164]	; (80143e4 <BSP_AUDIO_OUT_MspInit+0x168>)
 801433e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014340:	4a28      	ldr	r2, [pc, #160]	; (80143e4 <BSP_AUDIO_OUT_MspInit+0x168>)
 8014342:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8014346:	6313      	str	r3, [r2, #48]	; 0x30
 8014348:	4b26      	ldr	r3, [pc, #152]	; (80143e4 <BSP_AUDIO_OUT_MspInit+0x168>)
 801434a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801434c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8014350:	60bb      	str	r3, [r7, #8]
 8014352:	68bb      	ldr	r3, [r7, #8]
	;

	if (hi2s->Instance == I2S3) {
 8014354:	687b      	ldr	r3, [r7, #4]
 8014356:	681b      	ldr	r3, [r3, #0]
 8014358:	4a25      	ldr	r2, [pc, #148]	; (80143f0 <BSP_AUDIO_OUT_MspInit+0x174>)
 801435a:	4293      	cmp	r3, r2
 801435c:	d136      	bne.n	80143cc <BSP_AUDIO_OUT_MspInit+0x150>
		/* Configure the hdma_i2sTx handle parameters */
		hdma_i2sTx.Init.Channel = I2S3_DMAx_CHANNEL;
 801435e:	4b25      	ldr	r3, [pc, #148]	; (80143f4 <BSP_AUDIO_OUT_MspInit+0x178>)
 8014360:	2200      	movs	r2, #0
 8014362:	605a      	str	r2, [r3, #4]
		hdma_i2sTx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8014364:	4b23      	ldr	r3, [pc, #140]	; (80143f4 <BSP_AUDIO_OUT_MspInit+0x178>)
 8014366:	2240      	movs	r2, #64	; 0x40
 8014368:	609a      	str	r2, [r3, #8]
		hdma_i2sTx.Init.PeriphInc = DMA_PINC_DISABLE;
 801436a:	4b22      	ldr	r3, [pc, #136]	; (80143f4 <BSP_AUDIO_OUT_MspInit+0x178>)
 801436c:	2200      	movs	r2, #0
 801436e:	60da      	str	r2, [r3, #12]
		hdma_i2sTx.Init.MemInc = DMA_MINC_ENABLE;
 8014370:	4b20      	ldr	r3, [pc, #128]	; (80143f4 <BSP_AUDIO_OUT_MspInit+0x178>)
 8014372:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8014376:	611a      	str	r2, [r3, #16]
		hdma_i2sTx.Init.PeriphDataAlignment = I2S3_DMAx_PERIPH_DATA_SIZE;
 8014378:	4b1e      	ldr	r3, [pc, #120]	; (80143f4 <BSP_AUDIO_OUT_MspInit+0x178>)
 801437a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801437e:	615a      	str	r2, [r3, #20]
		hdma_i2sTx.Init.MemDataAlignment = I2S3_DMAx_MEM_DATA_SIZE;
 8014380:	4b1c      	ldr	r3, [pc, #112]	; (80143f4 <BSP_AUDIO_OUT_MspInit+0x178>)
 8014382:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8014386:	619a      	str	r2, [r3, #24]
		hdma_i2sTx.Init.Mode = DMA_NORMAL;
 8014388:	4b1a      	ldr	r3, [pc, #104]	; (80143f4 <BSP_AUDIO_OUT_MspInit+0x178>)
 801438a:	2200      	movs	r2, #0
 801438c:	61da      	str	r2, [r3, #28]
		hdma_i2sTx.Init.Priority = DMA_PRIORITY_HIGH;
 801438e:	4b19      	ldr	r3, [pc, #100]	; (80143f4 <BSP_AUDIO_OUT_MspInit+0x178>)
 8014390:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8014394:	621a      	str	r2, [r3, #32]
		hdma_i2sTx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8014396:	4b17      	ldr	r3, [pc, #92]	; (80143f4 <BSP_AUDIO_OUT_MspInit+0x178>)
 8014398:	2204      	movs	r2, #4
 801439a:	625a      	str	r2, [r3, #36]	; 0x24
		hdma_i2sTx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 801439c:	4b15      	ldr	r3, [pc, #84]	; (80143f4 <BSP_AUDIO_OUT_MspInit+0x178>)
 801439e:	2203      	movs	r2, #3
 80143a0:	629a      	str	r2, [r3, #40]	; 0x28
		hdma_i2sTx.Init.MemBurst = DMA_MBURST_SINGLE;
 80143a2:	4b14      	ldr	r3, [pc, #80]	; (80143f4 <BSP_AUDIO_OUT_MspInit+0x178>)
 80143a4:	2200      	movs	r2, #0
 80143a6:	62da      	str	r2, [r3, #44]	; 0x2c
		hdma_i2sTx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80143a8:	4b12      	ldr	r3, [pc, #72]	; (80143f4 <BSP_AUDIO_OUT_MspInit+0x178>)
 80143aa:	2200      	movs	r2, #0
 80143ac:	631a      	str	r2, [r3, #48]	; 0x30

		hdma_i2sTx.Instance = I2S3_DMAx_STREAM;
 80143ae:	4b11      	ldr	r3, [pc, #68]	; (80143f4 <BSP_AUDIO_OUT_MspInit+0x178>)
 80143b0:	4a11      	ldr	r2, [pc, #68]	; (80143f8 <BSP_AUDIO_OUT_MspInit+0x17c>)
 80143b2:	601a      	str	r2, [r3, #0]

		/* Associate the DMA handle */
		__HAL_LINKDMA(hi2s, hdmatx, hdma_i2sTx);
 80143b4:	687b      	ldr	r3, [r7, #4]
 80143b6:	4a0f      	ldr	r2, [pc, #60]	; (80143f4 <BSP_AUDIO_OUT_MspInit+0x178>)
 80143b8:	639a      	str	r2, [r3, #56]	; 0x38
 80143ba:	4a0e      	ldr	r2, [pc, #56]	; (80143f4 <BSP_AUDIO_OUT_MspInit+0x178>)
 80143bc:	687b      	ldr	r3, [r7, #4]
 80143be:	6393      	str	r3, [r2, #56]	; 0x38

		/* Deinitialize the Stream for new transfer */
		HAL_DMA_DeInit(&hdma_i2sTx);
 80143c0:	480c      	ldr	r0, [pc, #48]	; (80143f4 <BSP_AUDIO_OUT_MspInit+0x178>)
 80143c2:	f7ed fe43 	bl	800204c <HAL_DMA_DeInit>

		/* Configure the DMA Stream */
		HAL_DMA_Init(&hdma_i2sTx);
 80143c6:	480b      	ldr	r0, [pc, #44]	; (80143f4 <BSP_AUDIO_OUT_MspInit+0x178>)
 80143c8:	f7ed fd92 	bl	8001ef0 <HAL_DMA_Init>
	}

	/* I2S DMA IRQ Channel configuration */
	HAL_NVIC_SetPriority(I2S3_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 80143cc:	2200      	movs	r2, #0
 80143ce:	210e      	movs	r1, #14
 80143d0:	202f      	movs	r0, #47	; 0x2f
 80143d2:	f7ed fd63 	bl	8001e9c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(I2S3_DMAx_IRQ);
 80143d6:	202f      	movs	r0, #47	; 0x2f
 80143d8:	f7ed fd7c 	bl	8001ed4 <HAL_NVIC_EnableIRQ>
}
 80143dc:	bf00      	nop
 80143de:	3730      	adds	r7, #48	; 0x30
 80143e0:	46bd      	mov	sp, r7
 80143e2:	bd80      	pop	{r7, pc}
 80143e4:	40023800 	.word	0x40023800
 80143e8:	40020800 	.word	0x40020800
 80143ec:	40020000 	.word	0x40020000
 80143f0:	40003c00 	.word	0x40003c00
 80143f4:	20006be4 	.word	0x20006be4
 80143f8:	400260b8 	.word	0x400260b8

080143fc <BSP_AUDIO_OUT_TransferComplete_CallBack>:
}

/**
 * @brief  Manages the DMA full Transfer complete event.
 */
__weak void BSP_AUDIO_OUT_TransferComplete_CallBack(void) {
 80143fc:	b580      	push	{r7, lr}
 80143fe:	af00      	add	r7, sp, #0
	if (!AudioPlayDone) {
 8014400:	4b1e      	ldr	r3, [pc, #120]	; (801447c <BSP_AUDIO_OUT_TransferComplete_CallBack+0x80>)
 8014402:	781b      	ldrb	r3, [r3, #0]
 8014404:	b2db      	uxtb	r3, r3
 8014406:	2b00      	cmp	r3, #0
 8014408:	d10f      	bne.n	801442a <BSP_AUDIO_OUT_TransferComplete_CallBack+0x2e>
		BSP_AUDIO_OUT_ChangeBuffer((uint16_t*) (AUDIO_SAMPLE + ((AUDIO_SAMPLE_SIZE - AudioRemSize) / AUDIODATA_SIZE)), AudioPlaySize);
 801440a:	4b1d      	ldr	r3, [pc, #116]	; (8014480 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x84>)
 801440c:	681a      	ldr	r2, [r3, #0]
 801440e:	4b1d      	ldr	r3, [pc, #116]	; (8014484 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x88>)
 8014410:	681b      	ldr	r3, [r3, #0]
 8014412:	1ad3      	subs	r3, r2, r3
 8014414:	f023 0301 	bic.w	r3, r3, #1
 8014418:	4a1b      	ldr	r2, [pc, #108]	; (8014488 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x8c>)
 801441a:	441a      	add	r2, r3
 801441c:	4b1b      	ldr	r3, [pc, #108]	; (801448c <BSP_AUDIO_OUT_TransferComplete_CallBack+0x90>)
 801441e:	881b      	ldrh	r3, [r3, #0]
 8014420:	4619      	mov	r1, r3
 8014422:	4610      	mov	r0, r2
 8014424:	f7ff fe6c 	bl	8014100 <BSP_AUDIO_OUT_ChangeBuffer>
 8014428:	e018      	b.n	801445c <BSP_AUDIO_OUT_TransferComplete_CallBack+0x60>
	} else {
		/* Get data size from audio file */
		AudioRemSize = AUDIO_SAMPLE_SIZE;
 801442a:	4b15      	ldr	r3, [pc, #84]	; (8014480 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x84>)
 801442c:	681b      	ldr	r3, [r3, #0]
 801442e:	4a15      	ldr	r2, [pc, #84]	; (8014484 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x88>)
 8014430:	6013      	str	r3, [r2, #0]
		/* Get total data to be played */
		if (AUDIO_SAMPLE_SIZE > AUDIO_BUFFER_SIZE) {
 8014432:	4b13      	ldr	r3, [pc, #76]	; (8014480 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x84>)
 8014434:	681b      	ldr	r3, [r3, #0]
 8014436:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801443a:	d904      	bls.n	8014446 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x4a>
			AudioPlaySize = AUDIO_BUFFER_SIZE;
 801443c:	4b13      	ldr	r3, [pc, #76]	; (801448c <BSP_AUDIO_OUT_TransferComplete_CallBack+0x90>)
 801443e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8014442:	801a      	strh	r2, [r3, #0]
 8014444:	e004      	b.n	8014450 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x54>
		} else {
			AudioPlaySize = AUDIO_SAMPLE_SIZE;
 8014446:	4b0e      	ldr	r3, [pc, #56]	; (8014480 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x84>)
 8014448:	681b      	ldr	r3, [r3, #0]
 801444a:	b29a      	uxth	r2, r3
 801444c:	4b0f      	ldr	r3, [pc, #60]	; (801448c <BSP_AUDIO_OUT_TransferComplete_CallBack+0x90>)
 801444e:	801a      	strh	r2, [r3, #0]
		}

		/* Start playing Wave again*/
		BSP_AUDIO_OUT_ChangeBuffer((uint16_t*) AUDIO_SAMPLE, AudioPlaySize);
 8014450:	4b0e      	ldr	r3, [pc, #56]	; (801448c <BSP_AUDIO_OUT_TransferComplete_CallBack+0x90>)
 8014452:	881b      	ldrh	r3, [r3, #0]
 8014454:	4619      	mov	r1, r3
 8014456:	480c      	ldr	r0, [pc, #48]	; (8014488 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x8c>)
 8014458:	f7ff fe52 	bl	8014100 <BSP_AUDIO_OUT_ChangeBuffer>
	}

	AudioPlayDone = (AudioPlaySize == AudioRemSize);
 801445c:	4b0b      	ldr	r3, [pc, #44]	; (801448c <BSP_AUDIO_OUT_TransferComplete_CallBack+0x90>)
 801445e:	881b      	ldrh	r3, [r3, #0]
 8014460:	461a      	mov	r2, r3
 8014462:	4b08      	ldr	r3, [pc, #32]	; (8014484 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x88>)
 8014464:	681b      	ldr	r3, [r3, #0]
 8014466:	429a      	cmp	r2, r3
 8014468:	bf0c      	ite	eq
 801446a:	2301      	moveq	r3, #1
 801446c:	2300      	movne	r3, #0
 801446e:	b2db      	uxtb	r3, r3
 8014470:	461a      	mov	r2, r3
 8014472:	4b02      	ldr	r3, [pc, #8]	; (801447c <BSP_AUDIO_OUT_TransferComplete_CallBack+0x80>)
 8014474:	701a      	strb	r2, [r3, #0]
}
 8014476:	bf00      	nop
 8014478:	bd80      	pop	{r7, pc}
 801447a:	bf00      	nop
 801447c:	20006bd8 	.word	0x20006bd8
 8014480:	08019308 	.word	0x08019308
 8014484:	20006bdc 	.word	0x20006bdc
 8014488:	0801930c 	.word	0x0801930c
 801448c:	20006be0 	.word	0x20006be0

08014490 <BSP_AUDIO_OUT_HalfTransfer_CallBack>:

/**
 * @brief  Manages the DMA Half Transfer complete event.
 */
__weak void BSP_AUDIO_OUT_HalfTransfer_CallBack(void) {
 8014490:	b480      	push	{r7}
 8014492:	af00      	add	r7, sp, #0
	// check remaining data
	if (AudioRemSize > AUDIO_BUFFER_SIZE) {
 8014494:	4b0f      	ldr	r3, [pc, #60]	; (80144d4 <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x44>)
 8014496:	681b      	ldr	r3, [r3, #0]
 8014498:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801449c:	d90a      	bls.n	80144b4 <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x24>
		/* Get total data to be played */
		AudioPlaySize = AUDIO_BUFFER_SIZE;
 801449e:	4b0e      	ldr	r3, [pc, #56]	; (80144d8 <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x48>)
 80144a0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80144a4:	801a      	strh	r2, [r3, #0]
		/* Get remaining data */
		AudioRemSize -= AUDIO_BUFFER_SIZE;
 80144a6:	4b0b      	ldr	r3, [pc, #44]	; (80144d4 <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x44>)
 80144a8:	681b      	ldr	r3, [r3, #0]
 80144aa:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 80144ae:	4a09      	ldr	r2, [pc, #36]	; (80144d4 <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x44>)
 80144b0:	6013      	str	r3, [r2, #0]
		/* Get total data to be played */
		if (!AudioPlayDone) {
			AudioPlaySize = AudioRemSize;
		}
	}
}
 80144b2:	e009      	b.n	80144c8 <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x38>
		if (!AudioPlayDone) {
 80144b4:	4b09      	ldr	r3, [pc, #36]	; (80144dc <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x4c>)
 80144b6:	781b      	ldrb	r3, [r3, #0]
 80144b8:	b2db      	uxtb	r3, r3
 80144ba:	2b00      	cmp	r3, #0
 80144bc:	d104      	bne.n	80144c8 <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x38>
			AudioPlaySize = AudioRemSize;
 80144be:	4b05      	ldr	r3, [pc, #20]	; (80144d4 <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x44>)
 80144c0:	681b      	ldr	r3, [r3, #0]
 80144c2:	b29a      	uxth	r2, r3
 80144c4:	4b04      	ldr	r3, [pc, #16]	; (80144d8 <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x48>)
 80144c6:	801a      	strh	r2, [r3, #0]
}
 80144c8:	bf00      	nop
 80144ca:	46bd      	mov	sp, r7
 80144cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144d0:	4770      	bx	lr
 80144d2:	bf00      	nop
 80144d4:	20006bdc 	.word	0x20006bdc
 80144d8:	20006be0 	.word	0x20006be0
 80144dc:	20006bd8 	.word	0x20006bd8

080144e0 <I2S3_Init>:

/**
 * @brief  Initializes the Audio Codec audio interface (I2S).
 * @param  AudioFreq: Audio frequency to be configured for the I2S peripheral.
 */
static uint8_t I2S3_Init(uint32_t AudioFreq) {
 80144e0:	b580      	push	{r7, lr}
 80144e2:	b082      	sub	sp, #8
 80144e4:	af00      	add	r7, sp, #0
 80144e6:	6078      	str	r0, [r7, #4]
	/* Initialize the hi2s3 Instance parameter */
	hi2s3.Instance = I2S3;
 80144e8:	4b17      	ldr	r3, [pc, #92]	; (8014548 <I2S3_Init+0x68>)
 80144ea:	4a18      	ldr	r2, [pc, #96]	; (801454c <I2S3_Init+0x6c>)
 80144ec:	601a      	str	r2, [r3, #0]

	/* Disable I2S block */
	__HAL_I2S_DISABLE(&hi2s3);
 80144ee:	4b16      	ldr	r3, [pc, #88]	; (8014548 <I2S3_Init+0x68>)
 80144f0:	681b      	ldr	r3, [r3, #0]
 80144f2:	69da      	ldr	r2, [r3, #28]
 80144f4:	4b14      	ldr	r3, [pc, #80]	; (8014548 <I2S3_Init+0x68>)
 80144f6:	681b      	ldr	r3, [r3, #0]
 80144f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80144fc:	61da      	str	r2, [r3, #28]

	/* I2S3 peripheral configuration */
	hi2s3.Init.AudioFreq = AudioFreq;
 80144fe:	4a12      	ldr	r2, [pc, #72]	; (8014548 <I2S3_Init+0x68>)
 8014500:	687b      	ldr	r3, [r7, #4]
 8014502:	6153      	str	r3, [r2, #20]
	hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8014504:	4b10      	ldr	r3, [pc, #64]	; (8014548 <I2S3_Init+0x68>)
 8014506:	2200      	movs	r2, #0
 8014508:	61da      	str	r2, [r3, #28]
	hi2s3.Init.CPOL = I2S_CPOL_LOW;
 801450a:	4b0f      	ldr	r3, [pc, #60]	; (8014548 <I2S3_Init+0x68>)
 801450c:	2200      	movs	r2, #0
 801450e:	619a      	str	r2, [r3, #24]
	// FIXME: Why it works on I2S_DATAFORMAT_32B? It should be I2S_DATAFORMAT_16B
	//	hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
	hi2s3.Init.DataFormat = I2S_DATAFORMAT_32B;
 8014510:	4b0d      	ldr	r3, [pc, #52]	; (8014548 <I2S3_Init+0x68>)
 8014512:	2205      	movs	r2, #5
 8014514:	60da      	str	r2, [r3, #12]
	hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8014516:	4b0c      	ldr	r3, [pc, #48]	; (8014548 <I2S3_Init+0x68>)
 8014518:	f44f 7200 	mov.w	r2, #512	; 0x200
 801451c:	611a      	str	r2, [r3, #16]
	hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 801451e:	4b0a      	ldr	r3, [pc, #40]	; (8014548 <I2S3_Init+0x68>)
 8014520:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014524:	605a      	str	r2, [r3, #4]
	hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8014526:	4b08      	ldr	r3, [pc, #32]	; (8014548 <I2S3_Init+0x68>)
 8014528:	2200      	movs	r2, #0
 801452a:	609a      	str	r2, [r3, #8]
	/* Initialize the I2S peripheral with the structure above */
	if (HAL_I2S_Init(&hi2s3) != HAL_OK) {
 801452c:	4806      	ldr	r0, [pc, #24]	; (8014548 <I2S3_Init+0x68>)
 801452e:	f7f0 fbc1 	bl	8004cb4 <HAL_I2S_Init>
 8014532:	4603      	mov	r3, r0
 8014534:	2b00      	cmp	r3, #0
 8014536:	d001      	beq.n	801453c <I2S3_Init+0x5c>
		return AUDIO_ERROR;
 8014538:	2301      	movs	r3, #1
 801453a:	e000      	b.n	801453e <I2S3_Init+0x5e>
	} else {
		return AUDIO_OK;
 801453c:	2300      	movs	r3, #0
	}
}
 801453e:	4618      	mov	r0, r3
 8014540:	3708      	adds	r7, #8
 8014542:	46bd      	mov	sp, r7
 8014544:	bd80      	pop	{r7, pc}
 8014546:	bf00      	nop
 8014548:	20008920 	.word	0x20008920
 801454c:	40003c00 	.word	0x40003c00

08014550 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8014550:	b580      	push	{r7, lr}
 8014552:	b082      	sub	sp, #8
 8014554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8014556:	2300      	movs	r3, #0
 8014558:	607b      	str	r3, [r7, #4]
 801455a:	4b12      	ldr	r3, [pc, #72]	; (80145a4 <HAL_MspInit+0x54>)
 801455c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801455e:	4a11      	ldr	r2, [pc, #68]	; (80145a4 <HAL_MspInit+0x54>)
 8014560:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8014564:	6453      	str	r3, [r2, #68]	; 0x44
 8014566:	4b0f      	ldr	r3, [pc, #60]	; (80145a4 <HAL_MspInit+0x54>)
 8014568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801456a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801456e:	607b      	str	r3, [r7, #4]
 8014570:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8014572:	2300      	movs	r3, #0
 8014574:	603b      	str	r3, [r7, #0]
 8014576:	4b0b      	ldr	r3, [pc, #44]	; (80145a4 <HAL_MspInit+0x54>)
 8014578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801457a:	4a0a      	ldr	r2, [pc, #40]	; (80145a4 <HAL_MspInit+0x54>)
 801457c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014580:	6413      	str	r3, [r2, #64]	; 0x40
 8014582:	4b08      	ldr	r3, [pc, #32]	; (80145a4 <HAL_MspInit+0x54>)
 8014584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801458a:	603b      	str	r3, [r7, #0]
 801458c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 801458e:	2200      	movs	r2, #0
 8014590:	210f      	movs	r1, #15
 8014592:	f06f 0001 	mvn.w	r0, #1
 8014596:	f7ed fc81 	bl	8001e9c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 801459a:	bf00      	nop
 801459c:	3708      	adds	r7, #8
 801459e:	46bd      	mov	sp, r7
 80145a0:	bd80      	pop	{r7, pc}
 80145a2:	bf00      	nop
 80145a4:	40023800 	.word	0x40023800

080145a8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80145a8:	b580      	push	{r7, lr}
 80145aa:	b08a      	sub	sp, #40	; 0x28
 80145ac:	af00      	add	r7, sp, #0
 80145ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80145b0:	f107 0314 	add.w	r3, r7, #20
 80145b4:	2200      	movs	r2, #0
 80145b6:	601a      	str	r2, [r3, #0]
 80145b8:	605a      	str	r2, [r3, #4]
 80145ba:	609a      	str	r2, [r3, #8]
 80145bc:	60da      	str	r2, [r3, #12]
 80145be:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80145c0:	687b      	ldr	r3, [r7, #4]
 80145c2:	681b      	ldr	r3, [r3, #0]
 80145c4:	4a1d      	ldr	r2, [pc, #116]	; (801463c <HAL_CAN_MspInit+0x94>)
 80145c6:	4293      	cmp	r3, r2
 80145c8:	d133      	bne.n	8014632 <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80145ca:	2300      	movs	r3, #0
 80145cc:	613b      	str	r3, [r7, #16]
 80145ce:	4b1c      	ldr	r3, [pc, #112]	; (8014640 <HAL_CAN_MspInit+0x98>)
 80145d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80145d2:	4a1b      	ldr	r2, [pc, #108]	; (8014640 <HAL_CAN_MspInit+0x98>)
 80145d4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80145d8:	6413      	str	r3, [r2, #64]	; 0x40
 80145da:	4b19      	ldr	r3, [pc, #100]	; (8014640 <HAL_CAN_MspInit+0x98>)
 80145dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80145de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80145e2:	613b      	str	r3, [r7, #16]
 80145e4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80145e6:	2300      	movs	r3, #0
 80145e8:	60fb      	str	r3, [r7, #12]
 80145ea:	4b15      	ldr	r3, [pc, #84]	; (8014640 <HAL_CAN_MspInit+0x98>)
 80145ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80145ee:	4a14      	ldr	r2, [pc, #80]	; (8014640 <HAL_CAN_MspInit+0x98>)
 80145f0:	f043 0308 	orr.w	r3, r3, #8
 80145f4:	6313      	str	r3, [r2, #48]	; 0x30
 80145f6:	4b12      	ldr	r3, [pc, #72]	; (8014640 <HAL_CAN_MspInit+0x98>)
 80145f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80145fa:	f003 0308 	and.w	r3, r3, #8
 80145fe:	60fb      	str	r3, [r7, #12]
 8014600:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8014602:	2303      	movs	r3, #3
 8014604:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014606:	2302      	movs	r3, #2
 8014608:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801460a:	2300      	movs	r3, #0
 801460c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801460e:	2303      	movs	r3, #3
 8014610:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8014612:	2309      	movs	r3, #9
 8014614:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8014616:	f107 0314 	add.w	r3, r7, #20
 801461a:	4619      	mov	r1, r3
 801461c:	4809      	ldr	r0, [pc, #36]	; (8014644 <HAL_CAN_MspInit+0x9c>)
 801461e:	f7ee fb21 	bl	8002c64 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8014622:	2200      	movs	r2, #0
 8014624:	2105      	movs	r1, #5
 8014626:	2014      	movs	r0, #20
 8014628:	f7ed fc38 	bl	8001e9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 801462c:	2014      	movs	r0, #20
 801462e:	f7ed fc51 	bl	8001ed4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8014632:	bf00      	nop
 8014634:	3728      	adds	r7, #40	; 0x28
 8014636:	46bd      	mov	sp, r7
 8014638:	bd80      	pop	{r7, pc}
 801463a:	bf00      	nop
 801463c:	40006400 	.word	0x40006400
 8014640:	40023800 	.word	0x40023800
 8014644:	40020c00 	.word	0x40020c00

08014648 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8014648:	b580      	push	{r7, lr}
 801464a:	b08c      	sub	sp, #48	; 0x30
 801464c:	af00      	add	r7, sp, #0
 801464e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014650:	f107 031c 	add.w	r3, r7, #28
 8014654:	2200      	movs	r2, #0
 8014656:	601a      	str	r2, [r3, #0]
 8014658:	605a      	str	r2, [r3, #4]
 801465a:	609a      	str	r2, [r3, #8]
 801465c:	60da      	str	r2, [r3, #12]
 801465e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8014660:	687b      	ldr	r3, [r7, #4]
 8014662:	681b      	ldr	r3, [r3, #0]
 8014664:	4a42      	ldr	r2, [pc, #264]	; (8014770 <HAL_I2C_MspInit+0x128>)
 8014666:	4293      	cmp	r3, r2
 8014668:	d12d      	bne.n	80146c6 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801466a:	2300      	movs	r3, #0
 801466c:	61bb      	str	r3, [r7, #24]
 801466e:	4b41      	ldr	r3, [pc, #260]	; (8014774 <HAL_I2C_MspInit+0x12c>)
 8014670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014672:	4a40      	ldr	r2, [pc, #256]	; (8014774 <HAL_I2C_MspInit+0x12c>)
 8014674:	f043 0302 	orr.w	r3, r3, #2
 8014678:	6313      	str	r3, [r2, #48]	; 0x30
 801467a:	4b3e      	ldr	r3, [pc, #248]	; (8014774 <HAL_I2C_MspInit+0x12c>)
 801467c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801467e:	f003 0302 	and.w	r3, r3, #2
 8014682:	61bb      	str	r3, [r7, #24]
 8014684:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8014686:	f44f 7310 	mov.w	r3, #576	; 0x240
 801468a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 801468c:	2312      	movs	r3, #18
 801468e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8014690:	2301      	movs	r3, #1
 8014692:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014694:	2300      	movs	r3, #0
 8014696:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8014698:	2304      	movs	r3, #4
 801469a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801469c:	f107 031c 	add.w	r3, r7, #28
 80146a0:	4619      	mov	r1, r3
 80146a2:	4835      	ldr	r0, [pc, #212]	; (8014778 <HAL_I2C_MspInit+0x130>)
 80146a4:	f7ee fade 	bl	8002c64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80146a8:	2300      	movs	r3, #0
 80146aa:	617b      	str	r3, [r7, #20]
 80146ac:	4b31      	ldr	r3, [pc, #196]	; (8014774 <HAL_I2C_MspInit+0x12c>)
 80146ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80146b0:	4a30      	ldr	r2, [pc, #192]	; (8014774 <HAL_I2C_MspInit+0x12c>)
 80146b2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80146b6:	6413      	str	r3, [r2, #64]	; 0x40
 80146b8:	4b2e      	ldr	r3, [pc, #184]	; (8014774 <HAL_I2C_MspInit+0x12c>)
 80146ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80146bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80146c0:	617b      	str	r3, [r7, #20]
 80146c2:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80146c4:	e050      	b.n	8014768 <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C3)
 80146c6:	687b      	ldr	r3, [r7, #4]
 80146c8:	681b      	ldr	r3, [r3, #0]
 80146ca:	4a2c      	ldr	r2, [pc, #176]	; (801477c <HAL_I2C_MspInit+0x134>)
 80146cc:	4293      	cmp	r3, r2
 80146ce:	d14b      	bne.n	8014768 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80146d0:	2300      	movs	r3, #0
 80146d2:	613b      	str	r3, [r7, #16]
 80146d4:	4b27      	ldr	r3, [pc, #156]	; (8014774 <HAL_I2C_MspInit+0x12c>)
 80146d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80146d8:	4a26      	ldr	r2, [pc, #152]	; (8014774 <HAL_I2C_MspInit+0x12c>)
 80146da:	f043 0304 	orr.w	r3, r3, #4
 80146de:	6313      	str	r3, [r2, #48]	; 0x30
 80146e0:	4b24      	ldr	r3, [pc, #144]	; (8014774 <HAL_I2C_MspInit+0x12c>)
 80146e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80146e4:	f003 0304 	and.w	r3, r3, #4
 80146e8:	613b      	str	r3, [r7, #16]
 80146ea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80146ec:	2300      	movs	r3, #0
 80146ee:	60fb      	str	r3, [r7, #12]
 80146f0:	4b20      	ldr	r3, [pc, #128]	; (8014774 <HAL_I2C_MspInit+0x12c>)
 80146f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80146f4:	4a1f      	ldr	r2, [pc, #124]	; (8014774 <HAL_I2C_MspInit+0x12c>)
 80146f6:	f043 0301 	orr.w	r3, r3, #1
 80146fa:	6313      	str	r3, [r2, #48]	; 0x30
 80146fc:	4b1d      	ldr	r3, [pc, #116]	; (8014774 <HAL_I2C_MspInit+0x12c>)
 80146fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014700:	f003 0301 	and.w	r3, r3, #1
 8014704:	60fb      	str	r3, [r7, #12]
 8014706:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8014708:	f44f 7300 	mov.w	r3, #512	; 0x200
 801470c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 801470e:	2312      	movs	r3, #18
 8014710:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8014712:	2301      	movs	r3, #1
 8014714:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014716:	2303      	movs	r3, #3
 8014718:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 801471a:	2304      	movs	r3, #4
 801471c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801471e:	f107 031c 	add.w	r3, r7, #28
 8014722:	4619      	mov	r1, r3
 8014724:	4816      	ldr	r0, [pc, #88]	; (8014780 <HAL_I2C_MspInit+0x138>)
 8014726:	f7ee fa9d 	bl	8002c64 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 801472a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801472e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8014730:	2312      	movs	r3, #18
 8014732:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8014734:	2301      	movs	r3, #1
 8014736:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014738:	2303      	movs	r3, #3
 801473a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 801473c:	2304      	movs	r3, #4
 801473e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014740:	f107 031c 	add.w	r3, r7, #28
 8014744:	4619      	mov	r1, r3
 8014746:	480f      	ldr	r0, [pc, #60]	; (8014784 <HAL_I2C_MspInit+0x13c>)
 8014748:	f7ee fa8c 	bl	8002c64 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 801474c:	2300      	movs	r3, #0
 801474e:	60bb      	str	r3, [r7, #8]
 8014750:	4b08      	ldr	r3, [pc, #32]	; (8014774 <HAL_I2C_MspInit+0x12c>)
 8014752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014754:	4a07      	ldr	r2, [pc, #28]	; (8014774 <HAL_I2C_MspInit+0x12c>)
 8014756:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801475a:	6413      	str	r3, [r2, #64]	; 0x40
 801475c:	4b05      	ldr	r3, [pc, #20]	; (8014774 <HAL_I2C_MspInit+0x12c>)
 801475e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014760:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8014764:	60bb      	str	r3, [r7, #8]
 8014766:	68bb      	ldr	r3, [r7, #8]
}
 8014768:	bf00      	nop
 801476a:	3730      	adds	r7, #48	; 0x30
 801476c:	46bd      	mov	sp, r7
 801476e:	bd80      	pop	{r7, pc}
 8014770:	40005400 	.word	0x40005400
 8014774:	40023800 	.word	0x40023800
 8014778:	40020400 	.word	0x40020400
 801477c:	40005c00 	.word	0x40005c00
 8014780:	40020800 	.word	0x40020800
 8014784:	40020000 	.word	0x40020000

08014788 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8014788:	b580      	push	{r7, lr}
 801478a:	b082      	sub	sp, #8
 801478c:	af00      	add	r7, sp, #0
 801478e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8014790:	687b      	ldr	r3, [r7, #4]
 8014792:	681b      	ldr	r3, [r3, #0]
 8014794:	4a13      	ldr	r2, [pc, #76]	; (80147e4 <HAL_I2C_MspDeInit+0x5c>)
 8014796:	4293      	cmp	r3, r2
 8014798:	d10b      	bne.n	80147b2 <HAL_I2C_MspDeInit+0x2a>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 801479a:	4b13      	ldr	r3, [pc, #76]	; (80147e8 <HAL_I2C_MspDeInit+0x60>)
 801479c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801479e:	4a12      	ldr	r2, [pc, #72]	; (80147e8 <HAL_I2C_MspDeInit+0x60>)
 80147a0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80147a4:	6413      	str	r3, [r2, #64]	; 0x40
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, Audio_SCL_Pin|Audio_SDA_Pin);
 80147a6:	f44f 7110 	mov.w	r1, #576	; 0x240
 80147aa:	4810      	ldr	r0, [pc, #64]	; (80147ec <HAL_I2C_MspDeInit+0x64>)
 80147ac:	f7ee fbf4 	bl	8002f98 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 80147b0:	e014      	b.n	80147dc <HAL_I2C_MspDeInit+0x54>
  else if(hi2c->Instance==I2C3)
 80147b2:	687b      	ldr	r3, [r7, #4]
 80147b4:	681b      	ldr	r3, [r3, #0]
 80147b6:	4a0e      	ldr	r2, [pc, #56]	; (80147f0 <HAL_I2C_MspDeInit+0x68>)
 80147b8:	4293      	cmp	r3, r2
 80147ba:	d10f      	bne.n	80147dc <HAL_I2C_MspDeInit+0x54>
    __HAL_RCC_I2C3_CLK_DISABLE();
 80147bc:	4b0a      	ldr	r3, [pc, #40]	; (80147e8 <HAL_I2C_MspDeInit+0x60>)
 80147be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80147c0:	4a09      	ldr	r2, [pc, #36]	; (80147e8 <HAL_I2C_MspDeInit+0x60>)
 80147c2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80147c6:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_9);
 80147c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80147cc:	4809      	ldr	r0, [pc, #36]	; (80147f4 <HAL_I2C_MspDeInit+0x6c>)
 80147ce:	f7ee fbe3 	bl	8002f98 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_8);
 80147d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80147d6:	4808      	ldr	r0, [pc, #32]	; (80147f8 <HAL_I2C_MspDeInit+0x70>)
 80147d8:	f7ee fbde 	bl	8002f98 <HAL_GPIO_DeInit>
}
 80147dc:	bf00      	nop
 80147de:	3708      	adds	r7, #8
 80147e0:	46bd      	mov	sp, r7
 80147e2:	bd80      	pop	{r7, pc}
 80147e4:	40005400 	.word	0x40005400
 80147e8:	40023800 	.word	0x40023800
 80147ec:	40020400 	.word	0x40020400
 80147f0:	40005c00 	.word	0x40005c00
 80147f4:	40020800 	.word	0x40020800
 80147f8:	40020000 	.word	0x40020000

080147fc <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80147fc:	b580      	push	{r7, lr}
 80147fe:	b08a      	sub	sp, #40	; 0x28
 8014800:	af00      	add	r7, sp, #0
 8014802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014804:	f107 0314 	add.w	r3, r7, #20
 8014808:	2200      	movs	r2, #0
 801480a:	601a      	str	r2, [r3, #0]
 801480c:	605a      	str	r2, [r3, #4]
 801480e:	609a      	str	r2, [r3, #8]
 8014810:	60da      	str	r2, [r3, #12]
 8014812:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8014814:	687b      	ldr	r3, [r7, #4]
 8014816:	681b      	ldr	r3, [r3, #0]
 8014818:	4a48      	ldr	r2, [pc, #288]	; (801493c <HAL_I2S_MspInit+0x140>)
 801481a:	4293      	cmp	r3, r2
 801481c:	f040 808a 	bne.w	8014934 <HAL_I2S_MspInit+0x138>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8014820:	2300      	movs	r3, #0
 8014822:	613b      	str	r3, [r7, #16]
 8014824:	4b46      	ldr	r3, [pc, #280]	; (8014940 <HAL_I2S_MspInit+0x144>)
 8014826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014828:	4a45      	ldr	r2, [pc, #276]	; (8014940 <HAL_I2S_MspInit+0x144>)
 801482a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801482e:	6413      	str	r3, [r2, #64]	; 0x40
 8014830:	4b43      	ldr	r3, [pc, #268]	; (8014940 <HAL_I2S_MspInit+0x144>)
 8014832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014834:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8014838:	613b      	str	r3, [r7, #16]
 801483a:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801483c:	2300      	movs	r3, #0
 801483e:	60fb      	str	r3, [r7, #12]
 8014840:	4b3f      	ldr	r3, [pc, #252]	; (8014940 <HAL_I2S_MspInit+0x144>)
 8014842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014844:	4a3e      	ldr	r2, [pc, #248]	; (8014940 <HAL_I2S_MspInit+0x144>)
 8014846:	f043 0301 	orr.w	r3, r3, #1
 801484a:	6313      	str	r3, [r2, #48]	; 0x30
 801484c:	4b3c      	ldr	r3, [pc, #240]	; (8014940 <HAL_I2S_MspInit+0x144>)
 801484e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014850:	f003 0301 	and.w	r3, r3, #1
 8014854:	60fb      	str	r3, [r7, #12]
 8014856:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8014858:	2300      	movs	r3, #0
 801485a:	60bb      	str	r3, [r7, #8]
 801485c:	4b38      	ldr	r3, [pc, #224]	; (8014940 <HAL_I2S_MspInit+0x144>)
 801485e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014860:	4a37      	ldr	r2, [pc, #220]	; (8014940 <HAL_I2S_MspInit+0x144>)
 8014862:	f043 0304 	orr.w	r3, r3, #4
 8014866:	6313      	str	r3, [r2, #48]	; 0x30
 8014868:	4b35      	ldr	r3, [pc, #212]	; (8014940 <HAL_I2S_MspInit+0x144>)
 801486a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801486c:	f003 0304 	and.w	r3, r3, #4
 8014870:	60bb      	str	r3, [r7, #8]
 8014872:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD 
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8014874:	2310      	movs	r3, #16
 8014876:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014878:	2302      	movs	r3, #2
 801487a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801487c:	2300      	movs	r3, #0
 801487e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014880:	2300      	movs	r3, #0
 8014882:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8014884:	2306      	movs	r3, #6
 8014886:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8014888:	f107 0314 	add.w	r3, r7, #20
 801488c:	4619      	mov	r1, r3
 801488e:	482d      	ldr	r0, [pc, #180]	; (8014944 <HAL_I2S_MspInit+0x148>)
 8014890:	f7ee f9e8 	bl	8002c64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8014894:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8014898:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801489a:	2302      	movs	r3, #2
 801489c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801489e:	2300      	movs	r3, #0
 80148a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80148a2:	2300      	movs	r3, #0
 80148a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80148a6:	2306      	movs	r3, #6
 80148a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80148aa:	f107 0314 	add.w	r3, r7, #20
 80148ae:	4619      	mov	r1, r3
 80148b0:	4825      	ldr	r0, [pc, #148]	; (8014948 <HAL_I2S_MspInit+0x14c>)
 80148b2:	f7ee f9d7 	bl	8002c64 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream7;
 80148b6:	4b25      	ldr	r3, [pc, #148]	; (801494c <HAL_I2S_MspInit+0x150>)
 80148b8:	4a25      	ldr	r2, [pc, #148]	; (8014950 <HAL_I2S_MspInit+0x154>)
 80148ba:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 80148bc:	4b23      	ldr	r3, [pc, #140]	; (801494c <HAL_I2S_MspInit+0x150>)
 80148be:	2200      	movs	r2, #0
 80148c0:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80148c2:	4b22      	ldr	r3, [pc, #136]	; (801494c <HAL_I2S_MspInit+0x150>)
 80148c4:	2240      	movs	r2, #64	; 0x40
 80148c6:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80148c8:	4b20      	ldr	r3, [pc, #128]	; (801494c <HAL_I2S_MspInit+0x150>)
 80148ca:	2200      	movs	r2, #0
 80148cc:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80148ce:	4b1f      	ldr	r3, [pc, #124]	; (801494c <HAL_I2S_MspInit+0x150>)
 80148d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80148d4:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80148d6:	4b1d      	ldr	r3, [pc, #116]	; (801494c <HAL_I2S_MspInit+0x150>)
 80148d8:	2200      	movs	r2, #0
 80148da:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80148dc:	4b1b      	ldr	r3, [pc, #108]	; (801494c <HAL_I2S_MspInit+0x150>)
 80148de:	2200      	movs	r2, #0
 80148e0:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 80148e2:	4b1a      	ldr	r3, [pc, #104]	; (801494c <HAL_I2S_MspInit+0x150>)
 80148e4:	2200      	movs	r2, #0
 80148e6:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80148e8:	4b18      	ldr	r3, [pc, #96]	; (801494c <HAL_I2S_MspInit+0x150>)
 80148ea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80148ee:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80148f0:	4b16      	ldr	r3, [pc, #88]	; (801494c <HAL_I2S_MspInit+0x150>)
 80148f2:	2204      	movs	r2, #4
 80148f4:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80148f6:	4b15      	ldr	r3, [pc, #84]	; (801494c <HAL_I2S_MspInit+0x150>)
 80148f8:	2203      	movs	r2, #3
 80148fa:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80148fc:	4b13      	ldr	r3, [pc, #76]	; (801494c <HAL_I2S_MspInit+0x150>)
 80148fe:	2200      	movs	r2, #0
 8014900:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8014902:	4b12      	ldr	r3, [pc, #72]	; (801494c <HAL_I2S_MspInit+0x150>)
 8014904:	2200      	movs	r2, #0
 8014906:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8014908:	4810      	ldr	r0, [pc, #64]	; (801494c <HAL_I2S_MspInit+0x150>)
 801490a:	f7ed faf1 	bl	8001ef0 <HAL_DMA_Init>
 801490e:	4603      	mov	r3, r0
 8014910:	2b00      	cmp	r3, #0
 8014912:	d001      	beq.n	8014918 <HAL_I2S_MspInit+0x11c>
    {
      Error_Handler();
 8014914:	f7ff f98c 	bl	8013c30 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 8014918:	687b      	ldr	r3, [r7, #4]
 801491a:	4a0c      	ldr	r2, [pc, #48]	; (801494c <HAL_I2S_MspInit+0x150>)
 801491c:	639a      	str	r2, [r3, #56]	; 0x38
 801491e:	4a0b      	ldr	r2, [pc, #44]	; (801494c <HAL_I2S_MspInit+0x150>)
 8014920:	687b      	ldr	r3, [r7, #4]
 8014922:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2S3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 8014924:	2200      	movs	r2, #0
 8014926:	2105      	movs	r1, #5
 8014928:	2033      	movs	r0, #51	; 0x33
 801492a:	f7ed fab7 	bl	8001e9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 801492e:	2033      	movs	r0, #51	; 0x33
 8014930:	f7ed fad0 	bl	8001ed4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8014934:	bf00      	nop
 8014936:	3728      	adds	r7, #40	; 0x28
 8014938:	46bd      	mov	sp, r7
 801493a:	bd80      	pop	{r7, pc}
 801493c:	40003c00 	.word	0x40003c00
 8014940:	40023800 	.word	0x40023800
 8014944:	40020000 	.word	0x40020000
 8014948:	40020800 	.word	0x40020800
 801494c:	20008778 	.word	0x20008778
 8014950:	400260b8 	.word	0x400260b8

08014954 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8014954:	b480      	push	{r7}
 8014956:	b083      	sub	sp, #12
 8014958:	af00      	add	r7, sp, #0
 801495a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 801495c:	687b      	ldr	r3, [r7, #4]
 801495e:	681b      	ldr	r3, [r3, #0]
 8014960:	4a05      	ldr	r2, [pc, #20]	; (8014978 <HAL_RTC_MspInit+0x24>)
 8014962:	4293      	cmp	r3, r2
 8014964:	d102      	bne.n	801496c <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8014966:	4b05      	ldr	r3, [pc, #20]	; (801497c <HAL_RTC_MspInit+0x28>)
 8014968:	2201      	movs	r2, #1
 801496a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 801496c:	bf00      	nop
 801496e:	370c      	adds	r7, #12
 8014970:	46bd      	mov	sp, r7
 8014972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014976:	4770      	bx	lr
 8014978:	40002800 	.word	0x40002800
 801497c:	42470e3c 	.word	0x42470e3c

08014980 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8014980:	b580      	push	{r7, lr}
 8014982:	b08a      	sub	sp, #40	; 0x28
 8014984:	af00      	add	r7, sp, #0
 8014986:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014988:	f107 0314 	add.w	r3, r7, #20
 801498c:	2200      	movs	r2, #0
 801498e:	601a      	str	r2, [r3, #0]
 8014990:	605a      	str	r2, [r3, #4]
 8014992:	609a      	str	r2, [r3, #8]
 8014994:	60da      	str	r2, [r3, #12]
 8014996:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8014998:	687b      	ldr	r3, [r7, #4]
 801499a:	681b      	ldr	r3, [r3, #0]
 801499c:	4a19      	ldr	r2, [pc, #100]	; (8014a04 <HAL_SPI_MspInit+0x84>)
 801499e:	4293      	cmp	r3, r2
 80149a0:	d12b      	bne.n	80149fa <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80149a2:	2300      	movs	r3, #0
 80149a4:	613b      	str	r3, [r7, #16]
 80149a6:	4b18      	ldr	r3, [pc, #96]	; (8014a08 <HAL_SPI_MspInit+0x88>)
 80149a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80149aa:	4a17      	ldr	r2, [pc, #92]	; (8014a08 <HAL_SPI_MspInit+0x88>)
 80149ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80149b0:	6453      	str	r3, [r2, #68]	; 0x44
 80149b2:	4b15      	ldr	r3, [pc, #84]	; (8014a08 <HAL_SPI_MspInit+0x88>)
 80149b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80149b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80149ba:	613b      	str	r3, [r7, #16]
 80149bc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80149be:	2300      	movs	r3, #0
 80149c0:	60fb      	str	r3, [r7, #12]
 80149c2:	4b11      	ldr	r3, [pc, #68]	; (8014a08 <HAL_SPI_MspInit+0x88>)
 80149c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80149c6:	4a10      	ldr	r2, [pc, #64]	; (8014a08 <HAL_SPI_MspInit+0x88>)
 80149c8:	f043 0301 	orr.w	r3, r3, #1
 80149cc:	6313      	str	r3, [r2, #48]	; 0x30
 80149ce:	4b0e      	ldr	r3, [pc, #56]	; (8014a08 <HAL_SPI_MspInit+0x88>)
 80149d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80149d2:	f003 0301 	and.w	r3, r3, #1
 80149d6:	60fb      	str	r3, [r7, #12]
 80149d8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80149da:	23e0      	movs	r3, #224	; 0xe0
 80149dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80149de:	2302      	movs	r3, #2
 80149e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80149e2:	2300      	movs	r3, #0
 80149e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80149e6:	2300      	movs	r3, #0
 80149e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80149ea:	2305      	movs	r3, #5
 80149ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80149ee:	f107 0314 	add.w	r3, r7, #20
 80149f2:	4619      	mov	r1, r3
 80149f4:	4805      	ldr	r0, [pc, #20]	; (8014a0c <HAL_SPI_MspInit+0x8c>)
 80149f6:	f7ee f935 	bl	8002c64 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80149fa:	bf00      	nop
 80149fc:	3728      	adds	r7, #40	; 0x28
 80149fe:	46bd      	mov	sp, r7
 8014a00:	bd80      	pop	{r7, pc}
 8014a02:	bf00      	nop
 8014a04:	40013000 	.word	0x40013000
 8014a08:	40023800 	.word	0x40023800
 8014a0c:	40020000 	.word	0x40020000

08014a10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8014a10:	b580      	push	{r7, lr}
 8014a12:	b08e      	sub	sp, #56	; 0x38
 8014a14:	af00      	add	r7, sp, #0
 8014a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014a18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014a1c:	2200      	movs	r2, #0
 8014a1e:	601a      	str	r2, [r3, #0]
 8014a20:	605a      	str	r2, [r3, #4]
 8014a22:	609a      	str	r2, [r3, #8]
 8014a24:	60da      	str	r2, [r3, #12]
 8014a26:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8014a28:	687b      	ldr	r3, [r7, #4]
 8014a2a:	681b      	ldr	r3, [r3, #0]
 8014a2c:	4a67      	ldr	r2, [pc, #412]	; (8014bcc <HAL_UART_MspInit+0x1bc>)
 8014a2e:	4293      	cmp	r3, r2
 8014a30:	d163      	bne.n	8014afa <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8014a32:	2300      	movs	r3, #0
 8014a34:	623b      	str	r3, [r7, #32]
 8014a36:	4b66      	ldr	r3, [pc, #408]	; (8014bd0 <HAL_UART_MspInit+0x1c0>)
 8014a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014a3a:	4a65      	ldr	r2, [pc, #404]	; (8014bd0 <HAL_UART_MspInit+0x1c0>)
 8014a3c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8014a40:	6413      	str	r3, [r2, #64]	; 0x40
 8014a42:	4b63      	ldr	r3, [pc, #396]	; (8014bd0 <HAL_UART_MspInit+0x1c0>)
 8014a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014a46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8014a4a:	623b      	str	r3, [r7, #32]
 8014a4c:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8014a4e:	2300      	movs	r3, #0
 8014a50:	61fb      	str	r3, [r7, #28]
 8014a52:	4b5f      	ldr	r3, [pc, #380]	; (8014bd0 <HAL_UART_MspInit+0x1c0>)
 8014a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014a56:	4a5e      	ldr	r2, [pc, #376]	; (8014bd0 <HAL_UART_MspInit+0x1c0>)
 8014a58:	f043 0301 	orr.w	r3, r3, #1
 8014a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8014a5e:	4b5c      	ldr	r3, [pc, #368]	; (8014bd0 <HAL_UART_MspInit+0x1c0>)
 8014a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014a62:	f003 0301 	and.w	r3, r3, #1
 8014a66:	61fb      	str	r3, [r7, #28]
 8014a68:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration    
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8014a6a:	2303      	movs	r3, #3
 8014a6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014a6e:	2302      	movs	r3, #2
 8014a70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8014a72:	2301      	movs	r3, #1
 8014a74:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014a76:	2303      	movs	r3, #3
 8014a78:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8014a7a:	2308      	movs	r3, #8
 8014a7c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014a7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014a82:	4619      	mov	r1, r3
 8014a84:	4853      	ldr	r0, [pc, #332]	; (8014bd4 <HAL_UART_MspInit+0x1c4>)
 8014a86:	f7ee f8ed 	bl	8002c64 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8014a8a:	4b53      	ldr	r3, [pc, #332]	; (8014bd8 <HAL_UART_MspInit+0x1c8>)
 8014a8c:	4a53      	ldr	r2, [pc, #332]	; (8014bdc <HAL_UART_MspInit+0x1cc>)
 8014a8e:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8014a90:	4b51      	ldr	r3, [pc, #324]	; (8014bd8 <HAL_UART_MspInit+0x1c8>)
 8014a92:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8014a96:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8014a98:	4b4f      	ldr	r3, [pc, #316]	; (8014bd8 <HAL_UART_MspInit+0x1c8>)
 8014a9a:	2200      	movs	r2, #0
 8014a9c:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8014a9e:	4b4e      	ldr	r3, [pc, #312]	; (8014bd8 <HAL_UART_MspInit+0x1c8>)
 8014aa0:	2200      	movs	r2, #0
 8014aa2:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8014aa4:	4b4c      	ldr	r3, [pc, #304]	; (8014bd8 <HAL_UART_MspInit+0x1c8>)
 8014aa6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8014aaa:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8014aac:	4b4a      	ldr	r3, [pc, #296]	; (8014bd8 <HAL_UART_MspInit+0x1c8>)
 8014aae:	2200      	movs	r2, #0
 8014ab0:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8014ab2:	4b49      	ldr	r3, [pc, #292]	; (8014bd8 <HAL_UART_MspInit+0x1c8>)
 8014ab4:	2200      	movs	r2, #0
 8014ab6:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8014ab8:	4b47      	ldr	r3, [pc, #284]	; (8014bd8 <HAL_UART_MspInit+0x1c8>)
 8014aba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8014abe:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8014ac0:	4b45      	ldr	r3, [pc, #276]	; (8014bd8 <HAL_UART_MspInit+0x1c8>)
 8014ac2:	2200      	movs	r2, #0
 8014ac4:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8014ac6:	4b44      	ldr	r3, [pc, #272]	; (8014bd8 <HAL_UART_MspInit+0x1c8>)
 8014ac8:	2200      	movs	r2, #0
 8014aca:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8014acc:	4842      	ldr	r0, [pc, #264]	; (8014bd8 <HAL_UART_MspInit+0x1c8>)
 8014ace:	f7ed fa0f 	bl	8001ef0 <HAL_DMA_Init>
 8014ad2:	4603      	mov	r3, r0
 8014ad4:	2b00      	cmp	r3, #0
 8014ad6:	d001      	beq.n	8014adc <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8014ad8:	f7ff f8aa 	bl	8013c30 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8014adc:	687b      	ldr	r3, [r7, #4]
 8014ade:	4a3e      	ldr	r2, [pc, #248]	; (8014bd8 <HAL_UART_MspInit+0x1c8>)
 8014ae0:	635a      	str	r2, [r3, #52]	; 0x34
 8014ae2:	4a3d      	ldr	r2, [pc, #244]	; (8014bd8 <HAL_UART_MspInit+0x1c8>)
 8014ae4:	687b      	ldr	r3, [r7, #4]
 8014ae6:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8014ae8:	2200      	movs	r2, #0
 8014aea:	2105      	movs	r1, #5
 8014aec:	2034      	movs	r0, #52	; 0x34
 8014aee:	f7ed f9d5 	bl	8001e9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8014af2:	2034      	movs	r0, #52	; 0x34
 8014af4:	f7ed f9ee 	bl	8001ed4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8014af8:	e101      	b.n	8014cfe <HAL_UART_MspInit+0x2ee>
  else if(huart->Instance==USART2)
 8014afa:	687b      	ldr	r3, [r7, #4]
 8014afc:	681b      	ldr	r3, [r3, #0]
 8014afe:	4a38      	ldr	r2, [pc, #224]	; (8014be0 <HAL_UART_MspInit+0x1d0>)
 8014b00:	4293      	cmp	r3, r2
 8014b02:	d173      	bne.n	8014bec <HAL_UART_MspInit+0x1dc>
    __HAL_RCC_USART2_CLK_ENABLE();
 8014b04:	2300      	movs	r3, #0
 8014b06:	61bb      	str	r3, [r7, #24]
 8014b08:	4b31      	ldr	r3, [pc, #196]	; (8014bd0 <HAL_UART_MspInit+0x1c0>)
 8014b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014b0c:	4a30      	ldr	r2, [pc, #192]	; (8014bd0 <HAL_UART_MspInit+0x1c0>)
 8014b0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8014b12:	6413      	str	r3, [r2, #64]	; 0x40
 8014b14:	4b2e      	ldr	r3, [pc, #184]	; (8014bd0 <HAL_UART_MspInit+0x1c0>)
 8014b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014b18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8014b1c:	61bb      	str	r3, [r7, #24]
 8014b1e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8014b20:	2300      	movs	r3, #0
 8014b22:	617b      	str	r3, [r7, #20]
 8014b24:	4b2a      	ldr	r3, [pc, #168]	; (8014bd0 <HAL_UART_MspInit+0x1c0>)
 8014b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014b28:	4a29      	ldr	r2, [pc, #164]	; (8014bd0 <HAL_UART_MspInit+0x1c0>)
 8014b2a:	f043 0301 	orr.w	r3, r3, #1
 8014b2e:	6313      	str	r3, [r2, #48]	; 0x30
 8014b30:	4b27      	ldr	r3, [pc, #156]	; (8014bd0 <HAL_UART_MspInit+0x1c0>)
 8014b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014b34:	f003 0301 	and.w	r3, r3, #1
 8014b38:	617b      	str	r3, [r7, #20]
 8014b3a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8014b3c:	230c      	movs	r3, #12
 8014b3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014b40:	2302      	movs	r3, #2
 8014b42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8014b44:	2301      	movs	r3, #1
 8014b46:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014b48:	2303      	movs	r3, #3
 8014b4a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8014b4c:	2307      	movs	r3, #7
 8014b4e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014b50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014b54:	4619      	mov	r1, r3
 8014b56:	481f      	ldr	r0, [pc, #124]	; (8014bd4 <HAL_UART_MspInit+0x1c4>)
 8014b58:	f7ee f884 	bl	8002c64 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8014b5c:	4b21      	ldr	r3, [pc, #132]	; (8014be4 <HAL_UART_MspInit+0x1d4>)
 8014b5e:	4a22      	ldr	r2, [pc, #136]	; (8014be8 <HAL_UART_MspInit+0x1d8>)
 8014b60:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8014b62:	4b20      	ldr	r3, [pc, #128]	; (8014be4 <HAL_UART_MspInit+0x1d4>)
 8014b64:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8014b68:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8014b6a:	4b1e      	ldr	r3, [pc, #120]	; (8014be4 <HAL_UART_MspInit+0x1d4>)
 8014b6c:	2200      	movs	r2, #0
 8014b6e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8014b70:	4b1c      	ldr	r3, [pc, #112]	; (8014be4 <HAL_UART_MspInit+0x1d4>)
 8014b72:	2200      	movs	r2, #0
 8014b74:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8014b76:	4b1b      	ldr	r3, [pc, #108]	; (8014be4 <HAL_UART_MspInit+0x1d4>)
 8014b78:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8014b7c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8014b7e:	4b19      	ldr	r3, [pc, #100]	; (8014be4 <HAL_UART_MspInit+0x1d4>)
 8014b80:	2200      	movs	r2, #0
 8014b82:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8014b84:	4b17      	ldr	r3, [pc, #92]	; (8014be4 <HAL_UART_MspInit+0x1d4>)
 8014b86:	2200      	movs	r2, #0
 8014b88:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8014b8a:	4b16      	ldr	r3, [pc, #88]	; (8014be4 <HAL_UART_MspInit+0x1d4>)
 8014b8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8014b90:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8014b92:	4b14      	ldr	r3, [pc, #80]	; (8014be4 <HAL_UART_MspInit+0x1d4>)
 8014b94:	2200      	movs	r2, #0
 8014b96:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8014b98:	4b12      	ldr	r3, [pc, #72]	; (8014be4 <HAL_UART_MspInit+0x1d4>)
 8014b9a:	2200      	movs	r2, #0
 8014b9c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8014b9e:	4811      	ldr	r0, [pc, #68]	; (8014be4 <HAL_UART_MspInit+0x1d4>)
 8014ba0:	f7ed f9a6 	bl	8001ef0 <HAL_DMA_Init>
 8014ba4:	4603      	mov	r3, r0
 8014ba6:	2b00      	cmp	r3, #0
 8014ba8:	d001      	beq.n	8014bae <HAL_UART_MspInit+0x19e>
      Error_Handler();
 8014baa:	f7ff f841 	bl	8013c30 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8014bae:	687b      	ldr	r3, [r7, #4]
 8014bb0:	4a0c      	ldr	r2, [pc, #48]	; (8014be4 <HAL_UART_MspInit+0x1d4>)
 8014bb2:	635a      	str	r2, [r3, #52]	; 0x34
 8014bb4:	4a0b      	ldr	r2, [pc, #44]	; (8014be4 <HAL_UART_MspInit+0x1d4>)
 8014bb6:	687b      	ldr	r3, [r7, #4]
 8014bb8:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8014bba:	2200      	movs	r2, #0
 8014bbc:	2105      	movs	r1, #5
 8014bbe:	2026      	movs	r0, #38	; 0x26
 8014bc0:	f7ed f96c 	bl	8001e9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8014bc4:	2026      	movs	r0, #38	; 0x26
 8014bc6:	f7ed f985 	bl	8001ed4 <HAL_NVIC_EnableIRQ>
}
 8014bca:	e098      	b.n	8014cfe <HAL_UART_MspInit+0x2ee>
 8014bcc:	40004c00 	.word	0x40004c00
 8014bd0:	40023800 	.word	0x40023800
 8014bd4:	40020000 	.word	0x40020000
 8014bd8:	2000855c 	.word	0x2000855c
 8014bdc:	40026040 	.word	0x40026040
 8014be0:	40004400 	.word	0x40004400
 8014be4:	200085bc 	.word	0x200085bc
 8014be8:	40026088 	.word	0x40026088
  else if(huart->Instance==USART3)
 8014bec:	687b      	ldr	r3, [r7, #4]
 8014bee:	681b      	ldr	r3, [r3, #0]
 8014bf0:	4a45      	ldr	r2, [pc, #276]	; (8014d08 <HAL_UART_MspInit+0x2f8>)
 8014bf2:	4293      	cmp	r3, r2
 8014bf4:	f040 8083 	bne.w	8014cfe <HAL_UART_MspInit+0x2ee>
    __HAL_RCC_USART3_CLK_ENABLE();
 8014bf8:	2300      	movs	r3, #0
 8014bfa:	613b      	str	r3, [r7, #16]
 8014bfc:	4b43      	ldr	r3, [pc, #268]	; (8014d0c <HAL_UART_MspInit+0x2fc>)
 8014bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014c00:	4a42      	ldr	r2, [pc, #264]	; (8014d0c <HAL_UART_MspInit+0x2fc>)
 8014c02:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8014c06:	6413      	str	r3, [r2, #64]	; 0x40
 8014c08:	4b40      	ldr	r3, [pc, #256]	; (8014d0c <HAL_UART_MspInit+0x2fc>)
 8014c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014c0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8014c10:	613b      	str	r3, [r7, #16]
 8014c12:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8014c14:	2300      	movs	r3, #0
 8014c16:	60fb      	str	r3, [r7, #12]
 8014c18:	4b3c      	ldr	r3, [pc, #240]	; (8014d0c <HAL_UART_MspInit+0x2fc>)
 8014c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014c1c:	4a3b      	ldr	r2, [pc, #236]	; (8014d0c <HAL_UART_MspInit+0x2fc>)
 8014c1e:	f043 0302 	orr.w	r3, r3, #2
 8014c22:	6313      	str	r3, [r2, #48]	; 0x30
 8014c24:	4b39      	ldr	r3, [pc, #228]	; (8014d0c <HAL_UART_MspInit+0x2fc>)
 8014c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014c28:	f003 0302 	and.w	r3, r3, #2
 8014c2c:	60fb      	str	r3, [r7, #12]
 8014c2e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8014c30:	2300      	movs	r3, #0
 8014c32:	60bb      	str	r3, [r7, #8]
 8014c34:	4b35      	ldr	r3, [pc, #212]	; (8014d0c <HAL_UART_MspInit+0x2fc>)
 8014c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014c38:	4a34      	ldr	r2, [pc, #208]	; (8014d0c <HAL_UART_MspInit+0x2fc>)
 8014c3a:	f043 0308 	orr.w	r3, r3, #8
 8014c3e:	6313      	str	r3, [r2, #48]	; 0x30
 8014c40:	4b32      	ldr	r3, [pc, #200]	; (8014d0c <HAL_UART_MspInit+0x2fc>)
 8014c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014c44:	f003 0308 	and.w	r3, r3, #8
 8014c48:	60bb      	str	r3, [r7, #8]
 8014c4a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8014c4c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014c50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014c52:	2302      	movs	r3, #2
 8014c54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8014c56:	2301      	movs	r3, #1
 8014c58:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014c5a:	2303      	movs	r3, #3
 8014c5c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8014c5e:	2307      	movs	r3, #7
 8014c60:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8014c62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014c66:	4619      	mov	r1, r3
 8014c68:	4829      	ldr	r0, [pc, #164]	; (8014d10 <HAL_UART_MspInit+0x300>)
 8014c6a:	f7ed fffb 	bl	8002c64 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8014c6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8014c72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014c74:	2302      	movs	r3, #2
 8014c76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8014c78:	2301      	movs	r3, #1
 8014c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014c7c:	2303      	movs	r3, #3
 8014c7e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8014c80:	2307      	movs	r3, #7
 8014c82:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8014c84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014c88:	4619      	mov	r1, r3
 8014c8a:	4822      	ldr	r0, [pc, #136]	; (8014d14 <HAL_UART_MspInit+0x304>)
 8014c8c:	f7ed ffea 	bl	8002c64 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8014c90:	4b21      	ldr	r3, [pc, #132]	; (8014d18 <HAL_UART_MspInit+0x308>)
 8014c92:	4a22      	ldr	r2, [pc, #136]	; (8014d1c <HAL_UART_MspInit+0x30c>)
 8014c94:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8014c96:	4b20      	ldr	r3, [pc, #128]	; (8014d18 <HAL_UART_MspInit+0x308>)
 8014c98:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8014c9c:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8014c9e:	4b1e      	ldr	r3, [pc, #120]	; (8014d18 <HAL_UART_MspInit+0x308>)
 8014ca0:	2200      	movs	r2, #0
 8014ca2:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8014ca4:	4b1c      	ldr	r3, [pc, #112]	; (8014d18 <HAL_UART_MspInit+0x308>)
 8014ca6:	2200      	movs	r2, #0
 8014ca8:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8014caa:	4b1b      	ldr	r3, [pc, #108]	; (8014d18 <HAL_UART_MspInit+0x308>)
 8014cac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8014cb0:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8014cb2:	4b19      	ldr	r3, [pc, #100]	; (8014d18 <HAL_UART_MspInit+0x308>)
 8014cb4:	2200      	movs	r2, #0
 8014cb6:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8014cb8:	4b17      	ldr	r3, [pc, #92]	; (8014d18 <HAL_UART_MspInit+0x308>)
 8014cba:	2200      	movs	r2, #0
 8014cbc:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8014cbe:	4b16      	ldr	r3, [pc, #88]	; (8014d18 <HAL_UART_MspInit+0x308>)
 8014cc0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8014cc4:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8014cc6:	4b14      	ldr	r3, [pc, #80]	; (8014d18 <HAL_UART_MspInit+0x308>)
 8014cc8:	2200      	movs	r2, #0
 8014cca:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8014ccc:	4b12      	ldr	r3, [pc, #72]	; (8014d18 <HAL_UART_MspInit+0x308>)
 8014cce:	2200      	movs	r2, #0
 8014cd0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8014cd2:	4811      	ldr	r0, [pc, #68]	; (8014d18 <HAL_UART_MspInit+0x308>)
 8014cd4:	f7ed f90c 	bl	8001ef0 <HAL_DMA_Init>
 8014cd8:	4603      	mov	r3, r0
 8014cda:	2b00      	cmp	r3, #0
 8014cdc:	d001      	beq.n	8014ce2 <HAL_UART_MspInit+0x2d2>
      Error_Handler();
 8014cde:	f7fe ffa7 	bl	8013c30 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8014ce2:	687b      	ldr	r3, [r7, #4]
 8014ce4:	4a0c      	ldr	r2, [pc, #48]	; (8014d18 <HAL_UART_MspInit+0x308>)
 8014ce6:	635a      	str	r2, [r3, #52]	; 0x34
 8014ce8:	4a0b      	ldr	r2, [pc, #44]	; (8014d18 <HAL_UART_MspInit+0x308>)
 8014cea:	687b      	ldr	r3, [r7, #4]
 8014cec:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8014cee:	2200      	movs	r2, #0
 8014cf0:	2105      	movs	r1, #5
 8014cf2:	2027      	movs	r0, #39	; 0x27
 8014cf4:	f7ed f8d2 	bl	8001e9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8014cf8:	2027      	movs	r0, #39	; 0x27
 8014cfa:	f7ed f8eb 	bl	8001ed4 <HAL_NVIC_EnableIRQ>
}
 8014cfe:	bf00      	nop
 8014d00:	3738      	adds	r7, #56	; 0x38
 8014d02:	46bd      	mov	sp, r7
 8014d04:	bd80      	pop	{r7, pc}
 8014d06:	bf00      	nop
 8014d08:	40004800 	.word	0x40004800
 8014d0c:	40023800 	.word	0x40023800
 8014d10:	40020400 	.word	0x40020400
 8014d14:	40020c00 	.word	0x40020c00
 8014d18:	20008670 	.word	0x20008670
 8014d1c:	40026028 	.word	0x40026028

08014d20 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8014d20:	b580      	push	{r7, lr}
 8014d22:	b08c      	sub	sp, #48	; 0x30
 8014d24:	af00      	add	r7, sp, #0
 8014d26:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8014d28:	2300      	movs	r3, #0
 8014d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8014d2c:	2300      	movs	r3, #0
 8014d2e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8014d30:	2200      	movs	r2, #0
 8014d32:	6879      	ldr	r1, [r7, #4]
 8014d34:	2019      	movs	r0, #25
 8014d36:	f7ed f8b1 	bl	8001e9c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8014d3a:	2019      	movs	r0, #25
 8014d3c:	f7ed f8ca 	bl	8001ed4 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8014d40:	2300      	movs	r3, #0
 8014d42:	60fb      	str	r3, [r7, #12]
 8014d44:	4b1f      	ldr	r3, [pc, #124]	; (8014dc4 <HAL_InitTick+0xa4>)
 8014d46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014d48:	4a1e      	ldr	r2, [pc, #120]	; (8014dc4 <HAL_InitTick+0xa4>)
 8014d4a:	f043 0301 	orr.w	r3, r3, #1
 8014d4e:	6453      	str	r3, [r2, #68]	; 0x44
 8014d50:	4b1c      	ldr	r3, [pc, #112]	; (8014dc4 <HAL_InitTick+0xa4>)
 8014d52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014d54:	f003 0301 	and.w	r3, r3, #1
 8014d58:	60fb      	str	r3, [r7, #12]
 8014d5a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8014d5c:	f107 0210 	add.w	r2, r7, #16
 8014d60:	f107 0314 	add.w	r3, r7, #20
 8014d64:	4611      	mov	r1, r2
 8014d66:	4618      	mov	r0, r3
 8014d68:	f7f1 f980 	bl	800606c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8014d6c:	f7f1 f96a 	bl	8006044 <HAL_RCC_GetPCLK2Freq>
 8014d70:	4603      	mov	r3, r0
 8014d72:	005b      	lsls	r3, r3, #1
 8014d74:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8014d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d78:	4a13      	ldr	r2, [pc, #76]	; (8014dc8 <HAL_InitTick+0xa8>)
 8014d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8014d7e:	0c9b      	lsrs	r3, r3, #18
 8014d80:	3b01      	subs	r3, #1
 8014d82:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8014d84:	4b11      	ldr	r3, [pc, #68]	; (8014dcc <HAL_InitTick+0xac>)
 8014d86:	4a12      	ldr	r2, [pc, #72]	; (8014dd0 <HAL_InitTick+0xb0>)
 8014d88:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8014d8a:	4b10      	ldr	r3, [pc, #64]	; (8014dcc <HAL_InitTick+0xac>)
 8014d8c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8014d90:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8014d92:	4a0e      	ldr	r2, [pc, #56]	; (8014dcc <HAL_InitTick+0xac>)
 8014d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d96:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8014d98:	4b0c      	ldr	r3, [pc, #48]	; (8014dcc <HAL_InitTick+0xac>)
 8014d9a:	2200      	movs	r2, #0
 8014d9c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8014d9e:	4b0b      	ldr	r3, [pc, #44]	; (8014dcc <HAL_InitTick+0xac>)
 8014da0:	2200      	movs	r2, #0
 8014da2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8014da4:	4809      	ldr	r0, [pc, #36]	; (8014dcc <HAL_InitTick+0xac>)
 8014da6:	f7f2 f913 	bl	8006fd0 <HAL_TIM_Base_Init>
 8014daa:	4603      	mov	r3, r0
 8014dac:	2b00      	cmp	r3, #0
 8014dae:	d104      	bne.n	8014dba <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8014db0:	4806      	ldr	r0, [pc, #24]	; (8014dcc <HAL_InitTick+0xac>)
 8014db2:	f7f2 f942 	bl	800703a <HAL_TIM_Base_Start_IT>
 8014db6:	4603      	mov	r3, r0
 8014db8:	e000      	b.n	8014dbc <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8014dba:	2301      	movs	r3, #1
}
 8014dbc:	4618      	mov	r0, r3
 8014dbe:	3730      	adds	r7, #48	; 0x30
 8014dc0:	46bd      	mov	sp, r7
 8014dc2:	bd80      	pop	{r7, pc}
 8014dc4:	40023800 	.word	0x40023800
 8014dc8:	431bde83 	.word	0x431bde83
 8014dcc:	20008974 	.word	0x20008974
 8014dd0:	40010000 	.word	0x40010000

08014dd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8014dd4:	b580      	push	{r7, lr}
 8014dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
	SWV_SendStrLn("NMI_Handler.");
 8014dd8:	4802      	ldr	r0, [pc, #8]	; (8014de4 <NMI_Handler+0x10>)
 8014dda:	f7fd f833 	bl	8011e44 <SWV_SendStrLn>

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8014dde:	bf00      	nop
 8014de0:	bd80      	pop	{r7, pc}
 8014de2:	bf00      	nop
 8014de4:	08019254 	.word	0x08019254

08014de8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8014de8:	b580      	push	{r7, lr}
 8014dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	SWV_SendStrLn("Hard fault interrupt.");
 8014dec:	4801      	ldr	r0, [pc, #4]	; (8014df4 <HardFault_Handler+0xc>)
 8014dee:	f7fd f829 	bl	8011e44 <SWV_SendStrLn>

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8014df2:	e7fe      	b.n	8014df2 <HardFault_Handler+0xa>
 8014df4:	08019264 	.word	0x08019264

08014df8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8014df8:	b580      	push	{r7, lr}
 8014dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
	SWV_SendStrLn("Memory management fault.");
 8014dfc:	4801      	ldr	r0, [pc, #4]	; (8014e04 <MemManage_Handler+0xc>)
 8014dfe:	f7fd f821 	bl	8011e44 <SWV_SendStrLn>

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8014e02:	e7fe      	b.n	8014e02 <MemManage_Handler+0xa>
 8014e04:	0801927c 	.word	0x0801927c

08014e08 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8014e08:	b580      	push	{r7, lr}
 8014e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
	SWV_SendStrLn("Pre-fetch fault, memory access fault.");
 8014e0c:	4801      	ldr	r0, [pc, #4]	; (8014e14 <BusFault_Handler+0xc>)
 8014e0e:	f7fd f819 	bl	8011e44 <SWV_SendStrLn>

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8014e12:	e7fe      	b.n	8014e12 <BusFault_Handler+0xa>
 8014e14:	08019298 	.word	0x08019298

08014e18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8014e18:	b580      	push	{r7, lr}
 8014e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
	SWV_SendStrLn("Undefined instruction or illegal state.");
 8014e1c:	4801      	ldr	r0, [pc, #4]	; (8014e24 <UsageFault_Handler+0xc>)
 8014e1e:	f7fd f811 	bl	8011e44 <SWV_SendStrLn>

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8014e22:	e7fe      	b.n	8014e22 <UsageFault_Handler+0xa>
 8014e24:	080192c0 	.word	0x080192c0

08014e28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8014e28:	b580      	push	{r7, lr}
 8014e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */
	SWV_SendStrLn("DebugMon_Handler.");
 8014e2c:	4802      	ldr	r0, [pc, #8]	; (8014e38 <DebugMon_Handler+0x10>)
 8014e2e:	f7fd f809 	bl	8011e44 <SWV_SendStrLn>

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8014e32:	bf00      	nop
 8014e34:	bd80      	pop	{r7, pc}
 8014e36:	bf00      	nop
 8014e38:	080192e8 	.word	0x080192e8

08014e3c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8014e3c:	b580      	push	{r7, lr}
 8014e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8014e40:	2001      	movs	r0, #1
 8014e42:	f7ee f9ef 	bl	8003224 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8014e46:	bf00      	nop
 8014e48:	bd80      	pop	{r7, pc}

08014e4a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8014e4a:	b580      	push	{r7, lr}
 8014e4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8014e4e:	2002      	movs	r0, #2
 8014e50:	f7ee f9e8 	bl	8003224 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8014e54:	bf00      	nop
 8014e56:	bd80      	pop	{r7, pc}

08014e58 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8014e58:	b580      	push	{r7, lr}
 8014e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8014e5c:	2004      	movs	r0, #4
 8014e5e:	f7ee f9e1 	bl	8003224 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8014e62:	bf00      	nop
 8014e64:	bd80      	pop	{r7, pc}

08014e66 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8014e66:	b580      	push	{r7, lr}
 8014e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8014e6a:	2008      	movs	r0, #8
 8014e6c:	f7ee f9da 	bl	8003224 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8014e70:	bf00      	nop
 8014e72:	bd80      	pop	{r7, pc}

08014e74 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8014e74:	b580      	push	{r7, lr}
 8014e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8014e78:	2010      	movs	r0, #16
 8014e7a:	f7ee f9d3 	bl	8003224 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8014e7e:	bf00      	nop
 8014e80:	bd80      	pop	{r7, pc}
	...

08014e84 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8014e84:	b580      	push	{r7, lr}
 8014e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8014e88:	4804      	ldr	r0, [pc, #16]	; (8014e9c <DMA1_Stream1_IRQHandler+0x18>)
 8014e8a:	f7ed f9bf 	bl	800220c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */
	SIMCOM_DMA_IrqHandler(&hdma_usart3_rx, &huart3);
 8014e8e:	4904      	ldr	r1, [pc, #16]	; (8014ea0 <DMA1_Stream1_IRQHandler+0x1c>)
 8014e90:	4802      	ldr	r0, [pc, #8]	; (8014e9c <DMA1_Stream1_IRQHandler+0x18>)
 8014e92:	f7f7 fc97 	bl	800c7c4 <SIMCOM_DMA_IrqHandler>

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8014e96:	bf00      	nop
 8014e98:	bd80      	pop	{r7, pc}
 8014e9a:	bf00      	nop
 8014e9c:	20008670 	.word	0x20008670
 8014ea0:	200086d0 	.word	0x200086d0

08014ea4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8014ea4:	b580      	push	{r7, lr}
 8014ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8014ea8:	4804      	ldr	r0, [pc, #16]	; (8014ebc <DMA1_Stream2_IRQHandler+0x18>)
 8014eaa:	f7ed f9af 	bl	800220c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */
	FINGER_DMA_IrqHandler(&hdma_uart4_rx, &huart4);
 8014eae:	4904      	ldr	r1, [pc, #16]	; (8014ec0 <DMA1_Stream2_IRQHandler+0x1c>)
 8014eb0:	4802      	ldr	r0, [pc, #8]	; (8014ebc <DMA1_Stream2_IRQHandler+0x18>)
 8014eb2:	f7f7 f9df 	bl	800c274 <FINGER_DMA_IrqHandler>

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8014eb6:	bf00      	nop
 8014eb8:	bd80      	pop	{r7, pc}
 8014eba:	bf00      	nop
 8014ebc:	2000855c 	.word	0x2000855c
 8014ec0:	20008814 	.word	0x20008814

08014ec4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8014ec4:	b580      	push	{r7, lr}
 8014ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8014ec8:	4804      	ldr	r0, [pc, #16]	; (8014edc <DMA1_Stream5_IRQHandler+0x18>)
 8014eca:	f7ed f99f 	bl	800220c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */
	UBLOX_DMA_IrqHandler(&hdma_usart2_rx, &huart2);
 8014ece:	4904      	ldr	r1, [pc, #16]	; (8014ee0 <DMA1_Stream5_IRQHandler+0x1c>)
 8014ed0:	4802      	ldr	r0, [pc, #8]	; (8014edc <DMA1_Stream5_IRQHandler+0x18>)
 8014ed2:	f7f7 ff3f 	bl	800cd54 <UBLOX_DMA_IrqHandler>

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8014ed6:	bf00      	nop
 8014ed8:	bd80      	pop	{r7, pc}
 8014eda:	bf00      	nop
 8014edc:	200085bc 	.word	0x200085bc
 8014ee0:	200088b4 	.word	0x200088b4

08014ee4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8014ee4:	b580      	push	{r7, lr}
 8014ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8014ee8:	4802      	ldr	r0, [pc, #8]	; (8014ef4 <CAN1_RX0_IRQHandler+0x10>)
 8014eea:	f7ec fcf5 	bl	80018d8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8014eee:	bf00      	nop
 8014ef0:	bd80      	pop	{r7, pc}
 8014ef2:	bf00      	nop
 8014ef4:	200088f4 	.word	0x200088f4

08014ef8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8014ef8:	b580      	push	{r7, lr}
 8014efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8014efc:	2020      	movs	r0, #32
 8014efe:	f7ee f991 	bl	8003224 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8014f02:	2040      	movs	r0, #64	; 0x40
 8014f04:	f7ee f98e 	bl	8003224 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8014f08:	2080      	movs	r0, #128	; 0x80
 8014f0a:	f7ee f98b 	bl	8003224 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8014f0e:	bf00      	nop
 8014f10:	bd80      	pop	{r7, pc}
	...

08014f14 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8014f14:	b580      	push	{r7, lr}
 8014f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8014f18:	4802      	ldr	r0, [pc, #8]	; (8014f24 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8014f1a:	f7f2 f8b2 	bl	8007082 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8014f1e:	bf00      	nop
 8014f20:	bd80      	pop	{r7, pc}
 8014f22:	bf00      	nop
 8014f24:	20008974 	.word	0x20008974

08014f28 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8014f28:	b580      	push	{r7, lr}
 8014f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8014f2c:	4804      	ldr	r0, [pc, #16]	; (8014f40 <USART2_IRQHandler+0x18>)
 8014f2e:	f7f2 fbf3 	bl	8007718 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
	UBLOX_USART_IrqHandler(&huart2, &hdma_usart2_rx);
 8014f32:	4904      	ldr	r1, [pc, #16]	; (8014f44 <USART2_IRQHandler+0x1c>)
 8014f34:	4802      	ldr	r0, [pc, #8]	; (8014f40 <USART2_IRQHandler+0x18>)
 8014f36:	f7f7 fee5 	bl	800cd04 <UBLOX_USART_IrqHandler>

  /* USER CODE END USART2_IRQn 1 */
}
 8014f3a:	bf00      	nop
 8014f3c:	bd80      	pop	{r7, pc}
 8014f3e:	bf00      	nop
 8014f40:	200088b4 	.word	0x200088b4
 8014f44:	200085bc 	.word	0x200085bc

08014f48 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8014f48:	b580      	push	{r7, lr}
 8014f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8014f4c:	4804      	ldr	r0, [pc, #16]	; (8014f60 <USART3_IRQHandler+0x18>)
 8014f4e:	f7f2 fbe3 	bl	8007718 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */
	SIMCOM_USART_IrqHandler(&huart3, &hdma_usart3_rx);
 8014f52:	4904      	ldr	r1, [pc, #16]	; (8014f64 <USART3_IRQHandler+0x1c>)
 8014f54:	4802      	ldr	r0, [pc, #8]	; (8014f60 <USART3_IRQHandler+0x18>)
 8014f56:	f7f7 fc0d 	bl	800c774 <SIMCOM_USART_IrqHandler>

  /* USER CODE END USART3_IRQn 1 */
}
 8014f5a:	bf00      	nop
 8014f5c:	bd80      	pop	{r7, pc}
 8014f5e:	bf00      	nop
 8014f60:	200086d0 	.word	0x200086d0
 8014f64:	20008670 	.word	0x20008670

08014f68 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8014f68:	b580      	push	{r7, lr}
 8014f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8014f6c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8014f70:	f7ee f958 	bl	8003224 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8014f74:	bf00      	nop
 8014f76:	bd80      	pop	{r7, pc}

08014f78 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8014f78:	b580      	push	{r7, lr}
 8014f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8014f7c:	4802      	ldr	r0, [pc, #8]	; (8014f88 <DMA1_Stream7_IRQHandler+0x10>)
 8014f7e:	f7ed f945 	bl	800220c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8014f82:	bf00      	nop
 8014f84:	bd80      	pop	{r7, pc}
 8014f86:	bf00      	nop
 8014f88:	20008778 	.word	0x20008778

08014f8c <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8014f8c:	b580      	push	{r7, lr}
 8014f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s3);
 8014f90:	4802      	ldr	r0, [pc, #8]	; (8014f9c <SPI3_IRQHandler+0x10>)
 8014f92:	f7f0 f877 	bl	8005084 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8014f96:	bf00      	nop
 8014f98:	bd80      	pop	{r7, pc}
 8014f9a:	bf00      	nop
 8014f9c:	20008920 	.word	0x20008920

08014fa0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8014fa0:	b580      	push	{r7, lr}
 8014fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8014fa4:	4804      	ldr	r0, [pc, #16]	; (8014fb8 <UART4_IRQHandler+0x18>)
 8014fa6:	f7f2 fbb7 	bl	8007718 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */
	FINGER_USART_IrqHandler(&huart4, &hdma_uart4_rx);
 8014faa:	4904      	ldr	r1, [pc, #16]	; (8014fbc <UART4_IRQHandler+0x1c>)
 8014fac:	4802      	ldr	r0, [pc, #8]	; (8014fb8 <UART4_IRQHandler+0x18>)
 8014fae:	f7f7 f939 	bl	800c224 <FINGER_USART_IrqHandler>

  /* USER CODE END UART4_IRQn 1 */
}
 8014fb2:	bf00      	nop
 8014fb4:	bd80      	pop	{r7, pc}
 8014fb6:	bf00      	nop
 8014fb8:	20008814 	.word	0x20008814
 8014fbc:	2000855c 	.word	0x2000855c

08014fc0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8014fc0:	b580      	push	{r7, lr}
 8014fc2:	b084      	sub	sp, #16
 8014fc4:	af00      	add	r7, sp, #0
 8014fc6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8014fc8:	4b11      	ldr	r3, [pc, #68]	; (8015010 <_sbrk+0x50>)
 8014fca:	681b      	ldr	r3, [r3, #0]
 8014fcc:	2b00      	cmp	r3, #0
 8014fce:	d102      	bne.n	8014fd6 <_sbrk+0x16>
		heap_end = &end;
 8014fd0:	4b0f      	ldr	r3, [pc, #60]	; (8015010 <_sbrk+0x50>)
 8014fd2:	4a10      	ldr	r2, [pc, #64]	; (8015014 <_sbrk+0x54>)
 8014fd4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8014fd6:	4b0e      	ldr	r3, [pc, #56]	; (8015010 <_sbrk+0x50>)
 8014fd8:	681b      	ldr	r3, [r3, #0]
 8014fda:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8014fdc:	4b0c      	ldr	r3, [pc, #48]	; (8015010 <_sbrk+0x50>)
 8014fde:	681a      	ldr	r2, [r3, #0]
 8014fe0:	687b      	ldr	r3, [r7, #4]
 8014fe2:	4413      	add	r3, r2
 8014fe4:	466a      	mov	r2, sp
 8014fe6:	4293      	cmp	r3, r2
 8014fe8:	d907      	bls.n	8014ffa <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8014fea:	f000 f879 	bl	80150e0 <__errno>
 8014fee:	4602      	mov	r2, r0
 8014ff0:	230c      	movs	r3, #12
 8014ff2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8014ff4:	f04f 33ff 	mov.w	r3, #4294967295
 8014ff8:	e006      	b.n	8015008 <_sbrk+0x48>
	}

	heap_end += incr;
 8014ffa:	4b05      	ldr	r3, [pc, #20]	; (8015010 <_sbrk+0x50>)
 8014ffc:	681a      	ldr	r2, [r3, #0]
 8014ffe:	687b      	ldr	r3, [r7, #4]
 8015000:	4413      	add	r3, r2
 8015002:	4a03      	ldr	r2, [pc, #12]	; (8015010 <_sbrk+0x50>)
 8015004:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8015006:	68fb      	ldr	r3, [r7, #12]
}
 8015008:	4618      	mov	r0, r3
 801500a:	3710      	adds	r7, #16
 801500c:	46bd      	mov	sp, r7
 801500e:	bd80      	pop	{r7, pc}
 8015010:	20006c44 	.word	0x20006c44
 8015014:	200089b8 	.word	0x200089b8

08015018 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8015018:	b480      	push	{r7}
 801501a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 801501c:	4b16      	ldr	r3, [pc, #88]	; (8015078 <SystemInit+0x60>)
 801501e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015022:	4a15      	ldr	r2, [pc, #84]	; (8015078 <SystemInit+0x60>)
 8015024:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8015028:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 801502c:	4b13      	ldr	r3, [pc, #76]	; (801507c <SystemInit+0x64>)
 801502e:	681b      	ldr	r3, [r3, #0]
 8015030:	4a12      	ldr	r2, [pc, #72]	; (801507c <SystemInit+0x64>)
 8015032:	f043 0301 	orr.w	r3, r3, #1
 8015036:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8015038:	4b10      	ldr	r3, [pc, #64]	; (801507c <SystemInit+0x64>)
 801503a:	2200      	movs	r2, #0
 801503c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 801503e:	4b0f      	ldr	r3, [pc, #60]	; (801507c <SystemInit+0x64>)
 8015040:	681b      	ldr	r3, [r3, #0]
 8015042:	4a0e      	ldr	r2, [pc, #56]	; (801507c <SystemInit+0x64>)
 8015044:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8015048:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801504c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 801504e:	4b0b      	ldr	r3, [pc, #44]	; (801507c <SystemInit+0x64>)
 8015050:	4a0b      	ldr	r2, [pc, #44]	; (8015080 <SystemInit+0x68>)
 8015052:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8015054:	4b09      	ldr	r3, [pc, #36]	; (801507c <SystemInit+0x64>)
 8015056:	681b      	ldr	r3, [r3, #0]
 8015058:	4a08      	ldr	r2, [pc, #32]	; (801507c <SystemInit+0x64>)
 801505a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801505e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8015060:	4b06      	ldr	r3, [pc, #24]	; (801507c <SystemInit+0x64>)
 8015062:	2200      	movs	r2, #0
 8015064:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8015066:	4b04      	ldr	r3, [pc, #16]	; (8015078 <SystemInit+0x60>)
 8015068:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 801506c:	609a      	str	r2, [r3, #8]
#endif
}
 801506e:	bf00      	nop
 8015070:	46bd      	mov	sp, r7
 8015072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015076:	4770      	bx	lr
 8015078:	e000ed00 	.word	0xe000ed00
 801507c:	40023800 	.word	0x40023800
 8015080:	24003010 	.word	0x24003010

08015084 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8015084:	f8df d034 	ldr.w	sp, [pc, #52]	; 80150bc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8015088:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 801508a:	e003      	b.n	8015094 <LoopCopyDataInit>

0801508c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 801508c:	4b0c      	ldr	r3, [pc, #48]	; (80150c0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 801508e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8015090:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8015092:	3104      	adds	r1, #4

08015094 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8015094:	480b      	ldr	r0, [pc, #44]	; (80150c4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8015096:	4b0c      	ldr	r3, [pc, #48]	; (80150c8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8015098:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 801509a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 801509c:	d3f6      	bcc.n	801508c <CopyDataInit>
  ldr  r2, =_sbss
 801509e:	4a0b      	ldr	r2, [pc, #44]	; (80150cc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80150a0:	e002      	b.n	80150a8 <LoopFillZerobss>

080150a2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80150a2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80150a4:	f842 3b04 	str.w	r3, [r2], #4

080150a8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80150a8:	4b09      	ldr	r3, [pc, #36]	; (80150d0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80150aa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80150ac:	d3f9      	bcc.n	80150a2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80150ae:	f7ff ffb3 	bl	8015018 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80150b2:	f000 f81b 	bl	80150ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80150b6:	f7fd fabb 	bl	8012630 <main>
  bx  lr    
 80150ba:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80150bc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80150c0:	0802b668 	.word	0x0802b668
  ldr  r0, =_sdata
 80150c4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80150c8:	200002b0 	.word	0x200002b0
  ldr  r2, =_sbss
 80150cc:	200002b0 	.word	0x200002b0
  ldr  r3, = _ebss
 80150d0:	200089b8 	.word	0x200089b8

080150d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80150d4:	e7fe      	b.n	80150d4 <ADC_IRQHandler>

080150d6 <atoi>:
 80150d6:	220a      	movs	r2, #10
 80150d8:	2100      	movs	r1, #0
 80150da:	f000 bfb1 	b.w	8016040 <strtol>
	...

080150e0 <__errno>:
 80150e0:	4b01      	ldr	r3, [pc, #4]	; (80150e8 <__errno+0x8>)
 80150e2:	6818      	ldr	r0, [r3, #0]
 80150e4:	4770      	bx	lr
 80150e6:	bf00      	nop
 80150e8:	200000dc 	.word	0x200000dc

080150ec <__libc_init_array>:
 80150ec:	b570      	push	{r4, r5, r6, lr}
 80150ee:	4e0d      	ldr	r6, [pc, #52]	; (8015124 <__libc_init_array+0x38>)
 80150f0:	4c0d      	ldr	r4, [pc, #52]	; (8015128 <__libc_init_array+0x3c>)
 80150f2:	1ba4      	subs	r4, r4, r6
 80150f4:	10a4      	asrs	r4, r4, #2
 80150f6:	2500      	movs	r5, #0
 80150f8:	42a5      	cmp	r5, r4
 80150fa:	d109      	bne.n	8015110 <__libc_init_array+0x24>
 80150fc:	4e0b      	ldr	r6, [pc, #44]	; (801512c <__libc_init_array+0x40>)
 80150fe:	4c0c      	ldr	r4, [pc, #48]	; (8015130 <__libc_init_array+0x44>)
 8015100:	f003 fbe4 	bl	80188cc <_init>
 8015104:	1ba4      	subs	r4, r4, r6
 8015106:	10a4      	asrs	r4, r4, #2
 8015108:	2500      	movs	r5, #0
 801510a:	42a5      	cmp	r5, r4
 801510c:	d105      	bne.n	801511a <__libc_init_array+0x2e>
 801510e:	bd70      	pop	{r4, r5, r6, pc}
 8015110:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015114:	4798      	blx	r3
 8015116:	3501      	adds	r5, #1
 8015118:	e7ee      	b.n	80150f8 <__libc_init_array+0xc>
 801511a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801511e:	4798      	blx	r3
 8015120:	3501      	adds	r5, #1
 8015122:	e7f2      	b.n	801510a <__libc_init_array+0x1e>
 8015124:	0802b660 	.word	0x0802b660
 8015128:	0802b660 	.word	0x0802b660
 801512c:	0802b660 	.word	0x0802b660
 8015130:	0802b664 	.word	0x0802b664

08015134 <__itoa>:
 8015134:	1e93      	subs	r3, r2, #2
 8015136:	2b22      	cmp	r3, #34	; 0x22
 8015138:	b510      	push	{r4, lr}
 801513a:	460c      	mov	r4, r1
 801513c:	d904      	bls.n	8015148 <__itoa+0x14>
 801513e:	2300      	movs	r3, #0
 8015140:	700b      	strb	r3, [r1, #0]
 8015142:	461c      	mov	r4, r3
 8015144:	4620      	mov	r0, r4
 8015146:	bd10      	pop	{r4, pc}
 8015148:	2a0a      	cmp	r2, #10
 801514a:	d109      	bne.n	8015160 <__itoa+0x2c>
 801514c:	2800      	cmp	r0, #0
 801514e:	da07      	bge.n	8015160 <__itoa+0x2c>
 8015150:	232d      	movs	r3, #45	; 0x2d
 8015152:	700b      	strb	r3, [r1, #0]
 8015154:	4240      	negs	r0, r0
 8015156:	2101      	movs	r1, #1
 8015158:	4421      	add	r1, r4
 801515a:	f000 ff87 	bl	801606c <__utoa>
 801515e:	e7f1      	b.n	8015144 <__itoa+0x10>
 8015160:	2100      	movs	r1, #0
 8015162:	e7f9      	b.n	8015158 <__itoa+0x24>

08015164 <itoa>:
 8015164:	f7ff bfe6 	b.w	8015134 <__itoa>

08015168 <memcpy>:
 8015168:	b510      	push	{r4, lr}
 801516a:	1e43      	subs	r3, r0, #1
 801516c:	440a      	add	r2, r1
 801516e:	4291      	cmp	r1, r2
 8015170:	d100      	bne.n	8015174 <memcpy+0xc>
 8015172:	bd10      	pop	{r4, pc}
 8015174:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015178:	f803 4f01 	strb.w	r4, [r3, #1]!
 801517c:	e7f7      	b.n	801516e <memcpy+0x6>

0801517e <memset>:
 801517e:	4402      	add	r2, r0
 8015180:	4603      	mov	r3, r0
 8015182:	4293      	cmp	r3, r2
 8015184:	d100      	bne.n	8015188 <memset+0xa>
 8015186:	4770      	bx	lr
 8015188:	f803 1b01 	strb.w	r1, [r3], #1
 801518c:	e7f9      	b.n	8015182 <memset+0x4>
	...

08015190 <siprintf>:
 8015190:	b40e      	push	{r1, r2, r3}
 8015192:	b500      	push	{lr}
 8015194:	b09c      	sub	sp, #112	; 0x70
 8015196:	ab1d      	add	r3, sp, #116	; 0x74
 8015198:	9002      	str	r0, [sp, #8]
 801519a:	9006      	str	r0, [sp, #24]
 801519c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80151a0:	4809      	ldr	r0, [pc, #36]	; (80151c8 <siprintf+0x38>)
 80151a2:	9107      	str	r1, [sp, #28]
 80151a4:	9104      	str	r1, [sp, #16]
 80151a6:	4909      	ldr	r1, [pc, #36]	; (80151cc <siprintf+0x3c>)
 80151a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80151ac:	9105      	str	r1, [sp, #20]
 80151ae:	6800      	ldr	r0, [r0, #0]
 80151b0:	9301      	str	r3, [sp, #4]
 80151b2:	a902      	add	r1, sp, #8
 80151b4:	f001 ff96 	bl	80170e4 <_svfiprintf_r>
 80151b8:	9b02      	ldr	r3, [sp, #8]
 80151ba:	2200      	movs	r2, #0
 80151bc:	701a      	strb	r2, [r3, #0]
 80151be:	b01c      	add	sp, #112	; 0x70
 80151c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80151c4:	b003      	add	sp, #12
 80151c6:	4770      	bx	lr
 80151c8:	200000dc 	.word	0x200000dc
 80151cc:	ffff0208 	.word	0xffff0208

080151d0 <strchr>:
 80151d0:	b2c9      	uxtb	r1, r1
 80151d2:	4603      	mov	r3, r0
 80151d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80151d8:	b11a      	cbz	r2, 80151e2 <strchr+0x12>
 80151da:	428a      	cmp	r2, r1
 80151dc:	d1f9      	bne.n	80151d2 <strchr+0x2>
 80151de:	4618      	mov	r0, r3
 80151e0:	4770      	bx	lr
 80151e2:	2900      	cmp	r1, #0
 80151e4:	bf18      	it	ne
 80151e6:	2300      	movne	r3, #0
 80151e8:	e7f9      	b.n	80151de <strchr+0xe>

080151ea <strcpy>:
 80151ea:	4603      	mov	r3, r0
 80151ec:	f811 2b01 	ldrb.w	r2, [r1], #1
 80151f0:	f803 2b01 	strb.w	r2, [r3], #1
 80151f4:	2a00      	cmp	r2, #0
 80151f6:	d1f9      	bne.n	80151ec <strcpy+0x2>
 80151f8:	4770      	bx	lr

080151fa <strncmp>:
 80151fa:	b510      	push	{r4, lr}
 80151fc:	b16a      	cbz	r2, 801521a <strncmp+0x20>
 80151fe:	3901      	subs	r1, #1
 8015200:	1884      	adds	r4, r0, r2
 8015202:	f810 3b01 	ldrb.w	r3, [r0], #1
 8015206:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801520a:	4293      	cmp	r3, r2
 801520c:	d103      	bne.n	8015216 <strncmp+0x1c>
 801520e:	42a0      	cmp	r0, r4
 8015210:	d001      	beq.n	8015216 <strncmp+0x1c>
 8015212:	2b00      	cmp	r3, #0
 8015214:	d1f5      	bne.n	8015202 <strncmp+0x8>
 8015216:	1a98      	subs	r0, r3, r2
 8015218:	bd10      	pop	{r4, pc}
 801521a:	4610      	mov	r0, r2
 801521c:	e7fc      	b.n	8015218 <strncmp+0x1e>

0801521e <strncpy>:
 801521e:	b570      	push	{r4, r5, r6, lr}
 8015220:	3901      	subs	r1, #1
 8015222:	4604      	mov	r4, r0
 8015224:	b902      	cbnz	r2, 8015228 <strncpy+0xa>
 8015226:	bd70      	pop	{r4, r5, r6, pc}
 8015228:	4623      	mov	r3, r4
 801522a:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 801522e:	f803 5b01 	strb.w	r5, [r3], #1
 8015232:	1e56      	subs	r6, r2, #1
 8015234:	b92d      	cbnz	r5, 8015242 <strncpy+0x24>
 8015236:	4414      	add	r4, r2
 8015238:	42a3      	cmp	r3, r4
 801523a:	d0f4      	beq.n	8015226 <strncpy+0x8>
 801523c:	f803 5b01 	strb.w	r5, [r3], #1
 8015240:	e7fa      	b.n	8015238 <strncpy+0x1a>
 8015242:	461c      	mov	r4, r3
 8015244:	4632      	mov	r2, r6
 8015246:	e7ed      	b.n	8015224 <strncpy+0x6>

08015248 <strstr>:
 8015248:	b5f0      	push	{r4, r5, r6, r7, lr}
 801524a:	7803      	ldrb	r3, [r0, #0]
 801524c:	b17b      	cbz	r3, 801526e <strstr+0x26>
 801524e:	4604      	mov	r4, r0
 8015250:	7823      	ldrb	r3, [r4, #0]
 8015252:	4620      	mov	r0, r4
 8015254:	1c66      	adds	r6, r4, #1
 8015256:	b17b      	cbz	r3, 8015278 <strstr+0x30>
 8015258:	1e4a      	subs	r2, r1, #1
 801525a:	1e63      	subs	r3, r4, #1
 801525c:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8015260:	b14d      	cbz	r5, 8015276 <strstr+0x2e>
 8015262:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8015266:	42af      	cmp	r7, r5
 8015268:	4634      	mov	r4, r6
 801526a:	d0f7      	beq.n	801525c <strstr+0x14>
 801526c:	e7f0      	b.n	8015250 <strstr+0x8>
 801526e:	780b      	ldrb	r3, [r1, #0]
 8015270:	2b00      	cmp	r3, #0
 8015272:	bf18      	it	ne
 8015274:	2000      	movne	r0, #0
 8015276:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015278:	4618      	mov	r0, r3
 801527a:	e7fc      	b.n	8015276 <strstr+0x2e>

0801527c <sulp>:
 801527c:	b570      	push	{r4, r5, r6, lr}
 801527e:	4604      	mov	r4, r0
 8015280:	460d      	mov	r5, r1
 8015282:	ec45 4b10 	vmov	d0, r4, r5
 8015286:	4616      	mov	r6, r2
 8015288:	f001 fd36 	bl	8016cf8 <__ulp>
 801528c:	ec51 0b10 	vmov	r0, r1, d0
 8015290:	b17e      	cbz	r6, 80152b2 <sulp+0x36>
 8015292:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8015296:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801529a:	2b00      	cmp	r3, #0
 801529c:	dd09      	ble.n	80152b2 <sulp+0x36>
 801529e:	051b      	lsls	r3, r3, #20
 80152a0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80152a4:	2400      	movs	r4, #0
 80152a6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80152aa:	4622      	mov	r2, r4
 80152ac:	462b      	mov	r3, r5
 80152ae:	f7eb f9b3 	bl	8000618 <__aeabi_dmul>
 80152b2:	bd70      	pop	{r4, r5, r6, pc}
 80152b4:	0000      	movs	r0, r0
	...

080152b8 <_strtod_l>:
 80152b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80152bc:	461f      	mov	r7, r3
 80152be:	b0a1      	sub	sp, #132	; 0x84
 80152c0:	2300      	movs	r3, #0
 80152c2:	4681      	mov	r9, r0
 80152c4:	4638      	mov	r0, r7
 80152c6:	460e      	mov	r6, r1
 80152c8:	9217      	str	r2, [sp, #92]	; 0x5c
 80152ca:	931c      	str	r3, [sp, #112]	; 0x70
 80152cc:	f001 fa35 	bl	801673a <__localeconv_l>
 80152d0:	4680      	mov	r8, r0
 80152d2:	6800      	ldr	r0, [r0, #0]
 80152d4:	f7ea ff86 	bl	80001e4 <strlen>
 80152d8:	f04f 0a00 	mov.w	sl, #0
 80152dc:	4604      	mov	r4, r0
 80152de:	f04f 0b00 	mov.w	fp, #0
 80152e2:	961b      	str	r6, [sp, #108]	; 0x6c
 80152e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80152e6:	781a      	ldrb	r2, [r3, #0]
 80152e8:	2a0d      	cmp	r2, #13
 80152ea:	d832      	bhi.n	8015352 <_strtod_l+0x9a>
 80152ec:	2a09      	cmp	r2, #9
 80152ee:	d236      	bcs.n	801535e <_strtod_l+0xa6>
 80152f0:	2a00      	cmp	r2, #0
 80152f2:	d03e      	beq.n	8015372 <_strtod_l+0xba>
 80152f4:	2300      	movs	r3, #0
 80152f6:	930d      	str	r3, [sp, #52]	; 0x34
 80152f8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80152fa:	782b      	ldrb	r3, [r5, #0]
 80152fc:	2b30      	cmp	r3, #48	; 0x30
 80152fe:	f040 80ac 	bne.w	801545a <_strtod_l+0x1a2>
 8015302:	786b      	ldrb	r3, [r5, #1]
 8015304:	2b58      	cmp	r3, #88	; 0x58
 8015306:	d001      	beq.n	801530c <_strtod_l+0x54>
 8015308:	2b78      	cmp	r3, #120	; 0x78
 801530a:	d167      	bne.n	80153dc <_strtod_l+0x124>
 801530c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801530e:	9301      	str	r3, [sp, #4]
 8015310:	ab1c      	add	r3, sp, #112	; 0x70
 8015312:	9300      	str	r3, [sp, #0]
 8015314:	9702      	str	r7, [sp, #8]
 8015316:	ab1d      	add	r3, sp, #116	; 0x74
 8015318:	4a88      	ldr	r2, [pc, #544]	; (801553c <_strtod_l+0x284>)
 801531a:	a91b      	add	r1, sp, #108	; 0x6c
 801531c:	4648      	mov	r0, r9
 801531e:	f000 ff32 	bl	8016186 <__gethex>
 8015322:	f010 0407 	ands.w	r4, r0, #7
 8015326:	4606      	mov	r6, r0
 8015328:	d005      	beq.n	8015336 <_strtod_l+0x7e>
 801532a:	2c06      	cmp	r4, #6
 801532c:	d12b      	bne.n	8015386 <_strtod_l+0xce>
 801532e:	3501      	adds	r5, #1
 8015330:	2300      	movs	r3, #0
 8015332:	951b      	str	r5, [sp, #108]	; 0x6c
 8015334:	930d      	str	r3, [sp, #52]	; 0x34
 8015336:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015338:	2b00      	cmp	r3, #0
 801533a:	f040 859a 	bne.w	8015e72 <_strtod_l+0xbba>
 801533e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015340:	b1e3      	cbz	r3, 801537c <_strtod_l+0xc4>
 8015342:	4652      	mov	r2, sl
 8015344:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8015348:	ec43 2b10 	vmov	d0, r2, r3
 801534c:	b021      	add	sp, #132	; 0x84
 801534e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015352:	2a2b      	cmp	r2, #43	; 0x2b
 8015354:	d015      	beq.n	8015382 <_strtod_l+0xca>
 8015356:	2a2d      	cmp	r2, #45	; 0x2d
 8015358:	d004      	beq.n	8015364 <_strtod_l+0xac>
 801535a:	2a20      	cmp	r2, #32
 801535c:	d1ca      	bne.n	80152f4 <_strtod_l+0x3c>
 801535e:	3301      	adds	r3, #1
 8015360:	931b      	str	r3, [sp, #108]	; 0x6c
 8015362:	e7bf      	b.n	80152e4 <_strtod_l+0x2c>
 8015364:	2201      	movs	r2, #1
 8015366:	920d      	str	r2, [sp, #52]	; 0x34
 8015368:	1c5a      	adds	r2, r3, #1
 801536a:	921b      	str	r2, [sp, #108]	; 0x6c
 801536c:	785b      	ldrb	r3, [r3, #1]
 801536e:	2b00      	cmp	r3, #0
 8015370:	d1c2      	bne.n	80152f8 <_strtod_l+0x40>
 8015372:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015374:	961b      	str	r6, [sp, #108]	; 0x6c
 8015376:	2b00      	cmp	r3, #0
 8015378:	f040 8579 	bne.w	8015e6e <_strtod_l+0xbb6>
 801537c:	4652      	mov	r2, sl
 801537e:	465b      	mov	r3, fp
 8015380:	e7e2      	b.n	8015348 <_strtod_l+0x90>
 8015382:	2200      	movs	r2, #0
 8015384:	e7ef      	b.n	8015366 <_strtod_l+0xae>
 8015386:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8015388:	b13a      	cbz	r2, 801539a <_strtod_l+0xe2>
 801538a:	2135      	movs	r1, #53	; 0x35
 801538c:	a81e      	add	r0, sp, #120	; 0x78
 801538e:	f001 fdab 	bl	8016ee8 <__copybits>
 8015392:	991c      	ldr	r1, [sp, #112]	; 0x70
 8015394:	4648      	mov	r0, r9
 8015396:	f001 fa18 	bl	80167ca <_Bfree>
 801539a:	3c01      	subs	r4, #1
 801539c:	2c04      	cmp	r4, #4
 801539e:	d806      	bhi.n	80153ae <_strtod_l+0xf6>
 80153a0:	e8df f004 	tbb	[pc, r4]
 80153a4:	1714030a 	.word	0x1714030a
 80153a8:	0a          	.byte	0x0a
 80153a9:	00          	.byte	0x00
 80153aa:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 80153ae:	0730      	lsls	r0, r6, #28
 80153b0:	d5c1      	bpl.n	8015336 <_strtod_l+0x7e>
 80153b2:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80153b6:	e7be      	b.n	8015336 <_strtod_l+0x7e>
 80153b8:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 80153bc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80153be:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80153c2:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80153c6:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80153ca:	e7f0      	b.n	80153ae <_strtod_l+0xf6>
 80153cc:	f8df b170 	ldr.w	fp, [pc, #368]	; 8015540 <_strtod_l+0x288>
 80153d0:	e7ed      	b.n	80153ae <_strtod_l+0xf6>
 80153d2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80153d6:	f04f 3aff 	mov.w	sl, #4294967295
 80153da:	e7e8      	b.n	80153ae <_strtod_l+0xf6>
 80153dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80153de:	1c5a      	adds	r2, r3, #1
 80153e0:	921b      	str	r2, [sp, #108]	; 0x6c
 80153e2:	785b      	ldrb	r3, [r3, #1]
 80153e4:	2b30      	cmp	r3, #48	; 0x30
 80153e6:	d0f9      	beq.n	80153dc <_strtod_l+0x124>
 80153e8:	2b00      	cmp	r3, #0
 80153ea:	d0a4      	beq.n	8015336 <_strtod_l+0x7e>
 80153ec:	2301      	movs	r3, #1
 80153ee:	2500      	movs	r5, #0
 80153f0:	9306      	str	r3, [sp, #24]
 80153f2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80153f4:	9308      	str	r3, [sp, #32]
 80153f6:	9507      	str	r5, [sp, #28]
 80153f8:	9505      	str	r5, [sp, #20]
 80153fa:	220a      	movs	r2, #10
 80153fc:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80153fe:	7807      	ldrb	r7, [r0, #0]
 8015400:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8015404:	b2d9      	uxtb	r1, r3
 8015406:	2909      	cmp	r1, #9
 8015408:	d929      	bls.n	801545e <_strtod_l+0x1a6>
 801540a:	4622      	mov	r2, r4
 801540c:	f8d8 1000 	ldr.w	r1, [r8]
 8015410:	f7ff fef3 	bl	80151fa <strncmp>
 8015414:	2800      	cmp	r0, #0
 8015416:	d031      	beq.n	801547c <_strtod_l+0x1c4>
 8015418:	2000      	movs	r0, #0
 801541a:	9c05      	ldr	r4, [sp, #20]
 801541c:	9004      	str	r0, [sp, #16]
 801541e:	463b      	mov	r3, r7
 8015420:	4602      	mov	r2, r0
 8015422:	2b65      	cmp	r3, #101	; 0x65
 8015424:	d001      	beq.n	801542a <_strtod_l+0x172>
 8015426:	2b45      	cmp	r3, #69	; 0x45
 8015428:	d114      	bne.n	8015454 <_strtod_l+0x19c>
 801542a:	b924      	cbnz	r4, 8015436 <_strtod_l+0x17e>
 801542c:	b910      	cbnz	r0, 8015434 <_strtod_l+0x17c>
 801542e:	9b06      	ldr	r3, [sp, #24]
 8015430:	2b00      	cmp	r3, #0
 8015432:	d09e      	beq.n	8015372 <_strtod_l+0xba>
 8015434:	2400      	movs	r4, #0
 8015436:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8015438:	1c73      	adds	r3, r6, #1
 801543a:	931b      	str	r3, [sp, #108]	; 0x6c
 801543c:	7873      	ldrb	r3, [r6, #1]
 801543e:	2b2b      	cmp	r3, #43	; 0x2b
 8015440:	d078      	beq.n	8015534 <_strtod_l+0x27c>
 8015442:	2b2d      	cmp	r3, #45	; 0x2d
 8015444:	d070      	beq.n	8015528 <_strtod_l+0x270>
 8015446:	f04f 0c00 	mov.w	ip, #0
 801544a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 801544e:	2f09      	cmp	r7, #9
 8015450:	d97c      	bls.n	801554c <_strtod_l+0x294>
 8015452:	961b      	str	r6, [sp, #108]	; 0x6c
 8015454:	f04f 0e00 	mov.w	lr, #0
 8015458:	e09a      	b.n	8015590 <_strtod_l+0x2d8>
 801545a:	2300      	movs	r3, #0
 801545c:	e7c7      	b.n	80153ee <_strtod_l+0x136>
 801545e:	9905      	ldr	r1, [sp, #20]
 8015460:	2908      	cmp	r1, #8
 8015462:	bfdd      	ittte	le
 8015464:	9907      	ldrle	r1, [sp, #28]
 8015466:	fb02 3301 	mlale	r3, r2, r1, r3
 801546a:	9307      	strle	r3, [sp, #28]
 801546c:	fb02 3505 	mlagt	r5, r2, r5, r3
 8015470:	9b05      	ldr	r3, [sp, #20]
 8015472:	3001      	adds	r0, #1
 8015474:	3301      	adds	r3, #1
 8015476:	9305      	str	r3, [sp, #20]
 8015478:	901b      	str	r0, [sp, #108]	; 0x6c
 801547a:	e7bf      	b.n	80153fc <_strtod_l+0x144>
 801547c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801547e:	191a      	adds	r2, r3, r4
 8015480:	921b      	str	r2, [sp, #108]	; 0x6c
 8015482:	9a05      	ldr	r2, [sp, #20]
 8015484:	5d1b      	ldrb	r3, [r3, r4]
 8015486:	2a00      	cmp	r2, #0
 8015488:	d037      	beq.n	80154fa <_strtod_l+0x242>
 801548a:	9c05      	ldr	r4, [sp, #20]
 801548c:	4602      	mov	r2, r0
 801548e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8015492:	2909      	cmp	r1, #9
 8015494:	d913      	bls.n	80154be <_strtod_l+0x206>
 8015496:	2101      	movs	r1, #1
 8015498:	9104      	str	r1, [sp, #16]
 801549a:	e7c2      	b.n	8015422 <_strtod_l+0x16a>
 801549c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801549e:	1c5a      	adds	r2, r3, #1
 80154a0:	921b      	str	r2, [sp, #108]	; 0x6c
 80154a2:	785b      	ldrb	r3, [r3, #1]
 80154a4:	3001      	adds	r0, #1
 80154a6:	2b30      	cmp	r3, #48	; 0x30
 80154a8:	d0f8      	beq.n	801549c <_strtod_l+0x1e4>
 80154aa:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80154ae:	2a08      	cmp	r2, #8
 80154b0:	f200 84e4 	bhi.w	8015e7c <_strtod_l+0xbc4>
 80154b4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80154b6:	9208      	str	r2, [sp, #32]
 80154b8:	4602      	mov	r2, r0
 80154ba:	2000      	movs	r0, #0
 80154bc:	4604      	mov	r4, r0
 80154be:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 80154c2:	f100 0101 	add.w	r1, r0, #1
 80154c6:	d012      	beq.n	80154ee <_strtod_l+0x236>
 80154c8:	440a      	add	r2, r1
 80154ca:	eb00 0c04 	add.w	ip, r0, r4
 80154ce:	4621      	mov	r1, r4
 80154d0:	270a      	movs	r7, #10
 80154d2:	458c      	cmp	ip, r1
 80154d4:	d113      	bne.n	80154fe <_strtod_l+0x246>
 80154d6:	1821      	adds	r1, r4, r0
 80154d8:	2908      	cmp	r1, #8
 80154da:	f104 0401 	add.w	r4, r4, #1
 80154de:	4404      	add	r4, r0
 80154e0:	dc19      	bgt.n	8015516 <_strtod_l+0x25e>
 80154e2:	9b07      	ldr	r3, [sp, #28]
 80154e4:	210a      	movs	r1, #10
 80154e6:	fb01 e303 	mla	r3, r1, r3, lr
 80154ea:	9307      	str	r3, [sp, #28]
 80154ec:	2100      	movs	r1, #0
 80154ee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80154f0:	1c58      	adds	r0, r3, #1
 80154f2:	901b      	str	r0, [sp, #108]	; 0x6c
 80154f4:	785b      	ldrb	r3, [r3, #1]
 80154f6:	4608      	mov	r0, r1
 80154f8:	e7c9      	b.n	801548e <_strtod_l+0x1d6>
 80154fa:	9805      	ldr	r0, [sp, #20]
 80154fc:	e7d3      	b.n	80154a6 <_strtod_l+0x1ee>
 80154fe:	2908      	cmp	r1, #8
 8015500:	f101 0101 	add.w	r1, r1, #1
 8015504:	dc03      	bgt.n	801550e <_strtod_l+0x256>
 8015506:	9b07      	ldr	r3, [sp, #28]
 8015508:	437b      	muls	r3, r7
 801550a:	9307      	str	r3, [sp, #28]
 801550c:	e7e1      	b.n	80154d2 <_strtod_l+0x21a>
 801550e:	2910      	cmp	r1, #16
 8015510:	bfd8      	it	le
 8015512:	437d      	mulle	r5, r7
 8015514:	e7dd      	b.n	80154d2 <_strtod_l+0x21a>
 8015516:	2c10      	cmp	r4, #16
 8015518:	bfdc      	itt	le
 801551a:	210a      	movle	r1, #10
 801551c:	fb01 e505 	mlale	r5, r1, r5, lr
 8015520:	e7e4      	b.n	80154ec <_strtod_l+0x234>
 8015522:	2301      	movs	r3, #1
 8015524:	9304      	str	r3, [sp, #16]
 8015526:	e781      	b.n	801542c <_strtod_l+0x174>
 8015528:	f04f 0c01 	mov.w	ip, #1
 801552c:	1cb3      	adds	r3, r6, #2
 801552e:	931b      	str	r3, [sp, #108]	; 0x6c
 8015530:	78b3      	ldrb	r3, [r6, #2]
 8015532:	e78a      	b.n	801544a <_strtod_l+0x192>
 8015534:	f04f 0c00 	mov.w	ip, #0
 8015538:	e7f8      	b.n	801552c <_strtod_l+0x274>
 801553a:	bf00      	nop
 801553c:	0802b358 	.word	0x0802b358
 8015540:	7ff00000 	.word	0x7ff00000
 8015544:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015546:	1c5f      	adds	r7, r3, #1
 8015548:	971b      	str	r7, [sp, #108]	; 0x6c
 801554a:	785b      	ldrb	r3, [r3, #1]
 801554c:	2b30      	cmp	r3, #48	; 0x30
 801554e:	d0f9      	beq.n	8015544 <_strtod_l+0x28c>
 8015550:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8015554:	2f08      	cmp	r7, #8
 8015556:	f63f af7d 	bhi.w	8015454 <_strtod_l+0x19c>
 801555a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 801555e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015560:	930a      	str	r3, [sp, #40]	; 0x28
 8015562:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015564:	1c5f      	adds	r7, r3, #1
 8015566:	971b      	str	r7, [sp, #108]	; 0x6c
 8015568:	785b      	ldrb	r3, [r3, #1]
 801556a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 801556e:	f1b8 0f09 	cmp.w	r8, #9
 8015572:	d937      	bls.n	80155e4 <_strtod_l+0x32c>
 8015574:	990a      	ldr	r1, [sp, #40]	; 0x28
 8015576:	1a7f      	subs	r7, r7, r1
 8015578:	2f08      	cmp	r7, #8
 801557a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 801557e:	dc37      	bgt.n	80155f0 <_strtod_l+0x338>
 8015580:	45be      	cmp	lr, r7
 8015582:	bfa8      	it	ge
 8015584:	46be      	movge	lr, r7
 8015586:	f1bc 0f00 	cmp.w	ip, #0
 801558a:	d001      	beq.n	8015590 <_strtod_l+0x2d8>
 801558c:	f1ce 0e00 	rsb	lr, lr, #0
 8015590:	2c00      	cmp	r4, #0
 8015592:	d151      	bne.n	8015638 <_strtod_l+0x380>
 8015594:	2800      	cmp	r0, #0
 8015596:	f47f aece 	bne.w	8015336 <_strtod_l+0x7e>
 801559a:	9a06      	ldr	r2, [sp, #24]
 801559c:	2a00      	cmp	r2, #0
 801559e:	f47f aeca 	bne.w	8015336 <_strtod_l+0x7e>
 80155a2:	9a04      	ldr	r2, [sp, #16]
 80155a4:	2a00      	cmp	r2, #0
 80155a6:	f47f aee4 	bne.w	8015372 <_strtod_l+0xba>
 80155aa:	2b4e      	cmp	r3, #78	; 0x4e
 80155ac:	d027      	beq.n	80155fe <_strtod_l+0x346>
 80155ae:	dc21      	bgt.n	80155f4 <_strtod_l+0x33c>
 80155b0:	2b49      	cmp	r3, #73	; 0x49
 80155b2:	f47f aede 	bne.w	8015372 <_strtod_l+0xba>
 80155b6:	49a0      	ldr	r1, [pc, #640]	; (8015838 <_strtod_l+0x580>)
 80155b8:	a81b      	add	r0, sp, #108	; 0x6c
 80155ba:	f001 f817 	bl	80165ec <__match>
 80155be:	2800      	cmp	r0, #0
 80155c0:	f43f aed7 	beq.w	8015372 <_strtod_l+0xba>
 80155c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80155c6:	499d      	ldr	r1, [pc, #628]	; (801583c <_strtod_l+0x584>)
 80155c8:	3b01      	subs	r3, #1
 80155ca:	a81b      	add	r0, sp, #108	; 0x6c
 80155cc:	931b      	str	r3, [sp, #108]	; 0x6c
 80155ce:	f001 f80d 	bl	80165ec <__match>
 80155d2:	b910      	cbnz	r0, 80155da <_strtod_l+0x322>
 80155d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80155d6:	3301      	adds	r3, #1
 80155d8:	931b      	str	r3, [sp, #108]	; 0x6c
 80155da:	f8df b274 	ldr.w	fp, [pc, #628]	; 8015850 <_strtod_l+0x598>
 80155de:	f04f 0a00 	mov.w	sl, #0
 80155e2:	e6a8      	b.n	8015336 <_strtod_l+0x7e>
 80155e4:	210a      	movs	r1, #10
 80155e6:	fb01 3e0e 	mla	lr, r1, lr, r3
 80155ea:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80155ee:	e7b8      	b.n	8015562 <_strtod_l+0x2aa>
 80155f0:	46be      	mov	lr, r7
 80155f2:	e7c8      	b.n	8015586 <_strtod_l+0x2ce>
 80155f4:	2b69      	cmp	r3, #105	; 0x69
 80155f6:	d0de      	beq.n	80155b6 <_strtod_l+0x2fe>
 80155f8:	2b6e      	cmp	r3, #110	; 0x6e
 80155fa:	f47f aeba 	bne.w	8015372 <_strtod_l+0xba>
 80155fe:	4990      	ldr	r1, [pc, #576]	; (8015840 <_strtod_l+0x588>)
 8015600:	a81b      	add	r0, sp, #108	; 0x6c
 8015602:	f000 fff3 	bl	80165ec <__match>
 8015606:	2800      	cmp	r0, #0
 8015608:	f43f aeb3 	beq.w	8015372 <_strtod_l+0xba>
 801560c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801560e:	781b      	ldrb	r3, [r3, #0]
 8015610:	2b28      	cmp	r3, #40	; 0x28
 8015612:	d10e      	bne.n	8015632 <_strtod_l+0x37a>
 8015614:	aa1e      	add	r2, sp, #120	; 0x78
 8015616:	498b      	ldr	r1, [pc, #556]	; (8015844 <_strtod_l+0x58c>)
 8015618:	a81b      	add	r0, sp, #108	; 0x6c
 801561a:	f000 fffb 	bl	8016614 <__hexnan>
 801561e:	2805      	cmp	r0, #5
 8015620:	d107      	bne.n	8015632 <_strtod_l+0x37a>
 8015622:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8015624:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8015628:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801562c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8015630:	e681      	b.n	8015336 <_strtod_l+0x7e>
 8015632:	f8df b224 	ldr.w	fp, [pc, #548]	; 8015858 <_strtod_l+0x5a0>
 8015636:	e7d2      	b.n	80155de <_strtod_l+0x326>
 8015638:	ebae 0302 	sub.w	r3, lr, r2
 801563c:	9306      	str	r3, [sp, #24]
 801563e:	9b05      	ldr	r3, [sp, #20]
 8015640:	9807      	ldr	r0, [sp, #28]
 8015642:	2b00      	cmp	r3, #0
 8015644:	bf08      	it	eq
 8015646:	4623      	moveq	r3, r4
 8015648:	2c10      	cmp	r4, #16
 801564a:	9305      	str	r3, [sp, #20]
 801564c:	46a0      	mov	r8, r4
 801564e:	bfa8      	it	ge
 8015650:	f04f 0810 	movge.w	r8, #16
 8015654:	f7ea ff66 	bl	8000524 <__aeabi_ui2d>
 8015658:	2c09      	cmp	r4, #9
 801565a:	4682      	mov	sl, r0
 801565c:	468b      	mov	fp, r1
 801565e:	dc13      	bgt.n	8015688 <_strtod_l+0x3d0>
 8015660:	9b06      	ldr	r3, [sp, #24]
 8015662:	2b00      	cmp	r3, #0
 8015664:	f43f ae67 	beq.w	8015336 <_strtod_l+0x7e>
 8015668:	9b06      	ldr	r3, [sp, #24]
 801566a:	dd7a      	ble.n	8015762 <_strtod_l+0x4aa>
 801566c:	2b16      	cmp	r3, #22
 801566e:	dc61      	bgt.n	8015734 <_strtod_l+0x47c>
 8015670:	4a75      	ldr	r2, [pc, #468]	; (8015848 <_strtod_l+0x590>)
 8015672:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8015676:	e9de 0100 	ldrd	r0, r1, [lr]
 801567a:	4652      	mov	r2, sl
 801567c:	465b      	mov	r3, fp
 801567e:	f7ea ffcb 	bl	8000618 <__aeabi_dmul>
 8015682:	4682      	mov	sl, r0
 8015684:	468b      	mov	fp, r1
 8015686:	e656      	b.n	8015336 <_strtod_l+0x7e>
 8015688:	4b6f      	ldr	r3, [pc, #444]	; (8015848 <_strtod_l+0x590>)
 801568a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801568e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8015692:	f7ea ffc1 	bl	8000618 <__aeabi_dmul>
 8015696:	4606      	mov	r6, r0
 8015698:	4628      	mov	r0, r5
 801569a:	460f      	mov	r7, r1
 801569c:	f7ea ff42 	bl	8000524 <__aeabi_ui2d>
 80156a0:	4602      	mov	r2, r0
 80156a2:	460b      	mov	r3, r1
 80156a4:	4630      	mov	r0, r6
 80156a6:	4639      	mov	r1, r7
 80156a8:	f7ea fe00 	bl	80002ac <__adddf3>
 80156ac:	2c0f      	cmp	r4, #15
 80156ae:	4682      	mov	sl, r0
 80156b0:	468b      	mov	fp, r1
 80156b2:	ddd5      	ble.n	8015660 <_strtod_l+0x3a8>
 80156b4:	9b06      	ldr	r3, [sp, #24]
 80156b6:	eba4 0808 	sub.w	r8, r4, r8
 80156ba:	4498      	add	r8, r3
 80156bc:	f1b8 0f00 	cmp.w	r8, #0
 80156c0:	f340 8096 	ble.w	80157f0 <_strtod_l+0x538>
 80156c4:	f018 030f 	ands.w	r3, r8, #15
 80156c8:	d00a      	beq.n	80156e0 <_strtod_l+0x428>
 80156ca:	495f      	ldr	r1, [pc, #380]	; (8015848 <_strtod_l+0x590>)
 80156cc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80156d0:	4652      	mov	r2, sl
 80156d2:	465b      	mov	r3, fp
 80156d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80156d8:	f7ea ff9e 	bl	8000618 <__aeabi_dmul>
 80156dc:	4682      	mov	sl, r0
 80156de:	468b      	mov	fp, r1
 80156e0:	f038 080f 	bics.w	r8, r8, #15
 80156e4:	d073      	beq.n	80157ce <_strtod_l+0x516>
 80156e6:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80156ea:	dd47      	ble.n	801577c <_strtod_l+0x4c4>
 80156ec:	2400      	movs	r4, #0
 80156ee:	46a0      	mov	r8, r4
 80156f0:	9407      	str	r4, [sp, #28]
 80156f2:	9405      	str	r4, [sp, #20]
 80156f4:	2322      	movs	r3, #34	; 0x22
 80156f6:	f8df b158 	ldr.w	fp, [pc, #344]	; 8015850 <_strtod_l+0x598>
 80156fa:	f8c9 3000 	str.w	r3, [r9]
 80156fe:	f04f 0a00 	mov.w	sl, #0
 8015702:	9b07      	ldr	r3, [sp, #28]
 8015704:	2b00      	cmp	r3, #0
 8015706:	f43f ae16 	beq.w	8015336 <_strtod_l+0x7e>
 801570a:	991c      	ldr	r1, [sp, #112]	; 0x70
 801570c:	4648      	mov	r0, r9
 801570e:	f001 f85c 	bl	80167ca <_Bfree>
 8015712:	9905      	ldr	r1, [sp, #20]
 8015714:	4648      	mov	r0, r9
 8015716:	f001 f858 	bl	80167ca <_Bfree>
 801571a:	4641      	mov	r1, r8
 801571c:	4648      	mov	r0, r9
 801571e:	f001 f854 	bl	80167ca <_Bfree>
 8015722:	9907      	ldr	r1, [sp, #28]
 8015724:	4648      	mov	r0, r9
 8015726:	f001 f850 	bl	80167ca <_Bfree>
 801572a:	4621      	mov	r1, r4
 801572c:	4648      	mov	r0, r9
 801572e:	f001 f84c 	bl	80167ca <_Bfree>
 8015732:	e600      	b.n	8015336 <_strtod_l+0x7e>
 8015734:	9a06      	ldr	r2, [sp, #24]
 8015736:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 801573a:	4293      	cmp	r3, r2
 801573c:	dbba      	blt.n	80156b4 <_strtod_l+0x3fc>
 801573e:	4d42      	ldr	r5, [pc, #264]	; (8015848 <_strtod_l+0x590>)
 8015740:	f1c4 040f 	rsb	r4, r4, #15
 8015744:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8015748:	4652      	mov	r2, sl
 801574a:	465b      	mov	r3, fp
 801574c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015750:	f7ea ff62 	bl	8000618 <__aeabi_dmul>
 8015754:	9b06      	ldr	r3, [sp, #24]
 8015756:	1b1c      	subs	r4, r3, r4
 8015758:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 801575c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015760:	e78d      	b.n	801567e <_strtod_l+0x3c6>
 8015762:	f113 0f16 	cmn.w	r3, #22
 8015766:	dba5      	blt.n	80156b4 <_strtod_l+0x3fc>
 8015768:	4a37      	ldr	r2, [pc, #220]	; (8015848 <_strtod_l+0x590>)
 801576a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 801576e:	e9d2 2300 	ldrd	r2, r3, [r2]
 8015772:	4650      	mov	r0, sl
 8015774:	4659      	mov	r1, fp
 8015776:	f7eb f879 	bl	800086c <__aeabi_ddiv>
 801577a:	e782      	b.n	8015682 <_strtod_l+0x3ca>
 801577c:	2300      	movs	r3, #0
 801577e:	4e33      	ldr	r6, [pc, #204]	; (801584c <_strtod_l+0x594>)
 8015780:	ea4f 1828 	mov.w	r8, r8, asr #4
 8015784:	4650      	mov	r0, sl
 8015786:	4659      	mov	r1, fp
 8015788:	461d      	mov	r5, r3
 801578a:	f1b8 0f01 	cmp.w	r8, #1
 801578e:	dc21      	bgt.n	80157d4 <_strtod_l+0x51c>
 8015790:	b10b      	cbz	r3, 8015796 <_strtod_l+0x4de>
 8015792:	4682      	mov	sl, r0
 8015794:	468b      	mov	fp, r1
 8015796:	4b2d      	ldr	r3, [pc, #180]	; (801584c <_strtod_l+0x594>)
 8015798:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801579c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80157a0:	4652      	mov	r2, sl
 80157a2:	465b      	mov	r3, fp
 80157a4:	e9d5 0100 	ldrd	r0, r1, [r5]
 80157a8:	f7ea ff36 	bl	8000618 <__aeabi_dmul>
 80157ac:	4b28      	ldr	r3, [pc, #160]	; (8015850 <_strtod_l+0x598>)
 80157ae:	460a      	mov	r2, r1
 80157b0:	400b      	ands	r3, r1
 80157b2:	4928      	ldr	r1, [pc, #160]	; (8015854 <_strtod_l+0x59c>)
 80157b4:	428b      	cmp	r3, r1
 80157b6:	4682      	mov	sl, r0
 80157b8:	d898      	bhi.n	80156ec <_strtod_l+0x434>
 80157ba:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80157be:	428b      	cmp	r3, r1
 80157c0:	bf86      	itte	hi
 80157c2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 801585c <_strtod_l+0x5a4>
 80157c6:	f04f 3aff 	movhi.w	sl, #4294967295
 80157ca:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80157ce:	2300      	movs	r3, #0
 80157d0:	9304      	str	r3, [sp, #16]
 80157d2:	e077      	b.n	80158c4 <_strtod_l+0x60c>
 80157d4:	f018 0f01 	tst.w	r8, #1
 80157d8:	d006      	beq.n	80157e8 <_strtod_l+0x530>
 80157da:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 80157de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157e2:	f7ea ff19 	bl	8000618 <__aeabi_dmul>
 80157e6:	2301      	movs	r3, #1
 80157e8:	3501      	adds	r5, #1
 80157ea:	ea4f 0868 	mov.w	r8, r8, asr #1
 80157ee:	e7cc      	b.n	801578a <_strtod_l+0x4d2>
 80157f0:	d0ed      	beq.n	80157ce <_strtod_l+0x516>
 80157f2:	f1c8 0800 	rsb	r8, r8, #0
 80157f6:	f018 020f 	ands.w	r2, r8, #15
 80157fa:	d00a      	beq.n	8015812 <_strtod_l+0x55a>
 80157fc:	4b12      	ldr	r3, [pc, #72]	; (8015848 <_strtod_l+0x590>)
 80157fe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015802:	4650      	mov	r0, sl
 8015804:	4659      	mov	r1, fp
 8015806:	e9d3 2300 	ldrd	r2, r3, [r3]
 801580a:	f7eb f82f 	bl	800086c <__aeabi_ddiv>
 801580e:	4682      	mov	sl, r0
 8015810:	468b      	mov	fp, r1
 8015812:	ea5f 1828 	movs.w	r8, r8, asr #4
 8015816:	d0da      	beq.n	80157ce <_strtod_l+0x516>
 8015818:	f1b8 0f1f 	cmp.w	r8, #31
 801581c:	dd20      	ble.n	8015860 <_strtod_l+0x5a8>
 801581e:	2400      	movs	r4, #0
 8015820:	46a0      	mov	r8, r4
 8015822:	9407      	str	r4, [sp, #28]
 8015824:	9405      	str	r4, [sp, #20]
 8015826:	2322      	movs	r3, #34	; 0x22
 8015828:	f04f 0a00 	mov.w	sl, #0
 801582c:	f04f 0b00 	mov.w	fp, #0
 8015830:	f8c9 3000 	str.w	r3, [r9]
 8015834:	e765      	b.n	8015702 <_strtod_l+0x44a>
 8015836:	bf00      	nop
 8015838:	0802b34c 	.word	0x0802b34c
 801583c:	0802b34f 	.word	0x0802b34f
 8015840:	0802b355 	.word	0x0802b355
 8015844:	0802b36c 	.word	0x0802b36c
 8015848:	0802b400 	.word	0x0802b400
 801584c:	0802b3d8 	.word	0x0802b3d8
 8015850:	7ff00000 	.word	0x7ff00000
 8015854:	7ca00000 	.word	0x7ca00000
 8015858:	fff80000 	.word	0xfff80000
 801585c:	7fefffff 	.word	0x7fefffff
 8015860:	f018 0310 	ands.w	r3, r8, #16
 8015864:	bf18      	it	ne
 8015866:	236a      	movne	r3, #106	; 0x6a
 8015868:	4da0      	ldr	r5, [pc, #640]	; (8015aec <_strtod_l+0x834>)
 801586a:	9304      	str	r3, [sp, #16]
 801586c:	4650      	mov	r0, sl
 801586e:	4659      	mov	r1, fp
 8015870:	2300      	movs	r3, #0
 8015872:	f1b8 0f00 	cmp.w	r8, #0
 8015876:	f300 810a 	bgt.w	8015a8e <_strtod_l+0x7d6>
 801587a:	b10b      	cbz	r3, 8015880 <_strtod_l+0x5c8>
 801587c:	4682      	mov	sl, r0
 801587e:	468b      	mov	fp, r1
 8015880:	9b04      	ldr	r3, [sp, #16]
 8015882:	b1bb      	cbz	r3, 80158b4 <_strtod_l+0x5fc>
 8015884:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8015888:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801588c:	2b00      	cmp	r3, #0
 801588e:	4659      	mov	r1, fp
 8015890:	dd10      	ble.n	80158b4 <_strtod_l+0x5fc>
 8015892:	2b1f      	cmp	r3, #31
 8015894:	f340 8107 	ble.w	8015aa6 <_strtod_l+0x7ee>
 8015898:	2b34      	cmp	r3, #52	; 0x34
 801589a:	bfde      	ittt	le
 801589c:	3b20      	suble	r3, #32
 801589e:	f04f 32ff 	movle.w	r2, #4294967295
 80158a2:	fa02 f303 	lslle.w	r3, r2, r3
 80158a6:	f04f 0a00 	mov.w	sl, #0
 80158aa:	bfcc      	ite	gt
 80158ac:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80158b0:	ea03 0b01 	andle.w	fp, r3, r1
 80158b4:	2200      	movs	r2, #0
 80158b6:	2300      	movs	r3, #0
 80158b8:	4650      	mov	r0, sl
 80158ba:	4659      	mov	r1, fp
 80158bc:	f7eb f914 	bl	8000ae8 <__aeabi_dcmpeq>
 80158c0:	2800      	cmp	r0, #0
 80158c2:	d1ac      	bne.n	801581e <_strtod_l+0x566>
 80158c4:	9b07      	ldr	r3, [sp, #28]
 80158c6:	9300      	str	r3, [sp, #0]
 80158c8:	9a05      	ldr	r2, [sp, #20]
 80158ca:	9908      	ldr	r1, [sp, #32]
 80158cc:	4623      	mov	r3, r4
 80158ce:	4648      	mov	r0, r9
 80158d0:	f000 ffcd 	bl	801686e <__s2b>
 80158d4:	9007      	str	r0, [sp, #28]
 80158d6:	2800      	cmp	r0, #0
 80158d8:	f43f af08 	beq.w	80156ec <_strtod_l+0x434>
 80158dc:	9a06      	ldr	r2, [sp, #24]
 80158de:	9b06      	ldr	r3, [sp, #24]
 80158e0:	2a00      	cmp	r2, #0
 80158e2:	f1c3 0300 	rsb	r3, r3, #0
 80158e6:	bfa8      	it	ge
 80158e8:	2300      	movge	r3, #0
 80158ea:	930e      	str	r3, [sp, #56]	; 0x38
 80158ec:	2400      	movs	r4, #0
 80158ee:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80158f2:	9316      	str	r3, [sp, #88]	; 0x58
 80158f4:	46a0      	mov	r8, r4
 80158f6:	9b07      	ldr	r3, [sp, #28]
 80158f8:	4648      	mov	r0, r9
 80158fa:	6859      	ldr	r1, [r3, #4]
 80158fc:	f000 ff31 	bl	8016762 <_Balloc>
 8015900:	9005      	str	r0, [sp, #20]
 8015902:	2800      	cmp	r0, #0
 8015904:	f43f aef6 	beq.w	80156f4 <_strtod_l+0x43c>
 8015908:	9b07      	ldr	r3, [sp, #28]
 801590a:	691a      	ldr	r2, [r3, #16]
 801590c:	3202      	adds	r2, #2
 801590e:	f103 010c 	add.w	r1, r3, #12
 8015912:	0092      	lsls	r2, r2, #2
 8015914:	300c      	adds	r0, #12
 8015916:	f7ff fc27 	bl	8015168 <memcpy>
 801591a:	aa1e      	add	r2, sp, #120	; 0x78
 801591c:	a91d      	add	r1, sp, #116	; 0x74
 801591e:	ec4b ab10 	vmov	d0, sl, fp
 8015922:	4648      	mov	r0, r9
 8015924:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8015928:	f001 fa5c 	bl	8016de4 <__d2b>
 801592c:	901c      	str	r0, [sp, #112]	; 0x70
 801592e:	2800      	cmp	r0, #0
 8015930:	f43f aee0 	beq.w	80156f4 <_strtod_l+0x43c>
 8015934:	2101      	movs	r1, #1
 8015936:	4648      	mov	r0, r9
 8015938:	f001 f825 	bl	8016986 <__i2b>
 801593c:	4680      	mov	r8, r0
 801593e:	2800      	cmp	r0, #0
 8015940:	f43f aed8 	beq.w	80156f4 <_strtod_l+0x43c>
 8015944:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8015946:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8015948:	2e00      	cmp	r6, #0
 801594a:	bfab      	itete	ge
 801594c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 801594e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8015950:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8015952:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8015954:	bfac      	ite	ge
 8015956:	18f7      	addge	r7, r6, r3
 8015958:	1b9d      	sublt	r5, r3, r6
 801595a:	9b04      	ldr	r3, [sp, #16]
 801595c:	1af6      	subs	r6, r6, r3
 801595e:	4416      	add	r6, r2
 8015960:	4b63      	ldr	r3, [pc, #396]	; (8015af0 <_strtod_l+0x838>)
 8015962:	3e01      	subs	r6, #1
 8015964:	429e      	cmp	r6, r3
 8015966:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801596a:	f280 80af 	bge.w	8015acc <_strtod_l+0x814>
 801596e:	1b9b      	subs	r3, r3, r6
 8015970:	2b1f      	cmp	r3, #31
 8015972:	eba2 0203 	sub.w	r2, r2, r3
 8015976:	f04f 0101 	mov.w	r1, #1
 801597a:	f300 809b 	bgt.w	8015ab4 <_strtod_l+0x7fc>
 801597e:	fa01 f303 	lsl.w	r3, r1, r3
 8015982:	930f      	str	r3, [sp, #60]	; 0x3c
 8015984:	2300      	movs	r3, #0
 8015986:	930a      	str	r3, [sp, #40]	; 0x28
 8015988:	18be      	adds	r6, r7, r2
 801598a:	9b04      	ldr	r3, [sp, #16]
 801598c:	42b7      	cmp	r7, r6
 801598e:	4415      	add	r5, r2
 8015990:	441d      	add	r5, r3
 8015992:	463b      	mov	r3, r7
 8015994:	bfa8      	it	ge
 8015996:	4633      	movge	r3, r6
 8015998:	42ab      	cmp	r3, r5
 801599a:	bfa8      	it	ge
 801599c:	462b      	movge	r3, r5
 801599e:	2b00      	cmp	r3, #0
 80159a0:	bfc2      	ittt	gt
 80159a2:	1af6      	subgt	r6, r6, r3
 80159a4:	1aed      	subgt	r5, r5, r3
 80159a6:	1aff      	subgt	r7, r7, r3
 80159a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80159aa:	b1bb      	cbz	r3, 80159dc <_strtod_l+0x724>
 80159ac:	4641      	mov	r1, r8
 80159ae:	461a      	mov	r2, r3
 80159b0:	4648      	mov	r0, r9
 80159b2:	f001 f887 	bl	8016ac4 <__pow5mult>
 80159b6:	4680      	mov	r8, r0
 80159b8:	2800      	cmp	r0, #0
 80159ba:	f43f ae9b 	beq.w	80156f4 <_strtod_l+0x43c>
 80159be:	4601      	mov	r1, r0
 80159c0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80159c2:	4648      	mov	r0, r9
 80159c4:	f000 ffe8 	bl	8016998 <__multiply>
 80159c8:	900c      	str	r0, [sp, #48]	; 0x30
 80159ca:	2800      	cmp	r0, #0
 80159cc:	f43f ae92 	beq.w	80156f4 <_strtod_l+0x43c>
 80159d0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80159d2:	4648      	mov	r0, r9
 80159d4:	f000 fef9 	bl	80167ca <_Bfree>
 80159d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80159da:	931c      	str	r3, [sp, #112]	; 0x70
 80159dc:	2e00      	cmp	r6, #0
 80159de:	dc7a      	bgt.n	8015ad6 <_strtod_l+0x81e>
 80159e0:	9b06      	ldr	r3, [sp, #24]
 80159e2:	2b00      	cmp	r3, #0
 80159e4:	dd08      	ble.n	80159f8 <_strtod_l+0x740>
 80159e6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80159e8:	9905      	ldr	r1, [sp, #20]
 80159ea:	4648      	mov	r0, r9
 80159ec:	f001 f86a 	bl	8016ac4 <__pow5mult>
 80159f0:	9005      	str	r0, [sp, #20]
 80159f2:	2800      	cmp	r0, #0
 80159f4:	f43f ae7e 	beq.w	80156f4 <_strtod_l+0x43c>
 80159f8:	2d00      	cmp	r5, #0
 80159fa:	dd08      	ble.n	8015a0e <_strtod_l+0x756>
 80159fc:	462a      	mov	r2, r5
 80159fe:	9905      	ldr	r1, [sp, #20]
 8015a00:	4648      	mov	r0, r9
 8015a02:	f001 f8ad 	bl	8016b60 <__lshift>
 8015a06:	9005      	str	r0, [sp, #20]
 8015a08:	2800      	cmp	r0, #0
 8015a0a:	f43f ae73 	beq.w	80156f4 <_strtod_l+0x43c>
 8015a0e:	2f00      	cmp	r7, #0
 8015a10:	dd08      	ble.n	8015a24 <_strtod_l+0x76c>
 8015a12:	4641      	mov	r1, r8
 8015a14:	463a      	mov	r2, r7
 8015a16:	4648      	mov	r0, r9
 8015a18:	f001 f8a2 	bl	8016b60 <__lshift>
 8015a1c:	4680      	mov	r8, r0
 8015a1e:	2800      	cmp	r0, #0
 8015a20:	f43f ae68 	beq.w	80156f4 <_strtod_l+0x43c>
 8015a24:	9a05      	ldr	r2, [sp, #20]
 8015a26:	991c      	ldr	r1, [sp, #112]	; 0x70
 8015a28:	4648      	mov	r0, r9
 8015a2a:	f001 f907 	bl	8016c3c <__mdiff>
 8015a2e:	4604      	mov	r4, r0
 8015a30:	2800      	cmp	r0, #0
 8015a32:	f43f ae5f 	beq.w	80156f4 <_strtod_l+0x43c>
 8015a36:	68c3      	ldr	r3, [r0, #12]
 8015a38:	930c      	str	r3, [sp, #48]	; 0x30
 8015a3a:	2300      	movs	r3, #0
 8015a3c:	60c3      	str	r3, [r0, #12]
 8015a3e:	4641      	mov	r1, r8
 8015a40:	f001 f8e2 	bl	8016c08 <__mcmp>
 8015a44:	2800      	cmp	r0, #0
 8015a46:	da55      	bge.n	8015af4 <_strtod_l+0x83c>
 8015a48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015a4a:	b9e3      	cbnz	r3, 8015a86 <_strtod_l+0x7ce>
 8015a4c:	f1ba 0f00 	cmp.w	sl, #0
 8015a50:	d119      	bne.n	8015a86 <_strtod_l+0x7ce>
 8015a52:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015a56:	b9b3      	cbnz	r3, 8015a86 <_strtod_l+0x7ce>
 8015a58:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8015a5c:	0d1b      	lsrs	r3, r3, #20
 8015a5e:	051b      	lsls	r3, r3, #20
 8015a60:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8015a64:	d90f      	bls.n	8015a86 <_strtod_l+0x7ce>
 8015a66:	6963      	ldr	r3, [r4, #20]
 8015a68:	b913      	cbnz	r3, 8015a70 <_strtod_l+0x7b8>
 8015a6a:	6923      	ldr	r3, [r4, #16]
 8015a6c:	2b01      	cmp	r3, #1
 8015a6e:	dd0a      	ble.n	8015a86 <_strtod_l+0x7ce>
 8015a70:	4621      	mov	r1, r4
 8015a72:	2201      	movs	r2, #1
 8015a74:	4648      	mov	r0, r9
 8015a76:	f001 f873 	bl	8016b60 <__lshift>
 8015a7a:	4641      	mov	r1, r8
 8015a7c:	4604      	mov	r4, r0
 8015a7e:	f001 f8c3 	bl	8016c08 <__mcmp>
 8015a82:	2800      	cmp	r0, #0
 8015a84:	dc67      	bgt.n	8015b56 <_strtod_l+0x89e>
 8015a86:	9b04      	ldr	r3, [sp, #16]
 8015a88:	2b00      	cmp	r3, #0
 8015a8a:	d171      	bne.n	8015b70 <_strtod_l+0x8b8>
 8015a8c:	e63d      	b.n	801570a <_strtod_l+0x452>
 8015a8e:	f018 0f01 	tst.w	r8, #1
 8015a92:	d004      	beq.n	8015a9e <_strtod_l+0x7e6>
 8015a94:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015a98:	f7ea fdbe 	bl	8000618 <__aeabi_dmul>
 8015a9c:	2301      	movs	r3, #1
 8015a9e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8015aa2:	3508      	adds	r5, #8
 8015aa4:	e6e5      	b.n	8015872 <_strtod_l+0x5ba>
 8015aa6:	f04f 32ff 	mov.w	r2, #4294967295
 8015aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8015aae:	ea03 0a0a 	and.w	sl, r3, sl
 8015ab2:	e6ff      	b.n	80158b4 <_strtod_l+0x5fc>
 8015ab4:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8015ab8:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8015abc:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8015ac0:	36e2      	adds	r6, #226	; 0xe2
 8015ac2:	fa01 f306 	lsl.w	r3, r1, r6
 8015ac6:	930a      	str	r3, [sp, #40]	; 0x28
 8015ac8:	910f      	str	r1, [sp, #60]	; 0x3c
 8015aca:	e75d      	b.n	8015988 <_strtod_l+0x6d0>
 8015acc:	2300      	movs	r3, #0
 8015ace:	930a      	str	r3, [sp, #40]	; 0x28
 8015ad0:	2301      	movs	r3, #1
 8015ad2:	930f      	str	r3, [sp, #60]	; 0x3c
 8015ad4:	e758      	b.n	8015988 <_strtod_l+0x6d0>
 8015ad6:	4632      	mov	r2, r6
 8015ad8:	991c      	ldr	r1, [sp, #112]	; 0x70
 8015ada:	4648      	mov	r0, r9
 8015adc:	f001 f840 	bl	8016b60 <__lshift>
 8015ae0:	901c      	str	r0, [sp, #112]	; 0x70
 8015ae2:	2800      	cmp	r0, #0
 8015ae4:	f47f af7c 	bne.w	80159e0 <_strtod_l+0x728>
 8015ae8:	e604      	b.n	80156f4 <_strtod_l+0x43c>
 8015aea:	bf00      	nop
 8015aec:	0802b380 	.word	0x0802b380
 8015af0:	fffffc02 	.word	0xfffffc02
 8015af4:	465d      	mov	r5, fp
 8015af6:	f040 8086 	bne.w	8015c06 <_strtod_l+0x94e>
 8015afa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015afc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015b00:	b32a      	cbz	r2, 8015b4e <_strtod_l+0x896>
 8015b02:	4aaf      	ldr	r2, [pc, #700]	; (8015dc0 <_strtod_l+0xb08>)
 8015b04:	4293      	cmp	r3, r2
 8015b06:	d153      	bne.n	8015bb0 <_strtod_l+0x8f8>
 8015b08:	9b04      	ldr	r3, [sp, #16]
 8015b0a:	4650      	mov	r0, sl
 8015b0c:	b1d3      	cbz	r3, 8015b44 <_strtod_l+0x88c>
 8015b0e:	4aad      	ldr	r2, [pc, #692]	; (8015dc4 <_strtod_l+0xb0c>)
 8015b10:	402a      	ands	r2, r5
 8015b12:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8015b16:	f04f 31ff 	mov.w	r1, #4294967295
 8015b1a:	d816      	bhi.n	8015b4a <_strtod_l+0x892>
 8015b1c:	0d12      	lsrs	r2, r2, #20
 8015b1e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8015b22:	fa01 f303 	lsl.w	r3, r1, r3
 8015b26:	4298      	cmp	r0, r3
 8015b28:	d142      	bne.n	8015bb0 <_strtod_l+0x8f8>
 8015b2a:	4ba7      	ldr	r3, [pc, #668]	; (8015dc8 <_strtod_l+0xb10>)
 8015b2c:	429d      	cmp	r5, r3
 8015b2e:	d102      	bne.n	8015b36 <_strtod_l+0x87e>
 8015b30:	3001      	adds	r0, #1
 8015b32:	f43f addf 	beq.w	80156f4 <_strtod_l+0x43c>
 8015b36:	4ba3      	ldr	r3, [pc, #652]	; (8015dc4 <_strtod_l+0xb0c>)
 8015b38:	402b      	ands	r3, r5
 8015b3a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8015b3e:	f04f 0a00 	mov.w	sl, #0
 8015b42:	e7a0      	b.n	8015a86 <_strtod_l+0x7ce>
 8015b44:	f04f 33ff 	mov.w	r3, #4294967295
 8015b48:	e7ed      	b.n	8015b26 <_strtod_l+0x86e>
 8015b4a:	460b      	mov	r3, r1
 8015b4c:	e7eb      	b.n	8015b26 <_strtod_l+0x86e>
 8015b4e:	bb7b      	cbnz	r3, 8015bb0 <_strtod_l+0x8f8>
 8015b50:	f1ba 0f00 	cmp.w	sl, #0
 8015b54:	d12c      	bne.n	8015bb0 <_strtod_l+0x8f8>
 8015b56:	9904      	ldr	r1, [sp, #16]
 8015b58:	4a9a      	ldr	r2, [pc, #616]	; (8015dc4 <_strtod_l+0xb0c>)
 8015b5a:	465b      	mov	r3, fp
 8015b5c:	b1f1      	cbz	r1, 8015b9c <_strtod_l+0x8e4>
 8015b5e:	ea02 010b 	and.w	r1, r2, fp
 8015b62:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8015b66:	dc19      	bgt.n	8015b9c <_strtod_l+0x8e4>
 8015b68:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8015b6c:	f77f ae5b 	ble.w	8015826 <_strtod_l+0x56e>
 8015b70:	4a96      	ldr	r2, [pc, #600]	; (8015dcc <_strtod_l+0xb14>)
 8015b72:	2300      	movs	r3, #0
 8015b74:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8015b78:	4650      	mov	r0, sl
 8015b7a:	4659      	mov	r1, fp
 8015b7c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8015b80:	f7ea fd4a 	bl	8000618 <__aeabi_dmul>
 8015b84:	4682      	mov	sl, r0
 8015b86:	468b      	mov	fp, r1
 8015b88:	2900      	cmp	r1, #0
 8015b8a:	f47f adbe 	bne.w	801570a <_strtod_l+0x452>
 8015b8e:	2800      	cmp	r0, #0
 8015b90:	f47f adbb 	bne.w	801570a <_strtod_l+0x452>
 8015b94:	2322      	movs	r3, #34	; 0x22
 8015b96:	f8c9 3000 	str.w	r3, [r9]
 8015b9a:	e5b6      	b.n	801570a <_strtod_l+0x452>
 8015b9c:	4013      	ands	r3, r2
 8015b9e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8015ba2:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8015ba6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8015baa:	f04f 3aff 	mov.w	sl, #4294967295
 8015bae:	e76a      	b.n	8015a86 <_strtod_l+0x7ce>
 8015bb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015bb2:	b193      	cbz	r3, 8015bda <_strtod_l+0x922>
 8015bb4:	422b      	tst	r3, r5
 8015bb6:	f43f af66 	beq.w	8015a86 <_strtod_l+0x7ce>
 8015bba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015bbc:	9a04      	ldr	r2, [sp, #16]
 8015bbe:	4650      	mov	r0, sl
 8015bc0:	4659      	mov	r1, fp
 8015bc2:	b173      	cbz	r3, 8015be2 <_strtod_l+0x92a>
 8015bc4:	f7ff fb5a 	bl	801527c <sulp>
 8015bc8:	4602      	mov	r2, r0
 8015bca:	460b      	mov	r3, r1
 8015bcc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8015bd0:	f7ea fb6c 	bl	80002ac <__adddf3>
 8015bd4:	4682      	mov	sl, r0
 8015bd6:	468b      	mov	fp, r1
 8015bd8:	e755      	b.n	8015a86 <_strtod_l+0x7ce>
 8015bda:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015bdc:	ea13 0f0a 	tst.w	r3, sl
 8015be0:	e7e9      	b.n	8015bb6 <_strtod_l+0x8fe>
 8015be2:	f7ff fb4b 	bl	801527c <sulp>
 8015be6:	4602      	mov	r2, r0
 8015be8:	460b      	mov	r3, r1
 8015bea:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8015bee:	f7ea fb5b 	bl	80002a8 <__aeabi_dsub>
 8015bf2:	2200      	movs	r2, #0
 8015bf4:	2300      	movs	r3, #0
 8015bf6:	4682      	mov	sl, r0
 8015bf8:	468b      	mov	fp, r1
 8015bfa:	f7ea ff75 	bl	8000ae8 <__aeabi_dcmpeq>
 8015bfe:	2800      	cmp	r0, #0
 8015c00:	f47f ae11 	bne.w	8015826 <_strtod_l+0x56e>
 8015c04:	e73f      	b.n	8015a86 <_strtod_l+0x7ce>
 8015c06:	4641      	mov	r1, r8
 8015c08:	4620      	mov	r0, r4
 8015c0a:	f001 f93a 	bl	8016e82 <__ratio>
 8015c0e:	ec57 6b10 	vmov	r6, r7, d0
 8015c12:	2200      	movs	r2, #0
 8015c14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8015c18:	ee10 0a10 	vmov	r0, s0
 8015c1c:	4639      	mov	r1, r7
 8015c1e:	f7ea ff77 	bl	8000b10 <__aeabi_dcmple>
 8015c22:	2800      	cmp	r0, #0
 8015c24:	d077      	beq.n	8015d16 <_strtod_l+0xa5e>
 8015c26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015c28:	2b00      	cmp	r3, #0
 8015c2a:	d04a      	beq.n	8015cc2 <_strtod_l+0xa0a>
 8015c2c:	4b68      	ldr	r3, [pc, #416]	; (8015dd0 <_strtod_l+0xb18>)
 8015c2e:	2200      	movs	r2, #0
 8015c30:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8015c34:	4f66      	ldr	r7, [pc, #408]	; (8015dd0 <_strtod_l+0xb18>)
 8015c36:	2600      	movs	r6, #0
 8015c38:	4b62      	ldr	r3, [pc, #392]	; (8015dc4 <_strtod_l+0xb0c>)
 8015c3a:	402b      	ands	r3, r5
 8015c3c:	930f      	str	r3, [sp, #60]	; 0x3c
 8015c3e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015c40:	4b64      	ldr	r3, [pc, #400]	; (8015dd4 <_strtod_l+0xb1c>)
 8015c42:	429a      	cmp	r2, r3
 8015c44:	f040 80ce 	bne.w	8015de4 <_strtod_l+0xb2c>
 8015c48:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8015c4c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8015c50:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8015c54:	ec4b ab10 	vmov	d0, sl, fp
 8015c58:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8015c5c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8015c60:	f001 f84a 	bl	8016cf8 <__ulp>
 8015c64:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8015c68:	ec53 2b10 	vmov	r2, r3, d0
 8015c6c:	f7ea fcd4 	bl	8000618 <__aeabi_dmul>
 8015c70:	4652      	mov	r2, sl
 8015c72:	465b      	mov	r3, fp
 8015c74:	f7ea fb1a 	bl	80002ac <__adddf3>
 8015c78:	460b      	mov	r3, r1
 8015c7a:	4952      	ldr	r1, [pc, #328]	; (8015dc4 <_strtod_l+0xb0c>)
 8015c7c:	4a56      	ldr	r2, [pc, #344]	; (8015dd8 <_strtod_l+0xb20>)
 8015c7e:	4019      	ands	r1, r3
 8015c80:	4291      	cmp	r1, r2
 8015c82:	4682      	mov	sl, r0
 8015c84:	d95b      	bls.n	8015d3e <_strtod_l+0xa86>
 8015c86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015c88:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8015c8c:	4293      	cmp	r3, r2
 8015c8e:	d103      	bne.n	8015c98 <_strtod_l+0x9e0>
 8015c90:	9b08      	ldr	r3, [sp, #32]
 8015c92:	3301      	adds	r3, #1
 8015c94:	f43f ad2e 	beq.w	80156f4 <_strtod_l+0x43c>
 8015c98:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8015dc8 <_strtod_l+0xb10>
 8015c9c:	f04f 3aff 	mov.w	sl, #4294967295
 8015ca0:	991c      	ldr	r1, [sp, #112]	; 0x70
 8015ca2:	4648      	mov	r0, r9
 8015ca4:	f000 fd91 	bl	80167ca <_Bfree>
 8015ca8:	9905      	ldr	r1, [sp, #20]
 8015caa:	4648      	mov	r0, r9
 8015cac:	f000 fd8d 	bl	80167ca <_Bfree>
 8015cb0:	4641      	mov	r1, r8
 8015cb2:	4648      	mov	r0, r9
 8015cb4:	f000 fd89 	bl	80167ca <_Bfree>
 8015cb8:	4621      	mov	r1, r4
 8015cba:	4648      	mov	r0, r9
 8015cbc:	f000 fd85 	bl	80167ca <_Bfree>
 8015cc0:	e619      	b.n	80158f6 <_strtod_l+0x63e>
 8015cc2:	f1ba 0f00 	cmp.w	sl, #0
 8015cc6:	d11a      	bne.n	8015cfe <_strtod_l+0xa46>
 8015cc8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015ccc:	b9eb      	cbnz	r3, 8015d0a <_strtod_l+0xa52>
 8015cce:	2200      	movs	r2, #0
 8015cd0:	4b3f      	ldr	r3, [pc, #252]	; (8015dd0 <_strtod_l+0xb18>)
 8015cd2:	4630      	mov	r0, r6
 8015cd4:	4639      	mov	r1, r7
 8015cd6:	f7ea ff11 	bl	8000afc <__aeabi_dcmplt>
 8015cda:	b9c8      	cbnz	r0, 8015d10 <_strtod_l+0xa58>
 8015cdc:	4630      	mov	r0, r6
 8015cde:	4639      	mov	r1, r7
 8015ce0:	2200      	movs	r2, #0
 8015ce2:	4b3e      	ldr	r3, [pc, #248]	; (8015ddc <_strtod_l+0xb24>)
 8015ce4:	f7ea fc98 	bl	8000618 <__aeabi_dmul>
 8015ce8:	4606      	mov	r6, r0
 8015cea:	460f      	mov	r7, r1
 8015cec:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8015cf0:	9618      	str	r6, [sp, #96]	; 0x60
 8015cf2:	9319      	str	r3, [sp, #100]	; 0x64
 8015cf4:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8015cf8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8015cfc:	e79c      	b.n	8015c38 <_strtod_l+0x980>
 8015cfe:	f1ba 0f01 	cmp.w	sl, #1
 8015d02:	d102      	bne.n	8015d0a <_strtod_l+0xa52>
 8015d04:	2d00      	cmp	r5, #0
 8015d06:	f43f ad8e 	beq.w	8015826 <_strtod_l+0x56e>
 8015d0a:	2200      	movs	r2, #0
 8015d0c:	4b34      	ldr	r3, [pc, #208]	; (8015de0 <_strtod_l+0xb28>)
 8015d0e:	e78f      	b.n	8015c30 <_strtod_l+0x978>
 8015d10:	2600      	movs	r6, #0
 8015d12:	4f32      	ldr	r7, [pc, #200]	; (8015ddc <_strtod_l+0xb24>)
 8015d14:	e7ea      	b.n	8015cec <_strtod_l+0xa34>
 8015d16:	4b31      	ldr	r3, [pc, #196]	; (8015ddc <_strtod_l+0xb24>)
 8015d18:	4630      	mov	r0, r6
 8015d1a:	4639      	mov	r1, r7
 8015d1c:	2200      	movs	r2, #0
 8015d1e:	f7ea fc7b 	bl	8000618 <__aeabi_dmul>
 8015d22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015d24:	4606      	mov	r6, r0
 8015d26:	460f      	mov	r7, r1
 8015d28:	b933      	cbnz	r3, 8015d38 <_strtod_l+0xa80>
 8015d2a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015d2e:	9010      	str	r0, [sp, #64]	; 0x40
 8015d30:	9311      	str	r3, [sp, #68]	; 0x44
 8015d32:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8015d36:	e7df      	b.n	8015cf8 <_strtod_l+0xa40>
 8015d38:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8015d3c:	e7f9      	b.n	8015d32 <_strtod_l+0xa7a>
 8015d3e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8015d42:	9b04      	ldr	r3, [sp, #16]
 8015d44:	2b00      	cmp	r3, #0
 8015d46:	d1ab      	bne.n	8015ca0 <_strtod_l+0x9e8>
 8015d48:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8015d4c:	0d1b      	lsrs	r3, r3, #20
 8015d4e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015d50:	051b      	lsls	r3, r3, #20
 8015d52:	429a      	cmp	r2, r3
 8015d54:	465d      	mov	r5, fp
 8015d56:	d1a3      	bne.n	8015ca0 <_strtod_l+0x9e8>
 8015d58:	4639      	mov	r1, r7
 8015d5a:	4630      	mov	r0, r6
 8015d5c:	f7ea ff0c 	bl	8000b78 <__aeabi_d2iz>
 8015d60:	f7ea fbf0 	bl	8000544 <__aeabi_i2d>
 8015d64:	460b      	mov	r3, r1
 8015d66:	4602      	mov	r2, r0
 8015d68:	4639      	mov	r1, r7
 8015d6a:	4630      	mov	r0, r6
 8015d6c:	f7ea fa9c 	bl	80002a8 <__aeabi_dsub>
 8015d70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015d72:	4606      	mov	r6, r0
 8015d74:	460f      	mov	r7, r1
 8015d76:	b933      	cbnz	r3, 8015d86 <_strtod_l+0xace>
 8015d78:	f1ba 0f00 	cmp.w	sl, #0
 8015d7c:	d103      	bne.n	8015d86 <_strtod_l+0xace>
 8015d7e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8015d82:	2d00      	cmp	r5, #0
 8015d84:	d06d      	beq.n	8015e62 <_strtod_l+0xbaa>
 8015d86:	a30a      	add	r3, pc, #40	; (adr r3, 8015db0 <_strtod_l+0xaf8>)
 8015d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d8c:	4630      	mov	r0, r6
 8015d8e:	4639      	mov	r1, r7
 8015d90:	f7ea feb4 	bl	8000afc <__aeabi_dcmplt>
 8015d94:	2800      	cmp	r0, #0
 8015d96:	f47f acb8 	bne.w	801570a <_strtod_l+0x452>
 8015d9a:	a307      	add	r3, pc, #28	; (adr r3, 8015db8 <_strtod_l+0xb00>)
 8015d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015da0:	4630      	mov	r0, r6
 8015da2:	4639      	mov	r1, r7
 8015da4:	f7ea fec8 	bl	8000b38 <__aeabi_dcmpgt>
 8015da8:	2800      	cmp	r0, #0
 8015daa:	f43f af79 	beq.w	8015ca0 <_strtod_l+0x9e8>
 8015dae:	e4ac      	b.n	801570a <_strtod_l+0x452>
 8015db0:	94a03595 	.word	0x94a03595
 8015db4:	3fdfffff 	.word	0x3fdfffff
 8015db8:	35afe535 	.word	0x35afe535
 8015dbc:	3fe00000 	.word	0x3fe00000
 8015dc0:	000fffff 	.word	0x000fffff
 8015dc4:	7ff00000 	.word	0x7ff00000
 8015dc8:	7fefffff 	.word	0x7fefffff
 8015dcc:	39500000 	.word	0x39500000
 8015dd0:	3ff00000 	.word	0x3ff00000
 8015dd4:	7fe00000 	.word	0x7fe00000
 8015dd8:	7c9fffff 	.word	0x7c9fffff
 8015ddc:	3fe00000 	.word	0x3fe00000
 8015de0:	bff00000 	.word	0xbff00000
 8015de4:	9b04      	ldr	r3, [sp, #16]
 8015de6:	b333      	cbz	r3, 8015e36 <_strtod_l+0xb7e>
 8015de8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015dea:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8015dee:	d822      	bhi.n	8015e36 <_strtod_l+0xb7e>
 8015df0:	a327      	add	r3, pc, #156	; (adr r3, 8015e90 <_strtod_l+0xbd8>)
 8015df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015df6:	4630      	mov	r0, r6
 8015df8:	4639      	mov	r1, r7
 8015dfa:	f7ea fe89 	bl	8000b10 <__aeabi_dcmple>
 8015dfe:	b1a0      	cbz	r0, 8015e2a <_strtod_l+0xb72>
 8015e00:	4639      	mov	r1, r7
 8015e02:	4630      	mov	r0, r6
 8015e04:	f7ea fee0 	bl	8000bc8 <__aeabi_d2uiz>
 8015e08:	2800      	cmp	r0, #0
 8015e0a:	bf08      	it	eq
 8015e0c:	2001      	moveq	r0, #1
 8015e0e:	f7ea fb89 	bl	8000524 <__aeabi_ui2d>
 8015e12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015e14:	4606      	mov	r6, r0
 8015e16:	460f      	mov	r7, r1
 8015e18:	bb03      	cbnz	r3, 8015e5c <_strtod_l+0xba4>
 8015e1a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015e1e:	9012      	str	r0, [sp, #72]	; 0x48
 8015e20:	9313      	str	r3, [sp, #76]	; 0x4c
 8015e22:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8015e26:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8015e2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015e2c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015e2e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8015e32:	1a9b      	subs	r3, r3, r2
 8015e34:	930b      	str	r3, [sp, #44]	; 0x2c
 8015e36:	ed9d 0b08 	vldr	d0, [sp, #32]
 8015e3a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8015e3e:	f000 ff5b 	bl	8016cf8 <__ulp>
 8015e42:	4650      	mov	r0, sl
 8015e44:	ec53 2b10 	vmov	r2, r3, d0
 8015e48:	4659      	mov	r1, fp
 8015e4a:	f7ea fbe5 	bl	8000618 <__aeabi_dmul>
 8015e4e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8015e52:	f7ea fa2b 	bl	80002ac <__adddf3>
 8015e56:	4682      	mov	sl, r0
 8015e58:	468b      	mov	fp, r1
 8015e5a:	e772      	b.n	8015d42 <_strtod_l+0xa8a>
 8015e5c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8015e60:	e7df      	b.n	8015e22 <_strtod_l+0xb6a>
 8015e62:	a30d      	add	r3, pc, #52	; (adr r3, 8015e98 <_strtod_l+0xbe0>)
 8015e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e68:	f7ea fe48 	bl	8000afc <__aeabi_dcmplt>
 8015e6c:	e79c      	b.n	8015da8 <_strtod_l+0xaf0>
 8015e6e:	2300      	movs	r3, #0
 8015e70:	930d      	str	r3, [sp, #52]	; 0x34
 8015e72:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8015e74:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015e76:	6013      	str	r3, [r2, #0]
 8015e78:	f7ff ba61 	b.w	801533e <_strtod_l+0x86>
 8015e7c:	2b65      	cmp	r3, #101	; 0x65
 8015e7e:	f04f 0200 	mov.w	r2, #0
 8015e82:	f43f ab4e 	beq.w	8015522 <_strtod_l+0x26a>
 8015e86:	2101      	movs	r1, #1
 8015e88:	4614      	mov	r4, r2
 8015e8a:	9104      	str	r1, [sp, #16]
 8015e8c:	f7ff bacb 	b.w	8015426 <_strtod_l+0x16e>
 8015e90:	ffc00000 	.word	0xffc00000
 8015e94:	41dfffff 	.word	0x41dfffff
 8015e98:	94a03595 	.word	0x94a03595
 8015e9c:	3fcfffff 	.word	0x3fcfffff

08015ea0 <strtof>:
 8015ea0:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8015ea4:	4e24      	ldr	r6, [pc, #144]	; (8015f38 <strtof+0x98>)
 8015ea6:	4a25      	ldr	r2, [pc, #148]	; (8015f3c <strtof+0x9c>)
 8015ea8:	6834      	ldr	r4, [r6, #0]
 8015eaa:	6a23      	ldr	r3, [r4, #32]
 8015eac:	ed2d 8b02 	vpush	{d8}
 8015eb0:	2b00      	cmp	r3, #0
 8015eb2:	bf08      	it	eq
 8015eb4:	4613      	moveq	r3, r2
 8015eb6:	460a      	mov	r2, r1
 8015eb8:	4601      	mov	r1, r0
 8015eba:	4620      	mov	r0, r4
 8015ebc:	f7ff f9fc 	bl	80152b8 <_strtod_l>
 8015ec0:	ec55 4b10 	vmov	r4, r5, d0
 8015ec4:	ee10 2a10 	vmov	r2, s0
 8015ec8:	462b      	mov	r3, r5
 8015eca:	ee10 0a10 	vmov	r0, s0
 8015ece:	4629      	mov	r1, r5
 8015ed0:	f7ea fe3c 	bl	8000b4c <__aeabi_dcmpun>
 8015ed4:	b130      	cbz	r0, 8015ee4 <strtof+0x44>
 8015ed6:	ecbd 8b02 	vpop	{d8}
 8015eda:	2000      	movs	r0, #0
 8015edc:	e8bd 4370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, lr}
 8015ee0:	f001 bb90 	b.w	8017604 <nanf>
 8015ee4:	4620      	mov	r0, r4
 8015ee6:	4629      	mov	r1, r5
 8015ee8:	f7ea fe8e 	bl	8000c08 <__aeabi_d2f>
 8015eec:	ee08 0a10 	vmov	s16, r0
 8015ef0:	eddf 7a13 	vldr	s15, [pc, #76]	; 8015f40 <strtof+0xa0>
 8015ef4:	eeb0 7ac8 	vabs.f32	s14, s16
 8015ef8:	eeb4 7a67 	vcmp.f32	s14, s15
 8015efc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f00:	dd14      	ble.n	8015f2c <strtof+0x8c>
 8015f02:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
 8015f06:	f04f 32ff 	mov.w	r2, #4294967295
 8015f0a:	4b0e      	ldr	r3, [pc, #56]	; (8015f44 <strtof+0xa4>)
 8015f0c:	4620      	mov	r0, r4
 8015f0e:	4649      	mov	r1, r9
 8015f10:	f7ea fe1c 	bl	8000b4c <__aeabi_dcmpun>
 8015f14:	b938      	cbnz	r0, 8015f26 <strtof+0x86>
 8015f16:	f04f 32ff 	mov.w	r2, #4294967295
 8015f1a:	4b0a      	ldr	r3, [pc, #40]	; (8015f44 <strtof+0xa4>)
 8015f1c:	4620      	mov	r0, r4
 8015f1e:	4649      	mov	r1, r9
 8015f20:	f7ea fdf6 	bl	8000b10 <__aeabi_dcmple>
 8015f24:	b110      	cbz	r0, 8015f2c <strtof+0x8c>
 8015f26:	6833      	ldr	r3, [r6, #0]
 8015f28:	2222      	movs	r2, #34	; 0x22
 8015f2a:	601a      	str	r2, [r3, #0]
 8015f2c:	eeb0 0a48 	vmov.f32	s0, s16
 8015f30:	ecbd 8b02 	vpop	{d8}
 8015f34:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8015f38:	200000dc 	.word	0x200000dc
 8015f3c:	20000140 	.word	0x20000140
 8015f40:	7f7fffff 	.word	0x7f7fffff
 8015f44:	7fefffff 	.word	0x7fefffff

08015f48 <_strtol_l.isra.0>:
 8015f48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015f4c:	4680      	mov	r8, r0
 8015f4e:	4689      	mov	r9, r1
 8015f50:	4692      	mov	sl, r2
 8015f52:	461e      	mov	r6, r3
 8015f54:	460f      	mov	r7, r1
 8015f56:	463d      	mov	r5, r7
 8015f58:	9808      	ldr	r0, [sp, #32]
 8015f5a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015f5e:	f000 fbe9 	bl	8016734 <__locale_ctype_ptr_l>
 8015f62:	4420      	add	r0, r4
 8015f64:	7843      	ldrb	r3, [r0, #1]
 8015f66:	f013 0308 	ands.w	r3, r3, #8
 8015f6a:	d132      	bne.n	8015fd2 <_strtol_l.isra.0+0x8a>
 8015f6c:	2c2d      	cmp	r4, #45	; 0x2d
 8015f6e:	d132      	bne.n	8015fd6 <_strtol_l.isra.0+0x8e>
 8015f70:	787c      	ldrb	r4, [r7, #1]
 8015f72:	1cbd      	adds	r5, r7, #2
 8015f74:	2201      	movs	r2, #1
 8015f76:	2e00      	cmp	r6, #0
 8015f78:	d05d      	beq.n	8016036 <_strtol_l.isra.0+0xee>
 8015f7a:	2e10      	cmp	r6, #16
 8015f7c:	d109      	bne.n	8015f92 <_strtol_l.isra.0+0x4a>
 8015f7e:	2c30      	cmp	r4, #48	; 0x30
 8015f80:	d107      	bne.n	8015f92 <_strtol_l.isra.0+0x4a>
 8015f82:	782b      	ldrb	r3, [r5, #0]
 8015f84:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8015f88:	2b58      	cmp	r3, #88	; 0x58
 8015f8a:	d14f      	bne.n	801602c <_strtol_l.isra.0+0xe4>
 8015f8c:	786c      	ldrb	r4, [r5, #1]
 8015f8e:	2610      	movs	r6, #16
 8015f90:	3502      	adds	r5, #2
 8015f92:	2a00      	cmp	r2, #0
 8015f94:	bf14      	ite	ne
 8015f96:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8015f9a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8015f9e:	2700      	movs	r7, #0
 8015fa0:	fbb1 fcf6 	udiv	ip, r1, r6
 8015fa4:	4638      	mov	r0, r7
 8015fa6:	fb06 1e1c 	mls	lr, r6, ip, r1
 8015faa:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8015fae:	2b09      	cmp	r3, #9
 8015fb0:	d817      	bhi.n	8015fe2 <_strtol_l.isra.0+0x9a>
 8015fb2:	461c      	mov	r4, r3
 8015fb4:	42a6      	cmp	r6, r4
 8015fb6:	dd23      	ble.n	8016000 <_strtol_l.isra.0+0xb8>
 8015fb8:	1c7b      	adds	r3, r7, #1
 8015fba:	d007      	beq.n	8015fcc <_strtol_l.isra.0+0x84>
 8015fbc:	4584      	cmp	ip, r0
 8015fbe:	d31c      	bcc.n	8015ffa <_strtol_l.isra.0+0xb2>
 8015fc0:	d101      	bne.n	8015fc6 <_strtol_l.isra.0+0x7e>
 8015fc2:	45a6      	cmp	lr, r4
 8015fc4:	db19      	blt.n	8015ffa <_strtol_l.isra.0+0xb2>
 8015fc6:	fb00 4006 	mla	r0, r0, r6, r4
 8015fca:	2701      	movs	r7, #1
 8015fcc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015fd0:	e7eb      	b.n	8015faa <_strtol_l.isra.0+0x62>
 8015fd2:	462f      	mov	r7, r5
 8015fd4:	e7bf      	b.n	8015f56 <_strtol_l.isra.0+0xe>
 8015fd6:	2c2b      	cmp	r4, #43	; 0x2b
 8015fd8:	bf04      	itt	eq
 8015fda:	1cbd      	addeq	r5, r7, #2
 8015fdc:	787c      	ldrbeq	r4, [r7, #1]
 8015fde:	461a      	mov	r2, r3
 8015fe0:	e7c9      	b.n	8015f76 <_strtol_l.isra.0+0x2e>
 8015fe2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8015fe6:	2b19      	cmp	r3, #25
 8015fe8:	d801      	bhi.n	8015fee <_strtol_l.isra.0+0xa6>
 8015fea:	3c37      	subs	r4, #55	; 0x37
 8015fec:	e7e2      	b.n	8015fb4 <_strtol_l.isra.0+0x6c>
 8015fee:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8015ff2:	2b19      	cmp	r3, #25
 8015ff4:	d804      	bhi.n	8016000 <_strtol_l.isra.0+0xb8>
 8015ff6:	3c57      	subs	r4, #87	; 0x57
 8015ff8:	e7dc      	b.n	8015fb4 <_strtol_l.isra.0+0x6c>
 8015ffa:	f04f 37ff 	mov.w	r7, #4294967295
 8015ffe:	e7e5      	b.n	8015fcc <_strtol_l.isra.0+0x84>
 8016000:	1c7b      	adds	r3, r7, #1
 8016002:	d108      	bne.n	8016016 <_strtol_l.isra.0+0xce>
 8016004:	2322      	movs	r3, #34	; 0x22
 8016006:	f8c8 3000 	str.w	r3, [r8]
 801600a:	4608      	mov	r0, r1
 801600c:	f1ba 0f00 	cmp.w	sl, #0
 8016010:	d107      	bne.n	8016022 <_strtol_l.isra.0+0xda>
 8016012:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016016:	b102      	cbz	r2, 801601a <_strtol_l.isra.0+0xd2>
 8016018:	4240      	negs	r0, r0
 801601a:	f1ba 0f00 	cmp.w	sl, #0
 801601e:	d0f8      	beq.n	8016012 <_strtol_l.isra.0+0xca>
 8016020:	b10f      	cbz	r7, 8016026 <_strtol_l.isra.0+0xde>
 8016022:	f105 39ff 	add.w	r9, r5, #4294967295
 8016026:	f8ca 9000 	str.w	r9, [sl]
 801602a:	e7f2      	b.n	8016012 <_strtol_l.isra.0+0xca>
 801602c:	2430      	movs	r4, #48	; 0x30
 801602e:	2e00      	cmp	r6, #0
 8016030:	d1af      	bne.n	8015f92 <_strtol_l.isra.0+0x4a>
 8016032:	2608      	movs	r6, #8
 8016034:	e7ad      	b.n	8015f92 <_strtol_l.isra.0+0x4a>
 8016036:	2c30      	cmp	r4, #48	; 0x30
 8016038:	d0a3      	beq.n	8015f82 <_strtol_l.isra.0+0x3a>
 801603a:	260a      	movs	r6, #10
 801603c:	e7a9      	b.n	8015f92 <_strtol_l.isra.0+0x4a>
	...

08016040 <strtol>:
 8016040:	4b08      	ldr	r3, [pc, #32]	; (8016064 <strtol+0x24>)
 8016042:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016044:	681c      	ldr	r4, [r3, #0]
 8016046:	4d08      	ldr	r5, [pc, #32]	; (8016068 <strtol+0x28>)
 8016048:	6a23      	ldr	r3, [r4, #32]
 801604a:	2b00      	cmp	r3, #0
 801604c:	bf08      	it	eq
 801604e:	462b      	moveq	r3, r5
 8016050:	9300      	str	r3, [sp, #0]
 8016052:	4613      	mov	r3, r2
 8016054:	460a      	mov	r2, r1
 8016056:	4601      	mov	r1, r0
 8016058:	4620      	mov	r0, r4
 801605a:	f7ff ff75 	bl	8015f48 <_strtol_l.isra.0>
 801605e:	b003      	add	sp, #12
 8016060:	bd30      	pop	{r4, r5, pc}
 8016062:	bf00      	nop
 8016064:	200000dc 	.word	0x200000dc
 8016068:	20000140 	.word	0x20000140

0801606c <__utoa>:
 801606c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801606e:	4b1d      	ldr	r3, [pc, #116]	; (80160e4 <__utoa+0x78>)
 8016070:	b08b      	sub	sp, #44	; 0x2c
 8016072:	4605      	mov	r5, r0
 8016074:	460c      	mov	r4, r1
 8016076:	466e      	mov	r6, sp
 8016078:	f103 0c20 	add.w	ip, r3, #32
 801607c:	6818      	ldr	r0, [r3, #0]
 801607e:	6859      	ldr	r1, [r3, #4]
 8016080:	4637      	mov	r7, r6
 8016082:	c703      	stmia	r7!, {r0, r1}
 8016084:	3308      	adds	r3, #8
 8016086:	4563      	cmp	r3, ip
 8016088:	463e      	mov	r6, r7
 801608a:	d1f7      	bne.n	801607c <__utoa+0x10>
 801608c:	6818      	ldr	r0, [r3, #0]
 801608e:	791b      	ldrb	r3, [r3, #4]
 8016090:	713b      	strb	r3, [r7, #4]
 8016092:	1e93      	subs	r3, r2, #2
 8016094:	2b22      	cmp	r3, #34	; 0x22
 8016096:	6038      	str	r0, [r7, #0]
 8016098:	f04f 0300 	mov.w	r3, #0
 801609c:	d904      	bls.n	80160a8 <__utoa+0x3c>
 801609e:	7023      	strb	r3, [r4, #0]
 80160a0:	461c      	mov	r4, r3
 80160a2:	4620      	mov	r0, r4
 80160a4:	b00b      	add	sp, #44	; 0x2c
 80160a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80160a8:	1e66      	subs	r6, r4, #1
 80160aa:	fbb5 f0f2 	udiv	r0, r5, r2
 80160ae:	af0a      	add	r7, sp, #40	; 0x28
 80160b0:	fb02 5510 	mls	r5, r2, r0, r5
 80160b4:	443d      	add	r5, r7
 80160b6:	1c59      	adds	r1, r3, #1
 80160b8:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 80160bc:	f806 5f01 	strb.w	r5, [r6, #1]!
 80160c0:	4605      	mov	r5, r0
 80160c2:	b968      	cbnz	r0, 80160e0 <__utoa+0x74>
 80160c4:	5460      	strb	r0, [r4, r1]
 80160c6:	4423      	add	r3, r4
 80160c8:	4622      	mov	r2, r4
 80160ca:	1b19      	subs	r1, r3, r4
 80160cc:	1b10      	subs	r0, r2, r4
 80160ce:	4281      	cmp	r1, r0
 80160d0:	dde7      	ble.n	80160a2 <__utoa+0x36>
 80160d2:	7811      	ldrb	r1, [r2, #0]
 80160d4:	7818      	ldrb	r0, [r3, #0]
 80160d6:	f802 0b01 	strb.w	r0, [r2], #1
 80160da:	f803 1901 	strb.w	r1, [r3], #-1
 80160de:	e7f4      	b.n	80160ca <__utoa+0x5e>
 80160e0:	460b      	mov	r3, r1
 80160e2:	e7e2      	b.n	80160aa <__utoa+0x3e>
 80160e4:	0802b3a8 	.word	0x0802b3a8

080160e8 <rshift>:
 80160e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80160ea:	6906      	ldr	r6, [r0, #16]
 80160ec:	114b      	asrs	r3, r1, #5
 80160ee:	429e      	cmp	r6, r3
 80160f0:	f100 0414 	add.w	r4, r0, #20
 80160f4:	dd30      	ble.n	8016158 <rshift+0x70>
 80160f6:	f011 011f 	ands.w	r1, r1, #31
 80160fa:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80160fe:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8016102:	d108      	bne.n	8016116 <rshift+0x2e>
 8016104:	4621      	mov	r1, r4
 8016106:	42b2      	cmp	r2, r6
 8016108:	460b      	mov	r3, r1
 801610a:	d211      	bcs.n	8016130 <rshift+0x48>
 801610c:	f852 3b04 	ldr.w	r3, [r2], #4
 8016110:	f841 3b04 	str.w	r3, [r1], #4
 8016114:	e7f7      	b.n	8016106 <rshift+0x1e>
 8016116:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 801611a:	f1c1 0c20 	rsb	ip, r1, #32
 801611e:	40cd      	lsrs	r5, r1
 8016120:	3204      	adds	r2, #4
 8016122:	4623      	mov	r3, r4
 8016124:	42b2      	cmp	r2, r6
 8016126:	4617      	mov	r7, r2
 8016128:	d30c      	bcc.n	8016144 <rshift+0x5c>
 801612a:	601d      	str	r5, [r3, #0]
 801612c:	b105      	cbz	r5, 8016130 <rshift+0x48>
 801612e:	3304      	adds	r3, #4
 8016130:	1b1a      	subs	r2, r3, r4
 8016132:	42a3      	cmp	r3, r4
 8016134:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8016138:	bf08      	it	eq
 801613a:	2300      	moveq	r3, #0
 801613c:	6102      	str	r2, [r0, #16]
 801613e:	bf08      	it	eq
 8016140:	6143      	streq	r3, [r0, #20]
 8016142:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016144:	683f      	ldr	r7, [r7, #0]
 8016146:	fa07 f70c 	lsl.w	r7, r7, ip
 801614a:	433d      	orrs	r5, r7
 801614c:	f843 5b04 	str.w	r5, [r3], #4
 8016150:	f852 5b04 	ldr.w	r5, [r2], #4
 8016154:	40cd      	lsrs	r5, r1
 8016156:	e7e5      	b.n	8016124 <rshift+0x3c>
 8016158:	4623      	mov	r3, r4
 801615a:	e7e9      	b.n	8016130 <rshift+0x48>

0801615c <__hexdig_fun>:
 801615c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8016160:	2b09      	cmp	r3, #9
 8016162:	d802      	bhi.n	801616a <__hexdig_fun+0xe>
 8016164:	3820      	subs	r0, #32
 8016166:	b2c0      	uxtb	r0, r0
 8016168:	4770      	bx	lr
 801616a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801616e:	2b05      	cmp	r3, #5
 8016170:	d801      	bhi.n	8016176 <__hexdig_fun+0x1a>
 8016172:	3847      	subs	r0, #71	; 0x47
 8016174:	e7f7      	b.n	8016166 <__hexdig_fun+0xa>
 8016176:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801617a:	2b05      	cmp	r3, #5
 801617c:	d801      	bhi.n	8016182 <__hexdig_fun+0x26>
 801617e:	3827      	subs	r0, #39	; 0x27
 8016180:	e7f1      	b.n	8016166 <__hexdig_fun+0xa>
 8016182:	2000      	movs	r0, #0
 8016184:	4770      	bx	lr

08016186 <__gethex>:
 8016186:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801618a:	b08b      	sub	sp, #44	; 0x2c
 801618c:	468a      	mov	sl, r1
 801618e:	9002      	str	r0, [sp, #8]
 8016190:	9816      	ldr	r0, [sp, #88]	; 0x58
 8016192:	9306      	str	r3, [sp, #24]
 8016194:	4690      	mov	r8, r2
 8016196:	f000 fad0 	bl	801673a <__localeconv_l>
 801619a:	6803      	ldr	r3, [r0, #0]
 801619c:	9303      	str	r3, [sp, #12]
 801619e:	4618      	mov	r0, r3
 80161a0:	f7ea f820 	bl	80001e4 <strlen>
 80161a4:	9b03      	ldr	r3, [sp, #12]
 80161a6:	9001      	str	r0, [sp, #4]
 80161a8:	4403      	add	r3, r0
 80161aa:	f04f 0b00 	mov.w	fp, #0
 80161ae:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80161b2:	9307      	str	r3, [sp, #28]
 80161b4:	f8da 3000 	ldr.w	r3, [sl]
 80161b8:	3302      	adds	r3, #2
 80161ba:	461f      	mov	r7, r3
 80161bc:	f813 0b01 	ldrb.w	r0, [r3], #1
 80161c0:	2830      	cmp	r0, #48	; 0x30
 80161c2:	d06c      	beq.n	801629e <__gethex+0x118>
 80161c4:	f7ff ffca 	bl	801615c <__hexdig_fun>
 80161c8:	4604      	mov	r4, r0
 80161ca:	2800      	cmp	r0, #0
 80161cc:	d16a      	bne.n	80162a4 <__gethex+0x11e>
 80161ce:	9a01      	ldr	r2, [sp, #4]
 80161d0:	9903      	ldr	r1, [sp, #12]
 80161d2:	4638      	mov	r0, r7
 80161d4:	f7ff f811 	bl	80151fa <strncmp>
 80161d8:	2800      	cmp	r0, #0
 80161da:	d166      	bne.n	80162aa <__gethex+0x124>
 80161dc:	9b01      	ldr	r3, [sp, #4]
 80161de:	5cf8      	ldrb	r0, [r7, r3]
 80161e0:	18fe      	adds	r6, r7, r3
 80161e2:	f7ff ffbb 	bl	801615c <__hexdig_fun>
 80161e6:	2800      	cmp	r0, #0
 80161e8:	d062      	beq.n	80162b0 <__gethex+0x12a>
 80161ea:	4633      	mov	r3, r6
 80161ec:	7818      	ldrb	r0, [r3, #0]
 80161ee:	2830      	cmp	r0, #48	; 0x30
 80161f0:	461f      	mov	r7, r3
 80161f2:	f103 0301 	add.w	r3, r3, #1
 80161f6:	d0f9      	beq.n	80161ec <__gethex+0x66>
 80161f8:	f7ff ffb0 	bl	801615c <__hexdig_fun>
 80161fc:	fab0 f580 	clz	r5, r0
 8016200:	096d      	lsrs	r5, r5, #5
 8016202:	4634      	mov	r4, r6
 8016204:	f04f 0b01 	mov.w	fp, #1
 8016208:	463a      	mov	r2, r7
 801620a:	4616      	mov	r6, r2
 801620c:	3201      	adds	r2, #1
 801620e:	7830      	ldrb	r0, [r6, #0]
 8016210:	f7ff ffa4 	bl	801615c <__hexdig_fun>
 8016214:	2800      	cmp	r0, #0
 8016216:	d1f8      	bne.n	801620a <__gethex+0x84>
 8016218:	9a01      	ldr	r2, [sp, #4]
 801621a:	9903      	ldr	r1, [sp, #12]
 801621c:	4630      	mov	r0, r6
 801621e:	f7fe ffec 	bl	80151fa <strncmp>
 8016222:	b950      	cbnz	r0, 801623a <__gethex+0xb4>
 8016224:	b954      	cbnz	r4, 801623c <__gethex+0xb6>
 8016226:	9b01      	ldr	r3, [sp, #4]
 8016228:	18f4      	adds	r4, r6, r3
 801622a:	4622      	mov	r2, r4
 801622c:	4616      	mov	r6, r2
 801622e:	3201      	adds	r2, #1
 8016230:	7830      	ldrb	r0, [r6, #0]
 8016232:	f7ff ff93 	bl	801615c <__hexdig_fun>
 8016236:	2800      	cmp	r0, #0
 8016238:	d1f8      	bne.n	801622c <__gethex+0xa6>
 801623a:	b10c      	cbz	r4, 8016240 <__gethex+0xba>
 801623c:	1ba4      	subs	r4, r4, r6
 801623e:	00a4      	lsls	r4, r4, #2
 8016240:	7833      	ldrb	r3, [r6, #0]
 8016242:	2b50      	cmp	r3, #80	; 0x50
 8016244:	d001      	beq.n	801624a <__gethex+0xc4>
 8016246:	2b70      	cmp	r3, #112	; 0x70
 8016248:	d140      	bne.n	80162cc <__gethex+0x146>
 801624a:	7873      	ldrb	r3, [r6, #1]
 801624c:	2b2b      	cmp	r3, #43	; 0x2b
 801624e:	d031      	beq.n	80162b4 <__gethex+0x12e>
 8016250:	2b2d      	cmp	r3, #45	; 0x2d
 8016252:	d033      	beq.n	80162bc <__gethex+0x136>
 8016254:	1c71      	adds	r1, r6, #1
 8016256:	f04f 0900 	mov.w	r9, #0
 801625a:	7808      	ldrb	r0, [r1, #0]
 801625c:	f7ff ff7e 	bl	801615c <__hexdig_fun>
 8016260:	1e43      	subs	r3, r0, #1
 8016262:	b2db      	uxtb	r3, r3
 8016264:	2b18      	cmp	r3, #24
 8016266:	d831      	bhi.n	80162cc <__gethex+0x146>
 8016268:	f1a0 0210 	sub.w	r2, r0, #16
 801626c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8016270:	f7ff ff74 	bl	801615c <__hexdig_fun>
 8016274:	1e43      	subs	r3, r0, #1
 8016276:	b2db      	uxtb	r3, r3
 8016278:	2b18      	cmp	r3, #24
 801627a:	d922      	bls.n	80162c2 <__gethex+0x13c>
 801627c:	f1b9 0f00 	cmp.w	r9, #0
 8016280:	d000      	beq.n	8016284 <__gethex+0xfe>
 8016282:	4252      	negs	r2, r2
 8016284:	4414      	add	r4, r2
 8016286:	f8ca 1000 	str.w	r1, [sl]
 801628a:	b30d      	cbz	r5, 80162d0 <__gethex+0x14a>
 801628c:	f1bb 0f00 	cmp.w	fp, #0
 8016290:	bf0c      	ite	eq
 8016292:	2706      	moveq	r7, #6
 8016294:	2700      	movne	r7, #0
 8016296:	4638      	mov	r0, r7
 8016298:	b00b      	add	sp, #44	; 0x2c
 801629a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801629e:	f10b 0b01 	add.w	fp, fp, #1
 80162a2:	e78a      	b.n	80161ba <__gethex+0x34>
 80162a4:	2500      	movs	r5, #0
 80162a6:	462c      	mov	r4, r5
 80162a8:	e7ae      	b.n	8016208 <__gethex+0x82>
 80162aa:	463e      	mov	r6, r7
 80162ac:	2501      	movs	r5, #1
 80162ae:	e7c7      	b.n	8016240 <__gethex+0xba>
 80162b0:	4604      	mov	r4, r0
 80162b2:	e7fb      	b.n	80162ac <__gethex+0x126>
 80162b4:	f04f 0900 	mov.w	r9, #0
 80162b8:	1cb1      	adds	r1, r6, #2
 80162ba:	e7ce      	b.n	801625a <__gethex+0xd4>
 80162bc:	f04f 0901 	mov.w	r9, #1
 80162c0:	e7fa      	b.n	80162b8 <__gethex+0x132>
 80162c2:	230a      	movs	r3, #10
 80162c4:	fb03 0202 	mla	r2, r3, r2, r0
 80162c8:	3a10      	subs	r2, #16
 80162ca:	e7cf      	b.n	801626c <__gethex+0xe6>
 80162cc:	4631      	mov	r1, r6
 80162ce:	e7da      	b.n	8016286 <__gethex+0x100>
 80162d0:	1bf3      	subs	r3, r6, r7
 80162d2:	3b01      	subs	r3, #1
 80162d4:	4629      	mov	r1, r5
 80162d6:	2b07      	cmp	r3, #7
 80162d8:	dc49      	bgt.n	801636e <__gethex+0x1e8>
 80162da:	9802      	ldr	r0, [sp, #8]
 80162dc:	f000 fa41 	bl	8016762 <_Balloc>
 80162e0:	9b01      	ldr	r3, [sp, #4]
 80162e2:	f100 0914 	add.w	r9, r0, #20
 80162e6:	f04f 0b00 	mov.w	fp, #0
 80162ea:	f1c3 0301 	rsb	r3, r3, #1
 80162ee:	4605      	mov	r5, r0
 80162f0:	f8cd 9010 	str.w	r9, [sp, #16]
 80162f4:	46da      	mov	sl, fp
 80162f6:	9308      	str	r3, [sp, #32]
 80162f8:	42b7      	cmp	r7, r6
 80162fa:	d33b      	bcc.n	8016374 <__gethex+0x1ee>
 80162fc:	9804      	ldr	r0, [sp, #16]
 80162fe:	f840 ab04 	str.w	sl, [r0], #4
 8016302:	eba0 0009 	sub.w	r0, r0, r9
 8016306:	1080      	asrs	r0, r0, #2
 8016308:	6128      	str	r0, [r5, #16]
 801630a:	0147      	lsls	r7, r0, #5
 801630c:	4650      	mov	r0, sl
 801630e:	f000 faec 	bl	80168ea <__hi0bits>
 8016312:	f8d8 6000 	ldr.w	r6, [r8]
 8016316:	1a3f      	subs	r7, r7, r0
 8016318:	42b7      	cmp	r7, r6
 801631a:	dd64      	ble.n	80163e6 <__gethex+0x260>
 801631c:	1bbf      	subs	r7, r7, r6
 801631e:	4639      	mov	r1, r7
 8016320:	4628      	mov	r0, r5
 8016322:	f000 fdfb 	bl	8016f1c <__any_on>
 8016326:	4682      	mov	sl, r0
 8016328:	b178      	cbz	r0, 801634a <__gethex+0x1c4>
 801632a:	1e7b      	subs	r3, r7, #1
 801632c:	1159      	asrs	r1, r3, #5
 801632e:	f003 021f 	and.w	r2, r3, #31
 8016332:	f04f 0a01 	mov.w	sl, #1
 8016336:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801633a:	fa0a f202 	lsl.w	r2, sl, r2
 801633e:	420a      	tst	r2, r1
 8016340:	d003      	beq.n	801634a <__gethex+0x1c4>
 8016342:	4553      	cmp	r3, sl
 8016344:	dc46      	bgt.n	80163d4 <__gethex+0x24e>
 8016346:	f04f 0a02 	mov.w	sl, #2
 801634a:	4639      	mov	r1, r7
 801634c:	4628      	mov	r0, r5
 801634e:	f7ff fecb 	bl	80160e8 <rshift>
 8016352:	443c      	add	r4, r7
 8016354:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8016358:	42a3      	cmp	r3, r4
 801635a:	da52      	bge.n	8016402 <__gethex+0x27c>
 801635c:	4629      	mov	r1, r5
 801635e:	9802      	ldr	r0, [sp, #8]
 8016360:	f000 fa33 	bl	80167ca <_Bfree>
 8016364:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016366:	2300      	movs	r3, #0
 8016368:	6013      	str	r3, [r2, #0]
 801636a:	27a3      	movs	r7, #163	; 0xa3
 801636c:	e793      	b.n	8016296 <__gethex+0x110>
 801636e:	3101      	adds	r1, #1
 8016370:	105b      	asrs	r3, r3, #1
 8016372:	e7b0      	b.n	80162d6 <__gethex+0x150>
 8016374:	1e73      	subs	r3, r6, #1
 8016376:	9305      	str	r3, [sp, #20]
 8016378:	9a07      	ldr	r2, [sp, #28]
 801637a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801637e:	4293      	cmp	r3, r2
 8016380:	d018      	beq.n	80163b4 <__gethex+0x22e>
 8016382:	f1bb 0f20 	cmp.w	fp, #32
 8016386:	d107      	bne.n	8016398 <__gethex+0x212>
 8016388:	9b04      	ldr	r3, [sp, #16]
 801638a:	f8c3 a000 	str.w	sl, [r3]
 801638e:	3304      	adds	r3, #4
 8016390:	f04f 0a00 	mov.w	sl, #0
 8016394:	9304      	str	r3, [sp, #16]
 8016396:	46d3      	mov	fp, sl
 8016398:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801639c:	f7ff fede 	bl	801615c <__hexdig_fun>
 80163a0:	f000 000f 	and.w	r0, r0, #15
 80163a4:	fa00 f00b 	lsl.w	r0, r0, fp
 80163a8:	ea4a 0a00 	orr.w	sl, sl, r0
 80163ac:	f10b 0b04 	add.w	fp, fp, #4
 80163b0:	9b05      	ldr	r3, [sp, #20]
 80163b2:	e00d      	b.n	80163d0 <__gethex+0x24a>
 80163b4:	9b05      	ldr	r3, [sp, #20]
 80163b6:	9a08      	ldr	r2, [sp, #32]
 80163b8:	4413      	add	r3, r2
 80163ba:	42bb      	cmp	r3, r7
 80163bc:	d3e1      	bcc.n	8016382 <__gethex+0x1fc>
 80163be:	4618      	mov	r0, r3
 80163c0:	9a01      	ldr	r2, [sp, #4]
 80163c2:	9903      	ldr	r1, [sp, #12]
 80163c4:	9309      	str	r3, [sp, #36]	; 0x24
 80163c6:	f7fe ff18 	bl	80151fa <strncmp>
 80163ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80163cc:	2800      	cmp	r0, #0
 80163ce:	d1d8      	bne.n	8016382 <__gethex+0x1fc>
 80163d0:	461e      	mov	r6, r3
 80163d2:	e791      	b.n	80162f8 <__gethex+0x172>
 80163d4:	1eb9      	subs	r1, r7, #2
 80163d6:	4628      	mov	r0, r5
 80163d8:	f000 fda0 	bl	8016f1c <__any_on>
 80163dc:	2800      	cmp	r0, #0
 80163de:	d0b2      	beq.n	8016346 <__gethex+0x1c0>
 80163e0:	f04f 0a03 	mov.w	sl, #3
 80163e4:	e7b1      	b.n	801634a <__gethex+0x1c4>
 80163e6:	da09      	bge.n	80163fc <__gethex+0x276>
 80163e8:	1bf7      	subs	r7, r6, r7
 80163ea:	4629      	mov	r1, r5
 80163ec:	463a      	mov	r2, r7
 80163ee:	9802      	ldr	r0, [sp, #8]
 80163f0:	f000 fbb6 	bl	8016b60 <__lshift>
 80163f4:	1be4      	subs	r4, r4, r7
 80163f6:	4605      	mov	r5, r0
 80163f8:	f100 0914 	add.w	r9, r0, #20
 80163fc:	f04f 0a00 	mov.w	sl, #0
 8016400:	e7a8      	b.n	8016354 <__gethex+0x1ce>
 8016402:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8016406:	42a0      	cmp	r0, r4
 8016408:	dd6a      	ble.n	80164e0 <__gethex+0x35a>
 801640a:	1b04      	subs	r4, r0, r4
 801640c:	42a6      	cmp	r6, r4
 801640e:	dc2e      	bgt.n	801646e <__gethex+0x2e8>
 8016410:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8016414:	2b02      	cmp	r3, #2
 8016416:	d022      	beq.n	801645e <__gethex+0x2d8>
 8016418:	2b03      	cmp	r3, #3
 801641a:	d024      	beq.n	8016466 <__gethex+0x2e0>
 801641c:	2b01      	cmp	r3, #1
 801641e:	d115      	bne.n	801644c <__gethex+0x2c6>
 8016420:	42a6      	cmp	r6, r4
 8016422:	d113      	bne.n	801644c <__gethex+0x2c6>
 8016424:	2e01      	cmp	r6, #1
 8016426:	dc0b      	bgt.n	8016440 <__gethex+0x2ba>
 8016428:	9a06      	ldr	r2, [sp, #24]
 801642a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801642e:	6013      	str	r3, [r2, #0]
 8016430:	2301      	movs	r3, #1
 8016432:	612b      	str	r3, [r5, #16]
 8016434:	f8c9 3000 	str.w	r3, [r9]
 8016438:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801643a:	2762      	movs	r7, #98	; 0x62
 801643c:	601d      	str	r5, [r3, #0]
 801643e:	e72a      	b.n	8016296 <__gethex+0x110>
 8016440:	1e71      	subs	r1, r6, #1
 8016442:	4628      	mov	r0, r5
 8016444:	f000 fd6a 	bl	8016f1c <__any_on>
 8016448:	2800      	cmp	r0, #0
 801644a:	d1ed      	bne.n	8016428 <__gethex+0x2a2>
 801644c:	4629      	mov	r1, r5
 801644e:	9802      	ldr	r0, [sp, #8]
 8016450:	f000 f9bb 	bl	80167ca <_Bfree>
 8016454:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016456:	2300      	movs	r3, #0
 8016458:	6013      	str	r3, [r2, #0]
 801645a:	2750      	movs	r7, #80	; 0x50
 801645c:	e71b      	b.n	8016296 <__gethex+0x110>
 801645e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016460:	2b00      	cmp	r3, #0
 8016462:	d0e1      	beq.n	8016428 <__gethex+0x2a2>
 8016464:	e7f2      	b.n	801644c <__gethex+0x2c6>
 8016466:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016468:	2b00      	cmp	r3, #0
 801646a:	d1dd      	bne.n	8016428 <__gethex+0x2a2>
 801646c:	e7ee      	b.n	801644c <__gethex+0x2c6>
 801646e:	1e67      	subs	r7, r4, #1
 8016470:	f1ba 0f00 	cmp.w	sl, #0
 8016474:	d131      	bne.n	80164da <__gethex+0x354>
 8016476:	b127      	cbz	r7, 8016482 <__gethex+0x2fc>
 8016478:	4639      	mov	r1, r7
 801647a:	4628      	mov	r0, r5
 801647c:	f000 fd4e 	bl	8016f1c <__any_on>
 8016480:	4682      	mov	sl, r0
 8016482:	117a      	asrs	r2, r7, #5
 8016484:	2301      	movs	r3, #1
 8016486:	f007 071f 	and.w	r7, r7, #31
 801648a:	fa03 f707 	lsl.w	r7, r3, r7
 801648e:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8016492:	4621      	mov	r1, r4
 8016494:	421f      	tst	r7, r3
 8016496:	4628      	mov	r0, r5
 8016498:	bf18      	it	ne
 801649a:	f04a 0a02 	orrne.w	sl, sl, #2
 801649e:	1b36      	subs	r6, r6, r4
 80164a0:	f7ff fe22 	bl	80160e8 <rshift>
 80164a4:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80164a8:	2702      	movs	r7, #2
 80164aa:	f1ba 0f00 	cmp.w	sl, #0
 80164ae:	d048      	beq.n	8016542 <__gethex+0x3bc>
 80164b0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80164b4:	2b02      	cmp	r3, #2
 80164b6:	d015      	beq.n	80164e4 <__gethex+0x35e>
 80164b8:	2b03      	cmp	r3, #3
 80164ba:	d017      	beq.n	80164ec <__gethex+0x366>
 80164bc:	2b01      	cmp	r3, #1
 80164be:	d109      	bne.n	80164d4 <__gethex+0x34e>
 80164c0:	f01a 0f02 	tst.w	sl, #2
 80164c4:	d006      	beq.n	80164d4 <__gethex+0x34e>
 80164c6:	f8d9 3000 	ldr.w	r3, [r9]
 80164ca:	ea4a 0a03 	orr.w	sl, sl, r3
 80164ce:	f01a 0f01 	tst.w	sl, #1
 80164d2:	d10e      	bne.n	80164f2 <__gethex+0x36c>
 80164d4:	f047 0710 	orr.w	r7, r7, #16
 80164d8:	e033      	b.n	8016542 <__gethex+0x3bc>
 80164da:	f04f 0a01 	mov.w	sl, #1
 80164de:	e7d0      	b.n	8016482 <__gethex+0x2fc>
 80164e0:	2701      	movs	r7, #1
 80164e2:	e7e2      	b.n	80164aa <__gethex+0x324>
 80164e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80164e6:	f1c3 0301 	rsb	r3, r3, #1
 80164ea:	9315      	str	r3, [sp, #84]	; 0x54
 80164ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80164ee:	2b00      	cmp	r3, #0
 80164f0:	d0f0      	beq.n	80164d4 <__gethex+0x34e>
 80164f2:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80164f6:	f105 0314 	add.w	r3, r5, #20
 80164fa:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80164fe:	eb03 010a 	add.w	r1, r3, sl
 8016502:	f04f 0c00 	mov.w	ip, #0
 8016506:	4618      	mov	r0, r3
 8016508:	f853 2b04 	ldr.w	r2, [r3], #4
 801650c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8016510:	d01c      	beq.n	801654c <__gethex+0x3c6>
 8016512:	3201      	adds	r2, #1
 8016514:	6002      	str	r2, [r0, #0]
 8016516:	2f02      	cmp	r7, #2
 8016518:	f105 0314 	add.w	r3, r5, #20
 801651c:	d138      	bne.n	8016590 <__gethex+0x40a>
 801651e:	f8d8 2000 	ldr.w	r2, [r8]
 8016522:	3a01      	subs	r2, #1
 8016524:	42b2      	cmp	r2, r6
 8016526:	d10a      	bne.n	801653e <__gethex+0x3b8>
 8016528:	1171      	asrs	r1, r6, #5
 801652a:	2201      	movs	r2, #1
 801652c:	f006 061f 	and.w	r6, r6, #31
 8016530:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8016534:	fa02 f606 	lsl.w	r6, r2, r6
 8016538:	421e      	tst	r6, r3
 801653a:	bf18      	it	ne
 801653c:	4617      	movne	r7, r2
 801653e:	f047 0720 	orr.w	r7, r7, #32
 8016542:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016544:	601d      	str	r5, [r3, #0]
 8016546:	9b06      	ldr	r3, [sp, #24]
 8016548:	601c      	str	r4, [r3, #0]
 801654a:	e6a4      	b.n	8016296 <__gethex+0x110>
 801654c:	4299      	cmp	r1, r3
 801654e:	f843 cc04 	str.w	ip, [r3, #-4]
 8016552:	d8d8      	bhi.n	8016506 <__gethex+0x380>
 8016554:	68ab      	ldr	r3, [r5, #8]
 8016556:	4599      	cmp	r9, r3
 8016558:	db12      	blt.n	8016580 <__gethex+0x3fa>
 801655a:	6869      	ldr	r1, [r5, #4]
 801655c:	9802      	ldr	r0, [sp, #8]
 801655e:	3101      	adds	r1, #1
 8016560:	f000 f8ff 	bl	8016762 <_Balloc>
 8016564:	692a      	ldr	r2, [r5, #16]
 8016566:	3202      	adds	r2, #2
 8016568:	f105 010c 	add.w	r1, r5, #12
 801656c:	4683      	mov	fp, r0
 801656e:	0092      	lsls	r2, r2, #2
 8016570:	300c      	adds	r0, #12
 8016572:	f7fe fdf9 	bl	8015168 <memcpy>
 8016576:	4629      	mov	r1, r5
 8016578:	9802      	ldr	r0, [sp, #8]
 801657a:	f000 f926 	bl	80167ca <_Bfree>
 801657e:	465d      	mov	r5, fp
 8016580:	692b      	ldr	r3, [r5, #16]
 8016582:	1c5a      	adds	r2, r3, #1
 8016584:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8016588:	612a      	str	r2, [r5, #16]
 801658a:	2201      	movs	r2, #1
 801658c:	615a      	str	r2, [r3, #20]
 801658e:	e7c2      	b.n	8016516 <__gethex+0x390>
 8016590:	692a      	ldr	r2, [r5, #16]
 8016592:	454a      	cmp	r2, r9
 8016594:	dd0b      	ble.n	80165ae <__gethex+0x428>
 8016596:	2101      	movs	r1, #1
 8016598:	4628      	mov	r0, r5
 801659a:	f7ff fda5 	bl	80160e8 <rshift>
 801659e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80165a2:	3401      	adds	r4, #1
 80165a4:	42a3      	cmp	r3, r4
 80165a6:	f6ff aed9 	blt.w	801635c <__gethex+0x1d6>
 80165aa:	2701      	movs	r7, #1
 80165ac:	e7c7      	b.n	801653e <__gethex+0x3b8>
 80165ae:	f016 061f 	ands.w	r6, r6, #31
 80165b2:	d0fa      	beq.n	80165aa <__gethex+0x424>
 80165b4:	449a      	add	sl, r3
 80165b6:	f1c6 0620 	rsb	r6, r6, #32
 80165ba:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80165be:	f000 f994 	bl	80168ea <__hi0bits>
 80165c2:	42b0      	cmp	r0, r6
 80165c4:	dbe7      	blt.n	8016596 <__gethex+0x410>
 80165c6:	e7f0      	b.n	80165aa <__gethex+0x424>

080165c8 <L_shift>:
 80165c8:	f1c2 0208 	rsb	r2, r2, #8
 80165cc:	0092      	lsls	r2, r2, #2
 80165ce:	b570      	push	{r4, r5, r6, lr}
 80165d0:	f1c2 0620 	rsb	r6, r2, #32
 80165d4:	6843      	ldr	r3, [r0, #4]
 80165d6:	6804      	ldr	r4, [r0, #0]
 80165d8:	fa03 f506 	lsl.w	r5, r3, r6
 80165dc:	432c      	orrs	r4, r5
 80165de:	40d3      	lsrs	r3, r2
 80165e0:	6004      	str	r4, [r0, #0]
 80165e2:	f840 3f04 	str.w	r3, [r0, #4]!
 80165e6:	4288      	cmp	r0, r1
 80165e8:	d3f4      	bcc.n	80165d4 <L_shift+0xc>
 80165ea:	bd70      	pop	{r4, r5, r6, pc}

080165ec <__match>:
 80165ec:	b530      	push	{r4, r5, lr}
 80165ee:	6803      	ldr	r3, [r0, #0]
 80165f0:	3301      	adds	r3, #1
 80165f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80165f6:	b914      	cbnz	r4, 80165fe <__match+0x12>
 80165f8:	6003      	str	r3, [r0, #0]
 80165fa:	2001      	movs	r0, #1
 80165fc:	bd30      	pop	{r4, r5, pc}
 80165fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016602:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8016606:	2d19      	cmp	r5, #25
 8016608:	bf98      	it	ls
 801660a:	3220      	addls	r2, #32
 801660c:	42a2      	cmp	r2, r4
 801660e:	d0f0      	beq.n	80165f2 <__match+0x6>
 8016610:	2000      	movs	r0, #0
 8016612:	e7f3      	b.n	80165fc <__match+0x10>

08016614 <__hexnan>:
 8016614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016618:	680b      	ldr	r3, [r1, #0]
 801661a:	6801      	ldr	r1, [r0, #0]
 801661c:	115f      	asrs	r7, r3, #5
 801661e:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8016622:	f013 031f 	ands.w	r3, r3, #31
 8016626:	b087      	sub	sp, #28
 8016628:	bf18      	it	ne
 801662a:	3704      	addne	r7, #4
 801662c:	2500      	movs	r5, #0
 801662e:	1f3e      	subs	r6, r7, #4
 8016630:	4682      	mov	sl, r0
 8016632:	4690      	mov	r8, r2
 8016634:	9301      	str	r3, [sp, #4]
 8016636:	f847 5c04 	str.w	r5, [r7, #-4]
 801663a:	46b1      	mov	r9, r6
 801663c:	4634      	mov	r4, r6
 801663e:	9502      	str	r5, [sp, #8]
 8016640:	46ab      	mov	fp, r5
 8016642:	784a      	ldrb	r2, [r1, #1]
 8016644:	1c4b      	adds	r3, r1, #1
 8016646:	9303      	str	r3, [sp, #12]
 8016648:	b342      	cbz	r2, 801669c <__hexnan+0x88>
 801664a:	4610      	mov	r0, r2
 801664c:	9105      	str	r1, [sp, #20]
 801664e:	9204      	str	r2, [sp, #16]
 8016650:	f7ff fd84 	bl	801615c <__hexdig_fun>
 8016654:	2800      	cmp	r0, #0
 8016656:	d143      	bne.n	80166e0 <__hexnan+0xcc>
 8016658:	9a04      	ldr	r2, [sp, #16]
 801665a:	9905      	ldr	r1, [sp, #20]
 801665c:	2a20      	cmp	r2, #32
 801665e:	d818      	bhi.n	8016692 <__hexnan+0x7e>
 8016660:	9b02      	ldr	r3, [sp, #8]
 8016662:	459b      	cmp	fp, r3
 8016664:	dd13      	ble.n	801668e <__hexnan+0x7a>
 8016666:	454c      	cmp	r4, r9
 8016668:	d206      	bcs.n	8016678 <__hexnan+0x64>
 801666a:	2d07      	cmp	r5, #7
 801666c:	dc04      	bgt.n	8016678 <__hexnan+0x64>
 801666e:	462a      	mov	r2, r5
 8016670:	4649      	mov	r1, r9
 8016672:	4620      	mov	r0, r4
 8016674:	f7ff ffa8 	bl	80165c8 <L_shift>
 8016678:	4544      	cmp	r4, r8
 801667a:	d944      	bls.n	8016706 <__hexnan+0xf2>
 801667c:	2300      	movs	r3, #0
 801667e:	f1a4 0904 	sub.w	r9, r4, #4
 8016682:	f844 3c04 	str.w	r3, [r4, #-4]
 8016686:	f8cd b008 	str.w	fp, [sp, #8]
 801668a:	464c      	mov	r4, r9
 801668c:	461d      	mov	r5, r3
 801668e:	9903      	ldr	r1, [sp, #12]
 8016690:	e7d7      	b.n	8016642 <__hexnan+0x2e>
 8016692:	2a29      	cmp	r2, #41	; 0x29
 8016694:	d14a      	bne.n	801672c <__hexnan+0x118>
 8016696:	3102      	adds	r1, #2
 8016698:	f8ca 1000 	str.w	r1, [sl]
 801669c:	f1bb 0f00 	cmp.w	fp, #0
 80166a0:	d044      	beq.n	801672c <__hexnan+0x118>
 80166a2:	454c      	cmp	r4, r9
 80166a4:	d206      	bcs.n	80166b4 <__hexnan+0xa0>
 80166a6:	2d07      	cmp	r5, #7
 80166a8:	dc04      	bgt.n	80166b4 <__hexnan+0xa0>
 80166aa:	462a      	mov	r2, r5
 80166ac:	4649      	mov	r1, r9
 80166ae:	4620      	mov	r0, r4
 80166b0:	f7ff ff8a 	bl	80165c8 <L_shift>
 80166b4:	4544      	cmp	r4, r8
 80166b6:	d928      	bls.n	801670a <__hexnan+0xf6>
 80166b8:	4643      	mov	r3, r8
 80166ba:	f854 2b04 	ldr.w	r2, [r4], #4
 80166be:	f843 2b04 	str.w	r2, [r3], #4
 80166c2:	42a6      	cmp	r6, r4
 80166c4:	d2f9      	bcs.n	80166ba <__hexnan+0xa6>
 80166c6:	2200      	movs	r2, #0
 80166c8:	f843 2b04 	str.w	r2, [r3], #4
 80166cc:	429e      	cmp	r6, r3
 80166ce:	d2fb      	bcs.n	80166c8 <__hexnan+0xb4>
 80166d0:	6833      	ldr	r3, [r6, #0]
 80166d2:	b91b      	cbnz	r3, 80166dc <__hexnan+0xc8>
 80166d4:	4546      	cmp	r6, r8
 80166d6:	d127      	bne.n	8016728 <__hexnan+0x114>
 80166d8:	2301      	movs	r3, #1
 80166da:	6033      	str	r3, [r6, #0]
 80166dc:	2005      	movs	r0, #5
 80166de:	e026      	b.n	801672e <__hexnan+0x11a>
 80166e0:	3501      	adds	r5, #1
 80166e2:	2d08      	cmp	r5, #8
 80166e4:	f10b 0b01 	add.w	fp, fp, #1
 80166e8:	dd06      	ble.n	80166f8 <__hexnan+0xe4>
 80166ea:	4544      	cmp	r4, r8
 80166ec:	d9cf      	bls.n	801668e <__hexnan+0x7a>
 80166ee:	2300      	movs	r3, #0
 80166f0:	f844 3c04 	str.w	r3, [r4, #-4]
 80166f4:	2501      	movs	r5, #1
 80166f6:	3c04      	subs	r4, #4
 80166f8:	6822      	ldr	r2, [r4, #0]
 80166fa:	f000 000f 	and.w	r0, r0, #15
 80166fe:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8016702:	6020      	str	r0, [r4, #0]
 8016704:	e7c3      	b.n	801668e <__hexnan+0x7a>
 8016706:	2508      	movs	r5, #8
 8016708:	e7c1      	b.n	801668e <__hexnan+0x7a>
 801670a:	9b01      	ldr	r3, [sp, #4]
 801670c:	2b00      	cmp	r3, #0
 801670e:	d0df      	beq.n	80166d0 <__hexnan+0xbc>
 8016710:	f04f 32ff 	mov.w	r2, #4294967295
 8016714:	f1c3 0320 	rsb	r3, r3, #32
 8016718:	fa22 f303 	lsr.w	r3, r2, r3
 801671c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8016720:	401a      	ands	r2, r3
 8016722:	f847 2c04 	str.w	r2, [r7, #-4]
 8016726:	e7d3      	b.n	80166d0 <__hexnan+0xbc>
 8016728:	3e04      	subs	r6, #4
 801672a:	e7d1      	b.n	80166d0 <__hexnan+0xbc>
 801672c:	2004      	movs	r0, #4
 801672e:	b007      	add	sp, #28
 8016730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016734 <__locale_ctype_ptr_l>:
 8016734:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8016738:	4770      	bx	lr

0801673a <__localeconv_l>:
 801673a:	30f0      	adds	r0, #240	; 0xf0
 801673c:	4770      	bx	lr

0801673e <__ascii_mbtowc>:
 801673e:	b082      	sub	sp, #8
 8016740:	b901      	cbnz	r1, 8016744 <__ascii_mbtowc+0x6>
 8016742:	a901      	add	r1, sp, #4
 8016744:	b142      	cbz	r2, 8016758 <__ascii_mbtowc+0x1a>
 8016746:	b14b      	cbz	r3, 801675c <__ascii_mbtowc+0x1e>
 8016748:	7813      	ldrb	r3, [r2, #0]
 801674a:	600b      	str	r3, [r1, #0]
 801674c:	7812      	ldrb	r2, [r2, #0]
 801674e:	1c10      	adds	r0, r2, #0
 8016750:	bf18      	it	ne
 8016752:	2001      	movne	r0, #1
 8016754:	b002      	add	sp, #8
 8016756:	4770      	bx	lr
 8016758:	4610      	mov	r0, r2
 801675a:	e7fb      	b.n	8016754 <__ascii_mbtowc+0x16>
 801675c:	f06f 0001 	mvn.w	r0, #1
 8016760:	e7f8      	b.n	8016754 <__ascii_mbtowc+0x16>

08016762 <_Balloc>:
 8016762:	b570      	push	{r4, r5, r6, lr}
 8016764:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8016766:	4604      	mov	r4, r0
 8016768:	460e      	mov	r6, r1
 801676a:	b93d      	cbnz	r5, 801677c <_Balloc+0x1a>
 801676c:	2010      	movs	r0, #16
 801676e:	f000 ff5d 	bl	801762c <malloc>
 8016772:	6260      	str	r0, [r4, #36]	; 0x24
 8016774:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8016778:	6005      	str	r5, [r0, #0]
 801677a:	60c5      	str	r5, [r0, #12]
 801677c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801677e:	68eb      	ldr	r3, [r5, #12]
 8016780:	b183      	cbz	r3, 80167a4 <_Balloc+0x42>
 8016782:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016784:	68db      	ldr	r3, [r3, #12]
 8016786:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801678a:	b9b8      	cbnz	r0, 80167bc <_Balloc+0x5a>
 801678c:	2101      	movs	r1, #1
 801678e:	fa01 f506 	lsl.w	r5, r1, r6
 8016792:	1d6a      	adds	r2, r5, #5
 8016794:	0092      	lsls	r2, r2, #2
 8016796:	4620      	mov	r0, r4
 8016798:	f000 fbe1 	bl	8016f5e <_calloc_r>
 801679c:	b160      	cbz	r0, 80167b8 <_Balloc+0x56>
 801679e:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80167a2:	e00e      	b.n	80167c2 <_Balloc+0x60>
 80167a4:	2221      	movs	r2, #33	; 0x21
 80167a6:	2104      	movs	r1, #4
 80167a8:	4620      	mov	r0, r4
 80167aa:	f000 fbd8 	bl	8016f5e <_calloc_r>
 80167ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80167b0:	60e8      	str	r0, [r5, #12]
 80167b2:	68db      	ldr	r3, [r3, #12]
 80167b4:	2b00      	cmp	r3, #0
 80167b6:	d1e4      	bne.n	8016782 <_Balloc+0x20>
 80167b8:	2000      	movs	r0, #0
 80167ba:	bd70      	pop	{r4, r5, r6, pc}
 80167bc:	6802      	ldr	r2, [r0, #0]
 80167be:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80167c2:	2300      	movs	r3, #0
 80167c4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80167c8:	e7f7      	b.n	80167ba <_Balloc+0x58>

080167ca <_Bfree>:
 80167ca:	b570      	push	{r4, r5, r6, lr}
 80167cc:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80167ce:	4606      	mov	r6, r0
 80167d0:	460d      	mov	r5, r1
 80167d2:	b93c      	cbnz	r4, 80167e4 <_Bfree+0x1a>
 80167d4:	2010      	movs	r0, #16
 80167d6:	f000 ff29 	bl	801762c <malloc>
 80167da:	6270      	str	r0, [r6, #36]	; 0x24
 80167dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80167e0:	6004      	str	r4, [r0, #0]
 80167e2:	60c4      	str	r4, [r0, #12]
 80167e4:	b13d      	cbz	r5, 80167f6 <_Bfree+0x2c>
 80167e6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80167e8:	686a      	ldr	r2, [r5, #4]
 80167ea:	68db      	ldr	r3, [r3, #12]
 80167ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80167f0:	6029      	str	r1, [r5, #0]
 80167f2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80167f6:	bd70      	pop	{r4, r5, r6, pc}

080167f8 <__multadd>:
 80167f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80167fc:	690d      	ldr	r5, [r1, #16]
 80167fe:	461f      	mov	r7, r3
 8016800:	4606      	mov	r6, r0
 8016802:	460c      	mov	r4, r1
 8016804:	f101 0c14 	add.w	ip, r1, #20
 8016808:	2300      	movs	r3, #0
 801680a:	f8dc 0000 	ldr.w	r0, [ip]
 801680e:	b281      	uxth	r1, r0
 8016810:	fb02 7101 	mla	r1, r2, r1, r7
 8016814:	0c0f      	lsrs	r7, r1, #16
 8016816:	0c00      	lsrs	r0, r0, #16
 8016818:	fb02 7000 	mla	r0, r2, r0, r7
 801681c:	b289      	uxth	r1, r1
 801681e:	3301      	adds	r3, #1
 8016820:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8016824:	429d      	cmp	r5, r3
 8016826:	ea4f 4710 	mov.w	r7, r0, lsr #16
 801682a:	f84c 1b04 	str.w	r1, [ip], #4
 801682e:	dcec      	bgt.n	801680a <__multadd+0x12>
 8016830:	b1d7      	cbz	r7, 8016868 <__multadd+0x70>
 8016832:	68a3      	ldr	r3, [r4, #8]
 8016834:	42ab      	cmp	r3, r5
 8016836:	dc12      	bgt.n	801685e <__multadd+0x66>
 8016838:	6861      	ldr	r1, [r4, #4]
 801683a:	4630      	mov	r0, r6
 801683c:	3101      	adds	r1, #1
 801683e:	f7ff ff90 	bl	8016762 <_Balloc>
 8016842:	6922      	ldr	r2, [r4, #16]
 8016844:	3202      	adds	r2, #2
 8016846:	f104 010c 	add.w	r1, r4, #12
 801684a:	4680      	mov	r8, r0
 801684c:	0092      	lsls	r2, r2, #2
 801684e:	300c      	adds	r0, #12
 8016850:	f7fe fc8a 	bl	8015168 <memcpy>
 8016854:	4621      	mov	r1, r4
 8016856:	4630      	mov	r0, r6
 8016858:	f7ff ffb7 	bl	80167ca <_Bfree>
 801685c:	4644      	mov	r4, r8
 801685e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8016862:	3501      	adds	r5, #1
 8016864:	615f      	str	r7, [r3, #20]
 8016866:	6125      	str	r5, [r4, #16]
 8016868:	4620      	mov	r0, r4
 801686a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801686e <__s2b>:
 801686e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016872:	460c      	mov	r4, r1
 8016874:	4615      	mov	r5, r2
 8016876:	461f      	mov	r7, r3
 8016878:	2209      	movs	r2, #9
 801687a:	3308      	adds	r3, #8
 801687c:	4606      	mov	r6, r0
 801687e:	fb93 f3f2 	sdiv	r3, r3, r2
 8016882:	2100      	movs	r1, #0
 8016884:	2201      	movs	r2, #1
 8016886:	429a      	cmp	r2, r3
 8016888:	db20      	blt.n	80168cc <__s2b+0x5e>
 801688a:	4630      	mov	r0, r6
 801688c:	f7ff ff69 	bl	8016762 <_Balloc>
 8016890:	9b08      	ldr	r3, [sp, #32]
 8016892:	6143      	str	r3, [r0, #20]
 8016894:	2d09      	cmp	r5, #9
 8016896:	f04f 0301 	mov.w	r3, #1
 801689a:	6103      	str	r3, [r0, #16]
 801689c:	dd19      	ble.n	80168d2 <__s2b+0x64>
 801689e:	f104 0809 	add.w	r8, r4, #9
 80168a2:	46c1      	mov	r9, r8
 80168a4:	442c      	add	r4, r5
 80168a6:	f819 3b01 	ldrb.w	r3, [r9], #1
 80168aa:	4601      	mov	r1, r0
 80168ac:	3b30      	subs	r3, #48	; 0x30
 80168ae:	220a      	movs	r2, #10
 80168b0:	4630      	mov	r0, r6
 80168b2:	f7ff ffa1 	bl	80167f8 <__multadd>
 80168b6:	45a1      	cmp	r9, r4
 80168b8:	d1f5      	bne.n	80168a6 <__s2b+0x38>
 80168ba:	eb08 0405 	add.w	r4, r8, r5
 80168be:	3c08      	subs	r4, #8
 80168c0:	1b2d      	subs	r5, r5, r4
 80168c2:	1963      	adds	r3, r4, r5
 80168c4:	42bb      	cmp	r3, r7
 80168c6:	db07      	blt.n	80168d8 <__s2b+0x6a>
 80168c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80168cc:	0052      	lsls	r2, r2, #1
 80168ce:	3101      	adds	r1, #1
 80168d0:	e7d9      	b.n	8016886 <__s2b+0x18>
 80168d2:	340a      	adds	r4, #10
 80168d4:	2509      	movs	r5, #9
 80168d6:	e7f3      	b.n	80168c0 <__s2b+0x52>
 80168d8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80168dc:	4601      	mov	r1, r0
 80168de:	3b30      	subs	r3, #48	; 0x30
 80168e0:	220a      	movs	r2, #10
 80168e2:	4630      	mov	r0, r6
 80168e4:	f7ff ff88 	bl	80167f8 <__multadd>
 80168e8:	e7eb      	b.n	80168c2 <__s2b+0x54>

080168ea <__hi0bits>:
 80168ea:	0c02      	lsrs	r2, r0, #16
 80168ec:	0412      	lsls	r2, r2, #16
 80168ee:	4603      	mov	r3, r0
 80168f0:	b9b2      	cbnz	r2, 8016920 <__hi0bits+0x36>
 80168f2:	0403      	lsls	r3, r0, #16
 80168f4:	2010      	movs	r0, #16
 80168f6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80168fa:	bf04      	itt	eq
 80168fc:	021b      	lsleq	r3, r3, #8
 80168fe:	3008      	addeq	r0, #8
 8016900:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8016904:	bf04      	itt	eq
 8016906:	011b      	lsleq	r3, r3, #4
 8016908:	3004      	addeq	r0, #4
 801690a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801690e:	bf04      	itt	eq
 8016910:	009b      	lsleq	r3, r3, #2
 8016912:	3002      	addeq	r0, #2
 8016914:	2b00      	cmp	r3, #0
 8016916:	db06      	blt.n	8016926 <__hi0bits+0x3c>
 8016918:	005b      	lsls	r3, r3, #1
 801691a:	d503      	bpl.n	8016924 <__hi0bits+0x3a>
 801691c:	3001      	adds	r0, #1
 801691e:	4770      	bx	lr
 8016920:	2000      	movs	r0, #0
 8016922:	e7e8      	b.n	80168f6 <__hi0bits+0xc>
 8016924:	2020      	movs	r0, #32
 8016926:	4770      	bx	lr

08016928 <__lo0bits>:
 8016928:	6803      	ldr	r3, [r0, #0]
 801692a:	f013 0207 	ands.w	r2, r3, #7
 801692e:	4601      	mov	r1, r0
 8016930:	d00b      	beq.n	801694a <__lo0bits+0x22>
 8016932:	07da      	lsls	r2, r3, #31
 8016934:	d423      	bmi.n	801697e <__lo0bits+0x56>
 8016936:	0798      	lsls	r0, r3, #30
 8016938:	bf49      	itett	mi
 801693a:	085b      	lsrmi	r3, r3, #1
 801693c:	089b      	lsrpl	r3, r3, #2
 801693e:	2001      	movmi	r0, #1
 8016940:	600b      	strmi	r3, [r1, #0]
 8016942:	bf5c      	itt	pl
 8016944:	600b      	strpl	r3, [r1, #0]
 8016946:	2002      	movpl	r0, #2
 8016948:	4770      	bx	lr
 801694a:	b298      	uxth	r0, r3
 801694c:	b9a8      	cbnz	r0, 801697a <__lo0bits+0x52>
 801694e:	0c1b      	lsrs	r3, r3, #16
 8016950:	2010      	movs	r0, #16
 8016952:	f013 0fff 	tst.w	r3, #255	; 0xff
 8016956:	bf04      	itt	eq
 8016958:	0a1b      	lsreq	r3, r3, #8
 801695a:	3008      	addeq	r0, #8
 801695c:	071a      	lsls	r2, r3, #28
 801695e:	bf04      	itt	eq
 8016960:	091b      	lsreq	r3, r3, #4
 8016962:	3004      	addeq	r0, #4
 8016964:	079a      	lsls	r2, r3, #30
 8016966:	bf04      	itt	eq
 8016968:	089b      	lsreq	r3, r3, #2
 801696a:	3002      	addeq	r0, #2
 801696c:	07da      	lsls	r2, r3, #31
 801696e:	d402      	bmi.n	8016976 <__lo0bits+0x4e>
 8016970:	085b      	lsrs	r3, r3, #1
 8016972:	d006      	beq.n	8016982 <__lo0bits+0x5a>
 8016974:	3001      	adds	r0, #1
 8016976:	600b      	str	r3, [r1, #0]
 8016978:	4770      	bx	lr
 801697a:	4610      	mov	r0, r2
 801697c:	e7e9      	b.n	8016952 <__lo0bits+0x2a>
 801697e:	2000      	movs	r0, #0
 8016980:	4770      	bx	lr
 8016982:	2020      	movs	r0, #32
 8016984:	4770      	bx	lr

08016986 <__i2b>:
 8016986:	b510      	push	{r4, lr}
 8016988:	460c      	mov	r4, r1
 801698a:	2101      	movs	r1, #1
 801698c:	f7ff fee9 	bl	8016762 <_Balloc>
 8016990:	2201      	movs	r2, #1
 8016992:	6144      	str	r4, [r0, #20]
 8016994:	6102      	str	r2, [r0, #16]
 8016996:	bd10      	pop	{r4, pc}

08016998 <__multiply>:
 8016998:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801699c:	4614      	mov	r4, r2
 801699e:	690a      	ldr	r2, [r1, #16]
 80169a0:	6923      	ldr	r3, [r4, #16]
 80169a2:	429a      	cmp	r2, r3
 80169a4:	bfb8      	it	lt
 80169a6:	460b      	movlt	r3, r1
 80169a8:	4688      	mov	r8, r1
 80169aa:	bfbc      	itt	lt
 80169ac:	46a0      	movlt	r8, r4
 80169ae:	461c      	movlt	r4, r3
 80169b0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80169b4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80169b8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80169bc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80169c0:	eb07 0609 	add.w	r6, r7, r9
 80169c4:	42b3      	cmp	r3, r6
 80169c6:	bfb8      	it	lt
 80169c8:	3101      	addlt	r1, #1
 80169ca:	f7ff feca 	bl	8016762 <_Balloc>
 80169ce:	f100 0514 	add.w	r5, r0, #20
 80169d2:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80169d6:	462b      	mov	r3, r5
 80169d8:	2200      	movs	r2, #0
 80169da:	4573      	cmp	r3, lr
 80169dc:	d316      	bcc.n	8016a0c <__multiply+0x74>
 80169de:	f104 0214 	add.w	r2, r4, #20
 80169e2:	f108 0114 	add.w	r1, r8, #20
 80169e6:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80169ea:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80169ee:	9300      	str	r3, [sp, #0]
 80169f0:	9b00      	ldr	r3, [sp, #0]
 80169f2:	9201      	str	r2, [sp, #4]
 80169f4:	4293      	cmp	r3, r2
 80169f6:	d80c      	bhi.n	8016a12 <__multiply+0x7a>
 80169f8:	2e00      	cmp	r6, #0
 80169fa:	dd03      	ble.n	8016a04 <__multiply+0x6c>
 80169fc:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8016a00:	2b00      	cmp	r3, #0
 8016a02:	d05d      	beq.n	8016ac0 <__multiply+0x128>
 8016a04:	6106      	str	r6, [r0, #16]
 8016a06:	b003      	add	sp, #12
 8016a08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016a0c:	f843 2b04 	str.w	r2, [r3], #4
 8016a10:	e7e3      	b.n	80169da <__multiply+0x42>
 8016a12:	f8b2 b000 	ldrh.w	fp, [r2]
 8016a16:	f1bb 0f00 	cmp.w	fp, #0
 8016a1a:	d023      	beq.n	8016a64 <__multiply+0xcc>
 8016a1c:	4689      	mov	r9, r1
 8016a1e:	46ac      	mov	ip, r5
 8016a20:	f04f 0800 	mov.w	r8, #0
 8016a24:	f859 4b04 	ldr.w	r4, [r9], #4
 8016a28:	f8dc a000 	ldr.w	sl, [ip]
 8016a2c:	b2a3      	uxth	r3, r4
 8016a2e:	fa1f fa8a 	uxth.w	sl, sl
 8016a32:	fb0b a303 	mla	r3, fp, r3, sl
 8016a36:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8016a3a:	f8dc 4000 	ldr.w	r4, [ip]
 8016a3e:	4443      	add	r3, r8
 8016a40:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8016a44:	fb0b 840a 	mla	r4, fp, sl, r8
 8016a48:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8016a4c:	46e2      	mov	sl, ip
 8016a4e:	b29b      	uxth	r3, r3
 8016a50:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8016a54:	454f      	cmp	r7, r9
 8016a56:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8016a5a:	f84a 3b04 	str.w	r3, [sl], #4
 8016a5e:	d82b      	bhi.n	8016ab8 <__multiply+0x120>
 8016a60:	f8cc 8004 	str.w	r8, [ip, #4]
 8016a64:	9b01      	ldr	r3, [sp, #4]
 8016a66:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8016a6a:	3204      	adds	r2, #4
 8016a6c:	f1ba 0f00 	cmp.w	sl, #0
 8016a70:	d020      	beq.n	8016ab4 <__multiply+0x11c>
 8016a72:	682b      	ldr	r3, [r5, #0]
 8016a74:	4689      	mov	r9, r1
 8016a76:	46a8      	mov	r8, r5
 8016a78:	f04f 0b00 	mov.w	fp, #0
 8016a7c:	f8b9 c000 	ldrh.w	ip, [r9]
 8016a80:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8016a84:	fb0a 440c 	mla	r4, sl, ip, r4
 8016a88:	445c      	add	r4, fp
 8016a8a:	46c4      	mov	ip, r8
 8016a8c:	b29b      	uxth	r3, r3
 8016a8e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8016a92:	f84c 3b04 	str.w	r3, [ip], #4
 8016a96:	f859 3b04 	ldr.w	r3, [r9], #4
 8016a9a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8016a9e:	0c1b      	lsrs	r3, r3, #16
 8016aa0:	fb0a b303 	mla	r3, sl, r3, fp
 8016aa4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8016aa8:	454f      	cmp	r7, r9
 8016aaa:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8016aae:	d805      	bhi.n	8016abc <__multiply+0x124>
 8016ab0:	f8c8 3004 	str.w	r3, [r8, #4]
 8016ab4:	3504      	adds	r5, #4
 8016ab6:	e79b      	b.n	80169f0 <__multiply+0x58>
 8016ab8:	46d4      	mov	ip, sl
 8016aba:	e7b3      	b.n	8016a24 <__multiply+0x8c>
 8016abc:	46e0      	mov	r8, ip
 8016abe:	e7dd      	b.n	8016a7c <__multiply+0xe4>
 8016ac0:	3e01      	subs	r6, #1
 8016ac2:	e799      	b.n	80169f8 <__multiply+0x60>

08016ac4 <__pow5mult>:
 8016ac4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016ac8:	4615      	mov	r5, r2
 8016aca:	f012 0203 	ands.w	r2, r2, #3
 8016ace:	4606      	mov	r6, r0
 8016ad0:	460f      	mov	r7, r1
 8016ad2:	d007      	beq.n	8016ae4 <__pow5mult+0x20>
 8016ad4:	3a01      	subs	r2, #1
 8016ad6:	4c21      	ldr	r4, [pc, #132]	; (8016b5c <__pow5mult+0x98>)
 8016ad8:	2300      	movs	r3, #0
 8016ada:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8016ade:	f7ff fe8b 	bl	80167f8 <__multadd>
 8016ae2:	4607      	mov	r7, r0
 8016ae4:	10ad      	asrs	r5, r5, #2
 8016ae6:	d035      	beq.n	8016b54 <__pow5mult+0x90>
 8016ae8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8016aea:	b93c      	cbnz	r4, 8016afc <__pow5mult+0x38>
 8016aec:	2010      	movs	r0, #16
 8016aee:	f000 fd9d 	bl	801762c <malloc>
 8016af2:	6270      	str	r0, [r6, #36]	; 0x24
 8016af4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8016af8:	6004      	str	r4, [r0, #0]
 8016afa:	60c4      	str	r4, [r0, #12]
 8016afc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8016b00:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8016b04:	b94c      	cbnz	r4, 8016b1a <__pow5mult+0x56>
 8016b06:	f240 2171 	movw	r1, #625	; 0x271
 8016b0a:	4630      	mov	r0, r6
 8016b0c:	f7ff ff3b 	bl	8016986 <__i2b>
 8016b10:	2300      	movs	r3, #0
 8016b12:	f8c8 0008 	str.w	r0, [r8, #8]
 8016b16:	4604      	mov	r4, r0
 8016b18:	6003      	str	r3, [r0, #0]
 8016b1a:	f04f 0800 	mov.w	r8, #0
 8016b1e:	07eb      	lsls	r3, r5, #31
 8016b20:	d50a      	bpl.n	8016b38 <__pow5mult+0x74>
 8016b22:	4639      	mov	r1, r7
 8016b24:	4622      	mov	r2, r4
 8016b26:	4630      	mov	r0, r6
 8016b28:	f7ff ff36 	bl	8016998 <__multiply>
 8016b2c:	4639      	mov	r1, r7
 8016b2e:	4681      	mov	r9, r0
 8016b30:	4630      	mov	r0, r6
 8016b32:	f7ff fe4a 	bl	80167ca <_Bfree>
 8016b36:	464f      	mov	r7, r9
 8016b38:	106d      	asrs	r5, r5, #1
 8016b3a:	d00b      	beq.n	8016b54 <__pow5mult+0x90>
 8016b3c:	6820      	ldr	r0, [r4, #0]
 8016b3e:	b938      	cbnz	r0, 8016b50 <__pow5mult+0x8c>
 8016b40:	4622      	mov	r2, r4
 8016b42:	4621      	mov	r1, r4
 8016b44:	4630      	mov	r0, r6
 8016b46:	f7ff ff27 	bl	8016998 <__multiply>
 8016b4a:	6020      	str	r0, [r4, #0]
 8016b4c:	f8c0 8000 	str.w	r8, [r0]
 8016b50:	4604      	mov	r4, r0
 8016b52:	e7e4      	b.n	8016b1e <__pow5mult+0x5a>
 8016b54:	4638      	mov	r0, r7
 8016b56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016b5a:	bf00      	nop
 8016b5c:	0802b4c8 	.word	0x0802b4c8

08016b60 <__lshift>:
 8016b60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016b64:	460c      	mov	r4, r1
 8016b66:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8016b6a:	6923      	ldr	r3, [r4, #16]
 8016b6c:	6849      	ldr	r1, [r1, #4]
 8016b6e:	eb0a 0903 	add.w	r9, sl, r3
 8016b72:	68a3      	ldr	r3, [r4, #8]
 8016b74:	4607      	mov	r7, r0
 8016b76:	4616      	mov	r6, r2
 8016b78:	f109 0501 	add.w	r5, r9, #1
 8016b7c:	42ab      	cmp	r3, r5
 8016b7e:	db32      	blt.n	8016be6 <__lshift+0x86>
 8016b80:	4638      	mov	r0, r7
 8016b82:	f7ff fdee 	bl	8016762 <_Balloc>
 8016b86:	2300      	movs	r3, #0
 8016b88:	4680      	mov	r8, r0
 8016b8a:	f100 0114 	add.w	r1, r0, #20
 8016b8e:	461a      	mov	r2, r3
 8016b90:	4553      	cmp	r3, sl
 8016b92:	db2b      	blt.n	8016bec <__lshift+0x8c>
 8016b94:	6920      	ldr	r0, [r4, #16]
 8016b96:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8016b9a:	f104 0314 	add.w	r3, r4, #20
 8016b9e:	f016 021f 	ands.w	r2, r6, #31
 8016ba2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8016ba6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8016baa:	d025      	beq.n	8016bf8 <__lshift+0x98>
 8016bac:	f1c2 0e20 	rsb	lr, r2, #32
 8016bb0:	2000      	movs	r0, #0
 8016bb2:	681e      	ldr	r6, [r3, #0]
 8016bb4:	468a      	mov	sl, r1
 8016bb6:	4096      	lsls	r6, r2
 8016bb8:	4330      	orrs	r0, r6
 8016bba:	f84a 0b04 	str.w	r0, [sl], #4
 8016bbe:	f853 0b04 	ldr.w	r0, [r3], #4
 8016bc2:	459c      	cmp	ip, r3
 8016bc4:	fa20 f00e 	lsr.w	r0, r0, lr
 8016bc8:	d814      	bhi.n	8016bf4 <__lshift+0x94>
 8016bca:	6048      	str	r0, [r1, #4]
 8016bcc:	b108      	cbz	r0, 8016bd2 <__lshift+0x72>
 8016bce:	f109 0502 	add.w	r5, r9, #2
 8016bd2:	3d01      	subs	r5, #1
 8016bd4:	4638      	mov	r0, r7
 8016bd6:	f8c8 5010 	str.w	r5, [r8, #16]
 8016bda:	4621      	mov	r1, r4
 8016bdc:	f7ff fdf5 	bl	80167ca <_Bfree>
 8016be0:	4640      	mov	r0, r8
 8016be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016be6:	3101      	adds	r1, #1
 8016be8:	005b      	lsls	r3, r3, #1
 8016bea:	e7c7      	b.n	8016b7c <__lshift+0x1c>
 8016bec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8016bf0:	3301      	adds	r3, #1
 8016bf2:	e7cd      	b.n	8016b90 <__lshift+0x30>
 8016bf4:	4651      	mov	r1, sl
 8016bf6:	e7dc      	b.n	8016bb2 <__lshift+0x52>
 8016bf8:	3904      	subs	r1, #4
 8016bfa:	f853 2b04 	ldr.w	r2, [r3], #4
 8016bfe:	f841 2f04 	str.w	r2, [r1, #4]!
 8016c02:	459c      	cmp	ip, r3
 8016c04:	d8f9      	bhi.n	8016bfa <__lshift+0x9a>
 8016c06:	e7e4      	b.n	8016bd2 <__lshift+0x72>

08016c08 <__mcmp>:
 8016c08:	6903      	ldr	r3, [r0, #16]
 8016c0a:	690a      	ldr	r2, [r1, #16]
 8016c0c:	1a9b      	subs	r3, r3, r2
 8016c0e:	b530      	push	{r4, r5, lr}
 8016c10:	d10c      	bne.n	8016c2c <__mcmp+0x24>
 8016c12:	0092      	lsls	r2, r2, #2
 8016c14:	3014      	adds	r0, #20
 8016c16:	3114      	adds	r1, #20
 8016c18:	1884      	adds	r4, r0, r2
 8016c1a:	4411      	add	r1, r2
 8016c1c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8016c20:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8016c24:	4295      	cmp	r5, r2
 8016c26:	d003      	beq.n	8016c30 <__mcmp+0x28>
 8016c28:	d305      	bcc.n	8016c36 <__mcmp+0x2e>
 8016c2a:	2301      	movs	r3, #1
 8016c2c:	4618      	mov	r0, r3
 8016c2e:	bd30      	pop	{r4, r5, pc}
 8016c30:	42a0      	cmp	r0, r4
 8016c32:	d3f3      	bcc.n	8016c1c <__mcmp+0x14>
 8016c34:	e7fa      	b.n	8016c2c <__mcmp+0x24>
 8016c36:	f04f 33ff 	mov.w	r3, #4294967295
 8016c3a:	e7f7      	b.n	8016c2c <__mcmp+0x24>

08016c3c <__mdiff>:
 8016c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016c40:	460d      	mov	r5, r1
 8016c42:	4607      	mov	r7, r0
 8016c44:	4611      	mov	r1, r2
 8016c46:	4628      	mov	r0, r5
 8016c48:	4614      	mov	r4, r2
 8016c4a:	f7ff ffdd 	bl	8016c08 <__mcmp>
 8016c4e:	1e06      	subs	r6, r0, #0
 8016c50:	d108      	bne.n	8016c64 <__mdiff+0x28>
 8016c52:	4631      	mov	r1, r6
 8016c54:	4638      	mov	r0, r7
 8016c56:	f7ff fd84 	bl	8016762 <_Balloc>
 8016c5a:	2301      	movs	r3, #1
 8016c5c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8016c60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016c64:	bfa4      	itt	ge
 8016c66:	4623      	movge	r3, r4
 8016c68:	462c      	movge	r4, r5
 8016c6a:	4638      	mov	r0, r7
 8016c6c:	6861      	ldr	r1, [r4, #4]
 8016c6e:	bfa6      	itte	ge
 8016c70:	461d      	movge	r5, r3
 8016c72:	2600      	movge	r6, #0
 8016c74:	2601      	movlt	r6, #1
 8016c76:	f7ff fd74 	bl	8016762 <_Balloc>
 8016c7a:	692b      	ldr	r3, [r5, #16]
 8016c7c:	60c6      	str	r6, [r0, #12]
 8016c7e:	6926      	ldr	r6, [r4, #16]
 8016c80:	f105 0914 	add.w	r9, r5, #20
 8016c84:	f104 0214 	add.w	r2, r4, #20
 8016c88:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8016c8c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8016c90:	f100 0514 	add.w	r5, r0, #20
 8016c94:	f04f 0e00 	mov.w	lr, #0
 8016c98:	f852 ab04 	ldr.w	sl, [r2], #4
 8016c9c:	f859 4b04 	ldr.w	r4, [r9], #4
 8016ca0:	fa1e f18a 	uxtah	r1, lr, sl
 8016ca4:	b2a3      	uxth	r3, r4
 8016ca6:	1ac9      	subs	r1, r1, r3
 8016ca8:	0c23      	lsrs	r3, r4, #16
 8016caa:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8016cae:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8016cb2:	b289      	uxth	r1, r1
 8016cb4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8016cb8:	45c8      	cmp	r8, r9
 8016cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8016cbe:	4694      	mov	ip, r2
 8016cc0:	f845 3b04 	str.w	r3, [r5], #4
 8016cc4:	d8e8      	bhi.n	8016c98 <__mdiff+0x5c>
 8016cc6:	45bc      	cmp	ip, r7
 8016cc8:	d304      	bcc.n	8016cd4 <__mdiff+0x98>
 8016cca:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8016cce:	b183      	cbz	r3, 8016cf2 <__mdiff+0xb6>
 8016cd0:	6106      	str	r6, [r0, #16]
 8016cd2:	e7c5      	b.n	8016c60 <__mdiff+0x24>
 8016cd4:	f85c 1b04 	ldr.w	r1, [ip], #4
 8016cd8:	fa1e f381 	uxtah	r3, lr, r1
 8016cdc:	141a      	asrs	r2, r3, #16
 8016cde:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8016ce2:	b29b      	uxth	r3, r3
 8016ce4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016ce8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8016cec:	f845 3b04 	str.w	r3, [r5], #4
 8016cf0:	e7e9      	b.n	8016cc6 <__mdiff+0x8a>
 8016cf2:	3e01      	subs	r6, #1
 8016cf4:	e7e9      	b.n	8016cca <__mdiff+0x8e>
	...

08016cf8 <__ulp>:
 8016cf8:	4b12      	ldr	r3, [pc, #72]	; (8016d44 <__ulp+0x4c>)
 8016cfa:	ee10 2a90 	vmov	r2, s1
 8016cfe:	401a      	ands	r2, r3
 8016d00:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8016d04:	2b00      	cmp	r3, #0
 8016d06:	dd04      	ble.n	8016d12 <__ulp+0x1a>
 8016d08:	2000      	movs	r0, #0
 8016d0a:	4619      	mov	r1, r3
 8016d0c:	ec41 0b10 	vmov	d0, r0, r1
 8016d10:	4770      	bx	lr
 8016d12:	425b      	negs	r3, r3
 8016d14:	151b      	asrs	r3, r3, #20
 8016d16:	2b13      	cmp	r3, #19
 8016d18:	f04f 0000 	mov.w	r0, #0
 8016d1c:	f04f 0100 	mov.w	r1, #0
 8016d20:	dc04      	bgt.n	8016d2c <__ulp+0x34>
 8016d22:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8016d26:	fa42 f103 	asr.w	r1, r2, r3
 8016d2a:	e7ef      	b.n	8016d0c <__ulp+0x14>
 8016d2c:	3b14      	subs	r3, #20
 8016d2e:	2b1e      	cmp	r3, #30
 8016d30:	f04f 0201 	mov.w	r2, #1
 8016d34:	bfda      	itte	le
 8016d36:	f1c3 031f 	rsble	r3, r3, #31
 8016d3a:	fa02 f303 	lslle.w	r3, r2, r3
 8016d3e:	4613      	movgt	r3, r2
 8016d40:	4618      	mov	r0, r3
 8016d42:	e7e3      	b.n	8016d0c <__ulp+0x14>
 8016d44:	7ff00000 	.word	0x7ff00000

08016d48 <__b2d>:
 8016d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016d4a:	6905      	ldr	r5, [r0, #16]
 8016d4c:	f100 0714 	add.w	r7, r0, #20
 8016d50:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8016d54:	1f2e      	subs	r6, r5, #4
 8016d56:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8016d5a:	4620      	mov	r0, r4
 8016d5c:	f7ff fdc5 	bl	80168ea <__hi0bits>
 8016d60:	f1c0 0320 	rsb	r3, r0, #32
 8016d64:	280a      	cmp	r0, #10
 8016d66:	600b      	str	r3, [r1, #0]
 8016d68:	f8df c074 	ldr.w	ip, [pc, #116]	; 8016de0 <__b2d+0x98>
 8016d6c:	dc14      	bgt.n	8016d98 <__b2d+0x50>
 8016d6e:	f1c0 0e0b 	rsb	lr, r0, #11
 8016d72:	fa24 f10e 	lsr.w	r1, r4, lr
 8016d76:	42b7      	cmp	r7, r6
 8016d78:	ea41 030c 	orr.w	r3, r1, ip
 8016d7c:	bf34      	ite	cc
 8016d7e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8016d82:	2100      	movcs	r1, #0
 8016d84:	3015      	adds	r0, #21
 8016d86:	fa04 f000 	lsl.w	r0, r4, r0
 8016d8a:	fa21 f10e 	lsr.w	r1, r1, lr
 8016d8e:	ea40 0201 	orr.w	r2, r0, r1
 8016d92:	ec43 2b10 	vmov	d0, r2, r3
 8016d96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016d98:	42b7      	cmp	r7, r6
 8016d9a:	bf3a      	itte	cc
 8016d9c:	f1a5 0608 	subcc.w	r6, r5, #8
 8016da0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8016da4:	2100      	movcs	r1, #0
 8016da6:	380b      	subs	r0, #11
 8016da8:	d015      	beq.n	8016dd6 <__b2d+0x8e>
 8016daa:	4084      	lsls	r4, r0
 8016dac:	f1c0 0520 	rsb	r5, r0, #32
 8016db0:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8016db4:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8016db8:	42be      	cmp	r6, r7
 8016dba:	fa21 fc05 	lsr.w	ip, r1, r5
 8016dbe:	ea44 030c 	orr.w	r3, r4, ip
 8016dc2:	bf8c      	ite	hi
 8016dc4:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8016dc8:	2400      	movls	r4, #0
 8016dca:	fa01 f000 	lsl.w	r0, r1, r0
 8016dce:	40ec      	lsrs	r4, r5
 8016dd0:	ea40 0204 	orr.w	r2, r0, r4
 8016dd4:	e7dd      	b.n	8016d92 <__b2d+0x4a>
 8016dd6:	ea44 030c 	orr.w	r3, r4, ip
 8016dda:	460a      	mov	r2, r1
 8016ddc:	e7d9      	b.n	8016d92 <__b2d+0x4a>
 8016dde:	bf00      	nop
 8016de0:	3ff00000 	.word	0x3ff00000

08016de4 <__d2b>:
 8016de4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016de8:	460e      	mov	r6, r1
 8016dea:	2101      	movs	r1, #1
 8016dec:	ec59 8b10 	vmov	r8, r9, d0
 8016df0:	4615      	mov	r5, r2
 8016df2:	f7ff fcb6 	bl	8016762 <_Balloc>
 8016df6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8016dfa:	4607      	mov	r7, r0
 8016dfc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016e00:	bb34      	cbnz	r4, 8016e50 <__d2b+0x6c>
 8016e02:	9301      	str	r3, [sp, #4]
 8016e04:	f1b8 0300 	subs.w	r3, r8, #0
 8016e08:	d027      	beq.n	8016e5a <__d2b+0x76>
 8016e0a:	a802      	add	r0, sp, #8
 8016e0c:	f840 3d08 	str.w	r3, [r0, #-8]!
 8016e10:	f7ff fd8a 	bl	8016928 <__lo0bits>
 8016e14:	9900      	ldr	r1, [sp, #0]
 8016e16:	b1f0      	cbz	r0, 8016e56 <__d2b+0x72>
 8016e18:	9a01      	ldr	r2, [sp, #4]
 8016e1a:	f1c0 0320 	rsb	r3, r0, #32
 8016e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8016e22:	430b      	orrs	r3, r1
 8016e24:	40c2      	lsrs	r2, r0
 8016e26:	617b      	str	r3, [r7, #20]
 8016e28:	9201      	str	r2, [sp, #4]
 8016e2a:	9b01      	ldr	r3, [sp, #4]
 8016e2c:	61bb      	str	r3, [r7, #24]
 8016e2e:	2b00      	cmp	r3, #0
 8016e30:	bf14      	ite	ne
 8016e32:	2102      	movne	r1, #2
 8016e34:	2101      	moveq	r1, #1
 8016e36:	6139      	str	r1, [r7, #16]
 8016e38:	b1c4      	cbz	r4, 8016e6c <__d2b+0x88>
 8016e3a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8016e3e:	4404      	add	r4, r0
 8016e40:	6034      	str	r4, [r6, #0]
 8016e42:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8016e46:	6028      	str	r0, [r5, #0]
 8016e48:	4638      	mov	r0, r7
 8016e4a:	b003      	add	sp, #12
 8016e4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016e50:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8016e54:	e7d5      	b.n	8016e02 <__d2b+0x1e>
 8016e56:	6179      	str	r1, [r7, #20]
 8016e58:	e7e7      	b.n	8016e2a <__d2b+0x46>
 8016e5a:	a801      	add	r0, sp, #4
 8016e5c:	f7ff fd64 	bl	8016928 <__lo0bits>
 8016e60:	9b01      	ldr	r3, [sp, #4]
 8016e62:	617b      	str	r3, [r7, #20]
 8016e64:	2101      	movs	r1, #1
 8016e66:	6139      	str	r1, [r7, #16]
 8016e68:	3020      	adds	r0, #32
 8016e6a:	e7e5      	b.n	8016e38 <__d2b+0x54>
 8016e6c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8016e70:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8016e74:	6030      	str	r0, [r6, #0]
 8016e76:	6918      	ldr	r0, [r3, #16]
 8016e78:	f7ff fd37 	bl	80168ea <__hi0bits>
 8016e7c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8016e80:	e7e1      	b.n	8016e46 <__d2b+0x62>

08016e82 <__ratio>:
 8016e82:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e86:	4688      	mov	r8, r1
 8016e88:	4669      	mov	r1, sp
 8016e8a:	4681      	mov	r9, r0
 8016e8c:	f7ff ff5c 	bl	8016d48 <__b2d>
 8016e90:	a901      	add	r1, sp, #4
 8016e92:	4640      	mov	r0, r8
 8016e94:	ec57 6b10 	vmov	r6, r7, d0
 8016e98:	f7ff ff56 	bl	8016d48 <__b2d>
 8016e9c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016ea0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8016ea4:	eba3 0c02 	sub.w	ip, r3, r2
 8016ea8:	e9dd 3200 	ldrd	r3, r2, [sp]
 8016eac:	1a9b      	subs	r3, r3, r2
 8016eae:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8016eb2:	ec5b ab10 	vmov	sl, fp, d0
 8016eb6:	2b00      	cmp	r3, #0
 8016eb8:	bfce      	itee	gt
 8016eba:	463a      	movgt	r2, r7
 8016ebc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8016ec0:	465a      	movle	r2, fp
 8016ec2:	4659      	mov	r1, fp
 8016ec4:	463d      	mov	r5, r7
 8016ec6:	bfd4      	ite	le
 8016ec8:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8016ecc:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8016ed0:	4630      	mov	r0, r6
 8016ed2:	ee10 2a10 	vmov	r2, s0
 8016ed6:	460b      	mov	r3, r1
 8016ed8:	4629      	mov	r1, r5
 8016eda:	f7e9 fcc7 	bl	800086c <__aeabi_ddiv>
 8016ede:	ec41 0b10 	vmov	d0, r0, r1
 8016ee2:	b003      	add	sp, #12
 8016ee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016ee8 <__copybits>:
 8016ee8:	3901      	subs	r1, #1
 8016eea:	b510      	push	{r4, lr}
 8016eec:	1149      	asrs	r1, r1, #5
 8016eee:	6914      	ldr	r4, [r2, #16]
 8016ef0:	3101      	adds	r1, #1
 8016ef2:	f102 0314 	add.w	r3, r2, #20
 8016ef6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8016efa:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8016efe:	42a3      	cmp	r3, r4
 8016f00:	4602      	mov	r2, r0
 8016f02:	d303      	bcc.n	8016f0c <__copybits+0x24>
 8016f04:	2300      	movs	r3, #0
 8016f06:	428a      	cmp	r2, r1
 8016f08:	d305      	bcc.n	8016f16 <__copybits+0x2e>
 8016f0a:	bd10      	pop	{r4, pc}
 8016f0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8016f10:	f840 2b04 	str.w	r2, [r0], #4
 8016f14:	e7f3      	b.n	8016efe <__copybits+0x16>
 8016f16:	f842 3b04 	str.w	r3, [r2], #4
 8016f1a:	e7f4      	b.n	8016f06 <__copybits+0x1e>

08016f1c <__any_on>:
 8016f1c:	f100 0214 	add.w	r2, r0, #20
 8016f20:	6900      	ldr	r0, [r0, #16]
 8016f22:	114b      	asrs	r3, r1, #5
 8016f24:	4298      	cmp	r0, r3
 8016f26:	b510      	push	{r4, lr}
 8016f28:	db11      	blt.n	8016f4e <__any_on+0x32>
 8016f2a:	dd0a      	ble.n	8016f42 <__any_on+0x26>
 8016f2c:	f011 011f 	ands.w	r1, r1, #31
 8016f30:	d007      	beq.n	8016f42 <__any_on+0x26>
 8016f32:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8016f36:	fa24 f001 	lsr.w	r0, r4, r1
 8016f3a:	fa00 f101 	lsl.w	r1, r0, r1
 8016f3e:	428c      	cmp	r4, r1
 8016f40:	d10b      	bne.n	8016f5a <__any_on+0x3e>
 8016f42:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8016f46:	4293      	cmp	r3, r2
 8016f48:	d803      	bhi.n	8016f52 <__any_on+0x36>
 8016f4a:	2000      	movs	r0, #0
 8016f4c:	bd10      	pop	{r4, pc}
 8016f4e:	4603      	mov	r3, r0
 8016f50:	e7f7      	b.n	8016f42 <__any_on+0x26>
 8016f52:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8016f56:	2900      	cmp	r1, #0
 8016f58:	d0f5      	beq.n	8016f46 <__any_on+0x2a>
 8016f5a:	2001      	movs	r0, #1
 8016f5c:	e7f6      	b.n	8016f4c <__any_on+0x30>

08016f5e <_calloc_r>:
 8016f5e:	b538      	push	{r3, r4, r5, lr}
 8016f60:	fb02 f401 	mul.w	r4, r2, r1
 8016f64:	4621      	mov	r1, r4
 8016f66:	f000 f809 	bl	8016f7c <_malloc_r>
 8016f6a:	4605      	mov	r5, r0
 8016f6c:	b118      	cbz	r0, 8016f76 <_calloc_r+0x18>
 8016f6e:	4622      	mov	r2, r4
 8016f70:	2100      	movs	r1, #0
 8016f72:	f7fe f904 	bl	801517e <memset>
 8016f76:	4628      	mov	r0, r5
 8016f78:	bd38      	pop	{r3, r4, r5, pc}
	...

08016f7c <_malloc_r>:
 8016f7c:	b570      	push	{r4, r5, r6, lr}
 8016f7e:	1ccd      	adds	r5, r1, #3
 8016f80:	f025 0503 	bic.w	r5, r5, #3
 8016f84:	3508      	adds	r5, #8
 8016f86:	2d0c      	cmp	r5, #12
 8016f88:	bf38      	it	cc
 8016f8a:	250c      	movcc	r5, #12
 8016f8c:	2d00      	cmp	r5, #0
 8016f8e:	4606      	mov	r6, r0
 8016f90:	db01      	blt.n	8016f96 <_malloc_r+0x1a>
 8016f92:	42a9      	cmp	r1, r5
 8016f94:	d903      	bls.n	8016f9e <_malloc_r+0x22>
 8016f96:	230c      	movs	r3, #12
 8016f98:	6033      	str	r3, [r6, #0]
 8016f9a:	2000      	movs	r0, #0
 8016f9c:	bd70      	pop	{r4, r5, r6, pc}
 8016f9e:	f000 fb66 	bl	801766e <__malloc_lock>
 8016fa2:	4a21      	ldr	r2, [pc, #132]	; (8017028 <_malloc_r+0xac>)
 8016fa4:	6814      	ldr	r4, [r2, #0]
 8016fa6:	4621      	mov	r1, r4
 8016fa8:	b991      	cbnz	r1, 8016fd0 <_malloc_r+0x54>
 8016faa:	4c20      	ldr	r4, [pc, #128]	; (801702c <_malloc_r+0xb0>)
 8016fac:	6823      	ldr	r3, [r4, #0]
 8016fae:	b91b      	cbnz	r3, 8016fb8 <_malloc_r+0x3c>
 8016fb0:	4630      	mov	r0, r6
 8016fb2:	f000 fb17 	bl	80175e4 <_sbrk_r>
 8016fb6:	6020      	str	r0, [r4, #0]
 8016fb8:	4629      	mov	r1, r5
 8016fba:	4630      	mov	r0, r6
 8016fbc:	f000 fb12 	bl	80175e4 <_sbrk_r>
 8016fc0:	1c43      	adds	r3, r0, #1
 8016fc2:	d124      	bne.n	801700e <_malloc_r+0x92>
 8016fc4:	230c      	movs	r3, #12
 8016fc6:	6033      	str	r3, [r6, #0]
 8016fc8:	4630      	mov	r0, r6
 8016fca:	f000 fb51 	bl	8017670 <__malloc_unlock>
 8016fce:	e7e4      	b.n	8016f9a <_malloc_r+0x1e>
 8016fd0:	680b      	ldr	r3, [r1, #0]
 8016fd2:	1b5b      	subs	r3, r3, r5
 8016fd4:	d418      	bmi.n	8017008 <_malloc_r+0x8c>
 8016fd6:	2b0b      	cmp	r3, #11
 8016fd8:	d90f      	bls.n	8016ffa <_malloc_r+0x7e>
 8016fda:	600b      	str	r3, [r1, #0]
 8016fdc:	50cd      	str	r5, [r1, r3]
 8016fde:	18cc      	adds	r4, r1, r3
 8016fe0:	4630      	mov	r0, r6
 8016fe2:	f000 fb45 	bl	8017670 <__malloc_unlock>
 8016fe6:	f104 000b 	add.w	r0, r4, #11
 8016fea:	1d23      	adds	r3, r4, #4
 8016fec:	f020 0007 	bic.w	r0, r0, #7
 8016ff0:	1ac3      	subs	r3, r0, r3
 8016ff2:	d0d3      	beq.n	8016f9c <_malloc_r+0x20>
 8016ff4:	425a      	negs	r2, r3
 8016ff6:	50e2      	str	r2, [r4, r3]
 8016ff8:	e7d0      	b.n	8016f9c <_malloc_r+0x20>
 8016ffa:	428c      	cmp	r4, r1
 8016ffc:	684b      	ldr	r3, [r1, #4]
 8016ffe:	bf16      	itet	ne
 8017000:	6063      	strne	r3, [r4, #4]
 8017002:	6013      	streq	r3, [r2, #0]
 8017004:	460c      	movne	r4, r1
 8017006:	e7eb      	b.n	8016fe0 <_malloc_r+0x64>
 8017008:	460c      	mov	r4, r1
 801700a:	6849      	ldr	r1, [r1, #4]
 801700c:	e7cc      	b.n	8016fa8 <_malloc_r+0x2c>
 801700e:	1cc4      	adds	r4, r0, #3
 8017010:	f024 0403 	bic.w	r4, r4, #3
 8017014:	42a0      	cmp	r0, r4
 8017016:	d005      	beq.n	8017024 <_malloc_r+0xa8>
 8017018:	1a21      	subs	r1, r4, r0
 801701a:	4630      	mov	r0, r6
 801701c:	f000 fae2 	bl	80175e4 <_sbrk_r>
 8017020:	3001      	adds	r0, #1
 8017022:	d0cf      	beq.n	8016fc4 <_malloc_r+0x48>
 8017024:	6025      	str	r5, [r4, #0]
 8017026:	e7db      	b.n	8016fe0 <_malloc_r+0x64>
 8017028:	20006c48 	.word	0x20006c48
 801702c:	20006c4c 	.word	0x20006c4c

08017030 <__ssputs_r>:
 8017030:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017034:	688e      	ldr	r6, [r1, #8]
 8017036:	429e      	cmp	r6, r3
 8017038:	4682      	mov	sl, r0
 801703a:	460c      	mov	r4, r1
 801703c:	4690      	mov	r8, r2
 801703e:	4699      	mov	r9, r3
 8017040:	d837      	bhi.n	80170b2 <__ssputs_r+0x82>
 8017042:	898a      	ldrh	r2, [r1, #12]
 8017044:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8017048:	d031      	beq.n	80170ae <__ssputs_r+0x7e>
 801704a:	6825      	ldr	r5, [r4, #0]
 801704c:	6909      	ldr	r1, [r1, #16]
 801704e:	1a6f      	subs	r7, r5, r1
 8017050:	6965      	ldr	r5, [r4, #20]
 8017052:	2302      	movs	r3, #2
 8017054:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017058:	fb95 f5f3 	sdiv	r5, r5, r3
 801705c:	f109 0301 	add.w	r3, r9, #1
 8017060:	443b      	add	r3, r7
 8017062:	429d      	cmp	r5, r3
 8017064:	bf38      	it	cc
 8017066:	461d      	movcc	r5, r3
 8017068:	0553      	lsls	r3, r2, #21
 801706a:	d530      	bpl.n	80170ce <__ssputs_r+0x9e>
 801706c:	4629      	mov	r1, r5
 801706e:	f7ff ff85 	bl	8016f7c <_malloc_r>
 8017072:	4606      	mov	r6, r0
 8017074:	b950      	cbnz	r0, 801708c <__ssputs_r+0x5c>
 8017076:	230c      	movs	r3, #12
 8017078:	f8ca 3000 	str.w	r3, [sl]
 801707c:	89a3      	ldrh	r3, [r4, #12]
 801707e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017082:	81a3      	strh	r3, [r4, #12]
 8017084:	f04f 30ff 	mov.w	r0, #4294967295
 8017088:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801708c:	463a      	mov	r2, r7
 801708e:	6921      	ldr	r1, [r4, #16]
 8017090:	f7fe f86a 	bl	8015168 <memcpy>
 8017094:	89a3      	ldrh	r3, [r4, #12]
 8017096:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801709a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801709e:	81a3      	strh	r3, [r4, #12]
 80170a0:	6126      	str	r6, [r4, #16]
 80170a2:	6165      	str	r5, [r4, #20]
 80170a4:	443e      	add	r6, r7
 80170a6:	1bed      	subs	r5, r5, r7
 80170a8:	6026      	str	r6, [r4, #0]
 80170aa:	60a5      	str	r5, [r4, #8]
 80170ac:	464e      	mov	r6, r9
 80170ae:	454e      	cmp	r6, r9
 80170b0:	d900      	bls.n	80170b4 <__ssputs_r+0x84>
 80170b2:	464e      	mov	r6, r9
 80170b4:	4632      	mov	r2, r6
 80170b6:	4641      	mov	r1, r8
 80170b8:	6820      	ldr	r0, [r4, #0]
 80170ba:	f000 fabf 	bl	801763c <memmove>
 80170be:	68a3      	ldr	r3, [r4, #8]
 80170c0:	1b9b      	subs	r3, r3, r6
 80170c2:	60a3      	str	r3, [r4, #8]
 80170c4:	6823      	ldr	r3, [r4, #0]
 80170c6:	441e      	add	r6, r3
 80170c8:	6026      	str	r6, [r4, #0]
 80170ca:	2000      	movs	r0, #0
 80170cc:	e7dc      	b.n	8017088 <__ssputs_r+0x58>
 80170ce:	462a      	mov	r2, r5
 80170d0:	f000 fb1e 	bl	8017710 <_realloc_r>
 80170d4:	4606      	mov	r6, r0
 80170d6:	2800      	cmp	r0, #0
 80170d8:	d1e2      	bne.n	80170a0 <__ssputs_r+0x70>
 80170da:	6921      	ldr	r1, [r4, #16]
 80170dc:	4650      	mov	r0, sl
 80170de:	f000 fac9 	bl	8017674 <_free_r>
 80170e2:	e7c8      	b.n	8017076 <__ssputs_r+0x46>

080170e4 <_svfiprintf_r>:
 80170e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80170e8:	461d      	mov	r5, r3
 80170ea:	898b      	ldrh	r3, [r1, #12]
 80170ec:	061f      	lsls	r7, r3, #24
 80170ee:	b09d      	sub	sp, #116	; 0x74
 80170f0:	4680      	mov	r8, r0
 80170f2:	460c      	mov	r4, r1
 80170f4:	4616      	mov	r6, r2
 80170f6:	d50f      	bpl.n	8017118 <_svfiprintf_r+0x34>
 80170f8:	690b      	ldr	r3, [r1, #16]
 80170fa:	b96b      	cbnz	r3, 8017118 <_svfiprintf_r+0x34>
 80170fc:	2140      	movs	r1, #64	; 0x40
 80170fe:	f7ff ff3d 	bl	8016f7c <_malloc_r>
 8017102:	6020      	str	r0, [r4, #0]
 8017104:	6120      	str	r0, [r4, #16]
 8017106:	b928      	cbnz	r0, 8017114 <_svfiprintf_r+0x30>
 8017108:	230c      	movs	r3, #12
 801710a:	f8c8 3000 	str.w	r3, [r8]
 801710e:	f04f 30ff 	mov.w	r0, #4294967295
 8017112:	e0c8      	b.n	80172a6 <_svfiprintf_r+0x1c2>
 8017114:	2340      	movs	r3, #64	; 0x40
 8017116:	6163      	str	r3, [r4, #20]
 8017118:	2300      	movs	r3, #0
 801711a:	9309      	str	r3, [sp, #36]	; 0x24
 801711c:	2320      	movs	r3, #32
 801711e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017122:	2330      	movs	r3, #48	; 0x30
 8017124:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017128:	9503      	str	r5, [sp, #12]
 801712a:	f04f 0b01 	mov.w	fp, #1
 801712e:	4637      	mov	r7, r6
 8017130:	463d      	mov	r5, r7
 8017132:	f815 3b01 	ldrb.w	r3, [r5], #1
 8017136:	b10b      	cbz	r3, 801713c <_svfiprintf_r+0x58>
 8017138:	2b25      	cmp	r3, #37	; 0x25
 801713a:	d13e      	bne.n	80171ba <_svfiprintf_r+0xd6>
 801713c:	ebb7 0a06 	subs.w	sl, r7, r6
 8017140:	d00b      	beq.n	801715a <_svfiprintf_r+0x76>
 8017142:	4653      	mov	r3, sl
 8017144:	4632      	mov	r2, r6
 8017146:	4621      	mov	r1, r4
 8017148:	4640      	mov	r0, r8
 801714a:	f7ff ff71 	bl	8017030 <__ssputs_r>
 801714e:	3001      	adds	r0, #1
 8017150:	f000 80a4 	beq.w	801729c <_svfiprintf_r+0x1b8>
 8017154:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017156:	4453      	add	r3, sl
 8017158:	9309      	str	r3, [sp, #36]	; 0x24
 801715a:	783b      	ldrb	r3, [r7, #0]
 801715c:	2b00      	cmp	r3, #0
 801715e:	f000 809d 	beq.w	801729c <_svfiprintf_r+0x1b8>
 8017162:	2300      	movs	r3, #0
 8017164:	f04f 32ff 	mov.w	r2, #4294967295
 8017168:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801716c:	9304      	str	r3, [sp, #16]
 801716e:	9307      	str	r3, [sp, #28]
 8017170:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017174:	931a      	str	r3, [sp, #104]	; 0x68
 8017176:	462f      	mov	r7, r5
 8017178:	2205      	movs	r2, #5
 801717a:	f817 1b01 	ldrb.w	r1, [r7], #1
 801717e:	4850      	ldr	r0, [pc, #320]	; (80172c0 <_svfiprintf_r+0x1dc>)
 8017180:	f7e9 f83e 	bl	8000200 <memchr>
 8017184:	9b04      	ldr	r3, [sp, #16]
 8017186:	b9d0      	cbnz	r0, 80171be <_svfiprintf_r+0xda>
 8017188:	06d9      	lsls	r1, r3, #27
 801718a:	bf44      	itt	mi
 801718c:	2220      	movmi	r2, #32
 801718e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8017192:	071a      	lsls	r2, r3, #28
 8017194:	bf44      	itt	mi
 8017196:	222b      	movmi	r2, #43	; 0x2b
 8017198:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801719c:	782a      	ldrb	r2, [r5, #0]
 801719e:	2a2a      	cmp	r2, #42	; 0x2a
 80171a0:	d015      	beq.n	80171ce <_svfiprintf_r+0xea>
 80171a2:	9a07      	ldr	r2, [sp, #28]
 80171a4:	462f      	mov	r7, r5
 80171a6:	2000      	movs	r0, #0
 80171a8:	250a      	movs	r5, #10
 80171aa:	4639      	mov	r1, r7
 80171ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80171b0:	3b30      	subs	r3, #48	; 0x30
 80171b2:	2b09      	cmp	r3, #9
 80171b4:	d94d      	bls.n	8017252 <_svfiprintf_r+0x16e>
 80171b6:	b1b8      	cbz	r0, 80171e8 <_svfiprintf_r+0x104>
 80171b8:	e00f      	b.n	80171da <_svfiprintf_r+0xf6>
 80171ba:	462f      	mov	r7, r5
 80171bc:	e7b8      	b.n	8017130 <_svfiprintf_r+0x4c>
 80171be:	4a40      	ldr	r2, [pc, #256]	; (80172c0 <_svfiprintf_r+0x1dc>)
 80171c0:	1a80      	subs	r0, r0, r2
 80171c2:	fa0b f000 	lsl.w	r0, fp, r0
 80171c6:	4318      	orrs	r0, r3
 80171c8:	9004      	str	r0, [sp, #16]
 80171ca:	463d      	mov	r5, r7
 80171cc:	e7d3      	b.n	8017176 <_svfiprintf_r+0x92>
 80171ce:	9a03      	ldr	r2, [sp, #12]
 80171d0:	1d11      	adds	r1, r2, #4
 80171d2:	6812      	ldr	r2, [r2, #0]
 80171d4:	9103      	str	r1, [sp, #12]
 80171d6:	2a00      	cmp	r2, #0
 80171d8:	db01      	blt.n	80171de <_svfiprintf_r+0xfa>
 80171da:	9207      	str	r2, [sp, #28]
 80171dc:	e004      	b.n	80171e8 <_svfiprintf_r+0x104>
 80171de:	4252      	negs	r2, r2
 80171e0:	f043 0302 	orr.w	r3, r3, #2
 80171e4:	9207      	str	r2, [sp, #28]
 80171e6:	9304      	str	r3, [sp, #16]
 80171e8:	783b      	ldrb	r3, [r7, #0]
 80171ea:	2b2e      	cmp	r3, #46	; 0x2e
 80171ec:	d10c      	bne.n	8017208 <_svfiprintf_r+0x124>
 80171ee:	787b      	ldrb	r3, [r7, #1]
 80171f0:	2b2a      	cmp	r3, #42	; 0x2a
 80171f2:	d133      	bne.n	801725c <_svfiprintf_r+0x178>
 80171f4:	9b03      	ldr	r3, [sp, #12]
 80171f6:	1d1a      	adds	r2, r3, #4
 80171f8:	681b      	ldr	r3, [r3, #0]
 80171fa:	9203      	str	r2, [sp, #12]
 80171fc:	2b00      	cmp	r3, #0
 80171fe:	bfb8      	it	lt
 8017200:	f04f 33ff 	movlt.w	r3, #4294967295
 8017204:	3702      	adds	r7, #2
 8017206:	9305      	str	r3, [sp, #20]
 8017208:	4d2e      	ldr	r5, [pc, #184]	; (80172c4 <_svfiprintf_r+0x1e0>)
 801720a:	7839      	ldrb	r1, [r7, #0]
 801720c:	2203      	movs	r2, #3
 801720e:	4628      	mov	r0, r5
 8017210:	f7e8 fff6 	bl	8000200 <memchr>
 8017214:	b138      	cbz	r0, 8017226 <_svfiprintf_r+0x142>
 8017216:	2340      	movs	r3, #64	; 0x40
 8017218:	1b40      	subs	r0, r0, r5
 801721a:	fa03 f000 	lsl.w	r0, r3, r0
 801721e:	9b04      	ldr	r3, [sp, #16]
 8017220:	4303      	orrs	r3, r0
 8017222:	3701      	adds	r7, #1
 8017224:	9304      	str	r3, [sp, #16]
 8017226:	7839      	ldrb	r1, [r7, #0]
 8017228:	4827      	ldr	r0, [pc, #156]	; (80172c8 <_svfiprintf_r+0x1e4>)
 801722a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801722e:	2206      	movs	r2, #6
 8017230:	1c7e      	adds	r6, r7, #1
 8017232:	f7e8 ffe5 	bl	8000200 <memchr>
 8017236:	2800      	cmp	r0, #0
 8017238:	d038      	beq.n	80172ac <_svfiprintf_r+0x1c8>
 801723a:	4b24      	ldr	r3, [pc, #144]	; (80172cc <_svfiprintf_r+0x1e8>)
 801723c:	bb13      	cbnz	r3, 8017284 <_svfiprintf_r+0x1a0>
 801723e:	9b03      	ldr	r3, [sp, #12]
 8017240:	3307      	adds	r3, #7
 8017242:	f023 0307 	bic.w	r3, r3, #7
 8017246:	3308      	adds	r3, #8
 8017248:	9303      	str	r3, [sp, #12]
 801724a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801724c:	444b      	add	r3, r9
 801724e:	9309      	str	r3, [sp, #36]	; 0x24
 8017250:	e76d      	b.n	801712e <_svfiprintf_r+0x4a>
 8017252:	fb05 3202 	mla	r2, r5, r2, r3
 8017256:	2001      	movs	r0, #1
 8017258:	460f      	mov	r7, r1
 801725a:	e7a6      	b.n	80171aa <_svfiprintf_r+0xc6>
 801725c:	2300      	movs	r3, #0
 801725e:	3701      	adds	r7, #1
 8017260:	9305      	str	r3, [sp, #20]
 8017262:	4619      	mov	r1, r3
 8017264:	250a      	movs	r5, #10
 8017266:	4638      	mov	r0, r7
 8017268:	f810 2b01 	ldrb.w	r2, [r0], #1
 801726c:	3a30      	subs	r2, #48	; 0x30
 801726e:	2a09      	cmp	r2, #9
 8017270:	d903      	bls.n	801727a <_svfiprintf_r+0x196>
 8017272:	2b00      	cmp	r3, #0
 8017274:	d0c8      	beq.n	8017208 <_svfiprintf_r+0x124>
 8017276:	9105      	str	r1, [sp, #20]
 8017278:	e7c6      	b.n	8017208 <_svfiprintf_r+0x124>
 801727a:	fb05 2101 	mla	r1, r5, r1, r2
 801727e:	2301      	movs	r3, #1
 8017280:	4607      	mov	r7, r0
 8017282:	e7f0      	b.n	8017266 <_svfiprintf_r+0x182>
 8017284:	ab03      	add	r3, sp, #12
 8017286:	9300      	str	r3, [sp, #0]
 8017288:	4622      	mov	r2, r4
 801728a:	4b11      	ldr	r3, [pc, #68]	; (80172d0 <_svfiprintf_r+0x1ec>)
 801728c:	a904      	add	r1, sp, #16
 801728e:	4640      	mov	r0, r8
 8017290:	f3af 8000 	nop.w
 8017294:	f1b0 3fff 	cmp.w	r0, #4294967295
 8017298:	4681      	mov	r9, r0
 801729a:	d1d6      	bne.n	801724a <_svfiprintf_r+0x166>
 801729c:	89a3      	ldrh	r3, [r4, #12]
 801729e:	065b      	lsls	r3, r3, #25
 80172a0:	f53f af35 	bmi.w	801710e <_svfiprintf_r+0x2a>
 80172a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80172a6:	b01d      	add	sp, #116	; 0x74
 80172a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80172ac:	ab03      	add	r3, sp, #12
 80172ae:	9300      	str	r3, [sp, #0]
 80172b0:	4622      	mov	r2, r4
 80172b2:	4b07      	ldr	r3, [pc, #28]	; (80172d0 <_svfiprintf_r+0x1ec>)
 80172b4:	a904      	add	r1, sp, #16
 80172b6:	4640      	mov	r0, r8
 80172b8:	f000 f882 	bl	80173c0 <_printf_i>
 80172bc:	e7ea      	b.n	8017294 <_svfiprintf_r+0x1b0>
 80172be:	bf00      	nop
 80172c0:	0802b4d4 	.word	0x0802b4d4
 80172c4:	0802b4da 	.word	0x0802b4da
 80172c8:	0802b4de 	.word	0x0802b4de
 80172cc:	00000000 	.word	0x00000000
 80172d0:	08017031 	.word	0x08017031

080172d4 <_printf_common>:
 80172d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80172d8:	4691      	mov	r9, r2
 80172da:	461f      	mov	r7, r3
 80172dc:	688a      	ldr	r2, [r1, #8]
 80172de:	690b      	ldr	r3, [r1, #16]
 80172e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80172e4:	4293      	cmp	r3, r2
 80172e6:	bfb8      	it	lt
 80172e8:	4613      	movlt	r3, r2
 80172ea:	f8c9 3000 	str.w	r3, [r9]
 80172ee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80172f2:	4606      	mov	r6, r0
 80172f4:	460c      	mov	r4, r1
 80172f6:	b112      	cbz	r2, 80172fe <_printf_common+0x2a>
 80172f8:	3301      	adds	r3, #1
 80172fa:	f8c9 3000 	str.w	r3, [r9]
 80172fe:	6823      	ldr	r3, [r4, #0]
 8017300:	0699      	lsls	r1, r3, #26
 8017302:	bf42      	ittt	mi
 8017304:	f8d9 3000 	ldrmi.w	r3, [r9]
 8017308:	3302      	addmi	r3, #2
 801730a:	f8c9 3000 	strmi.w	r3, [r9]
 801730e:	6825      	ldr	r5, [r4, #0]
 8017310:	f015 0506 	ands.w	r5, r5, #6
 8017314:	d107      	bne.n	8017326 <_printf_common+0x52>
 8017316:	f104 0a19 	add.w	sl, r4, #25
 801731a:	68e3      	ldr	r3, [r4, #12]
 801731c:	f8d9 2000 	ldr.w	r2, [r9]
 8017320:	1a9b      	subs	r3, r3, r2
 8017322:	42ab      	cmp	r3, r5
 8017324:	dc28      	bgt.n	8017378 <_printf_common+0xa4>
 8017326:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801732a:	6822      	ldr	r2, [r4, #0]
 801732c:	3300      	adds	r3, #0
 801732e:	bf18      	it	ne
 8017330:	2301      	movne	r3, #1
 8017332:	0692      	lsls	r2, r2, #26
 8017334:	d42d      	bmi.n	8017392 <_printf_common+0xbe>
 8017336:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801733a:	4639      	mov	r1, r7
 801733c:	4630      	mov	r0, r6
 801733e:	47c0      	blx	r8
 8017340:	3001      	adds	r0, #1
 8017342:	d020      	beq.n	8017386 <_printf_common+0xb2>
 8017344:	6823      	ldr	r3, [r4, #0]
 8017346:	68e5      	ldr	r5, [r4, #12]
 8017348:	f8d9 2000 	ldr.w	r2, [r9]
 801734c:	f003 0306 	and.w	r3, r3, #6
 8017350:	2b04      	cmp	r3, #4
 8017352:	bf08      	it	eq
 8017354:	1aad      	subeq	r5, r5, r2
 8017356:	68a3      	ldr	r3, [r4, #8]
 8017358:	6922      	ldr	r2, [r4, #16]
 801735a:	bf0c      	ite	eq
 801735c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017360:	2500      	movne	r5, #0
 8017362:	4293      	cmp	r3, r2
 8017364:	bfc4      	itt	gt
 8017366:	1a9b      	subgt	r3, r3, r2
 8017368:	18ed      	addgt	r5, r5, r3
 801736a:	f04f 0900 	mov.w	r9, #0
 801736e:	341a      	adds	r4, #26
 8017370:	454d      	cmp	r5, r9
 8017372:	d11a      	bne.n	80173aa <_printf_common+0xd6>
 8017374:	2000      	movs	r0, #0
 8017376:	e008      	b.n	801738a <_printf_common+0xb6>
 8017378:	2301      	movs	r3, #1
 801737a:	4652      	mov	r2, sl
 801737c:	4639      	mov	r1, r7
 801737e:	4630      	mov	r0, r6
 8017380:	47c0      	blx	r8
 8017382:	3001      	adds	r0, #1
 8017384:	d103      	bne.n	801738e <_printf_common+0xba>
 8017386:	f04f 30ff 	mov.w	r0, #4294967295
 801738a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801738e:	3501      	adds	r5, #1
 8017390:	e7c3      	b.n	801731a <_printf_common+0x46>
 8017392:	18e1      	adds	r1, r4, r3
 8017394:	1c5a      	adds	r2, r3, #1
 8017396:	2030      	movs	r0, #48	; 0x30
 8017398:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801739c:	4422      	add	r2, r4
 801739e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80173a2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80173a6:	3302      	adds	r3, #2
 80173a8:	e7c5      	b.n	8017336 <_printf_common+0x62>
 80173aa:	2301      	movs	r3, #1
 80173ac:	4622      	mov	r2, r4
 80173ae:	4639      	mov	r1, r7
 80173b0:	4630      	mov	r0, r6
 80173b2:	47c0      	blx	r8
 80173b4:	3001      	adds	r0, #1
 80173b6:	d0e6      	beq.n	8017386 <_printf_common+0xb2>
 80173b8:	f109 0901 	add.w	r9, r9, #1
 80173bc:	e7d8      	b.n	8017370 <_printf_common+0x9c>
	...

080173c0 <_printf_i>:
 80173c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80173c4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80173c8:	460c      	mov	r4, r1
 80173ca:	7e09      	ldrb	r1, [r1, #24]
 80173cc:	b085      	sub	sp, #20
 80173ce:	296e      	cmp	r1, #110	; 0x6e
 80173d0:	4617      	mov	r7, r2
 80173d2:	4606      	mov	r6, r0
 80173d4:	4698      	mov	r8, r3
 80173d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80173d8:	f000 80b3 	beq.w	8017542 <_printf_i+0x182>
 80173dc:	d822      	bhi.n	8017424 <_printf_i+0x64>
 80173de:	2963      	cmp	r1, #99	; 0x63
 80173e0:	d036      	beq.n	8017450 <_printf_i+0x90>
 80173e2:	d80a      	bhi.n	80173fa <_printf_i+0x3a>
 80173e4:	2900      	cmp	r1, #0
 80173e6:	f000 80b9 	beq.w	801755c <_printf_i+0x19c>
 80173ea:	2958      	cmp	r1, #88	; 0x58
 80173ec:	f000 8083 	beq.w	80174f6 <_printf_i+0x136>
 80173f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80173f4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80173f8:	e032      	b.n	8017460 <_printf_i+0xa0>
 80173fa:	2964      	cmp	r1, #100	; 0x64
 80173fc:	d001      	beq.n	8017402 <_printf_i+0x42>
 80173fe:	2969      	cmp	r1, #105	; 0x69
 8017400:	d1f6      	bne.n	80173f0 <_printf_i+0x30>
 8017402:	6820      	ldr	r0, [r4, #0]
 8017404:	6813      	ldr	r3, [r2, #0]
 8017406:	0605      	lsls	r5, r0, #24
 8017408:	f103 0104 	add.w	r1, r3, #4
 801740c:	d52a      	bpl.n	8017464 <_printf_i+0xa4>
 801740e:	681b      	ldr	r3, [r3, #0]
 8017410:	6011      	str	r1, [r2, #0]
 8017412:	2b00      	cmp	r3, #0
 8017414:	da03      	bge.n	801741e <_printf_i+0x5e>
 8017416:	222d      	movs	r2, #45	; 0x2d
 8017418:	425b      	negs	r3, r3
 801741a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801741e:	486f      	ldr	r0, [pc, #444]	; (80175dc <_printf_i+0x21c>)
 8017420:	220a      	movs	r2, #10
 8017422:	e039      	b.n	8017498 <_printf_i+0xd8>
 8017424:	2973      	cmp	r1, #115	; 0x73
 8017426:	f000 809d 	beq.w	8017564 <_printf_i+0x1a4>
 801742a:	d808      	bhi.n	801743e <_printf_i+0x7e>
 801742c:	296f      	cmp	r1, #111	; 0x6f
 801742e:	d020      	beq.n	8017472 <_printf_i+0xb2>
 8017430:	2970      	cmp	r1, #112	; 0x70
 8017432:	d1dd      	bne.n	80173f0 <_printf_i+0x30>
 8017434:	6823      	ldr	r3, [r4, #0]
 8017436:	f043 0320 	orr.w	r3, r3, #32
 801743a:	6023      	str	r3, [r4, #0]
 801743c:	e003      	b.n	8017446 <_printf_i+0x86>
 801743e:	2975      	cmp	r1, #117	; 0x75
 8017440:	d017      	beq.n	8017472 <_printf_i+0xb2>
 8017442:	2978      	cmp	r1, #120	; 0x78
 8017444:	d1d4      	bne.n	80173f0 <_printf_i+0x30>
 8017446:	2378      	movs	r3, #120	; 0x78
 8017448:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801744c:	4864      	ldr	r0, [pc, #400]	; (80175e0 <_printf_i+0x220>)
 801744e:	e055      	b.n	80174fc <_printf_i+0x13c>
 8017450:	6813      	ldr	r3, [r2, #0]
 8017452:	1d19      	adds	r1, r3, #4
 8017454:	681b      	ldr	r3, [r3, #0]
 8017456:	6011      	str	r1, [r2, #0]
 8017458:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801745c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017460:	2301      	movs	r3, #1
 8017462:	e08c      	b.n	801757e <_printf_i+0x1be>
 8017464:	681b      	ldr	r3, [r3, #0]
 8017466:	6011      	str	r1, [r2, #0]
 8017468:	f010 0f40 	tst.w	r0, #64	; 0x40
 801746c:	bf18      	it	ne
 801746e:	b21b      	sxthne	r3, r3
 8017470:	e7cf      	b.n	8017412 <_printf_i+0x52>
 8017472:	6813      	ldr	r3, [r2, #0]
 8017474:	6825      	ldr	r5, [r4, #0]
 8017476:	1d18      	adds	r0, r3, #4
 8017478:	6010      	str	r0, [r2, #0]
 801747a:	0628      	lsls	r0, r5, #24
 801747c:	d501      	bpl.n	8017482 <_printf_i+0xc2>
 801747e:	681b      	ldr	r3, [r3, #0]
 8017480:	e002      	b.n	8017488 <_printf_i+0xc8>
 8017482:	0668      	lsls	r0, r5, #25
 8017484:	d5fb      	bpl.n	801747e <_printf_i+0xbe>
 8017486:	881b      	ldrh	r3, [r3, #0]
 8017488:	4854      	ldr	r0, [pc, #336]	; (80175dc <_printf_i+0x21c>)
 801748a:	296f      	cmp	r1, #111	; 0x6f
 801748c:	bf14      	ite	ne
 801748e:	220a      	movne	r2, #10
 8017490:	2208      	moveq	r2, #8
 8017492:	2100      	movs	r1, #0
 8017494:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017498:	6865      	ldr	r5, [r4, #4]
 801749a:	60a5      	str	r5, [r4, #8]
 801749c:	2d00      	cmp	r5, #0
 801749e:	f2c0 8095 	blt.w	80175cc <_printf_i+0x20c>
 80174a2:	6821      	ldr	r1, [r4, #0]
 80174a4:	f021 0104 	bic.w	r1, r1, #4
 80174a8:	6021      	str	r1, [r4, #0]
 80174aa:	2b00      	cmp	r3, #0
 80174ac:	d13d      	bne.n	801752a <_printf_i+0x16a>
 80174ae:	2d00      	cmp	r5, #0
 80174b0:	f040 808e 	bne.w	80175d0 <_printf_i+0x210>
 80174b4:	4665      	mov	r5, ip
 80174b6:	2a08      	cmp	r2, #8
 80174b8:	d10b      	bne.n	80174d2 <_printf_i+0x112>
 80174ba:	6823      	ldr	r3, [r4, #0]
 80174bc:	07db      	lsls	r3, r3, #31
 80174be:	d508      	bpl.n	80174d2 <_printf_i+0x112>
 80174c0:	6923      	ldr	r3, [r4, #16]
 80174c2:	6862      	ldr	r2, [r4, #4]
 80174c4:	429a      	cmp	r2, r3
 80174c6:	bfde      	ittt	le
 80174c8:	2330      	movle	r3, #48	; 0x30
 80174ca:	f805 3c01 	strble.w	r3, [r5, #-1]
 80174ce:	f105 35ff 	addle.w	r5, r5, #4294967295
 80174d2:	ebac 0305 	sub.w	r3, ip, r5
 80174d6:	6123      	str	r3, [r4, #16]
 80174d8:	f8cd 8000 	str.w	r8, [sp]
 80174dc:	463b      	mov	r3, r7
 80174de:	aa03      	add	r2, sp, #12
 80174e0:	4621      	mov	r1, r4
 80174e2:	4630      	mov	r0, r6
 80174e4:	f7ff fef6 	bl	80172d4 <_printf_common>
 80174e8:	3001      	adds	r0, #1
 80174ea:	d14d      	bne.n	8017588 <_printf_i+0x1c8>
 80174ec:	f04f 30ff 	mov.w	r0, #4294967295
 80174f0:	b005      	add	sp, #20
 80174f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80174f6:	4839      	ldr	r0, [pc, #228]	; (80175dc <_printf_i+0x21c>)
 80174f8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80174fc:	6813      	ldr	r3, [r2, #0]
 80174fe:	6821      	ldr	r1, [r4, #0]
 8017500:	1d1d      	adds	r5, r3, #4
 8017502:	681b      	ldr	r3, [r3, #0]
 8017504:	6015      	str	r5, [r2, #0]
 8017506:	060a      	lsls	r2, r1, #24
 8017508:	d50b      	bpl.n	8017522 <_printf_i+0x162>
 801750a:	07ca      	lsls	r2, r1, #31
 801750c:	bf44      	itt	mi
 801750e:	f041 0120 	orrmi.w	r1, r1, #32
 8017512:	6021      	strmi	r1, [r4, #0]
 8017514:	b91b      	cbnz	r3, 801751e <_printf_i+0x15e>
 8017516:	6822      	ldr	r2, [r4, #0]
 8017518:	f022 0220 	bic.w	r2, r2, #32
 801751c:	6022      	str	r2, [r4, #0]
 801751e:	2210      	movs	r2, #16
 8017520:	e7b7      	b.n	8017492 <_printf_i+0xd2>
 8017522:	064d      	lsls	r5, r1, #25
 8017524:	bf48      	it	mi
 8017526:	b29b      	uxthmi	r3, r3
 8017528:	e7ef      	b.n	801750a <_printf_i+0x14a>
 801752a:	4665      	mov	r5, ip
 801752c:	fbb3 f1f2 	udiv	r1, r3, r2
 8017530:	fb02 3311 	mls	r3, r2, r1, r3
 8017534:	5cc3      	ldrb	r3, [r0, r3]
 8017536:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801753a:	460b      	mov	r3, r1
 801753c:	2900      	cmp	r1, #0
 801753e:	d1f5      	bne.n	801752c <_printf_i+0x16c>
 8017540:	e7b9      	b.n	80174b6 <_printf_i+0xf6>
 8017542:	6813      	ldr	r3, [r2, #0]
 8017544:	6825      	ldr	r5, [r4, #0]
 8017546:	6961      	ldr	r1, [r4, #20]
 8017548:	1d18      	adds	r0, r3, #4
 801754a:	6010      	str	r0, [r2, #0]
 801754c:	0628      	lsls	r0, r5, #24
 801754e:	681b      	ldr	r3, [r3, #0]
 8017550:	d501      	bpl.n	8017556 <_printf_i+0x196>
 8017552:	6019      	str	r1, [r3, #0]
 8017554:	e002      	b.n	801755c <_printf_i+0x19c>
 8017556:	066a      	lsls	r2, r5, #25
 8017558:	d5fb      	bpl.n	8017552 <_printf_i+0x192>
 801755a:	8019      	strh	r1, [r3, #0]
 801755c:	2300      	movs	r3, #0
 801755e:	6123      	str	r3, [r4, #16]
 8017560:	4665      	mov	r5, ip
 8017562:	e7b9      	b.n	80174d8 <_printf_i+0x118>
 8017564:	6813      	ldr	r3, [r2, #0]
 8017566:	1d19      	adds	r1, r3, #4
 8017568:	6011      	str	r1, [r2, #0]
 801756a:	681d      	ldr	r5, [r3, #0]
 801756c:	6862      	ldr	r2, [r4, #4]
 801756e:	2100      	movs	r1, #0
 8017570:	4628      	mov	r0, r5
 8017572:	f7e8 fe45 	bl	8000200 <memchr>
 8017576:	b108      	cbz	r0, 801757c <_printf_i+0x1bc>
 8017578:	1b40      	subs	r0, r0, r5
 801757a:	6060      	str	r0, [r4, #4]
 801757c:	6863      	ldr	r3, [r4, #4]
 801757e:	6123      	str	r3, [r4, #16]
 8017580:	2300      	movs	r3, #0
 8017582:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017586:	e7a7      	b.n	80174d8 <_printf_i+0x118>
 8017588:	6923      	ldr	r3, [r4, #16]
 801758a:	462a      	mov	r2, r5
 801758c:	4639      	mov	r1, r7
 801758e:	4630      	mov	r0, r6
 8017590:	47c0      	blx	r8
 8017592:	3001      	adds	r0, #1
 8017594:	d0aa      	beq.n	80174ec <_printf_i+0x12c>
 8017596:	6823      	ldr	r3, [r4, #0]
 8017598:	079b      	lsls	r3, r3, #30
 801759a:	d413      	bmi.n	80175c4 <_printf_i+0x204>
 801759c:	68e0      	ldr	r0, [r4, #12]
 801759e:	9b03      	ldr	r3, [sp, #12]
 80175a0:	4298      	cmp	r0, r3
 80175a2:	bfb8      	it	lt
 80175a4:	4618      	movlt	r0, r3
 80175a6:	e7a3      	b.n	80174f0 <_printf_i+0x130>
 80175a8:	2301      	movs	r3, #1
 80175aa:	464a      	mov	r2, r9
 80175ac:	4639      	mov	r1, r7
 80175ae:	4630      	mov	r0, r6
 80175b0:	47c0      	blx	r8
 80175b2:	3001      	adds	r0, #1
 80175b4:	d09a      	beq.n	80174ec <_printf_i+0x12c>
 80175b6:	3501      	adds	r5, #1
 80175b8:	68e3      	ldr	r3, [r4, #12]
 80175ba:	9a03      	ldr	r2, [sp, #12]
 80175bc:	1a9b      	subs	r3, r3, r2
 80175be:	42ab      	cmp	r3, r5
 80175c0:	dcf2      	bgt.n	80175a8 <_printf_i+0x1e8>
 80175c2:	e7eb      	b.n	801759c <_printf_i+0x1dc>
 80175c4:	2500      	movs	r5, #0
 80175c6:	f104 0919 	add.w	r9, r4, #25
 80175ca:	e7f5      	b.n	80175b8 <_printf_i+0x1f8>
 80175cc:	2b00      	cmp	r3, #0
 80175ce:	d1ac      	bne.n	801752a <_printf_i+0x16a>
 80175d0:	7803      	ldrb	r3, [r0, #0]
 80175d2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80175d6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80175da:	e76c      	b.n	80174b6 <_printf_i+0xf6>
 80175dc:	0802b4e5 	.word	0x0802b4e5
 80175e0:	0802b4f6 	.word	0x0802b4f6

080175e4 <_sbrk_r>:
 80175e4:	b538      	push	{r3, r4, r5, lr}
 80175e6:	4c06      	ldr	r4, [pc, #24]	; (8017600 <_sbrk_r+0x1c>)
 80175e8:	2300      	movs	r3, #0
 80175ea:	4605      	mov	r5, r0
 80175ec:	4608      	mov	r0, r1
 80175ee:	6023      	str	r3, [r4, #0]
 80175f0:	f7fd fce6 	bl	8014fc0 <_sbrk>
 80175f4:	1c43      	adds	r3, r0, #1
 80175f6:	d102      	bne.n	80175fe <_sbrk_r+0x1a>
 80175f8:	6823      	ldr	r3, [r4, #0]
 80175fa:	b103      	cbz	r3, 80175fe <_sbrk_r+0x1a>
 80175fc:	602b      	str	r3, [r5, #0]
 80175fe:	bd38      	pop	{r3, r4, r5, pc}
 8017600:	200089b4 	.word	0x200089b4

08017604 <nanf>:
 8017604:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801760c <nanf+0x8>
 8017608:	4770      	bx	lr
 801760a:	bf00      	nop
 801760c:	7fc00000 	.word	0x7fc00000

08017610 <__ascii_wctomb>:
 8017610:	b149      	cbz	r1, 8017626 <__ascii_wctomb+0x16>
 8017612:	2aff      	cmp	r2, #255	; 0xff
 8017614:	bf85      	ittet	hi
 8017616:	238a      	movhi	r3, #138	; 0x8a
 8017618:	6003      	strhi	r3, [r0, #0]
 801761a:	700a      	strbls	r2, [r1, #0]
 801761c:	f04f 30ff 	movhi.w	r0, #4294967295
 8017620:	bf98      	it	ls
 8017622:	2001      	movls	r0, #1
 8017624:	4770      	bx	lr
 8017626:	4608      	mov	r0, r1
 8017628:	4770      	bx	lr
	...

0801762c <malloc>:
 801762c:	4b02      	ldr	r3, [pc, #8]	; (8017638 <malloc+0xc>)
 801762e:	4601      	mov	r1, r0
 8017630:	6818      	ldr	r0, [r3, #0]
 8017632:	f7ff bca3 	b.w	8016f7c <_malloc_r>
 8017636:	bf00      	nop
 8017638:	200000dc 	.word	0x200000dc

0801763c <memmove>:
 801763c:	4288      	cmp	r0, r1
 801763e:	b510      	push	{r4, lr}
 8017640:	eb01 0302 	add.w	r3, r1, r2
 8017644:	d807      	bhi.n	8017656 <memmove+0x1a>
 8017646:	1e42      	subs	r2, r0, #1
 8017648:	4299      	cmp	r1, r3
 801764a:	d00a      	beq.n	8017662 <memmove+0x26>
 801764c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017650:	f802 4f01 	strb.w	r4, [r2, #1]!
 8017654:	e7f8      	b.n	8017648 <memmove+0xc>
 8017656:	4283      	cmp	r3, r0
 8017658:	d9f5      	bls.n	8017646 <memmove+0xa>
 801765a:	1881      	adds	r1, r0, r2
 801765c:	1ad2      	subs	r2, r2, r3
 801765e:	42d3      	cmn	r3, r2
 8017660:	d100      	bne.n	8017664 <memmove+0x28>
 8017662:	bd10      	pop	{r4, pc}
 8017664:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017668:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801766c:	e7f7      	b.n	801765e <memmove+0x22>

0801766e <__malloc_lock>:
 801766e:	4770      	bx	lr

08017670 <__malloc_unlock>:
 8017670:	4770      	bx	lr
	...

08017674 <_free_r>:
 8017674:	b538      	push	{r3, r4, r5, lr}
 8017676:	4605      	mov	r5, r0
 8017678:	2900      	cmp	r1, #0
 801767a:	d045      	beq.n	8017708 <_free_r+0x94>
 801767c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017680:	1f0c      	subs	r4, r1, #4
 8017682:	2b00      	cmp	r3, #0
 8017684:	bfb8      	it	lt
 8017686:	18e4      	addlt	r4, r4, r3
 8017688:	f7ff fff1 	bl	801766e <__malloc_lock>
 801768c:	4a1f      	ldr	r2, [pc, #124]	; (801770c <_free_r+0x98>)
 801768e:	6813      	ldr	r3, [r2, #0]
 8017690:	4610      	mov	r0, r2
 8017692:	b933      	cbnz	r3, 80176a2 <_free_r+0x2e>
 8017694:	6063      	str	r3, [r4, #4]
 8017696:	6014      	str	r4, [r2, #0]
 8017698:	4628      	mov	r0, r5
 801769a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801769e:	f7ff bfe7 	b.w	8017670 <__malloc_unlock>
 80176a2:	42a3      	cmp	r3, r4
 80176a4:	d90c      	bls.n	80176c0 <_free_r+0x4c>
 80176a6:	6821      	ldr	r1, [r4, #0]
 80176a8:	1862      	adds	r2, r4, r1
 80176aa:	4293      	cmp	r3, r2
 80176ac:	bf04      	itt	eq
 80176ae:	681a      	ldreq	r2, [r3, #0]
 80176b0:	685b      	ldreq	r3, [r3, #4]
 80176b2:	6063      	str	r3, [r4, #4]
 80176b4:	bf04      	itt	eq
 80176b6:	1852      	addeq	r2, r2, r1
 80176b8:	6022      	streq	r2, [r4, #0]
 80176ba:	6004      	str	r4, [r0, #0]
 80176bc:	e7ec      	b.n	8017698 <_free_r+0x24>
 80176be:	4613      	mov	r3, r2
 80176c0:	685a      	ldr	r2, [r3, #4]
 80176c2:	b10a      	cbz	r2, 80176c8 <_free_r+0x54>
 80176c4:	42a2      	cmp	r2, r4
 80176c6:	d9fa      	bls.n	80176be <_free_r+0x4a>
 80176c8:	6819      	ldr	r1, [r3, #0]
 80176ca:	1858      	adds	r0, r3, r1
 80176cc:	42a0      	cmp	r0, r4
 80176ce:	d10b      	bne.n	80176e8 <_free_r+0x74>
 80176d0:	6820      	ldr	r0, [r4, #0]
 80176d2:	4401      	add	r1, r0
 80176d4:	1858      	adds	r0, r3, r1
 80176d6:	4282      	cmp	r2, r0
 80176d8:	6019      	str	r1, [r3, #0]
 80176da:	d1dd      	bne.n	8017698 <_free_r+0x24>
 80176dc:	6810      	ldr	r0, [r2, #0]
 80176de:	6852      	ldr	r2, [r2, #4]
 80176e0:	605a      	str	r2, [r3, #4]
 80176e2:	4401      	add	r1, r0
 80176e4:	6019      	str	r1, [r3, #0]
 80176e6:	e7d7      	b.n	8017698 <_free_r+0x24>
 80176e8:	d902      	bls.n	80176f0 <_free_r+0x7c>
 80176ea:	230c      	movs	r3, #12
 80176ec:	602b      	str	r3, [r5, #0]
 80176ee:	e7d3      	b.n	8017698 <_free_r+0x24>
 80176f0:	6820      	ldr	r0, [r4, #0]
 80176f2:	1821      	adds	r1, r4, r0
 80176f4:	428a      	cmp	r2, r1
 80176f6:	bf04      	itt	eq
 80176f8:	6811      	ldreq	r1, [r2, #0]
 80176fa:	6852      	ldreq	r2, [r2, #4]
 80176fc:	6062      	str	r2, [r4, #4]
 80176fe:	bf04      	itt	eq
 8017700:	1809      	addeq	r1, r1, r0
 8017702:	6021      	streq	r1, [r4, #0]
 8017704:	605c      	str	r4, [r3, #4]
 8017706:	e7c7      	b.n	8017698 <_free_r+0x24>
 8017708:	bd38      	pop	{r3, r4, r5, pc}
 801770a:	bf00      	nop
 801770c:	20006c48 	.word	0x20006c48

08017710 <_realloc_r>:
 8017710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017712:	4607      	mov	r7, r0
 8017714:	4614      	mov	r4, r2
 8017716:	460e      	mov	r6, r1
 8017718:	b921      	cbnz	r1, 8017724 <_realloc_r+0x14>
 801771a:	4611      	mov	r1, r2
 801771c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8017720:	f7ff bc2c 	b.w	8016f7c <_malloc_r>
 8017724:	b922      	cbnz	r2, 8017730 <_realloc_r+0x20>
 8017726:	f7ff ffa5 	bl	8017674 <_free_r>
 801772a:	4625      	mov	r5, r4
 801772c:	4628      	mov	r0, r5
 801772e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017730:	f000 f814 	bl	801775c <_malloc_usable_size_r>
 8017734:	42a0      	cmp	r0, r4
 8017736:	d20f      	bcs.n	8017758 <_realloc_r+0x48>
 8017738:	4621      	mov	r1, r4
 801773a:	4638      	mov	r0, r7
 801773c:	f7ff fc1e 	bl	8016f7c <_malloc_r>
 8017740:	4605      	mov	r5, r0
 8017742:	2800      	cmp	r0, #0
 8017744:	d0f2      	beq.n	801772c <_realloc_r+0x1c>
 8017746:	4631      	mov	r1, r6
 8017748:	4622      	mov	r2, r4
 801774a:	f7fd fd0d 	bl	8015168 <memcpy>
 801774e:	4631      	mov	r1, r6
 8017750:	4638      	mov	r0, r7
 8017752:	f7ff ff8f 	bl	8017674 <_free_r>
 8017756:	e7e9      	b.n	801772c <_realloc_r+0x1c>
 8017758:	4635      	mov	r5, r6
 801775a:	e7e7      	b.n	801772c <_realloc_r+0x1c>

0801775c <_malloc_usable_size_r>:
 801775c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017760:	1f18      	subs	r0, r3, #4
 8017762:	2b00      	cmp	r3, #0
 8017764:	bfbc      	itt	lt
 8017766:	580b      	ldrlt	r3, [r1, r0]
 8017768:	18c0      	addlt	r0, r0, r3
 801776a:	4770      	bx	lr

0801776c <pow>:
 801776c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017770:	ed2d 8b04 	vpush	{d8-d9}
 8017774:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8017a48 <pow+0x2dc>
 8017778:	b08d      	sub	sp, #52	; 0x34
 801777a:	ec57 6b10 	vmov	r6, r7, d0
 801777e:	ec55 4b11 	vmov	r4, r5, d1
 8017782:	f000 f9bd 	bl	8017b00 <__ieee754_pow>
 8017786:	f999 3000 	ldrsb.w	r3, [r9]
 801778a:	9300      	str	r3, [sp, #0]
 801778c:	3301      	adds	r3, #1
 801778e:	eeb0 8a40 	vmov.f32	s16, s0
 8017792:	eef0 8a60 	vmov.f32	s17, s1
 8017796:	46c8      	mov	r8, r9
 8017798:	d05f      	beq.n	801785a <pow+0xee>
 801779a:	4622      	mov	r2, r4
 801779c:	462b      	mov	r3, r5
 801779e:	4620      	mov	r0, r4
 80177a0:	4629      	mov	r1, r5
 80177a2:	f7e9 f9d3 	bl	8000b4c <__aeabi_dcmpun>
 80177a6:	4683      	mov	fp, r0
 80177a8:	2800      	cmp	r0, #0
 80177aa:	d156      	bne.n	801785a <pow+0xee>
 80177ac:	4632      	mov	r2, r6
 80177ae:	463b      	mov	r3, r7
 80177b0:	4630      	mov	r0, r6
 80177b2:	4639      	mov	r1, r7
 80177b4:	f7e9 f9ca 	bl	8000b4c <__aeabi_dcmpun>
 80177b8:	9001      	str	r0, [sp, #4]
 80177ba:	b1e8      	cbz	r0, 80177f8 <pow+0x8c>
 80177bc:	2200      	movs	r2, #0
 80177be:	2300      	movs	r3, #0
 80177c0:	4620      	mov	r0, r4
 80177c2:	4629      	mov	r1, r5
 80177c4:	f7e9 f990 	bl	8000ae8 <__aeabi_dcmpeq>
 80177c8:	2800      	cmp	r0, #0
 80177ca:	d046      	beq.n	801785a <pow+0xee>
 80177cc:	2301      	movs	r3, #1
 80177ce:	9302      	str	r3, [sp, #8]
 80177d0:	4b96      	ldr	r3, [pc, #600]	; (8017a2c <pow+0x2c0>)
 80177d2:	9303      	str	r3, [sp, #12]
 80177d4:	4b96      	ldr	r3, [pc, #600]	; (8017a30 <pow+0x2c4>)
 80177d6:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80177da:	2200      	movs	r2, #0
 80177dc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80177e0:	9b00      	ldr	r3, [sp, #0]
 80177e2:	2b02      	cmp	r3, #2
 80177e4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80177e8:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80177ec:	d033      	beq.n	8017856 <pow+0xea>
 80177ee:	a802      	add	r0, sp, #8
 80177f0:	f000 ff55 	bl	801869e <matherr>
 80177f4:	bb48      	cbnz	r0, 801784a <pow+0xde>
 80177f6:	e05d      	b.n	80178b4 <pow+0x148>
 80177f8:	f04f 0a00 	mov.w	sl, #0
 80177fc:	f04f 0b00 	mov.w	fp, #0
 8017800:	4652      	mov	r2, sl
 8017802:	465b      	mov	r3, fp
 8017804:	4630      	mov	r0, r6
 8017806:	4639      	mov	r1, r7
 8017808:	f7e9 f96e 	bl	8000ae8 <__aeabi_dcmpeq>
 801780c:	ec4b ab19 	vmov	d9, sl, fp
 8017810:	2800      	cmp	r0, #0
 8017812:	d054      	beq.n	80178be <pow+0x152>
 8017814:	4652      	mov	r2, sl
 8017816:	465b      	mov	r3, fp
 8017818:	4620      	mov	r0, r4
 801781a:	4629      	mov	r1, r5
 801781c:	f7e9 f964 	bl	8000ae8 <__aeabi_dcmpeq>
 8017820:	4680      	mov	r8, r0
 8017822:	b318      	cbz	r0, 801786c <pow+0x100>
 8017824:	2301      	movs	r3, #1
 8017826:	9302      	str	r3, [sp, #8]
 8017828:	4b80      	ldr	r3, [pc, #512]	; (8017a2c <pow+0x2c0>)
 801782a:	9303      	str	r3, [sp, #12]
 801782c:	9b01      	ldr	r3, [sp, #4]
 801782e:	930a      	str	r3, [sp, #40]	; 0x28
 8017830:	9b00      	ldr	r3, [sp, #0]
 8017832:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8017836:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801783a:	e9cd ab08 	strd	sl, fp, [sp, #32]
 801783e:	2b00      	cmp	r3, #0
 8017840:	d0d5      	beq.n	80177ee <pow+0x82>
 8017842:	4b7b      	ldr	r3, [pc, #492]	; (8017a30 <pow+0x2c4>)
 8017844:	2200      	movs	r2, #0
 8017846:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801784a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801784c:	b11b      	cbz	r3, 8017856 <pow+0xea>
 801784e:	f7fd fc47 	bl	80150e0 <__errno>
 8017852:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017854:	6003      	str	r3, [r0, #0]
 8017856:	ed9d 8b08 	vldr	d8, [sp, #32]
 801785a:	eeb0 0a48 	vmov.f32	s0, s16
 801785e:	eef0 0a68 	vmov.f32	s1, s17
 8017862:	b00d      	add	sp, #52	; 0x34
 8017864:	ecbd 8b04 	vpop	{d8-d9}
 8017868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801786c:	ec45 4b10 	vmov	d0, r4, r5
 8017870:	f000 ff0d 	bl	801868e <finite>
 8017874:	2800      	cmp	r0, #0
 8017876:	d0f0      	beq.n	801785a <pow+0xee>
 8017878:	4652      	mov	r2, sl
 801787a:	465b      	mov	r3, fp
 801787c:	4620      	mov	r0, r4
 801787e:	4629      	mov	r1, r5
 8017880:	f7e9 f93c 	bl	8000afc <__aeabi_dcmplt>
 8017884:	2800      	cmp	r0, #0
 8017886:	d0e8      	beq.n	801785a <pow+0xee>
 8017888:	2301      	movs	r3, #1
 801788a:	9302      	str	r3, [sp, #8]
 801788c:	4b67      	ldr	r3, [pc, #412]	; (8017a2c <pow+0x2c0>)
 801788e:	9303      	str	r3, [sp, #12]
 8017890:	f999 3000 	ldrsb.w	r3, [r9]
 8017894:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8017898:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801789c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80178a0:	b913      	cbnz	r3, 80178a8 <pow+0x13c>
 80178a2:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80178a6:	e7a2      	b.n	80177ee <pow+0x82>
 80178a8:	4962      	ldr	r1, [pc, #392]	; (8017a34 <pow+0x2c8>)
 80178aa:	2000      	movs	r0, #0
 80178ac:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80178b0:	2b02      	cmp	r3, #2
 80178b2:	d19c      	bne.n	80177ee <pow+0x82>
 80178b4:	f7fd fc14 	bl	80150e0 <__errno>
 80178b8:	2321      	movs	r3, #33	; 0x21
 80178ba:	6003      	str	r3, [r0, #0]
 80178bc:	e7c5      	b.n	801784a <pow+0xde>
 80178be:	eeb0 0a48 	vmov.f32	s0, s16
 80178c2:	eef0 0a68 	vmov.f32	s1, s17
 80178c6:	f000 fee2 	bl	801868e <finite>
 80178ca:	9000      	str	r0, [sp, #0]
 80178cc:	2800      	cmp	r0, #0
 80178ce:	f040 8081 	bne.w	80179d4 <pow+0x268>
 80178d2:	ec47 6b10 	vmov	d0, r6, r7
 80178d6:	f000 feda 	bl	801868e <finite>
 80178da:	2800      	cmp	r0, #0
 80178dc:	d07a      	beq.n	80179d4 <pow+0x268>
 80178de:	ec45 4b10 	vmov	d0, r4, r5
 80178e2:	f000 fed4 	bl	801868e <finite>
 80178e6:	2800      	cmp	r0, #0
 80178e8:	d074      	beq.n	80179d4 <pow+0x268>
 80178ea:	ec53 2b18 	vmov	r2, r3, d8
 80178ee:	ee18 0a10 	vmov	r0, s16
 80178f2:	4619      	mov	r1, r3
 80178f4:	f7e9 f92a 	bl	8000b4c <__aeabi_dcmpun>
 80178f8:	f999 9000 	ldrsb.w	r9, [r9]
 80178fc:	4b4b      	ldr	r3, [pc, #300]	; (8017a2c <pow+0x2c0>)
 80178fe:	b1b0      	cbz	r0, 801792e <pow+0x1c2>
 8017900:	2201      	movs	r2, #1
 8017902:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8017906:	9b00      	ldr	r3, [sp, #0]
 8017908:	930a      	str	r3, [sp, #40]	; 0x28
 801790a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801790e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8017912:	f1b9 0f00 	cmp.w	r9, #0
 8017916:	d0c4      	beq.n	80178a2 <pow+0x136>
 8017918:	4652      	mov	r2, sl
 801791a:	465b      	mov	r3, fp
 801791c:	4650      	mov	r0, sl
 801791e:	4659      	mov	r1, fp
 8017920:	f7e8 ffa4 	bl	800086c <__aeabi_ddiv>
 8017924:	f1b9 0f02 	cmp.w	r9, #2
 8017928:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801792c:	e7c1      	b.n	80178b2 <pow+0x146>
 801792e:	2203      	movs	r2, #3
 8017930:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8017934:	900a      	str	r0, [sp, #40]	; 0x28
 8017936:	4629      	mov	r1, r5
 8017938:	4620      	mov	r0, r4
 801793a:	2200      	movs	r2, #0
 801793c:	4b3e      	ldr	r3, [pc, #248]	; (8017a38 <pow+0x2cc>)
 801793e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8017942:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8017946:	f7e8 fe67 	bl	8000618 <__aeabi_dmul>
 801794a:	4604      	mov	r4, r0
 801794c:	460d      	mov	r5, r1
 801794e:	f1b9 0f00 	cmp.w	r9, #0
 8017952:	d124      	bne.n	801799e <pow+0x232>
 8017954:	4b39      	ldr	r3, [pc, #228]	; (8017a3c <pow+0x2d0>)
 8017956:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801795a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801795e:	4630      	mov	r0, r6
 8017960:	4652      	mov	r2, sl
 8017962:	465b      	mov	r3, fp
 8017964:	4639      	mov	r1, r7
 8017966:	f7e9 f8c9 	bl	8000afc <__aeabi_dcmplt>
 801796a:	2800      	cmp	r0, #0
 801796c:	d056      	beq.n	8017a1c <pow+0x2b0>
 801796e:	ec45 4b10 	vmov	d0, r4, r5
 8017972:	f000 fea1 	bl	80186b8 <rint>
 8017976:	4622      	mov	r2, r4
 8017978:	462b      	mov	r3, r5
 801797a:	ec51 0b10 	vmov	r0, r1, d0
 801797e:	f7e9 f8b3 	bl	8000ae8 <__aeabi_dcmpeq>
 8017982:	b920      	cbnz	r0, 801798e <pow+0x222>
 8017984:	4b2e      	ldr	r3, [pc, #184]	; (8017a40 <pow+0x2d4>)
 8017986:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801798a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801798e:	f998 3000 	ldrsb.w	r3, [r8]
 8017992:	2b02      	cmp	r3, #2
 8017994:	d142      	bne.n	8017a1c <pow+0x2b0>
 8017996:	f7fd fba3 	bl	80150e0 <__errno>
 801799a:	2322      	movs	r3, #34	; 0x22
 801799c:	e78d      	b.n	80178ba <pow+0x14e>
 801799e:	4b29      	ldr	r3, [pc, #164]	; (8017a44 <pow+0x2d8>)
 80179a0:	2200      	movs	r2, #0
 80179a2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80179a6:	4630      	mov	r0, r6
 80179a8:	4652      	mov	r2, sl
 80179aa:	465b      	mov	r3, fp
 80179ac:	4639      	mov	r1, r7
 80179ae:	f7e9 f8a5 	bl	8000afc <__aeabi_dcmplt>
 80179b2:	2800      	cmp	r0, #0
 80179b4:	d0eb      	beq.n	801798e <pow+0x222>
 80179b6:	ec45 4b10 	vmov	d0, r4, r5
 80179ba:	f000 fe7d 	bl	80186b8 <rint>
 80179be:	4622      	mov	r2, r4
 80179c0:	462b      	mov	r3, r5
 80179c2:	ec51 0b10 	vmov	r0, r1, d0
 80179c6:	f7e9 f88f 	bl	8000ae8 <__aeabi_dcmpeq>
 80179ca:	2800      	cmp	r0, #0
 80179cc:	d1df      	bne.n	801798e <pow+0x222>
 80179ce:	2200      	movs	r2, #0
 80179d0:	4b18      	ldr	r3, [pc, #96]	; (8017a34 <pow+0x2c8>)
 80179d2:	e7da      	b.n	801798a <pow+0x21e>
 80179d4:	2200      	movs	r2, #0
 80179d6:	2300      	movs	r3, #0
 80179d8:	ec51 0b18 	vmov	r0, r1, d8
 80179dc:	f7e9 f884 	bl	8000ae8 <__aeabi_dcmpeq>
 80179e0:	2800      	cmp	r0, #0
 80179e2:	f43f af3a 	beq.w	801785a <pow+0xee>
 80179e6:	ec47 6b10 	vmov	d0, r6, r7
 80179ea:	f000 fe50 	bl	801868e <finite>
 80179ee:	2800      	cmp	r0, #0
 80179f0:	f43f af33 	beq.w	801785a <pow+0xee>
 80179f4:	ec45 4b10 	vmov	d0, r4, r5
 80179f8:	f000 fe49 	bl	801868e <finite>
 80179fc:	2800      	cmp	r0, #0
 80179fe:	f43f af2c 	beq.w	801785a <pow+0xee>
 8017a02:	2304      	movs	r3, #4
 8017a04:	9302      	str	r3, [sp, #8]
 8017a06:	4b09      	ldr	r3, [pc, #36]	; (8017a2c <pow+0x2c0>)
 8017a08:	9303      	str	r3, [sp, #12]
 8017a0a:	2300      	movs	r3, #0
 8017a0c:	930a      	str	r3, [sp, #40]	; 0x28
 8017a0e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8017a12:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8017a16:	ed8d 9b08 	vstr	d9, [sp, #32]
 8017a1a:	e7b8      	b.n	801798e <pow+0x222>
 8017a1c:	a802      	add	r0, sp, #8
 8017a1e:	f000 fe3e 	bl	801869e <matherr>
 8017a22:	2800      	cmp	r0, #0
 8017a24:	f47f af11 	bne.w	801784a <pow+0xde>
 8017a28:	e7b5      	b.n	8017996 <pow+0x22a>
 8017a2a:	bf00      	nop
 8017a2c:	0802b608 	.word	0x0802b608
 8017a30:	3ff00000 	.word	0x3ff00000
 8017a34:	fff00000 	.word	0xfff00000
 8017a38:	3fe00000 	.word	0x3fe00000
 8017a3c:	47efffff 	.word	0x47efffff
 8017a40:	c7efffff 	.word	0xc7efffff
 8017a44:	7ff00000 	.word	0x7ff00000
 8017a48:	200002ac 	.word	0x200002ac

08017a4c <sqrt>:
 8017a4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017a50:	ed2d 8b02 	vpush	{d8}
 8017a54:	b08b      	sub	sp, #44	; 0x2c
 8017a56:	ec55 4b10 	vmov	r4, r5, d0
 8017a5a:	f000 fd5f 	bl	801851c <__ieee754_sqrt>
 8017a5e:	4b26      	ldr	r3, [pc, #152]	; (8017af8 <sqrt+0xac>)
 8017a60:	eeb0 8a40 	vmov.f32	s16, s0
 8017a64:	eef0 8a60 	vmov.f32	s17, s1
 8017a68:	f993 6000 	ldrsb.w	r6, [r3]
 8017a6c:	1c73      	adds	r3, r6, #1
 8017a6e:	d02a      	beq.n	8017ac6 <sqrt+0x7a>
 8017a70:	4622      	mov	r2, r4
 8017a72:	462b      	mov	r3, r5
 8017a74:	4620      	mov	r0, r4
 8017a76:	4629      	mov	r1, r5
 8017a78:	f7e9 f868 	bl	8000b4c <__aeabi_dcmpun>
 8017a7c:	4607      	mov	r7, r0
 8017a7e:	bb10      	cbnz	r0, 8017ac6 <sqrt+0x7a>
 8017a80:	f04f 0800 	mov.w	r8, #0
 8017a84:	f04f 0900 	mov.w	r9, #0
 8017a88:	4642      	mov	r2, r8
 8017a8a:	464b      	mov	r3, r9
 8017a8c:	4620      	mov	r0, r4
 8017a8e:	4629      	mov	r1, r5
 8017a90:	f7e9 f834 	bl	8000afc <__aeabi_dcmplt>
 8017a94:	b1b8      	cbz	r0, 8017ac6 <sqrt+0x7a>
 8017a96:	2301      	movs	r3, #1
 8017a98:	9300      	str	r3, [sp, #0]
 8017a9a:	4b18      	ldr	r3, [pc, #96]	; (8017afc <sqrt+0xb0>)
 8017a9c:	9301      	str	r3, [sp, #4]
 8017a9e:	9708      	str	r7, [sp, #32]
 8017aa0:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8017aa4:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8017aa8:	b9b6      	cbnz	r6, 8017ad8 <sqrt+0x8c>
 8017aaa:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8017aae:	4668      	mov	r0, sp
 8017ab0:	f000 fdf5 	bl	801869e <matherr>
 8017ab4:	b1d0      	cbz	r0, 8017aec <sqrt+0xa0>
 8017ab6:	9b08      	ldr	r3, [sp, #32]
 8017ab8:	b11b      	cbz	r3, 8017ac2 <sqrt+0x76>
 8017aba:	f7fd fb11 	bl	80150e0 <__errno>
 8017abe:	9b08      	ldr	r3, [sp, #32]
 8017ac0:	6003      	str	r3, [r0, #0]
 8017ac2:	ed9d 8b06 	vldr	d8, [sp, #24]
 8017ac6:	eeb0 0a48 	vmov.f32	s0, s16
 8017aca:	eef0 0a68 	vmov.f32	s1, s17
 8017ace:	b00b      	add	sp, #44	; 0x2c
 8017ad0:	ecbd 8b02 	vpop	{d8}
 8017ad4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017ad8:	4642      	mov	r2, r8
 8017ada:	464b      	mov	r3, r9
 8017adc:	4640      	mov	r0, r8
 8017ade:	4649      	mov	r1, r9
 8017ae0:	f7e8 fec4 	bl	800086c <__aeabi_ddiv>
 8017ae4:	2e02      	cmp	r6, #2
 8017ae6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8017aea:	d1e0      	bne.n	8017aae <sqrt+0x62>
 8017aec:	f7fd faf8 	bl	80150e0 <__errno>
 8017af0:	2321      	movs	r3, #33	; 0x21
 8017af2:	6003      	str	r3, [r0, #0]
 8017af4:	e7df      	b.n	8017ab6 <sqrt+0x6a>
 8017af6:	bf00      	nop
 8017af8:	200002ac 	.word	0x200002ac
 8017afc:	0802b60c 	.word	0x0802b60c

08017b00 <__ieee754_pow>:
 8017b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b04:	b091      	sub	sp, #68	; 0x44
 8017b06:	ed8d 1b00 	vstr	d1, [sp]
 8017b0a:	e9dd 2900 	ldrd	r2, r9, [sp]
 8017b0e:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8017b12:	ea58 0302 	orrs.w	r3, r8, r2
 8017b16:	ec57 6b10 	vmov	r6, r7, d0
 8017b1a:	f000 84be 	beq.w	801849a <__ieee754_pow+0x99a>
 8017b1e:	4b7a      	ldr	r3, [pc, #488]	; (8017d08 <__ieee754_pow+0x208>)
 8017b20:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8017b24:	429c      	cmp	r4, r3
 8017b26:	463d      	mov	r5, r7
 8017b28:	ee10 aa10 	vmov	sl, s0
 8017b2c:	dc09      	bgt.n	8017b42 <__ieee754_pow+0x42>
 8017b2e:	d103      	bne.n	8017b38 <__ieee754_pow+0x38>
 8017b30:	b93e      	cbnz	r6, 8017b42 <__ieee754_pow+0x42>
 8017b32:	45a0      	cmp	r8, r4
 8017b34:	dc0d      	bgt.n	8017b52 <__ieee754_pow+0x52>
 8017b36:	e001      	b.n	8017b3c <__ieee754_pow+0x3c>
 8017b38:	4598      	cmp	r8, r3
 8017b3a:	dc02      	bgt.n	8017b42 <__ieee754_pow+0x42>
 8017b3c:	4598      	cmp	r8, r3
 8017b3e:	d10e      	bne.n	8017b5e <__ieee754_pow+0x5e>
 8017b40:	b16a      	cbz	r2, 8017b5e <__ieee754_pow+0x5e>
 8017b42:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8017b46:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8017b4a:	ea54 030a 	orrs.w	r3, r4, sl
 8017b4e:	f000 84a4 	beq.w	801849a <__ieee754_pow+0x99a>
 8017b52:	486e      	ldr	r0, [pc, #440]	; (8017d0c <__ieee754_pow+0x20c>)
 8017b54:	b011      	add	sp, #68	; 0x44
 8017b56:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b5a:	f000 bda5 	b.w	80186a8 <nan>
 8017b5e:	2d00      	cmp	r5, #0
 8017b60:	da53      	bge.n	8017c0a <__ieee754_pow+0x10a>
 8017b62:	4b6b      	ldr	r3, [pc, #428]	; (8017d10 <__ieee754_pow+0x210>)
 8017b64:	4598      	cmp	r8, r3
 8017b66:	dc4d      	bgt.n	8017c04 <__ieee754_pow+0x104>
 8017b68:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8017b6c:	4598      	cmp	r8, r3
 8017b6e:	dd4c      	ble.n	8017c0a <__ieee754_pow+0x10a>
 8017b70:	ea4f 5328 	mov.w	r3, r8, asr #20
 8017b74:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8017b78:	2b14      	cmp	r3, #20
 8017b7a:	dd26      	ble.n	8017bca <__ieee754_pow+0xca>
 8017b7c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8017b80:	fa22 f103 	lsr.w	r1, r2, r3
 8017b84:	fa01 f303 	lsl.w	r3, r1, r3
 8017b88:	4293      	cmp	r3, r2
 8017b8a:	d13e      	bne.n	8017c0a <__ieee754_pow+0x10a>
 8017b8c:	f001 0101 	and.w	r1, r1, #1
 8017b90:	f1c1 0b02 	rsb	fp, r1, #2
 8017b94:	2a00      	cmp	r2, #0
 8017b96:	d15b      	bne.n	8017c50 <__ieee754_pow+0x150>
 8017b98:	4b5b      	ldr	r3, [pc, #364]	; (8017d08 <__ieee754_pow+0x208>)
 8017b9a:	4598      	cmp	r8, r3
 8017b9c:	d124      	bne.n	8017be8 <__ieee754_pow+0xe8>
 8017b9e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8017ba2:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8017ba6:	ea53 030a 	orrs.w	r3, r3, sl
 8017baa:	f000 8476 	beq.w	801849a <__ieee754_pow+0x99a>
 8017bae:	4b59      	ldr	r3, [pc, #356]	; (8017d14 <__ieee754_pow+0x214>)
 8017bb0:	429c      	cmp	r4, r3
 8017bb2:	dd2d      	ble.n	8017c10 <__ieee754_pow+0x110>
 8017bb4:	f1b9 0f00 	cmp.w	r9, #0
 8017bb8:	f280 8473 	bge.w	80184a2 <__ieee754_pow+0x9a2>
 8017bbc:	2000      	movs	r0, #0
 8017bbe:	2100      	movs	r1, #0
 8017bc0:	ec41 0b10 	vmov	d0, r0, r1
 8017bc4:	b011      	add	sp, #68	; 0x44
 8017bc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017bca:	2a00      	cmp	r2, #0
 8017bcc:	d13e      	bne.n	8017c4c <__ieee754_pow+0x14c>
 8017bce:	f1c3 0314 	rsb	r3, r3, #20
 8017bd2:	fa48 f103 	asr.w	r1, r8, r3
 8017bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8017bda:	4543      	cmp	r3, r8
 8017bdc:	f040 8469 	bne.w	80184b2 <__ieee754_pow+0x9b2>
 8017be0:	f001 0101 	and.w	r1, r1, #1
 8017be4:	f1c1 0b02 	rsb	fp, r1, #2
 8017be8:	4b4b      	ldr	r3, [pc, #300]	; (8017d18 <__ieee754_pow+0x218>)
 8017bea:	4598      	cmp	r8, r3
 8017bec:	d118      	bne.n	8017c20 <__ieee754_pow+0x120>
 8017bee:	f1b9 0f00 	cmp.w	r9, #0
 8017bf2:	f280 845a 	bge.w	80184aa <__ieee754_pow+0x9aa>
 8017bf6:	4948      	ldr	r1, [pc, #288]	; (8017d18 <__ieee754_pow+0x218>)
 8017bf8:	4632      	mov	r2, r6
 8017bfa:	463b      	mov	r3, r7
 8017bfc:	2000      	movs	r0, #0
 8017bfe:	f7e8 fe35 	bl	800086c <__aeabi_ddiv>
 8017c02:	e7dd      	b.n	8017bc0 <__ieee754_pow+0xc0>
 8017c04:	f04f 0b02 	mov.w	fp, #2
 8017c08:	e7c4      	b.n	8017b94 <__ieee754_pow+0x94>
 8017c0a:	f04f 0b00 	mov.w	fp, #0
 8017c0e:	e7c1      	b.n	8017b94 <__ieee754_pow+0x94>
 8017c10:	f1b9 0f00 	cmp.w	r9, #0
 8017c14:	dad2      	bge.n	8017bbc <__ieee754_pow+0xbc>
 8017c16:	e9dd 0300 	ldrd	r0, r3, [sp]
 8017c1a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8017c1e:	e7cf      	b.n	8017bc0 <__ieee754_pow+0xc0>
 8017c20:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8017c24:	d106      	bne.n	8017c34 <__ieee754_pow+0x134>
 8017c26:	4632      	mov	r2, r6
 8017c28:	463b      	mov	r3, r7
 8017c2a:	4610      	mov	r0, r2
 8017c2c:	4619      	mov	r1, r3
 8017c2e:	f7e8 fcf3 	bl	8000618 <__aeabi_dmul>
 8017c32:	e7c5      	b.n	8017bc0 <__ieee754_pow+0xc0>
 8017c34:	4b39      	ldr	r3, [pc, #228]	; (8017d1c <__ieee754_pow+0x21c>)
 8017c36:	4599      	cmp	r9, r3
 8017c38:	d10a      	bne.n	8017c50 <__ieee754_pow+0x150>
 8017c3a:	2d00      	cmp	r5, #0
 8017c3c:	db08      	blt.n	8017c50 <__ieee754_pow+0x150>
 8017c3e:	ec47 6b10 	vmov	d0, r6, r7
 8017c42:	b011      	add	sp, #68	; 0x44
 8017c44:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c48:	f000 bc68 	b.w	801851c <__ieee754_sqrt>
 8017c4c:	f04f 0b00 	mov.w	fp, #0
 8017c50:	ec47 6b10 	vmov	d0, r6, r7
 8017c54:	f000 fd12 	bl	801867c <fabs>
 8017c58:	ec51 0b10 	vmov	r0, r1, d0
 8017c5c:	f1ba 0f00 	cmp.w	sl, #0
 8017c60:	d127      	bne.n	8017cb2 <__ieee754_pow+0x1b2>
 8017c62:	b124      	cbz	r4, 8017c6e <__ieee754_pow+0x16e>
 8017c64:	4b2c      	ldr	r3, [pc, #176]	; (8017d18 <__ieee754_pow+0x218>)
 8017c66:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8017c6a:	429a      	cmp	r2, r3
 8017c6c:	d121      	bne.n	8017cb2 <__ieee754_pow+0x1b2>
 8017c6e:	f1b9 0f00 	cmp.w	r9, #0
 8017c72:	da05      	bge.n	8017c80 <__ieee754_pow+0x180>
 8017c74:	4602      	mov	r2, r0
 8017c76:	460b      	mov	r3, r1
 8017c78:	2000      	movs	r0, #0
 8017c7a:	4927      	ldr	r1, [pc, #156]	; (8017d18 <__ieee754_pow+0x218>)
 8017c7c:	f7e8 fdf6 	bl	800086c <__aeabi_ddiv>
 8017c80:	2d00      	cmp	r5, #0
 8017c82:	da9d      	bge.n	8017bc0 <__ieee754_pow+0xc0>
 8017c84:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8017c88:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8017c8c:	ea54 030b 	orrs.w	r3, r4, fp
 8017c90:	d108      	bne.n	8017ca4 <__ieee754_pow+0x1a4>
 8017c92:	4602      	mov	r2, r0
 8017c94:	460b      	mov	r3, r1
 8017c96:	4610      	mov	r0, r2
 8017c98:	4619      	mov	r1, r3
 8017c9a:	f7e8 fb05 	bl	80002a8 <__aeabi_dsub>
 8017c9e:	4602      	mov	r2, r0
 8017ca0:	460b      	mov	r3, r1
 8017ca2:	e7ac      	b.n	8017bfe <__ieee754_pow+0xfe>
 8017ca4:	f1bb 0f01 	cmp.w	fp, #1
 8017ca8:	d18a      	bne.n	8017bc0 <__ieee754_pow+0xc0>
 8017caa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017cae:	4619      	mov	r1, r3
 8017cb0:	e786      	b.n	8017bc0 <__ieee754_pow+0xc0>
 8017cb2:	0fed      	lsrs	r5, r5, #31
 8017cb4:	1e6b      	subs	r3, r5, #1
 8017cb6:	930d      	str	r3, [sp, #52]	; 0x34
 8017cb8:	ea5b 0303 	orrs.w	r3, fp, r3
 8017cbc:	d102      	bne.n	8017cc4 <__ieee754_pow+0x1c4>
 8017cbe:	4632      	mov	r2, r6
 8017cc0:	463b      	mov	r3, r7
 8017cc2:	e7e8      	b.n	8017c96 <__ieee754_pow+0x196>
 8017cc4:	4b16      	ldr	r3, [pc, #88]	; (8017d20 <__ieee754_pow+0x220>)
 8017cc6:	4598      	cmp	r8, r3
 8017cc8:	f340 80fe 	ble.w	8017ec8 <__ieee754_pow+0x3c8>
 8017ccc:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8017cd0:	4598      	cmp	r8, r3
 8017cd2:	dd0a      	ble.n	8017cea <__ieee754_pow+0x1ea>
 8017cd4:	4b0f      	ldr	r3, [pc, #60]	; (8017d14 <__ieee754_pow+0x214>)
 8017cd6:	429c      	cmp	r4, r3
 8017cd8:	dc0d      	bgt.n	8017cf6 <__ieee754_pow+0x1f6>
 8017cda:	f1b9 0f00 	cmp.w	r9, #0
 8017cde:	f6bf af6d 	bge.w	8017bbc <__ieee754_pow+0xbc>
 8017ce2:	a307      	add	r3, pc, #28	; (adr r3, 8017d00 <__ieee754_pow+0x200>)
 8017ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017ce8:	e79f      	b.n	8017c2a <__ieee754_pow+0x12a>
 8017cea:	4b0e      	ldr	r3, [pc, #56]	; (8017d24 <__ieee754_pow+0x224>)
 8017cec:	429c      	cmp	r4, r3
 8017cee:	ddf4      	ble.n	8017cda <__ieee754_pow+0x1da>
 8017cf0:	4b09      	ldr	r3, [pc, #36]	; (8017d18 <__ieee754_pow+0x218>)
 8017cf2:	429c      	cmp	r4, r3
 8017cf4:	dd18      	ble.n	8017d28 <__ieee754_pow+0x228>
 8017cf6:	f1b9 0f00 	cmp.w	r9, #0
 8017cfa:	dcf2      	bgt.n	8017ce2 <__ieee754_pow+0x1e2>
 8017cfc:	e75e      	b.n	8017bbc <__ieee754_pow+0xbc>
 8017cfe:	bf00      	nop
 8017d00:	8800759c 	.word	0x8800759c
 8017d04:	7e37e43c 	.word	0x7e37e43c
 8017d08:	7ff00000 	.word	0x7ff00000
 8017d0c:	0802b4d9 	.word	0x0802b4d9
 8017d10:	433fffff 	.word	0x433fffff
 8017d14:	3fefffff 	.word	0x3fefffff
 8017d18:	3ff00000 	.word	0x3ff00000
 8017d1c:	3fe00000 	.word	0x3fe00000
 8017d20:	41e00000 	.word	0x41e00000
 8017d24:	3feffffe 	.word	0x3feffffe
 8017d28:	2200      	movs	r2, #0
 8017d2a:	4b63      	ldr	r3, [pc, #396]	; (8017eb8 <__ieee754_pow+0x3b8>)
 8017d2c:	f7e8 fabc 	bl	80002a8 <__aeabi_dsub>
 8017d30:	a355      	add	r3, pc, #340	; (adr r3, 8017e88 <__ieee754_pow+0x388>)
 8017d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017d36:	4604      	mov	r4, r0
 8017d38:	460d      	mov	r5, r1
 8017d3a:	f7e8 fc6d 	bl	8000618 <__aeabi_dmul>
 8017d3e:	a354      	add	r3, pc, #336	; (adr r3, 8017e90 <__ieee754_pow+0x390>)
 8017d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017d44:	4606      	mov	r6, r0
 8017d46:	460f      	mov	r7, r1
 8017d48:	4620      	mov	r0, r4
 8017d4a:	4629      	mov	r1, r5
 8017d4c:	f7e8 fc64 	bl	8000618 <__aeabi_dmul>
 8017d50:	2200      	movs	r2, #0
 8017d52:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017d56:	4b59      	ldr	r3, [pc, #356]	; (8017ebc <__ieee754_pow+0x3bc>)
 8017d58:	4620      	mov	r0, r4
 8017d5a:	4629      	mov	r1, r5
 8017d5c:	f7e8 fc5c 	bl	8000618 <__aeabi_dmul>
 8017d60:	4602      	mov	r2, r0
 8017d62:	460b      	mov	r3, r1
 8017d64:	a14c      	add	r1, pc, #304	; (adr r1, 8017e98 <__ieee754_pow+0x398>)
 8017d66:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017d6a:	f7e8 fa9d 	bl	80002a8 <__aeabi_dsub>
 8017d6e:	4622      	mov	r2, r4
 8017d70:	462b      	mov	r3, r5
 8017d72:	f7e8 fc51 	bl	8000618 <__aeabi_dmul>
 8017d76:	4602      	mov	r2, r0
 8017d78:	460b      	mov	r3, r1
 8017d7a:	2000      	movs	r0, #0
 8017d7c:	4950      	ldr	r1, [pc, #320]	; (8017ec0 <__ieee754_pow+0x3c0>)
 8017d7e:	f7e8 fa93 	bl	80002a8 <__aeabi_dsub>
 8017d82:	4622      	mov	r2, r4
 8017d84:	462b      	mov	r3, r5
 8017d86:	4680      	mov	r8, r0
 8017d88:	4689      	mov	r9, r1
 8017d8a:	4620      	mov	r0, r4
 8017d8c:	4629      	mov	r1, r5
 8017d8e:	f7e8 fc43 	bl	8000618 <__aeabi_dmul>
 8017d92:	4602      	mov	r2, r0
 8017d94:	460b      	mov	r3, r1
 8017d96:	4640      	mov	r0, r8
 8017d98:	4649      	mov	r1, r9
 8017d9a:	f7e8 fc3d 	bl	8000618 <__aeabi_dmul>
 8017d9e:	a340      	add	r3, pc, #256	; (adr r3, 8017ea0 <__ieee754_pow+0x3a0>)
 8017da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017da4:	f7e8 fc38 	bl	8000618 <__aeabi_dmul>
 8017da8:	4602      	mov	r2, r0
 8017daa:	460b      	mov	r3, r1
 8017dac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017db0:	f7e8 fa7a 	bl	80002a8 <__aeabi_dsub>
 8017db4:	4602      	mov	r2, r0
 8017db6:	460b      	mov	r3, r1
 8017db8:	4604      	mov	r4, r0
 8017dba:	460d      	mov	r5, r1
 8017dbc:	4630      	mov	r0, r6
 8017dbe:	4639      	mov	r1, r7
 8017dc0:	f7e8 fa74 	bl	80002ac <__adddf3>
 8017dc4:	2000      	movs	r0, #0
 8017dc6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8017dca:	4632      	mov	r2, r6
 8017dcc:	463b      	mov	r3, r7
 8017dce:	f7e8 fa6b 	bl	80002a8 <__aeabi_dsub>
 8017dd2:	4602      	mov	r2, r0
 8017dd4:	460b      	mov	r3, r1
 8017dd6:	4620      	mov	r0, r4
 8017dd8:	4629      	mov	r1, r5
 8017dda:	f7e8 fa65 	bl	80002a8 <__aeabi_dsub>
 8017dde:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017de0:	f10b 33ff 	add.w	r3, fp, #4294967295
 8017de4:	4313      	orrs	r3, r2
 8017de6:	4606      	mov	r6, r0
 8017de8:	460f      	mov	r7, r1
 8017dea:	f040 81eb 	bne.w	80181c4 <__ieee754_pow+0x6c4>
 8017dee:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8017ea8 <__ieee754_pow+0x3a8>
 8017df2:	e9dd 4500 	ldrd	r4, r5, [sp]
 8017df6:	2400      	movs	r4, #0
 8017df8:	4622      	mov	r2, r4
 8017dfa:	462b      	mov	r3, r5
 8017dfc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017e00:	ed8d 7b02 	vstr	d7, [sp, #8]
 8017e04:	f7e8 fa50 	bl	80002a8 <__aeabi_dsub>
 8017e08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8017e0c:	f7e8 fc04 	bl	8000618 <__aeabi_dmul>
 8017e10:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017e14:	4680      	mov	r8, r0
 8017e16:	4689      	mov	r9, r1
 8017e18:	4630      	mov	r0, r6
 8017e1a:	4639      	mov	r1, r7
 8017e1c:	f7e8 fbfc 	bl	8000618 <__aeabi_dmul>
 8017e20:	4602      	mov	r2, r0
 8017e22:	460b      	mov	r3, r1
 8017e24:	4640      	mov	r0, r8
 8017e26:	4649      	mov	r1, r9
 8017e28:	f7e8 fa40 	bl	80002ac <__adddf3>
 8017e2c:	4622      	mov	r2, r4
 8017e2e:	462b      	mov	r3, r5
 8017e30:	4680      	mov	r8, r0
 8017e32:	4689      	mov	r9, r1
 8017e34:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8017e38:	f7e8 fbee 	bl	8000618 <__aeabi_dmul>
 8017e3c:	460b      	mov	r3, r1
 8017e3e:	4604      	mov	r4, r0
 8017e40:	460d      	mov	r5, r1
 8017e42:	4602      	mov	r2, r0
 8017e44:	4649      	mov	r1, r9
 8017e46:	4640      	mov	r0, r8
 8017e48:	e9cd 4500 	strd	r4, r5, [sp]
 8017e4c:	f7e8 fa2e 	bl	80002ac <__adddf3>
 8017e50:	4b1c      	ldr	r3, [pc, #112]	; (8017ec4 <__ieee754_pow+0x3c4>)
 8017e52:	4299      	cmp	r1, r3
 8017e54:	4606      	mov	r6, r0
 8017e56:	460f      	mov	r7, r1
 8017e58:	468b      	mov	fp, r1
 8017e5a:	f340 82f7 	ble.w	801844c <__ieee754_pow+0x94c>
 8017e5e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8017e62:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8017e66:	4303      	orrs	r3, r0
 8017e68:	f000 81ea 	beq.w	8018240 <__ieee754_pow+0x740>
 8017e6c:	a310      	add	r3, pc, #64	; (adr r3, 8017eb0 <__ieee754_pow+0x3b0>)
 8017e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017e72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017e76:	f7e8 fbcf 	bl	8000618 <__aeabi_dmul>
 8017e7a:	a30d      	add	r3, pc, #52	; (adr r3, 8017eb0 <__ieee754_pow+0x3b0>)
 8017e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017e80:	e6d5      	b.n	8017c2e <__ieee754_pow+0x12e>
 8017e82:	bf00      	nop
 8017e84:	f3af 8000 	nop.w
 8017e88:	60000000 	.word	0x60000000
 8017e8c:	3ff71547 	.word	0x3ff71547
 8017e90:	f85ddf44 	.word	0xf85ddf44
 8017e94:	3e54ae0b 	.word	0x3e54ae0b
 8017e98:	55555555 	.word	0x55555555
 8017e9c:	3fd55555 	.word	0x3fd55555
 8017ea0:	652b82fe 	.word	0x652b82fe
 8017ea4:	3ff71547 	.word	0x3ff71547
 8017ea8:	00000000 	.word	0x00000000
 8017eac:	bff00000 	.word	0xbff00000
 8017eb0:	8800759c 	.word	0x8800759c
 8017eb4:	7e37e43c 	.word	0x7e37e43c
 8017eb8:	3ff00000 	.word	0x3ff00000
 8017ebc:	3fd00000 	.word	0x3fd00000
 8017ec0:	3fe00000 	.word	0x3fe00000
 8017ec4:	408fffff 	.word	0x408fffff
 8017ec8:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8017ecc:	f04f 0200 	mov.w	r2, #0
 8017ed0:	da05      	bge.n	8017ede <__ieee754_pow+0x3de>
 8017ed2:	4bd3      	ldr	r3, [pc, #844]	; (8018220 <__ieee754_pow+0x720>)
 8017ed4:	f7e8 fba0 	bl	8000618 <__aeabi_dmul>
 8017ed8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8017edc:	460c      	mov	r4, r1
 8017ede:	1523      	asrs	r3, r4, #20
 8017ee0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8017ee4:	4413      	add	r3, r2
 8017ee6:	9309      	str	r3, [sp, #36]	; 0x24
 8017ee8:	4bce      	ldr	r3, [pc, #824]	; (8018224 <__ieee754_pow+0x724>)
 8017eea:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8017eee:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8017ef2:	429c      	cmp	r4, r3
 8017ef4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8017ef8:	dd08      	ble.n	8017f0c <__ieee754_pow+0x40c>
 8017efa:	4bcb      	ldr	r3, [pc, #812]	; (8018228 <__ieee754_pow+0x728>)
 8017efc:	429c      	cmp	r4, r3
 8017efe:	f340 815e 	ble.w	80181be <__ieee754_pow+0x6be>
 8017f02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017f04:	3301      	adds	r3, #1
 8017f06:	9309      	str	r3, [sp, #36]	; 0x24
 8017f08:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8017f0c:	f04f 0a00 	mov.w	sl, #0
 8017f10:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8017f14:	930c      	str	r3, [sp, #48]	; 0x30
 8017f16:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017f18:	4bc4      	ldr	r3, [pc, #784]	; (801822c <__ieee754_pow+0x72c>)
 8017f1a:	4413      	add	r3, r2
 8017f1c:	ed93 7b00 	vldr	d7, [r3]
 8017f20:	4629      	mov	r1, r5
 8017f22:	ec53 2b17 	vmov	r2, r3, d7
 8017f26:	ed8d 7b06 	vstr	d7, [sp, #24]
 8017f2a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8017f2e:	f7e8 f9bb 	bl	80002a8 <__aeabi_dsub>
 8017f32:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8017f36:	4606      	mov	r6, r0
 8017f38:	460f      	mov	r7, r1
 8017f3a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8017f3e:	f7e8 f9b5 	bl	80002ac <__adddf3>
 8017f42:	4602      	mov	r2, r0
 8017f44:	460b      	mov	r3, r1
 8017f46:	2000      	movs	r0, #0
 8017f48:	49b9      	ldr	r1, [pc, #740]	; (8018230 <__ieee754_pow+0x730>)
 8017f4a:	f7e8 fc8f 	bl	800086c <__aeabi_ddiv>
 8017f4e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8017f52:	4602      	mov	r2, r0
 8017f54:	460b      	mov	r3, r1
 8017f56:	4630      	mov	r0, r6
 8017f58:	4639      	mov	r1, r7
 8017f5a:	f7e8 fb5d 	bl	8000618 <__aeabi_dmul>
 8017f5e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8017f62:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8017f66:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8017f6a:	2300      	movs	r3, #0
 8017f6c:	9302      	str	r3, [sp, #8]
 8017f6e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8017f72:	106d      	asrs	r5, r5, #1
 8017f74:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8017f78:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8017f7c:	2200      	movs	r2, #0
 8017f7e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8017f82:	4640      	mov	r0, r8
 8017f84:	4649      	mov	r1, r9
 8017f86:	4614      	mov	r4, r2
 8017f88:	461d      	mov	r5, r3
 8017f8a:	f7e8 fb45 	bl	8000618 <__aeabi_dmul>
 8017f8e:	4602      	mov	r2, r0
 8017f90:	460b      	mov	r3, r1
 8017f92:	4630      	mov	r0, r6
 8017f94:	4639      	mov	r1, r7
 8017f96:	f7e8 f987 	bl	80002a8 <__aeabi_dsub>
 8017f9a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8017f9e:	4606      	mov	r6, r0
 8017fa0:	460f      	mov	r7, r1
 8017fa2:	4620      	mov	r0, r4
 8017fa4:	4629      	mov	r1, r5
 8017fa6:	f7e8 f97f 	bl	80002a8 <__aeabi_dsub>
 8017faa:	4602      	mov	r2, r0
 8017fac:	460b      	mov	r3, r1
 8017fae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017fb2:	f7e8 f979 	bl	80002a8 <__aeabi_dsub>
 8017fb6:	4642      	mov	r2, r8
 8017fb8:	464b      	mov	r3, r9
 8017fba:	f7e8 fb2d 	bl	8000618 <__aeabi_dmul>
 8017fbe:	4602      	mov	r2, r0
 8017fc0:	460b      	mov	r3, r1
 8017fc2:	4630      	mov	r0, r6
 8017fc4:	4639      	mov	r1, r7
 8017fc6:	f7e8 f96f 	bl	80002a8 <__aeabi_dsub>
 8017fca:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8017fce:	f7e8 fb23 	bl	8000618 <__aeabi_dmul>
 8017fd2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8017fd6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8017fda:	4610      	mov	r0, r2
 8017fdc:	4619      	mov	r1, r3
 8017fde:	f7e8 fb1b 	bl	8000618 <__aeabi_dmul>
 8017fe2:	a37b      	add	r3, pc, #492	; (adr r3, 80181d0 <__ieee754_pow+0x6d0>)
 8017fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017fe8:	4604      	mov	r4, r0
 8017fea:	460d      	mov	r5, r1
 8017fec:	f7e8 fb14 	bl	8000618 <__aeabi_dmul>
 8017ff0:	a379      	add	r3, pc, #484	; (adr r3, 80181d8 <__ieee754_pow+0x6d8>)
 8017ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017ff6:	f7e8 f959 	bl	80002ac <__adddf3>
 8017ffa:	4622      	mov	r2, r4
 8017ffc:	462b      	mov	r3, r5
 8017ffe:	f7e8 fb0b 	bl	8000618 <__aeabi_dmul>
 8018002:	a377      	add	r3, pc, #476	; (adr r3, 80181e0 <__ieee754_pow+0x6e0>)
 8018004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018008:	f7e8 f950 	bl	80002ac <__adddf3>
 801800c:	4622      	mov	r2, r4
 801800e:	462b      	mov	r3, r5
 8018010:	f7e8 fb02 	bl	8000618 <__aeabi_dmul>
 8018014:	a374      	add	r3, pc, #464	; (adr r3, 80181e8 <__ieee754_pow+0x6e8>)
 8018016:	e9d3 2300 	ldrd	r2, r3, [r3]
 801801a:	f7e8 f947 	bl	80002ac <__adddf3>
 801801e:	4622      	mov	r2, r4
 8018020:	462b      	mov	r3, r5
 8018022:	f7e8 faf9 	bl	8000618 <__aeabi_dmul>
 8018026:	a372      	add	r3, pc, #456	; (adr r3, 80181f0 <__ieee754_pow+0x6f0>)
 8018028:	e9d3 2300 	ldrd	r2, r3, [r3]
 801802c:	f7e8 f93e 	bl	80002ac <__adddf3>
 8018030:	4622      	mov	r2, r4
 8018032:	462b      	mov	r3, r5
 8018034:	f7e8 faf0 	bl	8000618 <__aeabi_dmul>
 8018038:	a36f      	add	r3, pc, #444	; (adr r3, 80181f8 <__ieee754_pow+0x6f8>)
 801803a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801803e:	f7e8 f935 	bl	80002ac <__adddf3>
 8018042:	4622      	mov	r2, r4
 8018044:	4606      	mov	r6, r0
 8018046:	460f      	mov	r7, r1
 8018048:	462b      	mov	r3, r5
 801804a:	4620      	mov	r0, r4
 801804c:	4629      	mov	r1, r5
 801804e:	f7e8 fae3 	bl	8000618 <__aeabi_dmul>
 8018052:	4602      	mov	r2, r0
 8018054:	460b      	mov	r3, r1
 8018056:	4630      	mov	r0, r6
 8018058:	4639      	mov	r1, r7
 801805a:	f7e8 fadd 	bl	8000618 <__aeabi_dmul>
 801805e:	4642      	mov	r2, r8
 8018060:	4604      	mov	r4, r0
 8018062:	460d      	mov	r5, r1
 8018064:	464b      	mov	r3, r9
 8018066:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801806a:	f7e8 f91f 	bl	80002ac <__adddf3>
 801806e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8018072:	f7e8 fad1 	bl	8000618 <__aeabi_dmul>
 8018076:	4622      	mov	r2, r4
 8018078:	462b      	mov	r3, r5
 801807a:	f7e8 f917 	bl	80002ac <__adddf3>
 801807e:	4642      	mov	r2, r8
 8018080:	4606      	mov	r6, r0
 8018082:	460f      	mov	r7, r1
 8018084:	464b      	mov	r3, r9
 8018086:	4640      	mov	r0, r8
 8018088:	4649      	mov	r1, r9
 801808a:	f7e8 fac5 	bl	8000618 <__aeabi_dmul>
 801808e:	2200      	movs	r2, #0
 8018090:	4b68      	ldr	r3, [pc, #416]	; (8018234 <__ieee754_pow+0x734>)
 8018092:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8018096:	f7e8 f909 	bl	80002ac <__adddf3>
 801809a:	4632      	mov	r2, r6
 801809c:	463b      	mov	r3, r7
 801809e:	f7e8 f905 	bl	80002ac <__adddf3>
 80180a2:	9802      	ldr	r0, [sp, #8]
 80180a4:	460d      	mov	r5, r1
 80180a6:	4604      	mov	r4, r0
 80180a8:	4602      	mov	r2, r0
 80180aa:	460b      	mov	r3, r1
 80180ac:	4640      	mov	r0, r8
 80180ae:	4649      	mov	r1, r9
 80180b0:	f7e8 fab2 	bl	8000618 <__aeabi_dmul>
 80180b4:	2200      	movs	r2, #0
 80180b6:	4680      	mov	r8, r0
 80180b8:	4689      	mov	r9, r1
 80180ba:	4b5e      	ldr	r3, [pc, #376]	; (8018234 <__ieee754_pow+0x734>)
 80180bc:	4620      	mov	r0, r4
 80180be:	4629      	mov	r1, r5
 80180c0:	f7e8 f8f2 	bl	80002a8 <__aeabi_dsub>
 80180c4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80180c8:	f7e8 f8ee 	bl	80002a8 <__aeabi_dsub>
 80180cc:	4602      	mov	r2, r0
 80180ce:	460b      	mov	r3, r1
 80180d0:	4630      	mov	r0, r6
 80180d2:	4639      	mov	r1, r7
 80180d4:	f7e8 f8e8 	bl	80002a8 <__aeabi_dsub>
 80180d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80180dc:	f7e8 fa9c 	bl	8000618 <__aeabi_dmul>
 80180e0:	4622      	mov	r2, r4
 80180e2:	4606      	mov	r6, r0
 80180e4:	460f      	mov	r7, r1
 80180e6:	462b      	mov	r3, r5
 80180e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80180ec:	f7e8 fa94 	bl	8000618 <__aeabi_dmul>
 80180f0:	4602      	mov	r2, r0
 80180f2:	460b      	mov	r3, r1
 80180f4:	4630      	mov	r0, r6
 80180f6:	4639      	mov	r1, r7
 80180f8:	f7e8 f8d8 	bl	80002ac <__adddf3>
 80180fc:	4606      	mov	r6, r0
 80180fe:	460f      	mov	r7, r1
 8018100:	4602      	mov	r2, r0
 8018102:	460b      	mov	r3, r1
 8018104:	4640      	mov	r0, r8
 8018106:	4649      	mov	r1, r9
 8018108:	f7e8 f8d0 	bl	80002ac <__adddf3>
 801810c:	9802      	ldr	r0, [sp, #8]
 801810e:	a33c      	add	r3, pc, #240	; (adr r3, 8018200 <__ieee754_pow+0x700>)
 8018110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018114:	4604      	mov	r4, r0
 8018116:	460d      	mov	r5, r1
 8018118:	f7e8 fa7e 	bl	8000618 <__aeabi_dmul>
 801811c:	4642      	mov	r2, r8
 801811e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8018122:	464b      	mov	r3, r9
 8018124:	4620      	mov	r0, r4
 8018126:	4629      	mov	r1, r5
 8018128:	f7e8 f8be 	bl	80002a8 <__aeabi_dsub>
 801812c:	4602      	mov	r2, r0
 801812e:	460b      	mov	r3, r1
 8018130:	4630      	mov	r0, r6
 8018132:	4639      	mov	r1, r7
 8018134:	f7e8 f8b8 	bl	80002a8 <__aeabi_dsub>
 8018138:	a333      	add	r3, pc, #204	; (adr r3, 8018208 <__ieee754_pow+0x708>)
 801813a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801813e:	f7e8 fa6b 	bl	8000618 <__aeabi_dmul>
 8018142:	a333      	add	r3, pc, #204	; (adr r3, 8018210 <__ieee754_pow+0x710>)
 8018144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018148:	4606      	mov	r6, r0
 801814a:	460f      	mov	r7, r1
 801814c:	4620      	mov	r0, r4
 801814e:	4629      	mov	r1, r5
 8018150:	f7e8 fa62 	bl	8000618 <__aeabi_dmul>
 8018154:	4602      	mov	r2, r0
 8018156:	460b      	mov	r3, r1
 8018158:	4630      	mov	r0, r6
 801815a:	4639      	mov	r1, r7
 801815c:	f7e8 f8a6 	bl	80002ac <__adddf3>
 8018160:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018162:	4b35      	ldr	r3, [pc, #212]	; (8018238 <__ieee754_pow+0x738>)
 8018164:	4413      	add	r3, r2
 8018166:	e9d3 2300 	ldrd	r2, r3, [r3]
 801816a:	f7e8 f89f 	bl	80002ac <__adddf3>
 801816e:	4604      	mov	r4, r0
 8018170:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018172:	460d      	mov	r5, r1
 8018174:	f7e8 f9e6 	bl	8000544 <__aeabi_i2d>
 8018178:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801817a:	4b30      	ldr	r3, [pc, #192]	; (801823c <__ieee754_pow+0x73c>)
 801817c:	4413      	add	r3, r2
 801817e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8018182:	4606      	mov	r6, r0
 8018184:	460f      	mov	r7, r1
 8018186:	4622      	mov	r2, r4
 8018188:	462b      	mov	r3, r5
 801818a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801818e:	f7e8 f88d 	bl	80002ac <__adddf3>
 8018192:	4642      	mov	r2, r8
 8018194:	464b      	mov	r3, r9
 8018196:	f7e8 f889 	bl	80002ac <__adddf3>
 801819a:	4632      	mov	r2, r6
 801819c:	463b      	mov	r3, r7
 801819e:	f7e8 f885 	bl	80002ac <__adddf3>
 80181a2:	9802      	ldr	r0, [sp, #8]
 80181a4:	4632      	mov	r2, r6
 80181a6:	463b      	mov	r3, r7
 80181a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80181ac:	f7e8 f87c 	bl	80002a8 <__aeabi_dsub>
 80181b0:	4642      	mov	r2, r8
 80181b2:	464b      	mov	r3, r9
 80181b4:	f7e8 f878 	bl	80002a8 <__aeabi_dsub>
 80181b8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80181bc:	e607      	b.n	8017dce <__ieee754_pow+0x2ce>
 80181be:	f04f 0a01 	mov.w	sl, #1
 80181c2:	e6a5      	b.n	8017f10 <__ieee754_pow+0x410>
 80181c4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8018218 <__ieee754_pow+0x718>
 80181c8:	e613      	b.n	8017df2 <__ieee754_pow+0x2f2>
 80181ca:	bf00      	nop
 80181cc:	f3af 8000 	nop.w
 80181d0:	4a454eef 	.word	0x4a454eef
 80181d4:	3fca7e28 	.word	0x3fca7e28
 80181d8:	93c9db65 	.word	0x93c9db65
 80181dc:	3fcd864a 	.word	0x3fcd864a
 80181e0:	a91d4101 	.word	0xa91d4101
 80181e4:	3fd17460 	.word	0x3fd17460
 80181e8:	518f264d 	.word	0x518f264d
 80181ec:	3fd55555 	.word	0x3fd55555
 80181f0:	db6fabff 	.word	0xdb6fabff
 80181f4:	3fdb6db6 	.word	0x3fdb6db6
 80181f8:	33333303 	.word	0x33333303
 80181fc:	3fe33333 	.word	0x3fe33333
 8018200:	e0000000 	.word	0xe0000000
 8018204:	3feec709 	.word	0x3feec709
 8018208:	dc3a03fd 	.word	0xdc3a03fd
 801820c:	3feec709 	.word	0x3feec709
 8018210:	145b01f5 	.word	0x145b01f5
 8018214:	be3e2fe0 	.word	0xbe3e2fe0
 8018218:	00000000 	.word	0x00000000
 801821c:	3ff00000 	.word	0x3ff00000
 8018220:	43400000 	.word	0x43400000
 8018224:	0003988e 	.word	0x0003988e
 8018228:	000bb679 	.word	0x000bb679
 801822c:	0802b618 	.word	0x0802b618
 8018230:	3ff00000 	.word	0x3ff00000
 8018234:	40080000 	.word	0x40080000
 8018238:	0802b638 	.word	0x0802b638
 801823c:	0802b628 	.word	0x0802b628
 8018240:	a3b4      	add	r3, pc, #720	; (adr r3, 8018514 <__ieee754_pow+0xa14>)
 8018242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018246:	4640      	mov	r0, r8
 8018248:	4649      	mov	r1, r9
 801824a:	f7e8 f82f 	bl	80002ac <__adddf3>
 801824e:	4622      	mov	r2, r4
 8018250:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8018254:	462b      	mov	r3, r5
 8018256:	4630      	mov	r0, r6
 8018258:	4639      	mov	r1, r7
 801825a:	f7e8 f825 	bl	80002a8 <__aeabi_dsub>
 801825e:	4602      	mov	r2, r0
 8018260:	460b      	mov	r3, r1
 8018262:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8018266:	f7e8 fc67 	bl	8000b38 <__aeabi_dcmpgt>
 801826a:	2800      	cmp	r0, #0
 801826c:	f47f adfe 	bne.w	8017e6c <__ieee754_pow+0x36c>
 8018270:	4aa3      	ldr	r2, [pc, #652]	; (8018500 <__ieee754_pow+0xa00>)
 8018272:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8018276:	4293      	cmp	r3, r2
 8018278:	f340 810a 	ble.w	8018490 <__ieee754_pow+0x990>
 801827c:	151b      	asrs	r3, r3, #20
 801827e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8018282:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8018286:	fa4a f303 	asr.w	r3, sl, r3
 801828a:	445b      	add	r3, fp
 801828c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8018290:	4e9c      	ldr	r6, [pc, #624]	; (8018504 <__ieee754_pow+0xa04>)
 8018292:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8018296:	4116      	asrs	r6, r2
 8018298:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 801829c:	2000      	movs	r0, #0
 801829e:	ea23 0106 	bic.w	r1, r3, r6
 80182a2:	f1c2 0214 	rsb	r2, r2, #20
 80182a6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80182aa:	fa4a fa02 	asr.w	sl, sl, r2
 80182ae:	f1bb 0f00 	cmp.w	fp, #0
 80182b2:	4602      	mov	r2, r0
 80182b4:	460b      	mov	r3, r1
 80182b6:	4620      	mov	r0, r4
 80182b8:	4629      	mov	r1, r5
 80182ba:	bfb8      	it	lt
 80182bc:	f1ca 0a00 	rsblt	sl, sl, #0
 80182c0:	f7e7 fff2 	bl	80002a8 <__aeabi_dsub>
 80182c4:	e9cd 0100 	strd	r0, r1, [sp]
 80182c8:	4642      	mov	r2, r8
 80182ca:	464b      	mov	r3, r9
 80182cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80182d0:	f7e7 ffec 	bl	80002ac <__adddf3>
 80182d4:	2000      	movs	r0, #0
 80182d6:	a378      	add	r3, pc, #480	; (adr r3, 80184b8 <__ieee754_pow+0x9b8>)
 80182d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80182dc:	4604      	mov	r4, r0
 80182de:	460d      	mov	r5, r1
 80182e0:	f7e8 f99a 	bl	8000618 <__aeabi_dmul>
 80182e4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80182e8:	4606      	mov	r6, r0
 80182ea:	460f      	mov	r7, r1
 80182ec:	4620      	mov	r0, r4
 80182ee:	4629      	mov	r1, r5
 80182f0:	f7e7 ffda 	bl	80002a8 <__aeabi_dsub>
 80182f4:	4602      	mov	r2, r0
 80182f6:	460b      	mov	r3, r1
 80182f8:	4640      	mov	r0, r8
 80182fa:	4649      	mov	r1, r9
 80182fc:	f7e7 ffd4 	bl	80002a8 <__aeabi_dsub>
 8018300:	a36f      	add	r3, pc, #444	; (adr r3, 80184c0 <__ieee754_pow+0x9c0>)
 8018302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018306:	f7e8 f987 	bl	8000618 <__aeabi_dmul>
 801830a:	a36f      	add	r3, pc, #444	; (adr r3, 80184c8 <__ieee754_pow+0x9c8>)
 801830c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018310:	4680      	mov	r8, r0
 8018312:	4689      	mov	r9, r1
 8018314:	4620      	mov	r0, r4
 8018316:	4629      	mov	r1, r5
 8018318:	f7e8 f97e 	bl	8000618 <__aeabi_dmul>
 801831c:	4602      	mov	r2, r0
 801831e:	460b      	mov	r3, r1
 8018320:	4640      	mov	r0, r8
 8018322:	4649      	mov	r1, r9
 8018324:	f7e7 ffc2 	bl	80002ac <__adddf3>
 8018328:	4604      	mov	r4, r0
 801832a:	460d      	mov	r5, r1
 801832c:	4602      	mov	r2, r0
 801832e:	460b      	mov	r3, r1
 8018330:	4630      	mov	r0, r6
 8018332:	4639      	mov	r1, r7
 8018334:	f7e7 ffba 	bl	80002ac <__adddf3>
 8018338:	4632      	mov	r2, r6
 801833a:	463b      	mov	r3, r7
 801833c:	4680      	mov	r8, r0
 801833e:	4689      	mov	r9, r1
 8018340:	f7e7 ffb2 	bl	80002a8 <__aeabi_dsub>
 8018344:	4602      	mov	r2, r0
 8018346:	460b      	mov	r3, r1
 8018348:	4620      	mov	r0, r4
 801834a:	4629      	mov	r1, r5
 801834c:	f7e7 ffac 	bl	80002a8 <__aeabi_dsub>
 8018350:	4642      	mov	r2, r8
 8018352:	4606      	mov	r6, r0
 8018354:	460f      	mov	r7, r1
 8018356:	464b      	mov	r3, r9
 8018358:	4640      	mov	r0, r8
 801835a:	4649      	mov	r1, r9
 801835c:	f7e8 f95c 	bl	8000618 <__aeabi_dmul>
 8018360:	a35b      	add	r3, pc, #364	; (adr r3, 80184d0 <__ieee754_pow+0x9d0>)
 8018362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018366:	4604      	mov	r4, r0
 8018368:	460d      	mov	r5, r1
 801836a:	f7e8 f955 	bl	8000618 <__aeabi_dmul>
 801836e:	a35a      	add	r3, pc, #360	; (adr r3, 80184d8 <__ieee754_pow+0x9d8>)
 8018370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018374:	f7e7 ff98 	bl	80002a8 <__aeabi_dsub>
 8018378:	4622      	mov	r2, r4
 801837a:	462b      	mov	r3, r5
 801837c:	f7e8 f94c 	bl	8000618 <__aeabi_dmul>
 8018380:	a357      	add	r3, pc, #348	; (adr r3, 80184e0 <__ieee754_pow+0x9e0>)
 8018382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018386:	f7e7 ff91 	bl	80002ac <__adddf3>
 801838a:	4622      	mov	r2, r4
 801838c:	462b      	mov	r3, r5
 801838e:	f7e8 f943 	bl	8000618 <__aeabi_dmul>
 8018392:	a355      	add	r3, pc, #340	; (adr r3, 80184e8 <__ieee754_pow+0x9e8>)
 8018394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018398:	f7e7 ff86 	bl	80002a8 <__aeabi_dsub>
 801839c:	4622      	mov	r2, r4
 801839e:	462b      	mov	r3, r5
 80183a0:	f7e8 f93a 	bl	8000618 <__aeabi_dmul>
 80183a4:	a352      	add	r3, pc, #328	; (adr r3, 80184f0 <__ieee754_pow+0x9f0>)
 80183a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80183aa:	f7e7 ff7f 	bl	80002ac <__adddf3>
 80183ae:	4622      	mov	r2, r4
 80183b0:	462b      	mov	r3, r5
 80183b2:	f7e8 f931 	bl	8000618 <__aeabi_dmul>
 80183b6:	4602      	mov	r2, r0
 80183b8:	460b      	mov	r3, r1
 80183ba:	4640      	mov	r0, r8
 80183bc:	4649      	mov	r1, r9
 80183be:	f7e7 ff73 	bl	80002a8 <__aeabi_dsub>
 80183c2:	4604      	mov	r4, r0
 80183c4:	460d      	mov	r5, r1
 80183c6:	4602      	mov	r2, r0
 80183c8:	460b      	mov	r3, r1
 80183ca:	4640      	mov	r0, r8
 80183cc:	4649      	mov	r1, r9
 80183ce:	f7e8 f923 	bl	8000618 <__aeabi_dmul>
 80183d2:	2200      	movs	r2, #0
 80183d4:	e9cd 0100 	strd	r0, r1, [sp]
 80183d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80183dc:	4620      	mov	r0, r4
 80183de:	4629      	mov	r1, r5
 80183e0:	f7e7 ff62 	bl	80002a8 <__aeabi_dsub>
 80183e4:	4602      	mov	r2, r0
 80183e6:	460b      	mov	r3, r1
 80183e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80183ec:	f7e8 fa3e 	bl	800086c <__aeabi_ddiv>
 80183f0:	4632      	mov	r2, r6
 80183f2:	4604      	mov	r4, r0
 80183f4:	460d      	mov	r5, r1
 80183f6:	463b      	mov	r3, r7
 80183f8:	4640      	mov	r0, r8
 80183fa:	4649      	mov	r1, r9
 80183fc:	f7e8 f90c 	bl	8000618 <__aeabi_dmul>
 8018400:	4632      	mov	r2, r6
 8018402:	463b      	mov	r3, r7
 8018404:	f7e7 ff52 	bl	80002ac <__adddf3>
 8018408:	4602      	mov	r2, r0
 801840a:	460b      	mov	r3, r1
 801840c:	4620      	mov	r0, r4
 801840e:	4629      	mov	r1, r5
 8018410:	f7e7 ff4a 	bl	80002a8 <__aeabi_dsub>
 8018414:	4642      	mov	r2, r8
 8018416:	464b      	mov	r3, r9
 8018418:	f7e7 ff46 	bl	80002a8 <__aeabi_dsub>
 801841c:	4602      	mov	r2, r0
 801841e:	460b      	mov	r3, r1
 8018420:	2000      	movs	r0, #0
 8018422:	4939      	ldr	r1, [pc, #228]	; (8018508 <__ieee754_pow+0xa08>)
 8018424:	f7e7 ff40 	bl	80002a8 <__aeabi_dsub>
 8018428:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 801842c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8018430:	4602      	mov	r2, r0
 8018432:	460b      	mov	r3, r1
 8018434:	da2f      	bge.n	8018496 <__ieee754_pow+0x996>
 8018436:	4650      	mov	r0, sl
 8018438:	ec43 2b10 	vmov	d0, r2, r3
 801843c:	f000 f9c0 	bl	80187c0 <scalbn>
 8018440:	ec51 0b10 	vmov	r0, r1, d0
 8018444:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018448:	f7ff bbf1 	b.w	8017c2e <__ieee754_pow+0x12e>
 801844c:	4b2f      	ldr	r3, [pc, #188]	; (801850c <__ieee754_pow+0xa0c>)
 801844e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8018452:	429e      	cmp	r6, r3
 8018454:	f77f af0c 	ble.w	8018270 <__ieee754_pow+0x770>
 8018458:	4b2d      	ldr	r3, [pc, #180]	; (8018510 <__ieee754_pow+0xa10>)
 801845a:	440b      	add	r3, r1
 801845c:	4303      	orrs	r3, r0
 801845e:	d00b      	beq.n	8018478 <__ieee754_pow+0x978>
 8018460:	a325      	add	r3, pc, #148	; (adr r3, 80184f8 <__ieee754_pow+0x9f8>)
 8018462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018466:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801846a:	f7e8 f8d5 	bl	8000618 <__aeabi_dmul>
 801846e:	a322      	add	r3, pc, #136	; (adr r3, 80184f8 <__ieee754_pow+0x9f8>)
 8018470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018474:	f7ff bbdb 	b.w	8017c2e <__ieee754_pow+0x12e>
 8018478:	4622      	mov	r2, r4
 801847a:	462b      	mov	r3, r5
 801847c:	f7e7 ff14 	bl	80002a8 <__aeabi_dsub>
 8018480:	4642      	mov	r2, r8
 8018482:	464b      	mov	r3, r9
 8018484:	f7e8 fb4e 	bl	8000b24 <__aeabi_dcmpge>
 8018488:	2800      	cmp	r0, #0
 801848a:	f43f aef1 	beq.w	8018270 <__ieee754_pow+0x770>
 801848e:	e7e7      	b.n	8018460 <__ieee754_pow+0x960>
 8018490:	f04f 0a00 	mov.w	sl, #0
 8018494:	e718      	b.n	80182c8 <__ieee754_pow+0x7c8>
 8018496:	4621      	mov	r1, r4
 8018498:	e7d4      	b.n	8018444 <__ieee754_pow+0x944>
 801849a:	2000      	movs	r0, #0
 801849c:	491a      	ldr	r1, [pc, #104]	; (8018508 <__ieee754_pow+0xa08>)
 801849e:	f7ff bb8f 	b.w	8017bc0 <__ieee754_pow+0xc0>
 80184a2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80184a6:	f7ff bb8b 	b.w	8017bc0 <__ieee754_pow+0xc0>
 80184aa:	4630      	mov	r0, r6
 80184ac:	4639      	mov	r1, r7
 80184ae:	f7ff bb87 	b.w	8017bc0 <__ieee754_pow+0xc0>
 80184b2:	4693      	mov	fp, r2
 80184b4:	f7ff bb98 	b.w	8017be8 <__ieee754_pow+0xe8>
 80184b8:	00000000 	.word	0x00000000
 80184bc:	3fe62e43 	.word	0x3fe62e43
 80184c0:	fefa39ef 	.word	0xfefa39ef
 80184c4:	3fe62e42 	.word	0x3fe62e42
 80184c8:	0ca86c39 	.word	0x0ca86c39
 80184cc:	be205c61 	.word	0xbe205c61
 80184d0:	72bea4d0 	.word	0x72bea4d0
 80184d4:	3e663769 	.word	0x3e663769
 80184d8:	c5d26bf1 	.word	0xc5d26bf1
 80184dc:	3ebbbd41 	.word	0x3ebbbd41
 80184e0:	af25de2c 	.word	0xaf25de2c
 80184e4:	3f11566a 	.word	0x3f11566a
 80184e8:	16bebd93 	.word	0x16bebd93
 80184ec:	3f66c16c 	.word	0x3f66c16c
 80184f0:	5555553e 	.word	0x5555553e
 80184f4:	3fc55555 	.word	0x3fc55555
 80184f8:	c2f8f359 	.word	0xc2f8f359
 80184fc:	01a56e1f 	.word	0x01a56e1f
 8018500:	3fe00000 	.word	0x3fe00000
 8018504:	000fffff 	.word	0x000fffff
 8018508:	3ff00000 	.word	0x3ff00000
 801850c:	4090cbff 	.word	0x4090cbff
 8018510:	3f6f3400 	.word	0x3f6f3400
 8018514:	652b82fe 	.word	0x652b82fe
 8018518:	3c971547 	.word	0x3c971547

0801851c <__ieee754_sqrt>:
 801851c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018520:	4955      	ldr	r1, [pc, #340]	; (8018678 <__ieee754_sqrt+0x15c>)
 8018522:	ec55 4b10 	vmov	r4, r5, d0
 8018526:	43a9      	bics	r1, r5
 8018528:	462b      	mov	r3, r5
 801852a:	462a      	mov	r2, r5
 801852c:	d112      	bne.n	8018554 <__ieee754_sqrt+0x38>
 801852e:	ee10 2a10 	vmov	r2, s0
 8018532:	ee10 0a10 	vmov	r0, s0
 8018536:	4629      	mov	r1, r5
 8018538:	f7e8 f86e 	bl	8000618 <__aeabi_dmul>
 801853c:	4602      	mov	r2, r0
 801853e:	460b      	mov	r3, r1
 8018540:	4620      	mov	r0, r4
 8018542:	4629      	mov	r1, r5
 8018544:	f7e7 feb2 	bl	80002ac <__adddf3>
 8018548:	4604      	mov	r4, r0
 801854a:	460d      	mov	r5, r1
 801854c:	ec45 4b10 	vmov	d0, r4, r5
 8018550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018554:	2d00      	cmp	r5, #0
 8018556:	ee10 0a10 	vmov	r0, s0
 801855a:	4621      	mov	r1, r4
 801855c:	dc0f      	bgt.n	801857e <__ieee754_sqrt+0x62>
 801855e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8018562:	4330      	orrs	r0, r6
 8018564:	d0f2      	beq.n	801854c <__ieee754_sqrt+0x30>
 8018566:	b155      	cbz	r5, 801857e <__ieee754_sqrt+0x62>
 8018568:	ee10 2a10 	vmov	r2, s0
 801856c:	4620      	mov	r0, r4
 801856e:	4629      	mov	r1, r5
 8018570:	f7e7 fe9a 	bl	80002a8 <__aeabi_dsub>
 8018574:	4602      	mov	r2, r0
 8018576:	460b      	mov	r3, r1
 8018578:	f7e8 f978 	bl	800086c <__aeabi_ddiv>
 801857c:	e7e4      	b.n	8018548 <__ieee754_sqrt+0x2c>
 801857e:	151b      	asrs	r3, r3, #20
 8018580:	d073      	beq.n	801866a <__ieee754_sqrt+0x14e>
 8018582:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8018586:	07dd      	lsls	r5, r3, #31
 8018588:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801858c:	bf48      	it	mi
 801858e:	0fc8      	lsrmi	r0, r1, #31
 8018590:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8018594:	bf44      	itt	mi
 8018596:	0049      	lslmi	r1, r1, #1
 8018598:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 801859c:	2500      	movs	r5, #0
 801859e:	1058      	asrs	r0, r3, #1
 80185a0:	0fcb      	lsrs	r3, r1, #31
 80185a2:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80185a6:	0049      	lsls	r1, r1, #1
 80185a8:	2316      	movs	r3, #22
 80185aa:	462c      	mov	r4, r5
 80185ac:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80185b0:	19a7      	adds	r7, r4, r6
 80185b2:	4297      	cmp	r7, r2
 80185b4:	bfde      	ittt	le
 80185b6:	19bc      	addle	r4, r7, r6
 80185b8:	1bd2      	suble	r2, r2, r7
 80185ba:	19ad      	addle	r5, r5, r6
 80185bc:	0fcf      	lsrs	r7, r1, #31
 80185be:	3b01      	subs	r3, #1
 80185c0:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 80185c4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80185c8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80185cc:	d1f0      	bne.n	80185b0 <__ieee754_sqrt+0x94>
 80185ce:	f04f 0c20 	mov.w	ip, #32
 80185d2:	469e      	mov	lr, r3
 80185d4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80185d8:	42a2      	cmp	r2, r4
 80185da:	eb06 070e 	add.w	r7, r6, lr
 80185de:	dc02      	bgt.n	80185e6 <__ieee754_sqrt+0xca>
 80185e0:	d112      	bne.n	8018608 <__ieee754_sqrt+0xec>
 80185e2:	428f      	cmp	r7, r1
 80185e4:	d810      	bhi.n	8018608 <__ieee754_sqrt+0xec>
 80185e6:	2f00      	cmp	r7, #0
 80185e8:	eb07 0e06 	add.w	lr, r7, r6
 80185ec:	da42      	bge.n	8018674 <__ieee754_sqrt+0x158>
 80185ee:	f1be 0f00 	cmp.w	lr, #0
 80185f2:	db3f      	blt.n	8018674 <__ieee754_sqrt+0x158>
 80185f4:	f104 0801 	add.w	r8, r4, #1
 80185f8:	1b12      	subs	r2, r2, r4
 80185fa:	428f      	cmp	r7, r1
 80185fc:	bf88      	it	hi
 80185fe:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8018602:	1bc9      	subs	r1, r1, r7
 8018604:	4433      	add	r3, r6
 8018606:	4644      	mov	r4, r8
 8018608:	0052      	lsls	r2, r2, #1
 801860a:	f1bc 0c01 	subs.w	ip, ip, #1
 801860e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8018612:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8018616:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801861a:	d1dd      	bne.n	80185d8 <__ieee754_sqrt+0xbc>
 801861c:	430a      	orrs	r2, r1
 801861e:	d006      	beq.n	801862e <__ieee754_sqrt+0x112>
 8018620:	1c5c      	adds	r4, r3, #1
 8018622:	bf13      	iteet	ne
 8018624:	3301      	addne	r3, #1
 8018626:	3501      	addeq	r5, #1
 8018628:	4663      	moveq	r3, ip
 801862a:	f023 0301 	bicne.w	r3, r3, #1
 801862e:	106a      	asrs	r2, r5, #1
 8018630:	085b      	lsrs	r3, r3, #1
 8018632:	07e9      	lsls	r1, r5, #31
 8018634:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8018638:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 801863c:	bf48      	it	mi
 801863e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8018642:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8018646:	461c      	mov	r4, r3
 8018648:	e780      	b.n	801854c <__ieee754_sqrt+0x30>
 801864a:	0aca      	lsrs	r2, r1, #11
 801864c:	3815      	subs	r0, #21
 801864e:	0549      	lsls	r1, r1, #21
 8018650:	2a00      	cmp	r2, #0
 8018652:	d0fa      	beq.n	801864a <__ieee754_sqrt+0x12e>
 8018654:	02d6      	lsls	r6, r2, #11
 8018656:	d50a      	bpl.n	801866e <__ieee754_sqrt+0x152>
 8018658:	f1c3 0420 	rsb	r4, r3, #32
 801865c:	fa21 f404 	lsr.w	r4, r1, r4
 8018660:	1e5d      	subs	r5, r3, #1
 8018662:	4099      	lsls	r1, r3
 8018664:	4322      	orrs	r2, r4
 8018666:	1b43      	subs	r3, r0, r5
 8018668:	e78b      	b.n	8018582 <__ieee754_sqrt+0x66>
 801866a:	4618      	mov	r0, r3
 801866c:	e7f0      	b.n	8018650 <__ieee754_sqrt+0x134>
 801866e:	0052      	lsls	r2, r2, #1
 8018670:	3301      	adds	r3, #1
 8018672:	e7ef      	b.n	8018654 <__ieee754_sqrt+0x138>
 8018674:	46a0      	mov	r8, r4
 8018676:	e7bf      	b.n	80185f8 <__ieee754_sqrt+0xdc>
 8018678:	7ff00000 	.word	0x7ff00000

0801867c <fabs>:
 801867c:	ec51 0b10 	vmov	r0, r1, d0
 8018680:	ee10 2a10 	vmov	r2, s0
 8018684:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8018688:	ec43 2b10 	vmov	d0, r2, r3
 801868c:	4770      	bx	lr

0801868e <finite>:
 801868e:	ee10 3a90 	vmov	r3, s1
 8018692:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8018696:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801869a:	0fc0      	lsrs	r0, r0, #31
 801869c:	4770      	bx	lr

0801869e <matherr>:
 801869e:	2000      	movs	r0, #0
 80186a0:	4770      	bx	lr
 80186a2:	0000      	movs	r0, r0
 80186a4:	0000      	movs	r0, r0
	...

080186a8 <nan>:
 80186a8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80186b0 <nan+0x8>
 80186ac:	4770      	bx	lr
 80186ae:	bf00      	nop
 80186b0:	00000000 	.word	0x00000000
 80186b4:	7ff80000 	.word	0x7ff80000

080186b8 <rint>:
 80186b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80186ba:	ec51 0b10 	vmov	r0, r1, d0
 80186be:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80186c2:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80186c6:	2e13      	cmp	r6, #19
 80186c8:	460b      	mov	r3, r1
 80186ca:	ee10 4a10 	vmov	r4, s0
 80186ce:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 80186d2:	dc56      	bgt.n	8018782 <rint+0xca>
 80186d4:	2e00      	cmp	r6, #0
 80186d6:	da2b      	bge.n	8018730 <rint+0x78>
 80186d8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80186dc:	4302      	orrs	r2, r0
 80186de:	d023      	beq.n	8018728 <rint+0x70>
 80186e0:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80186e4:	4302      	orrs	r2, r0
 80186e6:	4254      	negs	r4, r2
 80186e8:	4314      	orrs	r4, r2
 80186ea:	0c4b      	lsrs	r3, r1, #17
 80186ec:	0b24      	lsrs	r4, r4, #12
 80186ee:	045b      	lsls	r3, r3, #17
 80186f0:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 80186f4:	ea44 0103 	orr.w	r1, r4, r3
 80186f8:	460b      	mov	r3, r1
 80186fa:	492f      	ldr	r1, [pc, #188]	; (80187b8 <rint+0x100>)
 80186fc:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8018700:	e9d1 6700 	ldrd	r6, r7, [r1]
 8018704:	4602      	mov	r2, r0
 8018706:	4639      	mov	r1, r7
 8018708:	4630      	mov	r0, r6
 801870a:	f7e7 fdcf 	bl	80002ac <__adddf3>
 801870e:	e9cd 0100 	strd	r0, r1, [sp]
 8018712:	463b      	mov	r3, r7
 8018714:	4632      	mov	r2, r6
 8018716:	e9dd 0100 	ldrd	r0, r1, [sp]
 801871a:	f7e7 fdc5 	bl	80002a8 <__aeabi_dsub>
 801871e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8018722:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8018726:	4639      	mov	r1, r7
 8018728:	ec41 0b10 	vmov	d0, r0, r1
 801872c:	b003      	add	sp, #12
 801872e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018730:	4a22      	ldr	r2, [pc, #136]	; (80187bc <rint+0x104>)
 8018732:	4132      	asrs	r2, r6
 8018734:	ea01 0702 	and.w	r7, r1, r2
 8018738:	4307      	orrs	r7, r0
 801873a:	d0f5      	beq.n	8018728 <rint+0x70>
 801873c:	0852      	lsrs	r2, r2, #1
 801873e:	4011      	ands	r1, r2
 8018740:	430c      	orrs	r4, r1
 8018742:	d00b      	beq.n	801875c <rint+0xa4>
 8018744:	ea23 0202 	bic.w	r2, r3, r2
 8018748:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801874c:	2e13      	cmp	r6, #19
 801874e:	fa43 f306 	asr.w	r3, r3, r6
 8018752:	bf0c      	ite	eq
 8018754:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8018758:	2400      	movne	r4, #0
 801875a:	4313      	orrs	r3, r2
 801875c:	4916      	ldr	r1, [pc, #88]	; (80187b8 <rint+0x100>)
 801875e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8018762:	4622      	mov	r2, r4
 8018764:	e9d5 4500 	ldrd	r4, r5, [r5]
 8018768:	4620      	mov	r0, r4
 801876a:	4629      	mov	r1, r5
 801876c:	f7e7 fd9e 	bl	80002ac <__adddf3>
 8018770:	e9cd 0100 	strd	r0, r1, [sp]
 8018774:	4622      	mov	r2, r4
 8018776:	462b      	mov	r3, r5
 8018778:	e9dd 0100 	ldrd	r0, r1, [sp]
 801877c:	f7e7 fd94 	bl	80002a8 <__aeabi_dsub>
 8018780:	e7d2      	b.n	8018728 <rint+0x70>
 8018782:	2e33      	cmp	r6, #51	; 0x33
 8018784:	dd07      	ble.n	8018796 <rint+0xde>
 8018786:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801878a:	d1cd      	bne.n	8018728 <rint+0x70>
 801878c:	ee10 2a10 	vmov	r2, s0
 8018790:	f7e7 fd8c 	bl	80002ac <__adddf3>
 8018794:	e7c8      	b.n	8018728 <rint+0x70>
 8018796:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 801879a:	f04f 32ff 	mov.w	r2, #4294967295
 801879e:	40f2      	lsrs	r2, r6
 80187a0:	4210      	tst	r0, r2
 80187a2:	d0c1      	beq.n	8018728 <rint+0x70>
 80187a4:	0852      	lsrs	r2, r2, #1
 80187a6:	4210      	tst	r0, r2
 80187a8:	bf1f      	itttt	ne
 80187aa:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 80187ae:	ea20 0202 	bicne.w	r2, r0, r2
 80187b2:	4134      	asrne	r4, r6
 80187b4:	4314      	orrne	r4, r2
 80187b6:	e7d1      	b.n	801875c <rint+0xa4>
 80187b8:	0802b648 	.word	0x0802b648
 80187bc:	000fffff 	.word	0x000fffff

080187c0 <scalbn>:
 80187c0:	b570      	push	{r4, r5, r6, lr}
 80187c2:	ec55 4b10 	vmov	r4, r5, d0
 80187c6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80187ca:	4606      	mov	r6, r0
 80187cc:	462b      	mov	r3, r5
 80187ce:	b9aa      	cbnz	r2, 80187fc <scalbn+0x3c>
 80187d0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80187d4:	4323      	orrs	r3, r4
 80187d6:	d03b      	beq.n	8018850 <scalbn+0x90>
 80187d8:	4b31      	ldr	r3, [pc, #196]	; (80188a0 <scalbn+0xe0>)
 80187da:	4629      	mov	r1, r5
 80187dc:	2200      	movs	r2, #0
 80187de:	ee10 0a10 	vmov	r0, s0
 80187e2:	f7e7 ff19 	bl	8000618 <__aeabi_dmul>
 80187e6:	4b2f      	ldr	r3, [pc, #188]	; (80188a4 <scalbn+0xe4>)
 80187e8:	429e      	cmp	r6, r3
 80187ea:	4604      	mov	r4, r0
 80187ec:	460d      	mov	r5, r1
 80187ee:	da12      	bge.n	8018816 <scalbn+0x56>
 80187f0:	a327      	add	r3, pc, #156	; (adr r3, 8018890 <scalbn+0xd0>)
 80187f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80187f6:	f7e7 ff0f 	bl	8000618 <__aeabi_dmul>
 80187fa:	e009      	b.n	8018810 <scalbn+0x50>
 80187fc:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8018800:	428a      	cmp	r2, r1
 8018802:	d10c      	bne.n	801881e <scalbn+0x5e>
 8018804:	ee10 2a10 	vmov	r2, s0
 8018808:	4620      	mov	r0, r4
 801880a:	4629      	mov	r1, r5
 801880c:	f7e7 fd4e 	bl	80002ac <__adddf3>
 8018810:	4604      	mov	r4, r0
 8018812:	460d      	mov	r5, r1
 8018814:	e01c      	b.n	8018850 <scalbn+0x90>
 8018816:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801881a:	460b      	mov	r3, r1
 801881c:	3a36      	subs	r2, #54	; 0x36
 801881e:	4432      	add	r2, r6
 8018820:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8018824:	428a      	cmp	r2, r1
 8018826:	dd0b      	ble.n	8018840 <scalbn+0x80>
 8018828:	ec45 4b11 	vmov	d1, r4, r5
 801882c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8018898 <scalbn+0xd8>
 8018830:	f000 f83c 	bl	80188ac <copysign>
 8018834:	a318      	add	r3, pc, #96	; (adr r3, 8018898 <scalbn+0xd8>)
 8018836:	e9d3 2300 	ldrd	r2, r3, [r3]
 801883a:	ec51 0b10 	vmov	r0, r1, d0
 801883e:	e7da      	b.n	80187f6 <scalbn+0x36>
 8018840:	2a00      	cmp	r2, #0
 8018842:	dd08      	ble.n	8018856 <scalbn+0x96>
 8018844:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8018848:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801884c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8018850:	ec45 4b10 	vmov	d0, r4, r5
 8018854:	bd70      	pop	{r4, r5, r6, pc}
 8018856:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801885a:	da0d      	bge.n	8018878 <scalbn+0xb8>
 801885c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8018860:	429e      	cmp	r6, r3
 8018862:	ec45 4b11 	vmov	d1, r4, r5
 8018866:	dce1      	bgt.n	801882c <scalbn+0x6c>
 8018868:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8018890 <scalbn+0xd0>
 801886c:	f000 f81e 	bl	80188ac <copysign>
 8018870:	a307      	add	r3, pc, #28	; (adr r3, 8018890 <scalbn+0xd0>)
 8018872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018876:	e7e0      	b.n	801883a <scalbn+0x7a>
 8018878:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801887c:	3236      	adds	r2, #54	; 0x36
 801887e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8018882:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8018886:	4620      	mov	r0, r4
 8018888:	4629      	mov	r1, r5
 801888a:	2200      	movs	r2, #0
 801888c:	4b06      	ldr	r3, [pc, #24]	; (80188a8 <scalbn+0xe8>)
 801888e:	e7b2      	b.n	80187f6 <scalbn+0x36>
 8018890:	c2f8f359 	.word	0xc2f8f359
 8018894:	01a56e1f 	.word	0x01a56e1f
 8018898:	8800759c 	.word	0x8800759c
 801889c:	7e37e43c 	.word	0x7e37e43c
 80188a0:	43500000 	.word	0x43500000
 80188a4:	ffff3cb0 	.word	0xffff3cb0
 80188a8:	3c900000 	.word	0x3c900000

080188ac <copysign>:
 80188ac:	ec51 0b10 	vmov	r0, r1, d0
 80188b0:	ee11 0a90 	vmov	r0, s3
 80188b4:	ee10 2a10 	vmov	r2, s0
 80188b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80188bc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80188c0:	ea41 0300 	orr.w	r3, r1, r0
 80188c4:	ec43 2b10 	vmov	d0, r2, r3
 80188c8:	4770      	bx	lr
	...

080188cc <_init>:
 80188cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80188ce:	bf00      	nop
 80188d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80188d2:	bc08      	pop	{r3}
 80188d4:	469e      	mov	lr, r3
 80188d6:	4770      	bx	lr

080188d8 <_fini>:
 80188d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80188da:	bf00      	nop
 80188dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80188de:	bc08      	pop	{r3}
 80188e0:	469e      	mov	lr, r3
 80188e2:	4770      	bx	lr
